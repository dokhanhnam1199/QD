```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Advanced heuristic for online bin packing, incorporating adaptive weighting,
    strategic randomness, and anticipatory penalties/bonuses.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return np.full_like(priorities, -1.0)

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item
    bin_capacity = bins_remain_cap.max()
    bins_utilization = (bin_capacity - bins_remain_cap[can_fit]) / bin_capacity

    # Waste Minimization: Emphasize bins with minimal remaining space after packing
    waste = remaining_after
    tightness = 1 / (waste + 0.0001)

    # Target Fill Level: Encourage bins to reach a target utilization
    target_fill_level = 0.8 * bin_capacity  # Adjusted target fill
    fill_level = bins_remain_cap[can_fit]
    fill_diff = np.abs(fill_level - target_fill_level)
    fill_score = np.exp(-fill_diff / (bin_capacity * 0.15))  # Tighter fill target

    # Dynamic Near-Full Management: Discourage filling near-full bins unless the item fits perfectly
    near_full_threshold = 0.15 * bin_capacity  # Adjusted near-full threshold
    is_near_full = remaining_after < near_full_threshold
    near_full_penalty = np.where(is_near_full, -0.9 * (item/bin_capacity), 0.0)  # Stronger penalty

    # Smaller Item Bonus: Reward placing small items into almost full bins
    small_item_threshold = bin_capacity * 0.2
    if item < small_item_threshold:
        almost_full_threshold = bin_capacity * 0.08
        almost_full_bonus = np.exp(-remaining_after / (almost_full_threshold + 0.0001))
    else:
        almost_full_bonus = 0.0

    # Larger Item Penalty: Discourage placing large items that leave very little space
    large_item_threshold = bin_capacity * 0.7
    if item > large_item_threshold:
        small_space_penalty = np.where(bins_remain_cap[can_fit] < (item + 0.15 * bin_capacity), -0.8 * (item/bin_capacity), 0.0)
    else:
        small_space_penalty = 0.0

    # Anticipatory Penalty: Penalize placements that lead to unusable fragments
    fragment_penalty = np.zeros_like(remaining_after)
    for i in range(len(remaining_after)):
        if 0 < remaining_after[i] < 0.05 * bin_capacity:
            fragment_penalty[i] = -0.5 * (item / bin_capacity)

    # Adaptive Weighting: Dynamically adjust weights based on item size and bin utilization
    item_size_factor = item / bin_capacity
    utilization_factor = np.mean(bins_utilization)

    tightness_weight = 0.4 * (1 - item_size_factor) * (1 + utilization_factor)
    fill_weight = 0.4 * (1 + item_size_factor) * (1 - utilization_factor)
    near_full_weight = 0.125
    small_item_weight = 0.05
    large_item_weight = 0.05
    fragment_weight = 0.025  # Weight for the fragment penalty

    # Strategic Randomness Injection: Introduce randomness scaled by item size and bin utilization
    randomness_scale = 0.01 * (1 + item_size_factor) * (1 - utilization_factor)
    randomness = np.random.normal(0, randomness_scale, len(valid_bins))

    priorities[valid_bins] = (tightness_weight * tightness +
                               fill_weight * fill_score +
                               near_full_weight * near_full_penalty +
                               small_item_weight * almost_full_bonus +
                               large_item_weight * small_space_penalty +
                               fragment_weight * fragment_penalty +
                               randomness)

    return priorities
```
