```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines wasted space minimization, fill ratio target and randomness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fit_within_capacity = bins_remain_cap >= item

    if np.any(fit_within_capacity):
        #Wasted space minimization
        wasted_space = bins_remain_cap[fit_within_capacity] - item
        priorities[fit_within_capacity] = 1.0 / (1e-6 + wasted_space)

        #Fill ratio target
        fill_ratios = item / bins_remain_cap[fit_within_capacity]
        target_fill = 0.8
        fill_ratio_priority = -np.abs(fill_ratios - target_fill)
        priorities[fit_within_capacity] += fill_ratio_priority * 0.1

        #Randomization to avoid local optima
        randomness = np.random.rand(np.sum(fit_within_capacity)) * 0.01
        priorities[fit_within_capacity] += randomness

    else:
        priorities = -np.inf * np.ones_like(priorities)
    return priorities
```
