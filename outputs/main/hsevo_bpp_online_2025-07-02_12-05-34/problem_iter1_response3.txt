```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can fit the item with minimal wasted space,
    while also discouraging filling bins to exactly full (to reduce edge cases later).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give a very negative priority to bins that can't fit the item
    priorities[bins_remain_cap < item] = -np.inf

    # Calculate wasted space if the item were placed in each bin
    wasted_space = bins_remain_cap - item

    # Assign a high priority to bins with small wasted space. Use a reciprocal function to
    # boost the priority of bins that are close to the item size.
    valid_bins = bins_remain_cap >= item
    priorities[valid_bins] = 1.0 / (wasted_space[valid_bins] + 0.01)  # Add small constant to avoid division by zero

    # Penalize bins that would become exactly full (risk of future inefficiency)
    exact_fit = wasted_space == 0
    priorities[exact_fit] = -1  # Significantly reduce the priority of exact fits

    return priorities
```
