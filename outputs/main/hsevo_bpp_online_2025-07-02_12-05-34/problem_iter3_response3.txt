```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can fit the item
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        # If no bins can fit, assign low priority to all (might need a new bin)
        return priorities

    # Calculate remaining space after placing the item in valid bins
    fit_score = bins_remain_cap[valid_bins] - item

    # Prioritize bins with tighter fit (smaller remaining space)
    priorities[valid_bins] = 1.0 / (fit_score + 0.0001)  # Avoid division by zero

    # Introduce a "balance" factor - prioritize bins that, after placing the item,
    # are closer to a target fill level (e.g., 75% full).  This encourages better
    # utilization without over-committing to a bin. The target fill level
    # can also be a parameter to tune adaptively.

    target_fill_level = 0.75 * bins_remain_cap.max()  # 75% of bin capacity
    balance_score = np.abs((bins_remain_cap[valid_bins] - item) - target_fill_level)
    priorities[valid_bins] += 1.0 / (balance_score + 0.0001)


    #Add a small randomness to avoid getting stuck in local optima
    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.01


    #Penalize bins that would become nearly full after placing the item, avoids very small remaining space.
    nearly_full_threshold = 0.1 * bins_remain_cap.max()
    nearly_full_bins = (bins_remain_cap[valid_bins] - item) < nearly_full_threshold
    priorities[valid_bins][nearly_full_bins] *= 0.5  # Reduce priority if nearly full


    return priorities
```
