```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculates bin priorities considering wasted space, fill target, and randomness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return -np.inf * np.ones_like(bins_remain_cap) # All invalid

    fit_score = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] = 1.0 / (fit_score + 0.0001)  # Waste minimization

    fill_percentage = (bins_remain_cap[valid_bins] - fit_score) / bins_remain_cap.max()
    target_fill = 0.75
    balance_factor = -abs(fill_percentage - target_fill) # Fill target
    priorities[valid_bins] += 0.5 * balance_factor

    near_full = fit_score < item * 0.05
    priorities[valid_bins][near_full] *= 0.5  # Penalize near full

    randomness = np.random.rand(np.sum(valid_bins)) * 0.01
    priorities[valid_bins] += randomness # Randomness

    return priorities
```
