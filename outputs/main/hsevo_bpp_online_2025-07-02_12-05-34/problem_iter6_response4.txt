```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can fit the item
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        # If no bins can fit, assign low priority to all (might need a new bin)
        return priorities

    # Calculate remaining space after placing the item in valid bins
    remaining_space = bins_remain_cap[valid_bins] - item

    # Fit score: prioritize bins with minimal wasted space
    fit_score = 1.0 / (remaining_space + 0.0001)  # Avoid division by zero

    # Fill level score: prioritize bins close to a target fill level (e.g., 75%)
    target_fill = bins_remain_cap.max() * 0.75
    fill_level_score = np.exp(-np.abs(bins_remain_cap[valid_bins] - target_fill) / (bins_remain_cap.max() * 0.2)) # Gaussian-like score

    # Small item bonus: if the item is small relative to the bin size, prioritize almost-full bins
    small_item_threshold = bins_remain_cap.max() * 0.2
    if item < small_item_threshold:
        almost_full_threshold = bins_remain_cap.max() * 0.1
        almost_full_bonus = (bins_remain_cap[valid_bins] > item) * np.exp(-remaining_space / almost_full_threshold)
    else:
        almost_full_bonus = 0

    # Combine scores with weights
    fit_weight = 0.6
    fill_weight = 0.3
    almost_full_weight = 0.1

    priorities[valid_bins] = (fit_weight * fit_score +
                                fill_weight * fill_level_score +
                                almost_full_weight * almost_full_bonus)

    return priorities
```
