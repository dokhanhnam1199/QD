```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines adaptive weighting, dynamic target fill, and intelligent stochasticity."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return np.full_like(priorities, -1.0)

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item
    bin_capacity = bins_remain_cap.max()
    bins_utilization = (bin_capacity - bins_remain_cap[can_fit]) / bin_capacity

    # 1. Waste Minimization
    waste = remaining_after
    inverse_waste = 1 / (waste + 0.0001)
    tightness = inverse_waste

    # 2. Dynamic Target Fill Level
    item_size_ratio = item / bin_capacity
    dynamic_target_fill = 0.75 * bin_capacity * (1 - 0.2 * item_size_ratio)
    fill_level = bins_remain_cap[can_fit]
    fill_diff = np.abs(fill_level - dynamic_target_fill)
    fill_score = np.exp(-fill_diff / (bin_capacity * 0.2))

    # 3. Near-Full Management with Dynamic Penalty
    near_full_threshold = 0.12 * bin_capacity
    is_near_full = remaining_after < near_full_threshold
    near_full_penalty = np.where(is_near_full, -0.9 * (item/bin_capacity), 0.0)

    # 4. Intelligent Stochasticity
    bin_similarity = np.std(bins_utilization)
    randomness_scale = 0.01 * (1 + item_size_ratio) * (1 - bin_similarity)
    randomness = np.random.normal(0, randomness_scale, len(valid_bins))

    # 5. Adaptive Weighting
    tightness_weight = 0.40
    fill_weight = 0.30
    near_full_weight = 0.30 # Increased weight
    
    priorities[valid_bins] = (tightness_weight * tightness +
                               fill_weight * fill_score +
                               near_full_weight * near_full_penalty +
                               randomness)
    return priorities
```
