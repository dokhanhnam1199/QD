```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Employing a combination of first-fit and best-fit characteristics,
    modulated by a factor reflecting the 'tightness' of fit. A bin with
    capacity exactly matching the item's size gets the highest priority.
    Also discourage bins that are only just large enough, prioritizing those
    that allow a reasonable margin after packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Heavily favor perfect fits
    perfect_fit_mask = bins_remain_cap == item
    priorities[perfect_fit_mask] = np.inf # Max priority if perfect fit
    
    # Filter out bins where the item doesn't fit
    incompatible_mask = bins_remain_cap < item
    priorities[incompatible_mask] = -np.inf # Min priority if cannot fit

    # Calculate the "waste" after putting the item in
    waste = bins_remain_cap - item
    
    # Reward smaller waste, but not *too* small. We want *some* buffer.
    # The more available cap beyond just the item size is a little better.
    # Using log to prevent overflowing if we accidentally provide enormous bins.
    valid_bins_mask = ~incompatible_mask & ~perfect_fit_mask

    if np.any(valid_bins_mask):

        priorities[valid_bins_mask] = np.log(bins_remain_cap[valid_bins_mask]/(waste[valid_bins_mask] + 1e-6) * (1 / (waste[valid_bins_mask] + 1e-6))) # Log to stablilize if there are extremely small wastes. The reciprocal reduces small wastes
        # Normalize the values
        priorities[valid_bins_mask] = (priorities[valid_bins_mask] - np.min(priorities[valid_bins_mask])) / (np.max(priorities[valid_bins_mask]) - np.min(priorities[valid_bins_mask]))

    return priorities
```
