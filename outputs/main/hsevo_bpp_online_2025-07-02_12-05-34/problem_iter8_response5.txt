```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines waste minimization, target fill ratio, and adaptive penalty
    for near-full bins with a touch of randomness.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf
    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        wasted_space = bins_remain_cap[can_fit] - item
        priorities[can_fit] = -wasted_space  # Minimize waste

        fill_ratio = (bins_remain_cap[can_fit] - wasted_space) / bins_remain_cap[can_fit]
        target_ratio = 0.75  # Adjust target fill based on observation
        priorities[can_fit] += 5.0 * np.exp(-((fill_ratio - target_ratio)**2) / 0.02)

        # Adaptive near-full penalty. More sensitive as bins get smaller.
        remaining_after_add = bins_remain_cap[can_fit] - item
        max_cap = bins_remain_cap.max()
        near_full_threshold = 0.1 * max_cap
        penalty_strength = np.clip((near_full_threshold - remaining_after_add) / near_full_threshold, 0, 1)
        priorities[can_fit] -= 0.5 * penalty_strength  # Scale penalty by nearness to threshold.

        # Small randomness.
        priorities[can_fit] += np.random.normal(0, 0.01, size=np.sum(can_fit))

    return priorities
```
