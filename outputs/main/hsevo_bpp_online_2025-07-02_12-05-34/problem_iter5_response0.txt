```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste, fill level, and a small amount of randomization."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return np.full_like(bins_remain_cap, float('-inf'))

    fit_score = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] = 1.0 / (fit_score + 0.0001)

    fill_percentage = bins_remain_cap[valid_bins] / bins_remain_cap.max()
    priorities[valid_bins] += (1 - fill_percentage) * 2

    empty_threshold = 0.2 * bins_remain_cap.max()
    too_empty = (fit_score > empty_threshold)
    priorities[valid_bins][too_empty] *= 0.5
    
    target_fill = 0.75 * bins_remain_cap.max()
    balance_factor = np.abs(bins_remain_cap[valid_bins] - target_fill)
    priorities[valid_bins] += 1.0 / (balance_factor + 0.0001)
    
    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.1  # Small randomness

    return priorities
```
