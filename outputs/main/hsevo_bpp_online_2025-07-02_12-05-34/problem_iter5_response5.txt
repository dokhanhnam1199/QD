```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, target fill, and full bin penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    remaining_space = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] = 1.0 / (remaining_space + 0.0001)

    target_capacity = 0.75 * bins_remain_cap.max()
    capacity_diff = np.abs(bins_remain_cap[valid_bins] - target_capacity)
    priorities[valid_bins] += 0.5 / (capacity_diff + 0.0001)

    nearly_full_threshold = 0.1 * bins_remain_cap.max()
    nearly_full_penalty = (remaining_space < nearly_full_threshold) * 0.75
    priorities[valid_bins] -= nearly_full_penalty

    return priorities
```
