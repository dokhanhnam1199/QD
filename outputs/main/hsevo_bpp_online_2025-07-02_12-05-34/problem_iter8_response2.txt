```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on tightness, target fill, and waste."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        priorities[:] = np.random.rand(len(priorities)) * 0.0001
        return priorities

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item

    # Tightness score
    tightness = 1 / (remaining_after + 0.0001)

    # Target fill level score
    target_fill = bins_remain_cap.max() * 0.75
    fill_level_diff = np.abs(bins_remain_cap[can_fit] - target_fill)
    fill_level_score = 1 / (fill_level_diff + 0.0001)

    # Waste minimization score
    waste_threshold = bins_remain_cap.max() * 0.25
    waste_score = np.where(remaining_after > waste_threshold, 0.1, 1.0)

    # Adaptive weighting based on the number of valid bins
    num_valid = np.sum(can_fit)
    if num_valid > 5:
        tightness_weight = 0.6
        fill_weight = 0.3
        waste_weight = 0.1
    else:
        tightness_weight = 0.4
        fill_weight = 0.4
        waste_weight = 0.2

    priorities[valid_bins] = (tightness_weight * tightness +
                               fill_weight * fill_level_score +
                               waste_weight * waste_score)
    return priorities
```
