```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines adaptive weighting, strategic randomness, and anticipatory penalties."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return np.full_like(priorities, -1.0)

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item
    bin_capacity = bins_remain_cap.max()
    bins_utilization = (bin_capacity - bins_remain_cap[can_fit]) / bin_capacity

    # Waste Minimization (Focus on tightness)
    waste = remaining_after
    tightness = 1 / (waste + 0.0001)

    # Target Fill Level (Emphasis on achieving target)
    target_fill_level = 0.75 * bin_capacity
    fill_level = bins_remain_cap[can_fit]
    fill_diff = np.abs(fill_level - target_fill_level)
    fill_score = np.exp(-fill_diff / (bin_capacity * 0.2))

    # Anticipatory Near-Full Penalty (Stronger penalty, scaled by item size)
    near_full_threshold = 0.1 * bin_capacity
    is_near_full = remaining_after < near_full_threshold
    near_full_penalty = np.where(is_near_full, -0.95 * (item / bin_capacity), 0.0)

    # Adaptive Weighting (Item size & utilization)
    item_size_factor = item / bin_capacity
    utilization_factor = np.mean(bins_utilization)
    learning_rate = 0.1

    tightness_weight = 0.4
    fill_weight = 0.35
    near_full_weight = 0.25

    tightness_weight += learning_rate * (1 - item_size_factor) * (1 + utilization_factor) - tightness_weight
    fill_weight += learning_rate * (1 + item_size_factor) * (1 - utilization_factor) - fill_weight

    # Strategic Randomness (Controlled, decays slower for smaller items)
    randomness_scale = 0.015 * (1 + item_size_factor) * (1 - utilization_factor)
    randomness = np.random.normal(0, randomness_scale, len(valid_bins))

    priorities[valid_bins] = (tightness_weight * tightness +
                               fill_weight * fill_score +
                               near_full_weight * near_full_penalty +
                               randomness)

    return priorities
```
