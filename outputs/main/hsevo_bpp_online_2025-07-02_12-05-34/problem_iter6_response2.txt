```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can actually fit the item
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        # If no bins can fit, assign a very low priority. Still allow assignment.
        return priorities

    # Calculate remaining space after placing the item in valid bins
    fit_score = bins_remain_cap[valid_bins] - item

    # Primary Objective: Minimize wasted space (smaller remaining space = higher priority)
    space_priority = 1.0 / (fit_score + 0.0001)

    # Secondary Objective: Fill bins to a target level (e.g., 75% full).
    target_fill = bins_remain_cap.max() * 0.75
    fill_diff = np.abs(bins_remain_cap[valid_bins] - target_fill)
    fill_priority = 1.0 / (fill_diff + 0.0001)

    # Tertiary Objective: Avoid bins that will become almost full after adding the item.
    almost_full_threshold = bins_remain_cap.max() * 0.95
    almost_full = (bins_remain_cap[valid_bins] - item) < (bins_remain_cap.max() - almost_full_threshold)
    almost_full_penalty = np.zeros_like(space_priority)
    almost_full_penalty[almost_full] = -0.5  # Negative priority if it becomes almost full

    # Adaptive Weighting: Adjust weights based on overall fill level of bins.
    average_fill = np.mean(bins_remain_cap) / bins_remain_cap.max()

    space_weight = 0.6 if average_fill < 0.5 else 0.4 # More emphasis on space when bins are less full.
    fill_weight = 0.4 if average_fill < 0.5 else 0.6 # More emphasis on target fill when bins are less full.
    almost_full_weight = 0.1  # Keep this weight low, as it's just a penalty.

    # Combine priorities with weights. Vectorized operations for efficiency
    combined_priority = (space_weight * space_priority +
                         fill_weight * fill_priority +
                         almost_full_weight * almost_full_penalty)

    priorities[valid_bins] = combined_priority

    return priorities
```
