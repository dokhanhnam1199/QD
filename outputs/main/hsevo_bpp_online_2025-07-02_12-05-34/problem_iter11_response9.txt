```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, target fill, near-full penalty, and randomness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return priorities

    # Waste minimization
    waste = bins_remain_cap[can_fit] - item
    priorities[can_fit] = 1.0 / (1e-6 + waste)

    # Target fill level
    max_bin_cap = np.max(bins_remain_cap)
    target_fill = 0.8 * max_bin_cap
    fill_diff = np.abs(bins_remain_cap[can_fit] - target_fill)
    fill_priority = np.exp(-fill_diff / max_bin_cap)
    priorities[can_fit] += fill_priority * 0.1

    # Near-full penalty
    nearly_full_threshold = 0.1 * max_bin_cap
    nearly_full = bins_remain_cap < nearly_full_threshold
    priorities[nearly_full] *= 0.5

    # Randomness
    randomness = np.random.rand(np.sum(can_fit)) * 0.01
    priorities[can_fit] += randomness

    return priorities
```
