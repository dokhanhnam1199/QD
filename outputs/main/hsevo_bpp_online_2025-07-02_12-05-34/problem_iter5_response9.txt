```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering wasted space, target fill, and penalizes near-full bins."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return -np.inf * np.ones_like(bins_remain_cap)

    remaining_space = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] = 1.0 / (remaining_space + 1e-6)  # Minimize waste

    target_capacity = 0.75 * np.max(bins_remain_cap)
    capacity_diff = np.abs(bins_remain_cap[valid_bins] - target_capacity)
    priorities[valid_bins] += 0.5 / (capacity_diff + 1e-6)  # Target fill

    nearly_full_threshold = 0.1 * np.max(bins_remain_cap)
    nearly_full_penalty = (remaining_space < nearly_full_threshold) * 0.75
    priorities[valid_bins] -= nearly_full_penalty  # Penalize near-full

    return priorities
```
