import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                target_fill_level_ratio: float = 0.8390460441477953,
                fill_score_decay_rate: float = 0.259781593915115,
                near_full_threshold_ratio: float = 0.1349045276484518,
                near_full_penalty_factor: float = 0.6812432534511782,
                tightness_weight_base: float = 0.552430432612246,
                fill_weight_base: float = 0.5947519703751565,
                near_full_weight: float = 0.2995931265051428,
                randomness_scale_factor: float = 0.009772738194749803,
                waste_epsilon: float = 0.00047814453366091706) -> np.ndarray:
    """Combines adaptive weights, dynamic penalties, and decaying randomness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item
    bin_capacity = bins_remain_cap.max()

    if not np.any(can_fit):
        return np.full_like(priorities, -1.0)

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item
    bins_utilization = (bin_capacity - bins_remain_cap[can_fit]) / bin_capacity

    # Waste Minimization
    waste = remaining_after
    tightness = 1 / (waste + waste_epsilon)

    # Target Fill Level
    target_fill_level = target_fill_level_ratio * bin_capacity
    fill_level = bins_remain_cap[can_fit]
    fill_diff = np.abs(fill_level - target_fill_level)
    fill_score = np.exp(-fill_diff / (bin_capacity * fill_score_decay_rate))

    # Dynamic Near-Full Management
    near_full_threshold = near_full_threshold_ratio * bin_capacity
    is_near_full = remaining_after < near_full_threshold
    near_full_penalty = np.where(is_near_full, -near_full_penalty_factor * (item / bin_capacity), 0.0)

    # Adaptive Weighting: item size & bin utilization
    item_size_factor = item / bin_capacity
    utilization_factor = np.mean(bins_utilization)

    tightness_weight = tightness_weight_base * (1 - item_size_factor) * (1 + utilization_factor)
    fill_weight = fill_weight_base * (1 + item_size_factor) * (1 - utilization_factor)
    near_full_weight = near_full_weight

    # Decaying Stochasticity:
    randomness_scale = randomness_scale_factor / (1 + item_size_factor)
    randomness = np.random.normal(0, randomness_scale, len(valid_bins))

    priorities[valid_bins] = (tightness_weight * tightness +
                               fill_weight * fill_score +
                               near_full_weight * near_full_penalty +
                               randomness)

    return priorities
