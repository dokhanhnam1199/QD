```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    A manifestation of my electrical intuition, harnessing resonance for optimal bin packing!

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Find bins that can fit the item
    can_fit = bins_remain_cap >= item

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize bins that can fit the item
    if np.any(can_fit):
        # Calculate the wasted space if the item is placed in the bin. Prioritize fitting in snuggly.
        wasted_space = bins_remain_cap - item
        # Encourage using bins that provide minimal wastage by inverting.
        priorities[can_fit] = 1.0 / (wasted_space[can_fit] + 0.0001) # Prevent division by zero.

        # Amplifying resonance, enhancing difference
        # Make bins which has closest waste value higher priority.
        min_wasted_space = np.min(wasted_space[can_fit])
        priorities[can_fit] += 10.0 * np.exp(-5.0 * (wasted_space[can_fit] - min_wasted_space))

        # Balance utilization
        bins_utilization = (bins_remain_cap[can_fit] - wasted_space[can_fit]) / bins_remain_cap[can_fit]
        priorities[can_fit] += bins_utilization

    # If no bin can fit the item, return all zero priorities, will raise error, handled outside.
    # This mimics circuit overload behavior.

    return priorities
```
