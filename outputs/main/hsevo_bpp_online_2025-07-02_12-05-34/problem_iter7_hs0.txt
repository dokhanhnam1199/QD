import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                fit_score_epsilon: float = 0.0003853658540619837,
                target_fill_percentage: float = 0.5859244590159338,
                fill_diff_epsilon: float = 0.0009215116635558238,
                randomness_magnitude: float = 0.1637420679096481,
                nearly_full_threshold: float = 0.0814747079480746,
                nearly_full_penalty: float = 0.6517197032872168) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        fit_score_epsilon: Small value to avoid division by zero when calculating fit score priority.
        target_fill_percentage: Target fill level percentage (e.g., 0.75 for 75%).
        fill_diff_epsilon: Small value to avoid division by zero when calculating fill difference priority.
        randomness_magnitude: Magnitude of randomness to add to priorities.
        nearly_full_threshold: Threshold (as a fraction of max bin capacity) below which a bin is considered nearly full.
        nearly_full_penalty: Factor by which to reduce the priority of nearly full bins.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can actually fit the item
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        # If no bins can fit, assign low priority to all (might need a new bin)
        return priorities

    # Calculate remaining space after placing the item in valid bins
    fit_score = bins_remain_cap[valid_bins] - item

    # Prioritize bins with smaller remaining space (best fit)
    priorities[valid_bins] = 1.0 / (fit_score + fit_score_epsilon)

    # Prioritize bins that are close to a target fill level. Let's target 75%
    target_fill = bins_remain_cap.max() * target_fill_percentage  # Aiming for 75% full after placement
    fill_diff = np.abs(bins_remain_cap[valid_bins] - target_fill - item)
    priorities[valid_bins] += 1.0 / (fill_diff + fill_diff_epsilon)

    # Introduce a small amount of randomness to explore different options
    randomness = np.random.rand(np.sum(valid_bins)) * randomness_magnitude
    priorities[valid_bins] += randomness

    # Penalize bins that will become nearly full after placing the item (e.g., > 95%) to avoid creating nearly-full bins that are hard to fill.
    nearly_full = (bins_remain_cap[valid_bins] - item) < (bins_remain_cap.max() * nearly_full_threshold)
    priorities[valid_bins][nearly_full] *= nearly_full_penalty  # Reduce priority if nearly full

    return priorities
