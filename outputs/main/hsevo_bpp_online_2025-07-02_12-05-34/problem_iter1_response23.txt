```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Aims to balance bin utilization and avoid overfilling.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, capacity in enumerate(bins_remain_cap):
        if capacity < item:
            priorities[i] = -np.inf  # Cannot fit, lowest priority
        else:
            # Calculate the fill ratio if the item is placed in the bin
            fill_ratio = item / capacity
            # Heuristic 1: Prefer bins that can be filled reasonably well, but not perfectly
            # Avoid bins that are nearly empty or nearly full after adding the item
            priority_fill_ratio = -abs(fill_ratio - 0.6) # Closer to 0.6 the better, can tune.

            # Heuristic 2: Consider the remaining capacity after placing the item.
            remaining_capacity = capacity - item
            priority_remaining_capacity = remaining_capacity  # Prefer bins with higher remaining capacity, to accommodate future items.

            # Heuristic 3: Penalize bins with capacity close to the item size.
            if capacity <= 1.1*item:
                priority_close_capacity = -10 # strongly penalize to avoid tight fills.
            else:
                priority_close_capacity = 0

            # Combine the heuristics - prioritize based on a weighted sum.
            priorities[i] = priority_fill_ratio + 0.5 * priority_remaining_capacity + priority_close_capacity

    return priorities
```
