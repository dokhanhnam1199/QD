```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines waste minimization, target fill, adaptive weighting,
    edge case handling, stochasticity, and bin diversity for improved bin packing.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return np.full_like(priorities, -1.0)

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item
    bin_capacity = bins_remain_cap.max()

    # Waste Minimization
    waste = remaining_after
    tightness = 1 / (waste + 0.0001)

    # Target Fill Level
    target_fill_level = 0.75 * bin_capacity
    fill_level = bins_remain_cap[can_fit]
    fill_diff = np.abs(fill_level - target_fill_level)
    fill_score = np.exp(-fill_diff / (bin_capacity * 0.2))

    # Near-Full Penalty
    near_full_threshold = 0.1 * bin_capacity
    near_full_penalty = np.where(remaining_after < near_full_threshold, -0.7, 0.0)

    # Small Item Bonus
    small_item_threshold = bin_capacity * 0.2
    if item < small_item_threshold:
        almost_full_threshold = bin_capacity * 0.1
        almost_full_bonus = np.exp(-remaining_after / (almost_full_threshold + 0.0001))
    else:
        almost_full_bonus = 0

    # Large Item Penalty
    large_item_threshold = bin_capacity * 0.8
    if item > large_item_threshold:
        small_space_penalty = np.where(bins_remain_cap[can_fit] < (item + 0.1 * bin_capacity), -0.6, 0.0)
    else:
        small_space_penalty = 0.0

    # Adaptive Weighting (Dynamically adjust based on item size and bin states)
    item_size_factor = item / bin_capacity  # Normalize item size
    tightness_weight = 0.4 * (1 - item_size_factor) # Smaller items, prioritize tightness
    fill_weight = 0.3 * (1 + item_size_factor)   # Larger items, prioritize target fill
    near_full_weight = 0.2
    small_item_weight = 0.1
    large_item_weight = 0.1

    # Bin Diversity Encouragement: Penalize bins with similar fill levels to promote variance
    fill_level_std = np.std(bins_remain_cap)
    diversity_bonus = np.exp(-np.abs(bins_remain_cap[can_fit] - np.mean(bins_remain_cap)) / (fill_level_std + 0.0001)) if fill_level_std > 0.01 else 0.0
    diversity_weight = 0.05

    # Stochasticity (Reduced for more stability, but still present)
    randomness = np.random.normal(0, 0.005, len(valid_bins))

    priorities[valid_bins] = (tightness_weight * tightness +
                               fill_weight * fill_score +
                               near_full_weight * near_full_penalty +
                               small_item_weight * almost_full_bonus +
                               large_item_weight * small_space_penalty +
                               diversity_weight * diversity_bonus +
                               randomness)

    return priorities
```
