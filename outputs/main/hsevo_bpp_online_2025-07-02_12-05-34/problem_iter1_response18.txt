```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Initialize priorities with a default low value
    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf

    # Identify bins that can accommodate the item
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):  # Check if there are any bins where the item can fit

        # Calculate the waste if the item is placed in each valid bin
        waste = bins_remain_cap[valid_bins] - item

        # Heuristic 1: Minimize Waste (First-Fit Decreasing adaptation):
        #   Prioritize bins with the least waste.  This attempts to leave
        #   bins full to allow for the insertion of larger subsequent items.
        priorities[valid_bins] = -waste

        # Heuristic 2: Fill percentage, to avoid large wastes.  This encourages utilization.
        fill_percentage = item / bins_remain_cap[valid_bins]
        priorities[valid_bins] += fill_percentage

        # Heuristic 3: Moderate bin utilization before favoring near-full bins
        #   This helps in avoiding creating too many almost-empty bins
        #   when early items are small.  This acts as a slight balancing factor.
        priorities[valid_bins] += (bins_remain_cap[valid_bins] > 0.5) * 0.1  # Small bonus

        #If the item is larger than half of bin's capacity then strongly prioritise them for balancing load
        priorities[valid_bins] += (item > 0.5) * (bins_remain_cap[valid_bins]/bins_remain_cap[valid_bins].max()) * 0.2
        # Heuristic 4: If several bins has minimum waste, try to choose bin with lowest index.
        #   It will help to have similar results in similar circumstances
    else:
        # If no bins can fit the item, return very small priorities
        pass

    return priorities
```
