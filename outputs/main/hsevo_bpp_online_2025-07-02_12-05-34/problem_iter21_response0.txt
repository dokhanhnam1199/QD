```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced heuristic for online bin packing: adaptive weights, dynamic near-full,
    item size considerations, strategic randomness, and anticipatory penalties.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return np.full_like(priorities, -1.0)

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item
    bin_capacity = bins_remain_cap.max()
    bins_utilization = (bin_capacity - bins_remain_cap[can_fit]) / bin_capacity

    # Waste Minimization (focus on volume of unused space)
    waste = remaining_after
    tightness = 1 / (waste + 0.0001)

    # Target Fill Level (aim for at least 80% full before opening new bin)
    target_fill_level = 0.80 * bin_capacity
    fill_level = bins_remain_cap[can_fit]
    fill_diff = np.abs(fill_level - target_fill_level)
    fill_score = np.exp(-fill_diff / (bin_capacity * 0.2))

    # Dynamic Near-Full Management (penalize based on specific amount of space)
    near_full_threshold = 0.12 * bin_capacity
    is_near_full = remaining_after < near_full_threshold
    near_full_penalty = np.where(is_near_full, -0.9 * (1 - (remaining_after / near_full_threshold)) * (item/bin_capacity), 0.0)  # Stronger penalty when closer to near_full

    # Smaller Item Bonus (if item fits nearly perfectly into a near-full bin)
    small_item_threshold = bin_capacity * 0.25
    if item < small_item_threshold:
        almost_full_threshold = bin_capacity * 0.08  # More aggressive almost_full_threshold
        almost_full_bonus = np.exp(-remaining_after / (almost_full_threshold + 0.0001))
    else:
        almost_full_bonus = 0.0

    # Larger Item Penalty (if placing it leaves very little space, anticipatory)
    large_item_threshold = bin_capacity * 0.75
    if item > large_item_threshold:
        small_space_threshold = 0.1 * bin_capacity # more aggressive small space threshold
        small_space_penalty = np.where(remaining_after < small_space_threshold, -0.8 * (item/bin_capacity) * (1 - (remaining_after/small_space_threshold)), 0.0)
    else:
        small_space_penalty = 0.0

    # Anticipatory penalty: Check if remaining space is useless for smaller items
    useless_space_threshold = bin_capacity * 0.05
    potential_waste = np.where((remaining_after > 0) & (remaining_after < useless_space_threshold), -0.5 * (remaining_after / bin_capacity), 0.0) # only penalize if reaminder is > 0
    # Adaptive Weighting (based on item size, bin utilization, and a global fill ratio)
    item_size_factor = item / bin_capacity
    utilization_factor = np.mean(bins_utilization)
    global_fill_ratio = np.mean((bin_capacity - bins_remain_cap) / bin_capacity)  # Track overall fill level

    tightness_weight = 0.35 * (1 - item_size_factor) * (1 + utilization_factor) * (1 + global_fill_ratio)
    fill_weight = 0.30 * (1 + item_size_factor) * (1 - utilization_factor) * (1 - global_fill_ratio)
    near_full_weight = 0.15
    small_item_weight = 0.1
    large_item_weight = 0.05
    waste_space_weight = 0.05

    # Strategic Randomness (tie-breaking and score perturbation, scaled adaptively)
    randomness_scale = 0.02 * (1 + item_size_factor) * (1 - utilization_factor) * (1-global_fill_ratio)
    randomness = np.random.normal(0, randomness_scale, len(valid_bins))

    # Prioritize bins with identical scores randomly
    identical_score_indices = np.where(np.isclose(np.std(bins_remain_cap[can_fit]), 0))[0]
    if len(identical_score_indices) > 1:
        random_choice = np.random.choice(identical_score_indices)
        priorities[valid_bins[random_choice]] += 0.01

    priorities[valid_bins] = (tightness_weight * tightness +
                               fill_weight * fill_score +
                               near_full_weight * near_full_penalty +
                               small_item_weight * almost_full_bonus +
                               large_item_weight * small_space_penalty +
                               waste_space_weight * potential_waste +
                               randomness)

    return priorities
```
