```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function combines several heuristics inspired by physics:
    1.  **Inverse Capacity Difference:** Bins with remaining capacity closer to the item size are preferred. Think of it as a potential energy well where the item prefers to settle.
    2.  **Boltzmann Distribution (Temperature):** Introduce a "temperature" parameter to control the exploration vs. exploitation.  Higher temperature flattens the priorities, encouraging exploration of less-full bins. Lower temperature makes the decision more deterministic towards near-fit bins.
    3.  **Gravitational Potential:** A slight preference for bins that are already somewhat full (lower remaining capacity) to consolidate items and free up entirely empty bins. This is a weak attraction to existing "mass."  But only applicable if item fits!
    4.  **Safety Margin:** A small penalty if the item *barely* fits, avoiding extremely tight packs that might cause issues later.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    temperature = 0.5 # Tunable parameter, controls exploration
    gravity = 0.1 #Tunable parameter, strength of gravitational attraction

    #Inverse capacity difference, with Boltzmann distribution applied
    cap_diff = np.abs(bins_remain_cap - item)
    boltzmann_factor = np.exp(-cap_diff / temperature)

    #Gravitational Potential (only apply to bins where the item *fits*)
    gravitational_potential = np.where(bins_remain_cap >= item, gravity / (bins_remain_cap + 1e-9), 0) #avoid zero div.

    #Safety Margin: Slightly penalize near fits
    near_fit_penalty = np.where(np.logical_and(bins_remain_cap >= item, bins_remain_cap < (item + 0.1)), -0.2, 0) # slightly penalise if within 0.1 of item size.

    #Combine the heuristics
    priorities = boltzmann_factor + gravitational_potential + near_fit_penalty


    return priorities
```
