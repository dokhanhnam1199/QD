```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on tightness, fullness, and balance to target fill level."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return priorities

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item

    # Tightness score: Prioritize tighter fits
    tightness = 1 / (remaining_after + 0.0001)

    # Fullness score: Prioritize fuller bins
    fullness = 1 - (bins_remain_cap[can_fit] / bins_remain_cap.max())

    # Balance score: Prioritize bins close to target fill level
    target_fill_level = 0.75 * bins_remain_cap.max()
    balance_score = np.abs(remaining_after - target_fill_level)
    balance = 1 / (balance_score + 0.0001)
    # Combine scores with weights
    priorities[valid_bins] = (0.4 * tightness) + (0.3 * fullness) + (0.3 * balance)

    return priorities
```
