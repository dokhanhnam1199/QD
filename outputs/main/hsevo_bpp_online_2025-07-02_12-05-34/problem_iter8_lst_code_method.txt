{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can actually fit the item\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        # If no bins can fit, assign low priority to all (might need a new bin)\n        return priorities\n\n    # Calculate remaining space after placing the item in valid bins\n    fit_score = bins_remain_cap[valid_bins] - item\n\n    # Prioritize bins with smaller remaining space (best fit)\n    priorities[valid_bins] = 1.0 / (fit_score + 0.0001)\n\n    # Prioritize bins that are close to a target fill level. Let's target 75%\n    target_fill = bins_remain_cap.max() * 0.25  # Aiming for 75% full after placement\n    fill_diff = np.abs(bins_remain_cap[valid_bins] - target_fill - item)\n    priorities[valid_bins] += 1.0 / (fill_diff + 0.0001)\n\n    # Introduce a small amount of randomness to explore different options\n    randomness = np.random.rand(np.sum(valid_bins)) * 0.1\n    priorities[valid_bins] += randomness\n\n    # Penalize bins that will become nearly full after placing the item (e.g., > 95%) to avoid creating nearly-full bins that are hard to fill.\n    nearly_full = (bins_remain_cap[valid_bins] - item) < (bins_remain_cap.max() * 0.05)\n    priorities[valid_bins][nearly_full] *= 0.5  # Reduce priority if nearly full\n\n    return priorities\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can fit the item\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        # If no bins can fit, assign low priority to all (might need a new bin)\n        return priorities\n\n    # Calculate remaining space after placing the item in valid bins\n    remaining_space = bins_remain_cap[valid_bins] - item\n\n    # Fit score: prioritize bins with minimal wasted space\n    fit_score = 1.0 / (remaining_space + 0.0001)  # Avoid division by zero\n\n    # Fill level score: prioritize bins close to a target fill level (e.g., 75%)\n    target_fill = bins_remain_cap.max() * 0.75\n    fill_level_score = np.exp(-np.abs(bins_remain_cap[valid_bins] - target_fill) / (bins_remain_cap.max() * 0.2)) # Gaussian-like score\n\n    # Small item bonus: if the item is small relative to the bin size, prioritize almost-full bins\n    small_item_threshold = bins_remain_cap.max() * 0.2\n    if item < small_item_threshold:\n        almost_full_threshold = bins_remain_cap.max() * 0.1\n        almost_full_bonus = (bins_remain_cap[valid_bins] > item) * np.exp(-remaining_space / almost_full_threshold)\n    else:\n        almost_full_bonus = 0\n\n    # Combine scores with weights\n    fit_weight = 0.6\n    fill_weight = 0.3\n    almost_full_weight = 0.1\n\n    priorities[valid_bins] = (fit_weight * fit_score +\n                                fill_weight * fill_level_score +\n                                almost_full_weight * almost_full_bonus)\n\n    return priorities\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on tightness, fullness, and balance to target fill level.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n\n    if not np.any(can_fit):\n        return priorities\n\n    valid_bins = np.where(can_fit)[0]\n    remaining_after = bins_remain_cap[can_fit] - item\n\n    # Tightness score: Prioritize tighter fits\n    tightness = 1 / (remaining_after + 0.0001)\n\n    # Fullness score: Prioritize fuller bins\n    fullness = 1 - (bins_remain_cap[can_fit] / bins_remain_cap.max())\n\n    # Balance score: Prioritize bins close to target fill level\n    target_fill_level = 0.75 * bins_remain_cap.max()\n    balance_score = np.abs(remaining_after - target_fill_level)\n    balance = 1 / (balance_score + 0.0001)\n    # Combine scores with weights\n    priorities[valid_bins] = (0.4 * tightness) + (0.3 * fullness) + (0.3 * balance)\n\n    return priorities\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculates bin priorities considering wasted space, fill target, and randomness.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return -np.inf * np.ones_like(bins_remain_cap) # All invalid\n\n    fit_score = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = 1.0 / (fit_score + 0.0001)  # Waste minimization\n\n    fill_percentage = (bins_remain_cap[valid_bins] - fit_score) / bins_remain_cap.max()\n    target_fill = 0.75\n    balance_factor = -abs(fill_percentage - target_fill) # Fill target\n    priorities[valid_bins] += 0.5 * balance_factor\n\n    near_full = fit_score < item * 0.05\n    priorities[valid_bins][near_full] *= 0.5  # Penalize near full\n\n    randomness = np.random.rand(np.sum(valid_bins)) * 0.01\n    priorities[valid_bins] += randomness # Randomness\n\n    return priorities\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on waste, fill level, and a small amount of randomization.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return np.full_like(bins_remain_cap, float('-inf'))\n\n    fit_score = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = 1.0 / (fit_score + 0.0001)\n\n    fill_percentage = bins_remain_cap[valid_bins] / bins_remain_cap.max()\n    priorities[valid_bins] += (1 - fill_percentage) * 2\n\n    empty_threshold = 0.2 * bins_remain_cap.max()\n    too_empty = (fit_score > empty_threshold)\n    priorities[valid_bins][too_empty] *= 0.5\n    \n    target_fill = 0.75 * bins_remain_cap.max()\n    balance_factor = np.abs(bins_remain_cap[valid_bins] - target_fill)\n    priorities[valid_bins] += 1.0 / (balance_factor + 0.0001)\n    \n    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.1  # Small randomness\n\n    return priorities\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on waste, fill level, and a small amount of randomization.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return np.full_like(bins_remain_cap, float('-inf'))\n\n    fit_score = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = 1.0 / (fit_score + 0.0001)\n\n    fill_percentage = bins_remain_cap[valid_bins] / bins_remain_cap.max()\n    priorities[valid_bins] += (1 - fill_percentage) * 2\n\n    empty_threshold = 0.2 * bins_remain_cap.max()\n    too_empty = (fit_score > empty_threshold)\n    priorities[valid_bins][too_empty] *= 0.5\n    \n    target_fill = 0.75 * bins_remain_cap.max()\n    balance_factor = np.abs(bins_remain_cap[valid_bins] - target_fill)\n    priorities[valid_bins] += 1.0 / (balance_factor + 0.0001)\n    \n    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.1  # Small randomness\n\n    return priorities\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on waste, fill level, and a small amount of randomization.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return np.full_like(bins_remain_cap, float('-inf'))\n\n    fit_score = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = 1.0 / (fit_score + 0.0001)\n\n    fill_percentage = bins_remain_cap[valid_bins] / bins_remain_cap.max()\n    priorities[valid_bins] += (1 - fill_percentage) * 2\n\n    empty_threshold = 0.2 * bins_remain_cap.max()\n    too_empty = (fit_score > empty_threshold)\n    priorities[valid_bins][too_empty] *= 0.5\n    \n    target_fill = 0.75 * bins_remain_cap.max()\n    balance_factor = np.abs(bins_remain_cap[valid_bins] - target_fill)\n    priorities[valid_bins] += 1.0 / (balance_factor + 0.0001)\n    \n    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.1  # Small randomness\n\n    return priorities\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on waste, fill level, and a small amount of randomization.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return np.full_like(bins_remain_cap, float('-inf'))\n\n    fit_score = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = 1.0 / (fit_score + 0.0001)\n\n    fill_percentage = bins_remain_cap[valid_bins] / bins_remain_cap.max()\n    priorities[valid_bins] += (1 - fill_percentage) * 2\n\n    empty_threshold = 0.2 * bins_remain_cap.max()\n    too_empty = (fit_score > empty_threshold)\n    priorities[valid_bins][too_empty] *= 0.5\n    \n    target_fill = 0.75 * bins_remain_cap.max()\n    balance_factor = np.abs(bins_remain_cap[valid_bins] - target_fill)\n    priorities[valid_bins] += 1.0 / (balance_factor + 0.0001)\n    \n    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.1  # Small randomness\n\n    return priorities\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines wasted space minimization, fill ratio target and randomness.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    fit_within_capacity = bins_remain_cap >= item\n\n    if np.any(fit_within_capacity):\n        #Wasted space minimization\n        wasted_space = bins_remain_cap[fit_within_capacity] - item\n        priorities[fit_within_capacity] = 1.0 / (1e-6 + wasted_space)\n\n        #Fill ratio target\n        fill_ratios = item / bins_remain_cap[fit_within_capacity]\n        target_fill = 0.8\n        fill_ratio_priority = -np.abs(fill_ratios - target_fill)\n        priorities[fit_within_capacity] += fill_ratio_priority * 0.1\n\n        #Randomization to avoid local optima\n        randomness = np.random.rand(np.sum(fit_within_capacity)) * 0.01\n        priorities[fit_within_capacity] += randomness\n\n    else:\n        priorities = -np.inf * np.ones_like(priorities)\n    return priorities\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, fill percentage, and target capacity.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        waste = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] = -waste  # Minimize waste\n\n        fill_percentage = item / bins_remain_cap[valid_bins]\n        priorities[valid_bins] += fill_percentage # Fill percentage bonus\n\n        target_capacity = 0.75 * bins_remain_cap.max()\n        capacity_diff = np.abs(bins_remain_cap[valid_bins] - target_capacity)\n        priorities[valid_bins] += 0.5 / (capacity_diff + 0.0001)\n\n        remaining_after_add = bins_remain_cap[valid_bins] - item\n        near_full_penalty = np.where(remaining_after_add < (0.1*bins_remain_cap.max()), -0.5, 0.0)\n        priorities[valid_bins] += near_full_penalty\n\n        priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.01 #small randomness\n    return priorities\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can actually fit the item\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        # If no bins can fit, assign a small random priority to encourage creation of new bin, and discourage to always put the item into the first new bin\n        priorities[:] = np.random.rand(len(priorities)) * 0.0001\n        return priorities\n\n    # Calculate remaining space after placing the item\n    remaining_space = bins_remain_cap[valid_bins] - item\n\n    # Fit score: prioritize bins with smaller remaining space (best fit)\n    fit_score = 1.0 / (remaining_space + 0.0001)\n\n    # Fill level score: prioritize bins close to a target fill level (e.g., 75% full)\n    target_fill = bins_remain_cap.max() * 0.75\n    fill_level_diff = np.abs(bins_remain_cap[valid_bins] - target_fill)\n    fill_level_score = 1.0 / (fill_level_diff + 0.0001)\n\n    # Waste minimization score: penalize bins that would have excessive wasted space\n    waste_threshold = bins_remain_cap.max() * 0.25  # Example: penalize if remaining space > 25%\n    waste_score = np.where(remaining_space > waste_threshold, 0.1, 1.0) # or other penalty value\n\n\n    # Adaptive Weighting: Adjust weights based on the number of valid bins.\n    num_valid = np.sum(valid_bins)\n    if num_valid > 5:\n        fit_weight = 0.6\n        fill_weight = 0.3\n        waste_weight = 0.1\n    else:\n        fit_weight = 0.4\n        fill_weight = 0.4\n        waste_weight = 0.2\n\n    # Combine the scores with adaptive weights\n    combined_score = (fit_weight * fit_score + fill_weight * fill_level_score + waste_weight * waste_score)\n\n    priorities[valid_bins] = combined_score\n\n    return priorities\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can actually fit the item\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        # If no bins can fit, assign a small random priority to encourage creation of new bin, and discourage to always put the item into the first new bin\n        priorities[:] = np.random.rand(len(priorities)) * 0.0001\n        return priorities\n\n    # Calculate remaining space after placing the item\n    remaining_space = bins_remain_cap[valid_bins] - item\n\n    # Fit score: prioritize bins with smaller remaining space (best fit)\n    fit_score = 1.0 / (remaining_space + 0.0001)\n\n    # Fill level score: prioritize bins close to a target fill level (e.g., 75% full)\n    target_fill = bins_remain_cap.max() * 0.75\n    fill_level_diff = np.abs(bins_remain_cap[valid_bins] - target_fill)\n    fill_level_score = 1.0 / (fill_level_diff + 0.0001)\n\n    # Waste minimization score: penalize bins that would have excessive wasted space\n    waste_threshold = bins_remain_cap.max() * 0.25  # Example: penalize if remaining space > 25%\n    waste_score = np.where(remaining_space > waste_threshold, 0.1, 1.0) # or other penalty value\n\n\n    # Adaptive Weighting: Adjust weights based on the number of valid bins.\n    num_valid = np.sum(valid_bins)\n    if num_valid > 5:\n        fit_weight = 0.6\n        fill_weight = 0.3\n        waste_weight = 0.1\n    else:\n        fit_weight = 0.4\n        fill_weight = 0.4\n        waste_weight = 0.2\n\n    # Combine the scores with adaptive weights\n    combined_score = (fit_weight * fit_score + fill_weight * fill_level_score + waste_weight * waste_score)\n\n    priorities[valid_bins] = combined_score\n\n    return priorities\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can actually fit the item\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        # If no bins can fit, assign a small random priority to encourage creation of new bin, and discourage to always put the item into the first new bin\n        priorities[:] = np.random.rand(len(priorities)) * 0.0001\n        return priorities\n\n    # Calculate remaining space after placing the item\n    remaining_space = bins_remain_cap[valid_bins] - item\n\n    # Fit score: prioritize bins with smaller remaining space (best fit)\n    fit_score = 1.0 / (remaining_space + 0.0001)\n\n    # Fill level score: prioritize bins close to a target fill level (e.g., 75% full)\n    target_fill = bins_remain_cap.max() * 0.75\n    fill_level_diff = np.abs(bins_remain_cap[valid_bins] - target_fill)\n    fill_level_score = 1.0 / (fill_level_diff + 0.0001)\n\n    # Waste minimization score: penalize bins that would have excessive wasted space\n    waste_threshold = bins_remain_cap.max() * 0.25  # Example: penalize if remaining space > 25%\n    waste_score = np.where(remaining_space > waste_threshold, 0.1, 1.0) # or other penalty value\n\n\n    # Adaptive Weighting: Adjust weights based on the number of valid bins.\n    num_valid = np.sum(valid_bins)\n    if num_valid > 5:\n        fit_weight = 0.6\n        fill_weight = 0.3\n        waste_weight = 0.1\n    else:\n        fit_weight = 0.4\n        fill_weight = 0.4\n        waste_weight = 0.2\n\n    # Combine the scores with adaptive weights\n    combined_score = (fit_weight * fit_score + fill_weight * fill_level_score + waste_weight * waste_score)\n\n    priorities[valid_bins] = combined_score\n\n    return priorities\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, target fill ratio, and randomness for bin selection.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf\n    can_fit = bins_remain_cap >= item\n\n    if np.any(can_fit):\n        wasted_space = bins_remain_cap[can_fit] - item\n        priorities[can_fit] = -wasted_space  # Minimize waste\n\n        fill_ratio = (bins_remain_cap[can_fit] - wasted_space) / bins_remain_cap[can_fit]\n        target_ratio = 0.6\n        priorities[can_fit] += 5.0 * np.exp(-((fill_ratio - target_ratio)**2) / 0.02) # gaussian curve for target fill\n\n        # Add small randomness to avoid local optima\n        priorities[can_fit] += np.random.normal(0, 0.01, size=np.sum(can_fit))\n\n        # Penalize bins that become nearly full.\n        remaining_after_add = bins_remain_cap[can_fit] - item\n        near_full_penalty = np.where(remaining_after_add < (0.1*bins_remain_cap.max()), -0.5, 0.0)\n        priorities[can_fit] += near_full_penalty\n\n    return priorities\n\n[Heuristics 15th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float,\n                bins_remain_cap: np.ndarray,\n                fit_score_epsilon: float = 0.0007412300872873158,\n                target_fill_percentage: float = 0.822520714058313,\n                fill_diff_epsilon: float = 0.0009461814422961245,\n                randomness_magnitude: float = 0.042967520613299406,\n                nearly_full_threshold: float = 0.07455382572529366,\n                nearly_full_penalty: float = 0.6335887935473842) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        fit_score_epsilon: Small value to avoid division by zero when calculating fit score priority.\n        target_fill_percentage: Target fill level percentage (e.g., 0.75 for 75%).\n        fill_diff_epsilon: Small value to avoid division by zero when calculating fill difference priority.\n        randomness_magnitude: Magnitude of randomness to add to priorities.\n        nearly_full_threshold: Threshold (as a fraction of max bin capacity) below which a bin is considered nearly full.\n        nearly_full_penalty: Factor by which to reduce the priority of nearly full bins.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can actually fit the item\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        # If no bins can fit, assign low priority to all (might need a new bin)\n        return priorities\n\n[Heuristics 16th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float,\n                bins_remain_cap: np.ndarray,\n                fit_score_epsilon: float = 0.0007412300872873158,\n                target_fill_percentage: float = 0.822520714058313,\n                fill_diff_epsilon: float = 0.0009461814422961245,\n                randomness_magnitude: float = 0.042967520613299406,\n                nearly_full_threshold: float = 0.07455382572529366,\n                nearly_full_penalty: float = 0.6335887935473842) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        fit_score_epsilon: Small value to avoid division by zero when calculating fit score priority.\n        target_fill_percentage: Target fill level percentage (e.g., 0.75 for 75%).\n        fill_diff_epsilon: Small value to avoid division by zero when calculating fill difference priority.\n        randomness_magnitude: Magnitude of randomness to add to priorities.\n        nearly_full_threshold: Threshold (as a fraction of max bin capacity) below which a bin is considered nearly full.\n        nearly_full_penalty: Factor by which to reduce the priority of nearly full bins.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can actually fit the item\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        # If no bins can fit, assign low priority to all (might need a new bin)\n        return priorities\n\n[Heuristics 17th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float,\n                bins_remain_cap: np.ndarray,\n                fit_score_epsilon: float = 0.0007412300872873158,\n                target_fill_percentage: float = 0.822520714058313,\n                fill_diff_epsilon: float = 0.0009461814422961245,\n                randomness_magnitude: float = 0.042967520613299406,\n                nearly_full_threshold: float = 0.07455382572529366,\n                nearly_full_penalty: float = 0.6335887935473842) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        fit_score_epsilon: Small value to avoid division by zero when calculating fit score priority.\n        target_fill_percentage: Target fill level percentage (e.g., 0.75 for 75%).\n        fill_diff_epsilon: Small value to avoid division by zero when calculating fill difference priority.\n        randomness_magnitude: Magnitude of randomness to add to priorities.\n        nearly_full_threshold: Threshold (as a fraction of max bin capacity) below which a bin is considered nearly full.\n        nearly_full_penalty: Factor by which to reduce the priority of nearly full bins.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can actually fit the item\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        # If no bins can fit, assign low priority to all (might need a new bin)\n        return priorities\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins considering wasted space, target fill, and penalizes near-full bins.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return -np.inf * np.ones_like(bins_remain_cap)\n\n    remaining_space = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = 1.0 / (remaining_space + 1e-6)  # Minimize waste\n\n    target_capacity = 0.75 * np.max(bins_remain_cap)\n    capacity_diff = np.abs(bins_remain_cap[valid_bins] - target_capacity)\n    priorities[valid_bins] += 0.5 / (capacity_diff + 1e-6)  # Target fill\n\n    nearly_full_threshold = 0.1 * np.max(bins_remain_cap)\n    nearly_full_penalty = (remaining_space < nearly_full_threshold) * 0.75\n    priorities[valid_bins] -= nearly_full_penalty  # Penalize near-full\n\n    return priorities\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, target fill, randomness, and near-full penalty.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n\n    if not np.any(can_fit):\n        return np.full_like(priorities, -np.inf)\n\n    valid_bins = np.where(can_fit)[0]\n    remaining_after = bins_remain_cap[can_fit] - item\n    \n    # Waste minimization: Prioritize tighter fits\n    waste = remaining_after\n    tightness = 1 / (waste + 0.0001)\n\n    # Target fill level (e.g., 75%): Reward bins closer to target\n    target_fill_level = 0.75 * bins_remain_cap.max()\n    fill_level = bins_remain_cap[can_fit]\n    fill_diff = np.abs(fill_level - target_fill_level)\n    fill_score = 1 / (fill_diff + 0.0001)\n\n    # Near-full penalty\n    near_full_threshold = 0.1 * bins_remain_cap.max()\n    near_full_penalty = np.where(remaining_after < near_full_threshold, -0.5, 0.0)  # Stronger penalty\n\n    # Randomness to escape local optima\n    randomness = np.random.rand(len(valid_bins)) * 0.05\n\n    # Combine scores with weights\n    priorities[valid_bins] = (0.5 * tightness) + (0.3 * fill_score) + near_full_penalty + randomness\n    return priorities\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, target fill, randomness, and near-full penalty.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n\n    if not np.any(can_fit):\n        return np.full_like(priorities, -np.inf)\n\n    valid_bins = np.where(can_fit)[0]\n    remaining_after = bins_remain_cap[can_fit] - item\n    \n    # Waste minimization: Prioritize tighter fits\n    waste = remaining_after\n    tightness = 1 / (waste + 0.0001)\n\n    # Target fill level (e.g., 75%): Reward bins closer to target\n    target_fill_level = 0.75 * bins_remain_cap.max()\n    fill_level = bins_remain_cap[can_fit]\n    fill_diff = np.abs(fill_level - target_fill_level)\n    fill_score = 1 / (fill_diff + 0.0001)\n\n    # Near-full penalty\n    near_full_threshold = 0.1 * bins_remain_cap.max()\n    near_full_penalty = np.where(remaining_after < near_full_threshold, -0.5, 0.0)  # Stronger penalty\n\n    # Randomness to escape local optima\n    randomness = np.random.rand(len(valid_bins)) * 0.05\n\n    # Combine scores with weights\n    priorities[valid_bins] = (0.5 * tightness) + (0.3 * fill_score) + near_full_penalty + randomness\n    return priorities\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}