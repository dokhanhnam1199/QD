```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, fill percentage, and balance bin utilization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        waste = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] = -waste  # Minimize waste
        fill_percentage = item / bins_remain_cap[valid_bins]
        priorities[valid_bins] += fill_percentage  # Fill percentage
        priorities[valid_bins] += (bins_remain_cap[valid_bins] > 0.5) * 0.1  # Moderate use
        remaining_after_add = bins_remain_cap[valid_bins] - item
        near_full_penalty = np.where(remaining_after_add < (0.1*bins_remain_cap.max()), -0.5, 0.0)
        priorities[valid_bins] += near_full_penalty
    return priorities
```
