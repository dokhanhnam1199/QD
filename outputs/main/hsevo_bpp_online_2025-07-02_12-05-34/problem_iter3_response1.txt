```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can fit the item
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        # If no bins can fit, assign low priority to all (might need a new bin)
        return priorities

    # Calculate remaining space if item is placed in each valid bin
    remaining_space = bins_remain_cap[valid_bins] - item

    # Primary priority: Minimize wasted space (best fit)
    priorities[valid_bins] = 1.0 / (remaining_space + 0.0001)

    # Secondary priority:  Favor bins with remaining capacity close to a "target" value
    # This encourages filling bins to a certain level without overfilling
    # Target value can be a fraction of the bin capacity or based on item size distribution
    target_capacity = 0.75 * bins_remain_cap.max()  # Example: Target 75% full
    capacity_diff = np.abs(bins_remain_cap[valid_bins] - target_capacity)
    priorities[valid_bins] += 0.5 / (capacity_diff + 0.0001)  # Scale this bonus

    # Tertiary priority: Penalize bins that become nearly full after placing the item
    # This discourages creating bins with very little remaining space,
    # which are unlikely to be useful for subsequent items
    nearly_full_threshold = 0.1 * bins_remain_cap.max()  # Example: Less than 10% remaining
    nearly_full_penalty = (remaining_space < nearly_full_threshold) * 0.75  #Binary penalty: 0 or 0.75
    priorities[valid_bins] -= nearly_full_penalty #subtract this from prioritiies

    #Quaternary Priority: consider previous usage, penalize often used bins
    bin_usage_counts = np.zeros_like(bins_remain_cap,dtype = float) # keep track of how many times a bin is used, initialize to 0
    #priorities -= bin_usage_counts #simple penalization of often used bins
    return priorities
```
