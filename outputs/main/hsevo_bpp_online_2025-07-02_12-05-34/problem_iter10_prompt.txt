{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    A refined priority function for online bin packing, incorporating adaptive weighting,\n    edge case handling, and stochastic elements.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n\n    if not np.any(can_fit):\n        return np.full_like(priorities, 0.0)\n\n    valid_bins = np.where(can_fit)[0]\n    remaining_after = bins_remain_cap[can_fit] - item\n\n    # Waste minimization with adaptive weighting based on item size\n    waste = remaining_after\n    tightness = 1 / (waste + 0.0001)\n    tightness_weight = 0.5 if item > bins_remain_cap.max() * 0.5 else 0.3  # Smaller items, less emphasis on tightness\n\n    # Target fill level with dynamic target\n    target_fill_level = 0.75 * bins_remain_cap.max()\n    fill_level = bins_remain_cap[can_fit]\n    fill_diff = np.abs(fill_level - target_fill_level)\n    fill_score = np.exp(-fill_diff / (bins_remain_cap.max() * 0.2))\n    fill_weight = 0.3\n\n    # Near-full penalty adjusted\n    near_full_threshold = 0.1 * bins_remain_cap.max()\n    near_full_penalty = np.where(remaining_after < near_full_threshold, -0.7, 0.0) #Increased penalty\n    near_full_weight = 0.2\n\n    # Large item penalty: discourage placing large items into almost empty bins.\n    large_item_threshold = bins_remain_cap.max() * 0.6\n    if item > large_item_threshold:\n        almost_empty_threshold = bins_remain_cap.max() * 0.9\n        large_item_penalty = np.where(bins_remain_cap[can_fit] > almost_empty_threshold, -0.3, 0.0)\n    else:\n        large_item_penalty = 0.0\n\n    large_item_weight = 0.1\n\n    # Introduce stochasticity: slight random perturbation\n    randomness = np.random.normal(0, 0.05, len(valid_bins))\n\n    priorities[valid_bins] = (tightness_weight * tightness +\n                               fill_weight * fill_score +\n                               near_full_weight * near_full_penalty +\n                               large_item_weight * large_item_penalty +\n                               randomness)\n\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}