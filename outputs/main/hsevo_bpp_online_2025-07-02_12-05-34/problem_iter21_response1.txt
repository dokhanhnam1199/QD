```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Advanced heuristic for online bin packing:
    - Adaptive weights based on item size, bin utilization, and packing success.
    - Strategic randomness injection for exploration.
    - Anticipatory penalties for decisions leading to future waste.
    - Dynamic adjustment of parameters based on problem characteristics.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return np.full_like(priorities, -1.0)

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item
    bin_capacity = bins_remain_cap.max()
    bins_utilization = (bin_capacity - bins_remain_cap[can_fit]) / bin_capacity

    # Waste Minimization
    waste = remaining_after
    tightness = 1 / (waste + 0.0001)

    # Target Fill Level - dynamically adjusted
    target_fill_level = 0.7 * bin_capacity  # Initial target, can be tuned
    fill_level = bins_remain_cap[can_fit]
    fill_diff = np.abs(fill_level - target_fill_level)
    fill_score = np.exp(-fill_diff / (bin_capacity * 0.25))

    # Dynamic Near-Full Management
    near_full_threshold = 0.1 * bin_capacity
    is_near_full = remaining_after < near_full_threshold
    near_full_penalty = np.where(is_near_full, -0.9 * (item/bin_capacity), 0.0)

    # Smaller Item Bonus (if item fits nearly perfectly into a near-full bin)
    small_item_threshold = bin_capacity * 0.2
    if item < small_item_threshold:
        almost_full_threshold = bin_capacity * 0.08
        almost_full_bonus = np.exp(-remaining_after / (almost_full_threshold + 0.0001))
    else:
        almost_full_bonus = 0.0

    # Larger Item Penalty (if placing it leaves very little space)
    large_item_threshold = bin_capacity * 0.8
    if item > large_item_threshold:
        small_space_penalty = np.where(bins_remain_cap[can_fit] < (item + 0.08 * bin_capacity), -0.8 * (item/bin_capacity), 0.0)
    else:
        small_space_penalty = 0.0

   # Anticipatory Waste Penalty
    # Penalize bins that, after placing the item, will have remaining space
    # smaller than a reasonable minimum item size.  This encourages filling
    # bins with more usable space.

    min_future_item_size = bin_capacity * 0.15 # Tune this value
    anticipatory_penalty = np.where(remaining_after < min_future_item_size,
                                    -0.2 * (min_future_item_size - remaining_after) / bin_capacity,
                                    0.0)

    # Adaptive Weighting: item size & bin utilization & packing success
    item_size_factor = item / bin_capacity
    utilization_factor = np.mean(bins_utilization)

    # Packing success metric (Placeholder - needs external tracking/update)
    #packing_success = 0.7  # Example, should be updated dynamically based on solution quality

    tightness_weight = 0.4 * (1 - item_size_factor) * (1 + utilization_factor) # * packing_success
    fill_weight = 0.4 * (1 + item_size_factor) * (1 - utilization_factor) #* packing_success
    near_full_weight = 0.1
    small_item_weight = 0.05
    large_item_weight = 0.05
    anticipatory_weight = 0.1  # Weight for the anticipatory penalty

    # Stochasticity scaled by item size and bin utilization
    randomness_scale = 0.01 * (1 + item_size_factor) * (1 - utilization_factor)
    randomness = np.random.normal(0, randomness_scale, len(valid_bins))

    # Prioritize bins with close to the mean remaining capacity (reduce variance)
    mean_remaining_capacity = np.mean(bins_remain_cap[can_fit])
    capacity_similarity = np.exp(-np.abs(remaining_after - mean_remaining_capacity) / (bin_capacity * 0.3))
    capacity_similarity_weight = 0.05

    priorities[valid_bins] = (tightness_weight * tightness +
                               fill_weight * fill_score +
                               near_full_weight * near_full_penalty +
                               small_item_weight * almost_full_bonus +
                               large_item_weight * small_space_penalty +
                               anticipatory_weight * anticipatory_penalty +
                               capacity_similarity_weight * capacity_similarity +
                               randomness)

    return priorities
```
