```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, target fill, dynamic near-full, adaptive weighting based on item and bin."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return np.full_like(priorities, -1.0)

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item
    bin_capacity = bins_remain_cap.max()
    bins_utilization = (bin_capacity - bins_remain_cap[can_fit]) / bin_capacity

    # Waste Minimization: Prioritize bins that minimize remaining space relative to item size
    waste_ratio = remaining_after / item
    waste_priority = np.exp(-5 * waste_ratio)

    # Target Fill Level: Reward bins close to a target fill level
    target_fill_level = 0.8 * bin_capacity
    fill_level_diff = np.abs(bins_remain_cap[can_fit] - target_fill_level)
    fill_level_priority = np.exp(-fill_level_diff / (bin_capacity * 0.2))

    # Near-Full Management: Penalize bins that become very near full
    near_full_threshold = 0.08 * bin_capacity
    is_near_full = remaining_after < near_full_threshold
    near_full_penalty = np.where(is_near_full, -0.9, 0.0)

    # Adaptive Weighting
    item_size_factor = item / bin_capacity
    utilization_factor = np.mean(bins_utilization) if bins_utilization.size > 0 else 0.0

    waste_weight = 0.3 * (1 - item_size_factor) * (1 + utilization_factor)
    fill_weight = 0.3 * (1 + item_size_factor) * (1 - utilization_factor)
    near_full_weight = 0.1

    # Strategic Randomness
    priority_range = np.max([waste_priority.max(), fill_level_priority.max(), 0.1]) - np.min([waste_priority.min(), fill_level_priority.min(), -0.1]) #Avoid empty sequence
    randomness_scale = 0.02 * (1 + item_size_factor) * (1 - utilization_factor) * priority_range
    randomness = np.random.normal(0, randomness_scale, len(valid_bins))

    priorities[valid_bins] = (waste_weight * waste_priority +
                               fill_weight * fill_level_priority +
                               near_full_weight * near_full_penalty +
                               randomness)

    return priorities
```
