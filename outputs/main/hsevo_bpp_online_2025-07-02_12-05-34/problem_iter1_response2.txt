```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a base score (e.g., all bins are initially somewhat desirable)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Reward bins that can accommodate the item (avoiding wastage)
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1  # Higher base priority for bins that can fit

    # Prioritize bins with capacity closest to item size (minimize fragmentation)
    residual_capacity = bins_remain_cap - item
    close_fit = np.abs(residual_capacity)
    priorities[can_fit] += (1 / (1 + close_fit[can_fit])) # Smaller residuals are preferable (1/x, bounded)

    # Penalize bins with large remaining capacity (delay filling completely empty bins)
    priorities -= (bins_remain_cap / np.sum(bins_remain_cap))  # Reduce priority based on relative capacity.
    # Slightly favor near-full bins
    almost_full = (bins_remain_cap < item * 2) & (bins_remain_cap >= item)
    priorities[almost_full] += 0.5 # Give a small bonus to partially filled bins that still fit the item

    # Avoid bins that cannot fit, assign low priority (can be set to -inf but may cause issues)
    priorities[~can_fit] = -1e9  # Vastly deprioritize infeasible bins.
    return priorities
```
