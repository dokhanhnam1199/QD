```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining capacity after adding the item
    remaining_after_add = bins_remain_cap - item

    # Give high priority to bins where the item fits, but not too well, to avoid fragmentation.
    # Also, give some priority to bins that cannot fit the item (a "desperation" strategy)
    for i, rem in enumerate(bins_remain_cap):
        if rem >= item:
            # Bin fits the item
            fit_ratio = item / rem  # How well the item fits (0 to 1)
            slack = rem - item # The leftover capacity after adding the item

            #A good fit should get high priority, penalize either too perfect fit, or too fragmented.
            priorities[i] = np.exp(-((fit_ratio - 0.7)**2) / 0.05) + np.exp(-(slack/item)**2) # Gaussian-like priority

        else:
            # Bin does not fit, prioritize based on how close the item is to fitting, inverse exponential to allow a big negative slope.
            priorities[i] = -np.exp((item - rem) * 2)  # Prioritize by "almost fitting" - a desperation strategy

    return priorities
```
