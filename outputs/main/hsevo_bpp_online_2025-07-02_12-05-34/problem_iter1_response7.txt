```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version incorporates several ideas:
    1.  Bins that cannot accommodate the item get a very low priority.
    2.  Among bins that *can* accommodate the item, prioritize bins
        with remaining capacity close to the item size. This encourages
        filling bins optimally and reduces fragmentation.
    3. Introduce randomness to explore different packings.
    4. Scale with bin size - favors bins with smaller size to pack since its easier to fill

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give very low priority to bins that cannot fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # For feasible bins, calculate a priority based on remaining capacity
    feasible_bins = ~infeasible_bins
    remaining_space = bins_remain_cap[feasible_bins] - item

    #Prioritize bins where item size is close to capacity.
    priority_score = np.exp(-np.abs(remaining_space)/(item+1e-9)) # e^-|remaining_space|/item

    # Add some randomness to encourage exploration (Gaussian noise)
    randomness = np.random.normal(0, 0.1, size=remaining_space.shape)
    priority_score += randomness

    # Scale the priority by the bin capacity. Smaller remaining bin capacity -> higher priority.
    priority_score /= bins_remain_cap[feasible_bins]

    priorities[feasible_bins] = priority_score

    return priorities
```
