```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First, identify bins that can actually fit the item
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        # If no bins can fit, assign low priority to all (might need a new bin)
        return priorities

    # For valid bins, calculate a "fit score"
    fit_score = bins_remain_cap[valid_bins] - item  # Remaining space after placing the item

    # Give higher priority to bins where the item fits snugly (minimize wasted space)
    # We can use the inverse of the remaining space as a priority
    priorities[valid_bins] = 1.0 / (fit_score + 0.0001) # Avoid division by zero

    # Boost priority for bins that have remaining capacity close to the item size.
    item_proximity_score = np.abs(bins_remain_cap[valid_bins] - item)
    priorities[valid_bins] += 1.0 / (item_proximity_score + 0.0001)

    # Prioritize bins that are more full (avoid creating many almost-empty bins) but not too full
    fullness_score = bins_remain_cap[valid_bins] / bins_remain_cap.max() # Normalized remaining capacity
    priorities[valid_bins] += (1 - fullness_score) * 2 # Higher score for fuller bins

    # Add a penalty for bins that will become too empty after placing the item
    empty_threshold = 0.2 * bins_remain_cap.max()  # Threshold for "too empty" (20% of max capacity)
    too_empty = (fit_score > empty_threshold)
    priorities[valid_bins][too_empty] *= 0.5  # Reduce priority if it becomes too empty

    return priorities
```
