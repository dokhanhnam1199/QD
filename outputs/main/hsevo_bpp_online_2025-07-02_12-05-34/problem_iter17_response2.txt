```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive weights, near-empty bonus, decaying randomness, and dynamic fill target."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return np.full_like(priorities, -1.0)

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item
    bin_capacity = bins_remain_cap.max()
    bins_utilization = (bin_capacity - bins_remain_cap[can_fit]) / bin_capacity

    # Waste Minimization
    waste = remaining_after
    tightness = 1 / (waste + 0.0001)

    # Target Fill Level (Dynamic)
    current_utilization = np.mean((bin_capacity - bins_remain_cap) / bin_capacity)
    target_fill_level = 0.7 + 0.1 * current_utilization # Adjust dynamically
    fill_level = bins_remain_cap[can_fit]
    fill_diff = np.abs(fill_level - target_fill_level * bin_capacity)
    fill_score = np.exp(-fill_diff / (bin_capacity * 0.2))

    # Near-Empty Bonus (Encourage initial bin use)
    near_empty_threshold = 0.9 * bin_capacity
    is_near_empty = bins_remain_cap[can_fit] > near_empty_threshold
    near_empty_bonus = np.where(is_near_empty, 0.2 * (1 - item/bin_capacity), 0.0)

    # Dynamic Near-Full Management
    near_full_threshold = 0.12 * bin_capacity
    is_near_full = remaining_after < near_full_threshold
    near_full_penalty = np.where(is_near_full, -0.8 * (item/bin_capacity), 0.0)

    # Adaptive Weighting: item size & bin utilization
    item_size_factor = item / bin_capacity
    utilization_factor = np.mean(bins_utilization)

    tightness_weight = 0.4 * (1 - item_size_factor) * (1 + utilization_factor)
    fill_weight = 0.4 * (1 + item_size_factor) * (1 - utilization_factor)
    near_empty_weight = 0.1
    near_full_weight = 0.1

    # Decaying Randomness
    if not hasattr(priority_v2, "time_step"):
        priority_v2.time_step = 1
    else:
        priority_v2.time_step += 1
    exploration_factor = np.exp(-priority_v2.time_step / 1000.0)
    randomness_scale = 0.01 * (1 + item_size_factor) * exploration_factor # Decay over time
    randomness = np.random.normal(0, randomness_scale, len(valid_bins))

    priorities[valid_bins] = (tightness_weight * tightness +
                               fill_weight * fill_score +
                               near_empty_weight * near_empty_bonus +
                               near_full_weight * near_full_penalty +
                               randomness)

    return priorities
```
