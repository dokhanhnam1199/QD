```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Advanced heuristic: adaptive weights, dynamic penalties, item size influence, bin state awareness, learning rate."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return np.full_like(priorities, -1.0)

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item
    bin_capacity = bins_remain_cap.max()
    bins_utilization = (bin_capacity - bins_remain_cap[can_fit]) / bin_capacity

    # Waste Minimization
    waste = remaining_after
    tightness = 1 / (waste + 0.0001)

    # Target Fill Level
    target_fill_level = 0.80 * bin_capacity  # Slightly higher target
    fill_level = bins_remain_cap[can_fit]
    fill_diff = np.abs(fill_level - target_fill_level)
    fill_score = np.exp(-fill_diff / (bin_capacity * 0.2))

    # Dynamic Near-Full Management
    near_full_threshold = 0.10 * bin_capacity
    is_near_full = remaining_after < near_full_threshold
    near_full_penalty = np.where(is_near_full, -0.9 * (item/bin_capacity), 0.0)  # Increased penalty

    # Smaller Item Bonus
    small_item_threshold = bin_capacity * 0.2
    if item < small_item_threshold:
        almost_full_threshold = bin_capacity * 0.08
        almost_full_bonus = np.exp(-remaining_after / (almost_full_threshold + 0.0001))
    else:
        almost_full_bonus = 0.0

    # Larger Item Penalty
    large_item_threshold = bin_capacity * 0.8
    if item > large_item_threshold:
        small_space_penalty = np.where(bins_remain_cap[can_fit] < (item + 0.08 * bin_capacity), -0.8 * (item/bin_capacity), 0.0)  # Increased penalty
    else:
        small_space_penalty = 0.0

    # Item Fit Score (Encourages tighter packing)
    item_fit_score = np.exp(-np.abs(remaining_after - item) / (bin_capacity * 0.3))

    # Adaptive Weighting based on item size and bin utilization
    item_size_factor = item / bin_capacity
    utilization_factor = np.mean(bins_utilization)

    tightness_weight = 0.30 * (1 - item_size_factor) * (1 + utilization_factor)
    fill_weight = 0.30 * (1 + item_size_factor) * (1 - utilization_factor)
    near_full_weight = 0.20
    small_item_weight = 0.10
    large_item_weight = 0.10

    # Learning Rate (adjust weights dynamically)
    learning_rate = 0.01

    # Stochasticity (scaled and adaptive)
    randomness_scale = 0.02 * (1 + item_size_factor) * (1 - utilization_factor)
    randomness = np.random.normal(0, randomness_scale, len(valid_bins))

    # Dynamic Adjustment (Simulated Annealing concept - not a full implementation, but an influence)
    temperature = 1.0  # Start with a high temperature
    temperature *= 0.995  # Cool down slowly

    # Combine the scores with weights and apply temperature
    priorities[valid_bins] = (tightness_weight * tightness +
                               fill_weight * fill_score +
                               near_full_weight * near_full_penalty +
                               small_item_weight * almost_full_bonus +
                               large_item_weight * small_space_penalty +
                               item_fit_score +  # Encourage better fit
                               randomness) * temperature # Scale with temperature

    return priorities
```
