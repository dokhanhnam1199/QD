{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First, identify bins that can actually fit the item\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        # If no bins can fit, assign low priority to all (might need a new bin)\n        return priorities\n\n    # For valid bins, calculate a \"fit score\"\n    fit_score = bins_remain_cap[valid_bins] - item  # Remaining space after placing the item\n\n    # Give higher priority to bins where the item fits snugly (minimize wasted space)\n    # We can use the inverse of the remaining space as a priority\n    priorities[valid_bins] = 1.0 / (fit_score + 0.0001) # Avoid division by zero\n\n    #Boost priority for bins close to being half empty, could potentially improve packing next items\n    half_empty_score = np.abs(bins_remain_cap[valid_bins] - bins_remain_cap.max()/2)\n    priorities[valid_bins] += 1.0/(half_empty_score+0.0001)\n\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, I'm ready to help you refine \"Current self-reflection\" for designing better heuristics, focusing on actionable insights and avoiding common pitfalls. Here's a redefined approach:\n\n*   **Keywords:** Adaptive learning, trade-offs, bias mitigation, problem-specific knowledge.\n*   **Advice:** Analyze heuristic performance on diverse problem instances. Identify biases. Incorporate feedback mechanisms to adjust parameters and strategies dynamically.\n*   **Avoid:** Rigid adherence to pre-defined rules, neglecting problem-specific characteristics, and prematurely focusing on optimization.\n*   **Explanation:** Effective heuristic design requires continuous adaptation, acknowledging inherent biases, and integrating understanding of the specific problem structure. This leads to more robust and efficient solutions.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}