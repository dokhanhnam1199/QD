```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version incorporates a few ideas:
    1.  A term that favors bins that can accommodate the item well (closer fit).
    2.  A term that discourages nearly full bins from getting further burdened. This is only activated if the item fits.
    3. A 'quantum tunneling' effect. Even if the item doesn't perfectly fit, there's a small probability (simulated by a small negative value if item > cap).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Higher priority for bins that offer a tighter fit (less wasted space).
            fit_score = np.exp(-np.abs(cap - item)) # e^(-|cap-item|), so closer fit -> larger exp.  Faster calculation

            # Discourage almost-full bins.  Only if item fits. This helps avoid creating many bins near-full, which would be inefficient.
            fullness_penalty = (cap > 0.1) * (cap/bins_remain_cap.max())

            priorities[i] = fit_score - 0.1*fullness_penalty

        else:
            # "Quantum tunneling": Small probability of putting it in anyway.
            # Use a small negative value, so it's unlikely, but not impossible.  Proportional to amount above the limit, normalized.
            priorities[i] = -0.01 * (item - cap) / item  # Small penalty, scaled to item size.
            # This is a heuristic to handle potentially very small bins and items.
            # Scale the "penalty" with how much we are violating the bin capacity.

    return priorities
```
