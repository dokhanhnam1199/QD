```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, target fill, near-full penalty, randomness, and item size consideration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        # Waste minimization
        waste = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] = -waste

        # Target fill level
        target_capacity = 0.75 * bins_remain_cap.max()
        capacity_diff = np.abs(bins_remain_cap[valid_bins] - target_capacity)
        priorities[valid_bins] += 0.5 / (capacity_diff + 0.0001)

        # Near-full penalty
        remaining_after_add = bins_remain_cap[valid_bins] - item
        near_full_penalty = np.where(remaining_after_add < (0.1*bins_remain_cap.max()), -0.5, 0.0)
        priorities[valid_bins] += near_full_penalty

        # Randomness
        priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.01

         # Fill percentage bonus
        fill_percentage = item / bins_remain_cap[valid_bins]
        priorities[valid_bins] += fill_percentage
    
        # Item Size Consideration: Penalize placing large items in bins with little extra space
        large_item_threshold = 0.5 * bins_remain_cap.max()
        if item > large_item_threshold:
            small_space_penalty = np.where(bins_remain_cap[valid_bins] < (item + 0.1 * bins_remain_cap.max()), -0.2, 0.0)
            priorities[valid_bins] += small_space_penalty

    return priorities
```
