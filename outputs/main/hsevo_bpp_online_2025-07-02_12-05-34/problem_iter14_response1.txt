```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, target fill, near-full penalty, item size."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item
    bin_capacity = bins_remain_cap.max()

    if not np.any(can_fit):
        return np.full_like(priorities, -1.0)

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item

    # Waste Minimization
    waste = remaining_after
    tightness = 1 / (waste + 0.0001)

    # Target Fill Level
    target_fill_level = 0.75 * bin_capacity
    fill_level = bins_remain_cap[can_fit]
    fill_diff = np.abs(fill_level - target_fill_level)
    fill_score = np.exp(-fill_diff / (bin_capacity * 0.2))

    # Near-Full Penalty
    near_full_threshold = 0.1 * bin_capacity
    near_full_penalty = np.where(remaining_after < near_full_threshold, -0.5, 0.0)

    # Adaptive Weighting based on item size
    item_size_factor = item / bin_capacity
    tightness_weight = 0.5 * (1 - item_size_factor)
    fill_weight = 0.3 * (1 + item_size_factor)
    near_full_weight = 0.2

    # Stochasticity (Decaying)
    randomness = np.random.normal(0, 0.01 / (1 + item_size_factor), len(valid_bins))

    priorities[valid_bins] = (tightness_weight * tightness +
                               fill_weight * fill_score +
                               near_full_weight * near_full_penalty +
                               randomness)

    return priorities
```
