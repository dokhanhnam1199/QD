```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version considers multiple factors inspired by physics and the nature:
    - Gravitational Potential: Prefer bins with remaining capacity closest to the item size.
    - Avoid extremes: Discourage both nearly full and nearly empty bins.
    - Momentum: Consider the bin utilization history (not implemented in this online version directly).
    - Stochasticity: Add a small random factor to break ties and explore diverse solutions.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    epsilon = 1e-6  # Small constant to avoid division by zero and log of zero.
    # Gravitational Potential: The closer the item size to remaining capacity, the higher the priority.
    gravitational_potential = -np.abs(bins_remain_cap - item)  # Negative to indicate attraction
    gravitational_potential = gravitational_potential / (np.max(np.abs(gravitational_potential)) + epsilon)

    # Avoid extremes: Bins that are nearly full or nearly empty are less desirable.
    # Use a Gaussian-like function to penalize near-full and near-empty bins
    bin_utilization = bins_remain_cap  # remaining capacity is bin_utilization since all bins start full
    avoid_extremes = -((bin_utilization - np.mean(bin_utilization))**2) / (2 * np.std(bin_utilization)**2 + epsilon)
    avoid_extremes = avoid_extremes / (np.max(np.abs(avoid_extremes))+ epsilon) # normalize

    # Stochasticity: Add a small random factor to break ties and explore the solution space.
    stochasticity = np.random.normal(0, 0.01, size=bins_remain_cap.shape)

    # Combine the factors to create the priority score.
    priorities = gravitational_potential + avoid_extremes + stochasticity

    return priorities
```
