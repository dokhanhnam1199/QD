[
  {
    "stdout_filepath": "problem_iter5_response0.txt_stdout.txt",
    "code_path": "problem_iter5_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on waste, fill level, and a small amount of randomization.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return np.full_like(bins_remain_cap, float('-inf'))\n\n    fit_score = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = 1.0 / (fit_score + 0.0001)\n\n    fill_percentage = bins_remain_cap[valid_bins] / bins_remain_cap.max()\n    priorities[valid_bins] += (1 - fill_percentage) * 2\n\n    empty_threshold = 0.2 * bins_remain_cap.max()\n    too_empty = (fit_score > empty_threshold)\n    priorities[valid_bins][too_empty] *= 0.5\n    \n    target_fill = 0.75 * bins_remain_cap.max()\n    balance_factor = np.abs(bins_remain_cap[valid_bins] - target_fill)\n    priorities[valid_bins] += 1.0 / (balance_factor + 0.0001)\n    \n    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.1  # Small randomness\n\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 4.028719585161557,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response1.txt_stdout.txt",
    "code_path": "problem_iter5_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, target fill ratio, and randomness for bin selection.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf\n    can_fit = bins_remain_cap >= item\n\n    if np.any(can_fit):\n        wasted_space = bins_remain_cap[can_fit] - item\n        priorities[can_fit] = -wasted_space  # Minimize waste\n\n        fill_ratio = (bins_remain_cap[can_fit] - wasted_space) / bins_remain_cap[can_fit]\n        target_ratio = 0.6\n        priorities[can_fit] += 5.0 * np.exp(-((fill_ratio - target_ratio)**2) / 0.02) # gaussian curve for target fill\n\n        # Add small randomness to avoid local optima\n        priorities[can_fit] += np.random.normal(0, 0.01, size=np.sum(can_fit))\n\n        # Penalize bins that become nearly full.\n        remaining_after_add = bins_remain_cap[can_fit] - item\n        near_full_penalty = np.where(remaining_after_add < (0.1*bins_remain_cap.max()), -0.5, 0.0)\n        priorities[can_fit] += near_full_penalty\n\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.078579976067022,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response2.txt_stdout.txt",
    "code_path": "problem_iter5_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, target utilization, and bin balancing.\"\"\"\n    can_fit = bins_remain_cap >= item\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    if not np.any(can_fit):\n        return priorities - np.inf\n\n    priorities[can_fit] += 1  # Base priority for bins that can fit\n\n    residual_capacity = bins_remain_cap - item\n    close_fit = np.abs(residual_capacity)\n    priorities[can_fit] += (1 / (1 + close_fit[can_fit])) # Minimize wasted space\n\n    capacity_utilization_ratio = (bins_remain_cap[can_fit] - residual_capacity[can_fit]) / bins_remain_cap[can_fit]\n    good_fit_bonus = np.where((capacity_utilization_ratio > 0.7) & (capacity_utilization_ratio < 0.9), 0.5, 0.0)\n    priorities[can_fit] += good_fit_bonus # Target utilization between 70% and 90%\n\n    # Prioritize bins that are more full (avoid creating many almost-empty bins)\n    fullness_score = (bins_remain_cap[can_fit] - residual_capacity[can_fit]) / bins_remain_cap.max()\n    priorities[can_fit] += fullness_score * 0.75\n\n    empty_threshold = 0.2 * bins_remain_cap.max()  # Threshold for \"too empty\"\n    too_empty = (residual_capacity[can_fit] > empty_threshold)\n    priorities[can_fit][too_empty] *= 0.7  # Reduce priority if it becomes too empty\n\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.547267650578394,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response3.txt_stdout.txt",
    "code_path": "problem_iter5_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, target fill, randomness, and near-full penalty.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n\n    if not np.any(can_fit):\n        return np.full_like(priorities, -np.inf)\n\n    valid_bins = np.where(can_fit)[0]\n    remaining_after = bins_remain_cap[can_fit] - item\n    \n    # Waste minimization: Prioritize tighter fits\n    waste = remaining_after\n    tightness = 1 / (waste + 0.0001)\n\n    # Target fill level (e.g., 75%): Reward bins closer to target\n    target_fill_level = 0.75 * bins_remain_cap.max()\n    fill_level = bins_remain_cap[can_fit]\n    fill_diff = np.abs(fill_level - target_fill_level)\n    fill_score = 1 / (fill_diff + 0.0001)\n\n    # Near-full penalty\n    near_full_threshold = 0.1 * bins_remain_cap.max()\n    near_full_penalty = np.where(remaining_after < near_full_threshold, -0.5, 0.0)  # Stronger penalty\n\n    # Randomness to escape local optima\n    randomness = np.random.rand(len(valid_bins)) * 0.05\n\n    # Combine scores with weights\n    priorities[valid_bins] = (0.5 * tightness) + (0.3 * fill_score) + near_full_penalty + randomness\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 5.544475468687688,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response4.txt_stdout.txt",
    "code_path": "problem_iter5_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines wasted space minimization, fill ratio target and randomness.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    fit_within_capacity = bins_remain_cap >= item\n\n    if np.any(fit_within_capacity):\n        #Wasted space minimization\n        wasted_space = bins_remain_cap[fit_within_capacity] - item\n        priorities[fit_within_capacity] = 1.0 / (1e-6 + wasted_space)\n\n        #Fill ratio target\n        fill_ratios = item / bins_remain_cap[fit_within_capacity]\n        target_fill = 0.8\n        fill_ratio_priority = -np.abs(fill_ratios - target_fill)\n        priorities[fit_within_capacity] += fill_ratio_priority * 0.1\n\n        #Randomization to avoid local optima\n        randomness = np.random.rand(np.sum(fit_within_capacity)) * 0.01\n        priorities[fit_within_capacity] += randomness\n\n    else:\n        priorities = -np.inf * np.ones_like(priorities)\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.028719585161557,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response5.txt_stdout.txt",
    "code_path": "problem_iter5_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, target fill, and full bin penalty.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return priorities\n\n    remaining_space = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = 1.0 / (remaining_space + 0.0001)\n\n    target_capacity = 0.75 * bins_remain_cap.max()\n    capacity_diff = np.abs(bins_remain_cap[valid_bins] - target_capacity)\n    priorities[valid_bins] += 0.5 / (capacity_diff + 0.0001)\n\n    nearly_full_threshold = 0.1 * bins_remain_cap.max()\n    nearly_full_penalty = (remaining_space < nearly_full_threshold) * 0.75\n    priorities[valid_bins] -= nearly_full_penalty\n\n    return priorities",
    "response_id": 5,
    "tryHS": false,
    "obj": 5.115676106900674,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response6.txt_stdout.txt",
    "code_path": "problem_iter5_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on tightness, fullness, and balance to target fill level.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n\n    if not np.any(can_fit):\n        return priorities\n\n    valid_bins = np.where(can_fit)[0]\n    remaining_after = bins_remain_cap[can_fit] - item\n\n    # Tightness score: Prioritize tighter fits\n    tightness = 1 / (remaining_after + 0.0001)\n\n    # Fullness score: Prioritize fuller bins\n    fullness = 1 - (bins_remain_cap[can_fit] / bins_remain_cap.max())\n\n    # Balance score: Prioritize bins close to target fill level\n    target_fill_level = 0.75 * bins_remain_cap.max()\n    balance_score = np.abs(remaining_after - target_fill_level)\n    balance = 1 / (balance_score + 0.0001)\n    # Combine scores with weights\n    priorities[valid_bins] = (0.4 * tightness) + (0.3 * fullness) + (0.3 * balance)\n\n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "obj": 3.8292780215396984,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response7.txt_stdout.txt",
    "code_path": "problem_iter5_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculates bin priorities considering wasted space, fill target, and randomness.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return -np.inf * np.ones_like(bins_remain_cap) # All invalid\n\n    fit_score = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = 1.0 / (fit_score + 0.0001)  # Waste minimization\n\n    fill_percentage = (bins_remain_cap[valid_bins] - fit_score) / bins_remain_cap.max()\n    target_fill = 0.75\n    balance_factor = -abs(fill_percentage - target_fill) # Fill target\n    priorities[valid_bins] += 0.5 * balance_factor\n\n    near_full = fit_score < item * 0.05\n    priorities[valid_bins][near_full] *= 0.5  # Penalize near full\n\n    randomness = np.random.rand(np.sum(valid_bins)) * 0.01\n    priorities[valid_bins] += randomness # Randomness\n\n    return priorities",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.008775428799367,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response8.txt_stdout.txt",
    "code_path": "problem_iter5_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, fill percentage, and target capacity.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        waste = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] = -waste  # Minimize waste\n\n        fill_percentage = item / bins_remain_cap[valid_bins]\n        priorities[valid_bins] += fill_percentage # Fill percentage bonus\n\n        target_capacity = 0.75 * bins_remain_cap.max()\n        capacity_diff = np.abs(bins_remain_cap[valid_bins] - target_capacity)\n        priorities[valid_bins] += 0.5 / (capacity_diff + 0.0001)\n\n        remaining_after_add = bins_remain_cap[valid_bins] - item\n        near_full_penalty = np.where(remaining_after_add < (0.1*bins_remain_cap.max()), -0.5, 0.0)\n        priorities[valid_bins] += near_full_penalty\n\n        priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.01 #small randomness\n    return priorities",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.058635819704831,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response9.txt_stdout.txt",
    "code_path": "problem_iter5_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins considering wasted space, target fill, and penalizes near-full bins.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return -np.inf * np.ones_like(bins_remain_cap)\n\n    remaining_space = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = 1.0 / (remaining_space + 1e-6)  # Minimize waste\n\n    target_capacity = 0.75 * np.max(bins_remain_cap)\n    capacity_diff = np.abs(bins_remain_cap[valid_bins] - target_capacity)\n    priorities[valid_bins] += 0.5 / (capacity_diff + 1e-6)  # Target fill\n\n    nearly_full_threshold = 0.1 * np.max(bins_remain_cap)\n    nearly_full_penalty = (remaining_space < nearly_full_threshold) * 0.75\n    priorities[valid_bins] -= nearly_full_penalty  # Penalize near-full\n\n    return priorities",
    "response_id": 9,
    "tryHS": false,
    "obj": 5.115676106900674,
    "exec_success": true
  }
]