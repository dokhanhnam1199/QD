```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins with sufficient capacity to accommodate the item
    without excessive leftover space, while also penalizing near-full bins to
    encourage efficient packing. It uses a combination of capacity difference and fill ratio.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priority = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        # If no bin can fit the item, return a small negative priority for all bins
        # to signify that none are suitable but allow selection based on other criteria
        # (e.g., least-full if a new bin needs to be opened).  Use -np.inf may lead to errors
        priority[:] = -1e-9
        return priority

    # Calculate capacity difference (remaining capacity after placing the item) for valid bins
    capacity_difference = bins_remain_cap[valid_bins] - item

    # A smaller difference indicates a better fit (less wasted space).
    # Inverse the difference to get a higher priority for smaller differences, and adding
    # small amount to denominator for avoid dividing by 0
    priority[valid_bins] = 1 / (capacity_difference + 0.001)

    # Further boost priority for bins with higher fill ratios (closer to being full after adding the item).
    # But also include a penalty for near full bins that are already very full to avoid fragmentation

    fill_ratios = (bins_remain_cap[valid_bins] - capacity_difference) / bins_remain_cap[valid_bins]

    # Apply a weight to the fill ratio. This weight could be tuned.
    fill_ratio_weight = 0.5

    near_full_penalty = np.where(bins_remain_cap[valid_bins] < (1.1 * item), -0.2 * bins_remain_cap[valid_bins], 0)
    priority[valid_bins] += fill_ratio_weight * fill_ratios + near_full_penalty

    # Scale to make zero mean and unit variance (helps prevent domination by single bin).
    priority[valid_bins] = (priority[valid_bins] - np.mean(priority[valid_bins])) / (np.std(priority[valid_bins]) + 1e-8)
    return priority
```
