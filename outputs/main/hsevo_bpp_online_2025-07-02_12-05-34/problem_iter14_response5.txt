```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, target fill, adaptive weighting, and stochasticity."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return np.full_like(priorities, -1.0)

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item
    bin_capacity = bins_remain_cap.max()

    # Waste Minimization
    waste = remaining_after
    tightness = 1 / (waste + 0.0001)

    # Target Fill Level
    target_fill_level = 0.8 * bin_capacity
    fill_diff = np.abs(bins_remain_cap[can_fit] - target_fill_level)
    fill_score = np.exp(-fill_diff / bin_capacity)

    # Near-Full Penalty (moved outside can_fit)
    nearly_full_threshold = 0.1 * bin_capacity
    nearly_full = bins_remain_cap < nearly_full_threshold
    priorities[nearly_full] -= 0.2

    #Adaptive Weighting
    item_size_factor = item / bin_capacity
    tightness_weight = 0.5 * (1-item_size_factor)
    fill_weight = 0.5 * (1+ item_size_factor)


    # Stochasticity
    randomness = np.random.rand(len(valid_bins)) * 0.01

    priorities[valid_bins] = (tightness_weight * tightness + fill_weight*fill_score + randomness)

    return priorities
```
