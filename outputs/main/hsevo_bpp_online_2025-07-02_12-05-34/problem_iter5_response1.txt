```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, target fill ratio, and randomness for bin selection."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf
    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        wasted_space = bins_remain_cap[can_fit] - item
        priorities[can_fit] = -wasted_space  # Minimize waste

        fill_ratio = (bins_remain_cap[can_fit] - wasted_space) / bins_remain_cap[can_fit]
        target_ratio = 0.6
        priorities[can_fit] += 5.0 * np.exp(-((fill_ratio - target_ratio)**2) / 0.02) # gaussian curve for target fill

        # Add small randomness to avoid local optima
        priorities[can_fit] += np.random.normal(0, 0.01, size=np.sum(can_fit))

        # Penalize bins that become nearly full.
        remaining_after_add = bins_remain_cap[can_fit] - item
        near_full_penalty = np.where(remaining_after_add < (0.1*bins_remain_cap.max()), -0.5, 0.0)
        priorities[can_fit] += near_full_penalty

    return priorities
```
