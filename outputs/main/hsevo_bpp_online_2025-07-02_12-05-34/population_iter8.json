[
  {
    "stdout_filepath": "problem_iter8_response0.txt_stdout.txt",
    "code_path": "problem_iter8_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, target fill, randomness, and near-full penalty.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n\n    if not np.any(can_fit):\n        return np.full_like(priorities, 0.0)\n\n    valid_bins = np.where(can_fit)[0]\n    remaining_after = bins_remain_cap[can_fit] - item\n\n    # Waste minimization: Prioritize tighter fits\n    waste = remaining_after\n    tightness = 1 / (waste + 0.0001)\n\n    # Target fill level (e.g., 75%): Reward bins closer to target\n    target_fill_level = 0.75 * bins_remain_cap.max()\n    fill_level = bins_remain_cap[can_fit]\n    fill_diff = np.abs(fill_level - target_fill_level)\n    fill_score = np.exp(-fill_diff / (bins_remain_cap.max() * 0.2)) # Gaussian-like score\n\n    # Near-full penalty\n    near_full_threshold = 0.1 * bins_remain_cap.max()\n    near_full_penalty = np.where(remaining_after < near_full_threshold, -0.5, 0.0)\n\n    # Small item bonus\n    small_item_threshold = bins_remain_cap.max() * 0.2\n    if item < small_item_threshold:\n        almost_full_threshold = bins_remain_cap.max() * 0.1\n        almost_full_bonus = (bins_remain_cap[can_fit] > item) * np.exp(-remaining_after / almost_full_threshold)\n    else:\n        almost_full_bonus = 0\n\n    # Combine scores with weights\n    tightness_weight = 0.4\n    fill_weight = 0.3\n    near_full_weight = 0.2\n    small_item_weight = 0.1\n\n    priorities[valid_bins] = (tightness_weight * tightness +\n                               fill_weight * fill_score +\n                               near_full_weight * near_full_penalty +\n                               small_item_weight * almost_full_bonus)\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 2.2437175907459115,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response1.txt_stdout.txt",
    "code_path": "problem_iter8_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, target fill level, near-full penalty, and randomness.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        # Minimize waste\n        waste = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] = -waste\n\n        # Target fill level\n        target_capacity = 0.75 * bins_remain_cap.max()\n        capacity_diff = np.abs(bins_remain_cap[valid_bins] - target_capacity)\n        priorities[valid_bins] += 0.5 / (capacity_diff + 0.0001)\n\n        # Near-full penalty\n        remaining_after_add = bins_remain_cap[valid_bins] - item\n        near_full_penalty = np.where(remaining_after_add < (0.1*bins_remain_cap.max()), -0.5, 0.0)\n        priorities[valid_bins] += near_full_penalty\n\n        # Randomness\n        priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.01\n\n        # Fill percentage bonus\n        fill_percentage = item / bins_remain_cap[valid_bins]\n        priorities[valid_bins] += fill_percentage\n\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.058635819704831,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response2.txt_stdout.txt",
    "code_path": "problem_iter8_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on tightness, target fill, and waste.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n\n    if not np.any(can_fit):\n        priorities[:] = np.random.rand(len(priorities)) * 0.0001\n        return priorities\n\n    valid_bins = np.where(can_fit)[0]\n    remaining_after = bins_remain_cap[can_fit] - item\n\n    # Tightness score\n    tightness = 1 / (remaining_after + 0.0001)\n\n    # Target fill level score\n    target_fill = bins_remain_cap.max() * 0.75\n    fill_level_diff = np.abs(bins_remain_cap[can_fit] - target_fill)\n    fill_level_score = 1 / (fill_level_diff + 0.0001)\n\n    # Waste minimization score\n    waste_threshold = bins_remain_cap.max() * 0.25\n    waste_score = np.where(remaining_after > waste_threshold, 0.1, 1.0)\n\n    # Adaptive weighting based on the number of valid bins\n    num_valid = np.sum(can_fit)\n    if num_valid > 5:\n        tightness_weight = 0.6\n        fill_weight = 0.3\n        waste_weight = 0.1\n    else:\n        tightness_weight = 0.4\n        fill_weight = 0.4\n        waste_weight = 0.2\n\n    priorities[valid_bins] = (tightness_weight * tightness +\n                               fill_weight * fill_level_score +\n                               waste_weight * waste_score)\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.058635819704831,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response3.txt_stdout.txt",
    "code_path": "problem_iter8_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, fill target, and adaptive penalty.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return -np.inf * np.ones_like(bins_remain_cap)\n\n    fit_score = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = 1.0 / (fit_score + 0.0001)  # Waste minimization\n\n    fill_percentage = (bins_remain_cap[valid_bins] - fit_score) / bins_remain_cap.max()\n    target_fill = 0.75\n    balance_factor = -abs(fill_percentage - target_fill) # Fill target\n    priorities[valid_bins] += 0.5 * balance_factor\n\n    near_full = fit_score < item * 0.05\n    priorities[valid_bins][near_full] *= 0.5  # Penalize near full\n\n    # Adaptive penalty: Higher penalty if item is large and bin is nearly full.\n    adaptive_penalty = near_full * (item / bins_remain_cap.max())\n    priorities[valid_bins] -= adaptive_penalty\n\n    randomness = np.random.rand(np.sum(valid_bins)) * 0.01\n    priorities[valid_bins] += randomness\n\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.178300757877951,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response4.txt_stdout.txt",
    "code_path": "problem_iter8_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins considering waste, target fill, near-full penalty, and randomness.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return np.full_like(bins_remain_cap, float('-inf'))\n\n    # Waste minimization score\n    fit_score = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = 1.0 / (fit_score + 0.0001)\n\n    # Target fill level\n    target_fill = 0.75 * bins_remain_cap.max()\n    fill_diff = np.abs(bins_remain_cap[valid_bins] - target_fill)\n    priorities[valid_bins] += 1.0 / (fill_diff + 0.0001)\n    \n    # Near-full penalty\n    nearly_full_threshold = 0.075 * bins_remain_cap.max()\n    nearly_full = fit_score < nearly_full_threshold\n    priorities[valid_bins][nearly_full] *= 0.6\n\n    # Randomness for exploration\n    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.04\n\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.068607897885915,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response5.txt_stdout.txt",
    "code_path": "problem_iter8_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines waste minimization, target fill ratio, and adaptive penalty\n    for near-full bins with a touch of randomness.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf\n    can_fit = bins_remain_cap >= item\n\n    if np.any(can_fit):\n        wasted_space = bins_remain_cap[can_fit] - item\n        priorities[can_fit] = -wasted_space  # Minimize waste\n\n        fill_ratio = (bins_remain_cap[can_fit] - wasted_space) / bins_remain_cap[can_fit]\n        target_ratio = 0.75  # Adjust target fill based on observation\n        priorities[can_fit] += 5.0 * np.exp(-((fill_ratio - target_ratio)**2) / 0.02)\n\n        # Adaptive near-full penalty. More sensitive as bins get smaller.\n        remaining_after_add = bins_remain_cap[can_fit] - item\n        max_cap = bins_remain_cap.max()\n        near_full_threshold = 0.1 * max_cap\n        penalty_strength = np.clip((near_full_threshold - remaining_after_add) / near_full_threshold, 0, 1)\n        priorities[can_fit] -= 0.5 * penalty_strength  # Scale penalty by nearness to threshold.\n\n        # Small randomness.\n        priorities[can_fit] += np.random.normal(0, 0.01, size=np.sum(can_fit))\n\n    return priorities",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.896290386916647,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response6.txt_stdout.txt",
    "code_path": "problem_iter8_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, target fill, waste minimization, and randomness.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        priorities[:] = np.random.rand(len(priorities)) * 0.0001\n        return priorities\n\n    remaining_space = bins_remain_cap[valid_bins] - item\n    fit_score = 1.0 / (remaining_space + 0.0001)\n\n    target_fill = bins_remain_cap.max() * 0.75\n    fill_level_diff = np.abs(bins_remain_cap[valid_bins] - target_fill)\n    fill_level_score = 1.0 / (fill_level_diff + 0.0001)\n\n    waste_threshold = bins_remain_cap.max() * 0.25\n    waste_score = np.where(remaining_space > waste_threshold, 0.1, 1.0)\n\n    num_valid = np.sum(valid_bins)\n    if num_valid > 5:\n        fit_weight = 0.6\n        fill_weight = 0.3\n        waste_weight = 0.1\n    else:\n        fit_weight = 0.4\n        fill_weight = 0.4\n        waste_weight = 0.2\n\n    combined_score = (fit_weight * fit_score + fill_weight * fill_level_score + waste_weight * waste_score)\n\n    priorities[valid_bins] = combined_score\n    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.1\n\n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "obj": 3.9688871160749857,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response7.txt_stdout.txt",
    "code_path": "problem_iter8_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines wasted space minimization, target fill and nearly full bin penalty.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    fit_within_capacity = bins_remain_cap >= item\n    nearly_full_threshold = 0.1\n    nearly_full_penalty = 0.5\n\n    if np.any(fit_within_capacity):\n        # Wasted space minimization (primary objective)\n        wasted_space = bins_remain_cap[fit_within_capacity] - item\n        priorities[fit_within_capacity] = 1.0 / (1e-6 + wasted_space)\n\n        # Target fill ratio (secondary objective)\n        fill_ratios = item / bins_remain_cap[fit_within_capacity]\n        target_fill = 0.8\n        fill_ratio_priority = -np.abs(fill_ratios - target_fill)\n        priorities[fit_within_capacity] += fill_ratio_priority * 0.1\n\n        # Penalize nearly full bins to avoid creating tiny fragments\n        nearly_full = bins_remain_cap < nearly_full_threshold * np.max(bins_remain_cap)\n        priorities[nearly_full] *= (1 - nearly_full_penalty)\n\n        # Add a bit of randomness to escape local optima\n        randomness = np.random.rand(np.sum(fit_within_capacity)) * 0.01\n        priorities[fit_within_capacity] += randomness\n    else:\n        priorities = -np.inf * np.ones_like(priorities)\n\n    return priorities",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.058635819704831,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response8.txt_stdout.txt",
    "code_path": "problem_iter8_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best fit, target fill, waste minimization, & randomness.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        priorities[:] = np.random.rand(len(priorities)) * 0.0001\n        return priorities\n\n    remaining_space = bins_remain_cap[valid_bins] - item\n    fit_score = 1.0 / (remaining_space + 0.0001)\n    target_fill = bins_remain_cap.max() * 0.75\n    fill_level_diff = np.abs(bins_remain_cap[valid_bins] - target_fill)\n    fill_level_score = 1.0 / (fill_level_diff + 0.0001)\n    waste_threshold = bins_remain_cap.max() * 0.25\n    waste_score = np.where(remaining_space > waste_threshold, 0.1, 1.0)\n\n    num_valid = np.sum(valid_bins)\n    if num_valid > 5:\n        fit_weight = 0.6\n        fill_weight = 0.3\n        waste_weight = 0.1\n    else:\n        fit_weight = 0.4\n        fill_weight = 0.4\n        waste_weight = 0.2\n\n    combined_score = (fit_weight * fit_score + fill_weight * fill_level_score + waste_weight * waste_score)\n\n    #nearly full penality\n    nearly_full_threshold = bins_remain_cap.max() * 0.1\n    nearly_full = bins_remain_cap[valid_bins] < nearly_full_threshold\n    combined_score[nearly_full] *= 0.6\n\n    priorities[valid_bins] = combined_score\n\n    return priorities",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.058635819704831,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response9.txt_stdout.txt",
    "code_path": "problem_iter8_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, target fill, near-full penalty, and randomness.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return -np.inf * np.ones_like(bins_remain_cap)\n\n    remaining_space = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = 1.0 / (remaining_space + 1e-6)  # Minimize waste\n\n    target_capacity = 0.75 * np.max(bins_remain_cap)\n    capacity_diff = np.abs(bins_remain_cap[valid_bins] - target_capacity)\n    priorities[valid_bins] += 0.5 / (capacity_diff + 1e-6)  # Target fill\n\n    nearly_full_threshold = 0.1 * np.max(bins_remain_cap)\n    nearly_full_penalty = (remaining_space < nearly_full_threshold) * 0.75\n    priorities[valid_bins] -= nearly_full_penalty  # Penalize near-full\n\n    randomness = np.random.rand(np.sum(valid_bins)) * 0.1\n    priorities[valid_bins] += randomness  # Add randomness\n\n    return priorities",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.307937774232155,
    "exec_success": true
  }
]