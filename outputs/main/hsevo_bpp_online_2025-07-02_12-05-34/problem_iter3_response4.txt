```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First, identify bins that can actually fit the item
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        # If no bins can fit, assign low priority to all (might need a new bin)
        return priorities

    # For valid bins, calculate a "fit score"
    fit_score = bins_remain_cap[valid_bins] - item  # Remaining space after placing the item

    # Give higher priority to bins where the item fits snugly (minimize wasted space)
    # We can use the inverse of the remaining space as a priority
    priorities[valid_bins] = 1.0 / (fit_score + 0.0001) # Avoid division by zero

    # Boost priority for bins close to being half empty, could potentially improve packing next items
    half_empty_score = np.abs(bins_remain_cap[valid_bins] - bins_remain_cap.max()/2)
    priorities[valid_bins] += 0.5/(half_empty_score+0.0001)

    #Prioritize almost full bins, since filling them helps to avoid creating many almost empty bins
    almost_full_score = bins_remain_cap.max() - bins_remain_cap[valid_bins]
    priorities[valid_bins] += 0.7/(almost_full_score + 0.0001)

    # Introduce a small random factor to break ties and explore different options
    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.01
    
    return priorities
```
