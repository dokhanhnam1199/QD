```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Employs a combined strategy: favors bins where the item fits reasonably well
    (to avoid excessive fragmentation) and penalizes bins nearing full capacity
    to delay their closure, increasing opportunity for later, larger items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # First, identify bins that can accommodate the item. Give -inf priority if can't fit.
    can_fit = bins_remain_cap >= item
    priorities = np.where(can_fit, 0.0, -np.inf)  # Large negative value for bins that can't fit

    # If no bins can fit the item, return a vector with equal priority (random pick)
    if not np.any(can_fit):
        return np.ones_like(bins_remain_cap)

    # Calculate how much space would be left after adding the item.
    remaining_after_add = bins_remain_cap - item

    # Ratio of used capacity AFTER adding the item to original remaining capacity.
    # Aim to fill the bins moderately well.
    capacity_utilization_ratio = (bins_remain_cap - remaining_after_add) / bins_remain_cap

    # Give a bonus to bins where the item fills the space well (between 0.7 and 0.9)
    # This range can be adjusted based on experimentation.
    good_fit_bonus = np.where((capacity_utilization_ratio > 0.7) & (capacity_utilization_ratio < 0.9), 1.0, 0.0)

    #Penalize bins close to full (less than item size remaining after adding) to increase chance of packing future large items
    near_full_penalty = np.where(remaining_after_add < (0.1*bins_remain_cap.max()), -0.5, 0.0)  #Adjusting weight factor
    # Combine the factors.
    priorities = priorities + good_fit_bonus + near_full_penalty
    return priorities
```
