```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines waste minimization, target fill, and dynamic adjustments with strategic randomness.
    Adaptive weights respond to item size and bin utilization.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return np.full_like(priorities, -1.0)

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item
    bin_capacity = bins_remain_cap.max()
    bins_utilization = (bin_capacity - bins_remain_cap[can_fit]) / bin_capacity

    # Waste Minimization
    waste = remaining_after
    tightness = np.exp(-5 * waste / bin_capacity)

    # Target Fill Level
    target_fill_level_low = 0.70 * bin_capacity
    target_fill_level_high = 0.90 * bin_capacity
    fill_level = bins_remain_cap[can_fit]

    fill_score = np.where(
        fill_level < target_fill_level_low,
        np.exp(-((fill_level - target_fill_level_low)**2) / (2 * (bin_capacity * 0.1)**2)),
        np.where(
            fill_level > target_fill_level_high,
            np.exp(-((fill_level - target_fill_level_high)**2) / (2 * (bin_capacity * 0.1)**2)),
            1.0
        )
    )

    # Dynamic Near-Full Management
    near_full_threshold = 0.15 * bin_capacity
    is_near_full = remaining_after < near_full_threshold
    near_full_penalty = np.where(is_near_full, -0.9 * (item / bin_capacity), 0.0)

    # Adaptive Weighting
    item_size_factor = item / bin_capacity
    utilization_factor = np.mean(bins_utilization)

    tightness_weight = 0.4 * (1 - item_size_factor) * (1 + utilization_factor)
    fill_weight = 0.3 * (1 + item_size_factor) * (1 - utilization_factor)
    near_full_weight = 0.15

    # Strategic Randomness
    randomness_scale = 0.02 * (1 + item_size_factor) * (1 - utilization_factor)
    randomness = np.random.normal(0, randomness_scale, len(valid_bins))

    priorities[valid_bins] = (tightness_weight * tightness +
                               fill_weight * fill_score +
                               near_full_weight * near_full_penalty +
                               randomness)

    return priorities
```
