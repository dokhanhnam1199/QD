```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function prioritizes bins based on a combination of factors,
    including:
    1.  Remaining capacity relative to item size (to avoid fragmentation).
    2.  Absolute remaining capacity (to favor bins with more space).
    3.  A 'sweet spot' penalty if the item fits 'too perfectly' (leading
        to potentially suboptimal packing of future items).
    4.  Relevance of both capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Capacity relative to item size (avoid fragmentation).  Favor closer fits.
            capacity_ratio = item / cap  # Higher is better. Close to 1 is ideal

            # Absolute remaining capacity (favor bins with more space).
            # Encourages use of existing bins before opening new ones. A small value means that the bin has a larger relative occupied space
            capacity_impact = cap
            # Introduce a "sweet spot" penalty. If the item fills the bin nearly perfectly,
            # slightly discourage it to prevent premature exhaustion of larger bins.  It encourages larger free bins to receive smaller elements
            sweet_spot_threshold = 0.9  # Tune this parameter
            sweet_spot_penalty = 0.0

            if capacity_ratio > sweet_spot_threshold:
                sweet_spot_penalty = -0.1
            priorities[i] = (1 - abs(capacity_ratio - 0.8 )) + capacity_impact/np.max(bins_remain_cap) + sweet_spot_penalty # capacity_ratio near 1 is good


        else:
            priorities[i] = -np.inf  # Impossible to place, lowest priority

    return priorities
```
