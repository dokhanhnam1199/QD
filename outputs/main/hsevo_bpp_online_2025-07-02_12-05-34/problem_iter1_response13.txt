```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function prioritizes bins that can fit the item relatively well,
    but also considers avoiding bins that are left nearly empty after packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Give negative priority to bins that cannot fit the item
    cannot_fit = item > bins_remain_cap
    priorities[cannot_fit] = -np.inf

    # Calculate the fill ratio for bins that can fit the item. The higher the better but not 1
    can_fit = item <= bins_remain_cap
    if np.any(can_fit):
        fill_ratio = item / bins_remain_cap[can_fit]

        # Give a higher priority for bins that can be filled more
        priorities[can_fit] = (1 - np.abs(fill_ratio - 0.6)) * 10 # Modified fill ratio
        post_fill = bins_remain_cap[can_fit] - item

        #Avoid small residual space
        small_residuals = post_fill <= 0.1
        priorities[can_fit][small_residuals] -= 100 #Strong Penalty
        
        #Bins close to full
        fullish = post_fill/bins_remain_cap[can_fit] <= 0.2
        priorities[can_fit][fullish] += 5
        
    return priorities
```
