```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, target fill, randomness, and near-full penalty,
    with adaptive weighting and improved edge case handling.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return np.full_like(priorities, -1.0)  # Strongly penalize if no fit

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item

    # Waste minimization: Prioritize tighter fits
    waste = remaining_after
    tightness = 1 / (waste + 0.0001)

    # Target fill level (e.g., 75%): Reward bins closer to target
    target_fill_level = 0.75 * bins_remain_cap.max()
    fill_level = bins_remain_cap[can_fit]
    fill_diff = np.abs(fill_level - target_fill_level)
    fill_score = np.exp(-fill_diff / (bins_remain_cap.max() * 0.2))  # Gaussian-like score

    # Near-full penalty: Increased penalty, especially for large items
    near_full_threshold = 0.1 * bins_remain_cap.max()
    near_full_penalty = np.where(remaining_after < near_full_threshold, -1.0 * (item / bins_remain_cap.max()), 0.0)  # Penalty scaled by item size

    # Small item bonus: Encourage filling almost full bins, but only if it doesn't create tiny waste
    small_item_threshold = bins_remain_cap.max() * 0.2
    if item < small_item_threshold:
        almost_full_threshold = bins_remain_cap.max() * 0.1
        really_small_waste_threshold = bins_remain_cap.max() * 0.01
        almost_full_bonus = np.where((bins_remain_cap[can_fit] > item) & (remaining_after > really_small_waste_threshold),
                                      np.exp(-remaining_after / almost_full_threshold),
                                      0.0)
    else:
        almost_full_bonus = 0

    # Adaptive Weighting: Adjust weights based on item size
    item_size_ratio = item / bins_remain_cap.max()
    tightness_weight = 0.5 - 0.2 * item_size_ratio  # Larger items, less tightness emphasis
    fill_weight = 0.2 + 0.2 * item_size_ratio  # Larger items, more fill emphasis
    near_full_weight = 0.2 + 0.1 * item_size_ratio # larger item, more near full penality
    small_item_weight = 0.1 - 0.1 * item_size_ratio  # Smaller items, more small item bonus

    # Ensure weights are within reasonable bounds
    tightness_weight = np.clip(tightness_weight, 0.1, 0.5)
    fill_weight = np.clip(fill_weight, 0.1, 0.4)
    near_full_weight = np.clip(near_full_weight, 0.1, 0.3)
    small_item_weight = np.clip(small_item_weight, 0.0, 0.2)

    # Prioritize empty bins if the item is large enough
    large_item_threshold = 0.6 * bins_remain_cap.max()
    if item > large_item_threshold:
        empty_bin_indices = np.where(bins_remain_cap == bins_remain_cap.max())[0]
        empty_bin_indices_can_fit = np.intersect1d(empty_bin_indices, valid_bins)  # empty bin and can fit.
        if len(empty_bin_indices_can_fit) >0:
            priorities[empty_bin_indices_can_fit] += 0.5 # give empty bin extra score

    priorities[valid_bins] = (tightness_weight * tightness +
                               fill_weight * fill_score +
                               near_full_weight * near_full_penalty +
                               small_item_weight * almost_full_bonus)
    return priorities
```
