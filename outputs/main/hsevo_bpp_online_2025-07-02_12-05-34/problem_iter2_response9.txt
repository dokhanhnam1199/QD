```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Assigns priority to bins considering fit, utilization, and preventing near-full bins."""
    can_fit = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    priorities[~can_fit] = -1e9

    if not np.any(can_fit):
        return np.ones_like(bins_remain_cap)

    residual_capacity = bins_remain_cap - item
    close_fit = np.abs(residual_capacity)
    priorities[can_fit] += (1 / (1 + close_fit[can_fit]))

    capacity_utilization_ratio = (bins_remain_cap - residual_capacity) / bins_remain_cap
    good_fit_bonus = np.where((capacity_utilization_ratio > 0.7) & (capacity_utilization_ratio < 0.9), 1.0, 0.0)
    
    near_full_penalty = np.where(residual_capacity < (0.1*bins_remain_cap.max()), -0.5, 0.0)
    
    priorities = priorities + good_fit_bonus + near_full_penalty
    return priorities
```
