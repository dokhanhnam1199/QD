```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines wasted space minimization, target fill and nearly full bin penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fit_within_capacity = bins_remain_cap >= item
    nearly_full_threshold = 0.1
    nearly_full_penalty = 0.5

    if np.any(fit_within_capacity):
        # Wasted space minimization (primary objective)
        wasted_space = bins_remain_cap[fit_within_capacity] - item
        priorities[fit_within_capacity] = 1.0 / (1e-6 + wasted_space)

        # Target fill ratio (secondary objective)
        fill_ratios = item / bins_remain_cap[fit_within_capacity]
        target_fill = 0.8
        fill_ratio_priority = -np.abs(fill_ratios - target_fill)
        priorities[fit_within_capacity] += fill_ratio_priority * 0.1

        # Penalize nearly full bins to avoid creating tiny fragments
        nearly_full = bins_remain_cap < nearly_full_threshold * np.max(bins_remain_cap)
        priorities[nearly_full] *= (1 - nearly_full_penalty)

        # Add a bit of randomness to escape local optima
        randomness = np.random.rand(np.sum(fit_within_capacity)) * 0.01
        priorities[fit_within_capacity] += randomness
    else:
        priorities = -np.inf * np.ones_like(priorities)

    return priorities
```
