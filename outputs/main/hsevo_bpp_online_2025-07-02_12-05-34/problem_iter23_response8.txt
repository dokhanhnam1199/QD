```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines target fill, waste minimization, and adaptive penalty."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item
    bin_capacity = bins_remain_cap.max()

    if not np.any(can_fit):
        return np.full_like(priorities, -1.0)

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item

    # Waste Minimization: Prioritize bins with smaller remaining space.
    waste = remaining_after
    tightness = 1 / (waste + 0.0001)

    # Target Fill Level: Encourage bins to reach a target fill level.
    target_fill_level = 0.8 * bin_capacity
    fill_level = bins_remain_cap[can_fit]
    fill_diff = np.abs(fill_level - target_fill_level)
    fill_score = np.exp(-fill_diff / (bin_capacity * 0.2))

    # Adaptive Penalty for Near-Full Bins: Discourage filling bins that are already near full.
    near_full_threshold = 0.15 * bin_capacity
    is_near_full = remaining_after < near_full_threshold
    near_full_penalty = np.where(is_near_full, -0.9 * (item / bin_capacity), 0.0)

    # Combine Scores with Weights
    tightness_weight = 0.4
    fill_weight = 0.4
    near_full_weight = 0.2

    priorities[valid_bins] = (tightness_weight * tightness +
                               fill_weight * fill_score +
                               near_full_weight * near_full_penalty)

    return priorities
```
