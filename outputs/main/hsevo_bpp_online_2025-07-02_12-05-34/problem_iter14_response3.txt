```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive heuristic combining waste minimization, target fill, and dynamic penalties."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return priorities

    # Waste minimization
    waste = bins_remain_cap[can_fit] - item
    priorities[can_fit] = 1.0 / (1e-6 + waste)

    # Target fill level
    max_bin_cap = np.max(bins_remain_cap)
    target_fill = 0.75 * max_bin_cap
    fill_diff = np.abs(bins_remain_cap[can_fit] - target_fill)
    fill_priority = np.exp(-fill_diff / max_bin_cap)
    priorities[can_fit] += fill_priority * 0.2

    # Near-full/Near-empty penalty (dynamic)
    remaining_after_add = bins_remain_cap[can_fit] - item
    nearly_full_threshold = 0.1 * max_bin_cap
    nearly_empty_threshold = 0.9 * max_bin_cap  # Encourage bin utilization

    near_full_penalty = np.where(remaining_after_add < nearly_full_threshold, -0.5, 0.0)
    near_empty_bonus = np.where(bins_remain_cap[can_fit] > nearly_empty_threshold, 0.1, 0.0) # Small bonus
    priorities[can_fit] += near_full_penalty + near_empty_bonus

    # Item Size Consideration (adaptive weighting)
    item_size_weight = item / max_bin_cap  # Normalize item size
    priorities[can_fit] *= (1 + item_size_weight * 0.5)  # Larger items get higher priority

    # Randomness (decaying)
    randomness = np.random.rand(np.sum(can_fit)) * 0.01 * (1 - item_size_weight) # Less randomness for large items
    priorities[can_fit] += randomness

    return priorities
```
