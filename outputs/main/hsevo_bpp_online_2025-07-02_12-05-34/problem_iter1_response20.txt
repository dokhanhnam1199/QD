```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate remaining capacity after placing the item in each bin.
    remaining_after_fit = bins_remain_cap - item
    
    # Give a high priority to bins where the item fits.
    fit_mask = remaining_after_fit >= 0
    priorities[fit_mask] = 1  # Base priority for bins that fit
    
    # Prioritize bins with smaller remaining capacity after fit, but only if it fits
    priorities[fit_mask] += 1 / (remaining_after_fit[fit_mask] + 1e-9)  # avoid division by zero
    
    # Consider "almost full" bins: prioritize bins which are already nearly full
    # relative to the item size
    almost_full_mask = (bins_remain_cap > 0) & (bins_remain_cap < 2 * item)  # Adjust threshold as needed

    # If the item does NOT fit, give a slight negative priority, but avoid over-penalizing.
    not_fit_mask = remaining_after_fit < 0
    priorities[not_fit_mask] = -np.abs(remaining_after_fit[not_fit_mask]) / (item + 1e-9)
    
    return priorities
```
