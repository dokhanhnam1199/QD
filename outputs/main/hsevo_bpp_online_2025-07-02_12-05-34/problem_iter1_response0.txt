```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Give a high priority to bins where the item fits snugly
    fit_score = np.exp(-np.abs(bins_remain_cap - item) / (item + 1e-6)) # Avoid division by zero
    priorities += 2 * fit_score

    # Give some priority to bins that have enough capacity (First Fit aspect)
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1

    # Penalize bins that are almost full after placing the item (try to keep bins balanced).
    remaining_after_placement = bins_remain_cap - item
    almost_full = (remaining_after_placement > 0) & (remaining_after_placement < 0.1) #threshold
    priorities[almost_full] -= 0.5

    # Bonus for bins that are quite empty
    quite_empty = bins_remain_cap > 0.75 # threshold
    priorities[quite_empty] += 0.25
    
    # If no bin can fit the item, slightly prioritize bins with more remaining capacity to reduce fragmentation
    if not np.any(can_fit):
        priorities = bins_remain_cap / np.max(bins_remain_cap) - 0.1 # slight scaling
        

    return priorities
```
