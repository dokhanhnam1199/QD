```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines wasted space minimization and fill ratio prioritization."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fit_within_capacity = bins_remain_cap >= item

    if np.any(fit_within_capacity):
        wasted_space = bins_remain_cap[fit_within_capacity] - item
        priorities[fit_within_capacity] = 1.0 / (1e-6 + wasted_space)

        fill_ratios = item / bins_remain_cap[fit_within_capacity]
        priorities[fit_within_capacity] += fill_ratios * 0.1  #fill ratio weight
    else:
        priorities = bins_remain_cap/item
    return priorities
```
