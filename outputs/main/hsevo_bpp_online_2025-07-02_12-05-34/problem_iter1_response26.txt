```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version considers multiple factors to prioritize bins:
    1. Remaining capacity: Bins with sufficient capacity are preferred.
    2. Waste minimization: Bins that minimize wasted space are preferred.
    3. Avoidance of near-full bins: Penalizes bins that would become near-full.
    4. Empty Bin Preference: Strongly prefers empty bins if the item fits.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    n_bins = len(bins_remain_cap)

    for i in range(n_bins):
        remaining_capacity = bins_remain_cap[i]

        if remaining_capacity >= item:
            # Empty Bin Preference (highest priority)
            if remaining_capacity == bins_remain_cap.max() and remaining_capacity == bins_remain_cap.min():
               priorities[i] += 1000.0 # Prefer the first empty bin

            # Capacity-based score (minimize wasted space)
            waste = remaining_capacity - item
            priorities[i] += (1.0 / (waste + 0.0001))  # Avoid division by zero

            # Remaining Capacity Reward
            priorities[i] += remaining_capacity

            # Near-Full Penalty
            if remaining_capacity - item < 0.1:  # Adjust threshold as needed
                priorities[i] -= 50  # High Penalty
        else:
            # Negative priority for bins that cannot accommodate the item
            priorities[i] = -10000 # Should be smaller than all possible positive priorities

    return priorities
```
