```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering waste, target fill, near-full penalty, and randomness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return np.full_like(bins_remain_cap, float('-inf'))

    # Waste minimization score
    fit_score = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] = 1.0 / (fit_score + 0.0001)

    # Target fill level
    target_fill = 0.75 * bins_remain_cap.max()
    fill_diff = np.abs(bins_remain_cap[valid_bins] - target_fill)
    priorities[valid_bins] += 1.0 / (fill_diff + 0.0001)
    
    # Near-full penalty
    nearly_full_threshold = 0.075 * bins_remain_cap.max()
    nearly_full = fit_score < nearly_full_threshold
    priorities[valid_bins][nearly_full] *= 0.6

    # Randomness for exploration
    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.04

    return priorities
```
