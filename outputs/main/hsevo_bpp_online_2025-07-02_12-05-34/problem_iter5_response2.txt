```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, target utilization, and bin balancing."""
    can_fit = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if not np.any(can_fit):
        return priorities - np.inf

    priorities[can_fit] += 1  # Base priority for bins that can fit

    residual_capacity = bins_remain_cap - item
    close_fit = np.abs(residual_capacity)
    priorities[can_fit] += (1 / (1 + close_fit[can_fit])) # Minimize wasted space

    capacity_utilization_ratio = (bins_remain_cap[can_fit] - residual_capacity[can_fit]) / bins_remain_cap[can_fit]
    good_fit_bonus = np.where((capacity_utilization_ratio > 0.7) & (capacity_utilization_ratio < 0.9), 0.5, 0.0)
    priorities[can_fit] += good_fit_bonus # Target utilization between 70% and 90%

    # Prioritize bins that are more full (avoid creating many almost-empty bins)
    fullness_score = (bins_remain_cap[can_fit] - residual_capacity[can_fit]) / bins_remain_cap.max()
    priorities[can_fit] += fullness_score * 0.75

    empty_threshold = 0.2 * bins_remain_cap.max()  # Threshold for "too empty"
    too_empty = (residual_capacity[can_fit] > empty_threshold)
    priorities[can_fit][too_empty] *= 0.7  # Reduce priority if it becomes too empty

    return priorities
```
