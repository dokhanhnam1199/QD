```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit, target fill, waste minimization, & randomness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        priorities[:] = np.random.rand(len(priorities)) * 0.0001
        return priorities

    remaining_space = bins_remain_cap[valid_bins] - item
    fit_score = 1.0 / (remaining_space + 0.0001)
    target_fill = bins_remain_cap.max() * 0.75
    fill_level_diff = np.abs(bins_remain_cap[valid_bins] - target_fill)
    fill_level_score = 1.0 / (fill_level_diff + 0.0001)
    waste_threshold = bins_remain_cap.max() * 0.25
    waste_score = np.where(remaining_space > waste_threshold, 0.1, 1.0)

    num_valid = np.sum(valid_bins)
    if num_valid > 5:
        fit_weight = 0.6
        fill_weight = 0.3
        waste_weight = 0.1
    else:
        fit_weight = 0.4
        fill_weight = 0.4
        waste_weight = 0.2

    combined_score = (fit_weight * fit_score + fill_weight * fill_level_score + waste_weight * waste_score)

    #nearly full penality
    nearly_full_threshold = bins_remain_cap.max() * 0.1
    nearly_full = bins_remain_cap[valid_bins] < nearly_full_threshold
    combined_score[nearly_full] *= 0.6

    priorities[valid_bins] = combined_score

    return priorities
```
