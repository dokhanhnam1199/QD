```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced heuristic with adaptive elements, dynamic adjustments based on item size
    and bin state, and refined stochasticity.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return np.full_like(priorities, -1.0)

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item
    bin_capacity = bins_remain_cap.max()
    bins_utilization = (bin_capacity - bins_remain_cap[can_fit]) / bin_capacity

    # Waste Minimization (Tightness)
    waste = remaining_after
    tightness = 1 / (waste + 0.0001)

    # Target Fill Level
    target_fill_level = 0.8 * bin_capacity  # Slightly higher target
    fill_level = bins_remain_cap[can_fit]
    fill_diff = np.abs(fill_level - target_fill_level)
    fill_score = np.exp(-fill_diff / (bin_capacity * 0.2))

    # Dynamic Near-Full Management
    near_full_threshold = 0.15 * bin_capacity  # Adjusted threshold
    is_near_full = remaining_after < near_full_threshold
    near_full_penalty = np.where(is_near_full, -0.7 * (item/bin_capacity), 0.0)  # Reduced penalty

    # Item Size Considerations
    item_size_ratio = item / bin_capacity

    # Smaller Item Bonus (if item fits nearly perfectly into a near-full bin)
    small_item_threshold = bin_capacity * 0.2
    almost_full_threshold = bin_capacity * 0.08
    almost_full_bonus = np.where((item < small_item_threshold) & is_near_full,
                                  np.exp(-remaining_after / (almost_full_threshold + 0.0001)),
                                  0.0)

    # Larger Item Penalty (if placing it leaves very little space)
    large_item_threshold = bin_capacity * 0.7
    small_space_penalty = np.where((item > large_item_threshold) & (bins_remain_cap[can_fit] < (item + 0.1 * bin_capacity)),
                                     -0.6 * (item/bin_capacity),  # Reduced penalty
                                     0.0)

    # Adaptive Weighting: Focus on Item Size and Bin Utilization
    utilization_level = np.mean(bins_utilization)  # Overall utilization
    tightness_weight = 0.4 * (1 - item_size_ratio) * (1 + utilization_level)
    fill_weight = 0.4 * (1 + item_size_ratio) * (1 - utilization_level)
    near_full_weight = 0.10
    small_item_weight = 0.05
    large_item_weight = 0.05

    # Adaptive Stochasticity (Decaying)
    randomness_scale = 0.02 * (1 + item_size_ratio) * (1 - utilization_level)
    randomness = np.random.normal(0, randomness_scale, len(valid_bins))

    priorities[valid_bins] = (tightness_weight * tightness +
                               fill_weight * fill_score +
                               near_full_weight * near_full_penalty +
                               small_item_weight * almost_full_bonus +
                               large_item_weight * small_space_penalty +
                               randomness)

    return priorities
```
