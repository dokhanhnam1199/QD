```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, target fill, near-full penalty, and item size bonus.
    Adaptive weights are used.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return np.full_like(priorities, 0.0)

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item

    # Waste minimization: Prioritize tighter fits
    waste = remaining_after
    tightness = 1 / (waste + 0.0001)

    # Target fill level (e.g., 75%): Reward bins closer to target
    target_fill_level = 0.75 * bins_remain_cap.max()
    fill_level = bins_remain_cap[can_fit]
    fill_diff = np.abs(fill_level - target_fill_level)
    fill_score = np.exp(-fill_diff / (bins_remain_cap.max() * 0.2))

    # Near-full penalty
    near_full_threshold = 0.1 * bins_remain_cap.max()
    near_full_penalty = np.where(remaining_after < near_full_threshold, -0.5, 0.0)

    # Small item bonus
    small_item_threshold = bins_remain_cap.max() * 0.2
    if item < small_item_threshold:
        almost_full_threshold = bins_remain_cap.max() * 0.1
        almost_full_bonus = (bins_remain_cap[can_fit] > item) * np.exp(-remaining_after / almost_full_threshold)
    else:
        almost_full_bonus = 0

    # Adaptive weights based on item size
    if item < bins_remain_cap.max() * 0.1:
        tightness_weight = 0.3
        fill_weight = 0.4
        near_full_weight = 0.1
        small_item_weight = 0.2
    elif item > bins_remain_cap.max() * 0.5:
        tightness_weight = 0.5
        fill_weight = 0.2
        near_full_weight = 0.2
        small_item_weight = 0.1
    else:
        tightness_weight = 0.4
        fill_weight = 0.3
        near_full_weight = 0.2
        small_item_weight = 0.1

    priorities[valid_bins] = (tightness_weight * tightness +
                               fill_weight * fill_score +
                               near_full_weight * near_full_penalty +
                               small_item_weight * almost_full_bonus)
    return priorities
```
