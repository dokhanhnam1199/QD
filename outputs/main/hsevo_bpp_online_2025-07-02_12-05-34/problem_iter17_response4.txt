```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines adaptive fill, near-empty bonus, and decaying randomness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return priorities

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item
    bin_capacity = bins_remain_cap.max()

    # Target fill level (adaptive)
    target_fill = 0.75 * bin_capacity
    fill_diff = np.abs(bins_remain_cap[can_fit] - target_fill)
    fill_priority = np.exp(-fill_diff / bin_capacity)
    priorities[valid_bins] += fill_priority * 0.4  # Increased weight

    # Near-full/Near-empty
    nearly_full_threshold = 0.1 * bin_capacity
    nearly_empty_threshold = 0.9 * bin_capacity

    near_full_penalty = np.where(remaining_after < nearly_full_threshold, -0.5, 0.0)
    near_empty_bonus = np.where(bins_remain_cap[can_fit] > nearly_empty_threshold, 0.2, 0.0)  # Increase bonus
    priorities[valid_bins] += near_full_penalty + near_empty_bonus

    # Decaying randomness based on item size
    item_size_weight = item / bin_capacity
    randomness = np.random.rand(len(valid_bins)) * 0.02 * (1 - item_size_weight)
    priorities[valid_bins] += randomness

    return priorities
```
