[
  {
    "stdout_filepath": "problem_iter2_response0.txt_stdout.txt",
    "code_path": "problem_iter2_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization and target fill ratio for bin priority.\"\"\"\n\n    can_fit = bins_remain_cap >= item\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    if np.any(can_fit):\n        wasted_space = bins_remain_cap[can_fit] - item\n        priorities[can_fit] = 1.0 / (wasted_space + 0.0001)\n\n        fill_ratio = (bins_remain_cap[can_fit] - wasted_space) / bins_remain_cap[can_fit]\n        target_ratio = 0.6\n        priorities[can_fit] += 5.0 * np.exp(-((fill_ratio - target_ratio)**2) / 0.02) # gaussian curve\n\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 5.674112485041892,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response1.txt_stdout.txt",
    "code_path": "problem_iter2_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fill ratio target with waste minimization.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    for i, capacity in enumerate(bins_remain_cap):\n        if capacity >= item:\n            # Fill ratio target\n            fill_ratio = item / capacity\n            priority = (1 - np.abs(fill_ratio - 0.6))\n\n            # Waste minimization bonus\n            waste = capacity - item\n            priority += np.exp(-(waste**2)/((item/4)**2))\n            \n            priorities[i] = priority\n        else:\n            priorities[i] = -np.inf\n\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "exec_success": false,
    "obj": Infinity,
    "traceback_msg": "Command '['python3', '-u', '/home/dokhanhnam1199/QD/problems/bpp_online/eval.py', '5000', '/home/dokhanhnam1199/QD', 'train']' timed out after 49.99997296000947 seconds"
  },
  {
    "stdout_filepath": "problem_iter2_response2.txt_stdout.txt",
    "code_path": "problem_iter2_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fill ratio target, remaining capacity, and penalizes tight fits.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    for i, capacity in enumerate(bins_remain_cap):\n        if capacity < item:\n            priorities[i] = -np.inf\n        else:\n            fill_ratio = item / capacity\n            priority_fill_ratio = -abs(fill_ratio - 0.8)  # Target fill around 0.8\n            remaining_capacity = capacity - item\n            priority_remaining_capacity = (1-remaining_capacity/capacity)\n            if capacity <= 1.1*item:\n                priority_close_capacity = -10\n            else:\n                priority_close_capacity = 0\n            priorities[i] = priority_fill_ratio + priority_remaining_capacity + priority_close_capacity\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 7.917830075787803,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response3.txt_stdout.txt",
    "code_path": "problem_iter2_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins using waste, fill ratio, and randomness.\"\"\"\n\n    epsilon = 1e-9\n\n    waste = bins_remain_cap - item\n    fill_ratios = item / (bins_remain_cap + epsilon)\n\n    priorities = -np.abs(waste) + fill_ratios * 0.5 #combine waste and fill ratio\n\n    priorities[waste < 0] = -np.inf\n\n    randomness = np.random.rand(len(bins_remain_cap)) * (0.1 / (item+0.00001) )\n\n    priorities = priorities + randomness\n\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response4.txt_stdout.txt",
    "code_path": "problem_iter2_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, fill percentage, and balance bin utilization.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        waste = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] = -waste  # Minimize waste\n        fill_percentage = item / bins_remain_cap[valid_bins]\n        priorities[valid_bins] += fill_percentage  # Fill percentage\n        priorities[valid_bins] += (bins_remain_cap[valid_bins] > 0.5) * 0.1  # Moderate use\n        remaining_after_add = bins_remain_cap[valid_bins] - item\n        near_full_penalty = np.where(remaining_after_add < (0.1*bins_remain_cap.max()), -0.5, 0.0)\n        priorities[valid_bins] += near_full_penalty\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response5.txt_stdout.txt",
    "code_path": "problem_iter2_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines wasted space minimization and fill ratio prioritization.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    fit_within_capacity = bins_remain_cap >= item\n\n    if np.any(fit_within_capacity):\n        wasted_space = bins_remain_cap[fit_within_capacity] - item\n        priorities[fit_within_capacity] = 1.0 / (1e-6 + wasted_space)\n\n        fill_ratios = item / bins_remain_cap[fit_within_capacity]\n        priorities[fit_within_capacity] += fill_ratios * 0.1  #fill ratio weight\n    else:\n        priorities = bins_remain_cap/item\n    return priorities",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response6.txt_stdout.txt",
    "code_path": "problem_iter2_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fit and remaining capacity, with randomness.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return priorities\n\n    fit_score = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = 1.0 / (fit_score + 0.0001)\n\n    # Add a bit of randomness to avoid local optima\n    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.1\n\n    # Boost priority based on remaining capacity relative to average.\n    avg_capacity = np.mean(bins_remain_cap)\n    capacity_diff = np.abs(bins_remain_cap[valid_bins] - avg_capacity)\n    priorities[valid_bins] += 1.0 / (capacity_diff + 0.0001)\n\n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "obj": 41.02512963701636,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response7.txt_stdout.txt",
    "code_path": "problem_iter2_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization & target utilization, avoids overfilling.\"\"\"\n    can_fit = bins_remain_cap >= item\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    priorities[can_fit] += 1\n\n    residual_capacity = bins_remain_cap - item\n    close_fit = np.abs(residual_capacity)\n    priorities[can_fit] += (1 / (1 + close_fit[can_fit]))\n\n    capacity_utilization_ratio = (bins_remain_cap - residual_capacity) / bins_remain_cap\n    good_fit_bonus = np.where((capacity_utilization_ratio > 0.7) & (capacity_utilization_ratio < 0.9), 0.5, 0.0)\n\n    priorities = priorities + good_fit_bonus\n    priorities[~can_fit] = -1e9\n    return priorities",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.547267650578394,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response8.txt_stdout.txt",
    "code_path": "problem_iter2_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fit and current fill level, with small penalty for near-full bins.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n\n    if not np.any(can_fit):\n        return priorities\n\n    valid_bins = np.where(can_fit)[0]\n    remaining_after = bins_remain_cap[can_fit] - item\n    tightness = 1 / (remaining_after + 0.0001)\n    fullness = 1 - (bins_remain_cap[can_fit] / bins_remain_cap.max())\n    near_full_penalty = np.where(remaining_after < (0.1 * bins_remain_cap.max()), -0.2, 0.0)  # Penalty if bin nearly full\n\n    priorities[valid_bins] = (0.6 * tightness) + (0.3 * fullness) + near_full_penalty\n    return priorities",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.178300757877951,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response9.txt_stdout.txt",
    "code_path": "problem_iter2_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Assigns priority to bins considering fit, utilization, and preventing near-full bins.\"\"\"\n    can_fit = bins_remain_cap >= item\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    priorities[~can_fit] = -1e9\n\n    if not np.any(can_fit):\n        return np.ones_like(bins_remain_cap)\n\n    residual_capacity = bins_remain_cap - item\n    close_fit = np.abs(residual_capacity)\n    priorities[can_fit] += (1 / (1 + close_fit[can_fit]))\n\n    capacity_utilization_ratio = (bins_remain_cap - residual_capacity) / bins_remain_cap\n    good_fit_bonus = np.where((capacity_utilization_ratio > 0.7) & (capacity_utilization_ratio < 0.9), 1.0, 0.0)\n    \n    near_full_penalty = np.where(residual_capacity < (0.1*bins_remain_cap.max()), -0.5, 0.0)\n    \n    priorities = priorities + good_fit_bonus + near_full_penalty\n    return priorities",
    "response_id": 9,
    "tryHS": false,
    "obj": 7.44914240127643,
    "exec_success": true
  }
]