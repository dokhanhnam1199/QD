```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can accommodate the item relatively tightly,
    while also discouraging near-empty bins if other more suitable options exist.
    It balances the remaining capacity after placement with the original size, and penalizes bins that are too large relative to the item size, unless nearly full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Handle cases where the item doesn't fit in some bins:
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return priorities # No valid bins at all. return zeros.

    # Prioritize valid bins.
    valid_bin_indices = np.where(valid_bins)[0] # Only work with bins the item can fit.

    remaining_after = bins_remain_cap[valid_bins] - item
    capacity_ratio = item / bins_remain_cap[valid_bins]
    # 1. Tight fit is good. Small remainders are better. (But not zero)
    tightness = 1 / (remaining_after + 0.0001)  # To avoid division by zero. Avoid completely full bin
    tightness_score = tightness
    # 2. Preferentially filling bins that are already partially full to make better use of existing bins before using new ones.
    # Filling Score based on how full a bin already is (before the item is placed)
    fullness_score = 1 - (bins_remain_cap[valid_bins] / bins_remain_cap.max()) # Higher score if already full
    # Ensure all values are positive.
    # Scale the filling score appropriately so we avoid empty bins as a default
    priorities[valid_bin_indices] = (tightness_score * 0.7) + (fullness_score * 0.3)
    return priorities
```
