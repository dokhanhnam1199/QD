{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can actually fit the item\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        # If no bins can fit, assign low priority to all (might need a new bin)\n        return priorities\n\n    # Calculate remaining space after placing the item in valid bins\n    fit_score = bins_remain_cap[valid_bins] - item\n\n    # Prioritize bins with smaller remaining space (best fit)\n    priorities[valid_bins] = 1.0 / (fit_score + 0.0001)\n\n    # Prioritize bins that are close to a target fill level. Let's target 75%\n    target_fill = bins_remain_cap.max() * 0.25  # Aiming for 75% full after placement\n    fill_diff = np.abs(bins_remain_cap[valid_bins] - target_fill - item)\n    priorities[valid_bins] += 1.0 / (fill_diff + 0.0001)\n\n    # Introduce a small amount of randomness to explore different options\n    randomness = np.random.rand(np.sum(valid_bins)) * 0.1\n    priorities[valid_bins] += randomness\n\n    # Penalize bins that will become nearly full after placing the item (e.g., > 95%) to avoid creating nearly-full bins that are hard to fill.\n    nearly_full = (bins_remain_cap[valid_bins] - item) < (bins_remain_cap.max() * 0.05)\n    priorities[valid_bins][nearly_full] *= 0.5  # Reduce priority if nearly full\n\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}