```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can actually fit the item
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        # If no bins can fit, assign a small random priority to encourage creation of new bin, and discourage to always put the item into the first new bin
        priorities[:] = np.random.rand(len(priorities)) * 0.0001
        return priorities

    # Calculate remaining space after placing the item
    remaining_space = bins_remain_cap[valid_bins] - item

    # Fit score: prioritize bins with smaller remaining space (best fit)
    fit_score = 1.0 / (remaining_space + 0.0001)

    # Fill level score: prioritize bins close to a target fill level (e.g., 75% full)
    target_fill = bins_remain_cap.max() * 0.75
    fill_level_diff = np.abs(bins_remain_cap[valid_bins] - target_fill)
    fill_level_score = 1.0 / (fill_level_diff + 0.0001)

    # Waste minimization score: penalize bins that would have excessive wasted space
    waste_threshold = bins_remain_cap.max() * 0.25  # Example: penalize if remaining space > 25%
    waste_score = np.where(remaining_space > waste_threshold, 0.1, 1.0) # or other penalty value


    # Adaptive Weighting: Adjust weights based on the number of valid bins.
    num_valid = np.sum(valid_bins)
    if num_valid > 5:
        fit_weight = 0.6
        fill_weight = 0.3
        waste_weight = 0.1
    else:
        fit_weight = 0.4
        fill_weight = 0.4
        waste_weight = 0.2

    # Combine the scores with adaptive weights
    combined_score = (fit_weight * fit_score + fill_weight * fill_level_score + waste_weight * waste_score)

    priorities[valid_bins] = combined_score

    return priorities
```
