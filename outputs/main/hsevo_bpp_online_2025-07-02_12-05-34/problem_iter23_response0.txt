```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using waste, target fill, near-full penalty, & adaptive randomness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return priorities

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item
    bin_capacity = bins_remain_cap.max()

    # Waste Minimization
    waste = remaining_after
    tightness = 1 / (waste + 0.0001)
    priorities[valid_bins] += tightness * 0.5

    # Adaptive Target Fill
    target_fill = 0.8 * bin_capacity - 0.1 * item
    fill_diff = np.abs(bins_remain_cap[can_fit] - target_fill)
    fill_priority = np.exp(-fill_diff / bin_capacity)
    priorities[valid_bins] += fill_priority * 0.4

    # Near-Full Penalty (only for larger items)
    near_full_threshold = 0.08 * bin_capacity
    near_full_penalty = np.where((remaining_after < near_full_threshold) & (item > 0.1 * bin_capacity), -0.5, 0.0)
    priorities[valid_bins] += near_full_penalty
    
    #Decaying Randomness
    item_size_weight = item / bin_capacity
    randomness = np.random.rand(len(valid_bins)) * 0.02 * (1 - item_size_weight)
    priorities[valid_bins] += randomness

    return priorities
```
