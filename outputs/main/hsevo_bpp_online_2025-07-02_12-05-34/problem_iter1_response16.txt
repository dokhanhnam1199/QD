```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Utilizes a combination of fill ratio, wasted space penalty, and a preference for bins that can perfectly fit items.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Small constant to avoid division by zero.
    epsilon = 1e-9
    
    # Calculate the fill ratio for each bin if the item were placed in it.
    fill_ratios = item / (bins_remain_cap + epsilon)  # Add epsilon to avoid div by 0
    
    # Initialize priorities with the fill ratio (higher fill ratio is generally better).
    priorities = fill_ratios.copy()

    #Perfect fit heuristic
    perfect_fit_bonus = np.isclose(item, bins_remain_cap).astype(float) * 10

    #Add bonus for perfect fit
    priorities = priorities + perfect_fit_bonus

    # Penalize bins where the item doesn't fit (set priority to a very low value)
    priorities[item > bins_remain_cap] = -np.inf
    
    #Adjust by available capacity, prefer higher remaining capacity.
    priorities = priorities + bins_remain_cap * 0.1

    return priorities
```
