```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, target fill, randomness, near-full penalty,
    item-size aware target and bin diversity."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return np.full_like(priorities, 0.0)

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item

    # Waste minimization: Prioritize tighter fits
    waste = remaining_after
    tightness = 1 / (waste + 0.0001)

    # Item-size aware target fill level
    max_bin_cap = bins_remain_cap.max()
    item_ratio = item / max_bin_cap
    target_fill_level = (0.6 + 0.3 * item_ratio) * max_bin_cap # Adjust target fill based on item size
    fill_level = bins_remain_cap[can_fit]
    fill_diff = np.abs(fill_level - target_fill_level)
    fill_score = np.exp(-fill_diff / (max_bin_cap * 0.2)) # Gaussian-like score

    # Near-full penalty, adjusted for item size
    near_full_threshold = (0.05 + 0.05 * item_ratio) * max_bin_cap
    near_full_penalty = np.where(remaining_after < near_full_threshold, -0.7, 0.0)

    # Small item bonus, now less aggressive
    small_item_threshold = max_bin_cap * 0.15
    if item < small_item_threshold:
        almost_full_threshold = max_bin_cap * 0.07
        almost_full_bonus = (bins_remain_cap[can_fit] > item) * np.exp(-remaining_after / almost_full_threshold) * 0.7
    else:
        almost_full_bonus = 0

    # Bin Diversity Bonus (Encourage using bins with different fill levels)
    bin_diversity_bonus = np.zeros_like(bins_remain_cap[can_fit], dtype=float)
    if len(bins_remain_cap) > 1:
        fill_levels = bins_remain_cap[can_fit]
        fill_level_std = np.std(bins_remain_cap) # diversity metric
        bin_diversity_bonus = fill_level_std * 0.1


    # Adaptive weights based on remaining capacities
    total_capacity = np.sum(bins_remain_cap)
    tightness_weight = 0.3 + 0.1 * (total_capacity / (len(bins_remain_cap) * max_bin_cap))
    fill_weight = 0.35 -  0.1 * (total_capacity / (len(bins_remain_cap) * max_bin_cap))
    near_full_weight = 0.2
    small_item_weight = 0.15

    # Combine scores with adaptive weights
    priorities[valid_bins] = (tightness_weight * tightness +
                               fill_weight * fill_score +
                               near_full_weight * near_full_penalty +
                               small_item_weight * almost_full_bonus +
                               bin_diversity_bonus)
    return priorities
```
