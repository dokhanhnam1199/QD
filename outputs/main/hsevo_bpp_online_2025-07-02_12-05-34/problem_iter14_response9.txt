```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, target fill, adaptive weighting, and stochasticity.
    Improved by adding small item bonus and dynamic bin count penalty.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
        return np.full_like(priorities, -1.0)

    valid_bins = np.where(can_fit)[0]
    remaining_after = bins_remain_cap[can_fit] - item
    bin_capacity = bins_remain_cap.max()
    num_bins = len(bins_remain_cap)

    # Waste Minimization
    waste = remaining_after
    tightness = 1 / (waste + 0.0001)

    # Target Fill Level
    target_fill_level = 0.8 * bin_capacity
    fill_level = bins_remain_cap[can_fit]
    fill_diff = np.abs(fill_level - target_fill_level)
    fill_score = np.exp(-fill_diff / (bin_capacity * 0.2))

    # Near-Full Penalty (Slightly reduced penalty)
    near_full_threshold = 0.1 * bin_capacity
    near_full_penalty = np.where(remaining_after < near_full_threshold, -0.6, 0.0)

    # Small Item Bonus
    small_item_threshold = bin_capacity * 0.2
    if item < small_item_threshold:
        almost_full_threshold = bin_capacity * 0.1
        almost_full_bonus = np.exp(-remaining_after / (almost_full_threshold + 0.0001))
    else:
        almost_full_bonus = 0

    # Adaptive Weighting
    item_size_factor = item / bin_capacity
    tightness_weight = 0.5 * (1 - item_size_factor)
    fill_weight = 0.4 * (1 + item_size_factor)
    near_full_weight = 0.1

    # Dynamic Bin Count Penalty
    bins_used = np.sum(bins_remain_cap < bin_capacity)
    target_bins = int(np.ceil(np.sum(item) / bin_capacity)) if isinstance(item, float) else int(np.ceil(np.sum(item)/bin_capacity))

    over_bins = max(0, bins_used - target_bins)
    bin_count_penalty = -0.05 * over_bins
    # Randomness
    randomness = np.random.rand(len(valid_bins)) * 0.01

    priorities[valid_bins] = (tightness_weight * tightness +
                               fill_weight * fill_score +
                               near_full_weight * near_full_penalty +
                               almost_full_bonus * 0.2 +
                               bin_count_penalty +
                               randomness)

    return priorities
```
