```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a very low value to penalize infeasible bins.
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    # Identify feasible bins.
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        # Calculate the wasted space after placing the item in each feasible bin.
        wasted_space = bins_remain_cap[feasible_bins] - item

        # Calculate the utilization ratio (item size / original bin capacity).  We'll
        # need the original bin capacity, let's assume it's a constant 1.0 for now.
        # A higher utilization is generally desirable, but we don't want to
        # prioritize small items that perfectly fill a small number of bins.
        utilization = item # Because the full bin size is 1, item = item/1

        # Define some coefficients to balance different factors. You can adjust these!
        wasted_space_coeff = -1.0  # Penalize more wasted space, using a negative coefficient.
        utilization_coeff = 1.5    # Encourage higher utilization.

        # Calculate scores for each feasible bin.
        scores = wasted_space_coeff * wasted_space + utilization_coeff * utilization

        # Assign scores to the corresponding bins.
        priorities[feasible_bins] = scores

        # Preferentially use bins that are close to full.
        close_to_full = (bins_remain_cap[feasible_bins] > 0.99) # if remcap = item.
        priorities[feasible_bins & close_to_full] += 2 # Bonus

    return priorities
```
