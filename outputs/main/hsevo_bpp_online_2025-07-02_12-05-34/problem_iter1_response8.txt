```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version prioritizes bins that can accommodate the item with minimal waste,
    but also includes a stochastic element to avoid getting stuck in local optima.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate waste if item is placed in each bin. Negative waste means the item doesn't fit.
    waste = bins_remain_cap - item

    # Give bins that can fit the item a priority based on how little waste there is.
    # Use a large negative number for bins that can't fit the item to strongly discourage them.
    priorities = -np.abs(waste)
    priorities[waste < 0] = -np.inf

    # Add a small amount of randomness to break ties and escape local optima.
    # The amount of randomness scales with the item size.  Smaller item = more randomness.
    randomness = np.random.rand(len(bins_remain_cap)) * (0.1 / (item+0.00001) )  # avoid division by zero. small item makes more random.

    priorities = priorities + randomness

    # If no bins can accommodate the item, return a low priority for all bins.  In practice a new bin will be created if all are negative inf
    if np.all(waste < 0):
         priorities = -np.ones(len(bins_remain_cap)) * (item *100) # discourage using any existing bins heavily.

    return priorities
```
