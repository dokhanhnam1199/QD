```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Inspired by Tesla's resonance principle and seeking maximum energy transfer.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Tesla's Resonance: Maximize Energy Transfer (Packing Efficiency)
    # Higher priority if the item size is close to the remaining capacity
    # But also penalize if the item is larger than the remaining capacity

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if remaining_capacity >= item:
             priority = np.exp(-np.abs(item - remaining_capacity) / item)  # Resonant Peak
        else:
            priority = -np.abs(item - remaining_capacity) # Strong negative if it doesn't fit.

        priorities[i] = priority

    return priorities
```
