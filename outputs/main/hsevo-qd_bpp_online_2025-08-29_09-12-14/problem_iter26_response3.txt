```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines inverse waste with exponential weighting and focuses on viable bins.
    Prioritizes bins with lower relative waste, scaled by 5.
    """
    bin_count = len(bins_remain_cap)
    priorities = np.zeros(bin_count)
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        remaining_capacities = bins_remain_cap[valid_bins]
        waste = remaining_capacities - item
        relative_waste = waste / item
        priorities[valid_bins] = np.exp(-5 * relative_waste)
        priorities[valid_bins] /= np.sum(priorities[valid_bins]) + 1e-8
    return priorities
```
