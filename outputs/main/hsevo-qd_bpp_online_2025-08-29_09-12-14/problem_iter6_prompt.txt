{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    bin_count = len(bins_remain_cap)\n    priorities = np.zeros(bin_count)\n    for i in range(bin_count):\n        if bins_remain_cap[i] >= item:\n            priorities[i] = 1.0 / (bins_remain_cap[i] - item + 0.0001)\n        else:\n            priorities[i] = 0.0\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, $999K motivates *serious* heuristic design! Here's a redefined \"Current Self-Reflection\" based on your provided insights, geared towards building superior bin-packing (and generally applicable) heuristics:\n\n* **Keywords:** Fit, Probability, Weighting, Robustness\n* **Advice:** Prioritize bin *fit* quantified as a probability (normalized volume used). Employ exponential weighting of fit to favor significantly better options.  Always validate bin capacity *after* potential placement.\n* **Avoid:**  Directly using remaining capacity; negative prioritization; ignoring item size relative to bin; failing to handle division by zero.\n* **Explanation:** Focusing on probabilistic fit, and robustly weighting it, guides the heuristic to consistently select bins yielding the *least waste* \u2013 the core goal \u2013 while maintaining numerical stability.\n\n\n\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}