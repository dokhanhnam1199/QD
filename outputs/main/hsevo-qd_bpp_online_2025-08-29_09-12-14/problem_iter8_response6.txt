```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines inverse waste with exponential weighting,
    normalized by minimum waste for robustness.
    """
    priorities = np.zeros_like(bins_remain_cap)
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return priorities

    waste = bins_remain_cap[feasible_bins] - item
    min_waste = np.min(waste)
    priorities[feasible_bins] = np.exp(waste / (item + 1e-6))
    priorities[feasible_bins] /= np.sum(np.exp(waste / (item + 1e-6)))

    return priorities
```
