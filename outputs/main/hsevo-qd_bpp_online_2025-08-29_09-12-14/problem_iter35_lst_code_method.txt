{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines inverse waste with exponential weighting and focuses on viable bins.\n    Prioritizes bins with lower relative waste, scaled by 5.\n    \"\"\"\n    bin_count = len(bins_remain_cap)\n    priorities = np.zeros(bin_count)\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        remaining_capacities = bins_remain_cap[valid_bins]\n        waste = remaining_capacities - item\n        relative_waste = waste / item\n        priorities[valid_bins] = np.exp(-5 * relative_waste)\n        priorities[valid_bins] /= np.sum(priorities[valid_bins]) + 1e-8\n    return priorities\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    bin_count = len(bins_remain_cap)\n    priorities = np.zeros(bin_count)\n    for i in range(bin_count):\n        if bins_remain_cap[i] >= item:\n            priorities[i] = 1.0 / (bins_remain_cap[i] - item + 0.0001)\n        else:\n            priorities[i] = 0.0\n    return priorities\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines inverse waste with exponential weighting and normalization for robust bin selection.\"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    feasible_bins = bins_remain_cap >= item\n    if np.any(feasible_bins):\n        waste = bins_remain_cap[feasible_bins] - item\n        min_waste = np.min(waste)\n        priorities[feasible_bins] = np.exp(-5 * (waste / (min_waste + 1e-6)))\n        priorities[feasible_bins] /= np.sum(priorities[feasible_bins])\n    return priorities\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    bin_count = len(bins_remain_cap)\n    feasible_bins = bins_remain_cap[bins_remain_cap >= item]\n    if len(feasible_bins) == 0:\n        return np.zeros(bin_count)\n    \n    waste = feasible_bins - item\n    scores = np.exp(-waste / item)\n    \n    priorities = np.zeros(bin_count)\n    \n    indices = np.where(bins_remain_cap >= item)[0]\n    \n    normalized_scores = scores / np.sum(scores)\n    \n    for i, idx in enumerate(indices):\n        priorities[idx] = normalized_scores[i]\n    \n    return priorities\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    bin_count = len(bins_remain_cap)\n    priorities = np.zeros(bin_count)\n    for i in range(bin_count):\n        if bins_remain_cap[i] >= item:\n            priorities[i] = 1.0 / (bins_remain_cap[i] - item + 0.0001)\n        else:\n            priorities[i] = 0.0\n    return priorities\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on inverse of waste + exponential weighting.\"\"\"\n    possible_bins = bins_remain_cap >= item\n    if np.sum(possible_bins) > 0:\n        waste = bins_remain_cap[possible_bins] - item\n        priorities = np.zeros_like(bins_remain_cap)\n        priorities[possible_bins] = np.exp(-waste) / (waste + 1e-6)\n    else:\n        priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        priorities[valid_bins] = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] = 1.0 / (priorities[valid_bins] + 1e-6)\n    return priorities\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on inverse of waste + exponential weighting.\"\"\"\n    possible_bins = bins_remain_cap >= item\n    if np.sum(possible_bins) > 0:\n        waste = bins_remain_cap[possible_bins] - item\n        priorities = np.zeros_like(bins_remain_cap)\n        priorities[possible_bins] = np.exp(-waste) / (waste + 1e-6)\n    else:\n        priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Calculates bin priorities using exponential weighting of waste and normalization.\"\"\"\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return np.zeros_like(bins_remain_cap)\n    remaining_capacities = bins_remain_cap[valid_bins]\n    waste = remaining_capacities - item\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[valid_bins] = np.exp(-waste / (item + 1e-6))\n    sum_exp_fits = np.sum(priorities[valid_bins])\n    priorities[valid_bins] = priorities[valid_bins] / sum_exp_fits\n    return priorities\n\n[Heuristics 10th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return priorities\n    \n    waste = bins_remain_cap[valid_bins] - item\n    \n    priorities[valid_bins] = waste / (item + waste)\n    \n    \n    return priorities\n\n[Heuristics 12th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, small_value: float = 0.000528330981757869) -> np.ndarray:\n    \"\"\"Prioritizes bins based on inverse waste with exponential weighting.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return priorities\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on exponential waste and normalization.\"\"\"\n    valid_bins = bins_remain_cap >= item\n    if np.sum(valid_bins) == 0:\n        return np.zeros_like(bins_remain_cap)\n    waste = bins_remain_cap[valid_bins] - item\n    priorities = np.exp(-waste / item)\n    priorities /= np.sum(priorities)\n    result = np.zeros_like(bins_remain_cap)\n    result[valid_bins] = priorities\n    return result\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n    bin_fits = bins_remain_cap[possible_bins] - item\n    exp_fits = np.exp(bin_fits / (item + 1e-6))\n    sum_exp_fits = np.sum(exp_fits)\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = exp_fits / sum_exp_fits\n    return priorities\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines relative waste and exponential weighting for stable bin selection.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return priorities\n    relative_waste = item / bins_remain_cap[possible_bins]\n    exp_scores = np.exp(-relative_waste)\n    probabilities = exp_scores / np.sum(exp_scores)\n    priorities[possible_bins] = probabilities\n    return priorities\n\n[Heuristics 16th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, weight: float = 9.277500115165077) -> np.ndarray:\n    \"\"\"\n    Calculates priorities based on the difference between bin remaining capacity and item size.\n\n    Args:\n        item: The size of the item.\n        bins_remain_cap: A NumPy array representing the remaining capacity of each bin.\n        weight: A weight factor that influences the priority calculation. Defaults to 5.0.\n\n    Returns:\n        A NumPy array representing the priorities for each bin.\n    \"\"\"\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    for i in range(n_bins):\n        if bins_remain_cap[i] >= item:\n            priorities[i] = 1 / (1 + np.exp(-weight * (bins_remain_cap[i] - item)))\n        else:\n            priorities[i] = 0\n    return priorities\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines inverse waste with exponential weighting for better bin fit.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        waste = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] = 1.0 / (1 + np.exp(-5 * waste))\n    return priorities\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    n_bins = len(bins_remain_cap)\n    priorities = np.zeros(n_bins)\n    for i in range(n_bins):\n        if bins_remain_cap[i] >= item:\n            priorities[i] = 1 / (1 + np.exp(-5 * (bins_remain_cap[i] - item)))\n        else:\n            priorities[i] = 0\n    return priorities\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if np.sum(possible_bins) == 0:\n        return priorities\n    \n    remaining_capacities = bins_remain_cap[possible_bins]\n    \n    priorities[possible_bins] = (remaining_capacities - item) / item\n    \n    return priorities\n\n[Heuristics 20th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, small_value: float = 0.00014280501574909747) -> np.ndarray:\n    \"\"\"\n    Calculates priorities based on the remaining capacity of bins and the item size.\n\n    Args:\n        item (float): The size of the item.\n        bins_remain_cap (np.ndarray): The remaining capacity of each bin.\n        small_value (float, optional): A small value added to the denominator to prevent division by zero. Defaults to 1e-6.\n\n    Returns:\n        np.ndarray: The calculated priorities for each bin.\n    \"\"\"\n    temp = bins_remain_cap - item\n    priorities = np.where(temp >= 0, np.exp(temp / (item + small_value)), 0)\n    priorities = priorities / np.sum(priorities)\n    return priorities\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}