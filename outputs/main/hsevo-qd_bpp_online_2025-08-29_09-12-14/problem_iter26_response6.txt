```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines inverse relative waste with exponential weighting and normalization
    to prioritize bins with tighter fits, avoiding numerical instability.
    """
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return np.zeros_like(bins_remain_cap)

    remaining_capacities = bins_remain_cap[possible_bins]
    waste = remaining_capacities - item
    relative_waste = waste / (item + 1e-6)
    scores = np.exp(-relative_waste)
    probabilities = scores / np.sum(scores)
    priorities = np.zeros_like(bins_remain_cap)
    priorities[possible_bins] = probabilities
    return priorities
```
