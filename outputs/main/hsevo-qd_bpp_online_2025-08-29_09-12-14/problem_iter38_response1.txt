```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines relative waste and exponential weighting for bin prioritization."""
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)
    remaining_capacities = bins_remain_cap[valid_bins]
    relative_waste = (remaining_capacities - item) / (item + 1e-6)
    priorities = np.exp(-relative_waste)
    sum_exp_fits = np.sum(priorities)
    priorities = priorities / (sum_exp_fits + 1e-8)
    result = np.zeros_like(bins_remain_cap)
    result[valid_bins] = priorities
    return result
```
