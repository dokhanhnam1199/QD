{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines inverse waste with exponential weighting and normalization.\"\"\"\n    bin_count = len(bins_remain_cap)\n    priorities = np.zeros(bin_count)\n    valid_bins = bins_remain_cap >= item\n    if np.sum(valid_bins) == 0:\n        return priorities\n    remaining_capacities = bins_remain_cap[valid_bins]\n    waste = remaining_capacities - item\n    priorities[valid_bins] = np.exp(-waste)\n    priorities = priorities / np.sum(priorities)\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    bin_count = len(bins_remain_cap)\n    priorities = np.zeros(bin_count)\n    for i in range(bin_count):\n        if bins_remain_cap[i] >= item:\n            fit_ratio = item / bins_remain_cap[i]\n            priorities[i] = np.exp(-fit_ratio * 5)\n        else:\n            priorities[i] = 0.0\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (2nd), both prioritize bins based on remaining capacity, but the 2nd version uses an exponential weighting of the waste, normalized across valid bins. This makes it more sensitive to variations in waste and can lead to better bin utilization. (3rd) vs (4th): Essentially identical implementations, simply repeating the same inverse waste heuristic. (5th) vs (6th): Again, duplicates, with (5th) using relative waste before exponential weighting, while (6th) does not. (7th), (8th) and (9th) all implement the basic inverse waste. (8th) and (9th) attempt minor optimizations like finding the minimum waste, but they don\u2019t significantly alter the core strategy. (10th) and (11th) are incomplete, not providing a usable priority calculation. (12th) and (13th) and (15th) are similar inverse waste calculations. (14th) combines inverse waste with an exponential weighting, similar to (2nd), improving fit. (16th), (17th) and (18th) calculate the waste directly as a ratio. (19th) and (20th) use an exponential decay of a fit ratio. Comparing (2nd) vs (14th), (2nd) normalizes priorities making it robust across various bin capacities. Comparing (19th) and (20th), are duplicates.\n\nOverall: The most effective heuristics utilize a combination of inverse waste and exponential weighting, with normalization to ensure consistent behavior. Simpler inverse waste approaches perform adequately, but lack the nuance to handle varied waste scenarios. Duplicated code and incomplete implementations contribute to the lower ranking.\n- \nOkay, let's refine the approach to designing superior bin-packing heuristics, aiming for that $999K! Here's a breakdown based on the provided self-reflection:\n\n* **Keywords:** Waste Minimization, Normalization, Exponential Weighting, Relative Prioritization.\n* **Advice:** Focus on a *waste-to-item-size ratio* for prioritization, normalize this into probabilities, and leverage exponential weighting to refine bin selection. Always explicitly handle cases where an item doesn't fit *any* bin.\n* **Avoid:** Direct remaining capacity use *without* item size context, negative priorities, redundant code, and overly complex \"worst-fit\" logic. Beware of numerical instability (division by zero, `exp` overflow).\n* **Explanation:**  Strong heuristics aren't about absolute capacity; they're about efficiently using space *relative to what\u2019s being packed*. Exponential weighting encourages exploring tighter fits while still allowing larger bins to be considered \u2013 balancing exploitation and exploration.\n\n\n\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}