```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines relative waste with exponential weighting for robust bin prioritization."""
    bin_count = len(bins_remain_cap)
    priorities = np.zeros(bin_count)
    epsilon = 1e-6
    for i in range(bin_count):
        if bins_remain_cap[i] >= item:
            relative_waste = (bins_remain_cap[i] - item) / item
            priorities[i] = np.exp(-1.0 / (relative_waste + epsilon))
    return priorities / (np.sum(priorities) + epsilon)
```
