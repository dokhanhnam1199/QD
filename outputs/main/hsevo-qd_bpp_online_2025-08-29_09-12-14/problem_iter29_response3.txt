```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines exponential inverse relative waste with normalization over feasible bins."""
    bin_count = len(bins_remain_cap)
    priorities = np.zeros(bin_count)
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        relative_waste = (bins_remain_cap[valid_bins] - item) / item
        priorities[valid_bins] = np.exp(-relative_waste)
    priorities = priorities / (np.sum(priorities) + 1e-8)
    return priorities
```
