```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines inverse waste with exponential weighting, 
    normalizing to provide robust bin selection probabilities.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item
        min_waste = np.min(waste)
        priorities[feasible_bins] = 1.0 / (1 + np.exp(-5 * (waste / (min_waste + 1e-6))))
        priorities[feasible_bins] /= np.sum(priorities[feasible_bins])
    return priorities
```
