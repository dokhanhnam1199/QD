```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines inverse relative waste with exponential weighting for improved bin selection."""
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)
    relative_waste = (bins_remain_cap[valid_bins] - item) / item
    priorities = np.zeros_like(bins_remain_cap)
    priorities[valid_bins] = np.exp(5 * relative_waste)
    return priorities / np.sum(priorities)
```
