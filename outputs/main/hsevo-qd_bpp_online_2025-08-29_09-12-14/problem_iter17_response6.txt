```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization with exponential weighting and normalization."""
    possible_bins = bins_remain_cap >= item
    if not np.any(possible_bins):
        return np.zeros_like(bins_remain_cap)
    waste = bins_remain_cap[possible_bins] - item
    priorities = np.zeros_like(bins_remain_cap)
    priorities[possible_bins] = np.exp(waste / (item + 1e-6))
    sum_exp = np.sum(priorities[possible_bins])
    if sum_exp > 0:
        priorities[possible_bins] /= sum_exp
    return priorities
```
