```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Calculates priority scores for each bin based on inverse relative waste,
    with exponential weighting and normalization for stable bin selection.
    """
    valid_bins = bins_remain_cap >= item
    if np.sum(valid_bins) == 0:
        return np.zeros_like(bins_remain_cap)

    remaining_capacities = bins_remain_cap[valid_bins]
    waste = remaining_capacities - item
    priorities = 1.0 / (waste + 1e-6)
    priorities = np.exp(-priorities)
    min_priority = np.min(priorities)
    priorities = (priorities - min_priority)
    sum_priorities = np.sum(priorities)
    if sum_priorities > 0:
        priorities = priorities / sum_priorities
    priorities = np.zeros_like(bins_remain_cap)
    priorities[valid_bins] = priorities
    return priorities
```
