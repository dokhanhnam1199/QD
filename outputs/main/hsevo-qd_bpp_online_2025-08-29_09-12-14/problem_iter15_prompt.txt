{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    bin_count = len(bins_remain_cap)\n    priorities = np.zeros(bin_count)\n    for i in range(bin_count):\n        if bins_remain_cap[i] >= item:\n            priorities[i] = 1.0 / (bins_remain_cap[i] - item + 0.0001)\n        else:\n            priorities[i] = 0.0\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's refine the approach to designing superior bin-packing heuristics, aiming for that $999K! Here's a breakdown based on the provided self-reflection:\n\n* **Keywords:** Waste Minimization, Normalization, Exponential Weighting, Relative Prioritization.\n* **Advice:** Focus on a *waste-to-item-size ratio* for prioritization, normalize this into probabilities, and leverage exponential weighting to refine bin selection. Always explicitly handle cases where an item doesn't fit *any* bin.\n* **Avoid:** Direct remaining capacity use *without* item size context, negative priorities, redundant code, and overly complex \"worst-fit\" logic. Beware of numerical instability (division by zero, `exp` overflow).\n* **Explanation:**  Strong heuristics aren't about absolute capacity; they're about efficiently using space *relative to what\u2019s being packed*. Exponential weighting encourages exploring tighter fits while still allowing larger bins to be considered \u2013 balancing exploitation and exploration.\n\n\n\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}