{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins based on inverse waste with exponential weighting.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return priorities\n    waste = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = np.exp(-waste / (item + 1e-6))\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    priorities = np.zeros_like(bins_remain_cap)\n    possible_bins = bins_remain_cap >= item\n    if np.sum(possible_bins) == 0:\n        return priorities\n    \n    remaining_capacities = bins_remain_cap[possible_bins]\n    \n    priorities[possible_bins] = (remaining_capacities - item) / item\n    \n    return priorities\n\n### Analyze & experience\n- Comparing `priority_v2` (1st) vs `priority_v2` (2nd), both calculate inverse waste, but the 1st uses a small constant to avoid division by zero while the second is identical. The first implementation is negligibly better due to numerical stability.  `priority_v2` (3rd) improves upon this by adding exponential weighting to the inverse waste, prioritizing tighter fits.  `priority_v2` (4th) is similar to (3rd) but normalizes the waste by the item size. Comparing (3rd) vs (4th), the normalization in (4th) is a slight improvement, as it makes the waste relative to the item being placed.  `priority_v2` (5th) attempts to use waste but reverts to a simple calculation, offering no advantage. `priority_v2` (6th) reverts to using `np.exp(-waste)` which, while giving a priority, lacks normalization and isn't as effective as inverse waste approaches. Heuristics 7th, 9th, and 12th all return a zero array.  `priority_v2` (8th), (10th), (11th) and (16th) use `waste / (item + waste)`.  This is a good approach but lacks the exponential weighting of the higher-ranked heuristics.  `priority_v2` (13th) calculates inverse waste with exponential weighting and then *normalizes* the priorities. This is an excellent addition, providing a probability distribution. `priority_v2` (14th) uses a sigmoid function, which is a reasonable fit-based priority. `priority_v2` (15th) calculates `(remaining_capacities - item) / item`, favoring bins with large remaining capacity. `priority_v2` (17th) is a nearly identical implementation to (20th) and calculates exponential of normalized waste. `priority_v2` (18th) directly uses remaining capacity.  `priority_v2` (19th) uses an exponential decay based on the fit ratio; a larger fit ratio results in a lower priority. `priority_v1` in all cases is simply a zero array, making it the worst option. Overall, the best heuristics combine inverse waste with exponential weighting and normalization, providing a well-defined priority distribution.\n- \nOkay, $999K motivates *serious* heuristic design! Here's a redefined \"Current Self-Reflection\" based on your provided insights, geared towards building superior bin-packing (and generally applicable) heuristics:\n\n* **Keywords:** Fit, Probability, Weighting, Robustness\n* **Advice:** Prioritize bin *fit* quantified as a probability (normalized volume used). Employ exponential weighting of fit to favor significantly better options.  Always validate bin capacity *after* potential placement.\n* **Avoid:**  Directly using remaining capacity; negative prioritization; ignoring item size relative to bin; failing to handle division by zero.\n* **Explanation:** Focusing on probabilistic fit, and robustly weighting it, guides the heuristic to consistently select bins yielding the *least waste* \u2013 the core goal \u2013 while maintaining numerical stability.\n\n\n\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}