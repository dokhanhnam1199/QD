```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines inverse relative waste with exponential weighting and normalization."""
    possible_bins = bins_remain_cap >= item
    if np.sum(possible_bins) == 0:
        return np.zeros_like(bins_remain_cap)
    relative_waste = (bins_remain_cap[possible_bins] - item) / item
    priorities = np.zeros_like(bins_remain_cap)
    priorities[possible_bins] = np.exp(-relative_waste) / (relative_waste + 1e-6)
    priorities /= np.sum(priorities)
    return priorities
```
