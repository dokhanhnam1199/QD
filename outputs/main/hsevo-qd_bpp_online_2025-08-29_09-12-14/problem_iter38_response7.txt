```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines relative waste with exponential weighting, normalized robustly."""
    bin_count = len(bins_remain_cap)
    priorities = np.zeros(bin_count)
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return priorities
    waste = bins_remain_cap[valid_bins] - item
    relative_waste = waste / (item + 1e-6)
    priorities[valid_bins] = np.exp(-relative_waste)
    priorities /= np.sum(priorities) if np.sum(priorities) > 0 else 1.0
    return priorities
```
