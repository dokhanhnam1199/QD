```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can fit the item snugly (i.e., minimize wasted space)
    and also considers a factor to discourage filling bins too much too early.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Iterate through each bin
    for i, cap in enumerate(bins_remain_cap):
        # If the bin can fit the item
        if cap >= item:
            # Calculate the wasted space if the item is added
            wasted_space = cap - item

            # Prioritize bins with less wasted space. Using an exponential decay helps avoid extremely tight fits unless really needed.
            priority = np.exp(-wasted_space)

            # Add a bonus for bins that have more capacity to prevent overfilling one bin too early.  Adjust the scaling as necessary
            priority += (cap / np.sum(bins_remain_cap))

            priorities[i] = priority
        else:
            #Assign a very low priority to bins that don't fit.
            priorities[i] = -np.inf


    return priorities
```
