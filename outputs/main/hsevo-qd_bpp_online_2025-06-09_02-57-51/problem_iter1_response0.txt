```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Prioritize bins where the item fits
    fit_mask = bins_remain_cap >= item
    
    if np.any(fit_mask):
        # Prioritize bins with smallest remaining capacity that still fits item.
        # Give a small negative value for bins that are not eligible.
        
        
        priorities[fit_mask] = bins_remain_cap[fit_mask] - item #Smaller diff preferred
    else:
        #If item does not fit any bin, prioritize bins where it would result to minimal waste.
         priorities = -(bins_remain_cap + item) #Minimize amount over. Larger negative means bigger
    return priorities
```
