```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines bin utilization, item size, fragmentation penalty, and Gaussian-based fit."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_after_add = bins_remain_cap - item
    valid_bins = remaining_after_add >= 0

    if np.any(valid_bins):
        # Gaussian-like priority based on remaining capacity closeness to item size.
        gaussian_width = np.mean(bins_remain_cap[valid_bins])/5 if len(bins_remain_cap[valid_bins]) > 0 else 1 #tuneable.  Smaller = more picky.

        priorities[valid_bins] = np.exp(-((bins_remain_cap[valid_bins] - item)**2) / (2 * gaussian_width**2))


        # Bin Utilization Awareness: Favor bins with higher utilization.
        bin_utilization = (np.max(bins_remain_cap) - bins_remain_cap[valid_bins]) / (np.max(bins_remain_cap)+ 1e-9)
        priorities[valid_bins] += 2*bin_utilization

        # Item-Size Consideration: Adjust priority based on item size.
        item_ratio = item / (np.max(bins_remain_cap)+ 1e-9) #Ratio of item size with respect to max bin cap
        priorities[valid_bins] += (1-item_ratio)  #Large item less priority


        # Fragmentation Penalty: Heavily penalize small remaining capacities.
        space_diff = bins_remain_cap[valid_bins] - item
        fragmentation_penalty = np.exp(-10 * (space_diff / (np.max(bins_remain_cap)+ 1e-9))**2) #Penalize small remainders w.r.t. max bin size
        priorities[valid_bins] -= fragmentation_penalty

    else:
        # Fallback Strategy: if no bin fits, prioritize bins with smallest *absolute* wasted space.
        priorities = 1 / (np.abs(remaining_after_add) + 1e-9)
    
    # Normalize priorities
    if np.sum(priorities) > 0:
      priorities = priorities / np.sum(priorities)
    

    return priorities
```
