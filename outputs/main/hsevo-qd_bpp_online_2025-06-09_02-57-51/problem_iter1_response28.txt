```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that have enough space for the item
    and then selects based on a combination of fill ratio and remaining space.
    Bins that cannot accommodate the item receive a priority of -np.inf.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap < item:
            priorities[i] = -np.inf  # Cannot fit, lowest priority
        else:
            fill_ratio = item / cap
            remaining_space = cap - item
            # Give preference to bins that result in smaller remaining space
            # while also considering how much of the bin is filled (fill_ratio).
            priorities[i] = fill_ratio - (remaining_space / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else fill_ratio  # Normalize remaining space
    return priorities
```
