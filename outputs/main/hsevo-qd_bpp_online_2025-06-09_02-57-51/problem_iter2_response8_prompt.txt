{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Calculate remaining capacity after adding the item. Negative values indicate infeasibility.\n    remaining_after_add = bins_remain_cap - item\n\n    # Give high priority to bins that can accommodate the item, but avoid almost-full bins (first fit decreasing consideration).\n    # Slightly favor bins with space close to the item size to avoid excessive fragmentation.\n    valid_bins = remaining_after_add >= 0\n\n    if np.any(valid_bins):\n        space_diff = np.abs(remaining_after_add)\n        priorities[valid_bins] = 1.0 / (space_diff[valid_bins] + 1e-9)  # Inverse of difference, add small value to avoid division by zero\n        # Heuristics to promote bins that are sufficiently full (avoid too much space)\n        fill_ratios = (bins_remain_cap[valid_bins] - remaining_after_add[valid_bins]) / bins_remain_cap[valid_bins]\n\n        #Promote nearly full bins but penalize excessively small remainders\n        priorities[valid_bins] = priorities[valid_bins] + 10*np.exp(-10*(remaining_after_add[valid_bins]/item)**2)\n\n\n    #Heuristic: Consider the overall fullness of the bins. If a bin is very full (high fill_ratio), it should receive a lower priority as that is more prone to produce unusable fragments\n    overall_fullness = (np.sum(bins_remain_cap) - np.sum(bins_remain_cap[remaining_after_add>=0]) + np.sum(item*np.ones_like(bins_remain_cap)[remaining_after_add>=0])) / np.sum(np.ones_like(bins_remain_cap) * np.max(bins_remain_cap))\n    #Consider the worst case bin that could not store the item as a dissuader\n\n    if np.sum(valid_bins) == 0:\n      priorities = 1/(1+np.abs(remaining_after_add))\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This function implements a more sophisticated priority scheme:\n\n    1.  **Feasibility Check:**  Bins that cannot accommodate the item receive a priority of -np.inf.\n    2.  **Remaining Capacity Ratio:** Calculate the ratio of remaining capacity *after* adding the item to the original remaining capacity. Lower ratios (bins filling up more completely) are favored. This ratio is more insightful than just looking at the original capacity or the item size.\n    3.  **Fill-Up Bias:**  Add a bonus to bins that have a remaining capacity close to the item size.  This encourages using bins that are already mostly filled.\n    4.  **Normalization:** The final priorities are scaled to the range of [0,1] to ensure stable behaviour and comparable ranges, particularly important for future extensions.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Infeasible bins get -inf priority\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n\n    # Calculate remaining capacity AFTER adding the item.\n    feasible_mask = ~infeasible_mask\n    remaining_after = bins_remain_cap[feasible_mask] - item\n\n    # Calculate Ratio: (remaining after) / (remaining before).  Favor smaller ratios\n    capacity_ratios = remaining_after / bins_remain_cap[feasible_mask]\n    \n    # Smaller ratios become larger priorities\n    priorities[feasible_mask] = -capacity_ratios  # Negate to make lower ratios have higher priority\n\n\n    # Fill-Up Bonus:  Give bonus if bin size close to item size, scaled by original bin capacity.  This promotes using partially full bins\n    fill_diff = np.abs(bins_remain_cap[feasible_mask] - item)\n    fill_bonus = np.exp(-fill_diff) # Exponential decay means closer == much larger.\n    priorities[feasible_mask] += fill_bonus\n    \n\n    # Normalize the priorities to the range [0, 1] for stability\n    if np.any(np.isfinite(priorities)): #avoid division by zero if all are -inf\n        finite_priorities = priorities[np.isfinite(priorities)]\n        min_priority = np.min(finite_priorities)\n        max_priority = np.max(finite_priorities)\n        \n        if min_priority != max_priority: # Avoid divide by zero in edge case\n            priorities[np.isfinite(priorities)] = (priorities[np.isfinite(priorities)] - min_priority) / (max_priority - min_priority)\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the best heuristic uses a Gaussian-like function to prioritize bins with remaining capacity close to the item size, incorporates a \"desperation\" factor to handle cases where no bins can fit the item, and adds slight randomness to avoid local optima. The worst heuristic only uses a simplified calculation of bin fullness and does not include these advanced features.\n\nComparing (13th) vs (20th), the 13th heuristic incorporates infeasibility checks, remaining capacity ratio calculation, fill-up bias, and normalization, resulting in a more sophisticated and robust approach compared to the basic Gaussian approach with desperation and randomness of the 20th.\n\nComparing (1st) vs (13th), the 1st heuristic uses Gaussian distribution to calculate the priority and handles the desperation case using `min_cap` while the 13th heuristic calculates remaining capacity ratio, fill-up bonus and normalizes the priorities to the range [0,1].\n\nOverall: The better heuristics employ more comprehensive strategies, considering factors such as remaining capacity ratios, fill-up biases, and normalization to ensure a balanced and effective bin selection process. They also address edge cases, such as when no bin can accommodate the item, with specific strategies. The inclusion of slight randomness can further enhance the solution quality by escaping local optima. Simpler heuristics tend to focus only on the most immediate factors and lack the adaptability needed for diverse scenarios.\n- \nOkay, let's redefine \"Current Self-Reflection\" for designing better heuristics, focusing on actionable insights and avoiding common pitfalls.\n\nHere's a structured approach:\n\n*   **Keywords:** Adaptability, robust evaluation, controlled diversification, constraint handling.\n*   **Advice:** Design heuristics that dynamically adjust to problem characteristics. Implement rigorous evaluation metrics beyond immediate fit. Introduce controlled randomness strategically. Prioritize feasibility maintenance.\n*   **Avoid:** Rigid, static strategies; solely focusing on initial performance; uncontrolled randomness; ignoring constraints early.\n*   **Explanation:** Effective heuristics blend adaptability with robust evaluation, mitigating premature convergence and proactively managing feasibility. Controlled diversification helps explore the solution space without sacrificing solution quality entirely.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}