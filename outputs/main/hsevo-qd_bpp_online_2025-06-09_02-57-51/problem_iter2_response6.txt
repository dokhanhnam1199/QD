```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Return priority to add item to each bin. 
    Combines capacity ratio, fill-up bonus and Gaussian for bin selection.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get -inf priority
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Calculate remaining capacity AFTER adding the item.
    feasible_mask = ~infeasible_mask
    remaining_after = bins_remain_cap[feasible_mask] - item

    # Calculate Ratio: (remaining after) / (remaining before). Favor smaller ratios
    capacity_ratios = remaining_after / bins_remain_cap[feasible_mask]

    # Smaller ratios become larger priorities
    priorities[feasible_mask] = -capacity_ratios  # Negate to make lower ratios have higher priority

    # Fill-Up Bonus: Give bonus if bin size close to item size, scaled by original bin capacity.  This promotes using partially full bins
    fill_diff = np.abs(bins_remain_cap[feasible_mask] - item)
    fill_bonus = np.exp(-fill_diff)  # Exponential decay means closer == much larger.
    priorities[feasible_mask] += fill_bonus

    # Gaussian component favoring bins with capacity close to item size
    priorities[feasible_mask] += 10*np.exp(-10*(remaining_after/item)**2)


    # Normalize the priorities to the range [0, 1] for stability
    if np.any(np.isfinite(priorities)):  # avoid division by zero if all are -inf
        finite_priorities = priorities[np.isfinite(priorities)]
        min_priority = np.min(finite_priorities)
        max_priority = np.max(finite_priorities)

        if min_priority != max_priority:  # Avoid divide by zero in edge case
            priorities[np.isfinite(priorities)] = (priorities[np.isfinite(priorities)] - min_priority) / (max_priority - min_priority)

    #Desperation if no bin is feasible, prioritize least wasted space
    if np.all(infeasible_mask):
        priorities = 1/(1+np.abs(bins_remain_cap - item))
        

    return priorities
```
