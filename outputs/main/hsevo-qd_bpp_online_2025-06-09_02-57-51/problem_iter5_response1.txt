```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, inverse_diff_epsilon: float = 1e-6,
                nearly_full_bonus_weight: float = 11.37, nearly_full_exponent_scale: float = 12.35,
                gaussian_width_scale: float = 0.2) -> np.ndarray:
    """Combines remaining cap ratio, nearly full bonus, and adaptive Gaussian."""

    priorities = np.zeros_like(bins_remain_cap)
    remaining_after_add = bins_remain_cap - item
    valid_bins = remaining_after_add >= 0

    if np.any(valid_bins):
        # Remaining capacity ratio priority
        space_diff = np.abs(remaining_after_add)
        priorities[valid_bins] = 1.0 / (space_diff[valid_bins] + inverse_diff_epsilon)

        # Nearly full bin bonus
        priorities[valid_bins] += nearly_full_bonus_weight * np.exp(-nearly_full_exponent_scale * (remaining_after_add[valid_bins] / item)**2)

        # Adaptive Gaussian component
        gaussian_width = np.mean(bins_remain_cap[valid_bins]) * gaussian_width_scale
        gaussian_priority = np.exp(-((bins_remain_cap[valid_bins] - item)**2) / (2 * gaussian_width**2))
        priorities[valid_bins] += gaussian_priority

    else:  # No valid bins
        priorities = 1 / (1 + np.abs(remaining_after_add))

    return priorities
```
