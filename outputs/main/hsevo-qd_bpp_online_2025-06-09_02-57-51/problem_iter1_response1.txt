```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give very low priority to bins that cannot contain the item
    priorities[bins_remain_cap < item] = -np.inf
    
    # For bins that can contain the item, prioritize based on remaining capacity
    # Use a combination of factors for better distribution and avoid excessive fragmentation
    
    # Factor 1: How much free space will be left (avoid nearly full bins first, encourages filling)
    remaining_after_placement = bins_remain_cap - item
    priorities[bins_remain_cap >= item] += remaining_after_placement[bins_remain_cap >= item]

    # Factor 2: Ratio of item size to remaining capacity (larger ratio => better fit initially)
    ratios = item / bins_remain_cap
    ratios[bins_remain_cap < item] = 0  # Avoid errors and don't consider invalid bins
    priorities[bins_remain_cap >= item] += ratios[bins_remain_cap >= item]

    # Factor 3: A small bonus for bins that are *almost* full, to encourage using them up completely if we are close to full capacity
    almost_full = (bins_remain_cap >= item) & (remaining_after_placement < 0.1 * np.max(bins_remain_cap)) # Tune 0.1 for better results
    priorities[almost_full] += 1 # Give a slight bonus.

    # Factor 4: Scale priorities down to a manageable range (avoid potential overflow/stability problems)
    priorities = priorities / np.max(np.abs(priorities)) if np.max(np.abs(priorities)) > 0 else priorities

    return priorities
```
