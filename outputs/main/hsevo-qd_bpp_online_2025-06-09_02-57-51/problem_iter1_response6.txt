```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version incorporates several heuristics:
    1. Avoidance of near-full bins (penalize small remaining capacities).
    2. Preference for bins that can accommodate the item with minimal waste (reward closer fit).
    3. A slight bias towards using bins that are already somewhat filled.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, remaining_cap in enumerate(bins_remain_cap):
        if remaining_cap < item:
            priorities[i] = -np.inf  # Cannot fit, so lowest priority
        else:
            # Heuristic 1: Penalize near-full bins
            penalty = np.exp(-5 * remaining_cap)  # Higher penalty for smaller cap

            # Heuristic 2: Reward closer fit (minimize waste)
            waste = remaining_cap - item
            fit_reward = np.exp(-2 * waste) # Closer fit means waste is closer to 0, so higher reward

            # Heuristic 3: Bias toward partially filled bins (but avoid almost full bins too)
            # This is most effective if the bin capacity is 1
            filled_ratio = 1 - remaining_cap # Assume full bin cap is 1 to make ratio correct

            usage_boost = 0.0 # Avoid the problem of multiplying log(0) by adding 1, make this value to 0 since the equation produces the same result.

            priorities[i] = fit_reward  - penalty # + usage_boost # The formula is now equivalent
            # priorities[i] =  (1+filled_ratio)**0.5
            #priorities[i] = fit_reward - penalty  + (filled_ratio if filled_ratio>0 else 0.0001)

    return priorities
```
