```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio-based prioritization with dynamic fill-up bonus and randomness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    remaining_after = bins_remain_cap[feasible_mask] - item
    capacity_ratios = remaining_after / bins_remain_cap[feasible_mask]
    priorities[feasible_mask] = -capacity_ratios

    # Dynamic Fill-Up Bonus: adjusts bonus based on item size relative to bin size
    fill_diff = np.abs(bins_remain_cap[feasible_mask] - item)
    relative_item_size = item / np.max(bins_remain_cap) #Item size relative to maximum capacity
    fill_bonus = np.exp(-fill_diff / (relative_item_size + 0.1)) #Scale the effect based on relative item size
    priorities[feasible_mask] += fill_bonus
    

    # Adaptive Randomness: introduce randomness scaled by the *remaining* capacity.
    remaining_ratio = bins_remain_cap[feasible_mask]/np.max(bins_remain_cap)
    randomness = np.random.rand(np.sum(feasible_mask)) * (0.1 + 0.3*remaining_ratio) #More randomness for emptier bins.
    priorities[feasible_mask] += randomness
    
    if np.any(np.isfinite(priorities)):
        finite_priorities = priorities[np.isfinite(priorities)]
        min_priority = np.min(finite_priorities)
        max_priority = np.max(finite_priorities)
        
        if min_priority != max_priority:
            priorities[np.isfinite(priorities)] = (priorities[np.isfinite(priorities)] - min_priority) / (max_priority - min_priority)

    return priorities
```
