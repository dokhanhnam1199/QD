```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a heuristic that balances between minimizing wasted space
    and preventing highly filled bins, attempting to distribute items relatively evenly.
    It uses a combination of remaining capacity, item size, and a touch of randomness.
    The goal is to simulate a quantum-inspired exploration of possible packing solutions.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Calculate the fill ratio for each bin if the item were added.
    potential_fill_ratios = (item + (bins_remain_cap - bins_remain_cap)) / (bins_remain_cap + 1e-9)  # Add a tiny constant to avoid division by zero
    potential_fill_ratios = np.clip(potential_fill_ratios, 0, 1)  # ensure values are [0, 1]

    # Heuristic 2: Give preference to bins that have enough space but aren't too empty.
    #   Prioritize based on a Gaussian-like distribution around a "good" fill ratio.
    #   The "good" fill ratio could be dynamically calculated, but a fixed one is simplest.
    good_fill_ratio = 0.75
    gaussian_influence = np.exp(-0.5 * ((potential_fill_ratios - good_fill_ratio) / 0.2)**2)  # Adjust standard deviation as needed
    priorities += gaussian_influence

    # Heuristic 3: Penalize bins where adding the item would result in overfilling.
    is_overfilled = (item > bins_remain_cap)
    priorities[is_overfilled] = -np.inf  # Exclude bins where item doesn't fit

    # Heuristic 4: Small randomization - a quantum "fuzziness" to the decision.
    #    Adds a tiny bit of noise to prevent deterministic behavior in tie-breaking cases.
    #    This mimics exploring different quantum states slightly.
    random_noise = np.random.normal(0, 0.001, size=bins_remain_cap.shape)
    priorities += random_noise
    
    #Heuristic 5: Encourage full packing
    available_space_ratio = bins_remain_cap / (item + 1e-9)
    packing_encouragement = np.exp(-available_space_ratio) #exponentially decaying priority depending on the fraction of avaiable space relative to item size.
    priorities += packing_encouragement

    return priorities
```
