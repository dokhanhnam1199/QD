```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Higher priority = more desirable.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First-Fit-Decreasing heuristic inspired: prioritize bins that can fit the item snugly
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        residual_capacities = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = np.exp(-residual_capacities) #Smaller residuals get higher priority

    # Otherwise, penalize significantly if the item doesn't fit at all. No need as priorities is initialized at 0.

    return priorities
```
