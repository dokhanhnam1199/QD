```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins based on a combination of factors:
    - Ability to accommodate the item
    - Closeness of remaining space to the item size (minimizing fragmentation)
    - Overall fullness of the bin (avoiding bins that are too full or too empty)
    - A penalty for bins that are close to being full but can't fit the current item

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    remaining_after_add = bins_remain_cap - item
    valid_bins = remaining_after_add >= 0

    if np.any(valid_bins):
        # Base priority: Inverse of the space difference, favoring tighter fits
        space_diff = np.abs(remaining_after_add)
        priorities[valid_bins] = 1.0 / (space_diff[valid_bins] + 1e-9)

        # Promote bins that are sufficiently full, avoiding excessive fragmentation.
        fill_ratios = (bins_remain_cap[valid_bins] - remaining_after_add[valid_bins]) / bins_remain_cap[valid_bins]
        priorities[valid_bins] += 10 * np.exp(-5 * (remaining_after_add[valid_bins] / item)**2)  # Adjusted scaling

        # Penalize almost-full bins that can't fit the item. This encourages the algorithm to
        # leave some buffer in bins to accommodate future items.
        almost_full = (bins_remain_cap < item) & (bins_remain_cap > (item - 0.25*np.max(bins_remain_cap)) ) #bins that can't fit but are close
        priorities[~valid_bins & almost_full] = -10  # Negative priority

        # Consider the overall fullness of the bins to encourage balanced bin utilization.
        overall_fullness = np.sum(bins_remain_cap - np.clip(remaining_after_add,0,bins_remain_cap)) / np.sum(bins_remain_cap)
        priorities[valid_bins] *= (1 - 0.5*overall_fullness)  # Scale down priority if bins are already full

    else:
        #If no bins can fit the item. prioritize bins with smallest wasted space
        priorities = 1/(1+np.abs(remaining_after_add)) #Prioritize minimum wasted space

    return priorities
```
