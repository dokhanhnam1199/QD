```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines gaussian priority with fill-up bonus and desperation handling."""

    priorities = np.zeros_like(bins_remain_cap)
    gaussian_width = np.mean(bins_remain_cap) / 5

    # Gaussian priority: prioritize bins with capacity close to item size
    priorities = np.exp(-((bins_remain_cap - item)**2) / (2 * gaussian_width**2))

    # Fill-up bonus: promote bins that will be nearly full after adding the item
    remaining_after_add = bins_remain_cap - item
    valid_bins = remaining_after_add >= 0

    if np.any(valid_bins):
        fill_ratios = (bins_remain_cap[valid_bins] - remaining_after_add[valid_bins]) / bins_remain_cap[valid_bins]
        priorities[valid_bins] += 10*np.exp(-10*(remaining_after_add[valid_bins]/item)**2)
    # Desperation: if item doesn't fit, prioritize the least full bin
    if np.all(item > bins_remain_cap):
        min_cap = np.min(bins_remain_cap)
        priorities = (bins_remain_cap == min_cap).astype(float)
    # Slight randomness
    randomness_strength = 0.001
    priorities += np.random.rand(len(bins_remain_cap)) * randomness_strength

    return priorities
```
