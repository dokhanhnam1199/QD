{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    remaining_after_add = bins_remain_cap - item\n    valid_bins = remaining_after_add >= 0\n\n    if np.any(valid_bins):\n        # Prioritize bins with capacity close to item size\n        space_diff = np.abs(remaining_after_add)\n        priorities[valid_bins] = 1.0 / (space_diff[valid_bins] + 1e-9)\n\n        # Boost priority for bins that become nearly full after adding the item\n        fill_ratio_after = (bins_remain_cap[valid_bins] - remaining_after_add[valid_bins]) / np.max(bins_remain_cap)\n        priorities[valid_bins] += 5 * np.exp(-5 * (np.abs(remaining_after_add[valid_bins]) / np.max(bins_remain_cap)))\n\n        # Penalize bins that would have very small remaining capacity\n        priorities[valid_bins] -= 2 * np.exp(-5 * (bins_remain_cap[valid_bins]/item)) * (remaining_after_add[valid_bins] < 0.1*np.max(bins_remain_cap))\n\n        # Introduce randomness to diversify bin selection, favoring slightly less full bins\n        # This adds exploration to avoid getting stuck in local optima\n        relative_fill = bins_remain_cap[valid_bins] / np.max(bins_remain_cap)\n        randomness = np.random.rand(np.sum(valid_bins)) * (0.2 + 0.2*relative_fill) #Scale randomness by bin emptiness\n        priorities[valid_bins] += randomness\n    else:\n        # If no valid bins, prioritize bins with smallest required extra capacity\n        priorities = 1 / (np.abs(remaining_after_add) + 1e-9)\n        #Penalize bins that are almost empty\n        empty_bins = bins_remain_cap > 0.9*np.max(bins_remain_cap)\n        priorities[empty_bins] = priorities[empty_bins]*0.1\n\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This function incorporates several factors to determine the priority:\n    1. Remaining capacity: Bins with capacity closer to the item size\n       are given higher priority (using a Gaussian-like function).  This\n       encourages filling bins reasonably well.\n    2. A \"desperation\" factor: If no bins can fit the item, prioritize\n       the least-full bin to minimize wasted space. This only applies if `item` is larger than the largest `bins_remain_cap`.\n    3.  Slight randomness:  To avoid being stuck in local optima and\n        explore slightly different packings.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Gaussian-like priority based on remaining capacity closeness to item size.\n    # The narrower the Gaussian, the more specific we are in matching item size to bin capacity.  Experiment with different widths (std).\n    gaussian_width = np.mean(bins_remain_cap)/5 #tuneable.  Smaller = more picky.\n\n    priorities = np.exp(-((bins_remain_cap - item)**2) / (2 * gaussian_width**2))\n\n\n    #Desperation: item doesn't fit in any bin. Prioritize least full bin.\n    if np.all(item > bins_remain_cap):\n\n        min_cap = np.min(bins_remain_cap)\n        priorities = (bins_remain_cap == min_cap).astype(float)  # Highest priority to least full.  Tie goes to the first.\n\n    #Add a bit of randomness to avoid local optima\n    randomness_strength = 0.001 #Tuneable. Keep very small.\n\n    priorities += np.random.rand(len(bins_remain_cap)) * randomness_strength\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic incorporates bin utilization awareness, item size consideration, a dynamic fragmentation penalty, and a fallback strategy, while the worst uses a Gaussian-like priority based on remaining capacity closeness to item size, a \"desperation\" factor, and slight randomness.\n\n(2nd) vs (19th): Very similar to (1st) vs (20th).\n\nComparing (1st) vs (2nd), we see no differences. They are exactly the same.\n\nComparing (3rd) vs (4th), we see no differences. They are exactly the same.\n\nComparing (19th) vs (20th), the heuristic in (19th) calculates the ratio of remaining capacity *after* adding the item to the original remaining capacity, adds a bonus to bins with a remaining capacity close to the item size, and normalizes the final priorities to the range of [0,1]. The heuristic in (20th) uses a Gaussian-like priority based on remaining capacity closeness to item size, a \"desperation\" factor, and slight randomness.\n\nComparing (11th) vs (12th), we see (12th) combines ratio-based prioritization with dynamic fill-up bonus and randomness, it normalizes the priorities to the range [0, 1]. (11th) uses parameters and no normalization.\n\nOverall: The better heuristics emphasize a combination of factors, including bin utilization, item size, fragmentation penalties, and fallback strategies, along with normalization, while also employing adaptive randomness to diversify bin selection. The poorer heuristics focus primarily on closeness to item size (using a Gaussian-like function) and a desperation factor, with less attention to these other elements.\n- \nOkay, here's a redefined \"Current Self-Reflection\" for designing better heuristics, avoiding pitfalls:\n\n*   **Keywords:** Quantitative metrics (bin utilization, fragmentation), adaptive parameters, normalization methods (scaling, ranking), exploration-exploitation balance, fine-grained control.\n\n*   **Advice:** Focus on measurable impact: define clear performance metrics and track them. Implement adaptive parameter control based on problem instance characteristics.\n\n*   **Avoid:** Vague notions of \"balance\" and \"stability\". Resist adding randomness without a clear justification.\n\n*   **Explanation:** Shift from general feelings to specific, quantifiable techniques. Instead of \"stability,\" consider things like reducing solution variance across similar instances. Instead of vaguely \"balancing,\" define the exploration/exploitation trade-off explicitly through parameters that can be tuned.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}