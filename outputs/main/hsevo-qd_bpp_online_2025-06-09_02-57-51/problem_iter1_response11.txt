```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version combines several factors:
    1. Space utilization: Bins closer to being full get higher priority,
       but not if the item doesn't fit well.
    2. Avoidance of small leftover space: Penalizes leaving tiny spaces
       that are unlikely to be used.
    3. Fit check:  A bin that can't accommodate the item gets a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap < item:
            priorities[i] = -np.inf  # Very low priority if item doesn't fit
        else:
            space_utilization = (item / cap) # Ratio of item size to remaining capacity

            # Heuristic to avoid leaving small leftover space. This is critical!
            leftover_space = cap - item
            if 0 < leftover_space < 0.1:  # If very little space is left
                priorities[i] -= 10       # Heavily penalize (this can be tuned)

            priorities[i] += space_utilization + (1 - (leftover_space/1)) # adding space utilisation ratio, subtracting normalised leftover space.

    return priorities
```
