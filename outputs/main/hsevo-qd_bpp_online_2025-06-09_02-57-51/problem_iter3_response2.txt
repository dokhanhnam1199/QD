```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_after_add = bins_remain_cap - item
    valid_bins = remaining_after_add >= 0

    if np.any(valid_bins):
        space_diff = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] = 1.0 / (space_diff + 1e-9)  # Favor smaller differences

        # Fill ratio component, boosting bins that utilize space well.
        fill_ratio = item / bins_remain_cap[valid_bins]
        priorities[valid_bins] += 5 * fill_ratio  # Scale the fill ratio influence

        # Penalty for leaving very small remainders.
        small_remainder_penalty = np.exp(-10 * (space_diff / item)**2)
        priorities[valid_bins] -= 2 * small_remainder_penalty  # Penalize, but not too harshly.

        # Additional term: consider the variance of filled bins.
        # Attempt to keep the bin fills relatively consistent.
        filled_amounts = bins_remain_cap - remaining_after_add
        filled_variance = np.var(filled_amounts[valid_bins])  # only among the valid bins
        priorities[valid_bins] -= 0.1 * filled_variance #Reduce priority if there is high variance
        
    else:
        # If no valid bins, prioritize bins with capacity closest to item size, but strongly discourage overflow
        priorities = -np.abs(remaining_after_add)

    return priorities
```
