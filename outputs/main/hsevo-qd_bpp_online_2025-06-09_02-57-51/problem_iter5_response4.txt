```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, inverse_diff_epsilon: float = 1e-6,
                nearly_full_bonus_weight: float = 10.0, nearly_full_exponent_scale: float = 10.0,
                randomness_strength: float = 0.001) -> np.ndarray:
    """Combines gaussian priority, fill-up bonus, and randomness."""

    priorities = np.zeros_like(bins_remain_cap)
    gaussian_width = np.mean(bins_remain_cap) / 5
    gaussian_priority = np.exp(-((bins_remain_cap - item)**2) / (2 * gaussian_width**2))

    remaining_after_add = bins_remain_cap - item
    valid_bins = remaining_after_add >= 0

    if np.any(valid_bins):
        # Apply fill-up bonus using remaining capacity after add
        gaussian_priority[valid_bins] += nearly_full_bonus_weight * np.exp(-nearly_full_exponent_scale * (remaining_after_add[valid_bins] / item)**2)
        
        # Normalizing the priority
        total_priority = np.sum(gaussian_priority[valid_bins])
        if total_priority > 0:
          gaussian_priority[valid_bins] /= total_priority
    else:
        # If no valid bins, prioritize bins with smallest waste
        priorities = 1/(1+np.abs(remaining_after_add))
        
    # add a small value to the priority to avoid zero
    priorities = gaussian_priority + np.random.rand(len(bins_remain_cap)) * randomness_strength

    return priorities
```
