{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version incorporates several improvements:\n    1.  Bin-Utilization Awareness: Considers how well-utilized the existing bins are.\n    2.  Item-Size Consideration: Adapts priority based on the item size relative to bin capacity.\n    3.  Dynamic Fragmentation Penalty: Penalizes potential fragmentation more effectively.\n    4.  Fallback Strategy: Robustly handles scenarios where no bin initially fits.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    remaining_after_add = bins_remain_cap - item\n    valid_bins = remaining_after_add >= 0\n\n    if np.any(valid_bins):\n        # Base priority: inverse of wasted space.\n        space_diff = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] = 1.0 / (space_diff + 1e-9)\n\n        # Bin Utilization Awareness: Favor bins with higher utilization.\n        bin_utilization = (np.max(bins_remain_cap) - bins_remain_cap[valid_bins]) / np.max(bins_remain_cap)\n        priorities[valid_bins] += 2*bin_utilization\n\n        # Item-Size Consideration: Adjust priority based on item size.\n        item_ratio = item / np.max(bins_remain_cap) #Ratio of item size with respect to max bin cap\n        priorities[valid_bins] += (1-item_ratio)  #Large item less priority\n\n\n        # Fragmentation Penalty: Heavily penalize small remaining capacities.\n        fragmentation_penalty = np.exp(-10 * (space_diff / np.max(bins_remain_cap))**2) #Penalize small remainders w.r.t. max bin size\n        priorities[valid_bins] -= fragmentation_penalty\n    else:\n        # Fallback Strategy: if no bin fits, prioritize bins with smallest *absolute* wasted space.\n        priorities = 1 / (np.abs(remaining_after_add) + 1e-9)\n\n\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}