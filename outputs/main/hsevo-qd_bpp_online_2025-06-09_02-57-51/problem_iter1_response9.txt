```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First Fit Decreasing Heuristic Inspired
            # Prefer bins that can accommodate the item, but penalize almost full bins
            priorities[i] = cap - item # Maximize remaining space *after* placing. This simulates FFD heuristic.
            # Bonus for bins that are relatively empty but can fit the item
            priorities[i] += (bins_remain_cap[i] / np.max(bins_remain_cap)) *0.5 # Add slight penalty if bin cap big, but bin still fits

        else:
            priorities[i] = -np.inf  # Cannot fit; assign a negative infinite priority

    # Scale the priorities to make them easier to work with.
    # Add a small offset to avoid negative priorities.
    priorities = (priorities - np.min(priorities)) + 0.001
    return priorities
```
