```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Assigns bin priorities considering space fit, fill level, and randomness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_after_add = bins_remain_cap - item
    valid_bins = remaining_after_add >= 0

    if np.any(valid_bins):
        # Prioritize bins with capacity close to item size
        space_diff = np.abs(remaining_after_add)
        priorities[valid_bins] = 1.0 / (space_diff[valid_bins] + 1e-9)

        # Boost priority for bins that become nearly full after adding the item
        fill_ratio_after = (bins_remain_cap[valid_bins] - remaining_after_add[valid_bins]) / np.max(bins_remain_cap)
        priorities[valid_bins] += 5 * np.exp(-5 * (np.abs(remaining_after_add[valid_bins]) / np.max(bins_remain_cap)))

        # Penalize bins that would have very small remaining capacity
        priorities[valid_bins] -= 2 * np.exp(-5 * (bins_remain_cap[valid_bins]/item)) * (remaining_after_add[valid_bins] < 0.1*np.max(bins_remain_cap))

        # Introduce randomness to diversify bin selection, favoring slightly less full bins
        # This adds exploration to avoid getting stuck in local optima
        relative_fill = bins_remain_cap[valid_bins] / np.max(bins_remain_cap)
        randomness = np.random.rand(np.sum(valid_bins)) * (0.2 + 0.2*relative_fill) #Scale randomness by bin emptiness
        priorities[valid_bins] += randomness

    else:
        # If no valid bins, prioritize bins with smallest required extra capacity
        gaussian_width = np.mean(bins_remain_cap)/5 if np.any(bins_remain_cap > 0) else item/5 #tuneable.  Smaller = more picky.
        priorities = np.exp(-((bins_remain_cap - item)**2) / (2 * gaussian_width**2))
        #Penalize bins that are almost empty
        empty_bins = bins_remain_cap > 0.9*np.max(bins_remain_cap)
        priorities[empty_bins] = priorities[empty_bins]*0.1


    return priorities
```
