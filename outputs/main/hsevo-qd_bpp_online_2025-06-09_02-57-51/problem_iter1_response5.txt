```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero
    bins_remain_cap_safe = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate wasted space if item is placed in the bin
    wasted_space = bins_remain_cap_safe - item

    # Give a very low priority to bins that cannot fit the item
    priority = np.where(wasted_space < 0, -np.inf, 0)

    # Calculate the fill ratio if the item is placed
    fill_ratio = item / bins_remain_cap_safe

    # Give higher priority to bins that can be filled more efficiently
    priority = np.where(wasted_space >= 0, 1 - (wasted_space / bins_remain_cap_safe), priority)

    # Introduce a small preference for bins that are already quite full
    priority = np.where(wasted_space >= 0, priority + fill_ratio*0.1, priority)

    # Encourage to close bins: assign a small advantage to closing (wasted_space == 0)

    priority = np.where(wasted_space == 0, priority + 0.05, priority)


    return priority
```
