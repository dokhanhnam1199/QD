```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, inverse_diff_epsilon: float = 1e-6) -> np.ndarray:
    """Combines fill ratio, item size consideration, and adaptive bonus."""
    priorities = np.zeros_like(bins_remain_cap)
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return priorities
    remaining_after_add = bins_remain_cap - item
    fill_ratios = (bins_remain_cap[feasible_bins] - remaining_after_add[feasible_bins][feasible_bins[feasible_bins>=0]]) / bins_remain_cap[feasible_bins]
    space_diff = np.abs(remaining_after_add)
    priorities[feasible_bins] =  1 / (space_diff[feasible_bins] + inverse_diff_epsilon)  # Inverse of difference
    relative_item_size = item / np.max(bins_remain_cap)
    fill_bonus = np.exp(-space_diff[feasible_bins] / (relative_item_size + 0.1))
    priorities[feasible_bins] += fill_bonus
    if np.any(np.isfinite(priorities)):
            finite_priorities = priorities[np.isfinite(priorities)]
            min_priority = np.min(finite_priorities)
            max_priority = np.max(finite_priorities)
            
            if min_priority != max_priority:
                priorities[np.isfinite(priorities)] = (priorities[np.isfinite(priorities)] - min_priority) / (max_priority - min_priority)
    return priorities
```
