```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate remaining capacity after adding the item. Negative values indicate infeasibility.
    remaining_after_add = bins_remain_cap - item

    # Give high priority to bins that can accommodate the item, but avoid almost-full bins (first fit decreasing consideration).
    # Slightly favor bins with space close to the item size to avoid excessive fragmentation.
    valid_bins = remaining_after_add >= 0

    if np.any(valid_bins):
        space_diff = np.abs(remaining_after_add)
        priorities[valid_bins] = 1.0 / (space_diff[valid_bins] + 1e-9)  # Inverse of difference, add small value to avoid division by zero
        # Heuristics to promote bins that are sufficiently full (avoid too much space)
        fill_ratios = (bins_remain_cap[valid_bins] - remaining_after_add[valid_bins]) / bins_remain_cap[valid_bins]

        #Promote nearly full bins but penalize excessively small remainders
        priorities[valid_bins] = priorities[valid_bins] + 10*np.exp(-10*(remaining_after_add[valid_bins]/item)**2)


    #Heuristic: Consider the overall fullness of the bins. If a bin is very full (high fill_ratio), it should receive a lower priority as that is more prone to produce unusable fragments
    overall_fullness = (np.sum(bins_remain_cap) - np.sum(bins_remain_cap[remaining_after_add>=0]) + np.sum(item*np.ones_like(bins_remain_cap)[remaining_after_add>=0])) / np.sum(np.ones_like(bins_remain_cap) * np.max(bins_remain_cap))
    #Consider the worst case bin that could not store the item as a dissuader

    if np.sum(valid_bins) == 0:
      priorities = 1/(1+np.abs(remaining_after_add))
    return priorities
```
