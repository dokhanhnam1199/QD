```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function incorporates several factors to determine the priority:
    1. Remaining capacity: Bins with capacity closer to the item size
       are given higher priority (using a Gaussian-like function).  This
       encourages filling bins reasonably well.
    2. A "desperation" factor: If no bins can fit the item, prioritize
       the least-full bin to minimize wasted space. This only applies if `item` is larger than the largest `bins_remain_cap`.
    3.  Slight randomness:  To avoid being stuck in local optima and
        explore slightly different packings.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Gaussian-like priority based on remaining capacity closeness to item size.
    # The narrower the Gaussian, the more specific we are in matching item size to bin capacity.  Experiment with different widths (std).
    gaussian_width = np.mean(bins_remain_cap)/5 #tuneable.  Smaller = more picky.

    priorities = np.exp(-((bins_remain_cap - item)**2) / (2 * gaussian_width**2))


    #Desperation: item doesn't fit in any bin. Prioritize least full bin.
    if np.all(item > bins_remain_cap):

        min_cap = np.min(bins_remain_cap)
        priorities = (bins_remain_cap == min_cap).astype(float)  # Highest priority to least full.  Tie goes to the first.

    #Add a bit of randomness to avoid local optima
    randomness_strength = 0.001 #Tuneable. Keep very small.

    priorities += np.random.rand(len(bins_remain_cap)) * randomness_strength
    return priorities
```
