{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version incorporates several improvements:\n    1.  Bin-Utilization Awareness: Considers how well-utilized the existing bins are.\n    2.  Item-Size Consideration: Adapts priority based on the item size relative to bin capacity.\n    3.  Dynamic Fragmentation Penalty: Penalizes potential fragmentation more effectively.\n    4.  Fallback Strategy: Robustly handles scenarios where no bin initially fits.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    remaining_after_add = bins_remain_cap - item\n    valid_bins = remaining_after_add >= 0\n\n    if np.any(valid_bins):\n        # Base priority: inverse of wasted space.\n        space_diff = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] = 1.0 / (space_diff + 1e-9)\n\n        # Bin Utilization Awareness: Favor bins with higher utilization.\n        bin_utilization = (np.max(bins_remain_cap) - bins_remain_cap[valid_bins]) / np.max(bins_remain_cap)\n        priorities[valid_bins] += 2*bin_utilization\n\n        # Item-Size Consideration: Adjust priority based on item size.\n        item_ratio = item / np.max(bins_remain_cap) #Ratio of item size with respect to max bin cap\n        priorities[valid_bins] += (1-item_ratio)  #Large item less priority\n\n\n        # Fragmentation Penalty: Heavily penalize small remaining capacities.\n        fragmentation_penalty = np.exp(-10 * (space_diff / np.max(bins_remain_cap))**2) #Penalize small remainders w.r.t. max bin size\n        priorities[valid_bins] -= fragmentation_penalty\n    else:\n        # Fallback Strategy: if no bin fits, prioritize bins with smallest *absolute* wasted space.\n        priorities = 1 / (np.abs(remaining_after_add) + 1e-9)\n\n\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, here's a redefined \"Current Self-Reflection\" for designing better heuristics, avoiding pitfalls:\n\n*   **Keywords:** Quantitative metrics (bin utilization, fragmentation), adaptive parameters, normalization methods (scaling, ranking), exploration-exploitation balance, fine-grained control.\n\n*   **Advice:** Focus on measurable impact: define clear performance metrics and track them. Implement adaptive parameter control based on problem instance characteristics.\n\n*   **Avoid:** Vague notions of \"balance\" and \"stability\". Resist adding randomness without a clear justification.\n\n*   **Explanation:** Shift from general feelings to specific, quantifiable techniques. Instead of \"stability,\" consider things like reducing solution variance across similar instances. Instead of vaguely \"balancing,\" define the exploration/exploitation trade-off explicitly through parameters that can be tuned.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}