```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity-matching with fill-level awareness and adaptive exploration."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_after_add = bins_remain_cap - item
    valid_bins = remaining_after_add >= 0

    if np.any(valid_bins):
        # Capacity matching: prioritize bins with space close to item size
        space_diff = np.abs(remaining_after_add)
        priorities[valid_bins] = 1.0 / (space_diff[valid_bins] + 1e-9)

        # Fill-level awareness: bonus for nearly full bins and penalty for bins with minimal cap after placement
        fill_ratio_after = (bins_remain_cap[valid_bins] - remaining_after_add[valid_bins]) / np.max(bins_remain_cap)
        priorities[valid_bins] += 5 * np.exp(-5 * (np.abs(remaining_after_add[valid_bins]) / np.max(bins_remain_cap)))
        priorities[valid_bins] -= 2 * np.exp(-5 * (bins_remain_cap[valid_bins]/item)) * (remaining_after_add[valid_bins] < 0.1*np.max(bins_remain_cap))

        #Adaptive Exploration
        relative_fill = bins_remain_cap[valid_bins] / np.max(bins_remain_cap)
        exploration_factor = 0.2 + 0.2 * relative_fill
        randomness = np.random.rand(np.sum(valid_bins)) * exploration_factor
        priorities[valid_bins] += randomness
    else:
        # Desperation strategy: prioritize bins requiring least extra capacity and penalize empty ones.
        priorities = 1 / (np.abs(remaining_after_add) + 1e-9)
        empty_bins = bins_remain_cap > 0.9*np.max(bins_remain_cap)
        priorities[empty_bins] = priorities[empty_bins]*0.1

    return priorities
```
