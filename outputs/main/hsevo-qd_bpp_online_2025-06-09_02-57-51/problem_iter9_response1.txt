```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version incorporates several improvements:
    1. Bin-Utilization Awareness: Considers how well-utilized the existing bins are.
    2. Item-Size Consideration: Adapts priority based on the item size relative to bin capacity.
    3. Dynamic Fragmentation Penalty: Penalizes potential fragmentation more effectively.
    4. Fallback Strategy: Robustly handles scenarios where no bin initially fits.
    5. Adaptive Fragmentation Penalty: Adjust the penalty based on the average bin capacity.
    6. Prioritize Almost Full Bins: Give higher priority to bins that are close to full.
    7. Capacity-Aware Item Ratio: Item ratio is calculated with respect to the *current* remaining capacity, not the max capacity.
    8. Rank-Based Priority: Use rank instead of absolute values to avoid domination by large numbers.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_after_add = bins_remain_cap - item
    valid_bins = remaining_after_add >= 0

    if np.any(valid_bins):
        # Base priority: inverse of wasted space. Use rank for scaling
        space_diff = bins_remain_cap[valid_bins] - item
        rank = np.argsort(space_diff)
        priorities[valid_bins][rank] = np.arange(1, len(rank) + 1)

        # Bin Utilization Awareness: Favor bins with higher utilization.
        bin_utilization = (np.max(bins_remain_cap) - bins_remain_cap[valid_bins]) / np.max(bins_remain_cap)
        priorities[valid_bins] += 2*bin_utilization

        # Item-Size Consideration: Adjust priority based on item size.
        item_ratio = item / bins_remain_cap[valid_bins]  #Capacity aware item ratio
        priorities[valid_bins] += (1-item_ratio)

        # Fragmentation Penalty: Heavily penalize small remaining capacities. Adaptive to bin capacity
        avg_bin_cap = np.mean(bins_remain_cap)
        fragmentation_penalty = np.exp(-10 * (space_diff / avg_bin_cap)**2)
        priorities[valid_bins] -= fragmentation_penalty

        # Prioritize Almost Full Bins
        almost_full_bonus = np.exp(-5 * (bins_remain_cap[valid_bins] - item) / np.max(bins_remain_cap))
        priorities[valid_bins] += almost_full_bonus

    else:
        # Fallback Strategy: if no bin fits, prioritize bins with smallest *absolute* wasted space.
        priorities = 1 / (np.abs(remaining_after_add) + 1e-9)


    return priorities
```
