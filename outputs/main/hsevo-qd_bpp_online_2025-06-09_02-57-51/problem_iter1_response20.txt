```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Primary priority: how much space will be left after adding the item
            remaining_space = cap - item
            priorities[i] = (1 / (remaining_space + 0.0001))  # Inverse of remaining space, adding a small value to avoid division by zero
            # Secondary priority: Slightly favor bins that are already somewhat full
            priorities[i] += (1 - (cap / np.max(bins_remain_cap))) * 0.1 # Bias towards fuller bins if there's room
        else:
            priorities[i] = -np.inf  # Item doesn't fit, very low priority

    return priorities
```
