```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Uses a combination of factors to determine priority:
    1. Space Utilization: Prioritizes bins where the item fits with minimal wasted space.
    2. Avoidance of Near-Full Bins: Discourages placing items in bins that are already nearly full to preserve flexibility.
    3. Bin Fragmentation Penalty: Adds a penalty based on the relative size of the remaining space after placing the item (larger penalty for higher fragmentation).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.  Invalid bins return -inf
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item > cap:
            priorities[i] = -np.inf  # Impossible to place, assign the lowest priority
        else:
            remaining_space = cap - item
            
            # Space Utilization (minimize wasted space)
            space_utilization_factor = np.exp(-remaining_space / item)  # Exponential decay of priority as space increases. Can adjust scaling factor as needed.

            # Avoidance of Near-Full Bins (discourage packing in very full bins)
            fullness_penalty = np.exp( - (item / cap) * (1 / (1-(remaining_space/cap) + 1e-9)) if cap> 0 else 0)  # Penalty increases sharply as the bin gets fuller with the current item
            # Bin Fragmentation Penalty (penalize fragmentation proportional to remaining space). Also account for current bin cap
            fragmentation_penalty = - (remaining_space / cap)**2 if cap> 0 else 0

            priorities[i] = space_utilization_factor  - fullness_penalty + fragmentation_penalty # can consider adjusting weights here for the factors

    return priorities
```
