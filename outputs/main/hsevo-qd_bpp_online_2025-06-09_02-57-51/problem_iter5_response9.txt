```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using a combination of remaining capacity and randomness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_after_add = bins_remain_cap - item
    valid_bins = remaining_after_add >= 0

    if np.any(valid_bins):
        # Prioritize bins with capacity close to item size
        gaussian_width = np.mean(bins_remain_cap[valid_bins])/5 #tuneable.  Smaller = more picky.
        priorities[valid_bins] = np.exp(-((bins_remain_cap[valid_bins] - item)**2) / (2 * gaussian_width**2))

        # Introduce randomness to diversify bin selection
        randomness_strength = 0.001
        priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * randomness_strength
    else:
        # If no valid bins, prioritize bins with smallest required extra capacity
        min_cap = np.min(bins_remain_cap)
        priorities = (bins_remain_cap == min_cap).astype(float)

    return priorities
```
