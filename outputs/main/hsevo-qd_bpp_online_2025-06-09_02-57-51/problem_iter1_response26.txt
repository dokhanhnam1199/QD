```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Hawking inspired priority function, focusing on maximizing information gained
    while avoiding black hole creation (overfilling).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # 1. Feasibility: Disqualify bins that cannot fit the item.  Think of it like an event horizon - you can't escape once you're in a black hole. Don't let items "escape" the bin once placed.
    feasible_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    priorities[~feasible_bins] = -np.inf # Mark infeasible bins with -inf priority

    # 2. Information Gain: Prefer bins that utilize more capacity, but with diminishing returns. This maximizes the information stored (items packed). Avoids creating low entropy configs.
    remaining_capacities = bins_remain_cap[feasible_bins]
    utilization_ratios = item / remaining_capacities # Higher value is better as it results in higher utilization

    # Logarithmic scaling ensures diminishing returns, meaning we prefer to fill empty bins a bit, rather than stuff packed ones further. A flat landscape will result in lowest entropy.
    priority_score = np.log(utilization_ratios + 1e-9) #Adding small value to avoid log(0)
    priorities[feasible_bins] = priority_score

    # 3. Gravitational Pull: Give a slight preference to bins that are already somewhat full, to encourage balancing. Avoid creating super massive/low density stars in some region while leaving others as vacuum.

    filled_percentage = (1 - (remaining_capacities / np.max(bins_remain_cap)))
    gravity_boost = filled_percentage * 0.1 # Scale factor to avoid dominating effect
    priorities[feasible_bins] += gravity_boost


    return priorities
```
