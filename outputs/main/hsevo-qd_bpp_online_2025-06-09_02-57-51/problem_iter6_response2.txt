```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    remaining_after_add = bins_remain_cap - item
    valid_bins = remaining_after_add >= 0

    if np.any(valid_bins):
        # Initial priority based on space difference
        space_diff = np.abs(remaining_after_add)
        priorities[valid_bins] = 1.0 / (space_diff[valid_bins] + 1e-9)

        # Refine priority based on fill ratio
        fill_ratios = (bins_remain_cap[valid_bins] - remaining_after_add[valid_bins]) / bins_remain_cap[valid_bins]

        # Promote bins that are well-filled, but not overly full
        priorities[valid_bins] += 5 * np.exp(-20 * (np.abs(fill_ratios - 0.7))**2)

        # Reduce priority for bins with very small remainders
        priorities[valid_bins] -= 2 * np.exp(-10 * (remaining_after_add[valid_bins] / item)**2)

        # Adaptive adjustment based on available bin capacities
        avg_capacity = np.mean(bins_remain_cap)
        capacity_std = np.std(bins_remain_cap)

        # Encourage using bins closer to average capacity if variance is high
        if capacity_std > 0.1:  # Adjust threshold as needed
            capacity_diff = np.abs(bins_remain_cap[valid_bins] - avg_capacity)
            priorities[valid_bins] += 1.0 / (capacity_diff + 1e-9)

    else:
        # If no valid bins, prioritize bins with smallest waste
        priorities = 1 / (1 + np.abs(remaining_after_add))

    return priorities
```
