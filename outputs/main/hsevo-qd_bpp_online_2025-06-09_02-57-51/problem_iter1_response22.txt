```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a very low value (punishing infeasible bins heavily)
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    # Find feasible bins (where item can fit)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # No feasible bins - return low priority everywhere.  (In a practical implementation, this would likely trigger creating a new bin)
        return priorities

    # Calculate 'waste' if item is placed in each feasible bin.
    waste = bins_remain_cap[feasible_bins] - item

    # Give highest priority to bins with least waste
    priorities[feasible_bins] = -waste # Minimize waste


    # Newton's refinement (adding a small attractive force to bins nearly full)
    nearly_full = (bins_remain_cap[feasible_bins] > item) & (bins_remain_cap[feasible_bins] < (item + 0.1)) # within 10% above item size, for example
    if np.any(nearly_full):
       priorities[feasible_bins][nearly_full] += 0.5 #give a slight bump in priority

    # Encourage bins with mid-range remaining capacity
    mid_cap_bins = (bins_remain_cap[feasible_bins] > item) & (bins_remain_cap[feasible_bins] < 0.75 * np.max(bins_remain_cap))
    if np.any(mid_cap_bins):
        priorities[feasible_bins][mid_cap_bins] += 0.2  # Add a moderate bonus to bins with "mid-range" remaining capacity

    return priorities
```
