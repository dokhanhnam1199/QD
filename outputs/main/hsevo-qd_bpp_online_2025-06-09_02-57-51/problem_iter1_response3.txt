```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Rule 1: Feasibility - Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf # Assign lowest priority to infeasible bins.

    # Rule 2: Minimize wasted space - Prioritize bins with remaining capacity closest to the item size.
    # Avoids fragmentation.
    diff = bins_remain_cap - item
    priorities[feasible_bins] = -np.abs(diff[feasible_bins])

    # Rule 3: Consider utilization - Give a small boost to bins that are already somewhat utilized.
    # Helps avoid creating many near-empty bins. This effect should be small compared to minimizing wasted space.
    priorities[feasible_bins] += 0.01 * (1 - bins_remain_cap[feasible_bins])
    return priorities
```
