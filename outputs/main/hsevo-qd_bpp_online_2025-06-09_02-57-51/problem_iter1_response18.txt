```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item.
    remaining_after_add = bins_remain_cap - item

    # Give a very low priority to bins that cannot fit the item.
    priorities = np.where(remaining_after_add < 0, -np.inf, 0)

    # For bins that can fit the item, calculate a score based on the "wastage"
    # Smallest wastage (bin_remain_cap - item) gets the highest priority.
    # Add a small constant to the remaining capacity to avoid division by zero if item fills bin exactly.
    valid_bins = remaining_after_add[remaining_after_add >= 0]
    if len(valid_bins) > 0:
      priorities[remaining_after_add >= 0] = 1 / (valid_bins + 1e-9) # use small constant to avoid division by zero if a bin is completely filled
      # higher values have greater priority

    return priorities
```
