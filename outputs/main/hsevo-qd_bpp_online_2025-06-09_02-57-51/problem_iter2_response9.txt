```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Gaussian priority with fill-up bias and desperation handling."""

    priorities = np.zeros_like(bins_remain_cap)
    gaussian_width = np.mean(bins_remain_cap) / 5

    # Gaussian priority: prioritize bins close to item size
    gaussian_priority = np.exp(-((bins_remain_cap - item)**2) / (2 * gaussian_width**2))
    priorities = gaussian_priority.copy()

    # Fill-up bias: prioritize fuller bins if possible
    remaining_after_add = bins_remain_cap - item
    valid_bins = remaining_after_add >= 0

    if np.any(valid_bins):
        fill_ratios = (bins_remain_cap[valid_bins] - remaining_after_add[valid_bins]) / bins_remain_cap[valid_bins]
        priorities[valid_bins] += 2*fill_ratios  # Scale this appropriately

    # Desperation: if no bins fit, prioritize least full
    if np.all(item > bins_remain_cap):
        min_cap = np.min(bins_remain_cap)
        priorities = (bins_remain_cap == min_cap).astype(float)

    # Add a bit of randomness to avoid local optima, but not for desperation
    if np.any(item <= bins_remain_cap):
        randomness_strength = 0.001
        priorities += np.random.rand(len(bins_remain_cap)) * randomness_strength
    return priorities
```
