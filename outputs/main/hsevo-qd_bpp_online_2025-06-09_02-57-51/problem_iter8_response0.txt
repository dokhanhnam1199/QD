```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on item size, capacity, and fragmentation."""

    priorities = np.zeros_like(bins_remain_cap)
    remaining_after_add = bins_remain_cap - item
    valid_bins = remaining_after_add >= 0

    if np.any(valid_bins):
        space_diff = np.abs(remaining_after_add)
        priorities[valid_bins] = 1.0 / (space_diff[valid_bins] + 1e-9)
        fill_ratios = (bins_remain_cap[valid_bins] - remaining_after_add[valid_bins]) / bins_remain_cap[valid_bins]
        priorities[valid_bins] = priorities[valid_bins] + 10*np.exp(-10*(remaining_after_add[valid_bins]/item)**2)

        # Gaussian-like priority based on remaining capacity closeness to item size.
        gaussian_width = np.mean(bins_remain_cap)/5 #tuneable.  Smaller = more picky.
        gaussian_priority = np.exp(-((bins_remain_cap[valid_bins] - item)**2) / (2 * gaussian_width**2))
        priorities[valid_bins] = priorities[valid_bins] + gaussian_priority #Combine gaussian with existing
    else: #Desperation, item doesn't fit.Prioritize least full.
        min_cap = np.min(bins_remain_cap)
        priorities = (bins_remain_cap == min_cap).astype(float)

    randomness_strength = 0.001
    priorities += np.random.rand(len(bins_remain_cap)) * randomness_strength #tuneable

    #Normalize
    priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities) + 1e-9)

    return priorities
```
