```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities # All bins are full, return 0 priority

    # 1. Remaining capacity after adding the item (higher is worse - try to fill bins)
    remaining_capacity = bins_remain_cap - item
    remaining_capacity[~feasible_bins] = np.inf # Penalize infeasible bins

    # 2. Utilization Ratio (higher is better - try to fill bins)
    utilization_ratio = item / bins_remain_cap
    utilization_ratio[~feasible_bins] = -np.inf  # Penalize infeasible bins. Set to low value

    #3. Score based on remaining capacity
    priority_cap = -remaining_capacity

    #4. Score based on utilization. Larger is better
    priority_util = utilization_ratio
    

    # Combine metrics
    priorities = priority_cap + priority_util #+ priority_frac # Add the fractional fit score
    #Inf to a very low number so it will not be choosen if any option exist
    priorities[~feasible_bins] = -np.inf # Penalize infeasible bins
    
    return priorities
```
