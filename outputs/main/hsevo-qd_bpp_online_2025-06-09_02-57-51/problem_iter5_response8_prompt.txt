{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    remaining_after_add = bins_remain_cap - item\n    valid_bins = remaining_after_add >= 0\n\n    if np.any(valid_bins):\n        # Prioritize bins with capacity close to item size\n        space_diff = np.abs(remaining_after_add)\n        priorities[valid_bins] = 1.0 / (space_diff[valid_bins] + 1e-9)\n\n        # Boost priority for bins that become nearly full after adding the item\n        fill_ratio_after = (bins_remain_cap[valid_bins] - remaining_after_add[valid_bins]) / np.max(bins_remain_cap)\n        priorities[valid_bins] += 5 * np.exp(-5 * (np.abs(remaining_after_add[valid_bins]) / np.max(bins_remain_cap)))\n\n        # Penalize bins that would have very small remaining capacity\n        priorities[valid_bins] -= 2 * np.exp(-5 * (bins_remain_cap[valid_bins]/item)) * (remaining_after_add[valid_bins] < 0.1*np.max(bins_remain_cap))\n\n        # Introduce randomness to diversify bin selection, favoring slightly less full bins\n        # This adds exploration to avoid getting stuck in local optima\n        relative_fill = bins_remain_cap[valid_bins] / np.max(bins_remain_cap)\n        randomness = np.random.rand(np.sum(valid_bins)) * (0.2 + 0.2*relative_fill) #Scale randomness by bin emptiness\n        priorities[valid_bins] += randomness\n    else:\n        # If no valid bins, prioritize bins with smallest required extra capacity\n        priorities = 1 / (np.abs(remaining_after_add) + 1e-9)\n        #Penalize bins that are almost empty\n        empty_bins = bins_remain_cap > 0.9*np.max(bins_remain_cap)\n        priorities[empty_bins] = priorities[empty_bins]*0.1\n\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This function implements a more sophisticated priority scheme:\n\n    1.  **Feasibility Check:**  Bins that cannot accommodate the item receive a priority of -np.inf.\n    2.  **Remaining Capacity Ratio:** Calculate the ratio of remaining capacity *after* adding the item to the original remaining capacity. Lower ratios (bins filling up more completely) are favored. This ratio is more insightful than just looking at the original capacity or the item size.\n    3.  **Fill-Up Bias:**  Add a bonus to bins that have a remaining capacity close to the item size.  This encourages using bins that are already mostly filled.\n    4.  **Normalization:** The final priorities are scaled to the range of [0,1] to ensure stable behaviour and comparable ranges, particularly important for future extensions.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Infeasible bins get -inf priority\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n\n    # Calculate remaining capacity AFTER adding the item.\n    feasible_mask = ~infeasible_mask\n    remaining_after = bins_remain_cap[feasible_mask] - item\n\n    # Calculate Ratio: (remaining after) / (remaining before).  Favor smaller ratios\n    capacity_ratios = remaining_after / bins_remain_cap[feasible_mask]\n    \n    # Smaller ratios become larger priorities\n    priorities[feasible_mask] = -capacity_ratios  # Negate to make lower ratios have higher priority\n\n\n    # Fill-Up Bonus:  Give bonus if bin size close to item size, scaled by original bin capacity.  This promotes using partially full bins\n    fill_diff = np.abs(bins_remain_cap[feasible_mask] - item)\n    fill_bonus = np.exp(-fill_diff) # Exponential decay means closer == much larger.\n    priorities[feasible_mask] += fill_bonus\n    \n\n    # Normalize the priorities to the range [0, 1] for stability\n    if np.any(np.isfinite(priorities)): #avoid division by zero if all are -inf\n        finite_priorities = priorities[np.isfinite(priorities)]\n        min_priority = np.min(finite_priorities)\n        max_priority = np.max(finite_priorities)\n        \n        if min_priority != max_priority: # Avoid divide by zero in edge case\n            priorities[np.isfinite(priorities)] = (priorities[np.isfinite(priorities)] - min_priority) / (max_priority - min_priority)\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that 1st has more fine-grained control over bin selection, using parameters like `inverse_diff_epsilon`, `nearly_full_bonus_weight`, and `nearly_full_exponent_scale` to tune bin priorities and 20th uses gaussian-like function. 2nd vs 19th are similar to 1st vs 20th in terms of fine-grained control. Comparing (5th) vs (20th), 5th contains randomness for exploration. Comparing (1st) vs (5th), 1st does not contain randomness, the penalty or boosting term is different, and also the parameter of 1st is more than 5th. Comparing (13th) vs (14th), they are very similar and both are gaussian-like function with randomness. Comparing (15th) vs (13th), 15th function normalizes the priorities to the range of [0, 1] and uses infeasible mask. Comparing (17th) vs (18th), 17th function normalizes the priorities to the range of [0, 1] and uses infeasible mask while 18th uses gaussian-like function. Comparing (second worst) vs (worst), they are similar. Overall: The better heuristics incorporate more sophisticated strategies like remaining capacity ratios, normalization, infeasibility handling, fine-grained control over bin selection, while also considering trade-offs like exploration with randomness. Simpler heuristics rely on Gaussian-like functions and less parameters.\n- \nOkay, I'm ready to help you design better heuristics! Let's redefine \"Current self-reflection\" to be more effective.\n\n*   **Keywords:** Adaptability, Learning, Performance Metrics, Constraint Awareness.\n*   **Advice:** Design heuristics that adapt based on problem instance characteristics and learn from past performance. Track key metrics to identify weaknesses and adjust strategies accordingly.\n*   **Avoid:** Generic \"one-size-fits-all\" approaches. Focus on context-specific adaptations.\n*   **Explanation:** Instead of passively incorporating features, design heuristics that actively analyze the problem and *dynamically* adjust their behavior for improved efficiency.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}