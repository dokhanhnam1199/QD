```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate remaining capacity after adding the item. Negative values indicate infeasibility.
    remaining_after_add = bins_remain_cap - item

    # Identify bins that can accommodate the item
    valid_bins = remaining_after_add >= 0

    if np.any(valid_bins):
        # Space difference between remaining capacity and item size
        space_diff = np.abs(remaining_after_add)

        # Base priority: inverse of space difference (smaller difference = higher priority)
        priorities[valid_bins] = 1.0 / (space_diff[valid_bins] + 1e-9)

        # Fill ratio: how full the bin would be if the item were added
        fill_ratios = (bins_remain_cap[valid_bins] - remaining_after_add[valid_bins]) / bins_remain_cap[valid_bins]

        # Promote bins that are sufficiently full after adding the item, but penalize almost-full bins.
        # The constants here are tunable hyperparameters.
        priorities[valid_bins] += 5 * np.exp(-5 * (remaining_after_add[valid_bins] / item)**2) # Nearly full bonus
        priorities[valid_bins] -= 2 * np.exp(10 * (remaining_after_add[valid_bins] / np.max(bins_remain_cap)))  # Almost full penalty

        # Dynamic adjustment based on item size.  If item is large, prefer bins with a larger capacity.
        if item > 0.5 * np.max(bins_remain_cap):  # If item is more than half the bin size:
            priorities[valid_bins] += 0.5 * (bins_remain_cap[valid_bins] / np.max(bins_remain_cap)) # Promote larger bins
        else:
            priorities[valid_bins] -= 0.1 * (bins_remain_cap[valid_bins] / np.max(bins_remain_cap)) # Slightly demote larger bins

    else:
        # If no bin can accommodate, prioritize bins that are "least violated."
        priorities = 1 / (1 + np.abs(remaining_after_add))
    # Global bin balancing: Penalize using bins when the average fill level is low.

    average_fill = (np.sum(np.max(bins_remain_cap) - bins_remain_cap)) / (len(bins_remain_cap) * np.max(bins_remain_cap))
    if average_fill < 0.3: #If bins are sparsely filled, then try to consolidate

        priorities[valid_bins] = priorities[valid_bins] + 0.2 * (fill_ratios) #Try to encourage filling up where there is some

    return priorities
```
