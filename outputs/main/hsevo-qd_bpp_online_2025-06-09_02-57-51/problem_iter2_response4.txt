```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Gaussian priority with capacity ratio and desperation."""
    priorities = np.zeros_like(bins_remain_cap)
    gaussian_width = np.mean(bins_remain_cap) / 5
    priorities = np.exp(-((bins_remain_cap - item)**2) / (2 * gaussian_width**2))

    remaining_after_add = bins_remain_cap - item
    valid_bins = remaining_after_add >= 0

    if np.any(valid_bins):
        fill_ratios = (bins_remain_cap[valid_bins] - remaining_after_add[valid_bins]) / bins_remain_cap[valid_bins]
        priorities[valid_bins] += 10 * fill_ratios  # fill-up bias

    if np.all(item > bins_remain_cap):
        priorities = (bins_remain_cap == np.min(bins_remain_cap)).astype(float)

    priorities += np.random.rand(len(bins_remain_cap)) * 0.001

    return priorities
```
