```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Gaussian priority with capacity ratio and normalization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_after_add = bins_remain_cap - item
    valid_bins = remaining_after_add >= 0
    
    if np.any(valid_bins):
        # Gaussian priority based on remaining space
        space_diff = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] = np.exp(-5 * (space_diff / item)**2) #Gaussian dist
        
        #Capacity Ratio to encourage better fill
        capacity_ratios = remaining_after_add[valid_bins] / bins_remain_cap[valid_bins]
        priorities[valid_bins] += -capacity_ratios # Smaller ratios are favored
    else:
        #Desperation if no bin fits
        priorities = 1 / (1 + np.abs(remaining_after_add))

    #Normalization
    if np.any(np.isfinite(priorities)):
        finite_priorities = priorities[np.isfinite(priorities)]
        min_priority = np.min(finite_priorities)
        max_priority = np.max(finite_priorities)

        if min_priority != max_priority:
            priorities[np.isfinite(priorities)] = (priorities[np.isfinite(priorities)] - min_priority) / (max_priority - min_priority)
    return priorities
```
