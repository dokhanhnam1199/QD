```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, inverse_diff_epsilon: float = 1e-9,
                nearly_full_bonus_weight: float = 5.0, nearly_full_exponent_scale: float = 5.0) -> np.ndarray:
    """Combines fine-grained control with exploration for bin selection."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_after_add = bins_remain_cap - item
    valid_bins = remaining_after_add >= 0

    if np.any(valid_bins):
        # Prioritize bins with capacity close to item size
        space_diff = np.abs(remaining_after_add)
        priorities[valid_bins] = 1.0 / (space_diff[valid_bins] + inverse_diff_epsilon)

        # Boost priority for bins that become nearly full after adding the item
        priorities[valid_bins] += nearly_full_bonus_weight * np.exp(-nearly_full_exponent_scale * (np.abs(remaining_after_add[valid_bins]) / np.max(bins_remain_cap)))

        # Introduce randomness to diversify bin selection, favoring slightly less full bins
        relative_fill = bins_remain_cap[valid_bins] / np.max(bins_remain_cap)
        randomness = np.random.rand(np.sum(valid_bins)) * (0.2 + 0.2 * relative_fill)  # Scale randomness by bin emptiness
        priorities[valid_bins] += randomness

    else:
        # If no valid bins, prioritize bins with smallest required extra capacity
        priorities = 1 / (np.abs(remaining_after_add) + inverse_diff_epsilon)
    return priorities
```
