```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, inverse_diff_epsilon: float = 1e-6,
                nearly_full_bonus_weight: float = 18.0, nearly_full_exponent_scale: float = 20.0,
                valid_bins_priority: float = 0.7, overall_fullness_divisor: float = 0.7, valid_bins_sum_threshold: float = -0.7) -> np.ndarray:
    """Combines bin utilization, item size, fragmentation penalties, and fallback strategy."""
    priorities = np.zeros_like(bins_remain_cap)
    remaining_after_add = bins_remain_cap - item
    valid_bins = remaining_after_add >= 0

    if np.any(valid_bins):
        space_diff = np.abs(remaining_after_add)
        priorities[valid_bins] = valid_bins_priority / (space_diff[valid_bins] + inverse_diff_epsilon)
        fill_ratios = (bins_remain_cap[valid_bins] - remaining_after_add[valid_bins]) / bins_remain_cap[valid_bins]
        priorities[valid_bins] = priorities[valid_bins] + nearly_full_bonus_weight*np.exp(-nearly_full_exponent_scale*(remaining_after_add[valid_bins]/item)**2)

    overall_fullness = (np.sum(bins_remain_cap) - np.sum(bins_remain_cap[remaining_after_add>=0]) + np.sum(item*np.ones_like(bins_remain_cap)[remaining_after_add>=0])) / np.sum(np.ones_like(bins_remain_cap) * np.max(bins_remain_cap))

    if np.sum(valid_bins) == valid_bins_sum_threshold:
      priorities = 1/(overall_fullness_divisor+np.abs(remaining_after_add))
    
    if np.sum(valid_bins) == 0:
        priorities = 1/(1+np.abs(remaining_after_add))


    return priorities
```
