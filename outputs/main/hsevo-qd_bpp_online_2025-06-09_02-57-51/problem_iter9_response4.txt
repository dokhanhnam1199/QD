```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version focuses on adaptive fragmentation control and bin diversity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_after_add = bins_remain_cap - item
    valid_bins = remaining_after_add >= 0

    if np.any(valid_bins):
        # Base priority: Remaining Capacity Ratio
        capacity_ratio = bins_remain_cap[valid_bins] / np.max(bins_remain_cap)
        priorities[valid_bins] = capacity_ratio

        # Bin Utilization Score (Higher is better)
        bin_utilization = (np.max(bins_remain_cap) - bins_remain_cap[valid_bins]) / np.max(bins_remain_cap)
        priorities[valid_bins] += 1.5*bin_utilization

        # Item Size Impact: Larger items influence priorities more
        item_ratio = item / np.max(bins_remain_cap)
        priorities[valid_bins] += (1 - item_ratio)


        # Adaptive Fragmentation Penalty: Adjust penalty based on remaining space.
        space_diff = bins_remain_cap[valid_bins] - item
        avg_space_diff = np.mean(space_diff)
        fragment_threshold = 0.2 * np.max(bins_remain_cap) #Dynamic threshold

        fragmentation_penalty = np.where(space_diff < fragment_threshold,
                                         np.exp(-5 * (space_diff / fragment_threshold)**2),
                                         0)  # Only penalize if space_diff less than threshold
        priorities[valid_bins] -= fragmentation_penalty
    else:
        # Fallback: Prioritize bins minimizing absolute waste, scaled by item size.
        priorities = 1 / (np.abs(remaining_after_add) / item + 1e-9)

    return priorities
```
