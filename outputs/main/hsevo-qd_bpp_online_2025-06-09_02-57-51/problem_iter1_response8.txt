```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate waste if item is placed in each bin.
    waste = bins_remain_cap - item

    # Give high priority to bins where the item fits.
    valid_bins = waste >= 0
    priorities[valid_bins] = 1

    # Consider how well the item fits into available bins. Aim for less waste.
    priorities[valid_bins] += (bins_remain_cap[valid_bins] - item) / np.max(bins_remain_cap)

    # Introduce a small bias toward using fuller bins by adding a small proportion
    # of the inverse of the available capacity. This prioritizes bins closer to being full.
    priorities[valid_bins] += (1.0 / bins_remain_cap[valid_bins]) * 0.01

    return priorities
```
