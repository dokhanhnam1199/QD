```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid priority: Combines capacity ratio, fill-up bonus, desperation handling."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    feasible_mask = ~infeasible_mask
    remaining_after = bins_remain_cap[feasible_mask] - item
    if np.any(feasible_mask):
        capacity_ratios = remaining_after / bins_remain_cap[feasible_mask]
        priorities[feasible_mask] = -capacity_ratios

        fill_diff = np.abs(bins_remain_cap[feasible_mask] - item)
        fill_bonus = np.exp(-fill_diff)
        priorities[feasible_mask] += fill_bonus

        # Desperation
        min_cap = np.min(bins_remain_cap)
        priorities[infeasible_mask] = np.exp(-np.abs(bins_remain_cap[infeasible_mask]-item)/min_cap) if min_cap >0 else 1/(1+np.abs(bins_remain_cap[infeasible_mask]-item))
            

    if np.any(np.isfinite(priorities)):
        finite_priorities = priorities[np.isfinite(priorities)]
        min_priority = np.min(finite_priorities)
        max_priority = np.max(finite_priorities)
        if min_priority != max_priority:
            priorities[np.isfinite(priorities)] = (priorities[np.isfinite(priorities)] - min_priority) / (max_priority - min_priority)
    return priorities
```
