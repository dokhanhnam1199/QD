```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Encourages "almost full" bins and discourages near misses.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Reward bins that fit the item. Larger remain cap will be penalized, so item is packed in the most filled bin.
            #Add quadratic bonus term to give more priority to bins with little spaces left after packing the item
            remain_after_packing = cap - item
            priorities[i] =  (1.0 / (remain_after_packing + 1e-9))  + (item / cap) # Avoid division by zero


            #Prioritize bins closest to being full, but not overflowing
            #priority_score = np.exp(-1 * (cap - item))
            #if(cap - item < 0.05): #near miss. We do not encourage it!

        else:
            priorities[i] = -1e9 # Make these bins very undesirable

    return priorities
```
