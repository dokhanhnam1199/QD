```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Higher priority means the item is more desirable to be added to that bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Give high priority to bins where the item fits well (but not perfectly)
    fit_scores = np.where(bins_remain_cap >= item, (bins_remain_cap - item) / bins_remain_cap, -1)
    fit_scores = np.clip(fit_scores, -1, 1) # Ensure values are within a reasonable range
    priorities = 1 - fit_scores

    # Slightly penalize bins that are almost full after adding the item
    almost_full_penalty = np.where(bins_remain_cap >= item, np.exp(-10*(bins_remain_cap - item)), 0)
    priorities -= almost_full_penalty

    # Avoid bins where the item does not fit
    priorities[bins_remain_cap < item] = -np.inf

    return priorities
```
