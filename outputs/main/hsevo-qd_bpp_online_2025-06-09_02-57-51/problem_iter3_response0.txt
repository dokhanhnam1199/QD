```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_after_add = bins_remain_cap - item
    valid_bins = remaining_after_add >= 0

    if np.any(valid_bins):
        # Base priority: inverse of wasted space, but avoid division by zero.
        space_diff = np.abs(remaining_after_add)
        priorities[valid_bins] = 1.0 / (space_diff[valid_bins] + 1e-9)

        # Promote fuller bins (higher fill ratio) - avoid creating tiny fragments.
        fill_ratios = (bins_remain_cap[valid_bins] - remaining_after_add[valid_bins]) / bins_remain_cap[valid_bins]
        priorities[valid_bins] += 5 * fill_ratios  # Increase the weight

        # Penalize bins with very small remaining capacity relative to item size.
        # This encourages using larger gaps, if available, to prevent future small items from being difficult to place.
        small_gap_penalty = np.exp(-10 * (remaining_after_add[valid_bins] / item)**2)
        priorities[valid_bins] -= 2 * small_gap_penalty #Slightly decrease to avoid extremes

        #Add randomness to priority scores to explore solution space and avoid local optima
        priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.1 # small random noise

    else:
        #If no valid bins available, add a priority based on how close they are.
        priorities = 1 / (1 + np.abs(remaining_after_add))
        #If all bins are invalidated, this will now select the bin that is closest to being able to accept the item.

    return priorities
```
