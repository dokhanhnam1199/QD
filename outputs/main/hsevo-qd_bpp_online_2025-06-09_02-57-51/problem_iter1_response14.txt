```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    A more sophisticated approach considering the fit and potential waste.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate wasted space
            waste = cap - item

            # Prioritize bins that minimize waste (more efficient use)
            # We give a high score if the fit is near perfect. Small waste is preferable.
            # Negative waste indicates item too large. Avoid those bins!
            if waste == 0:
                priorities[i] = 1000 # Perfect fit!
            else:
                priorities[i] = 1 / waste if waste > 0 else -1000  # Prefer small waste, penalize large waste/infeasibility. Use reciprocal to prioritize small wastes.

            #Also add a bonus if remaining capacity is close to a magic number (e.g. 0.5, 0.75)
            #Adding more bonuses will allow for experimentation of various heuristics
            priorities[i] += max(0, 1 - abs(waste - 0.5)) * 10

            #Experiment with also rewarding capacities closer to certain fractions
            #priorities[i] += max(0, 1 - abs(waste - (bins_remain_cap[i]/2))) * 5 #prioritize bins that result in exactly half capacity
                
        else:
            priorities[i] = -float('inf') # Item doesn't fit, impossible option! Very low priority
    return priorities
```
