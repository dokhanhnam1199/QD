```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines bin utilization, item size, and adaptive fill-up bonus."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    remaining_after_add = bins_remain_cap - item

    if np.any(valid_bins):
        # Base priority: inverse of wasted space.
        space_diff = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] = 1.0 / (space_diff + 1e-9)

        # Bin Utilization Awareness
        bin_utilization = (np.max(bins_remain_cap) - bins_remain_cap[valid_bins]) / np.max(bins_remain_cap)
        priorities[valid_bins] += 2*bin_utilization

        # Item-Size Consideration: Adjust priority based on item size.
        item_ratio = item / np.max(bins_remain_cap) #Ratio of item size with respect to max bin cap
        priorities[valid_bins] += (1-item_ratio)  #Large item less priority

        # Adaptive Fill-Up Bonus based on item size.
        fill_diff = np.abs(bins_remain_cap[valid_bins] - item)
        relative_item_size = item / np.max(bins_remain_cap) #Item size relative to maximum capacity
        fill_bonus = np.exp(-fill_diff / (relative_item_size + 0.1)) #Scale the effect based on relative item size
        priorities[valid_bins] += fill_bonus
    else:
        # Fallback Strategy
        priorities = 1 / (np.abs(remaining_after_add) + 1e-9)

    return priorities
```
