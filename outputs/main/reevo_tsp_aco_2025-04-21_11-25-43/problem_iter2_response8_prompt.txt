{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP that combines distance, node degree, and randomness.\n    It also sparsifies the matrix by setting low-probability edges to zero.\n\n    Args:\n        distance_matrix (np.ndarray): A numpy array representing the distance matrix.\n\n    Returns:\n        np.ndarray: A numpy array of the same shape as distance_matrix,\n                      representing the probability of including each edge in a solution.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # 1. Inverse distance: Shorter distances are preferred\n    inverse_distance = 1 / (distance_matrix + 1e-6)  # Add a small constant to avoid division by zero\n\n    # 2. Node degree: Encourage connections to nodes with fewer connections.\n    #    Initialized to ones, and increased when an edge is assigned to a node.\n    node_degrees = np.ones(n)\n\n    # Iterate through the distance matrix\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Combine inverse distance and node degrees\n                heuristic_matrix[i, j] = inverse_distance[i, j] / (node_degrees[i] * node_degrees[j])\n\n    # 3. Add randomness: Introduce some stochasticity to explore different solutions\n    random_matrix = np.random.rand(n, n) * 0.1  # Adjust the scaling factor for randomness\n\n    heuristic_matrix = heuristic_matrix + random_matrix\n\n    # Normalize the heuristic matrix to get probabilities.\n    heuristic_matrix = heuristic_matrix / np.sum(heuristic_matrix)\n\n\n    # 4. Sparsify the matrix: Set low-probability edges to zero to focus on more promising edges.\n    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.2)  # Remove bottom 20%\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    # Re-normalize the matrix\n    if np.sum(heuristic_matrix) > 0: #check for zero sum.\n       heuristic_matrix = heuristic_matrix / np.sum(heuristic_matrix)\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristics function for the Traveling Salesman Problem (TSP).\n\n    This version combines several factors to estimate the desirability of each edge:\n    - Inverse distance: Shorter edges are generally preferred.\n    - Node degree:  Avoids edges that would lead to high-degree nodes early on.  (Not directly implemented due to lack of intermediate state)\n    - Sparsification: Sets the least promising edges to zero to focus the search.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix)\n\n    # Inverse distance\n    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small value to avoid division by zero\n\n    # Compute row and column means of distances (proxy for node proximity to others)\n    row_means = np.mean(distance_matrix, axis=1, keepdims=True)\n    col_means = np.mean(distance_matrix, axis=0, keepdims=True)\n\n\n    # Combine factors\n    heuristics = inverse_distance / (row_means + col_means.T + 1e-9)\n\n\n    # Sparsification: Keep only top k edges for each node\n\n    k = max(1, int(np.sqrt(n))) # adaptive k depending on the size of n, no less than 1\n    for i in range(n):\n        row = heuristics[i, :]\n        indices = np.argpartition(row, -k)[-k:] #find indices of k largest\n        mask = np.ones(n, dtype=bool)\n        mask[indices] = False\n        heuristics[i, mask] = 0\n    \n    return heuristics\n\n[Reflection]\nSparsification via adaptive k, and using row/column means for edge prioritization improve heuristic quality.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}