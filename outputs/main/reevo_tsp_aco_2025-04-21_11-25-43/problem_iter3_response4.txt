```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP based on normalized distance, adaptive degree centrality,
    and dynamic sparsification with randomness.
    """
    n = distance_matrix.shape[0]

    # Normalize distances to be between 0 and 1
    max_dist = np.max(distance_matrix)
    min_dist = np.min(distance_matrix)
    normalized_distance_matrix = (distance_matrix - min_dist) / (max_dist - min_dist + 1e-9)

    # Initialize heuristic matrix with inverse of normalized distances
    heuristic_matrix = 1 / (normalized_distance_matrix + 1e-9)

    # Adaptive degree centrality: favoring nodes with closer neighbors
    degree_centrality = np.sum(1 / (normalized_distance_matrix + 1e-9), axis=1)
    avg_degree = np.mean(degree_centrality)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] *= ((degree_centrality[i] + degree_centrality[j]) / (2 * avg_degree)) # Relative degree centrality
                heuristic_matrix[i, j] = np.clip(heuristic_matrix[i, j], 0, 2) #Clip it to avoid overflow

    # Dynamic sparsification: remove edges that are relatively long, with some randomness
    avg_distance = np.mean(normalized_distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                # Sparsification probability increases with distance
                sparsification_prob = normalized_distance_matrix[i, j] / (2 * avg_distance + 1e-9)
                if np.random.rand() < sparsification_prob:
                    heuristic_matrix[i, j] = 0

    # Further adjustment: amplifying shorter distances and demphasizing longer ones
    heuristic_matrix = heuristic_matrix / (normalized_distance_matrix**1.5 + 1e-9)

    # Normalize the heuristic matrix to range 0 to 1
    max_val = np.max(heuristic_matrix)
    min_val = np.min(heuristic_matrix)

    if max_val > min_val:
        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    else:
        heuristic_matrix = np.ones_like(heuristic_matrix) * 0.5

    return heuristic_matrix
```
