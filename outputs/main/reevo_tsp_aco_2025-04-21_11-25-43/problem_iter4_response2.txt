```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics function for the Traveling Salesman Problem (TSP).

    This version combines several factors to estimate the desirability of each edge:
    - Inverse distance: Shorter edges are generally preferred.
    - Node degree: Uses row and column means to discourage edges to already "central" nodes.
    - Adaptive Sparsification: Keeps only the top k edges for each node, where k scales with the problem size.
    - Probability Normalization: Normalizes heuristic values to create edge selection probabilities.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Inverse distance
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small value to avoid division by zero

    # Compute row and column means of distances (proxy for node proximity to others)
    row_means = np.mean(distance_matrix, axis=1, keepdims=True)
    col_means = np.mean(distance_matrix, axis=0, keepdims=True)

    # Combine factors: inverse distance, node degree proxy (using row/col means)
    heuristics = inverse_distance / (row_means + col_means.T + 1e-9)

    # Adaptive Sparsification: Keep only top k edges for each node
    k = max(1, int(np.sqrt(n)))  # adaptive k depending on the size of n, no less than 1
    for i in range(n):
        row = heuristics[i, :]
        indices = np.argpartition(row, -k)[-k:]  # find indices of k largest
        mask = np.ones(n, dtype=bool)
        mask[indices] = False
        heuristics[i, mask] = 0

    # Probability Normalization: Normalize rows to create probabilities
    row_sums = heuristics.sum(axis=1, keepdims=True)
    heuristics = np.nan_to_num(heuristics / row_sums)  # Handle possible division by zero

    return heuristics
```
