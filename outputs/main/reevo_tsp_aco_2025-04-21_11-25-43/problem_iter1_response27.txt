```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP based on distance, node degree, and random sampling.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix between cities.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    representing the heuristic values for each edge.  Higher values
                    indicate more promising edges.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance: Shorter distances are generally better
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # 2. Node Degree Consideration:  Penalize edges connected to nodes with too many close neighbors.
    #    This discourages early closure of cycles.

    # Calculate "closeness" for each node to all others
    closeness = 1 / (distance_matrix + 1e-9)
    node_closeness = np.sum(closeness, axis=1)

    for i in range(n):
        for j in range(n):
            if i != j:
                 heuristic_matrix[i, j] /= (node_closeness[i] * node_closeness[j])**0.2 # Decreasing influence to allow edge consideration

    # 3. Sparsification: Remove edges that are clearly unpromising. Keep top K neighbors for each node.
    k_neighbors = int(np.sqrt(n))  # Number of neighbors to keep per node
    for i in range(n):
        row = heuristic_matrix[i, :].copy() # Work on a copy to avoid modifying during iteration
        indices = np.argsort(row)[::-1]  # Indices sorted by heuristic value in descending order
        keep_indices = indices[:k_neighbors]
        
        #Zero out edges to this node except those in the `keep_indices`
        zero_out_indices = np.setdiff1d(np.arange(n), keep_indices)
        heuristic_matrix[i, zero_out_indices] = 0
        

    #4. Add small randomness: To introduce diversification, add some noise.
    random_noise = np.random.rand(n, n) * 0.01
    heuristic_matrix += random_noise
    heuristic_matrix[np.diag_indices_from(heuristic_matrix)] = 0 #Ensure no self loops

    return heuristic_matrix
```
