```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP that combines distance, node degree, and randomness.
    It also sparsifies the matrix by setting low-probability edges to zero.

    Args:
        distance_matrix (np.ndarray): A numpy array representing the distance matrix.

    Returns:
        np.ndarray: A numpy array of the same shape as distance_matrix,
                      representing the probability of including each edge in a solution.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance: Shorter distances are preferred
    inverse_distance = 1 / (distance_matrix + 1e-6)  # Add a small constant to avoid division by zero

    # 2. Node degree: Encourage connections to nodes with fewer connections.
    #    Initialized to ones, and increased when an edge is assigned to a node.
    node_degrees = np.ones(n)

    # Iterate through the distance matrix
    for i in range(n):
        for j in range(n):
            if i != j:
                # Combine inverse distance and node degrees
                heuristic_matrix[i, j] = inverse_distance[i, j] / (node_degrees[i] * node_degrees[j])

    # 3. Add randomness: Introduce some stochasticity to explore different solutions
    random_matrix = np.random.rand(n, n) * 0.1  # Adjust the scaling factor for randomness

    heuristic_matrix = heuristic_matrix + random_matrix

    # Normalize the heuristic matrix to get probabilities.
    heuristic_matrix = heuristic_matrix / np.sum(heuristic_matrix)


    # 4. Sparsify the matrix: Set low-probability edges to zero to focus on more promising edges.
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.2)  # Remove bottom 20%
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Re-normalize the matrix
    if np.sum(heuristic_matrix) > 0: #check for zero sum.
       heuristic_matrix = heuristic_matrix / np.sum(heuristic_matrix)

    return heuristic_matrix
```
