```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP based on stochastic solution sampling principles.
    Combines several factors to assess edge desirability.

    Args:
        distance_matrix: A numpy array representing the distance matrix between nodes.

    Returns:
        A numpy array of the same shape as distance_matrix, indicating the
        promise of each edge. Higher values indicate more promising edges.
    """

    n = distance_matrix.shape[0]

    # 1. Inverse Distance: Shorter distances are generally better.
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # 2. Node Degree Centrality: Encourages connection to nodes with fewer connections.
    #    This helps avoid clustering and promotes visiting all nodes.

    degree_centrality = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                degree_i = np.sum(inverse_distance[i, :] > 0) -1 #exclude i
                degree_j = np.sum(inverse_distance[j, :] > 0) -1 # exclude j
                degree_centrality[i, j] = 1.0 / (degree_i * degree_j + 1e-9)  # Inverse to favor lower degrees

    # 3. Sparsification: Zero out edges that are likely not useful
    #    - Remove very long edges based on a percentile threshold.

    threshold = np.percentile(distance_matrix[distance_matrix > 0], 75) # Only consider positive distances to filter the dummy large values

    sparse_matrix = distance_matrix.copy()
    sparse_matrix[distance_matrix > threshold] = 0


    # 4. Combine the factors:
    heuristic_matrix = inverse_distance * (1 + degree_centrality) * (sparse_matrix > 0)

    # Normalize for easier interpretation and potential usage in sampling.
    heuristic_matrix = (heuristic_matrix - np.min(heuristic_matrix)) / (np.max(heuristic_matrix) - np.min(heuristic_matrix) + 1e-9)

    return heuristic_matrix
```
