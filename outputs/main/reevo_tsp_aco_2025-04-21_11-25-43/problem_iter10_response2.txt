```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP prioritizing inverse distance, adaptive sparsification,
    mild randomness, and refined normalization/scaling.
    """
    n = distance_matrix.shape[0]

    # Initialize heuristic matrix with inverse distance
    heuristic_matrix = 1 / (distance_matrix + 1e-9)

    # Adaptive sparsification with dynamic threshold
    for i in range(n):
        distances = distance_matrix[i, :]
        nearest_neighbors_indices = np.argsort(distances)[1:min(4, n)]  # Consider fewer nearest neighbors
        avg_neighbor_distance = np.mean(distances[nearest_neighbors_indices]) if len(nearest_neighbors_indices) > 0 else np.mean(distances)
        dynamic_threshold = 1.2 * avg_neighbor_distance  # Adjust threshold

        for j in range(n):
            if i != j and distance_matrix[i, j] > dynamic_threshold:
                heuristic_matrix[i, j] *= 0.05  # Stronger penalty for non-neighbors

    # Incorporate randomness
    randomness_factor = 0.005  # Even smaller randomness factor
    random_matrix = np.random.rand(n, n) * randomness_factor
    heuristic_matrix += random_matrix

    # Refined normalization and scaling
    heuristic_matrix = heuristic_matrix / (distance_matrix + 1e-9)**0.2  # Further adjustment of exponent

    max_val = np.max(heuristic_matrix)
    min_val = np.min(heuristic_matrix)

    if max_val > min_val:
        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)  # Proper normalization
    else:
        heuristic_matrix = np.ones_like(heuristic_matrix) * 0.5  # Handle the case where all values are the same

    return heuristic_matrix
```
