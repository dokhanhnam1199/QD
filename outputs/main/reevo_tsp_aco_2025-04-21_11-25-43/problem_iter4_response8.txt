```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP based on distance, degree centrality, adaptive sparsification, and randomness.
    """
    n = distance_matrix.shape[0]

    # Initialize the heuristic matrix with the inverse of the distance
    heuristic_matrix = 1 / (distance_matrix + 1e-9)

    # Degree centrality heuristic
    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=1)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] *= (degree_centrality[i] + degree_centrality[j]) / 2

    # Adaptive Sparsification: dynamically adjust the threshold based on local distances
    for i in range(n):
        # Calculate the average distance for each node
        avg_distance_i = np.mean(distance_matrix[i, :])
        for j in range(n):
            if i != j:
                # Sparsification threshold is based on both global and local average distances
                sparsification_threshold = 1.5 * (avg_distance_i + np.mean(distance_matrix)) / 2 # Adjusted threshold
                if distance_matrix[i, j] > sparsification_threshold:
                    heuristic_matrix[i, j] = 0

    # Distance emphasis
    heuristic_matrix = heuristic_matrix / (distance_matrix**1.5 + 1e-9)

    # Add some randomness to avoid getting stuck in local optima
    randomness_factor = 0.05  # Adjust the level of randomness
    heuristic_matrix += randomness_factor * np.random.rand(n, n)

    # Symmetry: ensure the matrix is symmetric
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2

    # Normalize the heuristic matrix
    max_val = np.max(heuristic_matrix)
    min_val = np.min(heuristic_matrix)

    if max_val > min_val:
        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    else:
        heuristic_matrix = np.ones_like(heuristic_matrix) * 0.5

    return heuristic_matrix
```
