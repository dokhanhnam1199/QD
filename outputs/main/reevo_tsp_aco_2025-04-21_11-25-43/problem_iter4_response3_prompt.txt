{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for TSP based on normalized distance, adaptive degree centrality,\n    and dynamic sparsification with randomness.\n    \"\"\"\n    n = distance_matrix.shape[0]\n\n    # Normalize distances to be between 0 and 1\n    max_dist = np.max(distance_matrix)\n    min_dist = np.min(distance_matrix)\n    normalized_distance_matrix = (distance_matrix - min_dist) / (max_dist - min_dist + 1e-9)\n\n    # Initialize heuristic matrix with inverse of normalized distances\n    heuristic_matrix = 1 / (normalized_distance_matrix + 1e-9)\n\n    # Adaptive degree centrality: favoring nodes with closer neighbors\n    degree_centrality = np.sum(1 / (normalized_distance_matrix + 1e-9), axis=1)\n    avg_degree = np.mean(degree_centrality)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristic_matrix[i, j] *= ((degree_centrality[i] + degree_centrality[j]) / (2 * avg_degree)) # Relative degree centrality\n                heuristic_matrix[i, j] = np.clip(heuristic_matrix[i, j], 0, 2) #Clip it to avoid overflow\n\n    # Dynamic sparsification: remove edges that are relatively long, with some randomness\n    avg_distance = np.mean(normalized_distance_matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Sparsification probability increases with distance\n                sparsification_prob = normalized_distance_matrix[i, j] / (2 * avg_distance + 1e-9)\n                if np.random.rand() < sparsification_prob:\n                    heuristic_matrix[i, j] = 0\n\n    # Further adjustment: amplifying shorter distances and demphasizing longer ones\n    heuristic_matrix = heuristic_matrix / (normalized_distance_matrix**1.5 + 1e-9)\n\n    # Normalize the heuristic matrix to range 0 to 1\n    max_val = np.max(heuristic_matrix)\n    min_val = np.min(heuristic_matrix)\n\n    if max_val > min_val:\n        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)\n    else:\n        heuristic_matrix = np.ones_like(heuristic_matrix) * 0.5\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristics function for the Traveling Salesman Problem (TSP).\n\n    This version combines k-nearest neighbors, penalizes long edges, and ensures connectivity\n    without relying on hard thresholds or local percentiles.\n\n    Args:\n        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix\n                                      between cities. distance_matrix[i, j] is the distance\n                                      between city i and city j.\n\n    Returns:\n        np.ndarray: A 2D numpy array of the same shape as distance_matrix, where each\n                    element indicates how promising it is to include that edge in a solution.\n                    Higher values indicate more promising edges.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix, dtype=float)\n\n    # 1. Inverse Distance: Shorter distances are generally more promising.\n    inverse_distance = 1 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero\n\n    # 2. Nearest Neighbor Heuristic:\n    nearest_neighbors = np.argsort(distance_matrix, axis=1)\n\n    # 3. Combination of Inverse Distance and Nearest Neighbor Information\n    k_nearest = min(5, n - 1)  # Consider top k nearest neighbors, ensuring k < n\n    for i in range(n):\n        for j_index in range(1, k_nearest + 1):  # Start from 1 to exclude the node itself\n            j = nearest_neighbors[i, j_index]\n            heuristics[i, j] = inverse_distance[i, j]\n\n    # 4. Penalize long edges\n    max_distance = np.max(distance_matrix)\n    penalty_factor = 0.1  # Adjust the penalty factor as needed\n    heuristics = heuristics - (distance_matrix / max_distance) * penalty_factor * np.max(heuristics)\n    heuristics[heuristics < 0] = 0\n\n    # 5. Ensure connectivity by adding a small probability to all edges\n    # This prevents any node from being completely isolated, ensuring a feasible solution.\n    connectivity_bonus = np.mean(inverse_distance) / 1000 # Adjust the bonus factor\n    heuristics = heuristics + connectivity_bonus\n\n    return heuristics\n\n[Reflection]\nK-nearest neighbors, connectivity bonuses, and penalizing long edges improve TSP heuristic quality.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}