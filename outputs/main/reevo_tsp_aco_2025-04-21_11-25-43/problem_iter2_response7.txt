```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) using a combination of factors.

    This function calculates a heuristic matrix where each element indicates how promising
    it is to include the corresponding edge in a TSP solution. It combines inverse distance,
    nearest neighbor information, and a random component.  The heuristic matrix is then
    sparsified by setting less promising values to zero.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances between cities.

    Returns:
        np.ndarray: A heuristic matrix of the same shape as the distance matrix,
                      indicating the desirability of including each edge in a TSP solution.
                      Higher values indicate more promising edges.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance: shorter distances are generally better
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # 2. Nearest neighbor heuristic: prioritize connecting to nearest neighbors
    for i in range(n):
        # Find the indices of the k-nearest neighbors for node i, excluding itself
        nearest_neighbors = np.argsort(distance_matrix[i, :])[1:4] #Top 3 nearest neighbors

        # Boost the heuristic value for edges connecting to nearest neighbors
        for neighbor in nearest_neighbors:
            heuristic_matrix[i, neighbor] *= 2.0 # boost, but only if the neighbor is not itself
            heuristic_matrix[neighbor, i] *= 2.0


    # 3. Random perturbation: Introduce some randomness to avoid getting stuck in local optima
    random_matrix = np.random.rand(n, n) * 0.1 # small random numbers
    heuristic_matrix += random_matrix

    # 4. Sparsification: Remove less promising edges to reduce search space
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.2)  # Keep top 80% edges
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Ensure that diagonal elements are zero, as they represent self-loops
    np.fill_diagonal(heuristic_matrix, 0)

    return heuristic_matrix
```
