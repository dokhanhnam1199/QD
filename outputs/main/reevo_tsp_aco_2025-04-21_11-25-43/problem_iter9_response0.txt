```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP based on distance, degree centrality, sparsification,
    and geometric mean centrality, with adaptive percentile thresholding.
    """
    n = distance_matrix.shape[0]

    # Initialize the heuristic matrix with the inverse of the squared distance
    heuristic_matrix = 1 / (distance_matrix**2 + 1e-9)

    # Degree centrality heuristic (sum of inverse distances)
    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=1)

    # Geometric mean centrality
    geo_mean_centrality = np.power(np.prod(1 / (distance_matrix + 1e-9), axis=1), 1/n)


    # Combine centrality measures
    combined_centrality = (degree_centrality + geo_mean_centrality) / 2


    # Incorporate centrality into the heuristic
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] *= (combined_centrality[i] * combined_centrality[j])

    # Adaptive sparsification using a percentile threshold
    threshold_percentile = 75
    threshold = np.percentile(distance_matrix[distance_matrix > 0], threshold_percentile)
    heuristic_matrix[distance_matrix > threshold] = 0

    # Local normalization: Normalize rows to sum to 1 (if possible)
    row_sums = np.sum(heuristic_matrix, axis=1, keepdims=True)
    heuristic_matrix = np.where(row_sums > 0, heuristic_matrix / row_sums, heuristic_matrix)

    return heuristic_matrix
```
