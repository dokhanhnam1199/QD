```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP based on distance, degree centrality, and adaptive sparsification.
    """
    n = distance_matrix.shape[0]

    # Initialize the heuristic matrix with inverse square distance
    heuristic_matrix = 1 / (distance_matrix**2 + 1e-9)

    # Degree centrality heuristic with careful weighting
    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=1)
    degree_centrality_normalized = degree_centrality / np.max(degree_centrality)  # Normalize for stability

    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] *= (0.7 * degree_centrality_normalized[i] + 0.3 * degree_centrality_normalized[j])

    # Adaptive Sparsification based on row/column statistics
    for i in range(n):
        row_values = distance_matrix[i, :]
        row_mean = np.mean(row_values[row_values != 0])  # Avoid considering self-loops (distance 0)
        col_values = distance_matrix[:, i]
        col_mean = np.mean(col_values[col_values != 0])  # Avoid considering self-loops (distance 0)

        sparsification_threshold = 0.75 * (row_mean + col_mean) / 2  # Adaptive threshold

        for j in range(n):
            if distance_matrix[i, j] > sparsification_threshold:
                heuristic_matrix[i, j] = 0

    # Local normalization to enhance contrast within rows/columns
    for i in range(n):
        row_max = np.max(heuristic_matrix[i, :])
        row_min = np.min(heuristic_matrix[i, :])
        if row_max > row_min:
            heuristic_matrix[i, :] = (heuristic_matrix[i, :] - row_min) / (row_max - row_min)
        else:
            heuristic_matrix[i, :] = np.ones_like(heuristic_matrix[i, :]) * 0.5

    # Global normalization to bring all values between 0 and 1
    max_val = np.max(heuristic_matrix)
    min_val = np.min(heuristic_matrix)
    if max_val > min_val:
        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    else:
        heuristic_matrix = np.ones_like(heuristic_matrix) * 0.5

    return heuristic_matrix
```
