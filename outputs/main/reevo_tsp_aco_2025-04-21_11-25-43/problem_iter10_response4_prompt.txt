{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for TSP based on distance, degree centrality, sparsification,\n    and geometric mean centrality, with adaptive percentile thresholding.\n    \"\"\"\n    n = distance_matrix.shape[0]\n\n    # Initialize the heuristic matrix with the inverse of the squared distance\n    heuristic_matrix = 1 / (distance_matrix**2 + 1e-9)\n\n    # Degree centrality heuristic (sum of inverse distances)\n    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=1)\n\n    # Geometric mean centrality\n    geo_mean_centrality = np.power(np.prod(1 / (distance_matrix + 1e-9), axis=1), 1/n)\n\n\n    # Combine centrality measures\n    combined_centrality = (degree_centrality + geo_mean_centrality) / 2\n\n\n    # Incorporate centrality into the heuristic\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristic_matrix[i, j] *= (combined_centrality[i] * combined_centrality[j])\n\n    # Adaptive sparsification using a percentile threshold\n    threshold_percentile = 75\n    threshold = np.percentile(distance_matrix[distance_matrix > 0], threshold_percentile)\n    heuristic_matrix[distance_matrix > threshold] = 0\n\n    # Local normalization: Normalize rows to sum to 1 (if possible)\n    row_sums = np.sum(heuristic_matrix, axis=1, keepdims=True)\n    heuristic_matrix = np.where(row_sums > 0, heuristic_matrix / row_sums, heuristic_matrix)\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for TSP based on distance, degree centrality, and adaptive sparsification with percentile thresholds.\n    \"\"\"\n    n = distance_matrix.shape[0]\n\n    # Distance-squared scaling\n    heuristic_matrix = 1 / (distance_matrix**2 + 1e-9)\n\n    # Degree centrality heuristic (geometric mean)\n    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=1)\n    geo_mean_centrality = np.power(np.prod(1 / (distance_matrix + 1e-9), axis=1), 1/n)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristic_matrix[i, j] *= np.sqrt(degree_centrality[i] * degree_centrality[j])\n\n    # Adaptive sparsification with percentile threshold\n    threshold_percentile = 75\n    threshold = np.percentile(distance_matrix[distance_matrix > 0], threshold_percentile)  # Avoid 0 distances in percentile calculation\n    \n    for i in range(n):\n        for j in range(n):\n            if distance_matrix[i, j] > threshold:\n                heuristic_matrix[i, j] = 0\n\n    # Local normalization\n    for i in range(n):\n        row = heuristic_matrix[i, :]\n        max_val = np.max(row)\n        min_val = np.min(row)\n        if max_val > min_val:\n            heuristic_matrix[i, :] = (row - min_val) / (max_val - min_val)\n        else:\n            heuristic_matrix[i, :] = np.ones_like(row) * 0.5\n\n\n    return heuristic_matrix\n\n[Reflection]\nSparsification and local normalization are key. Geometric mean centrality and degree centrality fusion can improve performance.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}