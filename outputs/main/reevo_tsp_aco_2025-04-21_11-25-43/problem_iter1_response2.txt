```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) using a combination of factors
    and sparsification.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.
                                       distance_matrix[i][j] gives the distance between node i and node j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    representing the heuristic values for each edge. Higher values indicate more promising edges.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate nearest neighbor for each node
    nearest_neighbors = np.argsort(distance_matrix, axis=1)[:, 1:4]  # Top 3 nearest neighbors (excluding itself)

    # Heuristic: Combine inverse distance with nearest neighbor information.
    for i in range(n):
        for j in range(n):
            if i != j:
                inverse_distance = 1 / distance_matrix[i, j]

                # Give a bonus if the edge connects to a nearest neighbor.  Also penalize long edges more
                if j in nearest_neighbors[i]:
                    heuristic_matrix[i, j] = inverse_distance * 2 #increased weighting
                else:
                    heuristic_matrix[i, j] = inverse_distance

    # Sparsify the matrix: keep only the most promising edges
    # Based on global threshold
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 75)  # Adjust percentile as needed

    # Or based on local threshold (for each row) - more dynamic
    for i in range(n):
      row_threshold = np.percentile(heuristic_matrix[i, :][heuristic_matrix[i, :] > 0], 50)
      for j in range(n):
        if heuristic_matrix[i,j] < row_threshold:
          heuristic_matrix[i,j] = 0

    # Ensure symmetry (TSP is usually undirected)
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2

    return heuristic_matrix
```
