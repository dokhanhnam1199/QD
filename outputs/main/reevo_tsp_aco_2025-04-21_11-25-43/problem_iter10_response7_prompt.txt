{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for TSP based on distance, degree centrality, geometric mean centrality,\n    adaptive sparsification with percentile thresholds, and distance-squared scaling\n    with local normalization.\n    \"\"\"\n    n = distance_matrix.shape[0]\n\n    # Initialize the heuristic matrix\n    heuristic_matrix = np.zeros_like(distance_matrix)\n\n    # Distance-squared scaling\n    distance_squared = distance_matrix**2\n\n    # Degree centrality heuristic\n    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=1)\n\n    # Geometric mean centrality\n    geometric_mean_centrality = np.exp(np.mean(np.log(1 / (distance_matrix + 1e-9) + 1e-9), axis=1))\n\n\n    # Combine factors\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristic_matrix[i, j] = (degree_centrality[i] * degree_centrality[j]) / (distance_squared[i, j] + 1e-9)\n                heuristic_matrix[i, j] *= np.sqrt(geometric_mean_centrality[i] * geometric_mean_centrality[j])\n\n    # Adaptive sparsification with percentile threshold\n    threshold_percentile = 75\n    threshold = np.percentile(distance_matrix[distance_matrix > 0], threshold_percentile) # Avoid percentile on zero values\n\n    sparsified_matrix = np.where(distance_matrix > threshold, 0, distance_matrix)\n    heuristic_matrix[distance_matrix > threshold] = 0\n\n    # Local normalization\n    for i in range(n):\n        row = heuristic_matrix[i, :]\n        max_val = np.max(row)\n        min_val = np.min(row)\n\n        if max_val > min_val:\n            heuristic_matrix[i, :] = (row - min_val) / (max_val - min_val)\n        else:\n            heuristic_matrix[i, :] = np.ones_like(row) * 0.5  # Handle cases with uniform values\n\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for TSP based on distance, degree centrality, geometric mean centrality,\n    adaptive sparsification, local normalization, controlled randomness,\n    and pheromone-inspired reinforcement.\n    \"\"\"\n    n = distance_matrix.shape[0]\n\n    # Initialize the heuristic matrix with the inverse of the distance\n    heuristic_matrix = 1 / (distance_matrix + 1e-9)\n\n    # Degree centrality heuristic: favors nodes with high \"connectivity\"\n    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=1)\n\n    # Geometric mean centrality: favors nodes centrally located in the graph\n    geometric_mean_centrality = np.exp(np.mean(np.log(distance_matrix + 1e-9), axis=1))\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristic_matrix[i, j] *= (degree_centrality[i] + degree_centrality[j]) / 2\n                heuristic_matrix[i, j] /= (geometric_mean_centrality[i] * geometric_mean_centrality[j])**0.5 #Penalize edges with nodes far from geometric center.\n\n    # Adaptive sparsification based on dynamic percentile threshold\n    flattened_distances = distance_matrix.flatten()\n    percentile_threshold = np.percentile(flattened_distances, 75)  # Adjust percentile as needed\n\n    for i in range(n):\n        for j in range(n):\n            if distance_matrix[i, j] > percentile_threshold:\n                heuristic_matrix[i, j] = 0\n\n    # Local normalization (row and column means)\n    row_means = np.mean(heuristic_matrix, axis=1, keepdims=True)\n    col_means = np.mean(heuristic_matrix, axis=0, keepdims=True)\n    heuristic_matrix /= (row_means + col_means + 1e-9) / 2  #Combined row and column normalization\n\n    # Controlled randomness for exploration (add small random noise)\n    random_noise = np.random.rand(n, n) * 0.01  # Adjust noise level as needed\n    heuristic_matrix += random_noise\n\n    # Pheromone-inspired reinforcement (using inverse square of distance with added constant)\n    pheromone_constant = np.mean(1/(distance_matrix + 1e-9)) #adaptive constant based on average distances\n    heuristic_matrix += pheromone_constant / (distance_matrix**2 + 1e-9)\n\n\n    # Normalize the heuristic matrix to a range of 0 to 1\n    max_val = np.max(heuristic_matrix)\n    min_val = np.min(heuristic_matrix)\n\n    if max_val > min_val:\n        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)\n    else:\n        heuristic_matrix = np.ones_like(heuristic_matrix) * 0.5\n\n    # Make matrix symmetric\n    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2\n\n    return heuristic_matrix\n\n[Reflection]\nConsider inverse distance, adaptive sparsification, local normalization, randomness, pheromones, and symmetry.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}