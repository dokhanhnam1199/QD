```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP with improved sparsification and node-specific factors.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    representing the prior indicators for each edge.
    """

    n = distance_matrix.shape[0]

    # Initialize heuristic matrix with inverse distance
    heuristic_matrix = 1 / (distance_matrix + 1e-9)

    # Node-specific shortest link preference
    min_distances = np.zeros(n)
    for i in range(n):
        min_distances[i] = np.partition(distance_matrix[i, :], 1)[1]

    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] *= (min_distances[i] * min_distances[j]) / (distance_matrix[i,j] + 1e-9)

    # Aggressive, node-dependent sparsification
    threshold = np.zeros(n)
    for i in range(n):
        threshold[i] = np.quantile(heuristic_matrix[i, :], 0.75)  # Keep top 25% per row

    for i in range(n):
        for j in range(n):
            if heuristic_matrix[i, j] < threshold[i]:
                heuristic_matrix[i, j] = 0

    # Symmetrization
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2

    np.fill_diagonal(heuristic_matrix, 0)
    return heuristic_matrix
```
