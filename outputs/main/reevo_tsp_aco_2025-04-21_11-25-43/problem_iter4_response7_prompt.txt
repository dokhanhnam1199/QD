{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for TSP based on distance, degree centrality, dynamic sparsification, and randomness.\n    \"\"\"\n    n = distance_matrix.shape[0]\n\n    # Initialize the heuristic matrix with the inverse of the distance\n    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero\n\n    # Degree centrality heuristic: favors nodes with high \"connectivity\" (low average distance to others)\n    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=1)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristic_matrix[i, j] *= np.sqrt((degree_centrality[i] * degree_centrality[j])) # Geometric mean\n\n    # Dynamic Sparsification: Adjust threshold based on node-specific average distances\n    for i in range(n):\n        avg_distance_i = np.mean(distance_matrix[i, :])\n        for j in range(n):\n            if i != j:\n                sparsification_threshold = 1.5 * (avg_distance_i + np.mean(distance_matrix[j,:]))/2 # Node specific average\n                if distance_matrix[i, j] > sparsification_threshold:\n                    heuristic_matrix[i, j] = 0\n\n    # Add small random component to diversify search\n    heuristic_matrix += 0.01 * np.random.rand(n, n) # small random boost\n\n    # Normalize the heuristic matrix to a range of 0 to 1\n    max_val = np.max(heuristic_matrix)\n    min_val = np.min(heuristic_matrix)\n\n    if max_val > min_val:\n        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)\n    else:\n        heuristic_matrix = np.ones_like(heuristic_matrix) * 0.5  # or another default value\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP that combines distance, node degree, and randomness.\n    It also sparsifies the matrix and normalizes/re-normalizes for probabilistic edge selection.\n\n    Args:\n        distance_matrix (np.ndarray): A numpy array representing the distance matrix.\n\n    Returns:\n        np.ndarray: A numpy array of the same shape as distance_matrix,\n                      representing the probability of including each edge in a solution.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # 1. Inverse distance: Shorter distances are preferred\n    inverse_distance = 1 / (distance_matrix + 1e-6)  # Add a small constant to avoid division by zero\n\n    # 2. Node degree: Encourage connections to nodes with fewer connections.\n    node_degrees = np.ones(n)\n\n    # Iterate through the distance matrix\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Combine inverse distance and node degrees\n                heuristic_matrix[i, j] = inverse_distance[i, j] / (node_degrees[i] * node_degrees[j])\n\n    # 3. Add randomness: Introduce some stochasticity to explore different solutions\n    random_matrix = np.random.rand(n, n) * 0.1  # Adjust the scaling factor for randomness\n\n    heuristic_matrix = heuristic_matrix + random_matrix\n\n    # Normalize the heuristic matrix to get probabilities.\n    heuristic_matrix = heuristic_matrix / np.sum(heuristic_matrix)\n\n    # 4. Sparsify the matrix: Set low-probability edges to zero to focus on more promising edges.\n    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.2)  # Remove bottom 20%\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    # Re-normalize the matrix\n    if np.sum(heuristic_matrix) > 0: #check for zero sum.\n       heuristic_matrix = heuristic_matrix / np.sum(heuristic_matrix)\n\n    return heuristic_matrix\n\n[Reflection]\nSparsification, appropriate normalization, and simpler node degree incorporation improved the heuristic.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}