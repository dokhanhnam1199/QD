```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP based on adaptive sparsification, degree centrality,
    distance-squared scaling, local normalization, and geometric mean centrality.
    """
    n = distance_matrix.shape[0]

    # Initialize heuristic matrix with inverse distance, avoid division by zero.
    heuristic_matrix = 1 / (distance_matrix + 1e-9)

    # Degree centrality heuristic (sum of inverse distances).
    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=1)

    # Geometric mean centrality
    geometric_mean_centrality = np.power(np.prod(1 / (distance_matrix + 1e-9), axis=1), 1/ (n - 1))

    # Combine degree centrality and geometric mean centrality
    combined_centrality = (degree_centrality + geometric_mean_centrality) / 2

    # Incorporate centrality into the heuristic.
    alpha = 0.7 # Weight for centrality. Adjust for exploration/exploitation.
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] = (1 - alpha) * heuristic_matrix[i, j] + alpha * (combined_centrality[i] + combined_centrality[j]) / 2


    # Adaptive sparsification using percentile threshold.
    threshold_percentile = 80  # Adjust percentile for sparsification.
    threshold = np.percentile(distance_matrix[distance_matrix > 0], threshold_percentile) # consider only positive distances
    sparsification_factor = 2  # Adjust to control sparsification strictness. Higher means more sparsification.

    # Sparsify based on the threshold.
    sparse_mask = distance_matrix > (threshold * sparsification_factor)
    heuristic_matrix[sparse_mask] = 0

    # Distance-squared scaling to penalize longer edges.
    beta = 1.5 # Adjust the exponent.
    heuristic_matrix = heuristic_matrix / (distance_matrix**beta + 1e-9)

    # Local normalization: Normalize each row to [0, 1].
    for i in range(n):
        row = heuristic_matrix[i, :]
        max_val = np.max(row)
        min_val = np.min(row)
        if max_val > min_val:
            heuristic_matrix[i, :] = (row - min_val) / (max_val - min_val)
        else:
            heuristic_matrix[i, :] = np.ones_like(row) * 0.5  # Handle cases with identical values


    # Control randomness
    randomness = 0.01 # Add small random number to encourage exploration.
    heuristic_matrix = heuristic_matrix + randomness * np.random.rand(n,n)
    return heuristic_matrix
```
