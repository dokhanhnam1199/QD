```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP based on distance, degree centrality, and adaptive sparsification.
    """
    n = distance_matrix.shape[0]

    # Distance-based heuristic
    heuristic_matrix = 1 / (distance_matrix**2 + 1e-9)

    # Degree centrality heuristic (geometric mean)
    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=1)
    geo_mean_centrality = np.power(np.prod(1 / (distance_matrix + 1e-9), axis=1), 1/n)

    # Combine centrality measures
    combined_centrality = np.sqrt(degree_centrality * geo_mean_centrality)

    # Incorporate centrality into the heuristic
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] *= combined_centrality[i] * combined_centrality[j]

    # Adaptive sparsification
    threshold_percentile = 75
    threshold = np.percentile(distance_matrix[distance_matrix > 0], threshold_percentile)

    heuristic_matrix[distance_matrix > threshold] = 0

    # Local normalization (row-wise)
    for i in range(n):
        row = heuristic_matrix[i, :]
        max_val = np.max(row)
        min_val = np.min(row)
        if max_val > min_val:
            heuristic_matrix[i, :] = (row - min_val) / (max_val - min_val)
        else:
            heuristic_matrix[i, :] = np.ones_like(row) * 0.5

    return heuristic_matrix
```
