```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP).

    This function calculates a heuristic matrix indicating the desirability of
    including each edge in the TSP tour.  It combines several factors:

    1. Inverse distance: Shorter distances are preferred.
    2. Node degree bias: Encourages edges connected to nodes with fewer connections
       in the current (heuristic) solution, to promote exploration.
    3. Global average distance:  Normalizes distances relative to the average.
    4. Sparsification: Sets the desirability of long edges to zero.

    Args:
        distance_matrix (np.ndarray): A square matrix where distance_matrix[i, j]
            represents the distance between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, representing
        the heuristic desirability of each edge. Higher values indicate more
        desirable edges.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance
    inverse_distance = 1.0 / (distance_matrix + 1e-6)  # Add small value to avoid division by zero

    # 2. Node Degree Bias (initially uniform)
    node_degree = np.ones(n)

    # 3. Global Average Distance
    avg_distance = np.mean(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Combine factors: Inverse distance, degree bias, and normalized by average distance.
                heuristic_matrix[i, j] = (inverse_distance[i, j] *
                                           (node_degree[i] + node_degree[j]) *
                                           (avg_distance / (distance_matrix[i, j] + 1e-6)) # Add small value to avoid division by zero
                                          )

    # 4. Sparsification: Remove edges with distances significantly above average.
    threshold = 2.0 * avg_distance  # Example threshold - adjust as needed

    heuristic_matrix[distance_matrix > threshold] = 0

    # Normalize the heuristic matrix to a reasonable range
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix /= max_heuristic

    return heuristic_matrix
```
