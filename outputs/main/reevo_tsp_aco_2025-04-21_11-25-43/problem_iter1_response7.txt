```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) using a combination of factors
    and sparsification.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances between nodes.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element indicates
                    how promising it is to include the corresponding edge in a solution.
    """

    n = distance_matrix.shape[0]

    # 1. Inverse distance: Shorter distances are generally more promising.
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero

    # 2. Nearest neighbor heuristic: Prioritize edges to nearest neighbors.
    nearest_neighbors = np.zeros_like(distance_matrix)
    for i in range(n):
        sorted_indices = np.argsort(distance_matrix[i, :])
        # Consider the k nearest neighbors. k can be a parameter. Let's use k=5.
        k = min(5, n)
        for j in sorted_indices[1:k]:  # Exclude the node itself (distance 0)
            nearest_neighbors[i, j] = 1
            nearest_neighbors[j, i] = 1 # Ensure symmetry

    # 3. Combination of factors: Combine inverse distance and nearest neighbor information.
    # You can adjust the weights to experiment with different strategies.
    heuristic_matrix = inverse_distance * (0.7 + 0.3 * nearest_neighbors)  # More weight to inverse distance

    # 4. Sparsification: Set unpromising edges to zero to reduce the search space.
    #   - Threshold based on the average distance
    average_distance = np.mean(distance_matrix[distance_matrix > 0]) # only consider nonzero elements when averaging.
    threshold = 2.0 / average_distance # You can tune this scaling
    heuristic_matrix[heuristic_matrix < threshold] = 0
    
    # Ensure the diagonal elements are 0. It is useful for enforcing constraint.
    for i in range(n):
        heuristic_matrix[i, i] = 0.0
        
    # Ensure symmetry.
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2

    return heuristic_matrix
```
