```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP based on adaptive sparsification, distance, degree centrality, geometric mean centrality,
    harmonic mean centrality, local normalization, and final distance adjustment.
    """
    n = distance_matrix.shape[0]

    # Initialize the heuristic matrix with the inverse of the distance
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Degree centrality heuristic: favors nodes with high "connectivity" (low average distance to others)
    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=1)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] *= (degree_centrality[i] + degree_centrality[j]) / 2

    # Geometric mean centrality
    geometric_mean_centrality = np.exp(np.mean(np.log(distance_matrix + 1e-9), axis=1))

    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] *= np.sqrt(geometric_mean_centrality[i] * geometric_mean_centrality[j])
    
    # Harmonic mean centrality
    harmonic_mean_centrality = n / np.sum(1 / (distance_matrix + 1e-9), axis=1)

    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] *= np.sqrt(harmonic_mean_centrality[i] * harmonic_mean_centrality[j])


    # Adaptive Sparsification based on percentile threshold

    flattened_distances = distance_matrix.flatten()
    percentile_threshold = np.percentile(flattened_distances, 75)  # Adjust percentile to control sparcity; higher value means more edges are kept
    for i in range(n):
        for j in range(n):
            if distance_matrix[i, j] > percentile_threshold:
                heuristic_matrix[i, j] = 0

    # Local normalization (row means)
    row_means = np.mean(distance_matrix, axis=1, keepdims=True)

    for i in range(n):
        for j in range(n):
            if row_means[i, 0] > 0:
                heuristic_matrix[i, j] /= (row_means[i, 0] + 1e-9)

    # Add a small amount of controlled randomness for exploration
    randomness_factor = 0.01  # Adjust this to control the level of randomness
    random_matrix = np.random.rand(n, n) * randomness_factor
    heuristic_matrix += random_matrix

    # Final Distance adjustment
    heuristic_matrix = heuristic_matrix / (distance_matrix**2 + 1e-9)

    # Normalize the heuristic matrix to a range of 0 to 1, after all operations.
    max_val = np.max(heuristic_matrix)
    min_val = np.min(heuristic_matrix)

    if max_val > min_val:  # To avoid division by zero when all elements are the same
        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    else:
        heuristic_matrix = np.ones_like(heuristic_matrix) * 0.5  # or another default value

    return heuristic_matrix
```
