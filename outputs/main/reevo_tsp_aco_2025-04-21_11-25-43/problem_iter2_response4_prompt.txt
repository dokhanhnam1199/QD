{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Traveling Salesman Problem (TSP) using a combination of factors.\n\n    This heuristic combines the inverse distance with node degree desirability and sparsifies the\n    matrix by setting unpromising edges to zero based on a threshold.\n\n    Args:\n        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix\n                                         between cities.  distance_matrix[i, j] is the distance\n                                         between city i and city j.\n\n    Returns:\n        np.ndarray: A 2D numpy array of the same shape as distance_matrix, representing\n                    the prior indicators (heuristics) for each edge.  Higher values indicate\n                    more promising edges.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix, dtype=float)\n\n    # Inverse distance component\n    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add small value to avoid division by zero\n\n    # Node degree component (desirability of connecting to low-degree nodes)\n    degree_desirability = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                degree_desirability[i, j] = 1.0 # Initialized with equal desirability.\n\n    # Combined heuristic\n    heuristics = inverse_distance * degree_desirability\n\n    # Sparsify the matrix (zero out less promising edges)\n    threshold = np.quantile(heuristics[heuristics > 0], 0.25)  # Keep top 75% of edges, must filter out zero values.\n    heuristics[heuristics < threshold] = 0\n\n    #Remove self-loops\n    for i in range(n):\n      heuristics[i,i] = 0\n    return heuristics\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP using a combination of factors and sparsification.\n\n    Args:\n        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.\n\n    Returns:\n        np.ndarray: A 2D numpy array of the same shape as distance_matrix,\n                    representing the prior indicators for each edge.  Higher values\n                    indicate a more promising edge.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n\n    # Initialize heuristic matrix with inverse distance\n    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero\n\n    # Incorporate a \"shortest link preference\"\n    min_distances = np.zeros(n)\n    for i in range(n):\n        min_distances[i] = np.partition(distance_matrix[i, :], 1)[1] # Second smallest as smallest will be self\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristic_matrix[i, j] *= (min_distances[i] * min_distances[j]) / (distance_matrix[i,j] + 1e-9)\n\n\n    # Sparsify the heuristic matrix: keep only the most promising edges for each node\n    threshold = np.zeros(n)\n    for i in range(n):\n        threshold[i] = np.partition(heuristic_matrix[i, :], max(1,n//4)) [max(1,n//4)] # nth smallest, hence threshold\n\n    for i in range(n):\n        for j in range(n):\n            if heuristic_matrix[i, j] < threshold[i]:\n                heuristic_matrix[i, j] = 0\n\n    # Ensure symmetry (important for some TSP solvers and makes sense heuristically)\n    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2\n\n    np.fill_diagonal(heuristic_matrix, 0)  # Remove self-loops\n    return heuristic_matrix\n\n[Reflection]\nThe better code incorporates node-specific information, and focuses on more aggressive, node-dependent sparsification and symmetrization.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}