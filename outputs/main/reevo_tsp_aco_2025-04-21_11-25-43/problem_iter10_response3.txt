```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    """
    Heuristics for TSP based on distance, degree centrality, and adaptive sparsification with percentile thresholds.
    """
    n = distance_matrix.shape[0]

    # Distance-squared scaling
    heuristic_matrix = 1 / (distance_matrix**2 + 1e-9)

    # Degree centrality heuristic (geometric mean)
    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=1)
    geo_mean_centrality = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                geo_mean_centrality[i, j] = np.sqrt(degree_centrality[i] * degree_centrality[j])
    heuristic_matrix *= geo_mean_centrality

    # Adaptive sparsification with percentile threshold
    threshold_percentile = 75
    threshold = np.percentile(distance_matrix[distance_matrix > 0], threshold_percentile)  # Avoid 0 distances in percentile calculation
    
    sparse_mask = distance_matrix > threshold
    heuristic_matrix[sparse_mask] = 0

    # Local normalization
    for i in range(n):
        row = heuristic_matrix[i, :]
        max_val = np.max(row)
        min_val = np.min(row)
        if max_val > min_val:
            heuristic_matrix[i, :] = (row - min_val) / (max_val - min_val)
        else:
            heuristic_matrix[i, :] = np.ones_like(row) * 0.5

    return heuristic_matrix
```
