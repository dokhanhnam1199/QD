```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP based on distance, degree centrality, dynamic sparsification, and randomness.
    """
    n = distance_matrix.shape[0]

    # Initialize the heuristic matrix with the inverse of the distance
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Degree centrality heuristic: favors nodes with high "connectivity" (low average distance to others)
    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=1)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] *= np.sqrt((degree_centrality[i] * degree_centrality[j])) # Geometric mean

    # Dynamic Sparsification: Adjust threshold based on node-specific average distances
    for i in range(n):
        avg_distance_i = np.mean(distance_matrix[i, :])
        for j in range(n):
            if i != j:
                sparsification_threshold = 1.5 * (avg_distance_i + np.mean(distance_matrix[j,:]))/2 # Node specific average
                if distance_matrix[i, j] > sparsification_threshold:
                    heuristic_matrix[i, j] = 0

    # Add small random component to diversify search
    heuristic_matrix += 0.01 * np.random.rand(n, n) # small random boost

    # Normalize the heuristic matrix to a range of 0 to 1
    max_val = np.max(heuristic_matrix)
    min_val = np.min(heuristic_matrix)

    if max_val > min_val:
        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    else:
        heuristic_matrix = np.ones_like(heuristic_matrix) * 0.5  # or another default value
    return heuristic_matrix
```
