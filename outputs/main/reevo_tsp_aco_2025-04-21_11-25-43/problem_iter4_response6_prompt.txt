{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for TSP based on normalized distance, adaptive degree centrality,\n    and dynamic sparsification with randomness.\n    \"\"\"\n    n = distance_matrix.shape[0]\n\n    # Normalize distances to be between 0 and 1\n    max_dist = np.max(distance_matrix)\n    min_dist = np.min(distance_matrix)\n    normalized_distance_matrix = (distance_matrix - min_dist) / (max_dist - min_dist + 1e-9)\n\n    # Initialize heuristic matrix with inverse of normalized distances\n    heuristic_matrix = 1 / (normalized_distance_matrix + 1e-9)\n\n    # Adaptive degree centrality: favoring nodes with closer neighbors\n    degree_centrality = np.sum(1 / (normalized_distance_matrix + 1e-9), axis=1)\n    avg_degree = np.mean(degree_centrality)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristic_matrix[i, j] *= ((degree_centrality[i] + degree_centrality[j]) / (2 * avg_degree)) # Relative degree centrality\n                heuristic_matrix[i, j] = np.clip(heuristic_matrix[i, j], 0, 2) #Clip it to avoid overflow\n\n    # Dynamic sparsification: remove edges that are relatively long, with some randomness\n    avg_distance = np.mean(normalized_distance_matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Sparsification probability increases with distance\n                sparsification_prob = normalized_distance_matrix[i, j] / (2 * avg_distance + 1e-9)\n                if np.random.rand() < sparsification_prob:\n                    heuristic_matrix[i, j] = 0\n\n    # Further adjustment: amplifying shorter distances and demphasizing longer ones\n    heuristic_matrix = heuristic_matrix / (normalized_distance_matrix**1.5 + 1e-9)\n\n    # Normalize the heuristic matrix to range 0 to 1\n    max_val = np.max(heuristic_matrix)\n    min_val = np.min(heuristic_matrix)\n\n    if max_val > min_val:\n        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)\n    else:\n        heuristic_matrix = np.ones_like(heuristic_matrix) * 0.5\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for TSP based on distance, degree centrality, and sparsification.\n    \"\"\"\n    n = distance_matrix.shape[0]\n\n    # Initialize the heuristic matrix with the inverse of the distance\n    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero\n\n    # Degree centrality heuristic: favors nodes with high \"connectivity\" (low average distance to others)\n    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=1)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristic_matrix[i, j] *= (degree_centrality[i] + degree_centrality[j]) / 2\n\n    # Sparsification: remove edges that are too long compared to average edge length\n    avg_distance = np.mean(distance_matrix)\n    sparsification_threshold = 2.0 * avg_distance #Adjust this to adjust sparcity\n\n    for i in range(n):\n        for j in range(n):\n            if distance_matrix[i, j] > sparsification_threshold:\n                heuristic_matrix[i, j] = 0\n\n    # Further adjustment based on the inverse square of the distance. This amplifies small distances and demphasizes large distances, after other factors.\n    heuristic_matrix = heuristic_matrix / (distance_matrix**2 + 1e-9)\n    # Normalize the heuristic matrix to a range of 0 to 1, after all operations.\n    max_val = np.max(heuristic_matrix)\n    min_val = np.min(heuristic_matrix)\n\n    if max_val > min_val:  # To avoid division by zero when all elements are the same\n        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)\n    else:\n        heuristic_matrix = np.ones_like(heuristic_matrix) * 0.5  # or another default value\n    return heuristic_matrix\n\n[Reflection]\nBetter heuristics:\n- Use raw distances directly.\n- Focus sparsification on a fixed threshold.\n- Adjust parameters to control exploration.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}