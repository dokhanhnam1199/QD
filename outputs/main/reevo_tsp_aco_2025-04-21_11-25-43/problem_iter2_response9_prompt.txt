{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Traveling Salesman Problem (TSP) using a combination of factors.\n\n    This heuristic combines the inverse distance with node degree desirability and sparsifies the\n    matrix by setting unpromising edges to zero based on a threshold.\n\n    Args:\n        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix\n                                         between cities.  distance_matrix[i, j] is the distance\n                                         between city i and city j.\n\n    Returns:\n        np.ndarray: A 2D numpy array of the same shape as distance_matrix, representing\n                    the prior indicators (heuristics) for each edge.  Higher values indicate\n                    more promising edges.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix, dtype=float)\n\n    # Inverse distance component\n    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add small value to avoid division by zero\n\n    # Node degree component (desirability of connecting to low-degree nodes)\n    degree_desirability = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                degree_desirability[i, j] = 1.0 # Initialized with equal desirability.\n\n    # Combined heuristic\n    heuristics = inverse_distance * degree_desirability\n\n    # Sparsify the matrix (zero out less promising edges)\n    threshold = np.quantile(heuristics[heuristics > 0], 0.25)  # Keep top 75% of edges, must filter out zero values.\n    heuristics[heuristics < threshold] = 0\n\n    #Remove self-loops\n    for i in range(n):\n      heuristics[i,i] = 0\n    return heuristics\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP that combines distance, node degree, and randomness.\n    It also sparsifies the matrix by setting low-probability edges to zero.\n\n    Args:\n        distance_matrix (np.ndarray): A numpy array representing the distance matrix.\n\n    Returns:\n        np.ndarray: A numpy array of the same shape as distance_matrix,\n                      representing the probability of including each edge in a solution.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # 1. Inverse distance: Shorter distances are preferred\n    inverse_distance = 1 / (distance_matrix + 1e-6)  # Add a small constant to avoid division by zero\n\n    # 2. Node degree: Encourage connections to nodes with fewer connections.\n    #    Initialized to ones, and increased when an edge is assigned to a node.\n    node_degrees = np.ones(n)\n\n    # Iterate through the distance matrix\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Combine inverse distance and node degrees\n                heuristic_matrix[i, j] = inverse_distance[i, j] / (node_degrees[i] * node_degrees[j])\n\n    # 3. Add randomness: Introduce some stochasticity to explore different solutions\n    random_matrix = np.random.rand(n, n) * 0.1  # Adjust the scaling factor for randomness\n\n    heuristic_matrix = heuristic_matrix + random_matrix\n\n    # Normalize the heuristic matrix to get probabilities.\n    heuristic_matrix = heuristic_matrix / np.sum(heuristic_matrix)\n\n\n    # 4. Sparsify the matrix: Set low-probability edges to zero to focus on more promising edges.\n    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.2)  # Remove bottom 20%\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    # Re-normalize the matrix\n    if np.sum(heuristic_matrix) > 0: #check for zero sum.\n       heuristic_matrix = heuristic_matrix / np.sum(heuristic_matrix)\n\n    return heuristic_matrix\n\n[Reflection]\nBetter heuristics use node degree, randomness, normalization, and re-normalization after sparsification for robust edge selection.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}