```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) using a combination of factors.

    This function calculates a heuristic score for each edge based on:
      1. Inverse distance: Shorter edges are preferred.
      2. Nearest neighbor information: Edges connecting nodes to their nearest neighbors are preferred.
      3. Sparsification: Unpromising edges are set to zero to reduce the search space.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.
                                       distance_matrix[i, j] is the distance between node i and node j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix, representing the heuristic scores for each edge.
                      Higher scores indicate more promising edges.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero

    # 2. Nearest neighbor information
    for i in range(n):
        # Find the indices of the k nearest neighbors of node i (excluding itself)
        nearest_neighbors = np.argsort(distance_matrix[i, :])[1:4]  # k=3
        for neighbor in nearest_neighbors:
            heuristic_matrix[i, neighbor] *= 2.0  # Boost edges connecting to nearest neighbors
            heuristic_matrix[neighbor, i] *= 2.0

    # 3. Sparsification: Zero out edges that are too long (e.g., above the average distance)
    average_distance = np.mean(distance_matrix[distance_matrix != 0])
    threshold = 2.0 * average_distance # Adjustable factor
    heuristic_matrix[distance_matrix > threshold] = 0.0

    # Further sparsification: Keep only top k edges per row (nodes)
    k = 5  # Number of edges to keep per row (nodes)
    for i in range(n):
        row = heuristic_matrix[i, :]
        indices = np.argsort(row)[-k:] # indices of k largest elements
        mask = np.ones(n, dtype=bool)
        mask[indices] = False
        heuristic_matrix[i, mask] = 0.0

    # Ensure symmetry, take the max
    heuristic_matrix = np.maximum(heuristic_matrix, heuristic_matrix.T)

    return heuristic_matrix
```
