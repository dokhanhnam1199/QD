```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP based on stochastic solution sampling principles.
    Combines inverse distance with a nearest neighbor component and sparsifies the matrix.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances
                                       between cities. distance_matrix[i, j] is the
                                       distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each
                    element represents the prior probability of including the
                    corresponding edge in a TSP tour.
    """

    n = distance_matrix.shape[0]

    # Inverse distance component (basic desirability)
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero

    # Nearest neighbor component (encourages local connections)
    nearest_neighbors = np.zeros((n, n))
    for i in range(n):
        # Find the k nearest neighbors of node i (excluding itself). Adjust k based on n.
        k = min(5, n - 1)  # Consider a small number of neighbors, avoid too many calculations
        distances = distance_matrix[i, :]
        nearest_neighbor_indices = np.argsort(distances)[1:k+1]  # Exclude the node itself
        for j in nearest_neighbor_indices:
            nearest_neighbors[i, j] = 1
            nearest_neighbors[j, i] = 1  # Symmetry
    # Combine the components
    heuristic_matrix = inverse_distance + nearest_neighbors

    # Sparsification (focus on promising edges only)
    # Keep edges that are in top X percentile. X varies between 30 and 50 based on size.
    percentile = 50 - min(20, n // 10)

    threshold = np.percentile(heuristic_matrix, percentile)
    heuristic_matrix[heuristic_matrix < threshold] = 0
    # Normalize to probabilities (optional, but can be helpful in some contexts)
    heuristic_matrix = heuristic_matrix / np.sum(heuristic_matrix)

    return heuristic_matrix
```
