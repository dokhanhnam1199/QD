{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP based on a combination of factors,\n    including distance, node degree, and connectivity. It also sparsifies the matrix\n    by setting unpromising elements to zero.\n\n    Args:\n        distance_matrix (np.ndarray): A 2D numpy array representing the distance\n                                         matrix between cities. distance_matrix[i, j]\n                                         is the distance between city i and city j.\n\n    Returns:\n        np.ndarray: A 2D numpy array of the same shape as distance_matrix,\n                    representing the prior indicators of how promising it is to\n                    include each edge in a solution.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate inverse distance\n    inverse_distance = 1 / (distance_matrix + 1e-9)  # Add a small value to avoid division by zero\n\n    # Calculate node degree heuristic: prefers nodes with a small degree.\n    degree_heuristic = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                degree_heuristic[i, j] = 1.0\n\n    # Combine heuristics\n    heuristic_matrix = inverse_distance * degree_heuristic\n\n    # Sparsify the matrix: Remove edges that are too long relative to the average distance.\n    average_distance = np.mean(distance_matrix[distance_matrix > 0])  # exclude zero distances\n    threshold = 2.0 * average_distance  # Adjust the threshold as needed\n    heuristic_matrix[distance_matrix > threshold] = 0.0\n\n    # Normalize the heuristic matrix to have values between 0 and 1\n    max_heuristic = np.max(heuristic_matrix)\n    if max_heuristic > 0:\n        heuristic_matrix = heuristic_matrix / max_heuristic\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Traveling Salesman Problem (TSP) that\n    combines multiple factors to estimate the suitability of each edge\n    in a potential TSP solution.\n\n    The returned matrix indicates how promising each edge is, with higher\n    values signifying greater promise. The function incorporates\n    distance, node degree (preference for less-connected nodes), and\n    a randomness factor to explore diverse solutions. Elements can be\n    set to zero to sparsify the search space based on distance thresholds.\n\n    Args:\n        distance_matrix (np.ndarray): A square, symmetric matrix representing\n                                       the distances between cities.\n\n    Returns:\n        np.ndarray: A matrix of the same shape as distance_matrix,\n                    indicating the prior probability/promise of each edge\n                    being part of a good TSP tour.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Inverse distance - closer cities are generally better\n    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero\n\n    # Node degree preference - encourages exploration of less-connected nodes\n    # Initially, assume all nodes are equally preferred\n    node_preference = np.ones(n)\n\n    # Iterate through all possible edges\n    for i in range(n):\n        for j in range(i + 1, n):  # Only consider upper triangle since matrix is symmetric\n            # Combine factors: inverse distance and node preference\n            heuristic_matrix[i, j] = inverse_distance[i, j] * node_preference[i] * node_preference[j]\n\n            # Add some randomness to encourage exploration -  remove to benchmark\n            heuristic_matrix[i, j] += np.random.rand() * 0.1\n            \n            # Sparsify the matrix: set unpromising elements to zero\n            # (Example: remove edges longer than a certain percentile)\n            distance_threshold = np.percentile(distance_matrix, 75) #consider top 75%\n            if distance_matrix[i, j] > distance_threshold:\n                heuristic_matrix[i, j] = 0\n\n\n    # Ensure symmetry\n    heuristic_matrix = heuristic_matrix + heuristic_matrix.T\n\n    return heuristic_matrix\n\n[Reflection]\nIncorporate node preferences, randomness, and percentile-based sparsification for improved exploration and solution quality.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}