{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for TSP based on distance, degree centrality, and adaptive sparsification.\n    \"\"\"\n    n = distance_matrix.shape[0]\n\n    # Inverse square distance\n    heuristic_matrix = 1 / (distance_matrix**2 + 1e-9)\n\n    # Node degree-based weighting\n    degree = np.sum(heuristic_matrix, axis=1)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristic_matrix[i, j] *= np.sqrt(degree[i] * degree[j])\n\n    # Adaptive sparsification based on row-wise thresholds\n    for i in range(n):\n        row = distance_matrix[i, :]\n        threshold = np.mean(row) + np.std(row)  # Adaptive threshold per row\n        for j in range(n):\n            if distance_matrix[i, j] > threshold:\n                heuristic_matrix[i, j] = 0.0\n\n    # Local normalization (row-wise)\n    for i in range(n):\n        row = heuristic_matrix[i, :]\n        row_sum = np.sum(row)\n        if row_sum > 0:\n            heuristic_matrix[i, :] = row / row_sum\n        else:\n            heuristic_matrix[i, :] = np.ones(n) / n  # Avoid division by zero\n\n    # Control randomness/exploration - add a small amount of noise\n    noise = np.random.rand(n, n) * 0.01\n    heuristic_matrix = heuristic_matrix + noise\n    heuristic_matrix = np.clip(heuristic_matrix, 0, 1)\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for TSP based on adaptive, dynamic sparsification, degree centrality,\n    and randomness, with refined parameter tuning and normalization.\n    \"\"\"\n    n = distance_matrix.shape[0]\n\n    # Initialize heuristic matrix with inverse distance\n    heuristic_matrix = 1 / (distance_matrix + 1e-9)\n\n    # Node degree centrality heuristic\n    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=1)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristic_matrix[i, j] *= (degree_centrality[i] + degree_centrality[j]) / 2\n\n    # Adaptive sparsification with dynamic threshold\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                nearest_neighbors_indices = np.argsort(distance_matrix[i, :])[1:6]  # Top 5 nearest neighbors\n                avg_neighbor_distance = np.mean(distance_matrix[i, nearest_neighbors_indices])\n                dynamic_threshold = 1.5 * avg_neighbor_distance  # Tuned multiplier\n\n                if distance_matrix[i, j] > dynamic_threshold:\n                    heuristic_matrix[i, j] *= 0.05  # Further Reduced penalty; encourages exploration\n\n    # Incorporate randomness\n    randomness_factor = 0.01  # Further reduced randomness strength for more stable exploitation\n    random_matrix = np.random.rand(n, n) * randomness_factor\n    heuristic_matrix += random_matrix\n\n    # Enhanced normalization and scaling\n    heuristic_matrix = heuristic_matrix / (distance_matrix + 1e-9)**0.4 # Adjusted exponent\n    max_val = np.max(heuristic_matrix)\n    min_val = np.min(heuristic_matrix)\n\n    if max_val > min_val:\n        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val) # Proper normalization\n    else:\n        heuristic_matrix = np.ones_like(heuristic_matrix) * 0.5\n\n    return heuristic_matrix\n\n[Reflection]\nDynamic sparsification, refined normalization, and tuned randomness improve heuristic guidance in stochastic TSP solvers.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}