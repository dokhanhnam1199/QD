{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for TSP based on distance, degree centrality, geometric mean centrality,\n    adaptive sparsification with percentile thresholds, and distance-squared scaling\n    with local normalization.\n    \"\"\"\n    n = distance_matrix.shape[0]\n\n    # Initialize the heuristic matrix\n    heuristic_matrix = np.zeros_like(distance_matrix)\n\n    # Distance-squared scaling\n    distance_squared = distance_matrix**2\n\n    # Degree centrality heuristic\n    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=1)\n\n    # Geometric mean centrality\n    geometric_mean_centrality = np.exp(np.mean(np.log(1 / (distance_matrix + 1e-9) + 1e-9), axis=1))\n\n\n    # Combine factors\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristic_matrix[i, j] = (degree_centrality[i] * degree_centrality[j]) / (distance_squared[i, j] + 1e-9)\n                heuristic_matrix[i, j] *= np.sqrt(geometric_mean_centrality[i] * geometric_mean_centrality[j])\n\n    # Adaptive sparsification with percentile threshold\n    threshold_percentile = 75\n    threshold = np.percentile(distance_matrix[distance_matrix > 0], threshold_percentile) # Avoid percentile on zero values\n\n    sparsified_matrix = np.where(distance_matrix > threshold, 0, distance_matrix)\n    heuristic_matrix[distance_matrix > threshold] = 0\n\n    # Local normalization\n    for i in range(n):\n        row = heuristic_matrix[i, :]\n        max_val = np.max(row)\n        min_val = np.min(row)\n\n        if max_val > min_val:\n            heuristic_matrix[i, :] = (row - min_val) / (max_val - min_val)\n        else:\n            heuristic_matrix[i, :] = np.ones_like(row) * 0.5  # Handle cases with uniform values\n\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for TSP combining inverse distance, degree centrality,\n    adaptive sparsification, controlled randomness, and normalization.\n    \"\"\"\n    n = distance_matrix.shape[0]\n\n    # Initialize heuristic matrix with inverse distance\n    heuristic_matrix = 1 / (distance_matrix + 1e-9)\n\n    # Node degree centrality heuristic\n    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=1)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristic_matrix[i, j] *= (degree_centrality[i] + degree_centrality[j]) / 2\n\n    # Adaptive sparsification with dynamic threshold\n    for i in range(n):\n        distances = distance_matrix[i, :]\n        nearest_neighbors_indices = np.argsort(distances)[1:min(6, n)]  # Top 5 or fewer nearest neighbors, excluding self\n        avg_neighbor_distance = np.mean(distances[nearest_neighbors_indices]) if len(nearest_neighbors_indices) > 0 else np.mean(distances)\n        dynamic_threshold = 1.3 * avg_neighbor_distance\n\n        for j in range(n):\n            if i != j and distance_matrix[i, j] > dynamic_threshold:\n                heuristic_matrix[i, j] *= 0.1  # Stronger penalty for non-neighbors\n\n    # Incorporate randomness\n    randomness_factor = 0.01  # Reduced randomness even further\n    random_matrix = np.random.rand(n, n) * randomness_factor\n    heuristic_matrix += random_matrix\n\n    # Enhanced normalization and scaling\n    heuristic_matrix = heuristic_matrix / (distance_matrix + 1e-9)**0.3  # Adjusted exponent\n\n    max_val = np.max(heuristic_matrix)\n    min_val = np.min(heuristic_matrix)\n\n    if max_val > min_val:\n        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)  # Proper normalization\n    else:\n        heuristic_matrix = np.ones_like(heuristic_matrix) * 0.5  # Handle the case where all values are the same\n\n    return heuristic_matrix\n\n[Reflection]\nPrioritize inverse distance, adaptive sparsification, mild randomness, and refined normalization/scaling.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}