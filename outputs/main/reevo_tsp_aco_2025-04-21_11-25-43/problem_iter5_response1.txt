```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP based on adaptive sparsification, distance, degree centrality, and geometric mean centrality.
    """
    n = distance_matrix.shape[0]

    # Initialize the heuristic matrix with the inverse of the distance
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Degree centrality heuristic: favors nodes with high "connectivity" (low average distance to others)
    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=1)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] *= np.sqrt(degree_centrality[i] * degree_centrality[j])  # Geometric mean

    # Local normalization using row and column means
    row_means = np.mean(distance_matrix, axis=1, keepdims=True)
    col_means = np.mean(distance_matrix, axis=0, keepdims=True)
    heuristic_matrix /= (row_means + col_means + 1e-9) / 2

    # Adaptive sparsification based on percentile threshold
    distances = distance_matrix.flatten()
    distances = distances[distances > 0]  # Exclude zero distances
    threshold = np.percentile(distances, 75)  # Dynamic threshold; adjust percentile as needed
    
    for i in range(n):
        for j in range(n):
            if distance_matrix[i, j] > threshold:
                heuristic_matrix[i, j] = 0

    # Add a touch of randomness to encourage exploration
    randomness_factor = 0.01
    heuristic_matrix += randomness_factor * np.random.rand(n, n)

    heuristic_matrix = heuristic_matrix / (distance_matrix**1.5 + 1e-9)
    # Normalize the heuristic matrix to a range of 0 to 1
    max_val = np.max(heuristic_matrix)
    min_val = np.min(heuristic_matrix)

    if max_val > min_val:
        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    else:
        heuristic_matrix = np.ones_like(heuristic_matrix) * 0.5
    return heuristic_matrix
```
