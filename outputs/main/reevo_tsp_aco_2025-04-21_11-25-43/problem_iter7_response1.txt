```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP based on distance, degree centrality, and adaptive sparsification.
    """
    n = distance_matrix.shape[0]

    # Inverse square distance
    heuristic_matrix = 1 / (distance_matrix**2 + 1e-9)

    # Node degree-based weighting
    degree = np.sum(heuristic_matrix, axis=1)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] *= np.sqrt(degree[i] * degree[j])

    # Adaptive sparsification based on row-wise thresholds
    for i in range(n):
        row = distance_matrix[i, :]
        threshold = np.mean(row) + np.std(row)  # Adaptive threshold per row
        for j in range(n):
            if distance_matrix[i, j] > threshold:
                heuristic_matrix[i, j] = 0.0

    # Local normalization (row-wise)
    for i in range(n):
        row = heuristic_matrix[i, :]
        row_sum = np.sum(row)
        if row_sum > 0:
            heuristic_matrix[i, :] = row / row_sum
        else:
            heuristic_matrix[i, :] = np.ones(n) / n  # Avoid division by zero

    # Control randomness/exploration - add a small amount of noise
    noise = np.random.rand(n, n) * 0.01
    heuristic_matrix = heuristic_matrix + noise
    heuristic_matrix = np.clip(heuristic_matrix, 0, 1)

    return heuristic_matrix
```
