```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP based on distance, node degree, and connectivity.

    Args:
        distance_matrix: A numpy array representing the distance matrix between cities.

    Returns:
        A numpy array representing the heuristic values for each edge.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate degree heuristic: favor nodes with low degree (less connected)
    degree_heuristic = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                degree_heuristic[i, j] = 1 #Initial value before adjusting for sparsification.
    
    # Sparsification and adaptive scaling
    avg_dist = np.mean(distance_matrix[distance_matrix != 0]) #Avoid inf in mean
    sparsification_threshold = 2 * avg_dist

    for i in range(n):
        for j in range(n):
            if i != j:
                if distance_matrix[i, j] > sparsification_threshold:
                    heuristic_matrix[i, j] = 0  # Sparsify based on distance
                    degree_heuristic[i,j] = 0 # Sparsify degree heuristic together
                else:
                    heuristic_matrix[i, j] = 1 / distance_matrix[i, j]  # Inverse distance
                   
    #Combine heuristics. Adjust weights as needed
    heuristic_matrix = 0.7 * heuristic_matrix + 0.3* degree_heuristic

    return heuristic_matrix
```
