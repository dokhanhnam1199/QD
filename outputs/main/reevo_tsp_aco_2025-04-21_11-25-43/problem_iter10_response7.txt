```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP based on inverse distance, adaptive sparsification,
    local normalization, randomness, pheromones, and symmetry.
    """
    n = distance_matrix.shape[0]

    # Initialize the heuristic matrix with the inverse of the distance
    heuristic_matrix = 1 / (distance_matrix + 1e-9)

    # Adaptive sparsification based on dynamic percentile threshold
    flattened_distances = distance_matrix.flatten()
    percentile_threshold = np.percentile(flattened_distances, 75)  # Adjust percentile as needed

    heuristic_matrix[distance_matrix > percentile_threshold] = 0

    # Local normalization (row and column max)
    row_max = np.max(heuristic_matrix, axis=1, keepdims=True)
    col_max = np.max(heuristic_matrix, axis=0, keepdims=True)
    heuristic_matrix /= (row_max + col_max + 1e-9) / 2  # Combined row and column normalization

    # Controlled randomness for exploration (add small random noise)
    random_noise = np.random.rand(n, n) * 0.01  # Adjust noise level as needed
    heuristic_matrix += random_noise

    # Pheromone-inspired reinforcement (using inverse square of distance with added constant)
    pheromone_constant = np.mean(1 / (distance_matrix + 1e-9))  # adaptive constant based on average distances
    heuristic_matrix += pheromone_constant / (distance_matrix**2 + 1e-9)

    # Normalize the heuristic matrix to a range of 0 to 1
    max_val = np.max(heuristic_matrix)
    min_val = np.min(heuristic_matrix)

    if max_val > min_val:
        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    else:
        heuristic_matrix = np.ones_like(heuristic_matrix) * 0.5

    # Make matrix symmetric
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2

    return heuristic_matrix
```
