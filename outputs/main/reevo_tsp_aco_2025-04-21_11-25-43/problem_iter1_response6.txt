```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) using a combination of factors.

    This heuristic combines the inverse distance with node degree desirability and sparsifies the
    matrix by setting unpromising edges to zero based on a threshold.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix
                                         between cities.  distance_matrix[i, j] is the distance
                                         between city i and city j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix, representing
                    the prior indicators (heuristics) for each edge.  Higher values indicate
                    more promising edges.
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance component
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add small value to avoid division by zero

    # Node degree component (desirability of connecting to low-degree nodes)
    degree_desirability = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                degree_desirability[i, j] = 1.0 # Initialized with equal desirability.

    # Combined heuristic
    heuristics = inverse_distance * degree_desirability

    # Sparsify the matrix (zero out less promising edges)
    threshold = np.quantile(heuristics[heuristics > 0], 0.25)  # Keep top 75% of edges, must filter out zero values.
    heuristics[heuristics < threshold] = 0

    #Remove self-loops
    for i in range(n):
      heuristics[i,i] = 0
    return heuristics
```
