```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP based on normalized distance, dynamic degree centrality,
    and adaptive sparsification.
    """
    n = distance_matrix.shape[0]

    # Normalize distances to be between 0 and 1
    max_dist = np.max(distance_matrix)
    min_dist = np.min(distance_matrix)
    normalized_distances = (distance_matrix - min_dist) / (max_dist - min_dist + 1e-9)

    # Initialize heuristic matrix with inverse normalized distances
    heuristic_matrix = 1 / (normalized_distances + 1e-9)

    # Dynamic degree centrality: penalize connections to nodes with already many near connections
    degree_centrality = np.sum(1 / (normalized_distances + 1e-9), axis=1)
    avg_degree = np.mean(degree_centrality)

    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] *= (degree_centrality[i] + degree_centrality[j]) / (2 * avg_degree + 1e-9) # Normalize by average degree

    # Adaptive sparsification: favor edges shorter than the average, and strongly penalize longer edges.

    avg_distance = np.mean(distance_matrix)
    for i in range(n):
        for j in range(n):
            if distance_matrix[i, j] > avg_distance:
                heuristic_matrix[i, j] *= np.exp(-(distance_matrix[i, j] - avg_distance) / (avg_distance + 1e-9)) # Exponential decay
            else:
                heuristic_matrix[i,j] *= 1.0 + 0.5*(1.0 - distance_matrix[i, j] / (avg_distance+1e-9)) #Slight boost for short edges relative to the average

    # Incorporate randomness: add a small random factor to encourage exploration
    random_matrix = np.random.rand(n, n) * 0.1
    heuristic_matrix += random_matrix

    # Enforce symmetry (important for some TSP solvers)
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2

    # Normalize the heuristic matrix to a range of 0 to 1
    max_val = np.max(heuristic_matrix)
    min_val = np.min(heuristic_matrix)

    if max_val > min_val:
        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    else:
        heuristic_matrix = np.ones_like(heuristic_matrix) * 0.5

    return heuristic_matrix
```
