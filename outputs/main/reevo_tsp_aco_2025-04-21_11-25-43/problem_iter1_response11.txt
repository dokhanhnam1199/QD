```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) using a combination of factors
    and stochastic sampling.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances between cities.

    Returns:
        np.ndarray: A matrix of the same shape as the input, representing the desirability of each edge.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Heuristic 1: Inverse of distance (as in v1)
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Heuristic 2: Nearest Neighbor heuristic (influence)
    nearest_neighbors = np.argsort(distance_matrix, axis=1)[:, 1:4]  # Find 3 nearest neighbors
    for i in range(n):
        for j in nearest_neighbors[i]:
            if i != j:
                heuristic_matrix[i, j] += 0.5  # Boost connections to nearest neighbors (tunable parameter)

    # Heuristic 3: Penalize edges that create short cycles (partially) - encourages exploration
    for i in range(n):
        for j in range(n):
            if i != j:
                # Check for short cycles of length 3. If adding edge (i,j) could complete a
                # triangle with an existing path i-k-j, penalize it slightly. This is not
                # perfect, as the "existing path" might itself be removed later.

                for k in range(n):
                    if k != i and k != j:
                        if distance_matrix[i,k] < np.inf and distance_matrix[k,j] < np.inf:
                            heuristic_matrix[i, j] -= 0.1  # reduce the heuristic, but not set to zero.
                            break # Stop if found one such k.

    # Sparsification: Set values below a threshold to zero.  This helps the algorithm focus
    # on a subset of edges, making the search more efficient, while still retaining enough
    # diversity through stochastic sampling.

    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.25) #dynamic threshold, keeping top 75% (nonzero only)
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Normalize heuristics: scales the entire matrix by a positive factor. This helps gradient-based and sampling algorithms.
    heuristic_matrix = heuristic_matrix / np.max(heuristic_matrix)

    return heuristic_matrix
```
