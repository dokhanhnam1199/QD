```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP based on adaptive, dynamic sparsification, degree centrality,
    and randomness.
    """
    n = distance_matrix.shape[0]

    # Initialize heuristic matrix with inverse distance (plus small constant to avoid division by zero)
    heuristic_matrix = 1 / (distance_matrix + 1e-9)

    # Node degree heuristic: prioritize edges connected to nodes with high degree
    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=1)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] *= (degree_centrality[i] + degree_centrality[j]) / 2

    # Adaptive sparsification: remove edges longer than a dynamic threshold based on neighbors
    for i in range(n):
        for j in range(n):
            if i != j:
                # Calculate a dynamic threshold based on the average distance to nearest neighbors
                nearest_neighbors_indices = np.argsort(distance_matrix[i, :])[1:6]  # Top 5 nearest neighbors
                avg_neighbor_distance = np.mean(distance_matrix[i, nearest_neighbors_indices])
                dynamic_threshold = 2.5 * avg_neighbor_distance  # Adjust multiplier as needed

                if distance_matrix[i, j] > dynamic_threshold:
                    heuristic_matrix[i, j] = 0.0001 #Slightly penalized instead of zeroed.

    # Incorporate randomness
    randomness_factor = 0.1  # Adjust randomness strength as needed
    random_matrix = np.random.rand(n, n) * randomness_factor
    heuristic_matrix += random_matrix

    # Normalize and amplify
    heuristic_matrix = heuristic_matrix / (distance_matrix + 1e-9)**1 #Removed square and tuned value for division
    max_val = np.max(heuristic_matrix)
    min_val = np.min(heuristic_matrix)

    if max_val > min_val:
        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    else:
        heuristic_matrix = np.ones_like(heuristic_matrix) * 0.5

    return heuristic_matrix
```
