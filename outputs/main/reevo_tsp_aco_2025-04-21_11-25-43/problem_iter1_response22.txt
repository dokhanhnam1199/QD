```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for Traveling Salesman Problem (TSP) based on distance and node degree.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution.
                      Values are between 0 and 1, with 0 indicating that the edge should
                      probably not be included and 1 indicating a promising edge.  Same shape
                      as distance_matrix.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # Calculate inverse distance
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Normalize inverse distances to [0, 1]
    inverse_distance = (inverse_distance - np.min(inverse_distance)) / (np.max(inverse_distance) - np.min(inverse_distance))

    # Node degree preference:  Prefer nodes with few close neighbors
    degree_preference = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        # Get distances to all other nodes from node i
        distances_from_i = distance_matrix[i, :]
        
        # Count neighbors closer than the median distance
        median_distance = np.median(distances_from_i[distances_from_i > 0]) # only consider non self loop when calc median
        num_close_neighbors = np.sum(distances_from_i < median_distance)
        
        # Smaller number of neighbors are better, add a small constant to prevent division by zero if num_close_neighbors=0
        degree_preference[i, :] = 1 / (num_close_neighbors + 1)

    # Normalize degree preference to [0, 1]
    degree_preference = (degree_preference - np.min(degree_preference)) / (np.max(degree_preference) - np.min(degree_preference))

    # Combine distance and degree preference
    heuristics = 0.7 * inverse_distance + 0.3 * degree_preference

    # Sparsify the matrix (optional)
    threshold = np.quantile(heuristics[heuristics > 0], 0.7) # Consider only >0 values for sparsification thresholding
    heuristics[heuristics < threshold] = 0

    # Ensure symmetry and zero diagonal
    for i in range(n):
        for j in range(i):
            heuristics[j, i] = heuristics[i, j]
    np.fill_diagonal(heuristics, 0)

    return heuristics
```
