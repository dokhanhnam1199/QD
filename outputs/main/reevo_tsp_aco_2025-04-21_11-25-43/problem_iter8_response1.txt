```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP based on distance, degree centrality, geometric mean centrality,
    adaptive sparsification, local normalization, and controlled randomness.
    """
    n = distance_matrix.shape[0]

    # Initialize the heuristic matrix with the inverse of the distance
    heuristic_matrix = 1 / (distance_matrix + 1e-9)

    # Degree centrality heuristic: favors nodes with high "connectivity"
    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=1)

    # Geometric mean centrality: favors nodes centrally located in the graph
    geometric_mean_centrality = np.exp(np.mean(np.log(distance_matrix + 1e-9), axis=1))

    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] *= (degree_centrality[i] + degree_centrality[j]) / 2
                heuristic_matrix[i, j] /= (geometric_mean_centrality[i] * geometric_mean_centrality[j])**0.5 #Penalize edges with nodes far from geometric center.

    # Adaptive sparsification based on dynamic percentile threshold
    flattened_distances = distance_matrix.flatten()
    percentile_threshold = np.percentile(flattened_distances, 75)  # Adjust percentile as needed

    for i in range(n):
        for j in range(n):
            if distance_matrix[i, j] > percentile_threshold:
                heuristic_matrix[i, j] = 0

    # Local normalization (row and column means)
    row_means = np.mean(heuristic_matrix, axis=1, keepdims=True)
    col_means = np.mean(heuristic_matrix, axis=0, keepdims=True)
    heuristic_matrix /= (row_means + col_means + 1e-9) / 2  #Combined row and column normalization

    # Controlled randomness for exploration (add small random noise)
    random_noise = np.random.rand(n, n) * 0.01  # Adjust noise level as needed
    heuristic_matrix += random_noise

    # Final adjustment based on inverse square of the distance
    heuristic_matrix = heuristic_matrix / (distance_matrix**2 + 1e-9)

    # Normalize the heuristic matrix to a range of 0 to 1
    max_val = np.max(heuristic_matrix)
    min_val = np.min(heuristic_matrix)

    if max_val > min_val:
        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    else:
        heuristic_matrix = np.ones_like(heuristic_matrix) * 0.5

    return heuristic_matrix
```
