```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP based on distance, degree centrality,
    adaptive sparsification and normalization.
    """
    n = distance_matrix.shape[0]

    # Initialize heuristic matrix with inverse distance
    heuristic_matrix = 1 / (distance_matrix + 1e-9)

    # Degree centrality heuristic
    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=1)

    # Normalize degree centrality
    degree_centrality = (degree_centrality - np.min(degree_centrality)) / (np.max(degree_centrality) - np.min(degree_centrality) + 1e-9)


    # Incorporate centrality into the heuristic
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] *= (degree_centrality[i] + degree_centrality[j]) / 2


    # Adaptive sparsification
    threshold_percentile = 75
    threshold = np.percentile(distance_matrix[distance_matrix > 0], threshold_percentile)
    sparse_mask = distance_matrix > threshold
    heuristic_matrix[sparse_mask] = 0

    # Global Normalization
    max_val = np.max(heuristic_matrix)
    min_val = np.min(heuristic_matrix)
    if max_val > min_val:
         heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    else:
         heuristic_matrix = np.ones_like(heuristic_matrix) * 0.5


    return heuristic_matrix
```
