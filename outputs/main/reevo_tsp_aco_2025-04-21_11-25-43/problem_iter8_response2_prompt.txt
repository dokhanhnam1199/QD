{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for TSP based on distance, degree centrality, and sparsification.\n    \"\"\"\n    n = distance_matrix.shape[0]\n\n    # Initialize the heuristic matrix with the inverse square of the distance\n    heuristic_matrix = 1 / (distance_matrix**2 + 1e-9)\n\n    # Degree centrality heuristic (scaled inverse distance sum)\n    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=1) / n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristic_matrix[i, j] *= (degree_centrality[i] + degree_centrality[j]) / 2\n\n    # Local normalization (row-wise)\n    row_sums = np.sum(heuristic_matrix, axis=1, keepdims=True)\n    heuristic_matrix = np.where(row_sums > 0, heuristic_matrix / row_sums, 0)\n\n    # Adaptive sparsification based on average distance and degree centrality\n    avg_distance = np.mean(distance_matrix)\n    sparsification_threshold = avg_distance * (1 + 0.5 * np.std(degree_centrality))\n\n    for i in range(n):\n        for j in range(n):\n            if distance_matrix[i, j] > sparsification_threshold:\n                heuristic_matrix[i, j] = 0\n\n    # Geometric mean centrality penalty (dampened)\n    centrality_product = np.sqrt(degree_centrality[np.newaxis, :] * degree_centrality[:, np.newaxis])\n    heuristic_matrix /= (1 + 0.1 * centrality_product)\n\n    # Control randomness: add a small amount of uniform noise\n    noise = 0.01 * np.random.rand(n, n)\n    heuristic_matrix += noise\n\n    # Normalize the heuristic matrix to a range of 0 to 1\n    max_val = np.max(heuristic_matrix)\n    min_val = np.min(heuristic_matrix)\n\n    if max_val > min_val:\n        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)\n    else:\n        heuristic_matrix = np.ones_like(heuristic_matrix) * 0.5\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for TSP based on distance, degree centrality, and adaptive sparsification.\n    \"\"\"\n    n = distance_matrix.shape[0]\n\n    # Initialize the heuristic matrix with inverse square distance\n    heuristic_matrix = 1 / (distance_matrix**2 + 1e-9)\n\n    # Degree centrality heuristic with careful weighting\n    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=1)\n    degree_centrality_normalized = degree_centrality / np.max(degree_centrality)  # Normalize for stability\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristic_matrix[i, j] *= (0.7*degree_centrality_normalized[i] + 0.3*degree_centrality_normalized[j])\n\n    # Adaptive Sparsification based on row/column statistics\n    for i in range(n):\n        row_mean = np.mean(distance_matrix[i, :])\n        col_mean = np.mean(distance_matrix[:, i])\n        sparsification_threshold = 0.75 * (row_mean + col_mean) / 2  # Adaptive threshold\n\n        for j in range(n):\n            if distance_matrix[i, j] > sparsification_threshold:\n                heuristic_matrix[i, j] = 0\n\n    # Local normalization to enhance contrast within rows/columns\n    for i in range(n):\n        row_max = np.max(heuristic_matrix[i, :])\n        row_min = np.min(heuristic_matrix[i, :])\n        if row_max > row_min:\n            heuristic_matrix[i, :] = (heuristic_matrix[i, :] - row_min) / (row_max - row_min)\n        else:\n            heuristic_matrix[i, :] = np.ones_like(heuristic_matrix[i, :]) * 0.5\n\n    return heuristic_matrix\n\n[Reflection]\nSparsification adapts better to local data. Normalization and centrality weighting improve stability.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}