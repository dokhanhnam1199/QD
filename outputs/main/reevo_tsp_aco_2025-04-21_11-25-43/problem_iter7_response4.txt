```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP based on distance, degree centrality, and sparsification.
    """
    n = distance_matrix.shape[0]

    # Initialize the heuristic matrix with the inverse square of the distance
    heuristic_matrix = 1 / (distance_matrix**2 + 1e-9)

    # Node degree heuristic based on inverse distances
    node_degree = np.sum(1 / (distance_matrix + 1e-9), axis=1)

    # Incorporate node degree into the heuristic
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] *= (node_degree[i] + node_degree[j]) / 2

    # Adaptive sparsification based on row-wise normalization
    for i in range(n):
        row = distance_matrix[i, :]
        avg_distance = np.mean(row)
        sparsification_threshold = 1.2 * avg_distance  # Adaptive threshold

        for j in range(n):
            if i != j and distance_matrix[i, j] > sparsification_threshold:
                heuristic_matrix[i, j] = 0

    # Geometric mean centrality penalty (cautiously applied)
    centrality = np.sqrt(np.mean(distance_matrix, axis=0) * np.mean(distance_matrix, axis=1))

    for i in range(n):
        for j in range(n):
             if i != j:
                heuristic_matrix[i, j] /= (centrality[i] * centrality[j] + 1e-9)**0.1

    # Local (row/column) normalization
    for i in range(n):
        row_sum = np.sum(heuristic_matrix[i, :])
        if row_sum > 0:
            heuristic_matrix[i, :] /= row_sum

    # Control randomness (add small amount of noise)
    noise = np.random.rand(n, n) * 0.01
    heuristic_matrix += noise

    # Normalize to 0-1 range
    max_val = np.max(heuristic_matrix)
    min_val = np.min(heuristic_matrix)

    if max_val > min_val:
        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    else:
        heuristic_matrix = np.ones_like(heuristic_matrix) * 0.5


    return heuristic_matrix
```
