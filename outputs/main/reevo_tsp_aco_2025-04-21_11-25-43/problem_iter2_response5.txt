```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP).

    This version refines the heuristics by incorporating global distance normalization,
    dynamic sparsification based on percentiles, and a node degree penalty based on
    neighbor counts, aiming for better exploration and solution quality.

    Args:
        distance_matrix (np.ndarray): A square matrix where `distance_matrix[i, j]`
            represents the distance between node `i` and node `j`.

    Returns:
        np.ndarray: A matrix of the same shape as `distance_matrix`, where each
            element indicates the heuristic value (promise) of including the
            corresponding edge in a TSP solution. Higher values indicate a more
            promising edge.
    """

    n = distance_matrix.shape[0]

    # 1. Inverse Distance (primary factor)
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero

    # 2. Node Degree Penalty using Neighbor Counts
    neighbor_counts = np.sum(heuristic_matrix > 0, axis=0)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] /= (neighbor_counts[i] + neighbor_counts[j] + 1e-9)  # Penalize based on number of existing connections

    # 3. Global Distance Normalization
    average_distance = np.mean(distance_matrix[distance_matrix != np.inf])
    heuristic_matrix *= (average_distance / (np.mean(distance_matrix) + 1e-9))  # Scale based on average

    # 4. Dynamic Sparsification based on Percentiles
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 40) # Dynamic Sparsity: consider only top 60%
    heuristic_matrix[heuristic_matrix < threshold] = 0.0  # Set low-promise edges to zero

    return heuristic_matrix
```
