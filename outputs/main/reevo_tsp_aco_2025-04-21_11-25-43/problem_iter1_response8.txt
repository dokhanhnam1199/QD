```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using stochastic solution sampling principles.

    Combines several factors to determine the desirability of including each edge:
    1. Inverse Distance:  Shorter distances are generally more desirable.
    2. Node Degree Preference:  Encourages a relatively balanced degree for each node.
       Nodes with very few connections are strongly encouraged to connect to closer nodes.
    3. Sparsification: Sets probabilities of very long edges to zero to reduce the search space.

    Args:
        distance_matrix (np.ndarray):  A square matrix where [i, j] is the distance
                                       between node i and node j. Diagonal elements should be 0,
                                       and the matrix should be symmetric.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, representing
                    the desirability of including each edge in the TSP tour.
                    Higher values indicate more promising edges.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # 2. Node Degree Preference
    degree_preference = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        # Calculate distances from node i to all other nodes
        distances = distance_matrix[i, :]
        
        # Sort distances in ascending order
        sorted_indices = np.argsort(distances)
        
        # Give higher preference to the closest nodes
        for j in range(1, min(4,n)): # consider a few closest neighbors
            degree_preference[i, sorted_indices[j]] = 1.0 #/distances[sorted_indices[j]]
            degree_preference[sorted_indices[j], i] = 1.0

    # 3. Sparsification
    max_distance = np.max(distance_matrix)
    sparsification_threshold = 0.75 * max_distance  # Remove long edges

    # Combine factors
    heuristic_matrix = inverse_distance + degree_preference

    # Apply sparsification
    heuristic_matrix[distance_matrix > sparsification_threshold] = 0

    # Normalize to get probabilities between 0 and 1.  Important for stochastic sampling.
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic

    return heuristic_matrix
```
