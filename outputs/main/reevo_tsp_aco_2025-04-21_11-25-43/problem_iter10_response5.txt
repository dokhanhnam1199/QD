```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP with refined sparsification, reduced randomness,
    and carefully tuned normalization and edge weighting.
    """
    n = distance_matrix.shape[0]

    # Initialize heuristic matrix with inverse distance
    heuristic_matrix = 1 / (distance_matrix + 1e-9)

    # Node degree centrality heuristic
    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=1)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] *= (degree_centrality[i] + degree_centrality[j]) / 2

    # Adaptive sparsification with refined dynamic threshold
    for i in range(n):
        neighbors = distance_matrix[i, :].copy()
        neighbors[i] = np.inf
        nearest_neighbors_indices = np.argsort(neighbors)[:4]  # Top 4 nearest neighbors
        avg_neighbor_distance = np.mean(distance_matrix[i, nearest_neighbors_indices])
        dynamic_threshold = 1.25 * avg_neighbor_distance  # Tuned threshold multiplier

        for j in range(n):
            if i != j and distance_matrix[i, j] > dynamic_threshold:
                heuristic_matrix[i, j] *= 0.05  # Further reduced penalty for stronger sparsification

    # Reduced randomness
    randomness_factor = 0.002  # Even smaller randomness strength
    random_matrix = np.random.rand(n, n) * randomness_factor
    heuristic_matrix += random_matrix

    # Enhanced normalization and scaling with tuned exponent
    heuristic_matrix = heuristic_matrix / (distance_matrix + 1e-9)**0.35  # Adjusted exponent

    max_val = np.max(heuristic_matrix)
    min_val = np.min(heuristic_matrix)

    if max_val > min_val:
        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)  # Proper normalization
    else:
        heuristic_matrix = np.ones_like(heuristic_matrix) * 0.5

    return heuristic_matrix
```
