```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP based on distance, degree centrality, and sparsification.
    """
    n = distance_matrix.shape[0]

    # Initialize the heuristic matrix with the inverse of the distance
    heuristic_matrix = 1 / (distance_matrix + 1e-9)

    # Degree centrality heuristic
    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=1)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] *= (degree_centrality[i] + degree_centrality[j]) / 2

    # Sparsification
    avg_distance = np.mean(distance_matrix)
    sparsification_threshold = 1.5 * avg_distance

    for i in range(n):
        for j in range(n):
            if distance_matrix[i, j] > sparsification_threshold:
                heuristic_matrix[i, j] = 0
    heuristic_matrix = heuristic_matrix / (distance_matrix**2 + 1e-9)

    # Normalize the heuristic matrix to a range of 0 to 1
    max_val = np.max(heuristic_matrix)
    min_val = np.min(heuristic_matrix)

    if max_val > min_val:
        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    else:
        heuristic_matrix = np.ones_like(heuristic_matrix) * 0.5

    return heuristic_matrix
```
