```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors and sparsification.

    Combines inverse distance with node degree and adds a stochastic element.
    Also, applies sparsification based on relative distances.

    Args:
        distance_matrix: A numpy array representing the distance matrix.

    Returns:
        A numpy array of the same shape as distance_matrix, representing the
        prior indicators of how promising it is to include each edge in a solution.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Inverse distance as a base heuristic
    inverse_distance = 1 / (distance_matrix + 1e-6)  # Add a small constant to avoid division by zero

    # Node degree heuristic: penalize edges connected to nodes with many close neighbors
    degree_penalty = np.zeros_like(distance_matrix)
    for i in range(n):
        # Find indices of neighbors sorted by distance
        neighbor_indices = np.argsort(distance_matrix[i])
        # Penalize edges based on the rank of the other node in sorted neighbors
        for j in range(n):
            rank = np.where(neighbor_indices == j)[0][0]
            degree_penalty[i, j] = 1 / (rank + 1) # Reward edges to nearer neighbours

    # Combine inverse distance and degree penalty
    heuristics = inverse_distance * degree_penalty

    # Stochastic element: add a small random value to each heuristic
    heuristics += np.random.rand(n, n) * 0.1

    # Sparsification: set unpromising edges to zero
    # Only keep edges that are within a certain factor of the minimum distance for each node
    for i in range(n):
        min_dist = np.min(distance_matrix[i][distance_matrix[i] > 0]) # Avoid zero-distance to same node
        threshold = 3 * min_dist # Factor determining sparseness; was 1.5, now 3 for sparser
        for j in range(n):
            if distance_matrix[i, j] > threshold:
                heuristics[i, j] = 0
            if i == j: # explicitly set distance to self to be zero
                heuristics[i, j] = 0

    return heuristics
```
