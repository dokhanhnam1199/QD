```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP based on distance, degree centrality, geometric mean centrality,
    adaptive sparsification with percentile thresholds, and distance-squared scaling
    with local normalization.
    """
    n = distance_matrix.shape[0]

    # Initialize the heuristic matrix
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Distance-squared scaling
    distance_squared = distance_matrix**2

    # Degree centrality heuristic
    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=1)

    # Geometric mean centrality
    geometric_mean_centrality = np.exp(np.mean(np.log(1 / (distance_matrix + 1e-9) + 1e-9), axis=1))


    # Combine factors
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] = (degree_centrality[i] * degree_centrality[j]) / (distance_squared[i, j] + 1e-9)
                heuristic_matrix[i, j] *= np.sqrt(geometric_mean_centrality[i] * geometric_mean_centrality[j])

    # Adaptive sparsification with percentile threshold
    threshold_percentile = 75
    threshold = np.percentile(distance_matrix[distance_matrix > 0], threshold_percentile) # Avoid percentile on zero values

    sparsified_matrix = np.where(distance_matrix > threshold, 0, distance_matrix)
    heuristic_matrix[distance_matrix > threshold] = 0

    # Local normalization
    for i in range(n):
        row = heuristic_matrix[i, :]
        max_val = np.max(row)
        min_val = np.min(row)

        if max_val > min_val:
            heuristic_matrix[i, :] = (row - min_val) / (max_val - min_val)
        else:
            heuristic_matrix[i, :] = np.ones_like(row) * 0.5  # Handle cases with uniform values


    return heuristic_matrix
```
