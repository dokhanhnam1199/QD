{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Traveling Salesman Problem (TSP) using a combination of factors.\n\n    This heuristic combines the inverse distance with node degree desirability and sparsifies the\n    matrix by setting unpromising edges to zero based on a threshold.\n\n    Args:\n        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix\n                                         between cities.  distance_matrix[i, j] is the distance\n                                         between city i and city j.\n\n    Returns:\n        np.ndarray: A 2D numpy array of the same shape as distance_matrix, representing\n                    the prior indicators (heuristics) for each edge.  Higher values indicate\n                    more promising edges.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix, dtype=float)\n\n    # Inverse distance component\n    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add small value to avoid division by zero\n\n    # Node degree component (desirability of connecting to low-degree nodes)\n    degree_desirability = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                degree_desirability[i, j] = 1.0 # Initialized with equal desirability.\n\n    # Combined heuristic\n    heuristics = inverse_distance * degree_desirability\n\n    # Sparsify the matrix (zero out less promising edges)\n    threshold = np.quantile(heuristics[heuristics > 0], 0.25)  # Keep top 75% of edges, must filter out zero values.\n    heuristics[heuristics < threshold] = 0\n\n    #Remove self-loops\n    for i in range(n):\n      heuristics[i,i] = 0\n    return heuristics\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Traveling Salesman Problem (TSP) using a combination of factors\n    and sparsification.\n\n    Args:\n        distance_matrix (np.ndarray): A square matrix representing the distances between nodes.\n\n    Returns:\n        np.ndarray: A matrix of the same shape as distance_matrix, where each element indicates\n                    how promising it is to include the corresponding edge in a solution.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n\n    # 1. Inverse distance: Shorter distances are generally more promising.\n    inverse_distance = 1 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero\n\n    # 2. Nearest neighbor heuristic: Prioritize edges to nearest neighbors.\n    nearest_neighbors = np.zeros_like(distance_matrix)\n    for i in range(n):\n        sorted_indices = np.argsort(distance_matrix[i, :])\n        # Consider the k nearest neighbors. k can be a parameter. Let's use k=5.\n        k = min(5, n)\n        for j in sorted_indices[1:k]:  # Exclude the node itself (distance 0)\n            nearest_neighbors[i, j] = 1\n            nearest_neighbors[j, i] = 1 # Ensure symmetry\n\n    # 3. Combination of factors: Combine inverse distance and nearest neighbor information.\n    # You can adjust the weights to experiment with different strategies.\n    heuristic_matrix = inverse_distance * (0.7 + 0.3 * nearest_neighbors)  # More weight to inverse distance\n\n    # 4. Sparsification: Set unpromising edges to zero to reduce the search space.\n    #   - Threshold based on the average distance\n    average_distance = np.mean(distance_matrix[distance_matrix > 0]) # only consider nonzero elements when averaging.\n    threshold = 2.0 / average_distance # You can tune this scaling\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n    \n    # Ensure the diagonal elements are 0. It is useful for enforcing constraint.\n    for i in range(n):\n        heuristic_matrix[i, i] = 0.0\n        \n    # Ensure symmetry.\n    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2\n\n    return heuristic_matrix\n\n[Reflection]\nNearest neighbor prioritization, adaptive thresholding, and symmetry enforcement improve heuristic quality.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}