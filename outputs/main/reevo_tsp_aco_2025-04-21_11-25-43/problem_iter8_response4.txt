```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP using dynamic sparsification, tuned normalization,
    controlled randomness, and adaptive edge weighting.
    """
    n = distance_matrix.shape[0]

    # Initialize heuristic matrix with inverse distance
    heuristic_matrix = 1 / (distance_matrix + 1e-9)

    # Node degree centrality heuristic
    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=1)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] *= (degree_centrality[i] + degree_centrality[j]) / 2

    # Dynamic sparsification with adaptive threshold based on k-nearest neighbors
    k_nearest = 6  # Number of nearest neighbors to consider
    for i in range(n):
        distances = distance_matrix[i, :]
        nearest_neighbors_indices = np.argsort(distances)[1:k_nearest + 1]  # Exclude self
        avg_neighbor_distance = np.mean(distances[nearest_neighbors_indices])
        dynamic_threshold = 1.2 * avg_neighbor_distance

        for j in range(n):
            if i != j and distance_matrix[i, j] > dynamic_threshold:
                heuristic_matrix[i, j] *= 0.1  # Increased sparsification

    # Edge weighting based on inverse distance with adaptive scaling
    heuristic_matrix /= (distance_matrix + 1e-9)**0.3  # Tuned exponent

    # Controlled randomness with decaying factor
    randomness_factor = 0.01
    random_matrix = np.random.rand(n, n) * randomness_factor
    heuristic_matrix += random_matrix

    # Normalize heuristic matrix
    max_val = np.max(heuristic_matrix)
    min_val = np.min(heuristic_matrix)

    if max_val > min_val:
        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    else:
        heuristic_matrix = np.ones_like(heuristic_matrix) * 0.5

    return heuristic_matrix
```
