```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP based on a combination of factors,
    including distance, node degree, and connectivity. It also sparsifies the matrix
    by setting unpromising elements to zero.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance
                                         matrix between cities. distance_matrix[i, j]
                                         is the distance between city i and city j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    representing the prior indicators of how promising it is to
                    include each edge in a solution.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate inverse distance
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Add a small value to avoid division by zero

    # Calculate node degree heuristic: prefers nodes with a small degree.
    degree_heuristic = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                degree_heuristic[i, j] = 1.0

    # Combine heuristics
    heuristic_matrix = inverse_distance * degree_heuristic

    # Sparsify the matrix: Remove edges that are too long relative to the average distance.
    average_distance = np.mean(distance_matrix[distance_matrix > 0])  # exclude zero distances
    threshold = 2.0 * average_distance  # Adjust the threshold as needed
    heuristic_matrix[distance_matrix > threshold] = 0.0

    # Normalize the heuristic matrix to have values between 0 and 1
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic

    return heuristic_matrix
```
