```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Adaptive hybrid priority combining z-scored fit quality/capacity, exponential utilization enhancement, and layered tightness-weighted metrics.
    Encourages best-fit in high-utilization bins while dynamically balancing with worst-fit for small items.
    """
    if bins_remain_cap.size == 0:
        return np.array([], dtype=np.float64)
    
    orig_cap = np.max(bins_remain_cap)
    if orig_cap <= 1e-9 or item <= 1e-9:
        return np.where(
            bins_remain_cap >= item,
            1.0 / (bins_remain_cap - item + 1e-9),
            -np.inf
        )
    
    eligible = bins_remain_cap >= item
    leftover = bins_remain_cap - item
    utilization = (orig_cap - bins_remain_cap) / orig_cap
    tightness = item / (bins_remain_cap + 1e-9)
    
    # Z-score normalized fit and capacity for fair comparison
    fit_quality = 1.0 / (leftover + 1e-9)
    elig_fit = fit_quality[eligible]
    elig_cap = bins_remain_cap[eligible]
    
    if elig_fit.size == 0:
        return np.full_like(fit_quality, -np.inf, dtype=np.float64)
    
    # Z-score calculation
    mean_fit, std_fit = np.mean(elig_fit), np.std(elig_fit)
    z_fit = (fit_quality - mean_fit) / (std_fit + 1e-9)
    
    mean_cap, std_cap = np.mean(elig_cap), np.std(elig_cap)
    z_cap = (bins_remain_cap - mean_cap) / (std_cap + 1e-9)
    
    # Dynamic best/worst-fit blend with exponential utilization boost
    primary_score = tightness * z_fit + (1.0 - tightness) * z_cap
    enhancer = np.exp(utilization * tightness)  # Exponential amplification for utilized bins
    
    return np.where(eligible, primary_score * enhancer, -np.inf)
```
