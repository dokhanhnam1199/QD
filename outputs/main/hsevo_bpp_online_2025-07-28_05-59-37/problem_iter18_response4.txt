```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    if bins_remain_cap.size == 0:
        return np.array([], dtype=np.float64)
    
    orig_cap = np.max(bins_remain_cap)
    if orig_cap <= 1e-9 or item <= 1e-9:
        return np.where(
            bins_remain_cap >= item,
            bins_remain_cap - item + 1e-9,
            -np.inf
        )
    
    eligible = bins_remain_cap >= item
    if not np.any(eligible):
        return np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    
    el_remain = bins_remain_cap[eligible]
    el_leftover = el_remain - item
    
    median_L = np.median(el_leftover)
    range_L = el_leftover.max() - el_leftover.min()
    if range_L > 0:
        var_pen = np.abs(el_leftover - median_L) / range_L
    else:
        var_pen = np.zeros_like(el_leftover, dtype=np.float64)
    
    median_remain = np.median(el_remain)
    weight_t = item / (median_remain + 1e-9)
    weight_v = 1.0 - weight_t
    
    tightness = item / (el_remain + 1e-9)
    base_priority = weight_t * tightness - weight_v * var_pen
    
    tie_breaker = -1e-9 * el_leftover
    final_priority = base_priority + tie_breaker
    
    priority = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    priority[eligible] = final_priority
    
    return priority
```
