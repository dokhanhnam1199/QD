{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Z-score normalized balance with exponential utilization boosting and adaptive component weights.\n    \n    Combines dynamic BF/WF tendencies separated by item class with entropy-driven balance control \n    and hierarchical tie-breakers using:\n    - Adaptive weights based on system CV and leftover variance\n    - Exponential utilization enhancement for dynamic differentiation\n    - Multi-metric synergy (tightness + balance + utilization)\n    - Z-score normalization of key components\n    \"\"\"\n    if len(bins_remain_cap) == 0:\n        return np.array([], dtype=np.float64)\n    \n    valid_mask = bins_remain_cap >= item\n    priority = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)\n    \n    if not np.any(valid_mask):\n        return priority\n    \n    # System metrics\n    system_avg = bins_remain_cap.mean()\n    system_std = bins_remain_cap.std()\n    system_cv = system_std / (system_avg + 1e-9) if system_avg > 1e-9 else 0.0\n    \n    # Item classification\n    large_item = item > system_avg  # Threshold at system mean\n    \n    # Primary metrics\n    leftover = bins_remain_cap - item\n    valid_leftover = leftover[valid_mask]\n    \n    # Exponential utilization enhancement\n    utilization = np.zeros_like(bins_remain_cap, dtype=np.float64)\n    np.divide(item, bins_remain_cap, where=valid_mask, out=utilization)\n    exp_util = np.exp(utilization * (1.5 if large_item else 2.5))  # Dynamic scaling\n    \n    # Z-score normalized components\n    tightness_z = (-leftover - system_avg) / (system_std + 1e-9)  # Negative space\n    bin_cap_z = (bins_remain_cap - system_avg) / (system_std + 1e-9)  # Fullness\n    \n    # Core terms\n    tightness_component = tightness_z - 1e-5 * bin_cap_z  # Encourage tighter fits\n    \n    # System balance term\n    load_balance = -np.abs(leftover - system_avg) / (system_std + 1e-9)\n    balance_weight = 1.5 * np.sqrt(system_cv) * (1.5 if not large_item else 1.0)\n    \n    # Entropy-regularized tiebreaker\n    leftover_std = np.std(valid_leftover) if len(valid_leftover) > 1 else 1e-6\n    util_weight = 0.8 / (leftover_std + 1e-9)\n    \n    # Synergistic combination\n    priority[valid_mask] = (\n        tightness_component[valid_mask] * (1.2 if large_item else 1.0)\n        + balance_weight * load_balance[valid_mask]\n        + util_weight * exp_util[valid_mask]\n    )\n    \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Multi-objective priority with adaptive normalization, entropy-aware variance control, \n    and reinforcement-inspired dynamics. Blends z-score metrics, gradient-driven enhancements, \n    and variance-based entropy penalties for robust online bin selection.\n    \"\"\"\n    if bins_remain_cap.size == 0:\n        return np.array([], dtype=np.float64)\n    \n    eligible = bins_remain_cap >= item\n    if not np.any(eligible):\n        return np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)\n    \n    remaining = bins_remain_cap.astype(np.float64)\n    orig_cap = np.max(remaining)\n    \n    # Dynamic blending parameter\n    eligible_remaining = remaining[eligible]\n    median_rem = np.median(eligible_remaining)\n    relative_size = item / (median_rem + 1e-9)\n    blending = 1.0 / (1.0 + np.exp(-5 * (relative_size - 0.5)))\n    \n    # Core metrics\n    leftover = remaining - item\n    fit_metric = 1.0 / (leftover + 1e-9)                # Tightest fit preference\n    space_metric = remaining                           # Capacity preservation\n    tightness = item / (remaining + 1e-9)               # Local fit severity\n    bin_utilization = (orig_cap - remaining) / (orig_cap + 1e-9)  # Global bin status\n    \n    # Z-score normalization\n    fit_mean, fit_std = fit_metric[eligible].mean(), fit_metric[eligible].std()\n    fit_z = (fit_metric - fit_mean) / (fit_std + 1e-9)\n    \n    space_mean, space_std = space_metric[eligible].mean(), space_metric[eligible].std()\n    space_z = (space_metric - space_mean) / (space_std + 1e-9)\n    \n    # Primary score with adaptive balancing\n    primary_score = blending * fit_z + (1 - blending) * space_z\n    \n    # Nonlinear modifiers\n    residual_mod = -np.log(1 + leftover / (orig_cap + 1e-9))  # Elastic space penalty\n    efficiency_bonus = residual_mod * tightness / (np.sqrt(bin_utilization + 1e-9) + 1)\n    \n    # Dynamic boosting mechanism\n    enhancer = np.exp(2 * tightness) * np.clip((1 - bin_utilization)**3, 0, 1)\n    \n    # System-wide feedback\n    sys_stats = remaining.mean(), remaining.std()\n    sys_cv = sys_stats[1] / sys_stats[0] if sys_stats[0] > 1e-9 else float('inf')\n    \n    # Reinforcement learning inspiration\n    fragility = np.abs(orig_cap - remaining) / (orig_cap + 1e-9)\n    reinforcement = 1 + np.clip((1 - relative_size)**2 * (1 - bin_utilization) * fragility, 0, 3)\n    \n    # Entropy-aware tiebreaker (variance delta)\n    bin_count = remaining.size\n    sum_total = remaining.sum()\n    sum_sq = (remaining**2).sum()\n    new_sum_sq = sum_sq - (2 * item) * remaining + item**2  # \u0394(sum squares) per bin\n    mu_new = (sum_total - item) / bin_count\n    var_new = (new_sum_sq / bin_count) - mu_new**2\n    \n    var_sensitivity = 0.1 * (1 + np.sqrt(sys_cv + 1e-9))\n    var_term = var_sensitivity * (-var_new) / (np.sqrt(np.abs(var_new) + 1e-9) + 1e-5)\n    \n    # Final priority calculation\n    return np.where(\n        eligible,\n        (primary_score + 0.75 * efficiency_bonus) * enhancer * reinforcement + var_term,\n        -np.inf\n    )\n\n### Analyze & experience\n- Comparing (1st) vs (18th), we see the top heuristic integrates **Z-normalized multiscale synergy** (tight-fit/utilization) with entropy-driven fragmentation control vs basic BF/WF blending. The 1st uses adaptive frag weight (sys_entropy), while 18th uses fixed exponential penalty.  \n(4th) vs (19th): 4th implements **cross-metric variance adaptation** (synergy = z_tight * (1 + z_util)) and adaptive frag weights, whereas 19th uses simpler median alignment without dynamic entropy scaling.  \n(11th) vs (20th): Both lack unique features of top heuristics like perturbed thresholds and gradient-boosted enhancer. 11th's entropy-regularized tiebreakers are less nuanced than top-ranked heuristics.  \nComparing (1st) vs (4th): The former uses layered priortization with perturbed thresholds and exponential utilization enhancer, while the latter emphasizes entropy-adjusted frag penalty. Top heuristics excel in **hierarchical reinforcement** and **dynamic hybrid weighting**.\n- \n**Keywords**: Z-score synergy, entropy-sensitive penalties, perturbation mechanisms, dynamic weight optimization  \n**Advice**: Embrace reinforcement-inspired gain adaptation for hierarchical metrics, integrate predictive entropy modeling to anticipate system imbalance, refine tie-breaking via multi-dimensional sensitivity (e.g., combining variance and gradient metrics), and leverage meta-heuristics for self-adjusting weight gradients.  \n**Avoid**: Precomputed weight distributions, rigid penalization structures, low-resolution thresholds, or scale-agnostic normalization.  \n**Explanation**: These strategies enhance adaptability and foresight in dynamic environments, balancing short-term fit with long-term system resilience while mitigating overfitting to transient states.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}