```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best Fit with dynamic hybrid Worst Fit using real-time average to reduce fragility and improve bin usage."""
    can_fit = bins_remain_cap >= item
    
    # Calculate dynamic threshold based on average remaining capacity
    avg_remaining = np.mean(bins_remain_cap) if bins_remain_cap.size else 1.0
    
    # Switch between best-fit and worst-fit based on item size relative to current system state
    if item > avg_remaining:
        # Best Fit for larger items: minimize leftover space (directly from v0)
        priority = np.where(can_fit, -(bins_remain_cap - item), -np.inf)
    else:
        # Worst Fit for smaller items: preserve larger gaps (enhanced by v1's non-tight logic)
        priority = np.where(can_fit, bins_remain_cap - item, -np.inf)
    
    return priority
```
