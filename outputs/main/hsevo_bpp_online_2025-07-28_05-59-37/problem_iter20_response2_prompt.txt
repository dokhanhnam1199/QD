{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Predictive variance-aware packing using min-max synergy and entropy-agnostic reinforcement.\n    Combines normalized fit-tightness/utilization with proximity-based penalties and fragility-aware reinforcer.\n    \"\"\"\n    eps = 1e-9\n    if bins_remain_cap.size == 0:\n        return np.array([], dtype=np.float64)\n    \n    eligible = bins_remain_cap >= item\n    if not eligible.any():\n        return np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)\n    \n    orig_cap = bins_remain_cap.max()\n    remaining_cap = bins_remain_cap[eligible]\n    leftover = remaining_cap - item + eps\n    \n    # Metric calculation\n    fit_tightness = item / (remaining_cap + eps)\n    util_after = (orig_cap - remaining_cap + item) / (orig_cap + eps)\n    \n    # System metrics\n    system_avg = bins_remain_cap.mean()\n    system_std = bins_remain_cap.std() + eps\n    \n    # Min-max normalization\n    def minmax_normalize(x):\n        xmin, xmax = x.min(), x.max()\n        if xmax > xmin:\n            return (x - xmin) / (xmax - xmin)\n        return np.full_like(x, 0.5)\n    \n    norm_fit = minmax_normalize(fit_tightness)\n    norm_util = minmax_normalize(util_after)\n    \n    # Hybrid score with static weights\n    hybrid = 0.6 * norm_fit + 0.4 * norm_util\n    boosted = hybrid ** 2  # Nonlinear amplification\n    \n    # Proximity-based penalty (distance from average leftover)\n    proximity = np.abs(leftover - system_avg) / system_std\n    proximity_penalty = np.exp(-proximity)\n    \n    # Reinforcement term: fragility * usability\n    fragility = util_after\n    usability = np.clip((system_avg - leftover) / system_std, -1.0, 1.0)\n    reinforcer = fragility * np.abs(usability)\n    \n    # Tie-breaker (epsilon-greedy preference for larger leftover)\n    tie_breaker = 0.01 * (leftover / (orig_cap + eps))\n    \n    # Final score assembly\n    eligible_scores = (\n        boosted * proximity_penalty \n        + reinforcer \n        + tie_breaker\n    )\n    \n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)\n    scores[eligible] = eligible_scores\n    \n    return scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Hybrid priority combining min-max synergy, predictive variance analysis,\n    and stability-aware reinforcement for online BPP. Uses item classification\n    and fragmentation-anticipation penalties.\n    \"\"\"\n    if bins_remain_cap.size == 0:\n        return np.array([], dtype=np.float64)\n    \n    if item <= 1e-9:\n        return np.where(bins_remain_cap >= 0, 0.01 * bins_remain_cap, -np.inf)\n    \n    eligible = bins_remain_cap >= item\n    if not np.any(eligible):\n        return np.full_like(bins_remain_cap, -np.inf)\n    \n    C_est = bins_remain_cap.max() if bins_remain_cap.max() > 0 else item * 2\n    \n    # Metric calculations\n    leftover = bins_remain_cap - item\n    tightness = item / (bins_remain_cap + 1e-9)\n    fit_score = 1.0 / (leftover + 1e-9)\n    \n    # Min-Max normalization\n    tight_min, tight_max = tightness[eligible].min(), tightness[eligible].max()\n    fit_min, fit_max = fit_score[eligible].min(), fit_score[eligible].max()\n    norm_tight = (tightness - tight_min) / (tight_max - tight_min + 1e-9)\n    norm_fit = (fit_score - fit_min) / (fit_max - fit_min + 1e-9)\n    \n    # Item classification and adaptive weights\n    is_large = item > 0.7 * C_est\n    fit_weight = 0.8 if is_large else 0.5\n    tight_weight = 0.2 if is_large else 0.5\n    base_score = fit_weight * norm_fit + tight_weight * norm_tight\n    \n    # Predictive variance modeling\n    n = len(bins_remain_cap)\n    current_sum = bins_remain_cap.sum()\n    current_sum_sq = (bins_remain_cap ** 2).sum()\n    current_var = (current_sum_sq / n) - (current_sum / n) ** 2\n    \n    new_cap_elig = bins_remain_cap[eligible] - item\n    delta_sq_elig = new_cap_elig**2 - bins_remain_cap[eligible]**2\n    new_sum_sq_elig = current_sum_sq + delta_sq_elig\n    new_mean_elig = (current_sum - item) / n\n    new_var_elig = (new_sum_sq_elig / n) - new_mean_elig**2\n    delta_var_elig = new_var_elig - current_var\n    \n    variance_term = np.zeros_like(bins_remain_cap, dtype=np.float64)\n    variance_term[eligible] = -delta_var_elig / (np.abs(current_var) + 1e-9)\n    \n    # Fragmentation anticipation\n    frag_term = np.zeros_like(bins_remain_cap)\n    frag_term[eligible] = np.exp(-leftover[eligible] / (C_est / 3 + 1e-9))\n    \n    # Stability preservation\n    median_cap = np.median(bins_remain_cap[eligible]) if eligible.any() else C_est\n    proximity = np.abs(bins_remain_cap - median_cap) / (C_est + 1e-9)\n    \n    # Priority assembly\n    priority = (\n        base_score\n        + 0.2 * variance_term\n        - 0.1 * frag_term\n        - 0.05 * proximity\n    )\n    \n    # Reinforcement decay\n    priority *= np.exp(-0.05 * leftover / (C_est + 1e-9))\n    \n    # Deterministic tie-breaking\n    priority += 1e-7 * (1.0 / (tightness + 1e-9)) * (1.0 / (proximity + 1e-9))\n    \n    return np.where(eligible, priority, -np.inf)\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see adaptive Z-score normalization and dynamic item classification in 1st enhance fit tightness and future flexibility, while 20th's static weights limit adaptability. (2nd) vs (19th) shows entropy-agnostic reinforcement and proximity penalties in 2nd improve balance, whereas 19th's rigid hybrid priority lacks system-wide variance reduction. (3rd) vs (18th) highlights predictive reinforcement and capacity clustering in 3rd outperform 18th's simplistic variance modeling. (5th) vs (16th) demonstrates fragmentation penalties and synergy scores in 5th reduce entropy better than 16th's basic hybrid approach. Overall, top heuristics integrate adaptive normalization, item-size-aware weights, predictive variance control, and entropy-driven balance, while lower ones rely on static metrics and incomplete system modeling.\n- \n\u2022 **Keywords**: adaptive normalization, dynamic weights, entropy-aware metrics, reinforcement learning  \n\u2022 **Advice**: Prioritize Z-score/min-max normalization without variance-ratio synergy, dynamic weights adjusted by real-time state/utilization gradients, entropy-aware balance via layered tie-breakers (e.g., fragility, load), and reinforcement-inspired gains avoiding predictive penalties.  \n\u2022 **Avoid**: Exponential boosting, perturbation-based tie-breaking, entropy penalties modulated by global metrics, Z-score synergy with variance ratios.  \n\u2022 **Explanation**: Enhances robustness by focusing on validated dynamic adaptation (not unstable perturbations/exponential boosts) and multi-objective synergy, ensuring heuristic stability and scalability without overfitting to transient system states.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}