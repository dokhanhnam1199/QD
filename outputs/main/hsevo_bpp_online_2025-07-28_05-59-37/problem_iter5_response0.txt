```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Priority combining inverse/exp tight fit with bin utilization via multiplicative synergy to prevent fragmentation."""
    if bins_remain_cap.size == 0:
        return np.array([], dtype=np.float64)
    
    orig_cap = bins_remain_cap.max()
    eps = 1e-9
    mask = bins_remain_cap >= item
    scores = np.full_like(bins_remain_cap, -np.inf)
    
    if not mask.any():
        return scores
    
    remaining = bins_remain_cap[mask]
    inv_waste = 1.0 / (remaining - item + eps)
    exp_waste = np.exp(-(remaining - item))
    tight_fit = inv_waste + exp_waste  # Tightness focus
    
    bin_utilization = (orig_cap - remaining) / (orig_cap + eps)  # Current utilization
    
    # Multiplicative synergy: amplify tight_fit in utilized bins to guide system towards packing dense clusters
    scores[mask] = tight_fit * (1 + bin_utilization)
    
    return scores
```
