{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combine v0's dynamic class with v1's balance using adaptive weights.\n\n    Uses item classification for epsilon scaling and adds system balance scaled by fragmentation level.\n    \"\"\"\n    if len(bins_remain_cap) == 0:\n        return np.array([], dtype=np.float64)\n    \n    threshold = np.mean(bins_remain_cap)\n    large_item = item > threshold\n\n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return -np.inf * np.ones_like(bins_remain_cap)\n    \n    remaining_after = bins_remain_cap - item\n\n    # Base priority from v0\n    epsilon = 1e-6 if large_item else 1e-3\n    base_priority = -remaining_after - epsilon * bins_remain_cap\n\n    # System-wide balance metrics\n    system_avg = bins_remain_cap.mean()\n    system_std = bins_remain_cap.std()\n    system_cv = system_std / (system_avg + 1e-9)\n    \n    # Adaptive balance weight: higher for fragmentation (system_cv) and small items\n    load_balance_score = -np.abs(remaining_after - system_avg)\n    balance_weight = 0.1 * system_cv * (2 if not large_item else 1)\n\n    # Combine components with dynamic synergy\n    priority = base_priority + balance_weight * load_balance_score\n\n    return np.where(valid, priority, -np.inf)\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Sigmoid blending of Best and Worst Fit with adaptive utilization tie-breaker and leftover variance scaling.\n    \n    Primary priority combines BFT tightness (negative leftover) and WFT spreading \n    (bin_remaining) through a smooth function of item size relative to system average. \n    Adaptive epsilon scaling preserves utilization dynamics for robust tie-breaking.\n    \"\"\"\n    mask = bins_remain_cap >= item\n    priority = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)\n\n    if not bins_remain_cap.size or not np.any(mask):\n        return priority\n\n    # Core fit metrics\n    leftover = bins_remain_cap - item\n    bft = -leftover  # Best Fit Term (negative leftover)\n    wft = bins_remain_cap  # Worst Fit candidate bins\n\n    # Dynamic blending factor via item-to-average ratio\n    avg_remaining = np.mean(bins_remain_cap)\n    # Normalize difference to system-scale (prevent saturation at extreme values)\n    sigmoid_input = (item - avg_remaining) / (avg_remaining + 1e-8)  \n    # Higher sigmoid_weight = preferred WFT for smaller items\n    sigmoid_weight = 1.0 / (1.0 + np.exp(sigmoid_input))  \n\n    # Blend BF/WF preferences: WFT dominates for smaller items\n    combined = (1 - sigmoid_weight) * bft + sigmoid_weight * wft\n\n    # Utilization tie-breaker (item / bin_remaining where feasible)\n    utilization = np.zeros_like(combined)\n    np.divide(item, bins_remain_cap, where=mask, out=utilization)\n\n    # Adaptive epsilon scaling from leftover variance\n    valid_leftover = leftover[mask]\n    std_leftover = np.std(valid_leftover) if valid_leftover.size > 1 else 1e-6\n    epsilon = 1e-4 / (std_leftover + 1e-8)\n\n    # Final priority with utility augmentation\n    priority[mask] = combined[mask] + epsilon * utilization[mask]\n    return priority\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see top heuristics use **z-score normalization** and **exponential utilization enhancement** to dynamically adjust priorities, while simpler sigmoid blending in worst heuristics lacks depth. (2nd) vs (3rd) reveals the criticality of hybrid metrics (e.g., z-fit + z-cap) over basic inverse/exp combinations. (5th-7th) incorporate **system-wide entropy and fragmentation control** via adaptive balance weights, which are absent in mid-tier heuristics. Top performers prioritize **multi-layered synergy** (e.g., tightness \u00d7 utilization \u00d7 exponential enhancers) and **reinforcement-inspired gains**, while lower ranks rely on basic BF/WF blending. Worst heuristics (e.g., 19th/20th) lack nuanced tie-breaking (e.g., variance minimization) and system-aware adjustments.\n- \n**Keywords:** Z-score normalization, dynamic exponential boosting, entropy control, hierarchical scoring  \n**Advice:** Embed **state-aware normalization** to balance metric scales, pair **gradient-driven boosting** with entropy-based decay for bin prioritization, and apply **multi-layer tie-breakers** (e.g., fragility + load balance) with epsilon-perturbed thresholds. Use **cross-metric variance analysis** to dynamically adjust weights.  \n**Avoid:** Static thresholds, single-axis tie-breakers, unbounded normalization ranges.  \n**Explanation:** Combining adaptive normalization, gradient-aware dynamics, and entropy-sensitive hierarchies ensures context-specific responsiveness while avoiding brittle rules. Perturbed thresholds and cross-metric variance mitigate overfitting, validating gains without overcomplicating logic.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}