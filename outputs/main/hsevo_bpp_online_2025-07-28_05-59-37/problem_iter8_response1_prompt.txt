{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Adaptive hybrid priority combining z-scored fit quality/capacity, exponential utilization enhancement, and layered tightness-weighted metrics.\n    Encourages best-fit in high-utilization bins while dynamically balancing with worst-fit for small items.\n    \"\"\"\n    if bins_remain_cap.size == 0:\n        return np.array([], dtype=np.float64)\n    \n    orig_cap = np.max(bins_remain_cap)\n    if orig_cap <= 1e-9 or item <= 1e-9:\n        return np.where(\n            bins_remain_cap >= item,\n            1.0 / (bins_remain_cap - item + 1e-9),\n            -np.inf\n        )\n    \n    eligible = bins_remain_cap >= item\n    leftover = bins_remain_cap - item\n    utilization = (orig_cap - bins_remain_cap) / orig_cap\n    tightness = item / (bins_remain_cap + 1e-9)\n    \n    # Z-score normalized fit and capacity for fair comparison\n    fit_quality = 1.0 / (leftover + 1e-9)\n    elig_fit = fit_quality[eligible]\n    elig_cap = bins_remain_cap[eligible]\n    \n    if elig_fit.size == 0:\n        return np.full_like(fit_quality, -np.inf, dtype=np.float64)\n    \n    # Z-score calculation\n    mean_fit, std_fit = np.mean(elig_fit), np.std(elig_fit)\n    z_fit = (fit_quality - mean_fit) / (std_fit + 1e-9)\n    \n    mean_cap, std_cap = np.mean(elig_cap), np.std(elig_cap)\n    z_cap = (bins_remain_cap - mean_cap) / (std_cap + 1e-9)\n    \n    # Dynamic best/worst-fit blend with exponential utilization boost\n    primary_score = tightness * z_fit + (1.0 - tightness) * z_cap\n    enhancer = np.exp(utilization * tightness)  # Exponential amplification for utilized bins\n    \n    return np.where(eligible, primary_score * enhancer, -np.inf)\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive synergy of inv_leftover*utilization for tight fits + exponential waste decay for fragmentation reduction.\"\"\"\n    mask = bins_remain_cap >= item\n    scores = np.full_like(bins_remain_cap, -np.inf)\n    if not mask.any():\n        return scores\n    \n    eps = 1e-9\n    remaining = bins_remain_cap[mask]\n    \n    # Core metrics from both heuristics\n    inv_leftover = 1.0 / (remaining - item + eps)  # Maximize for tight fits\n    utilization = item / (remaining + eps)  # Prioritize high space efficiency\n    exp_waste = np.exp(-(remaining - item))  # Penalize large leftover exponentially\n    \n    # Hierarchical synergy: Tight fit + stable baseline + entropy-aware tie-breaking\n    multiplicative_term = inv_leftover * utilization  # Tight-fit dominance\n    additive_term = utilization  # Baseline utilization\n    exp_tie_breaker = 0.1 * exp_waste  # Non-linear tie-breaking\n    \n    # Final score combining hierarchical objectives\n    scores[mask] = multiplicative_term + additive_term + exp_tie_breaker\n    return scores\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see top heuristics use **z-score normalization** and **exponential utilization enhancement** to dynamically adjust priorities, while simpler sigmoid blending in worst heuristics lacks depth. (2nd) vs (3rd) reveals the criticality of hybrid metrics (e.g., z-fit + z-cap) over basic inverse/exp combinations. (5th-7th) incorporate **system-wide entropy and fragmentation control** via adaptive balance weights, which are absent in mid-tier heuristics. Top performers prioritize **multi-layered synergy** (e.g., tightness \u00d7 utilization \u00d7 exponential enhancers) and **reinforcement-inspired gains**, while lower ranks rely on basic BF/WF blending. Worst heuristics (e.g., 19th/20th) lack nuanced tie-breaking (e.g., variance minimization) and system-aware adjustments.\n- \n**Keywords:** Z-score normalization, dynamic exponential boosting, entropy control, hierarchical scoring  \n**Advice:** Embed **state-aware normalization** to balance metric scales, pair **gradient-driven boosting** with entropy-based decay for bin prioritization, and apply **multi-layer tie-breakers** (e.g., fragility + load balance) with epsilon-perturbed thresholds. Use **cross-metric variance analysis** to dynamically adjust weights.  \n**Avoid:** Static thresholds, single-axis tie-breakers, unbounded normalization ranges.  \n**Explanation:** Combining adaptive normalization, gradient-aware dynamics, and entropy-sensitive hierarchies ensures context-specific responsiveness while avoiding brittle rules. Perturbed thresholds and cross-metric variance mitigate overfitting, validating gains without overcomplicating logic.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}