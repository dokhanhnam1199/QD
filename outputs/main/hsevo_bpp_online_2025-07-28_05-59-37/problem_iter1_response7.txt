```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid priority combining best fit (smallest remaining capacity) for large items and worst fit (largest remaining capacity) for small items."""
    if bins_remain_cap.size == 0:
        return np.array([], dtype=np.float64)
    
    # Threshold based on mean remaining capacity to decide strategy
    threshold = np.mean(bins_remain_cap)
    valid = bins_remain_cap >= item
    
    # Best fit priority: prioritize bins with smallest remaining capacity (negative to invert sorting)
    best_prio = np.where(valid, -bins_remain_cap, -np.inf)
    # Worst fit priority: prioritize bins with largest remaining capacity
    worst_prio = np.where(valid, bins_remain_cap, -np.inf)
    
    return best_prio if item > threshold else worst_prio
```
