```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    if bins_remain_cap.size == 0:
        return np.array([], dtype=np.float64)
    
    orig_cap = np.max(bins_remain_cap)
    if orig_cap <= 1e-9 or item <= 1e-9:
        return np.where(
            bins_remain_cap >= item,
            bins_remain_cap - item + 1e-9,
            -np.inf
        )
    
    eligible = bins_remain_cap >= item
    if not np.any(eligible):
        return np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    
    # System metrics
    system_mean = bins_remain_cap.mean()
    system_std = bins_remain_cap.std()
    system_var = system_std ** 2
    
    # Relative variance for adaptive control
    var_rel = system_var / (orig_cap ** 2 + 1e-9)
    
    # Core metrics for eligible bins
    leftover = bins_remain_cap - item
    tightness = np.clip(item / (bins_remain_cap + 1e-9), 0, 1)
    
    # Fit quality (tighter fit = better)
    fit_quality = tightness
    
    # Balance quality (leftover near system mean)
    z_leftover = (leftover - system_mean) / (system_std + 1e-9)
    balance_quality = -np.abs(z_leftover)
    
    # Flexibility quality (promote consolidation around median)
    med_remain = np.median(bins_remain_cap[eligible])
    flex_quality = -((leftover - med_remain) ** 2) / (orig_cap ** 2 + 1e-9)
    
    # Adaptive weights
    balance_weight = np.sqrt(np.clip(var_rel, 0, 1))  # Stronger balance priority when imbalanced
    fit_weight = 1 - var_rel
    
    # Hybrid base score with adaptive weights
    hybrid_base = fit_quality * fit_weight + balance_quality * balance_weight
    
    # Reinforcement-inspired flexibility component
    flex_component = flex_quality * (balance_weight ** 2)
    
    # Nonlinear item size adaptation
    item_rel_size = item / (system_mean + 1e-9)
    fit_decay = np.exp(-item_rel_size * tightness)  # Stronger fit penalty for large items
    
    # Final priority score
    final_score = hybrid_base + flex_component * fit_decay
    
    return np.where(eligible, final_score, -np.inf)
```
