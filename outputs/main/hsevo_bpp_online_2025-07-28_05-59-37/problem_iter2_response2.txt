```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Priority combining dynamic item size classification and adaptive tie-breaking.
    
    Uses current mean remaining capacity to classify item as large/small.
    Adjusts tie-breaking weight (epsilon) to prioritize utilization for small items.
    """
    if len(bins_remain_cap) == 0:
        return np.array([], dtype=np.float64)
    
    # Dynamic threshold based on current average remaining capacity
    threshold = np.mean(bins_remain_cap)
    large_item = item > threshold
    
    valid = bins_remain_cap >= item
    if not np.any(valid):
        return -np.inf * np.ones_like(bins_remain_cap)
    
    remaining_after = bins_remain_cap - item
    
    # Adaptive epsilon weights based on item size classification
    if large_item:
        # Prioritize minimal leftover with small tie-breaker (v0-like)
        epsilon = 1e-6
    else:
        # Prioritize tighter packing with larger tie-breaker for small items
        epsilon = 1e-3
    
    priority = -remaining_after - epsilon * bins_remain_cap
    return np.where(valid, priority, -np.inf)
```
