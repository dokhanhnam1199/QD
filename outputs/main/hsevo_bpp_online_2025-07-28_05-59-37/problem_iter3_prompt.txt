{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Priority combining inv_waste, utilization, and exp_waste with adaptive tie-breaking for real-time opt.\"\"\"\n    mask = bins_remain_cap >= item\n    scores = np.full_like(bins_remain_cap, -np.inf)\n    if not mask.any():\n        return scores\n    \n    eps = 1e-9\n    remaining = bins_remain_cap[mask]\n    \n    # v0-derived factors: inv_leftover + utilization\n    inv_leftover = 1.0 / (remaining - item + eps)\n    utilization = item / (remaining + eps)\n    \n    # v1-derived exponential sensitivity to waste\n    exp_waste = np.exp(-(remaining - item))\n    \n    # Dynamic synergy: Combine v0's stability with v1's waste-awareness\n    # Weights chosen to preserve metric dominance while allowing adaptive tie-breaking\n    scores[mask] = inv_leftover + utilization + 0.1 * exp_waste\n    return scores\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \n**Keywords**: Dynamic weight adjustment, adaptive tie-breaking criteria, real-time validation, multi-metric synergy  \n**Advice**: Implement dynamic weight adjustment based on real-time data trends (e.g., reinforcement learning), use adaptive tie-breaking criteria (e.g., entropy-based prioritization), validate strategies via continuous simulation, and integrate complementary metrics (e.g., fragmentation, load balance).  \n**Avoid**: Static epsilon values, precomputed thresholds, unvalidated contextual shifts, and over-reliance on single metrics.  \n**Explanation**: Dynamic adjustments reduce rigidity, adaptive tie-breaking prevents arbitrary choices, real-time validation ensures robustness, and multi-metric synergy balances trade-offs for superior heuristic performance.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}