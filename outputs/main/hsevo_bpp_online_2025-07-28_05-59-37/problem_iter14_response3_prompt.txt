{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    v2: Z-normalized synergy + cross-metric variance adaptation + gradient-boosted enhancer \n    + fragility-aware balancing with dynamic entropy-sensitive weights.\n    \"\"\"\n    eps = 1e-9\n    if bins_remain_cap.size == 0:\n        return np.array([], dtype=np.float64)\n    \n    eligible = bins_remain_cap >= item\n    if not eligible.any():\n        return np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)\n    \n    # System stats\n    C_est = bins_remain_cap.max() if bins_remain_cap.size > 0 else 1.0\n    system_avg = np.mean(bins_remain_cap)\n    system_std = np.std(bins_remain_cap) + eps\n    system_cv = system_std / (system_avg + eps)\n    remaining = bins_remain_cap + eps\n    \n    # Core metrics\n    leftover = remaining - item + eps\n    utilization = item / remaining\n    inv_leftover = 1.0 / leftover\n    \n    # Z-synergy (tight-fit * utilization)\n    phi = inv_leftover * utilization\n    phi_z = ((phi[eligible] - phi[eligible].mean()) / phi[eligible].std())[eligible]\n    \n    # Z-cap (remaining capacity adaptation)\n    cap_z = ((remaining - np.mean(remaining)) / np.std(remaining + eps))[eligible]\n    \n    # Cross-metric variance adaptation\n    var_phi = np.var(phi[eligible])\n    var_cap = np.var(remaining[eligible])\n    cross_weight = var_cap / (var_phi + var_cap + eps) if (var_phi + var_cap) > 1e-7 else 0.5\n    \n    # Adaptive curvature factor\n    curvature = 1.0 + np.arctan((phi_z.mean() - cap_z.mean()))\n    \n    # Composite base score\n    composite = cross_weight * phi_z + (1 - cross_weight) * cap_z * curvature\n    \n    # Gradient-driven enhancer (concentration + deviation sensitivity)\n    leftover_norm = (leftover - system_avg) / (3 * system_std + eps)\n    tight_density = np.clip(1.0 - np.abs(leftover_norm), 0, 1)  # Concentration zone control\n    grad_scale = np.where(item > system_avg, \n                         1.0 + 2.0 * utilization * system_std, \n                         1.0 + utilization)  # Dynamic gradient sensitivity\n    enhancer = np.exp(composite * tight_density * grad_scale)\n    \n    # Entropy-sensitive load balance (v0-style system variance coupling)\n    filled_frac = (C_est - remaining) / (C_est + eps)\n    system_var = np.var(bins_remain_cap) / (C_est**2 + eps)\n    balance_factor = filled_frac * (1 + system_var)\n    balance_z = (balance_factor - balance_factor[eligible].mean()) / balance_factor[eligible].std()\n    \n    # Fragility-aware perturbation (exponential decay approach)\n    fragility = 1.0 - np.exp(-leftover / (0.2 * C_est + eps))\n    frag_weight = 0.25 * system_var * np.clip((1 - utilization), 0, 1)\n    frag_term = np.where(leftover < 0.15 * C_est, -frag_weight * fragility, -0.01 * frag_weight * fragility)\n    \n    # Dynamic weight optimization\n    entropy_weight = 0.1 * system_cv \n    fragility_weight = 0.05 * (1 - system_cv) * system_var\n    \n    # Final score with hierarchical reinforcement\n    scores = np.full_like(bins_remain_cap, -np.inf)\n    scores[eligible] = (\n        composite * enhancer \n        + entropy_weight * balance_z \n        + fragility_weight * frag_term[eligible]\n    ) * (1 + system_var)\n    \n    return scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    if bins_remain_cap.size == 0:\n        return np.array([], dtype=np.float64)\n    \n    orig_cap = np.max(bins_remain_cap)\n    if orig_cap <= 1e-9 or item <= 1e-9:\n        return np.where(\n            bins_remain_cap >= item,\n            bins_remain_cap - 2 * (bins_remain_cap - item),\n            -np.inf\n        )\n    \n    eligible = bins_remain_cap >= item\n    if not np.any(eligible):\n        return np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)\n    \n    leftover = bins_remain_cap - item\n    utilization = 1.0 - bins_remain_cap / orig_cap\n    tightness = item / (bins_remain_cap + 1e-9)\n    fit_quality = 1.0 / (leftover + 1e-9)\n    \n    elig_indices = np.where(eligible)[0]\n    elig_fit = fit_quality[eligible]\n    elig_cap = bins_remain_cap[eligible]\n    \n    mean_fit, std_fit = np.mean(elig_fit), np.std(elig_fit)\n    mean_cap, std_cap = np.mean(elig_cap), np.std(elig_cap)\n    z_fit = (fit_quality - mean_fit) / (std_fit + 1e-9)\n    z_cap = (bins_remain_cap - mean_cap) / (std_cap + 1e-9)\n    \n    system_avg = np.mean(bins_remain_cap)\n    system_std = np.std(bins_remain_cap)\n    system_cv = system_std / (system_avg + 1e-9) if system_avg > 0 else 0\n    \n    n_bins = bins_remain_cap.size\n    s_total = bins_remain_cap.sum()\n    s2_total = (bins_remain_cap ** 2).sum()\n    delta_s2 = (leftover ** 2) - (bins_remain_cap ** 2)\n    new_s2 = s2_total + delta_s2\n    new_s = s_total - item\n    new_mean = new_s / n_bins\n    new_var = new_s2 / n_bins - new_mean ** 2\n    rel_variance = (new_var - np.std(bins_remain_cap) ** 2) / (np.std(bins_remain_cap) ** 2 + 1e-9)\n    entropy_penalty = np.where(eligible, -rel_variance, np.inf)\n    \n    spatial_sensitivity = np.abs(bins_remain_cap - system_avg) / (system_std + 1e-9)\n    sensitivity_weight = 1.0 / (spatial_sensitivity + 1e-9)\n    adaptive_weights = np.sqrt(system_cv ** 2) * sensitivity_weight\n    \n    fit_primary = z_fit * tightness + z_cap * spatial_sensitivity\n    entropy_response = entropy_penalty * np.exp(-utilization)\n    \n    priority = fit_primary * (1 + system_cv) + adaptive_weights * entropy_response\n    \n    # Perturbation mechanism\n    if np.any(eligible):\n        eps = 1e-6 * system_cv * (np.random.rand(n_bins) - 0.5)\n        priority += np.where(eligible, eps, 0)\n    \n    return np.where(eligible, priority, -np.inf)\n\n### Analyze & experience\n- Comparing (best) vs (worst), we see the top heuristics use advanced Z-score synergy, item-class adaptation, and predictive entropy modeling. (second best) vs (second worst) reveals superior fragmentation control through multi-metric variance analysis. Comparing (1st) vs (2nd), they are identical (possible duplication). (3rd) vs (4th) shows more sophisticated entropy scaling in higher-ranked functions. Comparing (second worst) vs (worst), both lack dynamic weight optimization found in top heuristics. Overall: superior heuristics balance adaptive normalization, context-aware penalties, and multi-layered sensitivity to system entropy.\n- \n**Keywords**: Adaptive normalization, hybrid metrics, entropy control, reinforcement-inspired gains  \n**Advice**: Prioritize adaptive normalization to balance metric scales. Design hybrid metrics blending fit/utilization with nonlinear boosts. Use system entropy to adjust penalty weights. Prefer reinforcement-inspired tie-breakers (e.g., entropy gradients) over random perturbations.  \n**Avoid**: Static thresholds, entropy penalties without context, vague dynamic weight algorithms, perturbation mechanisms as primary tie-breakers.  \n**Explanation**: Avoiding buzzword-heavy constructs (e.g., \"Z-score synergy\") clarifies implementation. Directly linking entropy control to adaptive weights improves stability, while reinforcement-inspired gains ensure exploitable heuristics. Overcomplicated metrics dilute practicality\u2014prioritize validated, context-aware logic for scalability.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}