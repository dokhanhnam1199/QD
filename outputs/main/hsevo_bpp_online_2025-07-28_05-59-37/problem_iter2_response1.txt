```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best Fit for large items and fit+utilization for small items using dynamic thresholding and adaptive tie-breaking."""
    if len(bins_remain_cap) == 0:
        return np.array([], dtype=np.float64)
    
    C_est = bins_remain_cap.max()
    valid = bins_remain_cap >= item
    
    if not np.any(valid):
        return -np.inf * np.ones_like(bins_remain_cap)
    
    # Dynamic thresholds and metrics
    avg_remain = bins_remain_cap.mean()
    is_large = item > avg_remain
    
    fit_score = item - bins_remain_cap  # Best Fit priority
    utilization = (C_est - bins_remain_cap + item) / C_est  # Utilization ratio after placement
    
    # Adaptive tie-breaker weight scaled by bin capacity
    epsilon = 1e-6 * C_est  # Small dynamic weight to prevent dominance
    
    # Combine strategies based on item size
    priority = np.where(
        valid,
        fit_score + (~is_large) * epsilon * utilization,
        -np.inf
    )
    
    return priority
```
