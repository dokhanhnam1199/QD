```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    if bins_remain_cap.size == 0:
        return np.array([], dtype=np.float64)
    
    orig_cap = np.max(bins_remain_cap)
    if orig_cap <= 1e-9 or item <= 1e-9:
        return np.where(
            bins_remain_cap >= item,
            bins_remain_cap - item + 1e-9,
            -np.inf
        )
    
    eligible = bins_remain_cap >= item
    if not np.any(eligible):
        return np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    
    # 1. Fit score: Min-max normalized tightness (higher = tighter fit)
    leftover = np.where(eligible, bins_remain_cap - item, np.inf)
    min_left, max_left = np.min(leftover), np.max(leftover)
    fit_score = (max_left - leftover) / (max_left - min_left + 1e-9)
    
    # 2. Predictive variance score: Variance after placement (lower is better)
    S, S2, n = bins_remain_cap.sum(), (bins_remain_cap**2).sum(), len(bins_remain_cap)
    c_i = bins_remain_cap
    variance_i = (S2 - 2*c_i*item + item**2)/n - ((S - item)**2)/(n**2)
    variance_i = np.where(eligible, variance_i, np.inf)
    
    min_var, max_var = np.min(variance_i), np.max(variance_i)
    var_score = (max_var - variance_i) / (max_var - min_var + 1e-9)
    
    # 3. Reinforcement score: Remaining capacity flexibility
    rem_after = bins_remain_cap - item
    rem_ratio = rem_after / (orig_cap + 1e-9)
    min_rem, max_rem = np.min(rem_ratio[eligible]), np.max(rem_ratio[eligible])
    reinforce_score = (rem_ratio - min_rem) / (max_rem - min_rem + 1e-9)
    
    # 4. Hybrid priority calculation (entropy-agnostic balance)
    tightness_weight = 0.6  # Static weight for immediate fit
    future_weight = 0.4      # Static weight for future flexibility
    
    tightness_component = fit_score * var_score
    future_component = reinforce_score * (1.0 + var_score)  # Amplify by variance quality
    
    priority = tightness_weight * tightness_component + future_weight * future_component
    
    return np.where(eligible, priority, -np.inf)
```
