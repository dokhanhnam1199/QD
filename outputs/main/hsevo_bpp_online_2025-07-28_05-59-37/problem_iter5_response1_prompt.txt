{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Priority combining dynamic item size classification and adaptive tie-breaking.\n    \n    Uses current mean remaining capacity to classify item as large/small.\n    Adjusts tie-breaking weight (epsilon) to prioritize utilization for small items.\n    \"\"\"\n    if len(bins_remain_cap) == 0:\n        return np.array([], dtype=np.float64)\n    \n    # Dynamic threshold based on current average remaining capacity\n    threshold = np.mean(bins_remain_cap)\n    large_item = item > threshold\n    \n    valid = bins_remain_cap >= item\n    if not np.any(valid):\n        return -np.inf * np.ones_like(bins_remain_cap)\n    \n    remaining_after = bins_remain_cap - item\n    \n    # Adaptive epsilon weights based on item size classification\n    if large_item:\n        # Prioritize minimal leftover with small tie-breaker (v0-like)\n        epsilon = 1e-6\n    else:\n        # Prioritize tighter packing with larger tie-breaker for small items\n        epsilon = 1e-3\n    \n    priority = -remaining_after - epsilon * bins_remain_cap\n    return np.where(valid, priority, -np.inf)\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    mask = bins_remain_cap >= item\n    scores = np.full_like(bins_remain_cap, -np.inf)\n    if not mask.any():\n        return scores\n\n    eps = 1e-9\n    remaining = bins_remain_cap[mask]\n    \n    # Global state monitoring\n    system_avg = bins_remain_cap.mean()\n    system_std = bins_remain_cap.std()\n    system_cv = system_std / (system_avg + eps)  # Coefficient of variation\n    \n    # Core heuristic components\n    leftover = remaining - item\n    inv_leftover = 1.0 / (leftover + eps)\n    utilization = item / (remaining + eps)\n    exp_waste = np.exp(-leftover)\n    \n    # Adaptive balancing logic\n    remaining_after = remaining - item\n    load_balance_factor = np.abs(remaining_after - system_avg)\n    load_balance_score = -load_balance_factor  # Prioritize bins reducing systemic imbalance\n    \n    # Fragmentation mitigation term (entropy-aware)\n    fragmentation_penalty = np.log1p(1.0 / (leftover + system_cv))\n    \n    # Dynamic weighting strategy\n    w_inv = 1.0 + 0.7 * system_cv  # Inverse left weight increases with system variance\n    w_util = 0.9 / (1.0 + np.exp(-utilization * 2))  # S-shaped activation based on local fit\n    w_balance = 2.0 * system_cv  # Balance importance scales with fragmentation level\n    \n    # Real-time validation layer - self-consistency check\n    fit_consistency = 1.0 / (1e-6 + np.abs(remaining_after - (1.0 - system_avg)))\n    \n    # Multimodal synergy calculation\n    scores[mask] = (\n        w_inv * inv_leftover + \n        w_util * utilization + \n        w_balance * load_balance_score + \n        0.5 * exp_waste * (1 + system_cv) +\n        fragmentation_penalty * (1/system_cv if system_cv > 1 else 1) +\n        fit_consistency\n    )\n    \n    return scores\n\n### Analyze & experience\n- Comparing 1st vs 20th: Best uses multiple adaptive metrics (inv_waste + utilization + exp_waste) vs Worst applies static Best Fit/Worst Fit switching. 2nd vs 19th: Both blend metrics, but 2nd's exponential penalty prevents fragmentation vs 19th's rigid threshold. 3rd vs 18th: Utilization-weighted fit quality outperforms size-based switching by balancing utilization dynamics. 4th vs 17th: Dynamic epsilon adjustment (item size vs average) improves flexibility vs static linear blending. 5th vs 16th: Global state tracking with entropy-aware tie-breaking adapts better than fixed 50% tightness threshold.  \n\nTop heuristics excel through multi-metric synergy (tight fit + system-wide balance + utilization), real-time normalization (dynamic weights via variance/mean), and layered tie-breaking (fragility, entropies). Struggling heuristics oversimplify with rigid thresholds (fixed average/item-based cuts) or suffer from overcomplexity (stateful systems requiring fine-tuned decay windows). Key losers rely on single heuristic hybrids (Best/Worst Fit mixing) without contextual adaptation.\n- \n- **Keywords**: Multi-objective optimization, hybrid metrics, adaptive normalization, contextual dynamics.  \n- **Advice**: Prioritize hierarchical objectives with non-linear sensitivity analysis (e.g., sigmoid or logarithmic decay) and integrate reinforcement learning for parameter calibration.  \n- **Avoid**: Static blending ratios, post-hoc rationalization, and over-reliance on single-state snapshots.  \n- **Explanation**: Non-linear sensitivity ensures scalable trade-offs; machine learning adapts to systemic unpredictability. Contextual tie-breakers maintain robustness without brittle thresholds.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}