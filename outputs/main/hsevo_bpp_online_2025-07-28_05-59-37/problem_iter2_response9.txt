```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores combining inverse leftover space, utilization ratio, 
    and exponential decay of leftover space to prioritize tight fits and efficient packing.
    Adapts synergy across multi-metric factors for better real-time bin selection.
    """
    mask = bins_remain_cap >= item
    scores = np.full_like(bins_remain_cap, -np.inf)
    if not mask.any():
        return scores
    
    eps = 1e-9
    s_j = bins_remain_cap[mask]
    # Inverse of leftover space (heavily favors tight fits)
    inv_leftover = 1.0 / (s_j - item + eps)
    # Item-to-remaining capacity utilization (promotes filling available space)
    utilization = item / (s_j + eps)
    # Exponential decay penalty for non-perfect fits (sharp disincentive for large leftover)
    leftover = s_j - item
    exp_decay = np.exp(-leftover)  # Normalize by input size for stability if needed
    
    # Dynamic synergy: sum of complementary metrics
    combined = inv_leftover * (1 + utilization) + exp_decay
    scores[mask] = combined
    return scores
```
