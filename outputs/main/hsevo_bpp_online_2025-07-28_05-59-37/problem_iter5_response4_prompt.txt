{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Adaptive priority combining tight-fit best-fit & small-item worst-fit with utilization tie-breaker.\"\"\"\n    possible = bins_remain_cap >= item\n    leftover = bins_remain_cap - item\n    \n    # Dynamic tightness threshold per bin (item > 50% of current bin capacity)\n    tight = (item > bins_remain_cap / 2) & possible\n    \n    # Primary heuristics: Best Fit for tight fits, Worst Fit for others\n    primary = np.where(tight, -leftover, leftover)\n    \n    # Tie-breaker: Bin utilization (normalized current occupancy) with epsilon weight\n    utilization = 1 - bins_remain_cap\n    tie_breaker = 1e-6 * utilization  # Small weight to avoid overriding primary rules\n    \n    # Composite priority: synergized primary decision + adaptive utilization bias\n    priority = primary + tie_breaker\n    \n    return np.where(possible, priority, -np.inf)\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority combines Best Fit (leftover minimization) and Worst Fit (remaining space maximization) dynamically.\n    Weighting adjusts based on item's relative size to current maximum bin capacity estimate.\n    \"\"\"\n    if len(bins_remain_cap) == 0:\n        return np.array([], dtype=np.float64)\n    \n    C_est = bins_remain_cap.max()\n    valid = bins_remain_cap >= item\n    \n    if not np.any(valid):\n        return -np.inf * np.ones_like(bins_remain_cap)\n    \n    relative_size = item / C_est\n    weight = relative_size ** 2  # Dynamic weight emphasizes Best Fit for larger items\n    \n    # Blend Best Fit and Worst Fit: [0, 1] weight on Best Fit, [1, 0] on Worst Fit\n    priorities = np.where(valid,\n                          weight * (item - bins_remain_cap) + (1 - weight) * bins_remain_cap,\n                          -np.inf)\n    return priorities\n\n### Analyze & experience\n- Comparing 1st vs 20th: Best uses multiple adaptive metrics (inv_waste + utilization + exp_waste) vs Worst applies static Best Fit/Worst Fit switching. 2nd vs 19th: Both blend metrics, but 2nd's exponential penalty prevents fragmentation vs 19th's rigid threshold. 3rd vs 18th: Utilization-weighted fit quality outperforms size-based switching by balancing utilization dynamics. 4th vs 17th: Dynamic epsilon adjustment (item size vs average) improves flexibility vs static linear blending. 5th vs 16th: Global state tracking with entropy-aware tie-breaking adapts better than fixed 50% tightness threshold.  \n\nTop heuristics excel through multi-metric synergy (tight fit + system-wide balance + utilization), real-time normalization (dynamic weights via variance/mean), and layered tie-breaking (fragility, entropies). Struggling heuristics oversimplify with rigid thresholds (fixed average/item-based cuts) or suffer from overcomplexity (stateful systems requiring fine-tuned decay windows). Key losers rely on single heuristic hybrids (Best/Worst Fit mixing) without contextual adaptation.\n- \n- **Keywords**: Multi-objective optimization, hybrid metrics, adaptive normalization, contextual dynamics.  \n- **Advice**: Prioritize hierarchical objectives with non-linear sensitivity analysis (e.g., sigmoid or logarithmic decay) and integrate reinforcement learning for parameter calibration.  \n- **Avoid**: Static blending ratios, post-hoc rationalization, and over-reliance on single-state snapshots.  \n- **Explanation**: Non-linear sensitivity ensures scalable trade-offs; machine learning adapts to systemic unpredictability. Contextual tie-breakers maintain robustness without brittle thresholds.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}