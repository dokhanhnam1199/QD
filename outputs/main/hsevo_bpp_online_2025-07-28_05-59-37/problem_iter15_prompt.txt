{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines adaptive Z-score normalization, entropy-driven balance, and reinforcement learning concepts.\n    Prioritizes bins that optimize fit tightness, system-wide capacity balance, and future flexibility.\n    \"\"\"\n    if bins_remain_cap.size == 0:\n        return np.array([], dtype=np.float64)\n    \n    orig_cap = np.max(bins_remain_cap)\n    if orig_cap <= 1e-9 or item <= 1e-9:\n        return np.where(\n            bins_remain_cap >= item,\n            bins_remain_cap - item + 1e-9,\n            -np.inf\n        )\n    \n    eligible = bins_remain_cap >= item\n    if not np.any(eligible):\n        return np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)\n    \n    # System-wide metrics\n    system_avg = bins_remain_cap.mean()\n    system_std = bins_remain_cap.std()\n    system_cv = system_std / (system_avg + 1e-9) if system_avg > 1e-9 else 0.0\n    \n    # Item classification\n    large_item = item > system_avg\n    \n    # Core metrics\n    leftover = bins_remain_cap - item\n    tightness = item / (bins_remain_cap + 1e-9)\n    utilization = (orig_cap - bins_remain_cap) / (orig_cap + 1e-9)\n    \n    # Z-score normalization for fit and space\n    elig_fit = 1.0 / (leftover + 1e-9)\n    elig_fit_mean, elig_fit_std = np.mean(elig_fit[eligible]), np.std(elig_fit[eligible])\n    z_fit = (elig_fit - elig_fit_mean) / (elig_fit_std + 1e-9)\n    \n    elig_space = bins_remain_cap\n    elig_space_mean, elig_space_std = np.mean(elig_space[eligible]), np.std(elig_space[eligible])\n    z_cap = (elig_space - elig_space_mean) / (elig_space_std + 1e-9)\n    \n    # Primary score: adaptive tightness-weighted Z-combination\n    primary_score = tightness * z_fit + (1.0 - tightness) * z_cap\n    \n    # Exponential enhancer for utilization-tightness synergy\n    enhancer = np.exp(utilization * tightness)\n    \n    # Entropy-driven balance term\n    balance_term = -np.abs(leftover - system_avg) / (system_std + 1e-9)\n    balance_weight = 0.5 * system_cv * np.where(large_item, 1.0, 2.0)\n    balance_contrib = balance_term * balance_weight\n    \n    # Reinforcement multiplier\n    eligible_rem = bins_remain_cap[eligible]\n    rel_size = item / (np.median(eligible_rem) + 1e-9)\n    fragility = ((orig_cap - bins_remain_cap) / (orig_cap + 1e-9)).clip(0, 1)\n    rem_rel = bins_remain_cap / (orig_cap + 1e-9)\n    reinforce_factor = (1 - rel_size) ** 2 * rem_rel * fragility\n    reinforcer = 1 + 0.5 * reinforce_factor\n    \n    # Final priority calculation\n    priority = (primary_score * enhancer + balance_contrib) * reinforcer\n    \n    return np.where(eligible, priority, -np.inf)\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \n**Keywords**: Adaptive normalization, hybrid metrics, entropy control, reinforcement-inspired gains  \n**Advice**: Prioritize adaptive normalization to balance metric scales. Design hybrid metrics blending fit/utilization with nonlinear boosts. Use system entropy to adjust penalty weights. Prefer reinforcement-inspired tie-breakers (e.g., entropy gradients) over random perturbations.  \n**Avoid**: Static thresholds, entropy penalties without context, vague dynamic weight algorithms, perturbation mechanisms as primary tie-breakers.  \n**Explanation**: Avoiding buzzword-heavy constructs (e.g., \"Z-score synergy\") clarifies implementation. Directly linking entropy control to adaptive weights improves stability, while reinforcement-inspired gains ensure exploitable heuristics. Overcomplicated metrics dilute practicality\u2014prioritize validated, context-aware logic for scalability.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}