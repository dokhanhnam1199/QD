```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins using predictive variance modeling, min-max normalization, 
    and reinforcement via utilization-aware balancing. Avoids Z-scores, entropy penalties, 
    and exponential boosting while emphasizing long-term flexibility and robustness.
    """
    if bins_remain_cap.size == 0:
        return np.array([], dtype=np.float64)
    
    orig_cap = np.max(bins_remain_cap)
    if orig_cap <= 1e-9 or item <= 1e-9:
        return np.where(
            bins_remain_cap >= item,
            bins_remain_cap - item + 1e-9,
            -np.inf
        )
    
    eligible = bins_remain_cap >= item
    if not np.any(eligible):
        return np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    
    # Vectorized predictive variance calculation
    r_i = bins_remain_cap[eligible]
    l = r_i - item
    n = len(bins_remain_cap)
    sum_r_initial = np.sum(bins_remain_cap)
    sum_sq_initial = np.sum(bins_remain_cap ** 2)
    
    sum_r_new = sum_r_initial - item
    sum_sq_new = sum_sq_initial - r_i**2 + l**2
    new_mean = sum_r_new / n
    new_var = (sum_sq_new / n) - (new_mean ** 2)
    
    # Min-max normalization components
    tightness = item / (r_i + 1e-9)
    tight_norm = (tightness - tightness.min()) / (tightness.ptp() + 1e-9)
    
    var_contrib = 1.0 - (new_var - new_var.min()) / (new_var.ptp() + 1e-9)
    
    utilization = (orig_cap - r_i) / (orig_cap + 1e-9)
    util_norm = (utilization - utilization.min()) / (utilization.ptp() + 1e-9)
    
    # Hybrid static-dynamic weighting
    item_ratio = item / (orig_cap + 1e-9)
    tight_weight = 0.4 + 0.4 * item_ratio
    var_weight = 0.4 - 0.2 * item_ratio
    util_weight = 0.2 + 0.2 * (1 - item_ratio)
    
    # Final priority calculation
    total = (
        tight_norm * tight_weight +
        var_contrib * var_weight +
        util_norm * util_weight
    )
    
    priority = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    priority[eligible] = total
    
    return priority
```
