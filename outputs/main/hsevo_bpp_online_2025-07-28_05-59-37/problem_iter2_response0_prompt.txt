{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Priority function combining inverse leftover space and utilization ratio.\"\"\"\n    mask = bins_remain_cap >= item\n    scores = np.full_like(bins_remain_cap, -np.inf)\n    if not mask.any():\n        return scores\n    \n    eps = 1e-9\n    inv_leftover = 1.0 / (bins_remain_cap[mask] - item + eps)\n    utilization = item / (bins_remain_cap[mask] + eps)\n    \n    combined = inv_leftover + utilization\n    scores[mask] = combined\n    return scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Priority function implementing a Best Fit strategy with exponential sensitivity to waste minimization.\"\"\"\n    can_fit = bins_remain_cap >= item\n    # Prioritize bins that minimize leftover space using exponential decay: e^(-waste)\n    # This heavily penalizes larger leftover spaces while favoring perfect fits\n    priorities = np.where(\n        can_fit,\n        np.exp(-(bins_remain_cap - item)),\n        -np.inf\n    )\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th): The top heuristic combines inverse leftover space and utilization ratio, creating a more nuanced priority than simple hybrid strategies based on mean thresholds. Second-best (3rd) uses exponential decay to heavily penalize non-perfect fits, outperforming the 4th/6th/7th which only use linear leftover space metrics. The 5th improves over the 4th via tie-breaking by utilization (epsilon weighting), while the 12th\u2019s ratio-based approach lacks explicit waste minimization. Hybrid heuristics like the 13th/19th (strategy switches based on item size) perform worse due to simplistic or static thresholds compared to adaptive combinations. Bottom-ranked functions often lack multi-factor integration or overcomplicate logic without validation.\n- \n**Keywords**: Dynamic weight adjustment, adaptive tie-breaking criteria, real-time validation, multi-metric synergy  \n**Advice**: Implement dynamic weight adjustment based on real-time data trends (e.g., reinforcement learning), use adaptive tie-breaking criteria (e.g., entropy-based prioritization), validate strategies via continuous simulation, and integrate complementary metrics (e.g., fragmentation, load balance).  \n**Avoid**: Static epsilon values, precomputed thresholds, unvalidated contextual shifts, and over-reliance on single metrics.  \n**Explanation**: Dynamic adjustments reduce rigidity, adaptive tie-breaking prevents arbitrary choices, real-time validation ensures robustness, and multi-metric synergy balances trade-offs for superior heuristic performance.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}