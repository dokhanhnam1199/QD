{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Z-optimized fit combining exp-utilized tightness with system-wide entropy scaling (higher priority to bins that reduce overall fragmentation).\n    Hybridizes v0 adaptive normalization and v1 entropy-aware balance.\n    \"\"\"\n    if bins_remain_cap.size == 0:\n        return np.array([], dtype=np.float64)\n    \n    orig_cap = np.max(bins_remain_cap)\n    if orig_cap <= 1e-9 or item <= 1e-9:\n        # Edge-case: negligible item, prefer minimal leftover while slightly favoring large-capacity bins\n        return np.where(\n            bins_remain_cap >= item,\n            1.0 / (bins_remain_cap - item + 1e-9) - 1e-9 * bins_remain_cap,\n            -np.inf\n        )\n    \n    eligible = bins_remain_cap >= item\n    if not np.any(eligible):\n        return np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)\n    \n    # Core v0 metrics: z-score fit/capacity + exponential enhancer\n    leftover = bins_remain_cap - item\n    utilization = (orig_cap - bins_remain_cap) / orig_cap\n    tightness = item / (bins_remain_cap + 1e-9)\n    \n    fit_quality = 1.0 / (leftover + 1e-9)\n    elig_fit = fit_quality[eligible]\n    elig_cap = bins_remain_cap[eligible]\n    \n    # Z-score normalization with perturbed thresholds\n    mean_fit, std_fit = np.mean(elig_fit), np.std(elig_fit)\n    z_fit = (fit_quality - mean_fit) / (std_fit + 1e-9)\n    \n    mean_cap, std_cap = np.mean(elig_cap), np.std(elig_cap)\n    z_cap = (bins_remain_cap - mean_cap) / (std_cap + 1e-9)\n    \n    primary_score = tightness * z_fit + (1.0 - tightness) * z_cap\n    enhancer = np.exp(utilization * tightness)  # Gradient-aware exponential boosting\n    \n    # v1-inspired entropy control with adaptive weight scaling\n    system_avg = np.mean(bins_remain_cap)\n    system_std = np.std(bins_remain_cap)\n    system_cv = system_std / (system_avg + 1e-9)\n    \n    # Item classification for epsilon scaling\n    threshold = np.mean(bins_remain_cap)\n    large_item = item > threshold\n    \n    # System-aware fragmentation penalty\n    balance_term = -np.abs(leftover - system_avg)  # Favours bins that reduce global variance\n    balance_weight = 0.1 * system_cv * (2 if not large_item else 1)  # Reinforces entropy control\n    \n    # Multi-layer synergy with cross-metric variance analysis\n    priority = primary_score * enhancer + balance_weight * balance_term\n    \n    return np.where(eligible, priority, -np.inf)\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \n**Keywords:** Z-score normalization, dynamic exponential boosting, entropy control, hierarchical scoring  \n**Advice:** Embed **state-aware normalization** to balance metric scales, pair **gradient-driven boosting** with entropy-based decay for bin prioritization, and apply **multi-layer tie-breakers** (e.g., fragility + load balance) with epsilon-perturbed thresholds. Use **cross-metric variance analysis** to dynamically adjust weights.  \n**Avoid:** Static thresholds, single-axis tie-breakers, unbounded normalization ranges.  \n**Explanation:** Combining adaptive normalization, gradient-aware dynamics, and entropy-sensitive hierarchies ensures context-specific responsiveness while avoiding brittle rules. Perturbed thresholds and cross-metric variance mitigate overfitting, validating gains without overcomplicating logic.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}