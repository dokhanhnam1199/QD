{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Online BPP priority that blends Z-score weighted fit (BF) and tightness (FF) via adaptive variance ratios,\n    with item classification (large/tiny) driving climb envelope modulation and exponentially decayed \n    fit-scoring to balance BF/FF tradeoffs. Stability-enhanced tie-breaking via median proximity sensitivity.\n    \"\"\"\n    if bins_remain_cap.size == 0:\n        return np.array([], dtype=np.float64)\n    \n    if item <= 1e-9:\n        return np.where(bins_remain_cap >= 0, 0.01 * bins_remain_cap, -np.inf)\n    \n    eligible = bins_remain_cap >= item\n    if not np.any(eligible):\n        return np.full_like(bins_remain_cap, -np.inf)\n    \n    # Capacity metrics\n    C_est = bins_remain_cap.max() if bins_remain_cap.max() > 0 else item * 2\n    leftover = bins_remain_cap - item\n    tightness = item / (bins_remain_cap + 1e-9)\n    fit_score = 1.0 / (leftover + 1e-9)\n    \n    # Z-score normalization\n    def z_score(x):\n        mean = x[eligible].mean()\n        std = x[eligible].std()\n        return (x - mean) / (std + 1e-9)\n    \n    tight_z = z_score(tightness)\n    fit_z = z_score(fit_score)\n    \n    # Adaptive weighting by variance\n    fit_var, tight_var = fit_z.var(), tight_z.var()\n    var_ratio = fit_var / (fit_var + tight_var + 1e-9)\n    base_score = (var_ratio * fit_z) + ((1 - var_ratio) * tight_z)\n    \n    # Item classification\n    is_large = item > 0.7 * C_est\n    grad_factor = 1.35 if is_large else 1.0\n    utilization = 1.0 - (bins_remain_cap / C_est)\n    \n    # Energy climbing envelope\n    climb_env = grad_factor * np.exp(0.3 * tightness + 0.2 * utilization)\n    \n    # Fragmentation control\n    frag_penalty = 0.2 * np.exp(-leftover / (C_est / 3 + 1e-9))\n    \n    # Stability preservation\n    median_cap = np.median(bins_remain_cap[eligible]) if eligible.any() else bins_remain_cap.median()\n    proximity = np.abs(bins_remain_cap - median_cap) / (C_est + 1e-9)    \n    stability = 0.02 * bins_remain_cap.std() * np.abs(tight_z) * proximity\n    \n    # Priority construction\n    priority = (base_score * climb_env) - frag_penalty + stability\n    \n    # BF bias with soft exponential decay\n    priority *= np.exp(-0.05 * leftover / (C_est + 1e-9))\n    \n    # Reinforcement-style tiebreaker\n    priority += 1e-7 * np.random.normal(0, 1, priority.shape)\n    \n    return np.where(eligible, priority, -np.inf)\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Hybrid priority using Z-standardized fit metrics, entropy-driven variance forecasting,\n    and exponential gain based on utilization-tightness synergy for optimal bin selection.\n    \"\"\"\n    if bins_remain_cap.size == 0:\n        return np.array([], dtype=np.float64)\n    \n    orig_cap = np.max(bins_remain_cap)\n    if orig_cap <= 1e-9 or item <= 1e-9:\n        return np.where(\n            bins_remain_cap >= item,\n            1.0 / (bins_remain_cap - item + 1e-9) - 1e-9 * bins_remain_cap,\n            -np.inf\n        )\n    \n    eligible = bins_remain_cap >= item\n    if not np.any(eligible):\n        return np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)\n    \n    # Metric calculations\n    leftover = bins_remain_cap - item\n    tightness = item / (bins_remain_cap + 1e-9)  # Tightness of fit\n    utilization = (orig_cap - bins_remain_cap) / orig_cap  # Bin fullness metric\n\n    # Z-normalization of fit quality and capacities\n    fit_quality = 1.0 / (leftover[eligible] + 1e-9)\n    z_fit = (1.0 / (leftover + 1e-9) - np.mean(fit_quality)) / (np.std(fit_quality) + 1e-9)\n    \n    elig_capacities = bins_remain_cap[eligible]\n    z_cap = (bins_remain_cap - np.mean(elig_capacities)) / (np.std(elig_capacities) + 1e-9)\n    \n    # Core hybrid score combining fit tightness and Z-normalized metrics\n    primary_score = tightness * z_fit + (1.0 - tightness) * z_cap\n    \n    # Exponential reinforcement based on utilization synergy\n    enhancer = np.exp(utilization * tightness)\n    \n    # Predictive entropy modeling\n    N = len(bins_remain_cap)\n    new_capacities = bins_remain_cap[eligible] - item\n    total_old = np.sum(bins_remain_cap)\n    \n    # Global statistics before any placement\n    mean_old = total_old / N\n    sum_sq_old = np.sum(bins_remain_cap ** 2)\n    var_old = (sum_sq_old / N) - (mean_old ** 2)\n    \n    # Hypothetical new statistics post-placement\n    new_means_i = (total_old - item) / N\n    sum_sq_new_i = sum_sq_old - (bins_remain_cap[eligible] ** 2) + (new_capacities ** 2)\n    var_new_i = (sum_sq_new_i / N) - (new_means_i ** 2)\n    \n    # Entropy sensitivity analysis\n    system_sensitivity = var_old - var_new_i\n    entropy_std = np.std(system_sensitivity) if len(system_sensitivity) > 1 else 1.0\n    normalized_entropy = system_sensitivity / (entropy_std + 1e-9)\n    \n    # Adaptive entropy weighting\n    system_cv = np.std(bins_remain_cap) / (np.mean(bins_remain_cap) + 1e-9)\n    large_item = item > np.mean(bins_remain_cap)\n    entropy_weight = 0.5 * (1.0 + system_cv) * (1.5 if large_item else 0.5)\n    entropy_weight /= (np.log(2 + np.abs(system_sensitivity))).mean() + 1e-9\n    \n    # Residual sensitivity saturation\n    sensitivity = 1.0 / (1.0 + np.abs((new_capacities - new_means_i) / (new_means_i + 1e-9)))\n    \n    # Combined priority score\n    priority = primary_score * enhancer * sensitivity + entropy_weight * normalized_entropy\n    \n    # Deterministic tightness-aware tie-breaking\n    if np.allclose(priority[eligible], priority[eligible][0]):\n        priority += 1e-4 * tightness * (bins_remain_cap ** (-0.5))\n    \n    return np.where(eligible, priority, -np.inf)\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the top heuristics use Z-score normalization across multiple metrics (fit, capacity, utilization), entropy-driven balance, and reinforcement learning concepts, while the worst rely on simpler adaptive weights without comprehensive normalization. (4th) vs (16th) shows that predictive entropy delta analysis and variance forecasting improve performance over basic entropy factors. (8th) vs (19th) highlights that gradient-enhanced scoring with dynamic item classification outperforms static penalty tiers. Overall, superior heuristics integrate **multi-metric Z-synergy**, **entropy-weighted fragmentation control**, **system variance adaptation**, and **reinforcement-style future-state prediction** to balance tight fits with long-term flexibility.\n- \nKeywords: predictive variance modeling, reinforcement learning, non-Z-score normalization, entropy-agnostic balance  \nAdvice: Use **predictive variance modeling** to anticipate fragmentation risks, **reinforcement learning** for long-term flexibility without entropy penalties, **min-max normalization** over Z-scores to reduce sensitivity to outliers, and **entropy-agnostic balance** via static-dynamic hybrid weights.  \nAvoid: Z-score synergy, entropy penalties modulated by system metrics, perturbation-based tie-breaking, exponential utilization boosting.  \nExplanation: Avoiding variance-ratio dependency (Z-scores) and system-metric-modulated entropy penalties prevents instability. Predictive variance modeling and reinforcement learning prioritize long-term gains over short-term metrics, while min-max normalization ensures robustness. Epsilon-based tie-breaking (not perturbation) maintains simplicity without introducing noise.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}