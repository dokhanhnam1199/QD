{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combined adaptive Z-synergy with entropy-weighted fragmentation and balance control.\n    Uses metric normalization, system variance-adaptive weights, and item-classification dynamics.\n    \"\"\"\n    eps = 1e-9\n    if bins_remain_cap.size == 0:\n        return np.array([], dtype=np.float64)\n    \n    eligible = bins_remain_cap >= item\n    if not eligible.any():\n        return np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)\n    \n    # Metrics and system descriptors\n    leftover = bins_remain_cap - item\n    origin_cap = np.max(bins_remain_cap)\n    tightness = item / (bins_remain_cap + eps)\n    utilization = (origin_cap - bins_remain_cap) / (origin_cap + eps)\n    fit_quality = 1.0 / (leftover + eps)\n    \n    system_avg = bins_remain_cap.mean()\n    system_std = bins_remain_cap.std()\n    system_cv = system_std / (system_avg + eps)\n    large_item = item > (system_avg + eps)\n    \n    # Z-score normalization across eligible bins\n    eligible_metrics = {\n        'fit': fit_quality[eligible],\n        'tight': tightness[eligible],\n        'cap': bins_remain_cap[eligible]\n    }\n    mean = {k: np.mean(v) for k, v in eligible_metrics.items()}\n    std = {k: np.std(v) for k, v in eligible_metrics.items()}\n    \n    # Z-score computation for key metrics\n    z_fit = (fit_quality - mean['fit']) / (std['fit'] + eps)\n    z_tight = (tightness - mean['tight']) / (std['tight'] + eps)\n    z_cap = (bins_remain_cap - mean['cap']) / (std['cap'] + eps)\n    \n    # Primary synergy term with exponential enhancer\n    enhancer = np.exp(utilization * tightness)\n    primary_score = (z_fit + z_tight + 0.5 * z_cap) * enhancer\n    \n    # Entropy-weighted penalties for fragmentation and balance\n    frag_penalty = 1.0 - np.exp(-leftover / (origin_cap + eps))\n    frag_weight = 0.3 * system_cv\n    \n    balance_term = -np.abs(leftover - system_avg)\n    balance_weight = 0.2 * system_cv * (2.0 if not large_item else 1.0)\n    \n    # Hybrid scoring based on multi-metric analysis\n    priority = primary_score - frag_weight * frag_penalty + balance_weight * balance_term\n    \n    return np.where(eligible, priority, -np.inf)\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                eps= 2.0891687420063354e-08, \n                z_cap_weight= 0.7968322271186733, \n                frag_weight_factor= 0.06743678360822358, \n                balance_weight_factor= 0.1422737624920359, \n                balance_multiplier_normal= 1.670035684998664, \n                balance_multiplier_large= 1.89673002375526) -> np.ndarray:\n    \"\"\"\n    Combined adaptive Z-synergy with entropy-weighted fragmentation and balance control.\n    Uses metric normalization, system variance-adaptive weights, and item-classification dynamics.\n    \"\"\"\n    if bins_remain_cap.size == 0:\n        return np.array([], dtype=np.float64)\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the top heuristics use Z-score normalization across multiple metrics (fit, capacity, utilization), entropy-driven balance, and reinforcement learning concepts, while the worst rely on simpler adaptive weights without comprehensive normalization. (4th) vs (16th) shows that predictive entropy delta analysis and variance forecasting improve performance over basic entropy factors. (8th) vs (19th) highlights that gradient-enhanced scoring with dynamic item classification outperforms static penalty tiers. Overall, superior heuristics integrate **multi-metric Z-synergy**, **entropy-weighted fragmentation control**, **system variance adaptation**, and **reinforcement-style future-state prediction** to balance tight fits with long-term flexibility.\n- \nKeywords: predictive variance modeling, reinforcement learning, non-Z-score normalization, entropy-agnostic balance  \nAdvice: Use **predictive variance modeling** to anticipate fragmentation risks, **reinforcement learning** for long-term flexibility without entropy penalties, **min-max normalization** over Z-scores to reduce sensitivity to outliers, and **entropy-agnostic balance** via static-dynamic hybrid weights.  \nAvoid: Z-score synergy, entropy penalties modulated by system metrics, perturbation-based tie-breaking, exponential utilization boosting.  \nExplanation: Avoiding variance-ratio dependency (Z-scores) and system-metric-modulated entropy penalties prevents instability. Predictive variance modeling and reinforcement learning prioritize long-term gains over short-term metrics, while min-max normalization ensures robustness. Epsilon-based tie-breaking (not perturbation) maintains simplicity without introducing noise.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}