{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority scores for bins using a Best Fit heuristic.\n    \n    Bins that can fit the item are scored by how little space remains after placement.\n    Bins that cannot fit the item receive a very low priority score.\n    \n    Args:\n        item: Size of the item to be packed.\n        bins_remain_cap: Array of remaining capacities for each bin.\n    \n    Returns:\n        Array of priority scores for each bin.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    fit_scores = item - bins_remain_cap  # Higher score for bins with less remaining space after placement\n    return np.where(can_fit, fit_scores, -np.inf)\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \n- **Keywords**: Dynamic thresholds (\u03bc/\u03c3), adaptive weights (\u03b1/\u03b2 scaling), smooth exponential scoring, feasibility masks  \n- **Advice**: Prioritize distribution-aware thresholds (median, mean+stddev), blend residual minimization with fragmentation penalties via scaled adaptive weights, use smooth exponential scoring for continuity, enforce strict feasibility via -\u221e masks.  \n- **Avoid**: Static thresholds, ratio-based scoring, zero-based fallbacks, simplistic priority schemes, contextual size classification.  \n- **Explanation**: Dynamic thresholds adapt to real-time data, smooth scoring ensures gradient stability, adaptive weights balance competing objectives, and feasibility masks eliminate invalid choices, collectively enhancing robustness and efficiency.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}