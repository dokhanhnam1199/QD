```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Z-score normalized ratio/residual blend with adaptive weights for bin packing.
    
    Combines dynamic statistical adaptation (cv, z-scores) with smooth exponential components
    to balance density packing and residual minimization.
    """
    can_fit = bins_remain_cap >= item
    epsilon = 1e-6

    # Statistical context of current bin capacities
    mean_cap = np.mean(bins_remain_cap)
    std_cap = np.std(bins_remain_cap)
    cv = std_cap / (mean_cap + epsilon)
    alpha = 1.0 / (1.0 + np.exp(-cv * 10))  # Adaptive ratio/residual weighting

    # Component calculations
    residual = bins_remain_cap - item
    ratio = item / (bins_remain_cap + epsilon)
    
    # Smooth exponential residual component scaled by capacity statistics
    tau_residual = mean_cap + std_cap + epsilon
    component_residual = np.exp(-residual / tau_residual)
    
    # Density-aware ratio component
    component_ratio = ratio

    # Z-score normalization of components for balanced contribution
    ratio_z = (component_ratio - np.mean(component_ratio)) / (np.std(component_ratio) + epsilon)
    res_z = (component_residual - np.mean(component_residual)) / (np.std(component_residual) + epsilon)

    # Multi-objective blending with adaptive weights
    composite = alpha * ratio_z + (1 - alpha) * res_z
    
    # Enforce feasibility constraint with -inf masking
    return np.where(can_fit, composite, -np.inf)
```
