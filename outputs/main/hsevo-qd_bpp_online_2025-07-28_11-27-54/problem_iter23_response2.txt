```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Priority using smooth exponential decay calibrated to item size and residual distribution.
    
    Scores are exp(- residual/item) * exp(- residual/(mean_r+std_r)), combining item-relative
    tight fits with global distribution adaptation through smooth multi-objective blending.
    """
    can_fit = bins_remain_cap >= item
    remaining_after = bins_remain_cap - item
    
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    if not np.any(can_fit):
        return scores
    
    feasible_residuals = remaining_after[can_fit]
    
    # Dynamic statistical adaptation
    mean_r = feasible_residuals.mean()
    std_r = feasible_residuals.std()
    scaling = max(mean_r + std_r, 1e-8)  # Robustness against division by zero
    
    # Multi-objective blending with smooth functions
    item_component = feasible_residuals / (item + 1e-8)
    dist_component = feasible_residuals / scaling
    
    feasible_scores = np.exp(-item_component) * np.exp(-dist_component)
    
    scores[can_fit] = feasible_scores
    return scores
```
