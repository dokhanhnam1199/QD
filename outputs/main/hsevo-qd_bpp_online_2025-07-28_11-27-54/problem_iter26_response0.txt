```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines item-relative exponential fit rewards with z-score density rewards, adaptively weighted by coefficient of variation.
    
    Key design: Smooth exponential scoring for item-normalized residuals (tighter fits get higher scores) blended with 
    statistical density rewards (preferring bins near current residual mean), dynamically balanced via logistic-weighted 
    coefficient of variation to handle varying bin distributions.
    """
    EPS = 1e-8
    feasible = bins_remain_cap >= item
    
    if not np.any(feasible):
        return -np.inf * np.ones_like(bins_remain_cap)
    
    # Item-relative fit reward: exponential decay penalty for larger leftover/item ratios
    r = bins_remain_cap - item
    fit_component = np.exp(-r / (item + EPS))  # Tighter fits (small r/item) yield higher scores
    
    # Statistical density reward: Gaussian-like scoring for residuals near current mean
    mu, sigma = np.mean(bins_remain_cap), np.std(bins_remain_cap)
    z = (r - mu) / (sigma + EPS)
    density_component = np.exp(-0.5 * z**2)  # Peaks when residual matches current mean
    
    # Adaptive weight via logistic coefficient of variation
    cv = sigma / (mu + EPS)
    weight = 1 / (1 + np.exp(-cv))  # Higher weight on fit_component when bin capacities vary more
    
    # Combine objectives and enforce feasibility
    combined = weight * fit_component + (1 - weight) * density_component
    return np.where(feasible, combined, -np.inf)
```
