```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Priority function combining exponential decay and Gaussian penalty using residual statistics.
    
    Uses feasibility masking, exponential penalty on residual/mu_r, and Gaussian weighting
    around (mu_r - sigma_r) to balance fit quality and fragmentation avoidance.
    """
    feasible = bins_remain_cap >= item
    feasible_residuals = bins_remain_cap[feasible] - item
    
    if feasible_residuals.size == 0:
        return np.full_like(bins_remain_cap, -np.inf)
    
    mu_r = feasible_residuals.mean()
    sigma_r = feasible_residuals.std()
    
    residual = bins_remain_cap - item
    term1 = np.exp(-residual / (mu_r + 1e-9))  # Exponential decay scaled by mean residual
    term2 = np.exp(-((residual - (mu_r - sigma_r)) / (sigma_r + 1e-9))**2)  # Gaussian penalty
    
    scores = np.where(feasible, term1 * term2, -np.inf)
    return scores
```
