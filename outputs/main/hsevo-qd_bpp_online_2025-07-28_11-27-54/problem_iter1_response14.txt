```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins based on a hybrid of best-fit and harmonic incentives.
    
    Prioritizes bins where the item fills nearly all remaining space (approaching exact fit),
    with a score calculated as the inverse of the remaining capacity after placement.
    Bins that cannot fit the item are assigned -infinity.
    """
    # Initialize scores with zeros
    scores = np.zeros_like(bins_remain_cap, dtype=np.float64)
    
    # Identify bins that can accommodate the item
    can_fit = bins_remain_cap >= item
    
    # Assign -inf to bins that can't fit the item
    scores[~can_fit] = -np.inf
    
    # For viable bins: calculate remaining capacity after placement
    remaining_after = bins_remain_cap[can_fit] - item
    
    # Score bins by inverse of remaining space (amplifies preference for near-perfect fits)
    scores[can_fit] = 1.0 / (remaining_after + 1e-9)  # Add epsilon to avoid division by zero
    
    return scores
```
