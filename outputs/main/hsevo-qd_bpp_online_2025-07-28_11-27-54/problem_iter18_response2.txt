```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins using a distribution-aware heuristic.
    
    Scores are computed via smooth exponential components blending residual minimization
    and consolidation toward a median-based target residual, scaled adaptively by MAD.
    Feasibility mask ensures only valid bins are considered.
    
    Args:
        item: Size of the item to be packed.
        bins_remain_cap: Array of remaining capacities for each bin.
    
    Returns:
        Array of priority scores for each bin.
    """
    # Feasibility mask for bins that can accommodate the item
    can_fit = bins_remain_cap >= item
    
    # Residual capacities after placing the item in feasible bins
    residuals = bins_remain_cap - item
    
    # Median and MAD (robust distribution metrics) for dynamic thresholds
    median_rc = np.median(bins_remain_cap)
    mad_rc = np.median(np.abs(bins_remain_cap - median_rc))
    mad_eps = mad_rc + 1e-8  # Avoid division by zero
    
    # Target residual: consolidation point below median to reduce fragmentation
    target_residual = median_rc - mad_rc
    
    # Component 1: Exponential decay with residual (scaled by MAD)
    comp1 = np.exp(-residuals / mad_eps)
    
    # Component 2: Exponential decay with squared deviation from target_residual (scaled by MAD)
    comp2 = np.exp(-((residuals - target_residual) ** 2) / mad_eps)
    
    # Combine components multiplicatively for smooth, adaptive prioritization
    score_components = comp1 * comp2
    
    # Apply feasibility mask with strict -inf for invalid bins
    return np.where(can_fit, score_components, -np.inf)
```
