```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive priority using CV-weighted exponential combination of residual and bin utilization.
    
    Combines residual minimization and bin utilization rewards with weights based on
    coefficient of variation (CV) of bin capacities. Smooth logistic blending ensures
    contextual adaptability without abrupt transitions.
    """
    feasible = bins_remain_cap >= item
    residual = bins_remain_cap - item

    # Compute global statistics
    mu = np.mean(bins_remain_cap)
    sigma = np.std(bins_remain_cap)
    eps = 1e-8
    cv = sigma / (mu + eps)
    
    # Adaptive penalty factor based on inverse mean capacity
    base_penalty = 1.0 / (mu + eps)
    
    # Logistic blending weight based on CV
    blend_weight = cv / (cv + 1.0)  # Ranges [0, 1)
    
    # Compute terms for all bins
    term1 = - residual * base_penalty * (1 + blend_weight)  # Residual minimization
    term2 = - bins_remain_cap * base_penalty * (1 - blend_weight)  # Bin utilization maximization
    
    # Combine terms exponentially
    scores = np.exp(term1 + term2)
    
    # Mask infeasible bins with -inf
    scores[~feasible] = -np.inf
    
    return scores
```
