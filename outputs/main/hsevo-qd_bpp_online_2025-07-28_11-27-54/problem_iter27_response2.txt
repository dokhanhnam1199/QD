```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    can_fit = bins_remain_cap >= item
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    
    feasible_mask = can_fit
    if not np.any(feasible_mask):
        return scores
    
    # Global statistics
    filled_ratio_all = 1.0 - bins_remain_cap
    mean_filled_ratio_all = np.mean(filled_ratio_all)
    mean_remain_cap = np.mean(bins_remain_cap)
    
    # Feasible bins' data
    remain_feasible = bins_remain_cap[feasible_mask]
    filled_ratio_feasible = filled_ratio_all[feasible_mask]
    
    # Residual normalization
    residual = remain_feasible - item
    residual_norm = residual / (mean_remain_cap + 1e-8)
    
    # Density-aware adaptive component
    with np.errstate(divide='ignore', invalid='ignore'):
        density_component = (filled_ratio_feasible - mean_filled_ratio_all) / (mean_filled_ratio_all + 1e-8)
    
    # Combined exponential scoring
    exponent = -residual_norm + density_component
    scores[feasible_mask] = np.exp(exponent)
    
    return scores
```
