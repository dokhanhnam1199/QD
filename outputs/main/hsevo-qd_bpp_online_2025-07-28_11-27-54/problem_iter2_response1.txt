```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive heuristic combining ratio-based scoring with secondary penalty and dynamic item classification."""
    can_fit = bins_remain_cap >= item
    priority = np.full_like(bins_remain_cap, -np.inf)
    if not np.any(can_fit):
        return priority
    
    valid_caps = bins_remain_cap[can_fit]
    # Dynamic item classification: large vs small relative to median available capacity
    median_cap = np.median(valid_caps)
    large_item = item > median_cap
    
    if large_item:
        # Prioritize tightest fit (Best Fit) for large items
        priority[can_fit] = -valid_caps
    else:
        # Ratio-based scoring with secondary penalty for remaining capacity
        primary = item / valid_caps  # Favors bins with higher space utilization
        secondary = -valid_caps      # Breaks ties toward smaller remaining bins
        priority[can_fit] = primary + 1e-6 * secondary  # Minimal secondary weight
    
    return priority
```
