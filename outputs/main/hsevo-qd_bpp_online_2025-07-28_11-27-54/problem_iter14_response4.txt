```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive exponential scoring using bin statistics and smooth feasibility penalties.
    
    Fit bins scored via exp(-residual/tau) to prioritize small residuals relative to current fragmentation.
    Non-fit bins penalized via -exp(deficit/tau) with tau adaptive to bin capacity std.
    """
    # Calculate dynamic scaling factor from bin statistics
    std_remain = np.std(bins_remain_cap) + 1e-9  # Avoid division by zero
    mean_remain = np.mean(bins_remain_cap)
    
    # Vectorized residual/deficit calculations
    residual = bins_remain_cap - item
    can_fit = residual >= 0
    
    # Adaptive exponential scoring with smooth continuity
    fit_scores = np.exp(-residual / (std_remain * 2))  # Double scaling for smoother gradients
    deficit_penalty = -np.exp((item - bins_remain_cap) / (std_remain * 2))
    
    return np.where(can_fit, fit_scores, deficit_penalty)
```
