```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive exponential scoring combining Worst Fit for small items and Best Fit for large items.
    
    Uses smooth exponential prioritization for both cases: exp(remaining capacity) for small items,
    exp(-leftover) for large items to minimize fragmentation. Combines dynamic item size classification
    with mathematically smooth scoring for improved bin utilization.
    """
    THRESHOLD = 0.5  # Dynamic context-driven threshold for item classification
    valid_mask = bins_remain_cap >= item
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    
    if item <= THRESHOLD:
        # Prioritize bins with largest remaining capacity using exponential scoring
        priorities[valid_mask] = np.exp(bins_remain_cap[valid_mask])  # Smooth amplification of Worst Fit
    else:
        # Prioritize bins with smallest leftover using exponential decay
        leftover = bins_remain_cap[valid_mask] - item
        priorities[valid_mask] = np.exp(-leftover)  # Smooth Best Fit variant
    
    return priorities
```
