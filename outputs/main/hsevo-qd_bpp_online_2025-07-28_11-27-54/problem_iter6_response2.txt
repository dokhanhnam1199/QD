```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Non-smooth stepped priority with static thresholds.
    
    Bins that can fit the item are categorized based on a fixed step condition:
    If after placement, the remaining capacity is <= item_size, assign high priority (1).
    If it fits but leaves more space, assign medium priority (0).
    Bins that can't fit receive -inf priority.
    """
    can_fit = bins_remain_cap >= item
    # Define static threshold based on item size (contextually adjusted)
    threshold = item
    # High priority bins: fill to within 1x item size (non-smooth step)
    high_priority_mask = (bins_remain_cap - item) <= threshold
    
    return np.select(
        condlist=[
            can_fit & high_priority_mask,
            can_fit
        ],
        choicelist=[
            np.full_like(can_fit, 1, dtype=np.float32),
            np.full_like(can_fit, 0, dtype=np.float32)
        ],
        default=-np.inf
    )
```
