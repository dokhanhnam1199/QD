```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Dynamic median-based threshold for adaptive exponential scoring.
    
    Uses bin state distribution to classify item size, blending Worst Fit
    (exp(remaining)) for small and Best Fit (exp(-leftover)) for large items,
    ensuring smooth prioritization with context-aware decision boundaries.
    """
    valid_mask = bins_remain_cap >= item
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    
    if not np.any(valid_mask):
        return priorities
    
    # Context-aware threshold using median remaining capacity
    threshold = np.median(bins_remain_cap[valid_mask])
    
    if item <= threshold:
        # Amplify larger remaining capacities for small items
        priorities[valid_mask] = np.exp(bins_remain_cap[valid_mask])
    else:
        # Prioritize minimal leftover for large items
        leftover = bins_remain_cap[valid_mask] - item
        priorities[valid_mask] = np.exp(-leftover)
    
    return priorities
```
