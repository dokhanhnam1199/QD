```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins based on Best Fit heuristic with quantum-inspired interference.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate how much space would remain if item is placed in each bin
    remaining_space = bins_remain_cap - item
    
    # Valid bins are those that can fit the item
    valid_bins = remaining_space >= 0
    
    # Quantum-inspired priority calculation:
    # 1. Use negative exponential of remaining space to favor bins that become nearly full
    # 2. Add a small sinusoidal perturbation to break ties creatively (like quantum fluctuations)
    priority = np.zeros_like(bins_remain_cap, dtype=np.float64)
    priority[valid_bins] = -np.exp(-remaining_space[valid_bins]) + 0.01 * np.sin(bins_remain_cap[valid_bins] * 100)
    
    # Invalid bins get extremely low priority (like -infinity)
    priority[~valid_bins] = -np.inf
    
    return priority
```
