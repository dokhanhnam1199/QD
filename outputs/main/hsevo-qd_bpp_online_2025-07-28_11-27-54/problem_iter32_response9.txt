```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive fit-density blend using median-based z-scores and CV logistic weight, balancing tight fit and bin density robustness."""
    EPS = 1e-8
    feasible = bins_remain_cap >= item
    
    if not np.any(feasible):
        return -np.inf * np.ones_like(bins_remain_cap)
    
    # Fit reward: exponential decay for residual/item ratios
    r = bins_remain_cap - item
    fit_component = np.exp(-r / (item + EPS))
    
    # Robust density reward: median/MAD-normalized residuals
    mu_median = np.median(bins_remain_cap)
    mad = np.median(np.abs(bins_remain_cap - mu_median))
    z = (r - mu_median) / (mad + EPS)
    density_component = np.exp(-0.5 * z**2)  # Gaussian peak at median residual
    
    # Adaptive weight via logistic CV (using mean/std for global variability)
    mu_std = np.mean(bins_remain_cap)
    sigma_std = np.std(bins_remain_cap)
    cv = sigma_std / (mu_std + EPS)
    weight = 1 / (1 + np.exp(-cv))  # High variability â†’ prioritize fit
    
    # Combine objectives with feasibility mask
    combined = weight * fit_component + (1 - weight) * density_component
    return np.where(feasible, combined, -np.inf)
```
