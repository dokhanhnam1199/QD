```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Dynamic multi-objective scoring combining residual minimization and fragmentation avoidance using bin statistics."""
    if len(bins_remain_cap) == 0:
        return np.array([])
    
    # Feasibility mask and dynamic stats
    feasible = bins_remain_cap >= item
    mu = np.mean(bins_remain_cap)
    sigma = np.std(bins_remain_cap)
    epsilon = 1e-8
    
    # Adaptive penalty and threshold
    penalty_factor = 1.0 / (mu + epsilon)
    threshold = mu - sigma  # Fragmentation avoidance threshold
    
    # Residual and penalty components
    residual = bins_remain_cap - item
    delta = np.clip(threshold - residual, a_min=0.0, a_max=None)
    
    # Smooth multi-objective scoring
    term1 = np.exp(-residual * penalty_factor)  # Residual minimization
    term2 = np.exp(-delta * penalty_factor)     # Fragmentation penalty
    feasible_scores = term1 * term2
    
    # Enforce feasibility strictly
    priority = np.where(feasible, feasible_scores, -np.inf)
    
    return priority
```
