```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Smooth scoring using ratio-based snug fit prioritization with underfill tie-breaking."""
    can_fit = bins_remain_cap >= item
    feasible_caps = bins_remain_cap[can_fit]
    
    if not feasible_caps.size:
        return np.full_like(bins_remain_cap, -np.inf)
    
    # Primary term: smooth ratio-based scoring (higher better for snug fits)
    ratio_score = item / (feasible_caps + 1e-9)  # Avoid division by zero
    
    # Secondary tie-breaker: slight penalty for larger remaining capacities
    tie_breaker = -feasible_caps * 1e-4
    
    # Combine with minimalistic weighting
    combined_score = ratio_score + tie_breaker
    
    # Initialize and fill scores
    scores = np.full_like(bins_remain_cap, -np.inf)
    scores[can_fit] = combined_score
    return scores
```
