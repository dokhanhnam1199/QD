```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Fixed threshold linear scoring combining Worst Fit for small items and Best Fit for large items.
    
    Uses non-smooth priority scoring with static threshold (0.5) to minimize fragmentation
    and optimize bin utilization through direct capacity/leftover comparisons.
    """
    THRESHOLD = 0.5
    valid_mask = bins_remain_cap >= item
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    
    if item <= THRESHOLD:
        # Worst Fit linear scoring: prioritize largest remaining capacity
        priorities[valid_mask] = bins_remain_cap[valid_mask]
    else:
        # Best Fit linear scoring: prioritize smallest leftover via negative residuals
        leftover = bins_remain_cap[valid_mask] - item
        priorities[valid_mask] = -leftover  # Higher score = better fit
    
    return priorities
```
