{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Adaptive exponential scoring combining Worst Fit for small items and Best Fit for large items.\n    \n    Uses smooth exponential prioritization for both cases: exp(remaining capacity) for small items,\n    exp(-leftover) for large items to minimize fragmentation. Combines dynamic item size classification\n    with mathematically smooth scoring for improved bin utilization.\n    \"\"\"\n    THRESHOLD = 0.5  # Dynamic context-driven threshold for item classification\n    valid_mask = bins_remain_cap >= item\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)\n    \n    if item <= THRESHOLD:\n        # Prioritize bins with largest remaining capacity using exponential scoring\n        priorities[valid_mask] = np.exp(bins_remain_cap[valid_mask])  # Smooth amplification of Worst Fit\n    else:\n        # Prioritize bins with smallest leftover using exponential decay\n        leftover = bins_remain_cap[valid_mask] - item\n        priorities[valid_mask] = np.exp(-leftover)  # Smooth Best Fit variant\n    \n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see sophisticated dynamic threshold blending with exponential penalties vs zero scoring; (2nd) vs (19th) shows adaptive item classification vs no prioritization; (1st) vs (2nd) reveals residual-fragmentation tradeoff vs item-size-dependent strategy; (11th) vs (16th) highlights categorical thresholds vs flat scoring; (6th) vs (15th) demonstrates harmonic mean adaptation vs rigid tiers. Top heuristics use context-aware blending, continuous scoring, and multi-objective optimization, while lower ones lack adaptability or nuance.\n- \nKeywords: Contextual Adaptation, Smooth Multi-Objective Blending, Feasibility Masks, Continuity-Driven Scoring  \n**Advice**: Use dynamically contextual thresholds based on item/bin size ratios and distribution statistics, blend smoothed exponential scoring with adaptive penalties (e.g., residual minimization + fragmentation avoidance), enforce feasibility masks (-\u221e for invalid bins) to prune invalid actions.  \n**Avoid**: Static thresholds, step functions/discrete scoring, zero-based fallbacks, or fixed priority rules.  \n**Explanation**: Mathematical continuity and context-aware adaptation prevent abrupt decisions, feasibility masking ensures valid placements, and smooth multi-objective blending balances competing goals (e.g., fit quality vs. bin underfill) to maintain optimization stability and reduce fragmentation.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}