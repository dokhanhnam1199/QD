```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Scores bins by binary non-smooth Best Fit: 1 if best fit (minimal leftover), else 0 for fitting bins; -inf for non-fitting. Avoids smooth scoring for stability. """
    can_fit = bins_remain_cap >= item
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if not can_fit.any():
        return scores
    leftover = bins_remain_cap - item
    min_leftover = leftover[can_fit].min()
    is_best = (leftover == min_leftover) & can_fit
    scores[can_fit] = 0
    scores[is_best] = 1
    return scores
```
