```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines residual minimization with density rewards via exponential weighting.
    
    Scores bins by combining tight fit preference (exponential residual decay)
    and bin density rewards (Gaussian z-score weighting), avoiding thresholds
    while ensuring smooth adaptability to item/bin context.
    """
    # Mask for bins that can fit the item
    can_fit = bins_remain_cap >= item
    
    # Compute global statistics
    mean_remain = np.mean(bins_remain_cap)
    std_remain = np.std(bins_remain_cap)
    
    # Compute z-scores for density analysis
    z_scores = (bins_remain_cap - mean_remain) / (std_remain + 1e-8)
    
    # Term 1: Exponential decay based on residual (tighter fit = higher score)
    residuals = bins_remain_cap - item
    term1 = np.exp(- residuals / (item + 1e-8))  # Normalize by item size
    
    # Term 2: Density reward (higher for bins near distribution mean)
    term2 = np.exp(-z_scores**2)
    
    # Combine terms for valid bins, -inf otherwise
    scores = np.where(can_fit, term1 * term2, -np.inf)
    
    return scores
```
