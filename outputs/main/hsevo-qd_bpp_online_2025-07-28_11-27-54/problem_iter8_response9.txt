```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Exponential scoring with feasibility mask and residual normalization.
    
    Scores bins using exp(- (R/s - 1)) for feasible bins, where R is remaining capacity
    and s is item size. Combines smooth exponential decay with item-relative normalization
    to prioritize bins with minimal leftover space while maintaining mathematical continuity.
    """
    can_fit = bins_remain_cap >= item
    # Normalize residual capacity by item size to enable scale-invariant scoring
    with np.errstate(divide='ignore'):
        residual_ratio = bins_remain_cap / item
    # Compute exponential score: peaks sharply at perfect fit (R=item)
    scores = np.exp(1 - residual_ratio)
    # Mask invalid bins with -inf and return
    return np.where(can_fit, scores, -np.inf)
```
