```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines dynamic threshold-based penalties with statistical density rewards using adaptive blending.
    
    Uses smooth exponential scoring for item-relative fit thresholds (adaptive to item size) and
    density-aware penalties based on bin capacity distribution. Adaptive weight balances objectives
    via logistic coefficient of variation of remaining capacities.
    """
    EPS = 1e-8
    feasible = bins_remain_cap >= item
    
    if not np.any(feasible):
        return -np.inf * np.ones_like(bins_remain_cap)
    
    r = bins_remain_cap - item
    
    # Dynamic threshold score: exponential penalty for residuals exceeding item-relative thresholds
    tight_threshold = 0.15 * item
    excess = np.maximum(r - tight_threshold, 0)  # Penalize residuals > tight threshold
    dynamic_score = np.exp(-excess / (tight_threshold + EPS))  # Smooth decay beyond threshold
    
    # Density-based reward using z-score of residuals relative to current bin distribution
    mu, sigma = np.mean(bins_remain_cap), np.std(bins_remain_cap)
    z = (r - mu) / (sigma + EPS)
    density_reward = np.exp(-0.5 * z**2)  # Higher for residuals in dense regions
    
    # Adaptive weight via logistic coefficient of variation
    cv = sigma / (mu + EPS)
    weight = 1 / (1 + np.exp(-cv))  # Prioritize dynamic_score when cv high (variable bins)
    
    # Multi-objective blend and feasibility mask
    combined = weight * dynamic_score + (1 - weight) * density_reward
    return np.where(feasible, combined, -np.inf)
```
