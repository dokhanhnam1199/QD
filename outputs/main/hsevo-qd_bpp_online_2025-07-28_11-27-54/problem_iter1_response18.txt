```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Priority function implementing a Best Fit strategy with secondary preference for bins with higher current utilization.
    
    Bins are prioritized based on minimizing leftover space (Best Fit), with a tiebreaker that prefers bins with higher
    filled capacity (i.e., lower remaining capacity) to encourage consolidation.
    """
    space_left = bins_remain_cap - item
    valid_mask = space_left >= 0
    
    # Primary priority: minimize space_left (Best Fit) -> -(space_left)
    # Secondary priority: prefer bins with lower remaining capacity (higher utilization) -> -np.log(bins_remain_cap + 1e-9)
    # Combined via weighted sum with epsilon weighting for secondary priority
    primary_priority = np.where(valid_mask, -space_left, -np.inf)
    secondary_priority = np.where(valid_mask, -np.log(bins_remain_cap + 1e-9), -np.inf)
    
    # Weighting: primary priority dominates, secondary breaks ties
    return primary_priority + 1e-6 * secondary_priority
```
