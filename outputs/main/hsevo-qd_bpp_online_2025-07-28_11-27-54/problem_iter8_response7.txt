```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Dynamic threshold-based exponential scoring for Bin Packing.
    
    Uses mean of feasible bins' remaining capacity to classify item.
    Smooth Best Fit (exp^-r) for oversized items, Smooth Worst Fit (exp^r)
    for smaller items to balance fragmentation.
    """
    if len(bins_remain_cap) == 0:
        return np.array([])
    
    can_fit = bins_remain_cap >= item
    if not np.any(can_fit):
        return np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    
    # Dynamic threshold: mean of currently feasible remaining capacities
    feasible_remaining = bins_remain_cap[can_fit]
    threshold = feasible_remaining.mean()
    
    # Adaptive item classification based on threshold
    is_large = item > threshold
    
    # Calculate remaining_after for feasible bins
    remaining_after = feasible_remaining - item
    
    # Smooth scoring based on classification
    if is_large:
        # Best Fit: Exponentially decaying score for smaller residuals
        scale = max(threshold, 1e-6)  # Avoid division by zero
        scores = np.exp(-remaining_after / scale)
    else:
        # Worst Fit: Exponentially increasing score for larger residuals
        scale = max(threshold, 1e-6)
        scores = np.exp(remaining_after / scale)
    
    # Initialize all scores to -inf and assign computed scores
    all_scores = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    all_scores[can_fit] = scores
    
    return all_scores
```
