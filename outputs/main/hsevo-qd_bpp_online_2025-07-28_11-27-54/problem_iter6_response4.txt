```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins using a thresholded categorical heuristic.
    
    Bins that can fit the item are scored in discrete tiers based on normalized
    remaining space after placement. Thresholds are anchored to item size for
    contextual adaptability without instability from continuous scoring.
    
    Args:
        item: Size of the item to be packed.
        bins_remain_cap: Array of remaining capacities for each bin.
    
    Returns:
        Array of priority scores for each bin.
    """
    # Contextual thresholds based on item size
    tight_threshold = 0.15 * item
    moderate_threshold = 0.4 * item

    # Identify viable bins and compute post-placement space
    can_fit = bins_remain_cap >= item
    remaining_after = bins_remain_cap - item

    # Initialize scores with -inf for invalid bins
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)

    # Tier 1: Tight fit (minimal leftover space)
    tight_mask = can_fit & (remaining_after <= tight_threshold)
    # Tier 2: Moderate fit (small leftover space)
    mod_mask = can_fit & (remaining_after > tight_threshold) & (remaining_after <= moderate_threshold)
    # Tier 3: Loose fit (significant leftover space)
    loose_mask = can_fit & (remaining_after > moderate_threshold)

    # Assign discrete priority scores
    scores[tight_mask] = 3
    scores[mod_mask] = 2
    scores[loose_mask] = 1

    return scores
```
