```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Robust fit-density blend: Exponential fit rewards with item-normalized residuals, median-adapted density scoring via Laplacian z-decay, and logistic cv-weighted balance."""
    EPS = 1e-8
    feasible = bins_remain_cap >= item
    
    if not np.any(feasible):
        return -np.inf * np.ones_like(bins_remain_cap)
    
    r = bins_remain_cap - item
    
    # Tight-fit reward: exponential decay scaled by item size
    fit_component = np.exp(-r / (item + EPS))
    
    # Density reward: residuals near median residual using outlier-resilient Laplacian scoring
    mu_r = np.median(r)  # Median central tendency for robustness
    sigma_r = np.std(r)
    z = (r - mu_r) / (sigma_r + EPS)
    density_component = np.exp(-np.abs(z))  # Linear penalty for better tail tolerance
    
    # Adaptive balance via logistic-weighted coefficient of variation of bin capacities
    bin_cv = np.std(bins_remain_cap) / (np.mean(bins_remain_cap) + EPS)
    weight = 1 / (1 + np.exp(-bin_cv))  # Smooth transition between objectives
    
    # Combine objectives with statistical robustness
    combined = weight * fit_component + (1 - weight) * density_component
    
    return np.where(feasible, combined, -np.inf)
```
