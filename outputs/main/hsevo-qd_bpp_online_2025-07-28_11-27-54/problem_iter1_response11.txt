```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Priority function that prefers bins leaving room for future items of the same size."""
    priority = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    can_fit_mask = bins_remain_cap >= item
    if not np.any(can_fit_mask):
        return priority
    
    remaining = bins_remain_cap[can_fit_mask]
    leftover = remaining - item
    group_a_mask = leftover >= item
    
    # Indices for valid bins
    valid_indices = can_fit_mask.nonzero()[0]
    group_a_indices = valid_indices[group_a_mask]
    group_b_indices = valid_indices[~group_a_mask]
    
    # Group A: prioritize bins with leftover >= item, prefer larger leftover
    if len(group_a_indices) > 0:
        leftover_a = leftover[group_a_mask]
        priority[group_a_indices] = 1e6 + leftover_a  # Large base + leftover
    
    # Group B: best fit (prioritize smallest leftover)
    if len(group_b_indices) > 0:
        remaining_b = remaining[~group_a_mask]
        priority[group_b_indices] = item - remaining_b  # Equivalent to best fit
    
    return priority
```
