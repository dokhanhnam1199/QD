```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines residual minimization and density-based rewards with adaptive weights.
    
    Uses z-score density of residuals and normalized fit scores, blending objectives
    via logistic-weighted sum calibrated to bin capacity distribution statistics.
    """
    EPS = 1e-8
    feasible = bins_remain_cap >= item
    
    if not np.any(feasible):
        return -np.inf * np.ones_like(bins_remain_cap)
    
    # Residual and basic fit score
    r = bins_remain_cap - item
    fit_score = (-r) / (item + EPS)  # Item-relative normalization
    
    # Statistical context
    mu, sigma = np.mean(bins_remain_cap), np.std(bins_remain_cap)
    z = (r - mu) / (sigma + EPS)
    
    # Density-based reward (smooth exponential scoring)
    density_reward = np.exp(-0.5 * z**2)
    
    # Adaptive weight via logistic coefficient of variation
    cv = sigma / (mu + EPS)
    weight = 1 / (1 + np.exp(-cv))  # Dynamic balance factor
    
    # Multi-objective blend and feasibility mask
    combined = weight * fit_score + (1 - weight) * density_reward
    return np.where(feasible, combined, -np.inf)
```
