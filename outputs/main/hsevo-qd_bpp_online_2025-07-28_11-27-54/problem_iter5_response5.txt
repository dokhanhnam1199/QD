```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority using static threshold classification and non-smooth linear scoring.
    Large items use Best-Fit style (min residual), small use Worst-Fit (max cap).
    """
    if len(bins_remain_cap) == 0:
        return np.array([])
    
    # Static classification threshold based on mean capacity
    avg_remaining = np.mean(bins_remain_cap)
    threshold = avg_remaining * 0.65  # Fixed contextual factor
    is_large = item > threshold

    can_fit = bins_remain_cap >= item
    scores = np.where(can_fit, 0.0, -np.inf)

    if is_large:
        # Best-Fit: scores prioritize minimal residual (linear, non-smooth)
        scores = np.where(can_fit, item - bins_remain_cap, -np.inf)
    else:
        # Worst-Fit: prefer bins with largest available cap
        scores = np.where(can_fit, bins_remain_cap, -np.inf)
    
    return scores
```
