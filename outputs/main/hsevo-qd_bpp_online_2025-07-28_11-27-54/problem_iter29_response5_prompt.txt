{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines item-relative exponential fit rewards with z-score density rewards, adaptively weighted by coefficient of variation.\n    \n    Key design: Smooth exponential scoring for item-normalized residuals (tighter fits get higher scores) blended with \n    statistical density rewards (preferring bins near current residual mean), dynamically balanced via logistic-weighted \n    coefficient of variation to handle varying bin distributions.\n    \"\"\"\n    EPS = 1e-8\n    feasible = bins_remain_cap >= item\n    \n    if not np.any(feasible):\n        return -np.inf * np.ones_like(bins_remain_cap)\n    \n    # Item-relative fit reward: exponential decay penalty for larger leftover/item ratios\n    r = bins_remain_cap - item\n    fit_component = np.exp(-r / (item + EPS))  # Tighter fits (small r/item) yield higher scores\n    \n    # Statistical density reward: Gaussian-like scoring for residuals near current mean\n    mu, sigma = np.mean(bins_remain_cap), np.std(bins_remain_cap)\n    z = (r - mu) / (sigma + EPS)\n    density_component = np.exp(-0.5 * z**2)  # Peaks when residual matches current mean\n    \n    # Adaptive weight via logistic coefficient of variation\n    cv = sigma / (mu + EPS)\n    weight = 1 / (1 + np.exp(-cv))  # Higher weight on fit_component when bin capacities vary more\n    \n    # Combine objectives and enforce feasibility\n    combined = weight * fit_component + (1 - weight) * density_component\n    return np.where(feasible, combined, -np.inf)\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n### Analyze & experience\n- Comparing (1st) vs (worst): Top heuristics use dynamic thresholds (median/std) and smooth exponential penalties to balance residual minimization with fragmentation avoidance, while the worst (zeros-returning) ignore item/bin context entirely.  \n(2nd) vs (second worst): Adaptive weights (beta=cv-based) in 2nd improve contextual balance vs. 16th-20th's fixed penalty factors.  \n(3rd) vs (4th): Basic Best Fit (3rd) lacks statistical adaptation vs. 4th's z-score density rewards.  \n(5th) vs (6th): 5th's cv-driven weight blending outperforms 6th's static exponential components.  \n(10th) vs (11th): Thresholded tiers (10th) introduce instability vs. 11th's complete non-decision.  \nOverall: Superior heuristics combine **dynamic statistical adaptation** (cv, median, z-scores), **multi-objective smooth blending** (exponential/logistic penalties), and **hard feasibility masking**, while inferior ones use rigid thresholds, ignore context, or fail to penalize fragmentation.\n- \n- Keywords: Dynamic statistical adaptation (mean, std, quantiles), Landau notation asymptoic weighting, smooth exponential/transcendental blending, asymptotic penalty scaling  \n- Advice: Use contextually scaled residual minimization with smooth penalty exponentiation, secondary density penalties via inverse proportionality to bin sparsity, adaptive standardization of weights towards item size harmonics, and rigorous feasibility masking (-\u221e on invalids).  \n- Avoid: Fixed thresholds, dynamic thresholds tied purely to bin stats (e.g., mean/\u03bc+\u03c3), single objective dominance, and any step functions.  \n- Explanation: Dynamic statistical adaptation with smooth exponential blending avoids rigid thresholds while ensuring mathematical continuity. Secondary density penalties balance exploration and packing efficiency. Landau notation asymptotic weighting improves robustness to scale variations, and strict feasibility masking ensures only valid actions are considered.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}