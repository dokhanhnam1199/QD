```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Composite heuristic blending exponential fit ratio and bin utilization.
    
    Uses smooth exponential decay scoring normalized by item size to prioritize:
    1. Bins with minimal remaining space after placement (exp(-Î”/item))
    2. Bins already containing more items (exp(-C/item) penalty for empty bins)
    Combines factors multiplicatively for continuous adaptability with feasibility masking.
    """
    can_fit = bins_remain_cap >= item
    remaining_after = bins_remain_cap - item
    
    # Avoid division by zero edge cases
    eps = 1e-10
    
    # Contextual normalization by item size
    norm_delta = remaining_after / (item + eps)
    norm_capacity = bins_remain_cap / (item + eps)
    
    # Smooth exponential scoring components
    fit_score = np.exp(-norm_delta)           # Favors tight fits
    utilization_bonus = np.exp(-norm_capacity) # Favors filling existing bins
    
    # Multiplicative blending of factors
    composite_score = fit_score * utilization_bonus
    
    # Enforce feasibility with -inf mask
    return np.where(can_fit, composite_score, -np.inf)
```
