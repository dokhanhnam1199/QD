```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    feasible = bins_remain_cap >= item
    if not feasible.any():
        return np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    
    r = bins_remain_cap - item
    feasible_r = r[feasible]
    
    mu = feasible_r.mean()
    std = feasible_r.std()
    eps = 1e-6
    tau = mu + std + eps  # Dynamic scale combining central tendency and spread
    
    # Smooth penalty term to avoid extreme fragmentation
    penalty_term = np.exp(-r / tau)
    
    # Adaptive weight balancing residual minimization and fragmentation avoidance
    beta = item / tau
    
    # Multi-objective score blending
    residual_objective = -r
    fragmentation_objective = -beta * penalty_term
    score = residual_objective + fragmentation_objective
    
    return np.where(feasible, score, -np.inf).astype(np.float64)
```
