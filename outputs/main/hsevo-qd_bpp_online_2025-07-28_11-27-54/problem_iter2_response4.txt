```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid heuristic combining residual minimization for large items and ratio-based scoring for small items.
       Dynamic threshold (0.5) adapts to item size for optimal bin selection."""
    # Adaptive threshold: classify item as large/small relative to normalized bin capacity (assumed 1.0)
    LARGE_ITEM_THRESHOLD = 0.5
    
    if item >= LARGE_ITEM_THRESHOLD:
        # Best Fit: prioritize bins with minimal residual space for large items
        mask = bins_remain_cap >= item
        return np.where(mask, -(bins_remain_cap - item), -np.inf)
    else:
        # Ratio-based: prioritize bins with highest item/capacity ratio for small items
        can_fit = bins_remain_cap >= item
        priority = np.full_like(bins_remain_cap, -np.inf)
        priority[can_fit] = item / bins_remain_cap[can_fit]
        return priority
```
