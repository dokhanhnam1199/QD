```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines adaptive weights with residual minimization and fragmentation penalty.
    Uses exponential scoring for residuals and smooth penalty for bins below fragmentation threshold.
    """
    can_fit = bins_remain_cap >= item
    if not np.any(can_fit):
        return np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    
    mu = np.mean(bins_remain_cap)
    sigma = np.std(bins_remain_cap)
    epsilon = 1e-9
    
    # Dynamic threshold for fragmentation awareness
    threshold = mu - sigma
    
    # Residual computation for feasible bins
    r = bins_remain_cap - item
    
    # Residual score: exponential decay with normalized residual
    residual_score = np.exp(-r / (mu + sigma + epsilon))
    
    # Fragmentation penalty using threshold deficit
    delta = np.clip(threshold - r, a_min=0.0, a_max=None)
    penalty_factor = 1.0 / (sigma + epsilon)  # Normalize by spread
    fragment_score = np.exp(-delta * penalty_factor)
    
    # Adaptive weights based on coefficient of variation
    cv = sigma / (mu + epsilon)
    weight_residual = 1.0 - np.tanh(cv)  # Prioritize tight fits when distribution is tight
    weight_fragment = np.tanh(cv)        # Prioritize fragmentation avoidance when spread out
    
    # Combine components with adaptive weights
    combined_score = weight_residual * residual_score + weight_fragment * fragment_score
    
    # Apply feasibility mask
    return np.where(can_fit, combined_score, -np.inf)
```
