```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Adaptive z-score prioritization using dynamic item classification via mean_remaining. 
    Small items (<=mean_remaining) use exp(z-score) to reward outlier bins, large items use 
    exp(-scaled leftover) for tight fits. Combines distribution-normalized scoring to minimize fragmentation.
    """
    valid_mask = bins_remain_cap >= item
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    
    if not np.any(valid_mask):
        return priorities  # No valid bins available
    
    mu = np.mean(bins_remain_cap)
    sigma = np.std(bins_remain_cap)
    epsilon = 1e-8  # Prevent division by zero
    
    if item <= mu:
        # Prioritize bins with remaining capacity above average (z-score > 0)
        z_scores = (bins_remain_cap - mu) / (sigma + epsilon)
        priorities[valid_mask] = np.exp(z_scores[valid_mask])  # Smooth, scale-invariant scoring
    else:
        # Prioritize bins with minimal leftover scaled by distribution spread
        leftover = bins_remain_cap[valid_mask] - item
        scaled_leftover = leftover / (sigma + epsilon)
        priorities[valid_mask] = np.exp(-scaled_leftover)  # Adaptive tight-fit preference
    
    return priorities
```
