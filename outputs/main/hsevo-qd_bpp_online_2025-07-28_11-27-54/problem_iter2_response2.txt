```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Priority combining ratio-based scoring with exponential tight-fit term.
    
    Uses ratio (item / remaining_cap) for primary scoring, with exponential
    term exp(-remaining_space) to weakly prioritize bins leaving least space.
    """
    valid_mask = bins_remain_cap >= item
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    
    remaining_space = bins_remain_cap[valid_mask] - item
    ratio = item / bins_remain_cap[valid_mask]
    
    # Secondary term: exp(-remaining_space) favors tighter fits
    epsilon = 0.01
    secondary_term = np.exp(-remaining_space)
    
    priorities[valid_mask] = ratio + epsilon * secondary_term
    return priorities
```
