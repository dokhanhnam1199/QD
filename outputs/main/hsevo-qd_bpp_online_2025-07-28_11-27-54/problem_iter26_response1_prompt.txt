{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    feasible = bins_remain_cap >= item\n    if not feasible.any():\n        return np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)\n    \n    r = bins_remain_cap - item\n    feasible_r = r[feasible]\n    \n    mu = feasible_r.mean()\n    std = feasible_r.std()\n    eps = 1e-6\n    tau = mu + std + eps  # Dynamic scale combining central tendency and spread\n    \n    # Smooth penalty term to avoid extreme fragmentation\n    penalty_term = np.exp(-r / tau)\n    \n    # Adaptive weight balancing residual minimization and fragmentation avoidance\n    beta = item / tau\n    \n    # Multi-objective score blending\n    residual_objective = -r\n    fragmentation_objective = -beta * penalty_term\n    score = residual_objective + fragmentation_objective\n    \n    return np.where(feasible, score, -np.inf).astype(np.float64)\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n### Analyze & experience\n- Comparing (1st) vs (17th-18th): Top heuristics use adaptive statistical weights (mean, std, logistic balance) for multi-objective blending, while worst ones return flat scores (no prioritization).  \n(2nd) vs (19th-20th): Better heuristics use dynamic thresholds (e.g., item-to-capacity ratios) and exponential penalties, while lower-ranked ones rely on static \u03c3-based thresholds with less contextual adaptivity.  \n(3rd) vs (11th-16th): Smooth exponential scoring (3rd) outperforms discrete tiered scoring (11th-16th) by avoiding abrupt thresholds and enabling gradient-based bin selection.  \n(4th) vs (5th): Dynamic median-based blending (4th) balances residual minimization and fragmentation avoidance more robustly than fixed thresholds.  \n(6th-7th) vs (8th-10th): Heuristics combining residual objectives with item-relative rewards (e.g., r/item normalization) adapt better to varying item sizes than\u5355\u4e00 penalty terms.\n- \n**Keywords**: Dynamic thresholds, statistical context, smooth exponential blending, feasibility masking  \n**Advice**: Use bin/item statistics (mean, std) to adaptively weight residual minimization + density-aware penalties; apply smooth exponential/logistic scoring; enforce feasibility via -\u221e masking; prioritize contextual scaling (e.g., size ratios).  \n**Avoid**: Static thresholds, discrete tiers, non-adaptive weights, zero-based fallbacks, or step functions.  \n**Explanation**: Dynamic statistical adaptation ensures context-aware prioritization, while smooth scoring and feasibility masking prevent fragmentation and invalid allocations. Multi-objective blending with adaptive weights balances residual reduction and density optimization, enhancing robustness across varying distributions.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}