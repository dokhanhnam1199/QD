```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores for bins using a context-aware exponential blending heuristic.
    
    Combines statistical z-scores of residuals with fit ratios via smooth exponential weighting,
    prioritizing bins that balance optimal residual minimization and density-aware consolidation.
    
    Args:
        item: Size of the item to be packed.
        bins_remain_cap: Array of remaining capacities for each bin.
    
    Returns:
        Array of priority scores for each bin.
    """
    can_fit = bins_remain_cap >= item
    scores = np.full_like(bins_remain_cap, -np.inf)
    
    if not np.any(can_fit):
        return scores
    
    feasible_bins = bins_remain_cap[can_fit]
    residual = feasible_bins - item
    
    # Residual statistics for adaptive normalization
    mu_r, sigma_r = np.mean(residual), np.std(residual)
    sigma_r += 1e-8  # Avoid division by zero
    
    # Z-score of residuals and exponential amplification
    z_r = (residual - mu_r) / sigma_r
    exp_component = np.exp(-z_r)  # Reward bins with residuals below average
    
    # Fit ratio (item/remaining_cap) with density-aware scaling
    fit_ratio = item / (feasible_bins + 1e-8)
    
    # Contextual blending via multiplicative combination
    raw_scores = fit_ratio * exp_component
    
    # Normalize to [0, 1] range for stability
    scores_can_fit = (raw_scores - raw_scores.min()) / (raw_scores.ptp() + 1e-8)
    
    # Assign final scores to feasible bins
    scores[can_fit] = scores_can_fit
    return scores
```
