```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid priority function combining Best Fit for large items and Worst Fit for small items."""
    valid_mask = bins_remain_cap >= item
    priority = np.full_like(bins_remain_cap, -np.inf)
    
    if item > 0.5:
        # Best Fit: prioritize bins with smallest remaining capacity that fits the item
        # Convert to maximization by negating the leftover space
        best_fit_score = - (bins_remain_cap - item)
        priority[valid_mask] = best_fit_score[valid_mask]
    else:
        # Worst Fit: prioritize bins with largest remaining capacity
        priority[valid_mask] = bins_remain_cap[valid_mask]
    
    return priority
```
