```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Scores bins using adaptive exponential scoring combining residual minimization and fragmentation avoidance.
    
    Uses bin's mean and std to compute dynamic thresholds and penalty factors.
    """
    feasible = bins_remain_cap >= item
    residual = bins_remain_cap - item
    
    # Compute bin statistics for adaptivity
    mu = np.mean(bins_remain_cap)
    sigma = np.std(bins_remain_cap)
    epsilon = 1e-8
    
    # Adaptive penalty factor based on standard deviation to normalize scaling
    penalty_factor = 1.0 / (sigma + epsilon)
    
    # Fragmentation threshold: 1Ïƒ below mean to avoid small fragments
    threshold = mu - sigma
    
    # Threshold deficit penalty for fragmentation avoidance
    delta = np.clip(threshold - residual, 0.0, None)
    
    # Multi-objective scoring: residual minimization (term1) + fragmentation penalty (term2)
    term1 = np.exp(-residual * penalty_factor)
    term2 = np.exp(-delta * penalty_factor)
    feasible_scores = term1 * term2
    
    # Strict feasibility enforcement via -inf masking
    return np.where(feasible, feasible_scores, -np.inf)
```
