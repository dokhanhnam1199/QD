```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combined heuristic using exponential scoring with dynamic thresholds.
    
    Scores bins by combining residual minimization and fragmentation avoidance
    (μ-σ threshold) using adaptive exponential weights and strict feasibility masking.
    """
    can_fit = bins_remain_cap >= item
    mu = np.mean(bins_remain_cap)
    sigma = np.std(bins_remain_cap)
    epsilon = 1e-8
    penalty_factor = 1.0 / (mu + epsilon)
    
    # Fragmentation avoidance threshold: 1σ below mean
    threshold = mu - sigma
    
    residual = bins_remain_cap - item
    delta = np.clip(threshold - residual, 0.0, None)  # Below threshold
    
    # Exponential scoring for feasible bins
    term1 = np.exp(-residual * penalty_factor)  # Residual minimization
    term2 = np.exp(-delta * penalty_factor)      # Fragmentation penalty
    feasible_scores = term1 * term2
    
    # Strict feasibility mask (-inf for invalid bins)
    return np.where(can_fit, feasible_scores, -np.inf)
```
