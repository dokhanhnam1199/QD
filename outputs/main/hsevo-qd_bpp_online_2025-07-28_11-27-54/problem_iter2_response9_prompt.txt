{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority scores for bins based on a Best Fit heuristic with exponential weighting.\n    \n    Bins that can fit the item are prioritized by how tightly they would pack it (exponentially \n    decaying reward for smaller leftover space). Invalid bins receive negative infinite priority.\n    \"\"\"\n    remaining_after = bins_remain_cap - item\n    valid = remaining_after >= 0\n    # Exponentially reward smaller leftover space: priority = exp(-remaining_after)\n    priority = np.where(valid, np.exp(-remaining_after), -np.inf)\n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n### Analyze & experience\n- Comparing (1st) vs (13th-20th): The hybrid strategy (1st) adapts to item size (small/large) for dynamic prioritization, while the worst heuristics (zeros/random) lack discriminative logic. (2nd) vs (15th): Standard Best Fit (2nd) outperforms quantum-inspired variants (15th) by avoiding unnecessary complexity (e.g., sinusoidal noise). (3rd) vs (10th): Ratio-based scoring (3rd) and exponential weighting (10th) both prioritize tight fits but the former\u2019s simplicity aids stability. (6th) vs (7th): Secondary penalization of bin capacity (6th) improves over inverse residual scoring (7th) by balancing fit quality and bin density. (20th) vs (others): The niche strategy of reserving space for future items (20th) underperforms due to over-specialization. Overall: Top heuristics focus on **adaptive, mathematically grounded prioritization** of fit quality, while worst ones suffer from randomness, oversimplification, or excessive noise.\n- \n- **Keywords**: Adaptive thresholds, smooth scoring, secondary tie-breakers, simplicity  \n- **Advice**: Prioritize dynamic context-driven thresholds (e.g., item size classification), mathematically smooth scoring (ratios, exponentials), secondary tie-breaking terms (e.g., underfill penalties), and minimalistic design.  \n- **Avoid**: Static thresholds, non-smooth scoring (e.g., step functions), overcomplicated tie-breakers, and rigid priorities.  \n- **Explanation**: Dynamic adaptation ensures robustness across scenarios, smooth scoring enables gradient-based optimization, secondary terms resolve ties effectively, and simplicity reduces computational overhead while avoiding brittleness from fixed rules.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}