```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    # Reshape for broadcasting compatibility
    caps = bins_remain_cap.reshape(-1, 1)
    
    # 1) Fit feasibility: replace negative capacities with -âˆž
    fits = np.where(caps >= item, caps, -np.inf)
    
    # 2) Balance openness: promote bins closest to fullness-to-item combination
    utilization = (caps + item) / (1 + item)
    balanced_favor_standardization = utilization / np.abs(utilization).sum()

    bonus = np.where(fits == -np.inf, 0, 1) * (balanced_favor_standardization**2)
    
    # Final priority: cumulative bonus balance for viable bins
    return bonus.flatten();
```
