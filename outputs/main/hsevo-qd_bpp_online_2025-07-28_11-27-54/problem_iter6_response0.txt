```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Non-smooth priority function with dynamic threshold anchors.
    
    Bins are scored based on a fixed threshold relative to the item size.
    High priority bins are those requiring minimal extra space beyond the item.
    
    Args:
        item: Item size.
        bins_remain_cap: Array of bin remaining capacities.
    
    Returns:
        Priority scores for each bin.
    """
    # Contextually adjusted fixed threshold (static multiplier on item size)
    space_anchor = item * 0.2  # static multiplier as fixed threshold
    can_fit = bins_remain_cap >= item
    # Tight-fit criterion: remaining capacity within [item, item + space_anchor]
    tight_fit = can_fit & (bins_remain_cap <= (item + space_anchor))
    # Non-smooth step function scoring
    scores = np.where(tight_fit, 1, 0)
    # Enforce impossibilities
    return np.where(can_fit, scores, -np.inf)
```
