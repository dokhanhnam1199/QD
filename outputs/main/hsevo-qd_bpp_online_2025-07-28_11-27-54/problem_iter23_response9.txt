```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Dynamic heuristic combining bin statistics and item-relative thresholds for smooth residual-fragmentation tradeoff.
    
    Uses exponential residual scoring scaled by bin/item statistics, adaptive weights from coefficient of variation,
    and feasibility masking. Fragmentation threshold combines mean-variance and item proportion criteria.
    """
    can_fit = bins_remain_cap >= item
    if not np.any(can_fit):
        return np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    
    mu = np.mean(bins_remain_cap)
    sigma = np.std(bins_remain_cap)
    epsilon = 1e-9
    
    # Combined threshold: bin-based (mu-sigma) and item-based (0.15*item)
    threshold_bin = mu - sigma
    threshold_item = 0.15 * item
    threshold = np.maximum(threshold_bin, threshold_item)
    
    r = bins_remain_cap - item
    
    # Residual score scaled by bin stats + item size
    residual_denominator = (mu + sigma) + item + epsilon
    residual_score = np.exp(- r / residual_denominator)
    
    # Fragment score via logistic transition
    threshold_diff = r - threshold
    fragment_score = 1.0 / (1.0 + np.exp(threshold_diff / (sigma + epsilon)))
    
    # Adaptive weights via coefficient of variation
    cv = sigma / (mu + epsilon)
    weight_residual = 1.0 - np.tanh(cv)
    weight_fragment = np.tanh(cv)
    
    combined_score = weight_residual * residual_score + weight_fragment * fragment_score
    
    return np.where(can_fit, combined_score, -np.inf)
```
