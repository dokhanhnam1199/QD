```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Assigns priority scores using fixed item threshold: large items (>0.5) use worst fit, small use best fit.
    """
    if len(bins_remain_cap) == 0:
        return np.array([])
    
    can_fit = bins_remain_cap >= item
    score = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    
    # Fixed-size classification at 0.5 (assumes normalized bin capacity of 1.0)
    if item > 0.5:
        # Worst fit for large items: prioritize largest available empty space
        score[can_fit] = bins_remain_cap[can_fit]
    else:
        # Best fit for small items: prioritize smallest residual space after packing
        residual = bins_remain_cap[can_fit] - item
        score[can_fit] = -residual  # Higher value for smaller residual
    
    return score
```
