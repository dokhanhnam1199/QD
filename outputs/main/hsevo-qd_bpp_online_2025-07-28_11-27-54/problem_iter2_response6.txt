```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritize bins with best fit and secondary tie-breaker for higher utilization.
    
    Combines inverse-remaining-space scoring with a small penalty term for bins
    that are already more filled (lower remaining capacity), balancing fit quality
    and bin density to minimize wasted space.
    """
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    can_fit = bins_remain_cap >= item
    if not np.any(can_fit):
        return scores  # All bins are -inf if item can't fit anywhere
    
    remaining_after = bins_remain_cap[can_fit] - item
    fit_score = 1.0 / (remaining_after + 1e-9)  # Primary score: tight fit incentive
    tie_breaker = -bins_remain_cap[can_fit]     # Secondary: prefer denser bins
    scores[can_fit] = fit_score + 1e-6 * tie_breaker  # Combine with small weight
    return scores
```
