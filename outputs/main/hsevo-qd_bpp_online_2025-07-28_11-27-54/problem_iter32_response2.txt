```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines adaptive CV-based weights with mu-normalized residual scoring for smoother distribution adaptation.
    
    Uses v1's mu-based penalty factor in exponential residual scoring while retaining v0's logistic fragment scoring
    and dynamic weight blending. Maintains strict feasibility masking and smooth transitions.
    """
    can_fit = bins_remain_cap >= item
    if not np.any(can_fit):
        return np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    
    mu = np.mean(bins_remain_cap)
    sigma = np.std(bins_remain_cap)
    epsilon = 1e-9
    
    # Mu-normalized penalty factor from v1 for residual scoring
    penalty_factor = 1.0 / (mu + epsilon)
    
    threshold = mu - sigma
    r = bins_remain_cap - item
    
    # Residual score using v1's penalty factor scaling
    residual_score = np.exp(-r * penalty_factor)
    
    # Logistic fragment scoring with v0's sigma-normalized transition
    threshold_diff = r - threshold
    fragment_score = 1.0 / (1.0 + np.exp(threshold_diff / (sigma + epsilon)))
    
    # Adaptive weights via v0's CV-based tanh blending
    cv = sigma / (mu + epsilon)
    weight_residual = 1.0 - np.tanh(cv)
    weight_fragment = np.tanh(cv)
    
    combined_score = weight_residual * residual_score + weight_fragment * fragment_score
    return np.where(can_fit, combined_score, -np.inf)
```
