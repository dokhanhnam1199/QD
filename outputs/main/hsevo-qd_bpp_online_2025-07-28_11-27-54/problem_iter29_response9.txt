```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores using z-score density rewards and adaptive residual minimization.
    
    Combines dynamic statistical adaptation (mean/std of remaining capacities),
    smooth exponential blending of residual minimization and bin density rewards,
    and rigorous feasibility masking. Penalizes bins far from distribution center
    while adapting to item-bin size harmonics.
    """
    residual = bins_remain_cap - item
    feasible = residual >= 0
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    if not np.any(feasible):
        return scores

    # Extract feasible subsets
    feasible_residual = residual[feasible]
    feasible_remain = bins_remain_cap[feasible]
    n_feasible = feasible_remain.shape[0]

    # Dynamic bin statistics
    mu_remain = np.mean(feasible_remain)
    sigma_remain = np.std(feasible_remain)
    cv_remain = sigma_remain / (mu_remain + 1e-8)
    epsilon = 1e-8

    # Adaptive penalty scaling with item-harmonic normalization
    alpha = 1.0 / (mu_remain + item + epsilon)

    # Primary objective: Residual minimization (Best Fit proxy)
    term1 = np.exp(-feasible_residual * alpha)

    # Secondary objective: Bin density rewards via z-score proximity
    z_remain = (feasible_remain - mu_remain) / (sigma_remain + epsilon)
    beta = 0.5 * (1.0 + cv_remain)  # Contextual weight blending
    term2 = np.exp(-beta * np.abs(z_remain))  # Closer to mean = higher score

    # Multi-objective convex combination
    feasible_scores = term1 * term2

    # Assign computed scores to output array
    scores[feasible] = feasible_scores
    return scores
```
