```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines item-aware exponential penalty with bin distribution health.
    
    Uses smooth exponential decay based on normalized remaining space and
    contextual adaptivity via Gaussian RBF on bin statistics to balance
    tight packing with fragmentation control.
    
    Args:
        item: Size of the item to be packed.
        bins_remain_cap: Array of remaining capacities for each bin.
    
    Returns:
        Array of priority scores for each bin.
    """
    can_fit = bins_remain_cap >= item
    remaining_space = bins_remain_cap - item
    
    # Contextual adaptivity using bin statistics
    valid_caps = bins_remain_cap[can_fit] if np.any(can_fit) else bins_remain_cap
    mean_cap = np.mean(valid_caps)
    std_cap = np.std(valid_caps)
    
    # Smooth exponential penalty for residual minimization (item-aware)
    fit_component = np.exp(-remaining_space / (item + 1e-9))
    
    # Bin health via Gaussian RBF to encourage uniform bin utilization
    z_scores = (bins_remain_cap - mean_cap) / (std_cap + 1e-9)
    health_component = np.exp(-0.5 * z_scores**2)  # Bell curve centered at mean
    
    # Multi-objective blending with product of smooth components
    combined_score = fit_component * health_component
    
    return np.where(can_fit, combined_score, -np.inf)
```
