```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Uses fixed size thresholds and strategy blending: Best Fit for large items (>=0.5), Worst Fit for small items.
    """
    LARGE_THRESHOLD = 0.5  # Static threshold for size classification
    is_large = item > LARGE_THRESHOLD

    can_fit_mask = bins_remain_cap >= item
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)

    residual = bins_remain_cap - item
    if is_large:
        scores[can_fit_mask] = -residual[can_fit_mask]  # Best Fit: minimize residual
    else:
        scores[can_fit_mask] = residual[can_fit_mask]   # Worst Fit: maximize residual

    return scores
```
