```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Robust statistical heuristic combining residual minimization with item-aware fragmentation avoidance.
    
    Uses median/MAD for robustness, rewards bins leaving r >= item (room for another), blends components 
    using CV-based weights. Smooth logistic transitions and exponential penalties ensure continuity.
    """
    can_fit = bins_remain_cap >= item
    if not np.any(can_fit):
        return np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    
    mu = np.median(bins_remain_cap)
    mad = np.median(np.abs(bins_remain_cap - mu))
    sigma = mad
    epsilon = 1e-9
    
    r = bins_remain_cap - item
    
    residual_score = np.exp(-r / (mu + sigma + epsilon))
    
    threshold_diff = r - item
    fragment_score = 1.0 / (1.0 + np.exp(-threshold_diff / (sigma + epsilon)))
    
    cv = sigma / (mu + epsilon)
    weight_residual = 1.0 - np.tanh(cv)
    weight_fragment = np.tanh(cv)
    
    combined_score = weight_residual * residual_score + weight_fragment * fragment_score
    
    return np.where(can_fit, combined_score, -np.inf)
```
