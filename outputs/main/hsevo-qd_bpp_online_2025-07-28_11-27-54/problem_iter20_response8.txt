```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Dynamic bin/item-aware thresholding with smooth penalty blending residual minimization and fragmentation control.
    
    Combines elements from v0 and v1 through:
    1. Adaptive threshold T = max(median bin capacity, item size) for joint context sensitivity
    2. Continuous exponential penalty shaped by T to balance immediate fit and future flexibility
    3. Feasibility masking with gradient-based scoring instead of discrete tiers
    """
    can_fit = bins_remain_cap >= item
    r = bins_remain_cap - item
    
    # Joint context threshold: robust median of all bins + item size awareness
    T = np.clip(np.maximum(np.median(bins_remain_cap), item), 1e-8, None)
    
    feasible_r = np.where(can_fit, r, np.inf)
    # Penalty shaped by both bin distribution and item scale through T
    penalty = np.exp(- feasible_r / T )
    
    # Multi-objective blend: direct residual cost + fragmentation penalty
    blended_score = -r - penalty  # Higher (less negative) scores preferred
    
    return np.where(can_fit, blended_score, -np.inf)
```
