```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Improved heuristic combining residual minimization, fragmentation avoidance, and utilization maximization.
    
    Uses dynamic thresholds, smooth exponential scoring, and adaptive weights.
    """
    can_fit = bins_remain_cap >= item
    if not np.any(can_fit):
        return np.full_like(bins_remain_cap, -np.inf)
    
    mu = np.mean(bins_remain_cap)
    sigma = np.std(bins_remain_cap)
    epsilon = 1e-9
    
    # Dynamic threshold for fragmentation awareness
    threshold = mu - sigma
    
    # Residual computation for feasible bins
    r = bins_remain_cap - item
    
    # Smooth exponential residual score blended with item-relative utilization reward
    residual_score = np.exp(-r / (mu + sigma + epsilon)) * (item / (bins_remain_cap + epsilon))
    
    # Corrected fragment score penalizing bins leaving residuals below threshold
    threshold_diff = threshold - r
    fragment_score = 1.0 / (1.0 + np.exp(threshold_diff / (sigma + epsilon)))
    
    # Adaptive weights based on coefficient of variation
    cv = sigma / (mu + epsilon)
    weight_residual = 1.0 - np.tanh(cv)  # Dominates when distribution is tight
    weight_fragment = np.tanh(cv)        # Dominates when distribution is spread out
    
    # Combine components with adaptive weights
    combined_score = weight_residual * residual_score + weight_fragment * fragment_score
    
    # Apply feasibility mask
    return np.where(can_fit, combined_score, -np.inf)
```
