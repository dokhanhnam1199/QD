{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Adaptive priority combining residual minimization and fragmentation avoidance.\n    \n    Uses dynamic alpha blending based on item-to-threshold ratio to balance objectives:\n    large items prioritize fit quality (-r), small items prioritize space cohesion (-exp(-r/T)).\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    r = bins_remain_cap - item  # Residual capacity after placement\n    \n    # Dynamic threshold using median remaining capacity\n    T = np.clip(np.median(bins_remain_cap), 1e-8, None)\n    \n    # Adaptive blending factor based on item size relative to T (sigmoidal response)\n    alpha = 1.0 - np.exp(-item / T)  # Approaches 1 for large items, 0 for small\n    \n    # Smooth penalty term for fragmentation avoidance\n    feasible_r = np.where(can_fit, r, np.inf)  # Mask invalid bins for statistics\n    penalty_term = np.exp(-feasible_r / T)  # Exponential decay penalizes small residuals\n    \n    # Convex combination of residual minimization and penalty shaping\n    blended_score = alpha * (-r) + (1 - alpha) * (-penalty_term)\n    \n    # Enforce feasibility with negative infinity mask\n    return np.where(can_fit, blended_score, -np.inf)\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see adaptive alpha blending with dynamic thresholds (median-based) in 1st outperforms static penalty factors in 20th. (3rd) vs (12th): 3rd\u2019s context-aware tau (\u03bc+\u03c3) balances residual minimization and fragmentation avoidance, while 12th\u2019s zero-scores fail to prioritize. (6th) vs (4th): Smooth exponential scoring in 6th improves bin utilization over 4th\u2019s rigid step-function thresholds. (11th) vs (15th): Item-relative tiered thresholds in 11th reduce fragmentation better than 15th\u2019s generic penalty terms. Overall: Top heuristics use dynamic thresholds, multi-objective blending, and smooth scoring; worst rely on static rules or trivial outputs.\n- \n- **Keywords**: Dynamic thresholds (\u03bc/\u03c3), adaptive weights (\u03b1/\u03b2 scaling), smooth exponential scoring, feasibility masks  \n- **Advice**: Prioritize distribution-aware thresholds (median, mean+stddev), blend residual minimization with fragmentation penalties via scaled adaptive weights, use smooth exponential scoring for continuity, enforce strict feasibility via -\u221e masks.  \n- **Avoid**: Static thresholds, ratio-based scoring, zero-based fallbacks, simplistic priority schemes, contextual size classification.  \n- **Explanation**: Dynamic thresholds adapt to real-time data, smooth scoring ensures gradient stability, adaptive weights balance competing objectives, and feasibility masks eliminate invalid choices, collectively enhancing robustness and efficiency.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}