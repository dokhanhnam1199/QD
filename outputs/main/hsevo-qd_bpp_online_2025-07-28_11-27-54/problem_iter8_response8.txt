```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Exponential score blend of fit ratio and residual penalty, scaled by harmonic mean of viable capacities.
    
    Bins are scored by both their fit ratio (item/bins_remain_cap) and an exponential penalty for residual space, 
    with adaptive scaling via harmonic mean of viable bin capacities. Feasibility mask ensures only valid bins are selected.
    """
    can_fit = bins_remain_cap >= item
    residual = bins_remain_cap - item
    
    # Handle edge case: no viable bins
    valid_mask = can_fit & (bins_remain_cap > 0)
    valid_caps = bins_remain_cap[valid_mask]
    if not np.any(valid_mask):
        return np.full_like(bins_remain_cap, -np.inf)
    
    # Adaptive scaling via harmonic mean of viable bin capacities
    harmonic_mean = len(valid_caps) / np.sum(1.0 / valid_caps)
    
    # Smooth blended scoring: fit_ratio weights exponential penalty for residual space
    fit_ratio = item / (bins_remain_cap + 1e-12)  # +eps avoids division by zero
    exp_penalty = np.exp(-residual / (harmonic_mean + 1e-12))
    
    return np.where(can_fit, fit_ratio * exp_penalty, -np.inf)
```
