```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Dynamic median-based blending with z-score density rewards for residual clustering.
    
    Combines residual minimization & fragmentation avoidance (v0) with secondary
    density rewards using z-score proximity to mean residual. Adaptive weight scaling
    amplifies clustering incentives when bin capacity variance is high.
    """
    can_fit = bins_remain_cap >= item
    r = bins_remain_cap - item  # Residual capacity after placement
    
    # Feasible residual mask for numerical stability
    feasible_r = np.where(can_fit, r, np.inf)
    
    # Dynamic threshold based on median remaining capacity
    T = np.clip(np.median(bins_remain_cap), 1e-8, None)
    
    # Primary objective: residual minimization with exponential fragmentation penalty
    penalty_primary = np.exp(-feasible_r / T)  # Higher penalty for small residuals
    blended_primary = -r - penalty_primary     # Balance residual & penalty
    
    # Secondary objective: density rewards via z-score proximity to mean residual
    feasible_mask = can_fit & (feasible_r != np.inf)
    feasible_count = np.sum(feasible_mask)
    
    if feasible_count > 0:
        mu_r = np.mean(feasible_r[feasible_mask])
        sigma_r = np.std(feasible_r[feasible_mask]) + 1e-8
        
        # Z-score normalized by residual distribution statistics
        z_scores = (r - mu_r) / sigma_r
        secondary_reward = np.exp(-np.abs(z_scores))  # Reward proximity to mean
    else:
        secondary_reward = np.zeros_like(r)
    
    # Adaptive scaling: amplify secondary reward when bin capacity variance is high
    bin_cv = np.std(bins_remain_cap) / (T + 1e-8)  # Coefficient of variation
    adaptive_weight = 1.0 + bin_cv  # Amplify clustering incentives
    
    # Final score: primary objective + scaled density reward
    blended_total = blended_primary + adaptive_weight * secondary_reward
    
    # Enforce feasibility constraints with -inf mask
    return np.where(can_fit, blended_total, -np.inf)
```
