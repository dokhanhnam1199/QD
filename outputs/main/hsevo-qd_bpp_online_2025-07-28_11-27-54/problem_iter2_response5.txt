```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive best-fit with dynamic bin consolidation based on item size.
    
    Combines minimal leftover prioritization with a secondary penalty for remaining 
    capacity scaled by (1-item), favoring denser packing for small items. Invalid bins 
    receive -inf priority.
    """
    valid = bins_remain_cap >= item
    leftover = bins_remain_cap - item
    # Adaptive weight: smaller items use higher secondary penalty on remaining capacity
    alpha = 0.1 * (1.0 - item)  # Dynamic scaling based on item size (normalized bins assumed)
    combined = -leftover - alpha * bins_remain_cap
    combined[~valid] = -np.inf
    return combined
```
