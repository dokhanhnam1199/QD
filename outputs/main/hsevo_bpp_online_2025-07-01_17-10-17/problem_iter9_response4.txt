```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Assign priorities to bins using a combination of waste minimization,
    fill target, and a penalty for bins that are already too full.
    """
    epsilon = 1e-9

    # Waste minimization priority (like v1)
    distances = np.abs(bins_remain_cap - item)
    base_priority = 1 / (distances + epsilon)

    # Fill target priority (encourage bins to be around a certain fill level)
    target_fill_ratio = 0.75  # Aim for bins to be 75% full
    target_capacity = target_fill_ratio  #relative to bin capacity which is 1
    
    # Distance from current capacity to target capacity after placing the item
    target_distances = np.abs((bins_remain_cap - item) - (1-target_capacity))
    target_priority = 1 / (target_distances + epsilon)

    # Penalty for bins that are already close to full.  Avoidance Strategy.
    # Reduces the chance of creating a very small remaining space that will be hard to fill.
    fullness_penalty = np.exp(-5 * (bins_remain_cap - item))  # Exponential decay. Adjust the 5

    priorities = base_priority + target_priority + fullness_penalty

    # Invalidate bins that can't fit the item.
    priorities[bins_remain_cap < item] = 0

    return priorities
```
