```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritize bins based on waste, target fill (75%), and almost-full penalty."""
    epsilon = 1e-9
    # Waste Minimization
    distances = np.abs(bins_remain_cap - item)
    waste_priority = 1 / (distances + epsilon)

    # Target Fill Level (75%)
    target_fill = 0.75
    capacity = np.max(bins_remain_cap + item)
    target_capacity = target_fill * capacity
    fill_level_diff = np.abs((bins_remain_cap - item) - (1 - target_fill) * capacity)
    fill_level_priority = 1 / (fill_level_diff + epsilon)

    # Almost Full Penalty (Discourage filling bins beyond 90%)
    almost_full_threshold = 0.9
    almost_full_penalty = np.where((bins_remain_cap - item) / capacity > almost_full_threshold, 0.5, 1.0)

    # Combined Priority (Waste > Fill > Almost Full)
    priorities = waste_priority + fill_level_priority * 0.6 * almost_full_penalty
    priorities[bins_remain_cap < item] = 0  # Invalidate bins

    return priorities
```
