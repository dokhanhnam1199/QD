```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste, fill level, and avoids near-full bins."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    possible_bins = bins_remain_cap >= item

    if not np.any(possible_bins):
        return priorities

    waste = bins_remain_cap - item
    priorities[possible_bins] = 1.0 / (waste[possible_bins] + 0.001)

    half_full = (bins_remain_cap[possible_bins] - item) - (0.5 * np.max(bins_remain_cap))
    priorities[possible_bins] += np.exp(-0.5 * (half_full/np.max(bins_remain_cap))**2)

    almost_full = bins_remain_cap > 0.9*np.max(bins_remain_cap)
    priorities[almost_full] *= 0.9

    # Small additional factor to utilize more empty bins (lower remaining capacity)
    priorities[possible_bins] += (bins_remain_cap[possible_bins] / np.max(bins_remain_cap)) * 0.1

    return priorities
```
