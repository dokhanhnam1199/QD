```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First, give a very low priority to bins that cannot fit the item.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # For bins that *can* fit the item, prioritize based on a few factors:
    # 1. Remaining capacity after adding the item (lower is better).
    # 2. Percentage of bin filled by the item (higher is better - first fit heuristic influence).
    # 3. Avoidance of near-empty bins to postpone creation of new bins

    feasible_mask = ~infeasible_mask
    if np.any(feasible_mask): # Handle cases where no bin can fit the item.
        remaining_capacity_after_add = bins_remain_cap[feasible_mask] - item
        item_ratio = item / bins_remain_cap[feasible_mask]  # Percentage of bin filled by the item

        # Prioritize lower remaining capacity, scaled by how full the bin will be.
        priority_scores = item_ratio / (remaining_capacity_after_add + 1e-9) # Avoid dividing by zero
        priorities[feasible_mask] = priority_scores

        # Add a bonus for bins that are already somewhat full, to try and consolidate
        # and avoid creating many near-empty bins.

        fullness_factor = (1 - bins_remain_cap[feasible_mask] / np.max(bins_remain_cap))**2 #Squaring to enhance the impact
        priorities[feasible_mask] += fullness_factor #

    return priorities
```
