```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Return priority with which to add item to each bin.
    Combines waste minimization and balanced bin utilization.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # If item doesn't fit, give the bin a large negative priority.
    priorities[bins_remain_cap < item] = -np.inf

    # Calculate waste if item is placed in each bin.
    waste = bins_remain_cap - item
    
    # Only consider bins where the item fits.
    fit_indices = bins_remain_cap >= item
    
    if np.any(fit_indices):
        # Prioritize lower waste, with a bias towards bins that are closer to half-full.
        priorities[fit_indices] = -waste[fit_indices] + 0.5 * (bins_remain_cap[fit_indices] / np.max(bins_remain_cap))

        # Slightly prioritize bins with larger remaining capacity to avoid small fragments.
        priorities[fit_indices] += 0.1 * (bins_remain_cap[fit_indices] / np.max(bins_remain_cap)) 

    return priorities
```
