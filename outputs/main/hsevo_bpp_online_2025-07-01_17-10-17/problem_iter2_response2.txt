```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization and target fill level."""
    epsilon = 1e-9
    distances = np.abs(bins_remain_cap - item)
    base_priority = 1 / (distances + epsilon)
    priorities = base_priority

    remaining_after_packing = bins_remain_cap - item
    can_fit = remaining_after_packing >= 0
    priorities[~can_fit] = 0
    
    fit_amount = bins_remain_cap[can_fit] - item
    if fit_amount.size > 0:
        fragmentation_penalty = 1 / (1 + np.exp( -5 * (fit_amount - np.mean(fit_amount))))
        priorities[can_fit] += (1 - fragmentation_penalty)

    too_small = remaining_after_packing < 0.1
    priorities[too_small] = 0
    
    priorities[bins_remain_cap < item] = 0
    return priorities
```
