```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # A bin is viable only if it has sufficient capacity.
    viable_bins = bins_remain_cap >= item

    #If no bin can contain the item, return the smallest possible score.
    if not np.any(viable_bins):
        return priorities

    # 1. Give HUGE priority to bins where the remaining space *exactly* matches the item.
    exact_fit = (bins_remain_cap == item) & viable_bins
    priorities[exact_fit] = 1e9  # Give it a very high priority

    # 2. Prioritize bins where the remaining capacity is a good "fit" with the item.
    #    We want to avoid leaving too much empty space, but also avoid barely fitting it in.
    #    A good fit means item takes up, say, 50%-95% of remaining space.
    good_fit = (bins_remain_cap > item) & viable_bins

    fill_ratios = item / bins_remain_cap[good_fit]

    #give bins high score if fill_ratio in range (0.5, 0.95), give low scores when not.
    good_fill_mask = (fill_ratios >= 0.5) & (fill_ratios <= 0.95)

    priorities[good_fit] = np.where(good_fill_mask, (1/ (1 - fill_ratios)), 0)


    #3 Reduce score when the bin is filled over 95 %
    high_fill_mask = (fill_ratios > 0.95) & (fill_ratios < 1)
    priorities[good_fit] = np.where(high_fill_mask, (1/ (1 - fill_ratios)/10), priorities[good_fit])

    #4 Slightly prioritise near perfect fits:
    near_exact_fit_lower = (bins_remain_cap > item) & (bins_remain_cap - item <= 0.1) & viable_bins
    near_exact_fit_upper = (bins_remain_cap > item) & (bins_remain_cap - item <= 0.2) & viable_bins

    priorities[near_exact_fit_lower] = np.where(near_exact_fit_lower, 10, priorities[near_exact_fit_lower])
    priorities[near_exact_fit_upper] = np.where(near_exact_fit_upper, 5, priorities[near_exact_fit_upper])

    return priorities
```
