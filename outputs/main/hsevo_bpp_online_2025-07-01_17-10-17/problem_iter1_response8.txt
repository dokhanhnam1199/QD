```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Prioritize bins that can fit the item, and prefer bins with smaller remaining capacity after packing (more full bins).
            remaining_after_pack = cap - item
            if remaining_after_pack == 0:
                priorities[i] = 1000  # High priority if bin is filled completely
            else:
                priorities[i] = 1 / remaining_after_pack  # Inverse of remaining capacity after packing
        else:
            priorities[i] = -1e9 #Very low priority if the bin can't fit the item

    return priorities
```
