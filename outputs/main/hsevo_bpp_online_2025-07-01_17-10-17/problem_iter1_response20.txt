```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Bin is feasible
            waste = cap - item
            priorities[i] = (1 / (waste + 0.0001))  # Minimize waste. Adding a small value to avoid division by zero
            # Give a bonus if waste is below a threshold. This encourages bins with near-perfect fit.
            if waste <= 0.1: #adjust threshold later. Tune with item size
                priorities[i] *= 2 #adjust multiplier later.
        else:
            priorities[i] = -np.inf  # Impossible to fit the item, lowest priority

    return priorities
```
