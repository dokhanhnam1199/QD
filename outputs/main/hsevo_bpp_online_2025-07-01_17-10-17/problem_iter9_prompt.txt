{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Assign priorities to bins based on waste minimization and target fill.\"\"\"\n\n    epsilon = 1e-9\n    distances = np.abs(bins_remain_cap - item)\n    \n    # Prioritize bins where item nearly fits, less wasted space.\n    base_priority = 1 / (distances + epsilon)\n    \n    # Encourage bins towards half-full state.\n    half_full_target = (bins_remain_cap - item) - (bins_remain_cap / 2.0)\n    half_full_priority = 1 / (np.abs(half_full_target) + epsilon)\n\n    priorities = base_priority + half_full_priority\n    \n    # Zero out invalid bins.\n    priorities[bins_remain_cap < item] = 0\n\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, I understand the goal: to redefine \"Current self-reflection\" into a more actionable and effective guide for designing heuristics, explicitly avoiding pitfalls identified in \"Ineffective self-reflection.\" Let's aim for clarity, conciseness, and practical advice.\n\nHere's a revised approach:\n\n*   **Keywords:** Efficiency, accuracy, balance, directness, simplicity, validation.\n*   **Advice:** Design heuristics focusing on directly measurable objectives like waste reduction and resource utilization. Combine relevant factors with clear, justifiable weights. Thoroughly validate the heuristic's performance across diverse scenarios.\n*   **Avoid:** Over-reliance on speed optimizations (premature optimization). Abstract analogies instead of direct measurements. Unnecessarily complex calculations.\n*   **Explanation:** Emphasize fundamental objectives and validation. Prioritize understanding the problem and creating a transparent, well-justified heuristic over purely speed-focused or overly complicated approaches.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}