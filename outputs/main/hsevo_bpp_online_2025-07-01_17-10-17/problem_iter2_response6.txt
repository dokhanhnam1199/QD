```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste minimization and balance."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    # Minimize waste: higher priority to bins with smaller remaining space after adding the item
    waste = bins_remain_cap - item
    priorities[feasible_bins] = 1 / (waste[feasible_bins] + 0.00001)

    # Balance: Penalize bins that become too full.
    fullness_threshold = 0.95
    too_full = feasible_bins & ((1 - waste / bins_remain_cap) > fullness_threshold)
    priorities[too_full] *= 0.5

    return priorities
```
