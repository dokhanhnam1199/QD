```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Eliminate bins that cannot fit the item
    valid_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    priorities[~valid_bins] = -np.inf  # Assign very low priority to invalid bins

    # Calculate the waste if the item is placed in each valid bin.
    waste = bins_remain_cap[valid_bins] - item

    # Prioritize bins based on minimizing waste, but also consider the fill ratio.
    # We want to avoid leaving too much or too little space.
    fill_ratio = item / bins_remain_cap[valid_bins]
    # A balanced approach combining waste minimization and fill ratio nearing to optimal value, say 1.
    priorities[valid_bins] = -(waste + np.abs(fill_ratio - 1)) # Penalize large waste and deviation from ideal ratio

    return priorities
```
