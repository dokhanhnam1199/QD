{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Assign priorities to bins based on a combination of factors,\n    including best fit, remaining capacity utilization, and a penalty for\n    bins that are already too full. This version tries to balance several\n    objectives more explicitly.\n    \"\"\"\n    epsilon = 1e-9\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # 1. Best Fit Prioritization: Prioritize bins where the item fits best\n    #    (smallest waste).\n\n    waste = bins_remain_cap - item\n    valid_bins = waste >= 0\n    if not np.any(valid_bins):\n        return priorities  # No suitable bins\n\n    waste[~valid_bins] = np.inf # Set waste of invalid bins to infinity\n\n    best_fit_priority = 1.0 / (waste + epsilon)\n    best_fit_priority[~valid_bins] = 0.0  # Zero out invalid bins\n\n\n    # 2. Capacity Utilization: Favor bins that are already reasonably full.\n    #    This encourages filling existing bins before opening new ones.\n    capacity_utilization = bins_remain_cap / np.max(bins_remain_cap)  # Normalize\n\n    # Prioritize bins that are neither too empty nor too full.\n    # Adjust the parameters to fine-tune the behavior.\n    capacity_priority = np.exp(-((capacity_utilization - 0.75)**2) / (2 * (0.3)**2))\n    capacity_priority[~valid_bins] = 0.0\n\n    # 3. Combine the priorities, weighting best fit more heavily initially.\n    #    The weights can be adjusted based on the specific problem instance.\n    priorities = 0.7 * best_fit_priority + 0.3 * capacity_priority\n\n    #Zero out invalid bins\n    priorities[bins_remain_cap < item] = 0\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}