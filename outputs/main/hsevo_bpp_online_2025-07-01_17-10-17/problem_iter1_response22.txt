```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Uses a combination of factors to determine priority:
    1. Remaining capacity: Bins with capacity closer to the item size are preferred.
    2. Avoidance of small waste: Bins that would result in very small remaining capacity after packing are penalized.
    3. "Almost full" bonus: bins that are already quite full get a slight nudge in priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # 1. Capacity match
    capacity_match = np.abs(bins_remain_cap - item)
    priorities += -capacity_match # Invert to prioritize closer matches

    # 2. Waste avoidance
    waste = bins_remain_cap - item
    small_waste_penalty = np.where((waste > 0) & (waste < 0.1), -10, 0) # Heavily penalize waste less than 0.1
    priorities += small_waste_penalty

    # 3. Almost Full Bonus
    almost_full_bonus = np.where((bins_remain_cap > item) & (bins_remain_cap < item + 0.2) , 5, 0)
    priorities += almost_full_bonus

    # 4. Large Item Exclusion - Avoid almost-full bins for potentially fitting in smaller bins later
    too_small = bins_remain_cap < item
    priorities[too_small] = -np.inf

    return priorities
```
