```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Assign priorities to bins based on a combination of factors:
    - Waste minimization
    - Target fill level (around 75% full)
    - Bin utilization (favor bins that are already somewhat full)
    """
    epsilon = 1e-9
    
    # Waste minimization: smaller waste is better.
    waste = bins_remain_cap - item
    waste_priority = 1 / (np.abs(waste) + epsilon)
    waste_priority[waste < 0] = 0  # Only consider bins where item fits

    # Target fill: aim for bins that are around 75% full after packing.
    target_fill = bins_remain_cap * 0.75
    fill_diff = np.abs((bins_remain_cap - item) - target_fill)
    fill_priority = 1 / (fill_diff + epsilon)

    # Bin utilization: prefer bins that are already somewhat full to avoid creating many almost-empty bins.
    utilization_priority = bins_remain_cap / (bins_remain_cap.max() + epsilon)
    utilization_priority[bins_remain_cap < item] = 0  # Exclude bins where item doesn't fit.

    # Combine priorities with weights. Adjust weights as needed.
    priorities = (0.5 * waste_priority + 0.3 * fill_priority + 0.2 * utilization_priority)
    
    # Zero out invalid bins.
    priorities[bins_remain_cap < item] = 0

    return priorities
```
