```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculate bin priorities: minimize waste, balance fill, avoid overfill."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Fit check & waste minimization
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            priorities[i] = 1 / (cap - item + 1e-9)

    # Encourage bins closer to half-full (but only consider if item fits)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            target_capacity = item + cap/2 # we aim to have item + cap/2.
            priorities[i] = priorities[i] * np.exp(-np.abs(target_capacity-bins_remain_cap[i])) #prioritize closer fill.


    # Penalize bins that become too full
    fullness_threshold = 0.95
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item and (1 - (cap - item) / cap) > fullness_threshold:
            priorities[i] *= 0.5
            
    return priorities
```
