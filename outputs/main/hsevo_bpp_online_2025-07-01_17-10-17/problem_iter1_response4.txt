```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Higher score means higher priority.
    Uses a combination of remaining capacity and waste consideration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Remaining capacity factor: prefer bins with tighter fit. Inverse of remaining space
            remaining_space = cap - item
            capacity_priority = 1.0 / (remaining_space + 1e-9) #avoid division by zero

            # Waste minimization factor:  Encourage using bins where the remaining space is "reasonable"
            waste_penalty = np.abs(remaining_space - item / 2.0) #Ideal remaining space = item/2
            waste_priority = np.exp(-waste_penalty)

            #Combine both priority
            priorities[i] = capacity_priority * waste_priority

        else:
            priorities[i] = -1e9  # Very low priority if item doesn't fit

    return priorities
```
