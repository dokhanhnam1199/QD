```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Higher values indicate better fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    possible_bins = bins_remain_cap >= item

    if not np.any(possible_bins):
        return priorities  # No bin can fit the item, so no priority. All zero

    # Calculate waste if item is placed in each possible bin
    waste = bins_remain_cap - item

    # Prioritize bins with the least waste. Add some constants to scale values
    priorities[possible_bins] = 1.0 / (waste[possible_bins] + 0.001) # Avoid divide by zero. Smaller waste -> larger priority.

    # Give a bonus for bins that are closer to half full AFTER packing the item. This encourages filling bins efficiently.
    half_full = (bins_remain_cap[possible_bins] - item) - (0.5 * np.max(bins_remain_cap)) # Deviation from the middle
    priorities[possible_bins] += np.exp(-0.5 * (half_full/np.max(bins_remain_cap))**2)

    # Add a small penalty for almost full bins to encourage a balanced distribution. Prevents clustering near full capacity.
    almost_full = bins_remain_cap > 0.9*np.max(bins_remain_cap)
    priorities[almost_full] *= 0.9


    return priorities
```
