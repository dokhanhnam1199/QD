```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste, target fill (75%), and utilization."""
    epsilon = 1e-9
    
    # Waste minimization: smaller waste is better.
    waste = bins_remain_cap - item
    waste_priority = np.where(waste >= 0, 1 / (waste + epsilon), 0)

    # Target fill: aim for bins that are around 75% full after packing.
    target_fill_level = 0.75
    remaining_after_fill = bins_remain_cap - item
    balance_distance = np.abs(remaining_after_fill - (1 - target_fill_level))
    balance_priority = np.where(waste >= 0, 1 / (balance_distance + epsilon), 0)

    # Bin utilization: prefer bins that are already somewhat full.
    utilization_priority = bins_remain_cap / (1 + epsilon)
    utilization_priority = np.where(waste >= 0, 1 - utilization_priority, 0)

    # Combine priorities with weights.
    priorities = (0.5 * waste_priority + 0.3 * balance_priority + 0.2 * utilization_priority)
    
    return priorities
```
