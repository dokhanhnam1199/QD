```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Uses a heuristic inspired by black hole accretion disks: items
    are more likely to be drawn to bins with remaining capacity close
    to the item size, but a small probabilistic component prevents
    getting stuck in local minima, simulating Hawking radiation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero and negative values in log
    epsilon = 1e-9  # small constant

    # Distance from remaining capacity to item size
    distances = np.abs(bins_remain_cap - item)

    # Inverse distance, scaled and shifted - "accretion disk"
    base_priority = 1 / (distances + epsilon)

    # Probabilistic component ("Hawking radiation") - uniform random
    random_component = np.random.rand(len(bins_remain_cap)) * 0.01 # Small random component

    # Combine the components
    priorities = base_priority + random_component
    
    #Zero out priorities of bins that can't fit
    priorities[bins_remain_cap < item] = 0

    return priorities
```
