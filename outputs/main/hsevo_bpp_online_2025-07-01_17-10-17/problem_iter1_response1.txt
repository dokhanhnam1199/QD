```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Inspired by gravitational force and spacetime curvature.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a base value (e.g., 0 or a small positive number)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate how well the item fits in each bin.  We want bins where
    # the item almost fills it, but doesn't overflow. The remaining capacity
    # should be relatively small, but positive.

    # 1. Potential fit: Bins that *can* accommodate the item
    fit_mask = bins_remain_cap >= item

    # 2. "Gravitational Attraction":  The closer the item's size is to the
    #    bin's remaining capacity, the higher the priority. Think of the item
    #    "attracting" to bins where it fits snugly. The exponent adds curvature, making larger
    #    difference more significant. Use a softplus to avoid -Inf
    #    Softplus function to ensure the priority score is always non-negative and handle potential overflow

    attraction = np.where(fit_mask, np.exp(-np.abs(bins_remain_cap - item)), 0) #Avoid overflowing the bins
    priorities = attraction

    # Apply a strong bias against filling bins completely
    # Penalize bins where item fills the entire bin. This could get us stuck
    # early on when there are limited options.  Applying a significant boost to
    # slightly less full bins (e.g. item leaving 10% of the capacity unused)

    almost_full_mask = (bins_remain_cap > item) & (bins_remain_cap < 1.1 * item)

    priorities = np.where(almost_full_mask, priorities * 1.5, priorities) # Boost the scores

    #Small randomness helps to avoid the stuck stage.
    priorities += np.random.rand(len(bins_remain_cap)) * 0.0001

    return priorities
```
