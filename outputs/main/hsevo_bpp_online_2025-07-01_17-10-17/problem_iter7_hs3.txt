import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                waste_epsilon: float = 0.009456491566094316,
                target_fill_ratio: float = 0.7978072825762209,
                fill_std_dev_factor: float = 0.7516439983199835,
                almost_full_threshold_ratio: float = 0.8931060546307332,
                almost_full_penalty: float = 0.6265457308743408) -> np.ndarray:
    """Prioritize bins based on waste minimization and target fill level."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    possible_bins = bins_remain_cap >= item

    if not np.any(possible_bins):
        return priorities

    waste = bins_remain_cap - item
    priorities[possible_bins] = 1.0 / (waste[possible_bins] + waste_epsilon)

    # Target fill level: aiming for bins to be around target_fill_ratio full.
    target_fill = target_fill_ratio * np.max(bins_remain_cap)
    fill_diff = np.abs((bins_remain_cap[possible_bins] - item) - target_fill)
    priorities[possible_bins] += np.exp(-fill_std_dev_factor * (fill_diff/np.max(bins_remain_cap))**2)

    # Penalize almost full
    almost_full = bins_remain_cap > almost_full_threshold_ratio * np.max(bins_remain_cap)
    priorities[almost_full] *= almost_full_penalty

    return priorities
