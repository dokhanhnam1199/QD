{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Assign priorities to bins based on waste minimization and target fill.\"\"\"\n\n    epsilon = 1e-9\n    distances = np.abs(bins_remain_cap - item)\n    \n    # Prioritize bins where item nearly fits, less wasted space.\n    base_priority = 1 / (distances + epsilon)\n    \n    # Encourage bins towards half-full state.\n    half_full_target = (bins_remain_cap - item) - (bins_remain_cap / 2.0)\n    half_full_priority = 1 / (np.abs(half_full_target) + epsilon)\n\n    priorities = base_priority + half_full_priority\n    \n    # Zero out invalid bins.\n    priorities[bins_remain_cap < item] = 0\n\n    return priorities\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritize bins based on waste minimization and target fill level.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    possible_bins = bins_remain_cap >= item\n\n    if not np.any(possible_bins):\n        return priorities\n\n    waste = bins_remain_cap - item\n    priorities[possible_bins] = 1.0 / (waste[possible_bins] + 0.001)\n\n    # Target fill level: aiming for bins to be around 75% full.\n    target_fill = 0.75 * np.max(bins_remain_cap)\n    fill_diff = np.abs((bins_remain_cap[possible_bins] - item) - target_fill)\n    priorities[possible_bins] += np.exp(-0.5 * (fill_diff/np.max(bins_remain_cap))**2)\n\n    # Penalize almost full\n    almost_full = bins_remain_cap > 0.9 * np.max(bins_remain_cap)\n    priorities[almost_full] *= 0.9\n\n    return priorities\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritize bins: waste minimization, target fill (75%), diversity.\"\"\"\n\n    epsilon = 1e-9\n    distances = np.abs(bins_remain_cap - item)\n\n    base_priority = 1 / (distances**0.5 + epsilon)\n\n    fill_target_ratio = 0.75\n    target_capacity = bins_remain_cap * fill_target_ratio\n    target_priority = 1 / (np.abs((bins_remain_cap - item) - target_capacity) + epsilon)\n\n    post_fit_capacity = bins_remain_cap - item\n    diversity_bonus = np.where(post_fit_capacity >= 0, post_fit_capacity / (np.sum(np.where(post_fit_capacity >= 0, post_fit_capacity,0)) + epsilon), 0)\n    diversity_priority = diversity_bonus\n    \n    priorities = 0.6 * base_priority + 0.3 * target_priority + 0.1 * diversity_priority\n\n    priorities[bins_remain_cap < item] = 0\n\n    return priorities\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on waste and fill, favoring half-full bins.\"\"\"\n\n    epsilon = 1e-9\n    distances = np.abs(bins_remain_cap - item)\n    priority = 1 / (distances + epsilon) # Prioritize close fits\n\n    target_fill = np.max(bins_remain_cap) / 2 # Set half-full target\n    fill_distances = np.abs(bins_remain_cap - target_fill)\n    priority = priority / (fill_distances + epsilon) # Encourage half-full\n\n    priority[bins_remain_cap < item] = 0 # Invalidate bins that can't fit\n\n    return priority\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on waste and fill, favoring half-full bins.\"\"\"\n\n    epsilon = 1e-9\n    distances = np.abs(bins_remain_cap - item)\n    priority = 1 / (distances + epsilon) # Prioritize close fits\n\n    target_fill = np.max(bins_remain_cap) / 2 # Set half-full target\n    fill_distances = np.abs(bins_remain_cap - target_fill)\n    priority = priority / (fill_distances + epsilon) # Encourage half-full\n\n    priority[bins_remain_cap < item] = 0 # Invalidate bins that can't fit\n\n    return priority\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on waste, target fill, and efficient utilization.\"\"\"\n    epsilon = 1e-9\n    distances = np.abs(bins_remain_cap - item)\n    base_priority = 1 / (distances + epsilon) # Waste minimization\n\n    fill_target_ratio = 0.75\n    target_capacity = bins_remain_cap * fill_target_ratio\n    target_priority = 1 / (np.abs((bins_remain_cap - item) - target_capacity) + epsilon) #Target Fill\n\n    # Prioritize bins that provide more utilization\n    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))\n    utilization_priority = utilization\n\n    priorities = 0.5 * base_priority + 0.3 * target_priority + 0.2 * utilization_priority\n    priorities[bins_remain_cap < item] = 0\n    return priorities\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on waste, target fill, and efficient utilization.\"\"\"\n    epsilon = 1e-9\n    distances = np.abs(bins_remain_cap - item)\n    base_priority = 1 / (distances + epsilon) # Waste minimization\n\n    fill_target_ratio = 0.75\n    target_capacity = bins_remain_cap * fill_target_ratio\n    target_priority = 1 / (np.abs((bins_remain_cap - item) - target_capacity) + epsilon) #Target Fill\n\n    # Prioritize bins that provide more utilization\n    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))\n    utilization_priority = utilization\n\n    priorities = 0.5 * base_priority + 0.3 * target_priority + 0.2 * utilization_priority\n    priorities[bins_remain_cap < item] = 0\n    return priorities\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on waste, target fill, and efficient utilization.\"\"\"\n    epsilon = 1e-9\n    distances = np.abs(bins_remain_cap - item)\n    base_priority = 1 / (distances + epsilon) # Waste minimization\n\n    fill_target_ratio = 0.75\n    target_capacity = bins_remain_cap * fill_target_ratio\n    target_priority = 1 / (np.abs((bins_remain_cap - item) - target_capacity) + epsilon) #Target Fill\n\n    # Prioritize bins that provide more utilization\n    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))\n    utilization_priority = utilization\n\n    priorities = 0.5 * base_priority + 0.3 * target_priority + 0.2 * utilization_priority\n    priorities[bins_remain_cap < item] = 0\n    return priorities\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on waste, target fill, and efficient utilization.\"\"\"\n    epsilon = 1e-9\n    distances = np.abs(bins_remain_cap - item)\n    base_priority = 1 / (distances + epsilon) # Waste minimization\n\n    fill_target_ratio = 0.75\n    target_capacity = bins_remain_cap * fill_target_ratio\n    target_priority = 1 / (np.abs((bins_remain_cap - item) - target_capacity) + epsilon) #Target Fill\n\n    # Prioritize bins that provide more utilization\n    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))\n    utilization_priority = utilization\n\n    priorities = 0.5 * base_priority + 0.3 * target_priority + 0.2 * utilization_priority\n    priorities[bins_remain_cap < item] = 0\n    return priorities\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritize bins based on waste minimization and target fill (around 75%).\"\"\"\n    epsilon = 1e-9\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Waste minimization\n    waste = bins_remain_cap - item\n    waste_priority = 1 / (np.abs(waste) + epsilon)\n    waste_priority[waste < 0] = 0\n\n    # Target fill (around 75%)\n    target_fill = bins_remain_cap * 0.75\n    fill_diff = np.abs((bins_remain_cap - item) - target_fill)\n    fill_priority = 1 / (fill_diff + epsilon)\n\n    priorities = 0.6 * waste_priority + 0.4 * fill_priority\n    priorities[bins_remain_cap < item] = 0\n    \n    return priorities\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Assign priorities to bins based on multiple factors.\"\"\"\n\n    epsilon = 1e-9\n    \n    # 1. Immediate Fit: Prioritize bins where the item fits.\n    fit_priority = (bins_remain_cap >= item).astype(float)\n\n    # 2. Waste Minimization: Minimize wasted space.\n    waste = bins_remain_cap - item\n    waste_priority = np.where(waste >= 0, 1 / (waste + epsilon), 0)\n\n    # 3. Balance Fill: Favor bins nearing target fill level (e.g., 75%).\n    target_fill_level = 0.75  # Adjustable target fill level\n    target_capacity = bins_remain_cap * target_fill_level\n    balance_priority = np.abs((bins_remain_cap - item) - target_capacity)\n    balance_priority = np.where(bins_remain_cap >= item, 1 / (balance_priority + epsilon), 0)\n\n    # 4. Combination of Priorities (Weighted): Combine the priorities\n    priorities = (0.5 * fit_priority + 0.3 * waste_priority + 0.2 * balance_priority)\n    \n    return priorities\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on waste, fill level and item size.\"\"\"\n    epsilon = 1e-9\n\n    # Waste Minimization\n    waste = bins_remain_cap - item\n    waste_priority = np.where(waste >= 0, 1 / (waste + epsilon), 0)\n\n    # Target Fill (Half-full)\n    target_fill = np.max(bins_remain_cap) / 2\n    fill_distances = np.abs(bins_remain_cap - target_fill)\n    fill_priority = 1 / (fill_distances + epsilon)\n\n    # Item size vs. remaining capacity\n    size_ratio = item / np.max(bins_remain_cap)\n    size_priority = np.exp(-np.abs(bins_remain_cap - item) / np.max(bins_remain_cap))\n\n    # Combined priority\n    priorities = 0.4 * waste_priority + 0.3 * fill_priority + 0.3 * size_priority\n    priorities[bins_remain_cap < item] = 0\n\n    return priorities\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Assign priorities to bins based on a combination of factors:\n    - Waste minimization: Prioritize bins where the item nearly fits.\n    - Balance fill level: Encourage bins to be filled to a target level (e.g., 75%).\n    - Avoidance of near-empty bins: Discourage placing items in bins that would leave them almost empty.\n    \"\"\"\n    epsilon = 1e-9\n    \n    # 1. Waste Minimization:\n    distances = np.abs(bins_remain_cap - item)\n    waste_priority = 1 / (distances + epsilon)\n\n    # 2. Target Fill Level (e.g., 75%):\n    target_fill = 0.75\n    target_capacity = target_fill * np.max(bins_remain_cap + item) #Assumed that all bins have same capacity, and find the capacity\n    fill_level_diff = np.abs((bins_remain_cap - item) - (1-target_fill) * np.max(bins_remain_cap + item) ) # The deviation from target fill level after placing the item\n    fill_level_priority = 1 / (fill_level_diff + epsilon)\n    \n    # 3. Avoid Near-Empty Bins (e.g., less than 25% full after placing the item):\n    min_fill_threshold = 0.25\n    near_empty_penalty = np.where((bins_remain_cap - item) / np.max(bins_remain_cap + item) < min_fill_threshold, 0.1, 1.0)  # Reduce priority if bin becomes near-empty\n\n    # Combine priorities:\n    priorities = waste_priority + fill_level_priority * 0.75 * near_empty_penalty #tune factors, waste is most important\n\n    # Zero out invalid bins:\n    priorities[bins_remain_cap < item] = 0\n\n    return priorities\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Assign priorities to bins based on a combination of factors:\n    - Waste minimization: Prioritize bins where the item nearly fits.\n    - Balance fill level: Encourage bins to be filled to a target level (e.g., 75%).\n    - Avoidance of near-empty bins: Discourage placing items in bins that would leave them almost empty.\n    \"\"\"\n    epsilon = 1e-9\n    \n    # 1. Waste Minimization:\n    distances = np.abs(bins_remain_cap - item)\n    waste_priority = 1 / (distances + epsilon)\n\n    # 2. Target Fill Level (e.g., 75%):\n    target_fill = 0.75\n    target_capacity = target_fill * np.max(bins_remain_cap + item) #Assumed that all bins have same capacity, and find the capacity\n    fill_level_diff = np.abs((bins_remain_cap - item) - (1-target_fill) * np.max(bins_remain_cap + item) ) # The deviation from target fill level after placing the item\n    fill_level_priority = 1 / (fill_level_diff + epsilon)\n    \n    # 3. Avoid Near-Empty Bins (e.g., less than 25% full after placing the item):\n    min_fill_threshold = 0.25\n    near_empty_penalty = np.where((bins_remain_cap - item) / np.max(bins_remain_cap + item) < min_fill_threshold, 0.1, 1.0)  # Reduce priority if bin becomes near-empty\n\n    # Combine priorities:\n    priorities = waste_priority + fill_level_priority * 0.75 * near_empty_penalty #tune factors, waste is most important\n\n    # Zero out invalid bins:\n    priorities[bins_remain_cap < item] = 0\n\n    return priorities\n\n[Heuristics 15th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float,\n                bins_remain_cap: np.ndarray,\n                waste_epsilon: float = 0.0014920289345347385,\n                target_fill_ratio: float = 0.543580664621467,\n                fill_std_dev_factor: float = 0.2264523177966476,\n                almost_full_threshold_ratio: float = 0.8618165419074774,\n                almost_full_penalty: float = 0.6409438768761745) -> np.ndarray:\n    \"\"\"Prioritize bins based on waste minimization and target fill level.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    possible_bins = bins_remain_cap >= item\n\n    if not np.any(possible_bins):\n        return priorities\n\n[Heuristics 16th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float,\n                bins_remain_cap: np.ndarray,\n                waste_epsilon: float = 0.0014920289345347385,\n                target_fill_ratio: float = 0.543580664621467,\n                fill_std_dev_factor: float = 0.2264523177966476,\n                almost_full_threshold_ratio: float = 0.8618165419074774,\n                almost_full_penalty: float = 0.6409438768761745) -> np.ndarray:\n    \"\"\"Prioritize bins based on waste minimization and target fill level.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    possible_bins = bins_remain_cap >= item\n\n    if not np.any(possible_bins):\n        return priorities\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on waste and target fill (around 75% full).\"\"\"\n\n    epsilon = 1e-9\n    distances = np.abs(bins_remain_cap - item)\n\n    # Prioritize bins where item nearly fits.\n    base_priority = 1 / (distances + epsilon)\n\n    # Target fill level is 75% of bin capacity.\n    target_fill = bins_remain_cap * 0.75\n    fill_distance = np.abs((bins_remain_cap - item) - target_fill)\n    fill_priority = 1 / (fill_distance + epsilon)\n\n    priorities = base_priority + fill_priority\n\n    # Invalidate bins that can't fit the item.\n    priorities[bins_remain_cap < item] = 0\n\n    return priorities\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Assign priorities based on waste and target (75% full) fill.\"\"\"\n    epsilon = 1e-9\n    distances = np.abs(bins_remain_cap - item)\n    base_priority = 1 / (distances + epsilon)\n\n    target_fill = 0.75 * bins_remain_cap\n    target_diff = np.abs((bins_remain_cap - item) - target_fill)\n    target_priority = 1 / (target_diff + epsilon)\n\n    priorities = base_priority + target_priority\n    priorities[bins_remain_cap < item] = 0  # Invalidate bins\n\n    return priorities\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on waste and target fill (around 75% full).\"\"\"\n\n    epsilon = 1e-9\n    distances = np.abs(bins_remain_cap - item)\n\n    # Prioritize bins where item nearly fits.\n    base_priority = 1 / (distances + epsilon)\n\n    # Target fill level is 75% of bin capacity.\n    target_fill = bins_remain_cap * 0.75\n    fill_distance = np.abs((bins_remain_cap - item) - target_fill)\n    fill_priority = 1 / (fill_distance + epsilon)\n\n    priorities = base_priority + fill_priority\n\n    # Invalidate bins that can't fit the item.\n    priorities[bins_remain_cap < item] = 0\n\n    return priorities\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on waste and target fill (around 75% full).\"\"\"\n\n    epsilon = 1e-9\n    distances = np.abs(bins_remain_cap - item)\n\n    # Prioritize bins where item nearly fits.\n    base_priority = 1 / (distances + epsilon)\n\n    # Target fill level is 75% of bin capacity.\n    target_fill = bins_remain_cap * 0.75\n    fill_distance = np.abs((bins_remain_cap - item) - target_fill)\n    fill_priority = 1 / (fill_distance + epsilon)\n\n    priorities = base_priority + fill_priority\n\n    # Invalidate bins that can't fit the item.\n    priorities[bins_remain_cap < item] = 0\n\n    return priorities\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}