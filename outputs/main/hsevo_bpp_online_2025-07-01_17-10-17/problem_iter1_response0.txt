```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Calculate the wasted space if the item is placed in this bin
            wasted_space = cap - item
            # Prioritize bins with less wasted space
            priorities[i] = 1 / (wasted_space + 1e-6)  # Adding a small constant to avoid division by zero

            # Optionally add a bonus for bins that are already partially full
            if cap < 1.0: # Assuming bin capacity is 1.0
                priorities[i] += (1 - cap) # Add how much bin is full.

        else:
            priorities[i] = -np.inf # Negative infinity for bins that cannot fit the item.

    return priorities
```
