```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    eligible_bins = bins_remain_cap >= item
    if not np.any(eligible_bins):
        # No suitable bin found; assign very low priority to all bins.  This is a hack
        # which might lead to suboptimal solutions but will allow any item to be added
        # and ensure no failure. A more sophisticated approach would consider opening
        # a new bin if possible.
        return np.full_like(bins_remain_cap, -np.inf)

    priorities = np.zeros_like(bins_remain_cap)
    
    # Best Fit heuristic
    slack = bins_remain_cap - item
    priorities[eligible_bins] = -slack[eligible_bins]  # Prefer bins with less remaining space after placement
    
    # Break ties (encourage better bin utilization)
    capacity_ratio = item / bins_remain_cap
    priorities[eligible_bins] += capacity_ratio[eligible_bins] * 0.001  # add small bonus
    
    # Assign zero priority to ineligible bins, or a very negative priority if that is desired.
    priorities[~eligible_bins] = -np.inf
    
    return priorities
```
