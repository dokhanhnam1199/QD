```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Uses a heuristic inspired by black hole physics: Larger bins exert
    a stronger "gravitational pull" if the item can fit, thus increasing priority.
    Bins that cannot accommodate the item have negative infinite priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Gravitational pull proportional to remaining capacity,
            # but exponentially decaying with a "horizon" related to item size.
            # The exponent helps to avoid overfilling of larger bins while still favouring them.

            priorities[i] = cap * np.exp(-item / cap)

            # A bit of a tie breaker and slight preference for more filled bins
            priorities[i] += (cap - item)*0.1/np.mean(bins_remain_cap) if (cap - item) > 0 else 0
        else:
            priorities[i] = -np.inf  # Cannot fit; black hole repels (doesn't exist).

    return priorities
```
