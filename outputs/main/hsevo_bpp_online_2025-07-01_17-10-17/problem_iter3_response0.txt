```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Assign priorities to bins based on remaining capacity, waste, and bin fill level."""

    epsilon = 1e-9
    
    # 1. Waste Minimization: Prioritize bins where the item fits with minimal waste.
    waste = bins_remain_cap - item
    waste_priority = np.where(waste >= 0, 1 / (waste + epsilon), 0)  # Avoid inverting negative waste

    # 2. Capacity Utilization: Favor bins that are already relatively full.
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))  # Normalize remaining capacity
    utilization_priority = utilization  # Higher remaining capacity = lower priority
    
    #3. Balance Item Size vs. Remaining Capacity
    size_ratio = item / np.max(bins_remain_cap) #Ratio to bin max capacity
    size_priority = np.exp(-np.abs(bins_remain_cap - item)/np.max(bins_remain_cap)) #Prioritize close values

    # 4. Combine Priorities: Weighted sum of waste minimization and existing fill level.
    priorities = 0.6 * waste_priority + 0.2 * utilization_priority + 0.2 * size_priority

    # Zero out invalid bins.
    priorities[bins_remain_cap < item] = 0

    return priorities
```
