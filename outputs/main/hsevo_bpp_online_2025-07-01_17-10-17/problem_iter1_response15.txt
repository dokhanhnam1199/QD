```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Employs a combination of strategies, favoring bins with sufficient
    space, but also incentivizing filling nearly-full bins.  Inspired
    by the celestial dance â€“ seeking balance and efficient packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Reward bins that can accommodate the item
    can_accommodate = bins_remain_cap >= item
    priorities[can_accommodate] += 1  # Give these bins a base priority

    # Reward bins with smallest remaining capacity (but still fitting the item). Encourages filling bins.
    suitable_bins = np.where(can_accommodate)[0]
    if len(suitable_bins) > 0:
        remaining_after_fit = bins_remain_cap[suitable_bins] - item
        # Invert the remaining capacity (after the potential addition) so lower is better for priorities
        # Add a small number to avoid division by zero
        priority_increase = 1.0 / (remaining_after_fit + 0.001)
        priorities[suitable_bins] += priority_increase

    # Penalize bins that can't accommodate the item (but not too harshly).
    priorities[~can_accommodate] -= 0.1 # Small penalty

    # Scale values to create a greater spread in priority values
    priorities = priorities * 10
    return priorities
```
