{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Assign priorities to bins based on waste minimization and target fill.\"\"\"\n\n    epsilon = 1e-9\n    distances = np.abs(bins_remain_cap - item)\n    \n    # Prioritize bins where item nearly fits, less wasted space.\n    base_priority = 1 / (distances + epsilon)\n    \n    # Encourage bins towards half-full state.\n    half_full_target = (bins_remain_cap - item) - (bins_remain_cap / 2.0)\n    half_full_priority = 1 / (np.abs(half_full_target) + epsilon)\n\n    priorities = base_priority + half_full_priority\n    \n    # Zero out invalid bins.\n    priorities[bins_remain_cap < item] = 0\n\n    return priorities\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Assign priorities to bins based on waste minimization and target fill.\"\"\"\n\n    epsilon = 1e-9\n    distances = np.abs(bins_remain_cap - item)\n    \n    # Prioritize bins where item nearly fits, less wasted space.\n    base_priority = 1 / (distances + epsilon)\n    \n    # Encourage bins towards half-full state.\n    half_full_target = (bins_remain_cap - item) - (bins_remain_cap / 2.0)\n    half_full_priority = 1 / (np.abs(half_full_target) + epsilon)\n\n    priorities = base_priority + half_full_priority\n    \n    # Zero out invalid bins.\n    priorities[bins_remain_cap < item] = 0\n\n    return priorities\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Assign priorities to bins based on waste minimization, fill target, and bin diversity.\"\"\"\n\n    epsilon = 1e-9\n    distances = np.abs(bins_remain_cap - item)\n\n    # Prioritize bins where item nearly fits, less wasted space.  Higher exponent emphasizes small distances.\n    base_priority = 1 / (distances**0.5 + epsilon)\n\n    # Encourage bins towards a fill target (e.g., 75% full).  This promotes better overall utilization.\n    fill_target_ratio = 0.75\n    target_capacity = bins_remain_cap * fill_target_ratio\n    target_priority = 1 / (np.abs((bins_remain_cap - item) - target_capacity) + epsilon)\n\n    # Introduce a diversity bonus: Prefer bins with higher remaining capacity *after* placing the item,\n    # but only if the item fits. This encourages spreading items across bins and avoids overfilling some bins early on.\n    post_fit_capacity = bins_remain_cap - item\n    diversity_bonus = np.where(post_fit_capacity >= 0, post_fit_capacity / (np.sum(np.where(post_fit_capacity >= 0, post_fit_capacity,0)) + epsilon), 0)\n    diversity_priority = diversity_bonus\n    \n    # Combine priorities with appropriate weights.  Adjust weights based on problem characteristics.\n    priorities = 0.6 * base_priority + 0.3 * target_priority + 0.1 * diversity_priority\n\n    # Zero out invalid bins.\n    priorities[bins_remain_cap < item] = 0\n\n    return priorities\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Assign priorities to bins based on waste minimization, fill target, and bin diversity.\"\"\"\n\n    epsilon = 1e-9\n    distances = np.abs(bins_remain_cap - item)\n\n    # Prioritize bins where item nearly fits, less wasted space.  Higher exponent emphasizes small distances.\n    base_priority = 1 / (distances**0.5 + epsilon)\n\n    # Encourage bins towards a fill target (e.g., 75% full).  This promotes better overall utilization.\n    fill_target_ratio = 0.75\n    target_capacity = bins_remain_cap * fill_target_ratio\n    target_priority = 1 / (np.abs((bins_remain_cap - item) - target_capacity) + epsilon)\n\n    # Introduce a diversity bonus: Prefer bins with higher remaining capacity *after* placing the item,\n    # but only if the item fits. This encourages spreading items across bins and avoids overfilling some bins early on.\n    post_fit_capacity = bins_remain_cap - item\n    diversity_bonus = np.where(post_fit_capacity >= 0, post_fit_capacity / (np.sum(np.where(post_fit_capacity >= 0, post_fit_capacity,0)) + epsilon), 0)\n    diversity_priority = diversity_bonus\n    \n    # Combine priorities with appropriate weights.  Adjust weights based on problem characteristics.\n    priorities = 0.6 * base_priority + 0.3 * target_priority + 0.1 * diversity_priority\n\n    # Zero out invalid bins.\n    priorities[bins_remain_cap < item] = 0\n\n    return priorities\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritize bins based on waste, fill level, and penalize almost-full bins.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    possible_bins = bins_remain_cap >= item\n\n    if not np.any(possible_bins):\n        return priorities\n\n    waste = bins_remain_cap - item\n    priorities[possible_bins] = 1.0 / (waste[possible_bins] + 0.001)\n\n    half_full = (bins_remain_cap[possible_bins] - item) - (0.5 * np.max(bins_remain_cap))\n    priorities[possible_bins] += np.exp(-0.5 * (half_full/np.max(bins_remain_cap))**2)\n\n    almost_full = bins_remain_cap > 0.9*np.max(bins_remain_cap)\n    priorities[almost_full] *= 0.9\n\n    # Additional utilization boost.\n    utilization = (bins_remain_cap[possible_bins] - waste[possible_bins])/np.max(bins_remain_cap)\n    priorities[possible_bins] += 0.2 * utilization\n\n    return priorities\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritize bins based on waste, fill level, and penalize almost-full bins.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    possible_bins = bins_remain_cap >= item\n\n    if not np.any(possible_bins):\n        return priorities\n\n    waste = bins_remain_cap - item\n    priorities[possible_bins] = 1.0 / (waste[possible_bins] + 0.001)\n\n    half_full = (bins_remain_cap[possible_bins] - item) - (0.5 * np.max(bins_remain_cap))\n    priorities[possible_bins] += np.exp(-0.5 * (half_full/np.max(bins_remain_cap))**2)\n\n    almost_full = bins_remain_cap > 0.9*np.max(bins_remain_cap)\n    priorities[almost_full] *= 0.9\n\n    # Additional utilization boost.\n    utilization = (bins_remain_cap[possible_bins] - waste[possible_bins])/np.max(bins_remain_cap)\n    priorities[possible_bins] += 0.2 * utilization\n\n    return priorities\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritize bins based on waste, fill level, and penalize almost-full bins.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    possible_bins = bins_remain_cap >= item\n\n    if not np.any(possible_bins):\n        return priorities\n\n    waste = bins_remain_cap - item\n    priorities[possible_bins] = 1.0 / (waste[possible_bins] + 0.001)\n\n    half_full = (bins_remain_cap[possible_bins] - item) - (0.5 * np.max(bins_remain_cap))\n    priorities[possible_bins] += np.exp(-0.5 * (half_full/np.max(bins_remain_cap))**2)\n\n    almost_full = bins_remain_cap > 0.9*np.max(bins_remain_cap)\n    priorities[almost_full] *= 0.9\n\n    # Additional utilization boost.\n    utilization = (bins_remain_cap[possible_bins] - waste[possible_bins])/np.max(bins_remain_cap)\n    priorities[possible_bins] += 0.2 * utilization\n\n    return priorities\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Assign bin priority based on waste and fill level.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            remaining = cap - item\n            priorities[i] = 1 / (remaining + 0.00001) # Minimize waste\n\n            fullness = 1 - remaining / cap\n            if fullness > 0.95:\n                priorities[i] *= 0.5 # Penalize near-full bins\n        else:\n            priorities[i] = -1e9 #Very low priority if the bin can't fit the item\n    return priorities\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Assign priorities to bins based on remaining capacity, waste, and bin fill level.\"\"\"\n\n    epsilon = 1e-9\n    \n    # 1. Waste Minimization: Prioritize bins where the item fits with minimal waste.\n    waste = bins_remain_cap - item\n    waste_priority = np.where(waste >= 0, 1 / (waste + epsilon), 0)  # Avoid inverting negative waste\n\n    # 2. Capacity Utilization: Favor bins that are already relatively full.\n    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))  # Normalize remaining capacity\n    utilization_priority = utilization  # Higher remaining capacity = lower priority\n    \n    #3. Balance Item Size vs. Remaining Capacity\n    size_ratio = item / np.max(bins_remain_cap) #Ratio to bin max capacity\n    size_priority = np.exp(-np.abs(bins_remain_cap - item)/np.max(bins_remain_cap)) #Prioritize close values\n\n    # 4. Combine Priorities: Weighted sum of waste minimization and existing fill level.\n    priorities = 0.6 * waste_priority + 0.2 * utilization_priority + 0.2 * size_priority\n\n    # Zero out invalid bins.\n    priorities[bins_remain_cap < item] = 0\n\n    return priorities\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Assign priorities to bins based on remaining capacity, waste, and bin fill level.\"\"\"\n\n    epsilon = 1e-9\n    \n    # 1. Waste Minimization: Prioritize bins where the item fits with minimal waste.\n    waste = bins_remain_cap - item\n    waste_priority = np.where(waste >= 0, 1 / (waste + epsilon), 0)  # Avoid inverting negative waste\n\n    # 2. Capacity Utilization: Favor bins that are already relatively full.\n    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))  # Normalize remaining capacity\n    utilization_priority = utilization  # Higher remaining capacity = lower priority\n    \n    #3. Balance Item Size vs. Remaining Capacity\n    size_ratio = item / np.max(bins_remain_cap) #Ratio to bin max capacity\n    size_priority = np.exp(-np.abs(bins_remain_cap - item)/np.max(bins_remain_cap)) #Prioritize close values\n\n    # 4. Combine Priorities: Weighted sum of waste minimization and existing fill level.\n    priorities = 0.6 * waste_priority + 0.2 * utilization_priority + 0.2 * size_priority\n\n    # Zero out invalid bins.\n    priorities[bins_remain_cap < item] = 0\n\n    return priorities\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Assign priorities to bins based on remaining capacity, waste, and bin fill level.\"\"\"\n\n    epsilon = 1e-9\n    \n    # 1. Waste Minimization: Prioritize bins where the item fits with minimal waste.\n    waste = bins_remain_cap - item\n    waste_priority = np.where(waste >= 0, 1 / (waste + epsilon), 0)  # Avoid inverting negative waste\n\n    # 2. Capacity Utilization: Favor bins that are already relatively full.\n    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))  # Normalize remaining capacity\n    utilization_priority = utilization  # Higher remaining capacity = lower priority\n    \n    #3. Balance Item Size vs. Remaining Capacity\n    size_ratio = item / np.max(bins_remain_cap) #Ratio to bin max capacity\n    size_priority = np.exp(-np.abs(bins_remain_cap - item)/np.max(bins_remain_cap)) #Prioritize close values\n\n    # 4. Combine Priorities: Weighted sum of waste minimization and existing fill level.\n    priorities = 0.6 * waste_priority + 0.2 * utilization_priority + 0.2 * size_priority\n\n    # Zero out invalid bins.\n    priorities[bins_remain_cap < item] = 0\n\n    return priorities\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Assign priorities to bins based on remaining capacity, waste, and bin fill level.\"\"\"\n\n    epsilon = 1e-9\n    \n    # 1. Waste Minimization: Prioritize bins where the item fits with minimal waste.\n    waste = bins_remain_cap - item\n    waste_priority = np.where(waste >= 0, 1 / (waste + epsilon), 0)  # Avoid inverting negative waste\n\n    # 2. Capacity Utilization: Favor bins that are already relatively full.\n    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))  # Normalize remaining capacity\n    utilization_priority = utilization  # Higher remaining capacity = lower priority\n    \n    #3. Balance Item Size vs. Remaining Capacity\n    size_ratio = item / np.max(bins_remain_cap) #Ratio to bin max capacity\n    size_priority = np.exp(-np.abs(bins_remain_cap - item)/np.max(bins_remain_cap)) #Prioritize close values\n\n    # 4. Combine Priorities: Weighted sum of waste minimization and existing fill level.\n    priorities = 0.6 * waste_priority + 0.2 * utilization_priority + 0.2 * size_priority\n\n    # Zero out invalid bins.\n    priorities[bins_remain_cap < item] = 0\n\n    return priorities\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Assign priorities to bins based on a combined metric of waste and balance.\"\"\"\n    epsilon = 1e-9\n    \n    # 1. Waste Minimization: Prioritize bins with minimal waste after packing the item.\n    waste = bins_remain_cap - item\n    waste_priority = np.where(waste >= 0, 1 / (waste + epsilon), 0)  # Only consider bins where item fits\n    \n    # 2. Balance: Encourage filling bins to a target level (e.g., 75% full). This encourages even distribution.\n    target_fill_level = 0.75\n    target_capacity = target_fill_level  # Assuming bin capacity is 1.0 (normalized)\n    remaining_after_fill = bins_remain_cap - item\n    \n    # Calculate how close the remaining capacity is to the target fill level.\n    balance_distance = np.abs(remaining_after_fill - (1 - target_capacity))\n    balance_priority = np.where(waste >= 0, 1 / (balance_distance + epsilon), 0)\n\n    # 3. Bin Utilization: Preferentially use bins that are already somewhat full\n    utilization_priority = bins_remain_cap / (1 + epsilon)\n    utilization_priority = np.where(waste >= 0, 1 - utilization_priority, 0)\n\n\n    # Combine the priorities: Emphasize waste minimization and balance, and some bin utilization.\n    priorities = 0.5 * waste_priority + 0.3 * balance_priority + 0.2 * utilization_priority\n    \n    return priorities\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization and target fill level.\"\"\"\n    epsilon = 1e-9\n    distances = np.abs(bins_remain_cap - item)\n    base_priority = 1 / (distances + epsilon)\n    priorities = base_priority\n\n    remaining_after_packing = bins_remain_cap - item\n    can_fit = remaining_after_packing >= 0\n    priorities[~can_fit] = 0\n    \n    fit_amount = bins_remain_cap[can_fit] - item\n    if fit_amount.size > 0:\n        fragmentation_penalty = 1 / (1 + np.exp( -5 * (fit_amount - np.mean(fit_amount))))\n        priorities[can_fit] += (1 - fragmentation_penalty)\n\n    too_small = remaining_after_packing < 0.1\n    priorities[too_small] = 0\n    \n    priorities[bins_remain_cap < item] = 0\n    return priorities\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization and target fill level.\"\"\"\n    epsilon = 1e-9\n    distances = np.abs(bins_remain_cap - item)\n    base_priority = 1 / (distances + epsilon)\n    priorities = base_priority\n\n    remaining_after_packing = bins_remain_cap - item\n    can_fit = remaining_after_packing >= 0\n    priorities[~can_fit] = 0\n    \n    fit_amount = bins_remain_cap[can_fit] - item\n    if fit_amount.size > 0:\n        fragmentation_penalty = 1 / (1 + np.exp( -5 * (fit_amount - np.mean(fit_amount))))\n        priorities[can_fit] += (1 - fragmentation_penalty)\n\n    too_small = remaining_after_packing < 0.1\n    priorities[too_small] = 0\n    \n    priorities[bins_remain_cap < item] = 0\n    return priorities\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on waste and fill level, avoiding overfilling.\"\"\"\n\n    epsilon = 1e-9\n    distances = np.abs(bins_remain_cap - item)\n    \n    # High priority if capacity close to item size and bin fits.\n    priority = 1 / (distances + epsilon)\n    \n    # Discourage almost-full bins.\n    priority = priority * (bins_remain_cap > item * 1.1)\n\n    # Encourage bins to be closer to half-full\n    target_fill = np.max(bins_remain_cap)/2\n    fill_distances = np.abs(bins_remain_cap - target_fill)\n    priority = priority / (fill_distances + epsilon)\n    \n    priority[bins_remain_cap < item] = 0  # Zero out if bin can't fit\n\n    return priority\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on waste and fill level, avoiding overfilling.\"\"\"\n\n    epsilon = 1e-9\n    distances = np.abs(bins_remain_cap - item)\n    \n    # High priority if capacity close to item size and bin fits.\n    priority = 1 / (distances + epsilon)\n    \n    # Discourage almost-full bins.\n    priority = priority * (bins_remain_cap > item * 1.1)\n\n    # Encourage bins to be closer to half-full\n    target_fill = np.max(bins_remain_cap)/2\n    fill_distances = np.abs(bins_remain_cap - target_fill)\n    priority = priority / (fill_distances + epsilon)\n    \n    priority[bins_remain_cap < item] = 0  # Zero out if bin can't fit\n\n    return priority\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Assign priorities to bins based on a combination of factors:\n    - Waste minimization\n    - Target fill level (around 75% full)\n    - Bin utilization (favor bins that are already somewhat full)\n    \"\"\"\n    epsilon = 1e-9\n    \n    # Waste minimization: smaller waste is better.\n    waste = bins_remain_cap - item\n    waste_priority = 1 / (np.abs(waste) + epsilon)\n    waste_priority[waste < 0] = 0  # Only consider bins where item fits\n\n    # Target fill: aim for bins that are around 75% full after packing.\n    target_fill = bins_remain_cap * 0.75\n    fill_diff = np.abs((bins_remain_cap - item) - target_fill)\n    fill_priority = 1 / (fill_diff + epsilon)\n\n    # Bin utilization: prefer bins that are already somewhat full to avoid creating many almost-empty bins.\n    utilization_priority = bins_remain_cap / (bins_remain_cap.max() + epsilon)\n    utilization_priority[bins_remain_cap < item] = 0  # Exclude bins where item doesn't fit.\n\n    # Combine priorities with weights. Adjust weights as needed.\n    priorities = (0.5 * waste_priority + 0.3 * fill_priority + 0.2 * utilization_priority)\n    \n    # Zero out invalid bins.\n    priorities[bins_remain_cap < item] = 0\n\n    return priorities\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Assign priorities to bins based on a combination of factors:\n    - Waste minimization\n    - Target fill level (around 75% full)\n    - Bin utilization (favor bins that are already somewhat full)\n    \"\"\"\n    epsilon = 1e-9\n    \n    # Waste minimization: smaller waste is better.\n    waste = bins_remain_cap - item\n    waste_priority = 1 / (np.abs(waste) + epsilon)\n    waste_priority[waste < 0] = 0  # Only consider bins where item fits\n\n    # Target fill: aim for bins that are around 75% full after packing.\n    target_fill = bins_remain_cap * 0.75\n    fill_diff = np.abs((bins_remain_cap - item) - target_fill)\n    fill_priority = 1 / (fill_diff + epsilon)\n\n    # Bin utilization: prefer bins that are already somewhat full to avoid creating many almost-empty bins.\n    utilization_priority = bins_remain_cap / (bins_remain_cap.max() + epsilon)\n    utilization_priority[bins_remain_cap < item] = 0  # Exclude bins where item doesn't fit.\n\n    # Combine priorities with weights. Adjust weights as needed.\n    priorities = (0.5 * waste_priority + 0.3 * fill_priority + 0.2 * utilization_priority)\n    \n    # Zero out invalid bins.\n    priorities[bins_remain_cap < item] = 0\n\n    return priorities\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Assign priorities to bins based on a combination of factors:\n    - Waste minimization\n    - Target fill level (around 75% full)\n    - Bin utilization (favor bins that are already somewhat full)\n    \"\"\"\n    epsilon = 1e-9\n    \n    # Waste minimization: smaller waste is better.\n    waste = bins_remain_cap - item\n    waste_priority = 1 / (np.abs(waste) + epsilon)\n    waste_priority[waste < 0] = 0  # Only consider bins where item fits\n\n    # Target fill: aim for bins that are around 75% full after packing.\n    target_fill = bins_remain_cap * 0.75\n    fill_diff = np.abs((bins_remain_cap - item) - target_fill)\n    fill_priority = 1 / (fill_diff + epsilon)\n\n    # Bin utilization: prefer bins that are already somewhat full to avoid creating many almost-empty bins.\n    utilization_priority = bins_remain_cap / (bins_remain_cap.max() + epsilon)\n    utilization_priority[bins_remain_cap < item] = 0  # Exclude bins where item doesn't fit.\n\n    # Combine priorities with weights. Adjust weights as needed.\n    priorities = (0.5 * waste_priority + 0.3 * fill_priority + 0.2 * utilization_priority)\n    \n    # Zero out invalid bins.\n    priorities[bins_remain_cap < item] = 0\n\n    return priorities\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}