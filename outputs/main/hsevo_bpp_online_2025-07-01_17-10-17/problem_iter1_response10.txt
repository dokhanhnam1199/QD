```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give high priority to bins where the item fits and the remaining space is minimized
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            priorities[i] = 1 / (cap - item + 0.00001)  # Add a small constant to avoid division by zero

    # Optionally penalize bins that become too full
    fullness_threshold = 0.95  # Adjust this threshold as needed
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item and (1 - (cap - item) / cap) > fullness_threshold:  #if after adding the item the bin utilization rate > threshold
            priorities[i] *= 0.5  # Reduce priority for near-full bins

    return priorities
```
