```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Based on a probabilistic "quantum" filling strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # First, consider only bins where the item fits.  Others get zero probability.
    valid_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    if np.any(valid_bins): # only calculate probability when valid bins exist
        # Calculate a "potential energy" for each valid bin based on how much space
        # would be wasted if the item were placed in that bin. Smaller wasted space = lower potential.
        potential_energies = bins_remain_cap[valid_bins] - item
        
        # Convert potential energies to "probabilities" using a Boltzmann-like distribution.
        #  This simulates a tendency to minimize wasted space (lower energy state).
        # An inverse temperature parameter 'beta' controls how strongly we prefer lower energy states.
        # Larger beta leads to more greedy behavior, smaller beta to more exploration of less-full bins.
        beta = 2.0  # Tunable parameter (try values between 0.5 and 5)

        #Avoid exp overflow by shifting potential_energies by the minimum
        potential_energies -= np.min(potential_energies)
        
        probabilities = np.exp(-beta * potential_energies)

        # Normalize the probabilities to sum to 1.
        probabilities /= np.sum(probabilities)

        # Assign the calculated probabilities to the valid bins
        priorities[valid_bins] = probabilities

    return priorities
```
