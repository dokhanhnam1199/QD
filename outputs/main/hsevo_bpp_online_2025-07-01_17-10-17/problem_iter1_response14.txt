```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Heuristic 1: Best Fit - prioritize bins that minimize wasted space
    waste = bins_remain_cap - item
    best_fit_priority = np.where(waste >= 0, 1.0 / (waste + 0.00001), -np.inf) # Avoid division by zero and penalize bins that are too small

    # Heuristic 2: Avoidance of Near-Full Bins - De-prioritize bins that become very full after packing
    post_fill_ratio = (bins_remain_cap - item) / bins_remain_cap
    near_full_penalty = np.where((post_fill_ratio >= 0) & (post_fill_ratio < 0.1), -100.0, 0.0)  # Heavily penalize if the bin becomes almost full. The 0 condition takes care of cases in which item > capacity
    
    # Heuristic 3: Moderate Filling - incentivize moderate fill levels, penalize bins that remain too empty, using sigmoid-like function.
    # Let the ideal fill ratio be .75.

    fill_ratio = (bins_remain_cap - item)/(10**-9+np.max([bins_remain_cap, item*np.ones_like(item)]))  # the 10**-9 addresses when a bin or item is exactly zero size and causes a div by zero in np.max
    target_fill = .75 # optimal fill ratio. Can be tuned for the size distrobution of the expected items
    fill_level_priority = 1 / (1 + np.abs(fill_ratio - target_fill)) -0.1 # offset for normalization - avoids inf

    # Combine heuristics
    priority = best_fit_priority + near_full_penalty + fill_level_priority

    return priority
```
