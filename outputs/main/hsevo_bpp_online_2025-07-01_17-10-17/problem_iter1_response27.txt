```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version attempts to mimic quantum tunneling behavior: bins
    with capacity close to item size have higher tunneling probability
    and therefore higher priority. It also adds some "potential well"
    shape through the remaining capacity itself.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    delta = np.abs(bins_remain_cap - item)
    tunneling = np.exp(-delta**2 / (2 * (0.1 * item)**2))  # Gaussian centered at item size. Small sigma for 'tunneling'
    potential_well = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)  # try to fill bigger cap bins if no good 'tunnel' match exist

    #Prioritize bins that fit (delta <=0), then "tunneling", then using all avaiable sapce
    priorities = np.where(bins_remain_cap >= item, tunneling + potential_well, -np.inf)

    # To avoid all bins having -inf when no bin fits the item, try to pick the best option among those that cannot fit.
    # It's crucial to prevent returning array of -inf and make a choice!
    if np.all(priorities == -np.inf):
        priorities = -delta  # minimize the difference; closer is better when no bin can contain
        priorities = priorities - np.max(priorities)
    return priorities
```
