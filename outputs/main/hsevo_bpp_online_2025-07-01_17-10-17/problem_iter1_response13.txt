```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First, consider only bins that can actually hold the item
    valid_bins = bins_remain_cap >= item
    
    if not np.any(valid_bins):
        # If no bin can hold the item, prioritize bins with the most remaining capacity.  A small penalty is added to each bin with already used capacity
        penalties = 0.1*(1 - bins_remain_cap/np.max(bins_remain_cap))
        return bins_remain_cap - penalties
        

    # For valid bins, prioritize based on a combination of factors:
    # 1. Remaining capacity: Bins with capacity closest to the item size are preferred (minimize waste).
    # 2. Fill ratio:  Prefer bins with a higher fill ratio *after* placing the current item.

    remaining_after_fit = bins_remain_cap[valid_bins] - item
    
    # Calculate absolute difference between remaining capacity and item size. Smaller is better.
    capacity_diff = np.abs(remaining_after_fit)
    
    # Invert the difference (smaller difference -> larger value), and normalize.
    capacity_priority = 1.0 / (capacity_diff + 1e-9)  # Add small epsilon to avoid division by zero

    #calculate bin utilization after putting the current item in
    utilization = (bins_remain_cap[valid_bins] - remaining_after_fit)/bins_remain_cap[valid_bins]


    # Combine priorities (weighted sum). Experiment with weights to fine-tune.
    combined_priority = 0.7 * capacity_priority + 0.3 * utilization
    
    priorities[valid_bins] = combined_priority

    return priorities
```
