```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version incorporates concepts of gravity and energy conservation (loosely!)
    to prioritize bins based on a combination of space utilization and avoiding waste.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Initialize priorities with a base value (e.g., all zeros)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Define parameters to tune the behavior (these could be optimized)
    alpha = 1.0  # Weight for space utilization
    beta = 0.5   # Weight for avoiding small leftover space
    gamma = 0.1  # Weight for preferring near-full bins

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # "Potential Energy" analogy:  Larger remaining capacity -> more potential to waste space
            space_utilization = item / cap  # Higher when item fills a larger proportion of the bin
            priorities[i] += alpha * space_utilization

            # "Energy Conservation" analogy:  Penalize bins that would leave too little space. This discourages fragmentation.
            leftover_space = cap - item
            if leftover_space > 0 and leftover_space < 0.1: #Arbitrary small leftover space threshold
                priorities[i] -= beta

            # Preferentially fill bins which are almost full already. Encourages completion.
            if cap > 0:
                fullness = 1 - (cap / (cap + item)) # How close bin is to full before add item
                if fullness > 0.9:
                    priorities[i] += gamma * fullness
            else: # If bin has 0 capacity before add item, never use. 
                priorities[i] = -np.inf
        else:
            # Bin cannot accommodate the item
            priorities[i] = -np.inf  # Assign lowest priority to infeasible bins

    return priorities
```
