```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Heavens reward bins with near-perfect fit (but not too small, lest they overflow!).
    # Smaller remaining capacity after adding the item are more valuable
    # But not to the point of overflowing

    available_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if not np.any(available_bins):
        #No bin available
        return priorities
    
    valid_caps = bins_remain_cap[available_bins]
    
    remaining_after_fit = valid_caps - item
    
    #Favor bins with least amount of wasted capacity after adding the item
    priorities[available_bins] = np.exp(-remaining_after_fit)
    
    #Prioritize partially filled bins, but only to a certain threshold
    cap_ratio = valid_caps / (item*1.5) # Give better score to ratio between item and bin capacity

    priorities[available_bins] = priorities[available_bins] * np.exp(np.clip(cap_ratio,0, 3))

    return priorities
```
