```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste, target fill (50%), penalizing near-full bins."""

    epsilon = 1e-9
    # Prioritize bins based on how well item fits (waste minimization)
    distances = np.abs(bins_remain_cap - item)
    base_priority = 1 / (distances + epsilon)

    # Target fill level is 50% of bin capacity
    target_fill = bins_remain_cap * 0.5
    fill_distance = np.abs((bins_remain_cap - item) - target_fill)
    fill_priority = 1 / (fill_distance + epsilon)

    # Combine waste and fill priorities (weighted)
    priorities = 0.7 * base_priority + 0.3 * fill_priority

    # Penalize bins that are almost full after placing the item
    almost_full_threshold = 0.9  # Define almost full as 90% capacity
    almost_full_penalty = 0.5
    almost_full = (bins_remain_cap - item) / bins_remain_cap < (1 - almost_full_threshold)
    priorities[almost_full] *= almost_full_penalty

    # Invalidate bins that can't fit the item
    priorities[bins_remain_cap < item] = 0

    return priorities
```
