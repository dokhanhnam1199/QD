{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Give high priority to bins where the item fits and the remaining space is minimized\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            priorities[i] = 1 / (cap - item + 0.00001)  # Add a small constant to avoid division by zero\n\n    # Optionally penalize bins that become too full\n    fullness_threshold = 0.95  # Adjust this threshold as needed\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item and (1 - (cap - item) / cap) > fullness_threshold:  #if after adding the item the bin utilization rate > threshold\n            priorities[i] *= 0.5  # Reduce priority for near-full bins\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    for i, cap in enumerate(bins_remain_cap):\n        if item <= cap:\n            # Prioritize bins that can fit the item, and prefer bins with smaller remaining capacity after packing (more full bins).\n            remaining_after_pack = cap - item\n            if remaining_after_pack == 0:\n                priorities[i] = 1000  # High priority if bin is filled completely\n            else:\n                priorities[i] = 1 / remaining_after_pack  # Inverse of remaining capacity after packing\n        else:\n            priorities[i] = -1e9 #Very low priority if the bin can't fit the item\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the top-performing heuristics use a combination of factors, including waste minimization, encouraging bins to be closer to half-full, and penalizing almost-full bins. The worst performing heuristics, focus only on a gravity/momentum analogy, without incorporating factors that directly address waste and bin utilization. (2nd best) vs (second worst) is nearly identical to (best) vs (second worst). Comparing (1st) vs (2nd), we see that there are no differences between the code, which is peculiar given that they are ranked differently. (3rd) vs (4th) are identical and perform poorly. Comparing (second worst) vs (worst), we see that both use similar gravitational/momentum concepts, but the second worst does incorporate avoidance of bins that cannot fit the item. Overall: The better heuristics prioritize a balance between minimizing waste, targeting a good fill level (around half-full), and preventing bins from becoming excessively full, while penalizing bins that cannot fit an item. They also avoid overly clever analogies that don't directly contribute to these goals.\n- \nOkay, let's refine \"Current self-reflection\" to make it more effective for heuristic design. Here's a breakdown:\n\n*   **Keywords:** Waste reduction, resource utilization, balanced distribution, simplicity, direct measurement.\n\n*   **Advice:** Focus on quantifiable metrics related to resource usage and imbalance. Prioritize heuristics that directly minimize waste and maximize utilization across multiple dimensions.\n\n*   **Avoid:** Abstract concepts, over-complication, indirect proxies for performance.\n\n*   **Explanation:** Effective heuristics are grounded in tangible improvements. Measure what matters (waste, utilization), balance competing needs, and keep it simple to improve the odds of creating a good heuristic!\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}