```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                waste_penalty_factor: float = 0.8575834075161552,
                bin_fraction_penalty: float = 0.4693634879473551,
                item_size_weight: float = 2.0884148461764993,
                random_perturbation_scale: float = 0.06717097613120268,
                capacity_usage_exponent: float = 1.5,
                large_item_threshold: float = 0.7,
                nearly_full_threshold: float = 0.1) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    This version introduces several enhancements:

    1.  Adaptive Waste Penalty: Waste penalty is amplified for smaller waste,
        encouraging near-perfect fits even more aggressively.
    2.  Capacity Usage Emphasis: A non-linear term promotes fuller bins using an exponent.
    3.  Item Size Dependent Strategy:  For large items, the heuristic prioritizes bins
        that are already significantly full, reducing fragmentation.
    4.  Nearly Full Bin Consideration: A special bonus is given to bins that are
        close to being full after adding the item. This is a fine-grained
        adjustment to encourage complete filling.
    5.  Dynamic Random Perturbation: Perturbation scales dynamically based on the
        item size and remaining capacities, providing more exploration for critical
        packing decisions.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        waste_penalty_factor: Factor to adjust the impact of waste minimization.
        bin_fraction_penalty: Factor to adjust the balancing of bin utilization.
        item_size_weight: Weight of item size awareness.
        random_perturbation_scale: Scale of random noise.
        capacity_usage_exponent: Exponent to promote fuller bins.
        large_item_threshold: Threshold (as a fraction of bin capacity) above which an item is considered large.
        nearly_full_threshold: Threshold (remaining capacity as a fraction of bin size) for nearly full bonus.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    original_capacity = np.max(bins_remain_cap)

    # Waste Minimization & Capacity Threshold
    waste = bins_remain_cap - item
    too_small = waste < 0
    priorities[too_small] = -np.inf  # Never put item in bins that are too small.
    waste[too_small] = np.inf

    # Adaptive Waste Penalty (Stronger for near-perfect fits)
    priorities += waste_penalty_factor * np.exp(-10 * waste)  # Sharpened exponential decay

    # Capacity Usage Emphasis (Non-linear preference for fuller bins)
    capacity_usage = (original_capacity - bins_remain_cap) / original_capacity
    priorities += (1 - bin_fraction_penalty) * capacity_usage**capacity_usage_exponent

    # Item Size Dependent Strategy
    if item > large_item_threshold * original_capacity:
        # Prioritize bins that are already significantly full
        priorities += item_size_weight * capacity_usage

    # Nearly Full Bin Consideration
    nearly_full = (waste >= 0) & (waste / original_capacity <= nearly_full_threshold)
    priorities[nearly_full] += 2 * waste_penalty_factor # Added bonus for near full bins

    # Dynamic Random Perturbation
    dynamic_perturbation_scale = random_perturbation_scale * (item / original_capacity) * (1 - capacity_usage)
    priorities += np.random.normal(0, dynamic_perturbation_scale, size=bins_remain_cap.shape)

    return priorities
```
