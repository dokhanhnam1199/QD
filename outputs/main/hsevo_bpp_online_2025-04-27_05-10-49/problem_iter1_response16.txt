```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a small value
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give higher priority to bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1.0

    # Prioritize bins with less remaining capacity to avoid fragmentation, but only if item fits.
    priorities[can_fit] += (1 - (bins_remain_cap[can_fit] - item) / bins_remain_cap[can_fit])

    # Add a very small penalty to bins where item doesn't fit to prevent selecting very small bins first, when possible.
    priorities[~can_fit] -= 0.0001

    # A tiny push towards full bins.  It only applies when item fits.
    priorities[can_fit] += (item / bins_remain_cap[can_fit]) * 0.01 # encourage fuller bins (only if fits)


    return priorities
```
