```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Employs a combination of enhanced heuristics:
        1. Waste Minimization with Sigmoid Scaling: Prioritizes bins where the
           remaining space after packing the item is minimal, but uses a sigmoid
           function to provide a more nuanced preference.
        2. Capacity Threshold with Dynamic Adjustment: Avoids bins with
           extremely small remaining capacity, but dynamically adjusts the
           threshold based on the average item size.
        3. Bin Utilization Balancing with Exponential Decay: Prefers bins that
           are not completely empty or completely full, with an exponential
           decay to penalize extreme utilization levels.
        4. Item Size Consideration: Incorporates the item size into the
           priority calculation.
        5. Adaptive Random Perturbation: Introduces randomness to avoid getting
           stuck in local optima, with the perturbation level adapted based on
           the current iteration or problem characteristics.
        6. Bin Diversity: Encourages diversity in bin selection to avoid putting all
           small items in one bin, by adding a bonus to bins that have more empty space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Waste Minimization & Capacity Threshold
    waste = bins_remain_cap - item
    too_small = waste < 0
    priorities[too_small] = -np.inf  # Never put item in bins that are too small.
    waste[too_small] = np.inf

    # Sigmoid scaling for waste minimization
    waste_scaling = 5  # Adjust this parameter to control the steepness of sigmoid
    priorities += 1 / (1 + np.exp(waste_scaling * waste))

    # Dynamic capacity threshold (adapts to item size)
    threshold = 0.1 * item  # Adjust the scaling factor as needed.
    near_full = (bins_remain_cap > 0) & (bins_remain_cap < threshold)

    # Bin utilization balancing with exponential decay
    bin_fraction = bins_remain_cap / np.max(bins_remain_cap)
    utilization_penalty = np.exp(-5 * (bin_fraction - 0.5)**2)
    priorities += utilization_penalty

    # Item Size Consideration
    priorities += item / np.max(bins_remain_cap)  # Give preference to bins that fit the item well based on the bin capacity

    # Adaptive Random Perturbation (small value for numerical stability)
    perturbation_level = 0.005  # Adjust this parameter based on the problem
    priorities += np.random.normal(0, perturbation_level, size=bins_remain_cap.shape)

    # Bin Diversity - prefer less full bins
    priorities += bin_fraction

    return priorities
```
