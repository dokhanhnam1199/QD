```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, bin utilization, and item size."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    original_capacity = np.max(bins_remain_cap)
    waste = bins_remain_cap - item
    too_small = waste < 0
    waste[too_small] = np.inf
    priorities[too_small] = -np.inf

    priorities += np.exp(-waste)  # Waste minimization.
    bin_fraction = bins_remain_cap / original_capacity
    priorities +=  -(bin_fraction - 0.5)**2  # Bin utilization.
    priorities += item/original_capacity # Item size awareness.
    priorities += np.random.normal(0, 0.05, size=bins_remain_cap.shape) #randomness
    return priorities
```
