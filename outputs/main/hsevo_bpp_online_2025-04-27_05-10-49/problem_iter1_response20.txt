```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Prioritize bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1  # Basic fitting priority
    
    # Give higher priority to bins with smaller remaining capacity *after* fitting the item
    remaining_after_fit = bins_remain_cap[can_fit] - item
    priorities[can_fit] += 1 / (1e-6 + remaining_after_fit) # Avoid division by zero

    # Give higher priority to bins that are not too empty after packing the item
    occupancy_ratio = (item / (bins_remain_cap + 1e-6))  # Occupancy if placed in empty bin

    priorities += 0.1 * occupancy_ratio # Slight preference for higher occupancy

    # Penalize bins where the item won't fit (large penalty)
    priorities[~can_fit] -= 1000  # Huge negative priority to avoid overfill
    
    return priorities
```
