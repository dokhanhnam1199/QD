```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Employs a combination of improved heuristics:
        1. Waste Minimization: Prioritizes bins where the remaining space after
           packing the item is minimal, with more refined waste evaluation.
        2. Capacity Threshold: Avoids bins with extremely small remaining
           capacity to reduce fragmentation. Bins that cannot fit are penalized.
           Uses a dynamic threshold.
        3. Bin Level: Uses the bin level instead of the remaining capacity.
        4. Adaptive Random Perturbation: The magnitude of randomness is linked to the
           variance in remaining bin capacities.
        5. Bin Filling Ratio: Using bin filling ratio.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # Waste Minimization & Capacity Threshold
    waste = bins_remain_cap - item
    too_small = waste < 0
    priorities[too_small] = -np.inf  # Never put item in bins that are too small.
    waste[too_small] = np.inf

    # Near-perfect fit bonus (minimize waste), but with a steeper penalty for larger waste
    priorities += np.exp(-5 * waste / bin_capacity)  # Increased exponent for sharper decay.

    # Adaptive Capacity Threshold: dynamically adjust based on bin capacities.
    threshold = 0.1 * bin_capacity # e.g., Avoid bins with less than 10% capacity remaining after packing.
    small_waste = (waste > 0) & (waste < threshold)
    priorities[small_waste] -= 0.5  # Slightly penalize bins with very small remaining capacity

    # Bin utilization balancing - prefers bins that are neither too full nor too empty, using bin level.
    bin_level = bin_capacity - bins_remain_cap
    bin_fraction = bin_level / bin_capacity
    priorities += -(bin_fraction - 0.75)**2 # Shifted parabola center
    #Adaptive Random Perturbation
    std_dev = np.std(bins_remain_cap)
    priorities += np.random.normal(0, 0.01 * std_dev, size=bins_remain_cap.shape)
    bin_filling_ratio = bin_level / bin_capacity
    priorities += bin_filling_ratio
    return priorities
```
