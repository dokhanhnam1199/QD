```python
import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                waste_penalty_factor: float = 0.8575834075161552,
                bin_fraction_penalty: float = 0.4693634879473551,
                item_size_weight: float = 2.0884148461764993,
                random_perturbation_scale: float = 0.06717097613120268,
                small_waste_bonus: float = 1.5,
                large_item_threshold: float = 0.7,
                almost_full_penalty: float = 2.0) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Employs a combination of heuristics with refined strategies:
        1. Waste Minimization: Prioritizes bins where the remaining space after
           packing the item is minimal.  A near-perfect fit is highly valued.
        2. Capacity Threshold: Avoids bins with extremely small remaining
           capacity to reduce fragmentation. Bins that cannot fit are penalized.
        3. Bin Level Awareness : Considers the initial capacity of the bins for a more balanced distribution
        4. Balancing Bin Utilization:  Slight preference for bins that are not
           completely empty or completely full to maintain flexibility.
        5. Random Perturbation: Introduces small randomness to avoid getting stuck
           in local optima and explore slightly different packing arrangements.
        6. Item size awareness : Larger Items should fill bins as much as possible
        7. Small Waste Bonus: Provides a bonus for bins with extremely small waste (e.g., < 10% of bin capacity).
        8. Large Item Strategy: For large items, aggressively prioritize bins that can accommodate them well.
        9. Almost Full Penalty: Discourages placing items into bins that are already very full to avoid creating tiny, unusable fragments.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        waste_penalty_factor: Factor to adjust the impact of waste minimization.
        bin_fraction_penalty: Factor to adjust the balancing of bin utilization.
        item_size_weight: Weight of item size awareness.
        random_perturbation_scale: Scale of random noise.
        small_waste_bonus: Bonus multiplier for bins with very small waste.
        large_item_threshold: Threshold for considering an item "large" (as a fraction of bin capacity).
        almost_full_penalty: Penalty multiplier for bins that are almost full.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    original_capacity = np.max(bins_remain_cap)

    # Waste Minimization & Capacity Threshold
    waste = bins_remain_cap - item
    too_small = waste < 0
    priorities[too_small] = -np.inf  # Never put item in bins that are too small.
    waste[too_small] = np.inf

    # Near-perfect fit bonus (minimize waste)
    priorities += waste_penalty_factor * np.exp(-waste)  # Exponential decay for increasing waste.

    # Bin utilization balancing - slightly prefers bins that aren't empty or full.  avoids extremities.  Parabolic preference
    bin_fraction = bins_remain_cap / original_capacity
    priorities += bin_fraction_penalty * -(bin_fraction - 0.5)**2  # Adds a parabolic preference curve.
    
    # Item Size Awareness.  Larger items fill bins up
    priorities += item_size_weight * item/original_capacity

    # Small Waste Bonus
    small_waste_threshold = 0.1 * original_capacity  # e.g., 10% of bin capacity
    small_waste_bins = (waste >= 0) & (waste <= small_waste_threshold)
    priorities[small_waste_bins] += small_waste_bonus

    # Large Item Strategy
    if item >= large_item_threshold * original_capacity:
        # Heavily prioritize bins where the item fills at least 80% of the bin's remaining capacity
        good_fit = (item <= bins_remain_cap) & (item >= 0.8 * bins_remain_cap)
        priorities[good_fit] += 2 * item_size_weight  # Aggressive prioritization

    # Almost Full Penalty
    almost_full_threshold = 0.9 * original_capacity
    almost_full_bins = bins_remain_cap <= almost_full_threshold
    priorities[almost_full_bins] -= almost_full_penalty * (1 - (bins_remain_cap[almost_full_bins] / almost_full_threshold))


    # Random Perturbation (introduces some "quantum" fluctuation). Very small value for numerical stability
    priorities += np.random.normal(0, random_perturbation_scale, size=bins_remain_cap.shape)

    return priorities
```
