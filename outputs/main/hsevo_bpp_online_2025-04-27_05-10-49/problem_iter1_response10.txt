```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate waste if item is added to each bin
    waste = bins_remain_cap - item
    
    # Give a high priority to bins where the item fits
    # and a lower priority to bins where it doesn't.

    fits = waste >= 0
    
    if np.any(fits): #prioritize the bins where the item fits
      
      #Prioritize smaller waste when the item fits
      priorities[fits] = 1.0 / (waste[fits] + 1e-9)  # Adding a small constant to avoid division by zero.
    
    else: # if the item does not fit in any bin, put it in the bin with maximum remaining capacity.
        priorities = bins_remain_cap/np.sum(bins_remain_cap + 1e-9)
    

    return priorities
```
