```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers several factors:

    1.  Remaining capacity: Bins with capacity closer to the item size are preferred.
    2.  Waste avoidance: Bins with smaller remaining capacity after placing the item are preferred.
    3.  Bin Utilization: Prefers filling bins that are already partially full

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Large negative values where item doesn't fit.
    invalid_mask = item > bins_remain_cap
    priorities[invalid_mask] = -np.inf  # Don't even consider it if impossible.

    valid_mask = ~invalid_mask

    if np.any(valid_mask):
        # Capacity-based priority. Higher if bins_remain_cap and item close.

        capacity_diff = np.abs(bins_remain_cap[valid_mask] - item)
        capacity_priority = -capacity_diff  # Smaller diff == higher priority.
        capacity_priority = capacity_priority / np.max(np.abs(capacity_priority)) #normalize

        # Waste-based priority.  Lower waste = higher priority
        waste = bins_remain_cap[valid_mask] - item
        waste_priority = -waste # Lower waste is good
        waste_priority = waste_priority / np.max(np.abs(waste_priority)) # normalize
        # Bin utilization: favor bins that are already partially filled

        utilization = 1 - bins_remain_cap[valid_mask]/np.max(bins_remain_cap) # assumption is max bins_remain_cap is capacity of all bins

        priorities[valid_mask] =  0.5*capacity_priority + 0.3*waste_priority + 0.2*utilization  # Combine metrics


    return priorities
```
