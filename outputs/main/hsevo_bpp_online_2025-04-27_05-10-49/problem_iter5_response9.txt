```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, bin utilization, item size, and randomness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    original_capacity = np.max(bins_remain_cap)

    # Waste Minimization & Infeasibility
    waste = bins_remain_cap - item
    infeasible_mask = waste < 0
    priorities[infeasible_mask] = -np.inf
    waste[infeasible_mask] = np.inf

    # Waste Minimization Score
    waste_score = np.exp(-waste)

    # Bin Utilization Score
    bin_fraction = bins_remain_cap / original_capacity
    utilization_score = -(bin_fraction - 0.5)**2

    # Item Size Awareness Score
    item_size_score = item / original_capacity

    # Gravitational component from the second heuristic, but adapted
    fit_mask = bins_remain_cap >= item
    fill_ratios = np.where(fit_mask, item / bins_remain_cap, 0)  # Avoid division by zero
    gravity_score = np.where(fit_mask, (1 - np.abs(1 - fill_ratios)), 0)  # Only add for feasible bins

    # Combine scores with potentially adaptive weights (using placeholder values for now, consider later adaptations).
    waste_weight = 0.4
    utilization_weight = 0.2
    item_weight = 0.2
    gravity_weight = 0.2

    priorities += waste_weight * waste_score + utilization_weight * utilization_score + item_weight * item_size_score + gravity_weight * gravity_score

    # Small random perturbation
    random_perturbation_scale = 0.05
    priorities += np.random.normal(0, random_perturbation_scale, size=bins_remain_cap.shape)

    return priorities
```
