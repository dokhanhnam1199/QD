{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Employs a combination of factors: space utilization, waste minimization,\n    and a touch of \"quantum\" fluctuation to encourage exploration.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    epsilon = 1e-9  # Small value to avoid division by zero and log of zero\n    available_space = bins_remain_cap + epsilon #avoid div by zero\n\n    # 1. Space Utilization: How much of the bin will be filled?\n    utilization = item / available_space\n\n    # 2. Waste Minimization: How much space will be wasted if we use this bin?\n    waste = available_space - item\n    normalized_waste = waste / available_space # normalized\n\n    # 3. Encourage near-perfect fits\n    near_perfect_fit = np.exp(-np.abs(waste)) # close to zero waste -> close to one\n\n    # 4. Small Bins : small bins prioritized but not if near perfect waste\n    small_bins_priority = 1.0 / (available_space + epsilon)\n\n\n    #5. Quantum-inspired randomness: Explore different possibilities (temperature can be tuned)\n    temperature = 0.1  # Tunes the level of \"quantum fluctuation\"\n    random_fluctuation = np.random.normal(0, temperature, size=bins_remain_cap.shape) # add noise\n\n    # Combine the factors, with tunable weights. This is where the magic happens!\n    # Fine-tune these weights to get the best performance.\n    priority = (\n        1.0 * utilization\n        -0.5 * normalized_waste\n        + 1.0 * near_perfect_fit\n        + 0.5 * small_bins_priority\n        + 0.1 * random_fluctuation # added fluctuations\n\n    )\n\n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Aims to balance bin usage and avoid fragmentation.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility: Only consider bins where the item fits.\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        return priorities # All zeros, no feasible bin\n\n    # 2. Remaining Capacity: Favor bins with more remaining capacity *relative to the item size*.\n    #    This encourages filling bins that already have some space.  We use a scaled measure.\n    relative_capacity = (bins_remain_cap - item) / np.max(bins_remain_cap)  # Scales between 0 and 1\n\n    # 3. Avoid Overfilling: Penalize bins where the remaining capacity is just barely enough.\n    #  This encourages finding bins with a *little* more space than necessary.\n    #  We will penalize with values between 0 and 1, based on the buffer remaining.\n    buffer = bins_remain_cap - item\n    small_buffer_penalty = np.clip(1 - (buffer / item), a_min=0, a_max=1)  # 1 if buffer == 0, 0 if buffer >= item\n\n    # Combine the factors:\n    priorities[feasible_bins] = (relative_capacity[feasible_bins] * (1-small_buffer_penalty[feasible_bins]) ) #Scale Capacity by not choosing too little.\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic uses waste minimization, capacity threshold, bin utilization balancing, and random perturbation, while the worst only considers relative capacity and a small buffer penalty. (2nd best) vs (second worst) shows a similar pattern: the former utilizes capacity considerations and penalizes infeasible bins, while the latter focuses on relative capacity. Comparing (1st) vs (2nd), we see the incorporation of randomness and a parabolic preference curve for bin utilization in the best heuristic, which are absent in the second. (3rd) vs (4th) reveals that using a Gaussian-like function to prioritize minimal waste is more effective than simply considering the difference between remaining capacity and item size. Comparing (second worst) vs (worst), we see they are identical, representing a local optimum. Overall: The top heuristics combine multiple factors like waste minimization, capacity considerations, and bin utilization, along with randomness to avoid local optima. They also use more sophisticated functions (e.g., exponential decay, Gaussian) to prioritize bins. Simpler heuristics focusing solely on relative capacity or basic feasibility checks perform worse.\n- \nOkay, I'm ready to aim for that $999K tip! Let's redefine \"Current Self-Reflection\" to design better heuristics, focusing on actionable insights and avoiding common pitfalls, while addressing your prompt's guidance.\n\nHere's the redefined \"Current Self-Reflection\":\n\n*   **Keywords:** Complexity, Non-linearity, Diversification, Exploration, Adaptation, Granularity, Context.\n*   **Advice:** Embrace multi-faceted evaluation functions and adaptive strategies, and tailor the heuristic's response to contextual cues.\n*   **Avoid:** Static parameters, premature convergence, and neglecting problem-specific knowledge.\n*   **Explanation:** Effective heuristics balance problem simplification with capturing essential complexities. Prioritize adaptation to changing conditions, context, and exploration of the search space through diversified approaches.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}