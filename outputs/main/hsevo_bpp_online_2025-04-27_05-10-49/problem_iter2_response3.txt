```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, capacity considerations, and randomness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Waste Minimization & Infeasibility
    waste = bins_remain_cap - item
    infeasible = waste < 0
    priorities[infeasible] = -np.inf
    waste[infeasible] = np.inf

    # Capacity considerations - like v1, but refined
    capacity_diff = np.abs(bins_remain_cap - item)
    priorities += 1.0 / (1e-6 + capacity_diff)

    # Near-perfect fit bonus with waste
    priorities += np.exp(-waste)

    # Random Perturbation
    priorities += np.random.normal(0, 0.01, size=bins_remain_cap.shape)

    priorities = np.nan_to_num(priorities, neginf=-np.inf)
    return priorities
```
