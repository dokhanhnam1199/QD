```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization and item snugness, with capacity threshold.
    Penalizes bins that are too small or would be left with very little space.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    too_small = waste < 0
    priorities[too_small] = -np.inf

    fit_mask = waste >=0
    if np.any(fit_mask):
        priorities[fit_mask] = np.exp(-waste[fit_mask]) # Waste minimization
        priorities[fit_mask] += item/bins_remain_cap[fit_mask] #item snugness

        min_waste_threshold = 0.1 * np.max(bins_remain_cap)
        too_little_waste = waste < min_waste_threshold
        priorities[too_little_waste & fit_mask] -= 0.1 # Penalize very small waste

    return priorities
```
