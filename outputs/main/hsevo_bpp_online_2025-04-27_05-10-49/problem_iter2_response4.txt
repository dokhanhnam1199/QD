```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Return priority score for each bin.Combines waste minimization, occupancy, and gravity."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    feasible = ~infeasible
    if np.any(feasible):
        residual_space = bins_remain_cap[feasible] - item
        priorities[feasible] += np.exp(-2 * np.abs(residual_space) / item) # Waste minimization

        occupancy = item / bins_remain_cap[feasible]
        priorities[feasible] += item * np.log1p(bins_remain_cap[feasible])  / np.max(bins_remain_cap) # Gravity

        priorities[feasible] -= 0.05 * residual_space / np.max(bins_remain_cap) # Discourage excessive waste

    priorities += 0.001 * np.random.rand(len(bins_remain_cap)) # Add randomness
    return priorities
```
