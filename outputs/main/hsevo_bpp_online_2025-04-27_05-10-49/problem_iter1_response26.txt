```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function incorporates several factors to improve bin packing:
    1.  Remaining capacity: Bins with capacity closer to the item size are preferred (First Fit Decreasing-like).
    2.  Number of items already in the bin:  Slight preference for bins with fewer items. Not directly tracked, so proxy with remaining capacity.
    3. Penalize bins where the item won't fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Capacity considerations
    capacity_diff = np.abs(bins_remain_cap - item)  # Difference between remaining capacity and item size
    priorities = 1.0 / (1e-6 + capacity_diff) # Prefer bins with closer capacities

    # 2. Small bias towards filling emptier bins. This is implicit from larger remaining capacity

    # 3. Massive penalty for bins where the item won't fit.
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf

    # Some scaling and smoothing to make function better behaved (prevent numerical overflow)
    priorities = np.nan_to_num(priorities, neginf=-np.inf)  #Handles bins with 0 remaining capacity cleanly when item >0.
    return priorities
```
