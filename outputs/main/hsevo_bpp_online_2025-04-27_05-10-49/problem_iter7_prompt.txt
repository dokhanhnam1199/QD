{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, bin utilization, item size, and randomness.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    original_capacity = np.max(bins_remain_cap)\n\n    # Waste Minimization & Infeasibility\n    waste = bins_remain_cap - item\n    infeasible_mask = waste < 0\n    priorities[infeasible_mask] = -np.inf\n    waste[infeasible_mask] = np.inf\n\n    # Waste Minimization Score\n    waste_score = np.exp(-waste)\n\n    # Bin Utilization Score\n    bin_fraction = bins_remain_cap / original_capacity\n    utilization_score = -(bin_fraction - 0.5)**2\n\n    # Item Size Awareness Score\n    item_size_score = item / original_capacity\n\n    # Gravitational component from the second heuristic, but adapted\n    fit_mask = bins_remain_cap >= item\n    fill_ratios = np.where(fit_mask, item / bins_remain_cap, 0)  # Avoid division by zero\n    gravity_score = np.where(fit_mask, (1 - np.abs(1 - fill_ratios)), 0)  # Only add for feasible bins\n\n    # Combine scores with potentially adaptive weights (using placeholder values for now, consider later adaptations).\n    waste_weight = 0.4\n    utilization_weight = 0.2\n    item_weight = 0.2\n    gravity_weight = 0.2\n\n    priorities += waste_weight * waste_score + utilization_weight * utilization_score + item_weight * item_size_score + gravity_weight * gravity_score\n\n    # Small random perturbation\n    random_perturbation_scale = 0.05\n    priorities += np.random.normal(0, random_perturbation_scale, size=bins_remain_cap.shape)\n\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}