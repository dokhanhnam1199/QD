```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines waste minimization, bin utilization, item size,
    and adaptive randomness for effective bin packing.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    original_capacity = np.max(bins_remain_cap)

    # Infeasible bin handling
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    # Waste minimization
    waste = bins_remain_cap - item
    waste[infeasible] = np.inf
    priorities += np.exp(-waste)

    # Bin utilization balancing
    bin_fraction = bins_remain_cap / original_capacity
    priorities += -(bin_fraction - 0.5)**2

    # Item Size Awareness
    priorities += item/original_capacity

    # Adaptive Random Perturbation
    capacity_std = np.std(bins_remain_cap)
    randomness_scale = 0.01 * (1 + np.tanh(capacity_std))
    priorities += np.random.normal(0, randomness_scale, size=bins_remain_cap.shape)

    return priorities
```
