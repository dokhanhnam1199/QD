```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Initialize impossible locations to a very low priority.
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    # For feasible bins, prioritize based on remaining capacity.

    # 1.  Higher priority for bins that accommodate item and leave minimal leftover space.

    # 2.  Lower priority (but still better than infeasible) to locations where there is excessive space.

    # 3. Incorporate a 'gravity' term to attract items to partially full bins, discouraging them from solely filling empty bins early on.

    feasible = ~infeasible
    if np.any(feasible):

        residual_space = bins_remain_cap[feasible] - item

        # Prioritize almost-full bins.  The exponent sharpens the peak.
        priorities[feasible] += np.exp(-residual_space**2)

        # Moderate gravity effect, scaled by item size so larger items are drawn more.
        # The logarithm dampens excessive attraction to any single bin.
        priorities[feasible] += item * np.log1p(bins_remain_cap[feasible])  / np.max(bins_remain_cap)

        # Discourage large leftovers. Subtract penalty proportional to unused space, but less aggressively.
        priorities[feasible] -= 0.1 * residual_space / np.max(bins_remain_cap)



    return priorities
```
