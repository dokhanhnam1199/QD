```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, bin utilization, and adaptive perturbation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    fits = waste >= 0

    if np.any(fits):
        # Prioritize fitting bins, smaller waste is better.
        priorities[fits] = np.exp(-waste[fits])

        # Encourage filling bins closer to full - parabolic
        bin_fraction = bins_remain_cap[fits] / np.max(bins_remain_cap)
        priorities[fits] -= 0.5 * (bin_fraction - 0.5)**2

        # Adaptive perturbation based on item size and remaining capacity.
        perturbation_level = 0.01 * item #scale perturbation based on item size
        priorities[fits] += np.random.normal(0, perturbation_level, size=bins_remain_cap[fits].shape)

    else:
        # If no bin fits, prioritize based on remaining capacity.
        priorities = bins_remain_cap / np.sum(bins_remain_cap + 1e-9)

    return priorities
```
