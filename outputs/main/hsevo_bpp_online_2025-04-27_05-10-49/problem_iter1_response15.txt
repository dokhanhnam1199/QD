```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by celestial mechanics and the elliptical orbits of planets,
    we consider both the 'distance' (remaining capacity) and a 'velocity'
    component based on how much capacity is left relative to the item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give bins that can't fit a priority of negative infinity
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    # Encourage filling bins closer to full.
    # The closer the item size is to the remaining capacity, the better
    # 'Gravity' component: Inverse square law analogy - closer is better
    gravity = (item / bins_remain_cap) ** 2  # Closer = stronger pull

    # 'Velocity' component:  Rate of filling - aims for perfect fit.
    velocity = np.exp(-np.abs(bins_remain_cap - item) / item) # Exponential decay of benefit

    priorities[~infeasible] = gravity[~infeasible] * velocity[~infeasible] # Combination: Gravity pulling + speed aligning to target.
    # Bonus: Small priority to nearly full bins
    nearly_full = (bins_remain_cap > item) & (bins_remain_cap < item * 1.2)
    priorities[nearly_full] += 0.5  # Gently nudges for packing

    return priorities
```
