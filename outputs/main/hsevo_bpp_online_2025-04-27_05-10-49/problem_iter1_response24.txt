```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    My latest invention uses a combination of heuristics,
    leveraging both the space utilization and the potential
    for future packing. The resonant frequency of optimal packing
    is approximated using the following:

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Space Utilization Component: Favor bins where the item fits reasonably well.
            utilization = item / cap
            space_left_after = cap - item

            # Future Packing Potential Component:  Consider how much space will be left
            # and prioritize bins where small items might fit later.  We give preference if space_left_after is small relative to cap
            future_packing_potential = 1 - (space_left_after / cap)

            # Combine the components. A slightly non-linear combination to emphasize "good" fits.

            if utilization > 0.1: # ensure we at least use some space
                priorities[i] = (utilization**1.2) * (future_packing_potential**0.8)  # Experiment with the exponents

            # Penalize nearly full bins to avoid tiny gaps. This term is small.
            if space_left_after < 0.1: #If capacity less than 0.1 after the item.
                priorities[i] -= 0.05


    return priorities
```
