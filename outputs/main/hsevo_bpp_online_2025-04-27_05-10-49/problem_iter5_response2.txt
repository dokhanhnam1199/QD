```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, gravity, and adaptive perturbation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    fits = waste >= 0

    if np.any(fits):
        # Prioritize fitting bins, smaller waste is better.
        priorities[fits] = np.exp(-waste[fits])

        #Encourage filling bins closer to full by gravity
        gravity = (item / bins_remain_cap[fits]) ** 2
        priorities[fits]+= gravity
        
        #Adaptive perturbation based on remaining capacity.
        perturbation_level = 0.01 * np.mean(bins_remain_cap)
        priorities[fits] += np.random.normal(0, perturbation_level, size=bins_remain_cap[fits].shape)

    else:
        # If no bin fits, prioritize based on remaining capacity and item size.
        priorities = (bins_remain_cap / np.sum(bins_remain_cap + 1e-9)) * (item / np.max(bins_remain_cap + 1e-9))

    return priorities
```
