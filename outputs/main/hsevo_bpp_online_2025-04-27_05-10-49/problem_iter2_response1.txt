```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines gravity/velocity with capacity, buffer to select bin."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    gravity = (item / bins_remain_cap) ** 2
    velocity = np.exp(-np.abs(bins_remain_cap - item) / item)
    priorities[~infeasible] = gravity[~infeasible] * velocity[~infeasible]

    buffer = bins_remain_cap - item
    small_buffer_penalty = np.clip(1 - (buffer / item), a_min=0, a_max=1)
    feasible_bins = bins_remain_cap >= item
    relative_capacity = (bins_remain_cap - item) / np.max(bins_remain_cap)
    priorities[feasible_bins] += relative_capacity[feasible_bins] * (1-small_buffer_penalty[feasible_bins])
    return priorities
```
