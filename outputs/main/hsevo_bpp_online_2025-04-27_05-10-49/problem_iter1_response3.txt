```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # 1. Feasibility: Only consider bins that can actually hold the item.
    feasible_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    priorities[~feasible_bins] = -np.inf  # Assign lowest priority to infeasible bins

    # 2. Fill Rate (Preference for bins that will be filled well):
    fill_rate = item / bins_remain_cap
    fill_rate[~feasible_bins] = 0  # Ensure no errors if bin is infeasible.

    # 3. Remaining Capacity (Try to use fullest bins):
    remaining_capacity_priority = bins_remain_cap.max() - bins_remain_cap
    remaining_capacity_priority[~feasible_bins] = 0

    # 4. Balance Load (Slightly favour emptier bins among similarly full bins. Avoids complete exhaustion of single bin.)
    capacity_normalized = bins_remain_cap / bins_remain_cap.max()
    balance_load = capacity_normalized

    # 5. Combination (prioritization by some function of remaining capacity and fill rate.):

    priorities[feasible_bins] = (5*fill_rate[feasible_bins] + 1*remaining_capacity_priority[feasible_bins] + 1.5*balance_load[feasible_bins])

    return priorities
```
