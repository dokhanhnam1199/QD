```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines snugness, waste minimization, and a penalty for near-fits."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    wasted_space = bins_remain_cap - item
    snugness = item / bins_remain_cap

    buffer = bins_remain_cap - item
    small_buffer_penalty = np.clip(1 - (buffer / item), a_min=0, a_max=1)

    priorities[feasible_bins] = (2 * np.exp(-wasted_space[feasible_bins]) + snugness[feasible_bins]) * (1-small_buffer_penalty[feasible_bins])

    priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities) + 1e-9)

    return priorities
```
