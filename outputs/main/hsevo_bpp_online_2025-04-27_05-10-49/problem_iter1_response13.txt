```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Consider only bins that can accommodate the item
    eligible_bins = bins_remain_cap >= item
    if not np.any(eligible_bins):
        #If no bins are big enough, prioritize the emptiest bin. We prioritize nearly empty bins, so next iterations can utilize them more efficiently
        priorities = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.ones_like(bins_remain_cap)
        return priorities
    else:
        valid_bins_cap = bins_remain_cap[eligible_bins]
        #Prioritize based on remaining capacity after adding the item, to minimize wasted space. 1 / (remain_cap - item)
        priorities[eligible_bins] = 1 / (valid_bins_cap - item + 1e-9) # Add small constant to prevent division by zero.

        # Heuristic 2: Smallest waste first
        waste = valid_bins_cap - item
        min_waste = np.min(waste)

        best_bins = (waste <= (min_waste * 1.1)) # select bin with smallest waste within a tolerance of 10%
        priorities[eligible_bins][best_bins] = priorities[eligible_bins][best_bins] * 2 # Bump up priority of best bins slightly.

    return priorities
```
