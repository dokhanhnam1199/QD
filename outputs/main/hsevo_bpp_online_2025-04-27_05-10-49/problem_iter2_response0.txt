```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization and bin utilization for priority."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    capacity_diff = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (1e-6 + capacity_diff)
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf
    priorities = np.nan_to_num(priorities, neginf=-np.inf)
    
    valid_bins = bins_remain_cap > 0
    fit_mask = (bins_remain_cap >= item) & valid_bins
    
    if np.any(fit_mask):
        fill_ratios = item / bins_remain_cap[fit_mask]
        gravitational_constant = 1.0
        priorities[fit_mask] += gravitational_constant * (1 - np.abs(1 - fill_ratios))
        priorities[fit_mask] += 0.1 * bins_remain_cap[fit_mask] / bins_remain_cap[fit_mask].max()
    else:
        empty_mask = (bins_remain_cap == bins_remain_cap.max()) & valid_bins
        if np.any(empty_mask):
            priorities[empty_mask] = 0.5
        else:
            return np.full(bins_remain_cap.shape, -np.inf)

    return priorities
```
