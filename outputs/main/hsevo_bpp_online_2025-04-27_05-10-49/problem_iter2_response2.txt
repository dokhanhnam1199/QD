```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization with a target utilization, penalizing infeasible bins."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    wasted_space = bins_remain_cap - item
    fit_mask = wasted_space >= 0
    if np.any(fit_mask):
        scaling_factor = 2.0
        priorities[fit_mask] = np.exp(-scaling_factor * wasted_space[fit_mask]**2 / bins_remain_cap[fit_mask].mean())
        desirable_remaining_space = 0.2 * np.max(bins_remain_cap)
        priority_values = np.exp(-((wasted_space[fit_mask] ) ** 2) / (2 * (desirable_remaining_space/2)** 2))
        priorities[fit_mask] = 0.5*priorities[fit_mask]+ 0.5*priority_values
    priorities[~fit_mask] = -1e9
    return priorities
```
