```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # A bin is feasible if it has enough capacity for the item.
    feasible_bins = bins_remain_cap >= item
    
    # If no bin is feasible, assign low priority to all bins.
    if not np.any(feasible_bins):
        return priorities

    # For feasible bins:
    # 1. Fill Ratio: How full the bin will be if the item is added.
    fill_ratio = (item + (bins_remain_cap -item )) / (bins_remain_cap + 1e-9)

    # 2. Remaining Capacity: Favor bins with less remaining capacity *after* packing.
    remaining_capacity_after = bins_remain_cap - item

    #Priorities = fill ratio + some factor of negative remain_cap (more fill, less remaining)

    priorities[feasible_bins] = fill_ratio[feasible_bins] - 0.1 * remaining_capacity_after[feasible_bins]/np.max(bins_remain_cap+1e-9) #Avoid scaling by 0 by adding small value

    return priorities
```
