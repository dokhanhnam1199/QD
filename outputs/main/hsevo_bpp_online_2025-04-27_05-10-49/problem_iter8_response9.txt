```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization and bin utilization with adaptive randomness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    avg_cap = np.mean(bins_remain_cap)
    max_cap = np.max(bins_remain_cap)

    # Waste Minimization
    waste = bins_remain_cap - item
    too_small = waste < 0
    priorities[too_small] = -np.inf
    waste[too_small] = np.inf
    priorities += np.exp(-waste)

    # Bin Utilization Balancing
    bin_fraction = bins_remain_cap / max_cap
    utilization_center = 0.5
    priorities += -((bin_fraction - utilization_center) ** 2)

    # Item Size Consideration
    priorities += item / avg_cap

    # Adaptive Random Perturbation
    noise_scale = 0.01 * np.clip(item / avg_cap, 0, 1)
    priorities += np.random.normal(0, noise_scale, size=bins_remain_cap.shape)

    return priorities
```
