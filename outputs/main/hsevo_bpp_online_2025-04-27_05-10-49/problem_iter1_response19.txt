```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Find bins that can accommodate the item
    valid_bins = bins_remain_cap >= item
    
    if np.any(valid_bins):
        # Calculate remaining space after placing the item in each valid bin
        remaining_space = bins_remain_cap[valid_bins] - item
        
        # Give higher priority to bins where the remaining space is small,
        # but not too small (avoiding extreme fragmentation). We use a Gaussian-like
        # function centered around a desirable remaining space (e.g., 0.2 times bin capacity).
        desirable_remaining_space = 0.2 * np.max(bins_remain_cap) #trying to target 20% of max capacity bin remain

        priority_values = np.exp(-((remaining_space - desirable_remaining_space) ** 2) / (2 * (desirable_remaining_space/2)** 2))
                                    #remaining_space - desirable_remaining_space squared. Devided by 2 times SD square(SD is half des remain cap), e to the power - result.

        
        priorities[valid_bins] = priority_values

        #Add a small constant priority boost to bins that can fit item
        priorities[valid_bins] += 0.1
    else:
        # If no bin can accommodate the item, penalize heavily so a new bin gets opened
        priorities = np.full_like(bins_remain_cap, -1000) # extreme negative, ensure new bin opened.
        
    return priorities
```
