{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This priority function incorporates several factors to improve bin packing:\n    1.  Remaining capacity: Bins with capacity closer to the item size are preferred (First Fit Decreasing-like).\n    2.  Number of items already in the bin:  Slight preference for bins with fewer items. Not directly tracked, so proxy with remaining capacity.\n    3. Penalize bins where the item won't fit.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Capacity considerations\n    capacity_diff = np.abs(bins_remain_cap - item)  # Difference between remaining capacity and item size\n    priorities = 1.0 / (1e-6 + capacity_diff) # Prefer bins with closer capacities\n\n    # 2. Small bias towards filling emptier bins. This is implicit from larger remaining capacity\n\n    # 3. Massive penalty for bins where the item won't fit.\n    infeasible_mask = item > bins_remain_cap\n    priorities[infeasible_mask] = -np.inf\n\n    # Some scaling and smoothing to make function better behaved (prevent numerical overflow)\n    priorities = np.nan_to_num(priorities, neginf=-np.inf)  #Handles bins with 0 remaining capacity cleanly when item >0.\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure no division by zero or negative values (invalid bin capacities)\n    valid_bins = bins_remain_cap > 0\n    \n    if not np.any(valid_bins):\n        return np.full(bins_remain_cap.shape, -np.inf) #All bins are full or invalid.\n    \n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # First, prioritize bins that can actually fit the item.  Inertia favors those that fit\n    fit_mask = (bins_remain_cap >= item) & valid_bins\n    \n    # If there are bins that fit the item:\n    if np.any(fit_mask):\n        # Emphasize bins that are filled more fully by this addition.  A stronger pull.\n        fill_ratios = item / bins_remain_cap[fit_mask]\n        \n        #Refined Gravitational constant\n        gravitational_constant = 1.0\n        \n        # Higher score if we nearly fill the bin. This ensures better utilization.\n        priorities[fit_mask] = gravitational_constant * (1 - np.abs(1 - fill_ratios))\n\n        # Slightly incentivize using the fullest bin if several will work. This acts like attraction to fuller states, more compact packing\n        priorities[fit_mask] += 0.1 * bins_remain_cap[fit_mask] / bins_remain_cap[fit_mask].max()\n    \n    #If NO bins can fit: force select an empty bin\n    else:\n        # No bins can fit! Place in an empty bin, if one exists. Otherwise, ignore. This prevents wasted space.\n        empty_mask = (bins_remain_cap == bins_remain_cap.max()) & valid_bins #Largest, ie., most likely to be new\n        if np.any(empty_mask):\n            priorities[empty_mask] = 0.5  # small pull to initialize a new empty bin\n        else:\n            return np.full(bins_remain_cap.shape, -np.inf) # All bins are full, should theoretically not reach this given online BPP framework\n    \n    # Finally, prevent placing items in invalid bins:\n    priorities[~valid_bins] = -np.inf\n    \n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic uses waste minimization, capacity threshold, bin utilization balancing, and random perturbation, while the worst only considers relative capacity and a small buffer penalty. (2nd best) vs (second worst) shows a similar pattern: the former utilizes capacity considerations and penalizes infeasible bins, while the latter focuses on relative capacity. Comparing (1st) vs (2nd), we see the incorporation of randomness and a parabolic preference curve for bin utilization in the best heuristic, which are absent in the second. (3rd) vs (4th) reveals that using a Gaussian-like function to prioritize minimal waste is more effective than simply considering the difference between remaining capacity and item size. Comparing (second worst) vs (worst), we see they are identical, representing a local optimum. Overall: The top heuristics combine multiple factors like waste minimization, capacity considerations, and bin utilization, along with randomness to avoid local optima. They also use more sophisticated functions (e.g., exponential decay, Gaussian) to prioritize bins. Simpler heuristics focusing solely on relative capacity or basic feasibility checks perform worse.\n- \nOkay, I'm ready to aim for that $999K tip! Let's redefine \"Current Self-Reflection\" to design better heuristics, focusing on actionable insights and avoiding common pitfalls, while addressing your prompt's guidance.\n\nHere's the redefined \"Current Self-Reflection\":\n\n*   **Keywords:** Complexity, Non-linearity, Diversification, Exploration, Adaptation, Granularity, Context.\n*   **Advice:** Embrace multi-faceted evaluation functions and adaptive strategies, and tailor the heuristic's response to contextual cues.\n*   **Avoid:** Static parameters, premature convergence, and neglecting problem-specific knowledge.\n*   **Explanation:** Effective heuristics balance problem simplification with capturing essential complexities. Prioritize adaptation to changing conditions, context, and exploration of the search space through diversified approaches.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}