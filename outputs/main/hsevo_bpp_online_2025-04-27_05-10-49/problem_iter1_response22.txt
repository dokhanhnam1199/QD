```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Ensure no division by zero or negative values (invalid bin capacities)
    valid_bins = bins_remain_cap > 0
    
    if not np.any(valid_bins):
        return np.full(bins_remain_cap.shape, -np.inf) #All bins are full or invalid.
    
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First, prioritize bins that can actually fit the item.  Inertia favors those that fit
    fit_mask = (bins_remain_cap >= item) & valid_bins
    
    # If there are bins that fit the item:
    if np.any(fit_mask):
        # Emphasize bins that are filled more fully by this addition.  A stronger pull.
        fill_ratios = item / bins_remain_cap[fit_mask]
        
        #Refined Gravitational constant
        gravitational_constant = 1.0
        
        # Higher score if we nearly fill the bin. This ensures better utilization.
        priorities[fit_mask] = gravitational_constant * (1 - np.abs(1 - fill_ratios))

        # Slightly incentivize using the fullest bin if several will work. This acts like attraction to fuller states, more compact packing
        priorities[fit_mask] += 0.1 * bins_remain_cap[fit_mask] / bins_remain_cap[fit_mask].max()
    
    #If NO bins can fit: force select an empty bin
    else:
        # No bins can fit! Place in an empty bin, if one exists. Otherwise, ignore. This prevents wasted space.
        empty_mask = (bins_remain_cap == bins_remain_cap.max()) & valid_bins #Largest, ie., most likely to be new
        if np.any(empty_mask):
            priorities[empty_mask] = 0.5  # small pull to initialize a new empty bin
        else:
            return np.full(bins_remain_cap.shape, -np.inf) # All bins are full, should theoretically not reach this given online BPP framework
    
    # Finally, prevent placing items in invalid bins:
    priorities[~valid_bins] = -np.inf
    
    return priorities
```
