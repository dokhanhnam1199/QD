```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization and adaptive item size awareness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    wasted_space = bins_remain_cap - item
    fit_mask = wasted_space >= 0

    if np.any(fit_mask):
        priorities[fit_mask] = np.exp(-wasted_space[fit_mask]) # Waste minimization

        #Adaptive item size awareness
        item_fraction = item / np.max(bins_remain_cap)
        if item_fraction > 0.5: #If item is relatively large, prioritize filling
            priorities[fit_mask] += item_fraction*bins_remain_cap[fit_mask]/np.max(bins_remain_cap)

        # Small random perturbation for exploration
        priorities[fit_mask] += np.random.normal(0, 0.01, size=np.sum(fit_mask))

    priorities[~fit_mask] = -1e9 # Penalize infeasible bins severely
    return priorities
```
