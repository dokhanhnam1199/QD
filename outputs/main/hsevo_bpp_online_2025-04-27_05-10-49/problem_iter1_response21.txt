```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version emphasizes a balance between filling bins completely
    and avoiding fragmentation.  We introduce a "resonance" factor.
    The closer the item size is to a perfect fraction of the remaining
    capacity, the higher the resonance, and thus the priority.  We also
    heavily penalize exceeding bin capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, remaining_cap in enumerate(bins_remain_cap):
        if item > remaining_cap:
            priorities[i] = -np.inf  # Extremely low priority for bins that can't fit the item
        else:
            # Calculate how much space would be left after packing
            space_left = remaining_cap - item

            # Resonance factor: Higher when item size is a significant fraction
            # of the bin size without overfilling. We use a Gaussian-like function
            # centered around zero leftover space, scaled by original bin capacity.
            # Experiment with different standard deviations. The aim is to favor
            # leaving small and preferably similar leftover space.

            resonance = np.exp(-((space_left) ** 2) / (2 * (remaining_cap * 0.2) ** 2)) # Smaller std favors closer fits.

            # Another component based on fill ratio to prevent favoring tiny items
            # in large bins (corrects for bias in the 'resonance' term)
            fill_ratio_priority = (item / remaining_cap)**0.5 #The higher the better. sqrt to mitigate impact

            priorities[i] = resonance * (fill_ratio_priority+1e-6) #Add very small number to avoid zero values

    return priorities
```
