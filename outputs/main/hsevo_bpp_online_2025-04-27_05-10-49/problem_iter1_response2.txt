```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Uses a combination of fill ratio and waste minimization to determine priority.
    Also adds a slight preference for bins that are already partially full to avoid spreading items too thinly.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate fill ratio (how much of the remaining capacity will be filled)
    fill_ratios = item / bins_remain_cap
    fill_ratios = np.nan_to_num(fill_ratios, neginf=0, posinf=0, nan=0) # Handle division by zero (empty bins)

    # Calculate waste (remaining capacity after adding the item)
    waste = bins_remain_cap - item
    waste = np.clip(waste, a_min=0, a_max=None)  # Ensure waste is not negative

    # Calculate a waste ratio (waste relative to the original bin capacity). Assume each bin has capacity 1 for normalization
    waste_ratios = waste / 1.0

    # Calculate a priority score based on fill ratio and waste
    priorities = fill_ratios - waste_ratios

    # Add a bonus for partially full bins (avoid overly spreading items)
    # This term is small to avoid overriding the main logic
    priorities += (1 - bins_remain_cap) * 0.1

    priorities[bins_remain_cap < item] = -np.inf # ensure only consider bins which fit
    return priorities
```
