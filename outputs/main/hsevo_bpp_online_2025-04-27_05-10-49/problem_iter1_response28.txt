```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function considers several factors:
    1. Space Utilization: Bins that would be filled more completely are preferred.
    2. Avoidance of Waste: Bins that wouldn't leave too much unused space are preferred.
    3. Feasibility: Only bins with sufficient capacity are considered.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Space utilization: Higher score for better fill
            utilization = item / cap

            # Avoiding waste: Penalize bins where remaining space is very large compared to item.
            remaining_space = cap - item
            waste_penalty = np.exp(-remaining_space / item)  # Exponential decay

            priorities[i] = utilization * waste_penalty

    return priorities
```
