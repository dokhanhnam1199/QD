```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization, waste minimization, near-perfect fit, small bin preference, and randomness."""
    epsilon = 1e-9
    available_space = bins_remain_cap + epsilon

    utilization = item / available_space
    waste = available_space - item
    normalized_waste = waste / available_space
    near_perfect_fit = np.exp(-np.abs(waste))
    small_bins_priority = 1.0 / (available_space + epsilon)
    temperature = 0.1
    random_fluctuation = np.random.normal(0, temperature, size=bins_remain_cap.shape)

    # Prioritize feasible bins and scale the waste
    feasible_bins = bins_remain_cap >= item
    priority = np.zeros_like(bins_remain_cap, dtype=float)

    priority[feasible_bins] = (
        1.0 * utilization[feasible_bins]
        -0.5 * normalized_waste[feasible_bins]
        + 1.0 * near_perfect_fit[feasible_bins]
        + 0.5 * small_bins_priority[feasible_bins]
        + 0.1 * random_fluctuation[feasible_bins]
    )

    return priority
```
