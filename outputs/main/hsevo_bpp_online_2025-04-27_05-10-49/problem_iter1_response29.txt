```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Aims for balanced utilization while avoiding near-overflow situations.
    Prefers bins where the item fits snugly, but penalizes near-full bins
    after placement.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, capacity in enumerate(bins_remain_cap):
        if capacity >= item:
            # Base priority: Inverse of remaining space after placing item.
            # Snug fit is preferred
            remaining_space = capacity - item
            priorities[i] = 1.0 / (remaining_space + 1e-6) # Avoid division by zero

            #Heuristic modification 1:
            #Prefer almost full bins less if any other bins have sufficient room
            #Avoid putting small item in almost full bin unless necessarry
            if remaining_space <= 0.1 and np.any(bins_remain_cap > item+0.1):
                priorities[i] *= 0.5

            #Heuristic modification 2: Give preference to putting larger items in bins closer to 0.5 full.
            #Maximize space efficiency.
            if item > 0.25: # Only apply this modification if item is significant size.
                target_capacity = 0.5 # Ideal remaining capacity for bins
                deviation_from_target = np.abs(capacity - target_capacity)
                priorities[i] *= np.exp(-deviation_from_target*5) #Exponential scaling.


        else:
            priorities[i] = -np.inf # Item doesn't fit, so has no priority

    return priorities
```
