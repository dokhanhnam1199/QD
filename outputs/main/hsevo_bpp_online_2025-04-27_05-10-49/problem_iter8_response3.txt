```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, utilization, and item size."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    original_capacity = np.max(bins_remain_cap)

    # Waste Minimization
    waste = bins_remain_cap - item
    infeasible_mask = waste < 0
    priorities[infeasible_mask] = -np.inf  # Mark infeasible bins

    # Utilization (focusing on near-fit)
    feasible_bins = bins_remain_cap >= item
    fill_ratios = np.where(feasible_bins, item / bins_remain_cap, 0)
    near_fit_score = np.where(feasible_bins, np.exp(-np.abs(1 - fill_ratios)), 0)

    # Item size awareness.
    item_size_score = item / original_capacity
    priorities[feasible_bins] = near_fit_score[feasible_bins] + item_size_score

    return priorities
```
