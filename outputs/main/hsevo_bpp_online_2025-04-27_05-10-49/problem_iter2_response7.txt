```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization and relative capacity for bin selection."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap > 0
    
    if not np.any(valid_bins):
        return np.full(bins_remain_cap.shape, -np.inf)
    
    fit_mask = (bins_remain_cap >= item) & valid_bins
    
    if np.any(fit_mask):
        fill_ratios = item / bins_remain_cap[fit_mask]
        gravitational_constant = 1.0
        priorities[fit_mask] = gravitational_constant * (1 - np.abs(1 - fill_ratios))

        relative_capacity = (bins_remain_cap[fit_mask] - item) / np.max(bins_remain_cap[fit_mask])
        priorities[fit_mask] += 0.2 * relative_capacity
    
    else:
        empty_mask = (bins_remain_cap == bins_remain_cap.max()) & valid_bins
        if np.any(empty_mask):
            priorities[empty_mask] = 0.3
        else:
            return np.full(bins_remain_cap.shape, -np.inf)
            
    priorities[~valid_bins] = -np.inf
    
    return priorities
```
