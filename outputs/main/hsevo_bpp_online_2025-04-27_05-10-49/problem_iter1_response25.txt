```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # First, identify bins where the item *can* fit. If it cannot fit, assigning these bins a very low priority.
    can_fit = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf  # Initialize to negative infinity. These bins won't be selected

    # Only calculate priorities for bins where the item *can* fit.
    eligible_bins_indices = np.where(can_fit)[0] #indices where can_fit is True

    if len(eligible_bins_indices) > 0:

        # Strategy: Prioritize bins that are *just* large enough to fit the item (minimize wasted space), but also favor bins that aren't *too* full afterwards
        remaining_space_after_fit = bins_remain_cap[eligible_bins_indices] - item

        # Heuristic 1: Prioritize bins where the remaining space is small (First-Fit Decreasing principle-esque)
        space_priority = -remaining_space_after_fit  # Smaller remaining space = higher priority

        # Heuristic 2: Balance it so as not to overfill bins
        # Prioritize bins proportionally to the inverse square root of the post-fit bin capacity
        # This smooths out selection and keeps the remaining capacity reasonable. If the remaining capacity is really high, penalize it lightly, if low, the penalty increases quickly

        capacity_priority = 1 / np.sqrt(remaining_space_after_fit + 0.000001) #add epsilon so not to divide by zero.

        # Heuristic 3: Use absolute remaining capacity to prevent binning when it can be avoided
        absolute_capacity_priority = bins_remain_cap[eligible_bins_indices]

        # Combination of priorities (Empirically determined weights)
        combined_priority =  0.5 * space_priority + 0.3 * capacity_priority + 0.2* absolute_capacity_priority

        priorities[eligible_bins_indices] = combined_priority


    return priorities
```
