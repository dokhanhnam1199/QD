```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Heuristic 1: Prefer bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1

    # Heuristic 2: Prefer bins where the item fills a larger percentage of the remaining capacity (avoid fragmentation).
    fill_ratios = np.zeros_like(bins_remain_cap, dtype=float)
    fill_ratios[can_fit] = item / bins_remain_cap[can_fit]
    priorities[can_fit] += fill_ratios[can_fit] #scale this by a weight if needed.

    # Heuristic 3: Penalize bins with very little remaining capacity *after* placing the item. This discourages creating near-empty bins later. But consider only when item can fit
    remaining_after = bins_remain_cap[can_fit] - item
    almost_full = remaining_after < 0.1  #Define 'almost full' with a threshold.
    priorities[can_fit][almost_full] -= 0.5  # Subtract a penalty value

    return priorities
```
