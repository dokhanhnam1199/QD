```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization, near-fit, and adaptive capacity considerations."""
    epsilon = 1e-9
    available_space = bins_remain_cap + epsilon

    utilization = item / available_space
    waste = available_space - item
    near_perfect_fit = np.exp(-np.abs(waste) / item) # Scale by item size
    relative_capacity = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)


    feasible_bins = bins_remain_cap >= item
    priority = np.zeros_like(bins_remain_cap, dtype=float)

    priority[feasible_bins] = (
        1.0 * utilization[feasible_bins]
        + 1.0 * near_perfect_fit[feasible_bins]
        + 0.5 * relative_capacity[feasible_bins] # Adaptive capacity
    )
    return priority
```
