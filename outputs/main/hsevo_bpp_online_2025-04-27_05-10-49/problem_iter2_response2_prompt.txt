{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This function refines the priority calculation by considering both the\n    remaining capacity and the potential waste if the item is placed in that bin.\n    Bins that have a remaining capacity slightly larger than the item size\n    are given higher priority to minimize fragmentation.  A term is added to strongly penalize bins where item doesn't fit.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate wasted space if item is placed in the bin\n    wasted_space = bins_remain_cap - item\n\n    # Give higher priority to bins where item fits and waste is minimized\n    # Use a Gaussian-like function to prioritize bins with minimal waste\n    # with a peak at zero waste, and clip the negative values.\n    fit_mask = wasted_space >= 0\n    if np.any(fit_mask):  # only apply if the item fits any of the bins\n\n        # This scaling factor can be tuned; larger values make it sharper\n        # and less tolerable of larger bins.\n        scaling_factor = 2.0\n        priorities[fit_mask] = np.exp(-scaling_factor * wasted_space[fit_mask]**2 / bins_remain_cap[fit_mask].mean())\n    \n    #Severely penalize bins where the item doesn't fit by setting to a very low number.\n    priorities[~fit_mask] = -1e9 # effectively sets to a very low priority so it is negligibly considered.\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Find bins that can accommodate the item\n    valid_bins = bins_remain_cap >= item\n    \n    if np.any(valid_bins):\n        # Calculate remaining space after placing the item in each valid bin\n        remaining_space = bins_remain_cap[valid_bins] - item\n        \n        # Give higher priority to bins where the remaining space is small,\n        # but not too small (avoiding extreme fragmentation). We use a Gaussian-like\n        # function centered around a desirable remaining space (e.g., 0.2 times bin capacity).\n        desirable_remaining_space = 0.2 * np.max(bins_remain_cap) #trying to target 20% of max capacity bin remain\n\n        priority_values = np.exp(-((remaining_space - desirable_remaining_space) ** 2) / (2 * (desirable_remaining_space/2)** 2))\n                                    #remaining_space - desirable_remaining_space squared. Devided by 2 times SD square(SD is half des remain cap), e to the power - result.\n\n        \n        priorities[valid_bins] = priority_values\n\n        #Add a small constant priority boost to bins that can fit item\n        priorities[valid_bins] += 0.1\n    else:\n        # If no bin can accommodate the item, penalize heavily so a new bin gets opened\n        priorities = np.full_like(bins_remain_cap, -1000) # extreme negative, ensure new bin opened.\n        \n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic uses waste minimization, capacity threshold, bin utilization balancing, and random perturbation, while the worst only considers relative capacity and a small buffer penalty. (2nd best) vs (second worst) shows a similar pattern: the former utilizes capacity considerations and penalizes infeasible bins, while the latter focuses on relative capacity. Comparing (1st) vs (2nd), we see the incorporation of randomness and a parabolic preference curve for bin utilization in the best heuristic, which are absent in the second. (3rd) vs (4th) reveals that using a Gaussian-like function to prioritize minimal waste is more effective than simply considering the difference between remaining capacity and item size. Comparing (second worst) vs (worst), we see they are identical, representing a local optimum. Overall: The top heuristics combine multiple factors like waste minimization, capacity considerations, and bin utilization, along with randomness to avoid local optima. They also use more sophisticated functions (e.g., exponential decay, Gaussian) to prioritize bins. Simpler heuristics focusing solely on relative capacity or basic feasibility checks perform worse.\n- \nOkay, I'm ready to aim for that $999K tip! Let's redefine \"Current Self-Reflection\" to design better heuristics, focusing on actionable insights and avoiding common pitfalls, while addressing your prompt's guidance.\n\nHere's the redefined \"Current Self-Reflection\":\n\n*   **Keywords:** Complexity, Non-linearity, Diversification, Exploration, Adaptation, Granularity, Context.\n*   **Advice:** Embrace multi-faceted evaluation functions and adaptive strategies, and tailor the heuristic's response to contextual cues.\n*   **Avoid:** Static parameters, premature convergence, and neglecting problem-specific knowledge.\n*   **Explanation:** Effective heuristics balance problem simplification with capturing essential complexities. Prioritize adaptation to changing conditions, context, and exploration of the search space through diversified approaches.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}