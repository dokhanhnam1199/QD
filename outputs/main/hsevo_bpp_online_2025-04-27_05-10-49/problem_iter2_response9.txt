```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity, waste, utilization, and gravity for bin priority."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    feasible = ~infeasible
    if np.any(feasible):
        residual_space = bins_remain_cap[feasible] - item
        capacity_priority = -np.abs(bins_remain_cap[feasible] - item)
        waste_priority = -residual_space
        utilization = 1 - bins_remain_cap[feasible] / np.max(bins_remain_cap)
        
        capacity_priority = capacity_priority / np.max(np.abs(capacity_priority))
        waste_priority = waste_priority / np.max(np.abs(waste_priority))

        priorities[feasible] = 0.4 * capacity_priority + 0.3 * waste_priority + 0.1 * utilization  + 0.2* item * np.log1p(bins_remain_cap[feasible])  / np.max(bins_remain_cap)

    return priorities
```
