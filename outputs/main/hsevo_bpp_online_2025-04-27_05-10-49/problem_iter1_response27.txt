```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First, identify bins that can actually hold the item.
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        # No bin can hold the item. Prioritize bins with largest remaining capacity
        # (this is a last resort; should rarely happen).
        priorities = bins_remain_cap
        return priorities

    # For bins that *can* hold the item, apply a more sophisticated heuristic.

    # 1. Waste minimization:
    waste = bins_remain_cap - item
    waste[~valid_bins] = np.inf  # Invalid bins have infinite waste.

    # 2. Fractional occupancy
    occupancy = item / bins_remain_cap
    occupancy[~valid_bins] = 0 #assign 0 occupancy for bins unable to take the item
    #3. Calculate priority: bins that have just enough to fit, are preferred

    priorities = np.where(valid_bins, np.exp(-2 * np.abs(waste)/(item)), -np.inf)


    # Add a small random component for tie-breaking (introduces exploration).
    priorities += 0.001 * np.random.rand(len(bins_remain_cap))

    return priorities
```
