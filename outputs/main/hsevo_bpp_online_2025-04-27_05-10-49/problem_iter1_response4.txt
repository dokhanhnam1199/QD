```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Prioritize bins where the item *almost* fills the bin.
    # Avoids fragmentation by trying to nearly fill bins.
    # But also penalizes bins that are already too full to take the item.

    eligible = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    priorities[~eligible] = -np.inf  # Disqualify bins too small.

    # Calculate the 'fill ratio' (how much of the remaining capacity the item uses).
    fill_ratio = item / bins_remain_cap[eligible]
    # Give higher priority to bins where the fill ratio is close to 1
    # but not exactly 1 (to avoid completely filling a bin unnecessarily if another
    # slightly larger bin is available).  A Gaussian centered near 1 works well.
    priorities[eligible] = np.exp(-((fill_ratio - 0.95) ** 2) / 0.05) # Experiment with std.dev and centering

    # Apply small positive to remaining capacity to break ties randomly amongst almost-full
    # Helps promote even usage of bins with similar remaining capacities when lots of small items
    priorities[eligible] += (bins_remain_cap[eligible] / bins_remain_cap.max())*0.001

    return priorities
```
