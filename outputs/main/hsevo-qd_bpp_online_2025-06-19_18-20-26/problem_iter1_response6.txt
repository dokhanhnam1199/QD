```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function uses a combination of factors to determine the priority:
    1.  Remaining capacity: Bins with capacity closer to the item size are preferred.
    2.  Waste penalty: A higher penalty is applied to bins that would have significant remaining capacity after packing the item.
    3. Avoidance of full bins: A bin that will become full after packing is penalized.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate the remaining capacity after packing the item.
            remaining_capacity = cap - item

            # Priority based on how close the remaining capacity is to zero.
            # Using exponential to strongly prefer bins where the item nearly fills it.
            capacity_score = np.exp(-5 * remaining_capacity / cap) # Sharp curve, close fit preferred

            # Waste penalty.  Bins with high remaining capacity penalized heavily.
            waste_penalty = np.exp(5 * remaining_capacity / cap) # Inverse of the capacity score; prefer near-full.

            # Small avoidance for full bins. Apply a slight penalty to bins that are exactly filled.
            full_penalty = 0 if remaining_capacity > 0 else -0.1


            priorities[i] = capacity_score/ waste_penalty + full_penalty
        else:
            priorities[i] = -np.inf  # Cannot pack item into this bin.

    return priorities
```
