```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An enhanced priority function for online bin packing that combines
    best-fit considerations with dynamic waste management, bin balancing,
    and a learning component.  It prioritizes bins based on a weighted
    combination of several factors, including space utilization,
    waste minimization, and bin balancing.  The weights are adjusted
    dynamically based on the state of the bins.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # 1. Best-Fit component (refined): prioritize bins that fit well but not too perfectly
    size_diff = bins_remain_cap - item
    # Avoid division by zero, penalize large size differences less severely
    priorities[valid_bins] += 1.0 / (0.1 + size_diff[valid_bins])

    # Penalize near-perfect fits that leave tiny waste
    waste = bins_remain_cap[valid_bins] - item
    near_perfect_fit_threshold = 0.1  # Adjust this threshold as needed
    near_perfect_fit_penalty = np.where(
        (waste > 0) & (waste < near_perfect_fit_threshold),
        -10 * np.exp(-waste / near_perfect_fit_threshold),  # Increased penalty
        0
    )
    priorities[valid_bins] += near_perfect_fit_penalty

    # 2. Waste Minimization (Adaptive): Adapt the penalty based on item size
    waste_ratio = waste / item  # Waste relative to item size
    waste_penalty_scale = 5.0 # Scale the penalty

    # Encourage small waste, but only if the item is not too small
    waste_penalty = np.where(
        (waste > 0),
        -waste_penalty_scale * waste_ratio * np.exp(-waste / np.mean(bins_remain_cap[valid_bins] + 1e-9)),  # Add small constant to avoid division by 0
        0
    )
    priorities[valid_bins] += waste_penalty

    # 3. Bin Balancing (State-Dependent): Adjust based on the distribution of bin fullness
    bin_utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    avg_utilization = np.mean(bin_utilization)
    std_utilization = np.std(bin_utilization) # Add standard deviation to measure imbalance

    # Adaptive balancing based on average utilization and imbalance
    if avg_utilization < 0.4:
        # Bins are mostly empty, encourage filling emptier bins
        balancing_factor = 5.0
        priorities[valid_bins] -= balancing_factor * (bin_utilization[valid_bins])
    elif avg_utilization > 0.7 and std_utilization < 0.2:
        # Bins are mostly full and relatively balanced, encourage spreading load
        balancing_factor = 10.0
        priorities[valid_bins] += balancing_factor * (bin_utilization[valid_bins])
    else:
        # Bins are moderately full or imbalanced, balance more aggressively
        balancing_factor = 7.5
        priorities[valid_bins] += balancing_factor * (np.abs(bin_utilization[valid_bins] - avg_utilization))  # Encourage balancing to mean

    # 4. Adaptive Fullness Bonus (Improved): Focus on almost full bins
    fullness_level = bins_remain_cap / np.max(bins_remain_cap)
    almost_full_bonus = np.exp(-5 * fullness_level)  # Exponential bonus for nearly full bins

    # Dynamically adjust the bonus based on average utilization
    bonus_strength = 2.0

    if avg_utilization < 0.5:
        # Encourage filling almost full bins more
        priorities[valid_bins] += bonus_strength * almost_full_bonus[valid_bins] * (1 - avg_utilization)
    else:
        # Discourage further filling, give a smaller bonus
        priorities[valid_bins] += (bonus_strength / 2.0) * almost_full_bonus[valid_bins] * (1 - avg_utilization)

    # 5. Item Size Consideration (NEW): Modify strategy based on item size
    if item > np.mean(bins_remain_cap):
         # Large item: prioritize bins with enough space to accommodate this item.
         priorities[valid_bins] += 2.0 / size_diff[valid_bins]

    elif item < np.mean(bins_remain_cap)/4:

        priorities[valid_bins] +=waste_penalty_scale * waste_ratio * np.exp(-waste / np.mean(bins_remain_cap[valid_bins] + 1e-9))
    return priorities
```
