```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, waste minimization, bin balancing, adaptive bonuses, and item-size awareness for online bin packing."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit component with size emphasis
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.2 / (size_diff[valid_bins] + 0.0001)**1.9

    # Waste Minimization (adaptive)
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    small_waste_penalty = np.exp(-9 * remaining_after_fit / item)
    large_waste_penalty = np.exp(-6 * item / remaining_after_fit)
    priorities[valid_bins] -= (small_waste_penalty + large_waste_penalty) * 0.6

    # Bin Balancing (dynamic)
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    if overall_utilization < 0.3:
        extreme_utilization_penalty = 5.5 * np.abs(utilization - 0.2)
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = 14 * np.abs(utilization - 0.8)
    else:
        extreme_utilization_penalty = 9.5 * np.abs(utilization - 0.5)

    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # Fullness Bonus (adaptive)
    fullness_bonus = np.exp(-4.5 * np.abs(bins_remain_cap / np.max(bins_remain_cap) - 0.1))

    if overall_utilization < 0.5:
        priorities[valid_bins] += 1.9 * fullness_bonus[valid_bins] * (1 - overall_utilization) * (item/ np.max(bins_remain_cap))
    elif overall_utilization < 0.8:
        priorities[valid_bins] += 0.95 * fullness_bonus[valid_bins] * (1 - overall_utilization) * (item/ np.max(bins_remain_cap))
    else:
        priorities[valid_bins] += 0.45 * fullness_bonus[valid_bins] * (1 - overall_utilization) * (item/ np.max(bins_remain_cap))

    # Item size aware waste penalty adjustment & Activation for large items
    if item > 0.55 * np.max(bins_remain_cap):
        empty_bin_bonus = np.exp(-1.5 * utilization)
        priorities[valid_bins] += 1.8 * empty_bin_bonus[valid_bins]
        if overall_utilization > 0.6:
            priorities[valid_bins] -= 1.8 * small_waste_penalty # penalize small waste more when bins are full


    # Over-utilization Penalty (adaptive)
    almost_full = (bins_remain_cap - item) < 0.09 * np.max(bins_remain_cap)
    priorities[almost_full & valid_bins] -= 18

    item_ratio = item / np.max(bins_remain_cap)
    if item_ratio > 0.58: # Item is relatively large
        nearly_full = (bins_remain_cap < 0.18 * np.max(bins_remain_cap)) & valid_bins # less than 18% capacity
        priorities[nearly_full] -= 9 * small_waste_penalty[bins_remain_cap[valid_bins] < 0.18 * np.max(bins_remain_cap)]
    
    return priorities
```
