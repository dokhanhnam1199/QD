```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines FFD, adaptive waste minimization, and dynamic bin balancing."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    size_diff_epsilon = 1e-6  # Avoid division by zero.
    
    # 1. First Fit Decreasing (FFD) Approximation
    size_diff = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (size_diff + size_diff_epsilon)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf
    
    # 2. Adaptive Waste Minimization (scale penalty by item size)
    remaining_after_fit = bins_remain_cap - item
    waste_penalty_factor = 10.0  # Base penalty.  Can make adaptive.
    scaled_waste_penalty = np.exp(-waste_penalty_factor * remaining_after_fit / item) # Scale by item size
    priorities[valid_bins] -= scaled_waste_penalty[valid_bins]
    
    # 3. Dynamic Bin Balancing (adjust target utilization)
    utilization = 1.0 - (bins_remain_cap / np.max(bins_remain_cap))
    target_utilization = 0.3  # Can potentially also make adaptive.
    utilization_penalty_factor = 10.0
    utilization_penalty = utilization_penalty_factor * np.abs(utilization - target_utilization)
    priorities[valid_bins] -= utilization_penalty[valid_bins]

    return priorities
```
