```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A dynamic priority function for online bin packing that adapts based on
    problem state (remaining capacities) and uses a multi-faceted approach.
    It emphasizes best-fit, dynamically adjusts waste penalties, balances
    bin utilization using a context-aware approach, and includes a
    capacity-aware bonus for bins nearing full capacity.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # 1. Best-Fit with Size-Aware Bias
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)**2 #Original Best Fit

    #Refined Best-Fit: Account for relative size of item and remaining space
    relative_size = item / np.max(bins_remain_cap)  # Item size relative to bin capacity
    best_fit_boost = np.exp(-5 * relative_size)  # Smaller items get larger boost in best-fit
    priorities[valid_bins] += best_fit_boost / (size_diff[valid_bins] + 0.0001)**2

    # 2. Dynamic Waste Management
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    # Penalize very small waste harshly, but less so for larger items.
    waste_penalty_scale = 1 + 5*relative_size
    small_waste_penalty = np.exp(-waste_penalty_scale * remaining_after_fit * item)
    priorities[valid_bins] -= small_waste_penalty

    # 3. Context-Aware Bin Balancing
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    # Use a non-linear penalty that gets stronger as the deviation from ideal increases.
    # The ideal utilization changes dynamically based on the overall utilization.
    ideal_utilization = 0.5
    if overall_utilization < 0.4:
        ideal_utilization = 0.6 # Aim for higher utilization if bins are mostly empty
    elif overall_utilization > 0.6:
        ideal_utilization = 0.4 # Aim for lower utilization if bins are mostly full

    utilization_penalty = 10 * (utilization - ideal_utilization)**2 #Quadratic Penalty
    priorities[valid_bins] -= utilization_penalty[valid_bins]

    # 4. Capacity-Aware Fullness Bonus
    # Bonus for bins nearing capacity, scaled by how close they are
    #and the item size
    fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap))

    fullness_bonus = np.exp(-5 * np.abs(fullness - 1)) # Near full = high bonus

    #Scale bonus by how much space the item will occupy
    bonus_scale = (1 - relative_size)  # Give largest bonus to smallest items

    priorities[valid_bins] += 2 * bonus_scale * fullness_bonus[valid_bins]

    return priorities
```
