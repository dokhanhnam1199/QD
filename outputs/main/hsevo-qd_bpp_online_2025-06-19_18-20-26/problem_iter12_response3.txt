```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A priority function for online bin packing that dynamically adjusts
    its strategy based on bin utilization and item sizes. It focuses on
    reducing fragmentation and balancing bin usage.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit with consideration for item size
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)

    # Waste Minimization: Penalize bins that would create small waste,
    # but less harshly for larger items
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_penalty_factor = min(1.0, item)  # Scale penalty by item size
    small_waste_penalty = waste_penalty_factor * np.exp(-10 * remaining_after_fit)
    priorities[valid_bins] -= small_waste_penalty

    # Bin Balancing: Encourage filling bins close to a target utilization level
    bin_capacity = np.max(bins_remain_cap)
    utilization = 1 - (bins_remain_cap / bin_capacity)
    overall_utilization = np.mean(utilization)

    # Dynamically adjust target utilization based on overall utilization
    if overall_utilization < 0.4:
        target_utilization = 0.6  # Encourage filling
    elif overall_utilization > 0.7:
        target_utilization = 0.9 #discourage
    else:
        target_utilization = 0.75

    utilization_diff = np.abs(utilization - target_utilization)
    utilization_penalty = 5 * utilization_diff
    priorities[valid_bins] -= utilization_penalty[valid_bins]
    
    #Adaptive Next Fit Adjustment : Give a bonus to the lowest index available bin if first fit fails
    if np.all(priorities <= -np.inf):
        first_available_bin = np.argmin(bins_remain_cap)
        priorities[first_available_bin] = 0.0001
   

    return priorities
```
