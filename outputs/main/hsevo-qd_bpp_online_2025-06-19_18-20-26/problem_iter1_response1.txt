```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Einstein's heuristic: a combination of factors... It's all relative, you see.

    # 1. Capacity Factor: Bins closer to the item size are better, but not *too* close to avoid fragmentation.
    capacity_diff = np.abs(bins_remain_cap - item)
    capacity_factor = np.exp(-capacity_diff / (item + 0.1))  # Gaussian-like preference, softened by item size.

    # 2. Avoid Near-Full Bins: We don't want nearly full bins to waste space due to small items coming later.
    #   Bins with small available space get a penalty, exponentially so.
    near_full_penalty = np.exp(-5 * bins_remain_cap)  # 5 is a hyperparameter to control the severity.

    # 3. Urgency for Larger Items: If the item is large, prioritize bins to ensure fit before it's too late.
    # Prioritize only the bins that the current item can actually fit into
    fit_indices = bins_remain_cap >= item
    
    urgency_factor = np.zeros_like(bins_remain_cap)
    urgency_factor[fit_indices] = item * (bins_remain_cap[fit_indices]) / np.sum(bins_remain_cap[fit_indices] + 1e-9) # larger item -> high priority for bins that can accomodate
    

    # Combine the factors (carefully weighted - the universe is all about balance!)
    priorities = 0.6 * capacity_factor - 0.2 * near_full_penalty + 0.4 * urgency_factor

    return priorities
```
