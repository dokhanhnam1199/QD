```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit, waste minimization, dynamic bin balancing, and adaptive bonus.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    # 1. Best Fit Decreasing Approximation (size proximity)
    size_diff = np.abs(bins_remain_cap - item)
    size_diff_epsilon = 0.0001
    priorities = 1.0 / (size_diff + size_diff_epsilon)
    priorities[~valid_bins] = -np.inf

    # 2. Waste Minimization
    remaining_after_fit = bins_remain_cap - item
    small_waste_penalty_factor = 10
    small_waste_penalty = np.exp(-small_waste_penalty_factor * remaining_after_fit)
    priorities[valid_bins] -= small_waste_penalty[valid_bins]

    # 3. Bin Utilization Balance
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    target_utilization = 0.5
    extreme_utilization_penalty_factor = 10
    extreme_utilization_penalty = extreme_utilization_penalty_factor * np.abs(utilization - target_utilization)
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # 4. Adaptive Fullness Bonus (Encourage almost full bins)
    almost_full_threshold = 0.9
    fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    almost_full_bonus = (fullness > almost_full_threshold) * (fullness - almost_full_threshold) * 10  # Apply bonus if bin is almost full
    priorities[valid_bins] += almost_full_bonus[valid_bins]

    return priorities
```
