```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, waste minimization, bin balancing, and adaptive weights."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit component
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)

    # Waste Minimization (Adaptive)
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    overall_utilization = np.mean(1 - (bins_remain_cap / np.max(bins_remain_cap)))
    waste_penalty_factor = 5 + 10 * overall_utilization #dynamic factor

    small_waste_penalty = np.exp(-waste_penalty_factor * remaining_after_fit * item) #item-size aware
    priorities[valid_bins] -= small_waste_penalty

    # Bin Balancing
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    target_utilization = 0.3 if overall_utilization < 0.5 else 0.7  #adaptive target
    extreme_utilization_penalty = 10 * np.abs(utilization - target_utilization)
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    return priorities
```
