```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, waste minimization, bin balancing, and fullness bonus."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Overall utilization
    total_capacity = np.sum(bins_remain_cap) + np.sum(bins_remain_cap[~valid_bins] + item) * np.sum(bins_remain_cap >= item)
    overall_utilization = 1 - np.sum(bins_remain_cap) / total_capacity if total_capacity > 0 else 0

    # Item size relative to average bin capacity
    avg_bin_capacity = np.mean(bins_remain_cap[bins_remain_cap > 0]) if np.sum(bins_remain_cap > 0) > 0 else 1
    item_size_ratio = item / avg_bin_capacity

    # Best-Fit
    size_diff = bins_remain_cap - item
    best_fit_priority = 1.0 / (size_diff[valid_bins] + 0.0001)**2
    priorities[valid_bins] += best_fit_priority * (1 + overall_utilization)

    # Adaptive Waste Minimization
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    small_waste_penalty = np.exp(-10 * remaining_after_fit * item)
    priorities[valid_bins] -= small_waste_penalty * (1 - overall_utilization)

    # Bin Balancing
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))

    if overall_utilization < 0.3:
        extreme_utilization_penalty = 5 * np.abs(utilization - 0.2)
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = 15 * np.abs(utilization - 0.8)
    else:
        extreme_utilization_penalty = 10 * np.abs(utilization - 0.5)

    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins] * (1 + item_size_ratio)

    # Adaptive Fullness Bonus
    fullness_bonus = np.exp(-5 * np.abs(bins_remain_cap / np.max(bins_remain_cap) - 0))

    if overall_utilization < 0.5:
        bonus_weight = 2 * (1 - overall_utilization)
    elif overall_utilization < 0.8 :
        bonus_weight = 1 * (1 - overall_utilization)
    else:
        bonus_weight = 0.5 * (1 - overall_utilization)

    item_size_bonus_multiplier = 1 + (1 - item_size_ratio)
    priorities[valid_bins] += bonus_weight * fullness_bonus[valid_bins] * item_size_bonus_multiplier
        
    # Adaptive Waste Penalty Adjustment (Item size aware)
    if item > 0.5: # large item
        if overall_utilization > 0.6:
            priorities[valid_bins] -= 2 * small_waste_penalty # penalize small waste more when bins are full

    # Penalty for Over-Utilized Bins:
    almost_full = (bins_remain_cap - item) < 0.1 * np.max(bins_remain_cap) # Remaining cap is less than 10% of max cap
    priorities[almost_full & valid_bins] -= 20 # Large penalty for almost full bins.

    if np.all(priorities == -np.inf):
        priorities = np.zeros_like(bins_remain_cap, dtype=float)
        valid_bins = bins_remain_cap > 0
        if np.any(valid_bins):
            size_diff = bins_remain_cap - item
            size_diff[size_diff < 0] = np.inf
            priorities[valid_bins] = 1.0 / (size_diff[valid_bins] + 0.0001)**0.5
        else:
            priorities = np.ones_like(bins_remain_cap)
            
    return priorities
```
