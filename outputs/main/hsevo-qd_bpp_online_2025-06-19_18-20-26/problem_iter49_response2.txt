import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                best_fit_strength_scale: float = 4.409475714071034,
                size_diff_epsilon: float = 0.0031461708090134554,
                waste_penalty_scale: float = 1.7344701923334838,
                waste_penalty_threshold: float = 0.0429564464314859,
                extreme_utilization_penalty_low_util: float = 6.069875490558618,
                extreme_utilization_target_low_util: float = 0.19274930180247601,
                extreme_utilization_penalty_high_util: float = 15.90847771964952,
                extreme_utilization_target_high_util: float = 0.8226485706141488,
                extreme_utilization_penalty_mid_util: float = 3.550493494740846,
                extreme_utilization_target_mid_util: float = 0.5774827866709891,
                fullness_bonus_scale: float = 3.3404384789979926,
                fullness_bonus_weight_low_util: float = 2.1559561751333716,
                fullness_bonus_weight_mid_util: float = 1.1582030365024951,
                fullness_bonus_weight_high_util: float = 0.9829355932842485) -> np.ndarray:
    """
    An enhanced priority function for online bin packing that combines
    best-fit considerations with dynamic waste management, bin balancing,
    and a learning component.  It prioritizes bins based on a weighted
    combination of several factors, including space utilization,
    waste minimization, and bin balancing.  The weights are adjusted
    dynamically based on the overall fill level of the bins. This version includes
    a more sophisticated waste penalty and dynamic adjustment of the best-fit component.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Adaptive Best-Fit:
    # Adjust the strength of best-fit based on the item size relative to average bin capacity.
    avg_bin_capacity = np.mean(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 1.0
    best_fit_strength = 1.0 + best_fit_strength_scale * (item / avg_bin_capacity)  # Stronger for larger items

    size_diff = bins_remain_cap - item
    priorities[valid_bins] += best_fit_strength / (size_diff[valid_bins] + size_diff_epsilon)**2


    # Enhanced Waste Minimization:  Discourage small waste and encourage almost full bins
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    # Sigmoid-shaped penalty to aggressively penalize very small waste

    waste_penalty = 1.0 / (1 + np.exp(waste_penalty_scale * (remaining_after_fit - waste_penalty_threshold)))  # Push for less than 5% waste

    priorities[valid_bins] -= waste_penalty


    # Bin Balancing using utilization and overall utilization:
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    # Dynamically adjust bin balancing based on fill level.
    if overall_utilization < 0.3:
        extreme_utilization_penalty = extreme_utilization_penalty_low_util * np.abs(utilization - extreme_utilization_target_low_util)  # Encourage filling
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = extreme_utilization_penalty_high_util * np.abs(utilization - extreme_utilization_target_high_util) #Discourage further filling
    else:
        extreme_utilization_penalty = extreme_utilization_penalty_mid_util * np.abs(utilization - extreme_utilization_target_mid_util) #Balance
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # Adaptive component:  Add a bonus to bins close to full
    # Weight the bonus dynamically based on overall utilization

    fullness_bonus = np.exp(-fullness_bonus_scale * np.abs(bins_remain_cap / np.max(bins_remain_cap) - 0))

    if overall_utilization < 0.5:
        priorities[valid_bins] += fullness_bonus_weight_low_util * fullness_bonus[valid_bins] * (1 - overall_utilization) #more bonus to almost full bins
    elif overall_utilization < 0.8 :
         priorities[valid_bins] +=  fullness_bonus_weight_mid_util * fullness_bonus[valid_bins] * (1 - overall_utilization) #more bonus to almost full bins
    else:
        priorities[valid_bins] += fullness_bonus_weight_high_util * fullness_bonus[valid_bins] *(1 - overall_utilization) #even lower bonus

    return priorities
