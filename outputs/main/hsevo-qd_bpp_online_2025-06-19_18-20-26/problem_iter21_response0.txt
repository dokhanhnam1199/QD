```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An enhanced priority function for online bin packing that combines
    best-fit considerations with dynamic waste management, bin balancing,
    and a learning component.  It prioritizes bins based on a weighted
    combination of several factors, including space utilization,
    waste minimization, and bin balancing.  The weights are adjusted
    dynamically based on the overall fill level of the bins, and includes
    a penalty for bins that are likely to cause future issues.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit component with a small bias towards more full bins.
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)**2

    # Waste Minimization:  Discourage very small waste, but also very large waste.
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    small_waste_penalty = np.exp(-10 * remaining_after_fit * item)
    large_waste_penalty = np.exp(-0.1 * remaining_after_fit)
    priorities[valid_bins] -= small_waste_penalty + 0.1 * large_waste_penalty  # Scale the large waste penalty

    # Bin Balancing using utilization and overall utilization:
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    # Dynamically adjust bin balancing based on fill level.
    if overall_utilization < 0.3:
        extreme_utilization_penalty = 5 * np.abs(utilization - 0.2)  # Encourage filling
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = 15 * np.abs(utilization - 0.8) #Discourage further filling
    else:
        extreme_utilization_penalty = 10 * np.abs(utilization - 0.5) #Balance
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]


    # Adaptive component:  Add a bonus to bins close to full
    # Weight the bonus dynamically based on overall utilization

    fullness_bonus = np.exp(-5 * np.abs(bins_remain_cap / np.max(bins_remain_cap) - 0))

    if overall_utilization < 0.5:
        priorities[valid_bins] += 2 * fullness_bonus[valid_bins] * (1 - overall_utilization) #more bonus to almost full bins
    elif overall_utilization < 0.8 :
         priorities[valid_bins] +=  fullness_bonus[valid_bins] * (1 - overall_utilization) #more bonus to almost full bins
    else:
        priorities[valid_bins] += 0.5 * fullness_bonus[valid_bins] *(1 - overall_utilization) #even lower bonus

    # Future-Proofing Penalty:  Penalize bins that, after adding the item,
    # would leave a gap that is smaller than the average item size seen so far.
    # This helps to avoid creating many bins with very small remaining capacity.
    avg_item_size = np.mean(1 - bins_remain_cap[bins_remain_cap < 1]) if np.any(bins_remain_cap < 1) else item  # Estimate the average item size
    remaining_after_fit_valid = bins_remain_cap[valid_bins] - item
    problematic_bins = remaining_after_fit_valid < 0.5 * avg_item_size
    priorities[valid_bins][problematic_bins] -= 5  # Significant penalty
    
    return priorities
```
