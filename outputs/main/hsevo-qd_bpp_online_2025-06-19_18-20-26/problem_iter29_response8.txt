```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit, waste minimization, bin balancing, and adaptive bonuses.
    Dynamically adjusts weights based on bin fill levels and item sizes.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit with emphasis on closer sizes
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.5 / (size_diff[valid_bins] + 0.0001)**1.8

    # Waste Minimization: adaptive penalty
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    small_waste_penalty = np.exp(-8 * remaining_after_fit / item)
    large_waste_penalty = np.exp(-5 * item / remaining_after_fit)
    priorities[valid_bins] -= (small_waste_penalty + large_waste_penalty) * 0.75

    # Bin Balancing: dynamic adjustment
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    target_utilization = 0.5
    if overall_utilization < 0.3:
        target_utilization = 0.2
    elif overall_utilization > 0.7:
        target_utilization = 0.8

    extreme_utilization_penalty = 9 * np.abs(utilization - target_utilization)
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # Adaptive bonus for nearly full bins
    fullness_bonus = np.exp(-4 * np.abs(bins_remain_cap / np.max(bins_remain_cap) - 0.1))

    if overall_utilization < 0.5:
        priorities[valid_bins] += 1.8 * fullness_bonus[valid_bins] * (1 - overall_utilization) * (item/ np.max(bins_remain_cap))
    elif overall_utilization < 0.8:
        priorities[valid_bins] += 0.9 * fullness_bonus[valid_bins] * (1 - overall_utilization) * (item/ np.max(bins_remain_cap))
    else:
        priorities[valid_bins] += 0.4 * fullness_bonus[valid_bins] * (1 - overall_utilization) * (item/ np.max(bins_remain_cap))

    # Bin Activation for large items
    if item > 0.6 * np.max(bins_remain_cap):
        empty_bin_bonus = np.exp(-2 * utilization)
        priorities[valid_bins] += 2 * empty_bin_bonus[valid_bins]
    # Item-Size-Aware Adjustment: Favor bins that tightly fit larger items
    if item > 0.6:
        tight_fit_bonus = np.exp(-20*(bins_remain_cap[valid_bins]-item)**2)
        priorities[valid_bins] += 0.7 * tight_fit_bonus # Encourage tight fits
    # Normalize priorities to avoid domination by any single factor
    max_priority = np.max(priorities[np.isfinite(priorities)])
    min_priority = np.min(priorities[np.isfinite(priorities)])

    if max_priority > min_priority:
        priorities[np.isfinite(priorities)] = (priorities[np.isfinite(priorities)] - min_priority) / (max_priority - min_priority)

    return priorities
```
