```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Utilizes a combination of residual capacity, wasted space minimization,
    and a 'near-fit' bonus to prioritize bins effectively.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # 1. Feasibility Check: Disqualify bins that can't fit the item.
    feasible_bins = bins_remain_cap >= item

    # 2. Residual Capacity Priority: Higher residual capacity = lower priority.
    #    Use inverse to convert to a priority score. Avoid inverting zero capacities to prevent division by zero.

    residual_priority = np.where(bins_remain_cap > 0, 1 / (bins_remain_cap + 0.00001), 0) # add a small epsilon to avoid dividing by zero.

    # 3. Wasted Space Minimization: Prioritize bins that minimize wasted space after adding the item.
    wasted_space = bins_remain_cap - item
    wasted_space_priority = np.where(feasible_bins, np.exp(-wasted_space), 0) # Exponential decay prioritizes bins with less wasted space

    # 4. Near-Fit Bonus: Give a bonus to bins where the item almost fills the bin.
    near_fit_threshold = 0.1  # Tune this value; defines "near" as a fraction of bin capacity
    near_fit_bonus = np.where(feasible_bins & (wasted_space <= near_fit_threshold * bins_remain_cap), 2, 0) #A small bonus is granted for almost filled bins

    # 5. Combine Priorities: Weighted sum of individual priorities.  Adjust weights as needed.
    priorities = (0.2 * residual_priority + 0.6 * wasted_space_priority + 0.2 * near_fit_bonus) * feasible_bins #Set infeasible bins to 0

    return priorities
```
