```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, waste minimization, bin balancing and adapts to item size."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit with inverse diff
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.5 / (size_diff[valid_bins] + 0.0001)**1.8

    # Waste Minimization
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    small_waste_penalty = np.exp(-8 * remaining_after_fit / item)
    large_waste_penalty = np.exp(-5 * item / remaining_after_fit)
    priorities[valid_bins] -= (small_waste_penalty + large_waste_penalty) * 0.75

    # Bin Balancing
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    if overall_utilization < 0.3:
        extreme_utilization_penalty = 6 * np.abs(utilization - 0.2)
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = 13 * np.abs(utilization - 0.8)
    else:
        extreme_utilization_penalty = 9 * np.abs(utilization - 0.5)
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # Item size ratio influence
    ratios = item / bins_remain_cap
    priorities[valid_bins] -= 0.1 * ratios[valid_bins]


    return priorities
```
