```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, waste minimization, and bin balancing."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    size_diff_epsilon = 1e-6
    small_waste_penalty_factor = 10.0
    extreme_utilization_penalty_factor = 5.0
    target_utilization = 0.5

    # Best-fit approximation
    size_diff = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (size_diff + size_diff_epsilon)

    # Infeasible bins get -inf priority
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Waste minimization penalty
    remaining_after_fit = bins_remain_cap - item
    small_waste_penalty = np.exp(-small_waste_penalty_factor * remaining_after_fit)
    priorities[valid_bins] -= small_waste_penalty[valid_bins]

    # Bin utilization balance penalty
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    extreme_utilization_penalty = extreme_utilization_penalty_factor * np.abs(utilization - target_utilization)
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # Adaptive waste thresholding
    overall_utilization = 1 - np.mean(bins_remain_cap / np.max(bins_remain_cap))
    if item > 0.5 and overall_utilization > 0.7:
        large_item_waste_penalty = np.where(remaining_after_fit < 0.1, 10.0, 0.0)
        priorities[valid_bins] -= large_item_waste_penalty[valid_bins]

    return priorities
```
