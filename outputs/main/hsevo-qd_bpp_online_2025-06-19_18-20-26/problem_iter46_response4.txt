import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                 size_diff_epsilon: float = 0.000865834843839584,
                 waste_penalty_base: float = 1.7344414804179715,
                 waste_penalty_multiplier: float = 13.38944774829674,
                 extreme_utilization_threshold_low: float = 0.23467530112481616,
                 extreme_utilization_threshold_high: float = 0.7390616064801688,
                 extreme_utilization_penalty_low_multiplier: float = 6.550222210867349,
                 extreme_utilization_penalty_high_multiplier: float = 10.935935216383239,
                 extreme_utilization_penalty_mid_multiplier: float = 14.555420858202368,
                 fullness_bonus_exponent: float = 2.4604123705974374,
                 bonus_strength_base: float = 4.4777849309920015,
                 bonus_strength_multiplier: float = 5.145319226567115) -> np.ndarray:
    """
    Combines best-fit, waste minimization, bin balancing, and adaptive weights based on problem state.
    Prioritizes bins dynamically for effective online bin packing.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Adaptive Best-Fit
    size_diff = bins_remain_cap - item
    capacity_ratio = bins_remain_cap / np.max(bins_remain_cap)
    granularity_factor = np.mean(capacity_ratio)
    priorities[valid_bins] += (1 / (size_diff[valid_bins] + size_diff_epsilon)**(granularity_factor + 1))

    # Dynamic Waste Minimization
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_ratio = remaining_after_fit / bins_remain_cap[valid_bins]
    item_size_factor = item / np.max(bins_remain_cap)
    waste_penalty_strength = waste_penalty_base + waste_penalty_multiplier * item_size_factor
    small_waste_penalty = np.exp(-waste_penalty_strength * remaining_after_fit * item)
    priorities[valid_bins] -= small_waste_penalty

    # Bin Balancing
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)
    if overall_utilization < extreme_utilization_threshold_low:
        extreme_utilization_penalty = extreme_utilization_penalty_low_multiplier * np.abs(utilization - 0.2)
    elif overall_utilization > extreme_utilization_threshold_high:
        extreme_utilization_penalty = extreme_utilization_penalty_high_multiplier * np.abs(utilization - 0.8)
    else:
        extreme_utilization_penalty = extreme_utilization_penalty_mid_multiplier * np.abs(utilization - 0.5)
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # Adaptive Fullness Bonus
    fullness_level = 1 - capacity_ratio
    fullness_bonus = np.exp(-fullness_bonus_exponent * np.abs(fullness_level - 1))
    bonus_strength = bonus_strength_base + bonus_strength_multiplier * item_size_factor
    priorities[valid_bins] += bonus_strength * fullness_bonus[valid_bins] * (1 - np.mean(utilization))

    return priorities
