```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic prioritizes bins that can accommodate the item
    with minimal wasted space, but also discourages overfilling.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Very small epsilon to avoid division by zero
    epsilon = 1e-9

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if remaining_capacity >= item:
            # Calculate wasted space
            wasted_space = remaining_capacity - item

            # Calculate fill ratio (item size / remaining capacity before adding)
            fill_ratio = item / (remaining_capacity + epsilon)  # Avoid division by zero

            # Assign priority based on minimizing wasted space and maximizing fill ratio.

            priorities[i] = (1 / (wasted_space + epsilon)) + (fill_ratio**2)


        else:
            # Cannot fit item, assign a very low priority.  Discourage overfilling.
            priorities[i] = -1e9 # Negative value so these bins are effectively avoided.

    return priorities
```
