```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function incorporates several heuristics, with refinements over v1:

    1. **Best Fit Decreasing (BFD) Emphasis:**  Prioritizes bins that offer the *tightest* fit
       for the current item, more aggressively than v1. Aims for optimal space utilization
       in each bin, reducing fragmentation.

    2.  **Waste Minimization (Adaptive):**  Penalizes small waste, but the penalty *scales*
        with item size.  Large items creating small waste are penalized more heavily, as
        that waste is harder to fill later.

    3.  **Bin Balancing (Dynamic):**  Adjusts the utilization penalty based on the *overall*
        fill level of all bins. If bins are generally empty, encourages filling them more;
        if bins are generally full, focuses on avoiding small waste.

    4. **Penalty for Over-Utilized Bins:** Add a bigger penalty if bins are almost full before placing the current item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Best Fit Decreasing Emphasis
    size_diff = bins_remain_cap - item
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Prioritize tight fits *much* more strongly than v1.
    priorities[valid_bins] = 1.0 / (size_diff[valid_bins] + 0.0001)**2  # Squaring makes the difference more pronounced

    # 2. Waste Minimization (Adaptive)
    remaining_after_fit = bins_remain_cap - item
    # Penalty scales with item size. Larger item = greater waste penalty
    small_waste_penalty = np.exp(-10 * remaining_after_fit * item)
    priorities[valid_bins] -= small_waste_penalty[valid_bins]

    # 3. Bin Balancing (Dynamic)
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))  # Fraction full
    overall_utilization = np.mean(utilization)  # Average fill level of all bins.

    # Adjust penalty based on overall utilization.
    if overall_utilization < 0.3: # If bins are generally empty.
        extreme_utilization_penalty = 5 * np.abs(utilization - 0.2) # Aim for 20% utilization.
    elif overall_utilization > 0.7: # If bins are generally full.
        extreme_utilization_penalty = 15 * np.abs(utilization - 0.8) # Aim for 80% utilization and avoid small waste
    else:
        extreme_utilization_penalty = 10 * np.abs(utilization - 0.5)  # Default penalty, same as v1.

    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # 4. Penalty for Over-Utilized Bins:
    almost_full = (bins_remain_cap - item) < 0.1 * np.max(bins_remain_cap) # Remaining cap is less than 10% of max cap
    priorities[almost_full & valid_bins] -= 20 # Large penalty for almost full bins.

    return priorities
```
