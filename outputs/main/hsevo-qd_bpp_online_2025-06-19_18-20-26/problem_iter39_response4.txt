```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A dynamic priority function for online bin packing that combines best-fit,
    waste management, bin balancing, a learning component, and considers item sizes.
    It prioritizes bins based on a weighted combination of factors, including
    space utilization, waste minimization, bin balancing, item size influence,
    and dynamic weight adjustments based on fill level and item size distribution.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # 1. Best-Fit component with a dynamic bias towards fuller bins
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)**2

    # 2. Waste Minimization: Discourage very small waste, consider item size
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    small_waste_penalty = np.exp(-10 * remaining_after_fit * item)
    priorities[valid_bins] -= small_waste_penalty

    # 3. Bin Balancing using utilization and overall utilization:
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    # 4. Dynamically adjust bin balancing based on fill level.
    if overall_utilization < 0.3:
        extreme_utilization_penalty = 5 * np.abs(utilization - 0.2)  # Encourage filling
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = 15 * np.abs(utilization - 0.8) # Discourage further filling
    else:
        extreme_utilization_penalty = 10 * np.abs(utilization - 0.5) # Balance
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # 5. Adaptive component: Add a bonus to bins close to full
    fullness_bonus = np.exp(-5 * np.abs(bins_remain_cap / np.max(bins_remain_cap) - 0))

    if overall_utilization < 0.5:
        priorities[valid_bins] += 2 * fullness_bonus[valid_bins] * (1 - overall_utilization)  # more bonus to almost full bins
    elif overall_utilization < 0.8:
        priorities[valid_bins] += fullness_bonus[valid_bins] * (1 - overall_utilization)  # more bonus to almost full bins
    else:
        priorities[valid_bins] += 0.5 * fullness_bonus[valid_bins] * (1 - overall_utilization)  # even lower bonus
    
    # 6. Item Size Consideration: Penalize bins with remaining capacity close to item size
    # if the item is relatively large.

    normalized_item_size = item / np.max(bins_remain_cap)
    if normalized_item_size > 0.5:
        close_fit_penalty = np.exp(-20 * np.abs(bins_remain_cap[valid_bins] - item) / np.max(bins_remain_cap))
        priorities[valid_bins] -= 2 * close_fit_penalty * normalized_item_size
    
    # 7. Dynamic Adjustment of Best-Fit Weight Based on Item Size
    best_fit_weight = 1.0
    if normalized_item_size > 0.7:
        best_fit_weight = 0.5 #reduce weight
    elif normalized_item_size < 0.3:
        best_fit_weight = 1.5
    
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += best_fit_weight / (size_diff[valid_bins] + 0.0001)**2

    return priorities
```
