```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can fit the item snugly,
    but also considers bins that have a lot of free space to avoid fragmentation.
    It uses a combination of metrics to determine priority:
    1.  Fit Score: Higher if the item fits with less wasted space (closer to 0 remaining capacity after placing item).
    2.  Capacity Utilization Score: How much of the bin's capacity would be used after adding the item.
    3.  Preference for Almost Full: Gives some small boost for almost full bins before packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            # Fit score: higher if the item fits better (less wasted space).
            fit_score = np.exp(-abs(remaining_capacity - item))

            # Capacity utilization score
            capacity_utilization = item / (remaining_capacity + item) if remaining_capacity + item > 0 else 0 #avoid nan if bins_remain_cap is negative.

            #Preference for almost full: avoid putting item in empty bins, unless it is really necessary
            almost_full_pref = 0.0
            if remaining_capacity < 2*item:
                almost_full_pref = 0.1

            priorities[i] = fit_score + 0.5*capacity_utilization + almost_full_pref #Weighting different factors
        else:
            priorities[i] = -np.inf  # Cannot fit, so very low priority.

    return priorities
```
