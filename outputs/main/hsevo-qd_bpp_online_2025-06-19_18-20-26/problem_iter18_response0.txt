```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A priority function for online bin packing that combines best-fit,
    waste minimization, bin balancing, and an adaptive component.  It dynamically
    adjusts the weights of different factors based on the fill level of the bins and
    the size of the current item.  This version introduces a bin activation strategy.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit component with a bias towards more full bins (tuned).
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.5 / (size_diff[valid_bins] + 0.0001)**1.8

    # Waste Minimization: Discourage very small and very large waste.
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    small_waste_penalty = np.exp(-8 * remaining_after_fit / item)  # Normalize by item size
    large_waste_penalty = np.exp(-5 * item / remaining_after_fit) #Added to discourage very large waste
    priorities[valid_bins] -= (small_waste_penalty + large_waste_penalty) * 0.75


    # Bin Balancing using utilization and overall utilization:
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    # Dynamically adjust bin balancing based on fill level.
    if overall_utilization < 0.3:
        extreme_utilization_penalty = 6 * np.abs(utilization - 0.2)  # Encourage filling
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = 13 * np.abs(utilization - 0.8)  # Discourage further filling
    else:
        extreme_utilization_penalty = 9 * np.abs(utilization - 0.5)  # Balance
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # Adaptive component: Add a bonus to bins close to full
    # Weight the bonus dynamically based on overall utilization and item size.
    fullness_bonus = np.exp(-4 * np.abs(bins_remain_cap / np.max(bins_remain_cap) - 0.1))

    if overall_utilization < 0.5:
        priorities[valid_bins] += 1.8 * fullness_bonus[valid_bins] * (1 - overall_utilization) * (item/ np.max(bins_remain_cap)) # Adjusted bonus
    elif overall_utilization < 0.8:
        priorities[valid_bins] += 0.9 * fullness_bonus[valid_bins] * (1 - overall_utilization) * (item/ np.max(bins_remain_cap)) # Adjusted bonus
    else:
        priorities[valid_bins] += 0.4 * fullness_bonus[valid_bins] * (1 - overall_utilization) * (item/ np.max(bins_remain_cap)) # Adjusted bonus


    #Bin Activation Strategy:  Prioritize empty or near-empty bins for large items
    if item > 0.6 * np.max(bins_remain_cap):
        empty_bin_bonus = np.exp(-2 * utilization)  #High bonus for emptier bins
        priorities[valid_bins] += 2 * empty_bin_bonus[valid_bins]

    return priorities
```
