```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit, adaptive waste minimization, bin balancing, and fullness bonus with normalization.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit component
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)**2

    # Waste Minimization (adaptive)
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    small_waste_penalty = np.exp(-10 * remaining_after_fit * item)
    priorities[valid_bins] -= small_waste_penalty

    # Bin Balancing (dynamic)
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    if overall_utilization < 0.3:
        extreme_utilization_penalty = 5 * np.abs(utilization - 0.2)
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = 15 * np.abs(utilization - 0.8)
    else:
        extreme_utilization_penalty = 10 * np.abs(utilization - 0.5)

    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # Fullness Bonus (adaptive)
    fullness_bonus = np.exp(-5 * np.abs(bins_remain_cap / np.max(bins_remain_cap) - 1))

    if overall_utilization < 0.5:
        priorities[valid_bins] += 2 * fullness_bonus[valid_bins] * (1 - overall_utilization)
    elif overall_utilization < 0.8:
        priorities[valid_bins] +=  fullness_bonus[valid_bins] * (1 - overall_utilization)
    else:
        priorities[valid_bins] += 0.5 * fullness_bonus[valid_bins] * (1 - overall_utilization)

    # Item size aware waste penalty adjustment
    if item > 0.5:
        if overall_utilization > 0.6:
            priorities[valid_bins] -= 2 * small_waste_penalty # penalize small waste more when bins are full

    # Over-utilization Penalty (adaptive)
    almost_full = (bins_remain_cap - item) < 0.1 * np.max(bins_remain_cap)
    priorities[almost_full & valid_bins] -= 20

    # Introduce a new adaptive parameter based on item size relative to bin capacity
    item_ratio = item / np.max(bins_remain_cap)
    if item_ratio > 0.6: # Item is relatively large
        # Further discourage small waste in nearly full bins to avoid creating unusable bins
        nearly_full = (bins_remain_cap < 0.2 * np.max(bins_remain_cap)) & valid_bins # less than 20% capacity
        priorities[nearly_full] -= 10 * small_waste_penalty[bins_remain_cap[valid_bins] < 0.2 * np.max(bins_remain_cap)]
    
    # Normalize priorities to avoid domination by a single factor
    max_priority = np.max(priorities[valid_bins], initial=0)
    min_priority = np.min(priorities[valid_bins], initial=0)

    if max_priority > min_priority:  # Avoid division by zero
        priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority)


    return priorities
```
