```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Inspired by gravitational potential energy. Lower potential energy = higher priority

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # 1. Gravitational potential energy analogy: prioritize bins where the "potential energy"
    #    is minimized after adding the item.  Treat 'item' as 'mass' and bin capacity as 'height'.
    #    Potential energy = mgh.  Smaller gh is better. Use the *remaining* capacity *after*
    #    adding the item, if possible, as 'height'. This encourages filling bins optimally.

    remaining_capacity_after_add = bins_remain_cap - item
    valid_bins = remaining_capacity_after_add >= 0

    potential_energy = np.zeros_like(bins_remain_cap, dtype=float)
    potential_energy[valid_bins] = item * remaining_capacity_after_add[valid_bins]
    potential_energy[~valid_bins] = np.inf # large potential energy for invalid bins

    # Convert potential energy to priority (lower energy = higher priority)
    priorities = -potential_energy


    # 2. Add a small bonus for bins that are already somewhat full. This avoids scattering items.
    #    Heuristic:  Higher current bin usage = higher priority
    usage_ratio = 1 - bins_remain_cap / bins_remain_cap.max() # Scale usage_ratio between 0 and 1, bins_remain_cap.max() provides normalized range

    # Avoid division by zero (important for the all-empty case)

    # Add a tiny adjustment (avoiding zero bin_remain_cap errors if bins_remain_cap == 0 and makes priority more sensitive
    #  when item size is close to bin capacity
    close_to_full_penalty = 1/ (bins_remain_cap + 1e-9 ) # small capacity left increases priority



    priorities = priorities + usage_ratio + close_to_full_penalty # Adds all effects in one go

    return priorities
```
