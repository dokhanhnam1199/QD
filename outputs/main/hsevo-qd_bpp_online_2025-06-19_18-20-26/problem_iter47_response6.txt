```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, waste minimization, bin balance, and adaptivity based on bin utilization."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit component
    size_diff = np.abs(bins_remain_cap - item)
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)

    # Waste Minimization component
    remaining_after_fit = bins_remain_cap - item
    small_waste_penalty = np.exp(-10 * remaining_after_fit)
    priorities[valid_bins] -= small_waste_penalty[valid_bins]

    # Bin Utilization Balance with Adaptive Adjustment
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    if overall_utilization < 0.3:
        extreme_utilization_penalty = 20 * np.abs(utilization - 0.2)
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = 20 * np.abs(utilization - 0.8)
    else:
        extreme_utilization_penalty = 10 * np.abs(utilization - 0.5) # Penalize bins that have utilization far from 0.5 (half full)

    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    return priorities
```
