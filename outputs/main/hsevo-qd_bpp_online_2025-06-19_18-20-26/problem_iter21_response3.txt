```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An enhanced priority function for online bin packing that combines
    best-fit considerations with dynamic waste management, bin balancing,
    and a learning component. Integrates a bin-level feedback mechanism based
    on packing density to adjust priorities.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit component with a small bias towards more full bins.
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)**2

    # Waste Minimization: Discourage very small waste.  Make it adaptive to item size.
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    small_waste_penalty = np.exp(-5 * remaining_after_fit / (item + 0.0001))  # Adaptive penalty
    priorities[valid_bins] -= small_waste_penalty

    # Bin Balancing using utilization and overall utilization:
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    # Dynamically adjust bin balancing based on fill level.  Focus more on avoiding near-empty bins early.
    if overall_utilization < 0.3:
        extreme_utilization_penalty = 5 * np.abs(utilization - 0.2)  # Encourage filling
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = 15 * np.abs(utilization - 0.8)  # Discourage further filling
    else:
        extreme_utilization_penalty = 10 * np.abs(utilization - 0.5)  # Balance
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # Adaptive component: Add a bonus to bins close to full
    # Weight the bonus dynamically based on overall utilization
    fullness_bonus = np.exp(-5 * np.abs(bins_remain_cap / np.max(bins_remain_cap) - 0))

    if overall_utilization < 0.5:
        priorities[valid_bins] += 2 * fullness_bonus[valid_bins] * (1 - overall_utilization)  # More bonus to almost full bins
    elif overall_utilization < 0.8:
        priorities[valid_bins] += fullness_bonus[valid_bins] * (1 - overall_utilization)  # More bonus to almost full bins
    else:
        priorities[valid_bins] += 0.5 * fullness_bonus[valid_bins] * (1 - overall_utilization)  # Even lower bonus

    # Feedback mechanism:  Adjust priority based on the current density of *each* bin.
    # Higher density (less remaining capacity) should generally be favored, but not too much.
    bin_density = 1 - (bins_remain_cap / np.max(bins_remain_cap))  # Already calculated in utilization, reusing it
    density_feedback = 2 * (bin_density - overall_utilization)  # Prioritize bins above average density
    priorities[valid_bins] += density_feedback[valid_bins]

    # Edge Case Handling: Heavily penalize bins with extremely small remaining capacity.
    # This helps avoid creating a lot of nearly-full bins.
    very_small_capacity = bins_remain_cap < 0.1 * np.max(bins_remain_cap)
    priorities[very_small_capacity] -= 10  # Large negative penalty

    return priorities
```
