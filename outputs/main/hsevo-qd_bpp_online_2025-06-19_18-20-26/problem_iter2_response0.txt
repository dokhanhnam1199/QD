```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines FFD approximation and waste minimization with ratio-based prioritization."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Ratio-based priority (similar to v1 but avoids log)
    ratios = item / (bins_remain_cap + 0.0001)  # avoid division by zero
    priorities = ratios

    # 2. First Fit Decreasing Approximation (size proximity)
    size_diff = np.abs(bins_remain_cap - item)
    priorities -= 0.5/(size_diff + 0.0001)  # Subtract because lower size_diff is better

    # Consider only bins with sufficient capacity
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # 3. Waste Minimization Penalty
    remaining_after_fit = bins_remain_cap - item
    small_waste_penalty = np.exp(-10 * remaining_after_fit)
    priorities[valid_bins] -= 0.1 * small_waste_penalty[valid_bins] # Scale it to avoid over-penalizing
    
    return priorities
```
