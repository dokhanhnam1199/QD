```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Uses a combination of remaining capacity and wasted space considerations.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give a high priority to bins that can fit the item.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = 1.0

    # Adjust priority based on wasted space (if the item fits).
    wasted_space = bins_remain_cap - item
    priorities[fit_mask] += np.exp(-wasted_space[fit_mask])  # Smaller wasted space, higher priority. Exp provides diminishing returns.

    #Consider bins that are almost full before new item

    almost_full_bins= bins_remain_cap /np.max(bins_remain_cap)
    almost_full_bins= np.where(almost_full_bins>0.8,almost_full_bins,0)
    priorities+=almost_full_bins

    #For bin with little wasted space to be better use logarithmic score
    wasted_ratio = item/bins_remain_cap

    wasted_ratios_less_one = wasted_ratio[wasted_ratio<=1]
    priorities[wasted_ratio<=1] += np.log(1+wasted_ratios_less_one)

    return priorities
```
