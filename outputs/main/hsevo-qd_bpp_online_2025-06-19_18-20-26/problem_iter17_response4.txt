```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, waste minimization, and adaptive capacity ratio with fullness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit & Capacity Ratio
    size_diff = bins_remain_cap - item
    ratios = item / bins_remain_cap
    priorities[valid_bins] += -np.log(ratios[valid_bins]) / (size_diff[valid_bins] + 0.0001)**2

    # Waste Minimization with item size adjustment
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    small_waste_penalty = np.exp(-10 * remaining_after_fit * item)
    priorities[valid_bins] -= small_waste_penalty

    # Fullness Bonus - encourage filling bins
    overall_utilization = np.mean(1 - (bins_remain_cap / np.max(bins_remain_cap)))
    fullness_bonus = np.exp(-5 * np.abs(bins_remain_cap / np.max(bins_remain_cap) - 0))
    
    if overall_utilization < 0.5:
        priorities[valid_bins] += 2 * fullness_bonus[valid_bins] * (1 - overall_utilization)
    else:
        priorities[valid_bins] += fullness_bonus[valid_bins] * (1 - overall_utilization)

    return priorities
```
