```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Employing a more sophisticated heuristic based on "least waste"
    and attempting to avoid creating small leftover spaces.  Also,
    adding some 'quantum noise' to avoid premature convergence to a
    suboptimal solution.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # 1. Feasibility: Filter out bins that can't fit the item.
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return np.zeros_like(bins_remain_cap)  # No feasible bin. All priorities zero.

    # 2. Waste Minimization:  Smaller leftover space is better.
    waste = bins_remain_cap - item
    waste[~feasible_bins] = np.inf  # Penalize infeasible bins

    # 3.  "Almost Full" Bonus: Give a boost to bins that, after
    #     packing, will be reasonably full.  Encourages using bins
    #     effectively.  Parameter 'alpha' controls how close to full.

    alpha = 0.95  # Target fullness fraction. Tune this!
    almost_full = (bins_remain_cap - item) / bins_remain_cap > alpha
    bonus = np.where(almost_full, 10.0, 0.0) # Substantial bonus!  Experiment!
    # This bonus can also use bins_remain_cap, as its priority should depend on how large they are

    # 4. "Quantum Noise": Add a small random perturbation to break ties
    #     and explore the search space.  Temperature 'tau' controls noise.
    tau = 0.01  #  Experiment with different values!
    noise = np.random.normal(0, tau, size=bins_remain_cap.shape)

    # 5. Combine the criteria:

    priorities = -waste + bonus + noise

    # Only keep priorities of feasible bins. The other one's are useless, and they
    # might bias our decision towards bad choices
    priorities[~feasible_bins] = -np.inf  # ensure infeasible bins are *least* preferred
    return priorities
```
