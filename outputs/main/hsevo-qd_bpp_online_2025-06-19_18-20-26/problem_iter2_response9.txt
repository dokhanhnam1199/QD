```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio-based priority with waste minimization."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Ratio-based priority (similar to v1) but avoids log
    ratios = item / (bins_remain_cap + 0.0001)  # Add small constant to avoid division by zero
    priorities = ratios # Use ratio directly

    # Consider only bins with sufficient capacity
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # 2. Waste Minimization Penalty (similar to v0)
    remaining_after_fit = bins_remain_cap - item
    small_waste_penalty = np.exp(-10 * remaining_after_fit)  # Penalize small wastes
    priorities[valid_bins] -= small_waste_penalty[valid_bins]

    return priorities
```
