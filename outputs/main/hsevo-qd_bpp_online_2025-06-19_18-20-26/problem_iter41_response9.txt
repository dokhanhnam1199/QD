```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines adaptive best-fit, dynamic bin balancing, and waste control."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit: Prioritize tight fits. Stronger for larger items.
    avg_bin_capacity = np.mean(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 1.0
    best_fit_strength = 1.0 + 2.0 * (item / avg_bin_capacity)
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += best_fit_strength / (size_diff[valid_bins] + 0.0001)**2

    # Adaptive Waste Minimization: Scale penalty with item size and remaining space.
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_penalty_scale = 10.0
    waste_penalty = 1.0 / (1 + np.exp(waste_penalty_scale * (remaining_after_fit - 0.05)))
    priorities[valid_bins] -= waste_penalty

    # Dynamic Bin Balancing based on overall utilization.
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    if overall_utilization < 0.3:
        utilization_penalty = 5 * np.abs(utilization - 0.2)
    elif overall_utilization > 0.7:
        utilization_penalty = 15 * np.abs(utilization - 0.8)
    else:
        utilization_penalty = 10 * np.abs(utilization - 0.5)
    priorities[valid_bins] -= utilization_penalty[valid_bins]

    # Adaptive bonus for almost full bins based on overall util.
    fullness_bonus = np.exp(-5 * np.abs(bins_remain_cap / np.max(bins_remain_cap) - 0))
    if overall_utilization < 0.5:
        priorities[valid_bins] += 2 * fullness_bonus[valid_bins] * (1 - overall_utilization)
    elif overall_utilization < 0.8:
        priorities[valid_bins] += fullness_bonus[valid_bins] * (1 - overall_utilization)
    else:
        priorities[valid_bins] += 0.5 * fullness_bonus[valid_bins] * (1 - overall_utilization)

    return priorities
```
