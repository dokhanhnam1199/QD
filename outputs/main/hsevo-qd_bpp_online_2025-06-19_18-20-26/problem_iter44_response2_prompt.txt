{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    A dynamic priority function for online bin packing that combines best-fit,\n    waste management, bin balancing, and learning components with adaptive\n    weighting based on real-time feedback and historical performance.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n    priorities[~valid_bins] = -np.inf\n\n    # 1. Best-Fit Component with adaptive granularity\n    size_diff = bins_remain_cap - item\n    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)**2\n\n    # 2. Waste Minimization with dynamic penalty adjustment\n    remaining_after_fit = bins_remain_cap[valid_bins] - item\n    waste_ratio = remaining_after_fit / item\n    small_waste_penalty = np.exp(-15 * remaining_after_fit * item) # Increased sensitivity\n\n    # Adaptive penalty based on waste ratio and item size\n    penalty_weight = 1.0\n    if item > 0.5:  # Penalize small waste more for large items\n        penalty_weight = 2.0\n    elif item < 0.2: # Relax the small waste penalty for small items\n        penalty_weight = 0.5\n\n    priorities[valid_bins] -= penalty_weight * small_waste_penalty\n\n    # 3. Bin Balancing using utilization and overall utilization with adaptive target\n    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))\n    overall_utilization = np.mean(utilization)\n\n    # Dynamic target utilization based on overall utilization\n    target_utilization = 0.5\n    if overall_utilization < 0.3:\n        target_utilization = 0.2\n    elif overall_utilization > 0.7:\n        target_utilization = 0.8\n\n    extreme_utilization_penalty = 10 * np.abs(utilization - target_utilization)\n    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]\n\n    # 4. Adaptive component with dynamic bonus based on remaining capacity\n    fullness_bonus = np.exp(-5 * np.abs(bins_remain_cap / np.max(bins_remain_cap) - 0))\n    bonus_weight = 1.0\n\n    # Adjust bonus weight based on overall utilization and item size\n    if overall_utilization < 0.5:\n        bonus_weight = 2 * (1 - overall_utilization)\n    elif overall_utilization < 0.8:\n        bonus_weight = (1 - overall_utilization)\n    else:\n        bonus_weight = 0.5 * (1 - overall_utilization)\n\n    priorities[valid_bins] += bonus_weight * fullness_bonus[valid_bins]\n\n\n    # 5. Item-Size-Aware Adjustment: Favor bins that tightly fit larger items\n    if item > 0.6:\n      tight_fit_bonus = np.exp(-20*(bins_remain_cap[valid_bins]-item)**2)\n      priorities[valid_bins] += 0.7 * tight_fit_bonus # Encourage tight fits\n\n    # 6. Normalize priorities to avoid domination by any single factor\n    max_priority = np.max(priorities[np.isfinite(priorities)])\n    min_priority = np.min(priorities[np.isfinite(priorities)])\n\n    if max_priority > min_priority:\n        priorities[np.isfinite(priorities)] = (priorities[np.isfinite(priorities)] - min_priority) / (max_priority - min_priority)\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This priority function incorporates several heuristics:\n\n    1.  **First Fit Decreasing (FFD) Approximation:** Bins closer in size to the item\n        (but still large enough) get higher priority.  This approximates the FFD\n        algorithm which is known to be reasonably effective.\n\n    2.  **Waste Minimization:**  Penalizes bins where the item leaves a very small\n        remaining capacity (high waste). This is crucial in online scenarios where\n        future items might fit perfectly into larger waste spaces.\n\n    3.  **Bin Utilization Balance:** Bins that are very empty or almost full are\n        slightly penalized to encourage mid-range utilization, promoting a more\n        balanced distribution of items across bins. This aims to avoid creating\n        bins that are almost full with one item.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. First Fit Decreasing Approximation (size proximity)\n    size_diff = np.abs(bins_remain_cap - item)\n    priorities = 1.0 / (size_diff + 0.0001)  # Avoid division by zero and give preference to bins closest to item size. Small constant added to size_diff\n\n    # Consider only bins with sufficient capacity\n    valid_bins = bins_remain_cap >= item\n    priorities[~valid_bins] = -np.inf\n\n    # 2. Waste Minimization Penalty\n    remaining_after_fit = bins_remain_cap - item\n    small_waste_penalty = np.exp(-10 * remaining_after_fit)\n    priorities[valid_bins] -= small_waste_penalty[valid_bins]\n\n    # 3. Bin Utilization Balance Penalty (U-shaped utilization preference)\n    utilization = (1 - (bins_remain_cap / np.max(bins_remain_cap)))  # Fraction full, range [0, 1] where 1 is empty and 0 is full\n    extreme_utilization_penalty = 10 * np.abs(utilization - 0.5) # Penalize bins that have utilization far from 0.5 (half full)\n\n    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (2nd), we see both are identical. Comparing (1st) vs (3rd), the 3rd one introduces adaptive parameters for waste minimization and bin balancing, along with edge case handling for nearly full bins and adjusts the best-fit component to favour bins closer to being full. It also uses `waste_penalty_strength = 10 + 5 * item` to adjust the waste penalty. Comparing (3rd) vs (4th), heuristic 3 contains more adaptive logic. Comparing (2nd worst) vs (worst), we see they are identical. Comparing (1st) vs (5th), we see they are identical. Comparing (1st) vs (6th), the 6th heuristic adaptively adjusts the waste penalty based on item size and overall utilization. Comparing (1st) vs (7th), they are identical. Comparing (1st) vs (8th), they are identical. Comparing (1st) vs (9th), heuristic 9 uses both `small_waste_penalty` and `large_waste_penalty`. Comparing (9th) vs (10th), we see they are identical. Comparing (1st) vs (11th), heuristic 11 introduces a stronger best-fit component and adaptive waste minimization, scaling the penalty with both item size and remaining space. Comparing (1st) vs (12th), heuristic 12 dynamically adjusts the strategy based on item size relative to bin capacities and overall bin utilization. It adjusts best fit, waste minimization, and bin balancing based on these factors. Comparing (1st) vs (13th), we see heuristic 13 adaptively adjust best-fit using granularity factor and dynamic waste minimization using `item_size_factor`. Comparing (13th) vs (14th), they are identical. Comparing (1st) vs (15th), we see heuristic 15 introduces `Over-utilization penalty` for almost-full bins. Comparing (1st) vs (16th), the 16th heuristic introduces item-size-aware adjustment. Comparing (1st) vs (17th), the 17th heuristic explores using a new bin even if the current bin has space. Comparing (1st) vs (18th), the 18th heuristic strongly emphasizes best fit decreasing, scaling waste minimization with item size. Comparing (1st) vs (19th), heuristic 19 uses FFD approximation. Comparing (1st) vs (20th), the 20th heuristic uses bias toward full bins, dynamic target utilization and random component to break ties. Overall: The better heuristics tend to have more adaptive components, adjusting weights and strategies based on item size, bin utilization, and other problem-specific factors. They also incorporate edge case handling and exploration strategies to avoid local optima.\n- \nHere's a redefined approach to \"Current Self-Reflection,\" designed to improve your heuristic design process:\n\n*   **Keywords:** Dynamic Adaptation, Multi-Factor Integration, Problem State Awareness, Robustness, Edge Case Handling, Normalization, Feedback Loops, Exploration, Diversification, Bin Utilization, Item Size Impact.\n\n*   **Advice:** Focus on designing heuristics that *react* to the problem. Implement feedback loops where the algorithm learns from its actions (e.g., high waste, unbalanced bins) and adjusts its parameters accordingly. Explicitly consider edge cases to avoid brittle solutions.\n\n*   **Avoid:** Broad, generic statements like \"combine multiple factors\" without specifying *how* and *why*. Avoid simply stating obvious goals like \"minimize waste\" without actionable strategies for achieving them in a *dynamic* and *adaptive* manner. Avoid vague notions of complexity.\n\n*   **Explanation:** Instead of simply listing desirable qualities, your self-reflection should focus on the *mechanisms* through which these qualities can be achieved. For example, instead of saying \"balance bin utilization,\" consider *how* you will dynamically adjust placement strategies based on observed bin fill levels. Focus on strategies for escaping local optima.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}