```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Inspired by black hole physics; prioritize bins where the item's
    "gravitational pull" is strongest, but also consider avoiding
    overfilling (event horizon analogy).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # 1. Calculate "gravitational pull" (inverse square of remaining capacity).
    #    Smaller remaining capacity means stronger pull (want to fill).
    pull = np.where(bins_remain_cap > 0, (item / bins_remain_cap)**2, 0)  # Avoid division by zero

    # 2. Introduce "event horizon" term.  Bins that can't fit the item
    #    get a strong negative priority. This models how nothing can escape a black hole.
    event_horizon = np.where(bins_remain_cap < item, -np.inf, 0) #Bins that cant fit get -inf priority.

    # 3. A term that penalizes bins that are too close in size to the item.
    #   If we choose the next largest bin, we might leave a bin of dead space
    #   If we choose too large of a bin, we could waste bin capacity.
    #This term prefers bins slightly larger than the current item.
    capacity_difference = np.abs(bins_remain_cap - item)
    capacity_penalty = -capacity_difference # Larger the differnce, the better
    #Scale the penality, small difference should cause big pain
    capacity_penalty = capacity_penalty*5
    
    # 4. Combine the factors.  The "pull" encourages filling, the "event horizon"
    #    discourages impossible placements, and "capacity penalty" tries to use slightly big bins
    #    effectively.
    priorities = pull + event_horizon + capacity_penalty

    #Optional scaling factor to make scores easier to digest for complex items/bins
    #priorities = priorities/100


    return priorities
```
