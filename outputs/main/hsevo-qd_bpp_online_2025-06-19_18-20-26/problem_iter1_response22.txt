```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Considering both space waste and fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero
    safe_bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Heuristic 1: Favor bins where the item fits (capacity >= item)
    fit_mask = (bins_remain_cap >= item)
    fit_priority = fit_mask.astype(float)

    # Heuristic 2: Minimize wasted space, prefer bins where remain capacity - item is small.
    # Use inverse of waste
    waste = np.abs(bins_remain_cap - item)
    waste_priority = 1.0 / (1.0 + waste) # Avoid division by zero and bound priority

    # Heuristic 3: Discourage small remaining capacity after insertion to reduce fragmentation
    # if remaining capacity after insertion < a threshold, penalize the bin.
    remaining_after = bins_remain_cap - item
    fragmentation_penalty = np.where(remaining_after < 0.1, -1.0, 0.0)  #Penalize if < 0.1 remaining capacity.

    # Heuristic 4: Avoid nearly full bins unless necessary (Balance the utilization)
    #Give lower priorities to near empty bins to avoid using them unless large item
    nearly_empty_penalty = np.where(bins_remain_cap > 0.9,0.0,0) #bins_remain_cap > 0.9 consider almost full
    
    # Combine heuristics with weights, ensuring preference for fitting bins
    priority = fit_priority * (waste_priority + 0.5) + fragmentation_penalty + nearly_empty_penalty

    return priority
```
