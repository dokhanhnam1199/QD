```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, adaptive waste minimization, dynamic bin balancing, and bin activation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit with emphasis.
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.5 / (size_diff[valid_bins] + 0.0001)**2

    # Adaptive Waste Minimization.
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    small_waste_penalty = np.exp(-8 * remaining_after_fit / item)
    large_waste_penalty = np.exp(-5 * item / remaining_after_fit)
    priorities[valid_bins] -= (small_waste_penalty + large_waste_penalty) * 0.75

    # Dynamic Bin Balancing.
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)
    if overall_utilization < 0.3:
        extreme_utilization_penalty = 6 * np.abs(utilization - 0.2)
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = 13 * np.abs(utilization - 0.8)
    else:
        extreme_utilization_penalty = 9 * np.abs(utilization - 0.5)
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # Adaptive component (fullness bonus)
    fullness_bonus = np.exp(-4 * np.abs(bins_remain_cap / np.max(bins_remain_cap) - 0.1))
    if overall_utilization < 0.5:
        priorities[valid_bins] += 1.8 * fullness_bonus[valid_bins] * (1 - overall_utilization) * (item/ np.max(bins_remain_cap))
    elif overall_utilization < 0.8:
        priorities[valid_bins] += 0.9 * fullness_bonus[valid_bins] * (1 - overall_utilization) * (item/ np.max(bins_remain_cap))
    else:
        priorities[valid_bins] += 0.4 * fullness_bonus[valid_bins] * (1 - overall_utilization) * (item/ np.max(bins_remain_cap))

    #Bin Activation: Bonus for empty bins for large items + penalty almost full bins
    if item > 0.6 * np.max(bins_remain_cap):
        empty_bin_bonus = np.exp(-2 * utilization)
        priorities[valid_bins] += 2 * empty_bin_bonus[valid_bins]

    almost_full = (bins_remain_cap - item) < 0.1 * np.max(bins_remain_cap)
    priorities[almost_full & valid_bins] -= 20

    return priorities
```
