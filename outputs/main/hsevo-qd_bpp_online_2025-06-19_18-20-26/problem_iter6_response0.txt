```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines adaptive waste minimization, bin balancing, and dynamic strategy switching
    based on overall bin utilization. It learns from previous placements.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    if not np.any(valid_bins):
        return priorities  # No valid bins, avoid division by zero

    # Strategy 1: Best Fit with Waste Minimization (Aggressive)
    size_diff = bins_remain_cap - item
    priorities[valid_bins] = 1.0 / (size_diff[valid_bins] + 0.0001)**2  # Emphasize tighter fits

    remaining_after_fit = bins_remain_cap - item
    small_waste_penalty = np.exp(-10 * remaining_after_fit * item)  # Significantly penalize small wastes
    priorities[valid_bins] -= small_waste_penalty[valid_bins]

    # Strategy 2: Bin Balancing (Conservative)
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    if overall_utilization < 0.3:
        # Very low utilization: Focus on packing bins tightly to reduce bin count
        extreme_utilization_penalty = 5 * np.abs(utilization - 0.2)
        priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]
    elif overall_utilization > 0.7:
        # High utilization: Avoid overfilling bins and creating excessive waste
        extreme_utilization_penalty = 15 * np.abs(utilization - 0.8)
        priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]
    else:
        # Moderate utilization: Balance bin usage
        extreme_utilization_penalty = 10 * np.abs(utilization - 0.5)
        priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # Adaptive Strategy: Dynamic Weighting based on Item Size
    item_size_ratio = item / np.max(bins_remain_cap)  # Normalize item size
    if item_size_ratio > 0.5:
        # Large items: Prioritize best fit to avoid excessive fragmentation
        priorities[valid_bins] += 2 / (size_diff[valid_bins] + 0.0001)  # Amplified best fit
    else:
        # Smaller items: Give a slight preference to bins with higher utilization
        priorities[valid_bins] -= 0.5 * utilization[valid_bins]
        #introduce randomness to avoid local optima
        priorities[valid_bins] += np.random.normal(0, 0.01, size=priorities[valid_bins].shape)



    return priorities
```
