```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An adaptive priority function that dynamically adjusts its strategy based on the
    current state of the bin packing process. It combines best-fit, worst-fit,
    and a bin-balancing strategy, with weights adjusted adaptively using
    a reinforcement learning inspired approach.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Overall Utilization
    total_capacity = len(bins_remain_cap) * np.max(bins_remain_cap)
    current_total_remaining = np.sum(bins_remain_cap)
    overall_utilization = 1 - (current_total_remaining / total_capacity)

    # Strategy Weights - Initialize with reasonable values.
    best_fit_weight = 0.6
    worst_fit_weight = 0.1
    balance_weight = 0.3


    # Adaptive Weight Adjustment based on overall utilization
    if overall_utilization < 0.2:
        # Very little packed, prioritize filling some bins.
        best_fit_weight += 0.1
        worst_fit_weight -= 0.05 # Reduce worst fit to avoid spreading too thin
        balance_weight -= 0.05
    elif overall_utilization > 0.8:
        # Mostly full, prioritize balancing and avoiding overfill
        best_fit_weight -= 0.1
        worst_fit_weight += 0.1
        balance_weight += 0.1
    else:
        # Moderate fill level, maintain balance but slightly favor best fit.
        best_fit_weight += 0.05
        balance_weight -= 0.025
        worst_fit_weight -= 0.025

    #Best-Fit Component
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += best_fit_weight / (size_diff[valid_bins] + 0.0001)**2

    #Worst-Fit Component (Encourage using almost empty bins sometimes)
    priorities[valid_bins] -= worst_fit_weight * bins_remain_cap[valid_bins] / np.max(bins_remain_cap)

    # Bin Balancing Component
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    balance_penalty = balance_weight * np.abs(utilization - overall_utilization)
    priorities[valid_bins] -= balance_penalty[valid_bins]

    #Dynamic Waste Management
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_threshold = 0.1 * np.max(bins_remain_cap) # Dynamically adjust waste threshold

    #If waste is small, strongly penalize
    small_waste = remaining_after_fit < waste_threshold
    priorities[valid_bins][small_waste] -= 2 * best_fit_weight #Higher penalty to avoid

    #Bonus for bins that become nearly full: Encourages consolidation.
    nearly_full = remaining_after_fit < 0.05 * np.max(bins_remain_cap)
    priorities[valid_bins][nearly_full] += 0.5 * best_fit_weight #bonus to become nearly full

    return priorities
```
