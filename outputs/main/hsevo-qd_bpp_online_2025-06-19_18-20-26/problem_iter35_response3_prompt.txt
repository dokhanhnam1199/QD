{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines best-fit, waste minimization, bin balancing, and adaptive fullness.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n    priorities[~valid_bins] = -np.inf\n\n    # Best-Fit component (similar to FFD approximation)\n    size_diff = bins_remain_cap - item\n    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)**2\n\n    # Adaptive Waste Minimization Penalty\n    remaining_after_fit = bins_remain_cap[valid_bins] - item\n    overall_utilization = np.mean(1 - (bins_remain_cap / np.max(bins_remain_cap)))\n    waste_penalty_factor = 10 * (1 + overall_utilization)  # Adjust based on overall utilization\n    small_waste_penalty = np.exp(-waste_penalty_factor * remaining_after_fit * item) #item aware and utilization aware\n    priorities[valid_bins] -= small_waste_penalty\n\n    # Bin Utilization Balance Penalty (U-shaped utilization preference)\n    utilization = (1 - (bins_remain_cap / np.max(bins_remain_cap)))  # Fraction full, range [0, 1] where 1 is empty and 0 is full\n\n    if overall_utilization < 0.3:\n        extreme_utilization_penalty = 5 * np.abs(utilization - 0.2)\n    elif overall_utilization > 0.7:\n        extreme_utilization_penalty = 15 * np.abs(utilization - 0.8)\n    else:\n        extreme_utilization_penalty = 10 * np.abs(utilization - 0.5) # Penalize bins that have utilization far from 0.5 (half full)\n    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]\n\n    # Adaptive Fullness Bonus\n    fullness_bonus = np.exp(-5 * np.abs(bins_remain_cap / np.max(bins_remain_cap)))\n    if overall_utilization < 0.5:\n        priorities[valid_bins] += 2 * fullness_bonus[valid_bins] * (1 - overall_utilization)\n    elif overall_utilization < 0.8 :\n         priorities[valid_bins] +=  fullness_bonus[valid_bins] * (1 - overall_utilization)\n    else:\n        priorities[valid_bins] += 0.5 * fullness_bonus[valid_bins] * (1 - overall_utilization)\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic combines multiple factors like best-fit, waste minimization, bin balancing, and fullness bonus with dynamic adjustments, whereas the worst only considers the ratio of item size to remaining bin capacity.\n(2nd best) vs (second worst) shows similar differences. Comparing (1st) vs (2nd), we see that (1st) introduces an adaptive waste penalty adjustment and a penalty for over-utilized bins, making it slightly more sophisticated than (2nd), (3rd) vs (4th) shows that (3rd) incorporates utilization awareness into its waste minimization component through `waste_penalty_factor`.\nComparing (second worst) vs (worst), we see very similar approaches, with minor variations in how the ratio is handled. Overall: The better heuristics involve a more complex and adaptive combination of factors, especially regarding dynamic waste management, bin balancing, and fullness bonuses, with the parameters of these factors often depending on overall bin utilization and item sizes. The worst perform much simpler calculations using ratios.\n- \nOkay, let's redefine \"Current self-reflection\" for designing better heuristics, focusing on actionable insights and avoiding the pitfalls of ineffective reflection.\n\nHere's a breakdown:\n\n*   **Keywords:** Adaptive, Dynamic, Multifaceted, State-Aware, Evaluation Metrics, Iterative Refinement.\n\n*   **Advice:** Design heuristics as learning systems. Incorporate feedback loops using clearly defined evaluation metrics at each step to refine parameters and strategies. Think of heuristics as \"policies\" that adapt to different problem stages or instances.\n\n*   **Avoid:** Vague statements about \"combining factors\" without specifying *how* the combination happens, focusing solely on existing strategies without exploring new combinations, ignoring the computational cost of adaptation.\n\n*   **Explanation:** Effective self-reflection involves quantifying the impact of design choices on heuristic performance. It uses data-driven evaluation to iteratively refine the heuristic's behavior. The reflection is not merely descriptive (\"combine multiple factors\") but prescriptive (\"adjust weight X based on performance metric Y\").\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}