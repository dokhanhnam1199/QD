{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines best-fit, waste minimization, adaptive bin balancing, and fullness bonus.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n    priorities[~valid_bins] = -np.inf\n\n    # Best-Fit\n    size_diff = bins_remain_cap - item\n    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)**2\n\n    # Waste Minimization\n    remaining_after_fit = bins_remain_cap[valid_bins] - item\n    small_waste_penalty = np.exp(-10 * remaining_after_fit * item)\n    priorities[valid_bins] -= small_waste_penalty\n\n    # Bin Balancing\n    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))\n    overall_utilization = np.mean(utilization)\n\n    if overall_utilization < 0.3:\n        extreme_utilization_penalty = 5 * np.abs(utilization - 0.2)\n    elif overall_utilization > 0.7:\n        extreme_utilization_penalty = 15 * np.abs(utilization - 0.8)\n    else:\n        extreme_utilization_penalty = 10 * np.abs(utilization - 0.5)\n\n    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]\n\n    # Adaptive Fullness Bonus\n    fullness_bonus = np.exp(-5 * np.abs(bins_remain_cap / np.max(bins_remain_cap) - 0))\n\n    if overall_utilization < 0.5:\n        priorities[valid_bins] += 2 * fullness_bonus[valid_bins] * (1 - overall_utilization)\n    elif overall_utilization < 0.8 :\n        priorities[valid_bins] +=  fullness_bonus[valid_bins] * (1 - overall_utilization)\n    else:\n        priorities[valid_bins] += 0.5 * fullness_bonus[valid_bins] *(1 - overall_utilization)\n    \n    # Adaptive Waste Penalty Adjustment\n    if item > 0.5: # large item\n        if overall_utilization > 0.6:\n            priorities[valid_bins] -= 2 * small_waste_penalty # penalize small waste more when bins are full\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This priority function incorporates several heuristics:\n\n    1.  **First Fit Decreasing (FFD) Approximation:** Bins closer in size to the item\n        (but still large enough) get higher priority.  This approximates the FFD\n        algorithm which is known to be reasonably effective.\n\n    2.  **Waste Minimization:**  Penalizes bins where the item leaves a very small\n        remaining capacity (high waste). This is crucial in online scenarios where\n        future items might fit perfectly into larger waste spaces.\n\n    3.  **Bin Utilization Balance:** Bins that are very empty or almost full are\n        slightly penalized to encourage mid-range utilization, promoting a more\n        balanced distribution of items across bins. This aims to avoid creating\n        bins that are almost full with one item.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. First Fit Decreasing Approximation (size proximity)\n    size_diff = np.abs(bins_remain_cap - item)\n    priorities = 1.0 / (size_diff + 0.0001)  # Avoid division by zero and give preference to bins closest to item size. Small constant added to size_diff\n\n    # Consider only bins with sufficient capacity\n    valid_bins = bins_remain_cap >= item\n    priorities[~valid_bins] = -np.inf\n\n    # 2. Waste Minimization Penalty\n    remaining_after_fit = bins_remain_cap - item\n    small_waste_penalty = np.exp(-10 * remaining_after_fit)\n    priorities[valid_bins] -= small_waste_penalty[valid_bins]\n\n    # 3. Bin Utilization Balance Penalty (U-shaped utilization preference)\n    utilization = (1 - (bins_remain_cap / np.max(bins_remain_cap)))  # Fraction full, range [0, 1] where 1 is empty and 0 is full\n    extreme_utilization_penalty = 10 * np.abs(utilization - 0.5) # Penalize bins that have utilization far from 0.5 (half full)\n\n    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]\n\n    return priorities\n\n### Analyze & experience\n- *   Comparing (1st) vs (10th), we see (1st) uses dynamic waste management, bin balancing and learning components; (10th) uses FFD approximation, waste minimization, and bin utilization balance. (1st) adjusts weights dynamically based on overall fill level while (10th) uses fixed parameters.\n*   Comparing (2nd) vs (19th), we see (2nd) incorporates adaptive waste penalty adjustment based on item size and overall utilization, while (19th) sticks to basic waste minimization.\n*   Comparing (3rd) vs (14th), we see (3rd) uses adaptive parameter tuning and dynamic waste thresholding, (14th) employs basic FFD approximation, waste minimization and bin utilization.\n*   Comparing (4th) vs (15th), we see (4th) introduces a bin activation strategy and normalizes waste by item size, while (15th) uses the same basic heuristic as (14th)\n*   Comparing (11th) vs (20th), we see (11th) has best fit emphasis, adaptive waste minimization, dynamic bin balancing, penalty for over-utilized bins while (20th) has capacity ratio.\n*   Comparing (1st) vs (2nd), we see (1st) emphasizes dynamic parameter adjustments, and a learning component; (2nd) introduces item size aware waste penalty\n*   Comparing (3rd) vs (4th), we see (3rd) features adaptive thresholding and edge case handling for nearly full bins, while (4th) incorporates bin activation and discourages both small and large waste with normalization.\n*   Comparing (second worst) vs (worst), we see (19th) combines FFD approximation, waste minimization and capacity ratio; (20th) has capacity ratio.\n*   Overall: Better heuristics incorporate dynamic adjustments based on overall fill levels, item sizes, and potential waste. They include a combination of best-fit considerations with waste minimization and bin balancing. The best heuristics feature edge case handling and adaptive parameter tuning, while less effective heuristics rely on simpler, static rules.\n- \nOkay, here's a redefined approach to \"Current Self-Reflection,\" designed to avoid the pitfalls of \"Ineffective Self-Reflection,\" and to guide the design of better heuristics.\n\n*   **Keywords:** Dynamic adaptation, state-awareness, multi-objective, normalization, feedback-driven, robust edge-case handling, computational efficiency.\n\n*   **Advice:** Design heuristics that actively monitor problem state and dynamically adjust parameters (weights, penalties, strategies) accordingly. Combine multiple objectives (e.g., best-fit *and* waste reduction) via adaptive weighting. Incorporate feedback loops (e.g. historical performance).\n\n*   **Avoid:** Static parameter tuning, reliance on single strategies, neglecting edge cases, excessive complexity without commensurate performance gains, ignoring computational cost.\n\n*   **Explanation:** Move beyond static rules. Focus on heuristics that *learn* and adapt within the problem-solving process. Normalizing objectives prevents domination and ensures fair consideration. Prioritize computationally efficient adaptation mechanisms.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}