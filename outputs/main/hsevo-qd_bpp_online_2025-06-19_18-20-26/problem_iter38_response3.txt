```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit, waste minimization, bin balancing, and adaptive bonus.
    Dynamically adjusts weights based on utilization and item size.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Overall utilization
    total_capacity = np.sum(bins_remain_cap) + item * np.sum(valid_bins)
    overall_utilization = 1 - np.sum(bins_remain_cap) / total_capacity if total_capacity > 0 else 0

    # Item size ratio
    avg_bin_capacity = np.mean(bins_remain_cap[bins_remain_cap > 0]) if np.any(bins_remain_cap > 0) else 1
    item_size_ratio = item / avg_bin_capacity

    # Best-Fit with adaptive scaling
    size_diff = bins_remain_cap - item
    best_fit_priority = 1.0 / (size_diff[valid_bins] + 0.0001)**2
    priorities[valid_bins] += best_fit_priority * (1 + overall_utilization)

    # Waste Minimization with dynamic threshold
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_threshold = item / 2.0
    waste_penalty_factor = 5.0
    waste_penalty = np.where(remaining_after_fit > 0, np.exp(waste_penalty_factor * (remaining_after_fit - waste_threshold)), 0)
    priorities[valid_bins] -= waste_penalty * (1 - overall_utilization)

    # Bin Balancing with dynamic target
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)
    if overall_utilization < 0.4:
        target_utilization = 0.6
    elif overall_utilization > 0.6:
        target_utilization = 0.4
    else:
        target_utilization = 0.5
    utilization_penalty_factor = 10.0
    utilization_penalty = utilization_penalty_factor * np.abs(utilization - target_utilization)
    priorities[valid_bins] -= utilization_penalty[valid_bins] * (1 + item_size_ratio)

    # Fullness Bonus adaptive
    fullness_level = 1 - (bins_remain_cap / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)
    fullness_bonus = np.exp(-5 * np.abs(fullness_level - 1))
    bonus_weight = (1 - overall_utilization) * item_size_ratio # Modified: Weight by item size
    priorities[valid_bins] += bonus_weight * fullness_bonus[valid_bins]

    # Edge case handling
    if np.all(priorities == -np.inf):
        priorities = np.zeros_like(bins_remain_cap, dtype=float)
        valid_bins = bins_remain_cap > 0
        if np.any(valid_bins):
            size_diff = bins_remain_cap - item
            size_diff[size_diff < 0] = np.inf
            priorities[valid_bins] = 1.0 / (size_diff[valid_bins] + 0.0001)**0.5
        else:
            priorities = np.ones_like(bins_remain_cap)

    return priorities
```
