```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins with remaining capacity close to the item size,
    but also penalizes bins that are too full or too empty.  A quadratic penalty
    is applied for the difference between the item size and the remaining capacity,
    and another for how far the filled ratio (after adding item) is from the target fill ratio (0.75 here).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = 1.0  # Assume bin size is 1.0.  Adjust if different.

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            # Calculate the "fit" score (how close the item size is to the remaining capacity)
            fit_score = - (item - remaining_capacity)**2

            # Calculate how full the bin will be after adding the item.  Target about 75% fill.
            filled_ratio = (bin_size - remaining_capacity + item) / bin_size
            fill_score = - (filled_ratio - 0.75)**2

            # Combine the scores to create the overall priority.
            priorities[i] = fit_score + fill_score
        else:
            # Item doesn't fit, so give it very low priority
            priorities[i] = -np.inf  # Or a very large negative number

    return priorities
```
