```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, waste minimization, bin balancing, and adaptive weights."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # 1. Best-Fit
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.001)

    # 2. Dynamic Waste Minimization
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_ratio = remaining_after_fit / np.max(bins_remain_cap)
    waste_penalty = np.exp(5 * (waste_ratio - 0.25))
    priorities[valid_bins] -= waste_penalty

    # 3. Adaptive Bin Balancing
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)
    target_utilization = 0.6
    if overall_utilization < 0.4:
        target_utilization = 0.8
    elif overall_utilization > 0.8:
        target_utilization = 0.3
    balance_penalty = 10 * np.abs(utilization - target_utilization)
    priorities[valid_bins] -= balance_penalty[valid_bins]

    # 4. Item size aware penalty adjustment
    item_ratio = item/ np.max(bins_remain_cap)

    priorities[valid_bins] -= item_ratio * balance_penalty[valid_bins]

    return priorities
```
