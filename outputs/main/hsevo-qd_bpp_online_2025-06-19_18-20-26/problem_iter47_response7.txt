```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, waste minimization, adaptive bin balancing, and fullness bonus with enhanced adaptation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    max_bin_cap = np.max(bins_remain_cap)
    overall_utilization = 1 - np.mean(bins_remain_cap / max_bin_cap)

    # Best-Fit with Adaptive Sensitivity
    size_diff = bins_remain_cap - item
    best_fit_scale = 1.0 + 0.5 * overall_utilization
    priorities[valid_bins] += best_fit_scale / (size_diff[valid_bins] + 0.0001)**1.7

    # Waste Minimization with Dynamic Penalties
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_ratio = remaining_after_fit / (item + 0.0001) #Avoid division by zero
    small_waste_penalty = np.exp(-7 * waste_ratio)
    large_waste_penalty = np.exp(-3 / (waste_ratio+0.0001))
    waste_penalty_weight = 0.5 + 0.5 * overall_utilization
    priorities[valid_bins] -= (small_waste_penalty + large_waste_penalty) * waste_penalty_weight

    # Bin Balancing with Adaptive Adjustment
    utilization = 1 - (bins_remain_cap / max_bin_cap)
    extreme_utilization_penalty = np.zeros_like(utilization)

    if overall_utilization < 0.3:
        extreme_utilization_penalty = 6 * np.abs(utilization - 0.2)
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = 13 * np.abs(utilization - 0.8)
    else:
        extreme_utilization_penalty = 9 * np.abs(utilization - 0.5)

    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # Fullness Bonus with Dynamic Scaling based on item size and overall utilization
    fullness_bonus = np.exp(-4 * np.abs(bins_remain_cap / max_bin_cap - 0.1))
    fullness_bonus_scale = (1 - overall_utilization) * (item / max_bin_cap)

    if overall_utilization < 0.5:
        priorities[valid_bins] += 1.7 * fullness_bonus[valid_bins] * fullness_bonus_scale
    elif overall_utilization < 0.8:
        priorities[valid_bins] += 0.7 * fullness_bonus[valid_bins] * fullness_bonus_scale
    else:
        priorities[valid_bins] += 0.4 * fullness_bonus[valid_bins] * fullness_bonus_scale
    
    #Prioritize bins with remaining capacity similar to item size when utilization is high
    if overall_utilization > 0.7:
      similarity_bonus = np.exp(-2 * np.abs(bins_remain_cap[valid_bins] - item) / max_bin_cap)
      priorities[valid_bins] += 0.8 * similarity_bonus

    # Bin Activation Bonus for Large Items with Utilization Awareness
    if item > 0.6 * max_bin_cap:
        empty_bin_bonus = np.exp(-1.5 * utilization)
        activation_bonus_scale = 1.7 + 1.8 * (1 - overall_utilization)
        priorities[valid_bins] += activation_bonus_scale * empty_bin_bonus[valid_bins]
    
    #Diversification Heuristic (Escape Local Optima)
    if np.random.rand() < 0.04:
        priorities[valid_bins] += np.random.normal(0, 0.08, np.sum(valid_bins))

    return priorities
```
