```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A refined priority function for online bin packing that dynamically adapts
    to the problem state by considering item size relative to bin capacity,
    overall bin utilization, and local bin density. It also uses a more nuanced
    waste management strategy and avoids fixed penalties.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # 1. Best-Fit with Item-Size Awareness:
    #   Prioritize bins where the remaining space is close to the item size.
    #   Scale the priority based on how 'significant' the item is relative to the bin.
    size_diff = bins_remain_cap - item
    relative_item_size = item / np.max(bins_remain_cap)  # Normalized item size
    priorities[valid_bins] += (relative_item_size / (size_diff[valid_bins] + 0.0001)**0.5)

    # 2. Dynamic Waste Management:
    #   Discourage waste based on item size AND current remaining bin capacity.
    #   Larger items are more sensitive to waste. Nearly-full bins are more
    #   sensitive to adding waste.
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    bin_utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    waste_penalty = np.exp(-5 * relative_item_size * remaining_after_fit * (1 + bin_utilization[valid_bins]))
    priorities[valid_bins] -= waste_penalty

    # 3. Bin Density Consideration:
    #   Encourage packing items into bins that are already somewhat full, but
    #   avoid over-filling.  This aims to consolidate items.
    #   Utilize the mean bin_utilization as indicator of fill-density.
    overall_utilization = np.mean(bin_utilization)
    density_bonus = bin_utilization * np.exp(-10 * np.abs(bin_utilization - overall_utilization))
    priorities[valid_bins] += 0.7 * density_bonus[valid_bins]

    # 4. Avoiding Premature Bin Creation:
    #   If there are many empty bins, slightly discourage opening *another* bin
    #   unless the item is very large.
    empty_bin_count = np.sum(bins_remain_cap == np.max(bins_remain_cap))
    if empty_bin_count > 0.5 * len(bins_remain_cap):
        new_bin_penalty = np.exp(-20 * relative_item_size)
        priorities[bins_remain_cap == np.max(bins_remain_cap)] -= new_bin_penalty[bins_remain_cap == np.max(bins_remain_cap)]

    # 5. Adaptive Exploration Bonus
    # Add small bonus to almost empty bins if the overall utiliazation is high and item small
    if overall_utilization > 0.7 and relative_item_size < 0.1:
        priorities[bins_remain_cap == np.max(bins_remain_cap)] += 0.1

    return priorities
```
