```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A refined priority function for online bin packing that focuses on
    reducing fragmentation and balancing bin utilization based on comprehensive utilization analysis.
    It incorporates a more aggressive waste penalty and a dynamic bin opening mechanism.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Enhanced Best-Fit Component
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)**2

    # Aggressive Waste Minimization: Penalize even moderate waste more strongly.
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_penalty_exponent = 20  # Increased penalty for smaller waste
    small_waste_penalty = np.exp(-waste_penalty_exponent * remaining_after_fit * item)
    priorities[valid_bins] -= small_waste_penalty

    # Bin Balancing with Dynamic Thresholds:
    bin_capacities = np.max(bins_remain_cap)  # Assuming all bins have the same max capacity
    utilization = 1 - (bins_remain_cap / bin_capacities)
    overall_utilization = np.mean(utilization)

    # Dynamic Bin Balancing Adjustment
    if overall_utilization < 0.4:  # Encourage filling bins early on
        utilization_difference = np.abs(utilization - 0.3)
        priorities[valid_bins] -= 8 * utilization_difference[valid_bins]
    elif overall_utilization > 0.6:  # Discourage overfilling once a good fill level is reached
        utilization_difference = np.abs(utilization - 0.7)
        priorities[valid_bins] -= 12 * utilization_difference[valid_bins]
    else:  # Aim for a balanced fill in the middle range
        utilization_difference = np.abs(utilization - 0.5)
        priorities[valid_bins] -= 5 * utilization_difference[valid_bins]
    
    # Dynamic Bin Opening Mechanism
    # Open a new bin if no existing bin can accommodate the item with reasonable waste
    # and overall utilization exceeds a threshold. This promotes better initial packing.
    if not np.any(valid_bins) and overall_utilization > 0.7:
        priorities = np.append(priorities, 1.0)  # Prioritize opening a new bin

    return priorities
```
