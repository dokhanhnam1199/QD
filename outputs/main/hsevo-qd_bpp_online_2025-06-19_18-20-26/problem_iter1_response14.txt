```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # First, consider only bins that can actually hold the item.
    eligible_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if not np.any(eligible_bins):
        # If no bin can hold the item, prioritize bins with the largest remaining capacity.
        # This helps to open new bins more judiciously. Small penalty to existing bins.
        priorities = bins_remain_cap - 0.1*np.max(bins_remain_cap) # subtract some fraction of maximum cap

    else:
        # For eligible bins, prioritize bins that are closest to full after adding the item
        # but penalize bins where the remaining capacity is too small

        remaining_after_fit = bins_remain_cap - item
        #Prioritize bins with space left
        priorities[eligible_bins] = (1/(remaining_after_fit[eligible_bins] + 0.0001)) #Inverted distance with regularization constant. Small space left = High priority
        #Add a second order bias, with less space left meaning that you will get points following a normal distribution
        priorities[eligible_bins] = priorities[eligible_bins] + np.exp(-(remaining_after_fit[eligible_bins]**2)/(2*(0.25)**2)) # Standard Deviation of 0.25 from item capacity and above is almost ignored

        #Big negative bonus if bins are ALMOST full after item has been added
        priorities[eligible_bins] = priorities[eligible_bins] - 1000 * (remaining_after_fit[eligible_bins] < 0.05) #Prevent making very small residuals.

    return priorities
```
