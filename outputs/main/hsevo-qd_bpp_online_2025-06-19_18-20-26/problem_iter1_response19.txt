```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function considers several factors to determine priority:

    1.  **Fit:** How well the item fits in the bin (higher remaining capacity after packing is better, but not excessively so).
    2.  **Bin Utilization:** Encourages filling bins completely (high current utilization is good). Avoids large waste in bins.
    3.  **Number of Empty Bins:** Avoid using a completely empty bin if there are partially filled ones.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = 1.0 # Assuming bin size is 1.0; replace with the actual bin size if different

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if remaining_capacity >= item:
            # Fit component: prioritize bins with capacity slightly larger than the item
            fit_score = np.exp(-np.abs(remaining_capacity - item)) # Gaussian-like curve around item size

            # Utilization component: prioritize bins that are already partially full (but can fit item)
            utilization = (bin_size - remaining_capacity) / bin_size
            utilization_score = utilization # Linear scaling

            # Check for perfect fit (within a small tolerance)
            perfect_fit = (remaining_capacity - item) < 0.01 # Tolerance of 0.01

            # Combine scores
            priorities[i] = fit_score + utilization_score

            if perfect_fit:
                priorities[i] += 1 # Perfect fit gets a big bonus

        else:
            priorities[i] = -np.inf # Cannot fit, lowest priority
    #If all priorities are -inf, promote the largest bin to be viable
    if np.all(priorities == -np.inf):
      priorities[np.argmax(bins_remain_cap)] = 0

    return priorities
```
