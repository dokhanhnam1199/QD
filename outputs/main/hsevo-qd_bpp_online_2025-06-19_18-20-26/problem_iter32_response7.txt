```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, adaptive waste minimization, bin balancing, and item-size awareness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    avg_bin_capacity = np.mean(bins_remain_cap)
    item_ratio = item / avg_bin_capacity

    # Best-Fit with item-size scaling
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += (1.0 / (size_diff[valid_bins] + 0.0001)**2) * (1 + 0.5 * item_ratio)

    # Adaptive Waste Minimization
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_penalty_factor = 10 + 3 * item_ratio
    small_waste_penalty = np.exp(-waste_penalty_factor * remaining_after_fit * item)
    priorities[valid_bins] -= small_waste_penalty

    # Bin Balancing with dynamic penalty scaling
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    if overall_utilization < 0.3:
        extreme_utilization_penalty = 7 * np.abs(utilization - 0.2) * (1 + item_ratio)
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = 18 * np.abs(utilization - 0.8) * (1 + item_ratio)
    else:
        extreme_utilization_penalty = 11 * np.abs(utilization - 0.5) * (1 + item_ratio)

    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # Adaptive Fullness Bonus with utilization awareness
    fullness_bonus = np.exp(-5 * np.abs(bins_remain_cap / np.max(bins_remain_cap) - 0))
    bonus_scaling = 2 * (1 - overall_utilization) * (1 + 0.5 * item_ratio)

    if overall_utilization < 0.5:
        priorities[valid_bins] += bonus_scaling * fullness_bonus[valid_bins]
    elif overall_utilization < 0.8:
        priorities[valid_bins] += 0.75 * bonus_scaling * fullness_bonus[valid_bins]
    else:
        priorities[valid_bins] += 0.25 * bonus_scaling * fullness_bonus[valid_bins]

    # Edge case: prefer not too small not too big
    close_to_item = np.abs(bins_remain_cap - item) / item
    close_to_full = bins_remain_cap / np.max(bins_remain_cap)
    
    edge_case_bonus = np.exp(-5 * close_to_item) * ((bins_remain_cap - item) > 0.1 * np.max(bins_remain_cap)) #boost bins with remain capacity close to item and not close to full

    priorities[valid_bins] += 0.4 * edge_case_bonus[valid_bins]

    return priorities
```
