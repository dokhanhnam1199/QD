```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio-based priority with waste minimization and FFD."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    # Ratio-based priority (modified to avoid log of zero)
    ratios = item / (bins_remain_cap + 1e-9)  # Add small constant to avoid division by zero
    priorities[valid_bins] = -np.log(ratios[valid_bins])

    # Waste minimization penalty
    remaining_after_fit = bins_remain_cap - item
    small_waste_penalty = np.exp(-10 * remaining_after_fit)
    priorities[valid_bins] -= small_waste_penalty[valid_bins]

    # FFD approximation (size proximity)
    size_diff = np.abs(bins_remain_cap - item)
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)

    priorities[~valid_bins] = -np.inf
    return priorities
```
