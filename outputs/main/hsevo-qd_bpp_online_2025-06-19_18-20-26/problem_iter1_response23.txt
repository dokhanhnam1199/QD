```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First, consider bins that can actually fit the item. Others get -inf priority.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # For feasible bins, prioritize bins that would leave a small remaining capacity
    # after placing the item. This encourages filling bins completely and reduces fragmentation.
    feasible_bins = bins_remain_cap >= item
    remaining_capacity_after_fit = bins_remain_cap[feasible_bins] - item
    
    # The smaller the remaining capacity, the higher the priority.
    # Avoid division by zero by adding a small epsilon.
    priorities[feasible_bins] = 1.0 / (remaining_capacity_after_fit + 1e-9) 
    
    # Introduce a small bonus for bins that are "almost full" before the item is added.
    # This encourages using partially filled bins before starting new ones.  A threshold determines "almost full".
    almost_full_threshold = 0.9  # A bin is "almost full" if it's >90% full.
    
    almost_full_bins = (bins_remain_cap / np.max(bins_remain_cap)) > almost_full_threshold # scale to 0 to 1
    priorities[almost_full_bins] += 1.0 #Give slightly more priority if almost full.

    return priorities
```
