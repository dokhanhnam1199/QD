```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines adaptive best-fit, waste minimization, bin balancing, and item-size awareness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Adaptive Best-Fit
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)**1.5

    # Dynamic Waste Minimization
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_ratio = remaining_after_fit / np.max(bins_remain_cap)
    waste_penalty = np.exp(5 * (waste_ratio - 0.25))
    priorities[valid_bins] -= waste_penalty

    # Enhanced Bin Balancing
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)
    target_utilization = 0.6

    if overall_utilization < 0.4:
        target_utilization = 0.8
    elif overall_utilization > 0.8:
        target_utilization = 0.3

    balance_penalty = 10 * np.abs(utilization - target_utilization)
    priorities[valid_bins] -= balance_penalty[valid_bins]

    #Adaptive Fullness Bonus
    fullness_level = 1 - bins_remain_cap / np.max(bins_remain_cap)
    fullness_bonus = np.exp(-5 * np.abs(fullness_level - 1))
    sigmoid_weight = 1 / (1 + np.exp(10 * (overall_utilization - 0.5)))
    priorities[valid_bins] += 2 * sigmoid_weight * fullness_bonus[valid_bins]
        
    # Item Size Awareness & Waste Penalty Adjustment
    if item > 0.5:
        remaining_after_fit = bins_remain_cap - item
        small_waste = remaining_after_fit < 0.1 * np.max(bins_remain_cap)
        priorities[small_waste & valid_bins] -= 5
        
    return priorities
```
