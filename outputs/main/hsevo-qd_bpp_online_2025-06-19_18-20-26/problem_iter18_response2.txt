```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A refined priority function for online bin packing, focusing on a more robust
    combination of best-fit, waste management, and bin balancing,
    with a refined adaptive component based on overall bin utilization
    and individual bin fullness.  It emphasizes preventing fragmentation and
    promoting a more even distribution of items across bins.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Enhanced Best-Fit Component:  Prioritize bins with close fit, but avoid minimal waste harshly
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)**1.5  # Slightly increased sensitivity

    # Waste Minimization with Dynamic Threshold:  Penalize bins that leave very small waste,
    # adaptively adjusting the threshold based on overall bin utilization.  Higher utilization
    # should increase tolerance for small waste (as bins are valuable).

    remaining_after_fit = bins_remain_cap[valid_bins] - item
    overall_utilization = np.mean(1 - (bins_remain_cap / np.max(bins_remain_cap)))
    waste_threshold = 0.05 + 0.05 * overall_utilization # Adjust the waste threshold
    small_waste_penalty_mask = remaining_after_fit <= waste_threshold
    small_waste_penalty = np.exp(-20 * remaining_after_fit[small_waste_penalty_mask] / (waste_threshold + 0.0001))
    priorities[valid_bins][small_waste_penalty_mask] -= small_waste_penalty

    # Bin Balancing with Adaptive Range and Strength:  Encourage or discourage filling bins based
    # on their individual fullness relative to the *average* fullness, with adaptive strength.
    bin_utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    avg_utilization = np.mean(bin_utilization)
    utilization_diff = bin_utilization - avg_utilization

    #Adaptive strength based on overall utilization
    balance_strength = 5 + 5 * overall_utilization

    priorities[valid_bins] -= balance_strength * utilization_diff[valid_bins]

    # Adaptive Fullness Bonus: Give a bonus to bins that are already relatively full,
    # but modulate the bonus strength based on overall utilization to avoid premature closure.
    fullness_level = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    fullness_bonus = np.exp(-10 * np.abs(fullness_level - 1)) #almost full

    if overall_utilization < 0.6:
        priorities[valid_bins] += 1.5 * fullness_bonus[valid_bins] * (1 - overall_utilization) #Stronger bonus when bins are relatively empty
    elif overall_utilization < 0.9:
        priorities[valid_bins] += 0.75 * fullness_bonus[valid_bins] * (1 - overall_utilization) #Moderate bonus
    else:
        priorities[valid_bins] += 0.25 * fullness_bonus[valid_bins] * (1 - overall_utilization) #Weak bonus

    return priorities
```
