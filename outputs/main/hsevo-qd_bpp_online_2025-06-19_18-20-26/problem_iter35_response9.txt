```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit, waste minimization, and bin balancing with dynamic 
    adjustments based on bin capacity distribution and item size.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit with bias towards fuller bins
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.5 / (size_diff[valid_bins] + 0.0001)**1.8

    # Dynamic Waste Minimization
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    item_size_factor = item / np.max(bins_remain_cap)
    waste_penalty_strength = 5 + 10 * item_size_factor
    small_waste_penalty = np.exp(-waste_penalty_strength * remaining_after_fit / item)
    large_waste_penalty = np.exp(-5 * item / remaining_after_fit)
    priorities[valid_bins] -= (small_waste_penalty + large_waste_penalty) * 0.75

    # Bin Balancing with Capacity Distribution Awareness
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    capacity_std = np.std(bins_remain_cap)
    capacity_mean = np.mean(bins_remain_cap)

    if capacity_std < 0.1 * capacity_mean:
        balancing_strength = 10
    else:
        balancing_strength = 5

    extreme_utilization_penalty = balancing_strength * np.abs(utilization - 0.5)
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # Adaptive Fullness Bonus
    fullness_level = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    fullness_bonus = np.exp(-5 * np.abs(fullness_level - 1))
    bonus_strength = 1 + 5 * item_size_factor
    priorities[valid_bins] += bonus_strength * fullness_bonus[valid_bins] * (1 - np.mean(utilization))

    # Edge Case: Favor bins close to full if item is large
    large_item_threshold = 0.75
    if item_size_factor > large_item_threshold:
        almost_full_bins = bins_remain_cap >= item
        almost_full_bins = np.logical_and(almost_full_bins, bins_remain_cap < (item + 0.1 * np.max(bins_remain_cap)))
        priorities[almost_full_bins] += 10

    return priorities
```
