```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A dynamic priority function for online bin packing that incorporates
    bin diversity, fragmentation avoidance, and adaptive parameter tuning
    based on fill levels and item sizes.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit with a capacity-aware bias:
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)**2

    # Fragmentation Avoidance: Penalize creating small fragments based on item size.
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    fragment_penalty = np.exp(-5 * remaining_after_fit / item) #penalty is less for bigger items

    priorities[valid_bins] -= fragment_penalty

    # Bin Diversity Encouragement:  Reward bins that are significantly different in fill level.
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    std_utilization = np.std(utilization)
    diversity_bonus = std_utilization * np.exp(-2 * np.abs(utilization - np.mean(utilization))) #Higher the diversity better it is.
    priorities[valid_bins] += 0.5 * diversity_bonus[valid_bins]

    # Adaptive Parameter Tuning based on fill level and item size.
    overall_utilization = np.mean(utilization)
    adaptive_factor = 1.0

    if overall_utilization < 0.4:
        adaptive_factor = 1.2 # Encourage filling early on.
    elif overall_utilization > 0.8:
        adaptive_factor = 0.8 # Discourage filling when bins are mostly full.

    if item > 0.5: #if item is relatively large.
        adaptive_factor *= 0.75 # prioritize immediate placement.

    priorities[valid_bins] *= adaptive_factor

    #Refinement: Adjust priorities based on how close the bin is to becoming full after the item is added.
    near_full_bonus = np.zeros_like(bins_remain_cap[valid_bins],dtype = float)

    near_full_threshold = 0.1 * np.max(bins_remain_cap) #adjust this paramater

    near_full_bins = remaining_after_fit <= near_full_threshold

    near_full_bonus[near_full_bins] = 1.0/(remaining_after_fit[near_full_bins]+0.0001)


    priorities[valid_bins] += near_full_bonus

    return priorities
```
