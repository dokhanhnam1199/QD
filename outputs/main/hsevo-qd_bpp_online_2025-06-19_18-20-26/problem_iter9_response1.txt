```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An adaptive priority function for online bin packing that dynamically adjusts
    its strategy based on the current fill level and the item size. It combines
    best-fit, worst-fit, and a novel fragmentation avoidance mechanism.
    The parameters are dynamically adjusted based on real-time performance.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Overall fill level
    overall_utilization = np.mean(1 - (bins_remain_cap / np.max(bins_remain_cap)))

    # Item size relative to bin capacity
    item_size_ratio = item / np.max(bins_remain_cap)

    # 1. Best-Fit Component (Adaptive Weight)
    size_diff = bins_remain_cap - item
    best_fit_priority = 1.0 / (size_diff[valid_bins] + 0.0001)**2
    best_fit_weight = 1.0  # Default weight
    if overall_utilization > 0.7 and item_size_ratio < 0.1:
        best_fit_weight = 0.5  # Reduce weight if bins are full and item is small
    priorities[valid_bins] += best_fit_weight * best_fit_priority


    # 2. Worst-Fit Component (Adaptive Weight)
    worst_fit_priority = bins_remain_cap[valid_bins]
    worst_fit_weight = 0.0  # Default weight
    if overall_utilization < 0.3 and item_size_ratio > 0.5:
        worst_fit_weight = 0.8 # Increase weight if bins are empty and item is large
    priorities[valid_bins] -= worst_fit_weight * worst_fit_priority


    # 3. Fragmentation Avoidance (Adaptive Parameter)
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    fragment_penalty_threshold = 0.1 * np.max(bins_remain_cap) # Dynamically adjust based on bin size
    fragment_penalty = np.where(remaining_after_fit < fragment_penalty_threshold, np.exp(-5 * remaining_after_fit / fragment_penalty_threshold), 0)

    fragment_penalty_weight = 1.0 # Default weight
    if overall_utilization > 0.6:
        fragment_penalty_weight = 2.0 # Increase weight if bins are full

    priorities[valid_bins] -= fragment_penalty_weight * fragment_penalty


    # 4. Bin Balancing Component (Adaptive Targets)
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    if overall_utilization < 0.4:
        target_utilization = 0.3
    elif overall_utilization > 0.6:
        target_utilization = 0.7
    else:
        target_utilization = 0.5

    bin_balance_penalty = np.abs(utilization - target_utilization)
    bin_balance_weight = 5.0 #Default weight
    if item_size_ratio > 0.6 :
        bin_balance_weight = 10.0 #increase penalty if item is large
    priorities[valid_bins] -= bin_balance_weight * bin_balance_penalty[valid_bins]

    # 5. Encourage filling almost full bins
    fullness_bonus = np.exp(-5 * np.abs(bins_remain_cap / np.max(bins_remain_cap) - 0))
    fullness_bonus_weight = 2.0
    if overall_utilization > 0.8:
        fullness_bonus_weight = 0.5 #reduce bonus if almost all bins are full

    priorities[valid_bins] += fullness_bonus_weight * fullness_bonus[valid_bins] * (1 - overall_utilization)

    return priorities
```
