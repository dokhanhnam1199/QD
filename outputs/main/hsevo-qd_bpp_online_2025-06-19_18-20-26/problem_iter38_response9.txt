```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, waste minimization, and dynamic bin balancing."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    # 1. Best Fit Emphasis (Similar to v0)
    size_diff = bins_remain_cap - item
    priorities[~valid_bins] = -np.inf
    priorities[valid_bins] = 1.0 / (size_diff[valid_bins] + 0.0001)**2

    # 2. Waste Minimization (Adaptive - similar to v0)
    remaining_after_fit = bins_remain_cap - item
    small_waste_penalty = np.exp(-10 * remaining_after_fit * item) # Penalty scaled by item size
    priorities[valid_bins] -= small_waste_penalty[valid_bins]

    # 3. Bin Balancing (Dynamic - inspired by v0, simplified)
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    # Simplified Dynamic Adjustment: Focus on extreme cases
    if overall_utilization < 0.3:
        extreme_utilization_penalty = 5 * np.abs(utilization - 0.2)
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = 15 * np.abs(utilization - 0.8)
    else:
        extreme_utilization_penalty = 0 # No penalty in the middle range

    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]
    
    # 4.  Use of FFD ratios(inspired by v1) to improve initial bin use
    ratios = item / bins_remain_cap
    priorities[valid_bins] += -0.1 * np.log(ratios[valid_bins])  # Small bonus for FFD-like behavior
    
    return priorities
```
