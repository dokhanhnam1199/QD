```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines adaptive waste minimization, bin balancing, and item-aware placement
    with dynamic adjustments based on bin utilization.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-fit component (prioritize bins with minimal waste)
    size_diff = bins_remain_cap - item
    priorities[valid_bins] = 1.0 / (size_diff[valid_bins] + 0.0001)**2

    # Waste minimization penalty (discourage small wastes)
    remaining_after_fit = bins_remain_cap - item
    small_waste_penalty = np.exp(-10 * remaining_after_fit / (item + 0.0001))  # Scale by item size
    priorities[valid_bins] -= small_waste_penalty[valid_bins]

    # Bin utilization balancing (encourage moderate utilization)
    bin_capacity = np.max(bins_remain_cap)  # Use actual bin capacity
    utilization = 1 - (bins_remain_cap / bin_capacity)
    overall_utilization = np.mean(utilization)

    # Dynamic utilization penalty (adjust based on overall utilization)
    if overall_utilization < 0.3:
        extreme_utilization_penalty = 5 * np.abs(utilization - 0.2)
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = 15 * np.abs(utilization - 0.8)
    else:
        extreme_utilization_penalty = 10 * np.abs(utilization - 0.5)

    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # Item-aware placement (try to create full bins if possible)
    full_bin_potential = np.exp(-5 * np.abs(remaining_after_fit - 0.0))
    priorities[valid_bins] += full_bin_potential[valid_bins]

    # Adjust priority based on item size relative to bin size
    item_size_ratio = item / bin_capacity
    if item_size_ratio > 0.5:
        # If item is large, prefer more empty bins
        priorities[valid_bins] -= 2 * utilization[valid_bins]
    elif item_size_ratio < 0.2:
         # if item is small, prefer almost full bins
        priorities[valid_bins] += 2 * utilization[valid_bins]

    return priorities
```
