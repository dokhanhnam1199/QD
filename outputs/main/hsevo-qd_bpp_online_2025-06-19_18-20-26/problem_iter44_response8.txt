```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Dynamically adjusts waste minimization and bin balancing based on utilization."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)

    remaining_after_fit = bins_remain_cap[valid_bins] - item
    overall_utilization = np.mean(1 - (bins_remain_cap / np.max(bins_remain_cap))) if bins_remain_cap.size > 0 else 0
    waste_penalty_factor = 5 + 10 * overall_utilization
    small_waste_penalty = np.exp(-waste_penalty_factor * remaining_after_fit * item)
    priorities[valid_bins] -= small_waste_penalty

    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    bin_balancing_factor = 10

    if overall_utilization < 0.4:
        extreme_utilization_penalty = bin_balancing_factor * np.abs(utilization - 0.2)
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = bin_balancing_factor * np.abs(utilization - 0.8)
    else:
        extreme_utilization_penalty = bin_balancing_factor * np.abs(utilization - 0.5)
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    exploration_probability = 0.01
    if np.random.rand() < exploration_probability:
        priorities[:] = -np.inf
        smallest_cap_index = np.argmin(bins_remain_cap)
        priorities[smallest_cap_index] = 1
        valid_bins[smallest_cap_index] = True

    return priorities
```
