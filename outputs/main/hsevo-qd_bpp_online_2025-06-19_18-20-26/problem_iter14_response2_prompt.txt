{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Enhanced priority function using best-fit, waste minimization, \n    dynamic bin balancing, and adaptive fullness bonus.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n    priorities[~valid_bins] = -np.inf\n\n    # Best-Fit component\n    size_diff = bins_remain_cap - item\n    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)**2\n\n    # Waste Minimization\n    remaining_after_fit = bins_remain_cap[valid_bins] - item\n    small_waste_penalty = np.exp(-10 * remaining_after_fit * item)\n    priorities[valid_bins] -= small_waste_penalty\n\n    # Bin Balancing\n    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))\n    overall_utilization = np.mean(utilization)\n\n    if overall_utilization < 0.3:\n        extreme_utilization_penalty = 5 * np.abs(utilization - 0.2)\n    elif overall_utilization > 0.7:\n        extreme_utilization_penalty = 15 * np.abs(utilization - 0.8)\n    else:\n        extreme_utilization_penalty = 10 * np.abs(utilization - 0.5)\n    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]\n\n    # Adaptive Fullness Bonus\n    fullness_bonus = np.exp(-5 * np.abs(bins_remain_cap / np.max(bins_remain_cap)))\n\n    if overall_utilization < 0.5:\n        priorities[valid_bins] += 2 * fullness_bonus[valid_bins] * (1 - overall_utilization)\n    elif overall_utilization < 0.8 :\n         priorities[valid_bins] +=  fullness_bonus[valid_bins] * (1 - overall_utilization)\n    else:\n        priorities[valid_bins] += 0.5 * fullness_bonus[valid_bins] * (1 - overall_utilization)\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- *   Comparing (1st) vs (20th), we see the best heuristic incorporates best-fit, waste minimization, bin balancing and adaptive bonus and the worst one only uses log ratios.\n*   (2nd) vs (19th): Similar to above.\n*   Comparing (1st) vs (2nd), the best heuristic includes dynamic waste management, adaptive parameter tuning and edge case handling while the second one does not. The first one also dynamically adjusts the small waste penalty strength based on item size.\n*   (3rd) vs (4th): The third one incorporates an adaptive waste penalty adjustment for large items when the overall utilization is high.\n*   Comparing (second worst) vs (worst), the second worst has the same implementation but more import statements.\n*   Comparing (15th) vs (16th): (15th) adds a penalty for over-utilized bins, scaling waste minimization with item size and dynamic bin balancing while (16th) lacks these features. (16th) also has a simpler waste minimization calculation without scaling with item size. (16th) has no dynamic adjustment in bin balancing\n*   Comparing (1st) vs (6th): The first heuristic incorporates dynamic waste management and adaptive tuning and adaptive waste thresholding while the other includes dynamic penalty adjustment, adaptive weighting and normalization. The first one incorporates Edge Case Handling while the (6th) one has Item-Size-Aware Adjustment.\n*   (10th) vs (11th): The tenth one is the same as the eleventh.\n*   Overall: The better heuristics include more adaptive components (dynamic waste management, adaptive parameter tuning, adaptive weighting), handle edge cases, and normalize priorities to prevent single factor domination. Simpler heuristics primarily rely on basic best-fit and waste minimization, lacking dynamic adjustments.\n- \nOkay, let's refine \"Current Self-Reflection\" to design better heuristics, avoiding the pitfalls of \"Ineffective Self-Reflection\" and aiming for actionable insights.\n\n*   **Keywords:** Adaptive heuristics, dynamic adjustment, multiple factors, robust handling, normalization, scaling, feedback.\n*   **Advice:** Design heuristics that dynamically adapt to problem state through feedback mechanisms. Integrate relevant factors with thoughtful weighting and normalization.\n*   **Avoid:** Generic statements about \"best-fit strategies\" without specifying *how* they adapt or integrate. Avoid focusing solely on bin packing specifics if you seek general principles.\n*   **Explanation:** Move beyond simply *stating* the need for adaptation; focus on the *mechanisms* by which adaptation happens (e.g., real-time performance data, input characteristics). Prioritize adaptability and robust handling.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}