```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function incorporates several heuristics, with adjustments
    and additions compared to v1:

    1.  **First Fit Decreasing (FFD) Approximation:** Bins closer in size to the item
        (but still large enough) get higher priority.  This approximates the FFD
        algorithm which is known to be reasonably effective.  We tune the impact
        of size difference.

    2.  **Waste Minimization:**  Penalizes bins where the item leaves a very small
        remaining capacity (high waste). This is crucial in online scenarios where
        future items might fit perfectly into larger waste spaces.  We adjust the
        penalty based on item size.

    3.  **Bin Utilization Balance:** Bins that are very empty or almost full are
        slightly penalized to encourage mid-range utilization, promoting a more
        balanced distribution of items across bins. This aims to avoid creating
        bins that are almost full with one item. We adjust the penalty strength.

    4. **Encourage Full Packing:** Add a bonus if the remaining capacity is within a small threshold.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. First Fit Decreasing Approximation (size proximity)
    size_diff = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (size_diff + 0.0001)  # Avoid division by zero
    size_proximity_weight = 0.8
    priorities *= size_proximity_weight

    # Consider only bins with sufficient capacity
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # 2. Waste Minimization Penalty
    remaining_after_fit = bins_remain_cap - item
    # Adjust penalty based on item size: larger items, stronger penalty
    waste_penalty_factor = 1 + (item / bin_capacity)  # Scale penalty
    small_waste_penalty = np.exp(-10 * remaining_after_fit * waste_penalty_factor)
    priorities[valid_bins] -= small_waste_penalty[valid_bins]

    # 3. Bin Utilization Balance Penalty (U-shaped utilization preference)
    utilization = (1 - (bins_remain_cap / bin_capacity))  # Fraction full, range [0, 1] where 1 is empty and 0 is full
    extreme_utilization_penalty = 5 * np.abs(utilization - 0.5)  # Reduced penalty strength
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # 4. Encourage Full Packing Bonus
    full_packing_threshold = 0.1 * bin_capacity  # Adjust threshold as needed
    nearly_full = (remaining_after_fit >= 0) & (remaining_after_fit <= full_packing_threshold)
    priorities[nearly_full] += 2 # Add a bonus when item fits nearly perfect

    return priorities
```
