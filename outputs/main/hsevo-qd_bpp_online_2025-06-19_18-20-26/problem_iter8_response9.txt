```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculate bin priorities based on best-fit, waste minimization, and dynamic bin balancing."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    size_diff_epsilon = 0.0001
    small_waste_penalty_factor = 10
    extreme_utilization_penalty_factor = 10
    target_utilization = 0.5

    # Best-Fit Approximation
    size_diff = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (size_diff + size_diff_epsilon)

    # Invalidate bins with insufficient capacity
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Waste Minimization Penalty
    remaining_after_fit = bins_remain_cap - item
    small_waste_penalty = np.exp(-small_waste_penalty_factor * remaining_after_fit)
    priorities[valid_bins] -= small_waste_penalty[valid_bins]

    # Dynamic Bin Utilization Balance Penalty
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    extreme_utilization_penalty = extreme_utilization_penalty_factor * np.abs(utilization - target_utilization)
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    return priorities
```
