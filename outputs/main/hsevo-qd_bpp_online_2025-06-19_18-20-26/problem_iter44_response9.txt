```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines adaptive best-fit and waste minimization,
    adjusting bin balancing based on item size.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Adaptive Best-Fit
    size_diff = bins_remain_cap - item
    capacity_ratio = bins_remain_cap / np.max(bins_remain_cap)
    granularity_factor = np.mean(capacity_ratio)
    priorities[valid_bins] += (1 / (size_diff[valid_bins] + 0.0001)**(granularity_factor + 1))

    # Dynamic Waste Minimization
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    item_size_factor = item / np.max(bins_remain_cap)
    waste_penalty_strength = 5 + 10 * item_size_factor
    small_waste_penalty = np.exp(-waste_penalty_strength * remaining_after_fit * item)
    priorities[valid_bins] -= small_waste_penalty

    # Bin Balancing
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    # Item-size-aware bin balancing
    if item_size_factor > 0.5:  # Large item
        target_utilization = 0.2
        penalty_strength = 5
    elif overall_utilization < 0.3:
        target_utilization = 0.2
        penalty_strength = 5
    elif overall_utilization > 0.7:
        target_utilization = 0.8
        penalty_strength = 15
    else:
        target_utilization = 0.5
        penalty_strength = 10

    extreme_utilization_penalty = penalty_strength * np.abs(utilization - target_utilization)
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # Adaptive Fullness Bonus
    fullness_level = 1 - capacity_ratio
    fullness_bonus = np.exp(-5 * np.abs(fullness_level - 1))
    bonus_strength = 1 + 5 * item_size_factor
    priorities[valid_bins] += bonus_strength * fullness_bonus[valid_bins] * (1 - np.mean(utilization))

    return priorities
```
