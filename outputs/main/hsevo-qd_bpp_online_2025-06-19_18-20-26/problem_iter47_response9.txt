```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, waste minimization with dynamic adjustments."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit: Prioritize bins with minimal waste
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)

    # Waste Minimization: Penalize small waste
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    overall_utilization = np.mean(1 - (bins_remain_cap / np.max(bins_remain_cap))) if bins_remain_cap.size > 0 else 0
    waste_penalty_factor = 5 + 10 * overall_utilization
    small_waste_penalty = np.exp(-waste_penalty_factor * remaining_after_fit * item)
    priorities[valid_bins] -= small_waste_penalty

    # Dynamic Adjustment: Capacity Ratio based on utilization
    ratios = item / bins_remain_cap
    if overall_utilization < 0.5:
      ratios_factor = 1
    else:
      ratios_factor = 5

    priorities[valid_bins] -= ratios_factor * np.log(ratios[valid_bins])

    return priorities
```
