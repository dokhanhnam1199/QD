```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An enhanced priority function for online bin packing that combines
    best-fit considerations with dynamic waste management, bin balancing,
    and a learning component.  It prioritizes bins based on a weighted
    combination of several factors, including space utilization,
    waste minimization, and bin balancing.  The weights are adjusted
    dynamically based on the overall fill level of the bins. This version
    incorporates a more robust bin balancing strategy, dynamic weight adjustments
    based on bin diversity, and a refined waste penalty.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit component with a small bias towards more full bins.
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)**2

    # Improved Waste Minimization: Discourage very small waste, adaptive penalty
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_ratio = remaining_after_fit / item
    waste_penalty = np.exp(5 * (waste_ratio - 0.5))  # Penalize more gently
    priorities[valid_bins] -= waste_penalty

    # Robust Bin Balancing
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    # Bin Diversity Metric
    bin_diversity = np.std(utilization)

    # Dynamically adjust bin balancing based on fill level and diversity.
    if overall_utilization < 0.4:
        extreme_utilization_penalty = 7 * np.abs(utilization - 0.3) #Encourage filling
    elif overall_utilization > 0.6:
        extreme_utilization_penalty = 12 * np.abs(utilization - 0.7) #Discourage further filling
    else:
        extreme_utilization_penalty = 9 * np.abs(utilization - 0.5) #Balance

    #Modulate balance penalty based on diversity
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins] * (1 + bin_diversity)

    # Adaptive component: Add a bonus to bins close to full, modulated by diversity
    fullness_bonus = np.exp(-7 * np.abs(bins_remain_cap / np.max(bins_remain_cap) - 0))

    if overall_utilization < 0.5:
        priorities[valid_bins] += 2.5 * fullness_bonus[valid_bins] * (1 - overall_utilization) * (1-bin_diversity) #more bonus to almost full bins, less if bins are diverse
    elif overall_utilization < 0.8 :
         priorities[valid_bins] +=  1.2 * fullness_bonus[valid_bins] * (1 - overall_utilization) * (1-bin_diversity)#more bonus to almost full bins, less if bins are diverse
    else:
        priorities[valid_bins] += 0.6 * fullness_bonus[valid_bins] *(1 - overall_utilization) *(1-bin_diversity) #even lower bonus, less if bins are diverse

    return priorities
```
