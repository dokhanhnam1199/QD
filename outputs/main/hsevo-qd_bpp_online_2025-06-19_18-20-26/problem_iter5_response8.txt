```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid heuristic: Combines FFD, waste minimization (adaptive), and dynamic bin balancing."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. First Fit Decreasing Approximation (size proximity)
    size_diff = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (size_diff + 0.0001)

    # Consider only bins with sufficient capacity
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # 2. Adaptive Waste Minimization Penalty (scaling with item size)
    remaining_after_fit = bins_remain_cap - item
    waste_penalty_factor = 10 + item  # Scale penalty with item size
    small_waste_penalty = np.exp(-waste_penalty_factor * remaining_after_fit)
    priorities[valid_bins] -= small_waste_penalty[valid_bins]

    # 3. Dynamic Bin Utilization Balance Penalty (adjusting target based on fill level)
    current_fill_level = 1 - np.mean(bins_remain_cap) / np.max(bins_remain_cap)
    target_utilization = 0.4 + 0.2 * current_fill_level  # Adjust target utilization
    utilization = (1 - (bins_remain_cap / np.max(bins_remain_cap)))
    extreme_utilization_penalty = 10 * np.abs(utilization - target_utilization)
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    return priorities
```
