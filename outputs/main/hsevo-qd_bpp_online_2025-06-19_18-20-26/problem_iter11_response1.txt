```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, waste minimization, adaptive fullness bonus, and dynamic penalty.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit component
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)

    # Waste Minimization
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_penalty_strength = 10 + 5 * item
    small_waste_penalty = np.exp(-waste_penalty_strength * remaining_after_fit)
    priorities[valid_bins] -= small_waste_penalty

    # Bin Utilization Balance
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)
    extreme_utilization_penalty = 10 * np.abs(utilization - 0.5)
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # Adaptive fullness bonus
    fullness_threshold = 0.1
    fullness_bonus = np.exp(-5 * np.abs(bins_remain_cap / np.max(bins_remain_cap)))
    priorities[valid_bins] += fullness_bonus[valid_bins] * (1 - overall_utilization)

    return priorities
```
