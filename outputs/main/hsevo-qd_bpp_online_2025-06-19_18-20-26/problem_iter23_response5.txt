```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines adaptive waste penalty and dynamic bin balancing."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)**2

    # Waste Minimization (Adaptive)
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    overall_utilization = np.mean(1 - (bins_remain_cap / np.max(bins_remain_cap)))

    if item > 0.5:
        waste_penalty_factor = 2 if overall_utilization > 0.6 else 1
    else:
        waste_penalty_factor = 1

    small_waste_penalty = np.exp(-10 * remaining_after_fit * item)
    priorities[valid_bins] -= waste_penalty_factor * small_waste_penalty

    # Bin Balancing (Dynamic)
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    if overall_utilization < 0.3:
        extreme_utilization_penalty = 5 * np.abs(utilization - 0.2)
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = 15 * np.abs(utilization - 0.8)
    else:
        extreme_utilization_penalty = 10 * np.abs(utilization - 0.5)

    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    return priorities
```
