```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, waste management, and adaptive scaling."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit Component
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)**2

    # Waste Minimization with adaptive scaling
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_ratio = remaining_after_fit / (item + 0.0001)  #Avoid div by zero
    waste_penalty = np.exp(-10 * remaining_after_fit * item)
    
    # Scale waste penalty based on item size
    penalty_scale = 1.0
    if item > 0.5:
        penalty_scale = 2.0
    elif item < 0.2:
        penalty_scale = 0.5
    priorities[valid_bins] -= penalty_scale * waste_penalty
    
    # Normalize priorities
    max_priority = np.max(priorities[np.isfinite(priorities)])
    min_priority = np.min(priorities[np.isfinite(priorities)])
    if max_priority > min_priority:
        priorities[np.isfinite(priorities)] = (priorities[np.isfinite(priorities)] - min_priority) / (max_priority - min_priority)

    return priorities
```
