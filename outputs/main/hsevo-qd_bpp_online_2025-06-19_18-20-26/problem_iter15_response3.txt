```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A refined priority function for online bin packing, incorporating dynamic
    weighting based on fill levels, waste minimization, and bin balancing,
    with enhancements for robustness and adaptability.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # 1. Best-Fit with Adjusted Sensitivity:
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.001)**1.5 # Reduced exponent sensitivity

    # 2. Dynamic Waste Minimization:
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_ratio = remaining_after_fit / np.max(bins_remain_cap)
    waste_penalty = np.exp(5 * (waste_ratio - 0.25))  # Peak penalty around 25% waste
    priorities[valid_bins] -= waste_penalty

    # 3. Enhanced Bin Balancing with Adaptive Targets:
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)
    target_utilization = 0.6  # Start with a moderate target

    # Adjust the target utilization based on overall fill level:
    if overall_utilization < 0.4:
        target_utilization = 0.8  # Encourage higher filling if bins are sparse
    elif overall_utilization > 0.8:
        target_utilization = 0.3 # Keep adding new bins if we already have a lot of bins filled

    balance_penalty = 10 * np.abs(utilization - target_utilization)
    priorities[valid_bins] -= balance_penalty[valid_bins]
    # 4. Adaptive Fullness Bonus with Sigmoid Weighting
    fullness_level = 1 - bins_remain_cap / np.max(bins_remain_cap)
    fullness_bonus = np.exp(-5 * np.abs(fullness_level - 1))  # Max bonus for nearly full bins

    # Sigmoid function to dynamically scale the bonus
    sigmoid_weight = 1 / (1 + np.exp(10 * (overall_utilization - 0.5))) #sharp transition around 0.5
    priorities[valid_bins] += 2 * sigmoid_weight * fullness_bonus[valid_bins]

    # 5. Add a small randomization to break ties
    priorities[valid_bins] += np.random.normal(0, 0.001, size=np.sum(valid_bins))

    return priorities
```
