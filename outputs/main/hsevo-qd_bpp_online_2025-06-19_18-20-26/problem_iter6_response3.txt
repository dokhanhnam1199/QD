```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An enhanced priority function for online bin packing that adaptively balances best fit,
    waste minimization, bin utilization, and considers item size relative to bin capacity.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best Fit component, emphasizes tighter fits
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)**1.5 # Adjusted exponent

    # Waste Minimization, penalizes leaving small waste
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_ratio = remaining_after_fit / bins_remain_cap[valid_bins]  # Waste relative to bin size
    small_waste_penalty = np.exp(-5 * waste_ratio)  # Tuned penalty strength
    priorities[valid_bins] -= small_waste_penalty

    # Bin Balancing and Utilization
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    # Dynamic Utilization Penalty: More aggressive at extreme utilizations
    if overall_utilization < 0.3:
        extreme_utilization_penalty = 7.5 * np.abs(utilization - 0.2)  # Stronger penalty
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = 22.5 * np.abs(utilization - 0.8) # Stronger penalty
    else:
        extreme_utilization_penalty = 12.5 * np.abs(utilization - 0.5) # Stronger penalty

    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # Item Size Consideration: Discourage placing large items into nearly full bins
    item_ratio = item / np.max(bins_remain_cap)  # Item size relative to max bin size
    nearly_full_penalty = np.where(bins_remain_cap[valid_bins] < 1.2 * item, 5 * item_ratio, 0)  # Threshold at 1.2x item size
    priorities[valid_bins] -= nearly_full_penalty

    return priorities
```
