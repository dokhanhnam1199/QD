```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A priority function for online bin packing that dynamically adapts to the
    problem state, considering the item size, bin capacities, and overall
    fill levels. It uses a multi-faceted approach, prioritizing bins based on
    a combination of best-fit, waste minimization, bin balancing, and adaptive
    exploration/exploitation based on performance feedback.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    if not np.any(valid_bins):
        return priorities

    # 1. Best-Fit Component (with adaptive scaling)
    size_diff = bins_remain_cap - item
    best_fit_priority = 1.0 / (size_diff[valid_bins] + 0.0001)**2
    
    # Scale best-fit based on item size.  Larger items need tighter fits.
    best_fit_scale = np.clip(item, 0.1, 1.0)  # Scale between 0.1 and 1.0
    priorities[valid_bins] += best_fit_scale * best_fit_priority

    # 2. Waste Minimization (with dynamic threshold)
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    
    # Dynamic waste threshold based on average remaining capacity
    avg_remaining = np.mean(bins_remain_cap)
    waste_threshold = np.clip(0.1 * avg_remaining, 0.01, 0.2)  # 1-20% average
    
    small_waste_penalty = np.where(remaining_after_fit <= waste_threshold,
                                   np.exp(-10 * remaining_after_fit / waste_threshold),
                                   0.0)
    priorities[valid_bins] -= small_waste_penalty

    # 3. Bin Balancing (Adaptive, using Gini coefficient for imbalance)
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    
    # Calculate Gini coefficient to measure utilization imbalance.
    n = len(utilization)
    utilization_sorted = np.sort(utilization)
    index = np.arange(1, n + 1)
    gini = np.sum((2 * index - n  - 1) * utilization_sorted) / (n * np.sum(utilization_sorted)) if np.sum(utilization_sorted) > 0 else 0
        
    # Penalize extreme utilizations more when imbalance is high
    bin_balance_penalty = np.abs(utilization - np.mean(utilization)) * gini * 10
    priorities[valid_bins] -= bin_balance_penalty[valid_bins]

    # 4. Exploration/Exploitation (Adaptive, based on item size and imbalance)
    # Encourage exploration (using less-full bins) when items are small
    # or imbalance is high. Exploit best-fit when items are large.
    exploration_bonus = (1 - utilization) * (item + gini)
    priorities[valid_bins] += 0.5 * exploration_bonus[valid_bins]
    
    # 5. Avoiding overly full bins.
    fullness_level = bins_remain_cap / np.max(bins_remain_cap)
    overfull_penalty = np.where(fullness_level < 0.1, np.exp(10 * (fullness_level - 0.1)), 0)
    priorities[valid_bins] -= overfull_penalty[valid_bins]
    

    return priorities
```
