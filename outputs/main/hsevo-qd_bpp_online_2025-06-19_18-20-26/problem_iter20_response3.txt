```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive priority function combining best-fit, waste minimization, 
    bin balancing, and item-size awareness with normalization."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # 1. Best-Fit Component
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)**2

    # 2. Waste Minimization
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_ratio = remaining_after_fit / item
    small_waste_penalty = np.exp(-15 * remaining_after_fit * item)

    penalty_weight = 1.0
    if item > 0.5:
        penalty_weight = 2.0
    elif item < 0.2:
        penalty_weight = 0.5

    priorities[valid_bins] -= penalty_weight * small_waste_penalty

    # 3. Bin Balancing
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    target_utilization = 0.5
    if overall_utilization < 0.3:
        target_utilization = 0.2
    elif overall_utilization > 0.7:
        target_utilization = 0.8

    extreme_utilization_penalty = 10 * np.abs(utilization - target_utilization)
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # 4. Item-Size-Aware Adjustment
    if item > 0.6:
      tight_fit_bonus = np.exp(-20*(bins_remain_cap[valid_bins]-item)**2)
      priorities[valid_bins] += 0.7 * tight_fit_bonus

    # 5. Normalization
    max_priority = np.max(priorities[np.isfinite(priorities)])
    min_priority = np.min(priorities[np.isfinite(priorities)])

    if max_priority > min_priority:
        priorities[np.isfinite(priorities)] = (priorities[np.isfinite(priorities)] - min_priority) / (max_priority - min_priority)

    return priorities
```
