```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function incorporates several heuristics with improved weighting and adaptive components:

    1.  **First Fit Decreasing (FFD) Approximation:** Bins closer in size to the item
        (but still large enough) get higher priority.

    2.  **Waste Minimization (Adaptive):** Penalizes bins where the item leaves a very small
        remaining capacity. The penalty strength is adaptive based on the item size. Smaller items
        get a higher waste penalty to avoid fragmenting space for potentially larger items.

    3.  **Bin Utilization Balance (Sigmoid):** Employs a sigmoid function to smoothly penalize bins
        that are either too empty or too full, encouraging mid-range utilization.

    4. **Lookahead (Limited):** Adds a small bonus to bins that, after placing the current item,
       have enough capacity to fit a fraction of the *largest* items seen so far.  This very
       basic lookahead tries to reserve space for potentially big future arrivals. We will assume largest item size is item itself since it is online.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. First Fit Decreasing Approximation (size proximity)
    size_diff = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (size_diff + 0.0001)

    # Consider only bins with sufficient capacity
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # 2. Waste Minimization Penalty (Adaptive)
    remaining_after_fit = bins_remain_cap - item
    # Adaptive penalty: smaller items get larger waste penalty
    waste_penalty_strength = 10 + (1 / (item + 0.01))  # Smaller item -> Larger penalty
    small_waste_penalty = np.exp(-waste_penalty_strength * remaining_after_fit)
    priorities[valid_bins] -= small_waste_penalty[valid_bins]

    # 3. Bin Utilization Balance Penalty (Sigmoid)
    utilization = 1 - (bins_remain_cap / bin_capacity)  # Fraction full
    # Sigmoid function to penalize extreme utilizations
    utilization_penalty = 5 * (1 / (1 + np.exp(-10 * (utilization - 0.5))))
    priorities[valid_bins] -= utilization_penalty[valid_bins]

    # 4. Lookahead (Limited)
    # Bonus for bins that can still fit a fraction (e.g., 0.5) of largest item
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    lookahead_bonus = (remaining_after_fit > (0.5 * item)).astype(float) * 2 # Add a bonus of 2 if true

    temp_priorities = np.zeros_like(bins_remain_cap, dtype = float)
    temp_priorities[valid_bins] = lookahead_bonus
    priorities += temp_priorities

    return priorities
```
