```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Uses a combination of remaining capacity and wasted space to determine priority.
    Prioritizes bins that can accommodate the item well without excessive waste.
    Also incorporates a factor to encourage filling bins completely.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            wasted_space = cap - item
            # Priority is higher for bins with smaller wasted space, scaled by remaining capacity.
            # A small offset is added to avoid division by zero in cases where cap is very small
            priorities[i] = (cap / (wasted_space + 0.001)) + (item / cap)  # Added a second term

            #Bonus if the item nearly fills the bin.
            if wasted_space < 0.1:
                 priorities[i] += 5 #bonus for near complete filling. Can tweak

        else:
            priorities[i] = -np.inf  # Disqualify bins that are too small

    return priorities
```
