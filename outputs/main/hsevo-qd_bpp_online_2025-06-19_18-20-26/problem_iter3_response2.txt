```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function builds upon v1 with several key improvements:

    1.  **Dynamic Waste Penalty:** The waste penalty is now dynamically adjusted
        based on the item size. Larger items are penalized more for leaving small
        waste, as that waste is less likely to be useful.

    2.  **Capacity-Aware Utilization Balancing:** The utilization balancing is modified to
        consider the remaining capacity. Bins with larger remaining capacity are
        penalized less for being empty, as they might be suitable for future large items.

    3. **Introduce Best-Fit component**: Add a priority boost for bins that can fit the item with the least waste.

    4.  **Adaptive Priority Scaling:**  Scale the First Fit, Waste, and Utilization
        components dynamically based on the item size and remaining bin capacities.
        This provides better relative weighting.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. First Fit Decreasing Approximation (size proximity)
    size_diff = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (size_diff + 0.0001)  # Avoid division by zero

    # Consider only bins with sufficient capacity
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # 2. Dynamic Waste Minimization Penalty
    remaining_after_fit = bins_remain_cap - item
    # Waste penalty is now scaled by item size and remaining capacity
    waste_penalty_scale = np.clip(item / bin_capacity, 0.1, 1.0)  # Scale based on item size relative to max bin size
    small_waste_penalty = np.exp(-10 * remaining_after_fit * waste_penalty_scale)
    priorities[valid_bins] -= small_waste_penalty[valid_bins]

    # 3. Capacity-Aware Bin Utilization Balance Penalty
    utilization = (1 - (bins_remain_cap / bin_capacity))  # Fraction full
    # Scale the utilization penalty based on available capacity; less penalty for larger remaining capacity
    capacity_aware_penalty_scale = np.clip(bins_remain_cap / bin_capacity, 0.1, 1.0)
    extreme_utilization_penalty = 10 * np.abs(utilization - 0.5) * capacity_aware_penalty_scale

    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # 4. Best-Fit component boost:
    best_fit_bonus = np.zeros_like(bins_remain_cap, dtype=float)
    best_fit_indices = np.where(valid_bins)[0]
    if len(best_fit_indices) > 0:
        min_waste = np.inf
        best_bin_index = -1
        for i in best_fit_indices:
            if remaining_after_fit[i] < min_waste:
                min_waste = remaining_after_fit[i]
                best_bin_index = i
        if best_bin_index != -1:
            best_fit_bonus[best_bin_index] = 1

    priorities += best_fit_bonus
    return priorities
```
