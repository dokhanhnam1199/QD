```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A dynamic priority function for online bin packing that adapts based on
    bin fill levels, item sizes, and waste characteristics. It aims to
    balance best-fit, waste minimization, and bin utilization, while
    dynamically adjusting parameters based on problem state.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # --- Best-Fit Component with Size-Aware Adjustment ---
    size_diff = bins_remain_cap - item
    # Normalize size difference by item size for relative fit
    normalized_size_diff = size_diff / item
    priorities[valid_bins] += 1.0 / (normalized_size_diff[valid_bins]**2 + 0.0001)


    # --- Waste Minimization with Dynamic Waste Threshold ---
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    # Adaptive waste threshold based on item size (e.g., no waste > item/2)
    waste_threshold = item / 2.0
    waste_penalty_factor = 5.0  # Adjust penalty strength
    waste_penalty = np.where(remaining_after_fit > 0, np.exp(waste_penalty_factor * (remaining_after_fit - waste_threshold)), 0)
    priorities[valid_bins] -= waste_penalty

    # --- Bin Balancing and Utilization-Based Adjustment ---
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    # Dynamic bin balancing based on overall utilization
    utilization_penalty_factor = 10.0  # Adjust penalty strength

    if overall_utilization < 0.4:
        # Encourage filling bins if overall utilization is low
        target_utilization = 0.6
    elif overall_utilization > 0.6:
        # Discourage filling if bins are already full
        target_utilization = 0.4
    else:
        target_utilization = 0.5

    utilization_penalty = utilization_penalty_factor * np.abs(utilization - target_utilization)
    priorities[valid_bins] -= utilization_penalty[valid_bins]

    # --- Item-Size-Aware Fullness Bonus ---
    fullness_level = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    fullness_bonus = np.exp(-5 * np.abs(fullness_level - 1))  # Closer to full = higher bonus

    # Adjust bonus based on item size and overall utilization
    bonus_weight = (1 - overall_utilization) * (item / np.max(bins_remain_cap))  # Larger items get larger weight

    priorities[valid_bins] += bonus_weight * fullness_bonus[valid_bins]

    return priorities
```
