```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Reward bins where the item fits
    can_fit = item <= bins_remain_cap
    priorities[can_fit] += 1

    # Prefer bins that have small remainders after packing
    remainders = bins_remain_cap - item
    remainders[remainders < 0] = np.inf  # Penalize bins where the item does not fit
    priorities[can_fit] += (1 / (1 + remainders[can_fit]))  # Higher priority for smaller remainders

    # If an empty bin exists, prioritize it, even if others can fit it better
    empty_bin_indices = np.where(bins_remain_cap == bins_remain_cap.max())[0]
    if empty_bin_indices.size > 0: # Prioritize empty bins slightly higher
        priorities[empty_bin_indices] += 0.5

    # Add a small amount of random noise to break ties deterministically and promote exploration
    priorities += np.random.rand(len(bins_remain_cap)) * 0.001

    return priorities
```
