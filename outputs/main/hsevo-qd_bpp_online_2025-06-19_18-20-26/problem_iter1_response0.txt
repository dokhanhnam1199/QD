```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate the remaining capacity after adding the item.
    remaining_capacities = bins_remain_cap - item

    # Give a high priority to bins where the item fits and the remaining capacity is minimized.
    # Avoid bins where the item doesn't fit (set to -np.inf).
    
    fit_mask = remaining_capacities >= 0
    
    if np.any(fit_mask):
      priorities[fit_mask] = 1 / (remaining_capacities[fit_mask] + 1e-9)  # Avoid division by zero
      
      # Give higher priority to bins that are closer to full *after* packing
      # priorities[fit_mask] += (1 - remaining_capacities[fit_mask]/np.max(bins_remain_cap))

      # Slightly favor bins that were already somewhat full. Helps consolidate
      original_ratio = (np.max(bins_remain_cap) - bins_remain_cap[fit_mask]) / np.max(bins_remain_cap)

      priorities[fit_mask] += original_ratio * 0.1
    else:
        priorities[:] = -np.inf

    return priorities
```
