```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit, waste minimization, bin balancing, and adaptive weighting 
    based on item size and bin utilization to improve bin packing efficiency.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    avg_bin_capacity = np.mean(bins_remain_cap)
    item_ratio = item / avg_bin_capacity

    # Best-Fit (dynamically scaled)
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += (1.0 / (size_diff[valid_bins] + 0.0001)**2) * (1 + item_ratio)

    # Waste Minimization (adaptive penalty)
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_penalty_factor = 10 + 5 * item_ratio
    small_waste_penalty = np.exp(-waste_penalty_factor * remaining_after_fit * item)
    priorities[valid_bins] -= small_waste_penalty

    # Bin Balancing (dynamic penalty based on utilization)
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    if overall_utilization < 0.3:
        extreme_utilization_penalty = 8 * np.abs(utilization - 0.2) * (1 + item_ratio)
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = 20 * np.abs(utilization - 0.8) * (1 + item_ratio)
    else:
        extreme_utilization_penalty = 12 * np.abs(utilization - 0.5) * (1 + item_ratio)

    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]
    
    # Refined Edge Case Handling: Favor bins close to item size and balance capacity
    close_to_item = np.abs(bins_remain_cap - item) / (item + 0.0001)  # Avoid division by zero
    capacity_ratio = bins_remain_cap / np.max(bins_remain_cap)

    # Combining criteria: close to item size, but not nearly full or nearly empty
    edge_case_bonus = np.exp(-5 * close_to_item) * (capacity_ratio > 0.1) * (capacity_ratio < 0.9)

    priorities[valid_bins] += 0.5 * edge_case_bonus[valid_bins]

    return priorities
```
