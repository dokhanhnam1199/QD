```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Aims to balance bin usage and avoid fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give high priority to bins that can fit the item.
    # Avoids leaving too small gaps in bins
    fit_indices = bins_remain_cap >= item
    priorities[fit_indices] = 1.0

    # If no bin perfectly fits the item, give a penalty proportional
    # to waste and remaining capacity
    waste = bins_remain_cap - item
    # small waste -> less fragmentation
    waste_penalty = np.where(waste > 0, np.exp(-waste), -np.inf)

    # Bins with larger remaining capacity are favored to balance load
    capacity_reward = bins_remain_cap / np.max(bins_remain_cap)
    priorities += waste_penalty * capacity_reward * 0.5 # scale down

    # Set to -inf priority for bins that can't contain the item
    priorities[bins_remain_cap < item] = -np.inf

    return priorities
```
