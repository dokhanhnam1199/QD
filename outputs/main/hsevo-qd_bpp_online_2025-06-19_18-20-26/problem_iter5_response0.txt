```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines FFD, waste minimization, and adaptive bin balancing."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. First Fit Decreasing Approximation
    size_diff = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (size_diff + 1e-6)  # Avoid division by zero

    # Only consider bins with sufficient capacity
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # 2. Waste Minimization Penalty (Adaptive to item size)
    remaining_after_fit = bins_remain_cap - item
    waste_threshold = 0.1 * item  # Allow waste up to 10% of item size
    small_waste_penalty = np.where(remaining_after_fit > 0, np.exp(-10 * remaining_after_fit / (waste_threshold + 1e-6)), 0)  # Scale penalty by item size
    priorities[valid_bins] -= small_waste_penalty[valid_bins]

    # 3. Bin Utilization Balancing (Dynamic target)
    current_fill = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    target_utilization = np.mean(current_fill)  # adapt to avg fill
    utilization_penalty = 5 * np.abs(current_fill - target_utilization) #Adjust penalty based on current fill level
    priorities[valid_bins] -= utilization_penalty[valid_bins]
    
    return priorities
```
