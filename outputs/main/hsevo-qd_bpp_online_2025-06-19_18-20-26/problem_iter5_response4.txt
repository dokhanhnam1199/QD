```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines FFD, waste minimization, and adaptive bin balancing."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. FFD approximation
    size_diff = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (size_diff + 0.0001)

    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # 2. Adaptive Waste Minimization
    remaining_after_fit = bins_remain_cap - item
    waste_threshold = 0.1 * np.max(bins_remain_cap) # Adaptive waste threshold
    small_waste_penalty = np.where(remaining_after_fit > 0, np.exp(-10 * remaining_after_fit / waste_threshold),0)
    priorities[valid_bins] -= small_waste_penalty[valid_bins]

    # 3. Dynamic Bin Balancing
    utilization = (1 - (bins_remain_cap / np.max(bins_remain_cap)))
    avg_utilization = np.mean(utilization)
    utilization_penalty_scale = 1.0 + 5 * np.abs(avg_utilization - 0.5) # Scales penalty
    extreme_utilization_penalty = utilization_penalty_scale * np.abs(utilization - 0.5)
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    return priorities
```
