```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function incorporates several heuristics, building upon v1:

    1.  **First Fit Decreasing (FFD) Approximation:** Bins closer in size to the item
        (but still large enough) get higher priority.

    2.  **Waste Minimization:**  Penalizes bins where the item leaves a very small
        remaining capacity (high waste).

    3.  **Bin Utilization Balance:** Bins that are very empty or almost full are
        slightly penalized to encourage mid-range utilization.

    4. **Adaptive Waste Penalty:** The waste penalty is adjusted based on the
       remaining capacity of all bins. If overall capacity is low, the waste penalty
       is reduced, encouraging filling bins even with smaller remaining space.

    5. **Item Size Consideration:** The priority is scaled by the item size, giving
       larger items a preference for bins that fit them well (to avoid fragmentation
       from many small items).

    6. **Dynamic Utilization Target:** The target utilization for the utilization balance
        penalty is dynamically adjusted based on item size. Larger items shift the
        target towards higher utilization. This helps to avoid over-penalizing near-full
        bins when packing larger items.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. First Fit Decreasing Approximation (size proximity)
    size_diff = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (size_diff + 0.0001)

    # Consider only bins with sufficient capacity
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # 2. Waste Minimization Penalty
    remaining_after_fit = bins_remain_cap - item
    waste_penalty_factor = 10
    small_waste_penalty = np.exp(-waste_penalty_factor * remaining_after_fit)
    priorities[valid_bins] -= small_waste_penalty[valid_bins]

    # 3. Bin Utilization Balance Penalty (U-shaped utilization preference)
    max_bin_capacity = np.max(bins_remain_cap)
    utilization = (1 - (bins_remain_cap / max_bin_capacity))  # Fraction full, range [0, 1]

    # 6. Dynamic Utilization Target
    utilization_target = 0.5 + 0.2 * item  # Shift target based on item size
    utilization_target = np.clip(utilization_target, 0.3, 0.7)  # Keep target within reasonable bounds

    extreme_utilization_penalty = 10 * np.abs(utilization - utilization_target)
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # 4. Adaptive Waste Penalty: Adjust waste penalty based on overall capacity
    total_remaining_capacity = np.sum(bins_remain_cap)
    capacity_ratio = total_remaining_capacity / (len(bins_remain_cap) * max_bin_capacity)  # ratio of rem capacity
    waste_penalty_scaling = np.clip(capacity_ratio * 2, 0.1, 1.0)  # scale the waste pen if capacity is low
    priorities[valid_bins] += waste_penalty_scaling * small_waste_penalty[valid_bins]


    # 5. Item Size Consideration: Scale priority by item size
    priorities[valid_bins] *= item

    return priorities
```
