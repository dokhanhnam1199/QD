```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A dynamic priority function for online bin packing that adaptively combines
    best-fit, waste minimization, bin balancing, and item-size awareness,
    adjusting weights based on overall bin fill level and item size.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # 1. Best-Fit Component (Adaptive Weighting)
    size_diff = bins_remain_cap - item
    best_fit_priority = 1.0 / (size_diff[valid_bins] + 0.0001)**2
    overall_fill = 1 - np.mean(bins_remain_cap / np.max(bins_remain_cap))
    best_fit_weight = 0.7 if overall_fill < 0.6 else 0.5 if overall_fill < 0.8 else 0.3
    priorities[valid_bins] += best_fit_weight * best_fit_priority

    # 2. Waste Minimization (Item-Size Dependent)
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_ratio = remaining_after_fit / item  # Waste relative to item size
    waste_penalty = np.exp(5 * (waste_ratio - 0.5))  # Penalize significant waste
    priorities[valid_bins] -= 0.5 * waste_penalty

    # 3. Bin Balancing (Dynamic Target Utilization)
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    target_utilization = 0.6 if overall_fill < 0.5 else 0.7 if overall_fill < 0.75 else 0.85
    bin_balance_penalty = 10 * np.abs(utilization - target_utilization)
    priorities[valid_bins] -= 0.3 * bin_balance_penalty[valid_bins]

    # 4. Item-Size Awareness (Prioritize Fitting Large Items)
    item_size_ratio = item / np.max(bins_remain_cap)  # Item size relative to bin size
    large_item_bonus = np.exp(-5 * item_size_ratio)
    priorities[valid_bins] += 0.2 * large_item_bonus[valid_bins]

    # 5. Encourage filling almost full bins
    fullness_bonus = np.exp(-5 * np.abs(bins_remain_cap[valid_bins] / np.max(bins_remain_cap) - 0.0))
    priorities[valid_bins] += 0.3 * fullness_bonus

    # Normalize priorities to avoid domination by any single factor
    if np.max(priorities[valid_bins]) > -np.inf:
        priorities[valid_bins] /= np.max(priorities[valid_bins])

    return priorities
```
