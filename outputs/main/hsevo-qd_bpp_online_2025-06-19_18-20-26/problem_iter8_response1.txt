```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, waste minimization, and adaptive bin balancing."""

    size_diff_epsilon = 0.0001
    small_waste_penalty_factor = 10
    extreme_utilization_penalty_factor_low = 5
    extreme_utilization_penalty_factor_high = 15
    extreme_utilization_penalty_factor_mid = 10
    target_utilization_low = 0.2
    target_utilization_high = 0.8
    target_utilization_mid = 0.5


    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    size_diff = bins_remain_cap - item
    priorities[valid_bins] = 1.0 / (size_diff[valid_bins] + size_diff_epsilon)**2

    remaining_after_fit = bins_remain_cap - item
    small_waste_penalty = np.exp(-small_waste_penalty_factor * remaining_after_fit * item)
    priorities[valid_bins] -= small_waste_penalty[valid_bins]

    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    if overall_utilization < 0.3:
        extreme_utilization_penalty = extreme_utilization_penalty_factor_low * np.abs(utilization - target_utilization_low)
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = extreme_utilization_penalty_factor_high * np.abs(utilization - target_utilization_high)
    else:
        extreme_utilization_penalty = extreme_utilization_penalty_factor_mid * np.abs(utilization - target_utilization_mid)

    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]
    return priorities
```
