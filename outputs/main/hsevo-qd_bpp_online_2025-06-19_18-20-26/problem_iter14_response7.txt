```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit emphasis, adaptive waste minimization, and dynamic bin balancing with normalization."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    # 1. Best Fit (Squared Difference)
    size_diff = bins_remain_cap - item
    priorities[valid_bins] = 1.0 / (size_diff[valid_bins] + 0.0001)**2
    priorities[~valid_bins] = -np.inf

    # 2. Adaptive Waste Penalty
    remaining_after_fit = bins_remain_cap - item
    waste_penalty = np.exp(-10 * remaining_after_fit * item)
    priorities[valid_bins] -= waste_penalty[valid_bins]

    # 3. Dynamic Bin Balancing
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)
    if overall_utilization < 0.3:
        utilization_penalty = 5 * np.abs(utilization - 0.2)
    elif overall_utilization > 0.7:
        utilization_penalty = 15 * np.abs(utilization - 0.8)
    else:
        utilization_penalty = 10 * np.abs(utilization - 0.5)
    priorities[valid_bins] -= utilization_penalty[valid_bins]

    # 4. Over-utilization Penalty
    almost_full = (bins_remain_cap - item) < 0.1 * np.max(bins_remain_cap)
    priorities[almost_full & valid_bins] -= 20

    # 5. Priority Normalization
    if np.any(np.isfinite(priorities)):
        max_priority = np.max(priorities[np.isfinite(priorities)])
        min_priority = np.min(priorities[np.isfinite(priorities)])
        if max_priority > min_priority:  # Avoid division by zero
            priorities[np.isfinite(priorities)] = (priorities[np.isfinite(priorities)] - min_priority) / (max_priority - min_priority)
    else:
        priorities[:] = 0.0  # All bins are invalid

    return priorities
```
