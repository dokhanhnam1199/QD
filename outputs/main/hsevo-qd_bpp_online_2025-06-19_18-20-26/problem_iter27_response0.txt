```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An enhanced priority function for online bin packing that dynamically
    adjusts weights and incorporates a bin-opening penalty. This version
    aims to improve bin utilization and reduce the number of bins used
    by dynamically adapting to the current state of the bin packing process.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # 1. Best-Fit Component (Enhanced):
    # Prioritize bins with the smallest remaining space after placing the item.
    # Add a small constant to avoid division by zero and to differentiate bins.
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 10.0 / (size_diff[valid_bins] + 0.001)**2

    # 2. Waste Minimization (Adaptive):
    # Penalize bins that would result in very small or very large waste,
    # adapting the penalty based on overall fill level.
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    overall_fill = 1 - np.mean(bins_remain_cap / np.max(bins_remain_cap))

    # Adaptive penalty for small waste
    small_waste_threshold = 0.1  # Adjust as needed, relative to bin capacity
    small_waste_penalty = np.where(remaining_after_fit <= small_waste_threshold,
                                    np.exp(-20 * remaining_after_fit / (small_waste_threshold+0.001)),
                                    0)  # Exponential penalty
    priorities[valid_bins] -= small_waste_penalty

    # Adaptive penalty for large waste
    large_waste_threshold = 0.7
    large_waste_penalty = np.where(remaining_after_fit >= large_waste_threshold,
                                    np.exp(-5 * (1-remaining_after_fit) / (1-large_waste_threshold + 0.001)),
                                    0)

    priorities[valid_bins] -= large_waste_penalty

    # 3. Bin Balancing (Dynamic):
    # Encourage filling bins to a balanced level, adjusting the target level
    # based on the overall fill level.
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    target_utilization = 0.6 if overall_fill < 0.5 else 0.8 # Adjust target
    bin_balancing_penalty = 5 * np.abs(utilization[valid_bins] - target_utilization)
    priorities[valid_bins] -= bin_balancing_penalty

    # 4. Bin Opening Penalty:
    # Introduce a penalty for using a nearly empty bin to discourage unnecessary bin usage
    # Only apply to bins with remaining capacity close to full capacity
    nearly_empty_threshold = 0.95 * np.max(bins_remain_cap)
    bin_opening_penalty = np.where(bins_remain_cap > nearly_empty_threshold, 10, 0)
    priorities -= bin_opening_penalty

    # 5. Fullness Bonus (Adaptive):
    # Reward bins that are close to being full to encourage complete utilization.
    fullness_bonus = np.exp(-10 * bins_remain_cap / np.max(bins_remain_cap))
    priorities[valid_bins] += 1.5 * fullness_bonus[valid_bins] * (1 - overall_fill)  #Adaptive weight

    return priorities
```
