```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An enhanced priority function for online bin packing that combines
    best-fit considerations with dynamic waste management, bin balancing,
    and a learning component. It also introduces bin diversity
    and adjusts weights based on item size.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit component with a bias towards more full bins, scaled by item size.
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += (1.0 + item) / (size_diff[valid_bins] + 0.0001)**2

    # Waste Minimization: Discourage very small waste, adjusted by item size.
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    small_waste_penalty = np.exp(-10 * remaining_after_fit * item)
    priorities[valid_bins] -= small_waste_penalty * (1 + item)

    # Bin Balancing using utilization and overall utilization.
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    # Dynamically adjust bin balancing based on fill level and item size.
    if overall_utilization < 0.3:
        extreme_utilization_penalty = 5 * np.abs(utilization - 0.2) * (1 + item)  # Encourage filling
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = 15 * np.abs(utilization - 0.8) * (1 + item)  # Discourage further filling
    else:
        extreme_utilization_penalty = 10 * np.abs(utilization - 0.5) * (1 + item) #Balance
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # Adaptive component: Add a bonus to bins close to full.
    # Weight the bonus dynamically based on overall utilization and item size.
    fullness_bonus = np.exp(-5 * np.abs(bins_remain_cap / np.max(bins_remain_cap) - 0))

    if overall_utilization < 0.5:
        priorities[valid_bins] += 2 * fullness_bonus[valid_bins] * (1 - overall_utilization) * (1 + item) #more bonus to almost full bins
    elif overall_utilization < 0.8 :
         priorities[valid_bins] +=  fullness_bonus[valid_bins] * (1 - overall_utilization) * (1 + item) #more bonus to almost full bins
    else:
        priorities[valid_bins] += 0.5 * fullness_bonus[valid_bins] *(1 - overall_utilization) * (1 + item) #even lower bonus

    # Bin Diversity: Encourage using bins with different fill levels, weighted by item size.
    bin_diversity_factor = np.std(bins_remain_cap[valid_bins])
    priorities[valid_bins] += 0.1 * bin_diversity_factor * (1 + item)

    #Adjust priority to avoid overfilling at the end
    if item > 0.7:
        priorities[valid_bins] -= 10*(item - bins_remain_cap[valid_bins])
    return priorities
```
