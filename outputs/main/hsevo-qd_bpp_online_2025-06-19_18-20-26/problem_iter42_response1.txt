```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A refined priority function that focuses on dynamically adjusting
    the best-fit and waste minimization aspects based on overall
    bin utilization. It also adds a mechanism to occasionally open new bins
    even when existing ones have space, promoting exploration and potentially
    avoiding local optima.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf  # Invalidate bins that can't fit the item

    # Best-Fit component: Prioritize bins with minimal remaining space
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001) #avoid division by zero

    # Waste Minimization: Penalize small waste, dynamically adjusted
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    overall_utilization = np.mean(1 - (bins_remain_cap / np.max(bins_remain_cap))) if bins_remain_cap.size > 0 else 0
    waste_penalty_factor = 5 + 10 * overall_utilization  # Adjust penalty based on fill level
    small_waste_penalty = np.exp(-waste_penalty_factor * remaining_after_fit * item)
    priorities[valid_bins] -= small_waste_penalty

    # Dynamic Bin Balancing: Adjust encouragement/discouragement of filling
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    bin_balancing_factor = 10  # Adjust the strength of bin balancing

    if overall_utilization < 0.4:
        extreme_utilization_penalty = bin_balancing_factor * np.abs(utilization - 0.2)
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = bin_balancing_factor * np.abs(utilization - 0.8)
    else:
        extreme_utilization_penalty = bin_balancing_factor * np.abs(utilization - 0.5)
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # Exploration: Introduce a small probability of using a new bin
    # even if existing bins have space.
    exploration_probability = 0.01  #tune
    if np.random.rand() < exploration_probability:
        priorities[:] = -np.inf
        #find the index of smallest remaining capacity.
        smallest_cap_index = np.argmin(bins_remain_cap)
        priorities[smallest_cap_index] = 1 #set only it to valid
        valid_bins[smallest_cap_index] = True #need this to avoid runtime error

    return priorities
```
