```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Heuristic 1: Avoid fragmentation (try to fill bins as much as possible)
    # Gives higher priority to bins where the remaining capacity is close to the item size.

    diff = np.abs(bins_remain_cap - item)
    priority_fragmentation = -diff  # Smaller diff means higher priority

    # Heuristic 2: Balance usage (avoid using up bins prematurely)
    # Gives lower priority to bins that are very close to full if the item almost fill the bin
    almost_full = (bins_remain_cap - item) < 0.1 * bins_remain_cap.max() #avoid bin is full but can place one small element

    priority_balance = np.where(almost_full & (item > 0.5 * bins_remain_cap), -1000, 0) #very small number for lowest priority.

    # Heuristic 3: Prefer bins that can accommodate the item
    #  Avoid bins that are too small to hold the item

    cannot_accommodate = bins_remain_cap < item
    priority_accommodate = np.where(cannot_accommodate, -np.inf, 0) # Ensure no invalid choices.

    # Combine the heuristics to compute the final priority
    priorities = priority_fragmentation + priority_balance + priority_accommodate
    return priorities
```
