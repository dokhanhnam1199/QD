```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Dynamic priority function combining best-fit, waste management,
    and item-size awareness for online bin packing.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit Component
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)**2

    # Waste Minimization
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_ratio = remaining_after_fit / (item + 0.0001)
    small_waste_penalty = np.exp(-10 * waste_ratio)
    priorities[valid_bins] -= small_waste_penalty

    # Item-Size-Aware Adjustment
    if item > 0.5:
        tight_fit_bonus = np.exp(-20*(bins_remain_cap[valid_bins]-item)**2)
        priorities[valid_bins] += 0.7 * tight_fit_bonus

    return priorities
```
