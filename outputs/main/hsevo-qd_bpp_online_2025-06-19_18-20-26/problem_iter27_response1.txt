```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A refined priority function for online bin packing that enhances
    bin selection based on a combination of factors, including
    remaining capacity, waste minimization, bin balancing, and an adaptive
    component that adjusts behavior based on the current fill level.

    Normalization is applied to prevent dominance of single factors.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit Component (Normalized):
    size_diff = bins_remain_cap - item
    best_fit_priority = 1.0 / (size_diff[valid_bins] + 0.0001)
    best_fit_priority = best_fit_priority / np.max(best_fit_priority)  # Normalize
    priorities[valid_bins] += best_fit_priority

    # Waste Minimization (Normalized and Dampened):
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_penalty = np.exp(-5 * remaining_after_fit / item) # Focus on relative waste
    waste_penalty = waste_penalty / np.max(waste_penalty) # Normalize the waste penalty
    priorities[valid_bins] -= 0.75 * waste_penalty # Reduced Weight

    # Bin Balancing:  Encourage balanced utilization
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    # Dynamic Bin Balancing Adjustment:
    if overall_utilization < 0.4:
        balance_penalty = 2 * np.abs(utilization - 0.3)
    elif overall_utilization > 0.6:
        balance_penalty = 4 * np.abs(utilization - 0.7)
    else:
        balance_penalty = 3 * np.abs(utilization - 0.5)
    balance_penalty = balance_penalty / np.max(balance_penalty) #Normalize
    priorities[valid_bins] -= 0.5 * balance_penalty[valid_bins] #Reduced weight

    # Adaptive Fullness Bonus (More Aggressive)
    fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap)) # Fullness measure
    fullness_bonus = np.exp(-5 * np.abs(fullness - 1)) # close to full = high bonus

    if overall_utilization < 0.6:
         bonus_weight = (1 - overall_utilization) * 1.5 # increase emphasis on filling
    else:
        bonus_weight = 0.5 *(1-overall_utilization)  # De-emphasize when mostly full.
    fullness_bonus = fullness_bonus / np.max(fullness_bonus) #Normalize
    priorities[valid_bins] += bonus_weight * fullness_bonus[valid_bins]

    return priorities
```
