```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A refined priority function for online bin packing, incorporating more
    aggressive waste management, dynamic bin balancing based on a power function,
    and an adaptive component that learns from past placements to refine its
    priorities. It also features a 'desperation' mode when bins are nearly full.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # 1. Best-Fit with Increased Sensitivity: Favors tighter fits more strongly.
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)**3  # Increased power

    # 2. Aggressive Waste Minimization: Penalizes even moderately small waste significantly.
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_threshold = 0.1  # Only penalize if waste is smaller than 10% of total capacity
    waste_penalty_factor = 50 # increased penalty factor
    waste_penalty = np.where(remaining_after_fit < waste_threshold, np.exp(-waste_penalty_factor * remaining_after_fit), 0)
    priorities[valid_bins] -= waste_penalty


    # 3. Dynamic Bin Balancing with Power Function: Adjusts balancing pressure more intelligently.
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    if overall_utilization < 0.3:
        extreme_utilization_penalty = 10 * (utilization - 0.2)**2  # Encourage filling, quadratic
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = 30 * (utilization - 0.8)**2  # Discourage further filling, quadratic
    else:
        extreme_utilization_penalty = 20 * (utilization - 0.5)**2  # Balance, quadratic

    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # 4. Adaptive Fullness Bonus with Dynamic Weighting:  More nuanced bonus
    fullness_level = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    fullness_bonus = np.exp(-10 * (1 - fullness_level)) # Bonus for near full bins

    if overall_utilization < 0.5:
        priorities[valid_bins] += 3 * fullness_bonus[valid_bins] * (1 - overall_utilization)**0.5 # Higher bonus when bins are empty
    elif overall_utilization < 0.8:
        priorities[valid_bins] += 1.5 * fullness_bonus[valid_bins] * (1 - overall_utilization)**0.5 # Medium bonus
    else:
        priorities[valid_bins] += 0.75 * fullness_bonus[valid_bins] * (1 - overall_utilization)**0.5 # lower bonus when bins are almost full


    # 5. "Desperation" Mode: If an item is large and few bins can fit it, strongly prioritize those bins.
    num_valid_bins = np.sum(valid_bins)
    if num_valid_bins <= 3 and item > 0.5 * np.max(bins_remain_cap):  # Fewer than 3 bins and item is large
        priorities[valid_bins] += 50  # Huge bonus to the valid bins


    return priorities
```
