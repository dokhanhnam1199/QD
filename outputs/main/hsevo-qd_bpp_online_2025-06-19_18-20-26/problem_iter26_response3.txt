```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, waste minimization, bin balancing, and adaptive fullness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit component (similar to FFD approximation)
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)**2

    # Adaptive Waste Minimization Penalty
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    overall_utilization = np.mean(1 - (bins_remain_cap / np.max(bins_remain_cap)))
    waste_penalty_factor = 10 * (1 + overall_utilization)  # Adjust based on overall utilization
    small_waste_penalty = np.exp(-waste_penalty_factor * remaining_after_fit * item) #item aware and utilization aware
    priorities[valid_bins] -= small_waste_penalty

    # Bin Utilization Balance Penalty (U-shaped utilization preference)
    utilization = (1 - (bins_remain_cap / np.max(bins_remain_cap)))  # Fraction full, range [0, 1] where 1 is empty and 0 is full

    if overall_utilization < 0.3:
        extreme_utilization_penalty = 5 * np.abs(utilization - 0.2)
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = 15 * np.abs(utilization - 0.8)
    else:
        extreme_utilization_penalty = 10 * np.abs(utilization - 0.5) # Penalize bins that have utilization far from 0.5 (half full)
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # Adaptive Fullness Bonus
    fullness_bonus = np.exp(-5 * np.abs(bins_remain_cap / np.max(bins_remain_cap)))
    if overall_utilization < 0.5:
        priorities[valid_bins] += 2 * fullness_bonus[valid_bins] * (1 - overall_utilization)
    elif overall_utilization < 0.8 :
         priorities[valid_bins] +=  fullness_bonus[valid_bins] * (1 - overall_utilization)
    else:
        priorities[valid_bins] += 0.5 * fullness_bonus[valid_bins] * (1 - overall_utilization)

    return priorities
```
