```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Enhanced priority function combining best-fit, waste minimization, and adaptive bin balancing."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit component with a small constant to avoid division by zero
    size_diff_epsilon = 0.0001
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + size_diff_epsilon)**2

    # Waste Minimization
    small_waste_penalty_factor = 10
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    small_waste_penalty = np.exp(-small_waste_penalty_factor * remaining_after_fit * item)
    priorities[valid_bins] -= small_waste_penalty

    # Bin Balancing using utilization and overall utilization:
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)
    
    extreme_utilization_penalty_factor = 10
    target_utilization = 0.5

    # Dynamically adjust bin balancing based on fill level.
    if overall_utilization < 0.3:
        target_utilization = 0.2
        extreme_utilization_penalty_factor = 5
    elif overall_utilization > 0.7:
        target_utilization = 0.8
        extreme_utilization_penalty_factor = 15
    else:
        target_utilization = 0.5
        extreme_utilization_penalty_factor = 10

    extreme_utilization_penalty = extreme_utilization_penalty_factor * np.abs(utilization - target_utilization)  # Balance

    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # Adaptive component: Add a bonus to bins close to full.
    fullness_bonus = np.exp(-5 * np.abs(bins_remain_cap / np.max(bins_remain_cap) - 0))

    if overall_utilization < 0.5:
        priorities[valid_bins] += 2 * fullness_bonus[valid_bins] * (1 - overall_utilization)  # more bonus to almost full bins
    elif overall_utilization < 0.8:
        priorities[valid_bins] += fullness_bonus[valid_bins] * (1 - overall_utilization)  # more bonus to almost full bins
    else:
        priorities[valid_bins] += 0.5 * fullness_bonus[valid_bins] * (1 - overall_utilization)  # even lower bonus

    return priorities
```
