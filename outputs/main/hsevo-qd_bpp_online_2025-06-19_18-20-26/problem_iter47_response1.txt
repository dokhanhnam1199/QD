```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit, waste minimization, bin balancing, and 
    adaptive bonus based on item size and bin utilization.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    max_bin_cap = np.max(bins_remain_cap)
    overall_utilization = 1 - np.mean(bins_remain_cap / max_bin_cap)

    # Best-Fit with Adaptive Sensitivity
    size_diff = bins_remain_cap - item
    best_fit_scale = 1.2 + 0.8 * overall_utilization
    priorities[valid_bins] += best_fit_scale / (size_diff[valid_bins] + 0.0001)**1.5

    # Waste Minimization with Dynamic Penalties
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_ratio = remaining_after_fit / item
    small_waste_penalty = np.exp(-7 * waste_ratio)
    large_waste_penalty = np.exp(-4 / waste_ratio)
    waste_penalty_weight = 0.6 + 0.4 * overall_utilization
    priorities[valid_bins] -= (small_waste_penalty + large_waste_penalty) * waste_penalty_weight

    # Bin Balancing with Adaptive Adjustment
    utilization = 1 - (bins_remain_cap / max_bin_cap)
    extreme_utilization_penalty = np.zeros_like(utilization)

    if overall_utilization < 0.3:
        extreme_utilization_penalty = 5 * np.abs(utilization - 0.2)
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = 14 * np.abs(utilization - 0.8)
    else:
        extreme_utilization_penalty = 8 * np.abs(utilization - 0.5)

    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # Fullness Bonus with Dynamic Scaling
    fullness_bonus = np.exp(-3 * np.abs(bins_remain_cap / max_bin_cap - 0.1))
    fullness_bonus_scale = (1 - overall_utilization) * (item / max_bin_cap)

    if overall_utilization < 0.5:
        priorities[valid_bins] += 1.5 * fullness_bonus[valid_bins] * fullness_bonus_scale
    elif overall_utilization < 0.8:
        priorities[valid_bins] += 0.8 * fullness_bonus[valid_bins] * fullness_bonus_scale
    else:
        priorities[valid_bins] += 0.3 * fullness_bonus[valid_bins] * fullness_bonus_scale

    avg_bin_capacity = np.mean(bins_remain_cap[bins_remain_cap > 0]) if np.sum(bins_remain_cap > 0) > 0 else 1 # Avoid zero division
    item_size_ratio = item / avg_bin_capacity

    # Adaptive bonus for bins close to full, with dynamic weighting
    fullness_bonus2 = np.exp(-5 * np.abs(bins_remain_cap / np.max(bins_remain_cap) - 0))
    if overall_utilization < 0.5:
        bonus_weight = 2 * (1 - overall_utilization)
    elif overall_utilization < 0.8:
        bonus_weight = 1 * (1 - overall_utilization)
    else:
        bonus_weight = 0.5 * (1 - overall_utilization)

     # Item size adjustment: Small items get more bonus
    item_size_bonus_multiplier = 1 + (1 - item_size_ratio)

    priorities[valid_bins] += bonus_weight * fullness_bonus2[valid_bins] * item_size_bonus_multiplier

    return priorities
```
