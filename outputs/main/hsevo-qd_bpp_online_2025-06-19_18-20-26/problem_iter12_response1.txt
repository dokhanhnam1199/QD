```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A refined priority function that dynamically adapts to bin states and item sizes,
    aiming to minimize waste and balance bin utilization. Includes normalization,
    adaptive penalties, and a learning-inspired component based on remaining
    bin capacity distribution.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # 1. Best-Fit with Normalized Space Difference:
    size_diff = bins_remain_cap - item
    normalized_size_diff = size_diff / np.max(bins_remain_cap) #Avoid division by zero by using max cap
    priorities[valid_bins] += 1.0 / (normalized_size_diff[valid_bins] + 0.0001)**2

    # 2. Dynamic Waste Minimization: Adaptive penalty based on item size and waste.
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_ratio = remaining_after_fit / np.max(bins_remain_cap) # normalize the waste
    item_size_ratio = item / np.max(bins_remain_cap) # normalize the item size
    waste_penalty_factor = np.exp(-15 * waste_ratio * item_size_ratio)
    priorities[valid_bins] -= waste_penalty_factor

    # 3. Bin Balancing with Adaptive Utilization Targets:
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    if overall_utilization < 0.4:
        utilization_target = 0.3
        extreme_utilization_penalty = 7 * np.abs(utilization - utilization_target) #Encourage filling
    elif overall_utilization > 0.6:
        utilization_target = 0.7
        extreme_utilization_penalty = 17 * np.abs(utilization - utilization_target) #Discourage further filling
    else:
        utilization_target = 0.5
        extreme_utilization_penalty = 12 * np.abs(utilization - utilization_target) #Balance

    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # 4. "Learning" Component: Adaptive Reward for near-full bins, using more explicit logic.
    fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    fullness_bonus = np.exp(-7 * np.abs(fullness - 1))

    if overall_utilization < 0.5:
        bonus_weight = 2 * (1 - overall_utilization)
    elif overall_utilization < 0.8:
        bonus_weight = (1 - overall_utilization)
    else:
        bonus_weight = 0.5 * (1-overall_utilization)
    priorities[valid_bins] += bonus_weight * fullness_bonus[valid_bins]

    #5. Edge case handling : very small items, if an item is small compared to the bin size, apply some random number to break symmetry.
    if item_size_ratio < 0.1:
        priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.01

    return priorities
```
