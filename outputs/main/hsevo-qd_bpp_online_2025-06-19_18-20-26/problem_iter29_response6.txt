```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, waste minimization, bin balancing, and fullness bonus."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit with refined size difference
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.00001)**2 #Smaller constant

    # Waste Minimization with increased penalty
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    small_waste_penalty = np.exp(-15 * remaining_after_fit * item) # increased the exponent
    priorities[valid_bins] -= small_waste_penalty

    # Bin Balancing with more weight on extreme cases
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)
    
    if overall_utilization < 0.3:
        extreme_utilization_penalty = 8 * np.abs(utilization - 0.2)  #Increased penality weights
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = 20 * np.abs(utilization - 0.8) #Increased penality weights
    else:
        extreme_utilization_penalty = 12 * np.abs(utilization - 0.5) #Increased penality weights

    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # Adaptive Fullness Bonus.
    fullness_bonus = np.exp(-5 * np.abs(bins_remain_cap / np.max(bins_remain_cap)))

    if overall_utilization < 0.5:
        priorities[valid_bins] += 2.5 * fullness_bonus[valid_bins] * (1 - overall_utilization) # increased weights
    elif overall_utilization < 0.8 :
         priorities[valid_bins] +=  1.2 * fullness_bonus[valid_bins] * (1 - overall_utilization) # increased weights
    else:
        priorities[valid_bins] += 0.6 * fullness_bonus[valid_bins] * (1 - overall_utilization) # increased weights

    return priorities
```
