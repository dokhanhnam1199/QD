```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A priority function for online bin packing that focuses on a combination
    of best-fit, waste minimization, and bin balancing, with dynamically
    adjusted weights based on the current fill level of the bins. This version
    introduces a stronger emphasis on preventing the creation of near-empty bins
    and incorporates a more refined waste penalty.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit component with a small bias towards more full bins.
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)**2

    # Waste Minimization: Discourage very small waste, stronger penalty
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_threshold = 0.1  # Parameter to adjust waste penalty strength
    small_waste_penalty = np.where(remaining_after_fit < waste_threshold,
                                   np.exp(-5 * remaining_after_fit / waste_threshold),
                                   0)
    priorities[valid_bins] -= small_waste_penalty

    # Bin Balancing using utilization and overall utilization:
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    # Dynamically adjust bin balancing based on fill level.
    if overall_utilization < 0.3:
        extreme_utilization_penalty = 5 * np.abs(utilization - 0.2)  # Encourage filling
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = 15 * np.abs(utilization - 0.8) #Discourage further filling
    else:
        extreme_utilization_penalty = 10 * np.abs(utilization - 0.5) #Balance
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # Prevention of near-empty bins, especially when almost full
    empty_bin_threshold = 0.9  # Adjust for sensitivity to almost empty bins
    empty_bin_penalty = np.where(bins_remain_cap / np.max(bins_remain_cap) > empty_bin_threshold,
                                   20 * (bins_remain_cap / np.max(bins_remain_cap)),
                                   0)
    priorities[valid_bins] -= empty_bin_penalty[valid_bins]

    # Adaptive component: Add a bonus to bins close to full
    # Weight the bonus dynamically based on overall utilization
    fullness_bonus = np.exp(-5 * np.abs(bins_remain_cap / np.max(bins_remain_cap) - 0))

    if overall_utilization < 0.5:
        priorities[valid_bins] += 2 * fullness_bonus[valid_bins] * (1 - overall_utilization) #more bonus to almost full bins
    elif overall_utilization < 0.8 :
         priorities[valid_bins] +=  fullness_bonus[valid_bins] * (1 - overall_utilization) #more bonus to almost full bins
    else:
        priorities[valid_bins] += 0.5 * fullness_bonus[valid_bins] *(1 - overall_utilization) #even lower bonus

    return priorities
```
