```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic prioritizes bins that have enough capacity to accommodate
    the item with minimal wasted space, while also considering whether filling
    a bin partially is better in the long run to avoid too many near-empty bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities  # No suitable bin found, all priorities remain 0

    # Calculate wasted space if the item is placed in each valid bin
    wasted_space = bins_remain_cap - item
    wasted_space[~valid_bins] = np.inf  # Mark invalid bins with infinite waste

    # Prioritize bins with less wasted space, but not excessively so
    priorities[valid_bins] = -wasted_space[valid_bins]

    # Adjust priority based on the fill ratio of the bin after placement
    fill_ratios = (item) / bins_remain_cap
    fill_ratios[~valid_bins] = 0

    # Emphasize bins that will be filled to a reasonably high level
    # but penalize near-full or over-full bins severely.
    # This prevents excessive reliance on a single bin.

    priorities[valid_bins] += np.where(fill_ratios[valid_bins] >= 0.95, -100, fill_ratios[valid_bins] * 50)

    # Add small random noise to break ties and encourage exploration.
    priorities += np.random.normal(0, 0.001, size=bins_remain_cap.shape)

    return priorities
```
