```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A refined priority function for online bin packing that dynamically adjusts
    its strategy based on bin utilization and item sizes. It focuses on
    balancing bin usage, minimizing fragmentation, and adapting to different
    packing stages. This version incorporates a more robust handling of edge
    cases and normalization to ensure consistent performance.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf  # Invalidate bins that can't fit the item

    # 1. Best-Fit with Adaptive Tightness:
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)**2  # Basic best-fit

    # Adjust tightness based on overall bin utilization
    overall_utilization = 1 - np.mean(bins_remain_cap / np.max(bins_remain_cap))

    if overall_utilization < 0.4:
        # Early stage: Encourage filling bins more completely
        tightness_factor = 1.5  # More aggressive best-fit
    elif overall_utilization > 0.8:
        # Late stage: Spread items to avoid overfilling existing bins
        tightness_factor = 0.5  # Less aggressive best-fit
    else:
        tightness_factor = 1.0

    priorities[valid_bins] *= tightness_factor


    # 2. Waste Minimization with Dynamic Threshold:

    remaining_after_fit = bins_remain_cap[valid_bins] - item
    # Dynamically adjust the penalty for small waste based on item size.
    # Larger items should be packed with more consideration for waste.
    waste_penalty_scale = np.clip(item * 5, 1, 10)  # Scale penalty with item size
    small_waste_penalty = np.exp(-waste_penalty_scale * remaining_after_fit * item)
    priorities[valid_bins] -= small_waste_penalty


    # 3. Bin Balancing with Utilization Target Adjustment:

    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    # Dynamically adjust the utilization target based on overall fill level.
    if overall_utilization < 0.3:
        utilization_target = 0.4  # Encourage filling bins to at least 40%
    elif overall_utilization > 0.7:
        utilization_target = 0.6  # Encourage spreading load, target 60%
    else:
        utilization_target = 0.5  # Aim for a balanced 50% utilization

    extreme_utilization_penalty = 10 * np.abs(utilization - utilization_target)
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]


    # 4. Adaptive Fullness Bonus with Thresholding:
    # Add a bonus for bins that are close to full, but only if they are not *too* full

    fullness_threshold = 0.95  # Consider bins "full" if they're 95% utilized
    fullness_bonus = np.exp(-5 * np.abs(bins_remain_cap / np.max(bins_remain_cap) - 0)) # same as before

    if overall_utilization < 0.5:
        priorities[valid_bins] += 2 * fullness_bonus[valid_bins] * (1 - overall_utilization)  # More bonus to almost full bins
    elif overall_utilization < 0.8:
        priorities[valid_bins] += fullness_bonus[valid_bins] * (1 - overall_utilization)  # Moderate bonus
    else:
        priorities[valid_bins] += 0.5 * fullness_bonus[valid_bins] * (1 - overall_utilization)  # Lower bonus

    # 5.  Normalization (Crucial for stability):
    # Normalize priorities to a 0-1 scale for more consistent behavior.  This
    # prevents any one component from dominating the others.

    max_priority = np.max(priorities[valid_bins])
    min_priority = np.min(priorities[valid_bins])

    if max_priority > min_priority:  # Avoid division by zero
         priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority)

    return priorities
```
