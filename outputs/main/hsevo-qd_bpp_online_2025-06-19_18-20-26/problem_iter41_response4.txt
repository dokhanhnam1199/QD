```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, waste minimization, dynamic bin balancing based on fill level."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit component
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)**1.5

    # Waste Minimization: Dynamic penalty based on remaining capacity.
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_ratio = remaining_after_fit / item
    waste_penalty_strength = 5.0
    if np.mean(bins_remain_cap) > 0.7:
        waste_penalty_strength = 10.0

    small_waste_penalty = np.exp(-waste_penalty_strength * waste_ratio)
    priorities[valid_bins] -= small_waste_penalty

    # Bin Balancing with dynamic target utilization.
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)
    target_utilization = 0.5
    if overall_utilization < 0.4:
        target_utilization = 0.6
    elif overall_utilization > 0.6:
        target_utilization = 0.4

    scaling_factor = 10.0
    if np.mean(bins_remain_cap) > 0.8:
        scaling_factor = 20.0
    elif np.mean(bins_remain_cap) < 0.2:
        scaling_factor = 5.0

    extreme_utilization_penalty = scaling_factor * np.abs(utilization - target_utilization)
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    return priorities
```
