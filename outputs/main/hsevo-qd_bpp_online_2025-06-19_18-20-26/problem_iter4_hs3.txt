import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                size_diff_epsilon: float = 0.0008532347724163418,
                small_waste_penalty_factor: float = 5.801964465938566,
                extreme_utilization_penalty_factor: float = 11.256663130982213,
                target_utilization: float = 0.5878149760019806) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function incorporates several heuristics:

    1.  **First Fit Decreasing (FFD) Approximation:** Bins closer in size to the item
        (but still large enough) get higher priority.  This approximates the FFD
        algorithm which is known to be reasonably effective.

    2.  **Waste Minimization:**  Penalizes bins where the item leaves a very small
        remaining capacity (high waste). This is crucial in online scenarios where
        future items might fit perfectly into larger waste spaces.

    3.  **Bin Utilization Balance:** Bins that are very empty or almost full are
        slightly penalized to encourage mid-range utilization, promoting a more
        balanced distribution of items across bins. This aims to avoid creating
        bins that are almost full with one item.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        size_diff_epsilon: A small constant added to size_diff to avoid division by zero.
        small_waste_penalty_factor: Factor to control the strength of the small waste penalty.
        extreme_utilization_penalty_factor: Factor to control the strength of the extreme utilization penalty.
        target_utilization: The target utilization level (fraction full) for balancing.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. First Fit Decreasing Approximation (size proximity)
    size_diff = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (size_diff + size_diff_epsilon)  # Avoid division by zero and give preference to bins closest to item size. Small constant added to size_diff

    # Consider only bins with sufficient capacity
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # 2. Waste Minimization Penalty
    remaining_after_fit = bins_remain_cap - item
    small_waste_penalty = np.exp(-small_waste_penalty_factor * remaining_after_fit)
    priorities[valid_bins] -= small_waste_penalty[valid_bins]

    # 3. Bin Utilization Balance Penalty (U-shaped utilization preference)
    utilization = (1 - (bins_remain_cap / np.max(bins_remain_cap)))  # Fraction full, range [0, 1] where 1 is empty and 0 is full
    extreme_utilization_penalty = extreme_utilization_penalty_factor * np.abs(utilization - target_utilization) # Penalize bins that have utilization far from 0.5 (half full)

    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    return priorities
