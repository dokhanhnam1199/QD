```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by the space-time continuum, this function considers not just the immediate fit,
    but also a potential "future" impact based on how full the bin would become after the item is placed.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Base priority is related to how much of the bin's capacity is used (higher utilization is better)
            utilization = item / cap
            priorities[i] = utilization # A simple approach.

            # Add a 'curvature' to the space-time... a small penalty related to leaving a small amount of capacity
            # remaining after adding the item.  This helps to avoid creating bins that are nearly full, but
            # can't easily accommodate future items.  The 'small_capacity_threshold' and 'penalty_factor'
            # parameters would need tuning in practice.

            remaining = cap - item
            small_capacity_threshold = 0.2  # A parameter: bins smaller than 20% are penalized
            penalty_factor = 0.1   # A parameter:  Magnitude of the penalty (experimentally determined).

            if remaining > 0 and remaining <= small_capacity_threshold:
                priorities[i] -= penalty_factor * (small_capacity_threshold - remaining)

            # Enhance prioritization based on "how much space is left" -- bins with greater available space
            # have a greater advantage. Prevents the small penalty from dominating.
            # It favors using bins that already have items inside, and is not overly aggressive to fill
            # almost completely.
            priorities[i] += cap/ np.max(bins_remain_cap)


    return priorities
```
