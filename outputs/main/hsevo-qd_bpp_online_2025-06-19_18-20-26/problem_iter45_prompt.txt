{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines best-fit, waste minimization, bin balancing, and dynamic adjustments.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n    priorities[~valid_bins] = -np.inf\n\n    # Best-Fit with emphasis on closer sizes\n    size_diff = bins_remain_cap - item\n    priorities[valid_bins] += 1.2 / (size_diff[valid_bins] + 0.0001)**1.5\n\n    # Waste Minimization: adaptive penalty\n    remaining_after_fit = bins_remain_cap[valid_bins] - item\n    small_waste_penalty = np.exp(-7 * remaining_after_fit / item)\n    large_waste_penalty = np.exp(-4 * item / remaining_after_fit)\n    priorities[valid_bins] -= (small_waste_penalty + large_waste_penalty) * 0.6\n\n    # Bin Balancing: dynamic adjustment\n    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))\n    overall_utilization = np.mean(utilization)\n\n    if overall_utilization < 0.3:\n        extreme_utilization_penalty = 5 * np.abs(utilization - 0.2)\n    elif overall_utilization > 0.7:\n        extreme_utilization_penalty = 14 * np.abs(utilization - 0.8)\n    else:\n        extreme_utilization_penalty = 8 * np.abs(utilization - 0.5)\n    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]\n\n    # Adaptive bonus for nearly full bins\n    fullness_bonus = np.exp(-3 * np.abs(bins_remain_cap / np.max(bins_remain_cap) - 0.1))\n\n    if overall_utilization < 0.5:\n        priorities[valid_bins] += 1.5 * fullness_bonus[valid_bins] * (1 - overall_utilization) * (item/ np.max(bins_remain_cap))\n    elif overall_utilization < 0.8:\n        priorities[valid_bins] += 0.8 * fullness_bonus[valid_bins] * (1 - overall_utilization) * (item/ np.max(bins_remain_cap))\n    else:\n        priorities[valid_bins] += 0.3 * fullness_bonus[valid_bins] * (1 - overall_utilization) * (item/ np.max(bins_remain_cap))\n\n    # Bin Activation for large items\n    if item > 0.6 * np.max(bins_remain_cap):\n        empty_bin_bonus = np.exp(-2 * utilization)\n        priorities[valid_bins] += 1.5 * empty_bin_bonus[valid_bins]\n\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nHere's a redefined approach to \"Current Self-Reflection,\" designed to improve your heuristic design process:\n\n*   **Keywords:** Dynamic Adaptation, Multi-Factor Integration, Problem State Awareness, Robustness, Edge Case Handling, Normalization, Feedback Loops, Exploration, Diversification, Bin Utilization, Item Size Impact.\n\n*   **Advice:** Focus on designing heuristics that *react* to the problem. Implement feedback loops where the algorithm learns from its actions (e.g., high waste, unbalanced bins) and adjusts its parameters accordingly. Explicitly consider edge cases to avoid brittle solutions.\n\n*   **Avoid:** Broad, generic statements like \"combine multiple factors\" without specifying *how* and *why*. Avoid simply stating obvious goals like \"minimize waste\" without actionable strategies for achieving them in a *dynamic* and *adaptive* manner. Avoid vague notions of complexity.\n\n*   **Explanation:** Instead of simply listing desirable qualities, your self-reflection should focus on the *mechanisms* through which these qualities can be achieved. For example, instead of saying \"balance bin utilization,\" consider *how* you will dynamically adjust placement strategies based on observed bin fill levels. Focus on strategies for escaping local optima.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}