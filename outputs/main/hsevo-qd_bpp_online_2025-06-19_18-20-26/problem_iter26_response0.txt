```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, adaptive waste minimization, bin balancing, 
    fullness bonus, and item-size-aware adjustments for online BPP."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit component
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)**2

    # Adaptive Waste Minimization
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_ratio = remaining_after_fit / item
    small_waste_penalty = np.exp(-15 * remaining_after_fit * item)

    penalty_weight = 1.0
    if item > 0.5:
        penalty_weight = 2.0
    elif item < 0.2:
        penalty_weight = 0.5
    priorities[valid_bins] -= penalty_weight * small_waste_penalty
    
    # Bin Balancing (dynamic target)
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    target_utilization = 0.5
    if overall_utilization < 0.3:
        target_utilization = 0.2
    elif overall_utilization > 0.7:
        target_utilization = 0.8

    extreme_utilization_penalty = 10 * np.abs(utilization - target_utilization)
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]
    
    # Adaptive Fullness Bonus
    fullness_bonus = np.exp(-5 * np.abs(bins_remain_cap / np.max(bins_remain_cap) - 0))
    bonus_weight = 1.0

    if overall_utilization < 0.5:
        bonus_weight = 2 * (1 - overall_utilization)
    elif overall_utilization < 0.8:
        bonus_weight = (1 - overall_utilization)
    else:
        bonus_weight = 0.5 * (1 - overall_utilization)

    priorities[valid_bins] += bonus_weight * fullness_bonus[valid_bins]
    
    # Item-Size-Aware Adjustment: Favor bins that tightly fit larger items
    if item > 0.6:
      tight_fit_bonus = np.exp(-20*(bins_remain_cap[valid_bins]-item)**2)
      priorities[valid_bins] += 0.7 * tight_fit_bonus

    #Adaptive Over-utilization Penalty
    almost_full = (bins_remain_cap - item) < 0.1 * np.max(bins_remain_cap)
    priorities[almost_full & valid_bins] -= 20

    #Introduce a new adaptive parameter based on item size relative to bin capacity
    item_ratio = item / np.max(bins_remain_cap)
    if item_ratio > 0.6: # Item is relatively large
        # Further discourage small waste in nearly full bins to avoid creating unusable bins
        nearly_full = (bins_remain_cap < 0.2 * np.max(bins_remain_cap)) & valid_bins # less than 20% capacity
        priorities[nearly_full] -= 10 * small_waste_penalty[bins_remain_cap[valid_bins] < 0.2 * np.max(bins_remain_cap)]

    # Normalize priorities
    max_priority = np.max(priorities[np.isfinite(priorities)])
    min_priority = np.min(priorities[np.isfinite(priorities)])

    if max_priority > min_priority:
        priorities[np.isfinite(priorities)] = (priorities[np.isfinite(priorities)] - min_priority) / (max_priority - min_priority)

    return priorities
```
