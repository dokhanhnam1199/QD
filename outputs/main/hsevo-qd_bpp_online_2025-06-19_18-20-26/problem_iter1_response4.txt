```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that have capacity close to the item size,
    while also penalizing bins that are either too full or too empty. It uses
    a combination of heuristics including:
    1. Proximity to Item Size: Higher priority if the remaining capacity is close to the item size.
    2. Remaining Capacity Threshold: Disincentivizes bins with too little remaining capacity.
    3. Efficiency Factor:  Favors bins that would be filled relatively well by the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate the absolute difference between remaining capacity and item size
    diff = np.abs(bins_remain_cap - item)

    # Calculate a proximity score, giving higher priority to bins closer to item size
    proximity_score = np.exp(-diff / (item + 0.1))  # Exponential decay based on difference

    # Penalize bins with insufficient capacity
    insufficient_penalty = np.where(bins_remain_cap < item, -100, 0) #Arbitrary penalty

    # Encourage better utilization of the bin (efficiency factor)
    efficiency_factor = item / bins_remain_cap # Ratio of item size to remaining capacity
    efficiency_factor = np.where(bins_remain_cap >= item, efficiency_factor, 0)  # Only consider feasible bins
    efficiency_score = np.clip(efficiency_factor, 0, 1) #Clip values to ensure the score is always non-negative and not excessive


    priorities = proximity_score + insufficient_penalty + efficiency_score

    return priorities
```
