```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate wasted space if item is added to each bin.
    wasted_space = bins_remain_cap - item

    # Give high priority to bins where the item fits and minimizes wasted space.
    # And penalize bins where item doesn't fit
    for i, waste in enumerate(wasted_space):
        if waste >= 0:
            priorities[i] = 1 / (waste + 0.0001)  # Avoid division by zero. Smaller waste = higher priority
        else:
            priorities[i] = -1000  # Very low priority for bins where the item doesn't fit

    return priorities
```
