```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive priority function for online bin packing."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Best Fit Decreasing Emphasis (squared diff)
    size_diff = bins_remain_cap - item
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf
    priorities[valid_bins] = 1.0 / (size_diff[valid_bins] + 0.0001)**2

    # 2. Adaptive Waste Minimization (item size scaling)
    remaining_after_fit = bins_remain_cap - item
    small_waste_penalty = np.exp(-10 * remaining_after_fit * item)
    priorities[valid_bins] -= small_waste_penalty[valid_bins]

    # 3. Dynamic Bin Balancing (overall utilization-based adjustment)
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    if overall_utilization < 0.3:
        extreme_utilization_penalty = 5 * np.abs(utilization - 0.2)
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = 15 * np.abs(utilization - 0.8)
    else:
        extreme_utilization_penalty = 10 * np.abs(utilization - 0.5)

    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # 4. Over-Utilization Penalty (adjust threshold based on item size)
    almost_full = (bins_remain_cap - item) < 0.1 * np.max(bins_remain_cap)
    priorities[almost_full & valid_bins] -= 20

    return priorities
```
