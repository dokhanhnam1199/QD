```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive priority function combining FFD, waste minimization, and dynamic bin balancing."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    # 1. First Fit Decreasing (FFD) Approximation
    size_diff = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (size_diff + 0.0001)
    priorities[~valid_bins] = -np.inf

    # 2. Adaptive Waste Minimization
    remaining_after_fit = bins_remain_cap - item
    waste_penalty_scale = item  # Scale penalty by item size
    small_waste_penalty = np.exp(-waste_penalty_scale * remaining_after_fit)
    priorities[valid_bins] -= small_waste_penalty[valid_bins]

    # 3. Dynamic Bin Balancing
    total_capacity = np.sum(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 0.0001
    avg_capacity = total_capacity / np.sum(valid_bins) if np.any(valid_bins) else np.max(bins_remain_cap)
    capacity_diff = np.abs(bins_remain_cap - avg_capacity)
    balance_penalty = capacity_diff / (avg_capacity + 0.0001)  # Normalize by average capacity
    priorities[valid_bins] -= 2* balance_penalty[valid_bins]
    return priorities
```
