```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, waste minimization, and bin balancing."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Best-fit proximity
    size_diff = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (size_diff + 1e-6)

    # Infeasible bin
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Waste minimization
    remaining_after_fit = bins_remain_cap - item
    waste_penalty = np.exp(-10 * remaining_after_fit)
    priorities[valid_bins] -= waste_penalty[valid_bins]

    # Bin utilization balancing
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    utilization_penalty = 5 * np.abs(utilization - 0.3)
    priorities[valid_bins] -= utilization_penalty[valid_bins]

    return priorities
```
