```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Considers both the waste (remaining space) and the fill ratio.
    Penalizes near-misses to encourage full bins.  A bit like Fermi statistics, favoring filling.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First, handle bins that can't fit the item.
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf  # Make them totally undesirable.
    
    #Now deal with feasible solutions.
    feasible = ~infeasible
    
    if np.any(feasible): #Check if there is any possible bin
        remaining_after_fit = bins_remain_cap[feasible] - item
        
        #Base priority: high if the item fits with minimal waste.
        priorities[feasible] = -np.abs(remaining_after_fit)
        
        # Fill Ratio component: Bins that become more "full" have better fit
        fill_ratios = (bins_remain_cap[feasible] - remaining_after_fit)/ bins_remain_cap[feasible]
        priorities[feasible] += fill_ratios * 10  #Weight to control influence
        
        #Penalty component: bins that leaves nearly full are penalized because
        #these are harder to utilize in the future.
        near_full = (remaining_after_fit > 0) & (remaining_after_fit < 0.1) #Tune value
        priorities[feasible][near_full] -= 5

    return priorities
```
