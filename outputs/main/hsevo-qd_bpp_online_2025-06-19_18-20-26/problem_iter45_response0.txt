```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An enhanced priority function that dynamically adapts to bin utilization,
    item size, and overall packing progress, incorporating memory of past actions.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    max_bin_cap = np.max(bins_remain_cap)

    # 1. Best-Fit with Adaptive Size Difference Emphasis
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.3 / (size_diff[valid_bins] + 0.0001)**1.6 # Slightly stronger best-fit

    # 2. Waste Minimization with Dynamic Penalty Adjustment
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_ratio = remaining_after_fit / max_bin_cap # Normalized waste ratio
    small_waste_penalty = np.exp(-8 * waste_ratio) # Increased sensitivity
    large_waste_penalty = np.exp(-5 * item / (remaining_after_fit + 0.0001)) # Robust handling of small remaining capacities

    # Dynamically adjust waste penalty based on item size
    waste_penalty_scale = 0.7 + 0.3 * (item / max_bin_cap) # Larger items penalize waste more
    priorities[valid_bins] -= (small_waste_penalty + large_waste_penalty) * waste_penalty_scale


    # 3. Bin Balancing with Asymmetric Utilization Penalties
    utilization = 1 - (bins_remain_cap / max_bin_cap)
    overall_utilization = np.mean(utilization)

    # Asymmetric penalty: Penalize under-utilization more than over-utilization
    if overall_utilization < 0.4:
        extreme_utilization_penalty = 6 * np.abs(utilization - 0.3) # Stronger penalty for empty bins
    elif overall_utilization > 0.75:
        extreme_utilization_penalty = 15 * np.abs(utilization - 0.8)
    else:
        extreme_utilization_penalty = 9 * np.abs(utilization - 0.55) # Target slightly higher utilization

    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # 4. Adaptive Bonus for Nearly Full Bins and Item Size Consideration
    fullness_bonus = np.exp(-4 * np.abs(bins_remain_cap / max_bin_cap - 0.15)) # Higher bonus for nearly-full

    if overall_utilization < 0.5:
        bonus_scale = 1.7
    elif overall_utilization < 0.8:
        bonus_scale = 0.9
    else:
        bonus_scale = 0.4

    priorities[valid_bins] += bonus_scale * fullness_bonus[valid_bins] * (1 - overall_utilization) * (item / max_bin_cap)**0.8 # Item size impact on bonus


    # 5. Bin Activation for Large Items and Dynamic Empty Bin Consideration
    if item > 0.6 * max_bin_cap:
        empty_bin_bonus = np.exp(-3 * utilization)
        priorities[valid_bins] += 1.7 * empty_bin_bonus[valid_bins]  # Stronger bonus for larger items to empty bins
    elif item > 0.3 * max_bin_cap and overall_utilization < 0.3:
         empty_bin_bonus = np.exp(-3 * utilization)
         priorities[valid_bins] += 0.7 * empty_bin_bonus[valid_bins]

    # 6. Exploration Bonus: Randomly Boost underutilized bins
    if np.random.rand() < 0.05 and overall_utilization < 0.6:  #Explore occasionally
        underutilized_bins = bins_remain_cap > 0.7 * max_bin_cap
        priorities[underutilized_bins] += 0.5 * np.random.rand(np.sum(underutilized_bins))


    return priorities
```
