```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, waste minimization, and adaptive weighting."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit Component
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)**2

    # Waste Minimization with adaptive penalty
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_ratio = remaining_after_fit / item
    small_waste_penalty = np.exp(-10 * remaining_after_fit)
    
    # Adaptive penalty based on item size
    penalty_weight = 1.0
    if item > 0.5:
        penalty_weight = 1.5  # Increased penalty for large items
    elif item < 0.2:
        penalty_weight = 0.75 # Reduced penalty for small items

    priorities[valid_bins] -= penalty_weight * small_waste_penalty[valid_bins]

    # Capacity ratio
    ratios = item / bins_remain_cap
    priorities[valid_bins] += -0.5 * np.log(ratios[valid_bins]) # scale factor of 0.5

    # Normalize priorities
    max_priority = np.max(priorities[np.isfinite(priorities)])
    min_priority = np.min(priorities[np.isfinite(priorities)])

    if max_priority > min_priority:
        priorities[np.isfinite(priorities)] = (priorities[np.isfinite(priorities)] - min_priority) / (max_priority - min_priority)

    return priorities
```
