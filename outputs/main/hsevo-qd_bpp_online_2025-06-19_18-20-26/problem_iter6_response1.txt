```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An enhanced priority function for online bin packing that incorporates:
    - Best Fit with dynamic scaling
    - Waste minimization with adaptive penalty
    - Bin balancing with dynamic thresholds and penalties
    - Considers item size relative to bin capacity
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # 1. Best Fit with Dynamic Scaling: Prioritize bins with closer fit. Scale based on item size.
    size_diff = bins_remain_cap - item
    priorities[valid_bins] = (item / (size_diff[valid_bins] + 0.0001)**2)  # Scale by item size

    # 2. Waste Minimization with Adaptive Penalty: Penalize bins that leave small waste.
    remaining_after_fit = bins_remain_cap - item
    waste_ratio = remaining_after_fit / bins_remain_cap
    small_waste_penalty = np.exp(-5 * item / (remaining_after_fit + 0.0001)) # Adaptive penalty based on waste and item size
    priorities[valid_bins] -= small_waste_penalty[valid_bins]

    # 3. Bin Balancing with Dynamic Thresholds and Penalties: Balance bin utilization.
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    # Dynamic thresholds based on the item size. Larger items trigger a wider range of balancing
    utilization_threshold_low = 0.3 if item < np.mean(bins_remain_cap) else 0.4
    utilization_threshold_high = 0.7 if item < np.mean(bins_remain_cap) else 0.6

    if overall_utilization < utilization_threshold_low:
        extreme_utilization_penalty = 10 * np.abs(utilization - (utilization_threshold_low - 0.1)) # Wider range and more aggressive balancing
    elif overall_utilization > utilization_threshold_high:
        extreme_utilization_penalty = 20 * np.abs(utilization - (utilization_threshold_high + 0.1)) # Wider range and more aggressive balancing
    else:
        extreme_utilization_penalty = 5 * np.abs(utilization - 0.5) #Default balancing

    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # 4. Item Size Consideration: Adjust priorities based on item size relative to bin capacity.
    relative_size = item / np.max(bins_remain_cap)
    if relative_size > 0.5: # If the item is large relative to the bins, prioritize bins with more space
        priorities[valid_bins] += 2 * (bins_remain_cap[valid_bins] / np.max(bins_remain_cap)) # Give higher priority to bins with more remaining capacity

    return priorities
```
