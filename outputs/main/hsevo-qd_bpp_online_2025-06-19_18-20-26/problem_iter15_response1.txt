```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A refined priority function incorporating dynamic adjustments,
    normalized factors, and robust handling for online bin packing.

    This version focuses on a weighted combination of factors,
    adaptive waste management, bin balancing, and a dynamic
    component influenced by the overall bin fill level. The weights
    adjust dynamically based on the utilization of bins and other parameters.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit component: Prioritize bins with minimal waste.
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)

    # Adaptive Waste Minimization: Discourage very small waste adaptively.
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    # Scale penalty based on item size.  Larger items, smaller penalties for tiny waste
    waste_penalty_scale = 1.0 / (item + 0.1)  # Avoid division by zero
    small_waste_penalty = np.exp(-10 * remaining_after_fit * waste_penalty_scale) #scaled waste
    priorities[valid_bins] -= small_waste_penalty

    # Enhanced Bin Balancing: Dynamically balance bins using normalized utilization.
    normalized_capacity = bins_remain_cap / np.max(bins_remain_cap) # Normalizing

    overall_utilization = 1 - np.mean(normalized_capacity) # Overall utilization level
    # Adjust balancing pressure based on the fill level adaptively
    if overall_utilization < 0.3:
        # Encourage filling bins significantly
        balancing_factor = 5
        extreme_utilization_penalty = balancing_factor * (normalized_capacity) #prioritize empty bins less
    elif overall_utilization > 0.7:
        # Discourage further filling, encourage using emptier bins
        balancing_factor = 10
        extreme_utilization_penalty = balancing_factor * (1 - normalized_capacity) #Prioritize empty bins
    else:
        # Balance in the middle range
        balancing_factor = 7.5 #In between factor
        extreme_utilization_penalty = balancing_factor * np.abs(normalized_capacity - 0.5)

    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # Dynamic Fullness Bonus: Incentive to fill bins completely, adaptive to utilization
    fullness_level = 1 - normalized_capacity #how full the bin is
    fullness_bonus = np.exp(-5 * fullness_level)

    # Adaptively adjust bonus intensity based on utilization
    if overall_utilization < 0.5:
        bonus_weight = 2 * (1 - overall_utilization)
    elif overall_utilization < 0.8:
        bonus_weight = (1 - overall_utilization)
    else:
        bonus_weight = 0.5 * (1 - overall_utilization) #minimal bonus when close to full

    priorities[valid_bins] += bonus_weight * fullness_bonus[valid_bins]

    # Introduce penalty for bins that would become almost full after packing.
    almost_full_threshold = 0.1 # Bin is almost full if remaining capacity is below this %
    almost_full = remaining_after_fit / np.max(bins_remain_cap) < almost_full_threshold

    priorities[valid_bins][almost_full] -= 2 #discourage making almost full

    return priorities
```
