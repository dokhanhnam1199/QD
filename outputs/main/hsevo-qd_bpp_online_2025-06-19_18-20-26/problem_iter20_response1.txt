```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive heuristic combining capacity ratio, waste minimization,
    and dynamic bin balancing with normalization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    # FFD Approximation + Capacity Ratio
    ratios = item / bins_remain_cap
    priorities[valid_bins] = -np.log(ratios[valid_bins]) / (np.abs(bins_remain_cap[valid_bins] - item) + 0.0001)

    # Waste Minimization
    remaining_after_fit = bins_remain_cap - item
    small_waste_penalty = np.exp(-10 * remaining_after_fit)
    priorities[valid_bins] -= small_waste_penalty[valid_bins]

    # Dynamic Bin Balancing (encourage filling bins further)
    bin_utilization = 1 - bins_remain_cap / np.max(bins_remain_cap)  #Utilized = 1 - remaining/max_capacity
    fullness_bonus = np.exp(5 * bin_utilization)  # Scale for impact
    priorities[valid_bins] += fullness_bonus[valid_bins]

    # Normalize priorities to avoid domination by any single factor
    priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities) + 0.0001)

    return priorities
```
