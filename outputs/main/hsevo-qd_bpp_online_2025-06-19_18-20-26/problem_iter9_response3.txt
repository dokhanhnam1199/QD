```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An enhanced priority function for online bin packing that combines
    best-fit considerations with dynamic waste management, bin balancing,
    and a learning component.  It prioritizes bins based on a weighted
    combination of several factors, including space utilization,
    waste minimization, and bin balancing.  The weights are adjusted
    dynamically based on the overall fill level of the bins.

    This version incorporates adaptive parameter tuning and dynamic waste
    thresholding for improved performance.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit component with a small bias towards more full bins.
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)**2

    # Waste Minimization: Discourage very small waste, adaptive threshold
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    # Dynamically adjust the small waste penalty strength based on item size.
    waste_penalty_strength = 10 + 5 * item  # Larger items, stronger penalty for small waste
    small_waste_penalty = np.exp(-waste_penalty_strength * remaining_after_fit * item)
    priorities[valid_bins] -= small_waste_penalty

    # Bin Balancing using utilization and overall utilization:
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    # Dynamically adjust bin balancing based on fill level.  Adaptive range.
    if overall_utilization < 0.3:
        extreme_utilization_penalty = 5 * np.abs(utilization - 0.2)  # Encourage filling
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = 15 * np.abs(utilization - 0.8) #Discourage further filling
    else:
        #Adaptive balancing: the closer to 0.5, the stronger the penalty
        balancing_strength = 10 + 5 * abs(overall_utilization - 0.5)
        extreme_utilization_penalty = balancing_strength * np.abs(utilization - 0.5) #Balance
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]


    # Adaptive component: Add a bonus to bins close to full
    # Weight the bonus dynamically based on overall utilization
    fullness_threshold = 0.1  # Bins within 10% of being full receive bonus
    fullness_bonus = np.exp(-5 * np.abs(bins_remain_cap / np.max(bins_remain_cap) - 0))

    if overall_utilization < 0.5:
        priorities[valid_bins] += 2 * fullness_bonus[valid_bins] * (1 - overall_utilization) #more bonus to almost full bins
    elif overall_utilization < 0.8 :
         priorities[valid_bins] +=  fullness_bonus[valid_bins] * (1 - overall_utilization) #more bonus to almost full bins
    else:
        priorities[valid_bins] += 0.5 * fullness_bonus[valid_bins] *(1 - overall_utilization) #even lower bonus

    # Edge Case Handling: If all bins are nearly full, prioritize the one with the most remaining capacity
    if np.all(bins_remain_cap[valid_bins] <= 0.1 * np.max(bins_remain_cap)):
        priorities[valid_bins] += 10 * bins_remain_cap[valid_bins] # Prioritize largest remaining

    return priorities
```
