```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A dynamic priority function for online bin packing that adapts to the
    problem state by considering item size relative to bin capacity,
    bin fill distribution, and overall bin utilization. It includes
    mechanisms to handle edge cases like very small items and near-full bins.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # 1. Best-Fit with Adaptive Granularity:
    #   - Modifies the sensitivity of best-fit based on item size and remaining capacity.
    size_diff = bins_remain_cap - item
    fit_score = 1.0 / (size_diff[valid_bins] + 0.0001)
    item_scale = np.clip(item, 0.1, 1.0)  # Prevents extreme scaling
    bin_scale = np.clip(np.mean(bins_remain_cap), 0.1, 1.0) # Scale based on average bin capacity
    priorities[valid_bins] += fit_score * item_scale * bin_scale

    # 2. Waste Management with Dynamic Thresholds:
    #   - Discourages small waste, but the penalty changes based on item size.
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_threshold = 0.1 * item  # Adjust penalty based on item size
    small_waste_penalty = np.where(remaining_after_fit > 0, np.exp(-10 * remaining_after_fit / waste_threshold), 0.0)
    priorities[valid_bins] -= small_waste_penalty

    # 3. Bin Balancing Based on Fill Distribution:
    #   - Calculates a utilization score for each bin and adjusts priority to balance.
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    mean_utilization = np.mean(utilization)
    std_utilization = np.std(utilization)

    # Dynamically adjust target utilization based on overall utilization
    target_utilization = 0.5
    if mean_utilization < 0.4:
        target_utilization = 0.6  # Encourage filling if underutilized
    elif mean_utilization > 0.7:
        target_utilization = 0.4  # Discourage filling if overutilized

    balance_penalty = 5 * np.abs(utilization - target_utilization) # Higher penality if far from target

    # Reduce penalty if distribution is already balanced
    if std_utilization < 0.2:
        balance_penalty *= 0.5

    priorities[valid_bins] -= balance_penalty[valid_bins]

    # 4. Near-Full Bin Incentive with Adaptive Bonus:
    #   - Encourages filling bins that are close to full.
    remaining_capacity_ratio = bins_remain_cap / np.max(bins_remain_cap)
    near_full_bonus = np.exp(-5 * remaining_capacity_ratio)
    if mean_utilization < 0.7:
        bonus_scale = 1.0 + (0.7 - mean_utilization) * 2  # Increased bonus if underutilized
    else:
        bonus_scale = 0.5 #Reduced bonus

    priorities[valid_bins] += near_full_bonus[valid_bins] * bonus_scale

    # 5. Handling Very Small Items: Place in the emptiest bin if possible
    if item < 0.05:
      emptiest_bin_index = np.argmax(bins_remain_cap)
      if valid_bins[emptiest_bin_index]:
        priorities[:] = -np.inf #reset other priorities
        priorities[emptiest_bin_index] = np.inf
    return priorities
```
