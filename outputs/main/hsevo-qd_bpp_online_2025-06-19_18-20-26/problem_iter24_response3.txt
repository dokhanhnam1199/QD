```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A dynamic priority function for online bin packing that adaptively combines
    best-fit, waste minimization, bin balancing, and a learning component.
    It prioritizes bins based on a weighted combination of factors, with
    weights adjusted dynamically based on bin fill levels and historical
    packing performance.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # 1. Best-Fit Component with Adaptive Tightness Bias:
    size_diff = bins_remain_cap - item
    # Normalize the size difference for more consistent scaling
    normalized_size_diff = size_diff / np.max(bins_remain_cap)
    priorities[valid_bins] += 1.0 / (normalized_size_diff[valid_bins] + 0.0001)**2 # Favor tighter fits

    # 2. Waste Minimization with Dynamic Penalty:
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    # Adapt the waste penalty based on item size: smaller items should ideally have small waste
    waste_penalty_scale = min(1.0, item * 5)  # Scale penalty with item size
    small_waste_penalty = np.exp(-10 * remaining_after_fit * waste_penalty_scale)
    priorities[valid_bins] -= small_waste_penalty

    # 3. Bin Balancing with Utilization-Based Adjustment:
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    # Dynamically adjust bin balancing based on fill level. The thresholds and penalties are modified for sensitivity.
    if overall_utilization < 0.3:
        extreme_utilization_penalty = 7 * np.abs(utilization - 0.2)  # Encourage filling low-utilization bins
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = 17 * np.abs(utilization - 0.8)  # Discourage further filling highly-utilized bins
    else:
        extreme_utilization_penalty = 12 * np.abs(utilization - 0.5)  # Balance utilization

    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # 4. Adaptive Fullness Bonus with Overall Utilization Weighting:
    fullness_bonus = np.exp(-5 * np.abs(bins_remain_cap / np.max(bins_remain_cap) - 0)) # Near-full bins get bonus

    if overall_utilization < 0.5:
        priorities[valid_bins] += 2.5 * fullness_bonus[valid_bins] * (1 - overall_utilization)
    elif overall_utilization < 0.8:
        priorities[valid_bins] += 1.2 * fullness_bonus[valid_bins] * (1 - overall_utilization)
    else:
        priorities[valid_bins] += 0.6 * fullness_bonus[valid_bins] * (1 - overall_utilization)

    # 5. Remaining Capacity Weighting: Add a small weight to bins with MORE remaining capacity.
    # This can help distribute items more evenly and avoid overfilling certain bins early on, especially when overall_utilization is low.
    priorities[valid_bins] += 0.1 * (bins_remain_cap[valid_bins] / np.max(bins_remain_cap)) * (1 - overall_utilization)

    return priorities
```
