```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a very low value
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    # Identify bins that can accommodate the item
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        # Calculate the waste (remaining capacity after placing the item) for valid bins
        waste = bins_remain_cap[valid_bins] - item

        # Prioritize bins with smaller waste.
        # Higher priority for less waste.  Using inverse square for greater differentiation.
        priorities[valid_bins] = 1.0 / (waste + 0.0000000001)**2  # Avoid division by zero

        # Boost priority for almost-full bins
        almost_full_threshold = 0.1  # Define how close to full is "almost full" relative to item size
        almost_full_bins = (waste <= almost_full_threshold * item) & valid_bins
        priorities[almost_full_bins] += 10 # Large boost for almost full.
    else:
       # no bins can contain item
       priorities[:] = -np.inf  # Should never be selected. This prevents errors.
       # Consider returning the bin with the greatest available capacity if no bins fit
       # priorities[np.argmax(bins_remain_cap)] = -0.0001  # Set to a larger value if you want to choose to create a new bin as last resort. -np.inf is worse choice

    return priorities
```
