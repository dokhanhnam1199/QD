```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit, waste minimization, and dynamic bin balancing with item-size awareness.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit with Item-Size Normalization
    size_diff = bins_remain_cap - item
    normalized_size_diff = size_diff / (item + 0.001)  # Avoid division by zero
    priorities[valid_bins] += 1.0 / (normalized_size_diff[valid_bins]**2 + 0.0001)

    # Waste Minimization with Adaptive Threshold
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_threshold = item / 2.0
    waste_penalty_factor = 5.0
    waste_penalty = np.where(remaining_after_fit > 0, np.exp(waste_penalty_factor * (remaining_after_fit - waste_threshold)), 0)
    priorities[valid_bins] -= waste_penalty

    # Dynamic Bin Balancing
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)
    target_utilization = 0.5
    if overall_utilization < 0.4:
        target_utilization = 0.6
    elif overall_utilization > 0.6:
        target_utilization = 0.4

    scaling_factor = 10.0
    if np.mean(bins_remain_cap) > 0.8:
        scaling_factor = 20.0
    elif np.mean(bins_remain_cap) < 0.2:
        scaling_factor = 5.0

    utilization_penalty = scaling_factor * np.abs(utilization - target_utilization)
    priorities[valid_bins] -= utilization_penalty[valid_bins]

    # Adaptive Fullness Bonus
    fullness_level = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    fullness_bonus = np.exp(-5 * np.abs(fullness_level - 1))
    bonus_weight = (1 - overall_utilization) * (item / (np.max(bins_remain_cap) + 0.001))
    priorities[valid_bins] += bonus_weight * fullness_bonus[valid_bins]
    
    # Small random component to break ties
    priorities[valid_bins] += 0.0001 * np.random.rand(np.sum(valid_bins))

    return priorities
```
