```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers several factors:

    1.  Remaining capacity: Bins with capacity closer to the item size
        are preferred (but not too close to avoid fragmentation).

    2.  Fragmentation avoidance: Penalizes bins that would become too empty
        after packing the item.

    3.  First-Fit Decreasing (FFD) encouragement: Gives a slight bonus to
        bins with higher remaining capacity to somewhat mimic FFD behavior
        when possible. This can help open new bins less frequently.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Remaining capacity consideration:  A bell-shaped preference around the item size.
            # Use a Gaussian-like function centered around a value slightly larger than item size.
            # This prefers bins that are a bit bigger than the item, but not excessively so.
            mu = item * 1.2 # slight bias towards bigger than item

            # Standard deviation determines the width of the preferred capacity range.
            sigma = item * 0.5
            priorities[i] += np.exp(-((cap - mu) ** 2) / (2 * sigma ** 2))

            # Fragmentation avoidance: penalize if the bin becomes too empty
            remaining_after_pack = cap - item
            if remaining_after_pack < 0.1 * cap: # Less than 10% of capacity
              priorities[i] += 0.5 # Small bonus for avoiding *very* small fragments
            elif remaining_after_pack > 0.8 * cap:
              priorities[i] -= 0.2 # Minor penalty against creating too much waste

            # First-Fit Decreasing (FFD) encouragement (small bonus for bigger bins)
            priorities[i] += cap * 0.01 # slight bonus to higher capacity.

        else:
            priorities[i] = -1e9  # Very low priority if the item doesn't fit

    return priorities
```
