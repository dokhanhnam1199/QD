```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines FFD, waste minimization, and adaptive capacity ratio."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    # FFD Approximation + Adaptive Capacity Ratio
    ratios = item / bins_remain_cap
    priorities[valid_bins] = -np.log(ratios[valid_bins]) / (np.abs(bins_remain_cap[valid_bins] - item) + 0.0001)  # Higher priority to close size

    # Waste Minimization with dynamic adjustment
    remaining_after_fit = bins_remain_cap - item
    #Adaptive waste penalty based on item size
    waste_penalty_factor = 10 + item # Increase penalty for larger items
    small_waste_penalty = np.exp(-waste_penalty_factor * remaining_after_fit)
    priorities[valid_bins] -= small_waste_penalty[valid_bins]

    #Bin utilization balance
    utilization = (1 - (bins_remain_cap / np.max(bins_remain_cap)))
    extreme_utilization_penalty = 5 * np.abs(utilization - 0.3)
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]
    return priorities
```
