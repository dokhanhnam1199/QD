```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, waste minimization, bin balancing, and adaptive weighting."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)

    # Waste Minimization
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    small_waste_penalty = np.exp(-10 * remaining_after_fit * item)
    priorities[valid_bins] -= small_waste_penalty

    # Bin Balancing
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    priorities[valid_bins] -= 10 * np.abs(utilization - 0.5)

    # Adaptive Weighting
    overall_utilization = 1 - np.sum(bins_remain_cap) / np.sum(bins_remain_cap[valid_bins] + item) if np.sum(bins_remain_cap[valid_bins] + item) > 0 else 0

    priorities[valid_bins] *= (1 + overall_utilization)  # Scale by fill level

    return priorities
```
