```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit with a dynamic waste penalty and fullness bonus based on utilization."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit component
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)**2

    # Overall utilization for dynamic adjustment
    overall_utilization = np.mean(1 - (bins_remain_cap / np.max(bins_remain_cap)))

    # Dynamic Waste Minimization Penalty
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_penalty_factor = 5 * (1 + overall_utilization)  # Adjusted waste penalty
    small_waste_penalty = np.exp(-waste_penalty_factor * remaining_after_fit)
    priorities[valid_bins] -= small_waste_penalty

    # Fullness bonus that adapts to overall utilization
    fullness_bonus = np.exp(-5 * np.abs(bins_remain_cap / np.max(bins_remain_cap)))

    if overall_utilization < 0.6:
        priorities[valid_bins] += fullness_bonus[valid_bins] * (1 - overall_utilization)
    else:
        priorities[valid_bins] += 0.5 * fullness_bonus[valid_bins] * (1 - overall_utilization)

    return priorities
```
