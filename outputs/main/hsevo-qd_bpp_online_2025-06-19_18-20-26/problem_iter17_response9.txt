```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, size_diff_epsilon: float = 0.0005,
               small_waste_penalty_factor: float = 13.76,
               extreme_utilization_penalty_factor: float = 10.96,
               target_utilization: float = 0.28) -> np.ndarray:
    """Combines best-fit, waste minimization, and adaptive bin balancing."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. First Fit Decreasing Approximation
    size_diff = np.abs(bins_remain_cap - item)
    priorities = 1.0 / (size_diff + size_diff_epsilon)

    # Invalidate bins with insufficient capacity
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # 2. Waste Minimization Penalty
    remaining_after_fit = bins_remain_cap - item
    small_waste_penalty = np.exp(-small_waste_penalty_factor * remaining_after_fit)
    priorities[valid_bins] -= small_waste_penalty[valid_bins]

    # 3. Bin Utilization Balance Penalty
    utilization = (1 - (bins_remain_cap / np.max(bins_remain_cap)))
    extreme_utilization_penalty = extreme_utilization_penalty_factor * np.abs(utilization - target_utilization)
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    #4. Ratios to encourage packing
    ratios = item / bins_remain_cap
    log_ratios = np.log(ratios)
    priorities[valid_bins] += -0.1*log_ratios[valid_bins]


    return priorities
```
