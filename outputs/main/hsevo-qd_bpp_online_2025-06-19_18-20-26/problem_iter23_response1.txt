```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines best-fit, dynamic waste management, and adaptive bin balancing.
    Adjusts parameters based on item size and fill level.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit with adjusted exponent
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.3 / (size_diff[valid_bins] + 0.0001)**1.6

    # Adaptive Waste Minimization
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    small_waste_penalty = np.exp(-7 * remaining_after_fit / item)
    large_waste_penalty = np.exp(-4 * item / remaining_after_fit)
    priorities[valid_bins] -= (small_waste_penalty + large_waste_penalty) * 0.65

    # Dynamic Bin Balancing
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    if overall_utilization < 0.35:
        extreme_utilization_penalty = 5.5 * np.abs(utilization - 0.25)
    elif overall_utilization > 0.65:
        extreme_utilization_penalty = 13.5 * np.abs(utilization - 0.75)
    else:
        extreme_utilization_penalty = 9.5 * np.abs(utilization - 0.5)
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # Adaptive Fullness Bonus, scaled by item size
    fullness_bonus = np.exp(-3.5 * np.abs(bins_remain_cap / np.max(bins_remain_cap) - 0.05))

    if overall_utilization < 0.55:
        priorities[valid_bins] += 1.75 * fullness_bonus[valid_bins] * (1 - overall_utilization) * (item / np.max(bins_remain_cap))
    elif overall_utilization < 0.75:
        priorities[valid_bins] += 0.85 * fullness_bonus[valid_bins] * (1 - overall_utilization) * (item / np.max(bins_remain_cap))
    else:
        priorities[valid_bins] += 0.45 * fullness_bonus[valid_bins] * (1 - overall_utilization) * (item / np.max(bins_remain_cap))

    return priorities
```
