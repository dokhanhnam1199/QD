```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, waste minimization, and adaptive bin balancing."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best Fit Emphasis
    size_diff = bins_remain_cap - item
    priorities[valid_bins] = 1.0 / (size_diff[valid_bins]**2 + 0.0001)

    # Adaptive Waste Minimization
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_penalty = np.exp(-5 * remaining_after_fit * item)
    priorities[valid_bins] -= waste_penalty

    # Dynamic Bin Balancing
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    if overall_utilization < 0.3:
        target_utilization = 0.5
    elif overall_utilization > 0.7:
        target_utilization = 0.6
    else:
        target_utilization = 0.5

    utilization_penalty = 10 * np.abs(utilization - target_utilization)
    priorities[valid_bins] -= utilization_penalty[valid_bins]

    # Fullness Bonus
    fullness_level = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    fullness_bonus = np.exp(-5 * np.abs(fullness_level - 1))
    bonus_weight = (1 - overall_utilization) * (item / np.max(bins_remain_cap))
    priorities[valid_bins] += bonus_weight * fullness_bonus[valid_bins]

    return priorities
```
