```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    An advanced priority function that dynamically adjusts its strategy
    based on the distribution of remaining bin capacities and item sizes,
    aiming for improved packing efficiency and robustness.

    It incorporates:
    1.  Best-Fit with Adaptive Granularity: Favors bins with close capacity
        but adjusts the resolution based on the variance of remaining capacities.
    2.  Waste Optimization with Thresholding: Penalizes waste, but only
        above a dynamically determined threshold.
    3.  Bin Balancing with Dynamic Target: Encourages filling bins towards
        a target utilization level, adjusted by the mean utilization.
    4.  Item Size Consideration: Modifies the priority based on item size relative to bin size.
    5.  Capacity Distribution Awareness: Uses the variance of remaining capacities
        to adjust the strength of bin balancing and waste penalization.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # 1. Best-Fit with Adaptive Granularity
    capacity_variance = np.var(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 0
    granularity_factor = 1 / (capacity_variance + 0.01)  # Higher variance -> finer granularity
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += granularity_factor / (size_diff[valid_bins]**2 + 0.0001)

    # 2. Waste Optimization with Thresholding
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_threshold = np.mean(bins_remain_cap) / 5  # Dynamic threshold
    waste_penalty = np.where(remaining_after_fit > waste_threshold, np.exp(remaining_after_fit - waste_threshold), 0)
    priorities[valid_bins] -= waste_penalty

    # 3. Bin Balancing with Dynamic Target
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    mean_utilization = np.mean(utilization)
    target_utilization = mean_utilization #+ 0.1  # Adjust target slightly above mean
    balance_penalty = np.abs(utilization - target_utilization)
    priorities[valid_bins] -= 5 * balance_penalty[valid_bins] #Increased coefficient


    # 4. Item Size Consideration
    item_ratio = item / np.max(bins_remain_cap)
    priorities[valid_bins] += (item_ratio*3) * utilization[valid_bins]  # Larger items favor more full bins
    #priorities[valid_bins] -= (item_ratio**2) * size_diff[valid_bins]  # Smaller items allow best fit

    # 5. Capacity Distribution Awareness
    capacity_std = np.std(bins_remain_cap)
    if capacity_std > np.mean(bins_remain_cap) / 4:
        priorities[valid_bins] -= 2 * balance_penalty[valid_bins] # Reduced balance penalty if std high
        #priorities[valid_bins] -= 0.5 * waste_penalty #Reduced waste penalty if std high

    return priorities
```
