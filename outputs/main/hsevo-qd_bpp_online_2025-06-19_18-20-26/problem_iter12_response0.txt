```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A more adaptive priority function for online bin packing that dynamically adjusts
    its strategy based on the current state of the bins. It incorporates bin
    standard deviation to encourage balanced bin utilization, and dynamically
    adjusts waste penalties and fullness bonuses based on the overall fill level
    and distribution of remaining capacities. Also add the bin id to consider it when the bins are almost identical.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # 1. Best-Fit Component (modified):
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.0 / (size_diff[valid_bins] + 0.0001)**2

    # 2. Waste Minimization (Adaptive):
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    overall_fill_ratio = 1 - np.mean(bins_remain_cap) / np.max(bins_remain_cap)

    # Dynamically adjust the waste penalty based on overall fill.
    waste_penalty_factor = 10
    if overall_fill_ratio > 0.7:
        waste_penalty_factor = 20  # Higher penalty when bins are mostly full
    elif overall_fill_ratio < 0.3:
        waste_penalty_factor = 5   # Lower penalty when bins are mostly empty

    small_waste_penalty = np.exp(-waste_penalty_factor * remaining_after_fit * item)
    priorities[valid_bins] -= small_waste_penalty

    # 3. Bin Balancing (Standard Deviation Aware):
    bin_std = np.std(bins_remain_cap)
    mean_remain_cap = np.mean(bins_remain_cap)
    # Encourage bins closer to the mean remaining capacity.  The magnitude of the
    # penalty is relative to the standard deviation.
    bin_balance_penalty = np.abs(bins_remain_cap - mean_remain_cap) / (bin_std + 0.0001)
    priorities[valid_bins] -=  5* bin_balance_penalty[valid_bins]

    # 4. Fullness Bonus (Adaptive):
    fullness_level = 1 - bins_remain_cap / np.max(bins_remain_cap) #normalized fullness
    fullness_bonus = np.exp(-5 * np.abs(fullness_level - 1)) #bonus for bins near full
    # Adjust bonus strength dynamically based on overall fill.

    fullness_bonus_strength = 2
    if overall_fill_ratio > 0.8:
        fullness_bonus_strength = 0.5  # Lower bonus when bins are very full
    elif overall_fill_ratio < 0.4:
        fullness_bonus_strength = 3  # Higher bonus when bins are mostly empty
    priorities[valid_bins] += fullness_bonus_strength * fullness_bonus[valid_bins] * (1 - overall_fill_ratio)

    # 5. Add bin ID to priorities when bins are similar
    similar_bins = np.allclose(bins_remain_cap[valid_bins], bins_remain_cap[valid_bins][0], atol=1e-5)
    if similar_bins and len(bins_remain_cap[valid_bins]) > 0:
      bin_ids = np.arange(len(bins_remain_cap))
      priorities[valid_bins] += 0.00001 * bin_ids[valid_bins]

    return priorities
```
