```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version incorporates a "near-perfect fit" bonus and penalizes near misses (bins that almost fit but don't).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate fill ratio for each bin
    fill_ratios = item / bins_remain_cap
    
    # Near-perfect fit bonus (if item fills bin to within a certain tolerance)
    tolerance = 0.1  # Adjust tolerance as needed (0.1 means 10% of bin capacity)
    perfect_fit_bonus = 10.0  # Bonus for near-perfect fit

    # Near miss penalty (bin almost fits, but doesn't)
    near_miss_penalty = -5.0  # Penalty for near misses.

    for i, remaining_cap in enumerate(bins_remain_cap):
        if item <= remaining_cap:
            # Calculate fill ratio if the item were placed in this bin
            fill_ratio = item / remaining_cap

            # Apply near-perfect fit bonus
            if (remaining_cap - item) <= tolerance * remaining_cap:
                priorities[i] += perfect_fit_bonus

            # Base priority is inversely proportional to the waste generated
            waste = remaining_cap - item
            priorities[i] += 1.0 / (waste + 1e-6)  # Add small epsilon to avoid division by zero

        else:
             #Implement near miss penalty
             difference = item - remaining_cap
             if difference <= tolerance * remaining_cap:
                 priorities[i] += near_miss_penalty #Apply Near miss penalty
             else:
                 priorities[i] = -np.inf

    return priorities
```
