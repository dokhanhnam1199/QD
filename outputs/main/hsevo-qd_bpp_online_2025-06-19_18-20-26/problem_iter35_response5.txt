```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, adaptive waste minimization, bin balancing, fullness bonus, and bin activation."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf

    # Best-Fit component
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 1.2 / (size_diff[valid_bins] + 0.0001)**1.9

    # Adaptive Waste Minimization
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    small_waste_penalty = np.exp(-7 * remaining_after_fit / item)  # Normalized by item size
    large_waste_penalty = np.exp(-6 * item / remaining_after_fit) #Added to discourage very large waste

    priorities[valid_bins] -= (small_waste_penalty + large_waste_penalty) * 0.7

    # Bin Balancing
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    if overall_utilization < 0.3:
        extreme_utilization_penalty = 6 * np.abs(utilization - 0.2)
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = 12 * np.abs(utilization - 0.8)
    else:
        extreme_utilization_penalty = 8 * np.abs(utilization - 0.5)

    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # Adaptive Fullness Bonus
    fullness_bonus = np.exp(-3 * np.abs(bins_remain_cap / np.max(bins_remain_cap) - 0.1))

    if overall_utilization < 0.5:
        priorities[valid_bins] += 1.6 * fullness_bonus[valid_bins] * (1 - overall_utilization) * (item/ np.max(bins_remain_cap))
    elif overall_utilization < 0.8:
        priorities[valid_bins] += 0.8 * fullness_bonus[valid_bins] * (1 - overall_utilization) * (item/ np.max(bins_remain_cap))
    else:
        priorities[valid_bins] += 0.3 * fullness_bonus[valid_bins] *(1 - overall_utilization) * (item/ np.max(bins_remain_cap))

    # Bin Activation Strategy
    if item > 0.6 * np.max(bins_remain_cap):
        empty_bin_bonus = np.exp(-1.5 * utilization)  # Slightly reduced empasis emptier bins
        priorities[valid_bins] += 1.8 * empty_bin_bonus[valid_bins] # Reduced emphsis

    # Penalty for Over-Utilized Bins
    almost_full = (bins_remain_cap - item) < 0.1 * np.max(bins_remain_cap)
    priorities[almost_full & valid_bins] -= 18 # Reduced penalty

    return priorities
```
