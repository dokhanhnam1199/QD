```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A priority function for online bin packing that prioritizes bins based on a refined
    combination of best-fit, waste minimization, and bin balancing. It includes explicit
    strategies to mitigate fragmentation and encourage efficient bin utilization,
    with parameters tuned to dynamically adapt to the current fill level.  It also adds
    a 'rescue' mechanism to open a new bin if almost everything else fails.

    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf  # Invalid bins get a very low priority

    # Best-Fit component with an adjusted exponent to control sensitivity
    size_diff = bins_remain_cap - item
    priorities[valid_bins] += 2.0 / (size_diff[valid_bins] + 0.0001)**1.5  # Adjusted exponent

    # Waste Minimization with a dynamic penalty based on the item size:
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_threshold = 0.1 * item  # Acceptable waste is proportional to item size
    small_waste_penalty = np.where(remaining_after_fit > 0, np.exp(-5 * remaining_after_fit / waste_threshold),0) # Scale penalty
    priorities[valid_bins] -= small_waste_penalty


    # Bin Balancing based on the overall bin utilization
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    # Dynamically adjust bin balancing based on fill level. Stricter balancing at medium fills.
    if overall_utilization < 0.3:
        extreme_utilization_penalty = 3 * np.abs(utilization - 0.2)  # Encourage filling
    elif overall_utilization > 0.7:
        extreme_utilization_penalty = 10 * np.abs(utilization - 0.8)  # Discourage further filling (more aggressive)
    else:
        extreme_utilization_penalty = 7 * np.abs(utilization - 0.5)  # Balance (less aggressive near 50%)
    priorities[valid_bins] -= extreme_utilization_penalty[valid_bins]

    # Fragmentation Avoidance:  Prioritize bins where item fits snugly
    snug_fit_bonus = np.exp(-10 * np.abs(size_diff[valid_bins] - waste_threshold) / waste_threshold)  # Centered around waste_threshold
    priorities[valid_bins] += 0.7 * snug_fit_bonus

    # Rescue mechanism: If no bin is a "good" fit, strongly consider a new bin
    # "Good" fit is now dynamically defined. It gets stronger as overall utilization increase.
    if np.max(priorities) < 0.1 + overall_utilization/5:  # Threshold is dynamic

        priorities = np.full_like(priorities, -np.inf)  # Reset existing priorities
        priorities[np.argmax(bins_remain_cap)] = 1.0 # Prioritize the most empty bin (essentially open a new bin)
        #If the most empty bin isn't big enough, do nothing. It will remain -inf, and a new bin may not open.
        if bins_remain_cap[np.argmax(bins_remain_cap)] < item:
            priorities[np.argmax(bins_remain_cap)] = -np.inf



    return priorities
```
