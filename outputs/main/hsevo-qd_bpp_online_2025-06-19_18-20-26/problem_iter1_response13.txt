```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Higher priority for bins that can fit the item
            priorities[i] = (cap - item) / cap  # Fraction of wasted space, lower is better
            priorities[i] += 1  # Offset to make all valid bins positive

            # Give additional preference to bins that are close to being full after adding the item. This helps consolidating space.
            priorities[i] += np.exp(-10 * (cap - item))
        else:
            # Very low priority for bins that cannot fit the item
            priorities[i] = -1e9  # a very negative number to penalize invalid bins

    return priorities
```
