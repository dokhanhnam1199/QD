```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A refined priority function for online bin packing, incorporating adaptive weights,
    normalization, and a feedback mechanism based on bin utilization. This version aims
    for a more robust and balanced approach to bin packing compared to v1.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    priorities[~valid_bins] = -np.inf  # Invalidate bins that can't fit the item

    # 1. Best-Fit Component with Capacity-Aware Scaling:
    # Prioritize bins that offer a tight fit but scale the priority based on overall bin capacity.
    size_diff = bins_remain_cap - item
    fit_score = 1.0 / (size_diff[valid_bins] + 0.0001)  # Avoid division by zero
    capacity_scale = bins_remain_cap[valid_bins] / np.max(bins_remain_cap) # Normalize remaining capacity
    priorities[valid_bins] += fit_score * capacity_scale # Tighter fits in larger bins get higher priority

    # 2. Waste Minimization with Adaptive Penalty:
    # Penalize bins that would result in small waste, but adapt the penalty based on item size.
    remaining_after_fit = bins_remain_cap[valid_bins] - item
    waste_ratio = remaining_after_fit / bins_remain_cap[valid_bins] #Waste Ratio
    waste_penalty = np.exp(-5 * remaining_after_fit * item) # Modified penalty term
    priorities[valid_bins] -= waste_penalty * item  # Scale penalty by item size

    # 3. Bin Balancing with Dynamic Target Utilization:
    # Encourage bin balancing by penalizing deviations from a target utilization,
    # which adjusts dynamically based on overall utilization.
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    overall_utilization = np.mean(utilization)

    # Adaptive Target Utilization: Dynamically adjust the target based on current fill levels.
    if overall_utilization < 0.4:
        target_utilization = 0.6  # Encourage filling if bins are mostly empty.
    elif overall_utilization > 0.6:
        target_utilization = 0.4 # Discourage further filling if bins are mostly full.
    else:
        target_utilization = 0.5  # Maintain balance around the middle.

    # Calculate balancing penalty and scale it appropriately.
    balancing_penalty = 10 * np.abs(utilization - target_utilization)
    priorities[valid_bins] -= balancing_penalty[valid_bins]

    # 4. Fullness Bonus with Sigmoid Scaling and Dynamic Adjustment:
    # Reward bins that are close to being full to consolidate items,
    # but scale the bonus based on a sigmoid function of remaining capacity.
    fullness_level = 1 - (bins_remain_cap / np.max(bins_remain_cap))  # Normalized fullness
    fullness_bonus = np.exp(5 * (fullness_level - 1))  # Sigmoid-shaped bonus
    priorities[valid_bins] += 1.5 * fullness_bonus[valid_bins] * (1 - overall_utilization)

    return priorities
```
