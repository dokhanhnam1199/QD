{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Worst Fit strategy.\n\n    The Worst Fit strategy aims to place the item into the bin with the largest remaining capacity.\n    This heuristic aims to keep smaller bins for potentially smaller future items,\n    delaying the need for new bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Higher priority means the bin is more suitable according to the Worst Fit strategy.\n    \"\"\"\n    # Initialize priorities with negative infinity for bins that cannot fit the item\n    priorities = np.full_like(bins_remain_cap, -np.inf)\n\n    # Identify bins where the item can fit\n    can_fit_mask = bins_remain_cap >= item\n\n    # For bins that can fit the item, assign priority based on remaining capacity\n    # The bin with the largest remaining capacity gets the highest priority.\n    priorities[can_fit_mask] = bins_remain_cap[can_fit_mask]\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using a First Fit strategy.\n\n    The priority is higher for bins that can fit the item and are more \"full\" after\n    fitting the item, meaning they have less remaining capacity. This encourages\n    packing items into bins that are already quite full, aiming to minimize the\n    number of bins used. Bins that cannot fit the item are given a priority of 0.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    \n    # Identify bins that can fit the item\n    can_fit_mask = bins_remain_cap >= item\n    \n    # For bins that can fit the item, calculate the remaining capacity after fitting\n    remaining_after_fit = bins_remain_cap[can_fit_mask] - item\n    \n    # Assign priority. Higher priority for bins with less remaining capacity after fitting.\n    # We can invert the remaining capacity to make smaller remaining capacity higher priority.\n    # Adding a small constant to avoid division by zero or very small numbers if\n    # remaining capacity is 0.\n    priorities[can_fit_mask] = 1.0 / (remaining_after_fit + 1e-9)\n    \n    return priorities\n\n[Reflection]\nConsider the goal: minimize bins. Prioritize tighter fits for potentially better packing.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}