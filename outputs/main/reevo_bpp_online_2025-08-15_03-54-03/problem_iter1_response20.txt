```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a First Fit strategy.

    The priority is higher for bins that can fit the item and are more "full" after
    fitting the item, meaning they have less remaining capacity. This encourages
    packing items into bins that are already quite full, aiming to minimize the
    number of bins used. Bins that cannot fit the item are given a priority of 0.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Identify bins that can fit the item
    can_fit_mask = bins_remain_cap >= item
    
    # For bins that can fit the item, calculate the remaining capacity after fitting
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item
    
    # Assign priority. Higher priority for bins with less remaining capacity after fitting.
    # We can invert the remaining capacity to make smaller remaining capacity higher priority.
    # Adding a small constant to avoid division by zero or very small numbers if
    # remaining capacity is 0.
    priorities[can_fit_mask] = 1.0 / (remaining_after_fit + 1e-9)
    
    return priorities
```
