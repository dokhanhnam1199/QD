{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority using a sigmoid-based function that favors bins with small positive residuals.\n\n    This heuristic prioritizes bins where the remaining capacity (`r`) after placing the item\n    is as close to zero as possible, but still non-negative. The sigmoid function\n    `1 / (1 + exp(k * r))` is used, where `k` is a sensitivity parameter.\n    A higher `k` makes the priority drop faster as `r` increases.\n    Bins where the item does not fit (i.e., `r < 0`) receive a priority of 0.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Sensitivity parameter for the sigmoid function.\n    # A higher k means a sharper drop in priority as the remaining capacity increases.\n    # This value can be tuned based on experimental results.\n    k = 5.0  \n\n    # Initialize priorities to 0. Bins where the item cannot fit will keep this score.\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Calculate the remaining capacity if the item were placed in each bin.\n    residuals = bins_remain_cap - item\n\n    # Identify bins where the item can fit (residual >= 0).\n    can_fit_mask = residuals >= 0\n\n    # For bins that can fit the item, calculate the priority score using the sigmoid function.\n    # The function 1 / (1 + exp(k * residual)) produces scores between 0 and 1.\n    # - When residual is 0 (perfect fit), score is 1 / (1 + exp(0)) = 0.5.\n    # - When residual is small positive (e.g., 0.01, k=5), arg is 0.05, score is ~0.95 (HIGH priority).\n    # - When residual is large positive (e.g., 1.0, k=5), arg is 5.0, score is ~0.0067 (LOW priority).\n    # This correctly prioritizes bins with the smallest positive residuals.\n    if np.any(can_fit_mask):\n        priorities[can_fit_mask] = 1.0 / (1.0 + np.exp(k * residuals[can_fit_mask]))\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using a Sigmoid-based Best Fit strategy.\n\n    This strategy prioritizes bins that are \"almost full\" by assigning higher\n    priority scores to bins with a higher fill ratio (item size / remaining capacity),\n    capped by the remaining capacity of the bin. A sigmoid function is used to\n    smoothly transition these scores.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Mask for bins where the item can fit\n    can_fit_mask = bins_remain_cap >= item\n\n    # Calculate fill ratio for bins that can fit the item.\n    # Fill ratio is item_size / bin_capacity. Since we don't have bin_capacity,\n    # we use bins_remain_cap to imply how \"full\" the bin is relative to the item.\n    # A higher fill ratio (item_size / bins_remain_cap) means bins_remain_cap is smaller relative to item_size.\n    # This implies the bin is \"closer\" to being full with this item.\n    # We want to prioritize bins where `item / bins_remain_cap` is high.\n\n    # Handle item size of 0: A zero item can fit anywhere and doesn't fill anything.\n    # We assign a neutral priority score (e.g., 0.5 via sigmoid(0)) to any bin it fits in.\n    if item == 0:\n        # If item is 0, it fits in all bins.\n        # The fill ratio is effectively 0. Sigmoid(k*0) = 0.5.\n        priorities[can_fit_mask] = 0.5\n        return priorities\n\n    # For item size > 0\n    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]\n\n    # To avoid division by zero and ensure ratios are meaningful, we only consider bins with positive capacity.\n    # `can_fit_mask` already ensures `bins_remain_cap >= item`.\n    # If `item > 0`, then `fitting_bins_remain_cap` will be strictly positive.\n    \n    # Calculate fill ratio: item_size / remaining_capacity.\n    # A smaller remaining_capacity (for a given item_size) means a higher fill ratio.\n    # We want to prioritize bins with higher fill ratios.\n    fill_ratios = item / fitting_bins_remain_cap\n\n    # The fill_ratios are in the range (0, infinity) if item > 0 and bins_remain_cap can be anything.\n    # However, our `can_fit_mask` ensures `bins_remain_cap >= item`.\n    # So, `fill_ratios` are in the range (0, 1] if `bins_remain_cap >= item > 0`.\n    # Specifically, if `bins_remain_cap == item`, fill_ratio = 1.\n    # If `bins_remain_cap > item`, fill_ratio < 1.\n\n    # Using sigmoid: `sigmoid(x) = 1 / (1 + exp(-x))`.\n    # We want to maximize priority as `fill_ratio` approaches 1.\n    # `sigmoid(k * fill_ratio)` will have higher values for higher `fill_ratio`.\n    # Let `k` be a steepness parameter.\n    k = 15.0 # Tuning parameter for sigmoid steepness. Adjust for desired behavior.\n\n    # Apply sigmoid to the fill ratios.\n    # Ensure input to exp is within reasonable bounds to avoid overflow.\n    # Since fill_ratios are <= 1 and k is moderate, `k * fill_ratios` should be fine.\n    sigmoid_input = k * fill_ratios\n    \n    # Calculate priorities for bins that can fit the item.\n    # Scores will be in the range (0.5, ~1) because fill_ratios are >= 0.\n    # Specifically, if fill_ratio is 0 (e.g., item=0, handled above) -> 0.5\n    # If fill_ratio = 1 -> sigmoid(k) ~ 1.\n    # If fill_ratio < 1 -> sigmoid(k * fill_ratio) < sigmoid(k).\n    priorities[can_fit_mask] = 1 / (1 + np.exp(-sigmoid_input))\n\n    return priorities\n\n[Reflection]\nPrioritize bins with minimal remaining capacity after placement. Adjust sensitivity `k` for desired behavior.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}