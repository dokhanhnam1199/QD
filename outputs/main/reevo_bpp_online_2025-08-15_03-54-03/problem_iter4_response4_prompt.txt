{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Minimum Remaining Capacity Fit strategy.\n\n    The Minimum Remaining Capacity Fit strategy aims to place the item into the bin\n    that will have the least remaining capacity after the item is placed. This means\n    prioritizing bins where the remaining capacity is just enough or slightly more\n    than the item size. This aims to \"fill up\" bins more effectively.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priorities to a very small negative number.\n    # Bins that cannot accommodate the item will have the lowest priority.\n    priorities = np.full_like(bins_remain_cap, -float('inf'))\n\n    # Identify bins that can accommodate the current item.\n    can_fit_mask = bins_remain_cap >= item\n\n    # For bins that can fit the item, the priority is determined by how much\n    # capacity will be left after placing the item.\n    # We want to minimize the remaining capacity, so higher priority should be given\n    # to bins where `bins_remain_cap - item` is smaller.\n    # A common way to achieve this is to use the inverse of the remaining capacity\n    # after placing the item. To avoid division by zero and to give higher priority\n    # to smaller positive remaining capacities, we can use `1 / (remaining_capacity + epsilon)`.\n    # This ensures that bins with the smallest positive `bins_remain_cap - item` get the highest priority.\n\n    remaining_after_fit = bins_remain_cap[can_fit_mask] - item\n\n    # Add a small epsilon to avoid division by zero, especially if remaining_after_fit is 0.\n    epsilon = 1e-9\n    priorities[can_fit_mask] = 1.0 / (remaining_after_fit + epsilon)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Best Fit strategy.\n\n    The Best Fit strategy prioritizes bins that can accommodate the item and\n    then selects the bin that results in the smallest remaining capacity after\n    packing.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        A higher score indicates a higher priority. Bins that cannot fit the\n        item are given a score of -1. Bins that can fit the item are scored\n        based on the *remaining capacity after packing*, favoring smaller\n        remaining capacities.\n    \"\"\"\n    priorities = np.full_like(bins_remain_cap, -1.0)  # Initialize with low priority (-1)\n\n    # Calculate remaining capacity if the item fits in each bin\n    potential_remaining_caps = bins_remain_cap - item\n\n    # Identify bins that can fit the item\n    can_fit_mask = potential_remaining_caps >= 0\n\n    # For bins that can fit the item, assign a priority score.\n    # We want to prioritize bins that will have the *smallest* remaining capacity\n    # after packing the item. So, we use the potential_remaining_caps directly,\n    # and we want to maximize this value (since higher score means higher priority).\n    # A larger remaining capacity after packing is *worse* for Best Fit,\n    # so we want to prioritize smaller values of potential_remaining_caps.\n    # To make higher scores better, we can invert the priority, e.g., by\n    # subtracting from a large constant.\n    fitting_bins_potential_remaining = potential_remaining_caps[can_fit_mask]\n\n    if fitting_bins_potential_remaining.size > 0:\n        # To prioritize smaller remaining capacities (Best Fit), we can use\n        # a large number minus the potential remaining capacity.\n        # This way, a smaller potential remaining capacity results in a higher score.\n        # We use a value larger than any possible potential remaining capacity.\n        # The maximum possible original remaining capacity would be the bin capacity itself,\n        # so a value larger than that plus item size is safe.\n        max_original_cap = np.max(bins_remain_cap) if bins_remain_cap.size > 0 else 0\n        large_constant = max_original_cap + item # Ensure it's larger than any possible remaining capacity\n\n        priorities[can_fit_mask] = large_constant - fitting_bins_potential_remaining\n\n    return priorities\n\n[Reflection]\nPrioritize smaller remaining capacity. Invert for higher scores. Ensure valid initializations.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}