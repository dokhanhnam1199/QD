{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using a strategy\n    that prioritizes bins with minimal remaining capacity after packing (tighter fit).\n\n    This version uses an inverse relationship with the resulting remaining capacity\n    to strongly favor bins that will be almost full after packing.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        A higher score indicates a higher priority. Bins that cannot fit the\n        item are given a score of -1. Bins that can fit the item are scored\n        based on the *resulting* remaining capacity after packing, favoring\n        those that leave minimal remaining capacity.\n    \"\"\"\n    priorities = np.full_like(bins_remain_cap, -1.0)  # Initialize with low priority (-1)\n\n    # Identify bins that can fit the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # For bins that can fit the item, calculate the remaining capacity *after* packing\n    if np.any(can_fit_mask):\n        resulting_remain_cap = bins_remain_cap[can_fit_mask] - item\n\n        # Prioritize bins with the *least* resulting remaining capacity.\n        # Using `1 / (resulting_remain_cap + epsilon)` creates an inverse relationship,\n        # giving much higher scores to bins with smaller remaining capacities.\n        # An epsilon is added to avoid division by zero if remaining capacity is exactly 0.\n        # This also ensures that scores are positive, thus clearly higher than -1.\n        epsilon = 1e-9\n        priorities[can_fit_mask] = 1.0 / (resulting_remain_cap + epsilon)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using a refined First Fit strategy.\n\n    This strategy prioritizes bins that can accommodate the item and among those,\n    favors bins that are \"more full\" (i.e., have less remaining capacity). This\n    aims to leave larger capacity bins available for potentially larger future items.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Higher priority indicates a more suitable bin. Bins that cannot fit\n        the item are given a priority of -1. Bins that can fit are scored\n        based on their remaining capacity, with smaller remaining capacities\n        receiving higher scores.\n    \"\"\"\n    priorities = np.full_like(bins_remain_cap, -1.0)  # Initialize with low priority for non-fitting bins\n\n    # Identify bins that can fit the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # For bins that can fit, assign a priority score.\n    # We want to prioritize bins with LESS remaining capacity.\n    # A simple way to achieve this is to assign a score that is the negative\n    # of the remaining capacity. The smaller the remaining capacity, the\n    # less negative (i.e., higher) the score will be.\n    # We add the item size to the remaining capacity calculation to\n    # reflect how \"full\" the bin becomes *after* packing.\n    fitting_bins_capacities = bins_remain_cap[can_fit_mask]\n\n    if fitting_bins_capacities.size > 0:\n        # Calculate the remaining capacity *after* placing the item.\n        # Smaller values here are better.\n        remaining_after_fit = fitting_bins_capacities - item\n\n        # To make smaller remaining capacities have higher priority,\n        # we can use a transformation. A simple one is:\n        # max_possible_capacity - remaining_after_fit.\n        # We use a value slightly larger than any possible remaining capacity\n        # to ensure all fitting bins have positive and distinct priorities\n        # relative to the -1 baseline.\n        # A reasonable upper bound for remaining capacity could be the bin's original capacity.\n        # If we don't know original capacity, a sufficiently large number will do.\n        # Let's use the max of current remaining capacities plus the item size as a proxy for a \"large enough\" value.\n        large_constant = np.max(bins_remain_cap) + item if bins_remain_cap.size > 0 else item\n\n        priorities[can_fit_mask] = large_constant - remaining_after_fit\n\n    return priorities\n\n[Reflection]\nFocus on *relative* remaining capacity, not just inverse. Consider how to differentiate good fits.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}