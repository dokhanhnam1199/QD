```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Random Fit strategy.

    The Random Fit strategy aims to randomly select a valid bin for the item.
    This implementation assigns a higher priority to bins that can fit the item,
    and among those, it gives a slight random boost to encourage exploration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a very low value (negative infinity is often used for no-fit)
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item

    # Assign a base priority to bins that can fit the item.
    # A simple approach is to assign a value of 1, signifying "can fit".
    # The randomness will then distinguish between them.
    priorities[can_fit_mask] = 1.0

    # Add a random component to the priority of bins that can fit the item.
    # This ensures that any of the fitting bins has a chance of being selected,
    # mimicking the "random" aspect of Random Fit. The magnitude of the random
    # number can be small to not overly influence the decision if other criteria
    # were to be introduced. Here, we use a uniform distribution between 0 and 1.
    random_boost = np.random.rand(len(bins_remain_cap))
    priorities[can_fit_mask] += random_boost[can_fit_mask]

    # Bins that cannot fit the item will retain their -np.inf priority.
    return priorities
```
