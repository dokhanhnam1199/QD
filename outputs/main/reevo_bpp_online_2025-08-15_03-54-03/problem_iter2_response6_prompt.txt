{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This heuristic implements the \"Exact Fit First\" strategy.\n    It prioritizes bins that can *exactly* fit the item. If multiple bins\n    can exactly fit the item, it prioritizes the one with the least remaining\n    capacity after fitting (to keep larger remaining capacities available for\n    potentially larger future items).\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Identify bins that can exactly fit the item\n    exact_fit_bins_mask = (bins_remain_cap == item)\n\n    # If there are exact fit bins, prioritize them.\n    # Among exact fit bins, prefer those with less remaining capacity\n    # (which after fitting the item, will have even less remaining capacity).\n    # A higher priority score means more preferred.\n    # We assign a high base score (e.g., 100) for exact fits.\n    # To differentiate between exact fit bins, we can use the inverse\n    # of their remaining capacity (larger capacity gets lower score,\n    # smaller capacity gets higher score among exact fits).\n    if np.any(exact_fit_bins_mask):\n        priorities[exact_fit_bins_mask] = 100 + (1.0 / (bins_remain_cap[exact_fit_bins_mask] - item + 1e-6)) # Add small epsilon to avoid division by zero if item == bin_capacity\n\n    # If no exact fit bins, consider bins that can fit the item.\n    # For non-exact fits, we want to prioritize bins that leave the smallest\n    # remaining capacity after placing the item. This is a \"best fit\" idea.\n    # Bins that are \"too large\" are less preferred.\n    # A common way to achieve this is to prioritize bins with the smallest\n    # remaining capacity that is still greater than the item.\n    # We assign a lower base score for these non-exact fits.\n    else:\n        can_fit_mask = (bins_remain_cap > item)\n        if np.any(can_fit_mask):\n            # Prioritize bins with the smallest remaining capacity that can fit the item\n            # A higher priority for smaller remaining capacity.\n            priorities[can_fit_mask] = 10 + (1.0 / (bins_remain_cap[can_fit_mask] - item + 1e-6))\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit) strategy.\n\n    The strategy prioritizes bins that are \"closer\" to fitting the item.\n    Specifically, it calculates the \"distance\" as the remaining capacity minus the item size.\n    A smaller positive distance indicates a better fit.\n    To make it a priority score (higher is better), we use the inverse of (distance + a small epsilon to avoid division by zero)\n    if the item fits, otherwise the priority is 0.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    # Find bins where the item can fit\n    can_fit_mask = bins_remain_cap >= item\n\n    # Calculate the \"distance\" to fit for bins where the item can fit\n    # Distance is defined as remaining capacity - item size\n    distances = bins_remain_cap[can_fit_mask] - item\n\n    # Use a small epsilon to avoid division by zero and handle perfect fits gracefully\n    epsilon = 1e-6\n    \n    # Calculate inverse distance. Smaller distances (better fits) get higher priority.\n    # We invert the distance + epsilon to ensure higher values for better fits.\n    # Adding epsilon ensures we don't divide by zero for a perfect fit (remaining_cap == item).\n    priorities[can_fit_mask] = 1.0 / (distances + epsilon)\n\n    return priorities\n\n[Reflection]\nPrioritize bins with minimal remaining capacity *after* packing.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}