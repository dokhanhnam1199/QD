```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using an Epsilon-Greedy strategy.

    This heuristic aims to balance exploration (trying new bins) and exploitation
    (using bins that are a good fit).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    epsilon = 0.1  # Probability of exploration
    num_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Filter out bins that cannot fit the item
    valid_bin_indices = np.where(bins_remain_cap >= item)[0]

    if len(valid_bin_indices) == 0:
        # No bin can fit the item, return zeros
        return priorities

    # Exploitation: Calculate "goodness" of fitting the item into valid bins
    # We prioritize bins that leave minimal remaining capacity (First Fit Decreasing-like intuition)
    # Adding a small constant to avoid division by zero if a bin is exactly the item size
    remaining_after_fit = bins_remain_cap[valid_bin_indices] - item + 1e-9
    # We want to minimize remaining capacity, so we take the inverse
    exploitation_scores = 1.0 / remaining_after_fit

    # Exploration: Assign equal probability to all valid bins
    # For exploration, all valid bins are equally good candidates.
    # We use a small positive value to ensure they are considered.
    exploration_scores = np.ones_like(valid_bin_indices, dtype=float) * epsilon / len(valid_bin_indices)

    # Combine exploitation and exploration
    # The priority is a weighted sum. For exploitation, the weight is (1-epsilon).
    # For exploration, the weight is epsilon.
    # We want to maximize the combined score.
    combined_scores = (1 - epsilon) * exploitation_scores + exploration_scores

    # Assign combined scores to the correct indices in the full priorities array
    priorities[valid_bin_indices] = combined_scores

    # Normalize priorities to sum to 1 (optional, but can be useful for some selection methods)
    # However, for simply picking the max, normalization isn't strictly necessary.
    # Let's keep it unnormalized for now, as we will likely pick the max directly.

    return priorities
```
