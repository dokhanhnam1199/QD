```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority using a refined First Fit strategy, favoring bins with minimal remaining capacity.

    This heuristic prioritizes bins that can fit the item. Among the bins that can
    accommodate the item, it assigns a higher priority to those with the least
    remaining capacity. This is a direct implementation of the First Fit approach,
    where the priority score is inversely related to the slack (remaining capacity minus item size).
    Bins that cannot fit the item receive a score of -1.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority. Bins that can fit the item are
        scored based on their remaining capacity, with smaller capacities being better.
        Bins that cannot fit the item have a score of -1.
    """
    # Initialize priorities to -1, indicating the item cannot fit or it's the lowest priority.
    priorities = np.full_like(bins_remain_cap, -1.0)

    # Identify bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, assign a priority score.
    # The goal is to prioritize bins with the smallest remaining capacity.
    # A simple and direct way to achieve this is to use the negative of the
    # remaining capacity. This means smaller remaining capacities will have
    # less negative (i.e., higher) scores.
    # For example, if `item = 0.3` and `bins_remain_cap` are `[0.5, 0.8, 0.2]`:
    # - Bin 0: fits (0.5 >= 0.3), score = -0.5
    # - Bin 1: fits (0.8 >= 0.3), score = -0.8
    # - Bin 2: does not fit (0.2 < 0.3), score = -1.0
    # The highest score is -0.5, corresponding to the bin with the least remaining capacity that fits.
    fitting_bins_capacities = bins_remain_cap[can_fit_mask]
    if fitting_bins_capacities.size > 0:
        priorities[can_fit_mask] = -fitting_bins_capacities

    return priorities
```
