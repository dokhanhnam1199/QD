{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority using a strategy that favors bins with minimal positive residuals.\n\n    This heuristic prioritizes bins where the remaining capacity after placing the item\n    is as close to zero as possible, but still non-negative. This aims to fill bins\n    more tightly. Bins where the item does not fit will have the lowest priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priorities to a very low value, so bins that cannot fit the item\n    # have the lowest priority.\n    priorities = np.full_like(bins_remain_cap, -float('inf'))\n\n    # Calculate the remaining capacity if the item were placed in each bin.\n    residuals = bins_remain_cap - item\n\n    # Identify bins where the item can fit (residual >= 0).\n    can_fit_mask = residuals >= 0\n\n    # For bins that can fit the item, the priority is inversely proportional to the residual.\n    # We want to minimize the residual (residual >= 0), so a smaller residual means higher priority.\n    # Using `1 / (residual + epsilon)` ensures that bins with smaller positive residuals\n    # get higher scores. Adding epsilon avoids division by zero when residual is exactly 0.\n    epsilon = 1e-9\n    priorities[can_fit_mask] = 1.0 / (residuals[can_fit_mask] + epsilon)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using a heuristic that prioritizes tighter fits.\n\n    This heuristic aims to find bins where the remaining capacity is just enough\n    to fit the item, or close to it. It penalizes bins with very large remaining\n    capacities and prioritizes bins with smaller remaining capacities that still\n    accommodate the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        A higher score indicates a higher priority. Bins that cannot fit the\n        item are given a score of -1. Bins that can fit the item are scored\n        based on their remaining capacity, favoring smaller remaining capacities.\n    \"\"\"\n    priorities = np.full_like(bins_remain_cap, -1.0)  # Initialize with low priority (-1)\n\n    # Identify bins that can fit the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # For bins that can fit the item, assign a priority score.\n    # We want to prioritize bins with the smallest sufficient remaining capacity.\n    # A good heuristic is to maximize (remaining_capacity - item) for fitting bins,\n    # or equivalently, minimize (remaining_capacity) for fitting bins.\n    # To make smaller remaining capacities have higher scores, we can use\n    # a transformation that maps smaller values to larger values.\n    # For example, 1 / (remaining_capacity - item + epsilon) or (max_capacity - remaining_capacity).\n    # Let's use a scaled difference approach. Prioritize bins where remaining_capacity is just slightly larger than item.\n    # We can define priority as a value that is high when (bins_remain_cap - item) is small and positive.\n    # A simple approach: (large_constant - (bins_remain_cap - item)) for fitting bins.\n    # This prioritizes bins where (bins_remain_cap - item) is minimal.\n    \n    fitting_bins_capacities = bins_remain_cap[can_fit_mask]\n\n    if fitting_bins_capacities.size > 0:\n        # Calculate the \"slack\" or excess capacity for fitting bins\n        slack = fitting_bins_capacities - item\n        \n        # We want to prioritize bins with minimal slack.\n        # A common heuristic is to use a value that is inversely related to slack,\n        # or directly related to a transformation that maps small slacks to large priorities.\n        # For example, max_slack - slack.\n        # To ensure scores are distinct and generally higher for better fits,\n        # we can use a large base value and subtract the slack.\n        # Let's use a base value that is larger than any possible slack.\n        # The maximum possible slack is related to the maximum initial bin capacity,\n        # but for simplicity, we can use a large constant or derive one from the input.\n        # A simple inverse relation can be problematic if slack is zero.\n        # Using `max_slack - slack` or `1 / (slack + epsilon)` are options.\n        # Let's try `max_possible_slack - slack` for a graded priority.\n        # A safe \"max_possible_slack\" would be max(bins_remain_cap) - min_item_size if we knew it,\n        # or just a sufficiently large number.\n        # Alternatively, we can simply use a function that is monotonically decreasing with slack.\n        # Example: `1 / (slack + 1e-6)` or `some_large_number - slack`.\n        # Let's use `1 / (slack + epsilon)` for a stronger preference for tighter fits,\n        # scaled by a factor to ensure positive and distinct values.\n        # Using `max(slack) - slack` would give the tightest fit the highest score.\n        \n        # Alternative: prioritize based on remaining capacity directly, inverted.\n        # A simple inverted remaining capacity: some_large_number - remaining_capacity\n        # This also favors smaller remaining capacities.\n        # Let's use `max_remaining_capacity - remaining_capacity` for fitting bins.\n        \n        # Maximize (bin_capacity - item) where bin_capacity >= item.\n        # This means minimizing bin_capacity for fitting bins.\n        # We want higher scores for bins with smaller remaining_capacity.\n        # So, `constant - remaining_capacity` works.\n        # To ensure positive and meaningful scores, we can use:\n        # `1000 - remaining_capacity` or `max(bins_remain_cap) - remaining_capacity`.\n        \n        # Let's refine the idea: We want to prioritize bins where `remaining_capacity` is small,\n        # but still `>= item`. The \"best\" bin has `remaining_capacity` closest to `item`.\n        # So, `remaining_capacity - item` should be minimized.\n        # To map minimal `remaining_capacity - item` to maximal priority:\n        # `constant - (remaining_capacity - item)` or `1 / (remaining_capacity - item + epsilon)`.\n        # Using `max_slack - slack` is quite robust.\n        \n        max_slack_for_fitting = np.max(slack)\n        priorities[can_fit_mask] = max_slack_for_fitting - slack\n\n    return priorities\n\n[Reflection]\nPrioritize bins with minimal positive slack, avoiding exact zero for continuous scoring.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}