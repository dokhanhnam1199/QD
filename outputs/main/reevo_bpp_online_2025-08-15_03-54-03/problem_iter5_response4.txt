```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a refined First Fit strategy.

    This strategy prioritizes bins that can accommodate the item, favoring
    those with the least remaining capacity (tightest fit). It uses a scaled
    difference from the maximum possible remaining capacity to create a graduated
    priority, ensuring that bins with very little space but still fitting the item
    receive the highest priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a higher priority. Bins that cannot fit the
        item are given a score of -1. Bins that can fit the item are scored
        based on their remaining capacity, favoring smaller remaining capacities
        with a graduated scale.
    """
    priorities = np.full_like(bins_remain_cap, -1.0)  # Initialize with low priority (-1)

    # Identify bins that can fit the item
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, assign a priority score.
    # We want to prioritize bins with *less* remaining capacity first (First Fit logic).
    # To achieve a graduated priority that emphasizes tighter fits, we can
    # calculate a score based on how much space is *left over* after packing.
    # A smaller leftover space means a tighter fit, thus higher priority.
    # We can express this as (remaining_capacity - item_size).
    # To ensure higher scores for better fits (smaller leftover space), we can
    # use a large constant minus this leftover space.
    # We also add a small epsilon to the leftover space to avoid division by zero
    # if we were to use inverse, and to ensure a distinct ordering.
    if np.any(can_fit_mask):
        fitting_bins_capacities = bins_remain_cap[can_fit_mask]
        leftover_space = fitting_bins_capacities - item
        # We want to prioritize smaller leftover_space.
        # A large number minus leftover_space will achieve this.
        # Using the maximum possible leftover space as a reference.
        # The maximum leftover space can be at most the maximum capacity minus item.
        # To be safe and ensure positive priorities, we can use a value
        # larger than any potential leftover space.
        max_potential_leftover = np.max(bins_remain_cap) - item
        # A common heuristic is to use a large constant like 1000 or a
        # function of the maximum possible capacity. Let's use a value
        # that ensures a clear distinction from -1.
        # A simple approach for graduated priority: a large number minus leftover space.
        # For example, if capacities are up to 100 and item is 10:
        # Bin with 15 capacity -> leftover 5 -> priority large - 5
        # Bin with 20 capacity -> leftover 10 -> priority large - 10
        # Bin with 10 capacity -> leftover 0 -> priority large - 0 (highest)
        # Let's use a base value derived from the problem scale to ensure
        # priorities are distinct and meaningful.
        base_priority = 1000.0 # A sufficiently large constant
        priorities[can_fit_mask] = base_priority - leftover_space

    return priorities
```
