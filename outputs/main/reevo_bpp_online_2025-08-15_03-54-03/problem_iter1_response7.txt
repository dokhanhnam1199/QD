```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function implements the "Random Fit" strategy for the online Bin Packing Problem.
    For the online BPP, the strategy is to assign the item to the first bin that can accommodate it.
    However, the prompt requests a "priority score for each bin" and that "the bin with the highest priority score will be selected".
    Since Random Fit doesn't inherently have a priority scoring mechanism beyond "can it fit?",
    we will simulate a priority based on a random selection among eligible bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item
    eligible_bins_indices = np.where(bins_remain_cap >= item)[0]

    # If there are eligible bins, assign a high random priority to them.
    # The "random" aspect comes from the fact that if multiple bins are eligible,
    # we'll randomly pick one to have a slightly higher priority by assigning a
    # higher random number. This mimics a non-deterministic selection among
    # valid choices in a "random fit" spirit.
    if len(eligible_bins_indices) > 0:
        # Assign random values to eligible bins.
        # To simulate a random pick among suitable bins, we can assign
        # random numbers only to those that can fit the item.
        # For simplicity and to clearly signal which are preferred,
        # we'll assign higher values to eligible bins and lower to others.
        # A truly "random" fit would then just pick one of these highest.
        # Here, we assign higher random values to indicate preference.
        random_priorities = np.random.rand(len(eligible_bins_indices))
        priorities[eligible_bins_indices] = 1.0 + random_priorities # Add 1.0 to ensure higher priority than non-eligible bins

    # In a true "random fit", if there are multiple bins that can fit,
    # any of them could be chosen randomly. By assigning random values to
    # all eligible bins and ensuring they are higher than non-eligible bins,
    # the selection of the bin with the highest priority (which will be one
    # of the eligible bins) effectively acts as a random selection among them.

    return priorities
```
