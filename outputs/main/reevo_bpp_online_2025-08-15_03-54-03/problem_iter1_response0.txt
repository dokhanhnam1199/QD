```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using First Fit strategy.

    The First Fit strategy prioritizes bins that can accommodate the item and
    then selects the first one encountered (which implies prioritizing bins
    with smaller remaining capacity that are still sufficient).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a higher priority. Bins that cannot fit the
        item are given a score of -1. Bins that can fit the item are scored
        based on their remaining capacity, favoring smaller remaining capacities.
    """
    priorities = np.full_like(bins_remain_cap, -1.0)  # Initialize with low priority (-1)

    # Identify bins that can fit the item
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, assign a priority score.
    # We want to prioritize bins with *less* remaining capacity first (First Fit logic).
    # So, we assign a score that is inversely proportional to the remaining capacity.
    # A simple way is to use the negative of the remaining capacity, so smaller
    # remaining capacities (closer to zero) get higher (less negative) scores.
    # Adding a small constant to ensure scores are non-negative for fitting bins,
    # while still maintaining the relative order.
    fitting_bins_capacities = bins_remain_cap[can_fit_mask]
    if fitting_bins_capacities.size > 0:
        # Create a score where smaller remaining capacity is better.
        # (max_capacity - remaining_capacity) + epsilon can also work, but this is simpler for relative ordering.
        # A large number minus remaining capacity will prioritize smaller remaining capacities.
        # We use a large number to ensure these priorities are significantly higher than the default -1.
        max_possible_capacity = np.max(bins_remain_cap) + item # A value larger than any possible remaining capacity
        priorities[can_fit_mask] = max_possible_capacity - fitting_bins_capacities

    return priorities
```
