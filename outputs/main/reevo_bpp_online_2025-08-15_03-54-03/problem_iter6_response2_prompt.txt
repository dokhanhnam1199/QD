{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using a refined strategy.\n\n    This strategy prioritizes bins that can accommodate the item. Among those,\n    it favors bins with the smallest remaining capacity (tightest fit).\n    To achieve this, scores are calculated as (bin_capacity - item) for fitting bins,\n    effectively prioritizing bins where the remaining capacity is just enough.\n    A small offset is added to differentiate between bins with the same remaining capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        A higher score indicates a higher priority. Bins that cannot fit the\n        item are given a score of -1. Bins that can fit the item are scored\n        based on how tightly they fit the item.\n    \"\"\"\n    priorities = np.full_like(bins_remain_cap, -1.0)  # Initialize with low priority (-1)\n\n    # Identify bins that can fit the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # For bins that can fit the item, assign a priority score.\n    # We want to prioritize bins with the *least* remaining capacity that still fit the item.\n    # This is equivalent to finding bins where (remaining_capacity - item) is minimized.\n    # A smaller (remaining_capacity - item) means a tighter fit.\n    # We want higher scores for tighter fits, so we use a large constant minus this difference.\n    # Alternatively, we can simply use the negative of (remaining_capacity - item),\n    # so the smallest positive residual gets the highest (least negative) score.\n    # Let's use a strategy that prioritizes minimal *positive* residual capacity.\n    # A simple way is to use -(remaining_capacity - item) which means the largest\n    # negative residual (closest to 0) gets the highest score.\n    # This implicitly prioritizes bins with smaller remaining capacities.\n\n    fitting_bins_capacities = bins_remain_cap[can_fit_mask]\n    if fitting_bins_capacities.size > 0:\n        # Calculate the \"slack\" or remaining capacity after fitting the item\n        slack = fitting_bins_capacities - item\n        # We want to prioritize bins with minimal slack (tightest fit).\n        # So, a smaller slack should result in a higher priority score.\n        # We can achieve this by using a large number minus the slack.\n        # Adding a small epsilon to the slack before negating can help distinguish\n        # between bins with identical remaining capacities.\n        epsilon = 1e-9 # A small value to differentiate\n        priorities[can_fit_mask] = -(slack - epsilon) # Prioritize smaller slack\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority using a sigmoid-based function that favors bins with small positive residuals.\n\n    This heuristic prioritizes bins where the remaining capacity (`r`) after placing the item\n    is as close to zero as possible, but still non-negative. The sigmoid function\n    `1 / (1 + exp(k * r))` is used, where `k` is a sensitivity parameter.\n    A higher `k` makes the priority drop faster as `r` increases.\n    Bins where the item does not fit (i.e., `r < 0`) receive a priority of 0.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Sensitivity parameter for the sigmoid function.\n    # A higher k means a sharper drop in priority as the remaining capacity increases.\n    # This value can be tuned based on experimental results.\n    k = 15.0  # Increased sensitivity\n\n    # Initialize priorities to 0. Bins where the item cannot fit will keep this score.\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate the remaining capacity if the item were placed in each bin.\n    residuals = bins_remain_cap - item\n\n    # Identify bins where the item can fit (residual >= 0).\n    can_fit_mask = residuals >= 0\n\n    # For bins that can fit the item, calculate the priority score using the sigmoid function.\n    # The function 1 / (1 + exp(k * residual)) produces scores between 0 and 1.\n    # - When residual is 0 (perfect fit), score is 1 / (1 + exp(0)) = 0.5.\n    # - When residual is small positive (e.g., 0.01, k=15), arg is 0.15, score is ~0.53 (slightly higher priority).\n    # - When residual is large positive (e.g., 1.0, k=15), arg is 15.0, score is ~0.000003 (very low priority).\n    # This correctly prioritizes bins with the smallest positive residuals.\n    if np.any(can_fit_mask):\n        # Apply sigmoid to the residuals. Higher `k` will make the priority drop more sharply\n        # as the residual increases, effectively favoring bins with minimal remaining capacity.\n        priorities[can_fit_mask] = 1.0 / (1.0 + np.exp(k * residuals[can_fit_mask]))\n\n    return priorities\n\n[Reflection]\nPrioritize tight fits. Sigmoid functions can smoothly differentiate based on residual capacity.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}