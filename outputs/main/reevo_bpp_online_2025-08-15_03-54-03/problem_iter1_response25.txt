```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit) strategy.

    The Proximity Fit heuristic prioritizes bins that are "close" to fitting the item,
    meaning the remaining capacity is slightly larger than the item's size.
    This is implemented by calculating a score based on the inverse of the difference
    between the remaining capacity and the item size, for bins where the item can fit.
    Bins that cannot fit the item receive a score of 0.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Find bins where the item can actually fit
    can_fit_mask = bins_remain_cap >= item
    
    # For bins where the item can fit, calculate the "closeness" score
    # The closer the remaining capacity is to the item size, the higher the score.
    # We use the inverse of (remaining_capacity - item_size + epsilon) to avoid division by zero
    # and to give a higher priority to bins that are almost full but can still accommodate the item.
    # A small epsilon is added for numerical stability and to avoid infinite priority
    # when remaining_capacity == item_size.
    epsilon = 1e-9 
    
    if np.any(can_fit_mask):
        fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
        diff = fitting_bins_remain_cap - item
        # The score is inversely proportional to the difference.
        # A smaller difference means a higher score.
        priorities[can_fit_mask] = 1.0 / (diff + epsilon)
        
    return priorities
```
