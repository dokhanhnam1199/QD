```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, using Worst Fit strategy.

    The Worst Fit strategy prioritizes bins that have the largest remaining capacity.
    The priority is calculated as the remaining capacity of the bin minus the item size.
    This encourages placing the item in the bin where it leaves the largest remaining
    space, thus trying to "waste" the most space in a single bin, leaving smaller
    bins for potentially smaller items later.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a higher priority. Bins that cannot fit the item
        will have a priority of negative infinity.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf)  # Initialize with a very low priority

    # Calculate priority for bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item
    priorities[can_fit_mask] = bins_remain_cap[can_fit_mask] - item

    return priorities
```
