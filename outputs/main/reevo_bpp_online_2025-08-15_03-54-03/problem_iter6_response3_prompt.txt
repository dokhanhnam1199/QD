{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using a strategy\n    that prioritizes bins with minimal remaining capacity after packing (tighter fit).\n\n    This version uses an inverse relationship with the resulting remaining capacity\n    to strongly favor bins that will be almost full after packing.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        A higher score indicates a higher priority. Bins that cannot fit the\n        item are given a score of -1. Bins that can fit the item are scored\n        based on the *resulting* remaining capacity after packing, favoring\n        those that leave minimal remaining capacity.\n    \"\"\"\n    priorities = np.full_like(bins_remain_cap, -1.0)  # Initialize with low priority (-1)\n\n    # Identify bins that can fit the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # For bins that can fit the item, calculate the remaining capacity *after* packing\n    if np.any(can_fit_mask):\n        resulting_remain_cap = bins_remain_cap[can_fit_mask] - item\n\n        # Prioritize bins with the *least* resulting remaining capacity.\n        # Using `1 / (resulting_remain_cap + epsilon)` creates an inverse relationship,\n        # giving much higher scores to bins with smaller remaining capacities.\n        # An epsilon is added to avoid division by zero if remaining capacity is exactly 0.\n        # This also ensures that scores are positive, thus clearly higher than -1.\n        epsilon = 1e-9\n        priorities[can_fit_mask] = 1.0 / (resulting_remain_cap + epsilon)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Best Fit strategy.\n\n    The Best Fit strategy prioritizes bins that can accommodate the item and\n    then selects the bin that results in the smallest remaining capacity after\n    packing. This version refines the scoring to more directly reflect the \"best fit\"\n    by minimizing the remaining capacity after placement.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        A higher score indicates a higher priority. Bins that cannot fit the\n        item are given a score of -1. Bins that can fit the item are scored\n        based on the *remaining capacity after packing*, favoring smaller\n        remaining capacities. A lower remaining capacity after packing yields a higher score.\n    \"\"\"\n    priorities = np.full_like(bins_remain_cap, -1.0)  # Initialize with a low priority score\n\n    # Calculate potential remaining capacity if the item fits in each bin\n    potential_remaining_caps = bins_remain_cap - item\n\n    # Identify bins that can accommodate the current item\n    can_fit_mask = potential_remaining_caps >= 0\n\n    # For bins that can fit the item, assign a priority score.\n    # The \"best fit\" is achieved when the remaining capacity after placing the item is minimized.\n    # To translate minimizing remaining capacity into maximizing priority score,\n    # we can use the negative of the potential remaining capacity.\n    # A smaller positive remaining capacity will result in a larger negative number,\n    # thus a higher score when we want to prioritize it.\n    fitting_bins_potential_remaining = potential_remaining_caps[can_fit_mask]\n\n    if fitting_bins_potential_remaining.size > 0:\n        # Assign priorities: -potential_remaining_caps.\n        # This way, a smaller potential_remaining_caps (meaning a better fit)\n        # will result in a larger (less negative) or positive value, hence higher priority.\n        priorities[can_fit_mask] = -fitting_bins_potential_remaining\n\n    return priorities\n\n[Reflection]\nPrioritize smaller remaining capacities for a tighter fit; negative remaining capacity is better.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}