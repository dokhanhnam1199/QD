{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin, using Worst Fit strategy.\n\n    The Worst Fit strategy prioritizes bins that have the largest remaining capacity.\n    The priority is calculated as the remaining capacity of the bin minus the item size.\n    This encourages placing the item in the bin where it leaves the largest remaining\n    space, thus trying to \"waste\" the most space in a single bin, leaving smaller\n    bins for potentially smaller items later.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        A higher score indicates a higher priority. Bins that cannot fit the item\n        will have a priority of negative infinity.\n    \"\"\"\n    priorities = np.full_like(bins_remain_cap, -np.inf)  # Initialize with a very low priority\n\n    # Calculate priority for bins that can accommodate the item\n    can_fit_mask = bins_remain_cap >= item\n    priorities[can_fit_mask] = bins_remain_cap[can_fit_mask] - item\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using First Fit strategy.\n\n    This heuristic prioritizes bins that can accommodate the item and have the\n    least remaining capacity *after* the item is placed. This aims to fill\n    bins more tightly.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Identify bins that can actually fit the item\n    can_fit_mask = bins_remain_cap >= item\n    \n    # For bins that can fit the item, assign a priority.\n    # We want to prioritize bins that, after placing the item,\n    # will have the *least* remaining capacity. This is equivalent to\n    # prioritizing bins with the smallest current remaining capacity that can fit the item.\n    #\n    # The priority score will be the negative of the remaining capacity\n    # if the item fits. This way, a smaller remaining capacity (more negative)\n    # leads to a higher (less negative) priority score.\n    #\n    # For bins that cannot fit the item, their priority remains 0,\n    # effectively making them unselectable.\n    \n    priorities[can_fit_mask] = -bins_remain_cap[can_fit_mask] + item\n    \n    return priorities\n\n[Reflection]\nPrioritize bins that minimize waste *after* packing.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}