```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority using a non-linear transformation favoring tighter fits.

    This heuristic prioritizes bins with the smallest positive slack (remaining capacity - item).
    It uses a transformation `1 / (slack^power + epsilon)` which gives higher priority
    to bins with smaller slack values. The `power` parameter controls the graduation sensitivity.
    A higher `power` makes the priority drop more steeply as slack increases, thus
    more strongly favoring very tight fits. Bins that cannot fit the item are given a score of -1.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a higher priority. Bins that cannot fit the
        item are given a score of -1.
    """
    # Power parameter for the slack transformation.
    # power=1.0 is inverse proportionality.
    # power > 1.0 makes the priority drop faster for larger slacks, thus more sensitive to tight fits.
    # A value like 1.5 or 2.0 provides a good graduated response.
    power = 1.5
    epsilon = 1e-9  # For numerical stability and to avoid division by zero

    # Initialize priorities to a low value (-1 indicates cannot fit).
    priorities = np.full_like(bins_remain_cap, -1.0, dtype=float)

    # Identify bins that can fit the item.
    can_fit_mask = bins_remain_cap >= item

    if np.any(can_fit_mask):
        fitting_bins_capacities = bins_remain_cap[can_fit_mask]

        # Calculate the slack (positive residual) for fitting bins.
        slack = fitting_bins_capacities - item

        # Calculate priority: 1 / (slack^power + epsilon).
        # This prioritizes bins with smaller slack values, providing a graduated priority.
        # Higher power means priority decreases more rapidly as slack increases.
        priorities[can_fit_mask] = 1.0 / ((slack + epsilon)**power)

        # Optional: Further scaling or transformation could be applied here if needed for tuning.
        # For example, normalizing priorities within the fitting bins, or applying a cap.
        # However, the current form provides a meaningful graduated priority.

    return priorities
```
