```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit strategy.

    The priority is higher for bins that can fit the item and have the least remaining capacity
    after fitting the item (i.e., the tightest fit). If a bin cannot fit the item, its priority is 0.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can fit the item
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity after placing the item for bins that can fit
    remaining_capacities_after_fit = bins_remain_cap[can_fit_mask] - item

    # For best fit, we want the smallest remaining capacity.
    # We can use the inverse of the remaining capacity as a priority score.
    # To avoid division by zero or very small numbers leading to huge priorities,
    # we can add a small epsilon or use a ranking-based approach.
    # A simple approach is to use 1 / (remaining_capacity + epsilon) or a similar
    # monotonic transformation. Here, we'll use a simple inverse that gets higher
    # as remaining capacity gets smaller.

    # Add a small epsilon to avoid division by zero if remaining capacity is exactly 0
    epsilon = 1e-9
    priorities[can_fit_mask] = 1.0 / (remaining_capacities_after_fit + epsilon)

    # To make sure the "best" fit (smallest remaining capacity) has the highest priority,
    # we can sort and assign priorities based on rank. Or, the 1/remaining capacity
    # naturally gives higher values to smaller remaining capacities.

    # If we want to strictly adhere to "highest score = best bin",
    # the smallest remaining capacity should give the highest score.
    # So, 1 / (remaining_capacity) is a good heuristic.

    # Let's refine to ensure higher means better.
    # The smallest remaining capacity is the most desirable.
    # So, the largest value of `1 / (remaining_capacities_after_fit + epsilon)`
    # corresponds to the smallest `remaining_capacities_after_fit`.

    # Consider a case where multiple bins have the exact same best fit.
    # The current method assigns them the same priority. This is fine.

    # Another perspective for "priority score": we want to maximize the priority.
    # Bin 1: capacity 10, item 3. Remaining: 7. Priority: 1/7
    # Bin 2: capacity 10, item 3. Remaining: 6. Priority: 1/6 (Higher, so better)
    # Bin 3: capacity 10, item 3. Remaining: 8. Priority: 1/8
    # This seems to work as intended.

    return priorities
```
