```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a strategy
    that prioritizes bins with minimal *positive* residual capacity after packing.

    This version aims to find the "tightest" possible fit. It prioritizes bins
    that, after packing the item, will have the least remaining capacity,
    but it still prioritizes bins that *can* fit the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a higher priority. Bins that cannot fit the
        item are given a score of -1. Bins that can fit are scored based on
        the resulting remaining capacity, favoring smaller values.
    """
    priorities = np.full_like(bins_remain_cap, -1.0)  # Initialize with low priority (-1)

    # Identify bins that can fit the item
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate the remaining capacity *after* packing
    fitting_bins_indices = np.where(can_fit_mask)[0]

    if fitting_bins_indices.size > 0:
        fitting_bins_capacities = bins_remain_cap[fitting_bins_indices]
        resulting_remain_cap = fitting_bins_capacities - item

        # To prioritize minimal positive residual capacity, we want to find the bin
        # where `resulting_remain_cap` is minimized.
        # A simple way to assign higher priority to smaller values is to use
        # a large constant minus the value, or an inverse relationship.
        # Using an inverse relationship like `1 / (value + epsilon)` makes smaller
        # values yield larger priorities.

        epsilon = 1e-9  # To avoid division by zero or near-zero values
        # Here, smaller `resulting_remain_cap` will lead to a higher score.
        # For example, if resulting_remain_cap is 0.1, score is ~10.
        # If resulting_remain_cap is 5, score is ~0.2.
        priorities[fitting_bins_indices] = 1.0 / (resulting_remain_cap + epsilon)

    return priorities
```
