{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using a Best Fit strategy.\n\n    The Best Fit strategy aims to place the item into the bin that leaves the least\n    remaining capacity after placement. This heuristic prioritizes bins that are\n    \"almost full\" with the current item, aiming to minimize wasted space within each bin\n    and thus potentially reduce the total number of bins used. Bins that cannot fit\n    the item are given a priority of 0.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Higher priority means the bin is more suitable according to the Best Fit strategy.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Identify bins that can fit the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # For bins that can fit the item, calculate the remaining capacity after fitting\n    remaining_after_fit = bins_remain_cap[can_fit_mask] - item\n\n    # Assign priority. Higher priority for bins that result in the smallest remaining capacity.\n    # We can invert the remaining capacity to make smaller remaining capacity higher priority.\n    # A small epsilon is added to prevent division by zero if remaining_after_fit is exactly 0.\n    # Using a large number for a perfect fit (remaining_after_fit == 0) can be beneficial.\n    priorities[can_fit_mask] = 1.0 / (remaining_after_fit + 1e-9)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using First Fit strategy.\n\n    The First Fit strategy prioritizes bins that can accommodate the item and\n    then selects the first one encountered (which implies prioritizing bins\n    with smaller remaining capacity that are still sufficient).\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        A higher score indicates a higher priority. Bins that cannot fit the\n        item are given a score of -1. Bins that can fit the item are scored\n        based on their remaining capacity, favoring smaller remaining capacities.\n    \"\"\"\n    priorities = np.full_like(bins_remain_cap, -1.0)  # Initialize with low priority (-1)\n\n    # Identify bins that can fit the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # For bins that can fit the item, assign a priority score.\n    # We want to prioritize bins with *less* remaining capacity first (First Fit logic).\n    # So, we assign a score that is inversely proportional to the remaining capacity.\n    # A simple way is to use the negative of the remaining capacity, so smaller\n    # remaining capacities (closer to zero) get higher (less negative) scores.\n    # Adding a small constant to ensure scores are non-negative for fitting bins,\n    # while still maintaining the relative order.\n    fitting_bins_capacities = bins_remain_cap[can_fit_mask]\n    if fitting_bins_capacities.size > 0:\n        # Create a score where smaller remaining capacity is better.\n        # (max_capacity - remaining_capacity) + epsilon can also work, but this is simpler for relative ordering.\n        # A large number minus remaining capacity will prioritize smaller remaining capacities.\n        # We use a large number to ensure these priorities are significantly higher than the default -1.\n        max_possible_capacity = np.max(bins_remain_cap) + item # A value larger than any possible remaining capacity\n        priorities[can_fit_mask] = max_possible_capacity - fitting_bins_capacities\n\n    return priorities\n\n[Reflection]\nPrioritize bins with minimal remaining capacity for First Fit. Consider relative bin fullness.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}