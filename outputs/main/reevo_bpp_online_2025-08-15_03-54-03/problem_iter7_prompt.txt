{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\nPrioritize minimal *positive* residual capacity for tighter fits. Consider relative fullness and smooth, non-linear functions for graduated scores. Explore simple First Fit as a baseline.\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using a strategy\n    that prioritizes bins with minimal *relative* remaining capacity after packing.\n\n    This version aims to differentiate \"good\" fits by considering the proportion\n    of remaining capacity relative to the bin's original capacity (approximated by\n    current remaining capacity + item size). It favors bins that are filled\n    more completely in proportion to their available space.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        A higher score indicates a higher priority. Bins that cannot fit the\n        item are given a score of -1. Bins that can fit are scored based on\n        the *relative* remaining capacity after packing, favoring those that\n        are more \"tightly\" filled.\n    \"\"\"\n    priorities = np.full_like(bins_remain_cap, -1.0)  # Initialize with low priority (-1)\n\n    # Identify bins that can fit the item\n    can_fit_mask = bins_remain_cap >= item\n\n    # For bins that can fit the item, calculate the remaining capacity *after* packing\n    fitting_bins_indices = np.where(can_fit_mask)[0]\n\n    if fitting_bins_indices.size > 0:\n        fitting_bins_capacities = bins_remain_cap[fitting_bins_indices]\n        resulting_remain_cap = fitting_bins_capacities - item\n\n        # To prioritize tighter fits, we want to favor bins where `resulting_remain_cap`\n        # is small relative to the bin's capacity before packing.\n        # The \"capacity before packing\" can be approximated by `fitting_bins_capacities`.\n        # A score that is inversely proportional to `resulting_remain_cap / fitting_bins_capacities`\n        # would favor smaller relative remaining space.\n        # To avoid division by zero or near-zero capacities, we can use:\n        # 1 / (resulting_remain_cap + epsilon) as a base score,\n        # and then potentially scale it by the proportion filled.\n\n        # A simpler approach to prioritize smaller *absolute* remaining capacity,\n        # while differentiating:\n        # Consider the \"tightness\" as (bin_capacity_before_item - resulting_remain_cap) / bin_capacity_before_item\n        # which simplifies to `item / fitting_bins_capacities`.\n        # This favors bins where the item takes up a larger proportion of the current space.\n        # To ensure higher score for better fit (larger proportion), we use this value directly.\n        # We still want to prefer bins that result in *less* remaining space overall if proportions are equal.\n        # Let's combine these: prioritize by (1 - proportion of remaining space).\n        # Proportion of remaining space = resulting_remain_cap / fitting_bins_capacities\n        # So, priority = 1 - (resulting_remain_cap / fitting_bins_capacities)\n        # = (fitting_bins_capacities - resulting_remain_cap) / fitting_bins_capacities\n        # = item / fitting_bins_capacities\n\n        # To ensure higher values are better, we can use a large constant minus this proportion,\n        # or directly use the proportion if we invert the logic and say smaller proportion is worse.\n        # Let's aim for higher score = better fit.\n        # Good fit means small `resulting_remain_cap`.\n        # So, a priority score like `1.0 / (resulting_remain_cap + epsilon)` is good.\n        # To incorporate the \"relative\" aspect, we can penalize bins that leave a lot of space relatively.\n        # Consider the \"waste\" as `resulting_remain_cap`. We want to minimize this waste.\n        # Prioritize by `large_value - resulting_remain_cap`.\n        # To make it relative, we can consider `large_value - resulting_remain_cap / fitting_bins_capacities`\n        # This still might not differentiate enough.\n\n        # Let's go back to prioritizing smaller *absolute* remaining capacity after packing,\n        # but also consider the original capacity available.\n        # A bin that is almost full is good. `fitting_bins_capacities - resulting_remain_cap` is `item`.\n        # We want to maximize `item / fitting_bins_capacities`.\n        # However, if two bins have the same `item / fitting_bins_capacities`, we should\n        # prefer the one with less `resulting_remain_cap`.\n\n        # A heuristic: priority = C - resulting_remain_cap.\n        # To make it relative, and ensure higher is better:\n        # Score = (fitting_bins_capacities - resulting_remain_cap) / fitting_bins_capacities\n        # = item / fitting_bins_capacities.\n        # This score is between 0 and 1. Higher means better fit.\n        # To make it more discriminating and always positive, and larger for better fits:\n        # Use `1 / (resulting_remain_cap + epsilon)` as in v0, but refine.\n        # Or use `fitting_bins_capacities - resulting_remain_cap`.\n\n        # Let's try to score based on how \"full\" the bin becomes relative to its initial state.\n        # A bin that is already very full is more likely to be a \"tight\" fit.\n        # Priority = `fitting_bins_capacities` - `resulting_remain_cap`\n        # This is `item`. So, this prioritizes larger items when fitting tightly.\n        # This doesn't account for the proportion.\n\n        # Consider the inverse of the *proportion* of remaining capacity.\n        # Proportion remaining = `resulting_remain_cap / fitting_bins_capacities`\n        # We want to minimize this proportion. So, priority is inversely related to it.\n        # Priority = `fitting_bins_capacities / (resulting_remain_cap + epsilon)`\n\n        epsilon = 1e-9\n        # This prioritizes bins where the remaining capacity is small *relative* to its current capacity.\n        # E.g., if bin has 10 capacity, item is 7, resulting cap is 3. Ratio = 3/10 = 0.3. Score = 1/0.3 = 3.33\n        # If bin has 100 capacity, item is 7, resulting cap is 93. Ratio = 93/100 = 0.93. Score = 1/0.93 = 1.07\n        # This clearly favors the first case (tighter fit).\n        priorities[fitting_bins_indices] = fitting_bins_capacities / (resulting_remain_cap + epsilon)\n\n    return priorities\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}