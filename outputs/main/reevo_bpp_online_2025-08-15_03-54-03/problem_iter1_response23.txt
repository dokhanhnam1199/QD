```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Almost Full Fit strategy.

    In the Almost Full Fit strategy, bins that are close to being full are prioritized.
    This heuristic aims to leave larger empty spaces in other bins for potentially larger future items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Consider only bins where the item can actually fit
    valid_bins_mask = bins_remain_cap >= item

    # Calculate the "emptiness" of each bin after placing the item
    # A smaller value means the bin is "closer" to full after placement
    emptiness_after_placement = bins_remain_cap - item

    # Prioritize bins that will have the smallest remaining capacity after placing the item.
    # This means bins that are already quite full are preferred.
    # We invert this so that smaller emptiness values get higher priority.
    # Add a small epsilon to avoid division by zero if a bin is perfectly full (though unlikely in online scenarios).
    # Also, add 1 to the denominator to prevent division by zero or very large numbers if emptiness is zero.
    # The term `bins_remain_cap` in the denominator encourages bins that started with larger capacities to be considered
    # if they can still accommodate the item and become "almost full".
    priorities[valid_bins_mask] = 1.0 / (emptiness_after_placement[valid_bins_mask] + 1e-9)

    # Optionally, you could add a factor to consider the initial capacity of the bin.
    # For example, bins that started with a large capacity and are now "almost full"
    # might be more valuable than bins that started small and are now "almost full".
    # However, the basic Almost Full Fit typically focuses on minimizing remaining space.

    return priorities
```
