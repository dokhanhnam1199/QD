```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, using Best Fit strategy.

    The Best Fit strategy prioritizes bins that have the smallest remaining capacity
    that can still accommodate the item. This aims to fill bins as tightly as possible,
    minimizing wasted space in the selected bin. The priority is calculated as
    the negative of the remaining capacity after the item is placed.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a higher priority. Bins that cannot fit the item
        will have a priority of negative infinity.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf)  # Initialize with a very low priority

    # Calculate priority for bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item
    
    # For bins that can fit, the priority is the negative of the remaining capacity
    # after placing the item. This means a smaller remaining capacity (more negative)
    # results in a higher (less negative) priority score.
    priorities[can_fit_mask] = -(bins_remain_cap[can_fit_mask] - item)

    return priorities
```
