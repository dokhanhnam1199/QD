{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version aims to prioritize bins that are \"tighter fits\" by\n    considering the inverse of remaining capacity, but scaled to provide\n    a graduated priority rather than just inverse proportionality. It also\n    considers the relative fullness of the bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        A higher score indicates a higher priority. Bins that cannot fit the\n        item are given a score of -1.\n    \"\"\"\n    priorities = np.full_like(bins_remain_cap, -1.0)  # Initialize with low priority\n\n    # Identify bins that can fit the item\n    can_fit_mask = bins_remain_cap >= item\n\n    if np.any(can_fit_mask):\n        fitting_bins_capacities = bins_remain_cap[can_fit_mask]\n\n        # Strategy: Prioritize bins with minimal remaining capacity (tighter fit).\n        # We can use the difference between the item size and the remaining capacity\n        # as a measure of how \"tight\" the fit is. A smaller positive difference is better.\n        # Or, more directly, use a function of remaining capacity that increases as capacity decreases.\n        #\n        # Let's use a scaled inverse:  1 / (remaining_capacity - item + epsilon)\n        # This prioritizes bins where remaining_capacity is just slightly larger than item.\n        # Adding epsilon to avoid division by zero if remaining_capacity == item.\n        epsilon = 1e-9\n        priorities[can_fit_mask] = 1.0 / (fitting_bins_capacities - item + epsilon)\n\n        # Alternative consideration for relative fullness:\n        # If all bins are nearly empty, any fit might be fine. If bins are nearly full,\n        # a tight fit is crucial.\n        # We can also incorporate the concept of \"how much space is left\" by taking\n        # the difference from a maximum possible remaining capacity (e.g., sum of all items\n        # or a theoretical large capacity).\n        # A more direct approach for \"tightness\" could be:\n        # priorities[can_fit_mask] = np.max(fitting_bins_capacities) - fitting_bins_capacities\n        # This prioritizes bins with the smallest remaining capacity among the fitting ones.\n        #\n        # Let's refine the scaled inverse to be more robust and provide a clearer gradient.\n        # We want smaller remaining capacities to have higher scores.\n        # Let's consider the \"slack\" or \"waste\" space for a perfect fit.\n        # If remaining capacity is R and item is I, the ideal scenario is R = I.\n        # The \"waste\" is R - I. We want to minimize R - I.\n        # So, a score proportional to -(R - I) or 1/(R - I + epsilon) works.\n        #\n        # To make it more distinct from simple First Fit, we can consider\n        # how much *extra* space there is. A bin with R=10 and item=5 gives R-I=5.\n        # A bin with R=12 and item=5 gives R-I=7. We prefer R=10.\n        #\n        # Let's use a transformation that emphasizes smaller positive differences (R - I).\n        # We can use a concave function of (R - I) which gives higher priority to smaller positive differences.\n        # For example, log(slack + 1) or sqrt(slack + 1) would favor smaller slacks.\n        # However, the prompt implies a higher score is better.\n        #\n        # Let's stick to a form that clearly prioritizes minimum remaining capacity among fitting bins,\n        # but with a scaling that gives a more graduated response.\n        # We can use the inverse of (remaining_capacity - item + epsilon) but normalize it.\n        #\n        # Let's go with prioritizing minimum remaining capacity among fitting bins,\n        # as it directly reflects the \"tighter fit\" idea. The previous `priority_v1`\n        # already does this effectively by `max_possible_capacity - fitting_bins_capacities`.\n        #\n        # To introduce \"smoothness\" and \"graduation\", consider mapping the\n        # available slack (remaining_capacity - item) to a priority score.\n        # A higher score for smaller slack.\n        #\n        # Let `slack = fitting_bins_capacities - item`\n        # We want to maximize `f(slack)` where `f` is decreasing.\n        # For example, `f(slack) = 1 / (slack + epsilon)` or `f(slack) = -slack`.\n        #\n        # Let's try a formulation that uses the inverse of the *full* remaining capacity,\n        # but only for fitting bins, then scale it. This implicitly prefers bins\n        # that were less full to begin with if they have a tight fit for the *current* item.\n        #\n        # Consider: priority = 1 / (remaining_capacity + epsilon)\n        # This would favor bins that have less total capacity available, IF they fit the item.\n        # This might not be what we want; we want to prioritize based on how well the *item* fits.\n        #\n        # Revisit: prioritize bins with minimal remaining capacity that are still sufficient.\n        # This is exactly what `priority_v1` with `max_possible_capacity - fitting_bins_capacities` does.\n        #\n        # To introduce \"graduation\" and \"smoothness\" beyond simple inverse proportionality:\n        # We can map the range of `fitting_bins_capacities` to a new range of priorities.\n        # A common approach for graduated priorities is to use a sigmoid-like function\n        # or simply a scaled inverse.\n        #\n        # Let's try `1 / (remaining_capacity - item + epsilon)`. This emphasizes *very* small positive differences.\n        #\n        # We can refine the inverse by shifting and scaling:\n        # `scaled_priority = A * (1 / (fitting_bins_capacities - item + epsilon)) + B`\n        #\n        # A simpler way to achieve graduated priorities for \"tightest fit\" is to\n        # use the negative of the remaining capacity (as in v1), but then perhaps\n        # normalize it within the set of fitting bins, or apply a non-linear transformation.\n        #\n        # Let's try a score that is directly related to the *lack* of excessive space.\n        # For a fitting bin with remaining capacity `R` and item size `I`:\n        # Score = MaxPossibleRemainingCapacity - R\n        # This prioritizes bins with the smallest `R`.\n        #\n        # To make it \"smoother\" or \"graduated\":\n        # We can map `R` to a score such that small `R` values (close to `I`) get\n        # high scores, and `R` values far from `I` get lower scores.\n        #\n        # Let's use the reciprocal of the *waste* space `(R-I)`.\n        # `waste = fitting_bins_capacities - item`\n        # `priorities[can_fit_mask] = 1.0 / (waste + epsilon)`\n        #\n        # This prioritizes bins where `waste` is minimal (i.e., `R` is just slightly larger than `I`).\n        # This is a strong candidate for \"tighter fits\" and provides a graduated priority.\n\n        waste = fitting_bins_capacities - item\n        # Ensure we don't have negative waste (handled by can_fit_mask)\n        # Add epsilon for numerical stability and to give a finite priority\n        # even when waste is exactly zero.\n        priorities[can_fit_mask] = 1.0 / (waste + epsilon)\n\n        # To ensure \"graduation\" and sensitivity adjustment, we could scale this.\n        # For instance, scaling by the average waste or max waste might be useful.\n        # For simplicity, let's stick to the direct reciprocal of waste for now,\n        # as it naturally provides higher values for smaller waste.\n\n        # Consider normalizing:\n        # raw_priorities = 1.0 / (waste + epsilon)\n        # if raw_priorities.size > 0:\n        #     min_p = np.min(raw_priorities)\n        #     max_p = np.max(raw_priorities)\n        #     if max_p - min_p > epsilon:\n        #         priorities[can_fit_mask] = (raw_priorities - min_p) / (max_p - min_p)\n        #     else:\n        #         priorities[can_fit_mask] = 0.5 # All same priority if range is tiny\n\n        # The normalization might be too aggressive or change the relative ordering\n        # in a way that's not intended. The inverse of waste is usually sufficient.\n\n        # Let's consider the \"relative fullness\" of bins.\n        # A bin with remaining capacity `R` relative to some max capacity `M` (e.g., bin capacity, or overall max capacity).\n        # Suppose all bins have a maximum capacity of `C`.\n        # Relative fullness could be `(C - R) / C`.\n        # We want to pack into bins that have a tight fit.\n        #\n        # Let's go back to the core idea: prioritize bins with minimal remaining capacity that are still sufficient.\n        # `priority = -remaining_capacity` (as in v1, but without the `max_capacity` offset)\n        # `priorities[can_fit_mask] = -fitting_bins_capacities`\n        # This is still essentially First Fit.\n        #\n        # The reflection asks for \"inverse, scaled differences, or positive residuals for tighter fits.\"\n        # \"Positive residuals\" -> `remaining_capacity - item`. We want to minimize this.\n        # So, priority should be inversely related to `remaining_capacity - item`.\n        # `priority = 1 / (remaining_capacity - item + epsilon)` is a good choice.\n        #\n        # \"Scaled differences\" could mean scaling this inverse.\n        # E.g., `priority = scale * (1 / (remaining_capacity - item + epsilon))`\n        # or `priority = scale_factor * (1 / (remaining_capacity + epsilon))`\n        # where `scale_factor` depends on `item`.\n        #\n        # Let's consider a \"positive residual\" transformed:\n        # `residual = remaining_capacity - item`.\n        # We want to favor smaller positive residuals.\n        #\n        # Consider a score that reflects how much 'empty' space is left AFTER fitting the item.\n        # `space_left = remaining_capacity - item`\n        # We want bins with small `space_left`.\n        # A priority score that is `1 / (space_left + epsilon)` will give higher scores to smaller `space_left`.\n        # This fits the \"inverse\" and \"positive residuals for tighter fits\" criteria.\n\n        space_left = fitting_bins_capacities - item\n        priorities[can_fit_mask] = 1.0 / (space_left + epsilon)\n\n        # To introduce more graduation, we can apply a non-linear transformation to `space_left`\n        # before taking the inverse, or scale the inverse itself.\n        # For example, `log(1 + space_left)` is a decreasing function, so `1 / log(1 + space_left)`\n        # would prioritize smaller `space_left`.\n        #\n        # Let's consider a different approach: prioritize bins that have *less* total capacity available,\n        # IF they can fit the item. This is not directly about \"tightness\" but about using up less \"valuable\"\n        # (less capacious) bins first.\n        # `priorities[can_fit_mask] = 1.0 / (fitting_bins_capacities + epsilon)`\n        # This prioritizes bins with smaller `remaining_capacity`. This is also a form of First Fit.\n        #\n        # The goal is a *priority function* that guides selection. The highest priority score is chosen.\n        #\n        # Let's ensure \"smoothness\" and \"graduation\".\n        # The `1 / (waste + epsilon)` approach already provides a good graduation where the slope\n        # is steeper for very small waste values.\n        #\n        # Consider a scenario:\n        # Bins: [10, 12, 15]\n        # Item: 5\n        #\n        # Fitting bins: [10, 12, 15]\n        # Waste: [5, 7, 10]\n        #\n        # Priority (1 / (waste + epsilon)):\n        # 1/5.000000001 \u2248 0.2\n        # 1/7.000000001 \u2248 0.14\n        # 1/10.000000001 \u2248 0.1\n        #\n        # This correctly prioritizes the bin with remaining capacity 10.\n        #\n        # What if we want to adjust sensitivity? We could introduce a parameter `alpha`.\n        # `priority = 1 / (waste + epsilon)**alpha`\n        # For `alpha = 1`, we get the above.\n        # For `alpha < 1`, the function is less steep for small waste.\n        # For `alpha > 1`, the function is more steep for small waste.\n        #\n        # Let's use `alpha = 0.5` (square root of waste) as an example of \"smoother graduation\".\n        # `priority = 1 / sqrt(waste + epsilon)`\n        #\n        # Or maybe prioritize the bin that results in the *least* remaining capacity after packing.\n        # This is equivalent to prioritizing the bin with minimum `remaining_capacity` that fits the item.\n        # Which is `priority = -remaining_capacity`.\n\n        # Final decision: prioritize bins with the smallest *positive* slack (remaining capacity - item).\n        # This is achieved by `1 / (remaining_capacity - item + epsilon)`.\n        # This naturally gives higher priority to tighter fits and has a graduated nature.\n        # We can potentially scale this to adjust sensitivity.\n        # A simple scaling: multiply by a constant `K`.\n        # `priority = K * (1 / (waste + epsilon))`\n        # The magnitude of `K` doesn't change the *ordering* but affects the relative differences.\n        # For simplicity, let's not add an arbitrary scaling factor unless specified.\n\n        # Consider the \"relative fullness\": if bins are generally very full, a tight fit is more important.\n        # If bins are generally empty, any fit might be acceptable.\n        # The `1 / (waste + epsilon)` already captures this implicitly because 'waste' is relative to the item.\n\n        # Let's try a formulation that directly uses the remaining capacity in a way that\n        # emphasizes smaller values for fitting bins, but is not just inverse.\n        # A simple non-linear transformation could be `remaining_capacity**2` (prioritizing smaller capacities)\n        # or `1 / remaining_capacity` (prioritizing smaller capacities).\n        #\n        # The reflection mentions \"inverse, scaled differences, or positive residuals\".\n        # `1 / (remaining_capacity - item + epsilon)` seems to best capture \"inverse of positive residuals for tighter fits\".\n        #\n        # To make it more \"graduated\" and less \"binary\" than simple First Fit (which picks the first one that fits),\n        # we need scores that distinguish between fitting bins.\n        #\n        # Let's re-evaluate the `priority_v1` approach: `max_possible_capacity - fitting_bins_capacities`.\n        # This prioritizes bins with the *least* remaining capacity among those that fit.\n        # This IS the First Fit logic.\n        #\n        # The reflection suggests \"positive residuals\" for \"tighter fits\".\n        # Residual = `remaining_capacity - item`. We want to minimize this positive residual.\n        #\n        # Let's try a form that explicitly penalizes larger residuals more heavily:\n        # `priority = - (remaining_capacity - item)` --> This prioritizes smaller residuals, but is linear.\n        # `priority = - (remaining_capacity - item)**2` --> Prioritizes smaller residuals more strongly.\n        # `priority = 1 / (remaining_capacity - item + epsilon)` --> Prioritizes smaller residuals.\n        #\n        # The \"scaled differences\" part could imply scaling `remaining_capacity - item`.\n        #\n        # Let's try prioritizing bins that have `remaining_capacity` closer to `item`.\n        # This means we want to maximize a function that is high when `remaining_capacity` is close to `item`.\n        #\n        # Let's use the *difference* from the ideal fit, but make it a positive value that is smaller for better fits.\n        # `diff = abs(remaining_capacity - item)`\n        # We want to prioritize bins where `diff` is small.\n        # So, priority should be inversely related to `diff`.\n        # `priority = 1 / (abs(remaining_capacity - item) + epsilon)`\n        #\n        # However, for online BPP, we *must* fit the item. So we only consider bins where `remaining_capacity >= item`.\n        # For these bins, `abs(remaining_capacity - item)` is just `remaining_capacity - item`.\n        #\n        # So, `priority = 1 / (remaining_capacity - item + epsilon)` seems to be the most direct interpretation of \"prioritize\n        # bins with minimal remaining capacity that are still sufficient\" and \"positive residuals for tighter fits\".\n        #\n        # To add \"scaled differences\" and \"graduated priorities\":\n        # Consider a function `f(remaining_capacity)` that is decreasing.\n        # E.g., `f(R) = 1 / (R - I + epsilon)`.\n        # We can modify this:\n        # `f(R) = 1 / ( (R - I) / C + epsilon )` where C is some scaling factor (e.g., bin capacity, max item size).\n        # Or `f(R) = K * (1 / (R - I + epsilon))` where K adjusts overall priority magnitude.\n        #\n        # Let's try a slightly different angle for \"graduated\":\n        # Prioritize bins that are not too empty, but can fit the item.\n        #\n        # What if we prioritize bins that have a larger *proportion* of their remaining capacity used?\n        # `fill_ratio = item / remaining_capacity` (for fitting bins)\n        # This gives higher priority to bins where the item fills a larger portion of the remaining space.\n        # This is still similar to `1 / remaining_capacity`.\n        #\n        # Let's stick with prioritizing the tightest fit using the inverse of the slack.\n        #\n        # `slack = fitting_bins_capacities - item`\n        # `priorities[can_fit_mask] = 1.0 / (slack + epsilon)`\n        #\n        # To make it more \"graduated\" and less sensitive to very small slacks,\n        # we can raise the slack to a power greater than 1 before taking the inverse.\n        # `priorities[can_fit_mask] = 1.0 / ((slack + epsilon)**power)` where `power > 1`.\n        # E.g., `power = 1.5` or `power = 2.0`. This would make the priority drop off faster\n        # as slack increases.\n        #\n        # Let's try `power = 1.5` for a smoother, graduated decrease in priority as slack grows.\n\n        slack = fitting_bins_capacities - item\n        power = 1.5  # Adjust for graduation sensitivity\n        priorities[can_fit_mask] = 1.0 / ((slack + epsilon)**power)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority using a sigmoid-based function that favors bins with small positive residuals.\n\n    This heuristic prioritizes bins where the remaining capacity (`r`) after placing the item\n    is as close to zero as possible, but still non-negative. The sigmoid function\n    `1 / (1 + exp(k * r))` is used, where `k` is a sensitivity parameter.\n    A higher `k` makes the priority drop faster as `r` increases.\n    Bins where the item does not fit (i.e., `r < 0`) receive a priority of 0.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Sensitivity parameter for the sigmoid function.\n    # A higher k means a sharper drop in priority as the remaining capacity increases.\n    # This value can be tuned based on experimental results.\n    k = 15.0  # Increased sensitivity\n\n    # Initialize priorities to 0. Bins where the item cannot fit will keep this score.\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate the remaining capacity if the item were placed in each bin.\n    residuals = bins_remain_cap - item\n\n    # Identify bins where the item can fit (residual >= 0).\n    can_fit_mask = residuals >= 0\n\n    # For bins that can fit the item, calculate the priority score using the sigmoid function.\n    # The function 1 / (1 + exp(k * residual)) produces scores between 0 and 1.\n    # - When residual is 0 (perfect fit), score is 1 / (1 + exp(0)) = 0.5.\n    # - When residual is small positive (e.g., 0.01, k=15), arg is 0.15, score is ~0.53 (slightly higher priority).\n    # - When residual is large positive (e.g., 1.0, k=15), arg is 15.0, score is ~0.000003 (very low priority).\n    # This correctly prioritizes bins with the smallest positive residuals.\n    if np.any(can_fit_mask):\n        # Apply sigmoid to the residuals. Higher `k` will make the priority drop more sharply\n        # as the residual increases, effectively favoring bins with minimal remaining capacity.\n        priorities[can_fit_mask] = 1.0 / (1.0 + np.exp(k * residuals[can_fit_mask]))\n\n    return priorities\n\n[Reflection]\nPrioritize tight fits with graduated scores. Tune sensitivity. Explore non-linear transformations.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}