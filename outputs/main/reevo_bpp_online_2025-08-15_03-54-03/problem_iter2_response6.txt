```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic implements a "Best Fit" strategy by prioritizing bins that
    will have the *minimal remaining capacity* after placing the item.
    This aims to leave larger contiguous spaces in other bins for potentially
    larger future items.

    The priority is calculated as the inverse of the remaining capacity
    after placing the item, plus a small epsilon to avoid division by zero.
    A smaller remaining capacity after fitting results in a higher priority score.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Identify bins that can fit the item
    can_fit_mask = bins_remain_cap >= item

    if np.any(can_fit_mask):
        # Calculate the remaining capacity after placing the item in fitting bins
        remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item

        # Prioritize bins that leave the *least* remaining capacity.
        # We use the inverse of this remaining capacity as the priority.
        # Add a small epsilon to avoid division by zero for perfect fits.
        epsilon = 1e-6
        priorities[can_fit_mask] = 1.0 / (remaining_capacity_after_fit + epsilon)
    
    return priorities
```
