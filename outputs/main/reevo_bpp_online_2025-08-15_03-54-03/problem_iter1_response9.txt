```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Softmax-Based Fit.

    The priority is calculated as follows:
    For each bin, calculate the 'fit' which is the remaining capacity after placing the item.
    If the item fits, the 'fit' is bins_remain_cap - item.
    If the item does not fit, assign a very low fit value (negative infinity) to disincentivize choosing this bin.
    Apply the softmax function to these 'fit' values to get probabilities (priorities).
    A higher 'fit' value (meaning less remaining capacity after packing) results in a higher priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity if the item is placed in each bin.
    # If the item doesn't fit, assign a very small negative number (-inf)
    # to ensure it gets a very low priority after softmax.
    potential_fits = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)

    # Apply softmax to convert the 'fit' values into probabilities (priorities).
    # Adding a small epsilon to the denominator to avoid division by zero if all potentials are -inf.
    # However, softmax naturally handles this by producing a uniform distribution if all inputs are equal
    # or very small negative numbers result in probabilities close to zero for those bins.
    # A simple softmax formula: exp(x_i) / sum(exp(x_j))
    exp_fits = np.exp(potential_fits)
    sum_exp_fits = np.sum(exp_fits)

    # Handle the case where sum_exp_fits is zero (all potential_fits were -inf)
    if sum_exp_fits == 0:
        return np.zeros_like(bins_remain_cap)

    priorities = exp_fits / sum_exp_fits

    return priorities
```
