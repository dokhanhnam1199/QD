```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Best Fit strategy.

    The Best Fit strategy prioritizes bins that can accommodate the item and
    then selects the bin that results in the smallest remaining capacity after
    packing. This version refines the scoring to more directly reflect the "best fit"
    by minimizing the remaining capacity after placement.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a higher priority. Bins that cannot fit the
        item are given a score of -1. Bins that can fit the item are scored
        based on the *remaining capacity after packing*, favoring smaller
        remaining capacities. A lower remaining capacity after packing yields a higher score.
    """
    priorities = np.full_like(bins_remain_cap, -1.0)  # Initialize with a low priority score

    # Calculate potential remaining capacity if the item fits in each bin
    potential_remaining_caps = bins_remain_cap - item

    # Identify bins that can accommodate the current item
    can_fit_mask = potential_remaining_caps >= 0

    # For bins that can fit the item, assign a priority score.
    # The "best fit" is achieved when the remaining capacity after placing the item is minimized.
    # To translate minimizing remaining capacity into maximizing priority score,
    # we can use the negative of the potential remaining capacity.
    # A smaller positive remaining capacity will result in a larger negative number,
    # thus a higher score when we want to prioritize it.
    fitting_bins_potential_remaining = potential_remaining_caps[can_fit_mask]

    if fitting_bins_potential_remaining.size > 0:
        # Assign priorities: -potential_remaining_caps.
        # This way, a smaller potential_remaining_caps (meaning a better fit)
        # will result in a larger (less negative) or positive value, hence higher priority.
        priorities[can_fit_mask] = -fitting_bins_potential_remaining

    return priorities
```
