```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Almost Full Fit strategy.

    The Almost Full Fit strategy prioritizes bins that have just enough remaining
    capacity to fit the item, aiming to leave larger remaining capacities in other
    bins for potentially larger future items. This implementation gives a higher
    priority to bins where the remaining capacity is just slightly larger than the
    item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a very small negative number (or zero)
    # to ensure that bins that cannot fit the item get a low priority.
    priorities = np.full_like(bins_remain_cap, -float('inf'))

    # Identify bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate the priority.
    # The priority is inversely related to the remaining capacity after placing the item.
    # A smaller remaining capacity (i.e., item fits "snugly") gets a higher priority.
    # To achieve "almost full", we can consider the difference between remaining capacity
    # and the item size. A smaller difference indicates the bin is closer to being full
    # after fitting the item.
    # We can use a penalty or bonus based on how "close" it is.
    # A simple approach is to take the reciprocal of the remaining capacity
    # after fitting the item, but this might lead to very large numbers if
    # remaining capacity is very small.
    # A more controlled approach is to reward bins where (bins_remain_cap - item) is small.
    # We can use the inverse of (bins_remain_cap - item + epsilon) to avoid division by zero,
    # or a function that peaks at 0.
    # Let's try rewarding bins where the difference (bins_remain_cap - item) is close to 0.

    # Calculate the remaining capacity if the item is placed in the bin
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # The priority will be higher for smaller `remaining_after_fit` values.
    # We can use a function like 1 / (remaining_after_fit + epsilon) or
    # an exponential function like exp(-k * remaining_after_fit).
    # Let's use an exponential decay, where smaller remaining capacity means higher priority.
    # We want to maximize the priority.
    # A small epsilon is added to avoid division by zero if remaining_after_fit is 0.
    epsilon = 1e-9
    priorities[can_fit_mask] = 1.0 / (remaining_after_fit + epsilon)

    # Alternative strategy: Prioritize bins where remaining capacity is 'just enough'
    # This means bins where bins_remain_cap - item is small.
    # We can define a threshold for 'just enough'.
    # For example, if bin_capacity - item < bin_capacity * tolerance
    # A simpler approach for "Almost Full Fit" is to prioritize bins that are closer to being full.
    # The 'almost full' aspect can be captured by prioritizing bins with *less* remaining capacity
    # that can still fit the item.
    # So, the priority should be inversely related to `bins_remain_cap` among those that can fit the item.

    # Let's refine the priority:
    # For bins that can fit: prioritize those with smaller `bins_remain_cap`.
    # This means the priority should be `1 / bins_remain_cap` for fitting bins.
    # Or, to give a stronger preference to "almost full" bins, we can make the priority
    # even more sensitive to smaller remaining capacities.
    # Let's try prioritizing bins with smallest `bins_remain_cap` that can fit the item.

    # Reset priorities to calculate a new scheme
    priorities = np.full_like(bins_remain_cap, -float('inf'))
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, assign priority based on their current remaining capacity.
    # Smaller remaining capacity means higher priority (closer to "almost full").
    # We can use a function that produces larger values for smaller `bins_remain_cap`.
    # For example: 1 / (bins_remain_cap[can_fit_mask])
    # To give a more pronounced "almost full" effect, let's use an inverse relationship
    # that amplifies smaller values.
    # Consider `1 / (bins_remain_cap[can_fit_mask] - item + epsilon)` as before, which focuses
    # on the space left *after* packing. This aligns well with aiming for fuller bins.

    # Let's stick to the idea of penalizing larger remaining capacities when an item fits.
    # The difference `bins_remain_cap - item` should be minimized.
    # A larger value of `1 / (bins_remain_cap - item + epsilon)` means smaller `bins_remain_cap - item`.
    priorities[can_fit_mask] = 1.0 / (bins_remain_cap[can_fit_mask] - item + epsilon)

    # Another interpretation of Almost Full Fit: find a bin where `bins_remain_cap` is
    # as close as possible to `item`, but still greater than or equal to `item`.
    # This means minimizing `bins_remain_cap - item`.
    # So, higher priority for smaller positive differences.

    # Let's try a heuristic that emphasizes bins where `bins_remain_cap` is slightly larger than `item`.
    # We want to prioritize bins where `bins_remain_cap` is close to `item`.
    # We can assign a high score if `bins_remain_cap` is just above `item` and lower scores
    # as `bins_remain_cap` increases further.

    # Initialize priorities for all bins
    priorities = np.zeros_like(bins_remain_cap)

    # Find indices of bins that can fit the item
    fitting_indices = np.where(bins_remain_cap >= item)[0]

    if fitting_indices.size > 0:
        # For bins that can fit, calculate a "tightness" score.
        # A tighter fit means smaller `bins_remain_cap`.
        # Let's use the inverse of `bins_remain_cap` for fitting bins.
        # To ensure a greater emphasis on 'almost full', we can amplify this.
        # A simple approach: reward bins that are "closer" to needing the item.
        # Consider `bins_remain_cap / item`. We want this ratio to be small but >= 1.
        # Or, `bins_remain_cap - item`. We want this to be small and non-negative.
        # Priority = 1 / (bins_remain_cap - item + epsilon) works well for minimizing the gap.

        # Let's consider the "almost full" aspect as being within a certain tolerance of full.
        # For simplicity, let's define priority as the inverse of remaining capacity for fitting bins.
        # This prioritizes bins with less remaining space.
        # The "almost" part can be achieved by not selecting the absolute *smallest* remaining capacity,
        # but one that's "sufficiently small".

        # A more explicit "Almost Full Fit" strategy:
        # Prioritize bins where `bins_remain_cap` is closest to `item` from above.
        # We can compute the difference `diff = bins_remain_cap - item`.
        # We want to prioritize bins where `diff` is small and non-negative.
        # Higher priority for smaller non-negative `diff`.

        diffs = bins_remain_cap[fitting_indices] - item
        # To get higher priority for smaller `diffs`, we can use `1 / (diffs + epsilon)`.
        # This rewards bins where the leftover space is minimal.
        priorities[fitting_indices] = 1.0 / (diffs + epsilon)

    return priorities
```
