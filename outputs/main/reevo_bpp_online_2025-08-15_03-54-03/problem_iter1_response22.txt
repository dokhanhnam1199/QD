```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Worst Fit strategy.

    The Worst Fit strategy aims to place the item into the bin with the largest remaining capacity.
    This heuristic aims to keep smaller bins for potentially smaller future items,
    delaying the need for new bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher priority means the bin is more suitable according to the Worst Fit strategy.
    """
    # Initialize priorities with negative infinity for bins that cannot fit the item
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, assign priority based on remaining capacity
    # The bin with the largest remaining capacity gets the highest priority.
    priorities[can_fit_mask] = bins_remain_cap[can_fit_mask]

    return priorities
```
