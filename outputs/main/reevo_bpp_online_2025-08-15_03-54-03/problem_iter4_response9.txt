```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority using a strategy that favors bins with minimal positive residuals.

    This heuristic prioritizes bins where the remaining capacity after placing the item
    is as close to zero as possible, but still non-negative. This aims to fill bins
    more tightly. Bins where the item does not fit will have the lowest priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a very low value, so bins that cannot fit the item
    # have the lowest priority.
    priorities = np.full_like(bins_remain_cap, -float('inf'))

    # Calculate the remaining capacity if the item were placed in each bin.
    residuals = bins_remain_cap - item

    # Identify bins where the item can fit (residual >= 0).
    can_fit_mask = residuals >= 0

    # For bins that can fit the item, the priority is inversely proportional to the residual.
    # We want to minimize the residual (residual >= 0), so a smaller residual means higher priority.
    # Using `1 / (residual + epsilon)` ensures that bins with smaller positive residuals
    # get higher scores. Adding epsilon avoids division by zero when residual is exactly 0.
    epsilon = 1e-9
    priorities[can_fit_mask] = 1.0 / (residuals[can_fit_mask] + epsilon)

    return priorities
```
