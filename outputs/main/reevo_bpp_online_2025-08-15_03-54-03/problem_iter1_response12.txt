```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Worst Fit strategy.

    The Worst Fit strategy aims to place the item into the bin with the largest remaining capacity.
    This is often done to leave smaller gaps in other bins, potentially allowing for better packing later.
    The priority score is therefore directly proportional to the remaining capacity of the bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a very small negative number to indicate that bins
    # that cannot accommodate the item should have the lowest priority.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify bins that can accommodate the current item.
    valid_bins_mask = bins_remain_cap >= item

    # For valid bins, the priority is simply their remaining capacity.
    # The higher the remaining capacity, the higher the priority (Worst Fit).
    priorities[valid_bins_mask] = bins_remain_cap[valid_bins_mask]

    return priorities
```
