```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Softmax-Based Fit.

    The priority is calculated based on the remaining capacity of the bin after
    placing the item. Bins with less remaining capacity after placement (i.e.,
    tighter fits) are given higher priority. The Softmax function is used to
    convert these "fit scores" into probabilities.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity if the item were placed in each bin
    # We only consider bins where the item can actually fit
    potential_remaining_capacities = bins_remain_cap - item
    
    # For bins where the item doesn't fit, assign a very low (or negative infinity)
    # priority to effectively exclude them from Softmax.
    # A large negative number will result in a very small exponential term.
    fit_scores = np.where(potential_remaining_capacities >= 0,
                          potential_remaining_capacities,
                          -np.inf)

    # To maximize the priority for bins that are a tighter fit, we can use
    # the negative of the remaining capacity. So, smaller remaining capacity
    # leads to a larger (less negative) value here.
    # If the item doesn't fit, the fit_scores are -np.inf, so these will
    # have a very low priority after softmax.
    
    # Apply Softmax to convert fit scores into probabilities/priorities
    # A higher fit_score (tighter fit) will result in a higher priority
    
    # Handle the case where all bins are -inf (item doesn't fit anywhere)
    if np.all(np.isneginf(fit_scores)):
        return np.zeros_like(bins_remain_cap)
    
    exp_fit_scores = np.exp(fit_scores - np.max(fit_scores)) # Subtract max for numerical stability
    priorities = exp_fit_scores / np.sum(exp_fit_scores)

    return priorities
```
