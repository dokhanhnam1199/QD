[Code]
```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a heuristic that prioritizes tighter fits.

    This heuristic aims to find bins where the remaining capacity is just enough
    to fit the item, or close to it. It penalizes bins with very large remaining
    capacities and prioritizes bins with smaller remaining capacities that still
    accommodate the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a higher priority. Bins that cannot fit the
        item are given a score of -1. Bins that can fit the item are scored
        based on their remaining capacity, favoring smaller remaining capacities.
    """
    priorities = np.full_like(bins_remain_cap, -1.0)  # Initialize with low priority (-1)

    # Identify bins that can fit the item
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, assign a priority score.
    # We want to prioritize bins with the smallest sufficient remaining capacity.
    # A good heuristic is to maximize (remaining_capacity - item) for fitting bins,
    # or equivalently, minimize (remaining_capacity) for fitting bins.
    # To make smaller remaining capacities have higher scores, we can use
    # a transformation that maps smaller values to larger values.
    # For example, 1 / (remaining_capacity - item + epsilon) or (max_capacity - remaining_capacity).
    # Let's use a scaled difference approach. Prioritize bins where remaining_capacity is just slightly larger than item.
    # We can define priority as a value that is high when (bins_remain_cap - item) is small and positive.
    # A simple approach: (large_constant - (bins_remain_cap - item)) for fitting bins.
    # This prioritizes bins where (bins_remain_cap - item) is minimal.
    
    fitting_bins_capacities = bins_remain_cap[can_fit_mask]

    if fitting_bins_capacities.size > 0:
        # Calculate the "slack" or excess capacity for fitting bins
        slack = fitting_bins_capacities - item
        
        # We want to prioritize bins with minimal slack.
        # A common heuristic is to use a value that is inversely related to slack,
        # or directly related to a transformation that maps small slacks to large priorities.
        # For example, max_slack - slack.
        # To ensure scores are distinct and generally higher for better fits,
        # we can use a large base value and subtract the slack.
        # Let's use a base value that is larger than any possible slack.
        # The maximum possible slack is related to the maximum initial bin capacity,
        # but for simplicity, we can use a large constant or derive one from the input.
        # A simple inverse relation can be problematic if slack is zero.
        # Using `max_slack - slack` or `1 / (slack + epsilon)` are options.
        # Let's try `max_possible_slack - slack` for a graded priority.
        # A safe "max_possible_slack" would be max(bins_remain_cap) - min_item_size if we knew it,
        # or just a sufficiently large number.
        # Alternatively, we can simply use a function that is monotonically decreasing with slack.
        # Example: `1 / (slack + 1e-6)` or `some_large_number - slack`.
        # Let's use `1 / (slack + epsilon)` for a stronger preference for tighter fits,
        # scaled by a factor to ensure positive and distinct values.
        # Using `max(slack) - slack` would give the tightest fit the highest score.
        
        # Alternative: prioritize based on remaining capacity directly, inverted.
        # A simple inverted remaining capacity: some_large_number - remaining_capacity
        # This also favors smaller remaining capacities.
        # Let's use `max_remaining_capacity - remaining_capacity` for fitting bins.
        
        # Maximize (bin_capacity - item) where bin_capacity >= item.
        # This means minimizing bin_capacity for fitting bins.
        # We want higher scores for bins with smaller remaining_capacity.
        # So, `constant - remaining_capacity` works.
        # To ensure positive and meaningful scores, we can use:
        # `1000 - remaining_capacity` or `max(bins_remain_cap) - remaining_capacity`.
        
        # Let's refine the idea: We want to prioritize bins where `remaining_capacity` is small,
        # but still `>= item`. The "best" bin has `remaining_capacity` closest to `item`.
        # So, `remaining_capacity - item` should be minimized.
        # To map minimal `remaining_capacity - item` to maximal priority:
        # `constant - (remaining_capacity - item)` or `1 / (remaining_capacity - item + epsilon)`.
        # Using `max_slack - slack` is quite robust.
        
        max_slack_for_fitting = np.max(slack)
        priorities[can_fit_mask] = max_slack_for_fitting - slack

    return priorities
```
