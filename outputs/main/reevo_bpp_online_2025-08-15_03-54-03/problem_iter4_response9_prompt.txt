{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority using a sigmoid-based function that favors bins with small positive residuals.\n\n    This heuristic prioritizes bins where the remaining capacity (`r`) after placing the item\n    is as close to zero as possible, but still non-negative. The sigmoid function\n    `1 / (1 + exp(k * r))` is used, where `k` is a sensitivity parameter.\n    A higher `k` makes the priority drop faster as `r` increases.\n    Bins where the item does not fit (i.e., `r < 0`) receive a priority of 0.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Sensitivity parameter for the sigmoid function.\n    # A higher k means a sharper drop in priority as the remaining capacity increases.\n    # This value can be tuned based on experimental results.\n    k = 5.0  \n\n    # Initialize priorities to 0. Bins where the item cannot fit will keep this score.\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Calculate the remaining capacity if the item were placed in each bin.\n    residuals = bins_remain_cap - item\n\n    # Identify bins where the item can fit (residual >= 0).\n    can_fit_mask = residuals >= 0\n\n    # For bins that can fit the item, calculate the priority score using the sigmoid function.\n    # The function 1 / (1 + exp(k * residual)) produces scores between 0 and 1.\n    # - When residual is 0 (perfect fit), score is 1 / (1 + exp(0)) = 0.5.\n    # - When residual is small positive (e.g., 0.01, k=5), arg is 0.05, score is ~0.95 (HIGH priority).\n    # - When residual is large positive (e.g., 1.0, k=5), arg is 5.0, score is ~0.0067 (LOW priority).\n    # This correctly prioritizes bins with the smallest positive residuals.\n    if np.any(can_fit_mask):\n        priorities[can_fit_mask] = 1.0 / (1.0 + np.exp(k * residuals[can_fit_mask]))\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Minimum Remaining Capacity Fit strategy.\n\n    The Minimum Remaining Capacity Fit strategy aims to place the item into the bin\n    that will have the least remaining capacity after the item is placed. This means\n    prioritizing bins where the remaining capacity is just enough or slightly more\n    than the item size. This aims to \"fill up\" bins more effectively.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priorities to a very small negative number.\n    # Bins that cannot accommodate the item will have the lowest priority.\n    priorities = np.full_like(bins_remain_cap, -float('inf'))\n\n    # Identify bins that can accommodate the current item.\n    can_fit_mask = bins_remain_cap >= item\n\n    # For bins that can fit the item, the priority is determined by how much\n    # capacity will be left after placing the item.\n    # We want to minimize the remaining capacity, so higher priority should be given\n    # to bins where `bins_remain_cap - item` is smaller.\n    # A common way to achieve this is to use the inverse of the remaining capacity\n    # after placing the item. To avoid division by zero and to give higher priority\n    # to smaller positive remaining capacities, we can use `1 / (remaining_capacity + epsilon)`.\n    # This ensures that bins with the smallest positive `bins_remain_cap - item` get the highest priority.\n\n    remaining_after_fit = bins_remain_cap[can_fit_mask] - item\n\n    # Add a small epsilon to avoid division by zero, especially if remaining_after_fit is 0.\n    epsilon = 1e-9\n    priorities[can_fit_mask] = 1.0 / (remaining_after_fit + epsilon)\n\n    return priorities\n\n[Reflection]\nPrioritize minimal positive residual. Focus on filling bins efficiently.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}