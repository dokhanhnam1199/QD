{
     "algorithm": "This algorithm constructs a heuristic matrix by iteratively improving random tours using 2-opt swaps and recording edge frequencies in the improved solutions.",
     "code": "import numpy as np\n\ndef heuristics_v2(distance_matrix):\n    \"\"\"{This algorithm constructs a heuristic matrix by iteratively improving random tours using 2-opt swaps and recording edge frequencies in the improved solutions.}\"\"\"\n    n = distance_matrix.shape[0]\n    num_samples = 100\n    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    for _ in range(num_samples):\n        # Generate a random tour\n        tour = np.random.permutation(n)\n        tour = np.append(tour, tour[0])  # Return to start\n\n        # Improve the tour using 2-opt swaps\n        improved_tour = tour.copy()\n        for i in range(n):\n            for j in range(i + 2, n + 1):\n                new_tour = np.concatenate((improved_tour[:i], improved_tour[i:j][::-1], improved_tour[j:]))\n                \n                current_cost = sum(distance_matrix[improved_tour[k], improved_tour[k+1]] for k in range(n))\n                new_cost = sum(distance_matrix[new_tour[k], new_tour[k+1]] for k in range(n))\n                \n                if new_cost < current_cost:\n                    improved_tour = new_tour\n                    \n        # Update heuristics matrix\n        for i in range(n):\n            node1 = improved_tour[i]\n            node2 = improved_tour[i+1]\n            heuristics_matrix[node1, node2] += 1\n            heuristics_matrix[node2, node1] += 1\n\n    heuristics_matrix /= num_samples\n    return heuristics_matrix",
     "objective": 5.8302,
     "other_inf": null
}