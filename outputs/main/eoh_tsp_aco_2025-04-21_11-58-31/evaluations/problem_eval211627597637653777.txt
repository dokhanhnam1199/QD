import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by combining edge frequencies and a weighted combination of edge lengths and shortest path distances, favoring frequent edges and shorter overall paths.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    shortest_path_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Precompute all-pairs shortest paths using Floyd-Warshall
    for i in range(n):
        for j in range(n):
            shortest_path_matrix[i, j] = distance_matrix[i, j]

    for k in range(n):
        for i in range(n):
            for j in range(n):
                shortest_path_matrix[i, j] = min(shortest_path_matrix[i, j], shortest_path_matrix[i, k] + shortest_path_matrix[k, j])

    for _ in range(num_samples):
        # Nearest Neighbor tour
        start_node = np.random.randint(n)
        unvisited_nodes = list(range(n))
        unvisited_nodes.remove(start_node)
        current_node = start_node
        tour = [start_node]

        while unvisited_nodes:
            nearest_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node, node])
            tour.append(nearest_node)
            unvisited_nodes.remove(nearest_node)
            current_node = nearest_node

        tour.append(start_node)
        tour = np.array(tour)
        
        # Improve with random edge swaps
        num_swaps = n // 2
        for _ in range(num_swaps):
            i, j = np.random.choice(n, 2, replace=False)
            
            if i > j:
              i, j = j, i
            
            new_tour = np.concatenate((tour[:i], tour[i:j+1][::-1], tour[j+1:]))
            
            current_cost = sum(distance_matrix[tour[k], tour[k+1]] for k in range(n))
            new_cost = sum(distance_matrix[new_tour[k], new_tour[k+1]] for k in range(n))
            
            if new_cost < current_cost:
                tour = new_tour

        # Update heuristics matrix
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            edge_length = distance_matrix[node1, node2]
            shortest_path_len = shortest_path_matrix[node1, node2]
            
            # Weighted combination of edge length and shortest path distance
            combined_cost = 0.7 * edge_length + 0.3 * shortest_path_len 
            heuristics_matrix[node1, node2] += 1 / (1 + combined_cost)  # Penalize longer edges/paths
            heuristics_matrix[node2, node1] += 1 / (1 + combined_cost)

    heuristics_matrix /= num_samples
    return heuristics_matrix
