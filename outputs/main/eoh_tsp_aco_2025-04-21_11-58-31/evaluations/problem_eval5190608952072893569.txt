import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm iteratively refines tours by applying 2-opt swaps to stochastically generated initial tours, then averages the edge frequencies across these refined solutions to estimate edge likelihood.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 100

    def generate_initial_tour():
        nodes = list(range(n))
        np.random.shuffle(nodes)
        return nodes

    def two_opt_swap(tour, i, k):
        new_tour = tour[:i] + tour[i:k+1][::-1] + tour[k+1:]
        return new_tour

    def two_opt(tour, distance_matrix):
        best_tour = tour
        improved = True
        while improved:
            improved = False
            for i in range(1, len(tour) - 1):
                for k in range(i + 1, len(tour)):
                    new_tour = two_opt_swap(tour, i, k)
                    current_cost = 0
                    for idx in range(len(best_tour) - 1):
                        current_cost += distance_matrix[best_tour[idx], best_tour[idx+1]]
                    current_cost += distance_matrix[best_tour[-1], best_tour[0]]

                    new_cost = 0
                    for idx in range(len(new_tour) - 1):
                        new_cost += distance_matrix[new_tour[idx], new_tour[idx+1]]
                    new_cost += distance_matrix[new_tour[-1], new_tour[0]]
                    
                    if new_cost < current_cost:
                        best_tour = new_tour
                        improved = True
            tour = best_tour
        return best_tour

    for _ in range(num_samples):
        initial_tour = generate_initial_tour()
        refined_tour = two_opt(initial_tour, distance_matrix)

        for i in range(len(refined_tour)):
            j = (i + 1) % n
            heuristics_matrix[refined_tour[i], refined_tour[j]] += 1
            heuristics_matrix[refined_tour[j], refined_tour[i]] += 1

    return heuristics_matrix
