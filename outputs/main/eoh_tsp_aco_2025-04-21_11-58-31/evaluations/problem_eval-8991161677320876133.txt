import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm uses a combination of nearest neighbor and simulated annealing principles to generate a heuristics matrix indicating the desirability of each edge for inclusion in a TSP solution.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics_matrix[i, j] = 0
                continue

            # Nearest Neighbor heuristic:  shorter distances are more desirable
            heuristics_matrix[i, j] = 1 / (distance_matrix[i, j] + 1e-9) # Avoid division by zero

            # Simulated Annealing inspired perturbation:  introduce randomness
            temperature = 100  # Initial temperature
            perturbation = np.random.normal(0, temperature / (distance_matrix[i, j] + 1e-9), 1)
            heuristics_matrix[i, j] += perturbation[0]
            heuristics_matrix[i, j] = np.clip(heuristics_matrix[i, j], 0, 1)

    return heuristics_matrix
