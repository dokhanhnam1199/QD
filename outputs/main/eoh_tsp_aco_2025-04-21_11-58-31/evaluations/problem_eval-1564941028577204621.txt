import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by iteratively improving random tours using 3-opt swaps and recording edge frequencies in the improved solutions.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour = np.append(tour, tour[0])  # Return to start

        # Improve the tour using 3-opt swaps
        improved_tour = tour.copy()
        improved = True
        while improved:
            improved = False
            for i in range(n):
                for j in range(i + 2, n):
                    for k in range(j + 2, n + 1):
                        # Possible 3-opt swap configurations
                        segments = [improved_tour[i:j], improved_tour[j:k], improved_tour[k:]]
                        
                        #Original cost
                        current_cost = distance_matrix[improved_tour[i-1],improved_tour[i]] if i > 0 else distance_matrix[improved_tour[-2],improved_tour[0]]
                        current_cost += distance_matrix[improved_tour[j-1],improved_tour[j]]
                        current_cost += distance_matrix[improved_tour[k-1],improved_tour[k]] if k < n else distance_matrix[improved_tour[k-1],improved_tour[0]]
                       
                        
                        # Try different 3-opt swap configurations
                        possible_segments = [segments[0],segments[1],segments[2]]
                        
                        
                        new_tour = np.concatenate((possible_segments[0], possible_segments[1], possible_segments[2]))
                        new_cost = distance_matrix[new_tour[i-1],new_tour[i]] if i > 0 else distance_matrix[new_tour[-2],new_tour[0]]
                        new_cost += distance_matrix[new_tour[j-1],new_tour[j]]
                        new_cost += distance_matrix[new_tour[k-1],new_tour[k]] if k < n else distance_matrix[new_tour[k-1],new_tour[0]]
                        
                        if new_cost < current_cost:
                            improved_tour = new_tour
                            improved = True
                            continue
                            
                        possible_segments = [segments[0],segments[1][::-1],segments[2]]
                        new_tour = np.concatenate((possible_segments[0], possible_segments[1], possible_segments[2]))
                        new_cost = distance_matrix[new_tour[i-1],new_tour[i]] if i > 0 else distance_matrix[new_tour[-2],new_tour[0]]
                        new_cost += distance_matrix[new_tour[j-1],new_tour[j]]
                        new_cost += distance_matrix[new_tour[k-1],new_tour[k]] if k < n else distance_matrix[new_tour[k-1],new_tour[0]]
                        
                        if new_cost < current_cost:
                            improved_tour = new_tour
                            improved = True
                            continue
                            
                        possible_segments = [segments[0],segments[1],segments[2][::-1]]
                        new_tour = np.concatenate((possible_segments[0], possible_segments[1], possible_segments[2]))
                        new_cost = distance_matrix[new_tour[i-1],new_tour[i]] if i > 0 else distance_matrix[new_tour[-2],new_tour[0]]
                        new_cost += distance_matrix[new_tour[j-1],new_tour[j]]
                        new_cost += distance_matrix[new_tour[k-1],new_tour[k]] if k < n else distance_matrix[new_tour[k-1],new_tour[0]]
                        
                        if new_cost < current_cost:
                            improved_tour = new_tour
                            improved = True
                            continue
                            
                        possible_segments = [segments[0][::-1],segments[1],segments[2]]
                        new_tour = np.concatenate((possible_segments[0], possible_segments[1], possible_segments[2]))
                        new_cost = distance_matrix[new_tour[i-1],new_tour[i]] if i > 0 else distance_matrix[new_tour[-2],new_tour[0]]
                        new_cost += distance_matrix[new_tour[j-1],new_tour[j]]
                        new_cost += distance_matrix[new_tour[k-1],new_tour[k]] if k < n else distance_matrix[new_tour[k-1],new_tour[0]]
                        
                        if new_cost < current_cost:
                            improved_tour = new_tour
                            improved = True
                            continue
                        
                        possible_segments = [segments[0],segments[1][::-1],segments[2][::-1]]
                        new_tour = np.concatenate((possible_segments[0], possible_segments[1], possible_segments[2]))
                        new_cost = distance_matrix[new_tour[i-1],new_tour[i]] if i > 0 else distance_matrix[new_tour[-2],new_tour[0]]
                        new_cost += distance_matrix[new_tour[j-1],new_tour[j]]
                        new_cost += distance_matrix[new_tour[k-1],new_tour[k]] if k < n else distance_matrix[new_tour[k-1],new_tour[0]]
                        
                        if new_cost < current_cost:
                            improved_tour = new_tour
                            improved = True
                            continue
                        
                        possible_segments = [segments[0][::-1],segments[1][::-1],segments[2]]
                        new_tour = np.concatenate((possible_segments[0], possible_segments[1], possible_segments[2]))
                        new_cost = distance_matrix[new_tour[i-1],new_tour[i]] if i > 0 else distance_matrix[new_tour[-2],new_tour[0]]
                        new_cost += distance_matrix[new_tour[j-1],new_tour[j]]
                        new_cost += distance_matrix[new_tour[k-1],new_tour[k]] if k < n else distance_matrix[new_tour[k-1],new_tour[0]]
                        
                        if new_cost < current_cost:
                            improved_tour = new_tour
                            improved = True
                            continue
                        
                        possible_segments = [segments[0][::-1],segments[1],segments[2][::-1]]
                        new_tour = np.concatenate((possible_segments[0], possible_segments[1], possible_segments[2]))
                        new_cost = distance_matrix[new_tour[i-1],new_tour[i]] if i > 0 else distance_matrix[new_tour[-2],new_tour[0]]
                        new_cost += distance_matrix[new_tour[j-1],new_tour[j]]
                        new_cost += distance_matrix[new_tour[k-1],new_tour[k]] if k < n else distance_matrix[new_tour[k-1],new_tour[0]]
                        
                        if new_cost < current_cost:
                            improved_tour = new_tour
                            improved = True
                            continue

        # Update heuristics matrix
        for i in range(n):
            node1 = improved_tour[i]
            node2 = improved_tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
