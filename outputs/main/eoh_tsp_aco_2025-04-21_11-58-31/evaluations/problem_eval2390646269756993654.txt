import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristics matrix by iteratively improving tours, starting with a random tour and probabilistically accepting changes that shorten the tour length, thus favoring edges present in shorter tours.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 100
    temperature = 1.0

    for _ in range(num_samples):
        # Initialize with a random tour
        tour = np.random.permutation(n).tolist()
        tour.append(tour[0])  # Return to starting node

        # Iterate and improve the tour
        for _ in range(n * 10):  # Number of improvement iterations
            # Choose two random edges to swap
            i = np.random.randint(1, n)
            j = np.random.randint(1, n)
            if i == j:
                continue

            # Calculate the change in tour length
            delta = -distance_matrix[tour[i-1], tour[i]] - distance_matrix[tour[j-1], tour[j]] \
                    + distance_matrix[tour[i-1], tour[j]] + distance_matrix[tour[j-1], tour[i]]

            # Accept the swap based on Metropolis-Hastings criterion
            if delta < 0 or np.random.rand() < np.exp(-delta / temperature):
                tour[i], tour[j] = tour[j], tour[i]

        # Update the heuristics matrix based on the improved tour
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

        temperature *= 0.95

    heuristics_matrix /= num_samples
    return heuristics_matrix
