import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm generates multiple tours using a nearest neighbor approach with random starting nodes and incorporates 2-opt swaps for local optimization, weighting edge frequencies by the inverse rank of tour lengths to construct a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    tour_lengths = []
    tours = []

    for _ in range(num_samples):
        # Generate a tour using nearest neighbor
        start_node = np.random.randint(n)
        unvisited = list(range(n))
        tour = [start_node]
        unvisited.remove(start_node)

        while unvisited:
            current_node = tour[-1]
            nearest_neighbor = min(unvisited, key=lambda x: distance_matrix[current_node, x])
            tour.append(nearest_neighbor)
            unvisited.remove(nearest_neighbor)

        tour.append(start_node)
        tour = np.array(tour)

        # Improve the tour using 2-opt swaps
        improved = True
        while improved:
            improved = False
            for i in range(1, n):
                for j in range(i + 1, n + 1):
                    if i != j:
                        current_cost = distance_matrix[tour[i - 1], tour[i]] + distance_matrix[tour[j - 1], tour[j]]
                        new_cost = distance_matrix[tour[i - 1], tour[j - 1]] + distance_matrix[tour[i], tour[j]]

                        if new_cost < current_cost:
                            tour[i:j] = tour[i:j][::-1]
                            improved = True

        # Calculate tour length
        tour_length = 0.0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        
        tour_lengths.append(tour_length)
        tours.append(tour)

    # Rank the tour lengths
    ranks = np.argsort(np.argsort(tour_lengths)) + 1

    # Update heuristics matrix with weight based on rank
    for idx in range(num_samples):
        tour = tours[idx]
        rank = ranks[idx]
        weight = 1.0 / rank

        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += weight
            heuristics_matrix[node2, node1] += weight
    
    # Normalize heuristics matrix
    total_weight = np.sum([1.0 / r for r in ranks])
    if total_weight > 0:
        heuristics_matrix /= total_weight
    return heuristics_matrix
