import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm refines the heuristic matrix by emphasizing shorter edges and penalizing edges that lead to nodes already visited recently in potential TSP tours.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Basic nearest neighbor heuristic, stronger emphasis
                heuristics_matrix[i, j] = 10.0 / (distance_matrix[i, j] + 1e-6) #Adding a small constant to avoid division by zero

                # Penalty based on proximity to other nodes
                proximity_penalty = 0.0
                for k in range(n):
                    if k != i and k != j:
                        proximity_penalty += 1.0 / (distance_matrix[j, k] + 1e-6) #Adding a small constant to avoid division by zero

                heuristics_matrix[i, j] -= 0.005 * proximity_penalty # Adjust the penalty factor as needed

    heuristics_matrix = np.clip(heuristics_matrix, 0.001, 1000)  # Prevent non-positive values and inf
    return heuristics_matrix
