import numpy as np

def heuristics_v2(distance_matrix):
  """{This algorithm generates multiple random tours, scores each edge based on how frequently it appears in the best tours, and returns a matrix representing the heuristic scores for each edge.}"""
  num_nodes = distance_matrix.shape[0]
  num_tours = 1000
  top_tours = 100
  
  all_tours = []
  all_tour_lengths = []

  for _ in range(num_tours):
    tour = np.random.permutation(num_nodes)
    tour_length = 0
    for i in range(num_nodes - 1):
      tour_length += distance_matrix[tour[i], tour[i+1]]
    tour_length += distance_matrix[tour[-1], tour[0]] 
    all_tours.append(tour)
    all_tour_lengths.append(tour_length)
  
  ranked_tours_indices = np.argsort(all_tour_lengths)
  top_tours_indices = ranked_tours_indices[:top_tours]
  top_tours_set = [all_tours[i] for i in top_tours_indices]
  
  heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
  
  for tour in top_tours_set:
    for i in range(num_nodes - 1):
      heuristics_matrix[tour[i], tour[i+1]] += 1
      heuristics_matrix[tour[i+1], tour[i]] += 1
    heuristics_matrix[tour[-1], tour[0]] += 1
    heuristics_matrix[tour[0], tour[-1]] += 1
  
  return heuristics_matrix
