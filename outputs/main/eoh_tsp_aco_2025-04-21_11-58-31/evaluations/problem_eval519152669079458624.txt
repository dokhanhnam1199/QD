import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples tours using a nearest neighbor approach with a stochastic element and updates edge importance based on tour frequency and length, but prioritizes edges used in shorter tours more aggressively by squaring the inverse tour length.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 100

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        tour = [current_node]
        tour_length = 0

        while unvisited_nodes:
            # Nearest neighbor with stochasticity
            nearest_neighbors = []
            for neighbor in unvisited_nodes:
                nearest_neighbors.append((neighbor, distance_matrix[current_node, neighbor]))

            nearest_neighbors.sort(key=lambda x: x[1])  # Sort by distance

            # Introduce some randomness: select from the top k nearest neighbors
            k = min(5, len(nearest_neighbors))  # Consider top 5 or fewer if fewer neighbors exist
            candidates = nearest_neighbors[:k]
            
            #Pick at random from candidates based on distance
            probabilities = [1/dist for node,dist in candidates]
            probabilities = probabilities/np.sum(probabilities)
            
            next_node = candidates[np.random.choice(len(candidates), p = probabilities)][0]

            tour.append(next_node)
            tour_length += distance_matrix[current_node, next_node]
            unvisited_nodes.remove(next_node)
            current_node = next_node

        tour.append(start_node)
        tour_length += distance_matrix[current_node, start_node]

        # Update heuristics matrix, weighting by inverse tour length, squared
        weight = (1.0 / tour_length)**2
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += weight
            heuristics_matrix[node2, node1] += weight

    # Normalize heuristics matrix
    heuristics_matrix /= num_samples
    return heuristics_matrix
