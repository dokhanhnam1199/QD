import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by combining edge frequencies from 2-opt improved solutions with probabilities derived from shortest path calculations in a transformed distance matrix.}"""
    n = distance_matrix.shape[0]
    num_samples = 50
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Part 1: Edge Frequency from 2-opt
    edge_frequency_matrix = np.zeros_like(distance_matrix, dtype=float)
    for _ in range(num_samples):
        tour = np.random.permutation(n)
        tour = np.append(tour, tour[0])

        improved = True
        while improved:
            improved = False
            for i in range(1, n):
                for j in range(i + 1, n + 1):
                    if i != j:
                        current_cost = distance_matrix[tour[i - 1], tour[i]] + distance_matrix[tour[j - 1], tour[j]]
                        new_cost = distance_matrix[tour[i - 1], tour[j - 1]] + distance_matrix[tour[i], tour[j]]

                        if new_cost < current_cost:
                            tour[i:j] = tour[i:j][::-1]
                            improved = True

        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            edge_frequency_matrix[node1, node2] += 1
            edge_frequency_matrix[node2, node1] += 1
    edge_frequency_matrix /= num_samples

    # Part 2: Shortest Path Probabilities (using Dijkstra-like approach)
    probability_matrix = np.zeros_like(distance_matrix, dtype=float)
    for start_node in range(n):
        # Transform distance matrix: invert distances (add a small constant to avoid division by zero)
        transformed_matrix = 1.0 / (distance_matrix + 0.0001)

        # Dijkstra-like to get "probabilities" to each node via each edge from start_node
        distances = np.full(n, np.inf)
        distances[start_node] = 0
        visited = np.zeros(n, dtype=bool)

        for _ in range(n):
            # Find unvisited node with smallest distance
            min_dist = np.inf
            current_node = -1
            for v in range(n):
                if not visited[v] and distances[v] < min_dist:
                    min_dist = distances[v]
                    current_node = v

            if current_node == -1:
                break

            visited[current_node] = True

            # Update distances to neighbors
            for neighbor in range(n):
                if current_node != neighbor:
                    new_dist = distances[current_node] + transformed_matrix[current_node, neighbor]
                    if new_dist < distances[neighbor]:
                        distances[neighbor] = new_dist

        # Normalize distances to get probabilities (higher prob for shorter distances)
        total_distance = np.sum(distances)
        if total_distance > 0:
            node_probabilities = distances
        else:
             node_probabilities = np.ones(n) / n

        for neighbor in range(n):
            probability_matrix[start_node, neighbor] = node_probabilities[neighbor]
            probability_matrix[neighbor,start_node] = node_probabilities[neighbor]


    # Combine both matrices
    heuristics_matrix = 0.5 * edge_frequency_matrix + 0.5 * probability_matrix
    return heuristics_matrix
