import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by iteratively generating tours using a greedy nearest neighbor approach with random starting nodes, then applies a local search based on edge swapping, and records edge frequencies in the improved solutions.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a tour using nearest neighbor with random start
        start_node = np.random.randint(n)
        unvisited = list(range(n))
        tour = [start_node]
        unvisited.remove(start_node)

        while unvisited:
            last_node = tour[-1]
            nearest_node = min(unvisited, key=lambda x: distance_matrix[last_node, x])
            tour.append(nearest_node)
            unvisited.remove(nearest_node)

        tour = np.array(tour + [start_node])

        # Improve the tour using edge swapping
        improved_tour = tour.copy()
        for i in range(1, n - 1):
            for j in range(i + 1, n):
                new_tour = improved_tour.copy()
                new_tour[i:j+1] = improved_tour[i:j+1][::-1]
                current_cost = sum(distance_matrix[improved_tour[k], improved_tour[k+1]] for k in range(n))
                new_cost = sum(distance_matrix[new_tour[k], new_tour[k+1]] for k in range(n))
                
                if new_cost < current_cost:
                    improved_tour = new_tour

        # Update heuristics matrix
        for i in range(n):
            node1 = improved_tour[i]
            node2 = improved_tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
