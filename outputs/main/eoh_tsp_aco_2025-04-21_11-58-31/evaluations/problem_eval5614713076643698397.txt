import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm employs a nearest neighbor approach with stochastic restarts, favoring edges used in short tours found during the nearest neighbor searches.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        unvisited = list(range(n))
        unvisited.remove(start_node)
        tour = [start_node]
        current_node = start_node

        while unvisited:
            nearest_neighbor = min(unvisited, key=lambda x: distance_matrix[current_node, x])
            tour.append(nearest_neighbor)
            unvisited.remove(nearest_neighbor)
            current_node = nearest_neighbor
        
        tour.append(start_node)
        
        tour_length = sum(distance_matrix[tour[i], tour[i+1]] for i in range(n))
        
        weight = 1.0 / tour_length if tour_length > 0 else 0.0
        
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += weight
            heuristics_matrix[node2, node1] += weight

    heuristics_matrix /= num_samples
    return heuristics_matrix
