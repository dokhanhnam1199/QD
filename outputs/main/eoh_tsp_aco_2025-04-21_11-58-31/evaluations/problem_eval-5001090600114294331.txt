import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by combining edge frequencies from multiple solutions generated by a random sampling approach with a greedy nearest neighbor initialization, pheromone updates, and adaptive edge penalization for frequently used edges.}"""
    n = distance_matrix.shape[0]
    pheromone_matrix = np.ones_like(distance_matrix)
    visibility_matrix = 1 / (distance_matrix + 1e-9)
    alpha = 0.7  # Increased influence of pheromones
    beta = 2    # Reduced influence of visibility (distance)
    num_ants = n // 2
    num_iterations = 50
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    edge_penalties = np.ones_like(distance_matrix) # Initialize edge penalties

    for _ in range(num_iterations):
        tours = []
        for ant in range(num_ants):
            start_node = ant % n
            unvisited_nodes = set(range(n))
            unvisited_nodes.remove(start_node)
            tour = [start_node]
            current_node = start_node

            while unvisited_nodes:
                # Nearest neighbor heuristic initialization with pheromone and penalty influence
                probabilities = np.zeros(n)
                for neighbor in unvisited_nodes:
                    probabilities[neighbor] = (pheromone_matrix[current_node, neighbor]**alpha) * (visibility_matrix[current_node, neighbor]**beta) / edge_penalties[current_node, neighbor]
                probabilities /= np.sum(probabilities[list(unvisited_nodes)])

                next_node = np.random.choice(n, p=probabilities)
                tour.append(next_node)
                unvisited_nodes.remove(next_node)
                current_node = next_node

            tour.append(start_node)
            tours.append(tour)

        # Update pheromone matrix
        pheromone_matrix *= 0.9  # Evaporation
        for tour in tours:
            tour_length = sum(distance_matrix[tour[i], tour[i+1]] for i in range(n))
            for i in range(n):
                node1 = tour[i]
                node2 = tour[i+1]
                pheromone_matrix[node1, node2] += 1 / tour_length
                pheromone_matrix[node2, node1] += 1 / tour_length
        
        # Update heuristics matrix and edge penalties
        for tour in tours:
            for i in range(n):
                node1 = tour[i]
                node2 = tour[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1
                # Adaptive edge penalty update: penalize frequently used edges
                edge_penalties[node1, node2] *= 1.1
                edge_penalties[node2, node1] *= 1.1
        
        edge_penalties = np.clip(edge_penalties, 0.1, 10) # Clip penalties to prevent extreme values
    
    heuristics_matrix /= (num_ants * num_iterations)

    return heuristics_matrix
