import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix based on the inverse of the average shortest path distance between nodes, emphasizing global connectivity.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Calculate shortest path distances between all node pairs using Floyd-Warshall algorithm
                dist = np.copy(distance_matrix)
                for k in range(n):
                    for ii in range(n):
                        for jj in range(n):
                            dist[ii, jj] = min(dist[ii, jj], dist[ii, k] + dist[k, jj])
                
                heuristics_matrix[i, j] = 1.0 / (dist[i, j] + 1e-9)
            else:
                heuristics_matrix[i, j] = 0.0

    return heuristics_matrix
