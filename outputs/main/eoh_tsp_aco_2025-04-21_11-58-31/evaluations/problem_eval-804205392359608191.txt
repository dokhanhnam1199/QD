import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by iteratively improving random tours using 3-opt swaps, then applies a local search based on swapping moves, and records edge frequencies in the improved solutions.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour = np.append(tour, tour[0])  # Return to start

        # Improve the tour using 3-opt swaps
        improved_tour = tour.copy()
        for i in range(n):
            for j in range(i + 2, n + 1):
                for k in range(j + 2, n + 2):
                    # Perform 3-opt swap (2-opt after 3-opt)
                    new_tour = np.concatenate((improved_tour[:i], improved_tour[i:j][::-1], improved_tour[j:k][::-1], improved_tour[k:]))

                    current_cost = sum(distance_matrix[improved_tour[l], improved_tour[l+1]] for l in range(n))
                    new_cost = sum(distance_matrix[new_tour[l], new_tour[l+1]] for l in range(n))

                    if new_cost < current_cost:
                        improved_tour = new_tour

        # Improve the tour using node swapping
        swap_tour = improved_tour.copy()
        for i in range(1, n):
            for j in range(i + 1, n):
                temp_tour = swap_tour.copy()
                temp_tour[i], temp_tour[j] = temp_tour[j], temp_tour[i]

                current_cost = sum(distance_matrix[swap_tour[k], swap_tour[k+1]] for k in range(n))
                new_cost = sum(distance_matrix[temp_tour[k], temp_tour[k+1]] for k in range(n))

                if new_cost < current_cost:
                    swap_tour = temp_tour

        # Update heuristics matrix
        for i in range(n):
            node1 = swap_tour[i]
            node2 = swap_tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
