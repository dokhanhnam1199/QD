import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses simulated annealing to estimate edge probabilities by iteratively exploring neighboring solutions and updating the heuristics matrix based on the acceptance probability of each edge.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 1000
    temperature = 1.0
    cooling_rate = 0.99

    # Initialize a random tour
    tour = np.random.permutation(n)
    current_cost = calculate_tour_cost(tour, distance_matrix)

    for _ in range(num_iterations):
        # Generate a neighboring tour by swapping two random nodes
        i, j = np.random.choice(n, 2, replace=False)
        neighbor_tour = tour.copy()
        neighbor_tour[i], neighbor_tour[j] = neighbor_tour[j], neighbor_tour[i]
        neighbor_cost = calculate_tour_cost(neighbor_tour, distance_matrix)

        # Calculate the acceptance probability
        cost_diff = neighbor_cost - current_cost
        acceptance_probability = np.exp(-cost_diff / temperature) if cost_diff > 0 else 1.0

        # Accept the neighbor tour based on the acceptance probability
        if np.random.rand() < acceptance_probability:
            tour = neighbor_tour
            current_cost = neighbor_cost

        # Update the heuristics matrix based on the current tour
        for k in range(n):
            node1 = tour[k]
            node2 = tour[(k + 1) % n]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

        # Cool down the temperature
        temperature *= cooling_rate

    # Normalize the heuristics matrix
    heuristics_matrix = heuristics_matrix / num_iterations

    return heuristics_matrix


def calculate_tour_cost(tour, distance_matrix):
    """Calculates the total cost of a given tour."""
    cost = 0
    n = len(tour)
    for i in range(n):
        cost += distance_matrix[tour[i], tour[(i + 1) % n]]
    return heuristics_matrix
