import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples random tours, and then calculates how frequently each edge appears in the shortest tours found, using this frequency as a prior indicator.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    shortest_tours = []
    shortest_tour_length = float('inf')

    for _ in range(num_samples):
        tour = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]

        if tour_length < shortest_tour_length:
            shortest_tours = [tour]
            shortest_tour_length = tour_length
        elif tour_length == shortest_tour_length:
            shortest_tours.append(tour)
    
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    for tour in shortest_tours:
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += 1
            heuristics_matrix[tour[i+1], tour[i]] += 1
        heuristics_matrix[tour[-1], tour[0]] += 1
        heuristics_matrix[tour[0], tour[-1]] += 1

    if len(shortest_tours) > 0:
      heuristics_matrix /= len(shortest_tours)
    
    return heuristics_matrix
