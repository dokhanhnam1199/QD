import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by iteratively improving random tours using 2-opt swaps and using simulated annealing to escape local optima, recording edge frequencies in the improved solutions.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour = np.append(tour, tour[0])  # Return to start

        # Improve the tour using 2-opt swaps with simulated annealing
        improved_tour = tour.copy()
        temperature = 1.0
        cooling_rate = 0.99
        
        for i in range(n * 10):  # More iterations for annealing
            idx1 = np.random.randint(0, n)
            idx2 = np.random.randint(idx1 + 2, n + 1)
            new_tour = np.concatenate((improved_tour[:idx1], improved_tour[idx1:idx2][::-1], improved_tour[idx2:]))
            
            current_cost = sum(distance_matrix[improved_tour[k], improved_tour[k+1]] for k in range(n))
            new_cost = sum(distance_matrix[new_tour[k], new_tour[k+1]] for k in range(n))
            
            cost_diff = new_cost - current_cost
            
            if cost_diff < 0:
                improved_tour = new_tour
            else:
                # Simulated annealing: accept worse solutions with a probability
                probability = np.exp(-cost_diff / temperature)
                if np.random.rand() < probability:
                    improved_tour = new_tour
            
            temperature *= cooling_rate  # Cool down the temperature

        # Update heuristics matrix
        for i in range(n):
            node1 = improved_tour[i]
            node2 = improved_tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
