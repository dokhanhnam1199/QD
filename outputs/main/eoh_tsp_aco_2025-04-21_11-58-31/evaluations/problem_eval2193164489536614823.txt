import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by iteratively generating tours using a greedy nearest neighbor approach with stochastic restarts and biased edge selection based on past tour performance.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 100
    alpha = 0.1  # Learning rate for edge weights

    edge_weights = np.ones_like(distance_matrix)  # Initialize edge weights

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        tour = [current_node]

        while unvisited_nodes:
            # Nearest neighbor with biased edge selection
            weighted_distances = distance_matrix[current_node, :] * edge_weights[current_node, :]
            probabilities = np.zeros(n)
            for neighbor in unvisited_nodes:
                probabilities[neighbor] = 1 / weighted_distances[neighbor]
            probabilities /= np.sum(probabilities[list(unvisited_nodes)])
            
            try:
                next_node = np.random.choice(list(range(n)), p=probabilities, replace = False)
            except ValueError:
                next_node = list(unvisited_nodes)[0]
                
            if next_node not in unvisited_nodes:
               valid_neighbors = list(unvisited_nodes)
               next_node = valid_neighbors[np.argmin([distance_matrix[current_node,neighbor] for neighbor in valid_neighbors])]
            

            tour.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

        tour.append(start_node)

        # Update edge weights based on tour
        tour_length = 0
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1
            tour_length += distance_matrix[node1, node2]

        # Reinforce edges in good tours, penalize others
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            edge_weights[node1, node2] *= (1 - alpha + alpha * (1 / tour_length))
            edge_weights[node2, node1] *= (1 - alpha + alpha * (1 / tour_length))


    # Normalize heuristics matrix
    heuristics_matrix /= num_samples
    return heuristics_matrix
