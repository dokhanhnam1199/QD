import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by iteratively improving random tours using 3-opt swaps and recording edge frequencies in the improved solutions, applying a Metropolis-like acceptance criterion based on temperature and cost difference.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    temperature = 1.0
    cooling_rate = 0.95

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour = np.append(tour, tour[0])  # Return to start

        # Improve the tour using 3-opt swaps
        improved_tour = tour.copy()
        for i in range(n):
            for j in range(i + 2, n):
                for k in range(j + 2, n + 1):
                    # Perform 3-opt swap
                    sub1 = improved_tour[:i]
                    sub2 = improved_tour[i:j]
                    sub3 = improved_tour[j:k]
                    sub4 = improved_tour[k:]
                    
                    possible_new_tours = [
                        np.concatenate((sub1, sub2, sub3, sub4)),
                        np.concatenate((sub1, sub2[::-1], sub3, sub4)),
                        np.concatenate((sub1, sub2, sub3[::-1], sub4)),
                        np.concatenate((sub1, sub2[::-1], sub3[::-1], sub4)),
                        np.concatenate((sub1, sub3, sub2, sub4)),
                        np.concatenate((sub1, sub3[::-1], sub2, sub4)),
                        np.concatenate((sub1, sub3, sub2[::-1], sub4)),
                        np.concatenate((sub1, sub3[::-1], sub2[::-1], sub4)),
                    ]

                    current_cost = sum(distance_matrix[improved_tour[l], improved_tour[l+1]] for l in range(n))
                    best_new_tour = improved_tour
                    best_new_cost = current_cost
                    
                    for new_tour in possible_new_tours:
                        new_cost = sum(distance_matrix[new_tour[l], new_tour[l+1]] for l in range(n))
                        if new_cost < best_new_cost:
                            best_new_cost = new_cost
                            best_new_tour = new_tour

                    cost_diff = best_new_cost - current_cost
                    if cost_diff < 0:
                        improved_tour = best_new_tour
                    else:
                        # Simulated annealing-like acceptance
                        if np.random.rand() < np.exp(-cost_diff / temperature):
                            improved_tour = best_new_tour
        temperature *= cooling_rate
        # Update heuristics matrix
        for i in range(n):
            node1 = improved_tour[i]
            node2 = improved_tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
