import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by iteratively improving random tours using 2-opt swaps and recording edge frequencies in the improved solutions, modifying the 2-opt swap to only consider swaps that result in a shorter path and using a fixed temperature for simulated annealing.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    temperature = 0.5  # Fixed temperature for simulated annealing

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour = np.append(tour, tour[0])  # Return to start

        # Improve the tour using 2-opt swaps
        improved_tour = tour.copy()
        for i in range(n):
            for j in range(i + 2, n + 1):
                new_tour = np.concatenate((improved_tour[:i], improved_tour[i:j][::-1], improved_tour[j:]))
                
                current_cost = sum(distance_matrix[improved_tour[k], improved_tour[k+1]] for k in range(n))
                new_cost = sum(distance_matrix[new_tour[k], new_tour[k+1]] for k in range(n))
                
                cost_diff = new_cost - current_cost
                if cost_diff < 0:
                    improved_tour = new_tour
                else:
                    # Simulated annealing-like acceptance
                    if np.random.rand() < np.exp(-cost_diff / temperature):
                        improved_tour = new_tour

        # Update heuristics matrix
        for i in range(n):
            node1 = improved_tour[i]
            node2 = improved_tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
