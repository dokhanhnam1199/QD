import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm generates a set of random tours, evaluates them, and assigns higher probabilities to edges appearing in better tours, iteratively refining the probability matrix.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.ones_like(distance_matrix)
    
    num_iterations = 100
    num_tours = 50
    
    for _ in range(num_iterations):
        tours = []
        tour_lengths = []
        
        for _ in range(num_tours):
            tour = np.random.permutation(n)
            tour_length = 0
            for i in range(n - 1):
                tour_length += distance_matrix[tour[i], tour[i+1]]
            tour_length += distance_matrix[tour[-1], tour[0]]
            
            tours.append(tour)
            tour_lengths.append(tour_length)
        
        best_tours_indices = np.argsort(tour_lengths)[:num_tours // 5] 
        
        for index in best_tours_indices:
            tour = tours[index]
            for i in range(n - 1):
                heuristics_matrix[tour[i], tour[i+1]] += 1
                heuristics_matrix[tour[i+1], tour[i]] += 1
            heuristics_matrix[tour[-1], tour[0]] += 1
            heuristics_matrix[tour[0], tour[-1]] += 1

    return heuristics_matrix
