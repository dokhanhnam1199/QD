import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses ant colony optimization principles to build a heuristic matrix based on pheromone trails and distance.}"""
    n = distance_matrix.shape[0]
    pheromone_matrix = np.ones_like(distance_matrix)
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    alpha = 1
    beta = 2
    evaporation_rate = 0.5
    Q = 100

    num_ants = n
    num_iterations = 100

    for _ in range(num_iterations):
        ant_paths = []
        ant_costs = []
        
        for ant in range(num_ants):
            current_node = ant % n
            unvisited_nodes = set(range(n))
            unvisited_nodes.remove(current_node)
            path = [current_node]
            
            while unvisited_nodes:
                probabilities = np.zeros(n)
                for i in unvisited_nodes:
                    probabilities[i] = (pheromone_matrix[current_node, i]**alpha) * ((1 / distance_matrix[current_node, i])**beta)
                    
                probabilities /= np.sum(probabilities)
                
                next_node = np.random.choice(n, p=probabilities)
                
                path.append(next_node)
                unvisited_nodes.remove(next_node)
                current_node = next_node
            
            path.append(path[0])
            ant_paths.append(path)
            
            cost = 0
            for i in range(n):
                cost += distance_matrix[path[i], path[i+1]]
            ant_costs.append(cost)
            
        pheromone_matrix *= (1 - evaporation_rate)
        
        for ant in range(num_ants):
            path = ant_paths[ant]
            cost = ant_costs[ant]
            
            for i in range(n):
                pheromone_matrix[path[i], path[i+1]] += Q / cost
                pheromone_matrix[path[i+1], path[i]] += Q / cost
                
    heuristics_matrix = pheromone_matrix * (1 / (distance_matrix + 1e-6))

    return heuristics_matrix
