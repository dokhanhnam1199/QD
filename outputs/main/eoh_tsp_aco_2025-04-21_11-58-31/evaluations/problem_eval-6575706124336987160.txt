import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs multiple tours by iteratively inserting nodes into a partially constructed tour based on a cost-benefit ratio derived from distances to neighboring nodes, and then averages edge frequencies across these tours.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        unvisited_nodes = list(range(n))
        start_node = np.random.choice(unvisited_nodes)
        unvisited_nodes.remove(start_node)
        tour = [start_node]

        while unvisited_nodes:
            best_node_to_insert = None
            best_insertion_index = None
            min_insertion_cost = float('inf')

            for node_to_insert in unvisited_nodes:
                for i in range(len(tour)):
                    # Calculate insertion cost
                    insertion_cost = (distance_matrix[tour[i-1], node_to_insert] +
                                      distance_matrix[node_to_insert, tour[i]] -
                                      distance_matrix[tour[i-1], tour[i]])

                    if insertion_cost < min_insertion_cost:
                        min_insertion_cost = insertion_cost
                        best_node_to_insert = node_to_insert
                        best_insertion_index = i

            tour.insert(best_insertion_index, best_node_to_insert)
            unvisited_nodes.remove(best_node_to_insert)

        # Update heuristics matrix based on the sampled tour
        for i in range(len(tour)):
            node1 = tour[i]
            node2 = tour[(i + 1) % n]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
