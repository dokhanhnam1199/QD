import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm constructs a heuristics matrix by combining inverse distance with node degree information obtained from multiple nearest neighbor tours.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 100

    degree = np.zeros(n, dtype=int)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        tour = [current_node]

        while unvisited_nodes:
            nearest_neighbor = -1
            min_distance = np.inf
            for neighbor in unvisited_nodes:
                if distance_matrix[current_node, neighbor] < min_distance:
                    min_distance = distance_matrix[current_node, neighbor]
                    nearest_neighbor = neighbor

            tour.append(nearest_neighbor)
            unvisited_nodes.remove(nearest_neighbor)
            current_node = nearest_neighbor

        tour.append(start_node)

        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            degree[node1] += 1
            degree[node2] += 1


    # Incorporate distance information
    heuristics_matrix = 1.0 / (distance_matrix + 1e-9)

    # Incorporate degree information
    for i in range(n):
        for j in range(n):
            heuristics_matrix[i, j] *= (degree[i] + degree[j])

    return heuristics_matrix
