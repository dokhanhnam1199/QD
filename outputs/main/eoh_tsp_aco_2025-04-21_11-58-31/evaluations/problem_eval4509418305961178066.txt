import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by iteratively building tours using a nearest neighbor approach with stochastic restarts and weighting edges based on frequency and tour length.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        unvisited = set(range(n))
        unvisited.remove(start_node)
        tour = [start_node]
        current_node = start_node

        while unvisited:
            nearest_neighbors = []
            for neighbor in unvisited:
                nearest_neighbors.append((neighbor, distance_matrix[current_node, neighbor]))

            nearest_neighbors.sort(key=lambda x: x[1])
            
            #Stochastic nearest neighbor selection
            num_candidates = min(5, len(nearest_neighbors))
            candidates = nearest_neighbors[:num_candidates]
            probabilities = np.array([1.0 / (rank + 1) for rank in range(num_candidates)])
            probabilities /= np.sum(probabilities)
            
            next_node = np.random.choice([c[0] for c in candidates], p=probabilities)

            tour.append(next_node)
            unvisited.remove(next_node)
            current_node = next_node

        tour.append(start_node)
        
        tour_length = 0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[i+1]]

        weight = 1.0 / tour_length

        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += weight
            heuristics_matrix[node2, node1] += weight

    heuristics_matrix /= num_samples
    return heuristics_matrix
