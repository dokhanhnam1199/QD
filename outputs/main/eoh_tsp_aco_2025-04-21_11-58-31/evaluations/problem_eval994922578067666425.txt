import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm employs a Metropolis-Hastings-inspired approach to iteratively refine a set of candidate tours by probabilistically accepting or rejecting small perturbations based on tour length improvements.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 1000
    num_tours = 10

    tours = []
    tour_lengths = []
    for _ in range(num_tours):
        tour = np.random.permutation(n).tolist()
        tour.append(tour[0])
        tours.append(tour)
        tour_length = 0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_lengths.append(tour_length)

    temperature = 1.0
    cooling_rate = 0.995

    for _ in range(num_iterations):
        for i in range(num_tours):
            tour = tours[i]
            length = tour_lengths[i]

            # Propose a small change: swap two adjacent cities
            idx1 = np.random.randint(1, n)
            idx2 = (idx1 + 1) % n

            new_tour = tour[:]
            new_tour[idx1], new_tour[idx2] = new_tour[idx2], new_tour[idx1]

            new_length = 0
            for k in range(n):
                new_length += distance_matrix[new_tour[k], new_tour[k+1]]

            # Accept or reject the change
            if new_length < length:
                tours[i] = new_tour
                tour_lengths[i] = new_length
            else:
                acceptance_probability = np.exp((length - new_length) / temperature)
                if np.random.rand() < acceptance_probability:
                    tours[i] = new_tour
                    tour_lengths[i] = new_length

        temperature *= cooling_rate

    # Update heuristics_matrix based on the final tours
    for tour in tours:
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix = heuristics_matrix / num_tours
    return heuristics_matrix
