import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm refines the heuristic matrix by combining edge frequencies from multiple solutions, prioritizing shorter edges and incorporating simulated annealing to escape local optima during tour improvement.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Nearest Neighbor tour
        start_node = np.random.randint(n)
        unvisited_nodes = list(range(n))
        unvisited_nodes.remove(start_node)
        current_node = start_node
        tour = [start_node]

        while unvisited_nodes:
            nearest_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node, node])
            tour.append(nearest_node)
            unvisited_nodes.remove(nearest_node)
            current_node = nearest_node

        tour.append(start_node)
        tour = np.array(tour)

        # Improve with simulated annealing
        temperature = 1.0
        cooling_rate = 0.95
        
        for _ in range(n * n):
            i, j = np.random.choice(n, 2, replace=False)
            if i > j:
                i, j = j, i

            new_tour = np.concatenate((tour[:i], tour[i:j+1][::-1], tour[j+1:]))

            current_cost = sum(distance_matrix[tour[k], tour[k+1]] for k in range(n))
            new_cost = sum(distance_matrix[new_tour[k], new_tour[k+1]] for k in range(n))

            cost_diff = new_cost - current_cost
            
            if cost_diff < 0 or np.random.rand() < np.exp(-cost_diff / temperature):
                tour = new_tour

            temperature *= cooling_rate

        # Update heuristics matrix
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            edge_length = distance_matrix[node1, node2]
            heuristics_matrix[node1, node2] += 1 / (1 + edge_length)  # Penalize longer edges
            heuristics_matrix[node2, node1] += 1 / (1 + edge_length)

    heuristics_matrix /= num_samples
    return heuristics_matrix
