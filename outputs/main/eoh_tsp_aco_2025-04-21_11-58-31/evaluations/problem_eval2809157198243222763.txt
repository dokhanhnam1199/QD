import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by iteratively improving random tours using 3-opt swaps and recording edge frequencies in the improved solutions.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour = np.append(tour, tour[0])  # Return to start

        # Improve the tour using 3-opt swaps
        improved_tour = tour.copy()
        improved = True
        while improved:
            improved = False
            for i in range(n):
                for j in range(i + 2, n):
                    for k in range(j + 2, n + 1):
                        # Perform 3-opt swap on section [i, j) and [j, k)
                        segments = [improved_tour[i:j], improved_tour[j:k], improved_tour[k:]]
                        
                        # Try all 8 possible combinations of segment reversals
                        possible_tours = [
                            np.concatenate((segments[0], segments[1], segments[2])),
                            np.concatenate((segments[0], segments[1][::-1], segments[2])),
                            np.concatenate((segments[0], segments[1], segments[2][::-1])),
                            np.concatenate((segments[0], segments[1][::-1], segments[2][::-1])),
                            np.concatenate((segments[0][::-1], segments[1], segments[2])),
                            np.concatenate((segments[0][::-1], segments[1][::-1], segments[2])),
                            np.concatenate((segments[0][::-1], segments[1], segments[2][::-1])),
                            np.concatenate((segments[0][::-1], segments[1][::-1], segments[2][::-1]))
                        ]

                        current_cost = sum(distance_matrix[improved_tour[l], improved_tour[l+1]] for l in range(n))
                        
                        best_tour = improved_tour
                        best_cost = current_cost

                        for new_tour in possible_tours:
                            new_cost = sum(distance_matrix[new_tour[l], new_tour[l+1]] for l in range(n))
                            if new_cost < best_cost:
                                best_cost = new_cost
                                best_tour = new_tour

                        if best_cost < current_cost:
                            improved_tour = best_tour
                            improved = True
                            
        # Update heuristics matrix
        for i in range(n):
            node1 = improved_tour[i]
            node2 = improved_tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
