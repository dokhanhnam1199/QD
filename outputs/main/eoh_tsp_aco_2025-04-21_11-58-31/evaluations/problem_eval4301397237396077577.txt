import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristics matrix by iteratively refining edge probabilities based on the frequency with which edges appear in stochastically generated, partially optimized tours.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.ones_like(distance_matrix, dtype=float) / (distance_matrix.size-n) # Initialize with uniform probabilities
    num_iterations = 5
    num_samples = 50

    for _ in range(num_iterations):
        edge_counts = np.zeros_like(distance_matrix, dtype=int)

        for _ in range(num_samples):
            start_node = np.random.randint(n)
            current_tour = [start_node]
            unvisited_nodes = set(range(n))
            unvisited_nodes.remove(start_node)

            while unvisited_nodes:
                probabilities = heuristics_matrix[current_tour[-1], :].copy()
                
                # Mask already visited nodes
                for node in current_tour:
                    probabilities[node] = 0
                
                # Normalize probabilities
                if np.sum(probabilities) > 0:
                    probabilities = probabilities / np.sum(probabilities)
                else:
                    # If no valid edges, choose randomly from unvisited (rare case)
                    available_nodes = list(unvisited_nodes)
                    next_node = available_nodes[np.random.randint(len(available_nodes))]
                    current_tour.append(next_node)
                    unvisited_nodes.remove(next_node)
                    continue
                    

                # Sample the next node according to current probabilities
                next_node = np.random.choice(n, p=probabilities)
                
                current_tour.append(next_node)
                unvisited_nodes.remove(next_node)

            # Complete the tour
            current_tour.append(start_node)

            # Update edge counts
            for i in range(n):
                node1 = current_tour[i]
                node2 = current_tour[i+1]
                edge_counts[node1, node2] += 1
                edge_counts[node2, node1] += 1
        
        # Update heuristics matrix based on observed edge frequencies
        for i in range(n):
            for j in range(n):
                if i != j:
                    heuristics_matrix[i, j] = 0.9*heuristics_matrix[i, j] + 0.1*(edge_counts[i, j] / num_samples)
                else:
                    heuristics_matrix[i,j] = 0

    return heuristics_matrix
