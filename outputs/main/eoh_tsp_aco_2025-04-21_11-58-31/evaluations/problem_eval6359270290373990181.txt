import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs multiple tours by iteratively adding the node with the smallest average distance to the nodes in the current tour.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        unvisited_nodes = list(range(n))
        start_node = np.random.choice(unvisited_nodes)
        unvisited_nodes.remove(start_node)
        tour = [start_node]

        while unvisited_nodes:
            best_node_to_add = None
            min_avg_distance = float('inf')

            for node_to_add in unvisited_nodes:
                total_distance = 0
                for node_in_tour in tour:
                    total_distance += distance_matrix[node_to_add, node_in_tour]
                avg_distance = total_distance / len(tour)

                if avg_distance < min_avg_distance:
                    min_avg_distance = avg_distance
                    best_node_to_add = node_to_add

            tour.append(best_node_to_add)
            unvisited_nodes.remove(best_node_to_add)

        # Update heuristics matrix based on the sampled tour
        for i in range(len(tour)):
            node1 = tour[i]
            node2 = tour[(i + 1) % n]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
