import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm estimates edge importance by iteratively constructing tours using a weighted combination of shortest edge selection and a Metropolis-Hastings-inspired acceptance criterion with an adaptive temperature schedule, and incorporates a pheromone update mechanism based on tour length to reinforce promising edges.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    pheromone_matrix = np.ones_like(distance_matrix, dtype=float)  # Initialize pheromone matrix
    num_samples = 100
    temperature = 1.0  # Initial temperature for Metropolis-Hastings
    alpha = 1.0       # Pheromone influence
    beta = 2.0        # Distance influence
    rho = 0.1         # Evaporation rate

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        tour = [current_node]

        while unvisited_nodes:
            # Calculate probabilities based on pheromone, distance and temperature
            probabilities = np.zeros(n)
            for neighbor in unvisited_nodes:
                probabilities[neighbor] = (pheromone_matrix[current_node, neighbor]**alpha) * (np.exp(-distance_matrix[current_node, neighbor] / temperature)**beta)
            probabilities /= np.sum(probabilities)  # Normalize

            # Select the next node using the Metropolis-Hastings-inspired probabilities
            next_node = np.random.choice(range(n), p=probabilities)
            if next_node not in unvisited_nodes:
               valid_neighbors = list(unvisited_nodes)
               next_node = valid_neighbors[np.argmin([distance_matrix[current_node,neighbor] for neighbor in valid_neighbors])]

            tour.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

        tour.append(start_node)  # Return to starting node

        # 2-opt local search
        for i in range(1, n):
            for j in range(i + 1, n + 1):
                new_tour = tour[:i] + tour[i:j][::-1] + tour[j:]
                current_length = sum(distance_matrix[new_tour[k], new_tour[k+1]] for k in range(n))
                original_length = sum(distance_matrix[tour[k], tour[k+1]] for k in range(n))
                if current_length < original_length:
                    tour = new_tour

        # Update heuristics matrix based on tour edges
        tour_length = sum(distance_matrix[tour[i], tour[i+1]] for i in range(n))

        # Pheromone update
        delta_pheromone = 1.0 / tour_length
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            pheromone_matrix[node1, node2] = (1 - rho) * pheromone_matrix[node1, node2] + rho * delta_pheromone
            pheromone_matrix[node2, node1] = (1 - rho) * pheromone_matrix[node2, node1] + rho * delta_pheromone

        # Update heuristics matrix based on tour edges
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

        # Adaptive temperature schedule
        temperature *= 0.95

    # Normalize heuristics matrix
    heuristics_matrix /= num_samples
    return heuristics_matrix
