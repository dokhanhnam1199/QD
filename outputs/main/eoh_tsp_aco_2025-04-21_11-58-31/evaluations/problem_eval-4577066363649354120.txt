import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs multiple tours by iteratively adding nodes based on a weighted probabilistic selection combining distance and edge frequency information from previous iterations, then averages the edge frequencies across these tours to guide the search.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros((n, n))
    edge_frequency = np.ones((n, n))  # Initialize with ones to avoid division by zero

    for _ in range(num_samples):
        current_node = np.random.randint(n)
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        tour = [current_node]

        while unvisited_nodes:
            probabilities = np.zeros(n)
            for neighbor in unvisited_nodes:
                probabilities[neighbor] = (1 / distance_matrix[current_node, neighbor]) * edge_frequency[current_node, neighbor]
            
            probabilities /= np.sum(probabilities)
            
            next_node = np.random.choice(n, p=probabilities)
            while next_node not in unvisited_nodes:
                probabilities[next_node] = 0
                if np.sum(probabilities) == 0:
                    next_node = np.random.choice(list(unvisited_nodes))
                    break
                probabilities /= np.sum(probabilities)
                next_node = np.random.choice(n, p=probabilities)

            tour.append(next_node)
            unvisited_nodes.remove(next_node)
            heuristics_matrix[current_node, next_node] += 1
            heuristics_matrix[next_node, current_node] += 1
            current_node = next_node

        # Complete the tour
        heuristics_matrix[current_node, tour[0]] += 1
        heuristics_matrix[tour[0], current_node] += 1

        # Update edge frequencies
        for i in range(n):
            node1 = tour[i]
            node2 = tour[(i + 1) % n]
            edge_frequency[node1, node2] += 1
            edge_frequency[node2, node1] += 1

    return heuristics_matrix
