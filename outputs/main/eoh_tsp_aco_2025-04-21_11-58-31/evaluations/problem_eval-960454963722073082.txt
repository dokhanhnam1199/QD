import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples a number of random tours, and then calculates how often each edge is present in the shortest tours, using this as a heuristic.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    best_tour_length = float('inf')
    best_tours = []
    
    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        
        # Calculate the length of the tour
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[n-1], tour[0]]
        
        # Keep track of the best tours
        if tour_length < best_tour_length:
            best_tour_length = tour_length
            best_tours = [tour]
        elif tour_length == best_tour_length:
            best_tours.append(tour)
            
    # Update the heuristics matrix based on the best tours
    for tour in best_tours:
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += 1
            heuristics_matrix[tour[i+1], tour[i]] += 1
        heuristics_matrix[tour[n-1], tour[0]] += 1
        heuristics_matrix[tour[0], tour[n-1]] += 1
            
    # Normalize the heuristics matrix
    heuristics_matrix /= len(best_tours)
    
    return heuristics_matrix
