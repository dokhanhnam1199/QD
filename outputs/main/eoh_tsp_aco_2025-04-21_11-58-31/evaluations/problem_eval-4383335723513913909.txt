import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by combining edge frequencies from multiple solutions generated by iterative improvement with 2-opt swaps starting from random initial tours, weighting solutions by their inverse total length.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    total_weights = 0.0

    for _ in range(num_samples):
        # Generate a random initial tour
        tour = np.random.permutation(n)
        tour = np.append(tour, tour[0])

        # Improve the tour using 2-opt swaps
        improved = True
        while improved:
            improved = False
            for i in range(1, n):
                for j in range(i + 1, n + 1):
                    if i != j:
                        current_cost = distance_matrix[tour[i - 1], tour[i]] + distance_matrix[tour[j - 1], tour[j]]
                        new_cost = distance_matrix[tour[i - 1], tour[j - 1]] + distance_matrix[tour[i], tour[j]]

                        if new_cost < current_cost:
                            tour[i:j] = tour[i:j][::-1]
                            improved = True

        # Calculate tour length
        tour_length = 0.0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[i+1]]

        # Calculate weight (inverse of tour length)
        weight = 1.0 / tour_length if tour_length > 0 else 0.0
        total_weights += weight

        # Update heuristics matrix with weight
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += weight
            heuristics_matrix[node2, node1] += weight

    # Normalize heuristics matrix
    if total_weights > 0:
        heuristics_matrix /= total_weights
    return heuristics_matrix
