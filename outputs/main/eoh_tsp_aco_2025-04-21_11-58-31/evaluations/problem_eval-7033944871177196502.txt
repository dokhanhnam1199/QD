import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm generates multiple random TSP solutions using a nearest neighbor heuristic with a stochastic element, and then averages the edge frequencies across all solutions to create a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        path = [current_node]

        while unvisited_nodes:
            distances = distance_matrix[current_node, :]
            
            # Apply stochastic nearest neighbor with a chance to explore
            probabilities = np.zeros(n)
            for i in unvisited_nodes:
                probabilities[i] = np.exp(-distance_matrix[current_node, i]) # adjust randomness here

            probabilities /= np.sum(probabilities)

            next_node = np.random.choice(n, p=probabilities)

            if next_node not in unvisited_nodes:
                distances_unvisited = [distance_matrix[current_node, i] for i in unvisited_nodes]
                next_node = list(unvisited_nodes)[np.argmin(distances_unvisited)]
                

            path.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

        path.append(start_node)  # Return to the starting node
        
        # Update heuristics matrix based on the sampled path
        for i in range(len(path) - 1):
            node1 = path[i]
            node2 = path[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1
    
    heuristics_matrix /= num_samples
    return heuristics_matrix
