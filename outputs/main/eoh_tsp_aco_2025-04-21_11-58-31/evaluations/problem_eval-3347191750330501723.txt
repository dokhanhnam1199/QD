import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines edge voting from multiple stochastic solutions with a pheromone-inspired update, reinforcing promising edges and discouraging less promising ones.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.ones_like(distance_matrix)

    num_iterations = 50
    num_ants = 20

    for iteration in range(num_iterations):
        all_tours = []
        all_costs = []

        for ant in range(num_ants):
            unvisited = set(range(n))
            start_node = np.random.choice(list(unvisited))
            current_node = start_node
            unvisited.remove(current_node)
            tour = [current_node]
            total_cost = 0

            while unvisited:
                probabilities = heuristics_matrix[current_node, :] / distance_matrix[current_node, :]
                probabilities[current_node] = 0
                
                valid_indices = list(unvisited)
                probabilities_subset = probabilities[valid_indices]

                if np.sum(probabilities_subset) <= 0:
                    next_node = np.random.choice(valid_indices)
                else:
                    probabilities_subset = probabilities_subset / np.sum(probabilities_subset)
                    next_node = np.random.choice(valid_indices, p=probabilities_subset)

                next_node_index = valid_indices.index(next_node)
                next_node = valid_indices[next_node_index]
                
                total_cost += distance_matrix[current_node, next_node]
                current_node = next_node
                tour.append(current_node)
                unvisited.remove(current_node)
            
            total_cost += distance_matrix[current_node, start_node]
            tour.append(start_node)

            all_tours.append(tour)
            all_costs.append(total_cost)

        best_tour = all_tours[np.argmin(all_costs)]
        
        # Pheromone update
        for i in range(n):
            node1 = best_tour[i]
            node2 = best_tour[(i + 1) % n]
            heuristics_matrix[node1, node2] = heuristics_matrix[node1, node2] * 0.9 + (1 / all_costs[np.argmin(all_costs)])
            heuristics_matrix[node2, node1] = heuristics_matrix[node2, node1] * 0.9 + (1 / all_costs[np.argmin(all_costs)])

        # Evaporation
        heuristics_matrix = heuristics_matrix * 0.9

        heuristics_matrix = np.clip(heuristics_matrix, 0.001, 1000)
        
    return heuristics_matrix
