import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple random paths, scores them by length, and then creates a heuristic matrix based on how frequently each edge appears in the shortest paths.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    shortest_paths_count = 100

    paths = []
    path_lengths = []
    for _ in range(num_samples):
        path = np.random.permutation(n)
        path_length = 0
        for i in range(n - 1):
            path_length += distance_matrix[path[i], path[i+1]]
        path_length += distance_matrix[path[-1], path[0]]
        paths.append(path)
        path_lengths.append(path_length)
    
    sorted_indices = np.argsort(path_lengths)
    
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    for i in range(shortest_paths_count):
        best_path = paths[sorted_indices[i]]
        for j in range(n - 1):
            u = best_path[j]
            v = best_path[j+1]
            heuristics_matrix[u, v] += 1
            heuristics_matrix[v, u] += 1
        heuristics_matrix[best_path[-1], best_path[0]] += 1
        heuristics_matrix[best_path[0], best_path[-1]] += 1

    return heuristics_matrix
