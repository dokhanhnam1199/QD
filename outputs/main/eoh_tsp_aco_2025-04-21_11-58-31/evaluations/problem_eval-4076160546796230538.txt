import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm refines edge selection probabilities by iteratively sampling tours, biasing subsequent samples towards edges with higher frequencies in shorter tours, and applying a pheromone-inspired reinforcement learning approach.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    pheromone_matrix = np.ones_like(distance_matrix)
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    alpha = 1.0
    beta = 2.0

    for _ in range(num_samples):
        # Construct tour probabilities based on pheromones and distances
        probabilities = (pheromone_matrix**alpha) / (distance_matrix**beta + 1e-9)
        
        # Sample a tour based on probabilities
        current_node = np.random.randint(n)
        tour = [current_node]
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        
        while unvisited_nodes:
            probs = probabilities[current_node, :].copy()
            for node in range(n):
                if node not in unvisited_nodes:
                    probs[node] = 0.0
            probs /= probs.sum()
            
            next_node = np.random.choice(n, p=probs)
            tour.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

        tour.append(tour[0])
        tour = np.array(tour)
        
        # Calculate tour length
        tour_length = 0.0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        
        # Update pheromone matrix based on tour quality
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            pheromone_matrix[node1, node2] += 1.0 / (tour_length + 1e-9)
            pheromone_matrix[node2, node1] += 1.0 / (tour_length + 1e-9)
            
    # Normalize heuristics matrix (using average pheromone)
    heuristics_matrix = pheromone_matrix / num_samples
    return heuristics_matrix
