import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by assigning higher probabilities to shorter edges and then smoothing using a Gaussian kernel.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Initialize with inverse distance (shorter edges are preferred)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = 1.0 / (distance_matrix[i, j] + 1e-6)  # Add a small constant to avoid division by zero

    # Normalize the matrix so that values represent probabilities
    row_sums = heuristics_matrix.sum(axis=1, keepdims=True)
    heuristics_matrix = heuristics_matrix / row_sums

    # Apply Gaussian smoothing (blur)
    sigma = 1  # Standard deviation for the Gaussian kernel
    for i in range(n):
        for j in range(n):
            # Apply Gaussian kernel
            gaussian_sum = 0
            weight_sum = 0
            for x in range(max(0, i - 2 * sigma), min(n, i + 2 * sigma + 1)):
                for y in range(max(0, j - 2 * sigma), min(n, j + 2 * sigma + 1)):
                    dist = np.sqrt((x - i)**2 + (y - j)**2)
                    weight = np.exp(-dist**2 / (2 * sigma**2))
                    gaussian_sum += heuristics_matrix[x, y] * weight
                    weight_sum += weight
            if weight_sum > 0:
                heuristics_matrix[i, j] = gaussian_sum / weight_sum
            else:
                heuristics_matrix[i,j] = 0 # avoid nan in case of zero weights

    return heuristics_matrix
