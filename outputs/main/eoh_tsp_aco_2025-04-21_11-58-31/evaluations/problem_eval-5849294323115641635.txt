import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses ant colony optimization principles by simulating ant trails on edges and iteratively updating pheromone levels based on path lengths found by ant colonies.}"""
    n = distance_matrix.shape[0]
    pheromone_matrix = np.ones_like(distance_matrix)
    alpha = 1  # Influence of pheromone
    beta = 2   # Influence of distance
    rho = 0.5   # Evaporation rate
    Q = 100     # Pheromone deposit constant

    num_ants = n
    num_iterations = 100

    for iteration in range(num_iterations):
        all_paths = []
        all_costs = []

        for ant in range(num_ants):
            unvisited = set(range(n))
            start_node = ant % n  # Each ant starts at a different node
            current_node = start_node
            unvisited.remove(current_node)
            path = [current_node]
            total_cost = 0

            while unvisited:
                probabilities = np.zeros(n)
                for next_node in unvisited:
                    probabilities[next_node] = (pheromone_matrix[current_node, next_node]**alpha) * \
                                                ((1.0 / distance_matrix[current_node, next_node])**beta)

                if np.sum(probabilities) == 0:
                    next_node = np.random.choice(list(unvisited))
                else:
                    probabilities = probabilities / np.sum(probabilities)
                    next_node = np.random.choice(list(range(n)), p=probabilities)
                    if next_node not in unvisited:
                        next_node = np.random.choice(list(unvisited))

                total_cost += distance_matrix[current_node, next_node]
                path.append(next_node)
                unvisited.remove(next_node)
                current_node = next_node

            total_cost += distance_matrix[current_node, start_node]
            path.append(start_node)

            all_paths.append(path)
            all_costs.append(total_cost)

        # Update pheromones
        pheromone_matrix *= (1 - rho)  # Evaporation
        for k in range(num_ants):
            path = all_paths[k]
            cost = all_costs[k]
            for i in range(len(path) - 1):
                node1 = path[i]
                node2 = path[i + 1]
                pheromone_matrix[node1, node2] += Q / cost
                pheromone_matrix[node2, node1] += Q / cost

        pheromone_matrix = np.clip(pheromone_matrix, 0.001, 1000)

    return heuristics_matrix
