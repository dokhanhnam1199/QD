import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by combining edge frequencies from short random tours and their corresponding reversed tours to emphasize potentially optimal edge combinations.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 100

    for _ in range(num_samples):
        tour = np.random.choice(n, size=n, replace=False)
        tour = np.append(tour, tour[0])
        tour_length = sum(distance_matrix[tour[i], tour[i+1]] for i in range(n))

        if tour_length < np.mean(distance_matrix):
            for i in range(n):
                node1 = tour[i]
                node2 = tour[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1

            reversed_tour = tour[::-1]
            for i in range(n):
                node1 = reversed_tour[i]
                node2 = reversed_tour[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= (2*num_samples)
    return heuristics_matrix
