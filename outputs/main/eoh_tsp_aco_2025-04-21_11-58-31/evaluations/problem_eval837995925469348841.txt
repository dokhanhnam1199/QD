import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines shortest edge preference with path sampling, favoring edges frequently appearing on shortest paths between random node pairs within a defined path length limit.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 100
    max_path_length = n // 2

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        end_node = np.random.randint(n)
        
        distances = np.full(n, np.inf)
        distances[start_node] = 0
        predecessors = {}
        
        unvisited = set(range(n))
        
        while unvisited:
            current_node = min(unvisited, key=lambda node: distances[node])
            if distances[current_node] == np.inf:
                break
            
            unvisited.remove(current_node)
            
            for neighbor in range(n):
                if current_node != neighbor:
                    new_dist = distances[current_node] + distance_matrix[current_node, neighbor]
                    if new_dist < distances[neighbor]:
                        distances[neighbor] = new_dist
                        predecessors[neighbor] = current_node
        
        path = []
        current = end_node
        while current != start_node:
            if current not in predecessors:
                path = []
                break
            path.append(current)
            current = predecessors[current]
        
        if path:
            path.append(start_node)
            path = path[::-1]

            if len(path) <= max_path_length and len(path) > 1:
                for i in range(len(path) - 1):
                    node1 = path[i]
                    node2 = path[i+1]
                    heuristics_matrix[node1, node2] += 1
                    heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
