import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs tours by iteratively adding the shortest edge that doesn't create a cycle or disconnect the path, using a pheromone-inspired reinforcement learning approach to prioritize edges found in shorter tours.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    pheromone_matrix = np.ones((n, n))  # Initialize pheromone levels
    num_iterations = 100

    for _ in range(num_iterations):
        tour = []
        unvisited_nodes = set(range(n))
        start_node = np.random.randint(n)
        current_node = start_node
        tour.append(current_node)
        unvisited_nodes.remove(current_node)

        while unvisited_nodes:
            # Calculate edge weights based on distance and pheromone
            edge_weights = np.zeros(n)
            for neighbor in range(n):
                if neighbor in unvisited_nodes:
                    edge_weights[neighbor] = pheromone_matrix[current_node, neighbor] / distance_matrix[current_node, neighbor]

            # Select the next node probabilistically
            probabilities = edge_weights / np.sum(edge_weights)
            next_node = np.random.choice(range(n), p=probabilities)
            
            tour.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

        tour.append(start_node)
        tour_length = sum(distance_matrix[tour[i], tour[i+1]] for i in range(n))

        # Update pheromone levels based on tour length
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            pheromone_matrix[node1, node2] = (1 - 0.1) * pheromone_matrix[node1, node2] + 0.1 / tour_length
            pheromone_matrix[node2, node1] = pheromone_matrix[node1, node2]  # Ensure symmetry
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1
    return heuristics_matrix
