import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm estimates edge importance by iteratively constructing tours using a combination of shortest edge selection and pheromone-inspired reinforcement, favoring edges frequently used in shorter tours.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    pheromone_matrix = np.ones_like(distance_matrix) # Initialize pheromone
    num_samples = 100
    alpha = 1.0
    beta = 2.0
    evaporation_rate = 0.1

    for _ in range(num_samples):
        current_node = np.random.randint(n)
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        tour = [current_node]
        tour_length = 0

        while unvisited_nodes:
            probabilities = np.zeros(n)
            for neighbor in unvisited_nodes:
                probabilities[neighbor] = (pheromone_matrix[current_node, neighbor]**alpha) / ((distance_matrix[current_node, neighbor] + 1e-9)**beta)
            
            probabilities /= np.sum(probabilities[list(unvisited_nodes)])

            next_node = np.random.choice(list(range(n)), p=probabilities)
            
            tour_length += distance_matrix[current_node, next_node]
            tour.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

        tour_length += distance_matrix[current_node, tour[0]] # Complete the tour
        
        # Update pheromones based on tour length
        pheromone_delta = 1.0 / (tour_length + 1e-9)
        for i in range(n):
            node1 = tour[i]
            node2 = tour[(i + 1) % n]
            heuristics_matrix[node1, node2] += 1 # Count edge usage
            heuristics_matrix[node2, node1] += 1
            pheromone_matrix[node1, node2] = (1 - evaporation_rate) * pheromone_matrix[node1, node2] + evaporation_rate * pheromone_delta
            pheromone_matrix[node2, node1] = pheromone_matrix[node1, node2]


    return heuristics_matrix
