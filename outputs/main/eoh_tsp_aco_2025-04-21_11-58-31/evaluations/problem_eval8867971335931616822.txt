import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by iteratively improving random tours using 3-opt swaps and a variant of node exchange with larger neighborhoods, and records edge frequencies in the improved solutions.}"""
    n = distance_matrix.shape[0]
    num_samples = 50
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour = np.append(tour, tour[0])  # Return to start

        # Improve the tour using 3-opt swaps
        improved_tour = tour.copy()
        for i in range(n - 2):
            for j in range(i + 2, n):
                for k in range(j + 2, n + 1):
                    segments = [improved_tour[i:j], improved_tour[j:k], improved_tour[k:]]
                    
                    possible_segments = [
                        segments[0] + segments[1] + segments[2],
                        segments[0] + segments[1][::-1] + segments[2],
                        segments[0] + segments[2] + segments[1],
                        segments[0] + segments[2][::-1] + segments[1],
                        segments[0] + segments[2] + segments[1][::-1],
                        segments[0] + segments[2][::-1] + segments[1][::-1],
                        segments[0] + segments[1][::-1] + segments[2][::-1],
                        segments[0] + segments[1] + segments[2][::-1],
                    ]

                    current_cost = sum(distance_matrix[improved_tour[l], improved_tour[l+1]] for l in range(n))
                    best_cost = current_cost
                    best_tour = improved_tour
                    
                    for p_tour in possible_segments:
                        new_tour = np.concatenate(p_tour)
                        new_cost = sum(distance_matrix[new_tour[l], new_tour[l+1]] for l in range(n))
                
                        if new_cost < best_cost:
                            best_cost = new_cost
                            best_tour = new_tour

                    improved_tour = best_tour
        # Improve the tour using node exchange with wider neighborhood
        exchange_tour = improved_tour.copy()
        for i in range(1, n - 1):
            for j in range(i + 1, min(i + 5, n)): # check for neighbors
                temp_tour = exchange_tour.copy()
                temp_tour[i], temp_tour[j] = temp_tour[j], temp_tour[i]
                
                current_cost = sum(distance_matrix[exchange_tour[k], exchange_tour[k+1]] for k in range(n))
                new_cost = sum(distance_matrix[temp_tour[k], temp_tour[k+1]] for k in range(n))

                if new_cost < current_cost:
                    exchange_tour = temp_tour

        # Update heuristics matrix
        for i in range(n):
            node1 = exchange_tour[i]
            node2 = exchange_tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
