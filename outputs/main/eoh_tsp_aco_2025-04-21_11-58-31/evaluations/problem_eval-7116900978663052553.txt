import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm estimates edge importance by iteratively constructing tours using a weighted combination of shortest edge selection and a Boltzmann-inspired acceptance criterion with dynamic temperature and exploration bias, favoring edges that consistently lead to shorter overall tour lengths.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 100
    temperature = 10.0  # Initial temperature
    exploration_bias = 0.2 #Bias towards exploring less visited edges

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        tour = [current_node]

        while unvisited_nodes:
            # Calculate probabilities based on distance, temperature and exploration bias
            probabilities = np.zeros(n)
            for neighbor in unvisited_nodes:
                distance_factor = np.exp(-distance_matrix[current_node, neighbor] / temperature)
                exploration_factor = (1 + exploration_bias * (1 - heuristics_matrix[current_node, neighbor]))  # Bias towards less explored edges
                probabilities[neighbor] = distance_factor * exploration_factor

            probabilities /= np.sum(probabilities)  # Normalize

            # Select the next node using the probabilities
            next_node = np.random.choice(range(n), p=probabilities)
            if next_node not in unvisited_nodes:
               valid_neighbors = list(unvisited_nodes)
               next_node = valid_neighbors[np.argmin([distance_matrix[current_node,neighbor] for neighbor in valid_neighbors])]

            tour.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

        tour.append(start_node)  # Return to starting node

        # Update heuristics matrix based on tour edges
        tour_length = 0
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1
            tour_length += distance_matrix[node1, node2]

        # Anneal the temperature and exploration bias (reduce it over time)
        temperature *= 0.95
        exploration_bias *= 0.9

    # Normalize heuristics matrix
    heuristics_matrix /= num_samples
    return heuristics_matrix
