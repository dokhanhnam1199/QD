import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm constructs a heuristics matrix by assigning higher probabilities to shorter edges and edges connected to nodes with low degree, based on sampled solutions obtained by a random search.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 100

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        tour = [current_node]

        while unvisited_nodes:
            nearest_neighbor = np.random.choice(list(unvisited_nodes))

            tour.append(nearest_neighbor)
            unvisited_nodes.remove(nearest_neighbor)
            current_node = nearest_neighbor

        tour.append(start_node)

        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1
            
    # Normalize the heuristics matrix
    heuristics_matrix = heuristics_matrix / num_samples

    # Incorporate distance information
    heuristics_matrix = heuristics_matrix / (distance_matrix + 1e-9)  # Avoid division by zero

    degree = np.sum(1 / (distance_matrix + 1e-9), axis=0)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = heuristics_matrix[i, j] * (1 / (degree[i] + degree[j]))

    return heuristics_matrix
