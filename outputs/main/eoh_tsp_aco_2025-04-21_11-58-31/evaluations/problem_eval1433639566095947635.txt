import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines the edge frequency approach with a reinforcement learning strategy to learn and refine edge selection probabilities based on tour quality.}"""
    n = distance_matrix.shape[0]
    q_matrix = np.zeros_like(distance_matrix)
    learning_rate = 0.1
    discount_factor = 0.9
    num_episodes = 100
    exploration_rate = 0.2
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for episode in range(num_episodes):
        tour = list(np.random.permutation(n))
        tour.append(tour[0])
        total_reward = 0

        for i in range(n):
            node1 = tour[i]
            node2 = tour[i + 1]

            # Exploration-exploitation trade-off
            if np.random.rand() < exploration_rate:
                # Explore: Choose a random neighbor
                neighbors = list(range(n))
                neighbors.remove(node1)
                if node2 in neighbors:
                    neighbors.remove(node2)
                if neighbors:
                  next_node = np.random.choice(neighbors)
                  
                  current_index = tour.index(node2)
                  tour[current_index] = next_node
                  
                  if next_node not in tour:
                      tour.insert(current_index+1, node2)
                  
                  node2 = next_node
            

            reward = -distance_matrix[node1, node2]
            total_reward += reward

            # Q-value update
            best_next_q = np.max(q_matrix[node2, :])
            q_matrix[node1, node2] = q_matrix[node1, node2] + learning_rate * (reward + discount_factor * best_next_q - q_matrix[node1, node2])
            q_matrix[node2, node1] = q_matrix[node1, node2]

        #Update heuristics matrix
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1
        
    heuristics_matrix /= num_episodes

    return heuristics_matrix
