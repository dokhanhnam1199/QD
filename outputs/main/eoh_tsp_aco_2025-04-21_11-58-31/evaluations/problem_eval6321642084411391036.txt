import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses stochastic sampling with a greedy nearest neighbor heuristic, but biases the nearest neighbor selection with a probability inversely proportional to the distance, to generate multiple TSP solutions and then estimates the probability of each edge being present in an optimal solution.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        unvisited_nodes = list(range(n))
        unvisited_nodes.remove(start_node)
        current_node = start_node
        tour = [start_node]

        while unvisited_nodes:
            probabilities = np.array([1 / distance_matrix[current_node, node] for node in unvisited_nodes])
            probabilities /= np.sum(probabilities)
            nearest_node = np.random.choice(unvisited_nodes, p=probabilities)
            tour.append(nearest_node)
            unvisited_nodes.remove(nearest_node)
            current_node = nearest_node

        tour.append(start_node)

        for i in range(n):
            heuristics_matrix[tour[i], tour[i+1]] += 1
            heuristics_matrix[tour[i+1], tour[i]] += 1

    heuristics_matrix = heuristics_matrix / num_samples
    return heuristics_matrix
