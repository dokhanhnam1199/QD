import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs tours by iteratively selecting the next node based on a weighted combination of distance, pheromone (edge frequency), and a random exploration factor, updating pheromone levels after each tour to reinforce promising edges.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))  # Pheromone matrix
    num_samples = 100
    alpha = 1.0  # Pheromone influence
    beta = 2.0  # Distance influence
    rho = 0.1   # Evaporation rate

    for _ in range(num_samples):
        current_node = np.random.randint(n)
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        tour = [current_node]

        while unvisited_nodes:
            probabilities = np.zeros(n)
            for neighbor in unvisited_nodes:
                probabilities[neighbor] = (heuristics_matrix[current_node, neighbor]**alpha) * ((1 / distance_matrix[current_node, neighbor])**beta)

            if np.sum(probabilities) == 0:
                # All probabilities are zero, select randomly
                next_node = np.random.choice(list(unvisited_nodes))
            else:
                probabilities /= np.sum(probabilities)
                next_node = np.random.choice(range(n), p=probabilities)
                if next_node not in unvisited_nodes:
                   valid_neighbors = list(unvisited_nodes)
                   next_node = valid_neighbors[np.argmin([distance_matrix[current_node,neighbor] for neighbor in valid_neighbors])]


            tour.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

        tour.append(tour[0])
        tour_length = 0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[i+1]]

        # Update pheromones
        delta_pheromone = 1.0 / tour_length
        for i in range(n):
            heuristics_matrix[tour[i], tour[i+1]] += delta_pheromone
            heuristics_matrix[tour[i+1], tour[i]] += delta_pheromone


        # Evaporation
        heuristics_matrix *= (1 - rho)

    return heuristics_matrix
