import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix based on iteratively refining solutions generated by a greedy nearest neighbor approach with probabilistic acceptance of non-improving moves.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 100

    for _ in range(num_iterations):
        start_node = np.random.randint(n)
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(start_node)
        tour = [start_node]
        current_node = start_node

        while unvisited_nodes:
            nearest_neighbor = -1
            min_distance = float('inf')
            for neighbor in unvisited_nodes:
                if distance_matrix[current_node, neighbor] < min_distance:
                    min_distance = distance_matrix[current_node, neighbor]
                    nearest_neighbor = neighbor
            tour.append(nearest_neighbor)
            unvisited_nodes.remove(nearest_neighbor)
            current_node = nearest_neighbor
        tour.append(start_node)

        tour_length = sum(distance_matrix[tour[i], tour[i+1]] for i in range(n))

        # Perturb the tour by swapping two random nodes
        for swap_iter in range(n):
            idx1 = np.random.randint(1, n)  # Exclude start node
            idx2 = np.random.randint(1, n)
            if idx1 == idx2:
                continue

            new_tour = tour[:]
            new_tour[idx1], new_tour[idx2] = new_tour[idx2], new_tour[idx1]
            new_tour_length = sum(distance_matrix[new_tour[i], new_tour[i+1]] for i in range(n))

            # Accept the swap with probability if it's worse
            if new_tour_length < tour_length or np.random.rand() < 0.1: #added temperature/probabilistic acceptance
                tour = new_tour
                tour_length = new_tour_length
        
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_iterations

    return heuristics_matrix
