import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples a large number of random paths, and then averages the inverse of the lengths of paths that use each edge to provide an estimate of how good each edge is.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    for _ in range(num_samples):
        path = np.random.permutation(n)
        path_length = 0
        for i in range(n):
            path_length += distance_matrix[path[i], path[(i + 1) % n]]
        
        if path_length > 0: 
            path_contribution = 1.0 / path_length
            for i in range(n):
                heuristics_matrix[path[i], path[(i + 1) % n]] += path_contribution
                heuristics_matrix[path[(i + 1) % n], path[i]] += path_contribution
    
    return heuristics_matrix
