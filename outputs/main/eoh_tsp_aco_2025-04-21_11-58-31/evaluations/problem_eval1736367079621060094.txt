import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by iteratively building tours using a greedy nearest neighbor approach, then refining them with 3-opt swaps, and finally aggregating the edge frequencies across multiple iterations to estimate edge importance.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 100

    for _ in range(num_samples):
        # Greedy Nearest Neighbor Tour Construction
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        tour = [current_node]

        while unvisited_nodes:
            nearest_neighbor = min(unvisited_nodes, key=lambda x: distance_matrix[current_node, x])
            tour.append(nearest_neighbor)
            unvisited_nodes.remove(nearest_neighbor)
            current_node = nearest_neighbor

        tour.append(start_node)

        # 3-opt Local Search
        improved = True
        while improved:
            improved = False
            for i in range(1, n - 1):
                for j in range(i + 1, n):
                    for k in range(j + 1, n + 1):
                        # Possible 3-opt swap combinations
                        segments = [tour[i:j], tour[j:k], tour[k:i+n-1 if i+n-1 < n+1 else (i+n-1)%(n+1)]]
                        
                        original_cost = distance_matrix[tour[i-1], tour[i]] + distance_matrix[tour[j-1], tour[j]] + distance_matrix[tour[k-1], tour[k]]
                        
                        # Check reversal of segment i:j
                        new_segments = [segments[0][::-1], segments[1], segments[2]]
                        new_tour = tour[:i] + new_segments[0] + new_segments[1] + new_segments[2] + tour[k:]
                        new_cost = distance_matrix[tour[i-1], new_tour[i]] + distance_matrix[new_tour[j-1], new_tour[j]] + distance_matrix[new_tour[k-1], tour[k]]
                        
                        if new_cost < original_cost:
                            tour = tour[:i] + new_segments[0] + new_segments[1] + new_segments[2] + tour[k:]
                            improved = True
                            continue
                        
                        # Check reversal of segment j:k
                        new_segments = [segments[0], segments[1][::-1], segments[2]]
                        new_tour = tour[:i] + new_segments[0] + new_segments[1] + new_segments[2] + tour[k:]
                        new_cost = distance_matrix[tour[i-1], new_tour[i]] + distance_matrix[new_tour[j-1], new_tour[j]] + distance_matrix[new_tour[k-1], tour[k]]
                        
                        if new_cost < original_cost:
                            tour = tour[:i] + new_segments[0] + new_segments[1] + new_segments[2] + tour[k:]
                            improved = True
                            continue

                        # Check reversal of segment k:i
                        new_segments = [segments[0], segments[1], segments[2][::-1]]
                        new_tour = tour[:i] + new_segments[0] + new_segments[1] + new_segments[2] + tour[k:]
                        new_cost = distance_matrix[tour[i-1], new_tour[i]] + distance_matrix[new_tour[j-1], new_tour[j]] + distance_matrix[new_tour[k-1], tour[k]]
                        
                        if new_cost < original_cost:
                            tour = tour[:i] + new_segments[0] + new_segments[1] + new_segments[2] + tour[k:]
                            improved = True
                            continue

                        # Check complete reversal
                        new_segments = [segments[0][::-1], segments[1][::-1], segments[2][::-1]]
                        new_tour = tour[:i] + new_segments[0] + new_segments[1] + new_segments[2] + tour[k:]
                        new_cost = distance_matrix[tour[i-1], new_tour[i]] + distance_matrix[new_tour[j-1], new_tour[j]] + distance_matrix[new_tour[k-1], tour[k]]
                        
                        if new_cost < original_cost:
                            tour = tour[:i] + new_segments[0] + new_segments[1] + new_segments[2] + tour[k:]
                            improved = True
                            continue
        # Update heuristics matrix
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
