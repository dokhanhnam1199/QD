{
     "algorithm": "This algorithm constructs a heuristic matrix by weighting edge frequencies from multiple 2-opt improved solutions based on the exponential of the negative rank of the tour length, favoring shorter tours more strongly.",
     "code": "import numpy as np\n\ndef heuristics_v3(distance_matrix):\n    \"\"\"{This algorithm constructs a heuristic matrix by weighting edge frequencies from multiple 2-opt improved solutions based on the exponential of the negative rank of the tour length, favoring shorter tours more strongly.}\"\"\"\n    n = distance_matrix.shape[0]\n    num_samples = 100\n    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)\n    tour_lengths = []\n    tours = []\n\n    for _ in range(num_samples):\n        # Generate a random initial tour\n        tour = np.random.permutation(n)\n        tour = np.append(tour, tour[0])\n\n        # Improve the tour using 2-opt swaps\n        improved = True\n        while improved:\n            improved = False\n            for i in range(1, n):\n                for j in range(i + 1, n + 1):\n                    if i != j:\n                        current_cost = distance_matrix[tour[i - 1], tour[i]] + distance_matrix[tour[j - 1], tour[j]]\n                        new_cost = distance_matrix[tour[i - 1], tour[j - 1]] + distance_matrix[tour[i], tour[j]]\n\n                        if new_cost < current_cost:\n                            tour[i:j] = tour[i:j][::-1]\n                            improved = True\n\n        # Calculate tour length\n        tour_length = 0\n        for i in range(n):\n            tour_length += distance_matrix[tour[i], tour[i+1]]\n\n        tour_lengths.append(tour_length)\n        tours.append(tour)\n\n    # Rank the tour lengths\n    ranks = np.argsort(tour_lengths)\n\n    # Update heuristics matrix based on rank\n    for i in range(num_samples):\n        tour = tours[ranks[i]]\n        weight = np.exp(-i / (num_samples / 5))  # Exponential rank weighting\n        for j in range(n):\n            node1 = tour[j]\n            node2 = tour[j+1]\n            heuristics_matrix[node1, node2] += weight\n            heuristics_matrix[node2, node1] += weight\n\n    # Normalize heuristics matrix\n    heuristics_matrix /= num_samples\n    return heuristics_matrix",
     "objective": 5.71559,
     "other_inf": null
}