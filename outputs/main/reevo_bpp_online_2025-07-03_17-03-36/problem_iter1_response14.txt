```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Basic score based on remaining capacity. Larger remaining capacity, better fit.
            priority = cap - item

            # Prefer bins where the item fits best (smallest wasted space)
            priority += 1.0 / (item + 0.0001)  # Add a small constant to prevent division by zero

            # Reward bins that are almost full *after* placing the item.
            remaining_after = cap - item
            if remaining_after > 0:
                priority += np.exp(-10 * remaining_after / np.max(bins_remain_cap)) # Exponential decay
            else:
                priority = -np.inf  # Never choose a bin with negative remaining capacity (should be redundant).
            
            priorities[i] = priority
        else:
            priorities[i] = -np.inf # Item does not fit

    return priorities
```
