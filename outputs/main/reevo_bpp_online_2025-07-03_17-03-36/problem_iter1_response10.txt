```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First, give a large negative priority to bins that cannot fit the item
    priorities[bins_remain_cap < item] = -np.inf

    # For bins that can fit, calculate a score based on remaining capacity after packing
    remaining_capacity_after_pack = bins_remain_cap - item
    
    # Prioritize bins where the item fits best (least remaining space), but avoid nearly full bins.
    # We can balance these two factors.
    
    # Option 1: Linear combination of remaining capacity and inverse of remaining capacity.
    # This prioritizes bins with smallest remaining capacity.
    priorities[bins_remain_cap >= item] = (1 / (remaining_capacity_after_pack[bins_remain_cap >= item] + 1e-6)) + bins_remain_cap[bins_remain_cap >= item] # adding small epsilon value to avoid division by zero

    
    # Option 2: Use a function that decreases sharply when the remaining capacity is small.
    # This might involve an exponential function.

    # Option 3: Reward bins that result in some remaining capacity relative to item size
    #priorities[bins_remain_cap >= item] = np.exp(-remaining_capacity_after_pack[bins_remain_cap >= item] / item)

    #Option 4: give very large reward if the remaining capacity is close to some target capacity.
    #target_capacity = 0.5 #try to get half of the capacity
    #distance = np.abs(remaining_capacity_after_pack - target_capacity)
    #priorities[bins_remain_cap >= item] = -distance[bins_remain_cap >= item]
        
    return priorities
```
