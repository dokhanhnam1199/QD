```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give a high priority to bins where the item fits snugly, but not too snugly.
    fit_mask = bins_remain_cap >= item
    space_left = bins_remain_cap - item
    priorities[fit_mask] = (item / bins_remain_cap[fit_mask])  # Ratio of item size to bin capacity (higher is better fit)

    # Penalize bins with very little space remaining after the item is placed
    small_space_mask = (space_left[fit_mask] < 0.1) & fit_mask  # Example: Penalize if space left is less than 0.1
    priorities[small_space_mask] = priorities[small_space_mask] * 0.5  # Reduce priority

    # Penalize bins with significant space remaining after the item is placed
    large_space_mask = (space_left[fit_mask] > 0.5) & fit_mask #Example: if there's half the bin left
    priorities[large_space_mask] = priorities[large_space_mask] * 0.8
    
    # Give bins with space available a base priority, so all will be compared.
    priorities[fit_mask] = priorities[fit_mask] + 0.1

    return priorities
```
