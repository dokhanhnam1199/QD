```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)
    normalized_item = item / bin_capacity

    # 1. Feasibility: Infeasible bins get a very large negative priority.
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -1e9

    # 2. Best Fit (Normalized): Prioritize bins with minimal remaining capacity after placement.
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~feasible_bins] = bin_capacity * 2  # Set to large value for infeasible bins
    best_fit_priority = -remaining_after_fit / bin_capacity
    priorities += best_fit_priority

    # 3. Moderate Fill Avoidance: Discourage fills close to full without being overly aggressive.
    fill_threshold = 0.95
    fill_avoidance_penalty = 0.2
    high_fill_bins = feasible_bins & ((bins_remain_cap - item) / bin_capacity <= (1 - fill_threshold)) & (bins_remain_cap -item > 0)
    priorities[high_fill_bins] -= fill_avoidance_penalty

    # 4. Bin Balancing: Encourage packing into bins with lower fill levels.
    bin_fill_levels = (bin_capacity - bins_remain_cap) / bin_capacity
    mean_fill_level = np.mean(bin_fill_levels)
    bin_balancing_bonus = -0.05 * (bin_fill_levels - mean_fill_level) # Scale down balancing
    priorities += bin_balancing_bonus

    # 5. Fragmentation Penalty (Stricter):  Penalize small fragments more strongly.
    fragment_threshold = 0.1
    fragment_penalty = 0.5
    fragment_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit / bin_capacity <= fragment_threshold)
    priorities[fragment_mask] -= fragment_penalty

    # 6. Near-Perfect Fit Reward:  Significant bonus for fits close to perfect, tuned down
    near_perfect_fit_threshold = 0.04
    near_perfect_fit_bonus = 0.4
    near_perfect_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit / bin_capacity <= near_perfect_fit_threshold)
    priorities[near_perfect_mask] += near_perfect_fit_bonus

    # 7. Item-Size Dependent Bonus:  Slight reward for placing larger items (exploration).
    item_size_bonus = 0.05 * normalized_item
    priorities[feasible_bins] += item_size_bonus  # Apply only to feasible bins

    # 8. Small Item preference for relatively empty bins
    small_item_threshold = 0.2
    small_item_bonus = 0.1
    small_item = item / bin_capacity < small_item_threshold

    if small_item:
        relatively_empty_bins = feasible_bins & (bins_remain_cap > 0.7* bin_capacity) & (bins_remain_cap < bin_capacity)
        priorities[relatively_empty_bins]+= small_item_bonus/2
        completely_empty_bins = feasible_bins & (bins_remain_cap == bin_capacity)
        priorities[completely_empty_bins] += small_item_bonus

    return priorities
```
