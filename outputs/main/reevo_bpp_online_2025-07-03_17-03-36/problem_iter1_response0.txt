```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: Prefer bins that can fit the item.
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1.0

    # Rule 2: Give higher priority to bins with less remaining capacity after packing. The smaller the remaining cap, the better fit and fewer fragmentation
    remaining_after_fit = bins_remain_cap[can_fit] - item
    priorities[can_fit] += np.exp(-remaining_after_fit) # Exponentiated to give more weight to smaller values
    
    # Rule 3: Penalize bins that waste a lot of space if item cannot fit. This is a desperation strategy
    cannot_fit = ~can_fit #np.logical_not(can_fit) #bins_remain_cap < item
    waste = item - bins_remain_cap[cannot_fit]
    priorities[cannot_fit] -= waste*0.0001 # Penalize very small amount for bins that cannot fit it, preventing infinite penalty

    # Rule 4: Add a small random number for tie-breaking.
    priorities += np.random.rand(len(bins_remain_cap)) * 0.000001 #small noise for tie breaking
    
    return priorities
```
