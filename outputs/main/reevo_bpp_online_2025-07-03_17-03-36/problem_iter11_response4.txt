```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)
    normalized_item = item / bin_capacity

    # 1. Feasibility: Infeasible bins get a very large negative priority.
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -1e9

    # 2. Best Fit (Normalized): Prefer bins where the remaining capacity after placement is minimal, normalized.
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~feasible_bins] = bin_capacity * 2  # Set to large value for infeasible bins
    best_fit_priority = -remaining_after_fit / bin_capacity  # Normalize & invert: smaller remaining is better
    priorities += best_fit_priority

    # 3. Moderate Fill Avoidance: Slightly discourage bins that are already very full (but not infeasible).
    full_threshold = 0.8
    full_avoidance_penalty = 0.1
    full_bins = feasible_bins & ((bin_capacity - bins_remain_cap) / bin_capacity > full_threshold)
    priorities[full_bins] -= full_avoidance_penalty

    # 4. Fragmentation Penalty: Heavily penalize bins that will create a very small fragment. Tuned threshold.
    fragment_threshold = 0.12
    fragment_penalty = 0.6  # Slightly reduced penalty
    fragment_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit / bin_capacity <= fragment_threshold)
    priorities[fragment_mask] -= fragment_penalty

    # 5. Reward Near-Perfect Fit: Significant bonus for near perfect fits. Tuned threshold and bonus.
    near_perfect_fit_threshold = 0.04
    near_perfect_fit_bonus = 0.7
    near_perfect_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit / bin_capacity <= near_perfect_fit_threshold)
    priorities[near_perfect_mask] += near_perfect_fit_bonus

    # 6. Item-Size Dependent Bonus: Give a slight bonus based on item size (encourages filling larger gaps)
    item_size_bonus_factor = 0.15
    item_size_bonus = normalized_item * item_size_bonus_factor
    priorities[feasible_bins] += item_size_bonus

    # 7. Bin balancing: Try to balance the fill levels of the bins - only if not a near perfect fit. Tuned penalty
    bin_fill_levels = (bin_capacity - bins_remain_cap) / bin_capacity
    mean_fill_level = np.mean(bin_fill_levels)
    bin_balancing_penalty = 0.04 * np.abs(bin_fill_levels - mean_fill_level)  # Slightly increased penalty
    priorities[~near_perfect_mask] -= bin_balancing_penalty[~near_perfect_mask]  # Apply bin balancing only if not near perfect

    # 8. Exploration Bonus (Low Probability): Introduce some randomness for exploration. Reduced probability.
    exploration_probability = 0.01
    random_bonus = np.random.uniform(0, 0.05, size=bins_remain_cap.shape)  # Small random bonus
    explore_mask = np.random.rand(len(bins_remain_cap)) < exploration_probability
    priorities[feasible_bins & explore_mask] += random_bonus[feasible_bins & explore_mask]

    return priorities
```
