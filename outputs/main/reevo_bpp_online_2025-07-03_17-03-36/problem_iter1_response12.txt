```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give high priority to bins where item fits reasonably well.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask] # remaining space ratio. Higher is better
    
    # Prioritize bins where the item fits best (smallest remaining space).
    if np.any(fit_mask):
        min_waste = np.min(bins_remain_cap[fit_mask] - item)
        best_fit_mask = (bins_remain_cap - item) == min_waste
        priorities[best_fit_mask] += 1.0  # Adding a constant boost

    # Penalize bins that are too small (item does not fit), but not too heavily.
    # This allows smaller bins to be considered later if no better options exist.
    no_fit_mask = bins_remain_cap < item
    priorities[no_fit_mask] = - (item - bins_remain_cap[no_fit_mask]) / np.max(bins_remain_cap) # negative, close to 0, larger item smaller bin means larger penality.

    return priorities
```
