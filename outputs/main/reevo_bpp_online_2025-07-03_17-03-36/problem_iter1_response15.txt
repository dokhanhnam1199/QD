```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item
    
    # Prioritize bins where item fits
    fit_mask = waste >= 0
    
    # If item fits, prioritize based on how much space is left after packing
    # Smaller waste is better.
    priorities[fit_mask] = 1 / (waste[fit_mask] + 0.0000001) # Avoid division by zero
    
    # Bonus for near-full bins:
    near_full_threshold = 0.2 #percentage of the bin size considered nearly full
    near_full_mask = (bins_remain_cap > 0) & (bins_remain_cap <= (item + (np.max(bins_remain_cap) * near_full_threshold))) & fit_mask #Ensure that this applies to a fitting bin
    
    priorities[near_full_mask] += 2 #increase the priority to pack those

    
    # Penalize bins where item doesn't fit, unless none fit.
    no_fit_mask = waste < 0
    if np.any(fit_mask):
        priorities[no_fit_mask] = -np.inf
    else:
        #If nothing fits try packing in the bigger bins
        priorities = bins_remain_cap #just take the remaining cap, bigger is better.
        #priorities[no_fit_mask] = bins_remain_cap[no_fit_mask]/np.max(bins_remain_cap)
        #priorities[fit_mask] = np.zeros_like(priorities[fit_mask]) # set to zero because we only pack to those where no_fit_mask is True
    return priorities
```
