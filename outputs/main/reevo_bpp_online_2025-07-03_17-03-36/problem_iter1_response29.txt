```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First Fit Decreasing heuristic inspired priority
    # Give high priority to bins that can fit the item reasonably well

    fit_mask = bins_remain_cap >= item
    
    priorities[fit_mask] = (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask]

    # Give a small bonus to bins that are almost full to pack them
    almost_full = (bins_remain_cap > 0) & (bins_remain_cap < item)
    priorities[almost_full] = -1.0  # Negative priority means don't put the item if it doesn't fit.

    return priorities
```
