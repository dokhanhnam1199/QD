```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit Decreasing (FFD) inspired priority: Prioritize bins that can fit the item snugly.
    # A bin is a good fit if the remaining capacity after adding the item is small.
    
    fit_check = bins_remain_cap - item
    
    # Bins that cannot fit the item get a very low priority
    priorities[fit_check < 0] = -np.inf 
    
    # Prioritize bins with smallest remaining capacity *after* placing item,
    # but give preference to bins which are not too full already.
    
    priorities[fit_check >= 0] = 1.0 / (fit_check[fit_check >= 0] + 0.00001) # Avoid division by zero
    
    #Adjust priority based on how full the bin already is. Favor almost-full bins, 
    #but less aggressively than those where this new item will make it very full.
    
    fullness = 1.0 - bins_remain_cap[fit_check >= 0] / np.max(bins_remain_cap)
    priorities[fit_check >= 0] += 0.5 * fullness
    
    return priorities
```
