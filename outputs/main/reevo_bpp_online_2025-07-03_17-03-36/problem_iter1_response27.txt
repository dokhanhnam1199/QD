```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: If the item fits perfectly, give it the highest priority.
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = np.inf

    # Rule 2: Prioritize bins where the remaining capacity is greater than the item size.
    # This is essential, as it avoids any exceptions later if a bin is selected when it doesnt even fit
    does_not_fit = bins_remain_cap < item
    priorities[does_not_fit] = -np.inf
    
    # Rule 3: Next-fit modification: Give some priority to bins with small space.

    small_space = (bins_remain_cap > item) & (bins_remain_cap <= 2 * item) # space between item and 2* item
    priorities[small_space] = 2 / (bins_remain_cap[small_space] - item + 0.000001) # small differences means the bin is better.  Plus a small constant.

    # Rule 4: Prioritize bins with remaining capacity close to the item size.
    # This attempts to pack bins as tightly as possible, reducing wasted space.

    remaining_space = bins_remain_cap - item
    #remaining_space[remaining_space < 0 ] = np.inf  # make it very low priority to use bins that cant fit

    fitting_bins = bins_remain_cap > item
    if np.any(fitting_bins):

        priorities[fitting_bins] =  (bins_remain_cap[fitting_bins] - item) / np.max(bins_remain_cap) * -1 # prioritize by the smalles remaining space.
        priorities[fitting_bins] = 1 / (1 + np.exp(priorities[fitting_bins] * 10)) # turn it into sigmoid, higher values

    
    return priorities
```
