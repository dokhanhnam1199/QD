{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Assign a large negative priority to bins that can't fit the item\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9  # Large penalty for infeasibility\n\n    # 2. Best Fit: Prioritize bins with the smallest remaining capacity *after* adding the item, but only for feasible bins\n    feasible_bins = ~infeasible_bins\n    remaining_after_fit = bins_remain_cap[feasible_bins] - item\n\n    # Primary Best Fit scoring (smaller waste is better)\n    priorities[feasible_bins] = -remaining_after_fit\n\n    # Encourage moderate fill levels (avoid bins that are too full or too empty after placement)\n    bin_capacity = np.max(bins_remain_cap)\n    if bin_capacity > 0:\n        # Scale the remaining capacity and subtract a small amount. Encourages filling bins without overfilling.\n        priorities[feasible_bins] -= (bins_remain_cap[feasible_bins] / bin_capacity) * 0.001\n\n        # Bonus for bins that are reasonably full *after* placing the item, but not excessively full.\n        # This encourages consolidating items into fewer bins while preventing extreme fragmentation.\n        reasonable_fill = (remaining_after_fit > 0.1 * bin_capacity) & (remaining_after_fit < 0.8 * bin_capacity) # play with these parameters\n        priorities[feasible_bins][reasonable_fill] += 0.0005 # tiny bonus\n\n    # Slight penalty for bins that become almost full after placing the item\n    almost_full = (remaining_after_fit > 0) & (remaining_after_fit <= 0.05 * bin_capacity)\n    priorities[feasible_bins][almost_full] -= 0.0002\n    \n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n\n    # 1. Feasibility: Infeasible bins get a very large negative priority.\n    feasible_bins = bins_remain_cap >= item\n    priorities[~feasible_bins] = -1e9\n\n    # 2. Best Fit: Prefer bins where the remaining capacity after placement is minimal\n    remaining_after_fit = bins_remain_cap - item\n    remaining_after_fit[~feasible_bins] = bin_capacity * 2  # Set to large value for infeasible bins\n    best_fit_priority = -remaining_after_fit / bin_capacity # Normalize & invert: smaller remaining is better\n    priorities += best_fit_priority\n\n    # 3. Moderate Fill: Penalize bins that are nearly full or nearly empty *before* item placement.\n    nearly_full_threshold = 0.9\n    nearly_empty_threshold = 0.1\n    moderate_fill_penalty = 0.3\n\n    nearly_full_bins = (bins_remain_cap / bin_capacity) > nearly_full_threshold\n    nearly_empty_bins = (bins_remain_cap / bin_capacity) < nearly_empty_threshold\n\n    priorities[feasible_bins & nearly_full_bins] -= moderate_fill_penalty\n    priorities[feasible_bins & nearly_empty_bins] -= moderate_fill_penalty\n\n    # 4. Fragmentation Penalty: Heavily penalize bins that will create a very small fragment.\n    fragment_threshold = 0.15\n    fragment_penalty = 0.8\n    fragment_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit / bin_capacity <= fragment_threshold)\n    priorities[fragment_mask] -= fragment_penalty\n\n    # 5. Reward Near-Perfect Fit: Significant bonus for near perfect fits\n    near_perfect_fit_threshold = 0.05\n    near_perfect_fit_bonus = 0.7\n    near_perfect_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit / bin_capacity <= near_perfect_fit_threshold)\n    priorities[near_perfect_mask] += near_perfect_fit_bonus\n\n    # 6. Small Item Penalty: Slightly discourage placing very small items into partially filled bins.\n    small_item_threshold = 0.1\n    small_item_penalty = 0.1\n    if item / bin_capacity < small_item_threshold:\n        partially_filled_bins = feasible_bins & (bins_remain_cap < bin_capacity)\n        priorities[partially_filled_bins] -= small_item_penalty\n\n    # 7. Large Item Bonus: Encourage placing large items into emptier bins.\n    large_item_threshold = 0.7\n    large_item_bonus = 0.2\n    if item / bin_capacity > large_item_threshold:\n        relatively_empty_bins = feasible_bins & ((bins_remain_cap / bin_capacity) > 0.5)  # Bins more than half empty\n        priorities[relatively_empty_bins] += large_item_bonus\n\n    return priorities\n\n[Reflection]\nNormalization, fragmentation penalties, perfect-fit rewards, and item-size-dependent bonuses improve bin packing.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}