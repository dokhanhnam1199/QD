```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize minimal waste for bins that can fit the item
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        waste = bins_remain_cap[valid_bins] - item
        min_waste = np.min(waste)
        priorities[valid_bins] = 1.0 / (waste + 1e-6)  # Prioritize less waste; add a small constant to avoid division by zero
        priorities[valid_bins & (waste == min_waste)] += 10.0  # Boost for absolute best fit (smallest waste)

        # Further incentivize the absolute best fit by considering the ratio of item to bin capacity.
        best_fit_indices = valid_bins & (waste == min_waste)
        if np.any(best_fit_indices):
            ratios = item / bins_remain_cap[best_fit_indices]
            priorities[best_fit_indices] += ratios * 5 # Increase boost if the item almost fills the bin
    
    # Incentivize filling up bins, especially when items are small relative to bin size,
    # but less aggressively than prioritizing minimal waste.
    ratios = item / bins_remain_cap
    priorities += (np.clip(ratios, 0.0, 1.0)) * 0.1 #Prioritize higher ratios

    return priorities
```
