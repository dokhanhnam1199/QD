```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Large item goes into larger bins. Try to fill bins as full as possible
    
    fit_mask = bins_remain_cap >= item
    
    # If the item doesn't fit into any bin
    if not np.any(fit_mask):
        return np.full_like(bins_remain_cap, -np.inf)
    
    # Prioritize bins that the item can fit into
    
    available_bins = bins_remain_cap[fit_mask]
    
    # 1. Prioritize almost full bins after placing items
    post_fill = available_bins - item
    priorities[fit_mask] = 1/(post_fill + 1e-9)  # Avoid division by zero and prioritize smaller remaining space

    # 2. Reduce waste when the item is relatively small:
    item_relative_size = item / np.max(bins_remain_cap) if np.max(bins_remain_cap)>0 else 0.0
    if item_relative_size < 0.2:
        priorities[fit_mask] += (available_bins / np.max(bins_remain_cap))  # Place in relatively large bins when the item is small

    
    return priorities
```
