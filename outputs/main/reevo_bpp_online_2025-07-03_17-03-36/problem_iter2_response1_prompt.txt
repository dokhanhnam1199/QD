{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Give a high priority to bins where the item fits snugly, but not too snugly.\n    fit_mask = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    priorities[fit_mask] = (item / bins_remain_cap[fit_mask])  # Ratio of item size to bin capacity (higher is better fit)\n\n    # Penalize bins with very little space remaining after the item is placed\n    small_space_mask = (space_left[fit_mask] < 0.1) & fit_mask  # Example: Penalize if space left is less than 0.1\n    priorities[small_space_mask] = priorities[small_space_mask] * 0.5  # Reduce priority\n\n    # Penalize bins with significant space remaining after the item is placed\n    large_space_mask = (space_left[fit_mask] > 0.5) & fit_mask #Example: if there's half the bin left\n    priorities[large_space_mask] = priorities[large_space_mask] * 0.8\n    \n    # Give bins with space available a base priority, so all will be compared.\n    priorities[fit_mask] = priorities[fit_mask] + 0.1\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Large enough but with smallest waste\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        waste = bins_remain_cap[valid_bins] - item\n        min_waste = np.min(waste)\n        priorities[valid_bins] = 1.0 / (waste + 1e-6)  # Prioritize less waste\n        priorities[valid_bins & (waste == min_waste)] = 10.0 # boost for absolute best fit\n\n    \n    # Incentivize filling up bins even when waste is larger.\n    # This is helpful when items are small compare to bins.\n\n    ratios = item / bins_remain_cap\n\n    priorities += (1-np.clip(ratios, 0.0, 1.0)) * 0.1\n\n    return priorities\n\n[Reflection]\nPrioritize minimal waste, boost best fits, and consider item size relative to bin capacity for better bin utilization.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}