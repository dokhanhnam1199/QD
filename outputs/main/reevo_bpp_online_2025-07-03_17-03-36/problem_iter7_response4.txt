```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. Feasibility: Infeasible bins get a large negative priority.
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -1e9

    # 2. Best Fit Preference
    remaining_after_fit = bins_remain_cap - item
    best_fit_delta = np.abs(remaining_after_fit)
    # Adjust the best fit delta for infeasible bins
    best_fit_delta_adj = np.copy(best_fit_delta)
    best_fit_delta_adj[~feasible_bins] = bin_capacity * 2 # assign large penalty
    # Normalize best fit delta and create priority (lower delta = higher priority)
    normalized_best_fit = 1 - (best_fit_delta_adj / np.max(best_fit_delta_adj))
    priorities += normalized_best_fit

    # 3. Moderate Fill Preference (avoid near-empty and near-full bins)
    fill_level = (bin_capacity - bins_remain_cap + item)/ bin_capacity
    moderate_fill_bonus = np.exp(-((fill_level - 0.6)**2) / (2 * 0.2**2))  # Gaussian centered at 0.6
    priorities += moderate_fill_bonus * feasible_bins  # only add bonus to feasible bins.
    

    # 4. Penalize Small Items (when other choices exist)
    small_item_threshold = 0.1 * bin_capacity
    small_item_penalty = 0.3
    if item < small_item_threshold:
        priorities[feasible_bins] -= small_item_penalty # Apply to all feasible bins

    # 5. Fragment Penalty
    fragment_threshold = 0.15 * bin_capacity
    fragment_penalty = 0.5
    fragment_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= fragment_threshold)
    priorities[fragment_mask] -= fragment_penalty

    # 6. Near-Perfect Fit Reward
    near_perfect_fit_threshold = 0.05 * bin_capacity
    near_perfect_fit_bonus = 0.7
    near_perfect_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= near_perfect_fit_threshold)
    priorities[near_perfect_mask] += near_perfect_fit_bonus

    return priorities
```
