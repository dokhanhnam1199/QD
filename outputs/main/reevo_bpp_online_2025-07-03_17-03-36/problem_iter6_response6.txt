```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = np.max(bins_remain_cap)  # Assume all bins have same capacity.

    # 1. Feasibility: Assign a large negative priority to bins that can't fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9  # Large negative number

    # Proceed only for feasible bins
    feasible_bins = ~infeasible_bins

    if not np.any(feasible_bins):
        return priorities # No feasible bins, return lowest priority possible

    # 2. Best Fit (among feasible bins)
    remaining_after_fit = bins_remain_cap[feasible_bins] - item
    priorities[feasible_bins] = -remaining_after_fit  # Smaller remaining capacity gets higher priority

    # 3. Target Fill Level: Reward bins that, after adding the item, get close to an ideal fill ratio.
    optimal_fill = 0.75
    current_fill_ratio = (bin_size - bins_remain_cap[feasible_bins]) / bin_size  # Current fill ratio BEFORE adding the item
    new_fill_ratio = (bin_size - remaining_after_fit) / bin_size # Expected fill ratio AFTER adding the item
    
    #Penalize deviation from target ratio
    priorities[feasible_bins] -= abs(new_fill_ratio - optimal_fill) * 10
    
    # 4. Relative Item Size: Reward placing larger items
    relative_item_size = item / bin_size
    priorities[feasible_bins] += relative_item_size * 3

    # 5. Avoid extremely empty bins after placing item
    very_empty = (remaining_after_fit / bin_size) > 0.9
    priorities[feasible_bins][very_empty] -= 2

    #6. Avoid almost full
    almost_full = (remaining_after_fit / bin_size) < 0.1
    priorities[feasible_bins][almost_full] -= 4
    
    return priorities
```
