```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = np.max(bins_remain_cap)

    # 1. Feasibility: Eliminate infeasible bins immediately.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Consider only feasible bins from this point onward.
    feasible_bins = ~infeasible_bins

    # 2. Best Fit: Primary criterion is minimizing remaining space.
    remaining_space = bins_remain_cap[feasible_bins] - item
    priorities[feasible_bins] = -remaining_space

    # 3. Moderate Fill Level: Discourage bins that become almost full.
    almost_full = remaining_space < (0.1 * bin_size)
    priorities[feasible_bins][almost_full] -= 5

    # 4. Relative Item Size: Discourage placing small items in large bins.
    relative_item_size = item / bin_size
    priorities[feasible_bins] -= relative_item_size * 10

    # 5. Encourage fuller bins: Give a slight bonus to bins that are already somewhat full.
    already_full = bins_remain_cap[feasible_bins] > (0.1 * bin_size) #Only give the bonus if it's not almost empty.
    already_full = already_full & (bins_remain_cap[feasible_bins] < (0.9 * bin_size))
    fill_level = (bin_size - bins_remain_cap[feasible_bins][already_full]) / bin_size
    priorities[feasible_bins][already_full] += fill_level * 2 # Scale to [0, 2]

    return priorities
```
