{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Rule 1: Prefer bins that can fit the item.\n    can_fit = bins_remain_cap >= item\n    priorities[can_fit] += 1.0\n\n    # Rule 2: Give higher priority to bins with less remaining capacity after packing. The smaller the remaining cap, the better fit and fewer fragmentation\n    if np.any(can_fit):\n        remaining_after_fit = bins_remain_cap[can_fit] - item\n        priorities[can_fit] += np.exp(-remaining_after_fit*10) # Exponentiated to give more weight to smaller values\n    \n    # Rule 3: Penalize bins that waste a lot of space if item cannot fit. This is a desperation strategy\n    cannot_fit = ~can_fit\n    if np.any(cannot_fit):\n        waste = item - bins_remain_cap[cannot_fit]\n        priorities[cannot_fit] -= waste*0.0001 # Penalize very small amount for bins that cannot fit it, preventing infinite penalty\n\n    # Rule 4: Add a small random number for tie-breaking.\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.000001 #small noise for tie breaking\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate wasted space if item is placed in each bin\n    wasted_space = bins_remain_cap - item\n\n    # Assign high priority to bins where item fits and wasted space is minimized\n    fit_mask = wasted_space >= 0\n    if np.any(fit_mask):\n        priorities[fit_mask] = 1 / (wasted_space[fit_mask] + 1e-6)  # Avoid division by zero\n        # Further prioritize bins that are closer to being full after adding the item\n        remaining_space_ratio = (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask]\n        priorities[fit_mask] *= (1 - remaining_space_ratio) + 0.1 #a little boost even when perfectly fit\n    else:\n        # If no bin can fit the item, use worst fit approach (least overfilled bin)\n        overfill_amount = item - bins_remain_cap\n        priorities = -overfill_amount\n    return priorities\n\n[Reflection]\nBetter heuristics: Prioritize tight fits proportionally; penalize overfilled bins linearly, not exponentially.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}