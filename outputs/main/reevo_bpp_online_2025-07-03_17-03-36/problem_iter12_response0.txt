```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)
    normalized_item = item / bin_capacity

    # 1. Feasibility: Infeasible bins get a very large negative priority.
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -1e9

    # 2. Best Fit: Prefer bins where the remaining capacity after placement is minimal
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~feasible_bins] = bin_capacity * 2  # Set to large value for infeasible bins
    best_fit_priority = -remaining_after_fit / bin_capacity  # Normalize & invert: smaller remaining is better
    priorities += best_fit_priority

    # 3. Fragmentation Penalty: Heavily penalize bins that will create a very small fragment. Adjusted threshold
    fragment_threshold = 0.10
    fragment_penalty = 0.5
    fragment_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit / bin_capacity <= fragment_threshold)
    priorities[fragment_mask] -= fragment_penalty

    # 4. Reward Near-Perfect Fit: Significant bonus for near perfect fits.  Adjusted threshold
    near_perfect_fit_threshold = 0.06
    near_perfect_fit_bonus = 0.4
    near_perfect_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit / bin_capacity <= near_perfect_fit_threshold)
    priorities[near_perfect_mask] += near_perfect_fit_bonus

    # 5. Small Item Preference & Avoidance:
    small_item_threshold = 0.12
    small_item_bonus = 0.08
    small_item_penalty = 0.03
    if normalized_item < small_item_threshold:
        # Prefer bins with remaining capacity exceeding a threshold or near empty
        preferred_threshold = 0.6
        preferred_bins = feasible_bins & ((bins_remain_cap / bin_capacity) > preferred_threshold)
        priorities[preferred_bins] += small_item_bonus
        # Avoid adding to bins with some capacity to avoid many small fragments
        avoid_bins = feasible_bins & (bins_remain_cap < bin_capacity) & (bins_remain_cap > item)
        priorities[avoid_bins] -= small_item_penalty

    # 6. Bin balancing (moderate): Try to balance fill levels, with a dampening factor for small items.
    bin_fill_levels = (bin_capacity - bins_remain_cap) / bin_capacity
    mean_fill_level = np.mean(bin_fill_levels)
    balancing_factor = 0.03 * (1 - min(1, 5 * normalized_item))  # Dampen balancing for smaller items.  Slightly increased
    bin_balancing_penalty = balancing_factor * np.abs(bin_fill_levels - mean_fill_level)
    priorities -= bin_balancing_penalty

    # 7. Large item incentive to fill more
    large_item_threshold = 0.7
    large_item_bonus = 0.15 #Increased

    if normalized_item > large_item_threshold:
      nearly_full_bins = feasible_bins & ((bins_remain_cap / bin_capacity) < 0.3) & ((bins_remain_cap / bin_capacity) > (normalized_item -0.02) ) #Adjusted tolerance

      priorities[nearly_full_bins] += large_item_bonus

    # 8. Empty bin bonus - encourage use of empty bins
    empty_bin_bonus = 0.05
    empty_bins = bins_remain_cap == bin_capacity
    priorities[feasible_bins & empty_bins] += empty_bin_bonus

    return priorities
```
