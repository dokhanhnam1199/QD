```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility check:
    feasible_bins = bins_remain_cap >= item
    
    # If no bin is feasible, return low priority for all bins
    if not np.any(feasible_bins):
      return priorities

    # 2. Prioritize bins that can fit the item, but are close to being full after packing.
    fill_levels = (bins_remain_cap[feasible_bins] - item) / np.max(bins_remain_cap) # Normalized
    priorities[feasible_bins] = 1 - fill_levels # Higher priority for bins close to being full
    
    # 3. Add a bonus for bins that have been used a lot already to consolidate items
    used_bins = bins_remain_cap < np.max(bins_remain_cap)
    priorities[used_bins] += 0.2 # Add a bonus to already used bins.  Slightly more aggressive than v1. This constant can be tuned.

    # 4. Introduce small random noise to break ties and explore different solutions
    priorities += np.random.rand(len(bins_remain_cap)) * 0.01

    return priorities
```
