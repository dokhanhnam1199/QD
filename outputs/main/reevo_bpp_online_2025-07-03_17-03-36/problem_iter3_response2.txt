```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Infeasibility Penalty: Very low priority if the item doesn't fit.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9  # A large negative number

    # 2. Best Fit Criterion: Prioritize bins where the remaining space after placing the item is minimal.
    feasible_bins = ~infeasible_bins
    remaining_after_fit = bins_remain_cap[feasible_bins] - item
    priorities[feasible_bins] = -remaining_after_fit  # Smaller remaining is better (larger negative value)

    # 3. Moderate Fill Level Encouragement:  A slight bonus for bins that are filled to a moderate level.
    #    This is intended to avoid both nearly empty and nearly full bins, promoting better overall packing.
    #    We apply a small bonus based on how close the bin's remaining capacity is to half its original capacity *after* placing the item
    bin_size = np.max(bins_remain_cap)  # Assuming all bins have the same size
    moderate_fill_bonus = -np.abs(remaining_after_fit - bin_size / 2) / bin_size / 10 # Small fraction of bin size

    priorities[feasible_bins] += moderate_fill_bonus
    return priorities
```
