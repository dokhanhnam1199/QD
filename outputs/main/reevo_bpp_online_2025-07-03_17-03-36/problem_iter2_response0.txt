```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: High priority for bins that can fit the item.
    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] += 1

    # 2. Remaining Capacity: Prefer bins with less remaining capacity after placing the item
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[remaining_after_fit < 0] = np.inf  # Penalize infeasible bins

    # Normalize the remaining capacity scores for feasible bins only
    max_cap = np.max(bins_remain_cap)
    normalized_remaining = np.zeros_like(bins_remain_cap, dtype=float)
    normalized_remaining[feasible_bins] = 1 - (remaining_after_fit[feasible_bins] / max_cap)
    priorities += normalized_remaining

    # 3. Avoidance of Fragmentation: Penalize bins that will leave a small unusable fragment.
    fragment_threshold = 0.1  # Define a threshold for small fragments relative to bin size
    fragment_penalty = 0.5

    fragment_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= fragment_threshold * max_cap)
    priorities[fragment_mask] -= fragment_penalty


    # 4. Bonus for near perfect fit
    near_perfect_fit_threshold = 0.05
    near_perfect_fit_bonus = 0.3
    near_perfect_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= near_perfect_fit_threshold * max_cap)
    priorities[near_perfect_mask] += near_perfect_fit_bonus

    return priorities
```
