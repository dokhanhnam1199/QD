```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item

    # Prioritize bins that can accommodate the item
    eligible_bins = remaining_capacities >= 0
    priorities[eligible_bins] = bins_remain_cap[eligible_bins] - item  # Favor bins with smaller resulting waste
    # Penalize bins that cannot accommodate the item heavily
    priorities[~eligible_bins] = -1e9 # A very low value

    # Further refine prioritization among eligible bins
    # Give higher priority to bins with smaller remaining capacity *after* packing the item
    priorities[eligible_bins] = 1.0 / (1e-6 + remaining_capacities[eligible_bins]) #avoid division by zero. Smaller cap -> High priority

    # Boost bins that are nearly full after placing the item
    nearly_full = (remaining_capacities >= 0) & (remaining_capacities <= 0.1) #thresholds can be adjusted
    priorities[nearly_full] += 10 # Increased boost can prevent unnecessary new bins


    return priorities
```
