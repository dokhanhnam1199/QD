{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Rule 1: Prefer bins that can fit the item.\n    can_fit = bins_remain_cap >= item\n    priorities[can_fit] += 1.0\n\n    # Rule 2: Give higher priority to bins with less remaining capacity after packing. The smaller the remaining cap, the better fit and fewer fragmentation\n    remaining_after_fit = bins_remain_cap[can_fit] - item\n    priorities[can_fit] += np.exp(-remaining_after_fit) # Exponentiated to give more weight to smaller values\n    \n    # Rule 3: Penalize bins that waste a lot of space if item cannot fit. This is a desperation strategy\n    cannot_fit = ~can_fit #np.logical_not(can_fit) #bins_remain_cap < item\n    waste = item - bins_remain_cap[cannot_fit]\n    priorities[cannot_fit] -= waste*0.0001 # Penalize very small amount for bins that cannot fit it, preventing infinite penalty\n\n    # Rule 4: Add a small random number for tie-breaking.\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.000001 #small noise for tie breaking\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Calculate wasted space if item is placed in the bin.\n    wasted_space = bins_remain_cap - item\n    \n    # Give very low priority (negative) to bins that cannot fit the item.\n    priorities[wasted_space < 0] = -np.inf\n    \n    # Higher priority to bins where wasted space is small, but not too small.\n    # The goal is to avoid filling bins too tightly and instead aim for bins \n    # that allow for future items to be packed as well. Avoid bins that are over 95% full.\n    \n    # Find bins that can fit the item.\n    fit_bins = wasted_space >= 0\n    \n    # Calculate fill ratios for bins that can fit.\n    fill_ratios = np.zeros_like(bins_remain_cap, dtype=float)\n    fill_ratios[fit_bins] = item / bins_remain_cap[fit_bins]\n\n    # Give preference to bins that are filled reasonably well.\n    priorities[fit_bins] = np.exp(-np.abs(fill_ratios[fit_bins] - 0.75)) # Prefer bins filled around 75%\n\n    # Reduce the priority if the bin is almost full. A filled ratio > 0.95 incurs a heavy penalty.\n    almost_full = fit_bins & (fill_ratios > 0.95)\n    priorities[almost_full] *= 0.1\n    \n    # Give small bonus for almost-full bins to reduce fragmentation if there's no other option, but ensure it is worse than good fit if possible.\n    # Note: this is usually a bad idea to prioritize since the problem is more about item size variance.\n    return priorities\n\n[Reflection]\nPrioritize moderate fill levels. Heavily penalize bins that cannot fit or are almost full.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}