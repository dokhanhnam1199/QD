```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Assign a large negative priority to bins that can't fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9  # Large penalty for infeasibility

    # 2. Best Fit: Prioritize bins with the smallest remaining capacity *after* adding the item
    feasible_bins = ~infeasible_bins
    remaining_after_fit = bins_remain_cap[feasible_bins] - item

    # Prioritize smaller waste, but avoid bins that are too full (waste close to zero)
    # Aim for moderate fill levels to accommodate future items

    priorities[feasible_bins] = -remaining_after_fit # Primary Best Fit scoring

    #Scale the remaining cap and subtract it
    if np.max(bins_remain_cap) != 0:
      priorities[feasible_bins] -= (bins_remain_cap[feasible_bins]/np.max(bins_remain_cap)) * 0.001
    
    return priorities
```
