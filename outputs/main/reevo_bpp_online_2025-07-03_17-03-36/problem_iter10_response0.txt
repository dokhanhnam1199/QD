```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_bin_cap = np.max(bins_remain_cap)

    # 1. Feasibility: Infeasible bins get a large negative priority.
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -1e9

    # 2. Best Fit (Normalized): Prefer bins where the remaining capacity after placement is minimal
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit_adj = np.where(feasible_bins, remaining_after_fit, max_bin_cap * 2)  # Large value for infeasible
    normalized_remaining = 1 - (remaining_after_fit_adj / (max_bin_cap + 1e-6))  # Normalize to [0, 1], adding small value to prevent divide by zero
    priorities += normalized_remaining

    # 3. Fragmentation Penalty: Penalize bins that will leave a small unusable fragment.
    fragment_threshold = 0.12
    fragment_penalty = 0.5
    fragment_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= fragment_threshold * max_bin_cap)
    priorities[fragment_mask] -= fragment_penalty

    # 4. Reward Near-Perfect Fit: Encourage using bins that almost perfectly fit the item.
    near_perfect_fit_threshold = 0.06
    near_perfect_fit_bonus = 0.65
    near_perfect_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= near_perfect_fit_threshold * max_bin_cap)
    priorities[near_perfect_mask] += near_perfect_fit_bonus

    # 5. Encourage usage of emptier bins when possible, to reduce # of bins used, but only if item isn't too big
    empty_bin_threshold = 0.85
    empty_bin_bonus = 0.35
    item_size_threshold = 0.6
    empty_bin_mask = feasible_bins & (bins_remain_cap >= empty_bin_threshold * max_bin_cap) & (item <= item_size_threshold * max_bin_cap)
    priorities[empty_bin_mask] += empty_bin_bonus

    # 6. Penalize filling near-full bins, especially if larger bins are available. Stronger penalty
    near_full_threshold = 0.15
    near_full_penalty = 0.5
    if np.any(bins_remain_cap >= empty_bin_threshold * max_bin_cap):
        near_full_mask = feasible_bins & (bins_remain_cap <= near_full_threshold * max_bin_cap)
        priorities[near_full_mask] -= near_full_penalty

    # 7. Add a slight penalty for using bins which were completely empty before - reduced penalty
    previously_empty_penalty = 0.15
    previously_empty_mask = (bins_remain_cap == max_bin_cap) & feasible_bins
    priorities[previously_empty_mask] -= previously_empty_penalty

    # 8. Prioritize bins with capacities closest to item size if there are multiple feasible bins
    if np.sum(feasible_bins) > 1:
        size_diff = np.abs(bins_remain_cap[feasible_bins] - item)
        normalized_size_diff = 1 - (size_diff / (max_bin_cap + 1e-6))
        priorities[feasible_bins] += normalized_size_diff * 0.2  # Add a fraction of this score

    return priorities
```
