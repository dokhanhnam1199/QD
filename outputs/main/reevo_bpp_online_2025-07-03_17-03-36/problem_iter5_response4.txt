```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Infeasible bins get a very low priority.
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -1e9

    # 2. Best Fit: Prioritize bins that result in the least remaining capacity.
    remaining_after_fit = bins_remain_cap - item
    
    # Only consider remaining capacity for feasible bins, set infeasible remaining to large number
    remaining_after_fit_adj = np.copy(remaining_after_fit)
    remaining_after_fit_adj[~feasible_bins] = np.max(bins_remain_cap) + item # some large value

    # Normalize remaining capacity (smaller is better)
    max_remaining = np.max(remaining_after_fit_adj)
    normalized_remaining = 1 - (remaining_after_fit_adj / max_remaining)
    priorities += normalized_remaining

    # 3. Penalize small relative item sizes
    relative_item_size = item / np.max(bins_remain_cap)
    if relative_item_size < 0.1:
        priorities -= 0.1  # Small penalty for very small items

    # 4. Penalize near-full bins (risk of creating unusable fragments)
    near_full_threshold = 0.9
    near_full_bins = bins_remain_cap / np.max(bins_remain_cap) > near_full_threshold
    priorities[near_full_bins & feasible_bins] -= 0.2 # Moderate penalty for near-full bins

    return priorities
```
