```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining capacity after adding the item
    remaining_after_add = bins_remain_cap - item

    # Give high priority to bins that can fit the item perfectly or near perfectly
    perfect_fit_bonus = np.exp(-np.abs(remaining_after_add) / (item + 1e-6)) # Avoid division by zero
    priorities += perfect_fit_bonus

    # Give some priority to bins that can fit the item, but less than perfect fit
    can_fit = remaining_after_add >= 0
    priorities[can_fit] += 0.5 * (bins_remain_cap[can_fit] / np.sum(bins_remain_cap[can_fit] + 1e-6))

    # Penalize bins that cannot fit the item (make it a lower priority). Avoid infinite penalty
    cannot_fit = remaining_after_add < 0
    priorities[cannot_fit] -= np.abs(remaining_after_add[cannot_fit]) / (np.max(bins_remain_cap) + 1e-6)

    #Prioritize bins that are relatively full to avoid creating bins with just a small items
    relative_fullness = (np.max(bins_remain_cap)-bins_remain_cap) / (np.max(bins_remain_cap) + 1e-6)
    priorities += 0.2 * relative_fullness
    return priorities
```
