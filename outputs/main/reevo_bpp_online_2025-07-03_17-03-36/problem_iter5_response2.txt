```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap) # Assume all bins have same capacity.

    # 1. Feasibility: Infeasible bins get the lowest priority.
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf

    # 2. Best Fit: Prioritize bins that result in the least remaining capacity after placement.
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~feasible_bins] = bin_capacity  # Assign large values to infeasible bins

    # Normalize remaining capacity to a range [0, 1], lower is better
    normalized_remaining = remaining_after_fit / bin_capacity
    priorities[feasible_bins] -= normalized_remaining[feasible_bins] # Lower remaining is better, so we subtract

    # 3. Fragmentation Penalty: Penalize bins if the remaining capacity is too small relative to the bin size.
    fragment_threshold = 0.15  # Threshold for small fragments (relative to bin capacity)
    fragment_penalty = 0.5

    fragment_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= fragment_threshold * bin_capacity)
    priorities[fragment_mask] -= fragment_penalty

    # 4. Near-Full Penalty: Discourage filling bins too close to their capacity to avoid future issues
    near_full_threshold = 0.95
    near_full_penalty = 0.3

    near_full_mask = feasible_bins & (bins_remain_cap <= bin_capacity) & ((bins_remain_cap - item) <= (1 - near_full_threshold) * bin_capacity) & (bins_remain_cap - item > 0) # Added some more conditions for stability
    priorities[near_full_mask] -= near_full_penalty

    return priorities
```
