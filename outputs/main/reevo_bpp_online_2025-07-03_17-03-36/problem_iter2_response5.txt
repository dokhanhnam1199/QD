```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Prioritize bins that can actually fit the item.
    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] += 1.0

    # 2. Remaining capacity: Prioritize bins with less remaining capacity after placing the item.
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~feasible_bins] = np.inf  # Penalize infeasible bins.

    # Use inverse of remaining capacity to prioritize bins which are almost full
    priorities[feasible_bins] += 1.0 / (1e-9 + remaining_after_fit[feasible_bins])

    # 3. Fill Ratio: Consider the fill ratio of the bin after adding the item. Avoid very sparse bins.
    fill_ratio = item / bins_remain_cap

    priorities[feasible_bins] += np.clip(fill_ratio[feasible_bins], 0, 1)

    # 4. Avoid creating very small fragments: Penalize bins where the remaining space after insertion would be very small
    very_small_fragment = (remaining_after_fit > 0) & (remaining_after_fit < 0.1)  # if remaining is < 0.1, strongly penalize. Scale as needed
    priorities[feasible_bins & very_small_fragment] -= 0.5 #Subtract small constant if creates a small fragment

    #5. Items that perfectly fit: Highest Priority
    perfect_fit = bins_remain_cap == item
    priorities[perfect_fit] += 5

    # 6. Bonus for almost full bins: Encourage filling bins close to capacity
    almost_full = (remaining_after_fit > 0) & (remaining_after_fit <= 0.2)
    priorities[feasible_bins & almost_full] += 2

    return priorities
```
