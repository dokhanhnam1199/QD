```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: High priority if the item fits.
    feasible = bins_remain_cap >= item
    priorities[feasible] += 1  # Give a base priority for fitting

    # 2. Tighter Fit: Higher priority for bins with tighter fit.
    remaining_space = bins_remain_cap - item
    remaining_space[~feasible] = np.inf  # Ignore infeasible bins

    # Give higher priority to bins where space is tight (use inverse of remaining space)
    priorities[feasible] += 1.0 / (remaining_space[feasible] + 0.0001) # avoid division by zero

    # 3. Fragmentation Avoidance: Penalize bins with excessive wasted space *after* packing.  Stronger penalty than v1.
    # Give a negative priority for bins that would result in excessive wasted space
    large_remaining_space = remaining_space > 0.5
    priorities[feasible & large_remaining_space] -= 1.0 * remaining_space[feasible & large_remaining_space]


    # 4. First-Fit Tendency: Slight boost to bins that are relatively empty in general.  Increased weight compared to v1.
    priorities += 0.2 * bins_remain_cap  # Encourage using emptier bins earlier, more aggressively.

    # 5. Best Fit Modification: Give a bonus to bins whose remaining capacity is closest to the item size.
    # This encourages a "best fit" approach.
    fit_score = np.zeros_like(bins_remain_cap, dtype=float)
    fit_score[feasible] = item / bins_remain_cap[feasible]
    priorities[feasible] += fit_score[feasible]


    return priorities
```
