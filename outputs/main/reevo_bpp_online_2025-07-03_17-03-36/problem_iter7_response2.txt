```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. Feasibility: Infeasible bins get a large negative priority.
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -1e9

    # 2. Best Fit Preference: Prioritize bins where the remaining space after placing the item is minimized.
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~feasible_bins] = bin_capacity # some large value for infeasible bins

    # Normalize remaining capacity (smaller is better, but penalize almost full)
    normalized_remaining = (bin_capacity - remaining_after_fit) / bin_capacity  # Higher means better fill

    # 3. Penalize Near-Full Bins: Avoid bins that are almost full after placing the item.
    near_full_threshold = 0.95
    near_full_penalty = 0.6
    near_full_mask = feasible_bins & ((bins_remain_cap - item) / bin_capacity >= near_full_threshold)
    priorities[near_full_mask] -= near_full_penalty

    # 4. Penalize Small Items: Avoid placing small items in almost empty bins to prevent fragmentation.
    small_item_threshold = 0.2
    empty_bin_threshold = 0.9
    small_item_penalty = 0.4
    small_item_mask = (item / bin_capacity <= small_item_threshold) & feasible_bins & (bins_remain_cap / bin_capacity >= empty_bin_threshold)
    priorities[small_item_mask] -= small_item_penalty

    # 5. Reward Near-Perfect Fit: Encourage using bins that almost perfectly fit the item.
    near_perfect_fit_threshold = 0.1
    near_perfect_fit_bonus = 0.8
    near_perfect_mask = feasible_bins & (remaining_after_fit >= 0) & (remaining_after_fit <= near_perfect_fit_threshold * bin_capacity)
    priorities[near_perfect_mask] += near_perfect_fit_bonus
    
    # 6. Fragmentation penalty, higher than before, if fragmentation occurs, penalize more
    fragment_threshold = 0.2
    fragment_penalty = 0.9
    fragment_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= fragment_threshold * bin_capacity)
    priorities[fragment_mask] -= fragment_penalty

    # 7. Moderate Fill Preference: Encourage bins to be moderately filled.
    moderate_fill_lower = 0.3
    moderate_fill_upper = 0.7
    moderate_fill_bonus = 0.5
    moderate_fill_mask = feasible_bins & (remaining_after_fit / bin_capacity >= (1 - moderate_fill_upper)) & (remaining_after_fit / bin_capacity <= (1 - moderate_fill_lower))
    priorities[moderate_fill_mask] += moderate_fill_bonus
    
    priorities += normalized_remaining # Base fill level

    return priorities
```
