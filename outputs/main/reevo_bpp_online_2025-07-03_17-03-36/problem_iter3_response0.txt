```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Assign a very low priority to bins that can't fit the item.
    #    Use a large negative number to effectively eliminate these bins.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9  # A large negative number as penalty

    # 2. Best Fit: For feasible bins, prioritize those where the remaining space
    #    after placing the item is minimized. This directly implements the best-fit heuristic.
    feasible_bins = ~infeasible_bins
    remaining_after_fit = bins_remain_cap[feasible_bins] - item

    # Assign priority based on the inverse of the remaining space (smaller space = higher priority).
    # Add a small constant to the remaining space to avoid division by zero and to slightly
    # favor bins that are closer to being full even when the remaining space is very small.
    priorities[feasible_bins] = -remaining_after_fit

    return priorities
```
