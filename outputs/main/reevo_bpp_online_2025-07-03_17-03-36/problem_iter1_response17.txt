```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item

    # Assign high priority to bins where item fits and wasted space is minimized
    fit_mask = wasted_space >= 0
    if np.any(fit_mask):
        priorities[fit_mask] = 1 / (wasted_space[fit_mask] + 1e-6)  # Avoid division by zero
    else:
        #If no bin can fit the item, use worst fit approach (least empty bin)
        priorities = bins_remain_cap - item
        priorities = -np.abs(priorities) #prioritze least overfilled
    return priorities
```
