```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item

    # Give very low priority to bins that cannot fit the item
    priorities[wasted_space < 0] = -np.inf

    # Give higher priority to bins where wasted space is minimized but not too tight (to allow future items)
    # The ideal wasted space is somewhere around item_size / 2 (can be adjusted)
    ideal_wasted_space = item / 2.0

    # A bin with a capacity which fits the item the best to ideal waste is preferred
    distance_from_ideal = np.abs(wasted_space - ideal_wasted_space)
    priorities[wasted_space >= 0] = -distance_from_ideal[wasted_space >= 0]

    # Adjust for bin usage: slightly prefer partially full bins to encourage balanced packing.
    # This adds a small bonus for using bins that aren't nearly full or nearly empty after placement.
    usage_bonus = np.where(wasted_space >= 0, np.clip(bins_remain_cap[wasted_space >= 0] * item / np.power(np.mean(bins_remain_cap), 2.0),0,1), 0)
    priorities[wasted_space >= 0] += usage_bonus

    # Even out probabilities when all possible moves are very bad
    if np.all(priorities == -np.inf):
        priorities = np.ones_like(bins_remain_cap) / len(bins_remain_cap)


    return priorities
```
