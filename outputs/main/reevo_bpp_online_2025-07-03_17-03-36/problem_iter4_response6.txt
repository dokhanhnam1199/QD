```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Assign a large negative priority to bins that can't fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9  # Large negative number

    # 2. Best Fit: Prioritize bins where the remaining capacity *after* adding the item is smallest.
    # But only for feasible bins.
    feasible_bins = ~infeasible_bins
    remaining_after_fit = bins_remain_cap[feasible_bins] - item
    priorities[feasible_bins] = -remaining_after_fit  # Smaller remaining capacity gives higher priority

    # 3. Relative Item Size: Penalize bins where the item occupies a small proportion of the bin's capacity.
    # This encourages filling bins more fully and avoids placing tiny items in large bins.
    bin_size = np.max(bins_remain_cap)  # assume all bins are same size.
    relative_item_size = item / bin_size  # item size with respect to bin size.
    priorities[feasible_bins] -= relative_item_size * 10  # Scale the penalty.

    # 4. Moderate Fill Level: Avoid bins that are *almost* full after adding the item, but also penalize very empty bins.
    # This can lead to fragmentation, as it becomes difficult to place larger items in nearly full bins.
    almost_full = (bins_remain_cap[feasible_bins] - item) < (bin_size * 0.1)
    priorities[feasible_bins][almost_full] -= 5  # Slight penalty for almost full bins.

    # Penalize bins that would be very empty after placing the item
    very_empty = (bins_remain_cap[feasible_bins] - item) > (bin_size * 0.9)
    priorities[feasible_bins][very_empty] -= 3 # Small penalty for almost empty bins
    
    # 5. Reward fill ratio closer to optimal fill
    optimal_fill = 0.75
    fill_ratio = item / bin_size
    priorities[feasible_bins] -= abs(fill_ratio - optimal_fill) * 5 # penalize deviation from optimal

    return priorities
```
