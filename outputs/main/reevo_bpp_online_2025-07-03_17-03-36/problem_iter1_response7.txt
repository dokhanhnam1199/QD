```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate wasted space if item is placed in the bin.
    wasted_space = bins_remain_cap - item
    
    # Give very low priority (negative) to bins that cannot fit the item.
    priorities[wasted_space < 0] = -np.inf
    
    # Higher priority to bins where wasted space is small, but not too small.
    # The goal is to avoid filling bins too tightly and instead aim for bins 
    # that allow for future items to be packed as well. Avoid bins that are over 95% full.
    
    # Find bins that can fit the item.
    fit_bins = wasted_space >= 0
    
    # Calculate fill ratios for bins that can fit.
    fill_ratios = np.zeros_like(bins_remain_cap, dtype=float)
    fill_ratios[fit_bins] = item / bins_remain_cap[fit_bins]

    # Give preference to bins that are filled reasonably well.
    priorities[fit_bins] = np.exp(-np.abs(fill_ratios[fit_bins] - 0.75)) # Prefer bins filled around 75%

    # Reduce the priority if the bin is almost full. A filled ratio > 0.95 incurs a heavy penalty.
    almost_full = fit_bins & (fill_ratios > 0.95)
    priorities[almost_full] *= 0.1
    
    # Give small bonus for almost-full bins to reduce fragmentation if there's no other option, but ensure it is worse than good fit if possible.
    # Note: this is usually a bad idea to prioritize since the problem is more about item size variance.
    return priorities
```
