```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: High priority for bins that can fit the item.
    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] += 1

    # 2. Remaining Capacity: Prefer bins with less remaining capacity after placing the item
    #    (but only among feasible bins).  This encourages filling bins completely.
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[remaining_after_fit < 0] = np.inf # Penalize infeasible bins

    # Normalize the remaining capacity scores
    normalized_remaining = np.where(feasible_bins, 1 - (remaining_after_fit / np.max(bins_remain_cap)), 0)

    priorities += normalized_remaining

    # 3. Avoidance of Fragmentation: Penalize bins that will leave a small unusable fragment.
    fragment_threshold = 0.1  # Define a threshold for small fragments relative to bin size

    for i in range(len(bins_remain_cap)):
        if feasible_bins[i]:
          fragment = bins_remain_cap[i] - item
          if 0 < fragment <= fragment_threshold:
              priorities[i] -= 0.5

    return priorities
```
