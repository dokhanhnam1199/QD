```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: Perfect Fit
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = np.inf

    # Rule 2: Prioritize bins that can fit the item, minimizing wasted space.
    fitting_bins = bins_remain_cap >= item
    if np.any(fitting_bins):
        space_waste = bins_remain_cap[fitting_bins] - item
        priorities[fitting_bins] = 1 / (space_waste + 1e-9)  # Adding a small value to avoid division by zero

    # Rule 3: Assign a very low priority if the item doesn't fit
    not_fitting = bins_remain_cap < item
    priorities[not_fitting] = -np.inf

    return priorities
```
