```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # Normalize item size and remaining capacities
    normalized_item = item / bin_capacity
    normalized_bins_remain_cap = bins_remain_cap / bin_capacity

    # 1. Feasibility: Infeasible bins get a very large negative priority.
    feasible_bins = normalized_bins_remain_cap >= normalized_item
    priorities[~feasible_bins] = -1e9

    # 2. Best Fit: Prefer bins where the remaining capacity after placement is minimal
    remaining_after_fit = normalized_bins_remain_cap - normalized_item
    remaining_after_fit[~feasible_bins] = 2  # Set to large value for infeasible bins
    best_fit_priority = -remaining_after_fit  # Smaller remaining is better
    priorities += best_fit_priority

    # 3. Moderate Fill: Penalize bins that are nearly full or nearly empty *before* item placement.
    nearly_full_threshold = 0.9
    nearly_empty_threshold = 0.1
    moderate_fill_penalty = 0.3

    nearly_full_bins = normalized_bins_remain_cap > nearly_full_threshold
    nearly_empty_bins = normalized_bins_remain_cap < nearly_empty_threshold

    priorities[feasible_bins & nearly_full_bins] -= moderate_fill_penalty
    priorities[feasible_bins & nearly_empty_bins] -= moderate_fill_penalty

    # 4. Fragmentation Penalty: Heavily penalize bins that will create a very small fragment.
    fragment_threshold = 0.15
    fragment_penalty = 0.8
    fragment_mask = feasible_bins & (remaining_after_fit >= 0) & (remaining_after_fit <= fragment_threshold)
    priorities[fragment_mask] -= fragment_penalty

    # 5. Reward Near-Perfect Fit: Significant bonus for near perfect fits
    near_perfect_fit_threshold = 0.05
    near_perfect_fit_bonus = 0.7
    near_perfect_mask = feasible_bins & (remaining_after_fit >= 0) & (remaining_after_fit <= near_perfect_fit_threshold)
    priorities[near_perfect_mask] += near_perfect_fit_bonus

    # 6. Small Item Penalty: Slightly discourage placing very small items into partially filled bins.
    small_item_threshold = 0.1
    small_item_penalty = 0.1
    small_item = normalized_item < small_item_threshold
    if small_item:
        partially_filled_bins = feasible_bins & (normalized_bins_remain_cap < 1)
        priorities[partially_filled_bins] -= small_item_penalty

    # 7. Edge Case Handling: Give empty bins a slight preference if no good fit exists.
    empty_bin_bonus = 0.05
    empty_bins = normalized_bins_remain_cap == 1
    if not np.any(near_perfect_mask) and np.any(feasible_bins & empty_bins):
        priorities[feasible_bins & empty_bins] += empty_bin_bonus

    # 8. Normalize Priorities: Scale priorities to a reasonable range
    max_priority = np.max(priorities[feasible_bins]) if np.any(feasible_bins) else 0
    min_priority = np.min(priorities[feasible_bins]) if np.any(feasible_bins) else 0

    if max_priority > min_priority:
        priorities[feasible_bins] = (priorities[feasible_bins] - min_priority) / (max_priority - min_priority)
    elif np.any(feasible_bins):
        priorities[feasible_bins] = 0.5  # Give all feasible bins a neutral priority if they are all the same.

    return priorities
```
