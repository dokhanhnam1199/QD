```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)
    normalized_item = item / bin_capacity

    # 1. Feasibility: Infeasible bins get a very large negative priority.
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -1e9

    # 2. Best Fit: Prefer bins where the remaining capacity after placement is minimal
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~feasible_bins] = bin_capacity * 2  # Set to large value for infeasible bins
    best_fit_priority = -remaining_after_fit / bin_capacity  # Normalize & invert: smaller remaining is better
    priorities += best_fit_priority

    # 3. Fragmentation Penalty: Heavily penalize bins that will create a very small fragment.
    fragment_threshold = 0.12  # Slightly tighter threshold
    fragment_penalty = 0.8  # Increased penalty
    fragment_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit / bin_capacity <= fragment_threshold)
    priorities[fragment_mask] -= fragment_penalty

    # 4. Reward Near-Perfect Fit: Significant bonus for near perfect fits
    near_perfect_fit_threshold = 0.08  # Increased threshold for near-perfect
    near_perfect_fit_bonus = 0.7  # Increased bonus
    near_perfect_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit / bin_capacity <= near_perfect_fit_threshold)
    priorities[near_perfect_mask] += near_perfect_fit_bonus

    # 5. Small Item Handling: Discourage small items in partially filled bins, prefer empty. Item-size-dependent bonus.
    small_item_threshold = 0.1
    small_item_penalty = 0.1
    small_item = normalized_item < small_item_threshold
    if small_item:
        partially_filled_bins = feasible_bins & (bins_remain_cap < bin_capacity) & (bins_remain_cap > item)
        empty_bins = bins_remain_cap == bin_capacity
        priorities[partially_filled_bins] -= small_item_penalty * normalized_item # Scale penalty by item size
        priorities[empty_bins] += small_item_penalty * normalized_item / 2  # Smaller bonus for empty

    # 6. Bin balancing: Try to balance the fill levels of the bins - only if not a near perfect fit. More aggressive balancing.
    bin_fill_levels = (bin_capacity - bins_remain_cap) / bin_capacity
    mean_fill_level = np.mean(bin_fill_levels)
    bin_balancing_penalty = 0.05 * np.abs(bin_fill_levels - mean_fill_level) # Increased balancing penalty
    priorities[~near_perfect_mask] -= bin_balancing_penalty[~near_perfect_mask]  # Apply only if not near perfect

    # 7. Moderate Fill Avoidance: Discourage bins that are already moderately full.
    moderate_fill_threshold_low = 0.4
    moderate_fill_threshold_high = 0.7
    moderate_fill_penalty = 0.2

    moderately_filled_bins = feasible_bins & (bin_fill_levels >= moderate_fill_threshold_low) & (bin_fill_levels <= moderate_fill_threshold_high)
    priorities[moderately_filled_bins] -= moderate_fill_penalty

    return priorities
```
