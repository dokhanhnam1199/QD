```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate wasted space if the item is placed in each bin
    wasted_space = bins_remain_cap - item

    # Assign high priority to bins where the item fits and leaves minimal wasted space
    fit_indices = wasted_space >= 0
    if np.any(fit_indices):
        priorities[fit_indices] = 1 / (wasted_space[fit_indices] + 1e-6)  # Avoid division by zero

        # Further prioritize bins with larger remaining capacity after placing the item (to handle similar wasted space values)
        priorities[fit_indices] += bins_remain_cap[fit_indices] / np.max(bins_remain_cap[fit_indices])
    else:
        # If item doesn't fit in any bin, try to fit in the bin with largest capacity
        priorities = bins_remain_cap / np.max(bins_remain_cap)
        priorities = priorities * 0.1 # very low probability of adding to the bin if wasted space is not availabe

    return priorities
```
