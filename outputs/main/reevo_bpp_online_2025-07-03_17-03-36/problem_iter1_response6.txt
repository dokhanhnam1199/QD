```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First priority: Can the item fit?
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1

    # Second priority: How much space is left after packing? Smaller is better (First Fit Decreasing inspiration).
    remaining_space = bins_remain_cap - item
    remaining_space[~can_fit] = np.inf  # Ignore bins where it doesn't fit

    # Invert remaining space, so smaller values have higher priority
    priorities[can_fit] += np.max(remaining_space[can_fit]) - remaining_space[can_fit] if np.any(can_fit) else 0
    # Third priority: Favour bins which are almost full. Try to fill them up as best as we can to avoid having bins with small items.
    almost_full = np.logical_and(bins_remain_cap > 0, bins_remain_cap < 2 * item)
    priorities[almost_full] += 0.5
    
    # Fourth priority: If no bin can fit, severely penalize adding it to any bin, by adding very small negative value.
    if not np.any(can_fit):
        priorities -= 0.01

    return priorities
```
