{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n\n    # 1. Feasibility: Infeasible bins get a large negative priority.\n    feasible_bins = bins_remain_cap >= item\n    priorities[~feasible_bins] = -1e9\n\n    # 2. Best Fit Preference\n    remaining_after_fit = bins_remain_cap - item\n    best_fit_delta = np.abs(remaining_after_fit)\n    # Adjust the best fit delta for infeasible bins\n    best_fit_delta_adj = np.copy(best_fit_delta)\n    best_fit_delta_adj[~feasible_bins] = bin_capacity * 2 # assign large penalty\n    # Normalize best fit delta and create priority (lower delta = higher priority)\n    normalized_best_fit = 1 - (best_fit_delta_adj / np.max(best_fit_delta_adj))\n    priorities += normalized_best_fit\n\n    # 3. Moderate Fill Preference (avoid near-empty and near-full bins)\n    fill_level = (bin_capacity - bins_remain_cap + item)/ bin_capacity\n    moderate_fill_bonus = np.exp(-((fill_level - 0.6)**2) / (2 * 0.2**2))  # Gaussian centered at 0.6\n    priorities += moderate_fill_bonus * feasible_bins  # only add bonus to feasible bins.\n    \n\n    # 4. Penalize Small Items (when other choices exist)\n    small_item_threshold = 0.1 * bin_capacity\n    small_item_penalty = 0.3\n    if item < small_item_threshold:\n        priorities[feasible_bins] -= small_item_penalty # Apply to all feasible bins\n\n    # 5. Fragment Penalty\n    fragment_threshold = 0.15 * bin_capacity\n    fragment_penalty = 0.5\n    fragment_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= fragment_threshold)\n    priorities[fragment_mask] -= fragment_penalty\n\n    # 6. Near-Perfect Fit Reward\n    near_perfect_fit_threshold = 0.05 * bin_capacity\n    near_perfect_fit_bonus = 0.7\n    near_perfect_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= near_perfect_fit_threshold)\n    priorities[near_perfect_mask] += near_perfect_fit_bonus\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Infeasible bins get a large negative priority.\n    feasible_bins = bins_remain_cap >= item\n    priorities[~feasible_bins] = -1e9\n\n    # 2. Remaining Capacity: Prefer bins with less remaining capacity *after* placing the item.\n    remaining_after_fit = bins_remain_cap - item\n\n    # Only consider remaining capacity for feasible bins, set infeasible remaining to large number\n    remaining_after_fit_adj = np.copy(remaining_after_fit)\n    remaining_after_fit_adj[~feasible_bins] = np.max(bins_remain_cap) + item  # some large value\n\n    # Normalize remaining capacity (smaller is better)\n    max_remaining = np.max(remaining_after_fit_adj)\n    normalized_remaining = 1 - (remaining_after_fit_adj / max_remaining)\n    priorities += normalized_remaining\n\n    # 3. Fragmentation Penalty: Penalize bins that will leave a small unusable fragment.\n    fragment_threshold = 0.2  # Define a threshold for small fragments relative to bin size\n    fragment_penalty = 0.7\n\n    max_bin_cap = np.max(bins_remain_cap)\n    fragment_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= fragment_threshold * max_bin_cap)\n    priorities[fragment_mask] -= fragment_penalty\n\n    # 4. Reward Near-Perfect Fit: Encourage using bins that almost perfectly fit the item.\n    near_perfect_fit_threshold = 0.1\n    near_perfect_fit_bonus = 0.5\n    near_perfect_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= near_perfect_fit_threshold * max_bin_cap)\n    priorities[near_perfect_mask] += near_perfect_fit_bonus\n\n    # 5. Encourage usage of emptier bins when possible, to reduce # of bins used\n    # Only apply if some bins are quite empty\n    empty_bin_threshold = 0.9\n    if np.any(bins_remain_cap >= empty_bin_threshold * max_bin_cap):\n        empty_bin_bonus = 0.2\n        empty_bin_mask = feasible_bins & (bins_remain_cap >= empty_bin_threshold * max_bin_cap)\n        priorities[empty_bin_mask] += empty_bin_bonus\n    \n    # 6. Prioritize bins with larger remaining capacity if near-full bins are available\n    near_full_threshold = 0.15\n    if np.any(bins_remain_cap <= near_full_threshold * max_bin_cap) and np.any(bins_remain_cap >= empty_bin_threshold * max_bin_cap):\n            larger_bin_bonus = 0.1 # Slightly less than empty bin bonus to avoid over-prioritization\n            larger_bin_mask = feasible_bins & (bins_remain_cap >= empty_bin_threshold * max_bin_cap)\n            priorities[larger_bin_mask] += larger_bin_bonus\n\n    return priorities\n\n[Reflection]\nFocus on remaining capacity normalization, fragmentation, near-perfect fits, and empty/full bin awareness.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}