{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n\n    # 1. Feasibility: Infeasible bins get a large negative priority.\n    feasible_bins = bins_remain_cap >= item\n    priorities[~feasible_bins] = -1e9\n\n    # 2. Best Fit Preference: Prioritize bins where the remaining space after placing the item is minimized.\n    remaining_after_fit = bins_remain_cap - item\n    remaining_after_fit[~feasible_bins] = bin_capacity # some large value for infeasible bins\n\n    # Normalize remaining capacity (smaller is better, but penalize almost full)\n    normalized_remaining = (bin_capacity - remaining_after_fit) / bin_capacity  # Higher means better fill\n\n    # 3. Penalize Near-Full Bins: Avoid bins that are almost full after placing the item.\n    near_full_threshold = 0.95\n    near_full_penalty = 0.6\n    near_full_mask = feasible_bins & ((bins_remain_cap - item) / bin_capacity >= near_full_threshold)\n    priorities[near_full_mask] -= near_full_penalty\n\n    # 4. Penalize Small Items: Avoid placing small items in almost empty bins to prevent fragmentation.\n    small_item_threshold = 0.2\n    empty_bin_threshold = 0.9\n    small_item_penalty = 0.4\n    small_item_mask = (item / bin_capacity <= small_item_threshold) & feasible_bins & (bins_remain_cap / bin_capacity >= empty_bin_threshold)\n    priorities[small_item_mask] -= small_item_penalty\n\n    # 5. Reward Near-Perfect Fit: Encourage using bins that almost perfectly fit the item.\n    near_perfect_fit_threshold = 0.1\n    near_perfect_fit_bonus = 0.8\n    near_perfect_mask = feasible_bins & (remaining_after_fit >= 0) & (remaining_after_fit <= near_perfect_fit_threshold * bin_capacity)\n    priorities[near_perfect_mask] += near_perfect_fit_bonus\n    \n    # 6. Fragmentation penalty, higher than before, if fragmentation occurs, penalize more\n    fragment_threshold = 0.2\n    fragment_penalty = 0.9\n    fragment_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= fragment_threshold * bin_capacity)\n    priorities[fragment_mask] -= fragment_penalty\n\n    # 7. Moderate Fill Preference: Encourage bins to be moderately filled.\n    moderate_fill_lower = 0.3\n    moderate_fill_upper = 0.7\n    moderate_fill_bonus = 0.5\n    moderate_fill_mask = feasible_bins & (remaining_after_fit / bin_capacity >= (1 - moderate_fill_upper)) & (remaining_after_fit / bin_capacity <= (1 - moderate_fill_lower))\n    priorities[moderate_fill_mask] += moderate_fill_bonus\n    \n    priorities += normalized_remaining # Base fill level\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Infeasible bins get a large negative priority.\n    feasible_bins = bins_remain_cap >= item\n    priorities[~feasible_bins] = -1e9\n\n    # 2. Best Fit: Prioritize bins where the remaining capacity after adding the item is minimized.\n    remaining_after_fit = bins_remain_cap - item\n\n    # Handle infeasible bins to avoid errors during normalization.\n    remaining_after_fit_adj = np.copy(remaining_after_fit)\n    remaining_after_fit_adj[~feasible_bins] = np.max(bins_remain_cap) + item\n\n    # Normalize remaining capacity (smaller is better) - Best Fit principle\n    max_remaining = np.max(remaining_after_fit_adj)\n    normalized_remaining = 1 - (remaining_after_fit_adj / max_remaining)\n    priorities += normalized_remaining\n\n    # 3. Fragmentation Penalty: Penalize bins that will leave a small unusable fragment.\n    fragment_threshold = 0.2  # Define a threshold for small fragments relative to bin size\n    fragment_penalty = 0.6\n    fragment_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= fragment_threshold * np.max(bins_remain_cap))\n    priorities[fragment_mask] -= fragment_penalty\n\n    # 4. Reward Near-Perfect Fit: Encourage using bins that almost perfectly fit the item.\n    near_perfect_fit_threshold = 0.1\n    near_perfect_fit_bonus = 0.4\n    near_perfect_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= near_perfect_fit_threshold * np.max(bins_remain_cap))\n    priorities[near_perfect_mask] += near_perfect_fit_bonus\n\n    # 5. Encourage usage of emptier bins when possible, to reduce # of bins used\n    empty_bin_threshold = 0.8\n    if np.any(bins_remain_cap >= empty_bin_threshold * np.max(bins_remain_cap)):\n        empty_bin_bonus = 0.3\n        empty_bin_mask = feasible_bins & (bins_remain_cap >= empty_bin_threshold * np.max(bins_remain_cap))\n        priorities[empty_bin_mask] += empty_bin_bonus\n\n    return priorities\n\n[Reflection]\nThe better code normalizes `remaining_after_fit` more robustly and prioritizes emptier bins, improving bin utilization.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}