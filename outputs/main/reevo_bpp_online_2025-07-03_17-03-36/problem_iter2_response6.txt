```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate wasted space if item is placed in the bin.
    wasted_space = bins_remain_cap - item
    
    # Give very low priority (negative infinity) to bins that cannot fit the item.
    priorities[wasted_space < 0] = -np.inf
    
    # Find bins that can fit the item.
    can_fit = wasted_space >= 0
    
    # Calculate fill ratios for bins that can fit.
    fill_ratios = np.zeros_like(bins_remain_cap, dtype=float)
    fill_ratios[can_fit] = item / bins_remain_cap[can_fit]

    # Give preference to bins that are filled reasonably well (around 75%).
    priorities[can_fit] = np.exp(-np.abs(fill_ratios[can_fit] - 0.75))

    # Heavily reduce the priority if the bin is almost full (filled ratio > 0.95).
    almost_full = can_fit & (fill_ratios > 0.95)
    priorities[almost_full] *= 0.01 # Even stronger penalty than before
    
    return priorities
```
