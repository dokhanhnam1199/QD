{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Rule 1: Perfect Fit - Highest Priority\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    priorities[perfect_fit] = np.inf\n\n    # Rule 2: Prioritize bins that can fit the item, minimizing wasted space.\n    fitting_bins = bins_remain_cap >= item\n    if np.any(fitting_bins):\n        space_waste = bins_remain_cap[fitting_bins] - item\n        # Prioritize smaller waste, but also consider the remaining capacity\n        priorities[fitting_bins] = 1 / (space_waste + 1e-9) # Adding a small value to avoid division by zero\n        # Scale priority by how full the bin would be\n        fill_ratio = item / bins_remain_cap[fitting_bins]\n        priorities[fitting_bins] *= (1 - np.abs(fill_ratio - 0.75)) # Prefer bins closer to 75% full after packing.\n        \n        # Heavily penalize almost full bins\n        almost_full = (fill_ratio > 0.95) & fitting_bins\n        priorities[almost_full] *= 0.01 # Reduce the priority significantly if almost full\n\n    # Rule 3: Assign a very low priority if the item doesn't fit\n    not_fitting = bins_remain_cap < item\n    priorities[not_fitting] = -np.inf\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Assign a large negative priority to bins that can't fit the item\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9  # Large negative number\n\n    # 2. Best Fit: Prioritize bins where the remaining capacity *after* adding the item is smallest.\n    # But only for feasible bins.\n    feasible_bins = ~infeasible_bins\n    remaining_after_fit = bins_remain_cap[feasible_bins] - item\n    priorities[feasible_bins] = -remaining_after_fit  # Smaller remaining capacity gives higher priority\n\n    # 3. Relative Item Size: Penalize bins where the item occupies a small proportion of the bin's capacity.\n    # This encourages filling bins more fully and avoids placing tiny items in large bins.\n    bin_size = np.max(bins_remain_cap)  # assume all bins are same size.\n    relative_item_size = item / bin_size  # item size with respect to bin size.\n    priorities[feasible_bins] -= relative_item_size * 10  # Scale the penalty.\n\n    # 4. Moderate Fill Level: Avoid bins that are *almost* full after adding the item.\n    # This can lead to fragmentation, as it becomes difficult to place larger items in nearly full bins.\n    almost_full = (bins_remain_cap[feasible_bins] - item) < (bin_size * 0.1)\n    priorities[feasible_bins][almost_full] -= 5  # Slight penalty for almost full bins.\n\n    #5. Prefer bins with higher fill ratio before adding the item, but only if item fits\n    fill_ratio_before = (bin_size - bins_remain_cap[feasible_bins]) / bin_size\n    priorities[feasible_bins] += fill_ratio_before * 2\n\n    return priorities\n\n[Reflection]\nFocus on feasibility, best fit, relative item size, fragmentation avoidance, and initial fill level.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}