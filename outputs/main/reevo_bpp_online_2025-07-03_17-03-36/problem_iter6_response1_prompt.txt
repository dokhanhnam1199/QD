{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Assign a large negative priority to bins that can't fit the item\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9  # Large penalty for infeasibility\n\n    # 2. Best Fit: Prioritize bins with the smallest remaining capacity *after* adding the item\n    feasible_bins = ~infeasible_bins\n    remaining_after_fit = bins_remain_cap[feasible_bins] - item\n\n    # Prioritize smaller waste, but avoid bins that are too full (waste close to zero)\n    # Aim for moderate fill levels to accommodate future items\n\n    priorities[feasible_bins] = -remaining_after_fit  # Primary Best Fit scoring\n\n    # Scale the remaining capacity and subtract it (normalize to 0-1)\n    if np.any(feasible_bins):  # only perform normalization if there are feasible bins\n        max_cap = np.max(bins_remain_cap[feasible_bins])\n        if max_cap > 0:\n            priorities[feasible_bins] -= (bins_remain_cap[feasible_bins] / max_cap) * 0.001\n        \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility: Infeasible bins get a large negative priority.\n    feasible_bins = bins_remain_cap >= item\n    priorities[~feasible_bins] = -1e9\n\n    # 2. Remaining Capacity: Prefer bins with less remaining capacity *after* placing the item.\n    remaining_after_fit = bins_remain_cap - item\n    \n    # Only consider remaining capacity for feasible bins, set infeasible remaining to large number\n    remaining_after_fit_adj = np.copy(remaining_after_fit)\n    remaining_after_fit_adj[~feasible_bins] = np.max(bins_remain_cap) + item # some large value\n\n    # Normalize remaining capacity (smaller is better)\n    max_remaining = np.max(remaining_after_fit_adj)\n    normalized_remaining = 1 - (remaining_after_fit_adj / max_remaining)\n    priorities += normalized_remaining\n\n    # 3. Fragmentation Penalty: Penalize bins that will leave a small unusable fragment.\n    fragment_threshold = 0.2  # Define a threshold for small fragments relative to bin size\n    fragment_penalty = 0.7\n\n    fragment_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= fragment_threshold * np.max(bins_remain_cap))\n    priorities[fragment_mask] -= fragment_penalty\n\n    # 4. Reward Near-Perfect Fit: Encourage using bins that almost perfectly fit the item.\n    near_perfect_fit_threshold = 0.1\n    near_perfect_fit_bonus = 0.5\n    near_perfect_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= near_perfect_fit_threshold * np.max(bins_remain_cap))\n    priorities[near_perfect_mask] += near_perfect_fit_bonus\n\n    # 5. Encourage usage of emptier bins when possible, to reduce # of bins used\n    # Only apply if some bins are quite empty\n    empty_bin_threshold = 0.9\n    if np.any(bins_remain_cap >= empty_bin_threshold * np.max(bins_remain_cap)):\n        empty_bin_bonus = 0.2\n        empty_bin_mask = feasible_bins & (bins_remain_cap >= empty_bin_threshold * np.max(bins_remain_cap))\n        priorities[empty_bin_mask] += empty_bin_bonus\n\n    return priorities\n\n[Reflection]\nNormalization, fragmentation/near-perfect fit considerations, and encouraging empty bin usage improve performance.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}