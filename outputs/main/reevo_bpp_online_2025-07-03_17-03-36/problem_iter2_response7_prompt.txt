{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Rule 1: If the item fits perfectly, give it the highest priority.\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    priorities[perfect_fit] = np.inf\n\n    # Rule 2: Prioritize bins where the remaining capacity is greater than the item size.\n    # This is essential, as it avoids any exceptions later if a bin is selected when it doesnt even fit\n    does_not_fit = bins_remain_cap < item\n    priorities[does_not_fit] = -np.inf\n    \n    # Rule 3: Next-fit modification: Give some priority to bins with small space.\n\n    small_space = (bins_remain_cap > item) & (bins_remain_cap <= 2 * item) # space between item and 2* item\n    priorities[small_space] = 2 / (bins_remain_cap[small_space] - item + 0.000001) # small differences means the bin is better.  Plus a small constant.\n\n    # Rule 4: Prioritize bins with remaining capacity close to the item size.\n    # This attempts to pack bins as tightly as possible, reducing wasted space.\n\n    remaining_space = bins_remain_cap - item\n    #remaining_space[remaining_space < 0 ] = np.inf  # make it very low priority to use bins that cant fit\n\n    fitting_bins = bins_remain_cap > item\n    if np.any(fitting_bins):\n\n        priorities[fitting_bins] =  (bins_remain_cap[fitting_bins] - item) / np.max(bins_remain_cap) * -1 # prioritize by the smalles remaining space.\n        priorities[fitting_bins] = 1 / (1 + np.exp(priorities[fitting_bins] * 10)) # turn it into sigmoid, higher values\n\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            # Prioritize bins that can fit the item\n            space_waste = cap - item\n            # Minimize space waste (First Fit Decreasing heuristic inspired)\n            priorities[i] = 1 / (space_waste + 0.0001)  # Adding a small value to avoid division by zero\n        else:\n            # Assign a very low priority if the item doesn't fit\n            priorities[i] = -1e9\n\n    return priorities\n\n[Reflection]\nThe better code simplifies prioritization to minimize wasted space, avoiding complex, conflicting rules present in the worse code.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}