```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Assign 0 priority to bins that can't fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # 2. Best Fit: Prioritize bins with the smallest remaining capacity *after* adding the item
    #    This encourages filling bins tightly.  But, only consider bins that *can* fit the item
    
    feasible_bins = ~infeasible_bins
    remaining_after_fit = bins_remain_cap[feasible_bins] - item
    priorities[feasible_bins] = -remaining_after_fit

    # 3. Tie-breaker: Slightly prioritize bins with higher initial capacity.
    #    This can help avoid fragmenting bins too much, as larger bins may be better for future items.
    #    The effect should be small relative to best-fit. We do this by subtracting from -remaining_after_fit a scaled value.
    
    priorities[feasible_bins] -= bins_remain_cap[feasible_bins] / np.max(bins_remain_cap) / 1000.0

    # 4.  Use the capacity to get a proportion.

    #Return final priorities array
    return priorities
```
