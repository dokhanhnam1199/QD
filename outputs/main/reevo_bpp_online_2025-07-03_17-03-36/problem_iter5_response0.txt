```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Infeasible bins get a large negative priority.
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -1e9

    # 2. Best Fit: Prioritize bins where the remaining capacity after adding the item is minimized.
    remaining_after_fit = bins_remain_cap - item
    
    # Handle infeasible bins to avoid errors during normalization.
    remaining_after_fit_adj = np.copy(remaining_after_fit)
    remaining_after_fit_adj[~feasible_bins] = np.max(bins_remain_cap) + item

    # Normalize remaining capacity (smaller is better) - Best Fit principle
    max_remaining = np.max(remaining_after_fit_adj)
    normalized_remaining = 1 - (remaining_after_fit_adj / max_remaining)
    priorities += normalized_remaining

    # 3. Penalize Small Relative Item Sizes:
    # If the item is small relative to the bin capacity, slightly penalize its usage.
    item_size_threshold = 0.1 # item must be at least 10% of largest bin
    if item <= item_size_threshold * np.max(bins_remain_cap):
      priorities[feasible_bins] -= 0.1  # Small penalty

    # 4. Penalize Near-Full Bins:
    # Avoid filling bins that are already almost full. This encourages using emptier bins first.
    near_full_threshold = 0.9
    near_full_penalty = 0.2
    near_full_bins = feasible_bins & (bins_remain_cap <= near_full_threshold * np.max(bins_remain_cap)) & (bins_remain_cap > item) # already quite full
    priorities[near_full_bins] -= near_full_penalty

    return priorities
```
