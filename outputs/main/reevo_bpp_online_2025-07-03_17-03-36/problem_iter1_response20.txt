```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Large enough but with smallest waste
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        waste = bins_remain_cap[valid_bins] - item
        min_waste = np.min(waste)
        priorities[valid_bins] = 1.0 / (waste + 1e-6)  # Prioritize less waste
        priorities[valid_bins & (waste == min_waste)] = 10.0 # boost for absolute best fit

    
    # Incentivize filling up bins even when waste is larger.
    # This is helpful when items are small compare to bins.

    ratios = item / bins_remain_cap

    priorities += (1-np.clip(ratios, 0.0, 1.0)) * 0.1

    return priorities
```
