```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item

    # Rule 1: Infeasible bins get negative infinity priority
    priorities[wasted_space < 0] = -np.inf

    # Rule 2: Prioritize bins that can fit the item, with a preference for less wasted space.
    # We use an exponential function to give a strong preference to bins with small wasted space.
    # An ideal wasted space exists to avoid bins getting too full too fast.
    ideal_wasted_space = item / 2.0
    distance_from_ideal = np.abs(wasted_space - ideal_wasted_space)
    
    # Apply a score based on the distance from the ideal wasted space. Smaller distance is better.
    priorities[wasted_space >= 0] = -distance_from_ideal[wasted_space >= 0]

    # Rule 3: Encourage balanced bin usage
    # Give a bonus to bins that are neither too full nor too empty after placing the item.
    # The bonus is proportional to the product of the remaining capacity and the item size.
    # Normalize by the mean of bin capacities to scale appropriately
    usage_bonus = np.where(wasted_space >= 0, np.clip(bins_remain_cap[wasted_space >= 0] * item / np.power(np.mean(bins_remain_cap), 2.0), 0, 1), 0) # Ensure result is within reasonable bounds [0,1]
    priorities[wasted_space >= 0] += usage_bonus

    # Rule 4: Even out probabilities when all possible moves are very bad.
    # If no bin can fit the item (all priorities are -inf), distribute probabilities evenly.
    if np.all(priorities == -np.inf):
        priorities = np.ones_like(bins_remain_cap) / len(bins_remain_cap)

    return priorities
```
