```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = np.max(bins_remain_cap)

    # 1. Feasibility: Assign a large negative priority to bins that can't fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9

    # 2. Best Fit: Prioritize bins where the remaining capacity *after* adding the item is smallest.
    feasible_bins = ~infeasible_bins
    remaining_after_fit = bins_remain_cap[feasible_bins] - item
    priorities[feasible_bins] = -remaining_after_fit

    # 3. Relative Item Size: Penalize bins where the item occupies a small proportion of the bin's capacity.
    relative_item_size = item / bin_size
    priorities[feasible_bins] -= relative_item_size * 10

    # 4. Moderate Fill Level: Avoid bins that are *almost* full after adding the item.
    almost_full = (bins_remain_cap[feasible_bins] - item) < (bin_size * 0.1)
    priorities[feasible_bins][almost_full] -= 5

    # 5. Encourage filling bins that are already somewhat full. More aggressively than before.
    already_full = bins_remain_cap[feasible_bins] < (bin_size * 0.9)
    priorities[feasible_bins][already_full] += (bin_size - bins_remain_cap[feasible_bins][already_full]) / bin_size * 5  # Increased bonus

    # 6. Perfect Fit Bonus
    perfect_fit = np.isclose(remaining_after_fit, 0)
    priorities[feasible_bins][perfect_fit] += 10 # Significant bonus for perfect fit.


    return priorities
```
