```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Infeasible bins get a very low priority.
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -1e9

    # 2. Best Fit: Prioritize bins with the least remaining capacity *after* placing the item.
    remaining_after_fit = bins_remain_cap - item

    # Only consider remaining capacity for feasible bins, set infeasible remaining to large number
    remaining_after_fit_adj = np.copy(remaining_after_fit)
    remaining_after_fit_adj[~feasible_bins] = np.max(bins_remain_cap) + item # some large value

    # Normalize remaining capacity (smaller is better) within the feasible bins
    min_remaining = np.min(remaining_after_fit_adj[feasible_bins]) if np.any(feasible_bins) else 0
    max_remaining = np.max(remaining_after_fit_adj) if np.any(feasible_bins) else 1

    if max_remaining > min_remaining:
        normalized_remaining = 1 - ((remaining_after_fit_adj - min_remaining) / (max_remaining - min_remaining))
    else:
        normalized_remaining = np.ones_like(remaining_after_fit_adj) #All are the same.


    priorities += normalized_remaining

    # 3. Penalize Small Relative Item Sizes: If the item is very small compared to bin size, deprioritize
    relative_size = item / np.max(bins_remain_cap)
    small_item_threshold = 0.1 #tune
    small_item_penalty = 0.3 #tune

    if relative_size < small_item_threshold:
       priorities[feasible_bins] -= small_item_penalty

    # 4. Penalize Near-Full Bins: Deprioritize bins that are nearly full *before* placing the item to avoid creating almost-full bins.
    near_full_threshold = 0.9 #tune
    near_full_penalty = 0.5 #tune

    near_full_bins = bins_remain_cap >=0 #temp
    near_full_bins[feasible_bins] = bins_remain_cap[feasible_bins] >= (near_full_threshold * np.max(bins_remain_cap))
    priorities[near_full_bins] -= near_full_penalty

    return priorities
```
