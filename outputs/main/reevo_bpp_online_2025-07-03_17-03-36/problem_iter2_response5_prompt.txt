{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Calculate remaining capacity after adding the item\n    remaining_capacities = bins_remain_cap - item\n\n    # Prioritize bins that can accommodate the item\n    eligible_bins = remaining_capacities >= 0\n    priorities[eligible_bins] = bins_remain_cap[eligible_bins] - item  # Favor bins with smaller resulting waste\n    # Penalize bins that cannot accommodate the item heavily\n    priorities[~eligible_bins] = -1e9 # A very low value\n\n    # Further refine prioritization among eligible bins\n    # Give higher priority to bins with smaller remaining capacity *after* packing the item\n    priorities[eligible_bins] = 1.0 / (1e-6 + remaining_capacities[eligible_bins]) #avoid division by zero. Smaller cap -> High priority\n\n    # Boost bins that are nearly full after placing the item\n    nearly_full = (remaining_capacities >= 0) & (remaining_capacities <= 0.1) #thresholds can be adjusted\n    priorities[nearly_full] += 10 # Increased boost can prevent unnecessary new bins\n\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Prioritize bins that can actually fit the item.\n    feasible_bins = bins_remain_cap >= item\n    priorities[feasible_bins] += 1.0\n\n    # 2. Remaining capacity: Prioritize bins with less remaining capacity after placing the item.\n    remaining_after_fit = bins_remain_cap - item\n    remaining_after_fit[~feasible_bins] = np.inf  # Penalize infeasible bins.\n\n    # Use inverse of remaining capacity to prioritize bins which are almost full\n    priorities[feasible_bins] += 1.0 / (1e-9 + remaining_after_fit[feasible_bins])\n\n    # 3. Fill Ratio: Consider the fill ratio of the bin after adding the item. Avoid very sparse bins.\n    fill_ratio = item / bins_remain_cap\n\n    priorities[feasible_bins] += np.clip(fill_ratio[feasible_bins], 0, 1)\n\n    # 4. Avoid creating very small fragments: Penalize bins where the remaining space after insertion would be very small\n    very_small_fragment = remaining_after_fit < 0.1  # if remaining is < 0.1, strongly penalize. Scale as needed\n    priorities[feasible_bins & very_small_fragment] -= 0.5 #Subtract small constant if creates a small fragment\n\n    #5. Items that perfectly fit: Highest Priority\n    perfect_fit = bins_remain_cap == item\n    priorities[perfect_fit] += 5\n\n    return priorities\n\n[Reflection]\nPrioritize feasibility, fill ratio, perfect fits, and avoid tiny fragments. Refine with inverse remaining capacity.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}