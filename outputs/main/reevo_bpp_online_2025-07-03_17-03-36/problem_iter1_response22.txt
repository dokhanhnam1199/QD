```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # First Fit Decreasing heuristic: Give preference to bins that can accommodate the item
    # with minimal wasted space
    
    # Give very low priority to bins that cannot fit the item
    priorities[bins_remain_cap < item] = -np.inf
    
    # Prioritize bins that fit the item, with preference for bins with less remaining space
    # after the item is added (i.e. a "more full" bin is better)
    
    remaining_space = bins_remain_cap - item
    
    # Prioritize by inverse of remaining space, so smaller remaining space = higher priority
    priorities[bins_remain_cap >= item] = 1.0 / (remaining_space[bins_remain_cap >= item] + 0.00001) # add small number to avoid division by zero errors
    
    #Bonus: Give a tiny additional boost to bins that are currently empty (to encourage opening new bins less)
    priorities[bins_remain_cap == 1.0] += 0.0001

    return priorities
```
