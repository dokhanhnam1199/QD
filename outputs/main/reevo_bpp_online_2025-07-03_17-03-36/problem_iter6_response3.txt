```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Infeasible bins get a large negative priority.
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -1e9

    # 2. Best Fit: Prioritize bins where the remaining capacity after adding the item is minimized.
    remaining_after_fit = bins_remain_cap - item

    # Handle infeasible bins to avoid errors during normalization.
    remaining_after_fit_adj = np.copy(remaining_after_fit)
    remaining_after_fit_adj[~feasible_bins] = np.max(bins_remain_cap) + item

    # Normalize remaining capacity (smaller is better) - Best Fit principle
    max_remaining = np.max(remaining_after_fit_adj)
    normalized_remaining = 1 - (remaining_after_fit_adj / max_remaining)
    priorities += normalized_remaining

    # 3. Fragmentation Penalty: Penalize bins that will leave a small unusable fragment.
    fragment_threshold = 0.2  # Define a threshold for small fragments relative to bin size
    fragment_penalty = 0.6
    fragment_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= fragment_threshold * np.max(bins_remain_cap))
    priorities[fragment_mask] -= fragment_penalty

    # 4. Reward Near-Perfect Fit: Encourage using bins that almost perfectly fit the item.
    near_perfect_fit_threshold = 0.1
    near_perfect_fit_bonus = 0.4
    near_perfect_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= near_perfect_fit_threshold * np.max(bins_remain_cap))
    priorities[near_perfect_mask] += near_perfect_fit_bonus

    # 5. Encourage usage of emptier bins when possible, to reduce # of bins used
    empty_bin_threshold = 0.8
    if np.any(bins_remain_cap >= empty_bin_threshold * np.max(bins_remain_cap)):
        empty_bin_bonus = 0.3
        empty_bin_mask = feasible_bins & (bins_remain_cap >= empty_bin_threshold * np.max(bins_remain_cap))
        priorities[empty_bin_mask] += empty_bin_bonus

    return priorities
```
