```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_bin_cap = np.max(bins_remain_cap)

    # 1. Feasibility: Infeasible bins get a large negative priority.
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -1e9

    # 2. Normalized Remaining Capacity: Prioritize based on remaining capacity *after* placing the item.
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit_adj = np.copy(remaining_after_fit)
    remaining_after_fit_adj[~feasible_bins] = max_bin_cap + item  # Large value for infeasible bins

    normalized_remaining = 1 - (remaining_after_fit_adj / max_bin_cap)
    priorities += normalized_remaining

    # 3. Fragmentation Penalty: Discourage bins that will result in small, unusable fragments.
    fragment_threshold = 0.2
    fragment_penalty = 0.8
    fragment_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= fragment_threshold * max_bin_cap)
    priorities[fragment_mask] -= fragment_penalty

    # 4. Reward Near-Perfect Fit: Encourage bins that provide a near-perfect fit for the item.
    near_perfect_fit_threshold = 0.1
    near_perfect_fit_bonus = 0.6
    near_perfect_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= near_perfect_fit_threshold * max_bin_cap)
    priorities[near_perfect_mask] += near_perfect_fit_bonus

    # 5. Encourage usage of emptier bins when possible, but only if some bins are actually empty
    empty_bin_threshold = 0.9
    if np.any(bins_remain_cap >= empty_bin_threshold * max_bin_cap):
        empty_bin_bonus = 0.3
        empty_bin_mask = feasible_bins & (bins_remain_cap >= empty_bin_threshold * max_bin_cap)
        priorities[empty_bin_mask] += empty_bin_bonus

    # 6. Prioritize bins with larger remaining capacity if near-full bins exist and some bins have substantial space
    near_full_threshold = 0.2 # Increased threshold
    if np.any(bins_remain_cap <= near_full_threshold * max_bin_cap) and np.any(bins_remain_cap >= empty_bin_threshold * max_bin_cap):
        larger_bin_bonus = 0.15  # Slightly increased bonus
        larger_bin_mask = feasible_bins & (bins_remain_cap >= empty_bin_threshold * max_bin_cap)
        priorities[larger_bin_mask] += larger_bin_bonus
    
    # 7. Moderate Fill Preference Adjustment: Slightly prioritize moderate fill to further balance bin usage
    moderate_fill_lower = 0.3
    moderate_fill_upper = 0.7
    moderate_fill_bonus = 0.2 # Reduced compared to v0
    moderate_fill_mask = feasible_bins & (remaining_after_fit / max_bin_cap >= (1 - moderate_fill_upper)) & (remaining_after_fit / max_bin_cap <= (1 - moderate_fill_lower))
    priorities[moderate_fill_mask] += moderate_fill_bonus

    return priorities
```
