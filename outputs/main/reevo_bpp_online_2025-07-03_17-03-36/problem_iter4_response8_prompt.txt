{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility: High priority for bins that can fit the item.\n    feasible_bins = bins_remain_cap >= item\n    priorities[feasible_bins] += 1\n\n    # 2. Remaining Capacity: Prefer bins with less remaining capacity after placing the item\n    remaining_after_fit = bins_remain_cap - item\n    remaining_after_fit[remaining_after_fit < 0] = np.inf  # Penalize infeasible bins\n\n    # Normalize the remaining capacity scores for feasible bins only\n    max_cap = np.max(bins_remain_cap)\n    normalized_remaining = np.zeros_like(bins_remain_cap, dtype=float)\n    normalized_remaining[feasible_bins] = 1 - (remaining_after_fit[feasible_bins] / max_cap)\n    priorities += normalized_remaining\n\n    # 3. Avoidance of Fragmentation: Penalize bins that will leave a small unusable fragment.\n    fragment_threshold = 0.1  # Define a threshold for small fragments relative to bin size\n    fragment_penalty = 0.5\n\n    fragment_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= fragment_threshold * max_cap)\n    priorities[fragment_mask] -= fragment_penalty\n\n\n    # 4. Bonus for near perfect fit\n    near_perfect_fit_threshold = 0.05\n    near_perfect_fit_bonus = 0.3\n    near_perfect_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= near_perfect_fit_threshold * max_cap)\n    priorities[near_perfect_mask] += near_perfect_fit_bonus\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    fit_mask = bins_remain_cap >= item\n    \n    if np.any(fit_mask):\n        priorities[fit_mask] = 1 / (bins_remain_cap[fit_mask] - item + 1e-9)\n    \n    priorities[~fit_mask] = -1e9\n    \n\n    return priorities\n\n[Reflection]\nThe better code uses a simpler, more direct, and numerically stable priority function focusing on best fit.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}