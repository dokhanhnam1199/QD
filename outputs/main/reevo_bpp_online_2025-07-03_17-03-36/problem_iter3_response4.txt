```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Assign a very large negative priority to bins that can't fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -1e9  # Large penalty for infeasibility

    # 2. Best Fit:  Prioritize bins with smallest *waste* AFTER adding item.
    feasible_bins = ~infeasible_bins
    waste = bins_remain_cap[feasible_bins] - item
    priorities[feasible_bins] = -waste #Lower waste is prefered

    # 3. Small Fragmentation Encouragement: Penalize bins with small original capacity
    # Avoids scattering items across almost empty bins. Scale capacity to [0,1] range.

    priorities[feasible_bins] -= bins_remain_cap[feasible_bins] / np.max(bins_remain_cap) / 1000

    return priorities
```
