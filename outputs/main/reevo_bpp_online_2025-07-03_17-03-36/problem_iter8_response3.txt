```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Infeasible bins get the lowest priority.
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf

    # 2. Best Fit: Maximize remaining capacity after placing the item (minimize negative remaining capacity).
    remaining_after_fit = bins_remain_cap - item
    priorities[feasible_bins] = -remaining_after_fit[feasible_bins]  # Smaller remaining capacity is better

    # 3. Fragmentation Penalty: Penalize creating small fragments.
    fragment_threshold = 0.2 * np.max(bins_remain_cap)
    fragment_penalty = 0.7
    fragment_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= fragment_threshold)
    priorities[fragment_mask] -= fragment_penalty

    return priorities
```
