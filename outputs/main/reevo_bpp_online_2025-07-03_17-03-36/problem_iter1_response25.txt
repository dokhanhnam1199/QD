```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First, find bins that can actually fit the item
    feasible_bins = bins_remain_cap >= item

    # If no bin can fit the item, assign a low priority to all bins (to signal a new bin is needed). A negative value
    # should be enough.
    if not np.any(feasible_bins):
      return np.full_like(bins_remain_cap, -1.0)

    # For feasible bins, calculate a score based on remaining capacity
    for i in range(len(bins_remain_cap)):
        if feasible_bins[i]:
            remaining_after_fit = bins_remain_cap[i] - item
            
            # A: Prioritize bins that result in a good fill ratio
            fill_ratio = item / bins_remain_cap[i]
            priorities[i] = fill_ratio

            # B: Add bonus for near-full bins after placement. Prevents fragmentation.
            if remaining_after_fit > 0:
              near_full_bonus = np.exp(-10*remaining_after_fit / bins_remain_cap[i]) #Sharp decrease.  Higher = nearer to full
              priorities[i] += near_full_bonus
            
            # C: Slight penalty for excessive waste.  Encourages closer fits
            if remaining_after_fit > item/2:
              waste_penalty = 0.1 * remaining_after_fit/bins_remain_cap[i]
              priorities[i] -= waste_penalty
        else:
            # Assign very low priority to infeasible bins
            priorities[i] = -1e9 # Arbitrarily low number

    return priorities
```
