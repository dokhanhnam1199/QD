```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give a high priority to bins that can accommodate the item
    can_accommodate = bins_remain_cap >= item
    priorities[can_accommodate] += 1  # Base priority for being able to fit

    # Prioritize bins where the remaining capacity after adding the item is small but non-negative.
    remaining_after_fit = bins_remain_cap - item
    
    valid_remaining = remaining_after_fit[can_accommodate]

    if valid_remaining.size > 0:
      normalized_remaining = 1 / (valid_remaining + 1e-6)  # Adding small epsilon to avoid division by zero. Higher priority if remaining is small.
      priorities[can_accommodate] += normalized_remaining
    
    # Give a lower priority to almost full bins to avoid creating bins with tiny wasted space if possible.
    almost_full = (bins_remain_cap < item + 0.1) & (bins_remain_cap >= item) # small value to consider the precision
    priorities[almost_full] -= 0.5 # discourage if almost full, yet accommodates.
    
    return priorities
```
