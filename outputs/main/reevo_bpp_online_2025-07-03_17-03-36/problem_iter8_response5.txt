```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. Feasibility: Infeasible bins get a very large negative priority.
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -1e9

    # 2. Best Fit: Prioritize bins where the item fits best (smallest remaining space).
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit_adj = np.copy(remaining_after_fit)
    remaining_after_fit_adj[~feasible_bins] = bin_capacity + item

    # Normalize remaining capacity (smaller is better)
    normalized_remaining = 1 - (remaining_after_fit_adj / bin_capacity)
    priorities += normalized_remaining

    # 3. Moderate Fill: Penalize bins that are almost full or almost empty *after* placing the item.
    almost_full_threshold = 0.1 * bin_capacity
    almost_empty_threshold = 0.9 * bin_capacity

    almost_full_mask = feasible_bins & (remaining_after_fit <= almost_full_threshold) & (remaining_after_fit >= 0)
    almost_empty_mask = feasible_bins & (remaining_after_fit >= almost_empty_threshold)

    # Penalize almost full slightly more than almost empty
    priorities[almost_full_mask] -= 0.6
    priorities[almost_empty_mask] -= 0.3

    # 4. Adaptive Item Size Penalty: Penalize placing items based on their relative size
    item_ratio = item / bin_capacity
    if item_ratio > 0.5:
        priorities[feasible_bins] -= 0.4 * item_ratio  # Larger items get a higher penalty
    elif item_ratio > 0.2:
        priorities[feasible_bins] -= 0.2 * item_ratio # Moderate penalty

    # 5. Reward Near-Perfect Fit: Significant bonus for bins that have a near-perfect fit
    near_perfect_fit_threshold = 0.1 * bin_capacity
    near_perfect_fit_bonus = 0.7
    near_perfect_mask = feasible_bins & (remaining_after_fit >= 0) & (remaining_after_fit <= near_perfect_fit_threshold)
    priorities[near_perfect_mask] += near_perfect_fit_bonus

    # 6. Fragmentation Penalty: Penalize creating very small fragments.
    fragment_threshold = 0.15 * bin_capacity
    fragment_penalty = 0.5
    fragment_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= fragment_threshold)
    priorities[fragment_mask] -= fragment_penalty

    return priorities
```
