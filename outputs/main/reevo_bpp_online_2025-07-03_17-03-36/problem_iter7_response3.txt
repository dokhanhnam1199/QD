```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)
    # 1. Feasibility: Infeasible bins get a very negative priority.
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -1e9

    # 2. Best Fit: Prioritize bins with the least remaining capacity after adding the item.
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~feasible_bins] = bin_capacity * 2 # set to high value if infeasible

    # Normalize remaining capacity, smaller is better.
    normalized_remaining = 1 - (remaining_after_fit / bin_capacity)
    priorities += normalized_remaining

    # 3. Moderate Fill Level: Penalize near-empty and near-full bins.
    fill_level_after = (bin_capacity - remaining_after_fit) / bin_capacity
    near_empty_penalty = np.exp(-((fill_level_after - 0.1) ** 2) / 0.02) # Penalize fill near 0.1
    near_full_penalty = np.exp(-((fill_level_after - 0.9) ** 2) / 0.02) # Penalize fill near 0.9

    priorities -= (near_empty_penalty + near_full_penalty) * 0.3

    # 4. Fragmentation penalty: Penalize leaving small fragments, but less severely.
    fragment_threshold = 0.15 # Slightly increased threshold
    fragment_penalty = 0.2
    fragment_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= fragment_threshold * bin_capacity)
    priorities[fragment_mask] -= fragment_penalty

    # 5. Near perfect fit bonus: Increase the bonus for a near-perfect fit.
    near_perfect_fit_threshold = 0.05
    near_perfect_fit_bonus = 0.7
    near_perfect_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= near_perfect_fit_threshold * bin_capacity)
    priorities[near_perfect_mask] += near_perfect_fit_bonus

    # 6. Penalize Small Items (discourage putting small items in almost empty bins)
    small_item_threshold = 0.1
    small_item_penalty = 0.1
    small_item_mask = (item <= small_item_threshold * bin_capacity) & (bins_remain_cap >= 0.9 * bin_capacity) & feasible_bins
    priorities[small_item_mask] -= small_item_penalty

    return priorities
```
