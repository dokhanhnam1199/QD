```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give high priority to bins that can fit the item snugly
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask]

    # Give a penalty to bins that cannot fit (but not a total zero). This makes the bins that can fit to stand out.
    no_fit_mask = bins_remain_cap < item
    priorities[no_fit_mask] = -item / bins_remain_cap[no_fit_mask]
    # Add a small constant to bins that can fit to encourage their use
    priorities[fit_mask] += 0.1
    
    return priorities
```
