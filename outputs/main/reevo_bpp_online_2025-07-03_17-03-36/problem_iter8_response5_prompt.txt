{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Infeasible bins get a large negative priority.\n    feasible_bins = bins_remain_cap >= item\n    priorities[~feasible_bins] = -1e9\n\n    # 2. Best Fit: Prioritize bins where the remaining capacity after adding the item is minimized.\n    remaining_after_fit = bins_remain_cap - item\n\n    # Handle infeasible bins to avoid errors during normalization.\n    remaining_after_fit_adj = np.copy(remaining_after_fit)\n    remaining_after_fit_adj[~feasible_bins] = np.max(bins_remain_cap) + item\n\n    # Normalize remaining capacity (smaller is better) - Best Fit principle\n    max_remaining = np.max(remaining_after_fit_adj)\n    normalized_remaining = 1 - (remaining_after_fit_adj / max_remaining)\n    priorities += normalized_remaining\n\n    # 3. Fragmentation Penalty: Penalize bins that will leave a small unusable fragment.\n    fragment_threshold = 0.2  # Define a threshold for small fragments relative to bin size\n    fragment_penalty = 0.6\n\n    fragment_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= fragment_threshold * np.max(bins_remain_cap))\n    priorities[fragment_mask] -= fragment_penalty\n\n    # 4. Reward Near-Perfect Fit: Encourage using bins that almost perfectly fit the item.\n    near_perfect_fit_threshold = 0.1\n    near_perfect_fit_bonus = 0.7\n    near_perfect_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= near_perfect_fit_threshold * np.max(bins_remain_cap))\n    priorities[near_perfect_mask] += near_perfect_fit_bonus\n\n    # 5. Encourage usage of emptier bins when possible, to reduce # of bins used\n    empty_bin_threshold = 0.8\n    empty_bin_bonus = 0.3\n    empty_bin_mask = feasible_bins & (bins_remain_cap >= empty_bin_threshold * np.max(bins_remain_cap))\n    priorities[empty_bin_mask] += empty_bin_bonus\n\n    # 6. Moderate Item size handling, instead of hard threshold\n    item_ratio = item / np.max(bins_remain_cap)\n    moderate_item_penalty = 0.1 * item_ratio  # Scale penalty with item size\n    priorities[feasible_bins] -= moderate_item_penalty\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n\n    # 1. Feasibility: Infeasible bins get a very large negative priority.\n    feasible_bins = bins_remain_cap >= item\n    priorities[~feasible_bins] = -1e9\n\n    # 2. Best Fit: Prioritize bins where the item fits best (smallest remaining space).\n    remaining_after_fit = bins_remain_cap - item\n    \n    #Only consider remaining capacity for feasible bins\n    remaining_after_fit_adj = np.copy(remaining_after_fit)\n    remaining_after_fit_adj[~feasible_bins] = bin_capacity + item\n\n    # Normalize remaining capacity (smaller is better)\n    normalized_remaining = 1 - (remaining_after_fit_adj / bin_capacity)\n    priorities += normalized_remaining\n\n    # 3. Moderate Fill: Penalize bins that are almost full or almost empty *after* placing the item.\n    almost_full_threshold = 0.1 * bin_capacity # consider as a percentage\n    almost_empty_threshold = 0.9 * bin_capacity\n\n    almost_full_mask = feasible_bins & (remaining_after_fit <= almost_full_threshold) & (remaining_after_fit >= 0)\n    almost_empty_mask = feasible_bins & (remaining_after_fit >= almost_empty_threshold)\n    \n    # Penalize almost full slightly more than almost empty\n    priorities[almost_full_mask] -= 0.6\n    priorities[almost_empty_mask] -= 0.3\n    \n\n    # 4. Small Item Penalty: Reduce the priority of placing small items if a near-perfect fit isn't possible.\n    small_item_threshold = 0.2 * bin_capacity\n    if item <= small_item_threshold:\n        near_perfect_fit_threshold = 0.1 * bin_capacity\n        near_perfect_mask = feasible_bins & (remaining_after_fit >= 0) & (remaining_after_fit <= near_perfect_fit_threshold)\n        \n        # Only apply penalty if no near perfect fit.\n        if not np.any(near_perfect_mask):\n            priorities[feasible_bins] -= 0.2 # Slightly penalize\n\n    # 5. Reward Near-Perfect Fit: Significant bonus for bins that have a near-perfect fit\n    near_perfect_fit_threshold = 0.1 * bin_capacity\n    near_perfect_fit_bonus = 0.7\n    near_perfect_mask = feasible_bins & (remaining_after_fit >= 0) & (remaining_after_fit <= near_perfect_fit_threshold)\n    priorities[near_perfect_mask] += near_perfect_fit_bonus\n    \n\n    # 6. Fragmentation Penalty: Penalize creating very small fragments.\n    fragment_threshold = 0.15 * bin_capacity\n    fragment_penalty = 0.5\n    fragment_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= fragment_threshold)\n    priorities[fragment_mask] -= fragment_penalty\n\n\n    return priorities\n\n[Reflection]\nFocus on consistent normalization, moderate fill, and adaptive item-size penalties for improved bin packing.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}