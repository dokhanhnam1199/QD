{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap) # Assume all bins have same capacity.\n\n    # 1. Feasibility: Infeasible bins get the lowest priority.\n    feasible_bins = bins_remain_cap >= item\n    priorities[~feasible_bins] = -np.inf\n\n    # 2. Best Fit: Prioritize bins that result in the least remaining capacity after placement.\n    remaining_after_fit = bins_remain_cap - item\n    remaining_after_fit[~feasible_bins] = bin_capacity  # Assign large values to infeasible bins\n\n    # Normalize remaining capacity to a range [0, 1], lower is better\n    normalized_remaining = remaining_after_fit / bin_capacity\n    priorities[feasible_bins] -= normalized_remaining[feasible_bins] # Lower remaining is better, so we subtract\n\n    # 3. Fragmentation Penalty: Penalize bins if the remaining capacity is too small relative to the bin size.\n    fragment_threshold = 0.15  # Threshold for small fragments (relative to bin capacity)\n    fragment_penalty = 0.5\n\n    fragment_mask = feasible_bins & (remaining_after_fit > 0) & (remaining_after_fit <= fragment_threshold * bin_capacity)\n    priorities[fragment_mask] -= fragment_penalty\n\n    # 4. Near-Full Penalty: Discourage filling bins too close to their capacity to avoid future issues\n    near_full_threshold = 0.95\n    near_full_penalty = 0.3\n\n    near_full_mask = feasible_bins & (bins_remain_cap <= bin_capacity) & ((bins_remain_cap - item) <= (1 - near_full_threshold) * bin_capacity) & (bins_remain_cap - item > 0) # Added some more conditions for stability\n    priorities[near_full_mask] -= near_full_penalty\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Assign a large negative priority to bins that can't fit the item\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -1e9  # Large penalty for infeasibility\n\n    # 2. Best Fit: Prioritize bins with the smallest remaining capacity *after* adding the item\n    feasible_bins = ~infeasible_bins\n    remaining_after_fit = bins_remain_cap[feasible_bins] - item\n\n    # Prioritize smaller waste, but avoid bins that are too full (waste close to zero)\n    # Aim for moderate fill levels to accommodate future items\n\n    priorities[feasible_bins] = -remaining_after_fit  # Primary Best Fit scoring\n\n    # Scale the remaining cap and subtract it - encourages moderate fill\n    if np.max(bins_remain_cap) != 0:\n        priorities[feasible_bins] -= (bins_remain_cap[feasible_bins] / np.max(bins_remain_cap)) * 0.001\n\n    # Add a bonus for bins that are reasonably full but not too full\n    # This helps to consolidate items into fewer bins and avoids excessive fragmentation.\n    reasonable_fill = (bins_remain_cap[feasible_bins] > item) & (remaining_after_fit > 0.1 * np.max(bins_remain_cap)) # tuning 0.1\n    priorities[feasible_bins][reasonable_fill] += 0.0005\n    \n    return priorities\n\n[Reflection]\nPrioritize feasibility with large penalties. Target moderate fill levels and consolidate items effectively.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}