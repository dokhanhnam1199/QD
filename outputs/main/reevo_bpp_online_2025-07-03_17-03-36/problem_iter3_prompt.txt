{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\nFocus on minimizing waste and fragmentation. Prioritize feasibility with strong infeasibility penalties. Incorporate relative item size and aim for moderate fill levels. Simplify scoring functions and consider a \"Best Fit\" approach.\n\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility: Assign 0 priority to bins that can't fit the item\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf\n\n    # 2. Best Fit: Prioritize bins with the smallest remaining capacity *after* adding the item\n    #    This encourages filling bins tightly.  But, only consider bins that *can* fit the item\n    \n    feasible_bins = ~infeasible_bins\n    remaining_after_fit = bins_remain_cap[feasible_bins] - item\n    priorities[feasible_bins] = -remaining_after_fit\n\n    # 3. Tie-breaker: Slightly prioritize bins with higher initial capacity.\n    #    This can help avoid fragmenting bins too much, as larger bins may be better for future items.\n    #    The effect should be small relative to best-fit. We do this by subtracting from -remaining_after_fit a scaled value.\n    \n    priorities[feasible_bins] -= bins_remain_cap[feasible_bins] / np.max(bins_remain_cap) / 1000.0\n\n    # 4.  Use the capacity to get a proportion.\n\n    #Return final priorities array\n    return priorities\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}