```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Heuristic 1: Prefer bins where the item fits and leaves minimal waste
    fit_mask = bins_remain_cap >= item
    waste = bins_remain_cap - item
    
    priorities[fit_mask] = 1 / (waste[fit_mask] + 1e-6)  # Avoid division by zero

    # Heuristic 2: Give a bonus to bins that are nearly full *before* adding the item
    # (encourage filling bins that are already substantially utilized)
    # The "+ item" check helps to prefer bins where we actually CAN add the item
    nearly_full_threshold = 0.8
    nearly_full_mask = (bins_remain_cap / bins_remain_cap.max() >= nearly_full_threshold) & fit_mask
    priorities[nearly_full_mask] += 2

    # Heuristic 3: Avoid bins that are too empty after placing the item.
    # Only consider it when the item actually fits. This aims at balancing utilization
    too_empty_threshold = 0.2 * bins_remain_cap.max()
    too_empty_mask = (waste < too_empty_threshold) & fit_mask
    priorities[too_empty_mask] += 1
    

    # Heuristic 4: If no bin can fit the item, choose the one with max capacity
    if not np.any(fit_mask):
        priorities = bins_remain_cap / bins_remain_cap.max()

    return priorities
```
