```python
import numpy as np

_v2_call_count = 0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using an epsilonâ€‘greedy strategy.

    Args:
        item: Size of the item to be placed.
        bins_remain_cap: Remaining capacities of the bins.

    Returns:
        An array of priority scores for each bin.
    """
    global _v2_call_count
    _v2_call_count += 1
    epsilon = 0.5 / np.sqrt(_v2_call_count)
    epsilon = min(epsilon, 0.3)
    feasible = bins_remain_cap >= item
    leftover = bins_remain_cap - item
    exploit = -leftover
    exploit[~feasible] = -np.inf
    noise = np.random.rand(bins_remain_cap.size)
    priorities = (1 - epsilon) * exploit + epsilon * noise
    return priorities
```
