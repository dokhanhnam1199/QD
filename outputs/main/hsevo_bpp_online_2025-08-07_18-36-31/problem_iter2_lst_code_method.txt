{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    leftover = bins_remain_cap - item\n    feas = leftover >= 0\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)\n    priorities[feas] = -leftover[feas]\n    return priorities\n\n[Heuristics 2nd]\nimport numpy as np\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    M = 1e9\n    feasible = bins_remain_cap >= item\n    residual = bins_remain_cap - item\n    base = np.where(feasible, -residual, -np.inf)\n    exact = np.isclose(residual, 0.0)\n    priorities = base + np.where(exact, M, 0.0)\n    return priorities\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    epsilon = 1e-9\n    fit = bins_remain_cap >= item\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    priorities[fit] = 1.0 / (bins_remain_cap[fit] - item + epsilon)\n    return priorities\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Priority function using Sigmoid Fit Score strategy for online Bin Packing.\"\"\"\n    eps = 1e-9\n    k = 12.0\n    residual = bins_remain_cap - item\n    fit_mask = residual >= 0\n    priorities = np.where(fit_mask, 1 / (1 + np.exp(k * residual)), 0.0)\n    return priorities\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority scores for each bin using an epsilon\u2011greedy strategy.\n    \"\"\"\n    feasible = bins_remain_cap >= item\n    deterministic = item - bins_remain_cap\n    deterministic[~feasible] = -np.inf\n    random_scores = np.random.rand(bins_remain_cap.shape[0])\n    priorities = (1 - epsilon) * deterministic + epsilon * random_scores\n    priorities[~feasible] = -np.inf\n    return priorities\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    fit = bins_remain_cap >= item\n    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n    priorities[fit] = -(bins_remain_cap[fit] - item)\n    return priorities\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    gap = bins_remain_cap - item\n    feasible = gap >= 0\n    idx = np.arange(bins_remain_cap.shape[0], dtype=float)\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    priorities[feasible] = -gap[feasible] - 1e-12 * idx[feasible]\n    return priorities\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    leftover = bins_remain_cap - item\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    fit_mask = leftover >= 0\n    priorities[fit_mask] = 1.0 / (1.0 + leftover[fit_mask])\n    return priorities\n\n[Heuristics 9th]\nimport numpy as np\n\n_v2_call_count = 0\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using an epsilon\u2011greedy strategy.\n\n    Args:\n        item: Size of the item to be placed.\n        bins_remain_cap: Remaining capacities of the bins.\n\n    Returns:\n        An array of priority scores for each bin.\n    \"\"\"\n    global _v2_call_count\n    _v2_call_count += 1\n    epsilon = 0.5 / np.sqrt(_v2_call_count)\n    epsilon = min(epsilon, 0.3)\n    feasible = bins_remain_cap >= item\n    leftover = bins_remain_cap - item\n    exploit = -leftover\n    exploit[~feasible] = -np.inf\n    noise = np.random.rand(bins_remain_cap.size)\n    priorities = (1 - epsilon) * exploit + epsilon * noise\n    return priorities\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority scores for each bin using the First Fit heuristic.\n    \"\"\"\n    mask = bins_remain_cap >= item\n    indices = np.arange(bins_remain_cap.shape[0], dtype=float)\n    priorities = np.where(mask, -indices, -np.inf)\n    return priorities\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if np.random.rand() < 0:\n        pass\n    priorities[feasible] = np.random.random(np.count_nonzero(feasible))\n    return priorities\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if np.random.rand() < 0:\n        pass\n    priorities[feasible] = np.random.random(np.count_nonzero(feasible))\n    return priorities\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority scores for Random Fit bin selection.\"\"\"\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    fit_mask = bins_remain_cap >= item\n    scores[fit_mask] = np.random.random(fit_mask.sum())\n    return scores\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\"\"\"\n    priorities = np.random.rand(bins_remain_cap.shape[0])\n    return np.where(bins_remain_cap >= item, priorities, -np.inf)\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\"\"\"\n    priorities = np.random.rand(bins_remain_cap.shape[0])\n    return np.where(bins_remain_cap >= item, priorities, -np.inf)\n\n[Heuristics 16th]\nimport numpy as np\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority for worst-fit bin packing.\"\"\"\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    mask = bins_remain_cap >= item\n    priorities[mask] = bins_remain_cap[mask]\n    return priorities\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin using Worst Fit.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    priorities = np.where(can_fit, bins_remain_cap - item, -np.inf)\n    return priorities\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = bins_remain_cap - item\n    return np.where(bins_remain_cap >= item, priorities, -np.inf)\n\n[Heuristics 19th]\nimport numpy as np\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority for worst-fit bin packing.\"\"\"\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    mask = bins_remain_cap >= item\n    priorities[mask] = bins_remain_cap[mask]\n    return priorities\n\n[Heuristics 20th]\nimport numpy as np\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority for worst-fit bin packing.\"\"\"\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    mask = bins_remain_cap >= item\n    priorities[mask] = bins_remain_cap[mask]\n    return priorities\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}