```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combine inverse leftover, exact‑fit boost, capacity tie‑breaker, and fragmentation penalty."""
    eps = 1e-9
    leftover = bins_remain_cap - item
    fit_mask = leftover >= 0
    # Base: inverse leftover (tighter fit → higher score)
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    priorities[fit_mask] = 1.0 / (leftover[fit_mask] + eps)
    # Tie‑breaker: favor bins with larger remaining capacity
    priorities[fit_mask] += 0.01 * bins_remain_cap[fit_mask]
    # Penalize large slack to reduce fragmentation
    priorities[fit_mask] -= 0.001 * (leftover[fit_mask] ** 2)
    # Exact‑fit bonus: huge boost ensures selection when possible
    exact_mask = fit_mask & np.isclose(leftover, 0, atol=eps)
    priorities[exact_mask] += 1e7
    return priorities
```
