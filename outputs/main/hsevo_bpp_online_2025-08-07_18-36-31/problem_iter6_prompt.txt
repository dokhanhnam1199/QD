{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    leftover = bins_remain_cap - item\n    feas = leftover >= 0\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)\n    priorities[feas] = -leftover[feas]\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \n- **Keywords**: adaptive scoring, multi\u2011objective, context\u2011aware, stochastic diversification, learning\u2011guided.  \n- **Advice**: combine utilization metrics with fragmentation penalties, adjust weightings online via lightweight reinforcement, embed look\u2011ahead placement and local re\u2011packing to escape greedy dead\u2011ends.  \n- **Avoid**: relying solely on deterministic monotonic residual\u2011capacity scores, fixed exact\u2011fit bonuses, one\u2011size\u2011fits\u2011all parameters, and rigid monolithic code lacking modular hooks.  \n- **Explanation**: these shifts give the heuristic flexibility to adapt across diverse bin\u2011packing patterns, improve overall solution quality, and maintain robustness without over\u2011fitting to trivial cases.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}