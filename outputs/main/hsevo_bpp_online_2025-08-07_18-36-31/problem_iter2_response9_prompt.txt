{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n_v2_call_count = 0\n\n    \"\"\"Returns priority with which we want to add item to each bin using an epsilon\u2011greedy strategy.\n\n    Args:\n        item: Size of the item to be placed.\n        bins_remain_cap: Remaining capacities of the bins.\n\n    Returns:\n        An array of priority scores for each bin.\n    \"\"\"\n    global _v2_call_count\n    _v2_call_count += 1\n    epsilon = 0.5 / np.sqrt(_v2_call_count)\n    epsilon = min(epsilon, 0.3)\n    feasible = bins_remain_cap >= item\n    leftover = bins_remain_cap - item\n    exploit = -leftover\n    exploit[~feasible] = -np.inf\n    noise = np.random.rand(bins_remain_cap.size)\n    priorities = (1 - epsilon) * exploit + epsilon * noise\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority for worst-fit bin packing.\"\"\"\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    mask = bins_remain_cap >= item\n    priorities[mask] = bins_remain_cap[mask]\n    return priorities\n\n### Analyze & experience\n- Comparing (best) vs (worst) (Heuristics\u202f1 vs\u202f20), we see the best uses negative leftover (minimizes waste) while the worst uses remaining capacity (maximizes waste), opposite objectives; (second best) vs (second worst) (Heuristics\u202f2 vs\u202f19) adds a large bonus for exact fits to the same negative\u2011leftover baseline, still opposite to the worst\u2011fit baseline; Comparing (1st) vs (2nd) (Heuristics\u202f1 vs\u202f2), the second introduces an explicit exact\u2011fit boost (M) and clearer conditional handling, improving perfect\u2011match decisions; (3rd) vs (4th) (Heuristics\u202f3 vs\u202f4), both map smaller gaps to higher scores, but the third uses an unbounded inverse (sensitive to tiny gaps) whereas the fourth employs a sigmoid, giving smoother, bounded priorities; Comparing (second worst) vs (worst) (Heuristics\u202f19 vs\u202f20), they are identical worst\u2011fit implementations, confirming redundancy; Overall, top heuristics are deterministic, vectorized, directly tied to leftover, include exact\u2011fit bonuses, and have concise documentation, whereas lower\u2011ranked ones rely on randomness, duplicated code, or ambiguous scoring.\n- \n- **Keywords:** deterministic, monotonic, residual capacity, exact\u2011fit bonus, vectorized, documented, consistent.  \n- **Advice:** Build a single, monotonic score from residual capacity; give a small exact\u2011fit bonus; keep the code vectorized; avoid random tie\u2011breakers and duplicated logic; fully document intent.  \n- **Avoid:** Random tie\u2011breakers, duplicated logic, non\u2011deterministic heuristics, over\u2011complex code.  \n- **Explanation:** Determinism cuts variance; monotonicity keeps greedy choices valid; vectorization speeds scoring; documentation simplifies debugging; avoiding randomness and duplication boosts reproducibility and maintainability.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}