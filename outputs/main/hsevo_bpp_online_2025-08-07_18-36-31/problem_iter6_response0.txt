```python
import numpy as np

_initial_total_capacity = None
_bin_capacity = None
_avg_item_size = None
_placement_counter = 0
_alpha_avg = 0.1

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    global _initial_total_capacity, _bin_capacity, _avg_item_size, _placement_counter, _alpha_avg
    if _initial_total_capacity is None:
        _initial_total_capacity = float(np.sum(bins_remain_cap))
        _bin_capacity = float(np.max(bins_remain_cap))
        _avg_item_size = item
    else:
        _avg_item_size = (1 - _alpha_avg) * _avg_item_size + _alpha_avg * item
    _placement_counter += 1
    leftover = bins_remain_cap - item
    feas = leftover >= 0
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    if np.any(feas):
        load_factor = (_initial_total_capacity - np.sum(bins_remain_cap)) / _initial_total_capacity
        weight_frag = load_factor
        weight_pot = 1.0 - load_factor
        bf = -leftover[feas]
        frag = -weight_frag * (leftover[feas] / _bin_capacity) ** 2
        pot = weight_pot * (leftover[feas] / (_avg_item_size + 1e-12))
        base = bf + frag + pot
        noise = np.random.normal(scale=0.001, size=base.shape)
        scores[feas] = base + noise
    return scores
```
