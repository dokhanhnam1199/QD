```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid scoring: negative leftover + inverse term, huge exact‑fit boost, tiny capacity tie‑breaker."""
    leftover = bins_remain_cap - item
    feasible = leftover >= 0
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    # parameters: inverse weight, capacity tie‑breaker, exact‑fit bonus
    alpha = 1.0
    beta = 1e-3
    epsilon = 1e-12
    exact_bonus = 1e6
    # base score: penalize leftover, add inverse term, slight capacity tie‑breaker
    inv_term = alpha / (1.0 + leftover[feasible])
    base = -leftover[feasible] + inv_term + beta * bins_remain_cap[feasible]
    # huge boost for exact fits
    exact_mask = leftover[feasible] <= epsilon
    base[exact_mask] += exact_bonus
    scores[feasible] = base
    return scores
```
