{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    leftover = bins_remain_cap - item\n    feas = leftover >= 0\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)\n    priorities[feas] = -leftover[feas]\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines inverse residual scoring with exact-fit boost and mild remaining-capacity tie-breaker.\n    \"\"\"\n    leftover = bins_remain_cap - item\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    fit_mask = leftover >= 0\n    priorities[fit_mask] = 1.0 / (1.0 + leftover[fit_mask])\n    exact_mask = fit_mask & (leftover == 0)\n    priorities[exact_mask] += 10.0\n    priorities[fit_mask] += 0.01 * bins_remain_cap[fit_mask]\n    return priorities\n\n### Analyze & experience\n- - **Best vs. Worst (1\ufe0f\u20e3 vs. 2\ufe0f\u20e30\ufe0f\u20e3):** #1 uses a straightforward `-leftover` score with a huge exact\u2011fit bonus (1e6), making exact fits dominate. #20 relies on an inverse residual (`1/(1+leftover)`) with a modest exact\u2011fit boost (10) and a tiny capacity term, yielding weaker, less decisive ordering.  \n- **2nd vs. 2nd\u2011worst (2\ufe0f\u20e3 vs. 1\ufe0f\u20e39\ufe0f\u20e3):** #2 combines a squared residual penalty, a capacity weight, and an enormous exact\u2011fit bonus (\u22488e9), providing a strong, deterministic preference. #19 mirrors #20\u2019s inverse\u2011residual scheme but adds a tiny exact\u2011fit bonus (1e\u20116) and index\u2011based tie\u2011break, still far less aggressive than #2.  \n- **1st vs. 2nd (1\ufe0f\u20e3 vs. 2\ufe0f\u20e3):** #1 is minimalistic\u2014only `-leftover` plus a large bonus\u2014while #2 adds extra parameters (`w`, `M`) and a quadratic term, increasing complexity without clear benefit. Simplicity of #1 aids robustness.  \n- **3rd vs. 4th (3\ufe0f\u20e3 vs. 4\ufe0f\u20e3):** #3 implements plain best\u2011fit (`-leftover`). #4 uses an inverse\u2011leftover (`1/(leftover+\u03b5)`) with an even larger exact\u2011fit boost (1e7), making near\u2011fits sharper but introducing non\u2011linear scaling that can be harder to tune.  \n- **2nd\u2011worst vs. Worst (1\ufe0f\u20e39\ufe0f\u20e3 vs. 2\ufe0f\u20e30\ufe0f\u20e3):** Both share the inverse\u2011residual core; #19 adds deterministic tie\u2011break by index, giving it a slight edge over #20, which lacks any tie\u2011breaker.  \n- **Overall:** The top heuristics prioritize exact fits with a large, clear bonus and employ simple monotonic scoring (negative leftover). As we descend, functions become more complex, use weaker bonuses, and rely on inverse\u2011residual or added tie\u2011breaks, which dilute the exact\u2011fit priority and can hurt performance.\n- \n- **Keywords**: adaptive scoring, multi\u2011objective, context\u2011aware, stochastic diversification, learning\u2011guided.  \n- **Advice**: combine utilization metrics with fragmentation penalties, adjust weightings online via lightweight reinforcement, embed look\u2011ahead placement and local re\u2011packing to escape greedy dead\u2011ends.  \n- **Avoid**: relying solely on deterministic monotonic residual\u2011capacity scores, fixed exact\u2011fit bonuses, one\u2011size\u2011fits\u2011all parameters, and rigid monolithic code lacking modular hooks.  \n- **Explanation**: these shifts give the heuristic flexibility to adapt across diverse bin\u2011packing patterns, improve overall solution quality, and maintain robustness without over\u2011fitting to trivial cases.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}