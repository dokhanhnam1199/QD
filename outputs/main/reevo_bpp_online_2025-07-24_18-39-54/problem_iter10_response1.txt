```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, noise_scale: float = 0.05, seed: int = None) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        noise_scale: Scale of the noise to be added for exploration.
        seed: Random seed for reproducibility.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Set the random seed for reproducibility
    if seed is not None:
        np.random.seed(seed)
    
    # Calculate the relative remaining capacity after adding the item
    relative_remaining_capacities = (bins_remain_cap - item) / bins_remain_cap
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(relative_remaining_capacities >= 0, relative_remaining_capacities, -1e6)
    
    # Normalize priorities for valid bins to be within a comparable range
    valid_bins = relative_remaining_capacities >= 0
    if np.any(valid_bins):
        min_priority, max_priority = priorities[valid_bins].min(), priorities[valid_bins].max()
        if max_priority != min_priority:
            priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority)
    
    # Add controlled noise to priorities for exploration
    noise = np.random.uniform(-noise_scale, noise_scale, size=len(bins_remain_cap))
    noisy_priorities = priorities + noise
    
    # Clip noisy priorities to ensure they are within a reasonable range
    noisy_priorities = np.clip(noisy_priorities, -1e6, 1)
    
    return noisy_priorities
```
