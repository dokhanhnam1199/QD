```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, noise_scale: float = 0.1) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
    item: Size of item to be added to the bin.
    bins_remain_cap: Array of capacities for each bin.
    noise_scale: Scale of noise to add for exploration.

    Return:
    Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the waste if the item is added to each bin
    waste_if_added = np.maximum(bins_remain_cap - item, 0)
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(bins_remain_cap >= item, waste_if_added, -1e6)
    
    # Add noise for exploration-exploitation balance
    priorities += noise_scale * np.random.randn(*priorities.shape)
    
    return priorities
```
