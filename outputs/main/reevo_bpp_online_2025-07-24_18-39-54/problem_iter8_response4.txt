```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 1e-6, seed: int = 0) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Small value to avoid division by zero.
        seed: Random seed for reproducibility.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Set random seed for reproducibility
    np.random.seed(seed)

    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(remaining_capacities >= 0, -np.abs(remaining_capacities), -1e6)
    
    # Normalize priorities for bins that can fit the item
    valid_bins = remaining_capacities >= 0
    if np.any(valid_bins):
        valid_priorities = priorities[valid_bins]
        min_priority, max_priority = np.min(valid_priorities), np.max(valid_priorities)
        normalized_priorities = (valid_priorities - min_priority) / (max_priority - min_priority + epsilon)
        
        # Add controlled randomness to the normalized priorities
        noisy_priorities = normalized_priorities + np.random.uniform(-0.01, 0.01, size=normalized_priorities.shape)
        noisy_priorities = np.clip(noisy_priorities, 0, 1)  # Ensure priorities are within [0, 1]
        
        # Update priorities for bins that can fit the item with noisy priorities
        priorities[valid_bins] = noisy_priorities
    
    return priorities
```
