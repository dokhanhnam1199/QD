```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 1e-6, noise_scale: float = 0.01) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Small value to avoid division by zero.
        noise_scale: Scale of noise to add for exploration.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize bins_remain_cap and item to ensure numerical stability
    max_cap = np.max(bins_remain_cap)
    normalized_bins_remain_cap = bins_remain_cap / (max_cap + epsilon)
    normalized_item = item / (max_cap + epsilon)

    # Calculate the priority based on the remaining capacity after adding the item
    priorities = np.where(normalized_bins_remain_cap >= normalized_item, 
                          normalized_bins_remain_cap - normalized_item, 
                          -1e6)
    
    # Add controlled noise for exploration-exploitation balance
    valid_bins = priorities != -1e6
    noise = np.random.uniform(-noise_scale, noise_scale, size=len(bins_remain_cap))
    priorities = np.where(valid_bins, priorities + noise, priorities)
    
    return priorities
```
