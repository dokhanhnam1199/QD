{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the relative remaining capacity after adding the item\n    mask = bins_remain_cap >= item\n    relative_remaining_capacities = (bins_remain_cap - item) / bins_remain_cap\n    \n    # Assign a very low priority to bins that cannot fit the item\n    priorities = np.where(mask, relative_remaining_capacities, -1e6)\n    \n    # Add controlled noise for exploration-exploitation balance\n    np.random.seed(0)  # For reproducibility\n    priorities += np.random.normal(0, 0.01, size=len(bins_remain_cap))\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        noise_scale: Scale of the noise to be added for exploration.\n        seed: Random seed for reproducibility.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    \n    relative_remaining_capacities = (bins_remain_cap - item) / bins_remain_cap\n    \n    priorities = np.where(relative_remaining_capacities >= 0, relative_remaining_capacities, -1e6)\n    \n    valid_bins = relative_remaining_capacities >= 0\n    if np.any(valid_bins):\n        min_priority, max_priority = np.min(priorities[valid_bins]), np.max(priorities[valid_bins])\n        if max_priority != min_priority:\n            priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-8)\n    \n    noise = np.random.uniform(-noise_scale, noise_scale, size=len(bins_remain_cap))\n    priorities = priorities + noise\n    \n    priorities = np.clip(priorities, -1e6, 1)\n    \n    return priorities\n\n[Reflection]\nNormalize priorities, control noise scale, and clip scores to enhance exploration-exploitation balance and heuristic performance.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}