```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float, epsilon: float = 1e-6, noise_scale: float = 0.1) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin with improved heuristic.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        bin_capacity: The capacity of each bin.
        epsilon: Small value to prevent division by zero.
        noise_scale: Scale of the noise to be added.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    valid_bins = remaining_capacities >= 0
    
    # Calculate priority for valid bins focusing on minimizing waste and filling bins to their optimal level
    priorities = np.where(valid_bins, -(bins_remain_cap - item) / bin_capacity, -1e6)
    
    # Normalize priorities for valid bins to be within [0, 1]
    min_priority = np.min(priorities[valid_bins])
    max_priority = np.max(priorities[valid_bins])
    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + epsilon)
    
    # Add controlled noise for exploration-exploitation balance
    priorities[valid_bins] += noise_scale * np.random.rand(np.sum(valid_bins))
    
    # Ensure priorities are within [0, 1] after adding noise
    priorities[valid_bins] = np.clip(priorities[valid_bins], 0, 1)
    
    return priorities
```
