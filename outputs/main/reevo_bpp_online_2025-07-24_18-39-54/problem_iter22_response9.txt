```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 1e-8, noise_scale: float = 0.01, seed: int = None) -> np.ndarray:
    """Returns priority with which we want to add item to each bin with simplified and normalized priority, and controlled noise.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Small value to prevent division by zero.
        noise_scale: Scale of the noise to be added.
        seed: Random seed for reproducibility.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    if seed is not None:
        np.random.seed(seed)
    
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(remaining_capacities >= 0, bins_remain_cap - item, -1e6)
    
    # Normalize priorities for valid bins to be within [0, 1]
    valid_bins = priorities != -1e6
    if np.any(valid_bins):
        min_priority, max_priority = np.min(priorities[valid_bins]), np.max(priorities[valid_bins])
        priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + epsilon)
        # Add controlled noise for exploration-exploitation balance
        priorities[valid_bins] += noise_scale * np.random.rand(np.sum(valid_bins))
    
    return priorities
```
