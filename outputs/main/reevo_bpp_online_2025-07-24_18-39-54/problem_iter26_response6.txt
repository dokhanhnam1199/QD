```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_max_cap: float) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_max_cap: Maximum capacity of a bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the waste if the item is added to each bin
    waste_if_added = np.where(bins_remain_cap >= item, bins_remain_cap - item, bin_max_cap)
    
    # Calculate priority scores directly related to minimizing waste
    priorities = -waste_if_added / bin_max_cap
    
    # Add controlled noise for exploration-exploitation balance only to valid bins
    valid_bins = bins_remain_cap >= item
    noise = np.random.uniform(-0.01, 0.01, size=len(bins_remain_cap))
    priorities = np.where(valid_bins, priorities + noise, -1e6)
    
    return priorities
```
