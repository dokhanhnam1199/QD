{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        noise_scale: Scale of the noise to be added for exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize the bins_remain_cap to ensure numerical stability\n    max_cap = np.max(bins_remain_cap)\n    if max_cap == 0:\n        return np.zeros_like(bins_remain_cap)\n    \n    normalized_bins_remain_cap = bins_remain_cap / max_cap\n    \n    # Calculate the remaining capacity after adding the item\n    remaining_capacities = normalized_bins_remain_cap - item / max_cap\n    \n    # Assign a very low priority to bins that cannot fit the item\n    priorities = np.where(remaining_capacities >= 0, -np.abs(normalized_bins_remain_cap - item / max_cap), -1e6)\n    \n    # To further differentiate bins that can fit the item, we use the remaining capacity\n    priorities = np.where(remaining_capacities >= 0, priorities + remaining_capacities, priorities)\n    \n    # Introduce controlled noise to balance exploration-exploitation\n    noise = np.random.normal(0, noise_scale, size=len(bins_remain_cap))\n    priorities = priorities + noise\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize the remaining capacities and item size by the maximum capacity\n    max_cap = np.max(bins_remain_cap)\n    normalized_bins_remain_cap = bins_remain_cap / max_cap\n    normalized_item = item / max_cap\n    \n    # Calculate the priority based on the difference between the remaining capacity and the item size\n    priorities = np.where(normalized_bins_remain_cap >= normalized_item, \n                          -(normalized_bins_remain_cap - normalized_item), \n                          -1e6)\n    \n    # Introduce a controlled noise to valid bins for exploration-exploitation balance\n    valid_bins = priorities != -1e6\n    noise = np.random.uniform(-0.01, 0.01, size=len(bins_remain_cap))\n    priorities = np.where(valid_bins, priorities + noise, priorities)\n    \n    return priorities\n\n[Reflection]\nSimplify priority functions, directly relate priorities to problem objectives, and control noise for better exploration-exploitation balance.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}