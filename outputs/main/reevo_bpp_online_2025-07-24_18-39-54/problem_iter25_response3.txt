```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    valid_bins = remaining_capacities >= 0
    
    # Normalize the remaining capacity for valid bins
    max_remain_cap = np.max(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 1.0
    normalized_remain_cap = bins_remain_cap / max_remain_cap
    
    # Calculate priority based on how well the item fits into the bin
    priorities = np.where(valid_bins, 1 - np.abs(normalized_remain_cap - item / max_remain_cap), -1e6)
    
    # Add some noise for exploration-exploitation balance
    np.random.seed(0)  # For reproducibility
    priorities += np.random.uniform(-0.01, 0.01, size=len(bins_remain_cap))
    
    return priorities
```
