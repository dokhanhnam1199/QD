```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    valid_bins = remaining_capacities >= 0
    
    # Calculate priorities for valid bins
    valid_priorities = 1 - (remaining_capacities[valid_bins] / bins_remain_cap[valid_bins])
    
    # Normalize valid bin priorities
    if np.any(valid_bins):
        valid_priorities = (valid_priorities - np.min(valid_priorities)) / (np.max(valid_priorities) - np.min(valid_priorities) + 1e-9)
    
    # Initialize priorities array
    priorities = np.where(valid_bins, 0.0, -1e6)
    
    # Assign normalized priorities to valid bins
    priorities[valid_bins] = valid_priorities
    
    # Add small, controlled noise for exploration-exploitation balance
    np.random.seed(0)  # For reproducibility
    priorities = np.where(valid_bins, priorities + 1e-6 * np.random.rand(*priorities.shape), priorities)
    
    return priorities
```
