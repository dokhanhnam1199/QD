```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Mask for bins that can fit the item
    valid_bins = remaining_after_addition >= 0
    
    # Initialize priorities with negative infinity for bins that cannot fit the item
    priorities = np.full_like(bins_remain_cap, -np.inf)
    
    # For bins that can fit the item, calculate priority based on remaining capacity and item size ratio
    priorities[valid_bins] = np.log(remaining_after_addition[valid_bins] + 1) / np.log(bins_remain_cap[valid_bins] + 1)
    
    # Give a bonus to the bin with the least remaining capacity that can still fit the item
    if np.any(valid_bins):
        min_remaining_idx = np.argmin(bins_remain_cap[valid_bins])
        min_remaining_idx_global = np.where(valid_bins)[0][min_remaining_idx]
        priorities[min_remaining_idx_global] += 1
    
    return priorities
```
