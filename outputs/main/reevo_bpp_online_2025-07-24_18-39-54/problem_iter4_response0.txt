```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        bin_capacity: The maximum capacity of a bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(remaining_capacities >= 0, 
                          -np.abs(bins_remain_cap - item) / bin_capacity + 
                          (bins_remain_cap - item) / bin_capacity, -1e6)
    
    # To further differentiate bins that can fit the item, we consider the 
    # fill rate of the bin after adding the item
    fill_rate_after_addition = (bin_capacity - remaining_capacities) / bin_capacity
    priorities = np.where(remaining_capacities >= 0, 
                          priorities + 0.1 * fill_rate_after_addition, priorities)
    
    # Introduce a small randomness to break ties
    priorities = np.where(remaining_capacities >= 0, 
                          priorities + np.random.uniform(0, 1e-6, size=len(priorities)), priorities)
    
    return priorities
```
