```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        bin_capacity: Capacity of each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    valid_bins = remaining_capacities >= 0
    priorities = np.where(valid_bins, (bins_remain_cap - item) / bin_capacity, -1e6)
    
    # Add noise to valid bins for exploration
    if np.any(valid_bins):
        noise = np.random.uniform(-0.1, 0.1, np.sum(valid_bins))
        priorities[valid_bins] += noise
    
    return priorities
```
