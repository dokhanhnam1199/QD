```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacities: float = 1.0) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin, normalized to be between 0 and 1.
        bins_remain_cap: Array of remaining capacities for each bin, normalized to be between 0 and 1.
        bin_capacities: The capacity of each bin, default is 1.0.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(remaining_capacities >= 0, bins_remain_cap - item, -1e6)
    
    # Scale the priorities using a non-linear function (e.g., sigmoid) to emphasize the differences between high priorities
    priorities = np.where(remaining_capacities >= 0, 1 / (1 + np.exp(-(priorities * 10 - 5))), priorities)
    
    # Introduce controlled randomness to break ties
    np.random.seed(0)  # For reproducibility
    priorities += np.random.uniform(0, 1e-4, size=len(bins_remain_cap))
    
    return priorities
```
