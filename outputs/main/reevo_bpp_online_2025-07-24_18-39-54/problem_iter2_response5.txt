```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacity: The total capacity of each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after placing the item in each bin
    remaining_capacities = bins_remain_cap - item
    
    # Bins that can accommodate the item should have higher priority
    valid_bins = remaining_capacities >= 0
    
    # Calculate the priority score for valid bins based on the remaining capacity
    # Bins with less remaining capacity after placing the item should have higher priority
    priorities = np.where(valid_bins, (bin_capacity - remaining_capacities) / bin_capacity, -np.inf)
    
    # Handle edge case where there are no valid bins
    if np.max(priorities) == -np.inf:  
        priorities = np.where(valid_bins, 0, -np.inf)
    
    return priorities
```
