```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    fitness = np.where(remaining_capacities >= 0, 1 - (remaining_capacities / bins_remain_cap), 0)
    relative_waste = np.where(remaining_capacities >= 0, remaining_capacities / item, 1e6)
    
    # Calculate priority score as a combination of fitness and relative waste with some noise
    priorities = fitness - relative_waste + np.random.normal(0, 0.01, size=len(bins_remain_cap))
    
    # Ensure numerical stability by clipping priorities to a reasonable range
    priorities = np.clip(priorities, -1e6, 1e6)
    
    return priorities
```
