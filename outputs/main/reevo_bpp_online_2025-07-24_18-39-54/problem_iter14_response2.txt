```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 1e-4, seed: int = None) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Small value to control the level of randomness.
        seed: Random seed for reproducibility.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Set random seed for reproducibility
    if seed is not None:
        np.random.seed(seed)

    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item

    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(remaining_capacities >= 0, bins_remain_cap - remaining_capacities, -1e6)

    # Normalize priorities for valid bins
    valid_bins = remaining_capacities >= 0
    if np.any(valid_bins):
        min_priority, max_priority = priorities[valid_bins].min(), priorities[valid_bins].max()
        if max_priority != min_priority:
            priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority)

    # Add adaptive noise to the priorities
    if np.any(valid_bins):
        valid_priorities = priorities[valid_bins]
        noise = np.random.uniform(-epsilon, epsilon, size=len(valid_priorities))

        # Scale noise based on the item size relative to bin capacity and number of valid bins
        avg_bin_capacity = np.mean(bins_remain_cap[valid_bins])
        num_valid_bins = np.sum(valid_bins)
        scaling_factor = (item / avg_bin_capacity) * (1 / np.sqrt(num_valid_bins))
        valid_priorities += noise * scaling_factor
        priorities[valid_bins] = valid_priorities

    return priorities
```
