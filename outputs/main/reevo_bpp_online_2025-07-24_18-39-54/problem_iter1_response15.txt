```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot accommodate the item
    priorities = np.where(remaining_after_addition < 0, -np.inf, remaining_after_addition / bins_remain_cap)
    
    # Give higher priority to bins with more remaining capacity after addition relative to their original remaining capacity
    priorities = np.where(remaining_after_addition == bins_remain_cap, 0, priorities)
    
    # Encourage packing items tightly by giving higher priority to bins with less remaining capacity
    # But this is already achieved by the previous line, so we don't need to do anything extra
    
    return priorities
```
