```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_max_cap: float, epsilon: float = 1e-6, noise_scale: float = 0.01) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_max_cap: Maximum capacity of a bin.
        epsilon: Small value to prevent division by zero.
        noise_scale: Scale of random noise to add for exploration.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize the remaining capacities and item size
    normalized_bins_remain_cap = bins_remain_cap / bin_max_cap
    normalized_item = item / bin_max_cap
    
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    # Use a scoring function that prefers bins with remaining capacity closest to the item size
    priorities = np.where(remaining_capacities >= 0, 
                          -(normalized_bins_remain_cap - normalized_item) ** 2, 
                          -1e6)
    
    # Introduce a controlled noise to the priorities to balance exploration-exploitation
    noise = np.random.normal(loc=0, scale=noise_scale, size=len(bins_remain_cap))
    priorities = np.where(remaining_capacities >= 0, priorities + noise, priorities)
    
    return priorities
```
