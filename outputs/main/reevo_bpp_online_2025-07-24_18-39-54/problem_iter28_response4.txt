```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Identify bins that can fit the item
    valid_bins = remaining_capacities >= 0
    
    # Calculate the priority for valid bins based on the proportion of remaining capacity
    valid_priorities = 1 - (remaining_capacities[valid_bins] / bins_remain_cap[valid_bins])
    
    # Normalize valid priorities to have a mean of 0 and a standard deviation of 1
    valid_priorities = (valid_priorities - np.mean(valid_priorities)) / (np.std(valid_priorities) + 1e-8)
    
    # Add a small controlled noise for exploration-exploitation balance
    valid_priorities += np.random.normal(0, 0.01, size=len(valid_priorities))
    
    # Create the final priority array
    priorities = np.full_like(bins_remain_cap, -1e6, dtype=float)
    priorities[valid_bins] = valid_priorities
    
    return priorities
```
