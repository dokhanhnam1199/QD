```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remain_cap_after_add = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot hold the item
    priorities = np.where(remain_cap_after_add >= 0, remain_cap_after_add, -1e9)
    
    # For bins that can hold the item, prioritize the one with the least remaining capacity
    priorities = np.where(remain_cap_after_add >= 0, -remain_cap_after_add / bins_remain_cap, priorities)
    
    return priorities
```
