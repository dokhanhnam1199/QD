```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacities: float) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacities: Capacity of each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the negative remaining capacity after adding the item, normalized by bin capacity
    priorities = np.where(bins_remain_cap >= item, -(bin_capacities - (bins_remain_cap - item)) / bin_capacities, -1e6)
    
    # Normalize priorities to be between 0 and 1 for bins that can fit the item
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        min_priority, max_priority = np.min(priorities[valid_bins]), np.max(priorities[valid_bins])
        priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-8)
        # Add controlled noise for exploration
        priorities[valid_bins] += np.random.uniform(-0.01, 0.01, np.sum(valid_bins))
        # Ensure priorities are within [0, 1] after adding noise
        priorities[valid_bins] = np.clip(priorities[valid_bins], 0, 1)
    
    return priorities
```
