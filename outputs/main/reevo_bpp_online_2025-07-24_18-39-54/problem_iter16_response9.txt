```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, random_state: int = 0) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        random_state: Seed for the random number generator.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the relative remaining capacity after adding the item
    relative_remaining_capacities = (bins_remain_cap - item) / bins_remain_cap
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(relative_remaining_capacities >= 0, relative_remaining_capacities, -1e6)
    
    # Add some noise to the priorities for exploration-exploitation balance with a fixed random seed
    rng = np.random.default_rng(random_state)
    priorities += rng.normal(0, 0.01, size=len(bins_remain_cap))
    
    return priorities
```
