```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, noise_scale: float = 0.01, seed: int = 42) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        noise_scale: Scale of the noise added for exploration.
        seed: Random seed for reproducibility.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Set random seed for reproducibility
    np.random.seed(seed)
    
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(remaining_capacities >= 0, remaining_capacities, -1e6)
    
    # Normalize priorities to ensure numerical stability
    valid_priorities = priorities[priorities != -1e6]
    if len(valid_priorities) > 0:  
        min_priority, max_priority = np.min(valid_priorities), np.max(valid_priorities)
        priorities = np.where(priorities != -1e6, (priorities - min_priority) / (max_priority - min_priority + 1e-9), priorities)
    
    # Add controlled noise for exploration
    priorities += noise_scale * np.random.rand(*priorities.shape)
    
    return priorities
```
