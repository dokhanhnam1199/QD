```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 1e-6, seed: int = None) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Small value to avoid division by zero.
        seed: Random seed for reproducibility.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    if seed is not None:
        np.random.seed(seed)

    remaining_capacities = bins_remain_cap - item
    priorities = np.where(remaining_capacities >= 0, -remaining_capacities, -1e6)
    
    valid_priorities = priorities[remaining_capacities >= 0]
    min_priority, max_priority = np.min(valid_priorities), np.max(valid_priorities)
    
    if max_priority == min_priority:
        normalized_priorities = np.ones_like(valid_priorities)
    else:
        normalized_priorities = (valid_priorities - min_priority) / (max_priority - min_priority)
        noise = np.random.uniform(-0.05, 0.05, size=len(valid_priorities))
        noisy_normalized_priorities = np.clip(normalized_priorities + noise, 0, 1)
        priorities[remaining_capacities >= 0] = -noisy_normalized_priorities
    
    return priorities
```
