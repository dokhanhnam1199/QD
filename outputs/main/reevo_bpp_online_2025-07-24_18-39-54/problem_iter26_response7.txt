```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, noise_range: float = 0.01) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        noise_range: Range of uniform noise for exploration.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    valid_bins = remaining_capacities >= 0
    priorities = np.where(valid_bins, remaining_capacities / bins_remain_cap, -1e6)
    
    # Normalize the priorities for valid bins and add noise
    if np.any(valid_bins):
        min_priority, max_priority = np.min(priorities[valid_bins]), np.max(priorities[valid_bins])
        denominator = max_priority - min_priority if max_priority != min_priority else 1
        normalized_priorities = (priorities[valid_bins] - min_priority) / denominator
        noisy_priorities = normalized_priorities + np.random.uniform(-noise_range, noise_range, size=np.sum(valid_bins))
        priorities[valid_bins] = np.clip(noisy_priorities, 0, 1)
    
    return priorities
```
