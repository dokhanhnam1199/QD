```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(remaining_capacities >= 0, 1 - (item / bins_remain_cap), -1e6)
    
    # Normalize scores to be within a comparable range
    priorities = np.where(remaining_capacities >= 0, priorities / (1 + np.min(np.abs(remaining_capacities))), priorities)
    
    # Introduce controlled randomness to break ties
    np.random.seed(0)  # For reproducibility
    priorities = np.where(remaining_capacities >= 0, priorities + np.random.uniform(0, 1e-6, size=len(priorities)), priorities)
    
    return priorities
```
