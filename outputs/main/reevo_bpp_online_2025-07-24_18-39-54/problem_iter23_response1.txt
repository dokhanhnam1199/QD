```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 1e-6, noise_scale: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Small value to prevent division by zero.
        noise_scale: Scale of the noise to be added for exploration.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize the bins_remain_cap to ensure numerical stability
    max_cap = np.max(bins_remain_cap)
    normalized_bins_remain_cap = bins_remain_cap / (max_cap + epsilon)
    
    # Calculate the normalized remaining capacity after adding the item
    normalized_item = item / (max_cap + epsilon)
    remaining_capacities = normalized_bins_remain_cap - normalized_item
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(remaining_capacities >= 0, -np.abs(normalized_bins_remain_cap - normalized_item), -1e6)
    
    # To further differentiate bins that can fit the item, use the normalized remaining capacity
    priorities = np.where(remaining_capacities >= 0, priorities + remaining_capacities / (epsilon + np.abs(remaining_capacities)), priorities)
    
    # Add controlled noise to balance exploration-exploitation
    priorities += noise_scale * np.random.randn(*priorities.shape)
    
    return priorities
```
