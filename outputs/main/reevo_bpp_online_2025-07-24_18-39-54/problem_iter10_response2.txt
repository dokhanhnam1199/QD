```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 1e-6, seed: int = 0) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        epsilon: Small value to control noise level.
        seed: Random seed for reproducibility.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Set random seed for reproducibility
    np.random.seed(seed)
    
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(remaining_capacities >= 0, remaining_capacities, -1e6)
    
    # Add controlled noise to the priorities
    noise = np.random.uniform(-epsilon, epsilon, size=len(bins_remain_cap))
    priorities += noise
    
    return priorities
```
