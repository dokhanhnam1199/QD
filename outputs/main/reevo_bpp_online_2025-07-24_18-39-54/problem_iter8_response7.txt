```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 1e-6, seed: int = None) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Small value for numerical stability.
        seed: Seed for random number generator.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    if seed is not None:
        np.random.seed(seed)

    remaining_capacities = bins_remain_cap - item
    priorities = np.where(remaining_capacities >= 0, -np.abs(remaining_capacities), -1e6)

    valid_indices = remaining_capacities >= 0
    valid_priorities = priorities[valid_indices]

    if len(valid_priorities) > 0:
        min_priority, max_priority = np.min(valid_priorities), np.max(valid_priorities)
        if max_priority != min_priority:
            normalized_priorities = (valid_priorities - min_priority) / (max_priority - min_priority + epsilon)
        else:
            normalized_priorities = np.ones_like(valid_priorities)
        
        noisy_priorities = normalized_priorities + np.random.uniform(-0.1, 0.1, size=normalized_priorities.shape)
        noisy_priorities = np.clip(noisy_priorities, 0, 1)
        
        priorities[valid_indices] = noisy_priorities

    return priorities
```
