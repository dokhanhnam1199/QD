```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 1e-6, noise_scale: float = 0.01) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Small value to prevent division by zero.
        noise_scale: Scale of random noise added to priorities.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    valid_bins = remaining_capacities >= 0
    
    # Normalized priority for valid bins based on the remaining capacity after packing
    priorities = np.where(valid_bins, remaining_capacities / (item + epsilon), -1e6)
    
    # Add a small controlled noise to the priorities for valid bins to balance exploration and exploitation
    priorities = np.where(valid_bins, priorities + noise_scale * np.random.uniform(-1, 1, size=len(bins_remain_cap)), priorities)
    
    return priorities
```
