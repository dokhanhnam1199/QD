{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        epsilon: Small value to avoid division by zero.\n        noise_scale: Scale of noise to add for exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize bins_remain_cap and item to ensure numerical stability\n    max_cap = np.max(bins_remain_cap)\n    normalized_bins_remain_cap = bins_remain_cap / (max_cap + epsilon)\n    normalized_item = item / (max_cap + epsilon)\n\n    # Calculate the priority based on the remaining capacity after adding the item\n    priorities = np.where(normalized_bins_remain_cap >= normalized_item, \n                          normalized_bins_remain_cap - normalized_item, \n                          -1e6)\n    \n    # Add controlled noise for exploration-exploitation balance\n    valid_bins = priorities != -1e6\n    noise = np.random.uniform(-noise_scale, noise_scale, size=len(bins_remain_cap))\n    priorities = np.where(valid_bins, priorities + noise, priorities)\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        epsilon: Small value to prevent division by zero.\n        noise_scale: Scale of the noise to be added.\n        seed: Random seed for reproducibility.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Assign a very low priority to bins that cannot fit the item\n    priorities = np.where(bins_remain_cap >= item, bins_remain_cap - item, -1e6)\n    \n    # Normalize priorities for valid bins to be within [0, 1] and invert to prioritize tighter fits\n    valid_bins = priorities != -1e6\n    if np.any(valid_bins):\n        min_priority, max_priority = np.min(priorities[valid_bins]), np.max(priorities[valid_bins])\n        priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + epsilon)\n        priorities[valid_bins] = 1 - priorities[valid_bins]\n        # Add controlled noise for exploration-exploitation balance\n        priorities[valid_bins] += noise_scale * np.random.rand(np.sum(valid_bins))\n        # Ensure priorities are within [0, 1] after adding noise\n        priorities[valid_bins] = np.clip(priorities[valid_bins], 0, 1)\n    \n    return priorities\n\n[Reflection]\nPrioritize tighter fits by inverting normalized priorities and add controlled noise for exploration-exploitation balance.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}