```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, noise_scale: float = 0.1, seed: int = 42) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        noise_scale: Scale of the noise to be added to the priorities.
        seed: Seed for the random number generator.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Set the random seed for reproducibility
    np.random.seed(seed)
    
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(remaining_capacities >= 0, -np.abs(bins_remain_cap - item) / bins_remain_cap.max(), -1e6)
    
    # Normalize priorities for valid bins to be within [0, 1]
    valid_bins = remaining_capacities >= 0
    if np.any(valid_bins):
        min_priority = np.min(priorities[valid_bins])
        max_priority = np.max(priorities[valid_bins])
        if max_priority != min_priority:
            priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority)
    
    # Add controlled noise to the priorities
    noise = np.random.uniform(-noise_scale, noise_scale, size=len(bins_remain_cap))
    noisy_priorities = priorities + noise
    
    # Clip noisy priorities to be within [0, 1] for valid bins
    noisy_priorities = np.where(valid_bins, np.clip(noisy_priorities, 0, 1), noisy_priorities)
    
    return noisy_priorities
```
