```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 1e-6, noise_scale: float = 0.01) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
    item: Size of item to be added to the bin.
    bins_remain_cap: Array of capacities for each bin.
    epsilon: Small value to avoid division by zero.
    noise_scale: Scale of noise to add for exploration.

    Return:
    Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize bins_remain_cap to ensure numerical stability
    max_cap = np.max(bins_remain_cap)
    norm_bins_remain_cap = bins_remain_cap / max_cap
    
    # Check if item can fit into any bin
    can_fit = bins_remain_cap >= item
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(can_fit, norm_bins_remain_cap - item / max_cap, -1e6)
    
    # Add controlled noise for exploration-exploitation balance
    priorities += noise_scale * np.random.randn(*priorities.shape)
    
    return priorities
```
