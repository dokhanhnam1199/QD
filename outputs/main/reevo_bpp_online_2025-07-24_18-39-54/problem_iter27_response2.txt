```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    valid_bins = remaining_capacities >= 0
    
    # Normalize valid priorities to be between 0 and 1
    max_remaining_cap = np.max(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 1
    min_remaining_cap = np.min(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 0
    
    priorities = np.where(valid_bins, 
                          (bins_remain_cap - item) / max_remaining_cap, 
                          -1e6)
    
    # Add controlled noise to valid priorities for exploration-exploitation balance
    np.random.seed(0)  # For reproducibility
    priorities = np.where(valid_bins, priorities + 1e-6 * np.random.rand(*priorities.shape), priorities)
    
    return priorities
```
