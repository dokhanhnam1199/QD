```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 1e-6, noise_scale: float = 0.01) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Small value to prevent division by zero.
        noise_scale: Scale of random noise to add for exploration.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(remaining_capacities >= 0, 1 - (item / (bins_remain_cap + epsilon)), -1e6)
    
    # Normalize priorities for valid bins to be within [0, 1]
    valid_bins = remaining_capacities >= 0
    if np.any(valid_bins):
        min_priority = np.min(priorities[valid_bins])
        max_priority = np.max(priorities[valid_bins])
        priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + epsilon)
    
    # Add controlled random noise for exploration-exploitation balance
    priorities += noise_scale * np.random.rand(*priorities.shape)
    
    return priorities
```
