```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check if bins have enough capacity for the item
    mask = bins_remain_cap >= item
    
    # Calculate the relative remaining capacity after adding the item, avoiding division by zero
    relative_remaining_capacities = np.zeros_like(bins_remain_cap)
    relative_remaining_capacities[mask] = (bins_remain_cap[mask] - item) / bins_remain_cap[mask]
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(mask, relative_remaining_capacities, -1e6)
    
    # Add controlled noise for exploration-exploitation balance
    np.random.seed(0)  # For reproducibility
    priorities += np.random.normal(0, 0.01, size=len(bins_remain_cap))
    
    return priorities
```
