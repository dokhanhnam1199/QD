```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacities: float = 1.0) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacities: The capacity of each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Feature 1: Whether the bin can fit the item
    can_fit = (bins_remain_cap >= item).astype(float)
    
    # Feature 2: Normalized remaining capacity after adding the item
    remaining_capacities = np.maximum(bins_remain_cap - item, 0) / bin_capacities
    
    # Feature 3: Normalized absolute difference between the remaining capacity and the item size
    diff = 1 - np.abs(bins_remain_cap - item / 2) / (bin_capacities / 2)
    diff = np.clip(diff, 0, 1)  # Ensure diff is within [0, 1]
    
    # Feature 4: Fill ratio of the bin
    fill_ratio = 1 - bins_remain_cap / bin_capacities
    
    # Combine features into a priority score with weights
    priorities = can_fit * (0.4 * remaining_capacities + 0.3 * diff + 0.3 * fill_ratio)
    
    # Add controlled noise for exploration
    noise = np.random.normal(0, 0.05, size=len(bins_remain_cap))
    priorities += noise
    
    return priorities
```
