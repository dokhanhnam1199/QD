```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    valid_bins = remaining_capacities >= 0
    
    # Normalize valid priorities to be between 0 and 1
    priorities = np.where(valid_bins, 1 - (np.abs(bins_remain_cap - item) / np.maximum(bins_remain_cap, item)), -1e6)
    
    # Add controlled noise to valid priorities for exploration-exploitation balance
    np.random.seed(0)  # For reproducibility
    priorities = np.where(valid_bins, priorities + np.random.uniform(-0.1, 0.1, size=len(priorities)), priorities)
    
    # Ensure numerical stability by clipping priorities to a reasonable range
    priorities = np.clip(priorities, -1e6, 1)
    
    return priorities
```
