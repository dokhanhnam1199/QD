[
  {
    "stdout_filepath": "problem_iter26_response0.txt_stdout.txt",
    "code_path": "problem_iter26_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_capacities = bins_remain_cap - item\n    \n    # Assign a very low priority to bins that cannot fit the item\n    priorities = np.where(remaining_capacities >= 0, remaining_capacities, -1e6)\n    \n    return priorities",
    "response_id": 0,
    "obj": 149.30195452732352,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 50.18947501009619,
    "mi": 68.98309462869048,
    "token_count": 87.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response1.txt_stdout.txt",
    "code_path": "problem_iter26_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, noise_range: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        noise_range: Range of uniform noise for exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_capacities = bins_remain_cap - item\n    \n    # Assign a very low priority to bins that cannot fit the item\n    valid_bins = remaining_capacities >= 0\n    priorities = np.where(valid_bins, remaining_capacities, -1e6)\n    \n    # Normalize the priorities for valid bins and add noise\n    if np.any(valid_bins):\n        min_priority, max_priority = np.min(priorities[valid_bins]), np.max(priorities[valid_bins])\n        if max_priority != min_priority:\n            normalized_priorities = (priorities[valid_bins] - min_priority) / (max_priority - min_priority)\n        else:\n            normalized_priorities = np.ones(np.sum(valid_bins))  # All valid bins have the same priority\n        noisy_priorities = normalized_priorities + np.random.uniform(-noise_range, noise_range, size=np.sum(valid_bins))\n        noisy_priorities = np.clip(noisy_priorities, 0, 1)  # Ensure priorities are within [0, 1]\n        priorities[valid_bins] = noisy_priorities\n    \n    return priorities",
    "response_id": 1,
    "obj": 147.69644994016755,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 50.18947501009619,
    "mi": 68.98309462869048,
    "token_count": 87.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response2.txt_stdout.txt",
    "code_path": "problem_iter26_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    Args:\n    item: Size of item to be added to the bin.\n    bins_remain_cap: Array of remaining capacities for each bin.\n    bin_capacity: The capacity of each bin.\n\n    Return:\n    Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_capacities = bins_remain_cap - item\n    \n    # Assign a very low priority to bins that cannot fit the item\n    valid_bins = remaining_capacities >= 0\n    \n    # Calculate priority scores directly related to the objective (minimize waste)\n    priorities = np.where(valid_bins, bins_remain_cap - item, -1e6)\n    \n    # Normalize valid priorities to be within [0, 1] range for valid bins\n    valid_priorities = priorities[valid_bins]\n    priorities[valid_bins] = (valid_priorities - np.min(valid_priorities)) / (np.max(valid_priorities) - np.min(valid_priorities) + 1e-9)\n    \n    # Invert the normalized priorities so that the bin with the least remaining capacity has the highest priority\n    priorities[valid_bins] = 1 - priorities[valid_bins]\n    \n    # Add controlled noise for exploration-exploitation balance\n    noise = np.random.uniform(-0.01, 0.01, size=len(bins_remain_cap))\n    priorities = np.where(valid_bins, priorities + noise[valid_bins], priorities)\n    \n    return priorities",
    "response_id": 2,
    "exec_success": false,
    "obj": Infinity,
    "traceback_msg": "Traceback (most recent call last):\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 112, in <module>\n    avg_num_bins = -evaluate(dataset)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 55, in evaluate\n    _, bins_packed = online_binpack(items.astype(float), bins)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 28, in online_binpack\n    priorities = priority(item, bins[valid_bin_indices])\nTypeError: priority_v2() missing 1 required positional argument: 'bin_capacity'\n5\n1\n50.18947501009619\n68.98309462869048\n87\n"
  },
  {
    "stdout_filepath": "problem_iter26_response3.txt_stdout.txt",
    "code_path": "problem_iter26_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float, epsilon: float = 1e-6, noise_scale: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    Args:\n    item: Size of item to be added to the bin.\n    bins_remain_cap: Array of remaining capacities for each bin.\n    bin_capacity: The capacity of each bin.\n    epsilon: Small value to avoid division by zero.\n    noise_scale: Scale of the noise to be added for exploration.\n\n    Return:\n    Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_capacities = bins_remain_cap - item\n    \n    # Identify bins that can fit the item\n    valid_bins = remaining_capacities >= 0\n    \n    # Normalize the remaining capacity for valid bins\n    normalized_remain_cap = bins_remain_cap / bin_capacity\n    \n    # Calculate priority scores directly related to the objective (smaller remaining capacity is better)\n    priorities = np.where(valid_bins, -(normalized_remain_cap - (bin_capacity - item) / bin_capacity) ** 2, -1e6)\n    \n    # Add controlled noise to the priority scores for exploration-exploitation balance\n    np.random.seed(0)  # For reproducibility\n    noise = noise_scale * np.random.randn(*priorities.shape)\n    priorities = np.where(valid_bins, priorities + noise, priorities)\n    \n    return priorities",
    "response_id": 3,
    "exec_success": false,
    "obj": Infinity,
    "traceback_msg": "Traceback (most recent call last):\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 112, in <module>\n    avg_num_bins = -evaluate(dataset)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 55, in evaluate\n    _, bins_packed = online_binpack(items.astype(float), bins)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 28, in online_binpack\n    priorities = priority(item, bins[valid_bin_indices])\nTypeError: priority_v2() missing 1 required positional argument: 'bin_capacity'\n5\n1\n50.18947501009619\n68.98309462869048\n87\n"
  },
  {
    "stdout_filepath": "problem_iter26_response4.txt_stdout.txt",
    "code_path": "problem_iter26_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 1e-6, noise_scale: float = 0.1, seed: int = None) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        epsilon: Small value to prevent division by zero.\n        noise_scale: Scale of the noise to be added.\n        seed: Random seed for reproducibility.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Assign a very low priority to bins that cannot fit the item\n    priorities = np.where(bins_remain_cap >= item, bins_remain_cap - item, -1e6)\n    \n    # Normalize priorities for valid bins to be within [0, 1] and invert to prioritize tighter fits\n    valid_bins = priorities != -1e6\n    if np.any(valid_bins):\n        min_priority, max_priority = np.min(priorities[valid_bins]), np.max(priorities[valid_bins])\n        if max_priority != min_priority:  # Check to avoid division by zero\n            priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + epsilon)\n            priorities[valid_bins] = 1 - priorities[valid_bins]  # Invert to prioritize tighter fits\n            # Add controlled noise for exploration-exploitation balance\n            priorities[valid_bins] += noise_scale * np.random.rand(np.sum(valid_bins))\n            # Ensure priorities are within [0, 1] after adding noise\n            priorities[valid_bins] = np.clip(priorities[valid_bins], 0, 1)\n    \n    return priorities",
    "response_id": 4,
    "obj": 4.248105305145606,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 50.18947501009619,
    "mi": 68.98309462869048,
    "token_count": 87.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response5.txt_stdout.txt",
    "code_path": "problem_iter26_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, noise_scale: float = 0.01) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        noise_scale: Scale of noise to add for exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_capacities = bins_remain_cap - item\n    \n    # Assign a very low priority to bins that cannot fit the item\n    priorities = np.where(remaining_capacities >= 0, \n                          # Prioritize bins with remaining capacity closest to 0 (i.e., most full)\n                          1 / (1 + remaining_capacities), \n                          -1e6)\n    \n    # Introduce a controlled noise to valid bins for exploration-exploitation balance\n    valid_bins = priorities != -1e6\n    noise = np.random.uniform(-noise_scale, noise_scale, size=len(bins_remain_cap))\n    priorities = np.where(valid_bins, priorities + noise, priorities)\n    \n    return priorities",
    "response_id": 5,
    "obj": 4.028719585161557,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 50.18947501009619,
    "mi": 68.98309462869048,
    "token_count": 87.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response6.txt_stdout.txt",
    "code_path": "problem_iter26_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, bin_max_cap: float) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        bin_max_cap: Maximum capacity of a bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the waste if the item is added to each bin\n    waste_if_added = np.where(bins_remain_cap >= item, bins_remain_cap - item, bin_max_cap)\n    \n    # Calculate priority scores directly related to minimizing waste\n    priorities = -waste_if_added / bin_max_cap\n    \n    # Add controlled noise for exploration-exploitation balance only to valid bins\n    valid_bins = bins_remain_cap >= item\n    noise = np.random.uniform(-0.01, 0.01, size=len(bins_remain_cap))\n    priorities = np.where(valid_bins, priorities + noise, -1e6)\n    \n    return priorities",
    "response_id": 6,
    "exec_success": false,
    "obj": Infinity,
    "traceback_msg": "Traceback (most recent call last):\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 112, in <module>\n    avg_num_bins = -evaluate(dataset)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 55, in evaluate\n    _, bins_packed = online_binpack(items.astype(float), bins)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 28, in online_binpack\n    priorities = priority(item, bins[valid_bin_indices])\nTypeError: priority_v2() missing 1 required positional argument: 'bin_max_cap'\n5\n1\n50.18947501009619\n68.98309462869048\n87\n"
  },
  {
    "stdout_filepath": "problem_iter26_response7.txt_stdout.txt",
    "code_path": "problem_iter26_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, noise_range: float = 0.01) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        noise_range: Range of uniform noise for exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_capacities = bins_remain_cap - item\n    \n    # Assign a very low priority to bins that cannot fit the item\n    valid_bins = remaining_capacities >= 0\n    priorities = np.where(valid_bins, remaining_capacities / bins_remain_cap, -1e6)\n    \n    # Normalize the priorities for valid bins and add noise\n    if np.any(valid_bins):\n        min_priority, max_priority = np.min(priorities[valid_bins]), np.max(priorities[valid_bins])\n        denominator = max_priority - min_priority if max_priority != min_priority else 1\n        normalized_priorities = (priorities[valid_bins] - min_priority) / denominator\n        noisy_priorities = normalized_priorities + np.random.uniform(-noise_range, noise_range, size=np.sum(valid_bins))\n        priorities[valid_bins] = np.clip(noisy_priorities, 0, 1)\n    \n    return priorities",
    "response_id": 7,
    "obj": 148.26485839648984,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 50.18947501009619,
    "mi": 68.98309462869048,
    "token_count": 87.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response8.txt_stdout.txt",
    "code_path": "problem_iter26_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        bin_capacity: The capacity of each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_capacities = bins_remain_cap - item\n    \n    # Assign a very low priority to bins that cannot fit the item\n    valid_bins = remaining_capacities >= 0\n    \n    # Calculate priority scores directly related to the objective (minimize waste)\n    priorities = np.where(valid_bins, (bin_capacity - remaining_capacities) / bin_capacity, -1e6)\n    \n    # Add controlled noise for exploration-exploitation balance\n    noise = np.random.uniform(-0.1, 0.1, size=len(bins_remain_cap))\n    priorities = np.where(valid_bins, priorities + noise[valid_bins], priorities)\n    \n    # Ensure priorities are within [0, 1] range for valid bins after adding noise\n    priorities[valid_bins] = np.clip(priorities[valid_bins], 0, 1)\n    \n    return priorities",
    "response_id": 8,
    "exec_success": false,
    "obj": Infinity,
    "traceback_msg": "Traceback (most recent call last):\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 112, in <module>\n    avg_num_bins = -evaluate(dataset)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 55, in evaluate\n    _, bins_packed = online_binpack(items.astype(float), bins)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 28, in online_binpack\n    priorities = priority(item, bins[valid_bin_indices])\nTypeError: priority_v2() missing 1 required positional argument: 'bin_capacity'\n5\n1\n50.18947501009619\n68.98309462869048\n87\n"
  },
  {
    "stdout_filepath": "problem_iter26_response9.txt_stdout.txt",
    "code_path": "problem_iter26_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, noise_scale: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    Args:\n    item: Size of item to be added to the bin.\n    bins_remain_cap: Array of capacities for each bin.\n    noise_scale: Scale of noise to add for exploration.\n\n    Return:\n    Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the waste if the item is added to each bin\n    waste_if_added = np.maximum(bins_remain_cap - item, 0)\n    \n    # Assign a very low priority to bins that cannot fit the item\n    priorities = np.where(bins_remain_cap >= item, waste_if_added, -1e6)\n    \n    # Add noise for exploration-exploitation balance\n    priorities += noise_scale * np.random.randn(*priorities.shape)\n    \n    return priorities",
    "response_id": 9,
    "obj": 149.30195452732352,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 50.18947501009619,
    "mi": 68.98309462869048,
    "token_count": 87.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter27_response0.txt_stdout.txt",
    "code_path": "problem_iter27_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_capacities = bins_remain_cap - item\n    \n    # Assign a very low priority to bins that cannot fit the item\n    valid_bins = remaining_capacities >= 0\n    \n    # Normalize the priorities for valid bins using the remaining capacity\n    priorities = np.where(valid_bins, 1 - (remaining_capacities / bins_remain_cap), -1e6)\n    \n    # Add controlled noise for exploration-exploitation balance\n    np.random.seed(0)  # For reproducibility\n    priorities = np.where(valid_bins, priorities + 1e-6 * np.random.rand(*priorities.shape), priorities)\n    \n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 95.90827503317318,
    "mi": 78.44065508972666,
    "token_count": 115.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter27_response1.txt_stdout.txt",
    "code_path": "problem_iter27_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_capacities = bins_remain_cap - item\n    \n    # Assign a very low priority to bins that cannot fit the item\n    valid_bins = remaining_capacities >= 0\n    \n    # Normalize the valid priorities to be between 0 and 1\n    priorities = np.where(valid_bins, 1 - (remaining_capacities / bins_remain_cap), 0)\n    \n    # Add a small controlled noise to valid priorities for exploration-exploitation balance\n    priorities = np.where(valid_bins, priorities + np.random.normal(0, 0.01, size=len(priorities)), -1e6)\n    \n    return priorities",
    "response_id": 1,
    "obj": 4.028719585161557,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 95.90827503317318,
    "mi": 78.44065508972666,
    "token_count": 115.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter27_response2.txt_stdout.txt",
    "code_path": "problem_iter27_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_capacities = bins_remain_cap - item\n    \n    # Assign a very low priority to bins that cannot fit the item\n    valid_bins = remaining_capacities >= 0\n    \n    # Normalize valid priorities to be between 0 and 1\n    max_remaining_cap = np.max(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 1\n    min_remaining_cap = np.min(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 0\n    \n    priorities = np.where(valid_bins, \n                          (bins_remain_cap - item) / max_remaining_cap, \n                          -1e6)\n    \n    # Add controlled noise to valid priorities for exploration-exploitation balance\n    np.random.seed(0)  # For reproducibility\n    priorities = np.where(valid_bins, priorities + 1e-6 * np.random.rand(*priorities.shape), priorities)\n    \n    return priorities",
    "response_id": 2,
    "obj": 149.30195452732352,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 95.90827503317318,
    "mi": 78.44065508972666,
    "token_count": 115.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter27_response3.txt_stdout.txt",
    "code_path": "problem_iter27_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_capacities = bins_remain_cap - item\n    \n    # Assign a very low priority to bins that cannot fit the item\n    valid_bins = remaining_capacities >= 0\n    \n    # Normalize valid priorities to be between 0 and 1\n    priorities = np.where(valid_bins, 1 - (np.abs(bins_remain_cap - item) / np.maximum(bins_remain_cap, item)), -1e6)\n    \n    # Add controlled noise to valid priorities for exploration-exploitation balance\n    np.random.seed(0)  # For reproducibility\n    priorities = np.where(valid_bins, priorities + np.random.uniform(-0.1, 0.1, size=len(priorities)), priorities)\n    \n    # Ensure numerical stability by clipping priorities to a reasonable range\n    priorities = np.clip(priorities, -1e6, 1)\n    \n    return priorities",
    "response_id": 3,
    "obj": 4.287993617869964,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 95.90827503317318,
    "mi": 78.44065508972666,
    "token_count": 115.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter27_response4.txt_stdout.txt",
    "code_path": "problem_iter27_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_capacities = bins_remain_cap - item\n    \n    # Assign a very low priority to bins that cannot fit the item\n    valid_bins = remaining_capacities >= 0\n    \n    # Normalize the priorities for valid bins\n    priorities = np.where(valid_bins, 1 - (np.abs(bins_remain_cap - item) / bins_remain_cap), 0)\n    \n    # Add controlled noise to valid bin priorities for exploration-exploitation balance\n    np.random.seed(0)  # For reproducibility\n    priorities = np.where(valid_bins, priorities + 1e-6 * np.random.rand(*priorities.shape), -1e6)\n    \n    return priorities",
    "response_id": 4,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 95.90827503317318,
    "mi": 78.44065508972666,
    "token_count": 115.0,
    "exec_success": true
  }
]