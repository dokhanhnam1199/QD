```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacity: The maximum capacity of a bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(remaining_capacities >= 0, 
                          # Prioritize bins that have a remaining capacity closest to the item size
                          # and also have a larger remaining capacity
                          (bins_remain_cap - item) / bin_capacity + (1 - np.abs(bins_remain_cap - item - (bins_remain_cap - item).mean()) / (1 + (bins_remain_cap - item).std())),
                          -1e6)
    
    return priorities
```
