{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        epsilon: Small value to avoid division by zero.\n        seed: Random seed for reproducibility.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Set random seed for reproducibility\n    if seed is not None:\n        np.random.seed(seed)\n\n    # Calculate the remaining capacity after adding the item\n    remaining_capacities = bins_remain_cap - item\n\n    # Assign a very low priority to bins that cannot fit the item\n    priorities = np.where(remaining_capacities >= 0, bins_remain_cap - item, -1e6)\n\n    # Check if there are bins that can fit the item\n    valid_bins = remaining_capacities >= 0\n    if np.any(valid_bins):\n        valid_priorities = priorities[valid_bins]\n        \n        # Normalize priorities for bins that can fit the item\n        min_priority, max_priority = np.min(valid_priorities), np.max(valid_priorities)\n        \n        # Check if all valid priorities are the same to avoid division by zero\n        if max_priority != min_priority:\n            normalized_priorities = (valid_priorities - min_priority) / (max_priority - min_priority)\n            \n            # Add controlled randomness to the normalized priorities\n            noise = np.random.uniform(-1, 1, size=len(valid_priorities))\n            scaled_noise = 0.1 * noise  # Scaled noise in the range [-0.1, 0.1]\n            noisy_normalized_priorities = normalized_priorities + scaled_noise\n            \n            # Ensure noisy priorities are within [0, 1] range\n            noisy_normalized_priorities = np.clip(noisy_normalized_priorities, 0, 1)\n            \n            # Update priorities for bins that can fit the item with noisy normalized priorities\n            priorities[valid_bins] = noisy_normalized_priorities\n        else:\n            # If all valid priorities are the same, assign a constant priority (e.g., 1) and add some noise\n            priorities[valid_bins] = 1 + 0.1 * np.random.uniform(-1, 1, size=np.sum(valid_bins))\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_capacities = bins_remain_cap - item\n    \n    # Assign a very low priority to bins that cannot fit the item\n    priorities = np.where(remaining_capacities >= 0, -np.abs(bins_remain_cap - item), -1e6)\n    \n    # To further differentiate bins that can fit the item, we use a combination of \n    # the remaining capacity and the absolute difference between the remaining capacity and the item size\n    priorities = np.where(remaining_capacities >= 0, priorities + remaining_capacities / (1 + np.abs(remaining_capacities - item)), priorities)\n    \n    return priorities\n\n[Reflection]\nSimplify priority functions and focus on meaningful problem-related features to design better heuristics for online bin packing.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}