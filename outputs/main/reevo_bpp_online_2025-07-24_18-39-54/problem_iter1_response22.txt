```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Mask for bins that can accommodate the item
    valid_bins = remaining_after_addition >= 0
    
    # For valid bins, the priority is inversely proportional to the remaining capacity after addition
    # This encourages packing items tightly
    priorities = np.where(valid_bins, 1 / (1 + remaining_after_addition), -np.inf)
    
    # Normalize the priorities to be between 0 and 1 for valid bins
    max_priority = np.max(priorities[valid_bins]) if np.any(valid_bins) else 0
    min_priority = np.min(priorities[valid_bins]) if np.any(valid_bins) else 0
    priorities = np.where(valid_bins, (priorities - min_priority) / (max_priority - min_priority + 1e-8), -np.inf)
    
    return priorities
```
