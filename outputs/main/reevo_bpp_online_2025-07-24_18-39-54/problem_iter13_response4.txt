```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(remaining_capacities >= 0, 1 - (item / (bins_remain_cap + 1e-6)), -1e6)
    
    # Normalize priorities to be between 0 and 1 for bins that can fit the item
    valid_priorities = priorities[priorities > -1e5]
    if len(valid_priorities) > 0:
        min_priority = np.min(valid_priorities)
        max_priority = np.max(valid_priorities)
        priorities[priorities > -1e5] = (valid_priorities - min_priority) / (max_priority - min_priority + 1e-6)
    
    # Add controlled noise to balance exploitation and exploration
    np.random.seed(0)  # For reproducibility
    priorities += np.random.normal(0, 0.01, size=len(priorities))
    
    return priorities
```
