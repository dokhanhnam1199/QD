```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate a meaningful feature: the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(remaining_capacities >= 0, -np.abs(bins_remain_cap - item), -1e6)
    
    # Simplify the priority function using the remaining capacity as a feature
    priorities = np.where(remaining_capacities >= 0, remaining_capacities, priorities)
    
    # Add controlled noise for exploration
    np.random.seed(0)  # For reproducibility
    noise = np.random.normal(0, 0.1, size=len(bins_remain_cap))  # Mean 0, std dev 0.1
    priorities += noise
    
    # Normalize scores to balance exploitation and exploration
    min_priority, max_priority = np.min(priorities), np.max(priorities)
    if max_priority != min_priority:  # Avoid division by zero
        priorities = (priorities - min_priority) / (max_priority - min_priority)
    
    return priorities
```
