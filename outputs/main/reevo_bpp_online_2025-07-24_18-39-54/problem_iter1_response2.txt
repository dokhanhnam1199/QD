```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that can fit the item should have higher priority
    can_fit = remaining_after_addition >= 0
    
    # For bins that can fit the item, higher remaining capacity after addition gets lower priority
    # For bins that cannot fit the item, lower remaining capacity gets higher priority (to avoid them)
    priorities = np.where(can_fit, -remaining_after_addition, 1 / (1 + bins_remain_cap))
    
    # Normalize the priorities to avoid extreme values
    priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities) + 1e-8)
    
    return priorities
```
