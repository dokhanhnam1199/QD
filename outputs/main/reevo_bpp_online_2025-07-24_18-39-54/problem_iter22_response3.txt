```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize the remaining capacities and item size by the maximum capacity
    max_cap = np.max(bins_remain_cap)
    normalized_bins_remain_cap = bins_remain_cap / max_cap
    normalized_item = item / max_cap
    
    # Calculate the priority based on the difference between the remaining capacity and the item size
    priorities = np.where(normalized_bins_remain_cap >= normalized_item, 
                          -(normalized_bins_remain_cap - normalized_item), 
                          -1e6)
    
    # Introduce a controlled noise to valid bins for exploration-exploitation balance
    valid_bins = priorities != -1e6
    noise = np.random.uniform(-0.01, 0.01, size=len(bins_remain_cap))
    priorities = np.where(valid_bins, priorities + noise, priorities)
    
    return priorities
```
