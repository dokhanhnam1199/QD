```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
    item: Size of item to be added to the bin.
    bins_remain_cap: Array of remaining capacities for each bin.
    bin_capacity: The capacity of each bin.

    Return:
    Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    valid_bins = remaining_capacities >= 0
    
    # Calculate priority scores directly related to the objective (minimize waste)
    priorities = np.where(valid_bins, bins_remain_cap - item, -1e6)
    
    # Normalize valid priorities to be within [0, 1] range for valid bins
    valid_priorities = priorities[valid_bins]
    priorities[valid_bins] = (valid_priorities - np.min(valid_priorities)) / (np.max(valid_priorities) - np.min(valid_priorities) + 1e-9)
    
    # Invert the normalized priorities so that the bin with the least remaining capacity has the highest priority
    priorities[valid_bins] = 1 - priorities[valid_bins]
    
    # Add controlled noise for exploration-exploitation balance
    noise = np.random.uniform(-0.01, 0.01, size=len(bins_remain_cap))
    priorities = np.where(valid_bins, priorities + noise[valid_bins], priorities)
    
    return priorities
```
