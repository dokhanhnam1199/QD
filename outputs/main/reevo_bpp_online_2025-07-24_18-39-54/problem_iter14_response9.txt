```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacities: float) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacities: The capacity of each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Feature: Normalized remaining capacity after adding the item
    remaining_capacities = np.maximum(bins_remain_cap - item, 0) / bin_capacities
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(bins_remain_cap >= item, remaining_capacities, -1e6)
    
    # Add controlled noise to balance exploitation and exploration
    priorities += np.random.normal(0, 0.01, size=len(bins_remain_cap))
    
    return priorities
```
