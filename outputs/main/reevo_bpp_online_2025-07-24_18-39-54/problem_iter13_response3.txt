```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize the remaining capacity
    max_remain_cap = np.max(bins_remain_cap)
    normalized_remain_cap = bins_remain_cap / (max_remain_cap + 1e-6)
    
    # Calculate the fit criterion: how well the item fits into the bin
    fit_criterion = 1 - np.abs(bins_remain_cap - item) / (np.maximum(bins_remain_cap, item) + 1e-6)
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(bins_remain_cap >= item, normalized_remain_cap + fit_criterion, -1e6)
    
    # Add some noise to the priorities to balance exploitation and exploration
    priorities += np.random.normal(loc=0, scale=0.01, size=len(bins_remain_cap))
    
    return priorities
```
