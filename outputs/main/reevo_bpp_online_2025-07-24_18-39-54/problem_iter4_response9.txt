```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        bin_capacity: The capacity of each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that can't fit the item get a priority of -inf
    priorities = np.where(remaining_after_addition >= 0, (bins_remain_cap - item) / bin_capacity, -np.inf)
    
    # Add a small random noise to break ties among valid bins
    valid_bins = priorities != -np.inf
    if np.any(valid_bins):
        priorities[valid_bins] += np.random.uniform(0, 1e-6, size=np.sum(valid_bins))
    
    return priorities
```
