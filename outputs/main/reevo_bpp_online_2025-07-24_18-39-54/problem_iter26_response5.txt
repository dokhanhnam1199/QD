```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, noise_scale: float = 0.01) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        noise_scale: Scale of noise to add for exploration.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(remaining_capacities >= 0, 
                          # Prioritize bins with remaining capacity closest to 0 (i.e., most full)
                          1 / (1 + remaining_capacities), 
                          -1e6)
    
    # Introduce a controlled noise to valid bins for exploration-exploitation balance
    valid_bins = priorities != -1e6
    noise = np.random.uniform(-noise_scale, noise_scale, size=len(bins_remain_cap))
    priorities = np.where(valid_bins, priorities + noise, priorities)
    
    return priorities
```
