```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_max_cap: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_max_cap: Maximum capacity of a bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize the remaining capacities
    normalized_bins_remain_cap = bins_remain_cap / bin_max_cap
    
    # Calculate the normalized remaining capacity after adding the item
    remaining_capacities = normalized_bins_remain_cap - item / bin_max_cap
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(remaining_capacities >= 0, -np.abs(remaining_capacities), -1e6)
    
    # Introduce controlled noise for exploration
    noise = np.random.normal(0, 0.01, size=len(bins_remain_cap))
    priorities = np.where(remaining_capacities >= 0, priorities + noise, priorities)
    
    # Ensure numerical stability
    priorities = np.clip(priorities, -1e6, 1e6)
    
    return priorities
```
