```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Mask for bins that can fit the item
    can_fit_mask = remaining_after_addition >= 0
    
    # Initialize priorities with negative infinity for bins that can't fit the item
    priorities = np.full_like(bins_remain_cap, -np.inf)
    
    # For bins that can fit the item, calculate priority based on remaining capacity
    priorities[can_fit_mask] = remaining_after_addition[can_fit_mask] / bins_remain_cap[can_fit_mask]
    
    # Add a small random noise to break ties
    priorities[can_fit_mask] += np.random.uniform(0, 1e-6, size=np.sum(can_fit_mask))
    
    return priorities
```
