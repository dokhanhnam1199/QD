```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 1e-6, noise_scale: float = 0.01, seed: int = None) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Small value to avoid division by zero.
        noise_scale: Scale of the noise to be added to priorities.
        seed: Random seed for reproducibility.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Set random seed for reproducibility
    if seed is not None:
        np.random.seed(seed)

    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(remaining_capacities >= 0, remaining_capacities, -1e6)
    
    # Add controlled randomness to the priorities
    noise = np.random.uniform(-noise_scale, noise_scale, size=len(bins_remain_cap))
    noisy_priorities = priorities + noise
    
    return noisy_priorities
```
