```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(remaining_capacities >= 0, 
                          # Use a combination of the remaining capacity and the 
                          # absolute difference between the remaining capacity and the item size
                          -np.abs(remaining_capacities - item / 2) + remaining_capacities / (1 + item), 
                          -1e6)
    
    # To further differentiate bins, we use a combination of the bin utilization 
    # after adding the item and the remaining capacity
    bin_utilization = (bins_remain_cap - remaining_capacities) / bins_remain_cap
    priorities = np.where(remaining_capacities >= 0, 
                          priorities + 0.5 * bin_utilization + 0.2 * (1 - remaining_capacities / bins_remain_cap), 
                          priorities)
    
    return priorities
```
