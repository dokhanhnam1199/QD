```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the fit for each bin
    fit = bins_remain_cap - item
    
    # Assign priority based on the fit, with higher priority for tighter fits
    priorities = np.where(fit >= 0, 1 - (fit / bins_remain_cap), -1e6)
    
    # Add a small random noise to valid bin priorities for exploration-exploitation balance
    np.random.seed(0)  
    valid_bins = priorities != -1e6
    priorities[valid_bins] += 1e-6 * np.random.rand(np.sum(valid_bins))
    
    return priorities
```
