```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacities: float = 1.0, epsilon: float = 1e-6) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        bin_capacities: The maximum capacity of each bin.
        epsilon: Small value for numerical stability and exploration.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Identify valid bins that can accommodate the item
    valid_bins = remaining_capacities >= 0
    
    # Calculate the priority for valid bins based on how well the item fits
    priorities = np.where(valid_bins, 
                          (bins_remain_cap - item) / bin_capacities,  # Best fit heuristic normalized by bin capacity
                          -1e6)  # Very low priority for invalid bins
    
    # Add a small random noise for exploration-exploitation balance
    np.random.seed(0)  # For reproducibility
    priorities = np.where(valid_bins, priorities + epsilon * np.random.rand(*priorities.shape), priorities)
    
    return priorities
```
