```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacities: float = 1.0) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        bin_capacities: The capacity of the bins.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Feature 1: Whether the bin can fit the item
    can_fit = (bins_remain_cap >= item).astype(float)
    
    # Feature 2: Remaining capacity after adding the item (normalized by bin capacity)
    remaining_capacities = np.maximum(bins_remain_cap - item, 0) / bin_capacities
    
    # Feature 3: Fullness of the bin before adding the item (normalized)
    bin_fullness = 1 - (bins_remain_cap / bin_capacities)
    
    # Feature 4: Absolute difference between the remaining capacity and the item size (normalized by remaining capacity)
    diff = 1 - np.abs(bins_remain_cap - item) / (bins_remain_cap + 1e-6)
    diff = np.where(bins_remain_cap == 0, 0, diff)  # Handle division by zero
    
    # Combine features into a priority score with weights
    priorities = can_fit * (0.3 * remaining_capacities + 0.3 * bin_fullness + 0.4 * diff)
    
    # Add controlled noise for exploration
    noise = np.random.normal(0, 0.01, size=len(bins_remain_cap))
    priorities += noise
    
    return priorities
```
