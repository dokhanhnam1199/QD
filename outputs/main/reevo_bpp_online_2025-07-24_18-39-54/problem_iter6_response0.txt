```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 1e-6, seed: int = 0) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Small value for numerical stability.
        seed: Seed for random number generator.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(remaining_capacities >= 0, bins_remain_cap - item, -1e6)
    
    # Normalize priorities globally
    max_priority = np.max(priorities)
    min_priority = np.min(priorities)
    priorities = (priorities - min_priority) / (max_priority - min_priority + epsilon)
    
    # Introduce controlled randomness to break ties
    np.random.seed(seed)  
    priorities += np.random.uniform(0, epsilon, size=len(priorities))
    
    return priorities
```
