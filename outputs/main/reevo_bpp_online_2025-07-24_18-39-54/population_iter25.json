[
  {
    "stdout_filepath": "problem_iter24_response0.txt_stdout.txt",
    "code_path": "problem_iter24_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_capacities = bins_remain_cap - item\n    \n    # Assign a very low priority to bins that cannot fit the item\n    priorities = np.where(remaining_capacities >= 0, \n                          # Combine multiple factors: the remaining capacity and the absolute difference between the remaining capacity and the item size\n                          remaining_capacities / (1 + np.abs(remaining_capacities - item)) + \n                          # Encourage using bins that are more full (lower remaining capacity) first\n                          1 / (1 + bins_remain_cap), \n                          -1e6)\n    \n    # Introduce a controlled noise to valid bins for exploration-exploitation balance\n    valid_bins = priorities != -1e6\n    noise = np.random.uniform(-0.01, 0.01, size=len(bins_remain_cap))\n    priorities = np.where(valid_bins, priorities + noise, priorities)\n    \n    return priorities",
    "response_id": 0,
    "obj": 50.159553250897496,
    "SLOC": 3.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 20.67970000576925,
    "mi": 56.02019541935417,
    "token_count": 51.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response1.txt_stdout.txt",
    "code_path": "problem_iter24_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        bin_capacity: Capacity of each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_capacities = bins_remain_cap - item\n    \n    # Assign a very low priority to bins that cannot fit the item\n    valid_bins = remaining_capacities >= 0\n    priorities = np.where(valid_bins, (bins_remain_cap - item) / bin_capacity, -1e6)\n    \n    # Add noise to valid bins for exploration\n    if np.any(valid_bins):\n        noise = np.random.uniform(-0.1, 0.1, np.sum(valid_bins))\n        priorities[valid_bins] += noise\n    \n    return priorities",
    "response_id": 1,
    "exec_success": false,
    "obj": Infinity,
    "traceback_msg": "Traceback (most recent call last):\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 112, in <module>\n    avg_num_bins = -evaluate(dataset)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 55, in evaluate\n    _, bins_packed = online_binpack(items.astype(float), bins)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 28, in online_binpack\n    priorities = priority(item, bins[valid_bin_indices])\nTypeError: priority_v2() missing 1 required positional argument: 'bin_capacity'\n3\n1\n20.67970000576925\n56.02019541935417\n51\n"
  },
  {
    "stdout_filepath": "problem_iter24_response2.txt_stdout.txt",
    "code_path": "problem_iter24_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 1e-6, noise_scale: float = 0.01) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    Args:\n    item: Size of item to be added to the bin.\n    bins_remain_cap: Array of capacities for each bin.\n    epsilon: Small value to avoid division by zero.\n    noise_scale: Scale of noise to add for exploration.\n\n    Return:\n    Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize bins_remain_cap to ensure numerical stability\n    max_cap = np.max(bins_remain_cap)\n    norm_bins_remain_cap = bins_remain_cap / max_cap\n    \n    # Check if item can fit into any bin\n    can_fit = bins_remain_cap >= item\n    \n    # Assign a very low priority to bins that cannot fit the item\n    priorities = np.where(can_fit, norm_bins_remain_cap - item / max_cap, -1e6)\n    \n    # Add controlled noise for exploration-exploitation balance\n    priorities += noise_scale * np.random.randn(*priorities.shape)\n    \n    return priorities",
    "response_id": 2,
    "obj": 149.30195452732352,
    "SLOC": 3.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 20.67970000576925,
    "mi": 56.02019541935417,
    "token_count": 51.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response3.txt_stdout.txt",
    "code_path": "problem_iter24_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Prioritize bins that can fit the item and have the least remaining capacity\n    priorities = np.where(bins_remain_cap >= item, -(bins_remain_cap - item), -1e6)\n    \n    return priorities",
    "response_id": 3,
    "obj": 4.048663741523748,
    "SLOC": 3.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 20.67970000576925,
    "mi": 56.02019541935417,
    "token_count": 51.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response4.txt_stdout.txt",
    "code_path": "problem_iter24_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, noise_scale: float = 0.01) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        noise_scale: Scale of the noise to be added for exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Directly use the remaining capacity after adding the item as priority for valid bins\n    priorities = np.where(bins_remain_cap >= item, bins_remain_cap - item, -1e6)\n    \n    # Add noise to valid bins for exploration-exploitation balance\n    valid_bins = priorities != -1e6\n    noise = np.random.uniform(-noise_scale, noise_scale, size=len(bins_remain_cap))\n    priorities = np.where(valid_bins, priorities + noise, priorities)\n    \n    return priorities",
    "response_id": 4,
    "obj": 149.30195452732352,
    "SLOC": 3.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 20.67970000576925,
    "mi": 56.02019541935417,
    "token_count": 51.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response5.txt_stdout.txt",
    "code_path": "problem_iter24_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, noise_range: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        noise_range: Range of uniform noise for exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_capacities = bins_remain_cap - item\n    \n    # Assign a very low priority to bins that cannot fit the item\n    valid_bins = remaining_capacities >= 0\n    priorities = np.where(valid_bins, remaining_capacities, -1e6)\n    \n    # Normalize the priorities for valid bins and add noise\n    if np.any(valid_bins):\n        min_priority, max_priority = np.min(priorities[valid_bins]), np.max(priorities[valid_bins])\n        denominator = max_priority - min_priority if max_priority != min_priority else 1\n        normalized_priorities = (priorities[valid_bins] - min_priority) / denominator\n        noisy_priorities = normalized_priorities + np.random.uniform(-noise_range, noise_range, np.sum(valid_bins))\n        priorities[valid_bins] = np.clip(noisy_priorities, 0, 1)\n    \n    return priorities",
    "response_id": 5,
    "obj": 147.70642201834863,
    "SLOC": 3.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 20.67970000576925,
    "mi": 56.02019541935417,
    "token_count": 51.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response6.txt_stdout.txt",
    "code_path": "problem_iter24_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 1e-6, noise_scale: float = 0.1, seed: int = None) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        epsilon: Small value to prevent division by zero.\n        noise_scale: Scale of the noise to be added.\n        seed: Random seed for reproducibility.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    if seed is not None:\n        np.random.seed(seed)\n    \n    # Assign a very low priority to bins that cannot fit the item\n    priorities = np.where(bins_remain_cap >= item, bins_remain_cap - item, -1e6)\n    \n    # Normalize priorities for valid bins to be within [0, 1] and invert to prioritize tighter fits\n    valid_bins = priorities != -1e6\n    if np.any(valid_bins):\n        min_priority, max_priority = np.min(priorities[valid_bins]), np.max(priorities[valid_bins])\n        priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + epsilon)\n        priorities[valid_bins] = 1 - priorities[valid_bins]\n        # Add controlled noise for exploration-exploitation balance\n        priorities[valid_bins] += noise_scale * np.random.rand(np.sum(valid_bins))\n        # Ensure priorities are within [0, 1] after adding noise\n        priorities[valid_bins] = np.clip(priorities[valid_bins], 0, 1)\n    \n    return priorities",
    "response_id": 6,
    "obj": 4.2580773833266905,
    "SLOC": 3.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 20.67970000576925,
    "mi": 56.02019541935417,
    "token_count": 51.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response7.txt_stdout.txt",
    "code_path": "problem_iter24_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 1e-6, noise_scale: float = 0.01) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        epsilon: Small value to avoid division by zero.\n        noise_scale: Scale of noise to add for exploration.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize bins_remain_cap and item to ensure numerical stability\n    max_cap = np.max(bins_remain_cap)\n    normalized_bins_remain_cap = bins_remain_cap / (max_cap + epsilon)\n    normalized_item = item / (max_cap + epsilon)\n\n    # Calculate the priority based on the remaining capacity after adding the item\n    priorities = np.where(normalized_bins_remain_cap >= normalized_item, \n                          normalized_bins_remain_cap - normalized_item, \n                          -1e6)\n    \n    # Add controlled noise for exploration-exploitation balance\n    valid_bins = priorities != -1e6\n    noise = np.random.uniform(-noise_scale, noise_scale, size=len(bins_remain_cap))\n    priorities = np.where(valid_bins, priorities + noise, priorities)\n    \n    return priorities",
    "response_id": 7,
    "obj": 149.30195452732352,
    "SLOC": 3.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 20.67970000576925,
    "mi": 56.02019541935417,
    "token_count": 51.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response8.txt_stdout.txt",
    "code_path": "problem_iter24_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 1e-6, noise_scale: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    Args:\n    item: Size of item to be added to the bin.\n    bins_remain_cap: Array of capacities for each bin.\n    epsilon: Small value to avoid division by zero.\n    noise_scale: Scale of the noise to be added for exploration.\n\n    Return:\n    Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize the bins_remain_cap and item size to ensure numerical stability\n    max_cap = np.max(bins_remain_cap)\n    normalized_bins_remain_cap = bins_remain_cap / (max_cap + epsilon)\n    normalized_item = item / (max_cap + epsilon)\n\n    # Calculate the remaining capacity after adding the item\n    remaining_capacities = bins_remain_cap - item\n    \n    # Assign a very low priority to bins that cannot fit the item\n    priorities = np.where(remaining_capacities >= 0, -(normalized_bins_remain_cap - normalized_item) ** 2, -1e6)\n    \n    # Introduce controlled noise for exploration-exploitation balance\n    noise = noise_scale * np.random.randn(*priorities.shape)\n    priorities = np.where(priorities != -1e6, priorities + noise, priorities)\n    \n    return priorities",
    "response_id": 8,
    "obj": 6.023135221380145,
    "SLOC": 3.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 20.67970000576925,
    "mi": 56.02019541935417,
    "token_count": 51.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter24_response9.txt_stdout.txt",
    "code_path": "problem_iter24_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Assign a very low priority to bins that cannot fit the item\n    # For bins that can fit the item, prioritize the one with the least remaining capacity\n    priorities = np.where(bins_remain_cap >= item, bins_remain_cap - item, -1e6)\n    # The smaller the remaining capacity after packing, the higher the priority\n    return priorities",
    "response_id": 9,
    "obj": 149.30195452732352,
    "SLOC": 3.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 20.67970000576925,
    "mi": 56.02019541935417,
    "token_count": 51.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter25_response0.txt_stdout.txt",
    "code_path": "problem_iter25_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_capacities = bins_remain_cap - item\n    \n    # Assign a very low priority to bins that cannot fit the item\n    priorities = np.where(remaining_capacities >= 0, 1 - (item / bins_remain_cap), 0)\n    \n    # Add controlled noise to the priorities for exploration-exploitation balance\n    np.random.seed(0)  # For reproducibility\n    priorities += np.random.uniform(-0.01, 0.01, size=len(bins_remain_cap))\n    \n    # Ensure numerical stability by clipping priorities to a valid range\n    priorities = np.clip(priorities, 0, 1)\n    \n    return priorities",
    "response_id": 0,
    "obj": 149.10251296370166,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 96.0,
    "mi": 79.19322555544971,
    "token_count": 137.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter25_response1.txt_stdout.txt",
    "code_path": "problem_iter25_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_capacities = bins_remain_cap - item\n    \n    # Assign a very low priority to bins that cannot fit the item\n    valid_bins = remaining_capacities >= 0\n    \n    # Calculate priority scores directly related to the objective (minimize waste)\n    priorities = np.where(valid_bins, -remaining_capacities, -1e6)\n    \n    # Normalize valid priorities to be within [0, 1] range for valid bins\n    min_priority = np.min(priorities[valid_bins])\n    max_priority = np.max(priorities[valid_bins])\n    priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority + 1e-9)\n    \n    # Add controlled noise for exploration-exploitation balance\n    noise = np.random.uniform(-0.1, 0.1, size=len(bins_remain_cap))\n    priorities = np.where(valid_bins, priorities + noise[valid_bins], priorities)\n    \n    return priorities",
    "response_id": 1,
    "obj": 4.367770243318703,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 96.0,
    "mi": 79.19322555544971,
    "token_count": 137.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter25_response2.txt_stdout.txt",
    "code_path": "problem_iter25_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_capacities = bins_remain_cap - item\n    \n    # Assign a very low priority to bins that cannot fit the item\n    valid_bins = remaining_capacities >= 0\n    \n    # Normalize the remaining capacity for valid bins\n    max_remain_cap = np.max(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 1.0\n    normalized_remain_cap = bins_remain_cap / max_remain_cap\n    \n    # Calculate priority scores directly related to the objective (smaller remaining capacity is better)\n    priorities = np.where(valid_bins, -np.abs(normalized_remain_cap - item / max_remain_cap), -1e6)\n    \n    # Add controlled noise to the priority scores for exploration-exploitation balance\n    np.random.seed(0)  # For reproducibility\n    priorities[valid_bins] += np.random.uniform(-0.1, 0.1, size=np.sum(valid_bins))\n    \n    return priorities",
    "response_id": 2,
    "obj": 4.457518946948548,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 96.0,
    "mi": 79.19322555544971,
    "token_count": 137.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter25_response3.txt_stdout.txt",
    "code_path": "problem_iter25_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_capacities = bins_remain_cap - item\n    \n    # Assign a very low priority to bins that cannot fit the item\n    valid_bins = remaining_capacities >= 0\n    \n    # Normalize the remaining capacity for valid bins\n    max_remain_cap = np.max(bins_remain_cap[valid_bins]) if np.any(valid_bins) else 1.0\n    normalized_remain_cap = bins_remain_cap / max_remain_cap\n    \n    # Calculate priority based on how well the item fits into the bin\n    priorities = np.where(valid_bins, 1 - np.abs(normalized_remain_cap - item / max_remain_cap), -1e6)\n    \n    # Add some noise for exploration-exploitation balance\n    np.random.seed(0)  # For reproducibility\n    priorities += np.random.uniform(-0.01, 0.01, size=len(bins_remain_cap))\n    \n    return priorities",
    "response_id": 3,
    "obj": 4.038691663342641,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 96.0,
    "mi": 79.19322555544971,
    "token_count": 137.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter25_response4.txt_stdout.txt",
    "code_path": "problem_iter25_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_capacities = bins_remain_cap - item\n    \n    # Assign a very low priority to bins that cannot fit the item\n    valid_bins = remaining_capacities >= 0\n    \n    # Normalize the valid priorities to be between 0 and 1\n    priorities = np.where(valid_bins, 1 - (np.abs(bins_remain_cap - item) / bins_remain_cap), 0)\n    \n    # Add controlled noise for exploration-exploitation balance\n    np.random.seed(0)  # For reproducibility\n    priorities = np.where(valid_bins, priorities + np.random.uniform(-0.1, 0.1, size=len(priorities)), -1e6)\n    \n    # Ensure numerical stability by clipping priorities to a valid range\n    priorities = np.clip(priorities, -1e6, 1)\n    \n    return priorities",
    "response_id": 4,
    "obj": 4.287993617869964,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 96.0,
    "mi": 79.19322555544971,
    "token_count": 137.0,
    "exec_success": true
  }
]