```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the relative waste if the item is added to each bin
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    relative_waste = np.where(remaining_capacities >= 0, remaining_capacities / (item + 1e-6), -1e6)
    
    # Add controlled noise to the relative waste to balance exploitation and exploration
    noise = np.random.uniform(-0.1, 0.1, size=len(bins_remain_cap))
    priorities = relative_waste + noise
    
    return priorities
```
