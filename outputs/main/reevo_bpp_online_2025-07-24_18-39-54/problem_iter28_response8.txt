```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, noise_scale: float = 0.1) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
    item: Size of item to be added to the bin.
    bins_remain_cap: Array of capacities for each bin.
    noise_scale: Scale of noise to add for exploration.

    Return:
    Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    valid_bins = remaining_capacities >= 0
    
    # Calculate the priority score based on how well the item fits the bin
    priorities = np.where(valid_bins, 1 - (np.abs(remaining_capacities) / bins_remain_cap), -1e6)
    
    # Normalize valid priorities to be between 0 and 1
    valid_priorities = priorities[valid_bins]
    if len(valid_priorities) > 0:
        valid_priorities = (valid_priorities - np.min(valid_priorities)) / (np.max(valid_priorities) - np.min(valid_priorities) + 1e-6)
    priorities[valid_bins] = valid_priorities
    
    # Add controlled noise to valid priorities for exploration-exploitation balance
    np.random.seed(0)  # For reproducibility
    priorities = np.where(valid_bins, priorities + noise_scale * np.random.uniform(-1, 1, size=len(priorities)), priorities)
    
    # Ensure numerical stability by clipping priorities to a reasonable range
    priorities = np.clip(priorities, -1e6, 1)
    
    return priorities
```
