```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that can fit the item should have higher priority
    can_fit = remaining_after_addition >= 0
    
    # Prioritize bins that have just enough capacity for the item
    priorities = np.where(can_fit, -np.abs(remaining_after_addition), -np.inf)
    
    # To avoid assigning the same priority to all bins that can fit the item, 
    # we further differentiate them by considering the number of items they have held so far
    # Here, we assume that the index of the bin represents the number of items it has held
    # (i.e., older bins have lower indices)
    priorities += np.where(can_fit, -bins_remain_cap.size + np.arange(bins_remain_cap.size), 0) * 1e-6
    
    return priorities
```
