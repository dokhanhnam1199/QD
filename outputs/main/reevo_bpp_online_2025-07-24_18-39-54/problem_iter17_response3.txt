```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, noise_scale: float = 0.1, seed: int = 42) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        noise_scale: Scale of the noise added for exploration.
        seed: Random seed for reproducibility.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Set random seed for reproducibility
    np.random.seed(seed)
    
    # Calculate the relative remaining capacity after adding the item
    relative_remaining_capacities = (bins_remain_cap - item) / bins_remain_cap
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(relative_remaining_capacities >= 0, relative_remaining_capacities, -1e6)
    
    # Normalize priorities to ensure numerical stability
    max_priority = np.max(priorities)
    if max_priority != -1e6:  # Check if at least one bin can fit the item
        priorities = np.where(priorities != -1e6, (priorities - np.min(priorities[priorities != -1e6])) / (max_priority - np.min(priorities[priorities != -1e6])), priorities)
    
    # Add controlled noise for exploration
    priorities += noise_scale * np.random.rand(*priorities.shape)
    
    return priorities
```
