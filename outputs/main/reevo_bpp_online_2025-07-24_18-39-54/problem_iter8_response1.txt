```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 1e-6, seed: int = None) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Small value to avoid division by zero.
        seed: Random seed for reproducibility.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Set random seed for reproducibility
    if seed is not None:
        np.random.seed(seed)

    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item

    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(remaining_capacities >= 0, bins_remain_cap - item, -1e6)

    # Check if there are bins that can fit the item
    valid_bins = remaining_capacities >= 0
    if np.any(valid_bins):
        valid_priorities = priorities[valid_bins]
        
        # Normalize priorities for bins that can fit the item
        min_priority, max_priority = np.min(valid_priorities), np.max(valid_priorities)
        
        # Check if all valid priorities are the same to avoid division by zero
        if max_priority != min_priority:
            normalized_priorities = (valid_priorities - min_priority) / (max_priority - min_priority)
            
            # Add controlled randomness to the normalized priorities
            noise = np.random.uniform(-1, 1, size=len(valid_priorities))
            scaled_noise = 0.1 * noise  # Scaled noise in the range [-0.1, 0.1]
            noisy_normalized_priorities = normalized_priorities + scaled_noise
            
            # Ensure noisy priorities are within [0, 1] range
            noisy_normalized_priorities = np.clip(noisy_normalized_priorities, 0, 1)
            
            # Update priorities for bins that can fit the item with noisy normalized priorities
            priorities[valid_bins] = noisy_normalized_priorities
        else:
            # If all valid priorities are the same, assign a constant priority (e.g., 1) and add some noise
            priorities[valid_bins] = 1 + 0.1 * np.random.uniform(-1, 1, size=np.sum(valid_bins))

    return priorities
```
