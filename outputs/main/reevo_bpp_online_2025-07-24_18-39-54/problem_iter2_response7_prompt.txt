{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Initialize priority scores with a very low value for bins that can't fit the item\n    priorities = np.where(remaining_after_addition >= 0, remaining_after_addition, -1e9)\n    \n    # Give higher priority to bins that have a remaining capacity closest to the item size\n    # This is achieved by giving a bonus to bins where the remaining capacity after addition is closest to zero\n    bonus = np.exp(-np.abs(remaining_after_addition))\n    \n    # Combine the priorities and the bonus\n    priorities = priorities + bonus\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_after_addition = bins_remain_cap - item\n    \n    # Mask for bins that can accommodate the item\n    valid_bins = remaining_after_addition >= 0\n    \n    # For valid bins, the priority is inversely proportional to the remaining capacity after addition\n    # This encourages packing items tightly\n    priorities = np.where(valid_bins, 1 / (1 + remaining_after_addition), -np.inf)\n    \n    # Normalize the priorities to be between 0 and 1 for valid bins\n    max_priority = np.max(priorities[valid_bins]) if np.any(valid_bins) else 0\n    min_priority = np.min(priorities[valid_bins]) if np.any(valid_bins) else 0\n    priorities = np.where(valid_bins, (priorities - min_priority) / (max_priority - min_priority + 1e-8), -np.inf)\n    \n    return priorities\n\n[Reflection]\nTo design better heuristics, analyze the problem structure, and utilize problem-specific insights to guide priority function design.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}