```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacities: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacities: Array of total capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(remaining_capacities >= 0, 
                          # Use a combination of the remaining capacity and the 
                          # absolute difference between the remaining capacity and the item size
                          -0.4 * np.abs(remaining_capacities - item / 2) / bin_capacities + 
                          0.3 * remaining_capacities / (1 + item) + 
                          0.3 * (1 - remaining_capacities / bin_capacities), 
                          -1e6)
    
    return priorities
```
