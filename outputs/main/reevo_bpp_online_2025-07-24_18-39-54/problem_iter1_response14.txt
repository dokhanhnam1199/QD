```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Initialize priorities array with a default low priority for bins that cannot hold the item
    priorities = np.where(remaining_capacities >= 0, bins_remain_cap - item, -np.inf)
    
    # Normalize the priorities to be between 0 and 1 for valid bins
    valid_bins = remaining_capacities >= 0
    if np.any(valid_bins):
        min_remaining_capacity = np.min(remaining_capacities[valid_bins])
        max_remaining_capacity = np.max(remaining_capacities[valid_bins])
        if max_remaining_capacity != min_remaining_capacity:
            priorities[valid_bins] = (remaining_capacities[valid_bins] - min_remaining_capacity) / (max_remaining_capacity - min_remaining_capacity)
        else:
            priorities[valid_bins] = 1.0
    
    return priorities
```
