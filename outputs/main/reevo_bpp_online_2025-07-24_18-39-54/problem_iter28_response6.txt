```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, noise_scale: float = 1e-6) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
    item: Size of item to be added to the bin.
    bins_remain_cap: Array of capacities for each bin.
    noise_scale: Scale of noise to add for exploration.

    Return:
    Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    valid_bins = remaining_capacities >= 0
    
    # Calculate the normalized priorities for valid bins based on the relative remaining capacity
    priorities = np.where(valid_bins, 1 - (np.abs(remaining_capacities) / bins_remain_cap), -1e6)
    
    # Ensure priorities are within a comparable range
    priorities = np.clip(priorities, -1e6, 1)
    
    # Add controlled noise to valid bin priorities for exploration-exploitation balance
    np.random.seed(0)  # For reproducibility
    noise = noise_scale * np.random.rand(*priorities.shape)
    priorities = np.where(valid_bins, priorities + noise, priorities)
    
    return priorities
```
