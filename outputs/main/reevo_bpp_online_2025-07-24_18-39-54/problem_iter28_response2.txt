```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        bin_capacity: The maximum capacity of a bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    valid_bins = remaining_capacities >= 0
    
    # Normalize priorities based on relative waste
    priorities = np.where(valid_bins, 1 - ((bins_remain_cap - item) / bin_capacity), -1e6)
    
    # Adjust noise addition for valid bins, scaled by the priority itself for more exploration in higher priority bins
    np.random.seed(0)  # For reproducibility
    noise = 1e-6 * np.random.rand(*priorities.shape)
    priorities = np.where(valid_bins, priorities + priorities * noise, priorities)
    
    return priorities
```
