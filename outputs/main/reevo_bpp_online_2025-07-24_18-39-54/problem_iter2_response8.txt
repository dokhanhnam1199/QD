```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacity: The capacity of each bin.

    Return:
        Array of same size as bins_remain_cap with normalized priority score of each bin.
    """
    # Calculate the remaining capacity ratio after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot accommodate the item
    priorities = np.where(remaining_after_addition >= 0, 
                          # For bins that can accommodate the item, prioritize the one with the least remaining capacity ratio
                          1 - (remaining_after_addition / bin_capacity), 
                          # For bins that cannot accommodate the item, assign a very low priority
                          -np.inf)
    
    # Normalize the priority scores to be within [0, 1] for valid bins
    valid_bins = np.isfinite(priorities)
    if np.any(valid_bins):
        min_priority = np.min(priorities[valid_bins])
        max_priority = np.max(priorities[valid_bins])
        if max_priority != min_priority:
            priorities[valid_bins] = (priorities[valid_bins] - min_priority) / (max_priority - min_priority)
    
    return priorities
```
