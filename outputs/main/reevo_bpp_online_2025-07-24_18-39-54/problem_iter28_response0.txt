```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bins_full_cap: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bins_full_cap: Full capacity of the bins.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot fit the item
    valid_bins = remaining_capacities >= 0
    
    # Normalize the valid priorities to be between 0 and 1, using the full capacity for normalization
    priorities = np.where(valid_bins, 1 - (remaining_capacities / bins_full_cap), 0)
    
    # Add a small controlled noise to valid priorities for exploration-exploitation balance
    # Using a truncated normal distribution to avoid negative priorities
    noise = np.clip(np.random.normal(0, 0.01, size=len(priorities)), a_min=0, a_max=None)
    priorities = np.where(valid_bins, priorities + noise, -1e6)
    
    return priorities
```
