```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, noise_scale: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        noise_scale: Scale of the noise to be added for exploration.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize the bins_remain_cap to ensure numerical stability
    max_cap = np.max(bins_remain_cap)
    if max_cap == 0:
        return np.zeros_like(bins_remain_cap)
    
    normalized_bins_remain_cap = bins_remain_cap / max_cap
    
    # Calculate the remaining capacity after adding the item
    remaining_capacities = normalized_bins_remain_cap - item / max_cap
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(remaining_capacities >= 0, -np.abs(normalized_bins_remain_cap - item / max_cap), -1e6)
    
    # To further differentiate bins that can fit the item, we use the remaining capacity
    priorities = np.where(remaining_capacities >= 0, priorities + remaining_capacities, priorities)
    
    # Introduce controlled noise to balance exploration-exploitation
    noise = np.random.normal(0, noise_scale, size=len(bins_remain_cap))
    priorities = priorities + noise
    
    return priorities
```
