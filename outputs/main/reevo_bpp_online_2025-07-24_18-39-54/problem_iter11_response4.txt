```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Feature 1: Whether the bin can fit the item (simplified representation)
    can_fit = (bins_remain_cap >= item).astype(float)
    
    # Feature 2: Remaining capacity after adding the item (normalized)
    remaining_capacities = np.maximum(bins_remain_cap - item, 0) / (item + 1e-6)
    
    # Feature 3: Absolute difference between the remaining capacity and the item size (normalized)
    diff = 1 - np.abs(bins_remain_cap - item) / (bins_remain_cap + 1e-6)
    
    # Combine features into a priority score
    priorities = can_fit * (0.5 * remaining_capacities + 0.5 * diff)
    
    # Add controlled noise for exploration
    noise = np.random.normal(0, 0.1, size=len(bins_remain_cap))
    priorities += noise
    
    return priorities
```
