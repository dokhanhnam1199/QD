```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float, epsilon: float = 1e-6, noise_scale: float = 0.1) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
    item: Size of item to be added to the bin.
    bins_remain_cap: Array of remaining capacities for each bin.
    bin_capacity: The capacity of each bin.
    epsilon: Small value to avoid division by zero.
    noise_scale: Scale of the noise to be added for exploration.

    Return:
    Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Identify bins that can fit the item
    valid_bins = remaining_capacities >= 0
    
    # Normalize the remaining capacity for valid bins
    normalized_remain_cap = bins_remain_cap / bin_capacity
    
    # Calculate priority scores directly related to the objective (smaller remaining capacity is better)
    priorities = np.where(valid_bins, -(normalized_remain_cap - (bin_capacity - item) / bin_capacity) ** 2, -1e6)
    
    # Add controlled noise to the priority scores for exploration-exploitation balance
    np.random.seed(0)  # For reproducibility
    noise = noise_scale * np.random.randn(*priorities.shape)
    priorities = np.where(valid_bins, priorities + noise, priorities)
    
    return priorities
```
