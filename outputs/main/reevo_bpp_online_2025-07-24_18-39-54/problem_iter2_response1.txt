```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        bin_capacity: The maximum capacity of a bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot accommodate the item
    priorities = np.where(remaining_after_addition >= 0, 
                          # For bins that can accommodate the item, prioritize based on the 'best-fit' heuristic
                          # and also encourage using newer bins (with more remaining capacity) to some extent
                          -remaining_after_addition / bin_capacity + 0.01 * (bins_remain_cap / bin_capacity), 
                          # For bins that cannot accommodate the item, assign a very low priority
                          -np.inf)
    
    return priorities
```
