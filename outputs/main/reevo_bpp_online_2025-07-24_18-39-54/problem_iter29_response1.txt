```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 1e-6, noise_scale: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Small value for numerical stability.
        noise_scale: Scale of noise to add for exploration.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the relative waste (or fitness) if the item is added to each bin
    relative_waste = np.where(bins_remain_cap >= item, (bins_remain_cap - item) / bins_remain_cap, 1e6)
    
    # Invert and normalize the relative waste to get a priority score
    priorities = 1 / (relative_waste + epsilon)
    
    # Add controlled noise to balance exploitation and exploration
    priorities += noise_scale * np.random.randn(*priorities.shape)
    
    # Assign a very low priority to bins that cannot fit the item
    priorities = np.where(bins_remain_cap >= item, priorities, -1e6)
    
    return priorities
```
