import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm assigns higher probabilities to shorter edges and penalizes edges that connect nodes that are already close to many other nodes.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate node closeness based on distances to other nodes
    node_closeness = np.sum(1 / (distance_matrix + 1e-9), axis=1)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Assign higher probability to shorter edges
                heuristics_matrix[i, j] = 1 / (distance_matrix[i, j] + 1e-9)

                # Penalize edges connecting nodes that are already close to many other nodes
                heuristics_matrix[i, j] /= (node_closeness[i] + node_closeness[j])

    return heuristics_matrix
