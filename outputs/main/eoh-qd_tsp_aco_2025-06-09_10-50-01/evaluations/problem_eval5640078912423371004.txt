import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm generates multiple random tours, evaluates their lengths, and uses the frequency with which each edge appears in good tours to create a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    top_k = 100 

    all_tours = []
    all_tour_lengths = []

    for _ in range(num_samples):
        tour = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]
        all_tours.append(tour)
        all_tour_lengths.append(tour_length)

    ranked_tours_indices = np.argsort(all_tour_lengths)
    top_tours = [all_tours[i] for i in ranked_tours_indices[:top_k]]

    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    for tour in top_tours:
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += 1
            heuristics_matrix[tour[i+1], tour[i]] += 1
        heuristics_matrix[tour[-1], tour[0]] += 1
        heuristics_matrix[tour[0], tour[-1]] += 1

    heuristics_matrix = heuristics_matrix / top_k
    return heuristics_matrix
