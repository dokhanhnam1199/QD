import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristics matrix by iteratively building tours using a greedy approach combined with a randomized edge selection, favoring edges with lower distances and edges that connect to less visited nodes.}"""
    num_nodes = distance_matrix.shape[0]
    num_iterations = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_iterations):
        start_node = np.random.randint(num_nodes)
        current_node = start_node
        tour = [start_node]
        unvisited_nodes = set(range(num_nodes))
        unvisited_nodes.remove(start_node)

        while unvisited_nodes:
            distances = distance_matrix[current_node, :]
            
            # Calculate node visitation counts for biasing edge selection
            node_visits = np.zeros(num_nodes)
            for node in range(num_nodes):
                node_visits[node] = tour.count(node)  #number of appearance

            # Combine distance and visitation frequency for edge weights
            edge_weights = 1.0 / (distances + 1e-6)  # Favor shorter distances
            edge_weights += 1.0 / (node_visits + 1e-6) # Favor less visited
            
            #Exclude nodes already in the tour from selection
            edge_weights[list(tour)] = 0 

            #Normalize probabilities for selection
            probabilities = edge_weights / np.sum(edge_weights)
            
            #Select the next node based on the probabilities
            next_node = np.random.choice(num_nodes, p=probabilities)
            if next_node not in unvisited_nodes:
                available_nodes = list(unvisited_nodes)
                if available_nodes:
                    next_node = available_nodes[0]
                else:
                    break
                
            tour.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

        tour.append(start_node)  # Return to start

        for i in range(len(tour) - 1):
            node1 = tour[i]
            node2 = tour[i + 1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix = heuristics_matrix / num_iterations

    return heuristics_matrix
