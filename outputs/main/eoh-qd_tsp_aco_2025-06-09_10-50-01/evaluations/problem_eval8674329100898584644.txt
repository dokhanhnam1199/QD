import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples a multitude of random tours and for each edge counts how often it appears in the best tours, thereby constructing a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    best_tour_length = np.inf
    best_tours = []
    edge_counts = np.zeros_like(distance_matrix, dtype=int)

    for _ in range(num_samples):
        tour = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]

        if tour_length < best_tour_length:
            best_tour_length = tour_length
            best_tours = [tour]
        elif tour_length == best_tour_length:
            best_tours.append(tour)

    for tour in best_tours:
        for i in range(n - 1):
            u, v = sorted((tour[i], tour[i+1]))
            edge_counts[u, v] += 1
            edge_counts[v, u] += 1
        u, v = sorted((tour[-1], tour[0]))
        edge_counts[u, v] += 1
        edge_counts[v, u] += 1
    
    heuristics_matrix = edge_counts / len(best_tours)
    return heuristics_matrix
