import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm iteratively improves a population of random tours by swapping edges to reduce tour length, and then scores edges based on their frequency in the best tours.}"""
    n = distance_matrix.shape[0]
    population_size = 50
    num_iterations = 100
    
    # Initialize a population of random tours
    population = [np.random.permutation(n) for _ in range(population_size)]
    
    # Function to calculate tour length
    def calculate_tour_length(tour):
        length = 0
        for i in range(n - 1):
            length += distance_matrix[tour[i], tour[i+1]]
        length += distance_matrix[tour[-1], tour[0]]
        return length
    
    # Iteratively improve the population
    for _ in range(num_iterations):
        for i in range(population_size):
            # Randomly select two edges to swap
            idx1 = np.random.randint(n)
            idx2 = np.random.randint(n)
            
            # Create a new tour with the swapped edges
            new_tour = population[i].copy()
            
            # Reverse the segment between idx1 and idx2
            start = min(idx1, idx2)
            end = max(idx1, idx2)
            new_tour[start:end+1] = new_tour[start:end+1][::-1]
            
            # Replace the original tour if the new tour is shorter
            if calculate_tour_length(new_tour) < calculate_tour_length(population[i]):
                population[i] = new_tour
    
    # Select the best tours
    lengths = [calculate_tour_length(tour) for tour in population]
    best_tours_indices = np.argsort(lengths)[:population_size // 5] #keep top 20%
    best_tours = [population[i] for i in best_tours_indices]
    
    # Score the edges based on their frequency in the best tours
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    for tour in best_tours:
        for i in range(n):
            node1 = tour[i]
            node2 = tour[(i + 1) % n]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1  # Ensure symmetry
            
    heuristics_matrix = heuristics_matrix / len(best_tours)
    return heuristics_matrix
