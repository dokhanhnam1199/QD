import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples tours by iteratively adding the edge that minimizes the increase in tour length while maintaining a valid tour, and scores edges based on their frequency in these tours.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    edge_counts = np.zeros_like(distance_matrix, dtype=int)

    for _ in range(num_samples):
        tour = [np.random.randint(n)]
        unvisited = set(range(n))
        unvisited.remove(tour[0])

        while unvisited:
            best_node = -1
            best_position = -1
            min_increase = np.inf

            for node in unvisited:
                for i in range(len(tour)):
                    increase = distance_matrix[tour[i-1], node] + distance_matrix[node, tour[i]] - distance_matrix[tour[i-1], tour[i]]
                    if increase < min_increase:
                        min_increase = increase
                        best_node = node
                        best_position = i

            tour.insert(best_position, best_node)
            unvisited.remove(best_node)
            
        tour.append(tour[0])

        # Update edge counts
        for i in range(len(tour) - 1):
            u = tour[i]
            v = tour[i+1]
            edge_counts[u, v] += 1
            edge_counts[v, u] += 1

    heuristics_matrix = edge_counts / num_samples
    return heuristics_matrix
