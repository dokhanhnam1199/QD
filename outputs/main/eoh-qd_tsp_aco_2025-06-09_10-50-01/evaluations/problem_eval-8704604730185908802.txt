import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm uses stochastic sampling of nearest neighbor solutions, averaging the edge inclusion frequency to create a heuristic matrix favoring edges present in many near-optimal sampled solutions.}
    """
    num_nodes = distance_matrix.shape[0]
    num_samples = 100  # Number of samples to generate
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    for _ in range(num_samples):
        start_node = np.random.randint(num_nodes)
        current_node = start_node
        unvisited_nodes = set(range(num_nodes))
        unvisited_nodes.remove(current_node)
        
        path = [current_node]
        
        while unvisited_nodes:
            nearest_neighbor = None
            min_distance = np.inf
            
            for neighbor in unvisited_nodes:
                distance = distance_matrix[current_node, neighbor]
                if distance < min_distance:
                    min_distance = distance
                    nearest_neighbor = neighbor
            
            path.append(nearest_neighbor)
            unvisited_nodes.remove(nearest_neighbor)
            current_node = nearest_neighbor
        
        path.append(start_node)  # Return to the starting node
        
        # Update heuristics matrix based on edge inclusion
        for i in range(num_nodes):
            node1 = path[i]
            node2 = path[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1  # Assuming symmetric distance matrix
    
    heuristics_matrix /= num_samples  # Normalize to get frequency
    return heuristics_matrix
