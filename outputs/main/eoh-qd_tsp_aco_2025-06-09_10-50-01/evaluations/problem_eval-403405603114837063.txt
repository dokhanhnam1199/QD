import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs solutions by iteratively adding the shortest edge that doesn't create a cycle or disconnect the tour, then scores edges by their presence in the generated solutions.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    edge_counts = np.zeros_like(distance_matrix, dtype=int)

    for _ in range(num_samples):
        edges = []
        for i in range(n):
            for j in range(i + 1, n):
                edges.append((i, j, distance_matrix[i, j]))
        edges.sort(key=lambda x: x[2])  # Sort edges by distance

        parent = list(range(n))
        rank = [0] * n

        def find(i):
            if parent[i] == i:
                return i
            parent[i] = find(parent[i])
            return parent[i]

        def union(i, j):
            root_i = find(i)
            root_j = find(j)
            if root_i != root_j:
                if rank[root_i] < rank[root_j]:
                    parent[root_i] = root_j
                elif rank[root_i] > rank[root_j]:
                    parent[root_j] = root_i
                else:
                    parent[root_j] = root_i
                    rank[root_i] += 1
                return True
            return False

        tour = []
        degree = [0] * n
        num_edges = 0

        for u, v, _ in edges:
            if find(u) != find(v) and degree[u] < 2 and degree[v] < 2:
                tour.append((u, v))
                union(u, v)
                degree[u] += 1
                degree[v] += 1
                num_edges += 1

        # Close the tour if it's not already closed
        start_node = tour[0][0]
        end_node = -1
        for i in range(n):
          if degree[i] < 2:
            end_node = i
            break

        if end_node != -1:
          tour.append((start_node, end_node))

        for u, v in tour:
            edge_counts[u, v] += 1
            edge_counts[v, u] += 1

    heuristics_matrix = edge_counts / num_samples
    return heuristics_matrix
