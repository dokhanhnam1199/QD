import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by iteratively building tours using a greedy approach guided by edge appearance in shortest paths between randomly selected node pairs.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 1000

    for _ in range(num_iterations):
        # Randomly select two nodes
        node1 = np.random.randint(0, n)
        node2 = np.random.randint(0, n)

        # Find the shortest path between the two nodes
        shortest_path = shortest_path_dijkstra(distance_matrix, node1, node2)

        # Update the heuristics matrix based on the shortest path
        for i in range(len(shortest_path) - 1):
            u = shortest_path[i]
            v = shortest_path[i+1]
            heuristics_matrix[u, v] += 1
            heuristics_matrix[v, u] += 1

    # Normalize the heuristics matrix
    heuristics_matrix = heuristics_matrix / num_iterations
    return heuristics_matrix

def shortest_path_dijkstra(distance_matrix, start_node, end_node):
    n = distance_matrix.shape[0]
    dist = np.full(n, np.inf)
    dist[start_node] = 0
    unvisited = set(range(n))
    previous = {}

    while unvisited:
        current_node = min(unvisited, key=lambda node: dist[node])
        unvisited.remove(current_node)

        if current_node == end_node:
            break

        for neighbor in range(n):
            if distance_matrix[current_node, neighbor] != 0:  # Assuming 0 means no edge
                alt_path = dist[current_node] + distance_matrix[current_node, neighbor]
                if alt_path < dist[neighbor]:
                    dist[neighbor] = alt_path
                    previous[neighbor] = current_node

    path = []
    current = end_node
    while current != start_node:
        path.insert(0, current)
        if current not in previous:
            return []
        current = previous[current]
    path.insert(0, start_node)
    return heuristics_matrix
