import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples a multitude of random tours, ranks them based on tour length, and constructs a heuristic matrix based on the frequency of edges in the top-ranked tours, weighted by their rank.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    tours = []
    tour_lengths = []

    for _ in range(num_samples):
        tour = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]
        tours.append(tour)
        tour_lengths.append(tour_length)

    ranked_indices = np.argsort(tour_lengths)
    edge_counts = np.zeros_like(distance_matrix, dtype=float)
    total_rank_weight = 0

    for rank, index in enumerate(ranked_indices[:num_samples // 10]):
        tour = tours[index]
        rank_weight = np.exp(-rank / (num_samples // 50)) # Exponentially decreasing weight
        total_rank_weight += rank_weight
        for i in range(n - 1):
            u, v = sorted((tour[i], tour[i+1]))
            edge_counts[u, v] += rank_weight
            edge_counts[v, u] += rank_weight
        u, v = sorted((tour[-1], tour[0]))
        edge_counts[u, v] += rank_weight
        edge_counts[v, u] += rank_weight

    heuristics_matrix = edge_counts / total_rank_weight
    return heuristics_matrix
