import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm iteratively refines a heuristic matrix by sampling tours biased by the current heuristic, and updating the heuristic based on the length of the sampled tours.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.ones_like(distance_matrix, dtype=float)
    num_iterations = 10
    num_samples = 100

    for _ in range(num_iterations):
        edge_weights = heuristics_matrix * (1 / (distance_matrix + 1e-9))
        edge_weights = edge_weights / np.sum(edge_weights)
        
        sampled_tours = []
        sampled_tour_lengths = []

        for _ in range(num_samples):
            tour = [np.random.choice(n)]
            while len(tour) < n:
                current_node = tour[-1]
                probabilities = edge_weights[current_node, :]
                probabilities[tour] = 0
                probabilities = probabilities / np.sum(probabilities)

                next_node = np.random.choice(n, p=probabilities)
                tour.append(next_node)

            tour.append(tour[0])
            tour = np.array(tour)
            length = 0
            for i in range(n):
                length += distance_matrix[tour[i], tour[i+1]]
            sampled_tours.append(tour)
            sampled_tour_lengths.append(length)

        min_length = min(sampled_tour_lengths)

        for i in range(num_samples):
            tour = sampled_tours[i]
            if sampled_tour_lengths[i] <= min_length * 1.1:
                for j in range(n):
                    u = tour[j]
                    v = tour[j+1]
                    heuristics_matrix[u, v] += 0.1
                    heuristics_matrix[v, u] += 0.1

        heuristics_matrix = heuristics_matrix / np.max(heuristics_matrix)

    return heuristics_matrix
