import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines random sampling with a greedy insertion heuristic, scoring edges based on their frequency in short tours constructed by iteratively inserting nodes into a partially built tour.}"""
    n = distance_matrix.shape[0]
    num_samples = 500
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Initialize a random tour with 2 nodes
        start_node = np.random.randint(n)
        second_node = np.random.choice([i for i in range(n) if i != start_node])
        tour = [start_node, second_node]
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(start_node)
        unvisited_nodes.remove(second_node)

        # Iteratively insert remaining nodes into the tour
        while unvisited_nodes:
            best_node_to_insert = -1
            best_insertion_index = -1
            min_increase = np.inf

            for node_to_insert in unvisited_nodes:
                for i in range(len(tour)):
                    # Calculate the increase in tour length if we insert the node at index i
                    increase = distance_matrix[tour[i-1], node_to_insert] + distance_matrix[node_to_insert, tour[i]] - distance_matrix[tour[i-1], tour[i]]
                    if increase < min_increase:
                        min_increase = increase
                        best_node_to_insert = node_to_insert
                        best_insertion_index = i

            # Insert the best node at the best position
            tour.insert(best_insertion_index, best_node_to_insert)
            unvisited_nodes.remove(best_node_to_insert)
            
        #Connect the last node with the first node
        tour.append(tour[0])

        # Update edge counts based on the sampled path
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i + 1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1 #Symmetric

    heuristics_matrix = heuristics_matrix / num_samples
    return heuristics_matrix
