import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples a multitude of random tours, applies a local search to improve each tour, and then calculates a heuristic matrix based on the frequency of edges in the improved tours.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    edge_counts = np.zeros_like(distance_matrix, dtype=int)

    def tour_length(tour):
        length = 0
        for i in range(n - 1):
            length += distance_matrix[tour[i], tour[i+1]]
        length += distance_matrix[tour[-1], tour[0]]
        return length

    def two_opt_swap(tour, i, k):
        new_tour = tour[:i] + tour[i:k+1][::-1] + tour[k+1:]
        return new_tour

    def local_search(tour):
        improved = True
        while improved:
            improved = False
            for i in range(1, n - 1):
                for k in range(i + 1, n):
                    new_tour = two_opt_swap(tour, i, k)
                    if tour_length(new_tour) < tour_length(tour):
                        tour = new_tour
                        improved = True
        return tour

    for _ in range(num_samples):
        tour = np.random.permutation(n)
        tour = local_search(tour)

        for i in range(n - 1):
            u, v = sorted((tour[i], tour[i+1]))
            edge_counts[u, v] += 1
            edge_counts[v, u] += 1
        u, v = sorted((tour[-1], tour[0]))
        edge_counts[u, v] += 1
        edge_counts[v, u] += 1

    heuristics_matrix = edge_counts / num_samples
    return heuristics_matrix
