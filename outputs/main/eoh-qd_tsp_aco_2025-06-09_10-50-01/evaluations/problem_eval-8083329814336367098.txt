import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm combines inverse distance with node degree centrality to guide TSP solution sampling.}
    """
    n = distance_matrix.shape[0]
    
    # Inverse distance heuristic
    inverse_distance = 1.0 / (distance_matrix + np.eye(n))

    # Node degree centrality heuristic (sum of inverse distances)
    node_centrality = np.sum(inverse_distance, axis=1)
    centrality_matrix = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            centrality_matrix[i, j] = node_centrality[i] + node_centrality[j]

    # Combine heuristics
    heuristics_matrix = 0.7 * inverse_distance + 0.3 * (centrality_matrix / np.max(centrality_matrix)) 

    return heuristics_matrix
