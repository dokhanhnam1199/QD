import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples a multitude of random tours, scores each edge based on the tour length it appears in, and constructs a heuristic matrix based on the inverse of the tour lengths.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    edge_scores = np.zeros_like(distance_matrix, dtype=float)
    tour_lengths = []
    tours = []

    for _ in range(num_samples):
        tour = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]

        tours.append(tour)
        tour_lengths.append(tour_length)

    for tour_idx in range(num_samples):
        tour = tours[tour_idx]
        tour_length = tour_lengths[tour_idx]
        
        for i in range(n - 1):
            u, v = sorted((tour[i], tour[i+1]))
            edge_scores[u, v] += 1/tour_length
            edge_scores[v, u] += 1/tour_length
        u, v = sorted((tour[-1], tour[0]))
        edge_scores[u, v] += 1/tour_length
        edge_scores[v, u] += 1/tour_length

    return heuristics_matrix
