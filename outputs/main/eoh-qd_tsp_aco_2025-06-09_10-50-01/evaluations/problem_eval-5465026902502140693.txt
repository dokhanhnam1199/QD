import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a pheromone matrix by iteratively simulating ants that probabilistically build tours based on pheromone levels and distances, reinforcing edges used in shorter tours and evaporating pheromones over time.}"""
    n = distance_matrix.shape[0]
    pheromone_matrix = np.ones_like(distance_matrix)
    alpha = 1.0
    beta = 2.0
    rho = 0.5
    Q = 100

    num_ants = n
    num_iterations = 100

    for _ in range(num_iterations):
        all_paths = []
        all_path_lengths = []

        for ant in range(num_ants):
            current_node = np.random.randint(n)
            unvisited_nodes = set(range(n))
            unvisited_nodes.remove(current_node)
            path = [current_node]
            path_length = 0

            while unvisited_nodes:
                probabilities = np.zeros(n)
                for neighbor in unvisited_nodes:
                    probabilities[neighbor] = (pheromone_matrix[current_node, neighbor] ** alpha) * ((1.0 / distance_matrix[current_node, neighbor]) ** beta)

                probabilities /= np.sum(probabilities)

                next_node = np.random.choice(list(range(n)), p=probabilities)
                if next_node not in unvisited_nodes:
                  available_nodes = list(unvisited_nodes)
                  if len(available_nodes) > 0:
                    next_node = available_nodes[0]
                  else:
                    next_node = path[0] # return to start node if all nodes visited, should not happen

                path.append(next_node)
                path_length += distance_matrix[current_node, next_node]
                unvisited_nodes.remove(next_node)
                current_node = next_node

            path_length += distance_matrix[path[-1], path[0]]
            path.append(path[0])
            all_paths.append(path)
            all_path_lengths.append(path_length)

        pheromone_matrix *= (1 - rho)

        for ant in range(num_ants):
            path = all_paths[ant]
            path_length = all_path_lengths[ant]
            for i in range(n):
                u = path[i]
                v = path[i+1]
                pheromone_matrix[u, v] += Q / path_length
                pheromone_matrix[v, u] += Q / path_length
    return heuristics_matrix
