import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by iteratively improving tours using a 2-opt local search, starting from random initial tours, and recording edge frequencies across multiple runs.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    def calculate_tour_cost(tour):
        cost = 0
        for i in range(n):
            cost += distance_matrix[tour[i], tour[(i + 1) % n]]
        return cost

    def two_opt_swap(tour, i, k):
        new_tour = tour[:i] + tour[i:k+1][::-1] + tour[k+1:]
        return new_tour

    def two_opt(tour):
        best_tour = tour
        best_cost = calculate_tour_cost(tour)
        improved = True
        while improved:
            improved = False
            for i in range(1, n - 1):
                for k in range(i + 1, n):
                    new_tour = two_opt_swap(best_tour, i, k)
                    new_cost = calculate_tour_cost(new_tour)
                    if new_cost < best_cost:
                        best_tour = new_tour
                        best_cost = new_cost
                        improved = True
        return best_tour

    for _ in range(num_samples):
        # Generate a random initial tour
        tour = np.random.permutation(n).tolist()

        # Improve the tour using 2-opt
        tour = two_opt(tour)

        # Update heuristic matrix based on edge frequencies
        for i in range(n):
            node1 = tour[i]
            node2 = tour[(i + 1) % n]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1  # Assuming symmetric distance matrix

    heuristics_matrix /= num_samples  # Normalize to get frequencies
    return heuristics_matrix
