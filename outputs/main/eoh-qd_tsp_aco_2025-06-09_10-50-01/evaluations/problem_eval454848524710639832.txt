import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples TSP solutions using a nearest neighbor heuristic, and then scores each edge based on its frequency in the sampled solutions.}"""
    n = distance_matrix.shape[0]
    num_samples = 100

    edge_counts = np.zeros_like(distance_matrix, dtype=int)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        path = [current_node]

        while unvisited_nodes:
            nearest_neighbor = -1
            min_distance = np.inf
            for neighbor in unvisited_nodes:
                if distance_matrix[current_node, neighbor] < min_distance:
                    min_distance = distance_matrix[current_node, neighbor]
                    nearest_neighbor = neighbor

            path.append(nearest_neighbor)
            unvisited_nodes.remove(nearest_neighbor)
            current_node = nearest_neighbor

        path.append(start_node)  # Return to starting node

        # Update edge counts based on the sampled path
        for i in range(n):
            node1 = path[i]
            node2 = path[i + 1]
            edge_counts[node1, node2] += 1
            edge_counts[node2, node1] += 1 #Symmetric

    heuristics_matrix = edge_counts / num_samples
    return heuristics_matrix
