import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines random tour sampling with a local search optimization and uses the resulting tours to estimate edge probabilities.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 500

    def tour_length(tour):
        length = 0
        for i in range(n - 1):
            length += distance_matrix[tour[i], tour[i+1]]
        length += distance_matrix[tour[-1], tour[0]]
        return length

    def local_search(tour):
        improved = True
        while improved:
            improved = False
            for i in range(n):
                for j in range(i + 2, n):
                    new_tour = tour[:]
                    new_tour[i+1:j+1] = reversed(new_tour[i+1:j+1])
                    if tour_length(new_tour) < tour_length(tour):
                        tour = new_tour
                        improved = True
        return tour

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n).tolist()

        # Perform local search
        tour = local_search(tour)

        # Update heuristics matrix based on edges in the tour
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += 1
            heuristics_matrix[tour[i+1], tour[i]] += 1  # Ensure symmetry
        heuristics_matrix[tour[-1], tour[0]] += 1
        heuristics_matrix[tour[0], tour[-1]] += 1  # Ensure symmetry
    
    # Normalize heuristics matrix
    heuristics_matrix = heuristics_matrix / np.max(heuristics_matrix)
    return heuristics_matrix
