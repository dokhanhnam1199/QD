import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm iteratively samples random tours, biases the sampling towards shorter tours using a rank-based approach, and accumulates edge usage counts to estimate edge probabilities for inclusion in the final solution.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000  # Number of tours to sample
    tour_lengths = []
    tours = []
    
    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tours.append(tour)
        
        # Calculate the tour length
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]
        tour_lengths.append(tour_length)
    
    # Rank the tours based on their lengths
    ranked_indices = np.argsort(tour_lengths)
    
    #Assign weights based on rank
    for rank, index in enumerate(ranked_indices):
        tour = tours[index]
        weight = (num_samples - rank) / num_samples #Linear rank-based weighting
        # Update heuristics matrix based on edges in the tour
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += weight
            heuristics_matrix[tour[i+1], tour[i]] += weight  # Ensure symmetry
        heuristics_matrix[tour[-1], tour[0]] += weight
        heuristics_matrix[tour[0], tour[-1]] += weight  # Ensure symmetry
    
    # Normalize heuristics matrix
    heuristics_matrix = heuristics_matrix / np.max(heuristics_matrix)

    return heuristics_matrix
