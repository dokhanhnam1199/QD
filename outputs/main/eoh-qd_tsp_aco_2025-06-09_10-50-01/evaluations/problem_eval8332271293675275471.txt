import numpy as np

def heuristics_v2(distance_matrix):
  """{This algorithm samples multiple solutions using a greedy nearest neighbor heuristic with stochastic restarts and uses the inverse of edge ranks within each solution to create an edge desirability score.}"""
  n = distance_matrix.shape[0]
  num_samples = 100
  heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

  for _ in range(num_samples):
    start_node = np.random.randint(n)
    current_node = start_node
    unvisited_nodes = set(range(n))
    unvisited_nodes.remove(current_node)
    path = [current_node]

    while unvisited_nodes:
      nearest_neighbor = None
      min_distance = float('inf')
      for neighbor in unvisited_nodes:
        distance = distance_matrix[current_node, neighbor]
        if distance < min_distance:
          min_distance = distance
          nearest_neighbor = neighbor

      path.append(nearest_neighbor)
      unvisited_nodes.remove(nearest_neighbor)
      current_node = nearest_neighbor

    path.append(start_node)

    ranks = {}
    for i in range(n):
      node1 = path[i]
      node2 = path[i+1]
      ranks[(node1, node2)] = i + 1
      ranks[(node2, node1)] = i + 1

    for i in range(n):
      for j in range(n):
        if i != j:
          if (i, j) in ranks:
            heuristics_matrix[i, j] += 1.0 / ranks[(i, j)]
          else:
            heuristics_matrix[i, j] += 0
        else:
          heuristics_matrix[i, j] = 0

  return heuristics_matrix
