import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples a multitude of random tours, selects the top percentage, and constructs a heuristic matrix based on the edge frequencies in those top tours.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    top_percentage = 0.1
    tour_lengths = []
    tours = []

    for _ in range(num_samples):
        tour = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]
        tour_lengths.append(tour_length)
        tours.append(tour)

    sorted_indices = np.argsort(tour_lengths)
    num_top_tours = int(num_samples * top_percentage)
    top_tours_indices = sorted_indices[:num_top_tours]
    top_tours = [tours[i] for i in top_tours_indices]

    edge_counts = np.zeros_like(distance_matrix, dtype=int)
    for tour in top_tours:
        for i in range(n - 1):
            u, v = sorted((tour[i], tour[i+1]))
            edge_counts[u, v] += 1
            edge_counts[v, u] += 1
        u, v = sorted((tour[-1], tour[0]))
        edge_counts[u, v] += 1
        edge_counts[v, u] += 1

    heuristics_matrix = edge_counts / len(top_tours)
    return heuristics_matrix
