import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples TSP solutions using an ant colony optimization (ACO) approach, where pheromone levels on edges are updated based on the quality of the tours found, guiding subsequent searches.}
    """
    n = distance_matrix.shape[0]
    num_ants = n
    num_iterations = n * 5

    # Initialize pheromone matrix
    pheromone_matrix = np.ones_like(distance_matrix)
    np.fill_diagonal(pheromone_matrix, 0)

    # Parameters
    alpha = 1  # Pheromone influence
    beta = 2   # Distance influence
    rho = 0.1  # Evaporation rate
    Q = 1      # Pheromone deposit constant

    for iteration in range(num_iterations):
        all_paths = []
        all_path_lengths = []

        for ant in range(num_ants):
            start_node = np.random.randint(n)
            current_node = start_node
            unvisited = set(range(n))
            unvisited.remove(start_node)
            path = [start_node]

            while unvisited:
                probabilities = np.zeros(n)
                for i in range(n):
                    if i in unvisited:
                        probabilities[i] = (pheromone_matrix[current_node, i]**alpha) / (distance_matrix[current_node, i]**beta)
                
                if np.sum(probabilities) == 0:
                  next_node = np.random.choice(list(unvisited))
                else:
                  probabilities /= np.sum(probabilities)
                  next_node = np.random.choice(range(n), p=probabilities)
                
                path.append(next_node)
                unvisited.remove(next_node)
                current_node = next_node

            path.append(start_node)
            all_paths.append(path)

            # Calculate tour length
            tour_length = 0
            for i in range(n):
                tour_length += distance_matrix[path[i], path[i+1]]
            all_path_lengths.append(tour_length)

        # Update pheromones
        pheromone_matrix *= (1 - rho)  # Evaporation

        for k in range(num_ants):
            path = all_paths[k]
            tour_length = all_path_lengths[k]
            for i in range(n):
                pheromone_matrix[path[i], path[i+1]] += Q / tour_length
                pheromone_matrix[path[i+1], path[i]] += Q / tour_length

    # Normalize pheromone matrix for heuristics
    heuristics_matrix = (pheromone_matrix + pheromone_matrix.T) / 2
    total = np.sum(heuristics_matrix)

    if total > 0:
        heuristics_matrix /= total
    return heuristics_matrix
