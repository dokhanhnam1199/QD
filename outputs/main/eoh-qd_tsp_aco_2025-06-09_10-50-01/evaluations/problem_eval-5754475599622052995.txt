import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm uses a combination of shortest path computations and Monte Carlo sampling to estimate edge probabilities, favoring edges frequently appearing in near-shortest paths.}
    """
    n = distance_matrix.shape[0]
    num_samples = 1000
    shortest_path_multiplier = 2.0
    
    edge_counts = np.zeros_like(distance_matrix, dtype=float)
    
    # Precompute all-pairs shortest paths using Floyd-Warshall (or Dijkstra if needed)
    shortest_paths = np.copy(distance_matrix)
    for k in range(n):
        for i in range(n):
            for j in range(n):
                shortest_paths[i, j] = min(shortest_paths[i, j], shortest_paths[i, k] + shortest_paths[k, j])

    for _ in range(num_samples):
        # Randomly select two nodes
        u = np.random.randint(n)
        v = np.random.randint(n)
        
        if u == v:
            continue
        
        # Consider paths with a cost close to the shortest path
        threshold = shortest_paths[u, v] * shortest_path_multiplier

        # Sample a random path between u and v
        path = [u]
        current_node = u
        total_cost = 0

        while current_node != v:
            # Find neighbors of the current node
            neighbors = np.where(distance_matrix[current_node, :] > 0)[0]
            
            # Calculate the probability of going to each neighbor
            probabilities = []
            for neighbor in neighbors:
                new_cost = total_cost + distance_matrix[current_node, neighbor] + shortest_paths[neighbor, v]
                if new_cost <= threshold:
                     probabilities.append(1.0 / (distance_matrix[current_node, neighbor] + 1e-6)) # avoid division by zero
                else:
                    probabilities.append(0.0)
            
            if np.sum(probabilities) == 0:  # No valid path found
                path = []
                break
            
            probabilities = np.array(probabilities) / np.sum(probabilities)
            
            # Choose the next node based on probabilities
            next_node = np.random.choice(neighbors, p=probabilities)
            
            path.append(next_node)
            total_cost += distance_matrix[current_node, next_node]
            current_node = next_node

        # If a valid path was found, update the edge counts
        if path:
            for i in range(len(path) - 1):
                u = path[i]
                v = path[i+1]
                edge_counts[u, v] += 1
                edge_counts[v, u] += 1
                
    # Normalize the edge counts to get probabilities (heuristics)
    heuristics_matrix = edge_counts / num_samples
    
    return heuristics_matrix
