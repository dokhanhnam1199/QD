import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm iteratively refines a heuristics matrix by simulating an ant colony optimization process, favoring edges used in shorter paths found by ants.}"""
    n = distance_matrix.shape[0]
    num_ants = 50
    num_iterations = 50
    alpha = 1.0
    beta = 2.0
    pheromone_evaporation = 0.5
    initial_pheromone = 1.0

    # Initialize pheromone matrix (heuristics matrix)
    pheromone_matrix = np.full_like(distance_matrix, initial_pheromone)

    for iteration in range(num_iterations):
        all_paths = []
        all_path_lengths = []

        for ant in range(num_ants):
            start_node = np.random.randint(n)
            current_node = start_node
            unvisited_nodes = set(range(n))
            unvisited_nodes.remove(current_node)
            path = [current_node]
            path_length = 0

            while unvisited_nodes:
                probabilities = np.zeros(n)
                for next_node in range(n):
                    if next_node in unvisited_nodes:
                        probabilities[next_node] = (pheromone_matrix[current_node, next_node]**alpha) * ((1.0 / (distance_matrix[current_node, next_node] + 1e-9))**beta)
                
                if np.sum(probabilities) == 0:
                    next_node = list(unvisited_nodes)[0]
                else:
                    probabilities /= np.sum(probabilities)
                    next_node = np.random.choice(n, p=probabilities)
                
                path.append(next_node)
                path_length += distance_matrix[current_node, next_node]
                unvisited_nodes.remove(next_node)
                current_node = next_node

            path.append(start_node)
            path_length += distance_matrix[current_node, start_node]

            all_paths.append(path)
            all_path_lengths.append(path_length)

        # Update pheromone matrix
        pheromone_matrix *= (1 - pheromone_evaporation) # Evaporation
        for path, path_length in zip(all_paths, all_path_lengths):
            for i in range(len(path) - 1):
                u = path[i]
                v = path[i+1]
                pheromone_matrix[u, v] += 1.0 / path_length
                pheromone_matrix[v, u] += 1.0 / path_length

    return heuristics_matrix
