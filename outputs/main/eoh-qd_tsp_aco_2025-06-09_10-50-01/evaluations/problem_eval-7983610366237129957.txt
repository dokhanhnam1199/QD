import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses ant colony optimization (ACO) principles to iteratively construct solutions, update pheromone trails based on solution quality, and guide the search towards better paths.}"""
    n = distance_matrix.shape[0]
    pheromone_matrix = np.ones_like(distance_matrix)
    alpha = 1.0
    beta = 2.0
    rho = 0.5
    Q = 100

    num_ants = n
    num_iterations = 100

    for _ in range(num_iterations):
        all_paths = []
        all_path_lengths = []

        for ant in range(num_ants):
            path = []
            path_length = 0
            visited = [False] * n
            start_node = ant % n
            current_node = start_node
            path.append(current_node)
            visited[current_node] = True
            
            for _ in range(n - 1):
                probabilities = np.zeros(n)
                for next_node in range(n):
                    if not visited[next_node]:
                        probabilities[next_node] = (pheromone_matrix[current_node, next_node]**alpha) * ((1.0 / (distance_matrix[current_node, next_node] + 1e-9))**beta)
                
                if np.sum(probabilities) == 0:
                  next_node = np.random.choice([i for i in range(n) if not visited[i]])
                else:    
                  probabilities /= np.sum(probabilities)
                  next_node = np.random.choice(n, p=probabilities)
                
                path.append(next_node)
                path_length += distance_matrix[current_node, next_node]
                visited[next_node] = True
                current_node = next_node

            path_length += distance_matrix[current_node, start_node]
            path.append(start_node)
            all_paths.append(path)
            all_path_lengths.append(path_length)
        
        # Update pheromone trails
        pheromone_matrix *= (1 - rho)
        for k in range(num_ants):
            path = all_paths[k]
            path_length = all_path_lengths[k]
            for i in range(n):
                u = path[i]
                v = path[i+1]
                pheromone_matrix[u, v] += Q / path_length
                pheromone_matrix[v, u] += Q / path_length
    
    return heuristics_matrix
