import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples multiple random tours, then calculates the cost of each tour and updates a heuristic matrix based on the inverse of the tour cost, favoring edges from lower-cost tours.}
    """
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour = np.append(tour, tour[0])  # Return to starting node

        # Calculate the cost of the tour
        tour_cost = 0
        for i in range(n):
            u = tour[i]
            v = tour[i + 1]
            tour_cost += distance_matrix[u, v]

        # Update heuristics matrix based on the inverse of the tour cost
        if tour_cost > 0:
            weight = 1.0 / tour_cost
        else:
            weight = 0  # Avoid division by zero if tour cost is zero

        for i in range(n):
            u = tour[i]
            v = tour[i + 1]
            heuristics_matrix[u, v] += weight
            heuristics_matrix[v, u] += weight  # Ensure symmetry

    # Normalize the heuristic matrix
    total_weight = np.sum(heuristics_matrix)
    if total_weight > 0:
        heuristics_matrix /= total_weight
    else:
        pass # Heuristic matrix remains 0.

    return heuristics_matrix
