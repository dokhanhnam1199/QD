import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples TSP solutions using a nearest neighbor heuristic with random restarts and biases the edge selection probabilities based on the frequency of edges appearing in good solutions.}
    """
    n = distance_matrix.shape[0]
    num_samples = n * 10  # Number of sample solutions to generate
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited = set(range(n))
        unvisited.remove(start_node)
        path = [start_node]
        
        while unvisited:
            distances = distance_matrix[current_node, :]
            
            # Prioritize nearest neighbors
            nearest_neighbors = np.argsort(distances)
            
            # Filter unvisited nodes
            valid_neighbors = [node for node in nearest_neighbors if node in unvisited]

            # Add randomness: Bias towards nearest, but also consider other nodes
            probabilities = np.exp(-np.array([distance_matrix[current_node,neighbor] for neighbor in valid_neighbors]))
            probabilities /= probabilities.sum() # Normalize
            next_node = np.random.choice(valid_neighbors, p=probabilities)
            
            path.append(next_node)
            unvisited.remove(next_node)
            current_node = next_node
        
        path.append(start_node)  # Return to start

        # Calculate the tour length:
        tour_length = 0
        for i in range(n):
            tour_length += distance_matrix[path[i], path[i+1]]

        # Favor edges that are in the 'best' (shortest) tours.  Consider the 'best' 1/3:
        
        # Update heuristics matrix: encourage edges in the tour
        for i in range(n):
           heuristics_matrix[path[i], path[i+1]] += 1.0 / tour_length
           heuristics_matrix[path[i+1], path[i]] += 1.0 / tour_length


    # Normalize the matrix
    heuristics_matrix = (heuristics_matrix + heuristics_matrix.T) / 2
    total = np.sum(heuristics_matrix)
    if total>0:
      heuristics_matrix /= total

    return heuristics_matrix
