import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm constructs tours greedily based on the distance matrix, and then calculates edge frequencies across multiple greedy tours as heuristics.}
    """
    n = distance_matrix.shape[0]
    num_samples = 1000
    edge_counts = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Start with a random node
        current_node = np.random.randint(0, n)
        tour = [current_node]
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)

        # Construct a tour greedily
        while unvisited_nodes:
            nearest_node = min(unvisited_nodes, key=lambda x: distance_matrix[current_node, x])
            tour.append(nearest_node)
            unvisited_nodes.remove(nearest_node)
            current_node = nearest_node
        
        tour.append(tour[0])

        # Count the occurrences of each edge in the tour
        for i in range(n):
            u = tour[i]
            v = tour[i+1]
            edge_counts[u, v] += 1
            edge_counts[v, u] += 1  # Assuming symmetric distance matrix

    # Normalize the edge counts to get probabilities (heuristics)
    heuristics_matrix = edge_counts / num_samples

    return heuristics_matrix
