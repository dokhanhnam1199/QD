import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses a minimum spanning tree (MST) approximation to guide the construction of a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    mst_edges = set()
    
    # Prim's Algorithm for MST
    visited = [False] * n
    key = [np.inf] * n
    parent = [None] * n
    
    key[0] = 0
    
    for _ in range(n):
        u = np.argmin(key)
        key[u] = np.inf
        visited[u] = True
        
        for v in range(n):
            if not visited[v] and distance_matrix[u, v] < key[v]:
                parent[v] = u
                key[v] = distance_matrix[u, v]
    
    for v in range(1, n):
        u = parent[v]
        mst_edges.add(tuple(sorted((u, v))))
    
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(i + 1, n):
            if (i, j) in mst_edges:
                heuristics_matrix[i, j] = 1.0
                heuristics_matrix[j, i] = 1.0
            else:
                heuristics_matrix[i, j] = 0.0
                heuristics_matrix[j, i] = 0.0
    
    return heuristics_matrix
