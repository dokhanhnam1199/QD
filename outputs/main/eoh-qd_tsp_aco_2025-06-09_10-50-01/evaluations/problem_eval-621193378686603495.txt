import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple near-optimal TSP solutions using a nearest neighbor heuristic with random restarts and edge perturbation, then aggregates edge frequencies across these samples to create a heuristic matrix indicating edge importance.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited = set(range(n))
        unvisited.remove(start_node)
        tour = [start_node]
        
        while unvisited:
            nearest_neighbor = -1
            min_distance = np.inf
            for neighbor in unvisited:
                distance = distance_matrix[current_node, neighbor]
                if distance < min_distance:
                    min_distance = distance
                    nearest_neighbor = neighbor

            tour.append(nearest_neighbor)
            unvisited.remove(nearest_neighbor)
            current_node = nearest_neighbor
            
        tour.append(start_node)  # Return to starting node
        
        #Perturb the tour with random swaps of close nodes
        for _ in range(n):
            i = np.random.randint(1, n+1)
            j = np.random.randint(1, n+1)

            if i != j:
                if distance_matrix[tour[i-1], tour[j-1]] + distance_matrix[tour[i], tour[j]] < distance_matrix[tour[i-1], tour[i]] + distance_matrix[tour[j-1], tour[j]]:
                        tour[i], tour[j] = tour[j], tour[i]
                        
        # Update heuristic matrix based on edge frequencies
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1  # Assuming symmetric distance matrix

    heuristics_matrix /= num_samples  # Normalize to get frequencies
    return heuristics_matrix
