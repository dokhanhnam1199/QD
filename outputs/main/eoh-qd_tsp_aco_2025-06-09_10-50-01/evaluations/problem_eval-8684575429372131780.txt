import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm combines edge frequencies from random tours with an inverse distance weighting to create a heuristic matrix.}
    """
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour = np.append(tour, tour[0])  # Return to starting node

        # Update heuristics matrix based on edges in this tour
        for i in range(n):
            u = tour[i]
            v = tour[i + 1]
            heuristics_matrix[u, v] += 1 / distance_matrix[u, v] if distance_matrix[u, v] > 0 else 0
            heuristics_matrix[v, u] += 1 / distance_matrix[v, u] if distance_matrix[v, u] > 0 else 0  # Ensure symmetry

    # Normalize the heuristic matrix by the sum of its values
    total_sum = np.sum(heuristics_matrix)
    if total_sum > 0:
        heuristics_matrix /= total_sum

    return heuristics_matrix
