import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm generates multiple random tours, calculates their lengths, applies a softmax function to the inverse of the tour lengths to obtain probabilities, and then averages the edge frequencies across all tours weighted by these probabilities.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000

    tours = []
    tour_lengths = []

    for _ in range(num_samples):
        permutation = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[permutation[i], permutation[i+1]]
        tour_length += distance_matrix[permutation[-1], permutation[0]]
        tours.append(permutation)
        tour_lengths.append(tour_length)

    tour_lengths = np.array(tour_lengths)
    
    # Softmax the inverse of tour lengths to get probabilities
    probabilities = np.exp(-tour_lengths / np.std(tour_lengths)) / np.sum(np.exp(-tour_lengths / np.std(tour_lengths)))

    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for i, tour in enumerate(tours):
        for j in range(n - 1):
            heuristics_matrix[tour[j], tour[j+1]] += probabilities[i]
            heuristics_matrix[tour[j+1], tour[j]] += probabilities[i]
        heuristics_matrix[tour[-1], tour[0]] += probabilities[i]
        heuristics_matrix[tour[0], tour[-1]] += probabilities[i]

    return heuristics_matrix
