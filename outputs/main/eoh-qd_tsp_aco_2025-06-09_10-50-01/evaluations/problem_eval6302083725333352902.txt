import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples solutions by iteratively adding the edge that minimizes a combination of distance and edge usage penalty, then updates the edge usage penalty based on edge selection frequency.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    edge_counts = np.zeros_like(distance_matrix, dtype=float)
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    alpha = 0.5 

    for _ in range(num_samples):
        unvisited_nodes = set(range(n))
        start_node = np.random.choice(list(unvisited_nodes))
        current_node = start_node
        unvisited_nodes.remove(current_node)
        path = [current_node]

        while unvisited_nodes:
            best_neighbor = None
            best_score = np.inf
            for neighbor in unvisited_nodes:
                score = alpha * distance_matrix[current_node, neighbor] + (1 - alpha) * edge_counts[current_node, neighbor]
                if score < best_score:
                    best_score = score
                    best_neighbor = neighbor

            path.append(best_neighbor)
            unvisited_nodes.remove(best_neighbor)
            edge_counts[current_node, best_neighbor] += 1
            edge_counts[best_neighbor, current_node] += 1
            current_node = best_neighbor

        path.append(start_node)

        for i in range(n):
            node1 = path[i]
            node2 = path[i + 1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1
            
    heuristics_matrix = heuristics_matrix / num_samples

    return heuristics_matrix
