import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples tours, retains a diverse set of good tours, and uses edge frequency within those tours to construct a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    good_tours = []
    good_tour_lengths = []
    edge_counts = np.zeros_like(distance_matrix, dtype=int)
    
    for _ in range(num_samples):
        tour = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]
        
        if len(good_tours) < 10:
            good_tours.append(tour)
            good_tour_lengths.append(tour_length)
        else:
            max_len_idx = np.argmax(good_tour_lengths)
            if tour_length < good_tour_lengths[max_len_idx]:
                good_tours[max_len_idx] = tour
                good_tour_lengths[max_len_idx] = tour_length
    
    for tour in good_tours:
        for i in range(n - 1):
            u, v = sorted((tour[i], tour[i+1]))
            edge_counts[u, v] += 1
            edge_counts[v, u] += 1
        u, v = sorted((tour[-1], tour[0]))
        edge_counts[u, v] += 1
        edge_counts[v, u] += 1
    
    heuristics_matrix = edge_counts / len(good_tours)
    return heuristics_matrix
