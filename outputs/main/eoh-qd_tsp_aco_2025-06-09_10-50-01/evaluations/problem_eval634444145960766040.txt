import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses ant colony optimization (ACO) principles to probabilistically construct tours and update pheromone trails based on tour quality, resulting in a heuristic matrix representing edge desirability.}"""
    n = distance_matrix.shape[0]
    num_ants = n
    pheromone = np.ones_like(distance_matrix) / (n * n)  # Initialize pheromone levels
    alpha = 1  # Pheromone importance
    beta = 2  # Distance importance
    evaporation_rate = 0.5
    Q = 100

    for iteration in range(100):
        all_paths = []
        all_path_lengths = []

        for ant in range(num_ants):
            unvisited = set(range(n))
            start_node = np.random.choice(list(unvisited))
            current_node = start_node
            unvisited.remove(current_node)
            path = [current_node]

            while unvisited:
                probabilities = np.zeros(n)
                for neighbor in unvisited:
                    probabilities[neighbor] = (pheromone[current_node, neighbor]**alpha) * ((1 / distance_matrix[current_node, neighbor])**beta)
                probabilities /= np.sum(probabilities)

                next_node = np.random.choice(n, p=probabilities)
                if next_node not in unvisited:
                    available_nodes = list(unvisited)
                    next_node = available_nodes[np.argmin([distance_matrix[current_node, node] for node in available_nodes])]
                path.append(next_node)
                unvisited.remove(next_node)
                current_node = next_node
            
            path.append(start_node)
            all_paths.append(path)

            path_length = 0
            for i in range(n):
                path_length += distance_matrix[path[i], path[i+1]]
            all_path_lengths.append(path_length)

        # Update pheromones
        pheromone *= (1 - evaporation_rate)
        for k in range(num_ants):
            path = all_paths[k]
            path_length = all_path_lengths[k]
            for i in range(n):
                pheromone[path[i], path[i+1]] += Q / path_length
                pheromone[path[i+1], path[i]] += Q / path_length

    heuristics_matrix = pheromone
    return heuristics_matrix
