import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by iteratively improving random tours using 2-opt swaps and recording edge frequencies.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Initialize a random tour
        tour = list(np.random.permutation(n))
        tour.append(tour[0])  # Return to start

        # Perform 2-opt swaps to improve the tour
        for _ in range(100):  # Iterate for a fixed number of times
            i = np.random.randint(1, n)
            k = np.random.randint(i + 1, n + 1)

            # Calculate the change in distance
            delta = -distance_matrix[tour[i - 1], tour[i]] - distance_matrix[tour[k - 1], tour[k]] + distance_matrix[tour[i - 1], tour[k - 1]] + distance_matrix[tour[i], tour[k]]

            # If the swap improves the tour, apply it
            if delta < 0:
                tour[i:k] = reversed(tour[i:k])

        # Update heuristic matrix based on edge frequencies
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i + 1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1  # Assuming symmetric distance matrix

    heuristics_matrix /= num_samples  # Normalize to get frequencies
    return heuristics_matrix
