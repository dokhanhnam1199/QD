import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple TSP solutions using a greedy nearest neighbor heuristic with stochastic restarts and adaptive edge selection based on previous samples, then aggregates the edge frequencies to create a heuristics matrix.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    edge_frequencies = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        path = [current_node]

        while unvisited_nodes:
            distances = distance_matrix[current_node, :]
            
            # Adaptive edge selection based on edge frequencies
            probabilities = 1.0 / (distances + 1e-6) + edge_frequencies[current_node, :] # Avoid division by zero
            probabilities[list(path)] = 0  # Avoid revisiting nodes
            probabilities = probabilities / np.sum(probabilities)
            
            next_node = np.random.choice(n, p=probabilities)
            
            if next_node not in unvisited_nodes: #safety check
               available_nodes = list(unvisited_nodes)
               if available_nodes:
                   next_node = available_nodes[0] #take the first one
               else:
                   break
            
            path.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

        path.append(start_node)  # Return to starting node
        
        for i in range(len(path) - 1):
            u = path[i]
            v = path[i+1]
            heuristics_matrix[u, v] += 1
            heuristics_matrix[v, u] += 1  # Ensure symmetry
            edge_frequencies[u, v] += 1
            edge_frequencies[v, u] += 1

    heuristics_matrix = heuristics_matrix / num_samples
    edge_frequencies = edge_frequencies / num_samples

    return heuristics_matrix
