import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs multiple TSP solutions using a greedy approach with a weighted random selection based on edge distances and pheromone trails, then updates a heuristic matrix representing edge importance based on the frequency of edge usage and the quality of solutions.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    pheromone_matrix = np.ones_like(distance_matrix)  # Initialize pheromone trails

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited = set(range(n))
        unvisited.remove(start_node)
        tour = [start_node]
        tour_length = 0

        while unvisited:
            probabilities = []
            for neighbor in unvisited:
                distance = distance_matrix[current_node, neighbor]
                pheromone = pheromone_matrix[current_node, neighbor]
                probabilities.append((pheromone / distance) if distance > 0 else 0)

            probabilities = np.array(probabilities)
            probabilities /= np.sum(probabilities)

            next_node = np.random.choice(list(unvisited), p=probabilities)
            tour.append(next_node)
            tour_length += distance_matrix[current_node, next_node]
            unvisited.remove(next_node)
            current_node = next_node

        tour.append(start_node)
        tour_length += distance_matrix[current_node, start_node]

        # Update heuristic matrix based on edge frequencies
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += 1 / tour_length  # Weight by tour quality
            heuristics_matrix[node2, node1] += 1 / tour_length

        # Update pheromone trails (simplified evaporation and deposition)
        for i in range(n):
             node1 = tour[i]
             node2 = tour[i+1]
             pheromone_matrix[node1, node2] = (1 - 0.1) * pheromone_matrix[node1, node2] + 0.1 / tour_length #evaporation + deposition
             pheromone_matrix[node2, node1] = pheromone_matrix[node1, node2]



    # Normalize to get frequencies
    return heuristics_matrix
