import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple near-optimal TSP solutions using a greedy heuristic with random node insertion and edge refinement, then aggregates edge scores across these samples to create a heuristic matrix indicating edge importance.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Initialize tour with two random nodes
        start_node = np.random.randint(n)
        second_node = np.random.randint(n)
        while second_node == start_node:
            second_node = np.random.randint(n)
        tour = [start_node, second_node]
        unvisited = set(range(n)) - {start_node, second_node}

        # Iteratively insert nodes into the tour
        while unvisited:
            best_node = -1
            best_insertion_index = -1
            min_increase = np.inf

            for node_to_insert in unvisited:
                for i in range(len(tour)):
                    
                    insertion_cost = distance_matrix[tour[i-1], node_to_insert] + distance_matrix[node_to_insert, tour[i]] - distance_matrix[tour[i-1], tour[i]] if i > 0 else distance_matrix[tour[-1], node_to_insert] + distance_matrix[node_to_insert, tour[i]] - distance_matrix[tour[-1], tour[i]]
                    
                    if insertion_cost < min_increase:
                        min_increase = insertion_cost
                        best_node = node_to_insert
                        best_insertion_index = i

            if best_insertion_index == 0:
              tour.insert(best_insertion_index, best_node)
            else:
              tour.insert(best_insertion_index, best_node)

            unvisited.remove(best_node)
        
        tour.append(tour[0])  # Return to starting node

        # Edge refinement via 2-opt swaps
        for _ in range(n):
            i = np.random.randint(1, n)
            j = np.random.randint(i + 1, n + 1)

            if distance_matrix[tour[i-1], tour[j-1]] + distance_matrix[tour[i], tour[j]] < distance_matrix[tour[i-1], tour[i]] + distance_matrix[tour[j-1], tour[j]]:
                tour[i:j] = reversed(tour[i:j])

        # Update heuristic matrix based on edge scores
        tour_length = 0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[i+1]]

        edge_score = 1.0 / tour_length

        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += edge_score
            heuristics_matrix[node2, node1] += edge_score  # Assuming symmetric distance matrix

    heuristics_matrix /= num_samples  # Normalize to get frequencies
    return heuristics_matrix
