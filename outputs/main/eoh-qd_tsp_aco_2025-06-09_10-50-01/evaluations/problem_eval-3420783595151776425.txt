import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm combines edge frequency sampling with distance-based weighting to create a heuristic matrix that favors frequent and short edges.}
    """
    n = distance_matrix.shape[0]
    num_samples = 500
    edge_counts = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        nodes = list(range(1, n))
        np.random.shuffle(nodes)
        tour = [0] + nodes + [0]

        for i in range(n):
            u = tour[i]
            v = tour[i+1]
            edge_counts[u, v] += 1
            edge_counts[v, u] += 1

    frequency_matrix = edge_counts / num_samples
    distance_weights = 1 / (distance_matrix + 1e-9)
    heuristics_matrix = frequency_matrix * distance_weights

    return heuristics_matrix
