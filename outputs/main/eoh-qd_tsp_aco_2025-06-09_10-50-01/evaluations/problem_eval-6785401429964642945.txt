import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm generates random tours, selects the best ones based on length, and refines the tours using a local search (2-opt) before updating the heuristic matrix based on the refined tours.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    top_k = 100

    all_tours = []
    all_tour_lengths = []

    for _ in range(num_samples):
        tour = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]
        all_tours.append(tour)
        all_tour_lengths.append(tour_length)

    ranked_tours_indices = np.argsort(all_tour_lengths)
    top_tours = [all_tours[i] for i in ranked_tours_indices[:top_k]]

    def two_opt(tour):
        best_tour = tour
        best_length = sum(distance_matrix[best_tour[i], best_tour[(i + 1) % n]] for i in range(n))
        improved = True
        while improved:
            improved = False
            for i in range(1, n - 1):
                for j in range(i + 1, n):
                    new_tour = tour[:i] + tour[i:j+1][::-1] + tour[j+1:]
                    new_length = sum(distance_matrix[new_tour[i], new_tour[(i + 1) % n]] for i in range(n))
                    if new_length < best_length:
                        best_tour = new_tour
                        best_length = new_length
                        tour = new_tour
                        improved = True
        return best_tour

    refined_tours = [two_opt(tour) for tour in top_tours]

    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    for tour in refined_tours:
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += 1
            heuristics_matrix[tour[i+1], tour[i]] += 1
        heuristics_matrix[tour[-1], tour[0]] += 1
        heuristics_matrix[tour[0], tour[-1]] += 1

    heuristics_matrix = heuristics_matrix / top_k
    return heuristics_matrix
