import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines nearest neighbor and random sampling to generate tours, favoring edges that appear frequently in shorter tours, and uses a decay factor to prioritize edges from better tours.}"""
    n = distance_matrix.shape[0]
    num_samples = 500
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    tour_lengths = []

    for _ in range(num_samples):
        # Nearest neighbor tour
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        path_nn = [current_node]

        while unvisited_nodes:
            nearest_neighbor = -1
            min_distance = np.inf
            for neighbor in unvisited_nodes:
                if distance_matrix[current_node, neighbor] < min_distance:
                    min_distance = distance_matrix[current_node, neighbor]
                    nearest_neighbor = neighbor

            path_nn.append(nearest_neighbor)
            unvisited_nodes.remove(nearest_neighbor)
            current_node = nearest_neighbor

        path_nn.append(start_node)  # Return to starting node

        tour_length_nn = 0
        for i in range(n):
            tour_length_nn += distance_matrix[path_nn[i], path_nn[i+1]]

        # Random tour
        path_random = np.random.permutation(n).tolist()
        path_random.append(path_random[0])
        tour_length_random = 0
        for i in range(n):
            tour_length_random += distance_matrix[path_random[i], path_random[i+1]]

        tour_lengths.append((path_nn, tour_length_nn))
        tour_lengths.append((path_random, tour_length_random))

    tour_lengths.sort(key=lambda x: x[1])
    
    decay_factor = 0.9
    weight = 1.0

    for tour, tour_length in tour_lengths:
        for i in range(n):
            heuristics_matrix[tour[i], tour[i+1]] += weight
            heuristics_matrix[tour[i+1], tour[i]] += weight
        weight *= decay_factor

    return heuristics_matrix
