import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm computes a heuristics matrix by weighting the inverse distance between nodes with the average distance to their k-nearest neighbors, favoring inclusion of edges connecting nearby nodes in dense regions.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    k = min(5, n - 1)  # Consider up to 5 nearest neighbors

    for i in range(n):
        # Find k-nearest neighbors for node i
        distances = distance_matrix[i, :]
        nearest_neighbors = np.argsort(distances)[1:k+1]  # Exclude itself

        # Calculate average distance to nearest neighbors
        avg_neighbor_distance = np.mean(distances[nearest_neighbors])

        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = (1 / (distance_matrix[i, j] + 1e-9)) * avg_neighbor_distance
    return heuristics_matrix
