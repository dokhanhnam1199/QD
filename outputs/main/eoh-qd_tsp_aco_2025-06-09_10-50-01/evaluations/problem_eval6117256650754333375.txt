import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm biases edge selection based on inverse distance, then refines the bias based on the average distance of nodes connected by the edge.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = 1 / (distance_matrix[i, j] + 1e-9)  # Inverse distance

    # Refine based on average distance of neighbors
    for i in range(n):
        neighbor_distances = []
        for j in range(n):
            if i != j:
                neighbor_distances.append(distance_matrix[i, j])
        avg_neighbor_distance = np.mean(neighbor_distances) if neighbor_distances else 0

        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = heuristics_matrix[i, j] / (avg_neighbor_distance + 1e-9) #Scale by neighbor distance

    return heuristics_matrix
