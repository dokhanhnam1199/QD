import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs multiple TSP solutions using a greedy nearest neighbor approach with biased randomization and a local search refinement step, aggregating edge frequencies to create a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited = set(range(n))
        unvisited.remove(start_node)
        tour = [start_node]

        while unvisited:
            # Biased Nearest Neighbor Selection
            distances = [distance_matrix[current_node, neighbor] for neighbor in unvisited]
            probabilities = np.exp(-np.array(distances))  # Bias towards closer nodes
            probabilities /= np.sum(probabilities)  # Normalize to create a probability distribution

            nearest_neighbor = np.random.choice(list(unvisited), p=probabilities)

            tour.append(nearest_neighbor)
            unvisited.remove(nearest_neighbor)
            current_node = nearest_neighbor

        tour.append(start_node)

        # Local Search (2-opt)
        improved = True
        while improved:
            improved = False
            for i in range(1, n):
                for j in range(i + 1, n + 1):
                    if distance_matrix[tour[i - 1], tour[i]] + distance_matrix[tour[j - 1], tour[j]] > distance_matrix[tour[i - 1], tour[j - 1]] + distance_matrix[tour[i], tour[j]]:
                        tour[i:j] = reversed(tour[i:j])
                        improved = True

        # Update heuristic matrix based on edge frequencies
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i + 1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
