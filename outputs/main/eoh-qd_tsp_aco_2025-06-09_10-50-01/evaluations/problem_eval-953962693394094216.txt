import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple TSP solutions using a greedy nearest neighbor heuristic with stochastic restarts and a temperature-controlled acceptance probability, then aggregates the edge frequencies to create a heuristics matrix.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    temperature = 1.0

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        path = [current_node]

        while unvisited_nodes:
            distances = distance_matrix[current_node, :]
            
            # Find nearest neighbor
            nearest_node = -1
            min_dist = np.inf
            for neighbor in unvisited_nodes:
                if distances[neighbor] < min_dist:
                    min_dist = distances[neighbor]
                    nearest_node = neighbor

            # Stochastic acceptance based on temperature
            if np.random.rand() < np.exp(-min_dist / temperature):
                # Accept nearest neighbor
                next_node = nearest_node
            else:
                # Randomly choose from unvisited nodes
                available_nodes = list(unvisited_nodes)
                next_node = np.random.choice(available_nodes)
            
            path.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

        path.append(start_node)  # Return to starting node
        
        for i in range(len(path) - 1):
            u = path[i]
            v = path[i+1]
            heuristics_matrix[u, v] += 1
            heuristics_matrix[v, u] += 1  # Ensure symmetry
        
        temperature *= 0.99  #Cooling schedule

    heuristics_matrix = heuristics_matrix / num_samples
    return heuristics_matrix
