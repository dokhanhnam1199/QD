import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm iteratively refines a heuristic matrix by sampling candidate solutions using probabilities derived from the current heuristic values and updating the heuristics based on the quality of the sampled solutions.}
    """
    num_nodes = distance_matrix.shape[0]
    heuristics_matrix = np.ones_like(distance_matrix, dtype=float) / num_nodes  # Initialize with uniform probabilities
    num_iterations = 100
    num_samples = 10

    for _ in range(num_iterations):
        edge_counts = np.zeros_like(distance_matrix, dtype=float)
        total_length = 0.0
        
        for _ in range(num_samples):
            # Sample a solution based on current heuristics
            current_node = np.random.randint(num_nodes)
            unvisited_nodes = set(range(num_nodes))
            unvisited_nodes.remove(current_node)
            path = [current_node]
            tour_length = 0
            
            while unvisited_nodes:
                probabilities = heuristics_matrix[current_node, :].copy()
                
                # Zero out probabilities for visited nodes
                for node in range(num_nodes):
                    if node not in unvisited_nodes:
                        probabilities[node] = 0
                
                if np.sum(probabilities) == 0:
                    # Handle the case where all remaining nodes have zero probability. Select one at random.
                    next_node = np.random.choice(list(unvisited_nodes))
                else:
                    probabilities /= np.sum(probabilities)
                    next_node = np.random.choice(num_nodes, p=probabilities)
                
                tour_length += distance_matrix[current_node, next_node]
                path.append(next_node)
                unvisited_nodes.remove(next_node)
                current_node = next_node

            tour_length += distance_matrix[path[-1], path[0]]  # Return to start
            path.append(path[0]) # Complete the loop

            # Update edge counts
            for i in range(num_nodes):
                node1 = path[i]
                node2 = path[i+1]
                edge_counts[node1, node2] += 1
                edge_counts[node2, node1] += 1

            total_length += tour_length

        # Update heuristic matrix based on sampled solutions
        average_length = total_length / num_samples
        for i in range(num_nodes):
            for j in range(num_nodes):
                if i != j:
                    heuristics_matrix[i, j] = (0.9 * heuristics_matrix[i, j] + 0.1 * edge_counts[i, j] / num_samples) 
        
        # Normalize heuristics matrix row-wise
        for i in range(num_nodes):
            row_sum = np.sum(heuristics_matrix[i, :])
            if row_sum > 0:
                heuristics_matrix[i, :] /= row_sum

    return heuristics_matrix
