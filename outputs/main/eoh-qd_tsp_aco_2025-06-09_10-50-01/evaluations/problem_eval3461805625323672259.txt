import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple solutions using a greedy randomized construction, followed by local search, and aggregates edge frequencies.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Greedy randomized construction
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        path = [current_node]

        while unvisited_nodes:
            distances = distance_matrix[current_node, :]
            
            # Randomized selection of next node
            probabilities = 1.0 / (distances + 1e-6)
            probabilities[list(path)] = 0
            probabilities = probabilities / np.sum(probabilities)
            
            next_node = np.random.choice(n, p=probabilities)
            
            if next_node not in unvisited_nodes: #safety check
               available_nodes = list(unvisited_nodes)
               if available_nodes:
                   next_node = available_nodes[0] #take the first one
               else:
                   break
            
            path.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

        path.append(start_node)

        # Local search (2-opt) - Simplified version
        improved = True
        while improved:
            improved = False
            for i in range(1, len(path) - 2):
                for k in range(i + 1, len(path) - 1):
                    new_path = path[:i] + path[i:k+1][::-1] + path[k+1:]
                    current_cost = distance_matrix[path[i-1], path[i]] + distance_matrix[path[k], path[k+1 if k+1<len(path) else 0]]
                    new_cost = distance_matrix[path[i-1], path[k]] + distance_matrix[path[i], path[k+1 if k+1<len(path) else 0]]
                    if new_cost < current_cost:
                        path = new_path
                        improved = True
        
        # Update heuristics matrix
        for i in range(len(path) - 1):
            u = path[i]
            v = path[i+1]
            heuristics_matrix[u, v] += 1
            heuristics_matrix[v, u] += 1

    heuristics_matrix = heuristics_matrix / num_samples
    return heuristics_matrix
