import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm generates multiple random tours, calculates the average frequency of each edge appearing in the shortest tours, and returns a matrix representing these frequencies as heuristics.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    shortest_tours = []

    for _ in range(num_samples):
        permutation = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[permutation[i], permutation[i+1]]
        tour_length += distance_matrix[permutation[-1], permutation[0]]
        shortest_tours.append((permutation, tour_length))

    shortest_tours = sorted(shortest_tours, key=lambda x: x[1])
    
    num_best = min(100, num_samples)
    best_tours = shortest_tours[:num_best]

    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for tour, _ in best_tours:
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += 1
            heuristics_matrix[tour[i+1], tour[i]] += 1
        heuristics_matrix[tour[-1], tour[0]] += 1
        heuristics_matrix[tour[0], tour[-1]] += 1
        
    heuristics_matrix = heuristics_matrix / num_best
    return heuristics_matrix
