import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines random tour sampling with a local search improvement step (2-opt) and scores edges based on their frequency in the improved tours.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 500

    def calculate_tour_length(tour):
        length = 0
        for i in range(n - 1):
            length += distance_matrix[tour[i], tour[i + 1]]
        length += distance_matrix[tour[-1], tour[0]]
        return length

    def two_opt_swap(tour, i, k):
        new_tour = tour[:i] + tour[i:k+1][::-1] + tour[k+1:]
        return new_tour

    def two_opt(tour):
        best_tour = tour
        best_length = calculate_tour_length(tour)
        improved = True
        while improved:
            improved = False
            for i in range(1, n - 1):
                for k in range(i + 1, n):
                    new_tour = two_opt_swap(best_tour, i, k)
                    new_length = calculate_tour_length(new_tour)
                    if new_length < best_length:
                        best_tour = new_tour
                        best_length = new_length
                        improved = True
        return best_tour

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)

        # Improve the tour using 2-opt
        improved_tour = two_opt(list(tour))

        # Update heuristics matrix based on edges in the improved tour
        for i in range(n):
            node1 = improved_tour[i]
            node2 = improved_tour[(i + 1) % n]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    # Normalize heuristics matrix
    heuristics_matrix = heuristics_matrix / np.max(heuristics_matrix)
    return heuristics_matrix
