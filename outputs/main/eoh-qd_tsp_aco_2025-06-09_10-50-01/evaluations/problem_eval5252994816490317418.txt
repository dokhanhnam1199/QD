import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm estimates edge importance by sampling random tours, accepting only those within a stricter length threshold and weighting edge counts based on tour length relative to the threshold.}
    """
    n = distance_matrix.shape[0]
    num_samples = 1000
    threshold_factor = 1.2  # Stricter threshold
    
    # Calculate a rough estimate of the optimal tour length to set a threshold
    avg_distance = np.mean(distance_matrix)
    threshold = threshold_factor * avg_distance * n  # Adjust threshold as needed
    
    edge_counts = np.zeros_like(distance_matrix, dtype=float)
    num_accepted = 0

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]

        # Accept the tour if it's shorter than the threshold
        if tour_length < threshold:
            num_accepted += 1
            weight = (threshold - tour_length) / threshold  # Weight based on tour length
            for i in range(n - 1):
                edge_counts[tour[i], tour[i+1]] += weight
                edge_counts[tour[i+1], tour[i]] += weight  # Ensure symmetry
            edge_counts[tour[-1], tour[0]] += weight
            edge_counts[tour[0], tour[-1]] += weight
            
    # Normalize edge counts to get probabilities
    if num_accepted > 0:
        heuristics_matrix = edge_counts / np.sum(edge_counts) if np.sum(edge_counts) > 0 else np.ones_like(distance_matrix) / (n * (n - 1))
    else:
        heuristics_matrix = np.ones_like(distance_matrix) / (n * (n - 1)) # Initialize with small values, avoiding division by zero.

    return heuristics_matrix
