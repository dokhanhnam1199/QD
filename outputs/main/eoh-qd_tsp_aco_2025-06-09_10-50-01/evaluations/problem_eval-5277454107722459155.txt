import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples multiple nearest neighbor solutions with some randomness in neighbor selection, averaging the inverse of the distances of included edges to create a heuristic matrix.}
    """
    num_nodes = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    for _ in range(num_samples):
        start_node = np.random.randint(num_nodes)
        current_node = start_node
        unvisited_nodes = set(range(num_nodes))
        unvisited_nodes.remove(current_node)
        
        path = [current_node]
        
        while unvisited_nodes:
            distances = np.array([distance_matrix[current_node, neighbor] for neighbor in unvisited_nodes])
            probabilities = 1 / (distances + 1e-6)  # Inverse distance as probability, adding a small constant to avoid division by zero
            probabilities /= np.sum(probabilities)  # Normalize to create a probability distribution

            nearest_neighbor = np.random.choice(list(unvisited_nodes), p=probabilities)
            
            path.append(nearest_neighbor)
            unvisited_nodes.remove(nearest_neighbor)
            current_node = nearest_neighbor
        
        path.append(start_node)
        
        # Update heuristics matrix based on inverse distance of included edges
        for i in range(num_nodes):
            node1 = path[i]
            node2 = path[i+1]
            heuristics_matrix[node1, node2] += 1/distance_matrix[node1, node2]
            heuristics_matrix[node2, node1] += 1/distance_matrix[node2, node1]
    
    heuristics_matrix /= num_samples
    return heuristics_matrix
