import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm estimates edge importance by sampling random tours, accepting only those with lengths shorter than a threshold that decreases over time, and weighting edge counts by the tour length relative to the threshold.}
    """
    n = distance_matrix.shape[0]
    num_samples = 1000
    threshold_factor = 2.0
    decay_rate = 0.995
    
    avg_distance = np.mean(distance_matrix)
    threshold = threshold_factor * avg_distance * n
    
    edge_counts = np.zeros_like(distance_matrix, dtype=float)
    num_accepted = 0

    for _ in range(num_samples):
        tour = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]

        if tour_length < threshold:
            num_accepted += 1
            weight = max(0, 1 - (tour_length / threshold))
            for i in range(n - 1):
                edge_counts[tour[i], tour[i+1]] += weight
                edge_counts[tour[i+1], tour[i]] += weight
            edge_counts[tour[-1], tour[0]] += weight
            edge_counts[tour[0], tour[-1]] += weight

        threshold *= decay_rate
            
    if num_accepted > 0:
        heuristics_matrix = edge_counts / num_accepted
    else:
        heuristics_matrix = np.ones_like(distance_matrix) / (n * (n - 1))

    return heuristics_matrix
