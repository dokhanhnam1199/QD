import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs tours using a greedy approach with a probabilistic element, favoring shorter edges but allowing for exploration of longer edges, then updates edge probabilities based on the tour length.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = n * 50

    for _ in range(num_iterations):
        current_node = np.random.randint(n)
        unvisited = set(range(n))
        unvisited.remove(current_node)
        tour = [current_node]
        tour_length = 0

        while unvisited:
            distances = distance_matrix[current_node, :]
            probabilities = np.exp(-distances / (np.mean(distances) + 1e-6))  # Softmax
            probabilities[list(set(range(n)) - unvisited)] = 0  # Mask visited
            probabilities /= probabilities.sum()
            next_node = np.random.choice(n, p=probabilities)
            
            tour_length += distance_matrix[current_node, next_node]
            tour.append(next_node)
            unvisited.remove(next_node)
            current_node = next_node
        
        tour_length += distance_matrix[tour[-1], tour[0]]
        tour.append(tour[0])

        for i in range(n):
            heuristics_matrix[tour[i], tour[i+1]] += 1.0 / tour_length
            heuristics_matrix[tour[i+1], tour[i]] += 1.0 / tour_length

    return heuristics_matrix
