import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines the nearest neighbor heuristic with a simulated annealing-inspired approach to sample TSP solutions and uses the acceptance probability of each edge to build the heuristics matrix.}"""
    n = distance_matrix.shape[0]
    num_samples = n * 50
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    temperature = 10.0
    cooling_rate = 0.995

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited = set(range(n))
        unvisited.remove(start_node)
        path = [start_node]

        while unvisited:
            distances = distance_matrix[current_node, :]
            nearest_neighbors = np.argsort(distances)
            valid_neighbors = [node for node in nearest_neighbors if node in unvisited]

            # Simulated annealing-inspired edge selection
            probabilities = np.exp(-(np.array([distance_matrix[current_node, neighbor] for neighbor in valid_neighbors]) / temperature))
            probabilities /= probabilities.sum()
            next_node = np.random.choice(valid_neighbors, p=probabilities)
            
            path.append(next_node)
            unvisited.remove(next_node)
            
            # Update heuristics matrix based on "acceptance probability" (inverse of distance, tempered)
            heuristics_matrix[current_node, next_node] += np.exp(-distance_matrix[current_node, next_node] / temperature)
            heuristics_matrix[next_node, current_node] += np.exp(-distance_matrix[current_node, next_node] / temperature)
            
            current_node = next_node

        path.append(start_node)

        # Cool down the temperature
        temperature *= cooling_rate

    # Normalize the matrix
    heuristics_matrix = (heuristics_matrix + heuristics_matrix.T) / 2
    total = np.sum(heuristics_matrix)
    if total>0:
      heuristics_matrix /= total
    return heuristics_matrix
