```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity, waste, fragmentation, and empty bin considerations with adaptive weighting."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    # Sufficient capacity boost
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 1.8  #Sufficient cap weight

    # Minimize waste boost (weighted by remaining capacity)
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 1.2  #Min waste weight

        #Prioritize bins with smaller positive waste relatively
        waste_penalty = (waste[sufficient_capacity]/np.max(bins_remain_cap[sufficient_capacity])) if np.sum(sufficient_capacity)>0 else 0
        priority[sufficient_capacity] -= 0.5 * waste_penalty # Waste weight

    # Nearly full bin boost (dynamic threshold)
    threshold_multiplier = 1.1
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= threshold_multiplier * item) & (bins_remain_cap >= item)
    priority[nearly_full] += 2.4  #Nearly full weight

    # Small capacity based on relative availability (and bin occupancy)
    small_cap = (bins_remain_cap >= item)
    if np.sum(small_cap) > 0:
      relative_availability = (bins_remain_cap[small_cap] - item) / np.max(bins_remain_cap)
      occupancy_rate = (np.max(bins_remain_cap)-bins_remain_cap[small_cap]) / np.max(bins_remain_cap) #Prefer more occupied bins
      priority[small_cap] += 0.8*(relative_availability+occupancy_rate)  #Weight of small cap heuristic

    # Emptiness boost (decreased if other bins are nearly full)
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    if np.any(nearly_full):
        priority[is_empty] += 0.3 # Reduced weight if nearly full bins exist
    else:
        priority[is_empty] += 0.7  #Empty bins weight

    #Prioritize using partially filled bins before empty bins

    #Bin diversity term: Encourage usage of bins with capacities closer to item size
    cap_difference = np.abs(bins_remain_cap - item)
    priority -= 0.1 * cap_difference / np.max(bins_remain_cap)

    return priority
```
