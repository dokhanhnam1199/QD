```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity, waste, fragmentation, and emptiness with adaptive weights."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    sufficient_capacity = bins_remain_cap >= item
    
    # Sufficient capacity boost with weight adjustment
    priority[sufficient_capacity] += 1.8

    # Minimize waste boost with focus on bins with sufficient capacity
    waste = bins_remain_cap - item
    positive_waste = waste[sufficient_capacity]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where((waste == min_waste) & sufficient_capacity)[0]
        priority[min_waste_bins_idx] += 1.2

    # Nearly full bin boost (fragmentation avoidance)
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= 1.1 * item) & (bins_remain_cap >= item)
    priority[nearly_full] += 2.4

    # Prioritize emptier bins, especially for larger items.
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    priority[is_empty] += 0.7

    # Capacity ratio for sufficient bins only
    ratios = item / bins_remain_cap
    ratios[~sufficient_capacity] = 0  # Ignore bins without sufficient capacity
    priority += ratios * 0.5 #Weight the ratio

    return priority
```
