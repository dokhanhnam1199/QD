```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization with a capacity-ratio based adjustment."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Sufficient Capacity
    can_fit = bins_remain_cap >= item
    priority[can_fit] += 1.0

    # Heuristic 2: Minimize Waste (primary objective)
    waste = bins_remain_cap - item
    valid_waste = waste[waste >= 0]

    if len(valid_waste) > 0:
        min_waste = np.min(valid_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 3.0

    # Heuristic 3: Capacity Ratio Adjustment (refine waste minimization)
    # Give bins with smaller remaining capacity (after fitting the item) higher priority.
    remaining_after_fit = bins_remain_cap - item
    valid_bins = remaining_after_fit >= 0
    if np.any(valid_bins):
        priority[valid_bins] += (np.max(bins_remain_cap) - remaining_after_fit[valid_bins]) / np.max(bins_remain_cap) * 0.7

    return priority
```
