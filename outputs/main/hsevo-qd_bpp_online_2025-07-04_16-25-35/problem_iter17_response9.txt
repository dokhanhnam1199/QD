```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculates bin priorities, balancing capacity, waste, fragmentation, and bin emptiness with adaptive weights."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)

    # Sufficient Capacity: base priority, adaptive weight based on item size relative to max capacity
    sufficient_capacity = bins_remain_cap >= item
    capacity_weight = 1.0 + 2.0 * (item / max_cap)  # Larger items get higher capacity weight
    priority[sufficient_capacity] += capacity_weight

    # Minimize Waste: scaled priority, adaptive threshold for "small" waste
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        waste_weight = 2.0 + 1.0 * (1 - (min_waste / max_cap)) # Smaller waste gets higher weight
        priority[min_waste_bins_idx] += waste_weight

    # Prevent Fragmentation: Adaptive near-full threshold based on average item size
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= 1.5 * item) & (bins_remain_cap >= item)
    fragment_weight = 1.5 + 0.5 * (item / max_cap) # Slightly prefer filling if item is large
    priority[nearly_full] += fragment_weight

    # Small Capacity: Scale by remaining capacity relative to item size
    small_cap = (bins_remain_cap >= item)
    priority[small_cap] += (bins_remain_cap[small_cap] - item) / max_cap #scaled value

    # Empty Bin: Encourage use, scaled by how full the bin could be
    is_empty = bins_remain_cap == max_cap
    empty_weight = 0.5 + 0.5 * (item / max_cap) # Larger item, less eager to fill
    priority[is_empty] += empty_weight
    
    return priority
```
