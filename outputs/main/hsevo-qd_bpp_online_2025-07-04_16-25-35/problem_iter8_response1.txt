```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines weighted heuristics for bin packing priority."""

    sufficient_capacity_weight: float = 2.0
    min_waste_weight: float = 4.0
    nearly_full_threshold_multiplier: float = 1.8
    nearly_full_weight: float = 4.0
    empty_bin_weight: float = 5.0


    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Sufficient capacity: Base priority
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += sufficient_capacity_weight

    # Minimize waste: Higher priority for bins with least waste.
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += min_waste_weight

    # Prevent fragmentation: Bins nearly full get higher priority.
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= nearly_full_threshold_multiplier * item) & (bins_remain_cap >= item)
    priority[nearly_full] += nearly_full_weight

    # Small capacity: Scale the priority to prefer tight fits.
    small_cap = (bins_remain_cap >= item)
    if np.any(small_cap):
        priority[small_cap] += (bins_remain_cap[small_cap] - item) / np.max(bins_remain_cap)

    # Empty bin: Give some preference to using empty bins.
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    priority[is_empty] += empty_bin_weight

    return priority
```
