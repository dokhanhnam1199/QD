{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines capacity, waste, fragmentation, and adaptive weighting based on bin stats.\"\"\"\n\n    priority = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Adaptive weights based on bin utilization\n    avg_cap = np.mean(bins_remain_cap)\n    cap_std = np.std(bins_remain_cap)\n\n    # Heuristic 1: Sufficient Capacity\n    sufficient_capacity = bins_remain_cap >= item\n    priority[sufficient_capacity] += 1.0  # Base priority\n\n    # Heuristic 2: Minimize Waste (with adaptive waste threshold)\n    waste = bins_remain_cap - item\n    positive_waste = waste[waste >= 0]\n\n    if len(positive_waste) > 0:\n        # Adaptive waste threshold based on average remaining capacity\n        adaptive_waste_threshold = max(0.1 * avg_cap, 0.05) # Minimum waste size considered \"good\"\n        valid_waste = positive_waste[positive_waste <= adaptive_waste_threshold]\n\n        if len(valid_waste) > 0:\n            min_valid_waste = np.min(valid_waste)\n            min_waste_bins_idx = np.where(waste == min_valid_waste)[0]\n            priority[min_waste_bins_idx] += 2.0  # Higher priority for truly small waste\n\n    # Heuristic 3: Prevent Fragmentation (Bins near full have high priority)\n    nearly_full_threshold = 2 * item # Dynamic threshold relative to item size\n    nearly_full = (bins_remain_cap >= item) & (bins_remain_cap <= nearly_full_threshold)\n    priority[nearly_full] += 1.5\n\n    # Heuristic 4: Empty bin consideration\n    is_empty = bins_remain_cap == np.max(bins_remain_cap)\n    priority[is_empty] += 0.5\n\n    # Adaptive Scaling to prevent domination by any single heuristic\n    priority /= np.max(priority) if np.max(priority) > 0 else 1.0\n\n    return priority\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}