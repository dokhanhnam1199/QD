```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can fit the item snugly,
    but also considers bins that are mostly empty as a last resort.
    It uses a combination of remaining capacity and item size to
    calculate the priority.  We incorporate a scaled exponential
    term to strongly favor nearly full bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Small constant to prevent division by zero and log(0).
    epsilon = 1e-9

    # Bins that cannot fit the item get a very low priority.
    infeasible = bins_remain_cap < item
    priorities = np.zeros_like(bins_remain_cap, dtype=float) - 1e9
    priorities[~infeasible] = 0.0  # Reset feasible bin priorities.

    # Calculate the remaining capacity after placing the item.
    remaining_after_placement = bins_remain_cap - item
    remaining_after_placement[remaining_after_placement < 0] = 0 # Ensure no negative values
    # Encourage near-full bins with exponential scaling.
    # The scaling factor (5) determines the steepness of the exponential.
    # Higher scaling leads to a more aggressive near-full bin preference.
    capacity_utilization = item / bins_remain_cap
    priorities[~infeasible] = np.exp(5 * capacity_utilization[~infeasible])

    # For bins that *can* fit, use the above to determine their *initial* priority
    # And *then* add a slight nudge.

    # Modify priorities based on how close the item fits.

    fit_ratio = item / (bins_remain_cap + epsilon)

    # Favor bins where item uses most capacity after the fit (ratio ~ 1).
    priorities[~infeasible] += 10 * (1 - np.abs(1 - fit_ratio[~infeasible]))
    # Small preference for smaller relative waste, scaling exponentially

    return priorities
```
