```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity, waste, fragmentation, and empty bin considerations with dynamic adjustments."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    # 1. Sufficient Capacity Boost with Item Size Consideration
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 1.8

    # 2. Minimize Waste Boost with Adaptive Waste Threshold
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]

    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 1.2

        #Adaptive waste threshold based on the item size
        adaptive_waste_threshold = 0.2 * item
        small_waste_bins = (waste >= 0) & (waste <= adaptive_waste_threshold)
        priority[small_waste_bins] += 0.6 # Added small waste weight

    # 3. Nearly Full Bin Boost with Dynamic Threshold
    nearly_full_threshold = 1.1 # Initial threshold
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= nearly_full_threshold * item) & (bins_remain_cap >= item)
    priority[nearly_full] += 2.4

    # 4. Small Capacity Based on Relative Availability (Normalized)
    sufficient_bins = bins_remain_cap >= item
    if np.any(sufficient_bins):
        max_remaining_cap = np.max(bins_remain_cap[sufficient_bins])
        priority[sufficient_bins] += (bins_remain_cap[sufficient_bins] - item) / max_remaining_cap #Normalizing
    
    # 5. Empty Bin Consideration with bin utilization
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    priority[is_empty] += 0.7

    #6. Penalize bins close to full but can't fit the item

    cannot_fit = (bins_remain_cap < item) & (bins_remain_cap > 0)
    priority[cannot_fit] -= 0.5

    #7. Reward higher bin utilization globally (Encourage packing)

    total_capacity = np.sum(bins_remain_cap)
    bin_utilization_score = (num_bins - (total_capacity/np.max(bins_remain_cap)))/num_bins #Scale between 0 and 1
    priority += 0.2 * bin_utilization_score

    return priority
```
