```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Heuristic 1: First-Fit Decreasing Variant
    # Prefer bins where the item fits relatively snugly, but not perfectly.
    # Inspired by minimizing wasted space, a key consideration.

    fit_check = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Apply heuristic only to bins where item fits
    eligible_bins = bins_remain_cap[fit_check]
    if len(eligible_bins) > 0:
        slack = eligible_bins - item  # Remaining space if item is added
        relative_slack = slack / eligible_bins  # Slack relative to bin size

        # Penalize bins that are nearly full already, to avoid creating almost-empty bins
        # Penalize bins that are very empty after adding the item
        priorities[fit_check] = np.exp(-5 * relative_slack) - np.exp(-5 * (1- relative_slack)) # Gaussian like priority distribution.

        #Heuristic 2 : Give Preference to bins closest to full

        priorities[fit_check] +=  eligible_bins / bins_remain_cap.max()
    return priorities
```
