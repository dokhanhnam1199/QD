```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity, waste, fragmentation, and utilization."""
    priority = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    # Sufficient Capacity
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 2.0

    # Minimize Waste
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 1.5

    # Nearly Full
    nearly_full_threshold = 1.2
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= nearly_full_threshold * item) & (bins_remain_cap >= item)
    priority[nearly_full] += 2.5

    # Empty Bin
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    priority[is_empty] += 0.8

    # Bin Utilization
    total_capacity = np.sum(bins_remain_cap)
    bin_utilization_score = (num_bins - (total_capacity/np.max(bins_remain_cap)))/num_bins
    priority += 0.3 * bin_utilization_score
    
    # Penalize cannot fit bins
    cannot_fit = (bins_remain_cap < item) & (bins_remain_cap > 0)
    priority[cannot_fit] -= 0.6

    return priority
```
