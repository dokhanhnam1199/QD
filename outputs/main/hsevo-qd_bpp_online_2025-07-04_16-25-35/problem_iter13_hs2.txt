import numpy as np
import random
import math
import scipy
import torch
def priority_v2(item: float,
                 bins_remain_cap: np.ndarray,
                 sufficient_capacity_weight: float = 1.7632562780455285,
                 min_waste_weight: float = 2.9270614389150627,
                 nearly_full_threshold_multiplier: float = 2.048153298532649,
                 nearly_full_weight: float = 2.176871330250305,
                 empty_bin_weight: float = 1.3210224573839708,
                 min_bin_cap: float = 0.7493324909113197) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        sufficient_capacity_weight: Weight for bins with sufficient capacity.
        min_waste_weight: Weight for bins that minimize waste.
        nearly_full_threshold_multiplier: Multiplier for item size to determine nearly full threshold.
        nearly_full_weight: Weight for bins that are nearly full.
        empty_bin_weight: Weight for empty bins.
        min_bin_cap: Minimum capacity of a bin to be considered.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Heuristic 1: Sufficient Capacity
    sufficient_capacity = bins_remain_cap >= item
    priority = np.zeros_like(bins_remain_cap, dtype=float)
    priority[sufficient_capacity] += sufficient_capacity_weight  # Base priority if bin can fit item

    # Heuristic 2: Minimize Waste (Maximize filled space).
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0] # Consider only valid waste
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += min_waste_weight

    # Heuristic 3: Prevent Fragmentation (Bins near full have high priority).
    nearly_full = (bins_remain_cap > min_bin_cap) & (bins_remain_cap <= nearly_full_threshold_multiplier * item) & (bins_remain_cap >= item)
    priority[nearly_full] += nearly_full_weight

    # Heuristic 4: Small amount of available capacity.
    small_cap = (bins_remain_cap >= item)
    priority[small_cap] += (bins_remain_cap[small_cap] - item) / np.max(bins_remain_cap) # Add scaled value based on relative small capacity.
    
    # Heuristic 5: Give higher preference if it is an empty bin.
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    priority[is_empty] += empty_bin_weight

    return priority
