```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the wasted space if the item is added to each bin
    wasted_space = bins_remain_cap - item
    
    # Give very low priority if item does not fit
    wasted_space[wasted_space < 0] = np.inf
    
    # Prioritize bins that would result in small wasted space, avoid small wasted space if a better fit is possible
    priorities = -wasted_space
    
    # Scale priorities, such that small wastes space give much higher scores.
    priorities = np.exp(priorities)

    # Avoid bins that are almost full unless necessary by slightly reducing their score
    almost_full = (bins_remain_cap - item) < 0.1
    priorities[almost_full] *= 0.5

    # Return priorities
    return priorities
```
