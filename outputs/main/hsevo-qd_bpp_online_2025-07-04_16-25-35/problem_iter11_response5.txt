```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity ratio with waste and near-full considerations."""

    bin_capacity = np.max(bins_remain_cap)
    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Base priority: inverse of remaining capacity ratio
    priority += item / (bins_remain_cap + 1e-6)  # Adding a small constant to prevent division by zero

    # Minimize waste: bonus for bins that fit item with minimal waste
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 1.0  # Bonus for minimal waste

    # Nearly full: encourage filling bins that are nearly full
    nearly_full_threshold = item * 1.2 # Dynamic threshold
    nearly_full = (bins_remain_cap >= item) & (bins_remain_cap <= nearly_full_threshold)
    priority[nearly_full] += 1.5 # Bonus for nearly full bins

    # Empty bin: discincentivize starting new bins if avoidable
    is_empty = bins_remain_cap == bin_capacity
    priority[is_empty] -= 0.5 # Penalty for using empty bins

    return priority
```
