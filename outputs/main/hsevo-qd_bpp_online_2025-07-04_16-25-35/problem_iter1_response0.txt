```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # 1. Feasibility: Assign a very low priority to bins that can't fit the item.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # 2. Remaining Capacity: Prioritize bins with enough capacity to accommodate the item
    #    but prefer those with smaller remaining capacity *after* placing the item (First-Fit Decreasing Inspired).
    
    feasible_mask = bins_remain_cap >= item
    remaining_capacity_after_placement = bins_remain_cap[feasible_mask] - item
    
    # Smaller remaining capacity after placement gets higher priority. Add a small constant to avoid division by zero.
    priorities[feasible_mask] = 1.0 / (remaining_capacity_after_placement + 0.0001) 
    
    # 3. Bonus for bins that are nearly full after placement, but avoid perfect fit
    nearly_full_threshold = 0.1  # Tune this value (e.g., bin is 90% full after placement).
    nearly_full_mask = (remaining_capacity_after_placement > 0) & (remaining_capacity_after_placement <= nearly_full_threshold)
    priorities[feasible_mask][nearly_full_mask] += 10  # Add a bonus priority. Tune this value

    return priorities
```
