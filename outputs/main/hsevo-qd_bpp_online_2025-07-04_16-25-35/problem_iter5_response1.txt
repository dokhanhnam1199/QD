```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, fragmentation avoidance, and empty bin preference."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    # Feasibility check:
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return priority  # No bin can fit the item

    priority[feasible] += 1.0  # Give feasible bins a base priority

    # Waste minimization: Prefer bins where the item fits with minimal waste.
    waste = bins_remain_cap - item
    positive_waste = waste[feasible]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where((waste == min_waste) & feasible)[0]
        priority[min_waste_bins_idx] += 3.0

    # Fragmentation avoidance:
    nearly_full = (bins_remain_cap >= item) & (bins_remain_cap <= 2 * item)
    priority[nearly_full] += 2.0

    # Empty bin preference (for larger items):
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    priority[is_empty] += 1.5 if item > np.mean(bins_remain_cap) else 0.75

    # Small capacity scaling:
    sufficient_cap = bins_remain_cap >= item
    priority[sufficient_cap] += (bins_remain_cap[sufficient_cap] - item) / np.max(bins_remain_cap)

    return priority
```
