```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A refined priority function for online bin packing, incorporating dynamic adaptation
    and trade-off management based on bin capacity distribution and item size.
    """

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    n_bins = len(bins_remain_cap)

    # 1. Sufficient Capacity with Adaptive Scaling:
    sufficient_capacity = bins_remain_cap >= item
    if np.any(sufficient_capacity):
        # Scale the boost based on the proportion of bins that can accommodate the item
        capacity_boost = 1.8 * (1 - np.sum(sufficient_capacity) / n_bins)
        priority[sufficient_capacity] += capacity_boost

    # 2. Waste Minimization with Thresholding:
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        #Prioritize bins with min waste but also check if waste is small enough
        waste_threshold = 0.2 #Adjust this parameter
        min_waste_boost = 1.2
        if min_waste <= waste_threshold:
            priority[min_waste_bins_idx] += min_waste_boost
        else:
             priority[min_waste_bins_idx] += min_waste_boost * (1 - min_waste / np.max(bins_remain_cap)) # Scale by relative waste

    # 3. Nearly Full Bin Prioritization with Item Size Consideration:
    # Adjust the "nearly full" range dynamically based on average remaining capacity
    avg_remaining_capacity = np.mean(bins_remain_cap)
    nearly_full_upper_bound = item + 0.1 * avg_remaining_capacity
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= nearly_full_upper_bound) & (bins_remain_cap >= item)
    priority[nearly_full] += 2.4

    # 4. Empty Bin Handling:  Prioritize only if no sufficiently filled bin exists
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    if not np.any(sufficient_capacity):  #Prioritize emptying only if no good fit exist
        priority[is_empty] += 0.7
    
    # 5. Fragmentation Avoidance (Penalize leaving very small gaps):
    small_gap_threshold = 0.1  # A small gap is considered less than 10% of bin size
    potential_waste = bins_remain_cap[sufficient_capacity] - item
    fragmented_bins_idx = np.where(potential_waste < small_gap_threshold)[0]

    #Sufficient cap indices from all the bins
    all_sufficient_cap_idx = np.where(sufficient_capacity)[0]

    #Map indices to original bins_remain_cap array
    fragmented_bins = all_sufficient_cap_idx[fragmented_bins_idx]
    priority[fragmented_bins] -= 0.5

    return priority
```
