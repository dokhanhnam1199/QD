```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines weighted factors: capacity, waste, fragmentation, empty bins."""

    sufficient_capacity = bins_remain_cap >= item
    priority = np.zeros_like(bins_remain_cap, dtype=float)

    priority[sufficient_capacity] += 2.0  # Capacity matters

    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 4.0  # Minimize waste

    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= 2 * item) & (bins_remain_cap >= item)
    priority[nearly_full] += 3.0  # Avoid fragmentation

    small_cap = (bins_remain_cap >= item)
    priority[small_cap] += (bins_remain_cap[small_cap] - item) / np.max(bins_remain_cap)

    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    priority[is_empty] += 1.0

    return priority
```
