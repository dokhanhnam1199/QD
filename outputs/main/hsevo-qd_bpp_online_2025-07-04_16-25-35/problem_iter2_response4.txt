```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity ratio and waste minimization for bin priority."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    sufficient_capacity = bins_remain_cap >= item
    
    # Prioritize bins with sufficient capacity based on the ratio of item size to remaining capacity.
    ratios = item / bins_remain_cap
    priority[sufficient_capacity] += 1 - ratios[sufficient_capacity]
    
    # Give a bonus to bins that minimize waste, but only if they have sufficient capacity.
    waste = bins_remain_cap - item
    min_waste_bins_idx = np.where((waste == np.min(waste[waste >= 0])) & sufficient_capacity)[0] if np.any(waste >= 0) else []
    priority[min_waste_bins_idx] += 0.5

    return priority
```
