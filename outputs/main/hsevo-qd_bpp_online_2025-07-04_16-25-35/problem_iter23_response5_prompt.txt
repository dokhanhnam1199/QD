{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines capacity, waste, fragmentation, and empty bin considerations with adaptive weights.\"\"\"\n\n    priority = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Adaptive weights based on item size (example: smaller items favor minimal waste)\n    item_size_factor = min(1.0, item)  # Scale down influence for larger items\n\n    # Sufficient capacity boost (slightly increased weight)\n    sufficient_capacity = bins_remain_cap >= item\n    priority[sufficient_capacity] += 2.0 * (1 + 0.2 * item_size_factor)  # Increased weight + item size influence\n\n    # Minimize waste boost (adaptive weight)\n    waste = bins_remain_cap - item\n    positive_waste = waste[waste >= 0]\n    if len(positive_waste) > 0:\n        min_waste = np.min(positive_waste)\n        min_waste_bins_idx = np.where(waste == min_waste)[0]\n        priority[min_waste_bins_idx] += 1.5 * (1 - 0.3 * item_size_factor)  # Adjusted weight, favors smaller items\n\n        # Add a slight penalty for larger waste (discourages creating very fragmented bins)\n        large_waste = waste > 0.5 #tuneable threshold\n        priority[large_waste] -= 0.1 * item_size_factor  # Item size influence, smaller item less fragmented\n    \n    # Nearly full bin boost (strongest boost, less adaptive)\n    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= 1.1 * item) & (bins_remain_cap >= item)\n    priority[nearly_full] += 2.8\n\n    # Small capacity based on relative availability (normalized and scaled)\n    small_cap = (bins_remain_cap >= item)\n    if np.any(small_cap):  # Avoid division by zero if no bins have enough capacity\n        max_cap = np.max(bins_remain_cap)\n        priority[small_cap] += ((bins_remain_cap[small_cap] - item) / max_cap) * 0.8  # Scaled contribution\n\n    # Emptiness boost (decreased weight, less important to fill empty bins immediately)\n    is_empty = bins_remain_cap == np.max(bins_remain_cap)\n    priority[is_empty] += 0.5 * (1 + 0.1 * item_size_factor) # Empty bins weight, scaled\n\n    # Diversity encouragement: random nudge to avoid getting stuck in local optima\n    priority += np.random.rand(len(bins_remain_cap)) * 0.01\n\n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines capacity ratios with waste minimization for bin prioritization.\"\"\"\n    priority = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: Sufficient Capacity\n    sufficient_capacity = bins_remain_cap >= item\n    priority[sufficient_capacity] += 1\n\n    # Heuristic 2: Minimize Waste (Only for bins with sufficient capacity)\n    waste = bins_remain_cap - item\n    min_waste = np.min(waste[sufficient_capacity]) if np.any(sufficient_capacity) else np.inf\n    min_waste_bins_idx = np.where((waste == min_waste) & sufficient_capacity)[0]\n    priority[min_waste_bins_idx] += 2\n\n    # Heuristic 3: Capacity Ratio (Only for bins with sufficient capacity)\n    ratios = item / bins_remain_cap\n    ratios[~sufficient_capacity] = 0  # Ignore bins without sufficient capacity\n    priority += ratios\n\n    return priority\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic considers multiple factors like sufficient capacity, waste minimization, fragmentation prevention, and empty bin utilization, assigning weights to each. The worst heuristic only considers the ratio of item size to remaining bin capacity using a log transformation. (2nd best) vs (second worst) shows (2nd best) adds diversity encouragement with a random nudge, handles cases where no bins have sufficient capacity, and adaptively adjusts weights based on item size. (1st) vs (2nd), the second heuristic introduces adaptive weights based on item size and a small random nudge for diversity, potentially improving exploration of the solution space. (3rd) vs (4th), (3rd) uses hardcoded weights. In contrast, (4th) allows for customizable weights for different heuristics. Comparing (second worst) vs (worst), we see the second worst uses a few heuristics, and the worst one use ratio of item to bins remain capacity and log transform. Overall: The better heuristics incorporate multiple factors, adaptive weights, and sometimes a degree of randomization to avoid local optima. Simpler heuristics focusing on a single metric tend to perform worse.\n- \nOkay, I'm ready to help you design better heuristics! Let's redefine self-reflection, focusing on actionable insights and avoiding generic advice.\n\nHere's a revised approach to 'Current Self-Reflection':\n\n*   **Keywords:** Problem-specific factors, Adaptive strategies, Solution space exploration, Performance tuning.\n*   **Advice:** Focus on identifying and encoding *problem-specific* knowledge into heuristics. Develop *adaptive strategies* based on *runtime information* or observed solution characteristics, instead of just static instance features. Actively test different weightings, and explore neighborhood structures and solution space thoroughly.\n*   **Avoid:** Generic \"consider multiple factors,\" vague notions of \"importance,\" and untargeted randomness.\n*   **Explanation:** Shift from general principles to concrete actions. Emphasize leveraging runtime data and tailoring the search process to the specific problem at hand. Focus on generating and evaluating diverse solutions.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}