```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity, waste, fragmentation, and empty bin considerations with adaptive weights and bin diversity."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)
    max_capacity = np.max(bins_remain_cap)
    
    #Adaptive Sufficient capacity boost
    sufficient_capacity = bins_remain_cap >= item
    sufficient_capacity_weight = 1.8 + 0.6 * (1 - (np.sum(sufficient_capacity) / num_bins))
    priority[sufficient_capacity] += sufficient_capacity_weight

    #Adaptive Minimize waste boost
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        min_waste_weight = 1.2 + 0.4 * (1 - (min_waste / max_capacity))
        priority[min_waste_bins_idx] += min_waste_weight

    #Adaptive Nearly full bin boost
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= 1.1 * item) & (bins_remain_cap >= item) #threshold multiplier = 1.1
    nearly_full_weight = 2.4 + 0.8 * (np.sum(nearly_full) / num_bins) if np.sum(nearly_full) > 0 else 2.4
    priority[nearly_full] += nearly_full_weight

    #Small capacity based on relative availability, avoid division by zero
    small_cap = (bins_remain_cap >= item)
    if np.max(bins_remain_cap) > 0:
        priority[small_cap] += (bins_remain_cap[small_cap] - item) / np.max(bins_remain_cap)
    else:
        priority[small_cap] += 0  #handle the case where all bins are empty.

    #Adaptive Emptiness boost: consider number of empty bins
    is_empty = bins_remain_cap == max_capacity
    empty_bins_weight = 0.7 + 0.3 * (np.sum(is_empty) / num_bins)
    priority[is_empty] += empty_bins_weight

    #Bin Diversity boost: encourages use of different bins
    bin_diversity_weight = 0.2
    priority += bin_diversity_weight * (bins_remain_cap / max_capacity)

    return priority
```
