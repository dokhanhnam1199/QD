```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines adaptive waste, utilization, and tunable weights."""
    priority = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    # Tunable weights
    sufficient_cap_weight = 2.0
    min_waste_weight = 1.5
    small_waste_weight = 0.7
    nearly_full_weight = 2.8
    bin_utilization_weight = 0.5
    empty_bin_weight = 1.0
    cannot_fit_penalty = 0.6

    # 1. Sufficient Capacity Boost
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += sufficient_cap_weight

    # 2. Minimize Waste (Adaptive)
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += min_waste_weight

        adaptive_waste_threshold = 0.15 * item  # Adjusted threshold
        small_waste_bins = (waste >= 0) & (waste <= adaptive_waste_threshold)
        priority[small_waste_bins] += small_waste_weight

    # 3. Nearly Full Bin Boost (Item-Dependent)
    nearly_full_threshold = 1.1
    nearly_full = (bins_remain_cap >= item) & (bins_remain_cap <= nearly_full_threshold * item) & (bins_remain_cap > 0)
    priority[nearly_full] += nearly_full_weight

    # 4. Bin Utilization
    bin_utilization = (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap)
    good_utilization = (bin_utilization >= 0.2) & (bin_utilization <= 0.8)
    priority[good_utilization] += bin_utilization_weight

    # 5. Empty Bin Consideration
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    if np.any(is_empty) and np.sum(bins_remain_cap < np.max(bins_remain_cap)) > num_bins // 3: #ensure that you do not overuse empty bins. At least one-third of all bins need to have some value
        priority[is_empty] += empty_bin_weight


    # 6. Penalize insufficient capacity
    cannot_fit = (bins_remain_cap < item) & (bins_remain_cap > 0)
    priority[cannot_fit] -= cannot_fit_penalty

    return priority
```
