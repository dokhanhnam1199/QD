```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A refined priority function for online bin packing, incorporating adaptive
    strategies and trade-off management for improved performance.
    """

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    n_bins = len(bins_remain_cap)

    # 1. Capacity-Aware Prioritization:  Dynamically adjust the 'sufficient_capacity'
    #    boost based on the overall fill level of the bins.  If bins are generally
    #    empty, emphasize using them; if they're mostly full, look for tighter fits.
    avg_fill = np.mean(1 - bins_remain_cap)  # Average fill level (0 to 1)

    sufficient_capacity = bins_remain_cap >= item
    if np.any(sufficient_capacity):
      priority[sufficient_capacity] += 1.8 * (1 - avg_fill)  # Higher when bins are emptier
      priority[sufficient_capacity] += 0.7 #flat boost when sufficient cap exists


    # 2. Waste Optimization: Focus on minimizing waste, but with a penalty for creating
    #    very small remaining spaces.
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]

    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 1.2 # Min waste weight
        # Discourage excessively small remaining spaces relative to item size
        small_waste_penalty = (min_waste < 0.25 * item)
        priority[min_waste_bins_idx[small_waste_penalty]] -= 0.5 #reduce priority for small waste


    # 3. Nearly Full Bin Strategy:  Aggressively prioritize bins close to full,
    #    but only if adding the current item won't *overfill* them (which shouldn't
    #    happen in a correct implementation, but we add a check for robustness).
    nearly_full = (bins_remain_cap >= item) & (bins_remain_cap <= 1.1 * item) & (bins_remain_cap > 0)
    if np.any(nearly_full):
        priority[nearly_full] += 2.4 #weight for being nearly full

    # 4. Empty Bin Incentive: Adapt the empty bin bonus based on how many bins
    #    are currently empty.  If many bins are empty, the incentive is smaller.
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    num_empty = np.sum(is_empty)
    empty_bonus = 0.7 * (1 - (num_empty / n_bins))  # Scale bonus based on emptiness
    priority[is_empty] += empty_bonus

    # 5. Fragmentation Avoidance: Penalize placements that leave a bin with
    #    a remaining capacity that's significantly smaller than the *smallest*
    #    item we anticipate seeing.  This is a *proactive* approach to
    #    fragmentation. Let's say we expect items no smaller than 0.1.
    remaining_after_placement = bins_remain_cap - item
    fragmented = (remaining_after_placement > 0) & (remaining_after_placement < 0.1)
    priority[fragmented] -= 0.8 #fragmenation weight

    return priority
```
