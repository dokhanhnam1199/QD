```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity ratio with waste minimization and empty bin preference."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Capacity Ratio (similar to v1, but scaled)
    ratios = item / bins_remain_cap
    priority += -np.log(ratios + 1e-6)  # Adding small value to avoid log(0)

    # Heuristic 2: Minimize Waste (Maximize filled space).
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 2

    # Heuristic 3: Give higher preference if it is an empty bin.
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    priority[is_empty] += 1

    return priority
```
