```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First Fit Decreasing Inspired: Prefer bins with capacity close to item size
            # to avoid fragmentation but consider also how full the bin would be.
            priorities[i] = (cap - item + 1e-9) / (cap + 1e-9) + (item / cap) #Prioritize small difference and high fill rate, prevent zero division
        else:
            priorities[i] = -1e9  # Very low priority if the item doesn't fit.
    return priorities
```
