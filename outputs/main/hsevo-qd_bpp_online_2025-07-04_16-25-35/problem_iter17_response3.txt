```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity, adaptive waste, and dynamic bin utilization."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    # Tunable weights - could be optimized.
    sufficient_cap_weight = 2.0
    min_waste_weight = 1.5
    small_waste_weight = 0.7
    nearly_full_weight = 2.7
    bin_utilization_weight = 0.5
    cannot_fit_penalty = 0.6

    # 1. Sufficient Capacity Boost
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += sufficient_cap_weight

    # 2. Adaptive Minimize Waste
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += min_waste_weight

        adaptive_waste_threshold = 0.15 * item  # Dynamically adjusted
        small_waste_bins = (waste >= 0) & (waste <= adaptive_waste_threshold)
        priority[small_waste_bins] += small_waste_weight

    # 3. Nearly Full Bin Boost
    nearly_full_threshold = 1.1
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= nearly_full_threshold * item) & (bins_remain_cap >= item)
    priority[nearly_full] += nearly_full_weight

    # 4. Dynamic bin utilization score
    total_capacity = np.sum(bins_remain_cap)
    bin_utilization_score = (num_bins - (total_capacity/np.max(bins_remain_cap)))/num_bins
    priority += bin_utilization_weight * bin_utilization_score

    # 5. Penalize bins that can't fit item
    cannot_fit = (bins_remain_cap < item) & (bins_remain_cap > 0)
    priority[cannot_fit] -= cannot_fit_penalty

    return priority
```
