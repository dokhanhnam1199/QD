```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can fit the item snugly, but also considers
    avoiding fragmentation and favouring bins that are already relatively full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap)

    # 1. Feasibility: Can the item even fit?  Crucial for meaningful comparison.
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
      return priorities  # All bins are useless

    # 2.  Snug Fit:  The closer the item's size is to the remaining capacity, the better.
    # Avoids massive fragmentation.  We use clipped absolute difference for numerical stability.
    snugness = 1.0 - np.clip(np.abs(bins_remain_cap - item) / np.max(bins_remain_cap), 0, 1)
    snugness[~feasible_bins] = -1.0 # ensure infeasible bins are heavily penalized

    # 3. Fill level consideration: higher the better
    fill_level = 1.0 - bins_remain_cap / np.max(bins_remain_cap)

    # 4. Combine snugness and fill level using a weighted approach.  Emphasize snug fit, but don't ignore fill level
    priorities = 0.7 * snugness + 0.3 * fill_level


    priorities[~feasible_bins] = -np.inf  # Impossible fits must have negligible priority
    return priorities
```
