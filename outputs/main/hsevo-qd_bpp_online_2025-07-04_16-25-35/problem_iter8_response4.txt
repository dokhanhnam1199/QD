```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Heuristic for online bin packing, combines waste minimization, fragmentation prevention, and bin utilization."""

    bin_capacity = np.max(bins_remain_cap)
    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Sufficient capacity
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 1.8

    # Minimize waste
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 1.2

    # Prevent fragmentation
    nearly_full = (bins_remain_cap > 0) & (bins_remain_cap <= 1.1 * item) & (bins_remain_cap >= item)
    priority[nearly_full] += 2.4

    # Small amount of capacity
    sufficient_bins = bins_remain_cap >= item
    if np.any(sufficient_bins):
        waste_ratios = waste[sufficient_bins] / bin_capacity
        priority[sufficient_bins] += 0.5 * (1 - waste_ratios)

    # Empty bin preference
    is_empty = bins_remain_cap == bin_capacity
    priority[is_empty] += 0.8

    # Bin utilization
    bin_utilization = (bin_capacity - bins_remain_cap) / bin_capacity
    priority += 1.0 * bin_utilization

    return priority
```
