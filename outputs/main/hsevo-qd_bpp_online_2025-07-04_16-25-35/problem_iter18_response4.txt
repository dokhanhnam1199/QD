```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive priority function for online bin packing, dynamically adjusting to item size and bin states."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    # 1. Capacity Matching Score (Adaptive to item size)
    capacity_diff = bins_remain_cap - item
    positive_diff = capacity_diff[capacity_diff >= 0]

    if len(positive_diff) > 0:
        min_waste = np.min(positive_diff)
        min_waste_bins_idx = np.where(capacity_diff == min_waste)[0]
        priority[min_waste_bins_idx] += 3.0  # Aggressive reward for near-perfect fit
        sufficient_capacity = bins_remain_cap >= item
        priority[sufficient_capacity] += 1.5 #Sufficient cap weight

    # 2. Bin State Awareness (Empty vs. Partially Full)
    empty_bin_bonus = 0.0
    if num_bins > 0:
        average_bin_level = np.mean(bins_remain_cap)

        #Adaptive empty bin bonus, the emptier the bin, the more likely to pack it
        empty_bins = bins_remain_cap == np.max(bins_remain_cap)
        empty_bin_bonus = 0.5 * (1 + np.mean(bins_remain_cap)/np.max(bins_remain_cap)) #Scale the bonus based on how full the bins in general are.
        priority[empty_bins] += empty_bin_bonus # Empty bins attract smaller items, but large items can also go there

        # 3. Fragmentation Avoidance (Dynamically adjusts based on item size relative to average bin capacity)
        frag_threshold = average_bin_level * 0.75  # Adjust the threshold based on average bin capacity
        nearly_full = (bins_remain_cap >= item) & (bins_remain_cap <= 1.1 * item) & (bins_remain_cap > 0)
        priority[nearly_full] += 2.5
        small_cap = (bins_remain_cap >= item)
        priority[small_cap] += (bins_remain_cap[small_cap] - item) / np.max(bins_remain_cap) #Prioritizing small capacity
    else:
        return priority

    # 4. Penalize bins close to full but not enough for the item

    insufficient_capacity = (bins_remain_cap < item) & (bins_remain_cap > 0)
    priority[insufficient_capacity] -= 0.1

    # 5. Avoid placing the item in very large bins
    large_bins = bins_remain_cap > 1.5 * item # scale the bonus to be relative
    priority[large_bins] -= 0.05

    return priority
```
