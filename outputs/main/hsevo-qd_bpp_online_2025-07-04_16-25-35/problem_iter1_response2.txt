```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate wasted space if item is placed in the bin.
    wasted_space = bins_remain_cap - item
    
    # Initialize priorities.
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give higher priority to bins where the item fits.
    fits = wasted_space >= 0
    priorities[fits] = (bins_remain_cap[fits] * (1 + np.exp(-10*wasted_space[fits]))) # Bins that can fit and minimizing space
    
    # Discourage bins where the item does NOT fit by setting priority to a negative large number, avoid this bin at any cost.
    priorities[~fits] = -np.inf # Avoid bins that the item doesn't fit.
    
    return priorities
```
