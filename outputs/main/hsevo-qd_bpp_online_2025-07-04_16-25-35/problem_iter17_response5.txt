```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive priority function optimizing for bin utilization and fragmentation."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)

    # 1. Sufficient Capacity with Adaptive Boost
    sufficient_capacity = bins_remain_cap >= item
    if np.any(sufficient_capacity):
        priority[sufficient_capacity] += 2.0
    else:
        priority -= 0.1  # Encourage new bin if none fit

    # 2. Minimize Waste with Item-Size Awareness
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 1.5

    # 3. Nearly Full with Dynamic Threshold
    nearly_full_threshold = 1.1 * item  # Dynamic threshold
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= nearly_full_threshold) & (bins_remain_cap >= item)
    if np.any(nearly_full):
        priority[nearly_full] += 2.5

    # 4. Bin Utilization (Proportional)
    bin_utilization = (max_cap - bins_remain_cap) / max_cap
    priority += 0.8 * bin_utilization

    # 5. Empty Bin Strategy (Item Size Dependent)
    is_empty = bins_remain_cap == max_cap
    if np.any(is_empty):
        if item > 0.5 * max_cap:
            priority[is_empty] += 0.9  # Favors large items into empty bins
        else:
            priority[is_empty] -= 0.2  # Penalize small items into empty bins

    # 6. Adaptive Fragmentation Penalty
    remaining_after_pack = bins_remain_cap - item
    fragmentation_threshold = 0.1 * max_cap
    highly_fragmented = (remaining_after_pack > 0) & (remaining_after_pack < fragmentation_threshold)
    priority[highly_fragmented] -= 1.3

    # 7. Capacity Pressure - reward if adding this item makes the bin significantly full
    capacity_pressure = (item / max_cap) * (1 - (bins_remain_cap / max_cap)) #Item size scaled, multiplied by how full the bin already is.
    priority += 0.5 * capacity_pressure # Scale down reward.

    return priority
```
