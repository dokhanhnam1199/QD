```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can accommodate the item with minimal wasted space,
    but also considers a 'reserve' capacity to avoid premature bin closing. Bins that cannot
    fit the item receive a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Penalize bins that can't fit the item severely
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Reward bins based on how well the item fits (smaller waste is better).
    # Add a small reserve component: try not to fill bins *completely* to allow for some
    # flexibility with future, possibly smaller, items.
    feasible_bins = ~infeasible_bins
    waste = bins_remain_cap[feasible_bins] - item
    reserve = 0.1 * bins_remain_cap[feasible_bins] # 10% reserve
    adjusted_waste = waste + reserve
    adjusted_waste[adjusted_waste < 0] = 0 # prevent negative waste because of reserve
    
    #Avoid dividing by zero, if a bin exactly fits
    adjusted_waste[adjusted_waste == 0] = 0.001

    priorities[feasible_bins] = -adjusted_waste # Invert to give smaller waste higher priority.
    
    # Normalize for Stability
    if np.any(priorities != -np.inf):  #avoiding to normalize infinite numbers
      max_priority = np.max(priorities[priorities != -np.inf]) #max among non-inf
      min_priority = np.min(priorities[priorities != -np.inf])
      if max_priority == min_priority: #avoid division by zero
        priorities[priorities != -np.inf] = 1
      else:
        priorities[priorities != -np.inf] = (priorities[priorities != -np.inf] - min_priority) / (max_priority - min_priority)

    return priorities
```
