```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity ratio with waste minimization and fragmentation prevention."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Capacity Ratio (similar to v1 but avoids log)
    priority += item / (bins_remain_cap + 1e-6) # Avoid division by zero

    # Heuristic 2: Minimize Waste (from v0)
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 2

    # Heuristic 3: Prevent Fragmentation (from v0)
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= 2 * item) & (bins_remain_cap >= item)
    priority[nearly_full] += 1.5

    return priority
```
