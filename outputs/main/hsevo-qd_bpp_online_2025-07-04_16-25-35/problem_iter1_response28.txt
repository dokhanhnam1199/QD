```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority scores with a very low value
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify bins that can accommodate the item
    eligible_bins = bins_remain_cap >= item

    # If no bin can accommodate, return low priority
    if not np.any(eligible_bins):
        return priorities

    # Calculate remaining capacity after adding the item for eligible bins
    remaining_capacity = bins_remain_cap[eligible_bins] - item

    # Give higher priority to bins with smaller remaining capacity (First-Fit Decreasing principle).
    # Add a bonus for bins that are almost full (e.g., utilization > 0.9) after placing the item
    utilization_threshold = 0.9
    original_capacity = bins_remain_cap[eligible_bins] + item  # original cap before item
    utilization = (original_capacity - remaining_capacity) / original_capacity
    almost_full_bonus = 100 * (utilization > utilization_threshold)  # Huge boost for near-full bins

    priorities[eligible_bins] = -remaining_capacity + almost_full_bonus # Primary priority: small waste

    # Introduce some randomness to break ties and explore different bin combinations.
    # This will prevent getting stuck in local optima.
    priorities[eligible_bins] += np.random.rand(np.sum(eligible_bins)) * 0.1

    return priorities
```
