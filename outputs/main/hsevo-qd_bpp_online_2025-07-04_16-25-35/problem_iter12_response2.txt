```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A refined priority function for online bin packing that adaptively combines
    capacity considerations, waste minimization, fragmentation reduction,
    and empty bin usage, with dynamic adjustments based on item size and
    bin availability.
    """

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    # 1. Essential Capacity Check (Crucial - must fit)
    sufficient_capacity = bins_remain_cap >= item
    if not np.any(sufficient_capacity):
        # If no bin can fit the item, prioritize bins with largest remaining capacity to minimize wasted space when opening a new bin
        priority = bins_remain_cap / np.max(bins_remain_cap)
        return priority

    priority[sufficient_capacity] += 1.0  # Base priority for sufficient capacity

    # 2. Waste Minimization with Adaptive Scaling
    waste = bins_remain_cap - item
    positive_waste = waste[sufficient_capacity]  # Only consider bins that can fit
    
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where((waste == min_waste) & sufficient_capacity)[0]
        priority[min_waste_bins_idx] += 1.5  # Strong preference for minimal waste

    # 3. Fragmentation Control (Discourage creating tiny fragments)
    # Prioritize bins where the remaining capacity after placement is above a threshold
    fragment_threshold = 0.15  # Dynamic fragment threshold based on bin size
    acceptable_fragmentation = (bins_remain_cap - item) >= fragment_threshold
    priority[sufficient_capacity & acceptable_fragmentation] += 0.8

    # 4. Near-Full Bin Optimization (Encourage bin completion)
    near_full_threshold = 1.1 * item  #Bins which are nearly full
    nearly_full = (bins_remain_cap >= item) & (bins_remain_cap <= near_full_threshold)
    priority[nearly_full] += 2.0

    # 5. Empty Bin Usage (Balance opening new bins vs. filling existing ones)
    # Reduce empty bin priority if sufficient bins are already open
    is_empty = bins_remain_cap == np.max(bins_remain_cap)  # Correct way to identify empty bins after some bins might have been filled
    num_empty_bins = np.sum(is_empty)
    
    #Adjust empty bin priority dynamically
    if num_bins > 1 and num_empty_bins > 0 :
         priority[is_empty] += 0.5

    return priority
```
