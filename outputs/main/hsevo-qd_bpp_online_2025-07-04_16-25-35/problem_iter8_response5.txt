```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines weighted heuristics for bin packing."""
    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Sufficient Capacity
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 1.96 #weight of sufficient capacity

    # Heuristic 2: Minimize Waste
    waste = bins_remain_cap - item
    positive_waste = waste[sufficient_capacity]
    min_waste = np.min(positive_waste) if positive_waste.size > 0 else np.inf
    min_waste_bins_idx = np.where((waste == min_waste) & sufficient_capacity)[0]
    priority[min_waste_bins_idx] += 4.24 #weight of min waste

    # Heuristic 3: Prevent Fragmentation
    nearly_full_threshold = 2.04 * item
    nearly_full = (bins_remain_cap > 0) & (bins_remain_cap <= nearly_full_threshold) & (bins_remain_cap >= item)
    priority[nearly_full] += 4.22 #weight of nearly full bins

    # Heuristic 4: Small amount of available capacity.
    small_cap = (bins_remain_cap >= item)
    priority[small_cap] += (bins_remain_cap[small_cap] - item) / np.max(bins_remain_cap)

    # Heuristic 5: Give higher preference if it is an empty bin.
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    priority[is_empty] += 4.83  #weight of empty bins

    return priority
```
