import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                sufficient_capacity_weight: float = 1.3435767264911238,
                min_waste_priority_weight: float = 1.0506428236036047,
                nearly_full_weight: float = 1.6913793666467225,
                empty_bin_weight: float = 0.44825113030690167,
                adaptive_waste_threshold_factor: float = 0.001033762402217886,
                min_adaptive_waste_threshold: float = 0.06676244215736236,
                nearly_full_threshold_factor: float = 2.316136131761268) -> np.ndarray:
    """Combines capacity, waste, fragmentation, and adaptive weighting based on bin stats."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Adaptive weights based on bin utilization
    avg_cap = np.mean(bins_remain_cap)
    cap_std = np.std(bins_remain_cap)

    # Heuristic 1: Sufficient Capacity
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += sufficient_capacity_weight  # Base priority

    # Heuristic 2: Minimize Waste (with adaptive waste threshold)
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]

    if len(positive_waste) > 0:
        # Adaptive waste threshold based on average remaining capacity
        adaptive_waste_threshold = max(adaptive_waste_threshold_factor * avg_cap, min_adaptive_waste_threshold) # Minimum waste size considered "good"
        valid_waste = positive_waste[positive_waste <= adaptive_waste_threshold]

        if len(valid_waste) > 0:
            min_valid_waste = np.min(valid_waste)
            min_waste_bins_idx = np.where(waste == min_valid_waste)[0]
            priority[min_waste_bins_idx] += min_waste_priority_weight  # Higher priority for truly small waste

    # Heuristic 3: Prevent Fragmentation (Bins near full have high priority)
    nearly_full_threshold = nearly_full_threshold_factor * item # Dynamic threshold relative to item size
    nearly_full = (bins_remain_cap >= item) & (bins_remain_cap <= nearly_full_threshold)
    priority[nearly_full] += nearly_full_weight

    # Heuristic 4: Empty bin consideration
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    priority[is_empty] += empty_bin_weight

    # Adaptive Scaling to prevent domination by any single heuristic
    priority /= np.max(priority) if np.max(priority) > 0 else 1.0

    return priority
