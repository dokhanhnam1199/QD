```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines sufficient capacity, waste minimization, and fragmentation avoidance, with weights."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Sufficient Capacity
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 1.9

    # Heuristic 2: Minimize Waste (Only for bins with sufficient capacity)
    waste = bins_remain_cap - item
    waste[~sufficient_capacity] = np.inf
    min_waste = np.min(waste)
    min_waste_bins_idx = np.where(waste == min_waste)[0]
    priority[min_waste_bins_idx] += 4.2

    # Heuristic 3: Prevent Fragmentation (Bins near full have high priority).
    nearly_full_threshold = 1.2 * item
    nearly_full = (bins_remain_cap > 0) & (bins_remain_cap <= nearly_full_threshold) & (bins_remain_cap >= item)
    priority[nearly_full] += 4.2

    # Heuristic 4: Empty bin
    empty_bin_threshold = np.max(bins_remain_cap)
    is_empty = bins_remain_cap == empty_bin_threshold
    priority[is_empty] += 4.8
    
    # Heuristic 5: Small amount of available capacity.
    small_cap = (bins_remain_cap >= item)
    priority[small_cap] += (bins_remain_cap[small_cap] - item) / np.max(bins_remain_cap)

    return priority
```
