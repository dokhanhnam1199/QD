```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity, waste, fragmentation, and empty bin considerations with adaptive weights and dynamic scaling."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    n_bins = len(bins_remain_cap)

    # Sufficient capacity boost (adaptive weight)
    sufficient_capacity = bins_remain_cap >= item
    if np.any(sufficient_capacity):
        sufficient_bins_count = np.sum(sufficient_capacity)
        sufficient_weight = 1.8 + (n_bins - sufficient_bins_count) * 0.1 # More boost if fewer bins have sufficient capacity
        priority[sufficient_capacity] += sufficient_weight

    # Minimize waste boost (scaled by item size)
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        waste_weight = 1.2 + (1 - (min_waste / item)) * 0.5  # Larger item, higher waste weight
        priority[min_waste_bins_idx] += waste_weight

    # Nearly full bin boost (dynamic threshold and adaptive weight)
    threshold_multiplier = 1.05 + (item * 0.05) # Adjust threshold based on item size
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= threshold_multiplier * item) & (bins_remain_cap >= item)
    if np.any(nearly_full):
        nearly_full_weight = 2.4 + np.mean(bins_remain_cap[nearly_full]/item) * 0.3 #weight depends on how much is filled (higher is better)
        priority[nearly_full] += nearly_full_weight

    # Small capacity based on relative availability (normalized)
    small_cap = (bins_remain_cap >= item)
    if np.any(small_cap):
        max_remaining = np.max(bins_remain_cap)
        if max_remaining > 0:  # Avoid division by zero
            priority[small_cap] += (bins_remain_cap[small_cap] - item) / max_remaining
    
    # Emptiness boost (scaled by remaining capacity of other bins)
    max_cap = np.max(bins_remain_cap)
    is_empty = bins_remain_cap == max_cap
    if np.any(is_empty):
        empty_weight = 0.7 + (max_cap/np.mean(bins_remain_cap[bins_remain_cap > 0])) * 0.2 if np.any(bins_remain_cap > 0) else 0.7 #Scale weight depending on mean
        priority[is_empty] += empty_weight

    return priority
```
