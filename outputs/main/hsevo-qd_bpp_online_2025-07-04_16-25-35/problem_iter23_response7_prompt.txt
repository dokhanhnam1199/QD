{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"A refined priority function for online bin packing, focusing on balanced bin utilization and adaptive strategies.\"\"\"\n\n    priority = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_count = len(bins_remain_cap)\n    \n    # 1. Essential Fit: Guarantee capacity\n    sufficient_capacity = bins_remain_cap >= item\n    if not np.any(sufficient_capacity):\n        # If no bin fits, prioritize the least insufficient\n        priority = -np.abs(bins_remain_cap - item)  # Assign negative priority based on how much it overflows\n        return priority\n\n    priority[sufficient_capacity] += 1.0  # Base priority for fitting\n\n    # 2. Waste Optimization:\n    waste = bins_remain_cap - item\n    positive_waste = waste[sufficient_capacity]  # Consider only bins that fit\n    \n    if len(positive_waste) > 0:\n        min_waste = np.min(positive_waste)\n        min_waste_bins_idx = np.where((waste == min_waste) & sufficient_capacity)[0]\n        priority[min_waste_bins_idx] += 2.0  # Strong preference for minimal waste\n\n    # 3. Near-Full Incentive (Adaptive threshold based on item size):\n    near_full_threshold = 1.1 * item  #Dynamic threshold\n    nearly_full = (bins_remain_cap >= item) & (bins_remain_cap <= near_full_threshold)\n    priority[nearly_full] += 1.5\n\n    # 4. Balancing: Reward bins that are neither too full nor too empty\n    bin_utilization = (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap)  # Calculate how full each bin is relative to fullest bin\n    \n    #Give higher score if the utilization is in an appropriate range\n    good_utilization = (bin_utilization >= 0.2) & (bin_utilization <= 0.8) #prevent overly empty or full bins\n    priority[good_utilization] += 0.8 #medium preference\n\n    # 5. Empty Bin Consideration (But penalize overuse)\n    is_empty = bins_remain_cap == np.max(bins_remain_cap)\n    if np.any(is_empty) and np.sum(bins_remain_cap < np.max(bins_remain_cap)) > bin_count // 3 : #ensure that you do not overuse empty bins. At least one-third of all bins need to have some value\n         priority[is_empty] += 0.5\n\n\n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic considers multiple factors like sufficient capacity, waste minimization, fragmentation prevention, and empty bin utilization, assigning weights to each. The worst heuristic only considers the ratio of item size to remaining bin capacity using a log transformation. (2nd best) vs (second worst) shows (2nd best) adds diversity encouragement with a random nudge, handles cases where no bins have sufficient capacity, and adaptively adjusts weights based on item size. (1st) vs (2nd), the second heuristic introduces adaptive weights based on item size and a small random nudge for diversity, potentially improving exploration of the solution space. (3rd) vs (4th), (3rd) uses hardcoded weights. In contrast, (4th) allows for customizable weights for different heuristics. Comparing (second worst) vs (worst), we see the second worst uses a few heuristics, and the worst one use ratio of item to bins remain capacity and log transform. Overall: The better heuristics incorporate multiple factors, adaptive weights, and sometimes a degree of randomization to avoid local optima. Simpler heuristics focusing on a single metric tend to perform worse.\n- \nOkay, I'm ready to help you design better heuristics! Let's redefine self-reflection, focusing on actionable insights and avoiding generic advice.\n\nHere's a revised approach to 'Current Self-Reflection':\n\n*   **Keywords:** Problem-specific factors, Adaptive strategies, Solution space exploration, Performance tuning.\n*   **Advice:** Focus on identifying and encoding *problem-specific* knowledge into heuristics. Develop *adaptive strategies* based on *runtime information* or observed solution characteristics, instead of just static instance features. Actively test different weightings, and explore neighborhood structures and solution space thoroughly.\n*   **Avoid:** Generic \"consider multiple factors,\" vague notions of \"importance,\" and untargeted randomness.\n*   **Explanation:** Shift from general principles to concrete actions. Emphasize leveraging runtime data and tailoring the search process to the specific problem at hand. Focus on generating and evaluating diverse solutions.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}