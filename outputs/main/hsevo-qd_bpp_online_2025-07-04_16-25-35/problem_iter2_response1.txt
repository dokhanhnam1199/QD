```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity ratio with waste minimization for bin priority."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Sufficient capacity
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 1

    # Minimize waste (maximize filled space) - primary driver
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]

    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 3  # Strong preference for minimal waste

    # Capacity ratio - secondary influence
    ratios = np.where(bins_remain_cap > 0, item / bins_remain_cap, 0) # Avoid division by zero
    priority += np.where(sufficient_capacity, 1 - ratios, 0)  # Only apply ratio score when item fits. Smaller ratio has bigger priority.

    return priority
```
