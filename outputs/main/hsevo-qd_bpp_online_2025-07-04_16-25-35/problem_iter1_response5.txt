```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a very low value
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify bins that can accommodate the item
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        # Calculate the waste if the item is placed in each feasible bin.
        waste = bins_remain_cap[feasible_bins] - item

        # Assign priority based on minimizing waste, but also preferring bins that are already somewhat full.
        # This is inspired by first-fit-decreasing and best-fit heuristics.
        priorities[feasible_bins] = 1.0 / (waste + 1e-6)  # Avoid division by zero.  Smaller waste is better.
        priorities[feasible_bins] += (bins_remain_cap[feasible_bins] / bins_remain_cap.max()) * 0.5 # Add a bonus for being close to full before adding item
        #Prioritize by a function that combines waste with original bin fullness. This prioritizes low waste, but will favor filling existing bins over starting new ones when there is a choice

    return priorities
```
