```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero by adding a small epsilon value
    epsilon = 1e-9
    bins_remain_cap = np.clip(bins_remain_cap, epsilon, None)

    # Calculate the remaining capacity after adding the item
    remaining_capacity = bins_remain_cap - item

    # Give higher priority to bins that can fit the item (positive remaining capacity)
    # and lower priority to those that cannot. For those that can, prioritize bins
    # that leave the least amount of wasted space (smallest remaining_capacity).
    # Additionally, scale the priority based on how *close* to full the bin will be.
    priorities = np.zeros_like(bins_remain_cap)

    # Identify bins that can accommodate the item
    can_fit = remaining_capacity >= 0

    if np.any(can_fit):
        # Calculate a score for bins that can fit the item, based on "fullness"
        # after placing the item. We want to pack bins tightly.
        fullness_score = (bins_remain_cap[can_fit] - remaining_capacity[can_fit]) / bins_remain_cap[can_fit]
        # The higher fullness_score the better

        priorities[can_fit] = fullness_score # Prioritize more full

        # Use an exponential function to prioritize bins that are nearly full
        # with higher resolution than nearly empty bins
        priorities[can_fit] = np.exp(priorities[can_fit] * 5)  # Tune exponent for best packing

        # Introduce a term to slightly prioritize smaller items to reduce fragmentation, only if not full already.
        # A tiny amount of perturbation with respect to item size.
        priorities[can_fit] += (item * 0.01)

    else:
        # If no bins can fit the item, prioritize the bin with the most remaining capacity
        # to minimize waste in the chosen bin.  Subtract very high number to prevent choosing
        priorities -= 10000 # Assign very low priority so others will be chosen before

    return priorities
```
