```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins where the item fits with minimal wasted space.
    It uses a combination of factors:
    1. Whether the item fits.
    2. The absolute difference between the remaining capacity and item size (smaller difference = higher priority).
    3. Remaining capacity (lower remaining capacity, but still fitting, is preferred).
    4. If the item doesn't fit, give very low priority (negative to make it truly undesirable).
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, capacity in enumerate(bins_remain_cap):
        if capacity >= item:
            # Item fits
            waste = capacity - item
            priorities[i] = 100 / (waste + 0.0001) + (1 / (capacity + 0.0001)) # Adding a small value to avoid divide by zero

        else:
            # Item doesn't fit: very low priority
            priorities[i] = -1000

    return priorities
```
