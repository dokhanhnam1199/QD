```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity, waste, fragmentation, and empty bin considerations with adaptive weighting."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    # Sufficient capacity boost with scaling based on number of bins
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 1.8 + (num_bins / 100.0)  #Sufficient cap weight, scaled

    # Minimize waste boost, focusing on very tight fits, inverse scaling of waste
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        #Inversely scale priority boost with min_waste size
        priority[min_waste_bins_idx] += 1.2 + (0.5 / (min_waste + 0.001))  #Min waste weight

    # Nearly full bin boost, adaptive threshold and scaling
    nearly_full_threshold = 1.05 # Reduced threshold for more sensitivity
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= nearly_full_threshold * item) & (bins_remain_cap >= item)
    priority[nearly_full] += 2.4 + (item * 0.8) #Nearly full weight, scaled by item size

    # Small capacity, prioritize bins with remaining cap close to item size using a different approach
    small_cap = (bins_remain_cap >= item)
    if np.any(small_cap):
        capacity_diff = bins_remain_cap[small_cap] - item
        #Prioritize bins with smaller difference
        priority[small_cap] += (np.max(bins_remain_cap) - capacity_diff) / (np.max(bins_remain_cap) + 0.001)

    # Emptiness boost, reduced weight if bins are generally empty
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    empty_bins_ratio = np.sum(is_empty) / num_bins
    priority[is_empty] += 0.7 * (1 - empty_bins_ratio) #Emptiness weight, reduced if many bins are empty

    # Fragmentation penalty. Penalize bins that become too fragmented after placing the item.
    remaining_after_placement = bins_remain_cap - item
    fragmentation_penalty = np.zeros_like(bins_remain_cap, dtype=float)
    fragmentation_penalty[remaining_after_placement > 0] = (item * remaining_after_placement[remaining_after_placement > 0]) / (np.max(bins_remain_cap) + 0.001)
    priority -= fragmentation_penalty

    return priority
```
