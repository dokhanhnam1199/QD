```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio-based priority with capacity and waste considerations."""
    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Ratio-based priority (similar to v1, but scaled)
    ratios = item / (bins_remain_cap + 1e-9)  # Avoid division by zero
    priority += -np.log(ratios) * 0.5

    # Sufficient capacity boost (similar to v0)
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 1.0

    # Waste minimization (prioritize bins with least waste)
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 1.5

    return priority
```
