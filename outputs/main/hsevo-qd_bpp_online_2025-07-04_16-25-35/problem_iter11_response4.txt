```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority score for each bin based on item size and remaining capacity."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Mandatory - Sufficient Capacity
    can_fit = bins_remain_cap >= item
    priority[can_fit] += 1

    # Heuristic 2: Maximize Filled Space - Minimize Waste (only if it fits)
    waste = bins_remain_cap - item
    waste[~can_fit] = np.inf  # Ignore waste if it doesn't fit
    min_waste = np.min(waste)
    min_waste_bins = np.where(waste == min_waste)[0]
    priority[min_waste_bins] += 2

    # Heuristic 3: Prevent Fragmentation - Near Full (only if it fits)
    near_full = (bins_remain_cap >= item) & (bins_remain_cap <= 2 * item)
    priority[near_full] += 1.5

    # Heuristic 4: Empty Bin Preference
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    priority[is_empty] += 0.5

    # Heuristic 5: Small Capacity Bonus (Scale relative to item size)
    priority[can_fit] += (item / bins_remain_cap[can_fit])

    return priority
```
