```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                  sufficient_capacity_weight: float = 1.9,
                  min_waste_weight: float = 4.2,
                  nearly_full_threshold_multiplier: float = 2.0,
                  nearly_full_weight: float = 4.2,
                  empty_bin_weight: float = 4.8,
                  waste_capacity_ratio_weight: float = 0.5,
                  bin_utilization_weight: float = 1.0) -> np.ndarray:
    """Combines weighted heuristics for bin selection."""

    bin_capacity = np.max(bins_remain_cap)

    # Heuristic 1: Sufficient Capacity
    sufficient_capacity = bins_remain_cap >= item
    priority = np.zeros_like(bins_remain_cap, dtype=float)
    priority[sufficient_capacity] += sufficient_capacity_weight

    # Heuristic 2: Minimize Waste
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += min_waste_weight

    # Heuristic 3: Prevent Fragmentation
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= nearly_full_threshold_multiplier * item) & (bins_remain_cap >= item)
    priority[nearly_full] += nearly_full_weight

    # Heuristic 4: Normalized waste when sufficient capacity
    sufficient_bins = bins_remain_cap >= item
    if np.any(sufficient_bins):
        waste_ratios = waste[sufficient_bins] / bin_capacity
        priority[sufficient_bins] += waste_capacity_ratio_weight * (1 - waste_ratios)

    # Heuristic 5: Empty Bin Preference
    is_empty = bins_remain_cap == bin_capacity
    priority[is_empty] += empty_bin_weight

    # Heuristic 6: Bin Utilization
    bin_utilization = (bin_capacity - bins_remain_cap) / bin_capacity
    priority += bin_utilization_weight * bin_utilization

    return priority
```
