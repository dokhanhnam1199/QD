```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins where the item fits and leaves minimal wasted space,
    with a penalty for bins that are too full to fit the item and a reward for bins
    that provide a closer fit relative to their capacity.  I call this principle:
    "Optimized Spatial Curvature".
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Identify bins where the item fits
    valid_bins = bins_remain_cap >= item
    
    # Assign a very low priority to bins where item doesn't fit
    priorities[~valid_bins] = -np.inf
    
    # Calculate wasted space for valid bins
    wasted_space = bins_remain_cap[valid_bins] - item
    
    # Calculate the ratio of wasted space to the bin capacity. The bins
    # that waste less have a higher score.
    wasted_ratio = wasted_space / bins_remain_cap[valid_bins]
    
    # Give higher priority to bins with smaller wasted_ratio
    priorities[valid_bins] = 1 - wasted_ratio
    
    # Emphasize a better fit. Small improvement from perfect fit gives highest boost
    priorities[valid_bins] += np.exp(-10 * wasted_ratio)  # Exponential scaling boosts near perfect fit.
    
    return priorities
```
