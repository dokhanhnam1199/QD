```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid priority function: capacity, waste, fragmentation, and utilization."""
    priority = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    # Sufficient Capacity Boost
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 1.8

    # Minimize Waste Boost (Adaptive)
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]

    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 1.2

        adaptive_waste_threshold = 0.2 * item
        small_waste_bins = (waste >= 0) & (waste <= adaptive_waste_threshold)
        priority[small_waste_bins] += 0.6

    # Nearly Full Bin Boost
    nearly_full_threshold = 1.1
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= nearly_full_threshold * item) & (bins_remain_cap >= item)
    priority[nearly_full] += 2.4
    
    #Emptier bins boost
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    priority[is_empty] += 0.7
    
    # Penalize bins that cannot fit item
    cannot_fit = (bins_remain_cap < item) & (bins_remain_cap > 0)
    priority[cannot_fit] -= 0.5

    # Reward higher bin utilization globally
    total_capacity = np.sum(bins_remain_cap)
    bin_utilization_score = (num_bins - (total_capacity/np.max(bins_remain_cap)))/num_bins
    priority += 0.2 * bin_utilization_score
    
    # Capacity Ratio (Sufficient capacity only). More aggressive compared to v0
    ratios = item / bins_remain_cap
    ratios[~sufficient_capacity] = 0
    priority += ratios * 0.5 #Scale down to avoid over-influence of ratios

    return priority
```
