```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A refined priority function for online bin packing, incorporating adaptive elements,
    experimentation-driven weighting, and continuous refinement principles.
    """
    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Sufficient Capacity & Efficiency Boost: Favor bins that can accommodate the item well
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 2.0  # Strong preference for bins that fit the item
    capacity_utilization = (item / bins_remain_cap[sufficient_capacity])
    priority[sufficient_capacity] += 1.5 * capacity_utilization #Favor high fill rate.
    

    # 2. Waste Optimization: Minimize leftover space, especially smaller waste
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 1.7  # Prioritize minimal waste
        #Prioritize bins where the remaining capacity after placement is also small
        priority[min_waste_bins_idx] += (1 - (min_waste / np.max(bins_remain_cap))) * 0.5


    # 3. Nearly Full Bin Encouragement: Fill bins that are close to capacity
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= 1.1 * item) & (bins_remain_cap >= item)
    priority[nearly_full] += 2.7  # Strongly encourage filling nearly full bins

    # 4. Empty Bin Consideration (Adaptive): Introduce only if other options are poor.
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    priority[is_empty] += 0.3 #Slight preference for empty bins.
    
    # 5. Fragmentation Penalty (Adaptive): Discourage placements leading to small fragments if possible
    potential_fragmentation = bins_remain_cap - item
    small_fragment = (potential_fragmentation > 0) & (potential_fragmentation < 0.2) #Threshold = 0.2
    priority[small_fragment] -= 0.8 #Penalize potential small fragments

    #6. Balance factor to avoid prioritizing small bins over large bins, or vice versa.
    priority += bins_remain_cap/np.max(bins_remain_cap) *0.2

    return priority
```
