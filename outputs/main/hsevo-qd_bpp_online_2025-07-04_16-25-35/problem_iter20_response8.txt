```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering capacity, waste, fragmentation, and emptiness."""
    priority = np.zeros_like(bins_remain_cap, dtype=float)
    feasible = bins_remain_cap >= item

    if not np.any(feasible):
        return priority

    priority[feasible] += 1.5 #Sufficient cap weight

    waste = bins_remain_cap - item
    positive_waste = waste[feasible]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where((waste == min_waste) & feasible)[0]
        priority[min_waste_bins_idx] += 3.2  #Min waste weight

    post_fill_capacities = bins_remain_cap - item
    post_fill_capacities_feasible = post_fill_capacities[feasible]
    if len(post_fill_capacities_feasible) > 0:
        median_capacity = np.median(post_fill_capacities_feasible)
        capacity_diff = np.abs(post_fill_capacities - median_capacity)
        priority[feasible] += np.clip(1.0 - capacity_diff[feasible] / np.max(bins_remain_cap), 0, 1)

    if item > np.mean(bins_remain_cap):
        empty_bin_indices = np.where(bins_remain_cap == np.max(bins_remain_cap))[0]
        priority[empty_bin_indices] += 1.7

    priority[feasible] += np.random.rand(np.sum(feasible)) * 0.1

    return priority
```
