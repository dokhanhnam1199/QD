```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Employing principles of potential energy minimization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the "potential energy" of placing the item in each bin.
    # Smaller remaining capacity means higher potential energy change, thus higher priority.
    # Bins that cannot fit the item have 0 priority.

    potential_energy_change = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    potential_energy_change[valid_bins] = 1.0 / (bins_remain_cap[valid_bins] - item + 1e-9) #avoid divide by zero

    # Add a term to encourage filling bins that are already relatively full.
    # This corresponds to a stronger gravitational pull for bins that are closer to being full.
    fill_ratio = 1.0 - bins_remain_cap / np.max(bins_remain_cap) # Normalized, assumes all bins same initial capacity.

    potential_energy_change[valid_bins] += fill_ratio[valid_bins]


    # Further refine by considering "acceleration" - how quickly the remaining capacity
    # changes with the addition of this item. This avoids getting stuck with a bin that *just* fits.

    acceleration_term = np.zeros_like(bins_remain_cap, dtype=float)
    acceleration_term[valid_bins] = item / (bins_remain_cap[valid_bins] * bins_remain_cap[valid_bins] + 1e-9)

    potential_energy_change[valid_bins] += acceleration_term[valid_bins]

    return potential_energy_change
```
