```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity, waste, fragmentation, and empty bin considerations with dynamic adaptation."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Sufficient capacity boost
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 1.8  # Sufficient cap weight

    # Minimize waste boost
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 1.2  # Min waste weight

    # Nearly full bin boost (dynamic threshold)
    threshold_multiplier = 1.05 # Reduced threshold a bit for tighter packing. Adaptable in the future.
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= threshold_multiplier * item) & (bins_remain_cap >= item)
    priority[nearly_full] += 2.4  # Nearly full weight

    # Small capacity based on relative availability (normalized and scaled)
    small_cap = (bins_remain_cap >= item)
    if np.any(bins_remain_cap > 0):  # Avoid division by zero
        max_cap = np.max(bins_remain_cap)
        priority[small_cap] += 0.8 * (bins_remain_cap[small_cap] - item) / max_cap  # Reduced the effect, scaled by 0.8

    # Emptiness boost (conditional on overall bin usage)
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    
    # Adaptive emptiness boost: Only encourage empty bins if bins are already fairly full.
    average_fill = np.mean(1 - bins_remain_cap) #Average bin fill
    if average_fill > 0.6:  # Tweak threshold based on fill levels.
        priority[is_empty] += 0.7  # Empty bins weight
    else:
        priority[is_empty] -= 0.2 # Discourage to use empty bins to avoid fragmentation

    # Fragmentation penalty: Discourage placing items in bins that are much larger than the item.
    fragmentation_penalty = np.zeros_like(bins_remain_cap, dtype=float)
    large_gap = (bins_remain_cap > 2 * item) #Bins with twice the item size remaining.
    fragmentation_penalty[large_gap] = 0.5 #Slight penalty
    priority -= fragmentation_penalty
    
    # Encourage balancing bin usage: reward bins with usage close to the mean bin usage
    bin_usage = 1 - bins_remain_cap
    mean_usage = np.mean(bin_usage)
    usage_diff = np.abs(bin_usage - mean_usage)
    priority -= 0.1 * usage_diff # A small penalty, scaled by 0.1

    return priority
```
