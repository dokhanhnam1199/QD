```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity ratios and waste minimization."""
    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Sufficient Capacity
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 1

    # Minimize Waste (sufficient capacity only)
    waste = bins_remain_cap - item
    positive_waste = waste[sufficient_capacity]
    if positive_waste.size > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where((waste == min_waste) & sufficient_capacity)[0]
        priority[min_waste_bins_idx] += 2

    # Capacity Ratio (sufficient capacity only)
    ratios = item / bins_remain_cap
    ratios[~sufficient_capacity] = 0
    priority += ratios

    return priority
```
