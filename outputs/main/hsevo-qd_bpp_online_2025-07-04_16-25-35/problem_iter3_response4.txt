```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Feasibility check
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return priority  # No feasible bins

    priority[feasible] += 1

    # Heuristic 2: Minimize Waste (but with more nuanced weighting)
    waste = bins_remain_cap - item
    waste[~feasible] = np.inf  # Penalize infeasible bins

    min_waste = np.min(waste)
    min_waste_bins_idx = np.where(waste == min_waste)[0]
    priority[min_waste_bins_idx] += 3  # Increased importance for min waste

    # Heuristic 3: Filling bins optimally (Density-based)
    fill_ratio = item / (bins_remain_cap + 1e-9)  # Avoid division by zero
    fill_ratio[~feasible] = 0  # Only consider feasible bins
    priority += fill_ratio

    # Heuristic 4: Balancing bin usage
    avg_capacity = np.mean(bins_remain_cap)
    capacity_diff = np.abs(bins_remain_cap - avg_capacity)
    # Prefer bins closer to average capacity, but only for feasible bins
    priority[feasible] += (1 - capacity_diff[feasible] / np.max(np.abs(bins_remain_cap - avg_capacity) + 1e-9))

    # Heuristic 5: Rewarding empty bins (with a condition to avoid over-filling single bin)
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    if np.any(is_empty):
        if np.sum(item > bins_remain_cap) < len(bins_remain_cap): # check that not all items larger than current remaining cap
            priority[is_empty] += 2 # Double importance
        else:
            priority[is_empty] = 0 # zero out priorities if no other options
        
    # Heuristic 6: Discourage creating very small remaining spaces
    small_waste = (waste > 0) & (waste < 0.1)  # Define small waste threshold
    priority[small_waste] -= 1  # Reduce priority of bins creating small waste
    
    return priority
```
