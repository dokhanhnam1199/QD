```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity ratios with waste minimization for bin prioritization."""
    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Sufficient Capacity
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 1

    # Heuristic 2: Minimize Waste (Only for bins with sufficient capacity)
    waste = bins_remain_cap - item
    min_waste = np.min(waste[sufficient_capacity]) if np.any(sufficient_capacity) else np.inf
    min_waste_bins_idx = np.where((waste == min_waste) & sufficient_capacity)[0]
    priority[min_waste_bins_idx] += 2

    # Heuristic 3: Capacity Ratio (Only for bins with sufficient capacity)
    ratios = item / bins_remain_cap
    ratios[~sufficient_capacity] = 0  # Ignore bins without sufficient capacity
    priority += ratios

    return priority
```
