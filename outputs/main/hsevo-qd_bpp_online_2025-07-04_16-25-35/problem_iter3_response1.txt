```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priority = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Heuristic 1: Feasibility - Can the item fit?
    can_fit = bins_remain_cap >= item
    priority[can_fit] += 1.0

    # Heuristic 2: Minimize absolute waste (First Fit Decreasing principle)
    waste = bins_remain_cap - item
    feasible_waste = waste[can_fit]
    if len(feasible_waste) > 0:
        min_waste = np.min(feasible_waste)
        min_waste_bins_idx = np.where((waste == min_waste) & can_fit)[0]
        priority[min_waste_bins_idx] += 3.0

    # Heuristic 3: Relative Waste - How *relatively* full will the bin be?
    #  Prioritize bins that will be filled close to capacity, but not over.
    relative_fill = item / bins_remain_cap
    priority[can_fit] += 2.0 * relative_fill[can_fit] #Scale it up
    
    # Heuristic 4: Encourage re-use of partially filled bins, but only if a good fit.
    partially_filled = (bins_remain_cap > item) & (bins_remain_cap < np.max(bins_remain_cap))
    priority[partially_filled] += 0.75 # Less agressive reward for partially filled
    
    # Heuristic 5: Soft penalty for almost full bins (avoid overfilling in future).
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap <= 1.2 * item) #Tweakable constant
    priority[almost_full] -= 0.25 #Small penalty 

    # Heuristic 6: Empty bin consideration. Give some value to empty bins, but less than good fits.
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    priority[is_empty] += 0.5 # give preference to empty bin

    return priority
```
