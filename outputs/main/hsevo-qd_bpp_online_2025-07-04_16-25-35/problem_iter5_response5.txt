```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines prioritized factors for bin selection, adaptively weighting them."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Sufficient capacity: base priority
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 1.8 #Sufficient capacity

    # Minimize waste
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if positive_waste.size > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 1.2  # Minimize waste

    # Nearly full: prevent fragmentation
    nearly_full = (bins_remain_cap > 0) & (bins_remain_cap <= 1.1 * item) & (bins_remain_cap >= item)
    priority[nearly_full] += 2.4 #Nearly full

    # Small amount of available capacity
    small_cap = (bins_remain_cap >= item)
    priority[small_cap] += (bins_remain_cap[small_cap] - item) / np.max(bins_remain_cap) # Add scaled value based on relative small capacity.

    # Empty bin preference
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    priority[is_empty] += 0.8 #Empty bin

    return priority
```
