```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity, waste, fragmentation, and empty bin considerations."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Sufficient capacity boost
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 1.8 #Sufficient cap weight

    # Minimize waste boost
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 1.2  #Min waste weight

    # Nearly full bin boost
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= 1.1 * item) & (bins_remain_cap >= item) #threshold multiplier = 1.1
    priority[nearly_full] += 2.4 #Nearly full weight

    #Small capacity based on relative availability
    small_cap = (bins_remain_cap >= item)
    priority[small_cap] += (bins_remain_cap[small_cap] - item) / np.max(bins_remain_cap)

    #Emptiness boost
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    priority[is_empty] += 0.7 #Empty bins weight

    return priority
```
