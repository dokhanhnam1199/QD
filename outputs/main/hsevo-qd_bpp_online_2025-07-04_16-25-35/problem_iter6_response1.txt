```python
import numpy as np

def priority_v2(item: float,
                  bins_remain_cap: np.ndarray,
                  sufficient_capacity_weight: float = 1.8066941616372154,
                  min_waste_weight: float = 1.2369759055947915,
                  nearly_full_threshold_multiplier: float = 1.164912650607926,
                  nearly_full_weight: float = 2.4304538888032448,
                  empty_bin_weight: float = 0.7700931706376539,
                  waste_ratio_weight: float = 0.5,
                  bin_utilization_weight: float = 0.8) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        sufficient_capacity_weight: Weight for bins with sufficient capacity.
        min_waste_weight: Weight for bins that minimize waste.
        nearly_full_threshold_multiplier: Multiplier for item size to determine nearly full threshold.
        nearly_full_weight: Weight for bins that are nearly full.
        empty_bin_weight: Weight for empty bins.
        waste_ratio_weight: Weight for the ratio of waste to bin capacity.
        bin_utilization_weight: Weight for bin utilization after placing item.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Sufficient Capacity
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += sufficient_capacity_weight

    # Heuristic 2: Minimize Waste (Maximize filled space).
    waste = bins_remain_cap - item
    valid_waste_mask = waste >= 0
    valid_waste = waste[valid_waste_mask]

    if len(valid_waste) > 0:
        min_waste = np.min(valid_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += min_waste_weight
    
        # Heuristic 6: Waste Ratio - Prefer bins where the waste is a small fraction of bin capacity
        waste_ratio = valid_waste / np.max(bins_remain_cap) # Normalized waste
        waste_ratio_priority = 1 - waste_ratio  # Lower waste ratio gets higher priority
        waste_ratio_bins_idx = np.where(waste >= 0)[0] #index in bins_remain_cap of valid bins
        priority[waste_ratio_bins_idx[valid_waste_mask]] += waste_ratio_priority * waste_ratio_weight


    # Heuristic 3: Prevent Fragmentation (Bins near full have high priority).
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= nearly_full_threshold_multiplier * item) & (bins_remain_cap >= item)
    priority[nearly_full] += nearly_full_weight

    # Heuristic 4: Small amount of available capacity.
    small_cap = (bins_remain_cap >= item)
    priority[small_cap] += (bins_remain_cap[small_cap] - item) / np.max(bins_remain_cap)

    # Heuristic 5: Give higher preference if it is an empty bin.
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    priority[is_empty] += empty_bin_weight

    # Heuristic 7: Bin Utilization - encourage filling bins as much as possible
    possible_utilization = (np.max(bins_remain_cap) - bins_remain_cap + item) / np.max(bins_remain_cap)
    bin_utilization_priority = np.where(bins_remain_cap >= item, possible_utilization, 0)
    priority += bin_utilization_priority * bin_utilization_weight

    return priority
```
