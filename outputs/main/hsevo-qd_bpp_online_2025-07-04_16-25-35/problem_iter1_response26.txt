```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Utilizes a combination of factors: how close item is to filling bin
    (if possible), a bonus for almost filling a bin, and a penalty
    for creating very small gaps. Avoids overflow.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):  # Only calculate if there are valid bins to put it in
      # Proximity to filling the bin: a normalized inverse distance. closer the item can fill the bin gives higher score
      fill_proximity = (bins_remain_cap[valid_bins] - item) / np.max(bins_remain_cap) # normalize by the bin size and only look at possible bins.

      priorities[valid_bins] = -fill_proximity # closer to 0 -> higher score

      # Bonus for almost filling a bin (within a threshold): encourage better packing.
      almost_full_threshold = 0.1  # Tune this value based on performance. Relative to bin size.
      almost_full_bins = (bins_remain_cap[valid_bins] - item) <= almost_full_threshold
      priorities[valid_bins][almost_full_bins] += 0.5 # larger bonus helps almost full bins win, value should be tuned according to cost of starting a new bin vs fragmentation

      # Avoid tiny gaps: Penalize bins where the remaining capacity after placement will be small.
      tiny_gap_threshold = 0.05 # Tune this. Also, relative to bin size.
      tiny_gap_bins = (bins_remain_cap[valid_bins] - item) < tiny_gap_threshold
      priorities[valid_bins][tiny_gap_bins] -= 0.3 # smaller penalty
    else:
      #item is larger than all bin capacities. Penalize larger remain cap values less, i.e., add to the bins that are emptier. This makes it closer to BestFitDecreasing in some cases.

      priorities = -bins_remain_cap / np.max(bins_remain_cap)

    return priorities
```
