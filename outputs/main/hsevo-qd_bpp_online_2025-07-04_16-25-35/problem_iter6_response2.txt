```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                  sufficient_capacity_weight: float = 1.8,
                  min_waste_weight: float = 1.2,
                  nearly_full_threshold_multiplier: float = 1.15,
                  nearly_full_weight: float = 2.4,
                  empty_bin_weight: float = 0.8,
                  waste_ratio_weight: float = 0.5,
                  bin_utilization_weight: float = 0.7) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        sufficient_capacity_weight: Weight for bins with sufficient capacity.
        min_waste_weight: Weight for bins that minimize waste.
        nearly_full_threshold_multiplier: Multiplier for item size to determine nearly full threshold.
        nearly_full_weight: Weight for bins that are nearly full.
        empty_bin_weight: Weight for empty bins.
        waste_ratio_weight: Weight based on the ratio of waste to bin capacity
        bin_utilization_weight: Weight based on how full the bin would be after adding the item.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Sufficient Capacity
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += sufficient_capacity_weight

    # Heuristic 2: Minimize Waste
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += min_waste_weight

        # Heuristic 6: Waste Ratio (Prioritize bins where waste is a smaller proportion of remaining capacity)
        waste_ratio = positive_waste / bins_remain_cap[waste >= 0]
        min_waste_ratio = np.min(waste_ratio)
        min_waste_ratio_bins_idx = np.where(waste_ratio == min_waste_ratio)[0]
        # Map back to original bins_remain_cap index
        original_indices = np.where(waste >= 0)[0][min_waste_ratio_bins_idx]
        priority[original_indices] += waste_ratio_weight

    # Heuristic 3: Prevent Fragmentation (Bins near full have high priority)
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= nearly_full_threshold_multiplier * item) & (bins_remain_cap >= item)
    priority[nearly_full] += nearly_full_weight

    # Heuristic 4: Encourage Bin Utilization (Prioritize bins that will be more full after adding the item)
    bins_post_item_capacity = bins_remain_cap - item
    valid_bins = bins_post_item_capacity >= 0
    if np.any(valid_bins):
        bin_utilization = (bins_remain_cap[valid_bins] - bins_post_item_capacity[valid_bins]) / np.max(bins_remain_cap)
        priority[valid_bins] += bin_utilization * bin_utilization_weight
    

    # Heuristic 5: Give higher preference if it is an empty bin.
    is_empty = bins_remain_cap == np.max(bins_remain_cap) # Assuming all bins have same capacity initially
    priority[is_empty] += empty_bin_weight
    
    return priority
```
