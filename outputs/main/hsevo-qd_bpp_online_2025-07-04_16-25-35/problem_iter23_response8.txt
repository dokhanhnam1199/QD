```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity, waste, fragmentation, bin utilization, and adaptive strategy."""
    priority = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    # Sufficient Capacity Boost
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 3.0 #Slightly Increased Weight

    # Minimize Waste - Prioritize tight fits
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 2.0 #Slightly Increased Weight

        adaptive_waste_threshold = 0.2 * item #20% rule
        small_waste_bins = (waste >= 0) & (waste <= adaptive_waste_threshold)
        priority[small_waste_bins] += 1.0 #Slightly Increased Weight

    # Nearly Full Bin Boost - Avoiding Fragmentation
    nearly_full_threshold = 1.1
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= nearly_full_threshold * item) & (bins_remain_cap >= item)
    priority[nearly_full] += 3.5  #Increased Weight on "Nearly Full"

    # Small Capacity - Encourage use of partially filled bins
    sufficient_bins = bins_remain_cap >= item
    if np.any(sufficient_bins):
        max_remaining_cap = np.max(bins_remain_cap[sufficient_bins])
        priority[sufficient_bins] += (bins_remain_cap[sufficient_bins] - item) / max_remaining_cap

    # Empty Bin Consideration - Start filling new bins when others are well-utilized.
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    priority[is_empty] += 1.2 #Increased Weight

    # Penalize bins close to full but can't fit the item
    cannot_fit = (bins_remain_cap < item) & (bins_remain_cap > 0)
    priority[cannot_fit] -= 0.6

    # Reward higher bin utilization globally, dynamically
    total_capacity = np.sum(bins_remain_cap)
    bin_utilization_score = (num_bins - (total_capacity/np.max(bins_remain_cap)))/num_bins
    priority += 0.5 * bin_utilization_score #Increased Weight

    #Adaptive Strategy: Promote using diverse bins based on item size
    if item > 0.5 * np.max(bins_remain_cap): #For big item, force small waste bins.
      priority[small_waste_bins] += 1.5

    return priority
```
