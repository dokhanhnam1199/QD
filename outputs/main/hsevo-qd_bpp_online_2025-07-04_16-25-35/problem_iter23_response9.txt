```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity ratios, waste minimization, adaptive weights, and diversity."""
    priority = np.zeros_like(bins_remain_cap, dtype=float)
    sufficient_capacity = bins_remain_cap >= item
    
    # Adaptive weight based on item size.
    item_size_factor = item  #Simple way to let item affect the score.
    
    # Heuristic 1: Sufficient Capacity
    priority[sufficient_capacity] += 1.0 * item_size_factor  #Sufficient capacity
    
    # Heuristic 2: Minimize Waste (Only for bins with sufficient capacity)
    waste = bins_remain_cap - item
    positive_waste = waste[sufficient_capacity]
    if positive_waste.size > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where((waste == min_waste) & sufficient_capacity)[0]
        priority[min_waste_bins_idx] += 2.0 * item_size_factor  #Minimize waste, 2x important than capacity.

    # Heuristic 3: Capacity Ratio (Only for bins with sufficient capacity)
    ratios = item / bins_remain_cap
    ratios[~sufficient_capacity] = 0  # Ignore bins without sufficient capacity
    priority += ratios * item_size_factor  #Fill ratio, consider capacity use.

    # Heuristic 4: Small random nudge for diversity
    priority += np.random.rand(len(bins_remain_cap)) * 0.01 * item_size_factor

    return priority
```
