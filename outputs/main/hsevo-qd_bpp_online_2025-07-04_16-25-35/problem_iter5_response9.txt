```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines feasibility, waste minimization, fragmentation avoidance, and randomness."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility Check
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return priority

    priority[feasible] += 1.0

    # Minimize Waste (focus on feasible bins)
    waste = bins_remain_cap - item
    positive_waste = waste[feasible]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where((waste == min_waste) & feasible)[0]
        priority[min_waste_bins_idx] += 3.0

    # Avoid Fragmentation (near full gets higher priority) - inspired from v0
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= 1.2 * item) & (bins_remain_cap >= item)
    priority[nearly_full] += 2.0

    # Prioritize emptier bins for larger items
    if item > np.mean(bins_remain_cap):
        empty_bin_indices = np.where(bins_remain_cap == np.max(bins_remain_cap))[0]
        priority[empty_bin_indices] += 1.5

    # Add randomness
    priority[feasible] += np.random.rand(np.sum(feasible)) * 0.1

    return priority
```
