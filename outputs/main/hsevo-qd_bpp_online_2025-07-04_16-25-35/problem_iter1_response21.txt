```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Inspired by space-time curvature and the idea of fitting in "almost perfectly".

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Initialize priorities with a baseline (avoiding -inf later)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
      # If no bin can accommodate the item, assign a low priority,
      # prioritizing bins that are closest in size to the item
      diff = np.abs(bins_remain_cap - item)
      priorities = -diff # Smaller difference = Higher priority.
      return priorities
    
    # Calculate how well the item "fits" into each valid bin using a sigmoid-like function.
    # This emphasizes near-perfect fits, as space-time is warped most by significant mass.
    fit_metric = (bins_remain_cap[valid_bins] - item) / bins_remain_cap[valid_bins]
    
    # Scale and shift the fit_metric to center around zero and control the sigmoid's steepness
    scaled_fit = fit_metric * 10 # Scaling factor increases impact of precise fits
    
    # Sigmoid function to give higher priority to bins with small remaining space AFTER the item is added.

    priorities[valid_bins] = 1 / (1 + np.exp(scaled_fit))

    # Penalize bins where the item leaves a small amount of space that may be hard to fill later.
    too_small_space = (bins_remain_cap[valid_bins] - item) < 0.1  # threshold of 0.1 or 10% of the bin's capacity.  Adjust as needed
    priorities[valid_bins][too_small_space] *= 0.5 # Reduce priority if too small

    return priorities
```
