```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines prioritized heuristics with adaptive waste and utilization."""
    priority = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)
    bin_capacity = np.max(bins_remain_cap)

    # Sufficient Capacity Boost
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 2.0

    # Minimize Waste
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 1.5

        adaptive_waste_threshold = 0.2 * item
        small_waste_bins = (waste >= 0) & (waste <= adaptive_waste_threshold)
        priority[small_waste_bins] += 0.7

    # Nearly Full Bin Boost
    nearly_full_threshold = 1.1
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= nearly_full_threshold * item) & (bins_remain_cap >= item)
    priority[nearly_full] += 2.5

    # Small Capacity Based on Relative Availability (Normalized Waste)
    sufficient_bins = bins_remain_cap >= item
    if np.any(sufficient_bins):
        waste_ratios = waste[sufficient_bins] / bin_capacity
        priority[sufficient_bins] += 0.5 * (1 - waste_ratios)

    # Empty Bin Consideration
    is_empty = bins_remain_cap == bin_capacity
    priority[is_empty] += 0.8

    # Penalize bins close to full but can't fit the item
    cannot_fit = (bins_remain_cap < item) & (bins_remain_cap > 0)
    priority[cannot_fit] -= 0.6

    # Reward higher bin utilization globally
    bin_utilization = (bin_capacity - bins_remain_cap) / bin_capacity
    priority += 0.3 * bin_utilization

    return priority
```
