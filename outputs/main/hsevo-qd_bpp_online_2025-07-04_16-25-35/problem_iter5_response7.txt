```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Assigns priority to bins based on multiple factors: capacity, waste, fragmentation, and emptiness."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: Can the item fit?
    can_fit = bins_remain_cap >= item
    if not np.any(can_fit):
        return priority  # No bin can fit, return all zeros

    priority[can_fit] += 1  # Give a base priority to feasible bins

    # Minimize Waste: Choose bins that minimize remaining space.
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Ignore bins that can't fit.
    min_waste = np.min(waste)
    min_waste_bins = np.where(waste == min_waste)[0]
    priority[min_waste_bins] += 3

    # Prevent Fragmentation: Prioritize bins that are nearly full after packing.
    nearly_full = (bins_remain_cap > item) & (bins_remain_cap - item <= 0.2 * np.max(bins_remain_cap))
    priority[nearly_full] += 2

    # Prioritize Emptier Bins (for larger items to consolidate space):
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    priority[is_empty] += 0.5

    # Small amount of available capacity heuristic
    sufficient_capacity = bins_remain_cap >= item
    if np.any(sufficient_capacity):
        priority[sufficient_capacity] += (bins_remain_cap[sufficient_capacity] - item) / np.max(bins_remain_cap)

    return priority
```
