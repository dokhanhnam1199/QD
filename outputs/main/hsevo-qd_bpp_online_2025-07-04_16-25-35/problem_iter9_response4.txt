```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity, waste, fragmentation, and empty bin considerations with dynamic adaptation."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    # Sufficient capacity boost (higher if fewer bins have sufficient capacity)
    sufficient_capacity = bins_remain_cap >= item
    num_sufficient = np.sum(sufficient_capacity)
    sufficient_boost = 1.8 + (num_bins - num_sufficient) * 0.1 if num_sufficient > 0 else 0  # Adapt boost based on availability
    priority[sufficient_capacity] += sufficient_boost

    # Minimize waste boost (relative to item size)
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        waste_reduction_factor = 1.0 - (min_waste / item)  # Give higher priority to bins that minimize waste relative to the item size
        priority[min_waste_bins_idx] += 1.2 + 0.8 * waste_reduction_factor

    # Nearly full bin boost (more aggressive)
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= 1.1 * item) & (bins_remain_cap >= item)
    priority[nearly_full] += 2.4 + 0.6 * (1.1 - bins_remain_cap[nearly_full] / item) # Higher boost for bins closer to full

    # Small capacity based on relative availability, but penalize if many such bins exist
    small_cap = (bins_remain_cap >= item)
    if np.sum(small_cap) > num_bins // 3: #Dynamic adjustment, If there are many bins that can store the item, then give priority to ones closer to item size
        priority[small_cap] += (item - (bins_remain_cap[small_cap] - item)) / np.max(bins_remain_cap) #Try to fill smaller bins first
    else:
        priority[small_cap] += (bins_remain_cap[small_cap] - item) / np.max(bins_remain_cap)

    # Emptiness boost (reduced if bins are mostly empty - encourages use of partially filled bins first)
    max_cap = np.max(bins_remain_cap)
    is_empty = bins_remain_cap == max_cap
    num_empty = np.sum(is_empty)
    if num_empty > num_bins // 2:  # if many bins are empty, reduce the emptiness boost
          priority[is_empty] += 0.3 #Reduced weight
    else:
          priority[is_empty] += 0.7

    # Penalize bins with very little remaining capacity compared to the item size, encourages use of more appropriate size.
    tiny_cap = (bins_remain_cap > 0) & (bins_remain_cap < 0.5 * item)
    priority[tiny_cap] -= 1.0

    return priority
```
