```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Prioritizes bins where the item fits, favoring bins with remaining capacity
    close to the item size (avoiding excessive fragmentation).  If no bin fits,
    prioritizes bins with larger remaining capacity to minimize the amount wasted
    when a new bin is inevitably opened.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Bins where the item fits
    feasible_bins = bins_remain_cap >= item
    if np.any(feasible_bins):
        remaining_space = bins_remain_cap[feasible_bins] - item
        # Prioritize bins where the remaining space is small
        priorities[feasible_bins] = 1.0 / (remaining_space + 0.0001) # Add small constant to avoid division by zero

        # Further enhance prioritization by favoring bins where item fits relatively tightly
        item_ratio = item / bins_remain_cap[feasible_bins]
        priorities[feasible_bins] *= (item_ratio)**2 # Favor high item ratio.

    else:
        # No bin fits; prioritize bins with largest remaining capacity
        priorities = bins_remain_cap # Prioritize higher capacity bins.
        priorities = priorities / (np.max(priorities) + 0.0001) # Scale to 0-1. Avoid potential zero-division.

    return priorities
```
