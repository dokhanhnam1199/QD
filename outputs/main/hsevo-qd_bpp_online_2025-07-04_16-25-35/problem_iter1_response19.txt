```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining capacity after adding the item.
    remaining_capacity = bins_remain_cap - item

    # Give high priority to bins where the item fits and the remaining capacity is minimized.
    # Avoid bins that don't fit the item by assigning a very low priority (-np.inf).

    fits = remaining_capacity >= 0
    if np.any(fits): # only consider those that fits
        priorities[fits] = 1.0 / (remaining_capacity[fits] + 0.0000001) #add small term to avoid dividing by zero. High score if remaining is small
        # Scale priorities such that it always stays less than 1000
        priorities[fits] = np.clip(priorities[fits], 0.0, 1000.0) #limit between 0-1000

    else:
        priorities[:] = -np.inf # the item will never fit

    # Optional: Boost priority slightly for bins that are relatively full already to prevent fragmentation.
    occupancy_ratio = (1 - bins_remain_cap / np.max(bins_remain_cap) ) # max bin capacity may differ from bin to bin - this assumes that there is an initial state. If there is not - the max is 1.
    occupancy_ratio = np.nan_to_num(occupancy_ratio, nan=0.0)
    priorities += occupancy_ratio*0.001

    return priorities
```
