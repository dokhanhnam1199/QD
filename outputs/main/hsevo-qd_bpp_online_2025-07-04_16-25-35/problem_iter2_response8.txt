```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity ratio with waste minimization."""
    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Sufficient Capacity is mandatory.
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 1

    # Heuristic 2: Capacity Ratio (only consider bins with sufficient capacity).
    ratios = item / bins_remain_cap
    ratios[~sufficient_capacity] = 0  # Ignore bins that can't fit item
    priority += ratios * sufficient_capacity # Add Ratio scaled by sufficient capacity

    # Heuristic 3: Minimize Waste (only from bins with sufficient capacity)
    waste = bins_remain_cap - item
    positive_waste = waste[sufficient_capacity]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where((waste == min_waste) & sufficient_capacity)[0]
        priority[min_waste_bins_idx] += 2

    return priority
```
