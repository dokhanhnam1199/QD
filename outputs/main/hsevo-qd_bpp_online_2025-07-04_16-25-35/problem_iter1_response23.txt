```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    A bin is prioritized if it can fit the item and has a remaining capacity close to the item size,
    avoiding both excessive fragmentation (leaving a large gap) and overflow.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Identify bins that can accommodate the item
    valid_bins = bins_remain_cap >= item
    
    if np.any(valid_bins): # If any bins can fit the item
        # Calculate the "waste" (remaining capacity after placing the item) for valid bins
        waste = bins_remain_cap[valid_bins] - item

        # Give priority to bins with less waste
        priorities[valid_bins] = np.exp(-waste)

        # Add a bonus for bins where the item fills at least a substantial portion (e.g., 75%) of the bin
        fill_ratio = item / bins_remain_cap[valid_bins]
        priorities[valid_bins] += (fill_ratio >= 0.75) * 1.0  #Bonus of 1

        # A very minor penalty to bins which will be very empty
        priorities[valid_bins] -= (waste > item*2) * 0.1
    else:
        # If no bins can fit the item, return all zeros indicating none of the bins are suitable.
        pass
    
    return priorities
```
