```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive priority function combining capacity, waste, fragmentation, and bin utilization."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    n_bins = len(bins_remain_cap)

    # 1. Sufficient Capacity with Adaptive Weight:
    sufficient_capacity = bins_remain_cap >= item
    if np.any(sufficient_capacity):
        cap_weight = 1.5 + 0.5 * (1 - (item / np.max(bins_remain_cap)))  # Adaptive based on item size
        priority[sufficient_capacity] += cap_weight

    # 2. Waste Minimization with Dynamic Scaling:
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        waste_weight = 1.0 + 0.8 * (1 - (min_waste / np.max(bins_remain_cap)))  # Adaptive based on min waste
        priority[min_waste_bins_idx] += waste_weight

    # 3. Nearly Full Bin with Contextual Adjustment:
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= 1.1 * item) & (bins_remain_cap >= item)
    if np.any(nearly_full):
         nearly_full_weight = 2.0 + 0.6 * (np.sum(bins_remain_cap <= 0.2) / n_bins) # More weight when bins are highly utilized
         priority[nearly_full] += nearly_full_weight
        
    # 4. Balance Items and Empty Bins (Trade-off):
    empty_bin_indices = np.where(bins_remain_cap == np.max(bins_remain_cap))[0]
    non_empty_bins = n_bins - len(empty_bin_indices) #avoid dividing by zero

    if len(empty_bin_indices) > 0 and non_empty_bins > 0 :  #Empty bins exist, try to fill up partially filled ones first
        priority[empty_bin_indices] += 0.2 #Slight penalty, but important to avoid filling only when absolutely necessary
        if np.any(sufficient_capacity): #Sufficient cap exists elsewhere
            pass
        else:
            priority[empty_bin_indices] += 0.9 #Boost if no other choice
    elif len(empty_bin_indices) > 0 and non_empty_bins == 0 :
        priority[empty_bin_indices] += 1.1 #Boost when everything is empty
        
    #5. Bin Utilization score:
    bin_utilization = (np.max(bins_remain_cap) - bins_remain_cap)/np.max(bins_remain_cap)
    priority += 0.3 * bin_utilization #promote filling up bins as much as possible.

    return priority
```
