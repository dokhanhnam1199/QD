```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Heuristic 1: Sufficient Capacity
    sufficient_capacity = bins_remain_cap >= item
    priority = np.zeros_like(bins_remain_cap, dtype=float)
    priority[sufficient_capacity] += 1  # Base priority if bin can fit item

    # Heuristic 2: Minimize Waste (Maximize filled space).
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0] # Consider only valid waste
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 2

    # Heuristic 3: Prevent Fragmentation (Bins near full have high priority).
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= 2 * item) & (bins_remain_cap >= item)
    priority[nearly_full] += 1.5

    # Heuristic 4: Small amount of available capacity.
    small_cap = (bins_remain_cap >= item)
    priority[small_cap] += (bins_remain_cap[small_cap] - item) / np.max(bins_remain_cap) # Add scaled value based on relative small capacity.
    
    # Heuristic 5: Give higher preference if it is an empty bin.
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    priority[is_empty] += 0.5

    return priority
```
