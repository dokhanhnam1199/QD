```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_history: np.ndarray = None) -> np.ndarray:
    """
    An adaptive priority function for online bin packing, considering capacity, waste,
    fragmentation, bin history, and dynamic weight adjustment.
    """

    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Sufficient Capacity with Adaptive Weight:
    sufficient_capacity = bins_remain_cap >= item
    if np.any(sufficient_capacity):
        # Scale the weight based on how many bins have sufficient capacity.  If only a few do, increase the weight.
        sufficient_cap_weight = 1.8 + (1 - (np.sum(sufficient_capacity) / len(bins_remain_cap))) * 1.2
        priority[sufficient_capacity] += sufficient_cap_weight

    # 2. Minimize Waste with Dynamic Adjustment:
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        # Reduce weight if waste is a significant proportion of bin size to avoid overfilling
        min_waste_weight = 1.2 - (min_waste / np.max(bins_remain_cap)) * 0.6
        min_waste_weight = max(min_waste_weight, 0.1)  # Ensure a minimum weight
        priority[min_waste_bins_idx] += min_waste_weight

    # 3. Nearly Full Bin Consideration:
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= 1.1 * item) & (bins_remain_cap >= item)
    if np.any(nearly_full):
        priority[nearly_full] += 2.4

    # 4. Small Capacity with Relative Scaling:  Favor bins closer to the item size, but not smaller.
    small_cap_eligible = bins_remain_cap >= item
    if np.any(small_cap_eligible):
        capacity_difference = bins_remain_cap[small_cap_eligible] - item
        # Use a reciprocal relationship to favor bins closer in size
        small_cap_priority = 1 / (1 + capacity_difference)  # Adding 1 to avoid division by zero
        priority[small_cap_eligible] += small_cap_priority * 0.8 # Scale down the priority for this component

    # 5. Empty Bin Consideration: Only if there are not many other viable options
    is_empty = bins_remain_cap == np.max(bins_remain_cap)

    #Adaptive emptiness boost :
    if np.sum(sufficient_capacity) < len(bins_remain_cap) / 4: # condition to check other viable options
          priority[is_empty] += 0.7

    # 6. Bin History Consideration (Fragmentation Avoidance):
    if bin_history is not None:  # bin_history is a numpy array of the number of items packed into each bin
        # Penalize bins that have already been used heavily, as they are more likely to lead to fragmentation
        normalized_history = bin_history / np.max(bin_history + 1e-6)  # Normalize to 0-1 range; avoid dividing by zero
        priority -= normalized_history * 0.5 # Reduce priority based on bin usage, scaled by 0.5

    return priority
```
