```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Refines bin selection based on remaining capacity, item size, and bin utilization,
    with an emphasis on balancing bin usage and minimizing fragmentation, along with some
    adaptive scaling.

    """
    priority = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = np.max(bins_remain_cap) #assumes bins are all of the same size

    # 1. Essential Capacity Check
    sufficient_capacity = bins_remain_cap >= item
    if not np.any(sufficient_capacity):
        return priority #if no bins are available, all bins have zero priority


    # 2. Waste Minimization (Adaptive Weighting)
    waste = bins_remain_cap - item
    positive_waste = waste[sufficient_capacity] #considers available bins only
    min_waste = np.min(positive_waste)
    min_waste_bins_idx = np.where((waste == min_waste) & sufficient_capacity)[0]
    priority[min_waste_bins_idx] += 2.0 #Min waste weight

    # 3. Nearly Full Bin Incentive (Prioritize filling nearly-full bins)
    nearly_full = (bins_remain_cap >= item) & (bins_remain_cap <= (item + 0.2 * bin_size))
    priority[nearly_full] += 3.0 #Nearly full weight

    # 4. Balance Usage (Fill bins proportionally)
    # This encourages filling bins somewhat evenly.
    fill_ratio = (bin_size - bins_remain_cap) / bin_size
    priority[sufficient_capacity] += fill_ratio[sufficient_capacity] * 0.5  #Scale factor

    # 5. Discourage Excessive Fragmentation (Adaptive Penalty)
    # Penalize placing the item in a bin that leaves a small, unusable fragment.
    fragment_size = bins_remain_cap - item
    small_fragment = (fragment_size > 0) & (fragment_size < 0.1 * bin_size)
    priority[small_fragment] -= 1.5 #penalty to the small fragments.

    # 6. Empty Bin Consideration (Weight based on number of empty bins)
    is_empty = bins_remain_cap == bin_size
    num_empty_bins = np.sum(is_empty)
    if num_empty_bins > 0:
        priority[is_empty] += 0.8 #Empty bins weight

    return priority
```
