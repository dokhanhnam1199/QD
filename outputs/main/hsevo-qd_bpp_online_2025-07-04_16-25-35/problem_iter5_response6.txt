```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Calculates bin priorities considering capacity, waste, fragmentation, and empty bins.
    """

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility check: Can the item fit?
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return priority  # No feasible bins, all priorities remain zero

    priority[feasible_bins] += 1.0  # Basic priority for feasible bins

    # Minimize waste: Find bins with smallest waste.
    waste = bins_remain_cap - item
    positive_waste = waste[feasible_bins]  # Only consider waste in feasible bins
    if positive_waste.size > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0] # Use original index instead of relative feasible_bins indices.
        priority[min_waste_bins_idx] += 2.0

    # Prevent fragmentation: Give higher priority to nearly full bins.
    nearly_full = (bins_remain_cap >= item) & (bins_remain_cap <= 2 * item)
    priority[nearly_full] += 1.5

    # Prioritize emptier bins for larger items.
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    priority[is_empty] += 0.5

    # Add randomness to break ties.
    priority[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.1
    
    return priority
```
