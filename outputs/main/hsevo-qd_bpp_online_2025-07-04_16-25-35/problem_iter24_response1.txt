```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity, waste, fragmentation, and empty bin considerations with dynamic weights."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    
    # --- Dynamic Weight Adjustment based on Remaining Capacity Distribution ---
    mean_capacity = np.mean(bins_remain_cap)
    std_capacity = np.std(bins_remain_cap)

    # Sufficient capacity boost
    sufficient_capacity = bins_remain_cap >= item
    sufficient_cap_weight = 1.8
    priority[sufficient_capacity] += sufficient_cap_weight

    # Minimize waste boost
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        min_waste_weight = 1.2
        priority[min_waste_bins_idx] += min_waste_weight

    # Nearly full bin boost - Reduced threshold for tighter packing
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= 1.05 * item) & (bins_remain_cap >= item) #Reduced threshold
    nearly_full_weight = 2.4
    priority[nearly_full] += nearly_full_weight

    # Small capacity based on relative availability - Adjusted scaling
    small_cap = (bins_remain_cap >= item)
    if np.max(bins_remain_cap) > 0: #To avoid division by zero
        priority[small_cap] += (bins_remain_cap[small_cap] - item) / np.max(bins_remain_cap) * 0.5 #Scale down

    # Emptiness boost - Reduced weight for empty bins
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    empty_bins_weight = 0.7
    priority[is_empty] += empty_bins_weight

    # --- Capacity Variance Penalty ---
    # Penalize using bins that deviate significantly from the mean capacity.
    capacity_diff = np.abs(bins_remain_cap - mean_capacity)
    variance_penalty = capacity_diff / (std_capacity + 1e-6)  # Avoid division by zero
    priority -= 0.1 * variance_penalty #Penalty factor

    return priority
```
