```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Bin is feasible

            # Base priority: Remaining capacity after placing the item. Smaller is better (FFD-like).
            remaining_cap = cap - item
            priorities[i] = -remaining_cap

            # Bonus for bins that are "almost full" after adding the item.
            if remaining_cap <= 0.1:  #tuneable
                priorities[i] += 10 #tuneable

            # Slight penalty for too much remaining capacity to encourage packing in almost full bins.
            if remaining_cap > 0.5: #tuneable
                 priorities[i] -= 1 #tuneable

            #Consider the fill ratio
            fill_ratio = item / cap #tuneable
            priorities[i] += fill_ratio

        else:
            # Bin is infeasible: assign lowest possible priority
            priorities[i] = -np.inf

    return priorities
```
