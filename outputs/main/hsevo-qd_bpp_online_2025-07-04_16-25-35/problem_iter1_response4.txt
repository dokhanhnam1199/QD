```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Feasibility: High priority for bins that can fit the item.
    feasible = bins_remain_cap >= item
    priorities[feasible] += 1  # Base priority for feasible bins.

    # Maximize Space Utilization: Prioritize bins where the item fits best (smallest remaining space after placement).
    remaining_space = bins_remain_cap - item
    remaining_space[~feasible] = np.inf  # Exclude infeasible bins from this calculation.

    # Scale remaining space so smaller space leads to bigger score
    space_priority = -remaining_space
    space_priority[~feasible] = 0 #make sure infeasible has zero added.
    priorities += space_priority
    
    # Prioritize near-full bins slightly to potentially avoid creating many nearly-empty bins later. A small bonus.
    near_full = (bins_remain_cap > item) & (bins_remain_cap - item < 0.2)  # Fits and leaves very little space.
    priorities[near_full] += 0.5 # Slight bonus for near-full bins

    # Avoid bins with very little remaining space before packing anything new in them
    already_low_bins = bins_remain_cap < 0.1
    priorities[already_low_bins] -= 2 #Penalize small bins

    return priorities
```
