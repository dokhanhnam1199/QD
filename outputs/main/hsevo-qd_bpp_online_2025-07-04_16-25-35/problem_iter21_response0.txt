```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity, waste, fragmentation, and empty bin considerations with adaptive weights."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Adaptive weights based on item size (example: smaller items favor minimal waste)
    item_size_factor = min(1.0, item)  # Scale down influence for larger items

    # Sufficient capacity boost (slightly increased weight)
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 2.0 * (1 + 0.2 * item_size_factor)  # Increased weight + item size influence

    # Minimize waste boost (adaptive weight)
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 1.5 * (1 - 0.3 * item_size_factor)  # Adjusted weight, favors smaller items

        # Add a slight penalty for larger waste (discourages creating very fragmented bins)
        large_waste = waste > 0.5 #tuneable threshold
        priority[large_waste] -= 0.1 * item_size_factor  # Item size influence, smaller item less fragmented
    
    # Nearly full bin boost (strongest boost, less adaptive)
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= 1.1 * item) & (bins_remain_cap >= item)
    priority[nearly_full] += 2.8

    # Small capacity based on relative availability (normalized and scaled)
    small_cap = (bins_remain_cap >= item)
    if np.any(small_cap):  # Avoid division by zero if no bins have enough capacity
        max_cap = np.max(bins_remain_cap)
        priority[small_cap] += ((bins_remain_cap[small_cap] - item) / max_cap) * 0.8  # Scaled contribution

    # Emptiness boost (decreased weight, less important to fill empty bins immediately)
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    priority[is_empty] += 0.5 * (1 + 0.1 * item_size_factor) # Empty bins weight, scaled

    # Diversity encouragement: random nudge to avoid getting stuck in local optima
    priority += np.random.rand(len(bins_remain_cap)) * 0.01

    return priority
```
