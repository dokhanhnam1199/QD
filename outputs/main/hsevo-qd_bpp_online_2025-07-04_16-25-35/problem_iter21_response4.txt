```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity, waste, fragmentation, and empty bin considerations with adaptive weights."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    
    # --- Adaptive Weights (initial values) ---
    sufficient_capacity_weight = 1.8
    min_waste_weight = 1.2
    nearly_full_weight = 2.4
    emptiness_weight = 0.7
    relative_capacity_weight = 0.5 # Weight for relative capacity

    # --- Sufficient Capacity Boost ---
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += sufficient_capacity_weight

    # --- Minimize Waste Boost ---
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += min_waste_weight

    # --- Nearly Full Bin Boost ---
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= 1.1 * item) & (bins_remain_cap >= item)
    priority[nearly_full] += nearly_full_weight

    # --- Small Capacity based on Relative Availability ---
    small_cap = (bins_remain_cap >= item)
    if np.max(bins_remain_cap) > 0:
        priority[small_cap] += relative_capacity_weight * (bins_remain_cap[small_cap] - item) / np.max(bins_remain_cap)

    # --- Emptiness Boost (Prioritize truly empty bins) ---
    is_empty = bins_remain_cap == np.max(bins_remain_cap) #Consider only the completely empty bins for emptiness boost
    priority[is_empty] += emptiness_weight
    
    # --- Fragmentation consideration ---
    # Penalize bins that would lead to high fragmentation
    fragmentation_penalty = np.zeros_like(bins_remain_cap, dtype=float)
    remaining_after_placement = bins_remain_cap - item
    fragmentation_penalty[remaining_after_placement > 0] = (remaining_after_placement[remaining_after_placement > 0] / np.max(bins_remain_cap))**2 # Squaring to enhance the penalty

    priority -= fragmentation_penalty

    # --- Adaptive Weight Adjustment (Simple Example - Adjust Nearly Full Weight) ---
    # Example: If most bins are nearly full, reduce the weight to encourage using other bins
    if np.sum(nearly_full) > 0.5 * len(bins_remain_cap):  # If more than half are nearly full
        nearly_full_weight *= 0.8  # Reduce the weight

    return priority
```
