```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering feasibility, waste, fragmentation, and item size. Adds adaptive element."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    feasible = bins_remain_cap >= item

    if not np.any(feasible):
        return priority

    priority[feasible] += 1.0

    waste = bins_remain_cap - item
    positive_waste = waste[feasible]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where((waste == min_waste) & feasible)[0]
        priority[min_waste_bins_idx] += 3.0

    post_fill_capacities = bins_remain_cap - item
    post_fill_capacities_feasible = post_fill_capacities[feasible]

    if len(post_fill_capacities_feasible) > 0:
        median_capacity = np.median(post_fill_capacities_feasible)
        capacity_diff = np.abs(post_fill_capacities - median_capacity)
        priority[feasible] += np.clip(1.0 - capacity_diff[feasible] / np.max(bins_remain_cap), 0, 1)

    if item > np.mean(bins_remain_cap):
        empty_bin_indices = np.where(bins_remain_cap == np.max(bins_remain_cap))[0]
        priority[empty_bin_indices] += 1.5

    priority[feasible] += np.random.rand(np.sum(feasible)) * 0.1

    #Adaptive adjustment: If most bins are nearly full, prioritize emptier ones more.
    nearly_full_threshold = 0.1 * np.max(bins_remain_cap) #Bins with <10% max cap remaining
    nearly_full_count = np.sum(bins_remain_cap <= nearly_full_threshold)
    
    if nearly_full_count > 0.5 * len(bins_remain_cap): #If more than 50% are nearly full
        empty_bin_indices = np.where(bins_remain_cap == np.max(bins_remain_cap))[0]
        priority[empty_bin_indices] += 2.0 #Additional boost to empty bins

    return priority
```
