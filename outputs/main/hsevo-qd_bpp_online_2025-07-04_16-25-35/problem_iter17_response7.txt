```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive heuristic: capacity, waste, fragmentation, bin utilization, and item size."""
    priority = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    # Sufficient Capacity: Adaptive boost/penalty
    sufficient_capacity = bins_remain_cap >= item
    if np.any(sufficient_capacity):
        priority[sufficient_capacity] += 2.0
    else:
        priority -= 0.1  # Encourage new bin if no fit

    # Minimize Waste: Refined with item-size context
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 1.5

    # Nearly Full Bin: Context-aware
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= 1.1 * item) & (bins_remain_cap >= item)
    if np.any(nearly_full):
        priority[nearly_full] += 2.5

    # Bin Utilization: Proportional
    bin_utilization = (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap)
    priority += 0.8 * bin_utilization

    # Empty Bin: Strategic based on item size
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    if np.any(is_empty):
        if item > 0.5 * np.max(bins_remain_cap):
            priority[is_empty] += 0.9
        else:
            priority[is_empty] -= 0.2

    # Fragmentation Avoidance: Dynamic penalty based on bin size
    remaining_after_pack = bins_remain_cap - item
    highly_fragmented = (remaining_after_pack > 0) & (remaining_after_pack < 0.1 * np.max(bins_remain_cap))
    priority[highly_fragmented] -= 1.3

    # Capacity Ratio (added from v1): Encourage packing if nearly full (using ratio as well)
    ratios = item / bins_remain_cap
    ratios[~sufficient_capacity] = 0  # Ignore bins without sufficient capacity
    priority += 0.5 * ratios
    return priority
```
