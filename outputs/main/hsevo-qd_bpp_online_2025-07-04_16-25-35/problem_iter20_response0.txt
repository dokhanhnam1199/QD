```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Enhanced priority function: Combines capacity ratio, waste minimization, and nearly-full bin targeting."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    capacity_ratio = item / bins_remain_cap
    sufficient_capacity = bins_remain_cap >= item

    # Prioritize bins with sufficient capacity, scaled by (1 - capacity_ratio)
    priority[sufficient_capacity] += 1.5 * (1 - capacity_ratio[sufficient_capacity])

    # Prioritize bins that minimize waste
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 1.3 # Boost

    # Prioritize nearly full bins
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= 1.05 * item) & (bins_remain_cap >= item)
    priority[nearly_full] += 2.2

    return priority
```
