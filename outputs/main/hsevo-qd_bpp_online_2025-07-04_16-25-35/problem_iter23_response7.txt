```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste optimization, near-full incentive, and balancing with adaptive elements."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    sufficient_capacity = bins_remain_cap >= item

    if not np.any(sufficient_capacity):
        priority = -np.abs(bins_remain_cap - item)
        return priority

    priority[sufficient_capacity] += 1.0

    waste = bins_remain_cap - item
    positive_waste = waste[sufficient_capacity]

    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where((waste == min_waste) & sufficient_capacity)[0]
        priority[min_waste_bins_idx] += 2.0

    near_full_threshold = 1.1 * item
    nearly_full = (bins_remain_cap >= item) & (bins_remain_cap <= near_full_threshold)
    priority[nearly_full] += 1.5

    bin_utilization = (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap)
    good_utilization = (bin_utilization >= 0.2) & (bin_utilization <= 0.8)
    priority[good_utilization] += 0.8
    
    #Introduce a diversity factor, if the item is small
    if item < np.mean(bins_remain_cap) / 4:
        priority += np.random.rand(len(bins_remain_cap)) * 0.1 #add small random values
    return priority
```
