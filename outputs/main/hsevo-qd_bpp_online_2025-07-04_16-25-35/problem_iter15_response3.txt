```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity, waste, fragmentation, and empty bin considerations with adaptive weighting and bin diversity."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Sufficient Capacity Boost (Adaptive)
    sufficient_capacity = bins_remain_cap >= item
    if np.any(sufficient_capacity):
        priority[sufficient_capacity] += 2.0  # Base weight for sufficient capacity
        # Reward smaller remaining capacities among sufficient bins
        priority[sufficient_capacity] += (1 - (bins_remain_cap[sufficient_capacity] - item) / (np.max(bins_remain_cap[sufficient_capacity] - item) if np.max(bins_remain_cap[sufficient_capacity] - item) > 0 else 1)) * 0.8
    else:
        # If no bin has sufficient capacity, slightly penalize bins with very little space
        priority += (bins_remain_cap / np.max(bins_remain_cap)) * -0.1

    # 2. Minimize Waste Boost (Enhanced)
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 1.5  # Stronger weight for minimizing waste

        # Give a slight boost to bins with near-minimum waste as well (exploration)
        near_min_waste_bins_idx = np.where((waste > min_waste) & (waste <= min_waste + 0.1))[0] #Waste threshold multiplier = 0.1
        priority[near_min_waste_bins_idx] += 0.3

    # 3. Nearly Full Bin Boost (Refined)
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= 1.1 * item) & (bins_remain_cap >= item) #threshold multiplier = 1.1
    priority[nearly_full] += 2.5 # Increased weight for nearly full bins

    # 4. Empty Bin Consideration (Strategic)
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    if np.any(is_empty):
        num_empty = np.sum(is_empty)
        if num_empty == bins_remain_cap.size:
             priority[is_empty] += 0.8
        elif num_empty <= 3 : #threshold 3 empty bins
            priority[is_empty] += 0.8  # Slightly encourage using empty bins
        else:
            priority[is_empty] -= 0.1  # Discourage using only empty bins when many exist, promoting diversity
    else:
        # if No empty bin, add slight priority boost to largest capacity
        largest_cap_bin_idx = np.argmax(bins_remain_cap)
        priority[largest_cap_bin_idx] += 0.2

    # 5. Fragmentation Penalty (New - Addresses a weakness)
    # Penalize bins that, if filled, would leave a very small fragment
    fragmentation = bins_remain_cap - item
    small_fragment = (fragmentation > 0) & (fragmentation < 0.1) #Threshold = 0.1
    priority[small_fragment] -= 0.7  # Discourage creating tiny fragments

     # 6. Bin Diversity Bonus (New - Encourages exploration)
    # Give a small bonus to bins whose remaining capacity is significantly different
    # from the average remaining capacity. This helps explore different bin configurations.
    average_capacity = np.mean(bins_remain_cap)
    diverse_bins = np.abs(bins_remain_cap - average_capacity) > (0.3 * average_capacity) #Threshold Multiplier = 0.3
    priority[diverse_bins] += 0.4 * (np.abs(bins_remain_cap[diverse_bins] - average_capacity) / average_capacity)

    return priority
```
