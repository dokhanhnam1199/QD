```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Rule 1: First Fit Decreasing variant - Prioritize bins that can fit the item closely
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        # Prioritize bins with the least remaining capacity after placing the item.
        remaining_after_fit = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1.0 / (remaining_after_fit + 1e-9)  # Avoid division by zero

    # Rule 2: Encourage filling up bins, but penalize near-empty bins that won't fit the item
    empty_bin_threshold = 0.1  # E.g., bin is considered almost empty if < 10% full

    too_empty_mask = bins_remain_cap < empty_bin_threshold * np.max(bins_remain_cap)
    priorities[too_empty_mask & ~fit_mask] = -1e9  # Very low priority if too empty and doesn't fit

    # Rule 3: Large bins get a small boost (encourages use, helps initial spreading)
    large_bin_threshold = 0.7 * np.max(bins_remain_cap)
    priorities[bins_remain_cap > large_bin_threshold] += 0.1
    
    return priorities
```
