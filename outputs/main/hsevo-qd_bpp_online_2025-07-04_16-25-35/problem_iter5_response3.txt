```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculates priority scores for bins based on item size and remaining capacity."""
    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: Can the item fit?
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return priority  # No feasible bins, all priorities remain 0

    priority[feasible] += 1

    # Minimize Waste: Find bins with the least remaining waste after packing.
    waste = bins_remain_cap - item
    positive_waste = waste[feasible]  # Only consider waste in feasible bins
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where((waste == min_waste) & feasible)[0]
        priority[min_waste_bins_idx] += 2

    # Prevent Fragmentation: Prioritize bins that are nearly full.
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= 2 * item) & (bins_remain_cap >= item) & feasible
    priority[nearly_full] += 1.5

    # Small amount of available capacity (scaled)
    small_cap = feasible
    priority[small_cap] += (bins_remain_cap[small_cap] - item) / np.max(bins_remain_cap) if np.any(feasible) else 0

    # Prioritize Empty Bins (Especially for larger items)
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    priority[is_empty & feasible] += 0.5 #Give higher preference to empty bins if they are feasible

    return priority
```
