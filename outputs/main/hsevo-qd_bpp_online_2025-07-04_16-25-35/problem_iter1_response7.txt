```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function combines several factors:
    1.  Space utilization: Favors bins where the item fits reasonably well,
        avoiding bins that are much too large or much too small. This is
        achieved by a Gaussian centered around the item size.
    2.  Remaining capacity: Slightly favors bins with more remaining capacity to
        avoid prematurely filling up bins and potentially leaving large items
        unpacked later. However, this is downweighted to prevent it from
        dominating the space utilization aspect.
    3.  A penalty for bins where the item doesn't fit. This aims to aggressively
        reduce the chance that an item is considered for a bin it doesn't fit in.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Gaussian centered around the item size.  Bins where the item fits nicely
    # will have a high score.
    space_utilization = np.exp(-0.5 * ((bins_remain_cap - item) / (0.2 * item))**2)

    # Slightly favor bins with more remaining capacity.  Downweighted.
    remaining_capacity_bonus = 0.1 * bins_remain_cap

    # Strong penalty for bins where the item doesn't fit.
    does_fit = bins_remain_cap >= item
    penalty = -1e9 * (1 - does_fit)  # Very large negative number if item doesn't fit

    priorities = space_utilization + remaining_capacity_bonus + penalty
    return priorities
```
