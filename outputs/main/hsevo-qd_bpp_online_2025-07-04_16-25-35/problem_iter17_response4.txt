```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculate bin priorities, balancing capacity, waste, and fragmentation."""

    bin_capacity = np.max(bins_remain_cap)
    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Sufficient Capacity (Base Priority)
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 3.0 # Base weight

    # Heuristic 2: Minimize Waste (Adaptive)
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]

    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 2.0

        #Adaptive Waste consideration:
        waste_ratio = min_waste / bin_capacity
        priority[min_waste_bins_idx] += 1.0 * (1-waste_ratio) #Scale reward

    # Heuristic 3: Prevent Fragmentation (Near Full)
    nearly_full_threshold = 1.2 * item #Adapt threshold to item size
    nearly_full = (bins_remain_cap >= item) & (bins_remain_cap <= nearly_full_threshold)
    priority[nearly_full] += 4.0
    
    # Heuristic 4: Empty Bin
    is_empty = bins_remain_cap == bin_capacity
    priority[is_empty] += 3.5

    # Heuristic 5: Bin Utilization
    bin_utilization = (bin_capacity - bins_remain_cap) / bin_capacity
    priority += 1.5 * bin_utilization
    
    return priority
```
