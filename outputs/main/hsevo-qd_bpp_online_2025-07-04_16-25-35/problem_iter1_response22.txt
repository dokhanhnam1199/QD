```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # 1. Check feasibility first.  Infeasible bins get a very low priority.
    feasible = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap) - np.inf  # Initialize with very low priority

    # 2.  For feasible bins, calculate the "waste" if we were to add the item.
    waste = bins_remain_cap - item
    
    # 3.  Bins with less waste are generally preferable.  We'll use a non-linear
    #     function to heavily penalize bins with large waste.  The square root
    #     makes the penalty less aggressive than a square.
    waste_penalty = -np.sqrt(waste + 1e-9)  # Add small number to avoid sqrt(0) and log(0)

    # 4.  Consider the fill ratio. A higher fill ratio is generally desired, but we want to
    #     avoid filling bins too close to capacity, which would leave them unusable. A logarithmic
    #     term accounts for bins being nearly full, preventing excessive fills.
    fill_ratio = item / bins_remain_cap
    fill_bonus = np.log1p(fill_ratio) # log(1 + fill_ratio), handling 0 or small fill ratios.

    # 5. Combine the waste penalty and fill bonus to create the priority score.
    priorities[feasible] = waste_penalty[feasible] + fill_bonus[feasible]

    # 6. A small positive bonus for bins that are at least half full
    half_full_bonus = (bins_remain_cap >= item) & (bins_remain_cap >= np.mean(bins_remain_cap))
    priorities[half_full_bonus] += 0.1
    
    return priorities
```
