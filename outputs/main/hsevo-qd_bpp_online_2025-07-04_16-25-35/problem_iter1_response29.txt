```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Aims for near-optimal packing by:
    1. Preferring bins that can fit the item (avoids unnecessary bin usage).
    2. Among bins that fit, prioritize bins with smallest remaining capacity AFTER packing
       the item (reduces fragmentation).
    3. When bin doesn't fit, assigns negative priorities to prevent filling it.
    4. Avoids zero division by adding a very small number.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    epsilon = 1e-9  # Small constant to avoid division by zero

    fits = bins_remain_cap >= item
    remaining_after_fit = bins_remain_cap - item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # If it fits, prioritize bins with smallest remaining capacity AFTER packing.

    priorities[fits] = -remaining_after_fit[fits] + 1 # The smaller the value, the higher priority. adding +1 to always be positive to avoid issues.
    # If it doesn't fit, heavily penalize (assign a very low priority).
    priorities[~fits] = -1e9  # assign -inf does not work well for argmax
    return priorities
```
