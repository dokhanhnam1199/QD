```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines adaptive waste, nearly full bin logic, and bin utilization."""
    priority = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    # 1. Sufficient Capacity Boost
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 2.0

    # 2. Adaptive Minimize Waste
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 1.5

        adaptive_waste_threshold = 0.2 * item  # dynamically adjust based on item size
        small_waste_bins = (waste >= 0) & (waste <= adaptive_waste_threshold)
        priority[small_waste_bins] += 0.7

    # 3. Nearly Full Bin Boost with dynamic threshold
    nearly_full_threshold = 1.1 # Slightly less than v1 since dynamic adjusment is involved.
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= nearly_full_threshold * item) & (bins_remain_cap >= item)
    priority[nearly_full] += 2.5

    # 4. Small Capacity Based on Relative Availability
    sufficient_bins = bins_remain_cap >= item
    if np.any(sufficient_bins):
        max_remaining_cap = np.max(bins_remain_cap[sufficient_bins])
        priority[sufficient_bins] += (bins_remain_cap[sufficient_bins] - item) / max_remaining_cap

    # 5. Empty Bin Consideration
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    priority[is_empty] += 0.8

    # 6. Penalize bins close to full but can't fit the item
    cannot_fit = (bins_remain_cap < item) & (bins_remain_cap > 0)
    priority[cannot_fit] -= 0.6

    # 7. Reward higher bin utilization globally
    total_capacity = np.sum(bins_remain_cap)
    bin_utilization_score = (num_bins - (total_capacity/np.max(bins_remain_cap)))/num_bins
    priority += 0.3 * bin_utilization_score

    # 8. Dynamically adjust nearly_full weight based on bin utilization.
    #   If bin utilization is high, incentivize filling nearly full bins more.
    if bin_utilization_score > 0.5:
      priority[nearly_full] += 0.5 * bin_utilization_score

    return priority
```
