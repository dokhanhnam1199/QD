```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines feasibility, waste minimization, fragmentation avoidance, and empty bin prioritization with adaptive elements."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    # 1. Feasibility (Essential)
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return priority

    priority[feasible] += 1.0

    # 2. Minimize Waste (First-Fit Decreasing variant)
    waste = bins_remain_cap - item
    positive_waste = waste[feasible]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where((waste == min_waste) & feasible)[0]
        priority[min_waste_bins_idx] += 3.0

    # 3. Avoid Fragmentation (Balancing Bin Usage) - Adaptive
    post_fill_capacities = bins_remain_cap - item
    post_fill_capacities_feasible = post_fill_capacities[feasible]
    if len(post_fill_capacities_feasible) > 0:
        median_capacity = np.median(post_fill_capacities_feasible)
        capacity_diff = np.abs(post_fill_capacities - median_capacity)
        priority[feasible] += np.clip(1.0 - capacity_diff[feasible] / np.max(bins_remain_cap), 0, 1)

    # 4. Prioritize emptier bins if the item is relatively large - Adaptive
    if item > np.mean(bins_remain_cap):
        empty_bin_indices = np.where(bins_remain_cap == np.max(bins_remain_cap))[0]
        priority[empty_bin_indices] += 1.5

    # 5. Small Capacity Based on Relative Availability (Normalized)
    sufficient_bins = bins_remain_cap >= item
    if np.any(sufficient_bins):
        max_remaining_cap = np.max(bins_remain_cap[sufficient_bins])
        priority[sufficient_bins] += (bins_remain_cap[sufficient_bins] - item) / max_remaining_cap
    
    #6. Penalize bins close to full but can't fit the item
    cannot_fit = (bins_remain_cap < item) & (bins_remain_cap > 0)
    priority[cannot_fit] -= 0.5
    
    #7. Adaptive Waste thresholding
    adaptive_waste_threshold = 0.2 * item
    small_waste_bins = (waste >= 0) & (waste <= adaptive_waste_threshold) & feasible
    priority[small_waste_bins] += 0.6

    #8. Nearly Full Bin Boost with Dynamic Threshold
    nearly_full_threshold = 1.1 # Initial threshold
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= nearly_full_threshold * item) & (bins_remain_cap >= item)
    priority[nearly_full] += 2.4
    
    # Heuristic 5: Add a slight randomness to break ties and explore the solution space.
    priority[feasible] += np.random.rand(np.sum(feasible)) * 0.1

    return priority
```
