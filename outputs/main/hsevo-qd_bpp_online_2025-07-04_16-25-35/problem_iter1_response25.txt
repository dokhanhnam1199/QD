```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First consider only bins that can fit the item
    eligible_bins = bins_remain_cap >= item

    if np.any(eligible_bins):
        # Calculate the wasted space if we were to place the item in each eligible bin.
        wasted_space = bins_remain_cap[eligible_bins] - item

        # Assign a higher priority to bins with less wasted space. In fact, much higher.
        # A small amount of wasted space makes a big difference.
        priorities[eligible_bins] = np.exp(-wasted_space * 5)

        # Boost the priority of almost full bins EVEN MORE, if there is at least some eligible bin.
        almost_full = (bins_remain_cap[eligible_bins] / item) < 1.2
        priorities[eligible_bins][almost_full] *= 2
    else:
        # If no bins can fit the item, then assign them a slightly increasing negative priority
        # favoring empty bins. Try to create a new bin rather than further fragmenting existing ones.

        priorities = -bins_remain_cap # Bigger means more room so less negative

    return priorities
```
