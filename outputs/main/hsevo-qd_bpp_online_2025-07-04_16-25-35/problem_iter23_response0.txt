```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity ratios, waste minimization, and adaptive weights based on item size."""
    priority = np.zeros_like(bins_remain_cap, dtype=float)
    sufficient_capacity = bins_remain_cap >= item
    
    # Heuristic 1: Capacity Ratio (Only for bins with sufficient capacity)
    ratios = item / bins_remain_cap
    ratios[~sufficient_capacity] = 0
    priority += ratios

    # Heuristic 2: Minimize Waste (Only for bins with sufficient capacity)
    waste = bins_remain_cap - item
    waste[~sufficient_capacity] = np.inf
    min_waste = np.min(waste)
    min_waste_bins_idx = np.where(waste == min_waste)[0]
    priority[min_waste_bins_idx] += 1.0  # Boost for min waste bins

    # Adaptive Weighting: Adjust waste minimization priority based on item size
    waste_priority_weight = 1.0 if item <= 0.5 else 0.5 # Favor waste if item is small.
    priority[min_waste_bins_idx] *= waste_priority_weight

    #Heuristic 3: slight favor to empty bin
    max_remain_cap = np.max(bins_remain_cap)
    empty_bins = bins_remain_cap == max_remain_cap
    priority[empty_bins] += 0.1

    return priority
```
