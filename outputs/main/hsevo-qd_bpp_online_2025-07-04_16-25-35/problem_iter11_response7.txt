```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste, capacity ratio, and fragmentation."""
    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Sufficient Capacity
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 1

    # Minimize Waste (only for sufficient capacity bins)
    waste = bins_remain_cap - item
    waste[~sufficient_capacity] = np.inf  # large number for insufficient bins
    min_waste = np.min(waste)
    min_waste_bins_idx = np.where(waste == min_waste)[0]
    priority[min_waste_bins_idx] += 2

    # Capacity Ratio (only for sufficient capacity bins)
    ratios = item / bins_remain_cap
    ratios[~sufficient_capacity] = 0
    priority += ratios

    # Prevent Fragmentation (bins close to item size, prioritize smaller).
    nearly_full_threshold = 2 * item
    nearly_full = (bins_remain_cap >= item) & (bins_remain_cap <= nearly_full_threshold)
    priority[nearly_full] += 1.5

    # Empty bin bonus for larger items to diversify bin usage.
    if item > np.mean(bins_remain_cap):
        is_empty = bins_remain_cap == np.max(bins_remain_cap)
        priority[is_empty] += 0.8

    return priority
```
