```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # A bin must have enough capacity to accommodate the item
    valid_bins = bins_remain_cap >= item
    
    if not np.any(valid_bins):
        return priorities # No suitable bin
    
    # Calculate the wasted space after placing the item
    wasted_space = bins_remain_cap - item
    wasted_space[wasted_space < 0] = np.inf  # Invalidate bins without capacity

    # Prioritize bins that minimize wasted space
    priorities = -wasted_space # Lower waste, higher priority

    # Bonus: Slight preference for bins that are already somewhat full, but not too full (to avoid creating too many nearly-empty bins). This could be tuned via experiments.
    fill_ratios = (bins_remain_cap - wasted_space)/ bins_remain_cap
    fill_ratios[wasted_space == np.inf] = -1 # Invalidate for bins without capacity
    # Moderate fill ratio is good, avoid bins already completely empty
    priorities += 0.5 * np.clip(fill_ratios, 0.2, 0.9)

    return priorities
```
