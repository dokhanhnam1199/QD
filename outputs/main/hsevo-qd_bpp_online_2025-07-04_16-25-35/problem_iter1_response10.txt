```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Prioritize bins where the item fits
            fill_ratio = item / cap
            # Give higher priority to bins that will be filled more completely
            priorities[i] = 1 - np.abs(fill_ratio - 0.8)  # Aim for bins to be ~80% full

            # Penalize bins with too much remaining capacity after the item is added
            remaining_after = cap - item
            if remaining_after > 0:
                priorities[i] -= (remaining_after / np.max(bins_remain_cap)) * 0.2 # Penalize wasting space
        else:
            priorities[i] = -np.inf  # Never consider bins where the item doesn't fit

    return priorities
```
