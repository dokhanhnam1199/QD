```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity, waste, fragmentation, and empty bin considerations with adaptation and diversity."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Essential Capacity Check (Highest Priority)
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 5.0  # HUGE boost for bins that can fit the item

    # 2. Minimize Waste (Adaptive Weighting)
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]

    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        
        # Adaptive Waste Weighting:  Smaller item -> higher weight on minimizing waste
        waste_weight = 2.0 + (1.0 - item) * 2.0  # Weight between 2.0 and 4.0
        priority[min_waste_bins_idx] += waste_weight

    # 3. Nearly Full Bins (Strategic Packing)
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= 1.1 * item) & (bins_remain_cap >= item)
    priority[nearly_full] += 3.5 # Strong incentive to fill nearly full bins

    # 4. Small Capacity Bin Preference (Reduce Fragmentation) - but only if it doesn't create too much waste
    small_cap = (bins_remain_cap >= item) & (bins_remain_cap <= 2*item) # Focus on bins not too much larger than item
    waste_small_cap = bins_remain_cap[small_cap] - item
    acceptable_waste = waste_small_cap <= 0.3 # limit waste
    
    priority[small_cap] += 1.5 * (1-waste_small_cap) * acceptable_waste # scale by waste; reward low waste

    # 5. Empty Bin Consideration (When other options are limited) - lower priority
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    priority[is_empty] += 0.5 # Small incentive to use empty bins if no good fit exists

    # 6. Diversity/Exploration: Randomly perturb priorities slightly
    priority += np.random.normal(0, 0.05, size=bins_remain_cap.shape)  # Small random noise

    return priority
```
