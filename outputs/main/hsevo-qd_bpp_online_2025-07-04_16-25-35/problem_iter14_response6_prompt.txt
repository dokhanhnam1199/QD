{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines capacity ratios, waste minimization, and fragmentation avoidance.\"\"\"\n    priority = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: Sufficient Capacity\n    sufficient_capacity = bins_remain_cap >= item\n    priority[sufficient_capacity] += 1\n\n    # Heuristic 2: Minimize Waste (Only for bins with sufficient capacity)\n    waste = bins_remain_cap - item\n    positive_waste = waste[sufficient_capacity]\n    min_waste = np.min(positive_waste) if positive_waste.size > 0 else np.inf\n    min_waste_bins_idx = np.where((waste == min_waste) & sufficient_capacity)[0]\n    priority[min_waste_bins_idx] += 2\n\n    # Heuristic 3: Capacity Ratio (Only for bins with sufficient capacity)\n    ratios = item / bins_remain_cap\n    ratios[~sufficient_capacity] = 0  # Ignore bins without sufficient capacity\n    priority += ratios\n\n    # Heuristic 4: Prevent Fragmentation (Bins near full have high priority).\n    nearly_full_threshold = 1.2 * item  # Adjust as needed\n    nearly_full = (bins_remain_cap > 0) & (bins_remain_cap <= nearly_full_threshold) & (bins_remain_cap >= item)\n    priority[nearly_full] += 1.5\n\n    # Heuristic 5: Prioritize Emptier Bins for Larger Items\n    empty_bin_threshold = np.max(bins_remain_cap)\n    is_empty = bins_remain_cap == empty_bin_threshold\n    priority[is_empty] += 0.8   # Slightly favor empty bins\n\n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic considers sufficient capacity, waste minimization, fragmentation avoidance (nearly full bins), small capacity handling, and empty bin prioritization, using carefully chosen weights. The worst heuristic only considers the ratio of item size to remaining capacity in bins, using a log transformation.\n\nComparing (4th) vs (5th), these heuristics are identical.\n\nComparing (6th) vs (8th), these heuristics are identical.\n\nComparing (9th) vs (11th), these heuristics are identical.\n\nComparing (12th) vs (13th), these heuristics are identical.\n\nComparing (14th) vs (16th), these heuristics are identical.\n\nComparing (15th) vs (17th), these heuristics are identical.\n\nComparing (second worst) vs (worst), we see the second worst use `ratios = item / bins_remain_cap` and `log_ratios = np.log(ratios)` calculate simple ratio and log ratio, while the worst do the same.\n\nOverall: The best heuristics incorporate multiple factors with weighted priorities, including capacity, waste, fragmentation, and bin utilization. They often include dynamic adjustments based on item size or bin state. Simpler heuristics that only consider capacity ratios or log ratios perform poorly. Penalizing bins that are close to full but cannot fit the item and rewarding global bin utilization are advanced strategies that improve performance. Giving tunable parameters is beneficial.\n- \nOkay, let's redefine \"Current Self-Reflection\" for designing better heuristics, focusing on actionable advice and avoiding the pitfalls of ineffective approaches.\n\nHere's a refined perspective:\n\n*   **Keywords:** Adaptive, Experimentation, Evaluation, Refinement.\n*   **Advice:** Systematically experiment with different factor combinations and weighting schemes. Continuously evaluate heuristic performance on diverse problem instances. Adapt the heuristic based on observed performance patterns.\n*   **Avoid:** Vague statements about \"importance,\" premature optimization, and lack of rigorous testing.\n*   **Explanation:** Move beyond intuition. Focus on iterative improvement through data-driven insights. Don't over-optimize early. Experiment, measure, adapt.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}