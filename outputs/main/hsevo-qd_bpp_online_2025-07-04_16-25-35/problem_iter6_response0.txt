```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                  sufficient_capacity_weight: float = 1.8066941616372154,
                  min_waste_weight: float = 1.2369759055947915,
                  nearly_full_threshold_multiplier: float = 1.164912650607926,
                  nearly_full_weight: float = 2.4304538888032448,
                  empty_bin_weight: float = 0.7700931706376539,
                  waste_capacity_ratio_weight: float = 0.5,
                  bin_utilization_weight: float = 1.0) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        sufficient_capacity_weight: Weight for bins with sufficient capacity.
        min_waste_weight: Weight for bins that minimize waste.
        nearly_full_threshold_multiplier: Multiplier for item size to determine nearly full threshold.
        nearly_full_weight: Weight for bins that are nearly full.
        empty_bin_weight: Weight for empty bins.
        waste_capacity_ratio_weight: Weight for the ratio of waste to bin capacity
        bin_utilization_weight: Weight for the current bin utilization

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    bin_capacity = np.max(bins_remain_cap)
    # Heuristic 1: Sufficient Capacity
    sufficient_capacity = bins_remain_cap >= item
    priority = np.zeros_like(bins_remain_cap, dtype=float)
    priority[sufficient_capacity] += sufficient_capacity_weight  # Base priority if bin can fit item

    # Heuristic 2: Minimize Waste (Maximize filled space).
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0] # Consider only valid waste
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += min_waste_weight

    # Heuristic 3: Prevent Fragmentation (Bins near full have high priority).
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= nearly_full_threshold_multiplier * item) & (bins_remain_cap >= item)
    priority[nearly_full] += nearly_full_weight

    # Heuristic 4: Small amount of available capacity and weight by normalized waste
    sufficient_bins = bins_remain_cap >= item
    if np.any(sufficient_bins):
        waste_ratios = waste[sufficient_bins] / bin_capacity
        priority[sufficient_bins] += waste_capacity_ratio_weight * (1 - waste_ratios)
    
    # Heuristic 5: Give higher preference if it is an empty bin.
    is_empty = bins_remain_cap == bin_capacity
    priority[is_empty] += empty_bin_weight

    # Heuristic 6: Bin Utilization
    bin_utilization = (bin_capacity - bins_remain_cap) / bin_capacity
    priority += bin_utilization_weight * bin_utilization

    return priority
```
