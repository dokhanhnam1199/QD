```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive priority: considers waste, fragmentation, emptiness, and scales based on bin capacity."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Sufficient Capacity
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 1.0 # Base priority.

    # Minimize Waste (only if sufficient capacity)
    waste = bins_remain_cap - item
    positive_waste = waste[sufficient_capacity]
    if positive_waste.size > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where((waste == min_waste) & sufficient_capacity)[0]
        priority[min_waste_bins_idx] += 2.0  # High priority for minimal waste

    # Prevent Fragmentation: nearly full bins
    nearly_full_threshold = 1.2 * item
    nearly_full = (bins_remain_cap > 0) & (bins_remain_cap <= nearly_full_threshold) & (bins_remain_cap >= item)
    priority[nearly_full] += 1.5

    # Prioritize Emptier Bins, scaled by item size
    max_cap = np.max(bins_remain_cap)
    is_empty = bins_remain_cap == max_cap
    priority[is_empty] += 0.8 * (item / max_cap) # Scale by item size relative to bin size

    # Capacity Ratio (scale effect)
    capacity_ratios = item / bins_remain_cap
    capacity_ratios[~sufficient_capacity] = 0
    priority += 0.5 * capacity_ratios # scale down

    return priority
```
