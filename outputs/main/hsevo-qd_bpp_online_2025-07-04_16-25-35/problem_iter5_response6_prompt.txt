{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Heuristic 1: Sufficient Capacity\n    sufficient_capacity = bins_remain_cap >= item\n    priority = np.zeros_like(bins_remain_cap, dtype=float)\n    priority[sufficient_capacity] += 1  # Base priority if bin can fit item\n\n    # Heuristic 2: Minimize Waste (Maximize filled space).\n    waste = bins_remain_cap - item\n    positive_waste = waste[waste >= 0] # Consider only valid waste\n    if len(positive_waste) > 0:\n        min_waste = np.min(positive_waste)\n        min_waste_bins_idx = np.where(waste == min_waste)[0]\n        priority[min_waste_bins_idx] += 2\n\n    # Heuristic 3: Prevent Fragmentation (Bins near full have high priority).\n    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= 2 * item) & (bins_remain_cap >= item)\n    priority[nearly_full] += 1.5\n\n    # Heuristic 4: Small amount of available capacity.\n    small_cap = (bins_remain_cap >= item)\n    priority[small_cap] += (bins_remain_cap[small_cap] - item) / np.max(bins_remain_cap) # Add scaled value based on relative small capacity.\n    \n    # Heuristic 5: Give higher preference if it is an empty bin.\n    is_empty = bins_remain_cap == np.max(bins_remain_cap)\n    priority[is_empty] += 0.5\n\n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the first one takes into account sufficient capacity, minimizes waste, prevents fragmentation, considers small amounts of available capacity, and gives preference to empty bins, while the last one only uses a log ratio calculation.\n(2nd best) vs (second worst) This pair is the same.\nComparing (1st) vs (2nd), we see they are identical.\n(3rd) vs (4th) This pair is the same.\nComparing (second worst) vs (worst), we see they are identical.\nComparing (6th) vs (7th), we see 6th heuristic only considers sufficient capacity and minimizes waste with a slightly added capacity ratio heuristic, while the 7th one considers \"nearly full\" heuristic, \"small amount of available capacity\" heuristic, and \"Give higher preference if it is an empty bin\" heuristic.\nComparing (10th) vs (11th), the 10th heuristic implements a more refined approach, including feasibility check, waste minimization, fragmentation avoidance by balancing bin usage around the median capacity, prioritization of emptier bins for larger items, and introduces a degree of randomness. The 11th heuristic is similar to other middle ranked heuristics.\nOverall: The better heuristics consider multiple factors (sufficient capacity, waste minimization, fragmentation, small capacity, and empty bins) and assign weights or priorities to each factor. They also incorporate scaling and clipping to prevent negative values and randomness to break ties and explore the solution space. The worst ones oversimplify, focusing on ratio calculations or single factors without considering the interplay between them. Good heuristics also include feasibility checks to make sure the item can actually fit in the bin.\n- \nOkay, let's refine \"Current self-reflection\" to be more effective for heuristic design, avoiding the pitfalls of \"Ineffective self-reflection.\"\n\n*   **Keywords:** Cognitive biases, exploration-exploitation, adaptive learning, problem structure.\n*   **Advice:** Explicitly acknowledge and mitigate cognitive biases. Prioritize understanding the problem structure before assigning weights. Emphasize adaptive learning mechanisms in the heuristic.\n*   **Avoid:** Over-reliance on parameter tuning without theoretical grounding. Generic advice about combining factors without specifying the underlying rationale.\n*   **Explanation:** Focus on understanding *why* factors are important, how they interact, and how the heuristic can learn and adapt based on the problem's specific characteristics, rather than solely relying on parameter optimization.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}