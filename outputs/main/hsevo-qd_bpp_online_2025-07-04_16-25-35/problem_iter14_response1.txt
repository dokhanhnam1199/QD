```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity, waste, and relative capacity for bin prioritization."""
    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Sufficient Capacity Boost
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 1.5

    # Minimize Waste (Only for bins with sufficient capacity)
    waste = bins_remain_cap - item
    if np.any(sufficient_capacity):
        min_waste = np.min(waste[sufficient_capacity])
        min_waste_bins_idx = np.where((waste == min_waste) & sufficient_capacity)[0]
        priority[min_waste_bins_idx] += 1.7

    # Relative capacity
    ratios = item / bins_remain_cap
    ratios[~sufficient_capacity] = 0
    priority += ratios * 0.8 # Scale the ratios

    #Nearly full bin boost
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= 1.1 * item) & (bins_remain_cap >= item)
    priority[nearly_full] += 1.9

    return priority
```
