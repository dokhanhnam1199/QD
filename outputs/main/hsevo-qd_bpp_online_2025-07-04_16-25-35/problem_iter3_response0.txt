```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priority = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Heuristic 1: Feasibility (Essential)
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return priority  # No feasible bin, all priorities remain 0

    priority[feasible] += 1.0 # Base priority for feasible bins

    # Heuristic 2: Minimize Waste (First-Fit Decreasing variant)
    waste = bins_remain_cap - item
    positive_waste = waste[feasible] # Only consider waste in feasible bins
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where((waste == min_waste) & feasible)[0]  #Ensure we choose within the feasible set
        priority[min_waste_bins_idx] += 3.0 # Higher priority for minimizing waste

    # Heuristic 3: Avoid Fragmentation (Balancing Bin Usage)
    # Give a slightly higher priority to bins that, after placing the item,
    # will have a remaining capacity in the middle range of possible remaining capacities.
    post_fill_capacities = bins_remain_cap - item
    post_fill_capacities_feasible = post_fill_capacities[feasible]
    if len(post_fill_capacities_feasible) > 0:
        median_capacity = np.median(post_fill_capacities_feasible)
        capacity_diff = np.abs(post_fill_capacities - median_capacity)
        # Scale the priority boost inversely proportional to the capacity difference.
        # Bins closer to the median capacity get a higher boost.
        priority[feasible] += np.clip(1.0 - capacity_diff[feasible] / np.max(bins_remain_cap), 0, 1) #Scale and clip. Prevents negative values
        

    # Heuristic 4: Prioritize emptier bins if the item is relatively large.
    # This helps distribute items more evenly across bins initially.
    if item > np.mean(bins_remain_cap): # Scale by item size relative to average capacity.
        empty_bin_indices = np.where(bins_remain_cap == np.max(bins_remain_cap))[0]
        priority[empty_bin_indices] += 1.5

    # Heuristic 5: Add a slight randomness to break ties and explore the solution space.
    priority[feasible] += np.random.rand(np.sum(feasible)) * 0.1

    return priority
```
