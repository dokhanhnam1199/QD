```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """A refined priority function for online bin packing, focusing on balanced bin utilization and adaptive strategies."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    bin_count = len(bins_remain_cap)
    
    # 1. Essential Fit: Guarantee capacity
    sufficient_capacity = bins_remain_cap >= item
    if not np.any(sufficient_capacity):
        # If no bin fits, prioritize the least insufficient
        priority = -np.abs(bins_remain_cap - item)  # Assign negative priority based on how much it overflows
        return priority

    priority[sufficient_capacity] += 1.0  # Base priority for fitting

    # 2. Waste Optimization:
    waste = bins_remain_cap - item
    positive_waste = waste[sufficient_capacity]  # Consider only bins that fit
    
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where((waste == min_waste) & sufficient_capacity)[0]
        priority[min_waste_bins_idx] += 2.0  # Strong preference for minimal waste

    # 3. Near-Full Incentive (Adaptive threshold based on item size):
    near_full_threshold = 1.1 * item  #Dynamic threshold
    nearly_full = (bins_remain_cap >= item) & (bins_remain_cap <= near_full_threshold)
    priority[nearly_full] += 1.5

    # 4. Balancing: Reward bins that are neither too full nor too empty
    bin_utilization = (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap)  # Calculate how full each bin is relative to fullest bin
    
    #Give higher score if the utilization is in an appropriate range
    good_utilization = (bin_utilization >= 0.2) & (bin_utilization <= 0.8) #prevent overly empty or full bins
    priority[good_utilization] += 0.8 #medium preference

    # 5. Empty Bin Consideration (But penalize overuse)
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    if np.any(is_empty) and np.sum(bins_remain_cap < np.max(bins_remain_cap)) > bin_count // 3 : #ensure that you do not overuse empty bins. At least one-third of all bins need to have some value
         priority[is_empty] += 0.5


    return priority
```
