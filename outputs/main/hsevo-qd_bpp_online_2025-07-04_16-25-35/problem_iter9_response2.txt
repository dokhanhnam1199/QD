```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity, waste, fragmentation, and empty bin considerations with dynamic adjustments."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    n_bins = len(bins_remain_cap)

    # 1. Sufficient Capacity Boost (with relative capacity consideration)
    sufficient_capacity = bins_remain_cap >= item
    if np.any(sufficient_capacity):  # Only apply if there's sufficient capacity
        priority[sufficient_capacity] += 1.8  # Base boost for sufficient capacity

        # Give higher priority to bins with smaller remaining capacity among those with sufficient capacity
        remaining_space = bins_remain_cap[sufficient_capacity] - item
        min_remaining = np.min(remaining_space)
        best_fit_bins = sufficient_capacity & (bins_remain_cap - item == min_remaining)
        priority[best_fit_bins] += 0.8 #Additional boost for best fit

    # 2. Minimize Waste Boost (considering bin utilization rate)
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]

    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 1.2 #Base min waste boost

        # Boost higher utilization rate
        for bin_idx in min_waste_bins_idx:
            utilization_rate = (1 - bins_remain_cap[bin_idx]) # Utilization is 1 - remaining capacity
            priority[bin_idx] += 0.6 * utilization_rate #Bonus with utilization

    # 3. Nearly Full Bin Boost (adaptive threshold)
    # Dynamically adjust threshold based on item size distribution
    threshold_multiplier = 1.05 # Reduced threshold
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= threshold_multiplier * item) & (bins_remain_cap >= item)
    priority[nearly_full] += 2.4 #Base nearly full boost

    # 4. Small Capacity based on relative availability (scaled by item size)
    small_cap = (bins_remain_cap >= item)
    if np.any(small_cap):
        max_cap = np.max(bins_remain_cap)
        if max_cap > 0:
             priority[small_cap] += ((bins_remain_cap[small_cap] - item) / max_cap) * item

    # 5. Emptiness Consideration (discourage if too many empty bins exist)
    empty_bins = bins_remain_cap == np.max(bins_remain_cap)
    num_empty = np.sum(empty_bins)

    if num_empty > n_bins / 3:  # Dynamically adjust discouragement based on # of empty bins
        priority[empty_bins] -= 0.3 # Discourage creating too many empty bins early on
    else:
        priority[empty_bins] += 0.7  # Encourage using empty bins if few exist

    # 6. Fragmentation Avoidance: penalize bins close to item size, but not enough
    close_to_item = (bins_remain_cap > 0) & (bins_remain_cap < item)
    priority[close_to_item] -= 0.5

    return priority
```
