```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines multiple heuristics for bin packing priority."""

    # Heuristic 1: Sufficient Capacity
    sufficient_capacity = bins_remain_cap >= item
    priority = np.zeros_like(bins_remain_cap, dtype=float)
    priority[sufficient_capacity] += 3.5  # Base priority

    # Heuristic 2: Minimize Waste
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 3.0

    # Heuristic 3: Nearly Full
    nearly_full = (bins_remain_cap > 0.2) & (bins_remain_cap <= 1.8 * item) & (bins_remain_cap >= item)
    priority[nearly_full] += 4.0

    # Heuristic 4: Small capacity
    small_cap = (bins_remain_cap >= item)
    priority[small_cap] += (bins_remain_cap[small_cap] - item) / np.max(bins_remain_cap)

    # Heuristic 5: Empty Bin
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    priority[is_empty] += 2.0

    # Adaptive Weighting: Adjust nearly_full weight based on item size
    priority[nearly_full] += 1.0 / (item + 0.1)  # Smaller items get higher nearly_full priority

    # Encourage diversity by random nudge
    priority += np.random.rand(len(bins_remain_cap)) * 0.1

    # If no bin can accommodate the item, prioritize the fullest bin.
    if np.all(bins_remain_cap < item):
        priority = bins_remain_cap / np.max(bins_remain_cap)  # Fill fullest bin
        priority += 5 # ensure such bins are prioritize

    return priority
```
