```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Uses a combination of factors, favoring bins that:
    1. Can fit the item.
    2. Have remaining capacity close to the item size (minimizing wasted space).
    3. Are not too full (to avoid premature filling).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Assign a very low priority to bins that cannot fit the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # For feasible bins, calculate priority based on:
    # 1. Space utilization (item size / remaining capacity) - higher is better
    # 2. Remaining space after packing the item - lower is better

    feasible_mask = ~infeasible_mask
    remaining_after_pack = bins_remain_cap[feasible_mask] - item

    # Add small positive constant to avoid division by zero or log of zero
    # This ensures that we prioritize non-zero values over potential zero-value scenarios
    epsilon = 1e-9

    space_utilization = item / (bins_remain_cap[feasible_mask] + epsilon)
    priorities[feasible_mask] = space_utilization - 0.5* (remaining_after_pack / (np.max(bins_remain_cap)+ epsilon))

    #Add an additional bonus to the bins which when filled have utilization between 90 and 100% to fill
    # those bins before beginning to fill the next bin. This is a fine tuning to reduce the # of bins.
    nearly_full_mask = (item <= bins_remain_cap) & ((item / bins_remain_cap) >= 0.9)
    priorities[nearly_full_mask] += 0.2 #give a bonus


    return priorities
```
