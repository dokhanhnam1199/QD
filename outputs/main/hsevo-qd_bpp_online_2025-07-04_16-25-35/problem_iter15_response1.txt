```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Enhanced priority function combining capacity, waste, fragmentation, and bin utilization,
    with adaptive weighting based on item size and bin availability."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    # 1. Sufficient Capacity Boost (Adaptive)
    sufficient_capacity = bins_remain_cap >= item
    if np.any(sufficient_capacity):
        priority[sufficient_capacity] += 2.0  # Increased weight for sufficient capacity
    else:
        # If no bin has sufficient capacity, slightly penalize all bins to encourage opening a new one
        priority -= 0.1
    

    # 2. Minimize Waste (Refined)
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 1.5 # Increased weight for min waste
    

    # 3. Nearly Full Bin Boost (Context-Aware)
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= 1.1 * item) & (bins_remain_cap >= item)
    if np.any(nearly_full):
         priority[nearly_full] += 2.5 # Further increased weight for nearly full
    

    # 4. Bin Utilization (Proportional) - Encourages packing into bins that are already somewhat full
    bin_utilization = (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap)
    priority += 0.8 * bin_utilization  # Weight the utilization boost


    # 5. Empty Bin Consideration (Strategic)
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    if np.any(is_empty) and item > 0.5 * np.max(bins_remain_cap): # only if item is large enough
        priority[is_empty] += 0.9 # Increased weight for empty bins for larger items.
    elif np.any(is_empty):
        priority[is_empty] -= 0.2 # slight penalty if item is small, let other bin be filled first


    # 6. Fragmentation Avoidance (Dynamic Penalty)
    # Penalize bins that, after packing, would leave a small, unusable space
    remaining_after_pack = bins_remain_cap - item
    highly_fragmented = (remaining_after_pack > 0) & (remaining_after_pack < 0.1 * np.max(bins_remain_cap))
    priority[highly_fragmented] -= 1.3  # Apply a penalty for high fragmentation
   
    return priority
```
