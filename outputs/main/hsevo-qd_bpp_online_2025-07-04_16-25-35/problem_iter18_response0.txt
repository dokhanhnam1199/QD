```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_history: np.ndarray = None) -> np.ndarray:
    """
    An enhanced priority function for online bin packing, incorporating dynamic adjustments
    based on bin history and item size relative to bin capacity.  It adaptively prioritizes
    bins based on remaining capacity, waste minimization, fragmentation avoidance, and
    bin utilization history.  The weights are tuned to balance these competing objectives.

    Args:
        item (float): The size of the item to be packed.
        bins_remain_cap (np.ndarray): A NumPy array containing the remaining capacity of each bin.
        bin_history (np.ndarray, optional): A 2D NumPy array containing historical data about bins utilization. Defaults to None.

    Returns:
        np.ndarray: A NumPy array containing the priority score for each bin.
    """

    num_bins = len(bins_remain_cap)
    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Capacity-Based Prioritization (Adaptive to Item Size)
    capacity_ratio = item / bins_remain_cap
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 1.5 * (1 - capacity_ratio[sufficient_capacity])  # Higher priority for bins only slightly larger than the item

    # 2. Waste Minimization (Optimized Waste Range)
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]

    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 1.3  # Boost for bins minimizing immediate waste

        # Scale waste priority based on relative waste amount
        waste_normalized = positive_waste / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(positive_waste)
        waste_priority = 1.0 - waste_normalized #Invert values, smaller waste = higher value
        waste_bins_idx = np.where(waste >=0)[0]
        priority[waste_bins_idx] += waste_priority

    # 3. Fragmentation Avoidance (Targeting Near-Full Bins, Tuned Threshold)
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= 1.05 * item) & (bins_remain_cap >= item) # Reduced threshold
    priority[nearly_full] += 2.2  # Prioritize filling bins close to full

    # 4. Empty Bin Consideration (Delayed Gratification)
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    priority[is_empty] += 0.6  # Slightly less aggressive, to avoid premature commitment

    # 5. Bin History Integration (If available) - Encouraging Balanced Usage
    if bin_history is not None:
        # Assuming bin_history contains load counts per bin. This part is dummy.
        # Replace with real logic if you can generate or access that data
        bin_utilization = np.sum(bin_history, axis=1) if bin_history.ndim > 1 else bin_history #Dummy usage, replace with actual counts
        normalized_utilization = (bin_utilization - np.min(bin_utilization)) / (np.max(bin_utilization) - np.min(bin_utilization) + 1e-9)  # Normalize to [0, 1]

        # Bias towards less utilized bins
        priority += (1.0 - normalized_utilization) * 0.4 #Scale factor

    return priority
```
