{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines capacity, waste, fragmentation, and bin utilization with tunable weights.\"\"\"\n\n    priority = np.zeros_like(bins_remain_cap, dtype=float)\n    num_bins = len(bins_remain_cap)\n\n    # Tunable weights\n    sufficient_cap_weight = 1.9\n    min_waste_weight = 1.3\n    small_waste_weight = 0.6\n    nearly_full_weight = 2.6\n    relative_cap_weight = 1.0\n    empty_bin_weight = 0.9\n    cannot_fit_penalty = 0.5\n    bin_utilization_weight = 0.4\n\n    # 1. Sufficient Capacity Boost\n    sufficient_capacity = bins_remain_cap >= item\n    priority[sufficient_capacity] += sufficient_cap_weight\n\n    # 2. Minimize Waste\n    waste = bins_remain_cap - item\n    positive_waste = waste[waste >= 0]\n    if len(positive_waste) > 0:\n        min_waste = np.min(positive_waste)\n        min_waste_bins_idx = np.where(waste == min_waste)[0]\n        priority[min_waste_bins_idx] += min_waste_weight\n\n        adaptive_waste_threshold = 0.2 * item\n        small_waste_bins = (waste >= 0) & (waste <= adaptive_waste_threshold)\n        priority[small_waste_bins] += small_waste_weight\n\n    # 3. Nearly Full Bin Boost\n    nearly_full_threshold = 1.1\n    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= nearly_full_threshold * item) & (bins_remain_cap >= item)\n    priority[nearly_full] += nearly_full_weight\n\n    # 4. Small Capacity Based on Relative Availability\n    sufficient_bins = bins_remain_cap >= item\n    if np.any(sufficient_bins):\n        max_remaining_cap = np.max(bins_remain_cap[sufficient_bins])\n        priority[sufficient_bins] += (bins_remain_cap[sufficient_bins] - item) / max_remaining_cap * relative_cap_weight\n\n    # 5. Empty Bin Consideration\n    is_empty = bins_remain_cap == np.max(bins_remain_cap)\n    priority[is_empty] += empty_bin_weight\n\n    # 6. Penalize bins close to full but can't fit the item\n    cannot_fit = (bins_remain_cap < item) & (bins_remain_cap > 0)\n    priority[cannot_fit] -= cannot_fit_penalty\n\n    # 7. Reward higher bin utilization globally\n    total_capacity = np.sum(bins_remain_cap)\n    bin_utilization_score = (num_bins - (total_capacity/np.max(bins_remain_cap)))/num_bins\n    priority += bin_utilization_weight * bin_utilization_score\n\n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines capacity ratios with waste minimization for bin prioritization.\"\"\"\n    priority = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: Sufficient Capacity\n    sufficient_capacity = bins_remain_cap >= item\n    priority[sufficient_capacity] += 1\n\n    # Heuristic 2: Minimize Waste (Only for bins with sufficient capacity)\n    waste = bins_remain_cap - item\n    min_waste = np.min(waste[sufficient_capacity]) if np.any(sufficient_capacity) else np.inf\n    min_waste_bins_idx = np.where((waste == min_waste) & sufficient_capacity)[0]\n    priority[min_waste_bins_idx] += 2\n\n    # Heuristic 3: Capacity Ratio (Only for bins with sufficient capacity)\n    ratios = item / bins_remain_cap\n    ratios[~sufficient_capacity] = 0  # Ignore bins without sufficient capacity\n    priority += ratios\n\n    return priority\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic uses a combination of capacity, waste, fragmentation, empty bin considerations, and dynamic adjustments, while the worst only considers the ratio of item size to remaining capacity. (2nd best) vs (second worst) shows that the second best considers all those factors as well and allows for tunable weights. However, it is missing the dynamic adjustments. The second worst also uses capacity, waste, fragmentation, and empty bin considerations. Comparing (1st) vs (2nd), we see that the best has adaptive waste thresholding and a dynamic penalty. Comparing (3rd) vs (4th), we see that the 3rd does not have any hyperparameter tuning, whereas the 4th does. Comparing (second worst) vs (worst), we see that the second worst takes into account more factors. Overall: The best heuristics consider multiple factors, dynamically adjust their calculations based on the context, and allow for tunable weights.\n- \nOkay, let's refine \"Current self-reflection\" to design better heuristics, specifically avoiding the pitfalls of \"Ineffective self-reflection.\"\n\n*   **Keywords:** Adaptive, Contextual, Granularity, Optimization, Trade-offs, Validation.\n*   **Advice:** Focus on adaptive strategies that dynamically adjust to problem instance characteristics at a finer granularity. Directly optimize weights and consider trade-offs between multiple competing objectives rather than simply assigning importance.\n*   **Avoid:** Generic statements about multiple factors and weights.\n*   **Explanation:** Move beyond simply *considering* factors to actively *adapting* to them. Emphasize rigorous optimization of parameters and acknowledge the inherent trade-offs present in heuristic design. Validate against a diverse benchmark set.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}