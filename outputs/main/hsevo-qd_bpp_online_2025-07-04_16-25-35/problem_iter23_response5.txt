```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity, waste, and a capacity ratio heuristic with adaptive weighting."""
    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Sufficient Capacity Boost
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 1.5

    # Minimize Waste (only for bins with sufficient capacity)
    waste = bins_remain_cap - item
    if np.any(sufficient_capacity):
        min_waste = np.min(waste[sufficient_capacity])
        min_waste_bins_idx = np.where((waste == min_waste) & sufficient_capacity)[0]
        priority[min_waste_bins_idx] += 2.0

    # Capacity Ratio (scaled, only for bins with sufficient capacity)
    ratios = item / bins_remain_cap
    ratios[~sufficient_capacity] = 0
    priority += ratios * 0.5

    # Adaptive Waste Minimization based on item size
    item_size_factor = min(1.0, item)
    waste_penalty = waste > 0.5
    priority[waste_penalty] -= 0.1 * item_size_factor

    # Add a small amount of randomness
    priority += np.random.rand(len(bins_remain_cap)) * 0.01

    return priority
```
