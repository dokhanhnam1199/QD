```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Feasibility - Essential
    feasible = bins_remain_cap >= item
    priority[feasible] += 1.0  # Ensure only feasible bins are considered

    # Heuristic 2: Minimize Waste - Refined
    waste = bins_remain_cap - item
    waste[~feasible] = np.inf  # Penalize infeasible bins severely
    min_waste = np.min(waste)
    min_waste_bins = np.isclose(waste, min_waste)
    priority[min_waste_bins] += 3.0

    # Heuristic 3: Prevent Fragmentation - Adjusted Range and Importance
    nearly_full = (bins_remain_cap > 0) & (bins_remain_cap <= 1.5 * item) & (bins_remain_cap >= item)
    priority[nearly_full] += 2.0

    # Heuristic 4: Bin Utilization - Encourage filling bins
    utilization = (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap)
    priority[feasible] += utilization[feasible]  # Scale utilization for feasible bins
    
    # Heuristic 5: Empty Bin Preference - Conditional and Scaled
    is_empty = bins_remain_cap == np.max(bins_remain_cap)
    priority[is_empty] += 0.75 * (item / np.max(bins_remain_cap))  # Scale the empty bin bonus based on item size

    # Heuristic 6: Moderate Capacity Preference - Avoid extreme near-empty bins
    moderate_capacity = (bins_remain_cap > item) & (bins_remain_cap < 0.75 * np.max(bins_remain_cap))
    priority[moderate_capacity] += 0.5

    # Heuristic 7: Prioritize bins that are almost filled after adding the item
    almost_full_after = feasible & (waste >= 0) & (waste <= 0.1 * np.max(bins_remain_cap))
    priority[almost_full_after] += 4.0
    
    return priority
```
