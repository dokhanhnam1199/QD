```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio-based and capacity-waste considerations for bin selection."""

    priority = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    # 1. Ratio-based priority (modified log ratio)
    ratios = item / (bins_remain_cap + 1e-9)  # Add small value to avoid division by zero
    priority += -np.log(ratios + 1) #Adding 1 to avoid negative log value

    # 2. Sufficient Capacity Boost
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 1.5 # Reduced weight

    # 3. Minimize Waste Boost
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf
    min_waste = np.min(waste)
    min_waste_bins_idx = np.where(waste == min_waste)[0]
    priority[min_waste_bins_idx] += 1.0  # Reduced weight

    # 4. Encourage higher bin utilization globally

    total_capacity = np.sum(bins_remain_cap)
    bin_utilization_score = (num_bins - (total_capacity/np.max(bins_remain_cap)))/num_bins #Scale between 0 and 1
    priority += 0.1 * bin_utilization_score #Reduced weight
    
    return priority
```
