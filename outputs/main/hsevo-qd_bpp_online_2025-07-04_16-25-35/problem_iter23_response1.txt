```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines adaptive weights, waste minimization, and nearly-full bin preference.
    Adds item-size-based adjustments and bin utilization consideration.
    """
    priority = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # Adaptive weight based on item size
    item_size_factor = min(1.0, item)

    # Sufficient capacity boost
    sufficient_capacity = bins_remain_cap >= item
    priority[sufficient_capacity] += 2.0 * (1 + 0.2 * item_size_factor)

    # Minimize waste
    waste = bins_remain_cap - item
    positive_waste = waste[waste >= 0]
    if len(positive_waste) > 0:
        min_waste = np.min(positive_waste)
        min_waste_bins_idx = np.where(waste == min_waste)[0]
        priority[min_waste_bins_idx] += 1.5 * (1 - 0.3 * item_size_factor)

        # Penalty for larger waste
        large_waste = waste > 0.5
        priority[large_waste] -= 0.1 * item_size_factor

    # Nearly full bin boost
    nearly_full = (bins_remain_cap > 0.0) & (bins_remain_cap <= 1.1 * item) & (bins_remain_cap >= item)
    priority[nearly_full] += 2.8

    # Small capacity based on relative availability
    small_cap = (bins_remain_cap >= item)
    if np.any(small_cap):
        max_cap = np.max(bins_remain_cap[small_cap])
        priority[small_cap] += ((bins_remain_cap[small_cap] - item) / max_cap) * 0.8

    # Emptiness boost
    is_empty = bins_remain_cap == bin_capacity
    priority[is_empty] += 0.5 * (1 + 0.1 * item_size_factor)

    # Bin utilization
    bin_utilization = (bin_capacity - bins_remain_cap) / bin_capacity
    priority += 0.7 * bin_utilization * (1 - 0.2*item_size_factor)

    # Diversity encouragement
    priority += np.random.rand(len(bins_remain_cap)) * 0.01

    return priority
```
