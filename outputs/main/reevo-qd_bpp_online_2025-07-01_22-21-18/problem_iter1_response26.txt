```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Bins that can't fit the item get a very low priority.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Rule 2: Bins with just enough space are preferred (minimize wasted space).
    # Closer the item size is to the bin's remaining capacity, the better.
    # Using an exponential decay to heavily penalize bins with a lot of remaining space after insertion
    feasible_mask = bins_remain_cap >= item
    remaining_space = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = np.exp(-remaining_space)  # Smaller remaining_space -> higher priority.

    # Rule 3: Break ties. Add a small amount to bins with more free space, so that amongst bins that fit well, bigger is preferred. This might avoid creating many nearly-full bins. But the amount is smaller than Rule 2 contributions to maintain relative importance.
    priorities[feasible_mask] += 0.01 * bins_remain_cap[feasible_mask] #Small preference to using bins which are overall more available.

    return priorities
```
