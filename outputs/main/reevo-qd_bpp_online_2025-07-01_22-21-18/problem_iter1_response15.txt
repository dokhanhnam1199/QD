```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Basic priority based on remaining capacity - closer to item size is better.
            priorities[i] = cap - item

            # Give a higher priority to bins that are almost full, but can still fit the item
            if cap - item < 0.1: # if remaining space after placement is less than 0.1, greatly prioritize this bin
                priorities[i] += 10 # Arbitrary boost

            # Prioritize bins with larger remaining capacities to avoid fragmentation if item is small
            if item < 0.2: # if item is small, then prefer putting into larger capacity bins.
                priorities[i] += cap * 0.5 # Multiply current capacity by .5

            # slight preference for fuller bins
            priorities[i] += (1 - cap) * .05
        else:
            priorities[i] = -1e9  # Very low priority if item doesn't fit

    return priorities
```
