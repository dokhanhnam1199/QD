```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give high priority to bins that can fit the item snugly
    fit_threshold = 0.95 # Adjust as needed. Closer to 1 gives tighter fits highest priority
    snug_fit = (bins_remain_cap >= item) & (bins_remain_cap <= item / fit_threshold)
    priorities[snug_fit] += 10 # Give high priority

    # Give medium priority to bins that can fit the item, but not so snugly
    can_fit = bins_remain_cap >= item
    priorities[can_fit & ~snug_fit] += 5

    # Penalize bins with very little space remaining, regardless if they can fit
    small_cap = bins_remain_cap < 0.1  #Adjust the 0.1 as needed. Bins with extremely little space are penalized.
    priorities[small_cap] -= 2

    # Penalize bins that would have large wasted space
    waste = bins_remain_cap - item
    large_waste = (waste > 0.5) & can_fit # Adjust the 0.5 threshold
    priorities[large_waste] -= waste[large_waste] # Subtracted the waste directly (other choices possible)
    
    #Consider relative waste (waste relative to original capacity)
    original_capacity = 1 # Assuming unit size bins, but code could be modified to account for bins of differing sizes
    relative_waste = waste / original_capacity #Assuming all bins have original size 1
    excessive_relative_waste = (relative_waste > 0.3) & can_fit # another approach of penalizing wasted space
    priorities[excessive_relative_waste] -= relative_waste[excessive_relative_waste]
    
    
    # Normalize priorities for stability. Prevents excessively large weights
    if np.max(priorities) > 0: # Only if there exist values greater than 0
        priorities = priorities / np.max(priorities)

    return priorities
```
