```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Give higher priority to bins where the item fits
            remaining = cap - item
            priorities[i] = (1 / (remaining + 0.00001))  # Avoid division by zero and prioritize smaller remaining space
            # Prioritize bins with capacity closest to item size (First-Fit-Decreasing heuristic idea)
            priorities[i] += np.exp(-np.abs(item - cap))
            # Prioritize bins with higher remaining capacity, but only if it fits
            priorities[i] += cap
        else:
            # Very low priority if item doesn't fit
            priorities[i] = -1000 # Assign a large negative value

    return priorities
```
