[
  {
    "stdout_filepath": "problem_iter0_stdout0.txt",
    "code_path": "problem_iter0_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities",
    "response_id": 0,
    "obj": 149.30195452732352,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 11.60964047443681,
    "mi": 94.04446327225541,
    "token_count": 47.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response0.txt_stdout.txt",
    "code_path": "problem_iter1_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # First-Fit Decreasing-like behavior: Prioritize bins that can fit the item snugly\n    fit_mask = bins_remain_cap >= item\n    \n    if np.any(fit_mask):\n        slack = bins_remain_cap[fit_mask] - item\n        priorities[fit_mask] = 1 / (slack + 1e-6)  # Prioritize smaller slack\n    \n        # Give a boost to bins with a specific remaining capacity to try and achieve near-full bins\n        near_full_capacity = 0.95 #percentage, e.g. target 95% full\n        near_full_boost = 10.0  # Higher boost for almost full bins\n        near_full_mask = (bins_remain_cap >= item) & (bins_remain_cap - item <= (1 - near_full_capacity) * 1.0) #ensure will not overfill\n        priorities[near_full_mask] += near_full_boost\n\n\n    # Penalize bins that can't fit the item heavily, but not to the point of absolute zero.\n    # Allow overflow if no other options are available, but strongly discourage it.\n    overflow_mask = bins_remain_cap < item\n    priorities[overflow_mask] = - (item - bins_remain_cap[overflow_mask]) / (np.max(bins_remain_cap) + 1e-6) #penalize the amount of overfill relative to biggest bin\n    \n    \n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 14.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 140.55415752892034,
    "mi": 81.29721837754246,
    "token_count": 149.0,
    "exec_success": true
  }
]