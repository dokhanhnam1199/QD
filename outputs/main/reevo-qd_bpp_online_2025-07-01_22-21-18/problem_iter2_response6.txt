```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize bins that can fit the item snugly (First-Fit Decreasing-like)
    fit_mask = bins_remain_cap >= item

    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1 / (slack + 1e-6)  # Prioritize smaller slack

        # Give a boost to bins approaching a target fullness
        near_full_capacity = 0.95  # Target percentage full
        near_full_boost = 10.0  # Boost magnitude for almost full bins
        near_full_threshold = (1 - near_full_capacity) * 1.0  # Acceptable overfill amount to still provide boost
        near_full_mask = (bins_remain_cap >= item) & (bins_remain_cap - item <= near_full_threshold)
        priorities[near_full_mask] += near_full_boost
    else:
        # If no bin fits, find the bin with the most remaining capacity
        # and penalize the bins based on the overflow amount
        overflow_mask = bins_remain_cap < item
        overflow_amount = item - bins_remain_cap[overflow_mask]
        max_cap = np.max(bins_remain_cap)
        priorities[overflow_mask] = -overflow_amount / (max_cap + 1e-6) # Normalized overflow penalty
        # Add a small penalty to non-fitting bin based on remaining capacity
    return priorities
```
