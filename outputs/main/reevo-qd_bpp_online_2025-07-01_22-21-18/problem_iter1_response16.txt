```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: If the item fits perfectly, assign maximum priority
    perfect_fit = (bins_remain_cap == item)
    priorities[perfect_fit] = np.inf

    # Rule 2: Give high priority to bins where the item fits, but not too much space is wasted.
    fits = (bins_remain_cap >= item)
    waste = bins_remain_cap - item
    priorities[fits] = 1.0 / (waste[fits] + 0.00001) # Avoid division by zero

    # Rule 3: Slightly prefer bins that are fuller (less remaining capacity). This helps consolidate items.
    priorities += (1.0 - bins_remain_cap / np.max(bins_remain_cap + 0.00001))  # Scale and add

    # Rule 4: Penalize bins that are too full relative to the item size.  We want to encourage tight fits.
    ratios = item / bins_remain_cap
    too_full = (ratios > 0.8) & (bins_remain_cap >= item)
    priorities[too_full] *= 1.2  # Slightly boost if it's close

    return priorities
```
