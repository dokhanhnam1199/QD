```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit Decreasing-like behavior: Prioritize bins that can fit the item snugly
    fit_mask = bins_remain_cap >= item
    
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1 / (slack + 1e-6)  # Prioritize smaller slack
    
        # Give a boost to bins with a specific remaining capacity to try and achieve near-full bins
        near_full_capacity = 0.95 #percentage, e.g. target 95% full
        near_full_boost = 10.0  # Higher boost for almost full bins
        near_full_mask = (bins_remain_cap >= item) & (bins_remain_cap - item <= (1 - near_full_capacity) * 1.0) #ensure will not overfill
        priorities[near_full_mask] += near_full_boost


    # Penalize bins that can't fit the item heavily, but not to the point of absolute zero.
    # Allow overflow if no other options are available, but strongly discourage it.
    overflow_mask = bins_remain_cap < item
    priorities[overflow_mask] = - (item - bins_remain_cap[overflow_mask]) / (np.max(bins_remain_cap) + 1e-6) #penalize the amount of overfill relative to biggest bin

    #Adaptive near full boost. If no bin fits, increase the near full boost.
    if not np.any(fit_mask):
        near_full_capacity = 0.95  # percentage, e.g. target 95% full
        near_full_boost = 20.0  # Higher boost for almost full bins
        near_full_mask = (bins_remain_cap - item <= (1 - near_full_capacity) * 1.0)  # ensure will not overfill

        overflow_fit_mask = bins_remain_cap < item
        if np.any(overflow_fit_mask):
             priorities[overflow_fit_mask] += near_full_boost #still give a boost to bins overflowing with small amount

    
    return priorities
```
