```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit-Decreasing inspired heuristic: Favor bins that can accommodate the item with minimal waste
    waste = bins_remain_cap - item
    
    # Assign a high priority if the item fits
    fit_mask = waste >= 0
    priorities[fit_mask] = 1 / (waste[fit_mask] + 0.0001) # Avoid division by zero; smaller waste = higher priority

    # If no bin fits, assign a negative priority, penalized by how much over the capacity the item is.
    no_fit_mask = ~fit_mask
    priorities[no_fit_mask] = -np.abs(waste[no_fit_mask]) # Prioritize bins with smallest overflow
    
    # Bonus if remaining capacity is near half to full
    near_full_mask = (bins_remain_cap >= item) & (bins_remain_cap <= 2 * item)
    priorities[near_full_mask] += 0.5  # small bonus
    
    return priorities
```
