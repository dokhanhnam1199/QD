```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First, consider bins where the item fits. Give these bins a base priority.
    fit_indices = np.where(bins_remain_cap >= item)[0]
    priorities[fit_indices] = 1.0

    # For bins where the item fits, prioritize bins with smaller remaining capacity *after* packing.
    # This helps to fill bins more completely before opening new ones (First-Fit-Decreasing principle).
    remaining_after_pack = bins_remain_cap[fit_indices] - item
    priorities[fit_indices] += 1.0 / (remaining_after_pack + 0.0001)  # Adding a small value to avoid division by zero

    # Add bonus for bins which fit the item relatively tightly, promoting bins which create less waster.
    # This is computed by taking the ratio of item size to bin remaining capacity
    ratios = item / bins_remain_cap[fit_indices]
    priorities[fit_indices] += ratios

    # Apply a strong negative priority to bins that don't fit the item to effectively exclude them
    infit_indices = np.where(bins_remain_cap < item)[0]
    priorities[infit_indices] = -1000.0 # very low priority for bins with insufficient capacity

    return priorities
```
