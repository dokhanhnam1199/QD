```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0 # Assume bin capacity is 1.

    # Prioritize tight fits
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1 / (slack + 1e-6)

        # Reward near-full bins strongly. Target bins that will be nearly full after packing.
        near_full_threshold = 0.95 * bin_capacity # Target occupancy
        near_full_mask = fit_mask & (bins_remain_cap - item >= near_full_threshold - bin_capacity)
        if np.any(near_full_mask):
            priorities[near_full_mask] += 10  # substract by the current remaining capacity
    
    #Allow overflow only if no other option. Heavily penalize overflow.
    overflow_mask = bins_remain_cap < item
    if np.any(overflow_mask) and not np.any(fit_mask):
            overflow_amount = item - bins_remain_cap[overflow_mask]
            priorities[overflow_mask] = -100 * overflow_amount / bin_capacity # Big penalty

    return priorities
```
