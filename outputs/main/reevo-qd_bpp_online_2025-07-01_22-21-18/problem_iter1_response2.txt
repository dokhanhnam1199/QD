```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Rule out bins that are too small.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Very low priority (don't choose)

    # 2. Best Fit: Prioritize bins with the smallest remaining capacity AFTER adding the item.
    feasible_bins = ~infeasible_bins
    remaining_after_fit = bins_remain_cap[feasible_bins] - item
    priorities[feasible_bins] = -np.abs(remaining_after_fit)  # Minimize wasted space

    # 3. Avoidance of nearly full bins. Penalize bins where, after adding, the remaining capacity is a small fraction of the bin capacity. This helps leave options open for future items.
    almost_full = (bins_remain_cap[feasible_bins] > item) & (remaining_after_fit / bins_remain_cap[feasible_bins] < 0.1)  # Adjust 0.1 as needed.
    priorities[feasible_bins][almost_full] -= 1  # Small penalty. Fine tune to avoid excessive penalty

    # 4. Bonus for filling bins somewhat nicely (avoiding large empty spaces). Give a small bonus for bins that have used a decent portion of their capacity already.
    already_filled = bins_remain_cap[feasible_bins] < 0.8  # Adjust 0.8 if needed
    priorities[feasible_bins][already_filled] += 0.2  # Adjust 0.2 if needed
    
    return priorities
```
