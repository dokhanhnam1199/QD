```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0 # Assuming bins have capacity 1

    # Prioritize bins that can fit the item snugly
    fit_mask = bins_remain_cap >= item
    
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1.0 / (slack + 1e-6)  # Prioritize smaller slack
    
        # Give a large boost to bins that, after placing the item, will be near-full
        near_full_capacity = 0.95  # Target fill percentage
        near_full_boost = 100.0
        near_full_slack = bin_capacity * (1 - near_full_capacity)
        near_full_mask = (fit_mask) & (slack <= near_full_slack)
        priorities[near_full_mask] += near_full_boost

    # Heavily penalize overflow, but allow it.
    overflow_mask = bins_remain_cap < item
    if np.any(overflow_mask):
      overflow_amount = item - bins_remain_cap[overflow_mask]
      priorities[overflow_mask] = -10 * overflow_amount / bin_capacity #penalize as a fraction of bin capacity
      

    return priorities
```
