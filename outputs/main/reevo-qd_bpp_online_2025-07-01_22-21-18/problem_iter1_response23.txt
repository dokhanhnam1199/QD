```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility check: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities # No bin can fit, return all zeros

    # 1. Remaining capacity after placing the item (Higher is better, closer to item_size is better). This is a variant of Best Fit, where close but not exact match is still a reward.
    remaining_capacity_after_placement = bins_remain_cap - item
    
    # Give highest priority to bins which exactly fit the item.
    exact_fit = remaining_capacity_after_placement == 0
    priorities[exact_fit] = np.inf  # Use infinity for best fit

    # Penalize bins that leave too little or too much space, and cannot exactly fit
    remaining_capacity_after_placement[exact_fit] = np.inf # ignore exact fits.
    
    # Implement a range. If remaining capacity within a range, prioritize bins within range.
    cap_threshold = 0.2 # parameter that can be tuned (e.g., 20% of bin size)
    
    # Reward bins with remaining capacities of 0< capacity < capacity_threshold after placing the item
    priorities[(remaining_capacity_after_placement > 0) & (remaining_capacity_after_placement <= cap_threshold) & feasible_bins] = 2
    
    # Bins with capacity > cap_threshold will be assigned low priority:
    priorities[(remaining_capacity_after_placement > cap_threshold) & feasible_bins] = 1 # assign the rest feasible bins to a baseline score

    return priorities
```
