```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            waste = cap - item
            priorities[i] = (item / cap) + (1 / (waste + 1e-6)) # Favor bins where item fills a good proportion and minimizes waste

            # Bonus if perfect fit, avoid empty bin being first choice
            if waste == 0:
              priorities[i] += 1
            if cap==1:
              priorities[i]-=0.001 # to prevent filling empty bins

        else:
            priorities[i] = -1e9  # Very low priority if it doesn't fit

    return priorities
```
