```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Eliminate bins that can't fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Extremely low priority

    # 2. Best Fit Logic (higher priority for bins that fit the item more tightly)
    feasible_bins = ~infeasible_bins
    remaining_space_after_fit = bins_remain_cap[feasible_bins] - item

    # Prioritize bins with smaller remaining space after placing the item
    # This encourages filling bins as much as possible. Adding a small constant
    # avoids division by zero or extremely large values
    priorities[feasible_bins] = 1.0 / (remaining_space_after_fit + 0.0001)

    # 3. Tie-breaking and exploration (add a small random component).  Crucial for online
    # problems to avoid always selecting the *very* first bin.
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.001


    return priorities
```
