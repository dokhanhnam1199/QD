```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after adding the item.
    remaining_after_add = bins_remain_cap - item
    
    # Give a high priority to bins that can accommodate the item.
    can_accommodate = remaining_after_add >= 0
    priorities[can_accommodate] += 1.0
    
    # Prioritize bins with smaller remaining capacity after adding the item.
    priorities[can_accommodate] += 1.0 / (remaining_after_add[can_accommodate] + 0.00001) # avoid division by zero
    
    # Penalize bins that cannot accommodate the item.
    cannot_accommodate = remaining_after_add < 0
    priorities[cannot_accommodate] -= 0.5  #slightly penalize

    return priorities
```
