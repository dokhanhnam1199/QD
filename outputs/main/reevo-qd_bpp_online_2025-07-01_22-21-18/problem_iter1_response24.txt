```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Base priority on how full the bin will be after adding the item.
            fill_ratio = (item) / cap
            priorities[i] = 1 - fill_ratio  # Prefer bins that will be fuller

            # Add a bonus for bins that are already relatively full.
            # This encourages filling bins that have already been started.
            initial_fill_ratio = 1 - (cap / 1) # Assuming bin capacity = 1
            priorities[i] += initial_fill_ratio*0.5 #Adding a scaled version of intitial fill ratio

            # Add a slight penalty for nearly perfectly fitting bins to avoid creating extremely fragmented bins
            if (cap - item) < 0.05:  #tune to be between [0, item]
              priorities[i] -= 0.2


        else:
            priorities[i] = -np.inf  # Bin cannot fit the item

    return priorities
```
