```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing heuristic adaptation
    # Give very high priority to bins where the item fits perfectly.
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = 1000.0  # Huge priority for perfect fit

    # If no perfect fit, prioritize bins that can accommodate the item.
    can_accommodate = bins_remain_cap >= item
    if np.any(can_accommodate):
        # Prioritize bins with less remaining capacity *after* adding the item, but avoid near-full bins (avoid fragmentation).
        remaining_after_fit = bins_remain_cap[can_accommodate] - item
        
        # Normalize remaining capacity between 0 and 1 (approximately). Use clipping for safety
        normalized_remaining = np.clip(remaining_after_fit / np.max(bins_remain_cap), 0, 1)
        
        # Assign priorities, where lower remaining is better, but also penalizing extremely low values close to 0 to prevent fragmentation.
        priorities[can_accommodate] = (1.0 - normalized_remaining)  # Main prioritization
        priorities[can_accommodate] += np.where(normalized_remaining < 0.1, -0.1 * (0.1 - normalized_remaining) / 0.1, 0) # Penalize near-full bins.  Smaller values should make it better

    else:
        # Item doesn't fit in any bin - all priorities remain 0
        pass  # Leave as zero - doesn't fit
        

    return priorities
```
