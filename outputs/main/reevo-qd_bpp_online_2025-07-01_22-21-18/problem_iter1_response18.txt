```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining capacity after adding the item.
    remaining_after_add = bins_remain_cap - item

    # Give high priority to bins where the item fits and the remaining capacity is small.
    fit_mask = remaining_after_add >= 0
    priorities[fit_mask] = 1 / (remaining_after_add[fit_mask] + 0.00001) #avoid division by zero

    # Give a small negative priority to bins where the item doesn't fit.
    priorities[~fit_mask] = -1000 # very low priority if doesn't fit, could also be -np.inf

    # Boost priority if bin is nearly empty, reflecting "First Fit Decreasing" heuristic, making use of mostly empty bins
    near_empty_threshold = np.max(bins_remain_cap) # adaptive to range of bins

    near_empty_mask = bins_remain_cap > 0.9 * near_empty_threshold # tuned to bins, rather than absolute value

    priorities[near_empty_mask] += 10 # give these a bump

    # Boost the priority if the item fits exactly.
    exact_fit_mask = remaining_after_add == 0
    priorities[exact_fit_mask] += 100

    return priorities
```
