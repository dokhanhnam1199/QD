{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # First-Fit Decreasing-like behavior: Prioritize bins that can fit the item snugly\n    fit_mask = bins_remain_cap >= item\n    \n    if np.any(fit_mask):\n        slack = bins_remain_cap[fit_mask] - item\n        priorities[fit_mask] = 1 / (slack + 1e-6)  # Prioritize smaller slack\n    \n        # Give a boost to bins with a specific remaining capacity to try and achieve near-full bins\n        near_full_capacity = 0.95 #percentage, e.g. target 95% full\n        near_full_boost = 10.0  # Higher boost for almost full bins\n        near_full_mask = (bins_remain_cap >= item) & (bins_remain_cap - item <= (1 - near_full_capacity) * 1.0) #ensure will not overfill\n        priorities[near_full_mask] += near_full_boost\n\n\n    # Penalize bins that can't fit the item heavily, but not to the point of absolute zero.\n    # Allow overflow if no other options are available, but strongly discourage it.\n    overflow_mask = bins_remain_cap < item\n    priorities[overflow_mask] = - (item - bins_remain_cap[overflow_mask]) / (np.max(bins_remain_cap) + 1e-6) #penalize the amount of overfill relative to biggest bin\n    \n    \n    return priorities\n\n[Reflection]\nPrioritize snug fits, reward near-full bins, and penalize overflow, all relative to bin capacity.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}