```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Can the item fit in the bin?
    feasible_bins = bins_remain_cap >= item
    
    # 2. Remaining capacity after adding the item: Lower is better (First-Fit Decreasing principle)
    remaining_capacities_after_add = bins_remain_cap - item
    remaining_capacities_after_add[remaining_capacities_after_add < 0] = np.inf # Mark infeasible bins with infinity
    
    # 3. Use a combination of the remaining capacity and feasibility.

    priorities = -remaining_capacities_after_add  # Bins with more free space get lower priority (more negative), effectively preferring tighter fits.

    # Very Important : Set Infeasible Bins to a very low priority
    priorities[~feasible_bins] = -np.inf # Ensure that infeasible bins always get the lowest priority
        
    return priorities
```
