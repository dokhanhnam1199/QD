```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Primary criterion: Can the item fit?
            priorities[i] = 1  # Assign a base priority

            # Secondary criteria:
            # 1. Favor bins with smaller remaining capacity *after* placing the item. This encourages filling bins completely.
            remaining_after_placement = cap - item
            priorities[i] += 1.0 / (remaining_after_placement + 0.0001) # Avoid division by zero and penalize large remainders

            # 2. Favor bins where the item occupies a significant proportion of the available space, but not too much
            proportion_filled = item / cap
            priorities[i] += proportion_filled  # higher is better

            # 3. Add a bonus if it's close to a perfect fit. Aim for 80-95% full
            if 0.8 <= proportion_filled <= 0.95:
                priorities[i] += 2  # Big bonus for near-perfect fit.

        else:
            priorities[i] = -1000.0  # very low priority so that those are avoided

    return priorities
```
