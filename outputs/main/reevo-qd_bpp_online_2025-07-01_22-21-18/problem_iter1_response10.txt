```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: Give higher priority to bins that can fit the item.
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1.0

    # Rule 2: Among bins that can fit, prioritize bins with smaller remaining capacity *after* the item is placed
    remaining_after_placement = bins_remain_cap - item
    remaining_after_placement[remaining_after_placement < 0] = np.inf  # Ignore bins that can't fit
    priorities[can_fit] += (1.0 / (1e-6 + remaining_after_placement[can_fit])) # Avoid division by zero
    
    # Rule 3: Penalize bins where the item would fill it up too much (waste space), but only if it can fit
    waste = remaining_after_placement / bins_remain_cap # Only when the bin can fit the item
    priorities[can_fit] -= (10 * waste[can_fit] * waste[can_fit]) # Square it to penalize larger wastes more

    #Rule 4: if item size is bigger, we try to put it to the fullest bin to make a new bin as late as possible
    # Scale all priorties by remain capacity to penalize empty bins.
    priorities = priorities * (1 + bins_remain_cap / np.max(bins_remain_cap))
    return priorities
```
