```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: Bins that can fit the item get higher priority
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1.0

    # Rule 2: Prioritize bins with smaller remaining capacity after placing the item.  This aims for fuller bins.
    remaining_after_placement = bins_remain_cap - item
    remaining_after_placement[~can_fit] = np.inf # Ensure bins that can't fit are not considered

    priorities[can_fit] += 1.0 / (1e-6 + remaining_after_placement[can_fit]) # Add priority based on remaining space
    
    # Rule 3: Slightly favor bins close to the item's size to avoid fragmentation, but only if they fit
    close_to_item = np.abs(bins_remain_cap - item)
    priorities[can_fit] += np.exp(-close_to_item[can_fit] / item)
    
    # Rule 4: If no bins can fit the item, prioritize bins with larger remaining capacity.
    if not np.any(can_fit):
       priorities = bins_remain_cap / np.sum(bins_remain_cap) # Normalize for stability

    return priorities
```
