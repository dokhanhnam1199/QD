```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit-Decreasing inspired: Favor bins that can accommodate the item.
    # Otherwise, strongly penalize.

    can_fit = bins_remain_cap >= item
    
    # Prioritize bins where the item fits well (small waste)
    waste = bins_remain_cap - item
    
    # Give higher priority to bins with less remaining capacity after fitting item.  Want to completely fill some bins
    priorities[can_fit] = 1 / (waste[can_fit] + 1e-9) # Avoid division by zero.
    
    # Penalize bins that can't fit the item heavily
    priorities[~can_fit] = -1000  # Or some other large negative value.
    

    return priorities
```
