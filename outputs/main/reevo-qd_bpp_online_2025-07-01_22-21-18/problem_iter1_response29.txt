```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: Give -inf priority to bins that can't fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # 2.  "Almost full" bonus: Bins that would become nearly full get a boost
    almost_full_threshold = 0.1  # Bin nearly full if remaining capacity < 10% of bin size after item
    almost_full_bins = (bins_remain_cap - item) / np.max(bins_remain_cap) < almost_full_threshold
    priorities[almost_full_bins] += 5.0  # Add a constant bonus. Could be scaled

    # 3.  Remaining Capacity as Priority (First Fit Decreasing Variation)
    # Prioritize bins with more space so that it mimics first-fit-decreasing
    # Sort bins with higher capacity for larger items.
    priorities += bins_remain_cap

    # 4. Smallest gap
    # A small modification can also try to find the bin that minimizes waste

    gap = bins_remain_cap - item
    valid_gaps = gap > 0
    smallest_gap = np.inf * np.ones_like(gap) # initize with largest value
    smallest_gap[valid_gaps] = gap[valid_gaps]
    priorities -= smallest_gap
    return priorities
```
