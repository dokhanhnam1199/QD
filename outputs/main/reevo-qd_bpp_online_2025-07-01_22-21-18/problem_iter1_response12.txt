```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Feasibility check: Assign -inf priority to bins that can't fit the item.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Calculate wasted space if the item is placed in each bin.
    wasted_space = bins_remain_cap - item
    wasted_space[wasted_space < 0] = np.inf  # Handles cases where bins can't fit.

    # Prioritize bins with the least wasted space.  Smaller wasted space is better.
    priorities[~infeasible_mask] = -wasted_space[~infeasible_mask] # Higher negative value is higher priority

    #Add bonus for almost full bins
    almost_full_mask = (bins_remain_cap >= item) & (wasted_space / bins_remain_cap <= 0.1) # Waste is small percentage of bin size
    priorities[almost_full_mask] += 1 # Small positive boost

    #Add larger bonus for bins that exactly fit
    exact_fit_mask = (bins_remain_cap == item)
    priorities[exact_fit_mask] += 5 # Larger positive boost

    return priorities
```
