```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Prioritize bins that can fit the item snugly (First-Fit Decreasing-like)
    fit_mask = bins_remain_cap >= item
    
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1.0 / (slack + 1e-6)  # Smaller slack = higher priority
        
        # Reward near-full bins after placing the item
        near_full_capacity_target = 0.95  # Target fill percentage (e.g., 95%)
        near_full_boost = 10.0
        post_fill_levels = (bins_remain_cap[fit_mask] - item) / 1.0 #capacity=1, so divide by 1
        near_full_mask = (1 - post_fill_levels >= near_full_capacity_target) & (1- post_fill_levels <= 1.0) # ensure level after fill is > target

        if np.any(near_full_mask):
            priorities[fit_mask][near_full_mask] += near_full_boost


    # Penalize overflow proportionally (allow as a last resort)
    overflow_mask = bins_remain_cap < item
    if np.any(overflow_mask):
        overflow_amount = item - bins_remain_cap[overflow_mask]
        max_bin_capacity = np.max(bins_remain_cap) + 1e-6
        priorities[overflow_mask] = -overflow_amount / max_bin_capacity  # Proportional penalty

    return priorities
```
