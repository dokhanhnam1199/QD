```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate remaining capacity after adding the item
    remaining_after_add = bins_remain_cap - item

    # Give very low priority (large negative number) if item doesn't fit
    priorities[remaining_after_add < 0] = -1e9

    # Prioritize bins where the item fits and minimizes wasted space
    # Higher remaining space is penalized more severely after the first fit
    valid_bins = remaining_after_add >= 0
    if np.any(valid_bins):
        priorities[valid_bins] = -(remaining_after_add[valid_bins]**2) # Penalize the square of wasted space

        # Add a bonus for bins that have near-perfect fit
        near_perfect_fit = (bins_remain_cap >= item) & (bins_remain_cap < 1.1*item) #item <= capacity < 1.1 * item. Add bonus to nearly full bins. The larger constant of 1.1, the larger this window.
        priorities[near_perfect_fit] += 100

    #Prioritize almost-full bins. This promotes utilizing bins effectively.
    almost_full = (bins_remain_cap > item) & (bins_remain_cap/item <= 2.0) #capacity > item & capacity <=2*item. If the remaining cap is <= twice the size of the item, then add it.
    priorities[almost_full] += 50

    return priorities
```
