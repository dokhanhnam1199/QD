```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Assign very low priority if the item doesn't fit
    infeasible_mask = item > bins_remain_cap
    priorities[infeasible_mask] = -np.inf

    # Calculate remaining capacity after placing the item
    remaining_capacity = bins_remain_cap - item

    # Reward bins with just enough space (small remaining capacity) to encourage fullness
    # But penalize bins where the item would make it nearly full (to avoid tiny gaps).
    # A near-full penalty might cause more bins to be used but ultimately produce
    # a better overall fill ratio when many more items are processed
    priority_fullness = np.exp(-10 * remaining_capacity / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else np.zeros_like(remaining_capacity)

    # Incentivize fitting the item as tightly as possible relative to the item's size
    # Higher remaining_capacity_ratio will result in lower priority
    remaining_capacity_ratio = remaining_capacity / item
    priority_fit = -remaining_capacity_ratio

    # Bonus for bins that are relatively empty to provide balance
    bin_fill_ratio = (bins_remain_cap - remaining_capacity) / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(remaining_capacity)
    priority_emptiness = -bin_fill_ratio

    # Overall priority is a weighted sum of these factors
    priorities[~infeasible_mask] = (
        0.5 * priority_fullness[~infeasible_mask] +
        0.3 * priority_fit[~infeasible_mask] +
        0.2 * priority_emptiness[~infeasible_mask]
    )

    return priorities
```
