```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # High priority to bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1.0
    
    # Prioritize bins with smallest remaining capacity AFTER adding the item (First Fit Decreasing)
    remaining_after_fit = bins_remain_cap[can_fit] - item
    priorities[can_fit] += (1.0 - remaining_after_fit / np.max(bins_remain_cap)) if remaining_after_fit.size > 0 else 0.0
    
    # Give a small bonus to bins that are almost full before adding the item.
    priorities += bins_remain_cap / np.max(bins_remain_cap) * 0.1 

    # Penalize bins that have very little remaining capacity compared to the item size
    ratios = item / bins_remain_cap
    priorities -= np.where(ratios > 2.0, ratios - 2.0, 0.0)

    return priorities
```
