```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Prioritize bins that can fit the item snugly (First-Fit Decreasing-like)
    fit_mask = bins_remain_cap >= item
    
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1 / (slack + 1e-6)  # Prioritize smaller slack
    
        # Reward near-full bins
        near_full_capacity = 0.95  # Target fill percentage (e.g., 95%)
        near_full_boost = 10.0  # Higher boost for almost full bins
        near_full_mask = (bins_remain_cap >= item) & (bins_remain_cap - item <= (1 - near_full_capacity) * 1.0)
        priorities[near_full_mask] += near_full_boost

    # Penalize bins that can't fit the item heavily, relative to the item size
    overflow_mask = bins_remain_cap < item
    if np.any(overflow_mask):
        overflow_amount = item - bins_remain_cap[overflow_mask]
        priorities[overflow_mask] = -overflow_amount / (item + 1e-6)  # Penalize based on overflow relative to item size
    
    return priorities
```
