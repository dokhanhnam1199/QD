```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best Fit (BF) strategy.

    This heuristic adheres to the principle of "simple, direct waste minimization"
    using a linear priority function. It aims to minimize the unused space within
    a bin after the item is placed. Bins that can fit the item and leave the
    least remaining capacity will receive a higher priority.

    The priority score is calculated as the negative of the remaining space (wastage)
    if the item were placed in the bin. This linear transformation means:
    - A smaller positive wastage (e.g., 0.1) results in a priority closer to zero (-0.1).
    - A larger positive wastage (e.g., 0.5) results in a more negative priority (-0.5).
    Bins where the item does not fit are assigned the lowest possible priority (-inf)
    to ensure they are never selected.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to negative infinity. This serves as a baseline
    # for bins that cannot accommodate the item, ensuring they are not chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify which bins have sufficient remaining capacity for the item.
    can_fit_mask = bins_remain_cap >= item

    # For the bins where the item can fit, calculate the "wastage" â€“ the amount
    # of remaining capacity after placing the item. The Best Fit strategy aims
    # to minimize this wastage.
    wastage = bins_remain_cap[can_fit_mask] - item

    # Assign priority scores to the bins that can fit the item.
    # By taking the negative of the wastage, we ensure that:
    # - A perfect fit (0 wastage) yields the highest priority (0).
    # - Small wastages yield priorities closer to 0 (less negative).
    # - Larger wastages yield more negative priorities.
    # This directly implements the "Best Fit" goal with a simple, linear priority scale.
    priorities[can_fit_mask] = -wastage

    return priorities
```
