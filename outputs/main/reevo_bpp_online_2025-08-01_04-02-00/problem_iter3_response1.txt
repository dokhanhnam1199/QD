```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This design implements a "Best Fit" like strategy: it prioritizes bins
    that will result in the smallest amount of wasted space after the item is placed.
    This directly minimizes the empty space left in the bin, aligning with the
    principle of simple, direct waste minimization using a linear priority function.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority. Bins where the item does not
        fit are assigned a very low (negative infinity) priority.
    """
    # Calculate the potential 'waste' or 'leftover' space if the item were placed in each bin.
    # The goal is to minimize this positive waste.
    potential_waste_after_placement = bins_remain_cap - item

    # Initialize all priorities to negative infinity.
    # This ensures that bins where the item does not fit (i.e., waste would be negative)
    # are effectively excluded from consideration.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify bins where the item can actually fit (where potential waste is non-negative).
    can_fit_mask = potential_waste_after_placement >= 0

    # For bins where the item fits, assign a priority score.
    # To implement "Best Fit" and minimize waste, we make the priority inversely
    # proportional to the `potential_waste_after_placement`.
    # By taking the negative of the waste, a smaller positive waste (e.g., 0 for a perfect fit)
    # results in a higher (closer to zero or less negative) priority score.
    # This maintains a linear relationship and directly supports waste minimization.
    # Example:
    #   - If potential_waste_after_placement is 0 (perfect fit), priority is 0.
    #   - If potential_waste_after_placement is 5, priority is -5.
    # Maximizing this priority score naturally selects the bin with the smallest
    # non-negative amount of remaining space (waste).
    priorities[can_fit_mask] = -potential_waste_after_placement[can_fit_mask]

    return priorities
```
