{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin based on a Best-Fit-Decreasing inspired heuristic.\n\n    This heuristic prioritizes bins that, after placing the item, would have the smallest\n    remaining capacity. This strategy aims to 'fill up' bins as much as possible,\n    leaving minimal empty space, thereby reducing the need for new bins.\n    Bins where the item does not fit are assigned the lowest possible priority (-inf).\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity in each bin if the current item were placed there.\n    potential_rem_cap = bins_remain_cap - item\n\n    # Initialize priority scores. Bins that cannot fit the item are given\n    # a very low priority (negative infinity) to ensure they are never chosen.\n    priority_scores = np.full_like(bins_remain_cap, -np.inf)\n\n    # Create a boolean mask for bins where the item actually fits (i.e., potential_rem_cap >= 0).\n    can_fit_mask = potential_rem_cap >= 0\n\n    # For bins where the item fits, calculate the Best Fit priority.\n    # The Best Fit strategy aims to minimize the remaining space.\n    # To represent this as a priority score (where higher is better), we use the inverse\n    # of the remaining space. A smaller remaining space results in a larger inverse,\n    # thus a higher priority.\n    # We add a small epsilon to the denominator to prevent division by zero\n    # in cases where the item fits perfectly (potential_rem_cap is exactly 0).\n    epsilon = np.finfo(float).eps\n    priority_scores[can_fit_mask] = 1.0 / (potential_rem_cap[can_fit_mask] + epsilon)\n\n    return priority_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    This design implements a \"Best Fit\" like strategy: it prioritizes bins\n    that will have the smallest remaining capacity after the item is placed,\n    thus attempting to fill bins as tightly as possible.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Higher scores indicate higher priority. Bins where the item does not\n        fit are assigned a very low (negative infinity) priority.\n    \"\"\"\n    # Calculate the remaining capacity if the item were placed in each bin.\n    # A smaller 'remaining_after_placement' value indicates a tighter fit.\n    remaining_after_placement = bins_remain_cap - item\n\n    # Initialize all priorities to negative infinity.\n    # This ensures that bins where the item does not fit (or any bin for\n    # that matter, until we assign a valid score) are never chosen\n    # unless there's absolutely no other option (which implies no valid fit).\n    priorities = np.full_like(bins_remain_cap, -np.inf)\n\n    # Identify bins where the item can actually fit (remaining capacity >= 0)\n    can_fit_mask = remaining_after_placement >= 0\n\n    # For bins where the item fits, assign a priority score.\n    # To implement \"Best Fit\" where we want to minimize the remaining capacity,\n    # we take the negative of `remaining_after_placement`.\n    # A smaller positive `remaining_after_placement` (e.g., 0 for a perfect fit)\n    # will result in a priority score closer to 0 (or positive if `remaining_after_placement` was negative, which is already handled by `can_fit_mask`).\n    # For example:\n    #   - If remaining_after_placement is 0 (perfect fit), priority is 0.\n    #   - If remaining_after_placement is 5, priority is -5.\n    # Maximizing this priority score will naturally select the bin with the smallest\n    # non-negative `remaining_after_placement`.\n    priorities[can_fit_mask] = -remaining_after_placement[can_fit_mask]\n\n    return priorities\n\n[Reflection]\nPrioritize simpler, numerically robust functions. Direct mapping of minimization goals (e.g., negative value) is often superior.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}