{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin based on a Best-Fit-Decreasing inspired heuristic.\n\n    This heuristic prioritizes bins that, after placing the item, would have the smallest\n    remaining capacity. This strategy aims to 'fill up' bins as much as possible,\n    leaving minimal empty space, thereby reducing the need for new bins.\n    Bins where the item does not fit are assigned the lowest possible priority (-inf).\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity in each bin if the current item were placed there.\n    potential_rem_cap = bins_remain_cap - item\n\n    # Initialize priority scores. Bins that cannot fit the item are given\n    # a very low priority (negative infinity) to ensure they are never chosen.\n    priority_scores = np.full_like(bins_remain_cap, -np.inf)\n\n    # Create a boolean mask for bins where the item actually fits (i.e., potential_rem_cap >= 0).\n    can_fit_mask = potential_rem_cap >= 0\n\n    # For bins where the item fits, calculate the Best Fit priority.\n    # The Best Fit strategy aims to minimize the remaining space.\n    # To represent this as a priority score (where higher is better), we use the inverse\n    # of the remaining space. A smaller remaining space results in a larger inverse,\n    # thus a higher priority.\n    # We add a small epsilon to the denominator to prevent division by zero\n    # in cases where the item fits perfectly (potential_rem_cap is exactly 0).\n    epsilon = np.finfo(float).eps\n    priority_scores[can_fit_mask] = 1.0 / (potential_rem_cap[can_fit_mask] + epsilon)\n\n    return priority_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin,\n    implementing a Best Fit (BF) strategy. This heuristic aims to minimize\n    the unused space within a bin after the item is placed. Bins that can\n    fit the item and leave the least remaining capacity will have higher\n    priority. Bins that cannot fit the item are given a very low priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize all priorities to negative infinity. This ensures that\n    # bins that cannot fit the item will never be chosen, as their\n    # priority will remain at this extremely low value.\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Create a boolean mask to identify bins that can accommodate the item.\n    can_fit_mask = bins_remain_cap >= item\n\n    # For the bins that can fit the item, calculate the \"wastage\" or\n    # the remaining space after the item is placed. The Best Fit strategy\n    # seeks to minimize this wastage.\n    # To transform this into a priority score where higher is better,\n    # we take the negative of the wastage. This means a smaller positive\n    # wastage value (e.g., 0.1) results in a larger priority score (-0.1)\n    # compared to a larger wastage value (e.g., 0.5) which results in -0.5.\n    wastage = bins_remain_cap[can_fit_mask] - item\n    priorities[can_fit_mask] = -wastage\n\n    return priorities\n\n[Reflection]\nPrefer linear priority mappings (e.g., `-cost`) over non-linear ones (e.g., `1/cost`) for better performance.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}