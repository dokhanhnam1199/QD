```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns a priority score for each bin based on a Best Fit strategy,
    prioritizing simpler and numerically robust computation.

    This function implements a "Best Fit" heuristic: it assigns higher priority
    to bins that, after placing the item, would have the smallest remaining capacity.
    This strategy aims to fill bins as tightly as possible to minimize wasted space
    and the overall number of bins used.

    The priority is calculated by directly mapping the minimization goal (smallest
    remaining capacity) to a maximization score: the negative of the remaining capacity.
    This approach is numerically robust as it avoids division and complex operations,
    relying only on subtraction and negation.

    Args:
        item: Size of the item to be placed into a bin.
        bins_remain_cap: A NumPy array containing the current remaining capacity of each bin.

    Returns:
        A NumPy array of the same size as `bins_remain_cap`, where each element
        represents the priority score for the corresponding bin. A higher score
        indicates a higher priority for selection. Bins where the item does not fit
        are assigned a very low (negative infinity) priority.
    """
    # Calculate the hypothetical remaining capacity for each bin if the item were placed.
    # A smaller positive value here indicates a tighter fit, which is desirable.
    remaining_after_placement = bins_remain_cap - item

    # Initialize all priority scores to negative infinity. This ensures that
    # bins where the item cannot fit are naturally assigned the lowest possible
    # priority and will not be selected unless no valid fit exists.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask to identify only those bins where the item can actually fit.
    can_fit_mask = remaining_after_placement >= 0

    # For the bins where the item fits, calculate the priority score.
    # To implement "Best Fit" (minimize `remaining_after_placement`), we take its
    # negative. This means:
    # - A perfect fit (0 remaining) gets a priority of 0.
    # - A small positive remaining (e.g., 2) gets a priority of -2.
    # - A larger positive remaining (e.g., 5) gets a priority of -5.
    # Maximizing this priority score will correctly select the bin with the
    # smallest non-negative remaining capacity, which aligns with the Best Fit strategy.
    priorities[can_fit_mask] = -remaining_after_placement[can_fit_mask]

    return priorities
```
