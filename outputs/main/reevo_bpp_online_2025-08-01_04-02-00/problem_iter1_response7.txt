```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version implements a "Best Fit" strategy, giving highest priority
    to bins that would have the smallest amount of remaining capacity after
    the item is placed, assuming the item can fit. Bins that cannot fit
    the item are given a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to a very low value. Bins that cannot fit
    # the item will retain this low priority, ensuring they are not chosen.
    # Using -np.inf ensures that any valid fit will have a higher priority.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)

    # Identify which bins can currently accommodate the item.
    can_fit_mask = bins_remain_cap >= item

    # For the bins where the item can fit, calculate the remaining capacity
    # if the item were to be placed in them.
    # We want to minimize this remaining capacity to achieve a "best fit".
    remaining_after_placement = bins_remain_cap[can_fit_mask] - item

    # To convert "minimize remaining capacity" into "maximize priority score":
    # We assign the negative of the remaining capacity as the priority.
    # A smaller positive remaining capacity (e.g., 2) will result in a larger
    # (less negative) priority score (e.g., -2) compared to a larger
    # remaining capacity (e.g., 7 resulting in -7).
    # A perfect fit (0 remaining capacity) will result in a priority of 0,
    # which is the highest possible score in this scheme.
    priorities[can_fit_mask] = -remaining_after_placement

    return priorities
```
