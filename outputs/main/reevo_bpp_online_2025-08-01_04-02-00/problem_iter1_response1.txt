```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version implements a "Proportional Best Fit" heuristic.
    It prioritizes bins based on how large a proportion of their *remaining capacity*
    the current item will consume. The goal is to maximize the utilization efficiency
    of the available space within each candidate bin.

    A perfect fit (where the item's size is exactly equal to the bin's remaining capacity)
    yields the highest possible score (1.0). Bins that are a tighter fit (where the item
    fills a larger percentage of the remaining space) receive higher scores.

    Bins where the item cannot fit at all (item size is greater than remaining capacity)
    are assigned a very low priority (negative infinity) to ensure they are never selected.

    Args:
        item: Size of item to be added to the bin. Assumed to be a positive float.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin for the item.
    """
    
    # Initialize priorities with a very low value. This effectively disqualifies
    # any bin that doesn't meet the criteria (e.g., item does not fit).
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    
    # Identify bins where the item can physically fit.
    # We also ensure the remaining capacity is not zero to prevent division by zero,
    # unless item itself is zero (which is generally not the case in BPP, items have positive size).
    # If item > 0 and bins_remain_cap == 0, can_fit will be False, so no division issue.
    can_fit_mask = item <= bins_remain_cap
    
    # For bins where the item can fit, calculate the priority score.
    # The score is item_size / bin_remaining_capacity.
    # This ratio ranges from just above 0 (for very small items in very large bins)
    # up to 1.0 (for a perfect fit). Maximizing this ratio promotes efficient space usage.
    
    # Only calculate for bins where can_fit_mask is True
    # If `item` is 0, all `bins_remain_cap` would get a 0.0 priority.
    # Assuming `item > 0`, `bins_remain_cap[can_fit_mask]` will also be > 0.
    priorities[can_fit_mask] = item / bins_remain_cap[can_fit_mask]
    
    return priorities
```
