```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which to add an item to each bin,
    implementing a "Best Fit" strategy with a linear priority score.

    This heuristic prioritizes bins that, after placing the item, would have the
    smallest remaining capacity. This encourages filling bins as tightly as possible
    to minimize the total number of bins used.

    Priority calculation:
    - For bins where the item does not fit, a very low priority (-infinity) is assigned.
    - For bins where the item fits, the priority is calculated as the negative
      of the remaining capacity *after* the item is placed.
      A smaller positive remaining capacity (tighter fit, e.g., 0.1) results in a
      higher priority score (closer to zero, e.g., -0.1) compared to a larger
      remaining capacity (e.g., 0.5 -> -0.5). This linear mapping directly
      reflects the 'best fit' principle where minimizing remaining space is desired.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with the priority score for each bin.
    """
    # Initialize priorities to a very low value for bins that cannot fit the item.
    # Using -np.inf ensures these bins will never be chosen unless no other bin fits.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify which bins can accommodate the current item.
    # An item can fit if its size is less than or equal to the bin's remaining capacity.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate the remaining capacity if the item were placed.
    # This is (current_remaining_capacity - item_size).
    remaining_space_after_placement = bins_remain_cap[can_fit_mask] - item

    # Assign priorities based on the Best Fit principle using a linear mapping.
    # We want to minimize 'remaining_space_after_placement'.
    # To convert this to a maximization problem (where the highest priority wins),
    # we use the negative of 'remaining_space_after_placement'.
    # This correctly assigns higher priority to bins that result in less empty space.
    priorities[can_fit_mask] = -remaining_space_after_placement

    return priorities
```
