```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin based on a Best-Fit-Decreasing inspired heuristic.

    This heuristic prioritizes bins that, after placing the item, would have the smallest
    remaining capacity. This strategy aims to 'fill up' bins as much as possible,
    leaving minimal empty space, thereby reducing the need for new bins.
    Bins where the item does not fit are assigned the lowest possible priority (-inf).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity in each bin if the current item were placed there.
    potential_rem_cap = bins_remain_cap - item

    # Initialize priority scores. Bins that cannot fit the item are given
    # a very low priority (negative infinity) to ensure they are never chosen.
    priority_scores = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask for bins where the item actually fits (i.e., potential_rem_cap >= 0).
    can_fit_mask = potential_rem_cap >= 0

    # For bins where the item fits, calculate the Best Fit priority.
    # The Best Fit strategy aims to minimize the remaining space.
    # To represent this as a priority score (where higher is better), we use the inverse
    # of the remaining space. A smaller remaining space results in a larger inverse,
    # thus a higher priority.
    # We add a small epsilon to the denominator to prevent division by zero
    # in cases where the item fits perfectly (potential_rem_cap is exactly 0).
    epsilon = np.finfo(float).eps
    priority_scores[can_fit_mask] = 1.0 / (potential_rem_cap[can_fit_mask] + epsilon)

    return priority_scores
```
