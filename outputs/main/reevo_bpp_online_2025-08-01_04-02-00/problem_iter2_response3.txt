```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best Fit (BF) strategy. This version adheres to the
    principle of using linear priority transformations for robustness,
    as recommended by the reflection.

    The heuristic aims to minimize the unused space within a bin after
    the item is placed. Bins that can fit the item and leave the least
    remaining capacity will have higher priority. Bins that cannot fit
    the item are given a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to negative infinity. This ensures that
    # bins that cannot fit the item will never be chosen, as their
    # priority will remain at this extremely low value.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask to identify bins that can accommodate the item.
    can_fit_mask = bins_remain_cap >= item

    # For the bins that can fit the item, calculate the "wastage" or
    # the remaining space after the item is placed. The Best Fit strategy
    # seeks to minimize this wastage.
    wastage = bins_remain_cap[can_fit_mask] - item

    # To transform this into a priority score where higher is better,
    # we use the negative of the wastage. This is a linear transformation
    # (y = -x) which directly reflects the magnitude of wastage without
    # exaggerating small differences. For example, a smaller positive
    # wastage value (e.g., 0.1) results in a larger priority score (-0.1)
    # compared to a larger wastage value (e.g., 0.5) which results in -0.5.
    # This aligns with the reflection's guidance for robustness.
    priorities[can_fit_mask] = -wastage

    return priorities
```
