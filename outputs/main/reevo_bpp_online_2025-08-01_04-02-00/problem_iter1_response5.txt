```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin based on the Best Fit (BF) heuristic.

    The Best Fit heuristic aims to place an item into the bin that will have the
    smallest remaining capacity after the item is placed, thus finding the "tightest fit".
    This strategy minimizes the "wasted" space in any individual bin for the current item,
    which often leads to better overall bin utilization.

    A higher priority score indicates a more desirable bin. Bins where the item does not
    fit will be assigned a very low (negative infinity) priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of the same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed in it.
    # A smaller positive value indicates a tighter fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize all priorities to a very low value (-np.inf).
    # This ensures that bins where the item cannot fit will never be selected
    # if there's any bin that can accommodate the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item actually fits (i.e., remaining capacity >= 0).
    fits_mask = potential_remaining_cap >= 0

    # For bins where the item fits, assign a priority.
    # We want to prioritize bins with a *smaller* potential_remaining_cap.
    # To achieve this with a "highest priority" selection, we take the negative
    # of the potential_remaining_cap. This transforms a minimization problem
    # (minimize remaining capacity) into a maximization problem (maximize negative remaining capacity).
    # Example:
    #   - If remaining_cap is 0.1, priority is -0.1.
    #   - If remaining_cap is 0.0 (perfect fit), priority is 0.0.
    #   - If remaining_cap is 0.2, priority is -0.2.
    # A priority of 0.0 is higher than -0.1, which is higher than -0.2, correctly
    # prioritizing the perfect fit, then the tighter non-perfect fit.
    priorities[fits_mask] = -potential_remaining_cap[fits_mask]

    return priorities
```
