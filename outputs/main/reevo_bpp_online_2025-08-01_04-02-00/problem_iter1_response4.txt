```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin,
    implementing a "Best Fit" strategy.

    The "Best Fit" strategy aims to place the item into the bin that
    leaves the least amount of remaining space. This encourages filling
    bins as tightly as possible to minimize the total number of bins used.

    Priority calculation:
    - For bins where the item does not fit, a very low priority (-infinity) is assigned.
    - For bins where the item fits, the priority is calculated as the negative
      of the remaining capacity *after* the item is placed.
      A smaller positive remaining capacity (tighter fit) results in a priority
      closer to zero, which is considered higher than a more negative priority
      (larger remaining capacity).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a very low value for bins that cannot fit the item.
    # Using -np.inf ensures these bins will never be chosen unless no other bin fits.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify which bins can accommodate the current item.
    can_fit_indices = bins_remain_cap >= item

    # For bins that can fit the item, calculate the remaining capacity if the item were placed.
    # This is (current_remaining_capacity - item_size).
    remaining_space_after_placement = bins_remain_cap[can_fit_indices] - item

    # Assign priorities based on the Best Fit principle.
    # We want to minimize 'remaining_space_after_placement'.
    # To convert this to a maximization problem (highest priority wins), we use
    # the negative of 'remaining_space_after_placement'.
    # A smaller 'remaining_space_after_placement' (e.g., 0.1) results in a
    # higher priority (-0.1) compared to a larger one (e.g., 0.5 -> -0.5).
    priorities[can_fit_indices] = -remaining_space_after_placement

    return priorities
```
