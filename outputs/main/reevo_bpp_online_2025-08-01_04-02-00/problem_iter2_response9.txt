```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit
    approach. This implementation adheres to the principle of using simple, direct,
    and linear transformations for robust heuristic design.

    Bins that cannot fit the item receive a very low (negative infinity) priority.
    For bins where the item fits, the priority is determined by minimizing the
    remaining capacity. To achieve this as a maximization problem (where higher
    priority is better), we use the negative of the potential remaining capacity.
    This linear transformation ensures that smaller remaining capacities result
    in higher, more positive (or less negative) priority scores.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to a very low value. This ensures that bins where
    # the item does not fit will automatically have the lowest priority and
    # will not be selected. Using float32 for potential memory efficiency if needed.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float32)

    # Identify which bins have sufficient remaining capacity to accommodate the item.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity in each bin if the current item were placed there.
    # This calculation is performed for all bins, but only relevant for those where
    # the item actually fits.
    potential_remaining_cap = bins_remain_cap - item

    # For bins where the item fits, apply the Best Fit strategy.
    # The Best Fit strategy aims to minimize the remaining empty space in a bin
    # after an item is placed. To convert this minimization objective into a
    # maximization objective (which the priority function seeks), we take the
    # negative of the potential remaining capacity.
    # A smaller positive remaining capacity (e.g., 0.1) will result in a
    # higher priority score (-0.1) compared to a larger positive remaining
    # capacity (e.g., 10.0) which results in a lower priority score (-10.0).
    # A perfect fit (0.0 remaining capacity) yields the highest possible score of 0.0
    # among fitting bins. This is a direct and linear transformation of the objective.
    priorities[can_fit_mask] = -potential_remaining_cap[can_fit_mask]

    return priorities
```
