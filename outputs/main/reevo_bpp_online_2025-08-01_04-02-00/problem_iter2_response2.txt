```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit (BF) strategy.

    Bins where the item fits best (leaves the least remaining capacity) get the highest priority.
    Bins where the item does not fit get a very low (negative infinity) priority to ensure
    they are not chosen unless no other bin is available (implying a new bin would be opened).

    This version carefully chooses epsilon for numerical stability, preventing
    over-differentiation for extremely small remaining capacities and improving robustness.
    By using a slightly larger epsilon compared to machine epsilon or 1e-9, the
    priority values are kept within a more manageable range, smoothing out the
    extreme preference for infinitesimal differences in remaining capacity,
    without altering the core Best Fit principle.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity in each bin if the item were placed there.
    # A smaller positive remainder signifies a "tighter" or "better" fit.
    potential_leftover = bins_remain_cap - item

    # Initialize priorities array. Bins where the item does not fit should have a
    # very low priority (e.g., negative infinity) to exclude them from consideration.
    # This also helps distinguish from valid bins that might have a low positive priority.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify which bins the item can actually fit into (where leftover is non-negative).
    fits_mask = potential_leftover >= 0

    # For bins where the item fits, calculate the priority score.
    # We want a higher priority for bins that leave less space (i.e., smaller positive `potential_leftover`).
    # The reciprocal (1.0 / x) achieves this.
    # A small epsilon is added to the denominator to prevent division by zero if an item fits exactly.
    # Choosing epsilon = 1e-6 aims to prevent excessively large priority values for extremely
    # small (but non-zero) remainders. This dampens "over-differentiation" among
    # near-perfect fits and improves numerical stability/robustness in scenarios
    # where such extremely large values might cause issues in downstream calculations,
    # while still giving clear preference to best fits.
    epsilon = 1e-6 # A balanced choice for numerical stability and priority magnitude.
    
    # Apply the priority calculation only to the bins where the item fits.
    priorities[fits_mask] = 1.0 / (potential_leftover[fits_mask] + epsilon)

    return priorities
```
