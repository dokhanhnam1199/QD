```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This design implements a "Best Fit" like strategy: it prioritizes bins
    that will result in the smallest remaining capacity after the item is placed,
    thus attempting to fill bins as tightly as possible.

    In line with the reflection, this function uses a linear priority score
    that directly reflects the 'tightness' of the fit, favoring simple and
    direct waste minimization. A higher score indicates a higher priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority. Bins where the item does not
        fit are assigned a very low (negative infinity) priority.
    """
    # Initialize all priorities to negative infinity.
    # This ensures that bins where the item does not fit are never chosen
    # unless there are absolutely no valid bins.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Determine which bins the item can physically fit into.
    # An item fits if its size is less than or equal to the bin's remaining capacity.
    can_fit_mask = bins_remain_cap >= item

    # For bins where the item fits, assign a priority score.
    # To implement "Best Fit", we want to minimize the remaining capacity after placement.
    # This is equivalent to maximizing (item - bins_remain_cap_of_that_bin).
    # A perfect fit (bins_remain_cap == item) results in a score of 0.
    # A looser fit (bins_remain_cap > item) results in a negative score.
    # Maximizing this score naturally selects the bin with the smallest positive
    # remaining capacity (or a perfect fit of 0). This is a linear function
    # of the bin's remaining capacity.
    priorities[can_fit_mask] = item - bins_remain_cap[can_fit_mask]

    return priorities
```
