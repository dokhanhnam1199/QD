```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which to add an item to each bin,
    implementing a Best Fit strategy using linear scaling for priority scores.

    This heuristic prioritizes bins that, after placing the item, would have
    the smallest remaining capacity. To achieve this, it assigns a priority
    score that is the negative of the remaining capacity. A smaller positive
    remaining capacity (closer to zero) results in a higher (less negative)
    priority score, with a perfect fit yielding a score of 0.

    Bins where the item does not fit are assigned the lowest possible priority (-inf).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to a very low value (-np.inf).
    # This ensures that bins incapable of fitting the item will not be selected,
    # as any valid fit will yield a higher priority.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)

    # Identify which bins have sufficient remaining capacity to accommodate the item.
    can_fit_mask = bins_remain_cap >= item

    # For the bins where the item can fit, calculate the remaining capacity
    # if the item were placed there. This is the value we want to minimize for Best Fit.
    remaining_after_placement = bins_remain_cap[can_fit_mask] - item

    # Assign priority scores using a linear scale: the negative of the
    # remaining capacity.
    # This approach correctly converts the goal of minimizing remaining capacity
    # into maximizing the priority score. A smaller `remaining_after_placement`
    # (e.g., 0 for a perfect fit) results in a higher (less negative) priority (0),
    # while a larger `remaining_after_placement` results in a lower (more negative) priority.
    priorities[can_fit_mask] = -remaining_after_placement

    return priorities
```
