```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This design implements a "Best Fit" like strategy: it prioritizes bins
    that will have the smallest remaining capacity after the item is placed,
    thus attempting to fill bins as tightly as possible.
    It directly applies a linear priority function based on 'negative remaining space'.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority. Bins where the item does not
        fit are assigned a very low (negative infinity) priority.
    """
    # Initialize all priorities to negative infinity.
    # This ensures that bins where the item does not fit are never chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify bins where the item can actually fit.
    # A bin is suitable if its remaining capacity is greater than or equal to the item size.
    can_fit_mask = bins_remain_cap >= item

    # For bins where the item fits, assign a priority score.
    # The priority is calculated directly as (item - bins_remain_cap).
    # This implements the "negative remaining space" concept:
    #   - If item perfectly fits (bins_remain_cap == item), priority is 0.
    #   - If bins_remain_cap > item, priority is negative.
    # A smaller positive remaining capacity (bins_remain_cap - item)
    # results in a larger (closer to zero or less negative) priority score
    # (item - bins_remain_cap), which is preferred when maximizing.
    # This direct linear transformation aligns with favoring simple, direct waste minimization.
    priorities[can_fit_mask] = item - bins_remain_cap[can_fit_mask]

    return priorities
```
