{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin based on a Best-Fit-Decreasing inspired heuristic.\n\n    This heuristic prioritizes bins that, after placing the item, would have the smallest\n    remaining capacity. This strategy aims to 'fill up' bins as much as possible,\n    leaving minimal empty space, thereby reducing the need for new bins.\n    Bins where the item does not fit are assigned the lowest possible priority (-inf).\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity in each bin if the current item were placed there.\n    potential_rem_cap = bins_remain_cap - item\n\n    # Initialize priority scores. Bins that cannot fit the item are given\n    # a very low priority (negative infinity) to ensure they are never chosen.\n    priority_scores = np.full_like(bins_remain_cap, -np.inf)\n\n    # Create a boolean mask for bins where the item actually fits (i.e., potential_rem_cap >= 0).\n    can_fit_mask = potential_rem_cap >= 0\n\n    # For bins where the item fits, calculate the Best Fit priority.\n    # The Best Fit strategy aims to minimize the remaining space.\n    # To represent this as a priority score (where higher is better), we use the inverse\n    # of the remaining space. A smaller remaining space results in a larger inverse,\n    # thus a higher priority.\n    # We add a small epsilon to the denominator to prevent division by zero\n    # in cases where the item fits perfectly (potential_rem_cap is exactly 0).\n    epsilon = np.finfo(float).eps\n    priority_scores[can_fit_mask] = 1.0 / (potential_rem_cap[can_fit_mask] + epsilon)\n\n    return priority_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add an item to each bin,\n    implementing a \"Best Fit\" strategy.\n\n    The \"Best Fit\" strategy aims to place the item into the bin that\n    leaves the least amount of remaining space. This encourages filling\n    bins as tightly as possible to minimize the total number of bins used.\n\n    Priority calculation:\n    - For bins where the item does not fit, a very low priority (-infinity) is assigned.\n    - For bins where the item fits, the priority is calculated as the negative\n      of the remaining capacity *after* the item is placed.\n      A smaller positive remaining capacity (tighter fit) results in a priority\n      closer to zero, which is considered higher than a more negative priority\n      (larger remaining capacity).\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priorities to a very low value for bins that cannot fit the item.\n    # Using -np.inf ensures these bins will never be chosen unless no other bin fits.\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Identify which bins can accommodate the current item.\n    can_fit_indices = bins_remain_cap >= item\n\n    # For bins that can fit the item, calculate the remaining capacity if the item were placed.\n    # This is (current_remaining_capacity - item_size).\n    remaining_space_after_placement = bins_remain_cap[can_fit_indices] - item\n\n    # Assign priorities based on the Best Fit principle.\n    # We want to minimize 'remaining_space_after_placement'.\n    # To convert this to a maximization problem (highest priority wins), we use\n    # the negative of 'remaining_space_after_placement'.\n    # A smaller 'remaining_space_after_placement' (e.g., 0.1) results in a\n    # higher priority (-0.1) compared to a larger one (e.g., 0.5 -> -0.5).\n    priorities[can_fit_indices] = -remaining_space_after_placement\n\n    return priorities\n\n[Reflection]\nLinear priority (negative remaining space) better reflects Best Fit; inverse functions can exaggerate small differences.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}