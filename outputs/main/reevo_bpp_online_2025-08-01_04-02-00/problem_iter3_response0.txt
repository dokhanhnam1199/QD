```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This design implements a "Best Fit" like strategy: it prioritizes bins
    that will result in the smallest "waste" (remaining capacity) after the
    item is placed, thus attempting to fill bins as tightly as possible.
    It directly implements the "negative remaining space" heuristic as a
    linear priority function, favoring simple and direct waste minimization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority. Bins where the item does not
        fit are assigned a very low (negative infinity) priority.
    """
    # Calculate the "waste" if the item were placed in each bin.
    # Waste is defined as the remaining capacity after placing the item.
    # A smaller `potential_waste` value indicates a tighter fit or less unused space.
    potential_waste = bins_remain_cap - item

    # Initialize all priorities to negative infinity.
    # This ensures that bins where the item does not fit are never chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify bins where the item can actually fit (potential_waste is non-negative)
    can_fit_mask = potential_waste >= 0

    # For bins where the item fits, assign a priority score.
    # To implement "Best Fit" (i.e., minimize `potential_waste`), we take the negative
    # of the `potential_waste`. Maximizing this negative value is equivalent to
    # minimizing the positive `potential_waste`.
    # This is a linear transformation: priority = -(potential_waste) + C,
    # or more simply, priority = -(bins_remain_cap - item) = item - bins_remain_cap.
    # Since 'item' is constant, maximizing this is equivalent to minimizing 'bins_remain_cap'.
    priorities[can_fit_mask] = -potential_waste[can_fit_mask]

    return priorities
```
