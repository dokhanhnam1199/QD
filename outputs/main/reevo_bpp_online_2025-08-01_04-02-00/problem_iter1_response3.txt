```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a Best Fit
    approach. Bins that cannot fit the item receive a very low (negative infinity)
    priority. For bins where the item fits, the priority is higher for bins that
    would have less remaining capacity after the item is placed (i.e., a "tighter" fit).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a very low value for all bins.
    # This ensures that bins where the item does not fit will never be chosen,
    # as their priority will be -infinity.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float32)

    # Determine which bins have enough remaining capacity for the item.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity if the item were placed in each bin.
    # For bins that can fit, this will be non-negative. For others, it might be negative.
    potential_remaining_cap = bins_remain_cap - item

    # For a "Best Fit" strategy, we want to minimize the remaining capacity after placing the item.
    # To convert this minimization into a maximization problem (which the priority function seeks
    # by selecting the bin with the highest score), we can use the negative of the
    # potential remaining capacity.
    # A smaller positive remainder (e.g., 0.1) results in a larger priority score (-0.1)
    # compared to a larger positive remainder (e.g., 10.0) which results in a smaller
    # priority score (-10.0). A perfect fit (0.0 remaining) results in the highest
    # possible score of 0.0 among fitting bins.
    
    # Apply this logic only to the bins where the item actually fits.
    priorities[can_fit_mask] = -potential_remaining_cap[can_fit_mask]

    return priorities
```
