```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This design implements a "Best Fit" like strategy: it prioritizes bins
    that will have the smallest remaining capacity after the item is placed,
    thus attempting to fill bins as tightly as possible.

    This version rigorously adheres to the principle of using linear priority
    functions for robust heuristics and direct waste minimization. It leverages
    the "negative remaining space" concept directly, avoiding non-linear
    transformations that could introduce numerical instability or exaggerate
    small differences. Functionally, it is identical to priority_v1, which
    already embodied these design principles effectively.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate higher priority. Bins where the item does not
        fit are assigned a very low (negative infinity) priority.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    # A smaller 'remaining_after_placement' value indicates a tighter fit.
    remaining_after_placement = bins_remain_cap - item

    # Initialize all priorities to negative infinity.
    # This ensures that bins where the item does not fit (or any bin for
    # that matter, until we assign a valid score) are never chosen
    # unless there's absolutely no other option (which implies no valid fit).
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify bins where the item can actually fit (remaining capacity >= 0)
    can_fit_mask = remaining_after_placement >= 0

    # For bins where the item fits, assign a priority score.
    # To implement "Best Fit" where we want to minimize the remaining capacity,
    # we take the negative of `remaining_after_placement`.
    # This is a linear transformation: a smaller positive `remaining_after_placement`
    # (e.g., 0 for a perfect fit) will result in a priority score closer to 0 (or positive).
    # Maximizing this priority score will naturally select the bin with the smallest
    # non-negative `remaining_after_placement`. This directly implements
    # "negative remaining space" as a linear priority.
    priorities[can_fit_mask] = -remaining_after_placement[can_fit_mask]

    return priorities
```
