```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic implements a variation of the Best Fit strategy.
    
    The Best Fit strategy aims to minimize the remaining space in a bin after an item is placed.
    This approach helps to consolidate items into fewer bins, leaving larger capacities
    in other bins for potentially larger future items.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a higher priority.
        Bins that cannot fit the item will have a very low (negative infinity) priority.
    """
    
    # Initialize all priorities to a very low value (-np.inf).
    # This ensures that bins which cannot accommodate the item are effectively
    # ruled out from consideration, as their priority will always be lower than any
    # bin that can actually fit the item.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Create a boolean mask to identify bins where the item can actually fit.
    # An item can fit if its size is less than or equal to the bin's remaining capacity.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate their scores based on the Best Fit principle.
    # Best Fit seeks to minimize the remaining space in the bin after placement.
    #
    # Let `C` be the current remaining capacity of a bin and `s` be the item size.
    # The space remaining after placing the item would be `remaining_space = C - s`.
    # To achieve Best Fit, we want to minimize `remaining_space`.
    # In a priority function where higher score means higher priority, we need to convert
    # minimizing `remaining_space` into maximizing a score.
    # This can be done by maximizing `-(C - s)`, which simplifies to `s - C`.
    #
    # Example:
    # - If `item = 0.3` and `bin_capacity = 0.3` (exact fit): Score = `0.3 - 0.3 = 0.0`
    # - If `item = 0.3` and `bin_capacity = 0.4`: Score = `0.3 - 0.4 = -0.1`
    # - If `item = 0.3` and `bin_capacity = 0.5`: Score = `0.3 - 0.5 = -0.2`
    #
    # In this scoring system, a perfect fit (remaining space 0) gets the highest score (0.0).
    # Bins that leave more remaining space have increasingly negative scores, ensuring
    # that the bin leading to the tightest fit (least remaining space) is chosen.
    
    fitting_bins_capacities = bins_remain_cap[can_fit_mask]
    scores_for_fitting_bins = item - fitting_bins_capacities

    # Assign these calculated scores only to the bins that can fit the item.
    # Other bins (where `can_fit_mask` is False) will retain their initial -np.inf priority.
    priorities[can_fit_mask] = scores_for_fitting_bins

    return priorities
```
