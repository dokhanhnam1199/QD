{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin based on a Best-Fit-Decreasing inspired heuristic.\n\n    This heuristic prioritizes bins that, after placing the item, would have the smallest\n    remaining capacity. This strategy aims to 'fill up' bins as much as possible,\n    leaving minimal empty space, thereby reducing the need for new bins.\n    Bins where the item does not fit are assigned the lowest possible priority (-inf).\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity in each bin if the current item were placed there.\n    potential_rem_cap = bins_remain_cap - item\n\n    # Initialize priority scores. Bins that cannot fit the item are given\n    # a very low priority (negative infinity) to ensure they are never chosen.\n    priority_scores = np.full_like(bins_remain_cap, -np.inf)\n\n    # Create a boolean mask for bins where the item actually fits (i.e., potential_rem_cap >= 0).\n    can_fit_mask = potential_rem_cap >= 0\n\n    # For bins where the item fits, calculate the Best Fit priority.\n    # The Best Fit strategy aims to minimize the remaining space.\n    # To represent this as a priority score (where higher is better), we use the inverse\n    # of the remaining space. A smaller remaining space results in a larger inverse,\n    # thus a higher priority.\n    # We add a small epsilon to the denominator to prevent division by zero\n    # in cases where the item fits perfectly (potential_rem_cap is exactly 0).\n    epsilon = np.finfo(float).eps\n    priority_scores[can_fit_mask] = 1.0 / (potential_rem_cap[can_fit_mask] + epsilon)\n\n    return priority_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using a Best Fit (BF) strategy.\n\n    Bins where the item fits best (leaves the least remaining capacity) get the highest priority.\n    Bins where the item does not fit get a very low (negative infinity) priority to ensure\n    they are not chosen unless no other bin is available (implying a new bin would be opened).\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity in each bin if the item were placed there.\n    # A smaller positive remainder signifies a \"tighter\" or \"better\" fit.\n    potential_leftover = bins_remain_cap - item\n\n    # Initialize priorities array. Bins where the item does not fit should have a\n    # very low priority (e.g., negative infinity) to exclude them from consideration.\n    # This also helps distinguish from valid bins that might have a low positive priority.\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Identify which bins the item can actually fit into (where leftover is non-negative).\n    fits_mask = potential_leftover >= 0\n\n    # For bins where the item fits, calculate the priority score.\n    # We want a higher priority for bins that leave less space (i.e., smaller positive `potential_leftover`).\n    # The reciprocal (1.0 / x) achieves this:\n    # - If `potential_leftover` is very small (near 0, an \"exact fit\"), 1.0 / (small_number) yields a very high priority.\n    # - If `potential_leftover` is large, 1.0 / (large_number) yields a small priority.\n    # A small epsilon is added to the denominator to prevent division by zero if an item fits exactly.\n    epsilon = 1e-9 \n    \n    # Apply the priority calculation only to the bins where the item fits.\n    priorities[fits_mask] = 1.0 / (potential_leftover[fits_mask] + epsilon)\n\n    return priorities\n\n[Reflection]\nCarefully choose epsilon for numerical stability, preventing over-differentiation and improving robustness.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}