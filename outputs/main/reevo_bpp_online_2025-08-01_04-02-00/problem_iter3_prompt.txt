{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\nPrefer linear priority functions (e.g., negative remaining space) for robust heuristics. Avoid non-linear transformations that exaggerate small differences or cause numerical instability, favoring simple, direct waste minimization.\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    This design implements a \"Best Fit\" like strategy: it prioritizes bins\n    that will have the smallest remaining capacity after the item is placed,\n    thus attempting to fill bins as tightly as possible.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Higher scores indicate higher priority. Bins where the item does not\n        fit are assigned a very low (negative infinity) priority.\n    \"\"\"\n    # Calculate the remaining capacity if the item were placed in each bin.\n    # A smaller 'remaining_after_placement' value indicates a tighter fit.\n    remaining_after_placement = bins_remain_cap - item\n\n    # Initialize all priorities to negative infinity.\n    # This ensures that bins where the item does not fit (or any bin for\n    # that matter, until we assign a valid score) are never chosen\n    # unless there's absolutely no other option (which implies no valid fit).\n    priorities = np.full_like(bins_remain_cap, -np.inf)\n\n    # Identify bins where the item can actually fit (remaining capacity >= 0)\n    can_fit_mask = remaining_after_placement >= 0\n\n    # For bins where the item fits, assign a priority score.\n    # To implement \"Best Fit\" where we want to minimize the remaining capacity,\n    # we take the negative of `remaining_after_placement`.\n    # A smaller positive `remaining_after_placement` (e.g., 0 for a perfect fit)\n    # will result in a priority score closer to 0 (or positive if `remaining_after_placement` was negative, which is already handled by `can_fit_mask`).\n    # For example:\n    #   - If remaining_after_placement is 0 (perfect fit), priority is 0.\n    #   - If remaining_after_placement is 5, priority is -5.\n    # Maximizing this priority score will naturally select the bin with the smallest\n    # non-negative `remaining_after_placement`.\n    priorities[can_fit_mask] = -remaining_after_placement[can_fit_mask]\n\n    return priorities\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}