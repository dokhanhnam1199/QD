import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm generates multiple random routes satisfying capacity constraints, 
    calculates the frequency of each edge appearing in those routes, and uses 
    the frequencies to construct a heuristic matrix.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000  # Number of random route samples

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        customer_indices = np.random.permutation(range(1, n))
        
        routes = []
        current_route = [0]  # Start at the depot
        current_capacity = 0

        for customer in customer_indices:
            if current_capacity + demands[customer] <= capacity:
                current_route.append(customer)
                current_capacity += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]  # Start a new route from the depot
                current_capacity = demands[customer]
        
        current_route.append(0)  # Return to depot after the last customer
        routes.append(current_route)

        # Update the heuristic matrix based on the edges used in the current routes
        for route in routes:
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                heuristics_matrix[u, v] += 1
                heuristics_matrix[v, u] += 1  # Since it's undirected

    # Normalize the heuristics matrix by the number of samples
    heuristics_matrix /= num_samples

    return heuristics_matrix
