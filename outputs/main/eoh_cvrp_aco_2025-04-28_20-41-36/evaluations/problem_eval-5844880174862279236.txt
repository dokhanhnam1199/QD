import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    Solves Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    {The algorithm generates multiple random routes, evaluates their feasibility and cost,
     and uses the information to update a heuristic matrix that favors edges appearing in good solutions.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 100  # Number of random solutions to sample
    
    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        customer_indices = np.random.permutation(range(1, n))
        
        # Build routes based on capacity constraint
        routes = []
        current_route = [0]  # Start at depot
        current_demand = 0
        
        for customer in customer_indices:
            if current_demand + demands[customer] <= capacity:
                current_route.append(customer)
                current_demand += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]  # Start new route from depot
                current_demand = demands[customer]
        
        current_route.append(0) # Close last route by returning to depot
        routes.append(current_route)
        

        # Calculate the cost of the solution
        total_cost = 0
        for route in routes:
            for i in range(len(route) - 1):
                total_cost += distance_matrix[route[i], route[i+1]]
        
        # Update the heuristic matrix based on the solution's edges. edges from good solution are promoted by increasing heuristics_matrix value.
        if total_cost > 0:  # Avoid division by zero
            for route in routes:
                for i in range(len(route) - 1):
                    node1 = route[i]
                    node2 = route[i+1]
                    heuristics_matrix[node1, node2] += 1 / total_cost
                    heuristics_matrix[node2, node1] += 1 / total_cost  # Make it symmetric

    return heuristics_matrix
