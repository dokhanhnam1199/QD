import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm iteratively samples random routes, evaluates their feasibility and cost, and updates a heuristic matrix to favor edges frequently appearing in good solutions.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000
    alpha = 0.1

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding depot)
        customer_indices = np.random.permutation(range(1, n))

        # Construct routes
        routes = []
        current_route = [0]
        current_load = 0
        for customer in customer_indices:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]
                current_load = demands[customer]
        current_route.append(0)
        routes.append(current_route)

        # Calculate the cost of the routes
        total_cost = 0
        for route in routes:
            for i in range(len(route) - 1):
                total_cost += distance_matrix[route[i], route[i+1]]

        # Update heuristic matrix based on route quality (lower cost is better)
        if total_cost > 0:  # Avoid division by zero
            reward = 1.0 / total_cost
        else:
            reward = 0.0
            
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += alpha * reward
                heuristics_matrix[node2, node1] += alpha * reward  # Symmetric

    return heuristics_matrix
