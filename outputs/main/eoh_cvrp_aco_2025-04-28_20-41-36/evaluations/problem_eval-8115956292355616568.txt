import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm iteratively inserts unvisited nodes into the best possible position within an existing route, guided by a cost-benefit analysis that considers both distance and capacity constraints, updating the heuristics matrix based on the final routes.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    unvisited_nodes = set(range(1, n))
    routes = []
    
    while unvisited_nodes:
        best_route = None
        best_node = None
        best_insertion_cost = float('inf')

        # Find the best node and route to insert into
        for node in unvisited_nodes:
            if not routes:
                # If no routes exist, start a new one
                cost = distance_matrix[0, node] + distance_matrix[node, 0]
                if demands[node] <= capacity:
                    if cost < best_insertion_cost:
                        best_insertion_cost = cost
                        best_node = node
                        best_route = []
            else:
                for i, route in enumerate(routes):
                    if sum(demands[r] for r in route) + demands[node] <= capacity:
                        # Find the best insertion point within the route
                        for j in range(len(route) + 1):
                            if j == 0:
                                insertion_cost = distance_matrix[0, node] + distance_matrix[node, route[0]] - distance_matrix[0, route[0]]
                            elif j == len(route):
                                insertion_cost = distance_matrix[route[-1], node] + distance_matrix[node, 0] - distance_matrix[route[-1], 0]
                            else:
                                insertion_cost = distance_matrix[route[j-1], node] + distance_matrix[node, route[j]] - distance_matrix[route[j-1], route[j]]
                            if insertion_cost < best_insertion_cost:
                                best_insertion_cost = insertion_cost
                                best_node = node
                                best_route = i
                                best_insertion_index = j

        # Insert the best node into the best route or create a new route
        if best_node is not None:
            unvisited_nodes.remove(best_node)
            if best_route == []:
                routes.append([best_node])
            elif isinstance(best_route, int):
                routes[best_route].insert(best_insertion_index, best_node)
            else:
                routes.append([best_node])


    # Update heuristics matrix
    for route in routes:
        full_route = [0] + route + [0]
        for i in range(len(full_route) - 1):
            heuristics_matrix[full_route[i], full_route[i+1]] = 1
            heuristics_matrix[full_route[i+1], full_route[i]] = 1

    return heuristics_matrix
