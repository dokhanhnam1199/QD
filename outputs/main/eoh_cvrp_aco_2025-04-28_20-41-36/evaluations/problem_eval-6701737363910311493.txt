import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm combines a demand-weighted savings approach with a penalty for capacity violations and a preference for connecting to nodes closer to the depot.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    savings_matrix = np.zeros_like(distance_matrix)

    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    demand_weight = np.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                demand_weight[i, j] = savings_matrix[i, j] * (demands[i] + demands[j])
            else:
                demand_weight[i, j] = 0
                
    penalty_matrix = np.zeros_like(distance_matrix)
    for i in range(1, n):
      for j in range(1, n):
        if i!=j:
          if demands[i] + demands[j] > capacity:
            penalty_matrix[i, j] = -1
            penalty_matrix[j, i] = -1
        else:
          penalty_matrix[i,j] = -1

    depot_proximity = np.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                depot_proximity[i, j] = -distance_matrix[0, j]
            else:
                depot_proximity[i, j] = 0

    normalized_demand_weight = demand_weight / (np.max(demand_weight) if np.any(demand_weight) else 1)
    normalized_depot_proximity = depot_proximity / (np.max(np.abs(depot_proximity)) if np.any(depot_proximity) else 1)

    heuristics_matrix = normalized_demand_weight + penalty_matrix + normalized_depot_proximity

    return heuristics_matrix
