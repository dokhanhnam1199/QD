import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples a set of random routes, evaluates their feasibility and cost, and then constructs a heuristic matrix based on the frequency with which each edge appears in feasible, low-cost routes.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        customer_indices = np.random.permutation(range(1, n))
        
        # Construct a route and evaluate feasibility
        routes = []
        current_route = [0]
        current_capacity = 0
        
        for customer in customer_indices:
            if current_capacity + demands[customer] <= capacity:
                current_route.append(customer)
                current_capacity += demands[customer]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, customer]
                current_capacity = demands[customer]

        current_route.append(0)  # Return to depot
        routes.append(current_route)

        # Calculate total distance of current solution
        total_distance = 0
        for route in routes:
            for i in range(len(route) - 1):
                total_distance += distance_matrix[route[i], route[i+1]]

        # Update heuristics matrix with edges from the current feasible solution
        if len(routes) > 0:
            for route in routes:
                for i in range(len(route) - 1):
                     heuristics_matrix[route[i], route[i+1]] += 1
            

    # Normalize heuristics matrix
    heuristics_matrix = heuristics_matrix / num_samples

    return heuristics_matrix
