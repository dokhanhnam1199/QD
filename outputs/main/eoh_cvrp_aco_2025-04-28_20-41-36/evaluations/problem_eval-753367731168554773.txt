import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm estimates edge inclusion probabilities by stochastically generating feasible routes, favoring edges appearing in many feasible routes.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        unvisited = set(range(1, n))
        current_route = [0]
        current_load = 0
        all_routes = []

        while unvisited:
            # Find feasible next nodes
            feasible_nodes = [node for node in unvisited if current_load + demands[node] <= capacity]

            if not feasible_nodes:
                # Return to depot
                current_route.append(0)
                all_routes.append(current_route)
                current_route = [0]
                current_load = 0
                feasible_nodes = [node for node in unvisited if current_load + demands[node] <= capacity]
                if not feasible_nodes:
                    #Restart if no route possible
                    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
                    return heuristics_matrix

            # Select the next node stochastically (biased towards closer nodes)
            probabilities = []
            for node in feasible_nodes:
                probabilities.append(1.0 / distance_matrix[current_route[-1], node])  # Inverse distance as probability

            probabilities = np.array(probabilities)
            probabilities /= np.sum(probabilities)

            next_node = np.random.choice(feasible_nodes, p=probabilities)
            current_route.append(next_node)
            current_load += demands[next_node]
            unvisited.remove(next_node)

        # Close the final route
        current_route.append(0)
        all_routes.append(current_route)

        # Update heuristics matrix based on edges used in the routes
        for route in all_routes:
            for i in range(len(route) - 1):
                heuristics_matrix[route[i], route[i+1]] += 1
                heuristics_matrix[route[i+1], route[i]] += 1  # Symmetric

    # Normalize heuristics matrix
    heuristics_matrix /= num_samples
    return heuristics_matrix
