import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples many random routes, evaluates their feasibility with respect to capacity constraints, and then uses the frequency with which each edge appears in feasible routes to generate a heuristic matrix.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers
        customer_indices = list(range(1, n))
        random.shuffle(customer_indices)

        # Build routes respecting capacity
        routes = []
        current_route = [0]
        current_capacity = 0
        for customer in customer_indices:
            if current_capacity + demands[customer] <= capacity:
                current_route.append(customer)
                current_capacity += demands[customer]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, customer]
                current_capacity = demands[customer]
        current_route.append(0)
        routes.append(current_route)

        # Update heuristic matrix based on edges in feasible routes
        for route in routes:
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                heuristics_matrix[u, v] += 1
                heuristics_matrix[v, u] += 1  # Assuming symmetric distance matrix

    # Normalize the heuristic matrix
    heuristics_matrix = heuristics_matrix / num_samples

    return heuristics_matrix
