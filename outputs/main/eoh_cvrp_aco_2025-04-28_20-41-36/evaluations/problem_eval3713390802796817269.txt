import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm iteratively builds routes by probabilistically selecting the next nearest unvisited node while respecting capacity constraints and using a temperature parameter to control exploration.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    unvisited = set(range(1, n))
    routes = []
    temperature = 100.0 

    while unvisited:
        current_node = 0
        current_route = [0]
        current_capacity = 0
        
        while True:
            
            eligible_nodes = []
            for neighbor in unvisited:
                if current_capacity + demands[neighbor] <= capacity:
                    eligible_nodes.append(neighbor)
            
            if not eligible_nodes:
                break
            
            probabilities = []
            for neighbor in eligible_nodes:
                distance = distance_matrix[current_node, neighbor]
                probabilities.append(np.exp(-distance / temperature))
            
            probabilities = np.array(probabilities) / np.sum(probabilities)
            
            next_node = random.choices(eligible_nodes, probabilities)[0]
            
            current_route.append(next_node)
            current_capacity += demands[next_node]
            unvisited.remove(next_node)
            current_node = next_node
        
        current_route.append(0)
        routes.append(current_route)

        temperature *= 0.95 #Cooling schedule

    for route in routes:
        for i in range(len(route) - 1):
            heuristics_matrix[route[i], route[i+1]] = 1
            heuristics_matrix[route[i+1], route[i]] = 1

    return heuristics_matrix
