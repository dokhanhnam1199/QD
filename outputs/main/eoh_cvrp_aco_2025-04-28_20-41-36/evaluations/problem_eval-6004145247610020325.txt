import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm constructs routes by iteratively adding the edge that minimizes a cost function balancing distance, demand, and a penalty for approaching capacity limits.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics_matrix[i, j] = 0
                continue

            if i == 0 or j == 0:
                heuristics_matrix[i, j] = 1 / distance_matrix[i, j] if distance_matrix[i,j] > 0 else 1
                continue

            #Cost calculation
            cost = distance_matrix[i, j]

            #Demand factor
            demand_factor = demands[i] + demands[j]

            #Capacity penalty
            capacity_penalty = 0
            if demand_factor > capacity:
                capacity_penalty = 1000 #High penalty

            heuristics_matrix[i, j] = 1 / (cost + 0.1 * demand_factor + capacity_penalty) if (cost + 0.1 * demand_factor + capacity_penalty) > 0 else 1

    return heuristics_matrix
