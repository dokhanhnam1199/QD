import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm constructs routes using a nearest neighbor approach with probabilistic selection based on distance and demand, favoring shorter distances and lower loads, and updates the heuristics matrix based on edge usage.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_iterations = 500
    
    def create_route():
        unvisited = set(range(1, n))
        current_route = [0]
        current_load = 0
        
        while unvisited:
            feasible_nodes = [node for node in unvisited if current_load + demands[node] <= capacity]
            if not feasible_nodes:
                current_route.append(0)
                break
            
            probabilities = []
            for node in feasible_nodes:
                distance_score = 1 / distance_matrix[current_route[-1], node]
                demand_score = 1 - (demands[node] / capacity)
                probabilities.append(distance_score * demand_score)
            
            total_probability = sum(probabilities)
            if total_probability == 0:
              next_node = random.choice(feasible_nodes)
            else:
              probabilities = [p / total_probability for p in probabilities]
              next_node = random.choices(feasible_nodes, probabilities)[0]
            
            current_route.append(next_node)
            current_load += demands[next_node]
            unvisited.remove(next_node)
        
        current_route.append(0)
        return current_route
    
    for _ in range(num_iterations):
        route = create_route()
        for i in range(len(route) - 1):
            heuristics_matrix[route[i], route[i+1]] += 1
            heuristics_matrix[route[i+1], route[i]] += 1
            
    heuristics_matrix = heuristics_matrix / num_iterations if num_iterations > 0 else heuristics_matrix
    return heuristics_matrix
