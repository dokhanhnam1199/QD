import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm prioritizes connecting nodes with high demand that are close to the depot while penalizing exceeding capacity and long distances between nodes.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)

    # Calculate depot proximity score
    depot_proximity = np.zeros(n)
    for i in range(1, n):
        depot_proximity[i] = demands[i] / distance_matrix[0, i] if distance_matrix[0, i] > 0 else 0

    # Calculate inter-node score
    inter_node_score = np.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                if demands[i] + demands[j] > capacity:
                    inter_node_score[i, j] = -1  # High penalty for exceeding capacity
                else:
                    inter_node_score[i, j] = demands[i] + demands[j] - distance_matrix[i, j]
            else:
                inter_node_score[i, j] = -1

    # Normalize scores
    normalized_depot_proximity = depot_proximity / (np.max(depot_proximity) if np.any(depot_proximity) else 1)
    normalized_inter_node_score = inter_node_score / (np.max(inter_node_score) if np.any(inter_node_score) else 1)

    # Combine scores
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                heuristics_matrix[i, j] = normalized_depot_proximity[i] + normalized_depot_proximity[j] + normalized_inter_node_score[i, j]
            else:
                heuristics_matrix[i,j] = -1 #prevent connecting to itself

    return heuristics_matrix
