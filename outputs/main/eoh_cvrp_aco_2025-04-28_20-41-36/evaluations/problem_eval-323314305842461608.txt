import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm initializes routes as single nodes, iteratively merges routes based on a combination of savings and a stochastic factor that favors routes with less capacity until no more merges can be done.}"""
    n = len(demands)
    savings_matrix = np.zeros_like(distance_matrix)
    heuristics_matrix = np.zeros_like(distance_matrix)

    # Calculate savings matrix
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Initialize routes with individual customers
    routes = {i: [i] for i in range(1, n)}
    route_capacities = {i: demands[i] for i in range(1, n)}

    # Iteratively merge routes based on savings and stochastic factor
    while True:
        possible_merges = []
        for i in routes:
            for j in routes:
                if i != j and i < j:
                    if route_capacities[i] + route_capacities[j] <= capacity:
                        savings = savings_matrix[routes[i][-1], routes[j][0]]
                        # Add stochastic factor favoring routes with less capacity
                        stochastic_factor = 1 / (route_capacities[i] + route_capacities[j])
                        merge_score = savings + random.random() * stochastic_factor
                        possible_merges.append((merge_score, i, j))

        if not possible_merges:
            break

        possible_merges.sort(reverse=True)
        best_merge = possible_merges[0]
        best_i = best_merge[1]
        best_j = best_merge[2]
        
        if best_i in routes and best_j in routes:
            # Merge routes i and j
            routes[best_i].extend(routes[best_j])
            route_capacities[best_i] += route_capacities[best_j]
            del routes[best_j]
            del route_capacities[best_j]

    # Update heuristics matrix based on merged routes
    for route_id in routes:
        route = [0] + routes[route_id] + [0]
        for i in range(len(route) - 1):
            heuristics_matrix[route[i], route[i+1]] = 1
            heuristics_matrix[route[i+1], route[i]] = 1

    return heuristics_matrix
