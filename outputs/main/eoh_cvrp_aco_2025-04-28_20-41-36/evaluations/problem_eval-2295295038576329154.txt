import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm iteratively constructs routes by probabilistically selecting the next node based on a combination of distance and demand, favoring closer and smaller demand nodes, and updating edge frequencies in the heuristic matrix.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_iterations = 1000

    for _ in range(num_iterations):
        current_node = 0
        current_route = [0]
        remaining_nodes = set(range(1, n))
        current_capacity = capacity

        while remaining_nodes:
            probabilities = []
            nodes = []
            total_prob = 0

            for node in remaining_nodes:
                if demands[node] <= current_capacity:
                    distance = distance_matrix[current_node, node]
                    if distance == 0:
                        distance = 0.0001
                    prob = (1 / distance) * (1 / demands[node])
                    probabilities.append(prob)
                    nodes.append(node)
                    total_prob += prob

            if not nodes:
                current_route.append(0)
                current_node = 0
                current_capacity = capacity
                continue

            probabilities = [p / total_prob for p in probabilities]
            next_node = random.choices(nodes, probabilities)[0]
            current_route.append(next_node)
            remaining_nodes.remove(next_node)
            current_capacity -= demands[next_node]
            current_node = next_node

        current_route.append(0)

        for i in range(len(current_route) - 1):
            heuristics_matrix[current_route[i], current_route[i+1]] += 1
            heuristics_matrix[current_route[i+1], current_route[i]] += 1

    heuristics_matrix /= num_iterations
    return heuristics_matrix
