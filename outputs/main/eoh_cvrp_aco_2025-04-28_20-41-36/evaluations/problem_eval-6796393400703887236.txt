import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm iteratively constructs routes using a nearest neighbor approach with a probabilistic acceptance criterion based on a simulated annealing-like temperature schedule, favoring edges to closer nodes with remaining capacity, and updating edge frequencies based on route quality.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 1000
    initial_temperature = 100.0
    cooling_rate = 0.99

    for iteration in range(num_iterations):
        temperature = initial_temperature * (cooling_rate ** iteration)
        
        unvisited = set(range(1, n))
        current_route = [0]
        current_load = 0
        all_routes = []

        while unvisited:
            feasible_nodes = [node for node in unvisited if current_load + demands[node] <= capacity]

            if not feasible_nodes:
                current_route.append(0)
                all_routes.append(current_route)
                current_route = [0]
                current_load = 0
                feasible_nodes = [node for node in unvisited if current_load + demands[node] <= capacity]
                if not feasible_nodes:
                    break

            if feasible_nodes:
                # Nearest neighbor selection with probabilistic acceptance
                distances = {node: distance_matrix[current_route[-1], node] for node in feasible_nodes}
                
                best_node = min(distances, key=distances.get)
                
                # Calculate acceptance probability
                if len(current_route) > 0:
                  delta = distance_matrix[current_route[-1], best_node]
                else:
                  delta = 0
                
                acceptance_probability = np.exp(-delta / temperature)
                
                if random.random() < acceptance_probability:
                    next_node = best_node
                else:
                    # Random selection among feasible nodes
                    next_node = random.choice(feasible_nodes)

                current_route.append(next_node)
                current_load += demands[next_node]
                unvisited.remove(next_node)

        current_route.append(0)
        all_routes.append(current_route)

        route_length = sum(distance_matrix[all_routes[-1][i], all_routes[-1][i+1]] for i in range(len(all_routes[-1]) - 1)) if len(all_routes) > 0 and len(all_routes[-1]) > 1 else 0

        if route_length > 0:
            weight = 1.0 / route_length
        else:
            weight = 0.0
            
        for route in all_routes:
            for i in range(len(route) - 1):
                heuristics_matrix[route[i], route[i+1]] += weight
                heuristics_matrix[route[i+1], route[i]] += weight

    return heuristics_matrix
