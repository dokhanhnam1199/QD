import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm refines the savings approach by incorporating a penalty for exceeding capacity during route construction and prioritizing connections to nodes with higher demand relative to their distance.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    savings_matrix = np.zeros_like(distance_matrix)

    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    demand_distance_ratio = np.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                demand_distance_ratio[i, j] = (demands[i] + demands[j]) / distance_matrix[i, j]
            else:
                demand_distance_ratio[i, j] = 0
                
    penalty_matrix = np.zeros_like(distance_matrix)
    for i in range(1, n):
      for j in range(1, n):
        if i!=j:
          if demands[i] + demands[j] > capacity:
            penalty_matrix[i, j] = -1
            penalty_matrix[j, i] = -1
        else:
          penalty_matrix[i,j] = -1


    normalized_savings = savings_matrix / (np.max(savings_matrix) if np.any(savings_matrix) else 1)
    normalized_demand_distance = demand_distance_ratio / (np.max(demand_distance_ratio) if np.any(demand_distance_ratio) else 1)

    heuristics_matrix = normalized_savings + normalized_demand_distance + penalty_matrix

    return heuristics_matrix
