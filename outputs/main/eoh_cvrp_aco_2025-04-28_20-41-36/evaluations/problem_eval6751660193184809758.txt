import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    Solves the Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    {The algorithm iteratively constructs solutions by randomly sampling edges, biased towards shorter distances and feasibility, and updates a heuristic matrix based on edge inclusion frequency in good solutions.}
    """

    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_iterations = 1000
    
    for _ in range(num_iterations):
        
        routes = []
        unvisited = set(range(1, n))
        
        while unvisited:
            route = [0]  # Start at the depot
            current_capacity = capacity
            current_node = 0
            
            while True:
                
                possible_next_nodes = []
                probabilities = []
                
                for next_node in unvisited:
                    if demands[next_node] <= current_capacity:
                        possible_next_nodes.append(next_node)
                        probabilities.append(1/distance_matrix[current_node, next_node])
                
                if not possible_next_nodes:
                    break
                
                probabilities = np.array(probabilities) / np.sum(probabilities)
                next_node = np.random.choice(possible_next_nodes, p=probabilities)
                
                route.append(next_node)
                unvisited.remove(next_node)
                current_capacity -= demands[next_node]
                current_node = next_node

            route.append(0)  # Return to the depot
            routes.append(route)

        # Evaluate the solution (total distance)
        total_distance = 0
        for route in routes:
            for i in range(len(route) - 1):
                total_distance += distance_matrix[route[i], route[i+1]]

        # Update heuristic matrix based on edge usage
        if total_distance < np.inf:  # Consider only feasible solutions

            for route in routes:
                for i in range(len(route) - 1):
                    node1 = route[i]
                    node2 = route[i+1]
                    heuristics_matrix[node1, node2] += 1
                    heuristics_matrix[node2, node1] += 1  # Symmetry
    
    return heuristics_matrix
