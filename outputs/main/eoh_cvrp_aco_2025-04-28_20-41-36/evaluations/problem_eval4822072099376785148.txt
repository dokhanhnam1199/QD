import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm prioritizes routes to nodes with high demand relative to their distance from the depot while penalizing routes that lead to exceeding vehicle capacity, also favoring connections between nodes that are geographically close.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    demand_ratio_matrix = np.zeros_like(distance_matrix)
    proximity_matrix = np.zeros_like(distance_matrix)
    penalty_matrix = np.zeros_like(distance_matrix)

    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                demand_ratio_matrix[i, j] = demands[j] / distance_matrix[0, j] if distance_matrix[0, j] > 0 else 0
                proximity_matrix[i, j] = 1 / distance_matrix[i, j] if distance_matrix[i, j] > 0 else 0
            else:
                demand_ratio_matrix[i, j] = 0
                proximity_matrix[i, j] = 0
                
    for i in range(1, n):
      for j in range(1, n):
        if i!=j:
          if demands[i] + demands[j] > capacity:
            penalty_matrix[i, j] = -10
            penalty_matrix[j, i] = -10
        else:
          penalty_matrix[i,j] = -10

    normalized_demand_ratio = demand_ratio_matrix / (np.max(demand_ratio_matrix) if np.any(demand_ratio_matrix) else 1)
    normalized_proximity = proximity_matrix / (np.max(proximity_matrix) if np.any(proximity_matrix) else 1)
    heuristics_matrix = normalized_demand_ratio + normalized_proximity + penalty_matrix
    
    return heuristics_matrix
