import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm combines savings with a dynamic capacity adjustment based on remaining vehicle capacity and a location-based clustering bonus.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)

    savings_matrix = np.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                savings_matrix[i][j] = distance_matrix[0][i] + distance_matrix[0][j] - distance_matrix[i][j]

    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                remaining_capacity_i = capacity - demands[i]
                remaining_capacity_j = capacity - demands[j]

                capacity_factor = min(remaining_capacity_i, remaining_capacity_j) / capacity

                cluster_bonus = 0
                center_x = (coordinates[i][0] + coordinates[j][0]) / 2
                center_y = (coordinates[i][1] + coordinates[j][1]) / 2
                for k in range(1, n):
                    if k != i and k != j:
                        dist_to_center = np.sqrt((coordinates[k][0] - center_x)**2 + (coordinates[k][1] - center_y)**2)
                        if dist_to_center < (distance_matrix[i][j] / 2):
                            cluster_bonus += 0.1

                heuristics_matrix[i][j] = savings_matrix[i][j] * capacity_factor + cluster_bonus

    return heuristics_matrix
