import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm prioritizes connections based on a combination of distance, demand, and proximity to the depot, penalizing exceeding capacity and rewarding connections that balance route length and demand fulfillment.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)

    # Proximity to depot
    depot_proximity = np.zeros(n)
    for i in range(1, n):
        depot_proximity[i] = 1 / distance_matrix[0, i] if distance_matrix[0, i] > 0 else 0

    # Demand fulfillment potential
    demand_potential = np.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                demand_potential[i, j] = (demands[i] + demands[j]) / capacity
            else:
                demand_potential[i, j] = 0

    # Route length factor
    route_length_factor = np.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                route_length_factor[i, j] = 1 / distance_matrix[i, j] if distance_matrix[i, j] > 0 else 0
            else:
                route_length_factor[i, j] = 0

    # Capacity penalty
    capacity_penalty = np.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                if demands[i] + demands[j] > capacity:
                    capacity_penalty[i, j] = -1
            else:
                capacity_penalty[i, j] = 0

    # Normalize
    normalized_depot_proximity = depot_proximity / (np.max(depot_proximity) if np.any(depot_proximity) else 1)
    normalized_demand_potential = demand_potential / (np.max(demand_potential) if np.any(demand_potential) else 1)
    normalized_route_length_factor = route_length_factor / (np.max(route_length_factor) if np.any(route_length_factor) else 1)

    # Combine factors
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                heuristics_matrix[i, j] = 0.4 * normalized_route_length_factor[i, j] + \
                                           0.3 * normalized_demand_potential[i, j] + \
                                           0.2 * (normalized_depot_proximity[i] + normalized_depot_proximity[j]) + \
                                           0.1 * capacity_penalty[i, j]

    return heuristics_matrix
