import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples many random routes, evaluates their feasibility and cost, and then uses the frequency of edges appearing in feasible, low-cost routes to create a heuristics matrix.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        customer_indices = list(range(1, n))
        random.shuffle(customer_indices)

        routes = []
        current_route = [0]
        current_load = 0

        for customer in customer_indices:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]
                current_load = demands[customer]

        current_route.append(0)  # Return to depot at the end
        routes.append(current_route)

        # Calculate the total cost of the routes
        total_cost = 0
        for route in routes:
            for i in range(len(route) - 1):
                total_cost += distance_matrix[route[i]][route[i+1]]

        # Update heuristics matrix if the routes are feasible and have a low cost
        if total_cost > 0: #Ensure no zero division. 
            for route in routes:
                for i in range(len(route) - 1):
                    heuristics_matrix[route[i]][route[i+1]] += 1/total_cost
                    heuristics_matrix[route[i+1]][route[i]] += 1/total_cost #Symmetric

    return heuristics_matrix
