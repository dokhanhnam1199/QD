import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm uses a combination of shortest distance, demand compatibility, and proximity to the depot to create a heuristic matrix.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)

    # Normalize distances
    normalized_distances = distance_matrix / np.max(distance_matrix)

    # Demand compatibility score: Higher if combined demand is lower relative to capacity
    demand_compatibility = np.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                demand_compatibility[i, j] = max(0, 1 - (demands[i] + demands[j]) / capacity)
            else:
                demand_compatibility[i, j] = 0

    # Proximity to depot: Favor edges where both nodes are close to the depot
    depot_proximity = np.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(1, n):
            depot_proximity[i, j] = (1 - normalized_distances[0, i]) + (1 - normalized_distances[0, j])

    # Combine the factors: shortest distance is favored, with demand compatibility and depot proximity as additional bonuses
    heuristics_matrix = -normalized_distances + 0.5 * demand_compatibility + 0.3 * depot_proximity
    return heuristics_matrix
