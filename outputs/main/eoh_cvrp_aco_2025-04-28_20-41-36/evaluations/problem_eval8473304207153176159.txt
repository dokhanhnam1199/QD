import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm constructs routes incrementally by prioritizing edges that connect to nodes with high demand-to-distance ratios and penalizing edges that lead to capacity violations, averaging the usage of edges across multiple route construction attempts.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        unvisited = list(range(1, n))
        current_route = [0]
        current_load = 0
        
        while unvisited:
            # Calculate demand-to-distance ratio for each feasible node
            feasible_nodes = [node for node in unvisited if current_load + demands[node] <= capacity]
            if not feasible_nodes:
                current_route.append(0)
                current_load = 0
                feasible_nodes = [node for node in unvisited if current_load + demands[node] <= capacity]
                if not feasible_nodes:
                    break

            ratios = {}
            for node in feasible_nodes:
                ratios[node] = float(demands[node]) / distance_matrix[current_route[-1], node] if distance_matrix[current_route[-1], node] > 0 else 0

            # Select next node based on the ratio, adding some randomness
            if ratios:
                best_node = max(ratios, key=ratios.get)
                
                #Stochastic selection with bias towards best node
                probabilities = []
                for node in feasible_nodes:
                    probabilities.append(ratios[node] if node in ratios else 0.0001)  #small number so that even if the ratio is zero, the node is still considered

                probabilities = np.array(probabilities)
                probabilities /= np.sum(probabilities)
                
                next_node = np.random.choice(feasible_nodes, p=probabilities)

                current_route.append(next_node)
                current_load += demands[next_node]
                unvisited.remove(next_node)
            else:
                break
        
        current_route.append(0)

        # Update heuristics matrix
        for i in range(len(current_route) - 1):
            heuristics_matrix[current_route[i], current_route[i+1]] += 1
            heuristics_matrix[current_route[i+1], current_route[i]] += 1

    # Normalize the matrix
    heuristics_matrix /= num_samples
    return heuristics_matrix
