import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm constructs a heuristic matrix by iteratively building routes using a combination of shortest-edge selection and demand-based node prioritization, encouraging exploration of diverse, capacity-respecting solutions.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_iterations = 500

    for _ in range(num_iterations):
        # Initialize route construction
        current_node = 0  # Start at the depot
        remaining_nodes = set(range(1, n))
        current_route = [0]
        current_load = 0

        while remaining_nodes:
            # Prioritize nodes with higher demand
            demand_priorities = {node: demands[node] for node in remaining_nodes}

            # Shortest Edge Consideration + Demand Priority
            candidate_edges = []
            for neighbor in remaining_nodes:
                edge_cost = distance_matrix[current_node, neighbor]
                candidate_edges.append((current_node, neighbor, edge_cost, demand_priorities[neighbor]))

            # Sort by (edge_cost - demand), effectively prioritizing short edges to higher demand locations
            candidate_edges.sort(key=lambda x: x[2] - x[3], reverse = False)
            
            selected_neighbor = None
            for u, v, cost, demand in candidate_edges:
                if current_load + demands[v] <= capacity:
                    selected_neighbor = v
                    break
            
            if selected_neighbor is not None:
                # Add selected node to route
                current_route.append(selected_neighbor)
                current_load += demands[selected_neighbor]
                remaining_nodes.remove(selected_neighbor)
                current_node = selected_neighbor
            else:
                # Return to depot
                current_route.append(0)
                current_load = 0
                current_node = 0

        current_route.append(0) # Return to Depot

        # Update Heuristics Matrix
        for i in range(len(current_route) - 1):
            heuristics_matrix[current_route[i], current_route[i+1]] += 1
            heuristics_matrix[current_route[i+1], current_route[i]] += 1

    return heuristics_matrix
