import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples a set of random routes, evaluates their feasibility and cost, and then uses the edge frequencies from the feasible routes to construct a heuristic matrix favoring edges present in good solutions.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        customer_indices = np.random.permutation(range(1, n))

        # Construct routes based on the permutation and capacity constraint
        routes = []
        current_route = [0]  # Start at the depot
        current_capacity = 0
        
        for customer in customer_indices:
            if current_capacity + demands[customer] <= capacity:
                current_route.append(customer)
                current_capacity += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]
                current_capacity = demands[customer]
        
        current_route.append(0)
        routes.append(current_route)
        
        # Check feasibility (all customers visited)
        visited_customers = set()
        for route in routes:
            visited_customers.update(route)
        
        if all(i in visited_customers for i in range(1, n)):

            # Calculate total distance of routes
            total_distance = 0
            for route in routes:
                for i in range(len(route) - 1):
                    total_distance += distance_matrix[route[i], route[i+1]]
            
            # Update heuristic matrix if routes are feasible
            for route in routes:
                for i in range(len(route) - 1):
                    heuristics_matrix[route[i], route[i+1]] += 1
                    heuristics_matrix[route[i+1], route[i]] += 1 # Symmetry
    
    # Normalize the matrix
    if num_samples > 0:
        heuristics_matrix /= num_samples
    
    return heuristics_matrix
