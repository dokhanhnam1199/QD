import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm simulates an ant colony system, where ants probabilistically construct routes based on pheromone trails and heuristic information (distance and demand), updating pheromone levels to favor promising routes.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    pheromone_matrix = np.ones_like(distance_matrix)  # Initialize pheromone trails
    
    alpha = 1  # Pheromone importance
    beta = 2  # Heuristic importance
    rho = 0.5  # Evaporation rate
    Q = 100  # Pheromone deposit constant
    num_ants = n

    for ant in range(num_ants):
        route = [0]
        remaining_nodes = set(range(1, n))
        current_capacity = capacity
        
        while remaining_nodes:
            feasible_nodes = {node for node in remaining_nodes if demands[node] <= current_capacity}
            
            if not feasible_nodes:
                route.append(0)
                current_capacity = capacity
                feasible_nodes = {node for node in remaining_nodes if demands[node] <= current_capacity}

                if not feasible_nodes:
                    break
            
            probabilities = np.zeros(n)
            for node in feasible_nodes:
                probabilities[node] = (pheromone_matrix[route[-1], node]**alpha) * ((1/distance_matrix[route[-1], node])**beta)

            if np.sum(probabilities) == 0:
              next_node = random.choice(list(feasible_nodes))
            else:
              probabilities = probabilities / np.sum(probabilities)
              next_node = np.random.choice(n, p=probabilities)
              if next_node not in feasible_nodes:
                  continue
            

            route.append(next_node)
            remaining_nodes.remove(next_node)
            current_capacity -= demands[next_node]
        
        route.append(0)
        route_length = 0
        for i in range(len(route) - 1):
            route_length += distance_matrix[route[i], route[i+1]]

        # Update pheromones (global update)
        delta_pheromone = Q / route_length
        for i in range(len(route) - 1):
            pheromone_matrix[route[i], route[i+1]] = (1 - rho) * pheromone_matrix[route[i], route[i+1]] + rho * delta_pheromone
            pheromone_matrix[route[i+1], route[i]] = (1 - rho) * pheromone_matrix[route[i+1], route[i]] + rho * delta_pheromone

    # Summarize pheromone information as heuristic values
    heuristics_matrix = pheromone_matrix
    return heuristics_matrix
