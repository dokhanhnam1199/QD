import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm constructs routes incrementally, favoring edges to nodes with high demand-to-distance ratios and updates edge inclusion probabilities based on route feasibility and length.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        unvisited = set(range(1, n))
        current_route = [0]
        current_load = 0
        all_routes = []

        while unvisited:
            feasible_nodes = [node for node in unvisited if current_load + demands[node] <= capacity]

            if not feasible_nodes:
                current_route.append(0)
                all_routes.append(current_route)
                current_route = [0]
                current_load = 0
                feasible_nodes = [node for node in unvisited if current_load + demands[node] <= capacity]
                if not feasible_nodes:
                    break # Stop if no feasible route is possible from the start of a new route

            # Calculate demand-to-distance ratio for each feasible node
            ratios = []
            for node in feasible_nodes:
                ratios.append(demands[node] / distance_matrix[current_route[-1], node])

            # Select the next node based on the demand-to-distance ratio
            probabilities = np.array(ratios)
            probabilities /= np.sum(probabilities)

            next_node = np.random.choice(feasible_nodes, p=probabilities)

            current_route.append(next_node)
            current_load += demands[next_node]
            unvisited.remove(next_node)

        current_route.append(0)
        all_routes.append(current_route)

        # Update heuristic matrix based on route length
        route_length = sum(distance_matrix[current_route[i], current_route[i+1]] for i in range(len(current_route) - 1))
        
        for route in all_routes:
            for i in range(len(route) - 1):
                heuristics_matrix[route[i], route[i+1]] += (1/ route_length)
                heuristics_matrix[route[i+1], route[i]] += (1/ route_length)

    heuristics_matrix /= num_samples
    return heuristics_matrix
