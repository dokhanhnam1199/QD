import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm combines random route sampling with a guided search based on demand, distance, and route feasibility, creating a heuristic matrix that favors edges appearing in feasible, demand-sensitive routes.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 500

    for _ in range(num_samples):
        current_node = 0
        current_route = [0]
        remaining_nodes = set(range(1, n))
        current_capacity = capacity
        
        while remaining_nodes:
            # Calculate a score for each feasible node
            node_scores = {}
            for node in remaining_nodes:
                if demands[node] <= current_capacity:
                    score = (demands[node] / distance_matrix[current_node, node]) # Reward demand and penalize distance
                    node_scores[node] = score

            if not node_scores:  # No feasible nodes, return to depot
                current_route.append(0)
                current_capacity = capacity
                current_node = 0
                continue

            # Select the next node based on the score (weighted random choice)
            
            best_node = max(node_scores, key=node_scores.get)
            
            current_route.append(best_node)
            remaining_nodes.remove(best_node)
            current_capacity -= demands[best_node]
            current_node = best_node

        current_route.append(0)

        for i in range(len(current_route) - 1):
            u = current_route[i]
            v = current_route[i+1]
            heuristics_matrix[u, v] += 1
            heuristics_matrix[v, u] += 1
    
    heuristics_matrix = heuristics_matrix / num_samples
    return heuristics_matrix
