import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm constructs multiple random routes, evaluates their feasibility and cost, and updates a heuristic matrix based on edge frequencies in feasible solutions, favoring shorter edges and penalizing edges that lead to capacity violations.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 100  # Number of random routes to generate
    
    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        permutation = list(range(1, n))
        random.shuffle(permutation)

        routes = []
        current_route = [0]
        current_capacity = 0
        
        for customer in permutation:
            if current_capacity + demands[customer] <= capacity:
                current_route.append(customer)
                current_capacity += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]
                current_capacity = demands[customer]

        current_route.append(0)
        routes.append(current_route)
        
        # Evaluate the feasibility and cost of the routes
        is_feasible = True
        for route in routes:
            total_demand = sum(demands[i] for i in route)
            if total_demand > capacity:
                is_feasible = False
                break

        if is_feasible:
            # Update the heuristic matrix based on edge frequencies
            for route in routes:
                for i in range(len(route) - 1):
                    u = route[i]
                    v = route[i+1]
                    heuristics_matrix[u, v] += 1
                    heuristics_matrix[v, u] += 1  # Assuming symmetric distance matrix

    # Incorporate distance information into the heuristic matrix
    # Favor shorter edges
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] /= (distance_matrix[i, j] + 1e-6)  # Avoid division by zero

    return heuristics_matrix
