import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm constructs routes using an Ant Colony Optimization approach, where ants probabilistically choose nodes based on distance and pheromone levels, iteratively updating pheromone trails based on route quality.}"""
    n = len(demands)
    pheromone_matrix = np.ones_like(distance_matrix)  # Initialize pheromone levels
    heuristics_matrix = np.zeros_like(distance_matrix)
    alpha = 1  # Pheromone influence
    beta = 2   # Distance influence
    rho = 0.5  # Evaporation rate
    Q = 100    # Pheromone deposit constant
    num_ants = 10

    for ant in range(num_ants):
        routes = []
        remaining_nodes = set(range(1, n))
        current_route = [0]
        current_capacity = capacity

        while remaining_nodes:
            probabilities = np.zeros(n)
            for node in remaining_nodes:
                if demands[node] <= current_capacity:
                    probabilities[node] = (pheromone_matrix[current_route[-1]][node]**alpha) / (distance_matrix[current_route[-1]][node]**beta) if distance_matrix[current_route[-1]][node] > 0 else (pheromone_matrix[current_route[-1]][node]**alpha)
                else:
                    probabilities[node] = 0

            if np.sum(probabilities[list(remaining_nodes)]) == 0:
                 current_route.append(0)
                 routes.append(current_route)
                 current_route = [0]
                 current_capacity = capacity
                 continue

            probabilities = probabilities / np.sum(probabilities[list(remaining_nodes)])
            next_node = random.choices(list(range(n)), weights=probabilities, k=1)[0]

            if next_node not in remaining_nodes:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_capacity = capacity
                continue

            current_route.append(next_node)
            remaining_nodes.remove(next_node)
            current_capacity -= demands[next_node]
        current_route.append(0)
        routes.append(current_route)
        
        total_distance = 0
        for route in routes:
            for i in range(len(route)-1):
                total_distance += distance_matrix[route[i]][route[i+1]]
        
        delta_pheromone = Q / total_distance if total_distance > 0 else 0
        for route in routes:
            for i in range(len(route) - 1):
                pheromone_matrix[route[i]][route[i+1]] += delta_pheromone
                pheromone_matrix[route[i+1]][route[i]] += delta_pheromone
        
        pheromone_matrix = (1 - rho) * pheromone_matrix

    for i in range(n):
        for j in range(n):
            heuristics_matrix[i,j] = pheromone_matrix[i,j] / distance_matrix[i, j] if distance_matrix[i,j] > 0 else pheromone_matrix[i,j]
    return heuristics_matrix
