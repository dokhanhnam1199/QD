import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm constructs routes using a randomized nearest neighbor approach, evaluates their cost, and then creates a heuristic matrix that favors edges present in lower-cost routes and edges connecting nodes that are geographically close to each other.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_routes = 10
    alpha = 0.6

    routes = []
    for _ in range(num_routes):
        unvisited = set(range(1, n))
        current_route = [0]
        current_load = 0

        while unvisited:
            feasible_nodes = [node for node in unvisited if current_load + demands[node] <= capacity]

            if not feasible_nodes:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_load = 0
                feasible_nodes = [node for node in unvisited if current_load + demands[node] <= capacity]
                if not feasible_nodes:
                    break

            # Randomized Nearest Neighbor
            distances = [distance_matrix[current_route[-1], node] for node in feasible_nodes]
            min_distance = min(distances)
            nearby_nodes = [feasible_nodes[i] for i, dist in enumerate(distances) if dist <= 1.1 * min_distance]  # consider nodes within 10% of the min distance
            next_node = random.choice(nearby_nodes)

            current_route.append(next_node)
            current_load += demands[next_node]
            unvisited.remove(next_node)

        current_route.append(0)
        routes.append(current_route)

    route_distances = []
    for route in routes:
        route_distance = 0
        for i in range(len(route) - 1):
            route_distance += distance_matrix[route[i], route[i+1]]
        route_distances.append(route_distance)

    min_distance = min(route_distances) if route_distances else 0

    for route, distance in zip(routes, route_distances):
        if min_distance > 0:
            if distance <= 1.2 * min_distance:
                for i in range(len(route) - 1):
                    heuristics_matrix[route[i], route[i+1]] += 1
                    heuristics_matrix[route[i+1], route[i]] += 1

    # Geographic Proximity Component
    proximity = np.zeros_like(distance_matrix, dtype=float)
    for i in range(1, n):
        for j in range(i + 1, n):
            dist = np.linalg.norm(coordinates[i] - coordinates[j])
            proximity[i, j] = 1 / (1 + dist)
            proximity[j, i] = proximity[i, j]
    
    # Combine Route Frequency and Geographic Proximity
    max_heuristic = np.max(heuristics_matrix) if np.max(heuristics_matrix) > 0 else 1
    normalized_heuristic = heuristics_matrix / max_heuristic

    max_proximity = np.max(proximity) if np.max(proximity) > 0 else 1
    normalized_proximity = proximity / max_proximity

    heuristics_matrix = alpha * normalized_heuristic + (1 - alpha) * normalized_proximity

    return heuristics_matrix
