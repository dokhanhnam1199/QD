import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm iteratively refines routes by probabilistically selecting edges based on a combination of distance, demand feasibility, and route similarity, favoring edges that connect geographically close nodes and improve route balance.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_iterations = 100
    alpha = 0.7
    beta = 0.3

    for _ in range(num_iterations):
        routes = []
        unvisited_nodes = set(range(1, n))

        while unvisited_nodes:
            current_route = [0]
            current_capacity = capacity
            
            while True:
                possible_edges = []
                for node in range(1,n):
                    if node in unvisited_nodes and demands[node] <= current_capacity:
                         possible_edges.append(node)
                
                if not possible_edges:
                    break
                
                probabilities = []
                for next_node in possible_edges:
                    distance_factor = np.exp(-alpha * distance_matrix[current_route[-1]][next_node])
                    feasibility_factor = np.exp(beta * (demands[next_node] / current_capacity)) if current_capacity > 0 else 0
                    route_similarity = 1.0
                    for route in routes:
                        if next_node in route:
                            route_similarity = 0.1
                    probabilities.append(distance_factor * feasibility_factor * route_similarity)
                
                total_prob = sum(probabilities)
                if total_prob > 0:
                    probabilities = [p / total_prob for p in probabilities]
                    next_node = random.choices(possible_edges, probabilities)[0]
                else:
                    break

                current_route.append(next_node)
                unvisited_nodes.remove(next_node)
                current_capacity -= demands[next_node]
            
            current_route.append(0)
            routes.append(current_route)
        
        for route in routes:
            for i in range(len(route) - 1):
                heuristics_matrix[route[i], route[i+1]] += 1
                heuristics_matrix[route[i+1], route[i]] += 1

    return heuristics_matrix
