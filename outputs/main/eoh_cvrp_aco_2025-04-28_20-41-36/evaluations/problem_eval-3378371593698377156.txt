import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm iteratively builds routes by randomly selecting a starting node, greedily adding the nearest feasible node until capacity is reached, and repeating the process until all nodes are visited.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    unvisited = set(range(1, n))
    routes = []

    while unvisited:
        # Randomly select a starting node
        start_node = random.choice(list(unvisited))
        current_route = [start_node]
        current_capacity = demands[start_node]
        unvisited.remove(start_node)

        while True:
            # Find the nearest feasible node
            nearest_node = None
            min_distance = float('inf')
            for node in unvisited:
                if current_capacity + demands[node] <= capacity:
                    distance = distance_matrix[current_route[-1], node]
                    if distance < min_distance:
                        min_distance = distance
                        nearest_node = node

            if nearest_node is None:
                break

            # Add the nearest node to the route
            current_route.append(nearest_node)
            current_capacity += demands[nearest_node]
            unvisited.remove(nearest_node)
        
        routes.append(current_route)

    # Update heuristics matrix based on the routes
    for route in routes:
        full_route = [0] + route + [0]
        for i in range(len(full_route) - 1):
            heuristics_matrix[full_route[i], full_route[i+1]] = 1
            heuristics_matrix[full_route[i+1], full_route[i]] = 1

    return heuristics_matrix
