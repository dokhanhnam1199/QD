import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm iteratively builds routes by probabilistically selecting the next node based on a combination of distance and demand, favoring closer nodes with smaller demands, and uses the resulting routes to generate the heuristics matrix.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    routes = []
    unvisited_nodes = set(range(1, n))
    
    while unvisited_nodes:
        current_route = [0]
        current_capacity = capacity
        current_node = 0
        
        while True:
            feasible_nodes = {node for node in unvisited_nodes if demands[node] <= current_capacity}
            if not feasible_nodes:
                break
            
            # Calculate probabilities based on distance and demand
            probabilities = []
            total_prob = 0
            for node in feasible_nodes:
                # Closer nodes and smaller demands have higher probability
                prob = (1 / distance_matrix[current_node][node]) * (1 / demands[node])
                probabilities.append((node, prob))
                total_prob += prob
            
            if total_prob == 0:  # Handle the case where total_prob is zero
                next_node = random.choice(list(feasible_nodes))
            else:
                # Normalize probabilities
                probabilities = [(node, prob / total_prob) for node, prob in probabilities]
                
                # Choose next node based on probabilities
                next_node = random.choices([node for node, prob in probabilities], [prob for node, prob in probabilities], k=1)[0]
            
            current_route.append(next_node)
            unvisited_nodes.remove(next_node)
            current_capacity -= demands[next_node]
            current_node = next_node
        
        current_route.append(0)
        routes.append(current_route)
    
    # Update heuristics matrix based on the routes
    for route in routes:
        for i in range(len(route) - 1):
            heuristics_matrix[route[i], route[i+1]] = 1
            heuristics_matrix[route[i+1], route[i]] = 1
    
    return heuristics_matrix
