import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples many random routes, evaluates their feasibility with respect to capacity constraints, and then calculates a heuristic matrix representing the frequency with which each edge appears in feasible routes.}
    """
    n = len(demands)
    num_samples = 1000  # Adjust as needed
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        customer_permutation = list(range(1, n))
        random.shuffle(customer_permutation)

        # Construct routes based on capacity constraints
        routes = []
        current_route = [0]  # Start at the depot
        current_demand = 0

        for customer in customer_permutation:
            if current_demand + demands[customer] <= capacity:
                current_route.append(customer)
                current_demand += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]  # Start a new route
                current_demand = demands[customer]

        if current_route:
            current_route.append(0)
            routes.append(current_route)

        # Update heuristics matrix based on edges in feasible routes
        for route in routes:
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i + 1]
                heuristics_matrix[u, v] += 1
                heuristics_matrix[v, u] += 1  # Symmetric matrix

    # Normalize the heuristics matrix (optional, but can be helpful)
    heuristics_matrix = heuristics_matrix / num_samples

    return heuristics_matrix
