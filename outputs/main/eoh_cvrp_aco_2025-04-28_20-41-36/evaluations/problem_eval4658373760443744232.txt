import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm constructs routes greedily, then uses these routes to create a heuristic matrix that prioritizes edges frequently appearing in the best-performing routes, and edges that connect nodes with correlated demands.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_routes = 10
    alpha = 0.5 

    routes = []
    for _ in range(num_routes):
        unvisited = set(range(1, n))
        current_route = [0]
        current_load = 0

        while unvisited:
            feasible_nodes = [node for node in unvisited if current_load + demands[node] <= capacity]

            if not feasible_nodes:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_load = 0
                feasible_nodes = [node for node in unvisited if current_load + demands[node] <= capacity]
                if not feasible_nodes:
                    break

            next_node = min(feasible_nodes, key=lambda node: distance_matrix[current_route[-1], node])
            current_route.append(next_node)
            current_load += demands[next_node]
            unvisited.remove(next_node)

        current_route.append(0)
        routes.append(current_route)

    route_distances = []
    for route in routes:
        route_distance = 0
        for i in range(len(route) - 1):
            route_distance += distance_matrix[route[i], route[i+1]]
        route_distances.append(route_distance)

    min_distance = min(route_distances) if route_distances else 0
    
    for route, distance in zip(routes, route_distances):
        if min_distance > 0:
            if distance <= 1.2 * min_distance:
                for i in range(len(route) - 1):
                    heuristics_matrix[route[i], route[i+1]] += 1
                    heuristics_matrix[route[i+1], route[i]] += 1

    # Demand Correlation Component
    demand_correlation = np.zeros_like(distance_matrix, dtype=float)
    for i in range(1, n):
        for j in range(i + 1, n):
            correlation = 1 / (1 + abs(demands[i] - demands[j]))
            demand_correlation[i, j] = correlation
            demand_correlation[j, i] = correlation
            
    # Combine Route Frequency and Demand Correlation
    max_heuristic = np.max(heuristics_matrix) if np.max(heuristics_matrix) > 0 else 1
    normalized_heuristic = heuristics_matrix / max_heuristic

    max_correlation = np.max(demand_correlation) if np.max(demand_correlation) > 0 else 1
    normalized_correlation = demand_correlation / max_correlation

    heuristics_matrix = alpha * normalized_heuristic + (1 - alpha) * normalized_correlation
    
    return heuristics_matrix
