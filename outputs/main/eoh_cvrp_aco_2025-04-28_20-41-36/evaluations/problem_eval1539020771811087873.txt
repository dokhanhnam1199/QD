import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm constructs a Clarke-Wright savings matrix, then iteratively merges nodes based on a weighted combination of savings and distance, prioritizing shorter routes while respecting capacity constraints, and updates a heuristics matrix based on the merged routes.}
    """
    n = len(demands)
    savings_matrix = np.zeros_like(distance_matrix)
    heuristics_matrix = np.zeros_like(distance_matrix)

    # Calculate savings matrix
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Initialize routes with individual customers
    routes = {i: [i] for i in range(1, n)}
    route_capacities = {i: demands[i] for i in range(1, n)}

    # Iteratively merge routes based on savings and distance
    while True:
        best_score = -1
        best_i = None
        best_j = None

        for i in routes:
            for j in routes:
                if i != j and i < j:
                    if route_capacities[i] + route_capacities[j] <= capacity:
                        # Weighted score: savings - distance
                        score = savings_matrix[routes[i][-1], routes[j][0]] - 0.1 * distance_matrix[routes[i][-1], routes[j][0]]
                        if score > best_score:
                            best_score = score
                            best_i = i
                            best_j = j

        if best_score > -1:
            # Merge routes i and j
            routes[best_i].extend(routes[best_j])
            route_capacities[best_i] += route_capacities[best_j]
            del routes[best_j]
            del route_capacities[best_j]
        else:
            break

    # Update heuristics matrix based on merged routes
    for route_id in routes:
        route = [0] + routes[route_id] + [0]
        for i in range(len(route) - 1):
            heuristics_matrix[route[i], route[i+1]] = 1
            heuristics_matrix[route[i+1], route[i]] = 1

    return heuristics_matrix
