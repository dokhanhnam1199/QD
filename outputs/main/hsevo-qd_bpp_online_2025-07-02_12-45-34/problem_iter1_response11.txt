```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version considers multiple factors when assigning priority,
    attempting to balance bin utilization and avoid excessive fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # 1. Suitability: How well does the item fit in the bin? Higher is better.
    suitability = bins_remain_cap - item  # Remaining capacity after placing item
    suitability[suitability < 0] = -np.inf # Make bins that don't fit have very low priority

    # 2. Fullness: Encourage filling bins as much as possible. Higher is better.
    fullness = 1 - (bins_remain_cap - item) / np.max(bins_remain_cap) # Fill percentage
    fullness[bins_remain_cap < item] = 0 # No fullness if it doesn't fit
    fullness = np.clip(fullness, 0, 1) # Ensure values are within range

    # 3. Fragmentation Avoidance: Penalize leaving small gaps. Lower is better.
    fragmentation = np.abs(bins_remain_cap - item) # Remaining space - how much frag?
    fragmentation[bins_remain_cap < item] = np.inf # Penalize impossible cases

    # 4. Relative filling, inspired by "relative": item size relative to remaining capacity, but sigmoid scaled.
    relative_filling = 1 / (1 + np.exp(-5 * ((item / bins_remain_cap)- 0.5)))
    relative_filling[bins_remain_cap < item] = 0

    # Combine these factors with weights. These weights can be tuned!
    # Heuristically picked, inspired by physical processes and conservation laws.
    alpha = 0.4  # Importance of suitability
    beta  = 0.3 # Importance of fullness
    gamma = 0.2 # Importance of fragmentation avoidance
    delta = 0.1 # Importance of relative fullness

    priorities = alpha * suitability + beta * fullness - gamma * fragmentation + delta * relative_filling

    return priorities
```
