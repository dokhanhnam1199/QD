```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Employing a gravitational analogy. Bins exert a "force" on the item.
    Force is proportional to the inverse square of the "distance" where distance
    relates to difference in item and bin sizes. This encourages tighter fits
    but penalizes near-overflows strongly. Additionally consider compaction; prefer
    bins that are already significantly filled.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    epsilon = 1e-9  # Avoid division by zero and log of zero

    # Proximity-based priority. Inverse square relationship. Larger remaining cap difference -> smaller force.
    cap_diff = np.abs(bins_remain_cap - item) + epsilon
    proximity_priority = 1.0 / (cap_diff**2)

    # Heavyside step to avoid negative remaining capacity situations
    valid_placement = (bins_remain_cap - item) >= 0
    proximity_priority = proximity_priority * valid_placement

    # Compaction - prioritize filling bins that are already somewhat full, relative to total capacity.
    # Avoid placing initial items in empty bins if another bin is partially filled.
    bin_total_cap = bins_remain_cap + item #Rough estmation as the item is being considered only
    compaction_level = (bin_total_cap - bins_remain_cap + epsilon) / (bin_total_cap + epsilon) # Ratio of item size in bin vs. total size
    compaction_priority = compaction_level


    # Combine the priorities - weight the proximity more since the entire rationale relies on a valid fit.
    # And weight in compation in as well as it can improve bin usage overall
    priorities =  proximity_priority + 0.2 * compaction_priority

    return priorities
```
