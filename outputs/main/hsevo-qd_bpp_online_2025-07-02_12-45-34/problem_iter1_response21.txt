```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by the curvature of spacetime around massive objects,
    this heuristic warps the "priority space" based on both remaining
    capacity and proximity to the item's size.  It combines several
    factors:

    1.  Inverse Capacity: Bins with more remaining capacity are generally
        preferred, but this effect diminishes as capacity increases.  A
        logarithmic scaling captures this.

    2.  Good Fit:  Bins where the item *almost* fills the remaining capacity
        are strongly favored. A Gaussian-like curve (squared difference)
        penalizes deviations from a perfect fit. The closer to a "perfect fit,"
        the higher the priority.

    3.  Avoid Overflow: Bins where the item *doesn't* fit get a very negative
        priority.

    4. A scaling factor (alpha) adjusts the relative importance of fitting items precisely (item size to bin size matching).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    alpha = 2.0  # Adjusts the importance of "perfect fit". Higher = more important.
    epsilon = 1e-9  # Avoid division by zero and log(0)

    # 1. Inverse Capacity (with diminishing returns)
    capacity_priority = np.log(bins_remain_cap + epsilon)

    # 2. Good Fit (Gaussian-like curve)
    fit_deviation = (bins_remain_cap - item)**2
    fit_priority = -alpha * fit_deviation

    # 3. Avoid Overflow
    overflow_priority = np.where(item > bins_remain_cap, -1e9, 0) # Very negative priority for overflow

    # Combine the priorities
    total_priority = capacity_priority + fit_priority + overflow_priority

    return total_priority
```
