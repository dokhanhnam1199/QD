```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins considering waste, overflow, fullness, item size relative to bin sizes, and adaptive strategies.
    This version includes adaptive weighting based on item size and bin capacity distribution.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    avg_cap = np.mean(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    min_cap = np.min(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    capacity_std = np.std(bins_remain_cap) if len(bins_remain_cap) > 1 else 0.0  # standard deviation of capacities

    # --- Adaptive Weighting Factors ---
    # These weights adjust based on item size and bin characteristics
    fit_reward_base = 1.2
    overflow_penalty_base = 0.6
    fullness_bonus_base = 0.25
    close_fit_boost_base = 0.8
    empty_bin_penalty_base = 0.3
    item_size_penalty_factor_base = 0.5
    std_dev_penalty_base = 0.05

    # Adaptive adjustment based on item size
    item_size_ratio = item / max_cap  # Ratio of item size to max bin capacity

    fit_reward = fit_reward_base * (1 + 0.2 * item_size_ratio)  # Larger items, more reward for fitting
    overflow_penalty = overflow_penalty_base * (1 + 0.1 * item_size_ratio)  # Larger items, higher overflow penalty
    item_size_penalty_factor = item_size_penalty_factor_base * (1 - 0.3 * item_size_ratio) # Smaller items, less penalty
    
    # Adjust empty bin penalty based on capacity std dev
    empty_bin_penalty = empty_bin_penalty_base * (1 + 0.1 * (capacity_std / (max_cap + 0.000001)))

    std_dev_penalty = std_dev_penalty_base * (1 + 0.1 * item_size_ratio)

    # --- Core Priority Calculations (Similar to v1 with adaptive weights) ---

    # Reward bins where the item fits
    fit_mask = waste >= 0
    priorities[fit_mask] += fit_reward / (waste[fit_mask] + 0.000001)

    # Penalize overflow, relative to the maximum bin capacity
    overflow_mask = ~fit_mask
    overflow = item - bins_remain_cap[overflow_mask]
    priorities[overflow_mask] -= overflow_penalty * overflow / (max_cap + 0.000001)

    # Bonus for bins that are already relatively full
    fullness = 1 - bins_remain_cap / (max_cap+0.000001)
    priorities += fullness_bonus_base * fullness  #Use base value for fullness_bonus

    # Further boost bins with small waste, using a ratio-based approach
    close_fit_threshold = 0.2 * max_cap
    close_fit_mask = fit_mask & (waste <= close_fit_threshold)
    if np.any(close_fit_mask):
        ratios = item / bins_remain_cap[close_fit_mask]
        priorities[close_fit_mask] += close_fit_boost_base * np.log(ratios) # Use base value for close_fit_boost

    # Adaptive Empty Bin Handling: Penalize near-empty bins less if item is large
    near_empty_mask = bins_remain_cap > (0.9 * max_cap)
    if item > 0.5 * max_cap:  # If item is relatively large
        priorities[near_empty_mask] -= 0.05 * empty_bin_penalty  # Reduced penalty
    else:
        priorities[near_empty_mask] -= empty_bin_penalty  # Standard penalty

    # Item Size Relative to Bin Size Penalty:
    slightly_larger_mask = fit_mask & (waste < (0.5 * item))
    priorities[slightly_larger_mask] -= item_size_penalty_factor * (item / (max_cap + 0.000001))

    #Bin Diversity Consideration
    cap_diff = np.abs(bins_remain_cap - avg_cap)
    diversity_bonus = 0.01 * (max_cap - cap_diff) # Bias toward bins that have capacities closer to the average
    priorities += diversity_bonus
    
    # Capacity standard deviation penalty.
    priorities -= std_dev_penalty * capacity_std / (max_cap + 0.000001)

    return priorities
```
