```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste, overflow, fullness, and item size."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0

    # Fit: Smaller waste, higher priority + fullness
    fit_mask = waste >= 0
    if np.any(fit_mask):
        fill_ratio = (bins_remain_cap[fit_mask] - waste[fit_mask]) / bins_remain_cap[fit_mask]
        priorities[fit_mask] = (1 / (waste[fit_mask] + 0.000001)) * (1 + fill_ratio)

    # Adjust priority based on item size
    large_item_threshold = 0.5 * max_cap
    if item > large_item_threshold and np.any(fit_mask):
        priorities[fit_mask] *= (bins_remain_cap[fit_mask] / max_cap)

    # Overflow: Smaller overflow, less penalty
    overflow_mask = ~fit_mask
    overflow = item - bins_remain_cap[overflow_mask]
    priorities[overflow_mask] = -overflow / (max_cap + 0.000001)

    # Close fit bonus
    close_fit_mask = (bins_remain_cap >= (item - 0.1 * item)) & (bins_remain_cap <= (item + 0.1 * item)) & fit_mask
    priorities[close_fit_mask] += 0.5

    # Bonus for bins that are already relatively full
    fullness = 1 - bins_remain_cap / (max_cap+0.000001)
    priorities += 0.1 * fullness

    # Further boost bins with small waste, using a ratio-based approach
    close_fit_mask2 = fit_mask & (waste <= (0.2 * max_cap)) #tune threshold
    if np.any(close_fit_mask2):  # Check if close_fit_mask is not empty
        ratios = item / bins_remain_cap[close_fit_mask2]
        priorities[close_fit_mask2] += 0.5 * np.log(ratios)  # Boost priority

    return priorities
```
