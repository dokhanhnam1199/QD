```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste minimization and overflow penalty."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    fit_mask = waste >= 0
    overflow_mask = ~fit_mask
    priorities[fit_mask] = 1 / (waste[fit_mask] + 0.000001)
    priorities[overflow_mask] = - (item - bins_remain_cap[overflow_mask]) / (np.max(bins_remain_cap) + 0.000001)
    # Scale to be between zero and one for normalization
    priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities) + 0.000001)
    # Emphasize nearly full bins
    nearly_full = (bins_remain_cap > 0) & (bins_remain_cap <= item)
    priorities[nearly_full] += 0.5  # Give preference to bins that can almost accommodate the item
    return priorities
```
