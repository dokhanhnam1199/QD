```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Feasibility: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        # If no bin fits, prioritize the fullest bin for a new bin (handled upstream).
        return priorities

    
    # Remaining capacity after adding the item. Set to -1 if item doesn't fit
    remaining_capacity = np.where(feasible_bins, bins_remain_cap - item, -1)

    # Prioritize bins that leave a smaller gap after placing the item.
    priorities[feasible_bins] = 1 / (remaining_capacity[feasible_bins] + 0.000001) # Avoid division by zero

    # Slightly prioritize bins with capacities closest to item size to avoid fragmentation.
    capacity_diff = np.abs(bins_remain_cap - item)
    priorities[feasible_bins] += 1 / (capacity_diff[feasible_bins] + 0.000001) # Avoid division by zero
    

    return priorities
```
