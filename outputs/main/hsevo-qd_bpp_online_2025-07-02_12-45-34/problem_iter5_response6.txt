```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization with fullness bonus."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item

    fit_mask = waste >= 0
    priorities[fit_mask] = 1 / (waste[fit_mask] + 0.000001)

    overflow_mask = ~fit_mask
    overflow = item - bins_remain_cap[overflow_mask]
    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    priorities[overflow_mask] = - overflow / (max_cap + 0.000001)

    fullness = 1 - bins_remain_cap / (np.max(bins_remain_cap)+0.000001)
    priorities += 0.1 * fullness

    # Adaptive scaling: reduce influence of fullness for small items
    item_ratio_to_bin = item / max_cap
    fullness_scaling = min(1.0, item_ratio_to_bin * 5)  # scale up to 1
    priorities -= 0.1 * fullness * (1 - fullness_scaling)

    return priorities
```
