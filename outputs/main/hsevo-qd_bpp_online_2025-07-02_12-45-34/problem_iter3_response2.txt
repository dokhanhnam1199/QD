```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)

    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item

    # Give high priority to bins where item fits and waste is minimized
    fit_mask = waste >= 0
    waste_values = waste[fit_mask]
    if len(waste_values) > 0:
        min_waste = np.min(waste_values)
        priorities[fit_mask] = (1 / (waste_values + 0.000001)) * (1 + (min_waste / (waste_values + 0.000001))) # Boost priority for bins closer to the minimum waste
    
    # Give slightly lower priority to bins where item doesn't fit, but the overflow is minimized
    # This encourages splitting items across bins less often but still allows it when needed
    overflow_mask = ~fit_mask
    overflow_amount = item - bins_remain_cap[overflow_mask]
    
    if np.any(overflow_mask):
        max_bin_capacity = np.max(bins_remain_cap)
        min_overflow = np.min(overflow_amount)
        priorities[overflow_mask] = -overflow_amount / (max_bin_capacity + 0.000001) #Prioritize bins closer to fitting the item
        priorities[overflow_mask] = priorities[overflow_mask] * (1 - (min_overflow / (overflow_amount + 0.000001)))


    # Introduce a bin utilization factor
    bin_utilization = (np.sum(bins_remain_cap) - np.sum(bins_remain_cap[bins_remain_cap > 0]))/ (num_bins * np.max(bins_remain_cap))
    priorities = priorities * (1 + bin_utilization)
    
    return priorities
```
