```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering waste, fullness, diversity, and item size."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    avg_cap = np.mean(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    min_cap = np.min(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    capacity_std = np.std(bins_remain_cap) if len(bins_remain_cap) > 1 else 0.0

    # Adaptive weights
    fit_reward_weight = 1.1
    overflow_penalty_weight = 0.6
    fullness_bonus_weight = 0.4
    close_fit_boost_weight = 0.8
    empty_bin_penalty_weight = 0.3
    item_size_penalty_weight = 0.5
    std_dev_penalty_weight = 0.05
    diversity_bonus_weight = 0.02

    close_fit_threshold = 0.2

    # Adjust weights based on item size
    if item > 0.7 * max_cap:
        fit_reward_weight *= 1.05
        overflow_penalty_weight *= 0.95
        close_fit_boost_weight *= 0.8
    elif item < 0.3 * max_cap:
        fullness_bonus_weight *= 1.1
        empty_bin_penalty_weight *= 1.2
        item_size_penalty_weight *= 0.7

    # Reward fitting bins
    fit_mask = waste >= 0
    priorities[fit_mask] += fit_reward_weight / (waste[fit_mask] + 0.000001)

    # Penalize overflow
    overflow_mask = ~fit_mask
    overflow = item - bins_remain_cap[overflow_mask]
    priorities[overflow_mask] -= overflow_penalty_weight * overflow / (max_cap + 0.000001)

    # Bonus for fullness
    fullness = 1 - bins_remain_cap / (max_cap + 0.000001)
    priorities += fullness_bonus_weight * fullness

    # Boost close fits
    close_fit_mask = fit_mask & (waste <= (close_fit_threshold * max_cap))
    if np.any(close_fit_mask):
        ratios = item / bins_remain_cap[close_fit_mask]
        priorities[close_fit_mask] += close_fit_boost_weight * np.log(ratios)

    # Empty bin penalty
    near_empty_mask = bins_remain_cap > (0.9 * max_cap)
    if item > 0.5 * max_cap:
        priorities[near_empty_mask] -= 0.05 * empty_bin_penalty_weight
    else:
        priorities[near_empty_mask] -= empty_bin_penalty_weight

    # Item size penalty
    slightly_larger_mask = fit_mask & (waste < (0.5 * item))
    priorities[slightly_larger_mask] -= item_size_penalty_weight * (item / (max_cap + 0.000001))

    # Diversity bonus
    cap_diff = np.abs(bins_remain_cap - avg_cap)
    diversity_bonus = diversity_bonus_weight * (max_cap - cap_diff)
    priorities += diversity_bonus

    # Capacity standard deviation penalty
    priorities -= std_dev_penalty_weight * capacity_std / (max_cap + 0.000001)

    return priorities
```
