```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering waste, overflow, fullness, and bin diversity."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item

    # --- Fit Considerations ---
    fit_mask = waste >= 0
    if np.any(fit_mask):
        # Initial fit priority: favor smaller waste
        priorities[fit_mask] = 1 / (waste[fit_mask] + 0.000001)

        # Adaptive Waste Threshold: Adjust importance based on item size
        max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
        waste_threshold = 0.1 * max_cap  #tuneable.  Relative to max_cap instead of item
        small_waste_mask = fit_mask & (waste <= waste_threshold)
        if np.any(small_waste_mask):
            # Ratio-based boost for very close fits, but tempered
            ratios = item / bins_remain_cap[small_waste_mask]
            priorities[small_waste_mask] += 0.7 * np.log(ratios) #Tune boost strength

        # Encourage balanced bin usage: slightly favor bins that are not too empty
        # This can help avoid creating many nearly-empty bins at the end
        almost_empty_threshold = 0.9 * max_cap #tuneable
        not_too_empty_mask = fit_mask & (bins_remain_cap < almost_empty_threshold) #only apply to bins item fits into
        priorities[not_too_empty_mask] += 0.2 * (1 - bins_remain_cap[not_too_empty_mask] / almost_empty_threshold) #tune bonus size

    # --- Overflow Handling ---
    overflow_mask = ~fit_mask
    if np.any(overflow_mask):
        overflow = item - bins_remain_cap[overflow_mask]
        max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
        priorities[overflow_mask] = - overflow / (max_cap + 0.000001)  # Basic penalty

        # Add a penalty that grows faster with overflow: discourage large overflows
        priorities[overflow_mask] -= 0.5 * (overflow / (max_cap + 0.000001))**2 #Tune rate of growth

    # --- Fullness Consideration ---
    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    fullness = 1 - bins_remain_cap / (max_cap + 0.000001)
    priorities += 0.1 * fullness  # Overall bonus for fullness

    # --- Bin Diversity Encouragement ---
    # Attempt to balance bin usage by adding a small bonus to less-used bins
    # This can prevent over-filling some bins while others remain empty
    bin_utilization = 1 - bins_remain_cap / (max_cap + 0.000001)
    avg_utilization = np.mean(bin_utilization) if len(bin_utilization) > 0 else 0.0
    priorities += 0.05 * (avg_utilization - bin_utilization) #Tune bonus size

    return priorities
```
