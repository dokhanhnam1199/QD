```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item

    # Give high priority to bins where item fits and waste is minimized
    fit_mask = waste >= 0
    
    # Prioritize bins with smaller waste, but also consider if the waste is "significant"
    # A bin with very little space remaining after packing is preferred
    waste_normalized = waste[fit_mask] / bins_remain_cap[fit_mask] # Waste as a fraction of remaining capacity
    priorities[fit_mask] = (1 / (waste[fit_mask] + 0.000001)) * (1 - waste_normalized) # Combine inverse waste with normalized waste penalty


    # Give lower priority to bins where item doesn't fit, but the overflow is minimized
    overflow_mask = ~fit_mask
    overflow = item - bins_remain_cap[overflow_mask]
    
    # Penalize overflow, but less severely if the overflow is small relative to item size
    overflow_normalized = overflow / item 
    priorities[overflow_mask] = - overflow_normalized

    # Add a tie-breaking mechanism: prioritize bins with higher remaining capacity among the viable ones.
    # This can help to distribute items more evenly initially.
    if np.any(fit_mask):
        priorities[fit_mask] += 0.00001 * bins_remain_cap[fit_mask] 

    return priorities
```
