```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version incorporates aspects of both "best fit decreasing" and
    attempts to balance bin utilization while avoiding fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # High priority for bins where the item fits with minimal waste.
    fit_mask = bins_remain_cap >= item
    waste = bins_remain_cap - item
    priorities[fit_mask] = np.exp(-waste[fit_mask] / item) # Exponential decay of priority with waste

    # Moderate negative priority for bins that are too small.  This effectively excludes them.
    priorities[~fit_mask] = -np.inf # Very Low priority when the item doesn't fit
    # Add a small bonus for bins that are relatively empty. This can improve utilization.
    # The idea is that it might be beneficial to fill partially filled bins a bit further.
    bins_total_cap = np.ones_like(bins_remain_cap) #assumes bins have cap 1.0, but generalizing for different bins may require knowing the true bin size
    priorities += 0.1 * (1-bins_remain_cap)
    return priorities
```
