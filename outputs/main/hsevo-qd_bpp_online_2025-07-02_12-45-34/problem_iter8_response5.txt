```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculates bin priorities considering waste, overflow, and fill ratio."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    fit_mask = waste >= 0
    overflow_mask = ~fit_mask

    # Fit priority: Minimize waste, reward near-full
    if np.any(fit_mask):
        priorities[fit_mask] = (bins_remain_cap[fit_mask] / (waste[fit_mask] + 1e-6))
        priorities[fit_mask] += (1 / (waste[fit_mask] + 1e-6)) # Ensure high priority on small waste.

    # Overflow priority: Minimize overflow
    if np.any(overflow_mask):
        overflow_amount = item - bins_remain_cap[overflow_mask]
        priorities[overflow_mask] = -overflow_amount / (np.max(bins_remain_cap) + 1e-6)

    #Bin balancing
    priorities += 0.0001 * bins_remain_cap/np.max(bins_remain_cap) #Prioritize bins with more cap

    return priorities
```
