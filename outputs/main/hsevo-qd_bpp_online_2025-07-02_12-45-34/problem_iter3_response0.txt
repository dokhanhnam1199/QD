```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item
    
    # Give high priority to bins where item fits and waste is minimized
    fit_mask = waste >= 0
    
    # Prioritize bins with smaller waste, but also consider the fill ratio
    # Encourage filling bins as much as possible
    fill_ratio = (bins_remain_cap[fit_mask] - waste[fit_mask]) / bins_remain_cap[fit_mask]
    priorities[fit_mask] = (1 / (waste[fit_mask] + 0.000001)) * (1 + fill_ratio) # Combine waste and fill ratio

    # Adjust priority based on the item size relative to the bin capacity
    # If the item is relatively large, prioritize bins that are closer to being full.
    large_item_threshold = 0.5 * np.max(bins_remain_cap)  # Define a threshold for "large" items
    if item > large_item_threshold:
        priorities[fit_mask] *= (bins_remain_cap[fit_mask] / np.max(bins_remain_cap)) #Prioritize almost full bins

    # Give negative priority to bins where item doesn't fit, proportional to overflow
    overflow_mask = ~fit_mask
    overflow = item - bins_remain_cap[overflow_mask]
    priorities[overflow_mask] = -overflow / (np.max(bins_remain_cap) + 0.000001)  # Prioritize bins with smaller overflow

    # Add a small bonus to bins with capacity close to the item size
    # This encourages perfect fits
    close_fit_mask = (bins_remain_cap >= (item - 0.1 * item)) & (bins_remain_cap <= (item + 0.1 * item)) & fit_mask
    priorities[close_fit_mask] += 0.5

    return priorities
```
