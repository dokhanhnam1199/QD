```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins considering waste, overflow, fullness, adaptive strategies, and bin diversity with refined hyperparameter tuning.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    avg_cap = np.mean(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    
    # Hyperparameters (Tuned using manual exploration and some optimization alg.)
    fit_reward = 1.2  # Slightly increased reward for fitting
    overflow_penalty = 0.6 # Slightly increased penalty
    fullness_bonus = 0.25 # Modestly increased bonus for fuller bins
    close_fit_boost = 0.8 # Increased boost for close fits
    close_fit_threshold = 0.15 * max_cap # Narrower threshold for close fits
    empty_bin_penalty = 0.35 # Slightly increased penalty for near-empty bins
    diversity_bonus_weight = 0.015 # Increased weight for diversity

    # Reward bins where the item fits, scaling inversely with waste
    fit_mask = waste >= 0
    priorities[fit_mask] += fit_reward / (waste[fit_mask] + 0.000001)

    # Penalize overflow, relative to the maximum bin capacity
    overflow_mask = ~fit_mask
    overflow = item - bins_remain_cap[overflow_mask]
    priorities[overflow_mask] -= overflow_penalty * overflow / (max_cap + 0.000001)

    # Bonus for bins that are already relatively full
    fullness = 1 - bins_remain_cap / (max_cap+0.000001)
    priorities += fullness_bonus * fullness

    # Further boost bins with small waste, using a ratio-based approach
    close_fit_mask = fit_mask & (waste <= (close_fit_threshold))
    if np.any(close_fit_mask):
        ratios = item / bins_remain_cap[close_fit_mask]
        priorities[close_fit_mask] += close_fit_boost * np.log(ratios)

    # Adaptive Empty Bin Handling: Penalize near-empty bins less if item is large
    near_empty_mask = bins_remain_cap > (0.9 * max_cap)
    if item > 0.5 * max_cap:  # If item is relatively large
          priorities[near_empty_mask] -= 0.05 * empty_bin_penalty #Reduced penalty
    else:
          priorities[near_empty_mask] -= empty_bin_penalty  #Standard penalty

    # Bin Diversity Consideration, slightly increased weight
    cap_diff = np.abs(bins_remain_cap - avg_cap)
    diversity_bonus = diversity_bonus_weight * (max_cap - cap_diff) # Bias toward bins that have capacities closer to the average
    priorities += diversity_bonus
    
    # Introduce a small bias towards bins with larger remaining capacity if item is small
    if item < 0.2 * max_cap:
        priorities += 0.005 * bins_remain_cap / max_cap

    return priorities
```
