```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste, overflow, and fill ratio."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    fit_mask = waste >= 0
    overflow_mask = ~fit_mask

    # Prioritize fitting bins, minimizing waste.
    priorities[fit_mask] = 1 / (waste[fit_mask] + 0.000001)

    # Penalize overflow, but less if overflow is small compared to item size
    priorities[overflow_mask] = - (item - bins_remain_cap[overflow_mask]) / (item + 0.000001)

    # Incentivize filling nearly full bins.
    fullness = 1 - bins_remain_cap / np.max(bins_remain_cap) #0 to 1
    priorities += fullness * 0.1 # add bonus
    return priorities
```
