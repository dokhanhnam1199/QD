```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version incorporates several improvements over priority_v1:
    1.  It explicitly rewards near-full bins to encourage efficient packing.
    2.  It penalizes bins that are already very empty, as adding an item to a nearly empty bin can lead to inefficient use of space.
    3.  It uses a more sophisticated overflow penalty that considers the proportion of the item that overflows.
    4.  It normalizes the priorities to prevent extreme values from dominating the selection.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap) # Assuming all bins have same capacity

    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item

    # Reward bins where the item fits well, especially those that are close to full.
    fit_mask = waste >= 0
    priorities[fit_mask] = (1 / (waste[fit_mask] + 0.000001)) + (bins_remain_cap[fit_mask] / bin_capacity)**2 # Encourage full bins. The closer the bin is to being full the higher the priority
    # Penalize bins that are too empty, as adding the item to such a bin creates a larger waste
    empty_bin_threshold = bin_capacity * 0.8  # Adjust threshold as needed
    too_empty_mask = bins_remain_cap > empty_bin_threshold
    priorities[too_empty_mask] -= 0.1  # Adjust penalty as needed. Reduce their chance of being selected.

    # Penalize overflow, but proportional to the *amount* of overflow relative to bin capacity.
    overflow_mask = ~fit_mask
    overflow_amount = item - bins_remain_cap[overflow_mask]
    priorities[overflow_mask] = - (overflow_amount / bin_capacity)**0.5 #The smaller the proportion of the item overflow the less we penalize
    # Normalize priorities to range between -1 and 1
    min_priority = np.min(priorities)
    max_priority = np.max(priorities)

    if max_priority != min_priority:
        priorities = 2 * (priorities - min_priority) / (max_priority - min_priority) - 1
    else:
        priorities = np.zeros_like(priorities) #All bins have same priority
    return priorities
```
