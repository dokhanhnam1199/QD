```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, overflow penalty, fullness bonus, and adaptive weighting."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0

    fit_reward_weight = 1.2
    overflow_penalty_weight = 0.7
    fullness_bonus_weight = 0.3
    close_fit_boost_weight = 0.9

    if item > 0.7 * max_cap:
        fit_reward_weight *= 1.1
        overflow_penalty_weight *= 0.9
    elif item < 0.3 * max_cap:
        fullness_bonus_weight *= 1.2

    fit_mask = waste >= 0
    priorities[fit_mask] += fit_reward_weight / (waste[fit_mask] + 0.000001)

    overflow_mask = ~fit_mask
    overflow = item - bins_remain_cap[overflow_mask]
    priorities[overflow_mask] -= overflow_penalty_weight * overflow / (max_cap + 0.000001)

    fullness = 1 - bins_remain_cap / (max_cap+0.000001)
    priorities += fullness_bonus_weight * fullness
    
    close_fit_threshold = 0.2 * max_cap
    close_fit_mask = fit_mask & (waste <= close_fit_threshold)
    if np.any(close_fit_mask):
        ratios = item / bins_remain_cap[close_fit_mask]
        priorities[close_fit_mask] += close_fit_boost_weight * np.log(ratios)

    return priorities
```
