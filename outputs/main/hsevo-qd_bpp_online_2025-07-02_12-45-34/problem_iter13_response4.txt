import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, fit_priority_increase: float = 0.5559989976794575, best_fit_bonus: float = 0.6834267239024153, near_full_threshold: float = 0.6425036539712877, near_full_bonus: float = 0.11765589343881167, least_overflow_bonus: float = 0.6487359495475511) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Enhanced priority function considering multiple factors for better bin packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        fit_priority_increase: Increase in priority for bins where the item fits.
        best_fit_bonus: Bonus for bins that are the best fit (minimal waste).
        near_full_threshold: Threshold for considering a bin "near full" (as a fraction of item size).
        near_full_bonus: Bonus for filling bins that are near full.
        least_overflow_bonus: Bonus for minimizing overflow when no fit is possible.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_count = len(bins_remain_cap)

    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item

    # Fit Heuristic: Prioritize bins where the item fits.
    fit_mask = waste >= 0
    if np.any(fit_mask):  # Only apply if at least one bin can fit the item
        priorities[fit_mask] = (1 / (waste[fit_mask] + 0.000001)) + fit_priority_increase  # Increate priority compared to overflow. Avoid zero division.

        # Best Fit Improvement:  Slightly boost the priority of bins with minimal waste.
        min_waste = np.min(waste[fit_mask])
        best_fit_mask = (waste == min_waste) & fit_mask
        priorities[best_fit_mask] += best_fit_bonus  # A small bonus for the best fit

        # Reward near-full bins:
        near_full_mask = (bins_remain_cap <= (item + near_full_threshold)) & fit_mask
        priorities[near_full_mask] += near_full_bonus #Big bonus for filling near-full bins.
    # Overflow Heuristic: Only used when NO bin fits.
    else:
        overflow_mask = ~fit_mask
        priorities[overflow_mask] = - (item - bins_remain_cap[overflow_mask]) / (np.max(bins_remain_cap) + 0.000001)
        # Try to balance load (least overflow)
        min_overflow = np.min(item - bins_remain_cap[overflow_mask])
        least_overflow_mask = (item - bins_remain_cap == min_overflow) & overflow_mask
        priorities[least_overflow_mask] += least_overflow_bonus #Bonus for minimizing overflow when no fit

    # Bin balancing. Incentivize bins with higher remaining capacity (avoid using bins too unevenly if possible)
    priorities += bins_remain_cap / (np.sum(bins_remain_cap) + 0.000001) #Added term for load balancing across bins

    return priorities
