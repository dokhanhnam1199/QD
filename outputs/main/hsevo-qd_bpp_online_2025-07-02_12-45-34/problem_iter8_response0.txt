```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering waste, near-fullness, and balancing."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    fit_mask = waste >= 0

    if np.any(fit_mask):
        # Prioritize fitting bins based on inverse waste.
        priorities[fit_mask] = 1 / (waste[fit_mask] + 0.000001)

        # Near-full bonus.
        near_full_threshold = 0.1
        near_full_mask = (bins_remain_cap <= (item + near_full_threshold)) & fit_mask
        priorities[near_full_mask] += 2

        # Best fit bonus.
        min_waste = np.min(waste[fit_mask])
        best_fit_mask = (waste == min_waste) & fit_mask
        priorities[best_fit_mask] += 1.5
    else:
        # Handle overflow - minimize overflow amount.
        overflow_mask = ~fit_mask
        priorities[overflow_mask] = - (item - bins_remain_cap[overflow_mask])

        min_overflow = np.min(item - bins_remain_cap[overflow_mask])
        least_overflow_mask = (item - bins_remain_cap == min_overflow) & overflow_mask
        priorities[least_overflow_mask] += 0.5 # Slightly prefer least overflow
    #Load balancing component
    priorities += bins_remain_cap / (np.sum(bins_remain_cap)+0.000001)

    return priorities
```
