```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste, overflow, fullness, and adaptive tuning."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0

    # Hyperparameters (Tunable & Adaptive)
    fit_reward = 1.0  #Base fit reward
    overflow_penalty = 0.5 #Overflow cost
    fullness_bonus = 0.2 #Reward for full bins
    close_fit_boost = 0.7 #Reward for very tight fits
    close_fit_threshold = 0.2 #Threshold for close fit (as fraction of max_cap)
    empty_bin_penalty = 0.3 #Penalize near-empty bins
    diversity_bonus_weight = 0.01 #Bin diversity
    waste_epsilon = 0.000001

    # Fit Reward (Scale inversely with waste)
    fit_mask = waste >= 0
    priorities[fit_mask] += fit_reward / (waste[fit_mask] + waste_epsilon)

    # Overflow Penalty (Scale with amount of overflow)
    overflow_mask = ~fit_mask
    overflow = item - bins_remain_cap[overflow_mask]
    priorities[overflow_mask] -= overflow_penalty * overflow / (max_cap + waste_epsilon)

    # Fullness Bonus (Reward filling up bins)
    fullness = 1 - bins_remain_cap / (max_cap+waste_epsilon)
    priorities += fullness_bonus * fullness

    # Close Fit Boost (Give extra priority to near-perfect fits)
    close_fit_mask = fit_mask & (waste <= (close_fit_threshold * max_cap))
    if np.any(close_fit_mask):
        ratios = item / bins_remain_cap[close_fit_mask]
        priorities[close_fit_mask] += close_fit_boost * np.log(ratios)

    # Adaptive Empty Bin Handling (Penalize less for larger items)
    near_empty_mask = bins_remain_cap > (0.9 * max_cap)
    if item > 0.5 * max_cap:
        priorities[near_empty_mask] -= 0.05 * empty_bin_penalty
    else:
        priorities[near_empty_mask] -= empty_bin_penalty

    # Bin Diversity Consideration (encourage bins of differing fill levels)
    avg_cap = np.mean(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    cap_diff = np.abs(bins_remain_cap - avg_cap)
    diversity_bonus = diversity_bonus_weight * (max_cap - cap_diff)
    priorities += diversity_bonus

    return priorities
```
