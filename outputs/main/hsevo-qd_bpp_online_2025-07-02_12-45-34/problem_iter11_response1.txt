```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering waste, fullness, and adaptive item size."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0

    # Hyperparameters (Tuned)
    fit_reward = 1.0
    overflow_penalty = 0.5
    fullness_bonus = 0.2
    
    # Reward bins where the item fits
    fit_mask = waste >= 0
    priorities[fit_mask] += fit_reward / (waste[fit_mask] + 0.000001)

    # Penalize overflow
    overflow_mask = ~fit_mask
    overflow = item - bins_remain_cap[overflow_mask]
    priorities[overflow_mask] -= overflow_penalty * overflow / (max_cap + 0.000001)

    # Bonus for bins that are already relatively full
    fullness = 1 - bins_remain_cap / (max_cap+0.000001)
    priorities += fullness_bonus * fullness
    
    # Adaptive Item Size Adjustment
    if item > 0.5 * max_cap:
        priorities += 0.1 * (1 - waste / max_cap) * fit_mask # Smaller waste benefit
    else:
        priorities += 0.2 * (1 - waste / max_cap) * fit_mask # Larger waste benefit

    return priorities
```
