{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins considering waste, overflow, and fullness.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    waste = bins_remain_cap - item\n\n    # Reward bins where the item fits\n    fit_mask = waste >= 0\n    priorities[fit_mask] = 1 / (waste[fit_mask] + 0.000001)\n\n    # Penalize overflow, relative to the maximum bin capacity\n    overflow_mask = ~fit_mask\n    overflow = item - bins_remain_cap[overflow_mask]\n    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0\n    priorities[overflow_mask] = - overflow / (max_cap + 0.000001)\n\n    # Bonus for bins that are already relatively full\n    fullness = 1 - bins_remain_cap / (max_cap+0.000001)\n    priorities += 0.1 * fullness\n\n    # Further boost bins with small waste, using a ratio-based approach\n    close_fit_mask = fit_mask & (waste <= (0.2 * max_cap)) #tune threshold\n    if np.any(close_fit_mask):  # Check if close_fit_mask is not empty\n        ratios = item / bins_remain_cap[close_fit_mask]\n        priorities[close_fit_mask] += 0.5 * np.log(ratios)  # Boost priority\n\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins based on waste and overflow, improved version.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    waste = bins_remain_cap - item\n\n    fit_mask = waste >= 0\n    priorities[fit_mask] = 1 / (waste[fit_mask] + 0.000001)\n\n    overflow_mask = ~fit_mask\n    overflow = item - bins_remain_cap[overflow_mask]\n    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0 # avoid empty array\n    priorities[overflow_mask] = - overflow / (max_cap + 0.000001)\n\n    # Introduce a small bonus for bins that are already relatively full\n    fullness = 1 - bins_remain_cap / (np.max(bins_remain_cap)+0.000001) # Avoid zero division and normalized to max bin size\n    priorities += 0.1 * fullness  # scale fullness\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic considers waste, overflow, fullness, adaptive empty bin handling and bin diversity while the worst only uses a log ratio. (2nd) is identical to (1st). Comparing (1st) and (5th), (1st) includes hyperparameters and adaptive empty bin handling while (5th) does not. Comparing (5th) and (10th), (5th) considers fullness while (10th) does not. Comparing (10th) vs (18th), (10th) considers both fitting and overflowing items while (18th) only considers ratios. The top heuristics include more complex considerations and parameter tuning, while lower ones focus on simpler waste/overflow ratios or even direct ratios. Adding more factors like fullness, diversity, and adaptive strategies improves performance. Overall: The best heuristics combine multiple factors with tunable parameters, while simpler heuristics focusing on ratios perform worse. The best one also is adaptive to item size, and dynamically adjusts penalties.\n- \nOkay, I'll refine \"Current Self-Reflection\" to be more effective for heuristic design.\n\nHere's a redesigned reflection emphasizing actionable strategies and avoiding common pitfalls:\n\n*   **Keywords:** Multi-factor analysis, adaptive thresholds, hyperparameter tuning, weighted combinations.\n*   **Advice:** Design heuristics by integrating multiple relevant factors (not just waste/overflow). Dynamically adjust behavior using thresholds and adaptive strategies based on problem state.\n*   **Avoid:** Over-reliance on simplistic ratios or single-factor optimization. Neglecting the integration of adaptive mechanisms that respond to changing conditions.\n*   **Explanation:** Effective heuristics combine diverse factors with adaptive mechanisms controlled by hyperparameters. Experimentation and tuning are crucial for performance.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}