```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritize bins based on waste, fill ratio, item size, and near-perfect fits."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    fit_mask = waste >= 0

    # Prioritize bins with smaller waste and better fill ratio
    if np.any(fit_mask):
        fill_ratio = (bins_remain_cap[fit_mask] - waste[fit_mask]) / bins_remain_cap[fit_mask]
        priorities[fit_mask] = (1 / (waste[fit_mask] + 0.000001)) * (1 + fill_ratio)

        # Adjust priority based on item size relative to bin capacity
        large_item_threshold = 0.5 * np.max(bins_remain_cap)
        if item > large_item_threshold:
            priorities[fit_mask] *= (bins_remain_cap[fit_mask] / np.max(bins_remain_cap))

        # Bonus for near-perfect fits
        close_fit_mask = (bins_remain_cap >= (item - 0.1 * item)) & (bins_remain_cap <= (item + 0.1 * item)) & fit_mask
        priorities[close_fit_mask] += 0.5
    
    overflow_mask = ~fit_mask
    if np.any(overflow_mask):
        overflow = item - bins_remain_cap[overflow_mask]
        priorities[overflow_mask] = -overflow / (np.max(bins_remain_cap) + 0.000001)

    return priorities
```
