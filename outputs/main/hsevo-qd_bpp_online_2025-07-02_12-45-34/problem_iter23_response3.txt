```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering waste, fullness, item size, and bin diversity."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    avg_cap = np.mean(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    num_bins = len(bins_remain_cap)

    fit_reward = 1.2
    overflow_penalty = 0.6
    fullness_bonus = 0.25
    close_fit_boost = 0.8
    close_fit_threshold = 0.2
    empty_bin_penalty = 0.3
    item_size_penalty_factor = 0.5
    std_dev_penalty = 0.05

    fit_mask = waste >= 0
    priorities[fit_mask] += fit_reward / (waste[fit_mask] + 0.000001)

    overflow_mask = ~fit_mask
    overflow = item - bins_remain_cap[overflow_mask]
    priorities[overflow_mask] -= overflow_penalty * overflow / (max_cap + 0.000001)

    fullness = 1 - bins_remain_cap / (max_cap + 0.000001)
    priorities += fullness_bonus * fullness

    close_fit_mask = fit_mask & (waste <= (close_fit_threshold * max_cap))
    if np.any(close_fit_mask):
        ratios = item / bins_remain_cap[close_fit_mask]
        priorities[close_fit_mask] += close_fit_boost * np.log(ratios)

    near_empty_mask = bins_remain_cap > (0.9 * max_cap)
    if item > 0.5 * max_cap:
        priorities[near_empty_mask] -= 0.05 * empty_bin_penalty
    else:
        priorities[near_empty_mask] -= empty_bin_penalty

    slightly_larger_mask = fit_mask & (waste < (0.5 * item))
    priorities[slightly_larger_mask] -= item_size_penalty_factor * (item / (max_cap + 0.000001))

    cap_diff = np.abs(bins_remain_cap - avg_cap)
    diversity_bonus = 0.01 * (max_cap - cap_diff)
    priorities += diversity_bonus
    
    capacity_std = np.std(bins_remain_cap) if num_bins > 1 else 0.0
    priorities -= std_dev_penalty * capacity_std / (max_cap + 0.000001)

    # Global capacity utilization consideration
    total_capacity = num_bins * max_cap #approx
    capacity_utilization = (total_capacity - np.sum(bins_remain_cap)) / total_capacity if total_capacity >0 else 0.0 #use current bins to determine approx.
    capacity_utilization_bonus = 0.1 * capacity_utilization # hyperparameter
    priorities += capacity_utilization_bonus * (1 - fullness) #Encourage packing into bins to increase utilization.

    return priorities
```
