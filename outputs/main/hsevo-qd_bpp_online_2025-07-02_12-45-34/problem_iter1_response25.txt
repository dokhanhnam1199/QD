```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Eliminate bins that cannot fit the item
    valid_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    if not np.any(valid_bins):
        #If no valid bins, prioritize almost full bins by remaining capacity
        priorities = -bins_remain_cap
        return priorities

    # Calculate remaining capacity after adding the item
    remaining_capacity = bins_remain_cap[valid_bins] - item

    # Prioritize bins that leave a smaller gap after placing the item.
    # A small gap is better as it might be usable later.
    priorities[valid_bins] = -np.abs(remaining_capacity)

    #Boost the bins which exactly fits
    exact_fit = (bins_remain_cap[valid_bins] == item)
    priorities[valid_bins][exact_fit] += 10 #arbitrary boost to prefer perfect fit

    #Slight penalty to almost full bins
    almost_full_threshold = 0.1 #can be tuned based on bin size and typical item sizes
    almost_full = bins_remain_cap[valid_bins] < (item + almost_full_threshold)
    priorities[valid_bins][almost_full] -= 1 #slight penalty
    
    return priorities
```
