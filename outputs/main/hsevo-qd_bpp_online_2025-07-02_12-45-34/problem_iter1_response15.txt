```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Heuristic Prioritizing:
        1. Bins that can fit the item (remaining capacity >= item size)
        2. Amongst bins that fit, prioritize those with remaining capacity closest to the item size,
           but with a slight penalty for nearly filling the bin to avoid over-packing and stranding
           smaller items later.  This encourages efficient use of space.
        3. If no bin can fit, severely penalize (negative priority) all bins. This discourages forced moves.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        fitting_bins = np.where(can_fit)[0]
        remaining_space = bins_remain_cap[fitting_bins] - item
        priorities[fitting_bins] = 1.0 / (1.0 + remaining_space + 0.1 * (remaining_space**2))  # Prioritize closer fit, penalty for nearly full. added small quadratic term

    else:
        priorities = np.full_like(bins_remain_cap, -1000.0)  # Very low priority if the item does not fit anywhere
        #Alternatively, could give non-fitting bins some priority based on how *close* they are
        #to fitting to try to "fill up" nearly full bins before new ones
        #lack_of_capacity = item - bins_remain_cap
        #priorities = -lack_of_capacity  #Negative priority, proportional to how much they don't fit

    return priorities
```
