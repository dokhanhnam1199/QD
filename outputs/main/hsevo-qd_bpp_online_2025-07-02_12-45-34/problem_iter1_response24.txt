```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap)

    # Consider bins where the item fits
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        # First priority: minimize wasted space (Remaining capacity after placing the item)
        wasted_space = bins_remain_cap[feasible_bins] - item
        priorities[feasible_bins] = -wasted_space # Smaller wasted space = higher priority

        # Boost bins that are almost full, but still fit the item (a kind of best-fit logic, but also consider wasted space)
        almost_full = (bins_remain_cap[feasible_bins] < (item * 1.2)) # Adjust the 1.2 factor if needed. Close to item size, but can still fit
        priorities[feasible_bins][almost_full] += 1 # A boost for bins which fits with a tight allowance.

        # Small bonus for full bins which do not lead to wastage. Encourages placing into partially filled, but efficient usage.
        full_enough = (bins_remain_cap[feasible_bins] > (item * 0.9))
        priorities[feasible_bins][full_enough] += 0.5

    # Make infeasible bins least favorable
    priorities[bins_remain_cap < item] = -np.inf  # Assign -inf to bins that can't fit the item

    return priorities
```
