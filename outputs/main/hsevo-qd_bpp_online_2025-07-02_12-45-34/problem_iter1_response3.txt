```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Give a large negative priority if the item doesn't fit
    priorities = np.where(bins_remain_cap < item, -np.inf, 0)

    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item

    # Normalize wasted space to a 0-1 scale, smaller value = more priority. add a tiny number to avoid zero division.
    normalized_wasted_space = wasted_space / (bins_remain_cap + 1e-9)

    # Give bins with smallest wasted space higher priority
    priorities = np.where(bins_remain_cap >= item, 1 - normalized_wasted_space, priorities)

    # Give bins that have a perfect fit the highest possible priority.
    priorities = np.where(wasted_space == 0, np.inf, priorities)

    return priorities
```
