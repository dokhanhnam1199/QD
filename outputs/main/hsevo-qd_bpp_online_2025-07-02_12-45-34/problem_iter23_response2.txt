```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering waste, overflow, fullness, and overall utilization.
    It adaptively adjusts weights based on item size and bin capacity.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    num_bins = len(bins_remain_cap)
    total_capacity = np.sum(bins_remain_cap)

    fit_reward = 1.0
    overflow_penalty = 0.5
    fullness_bonus = 0.2
    close_fit_boost = 0.7
    close_fit_threshold = 0.2
    capacity_utilization_bonus = 0.1

    if item > 0.7 * max_cap:
        fit_reward *= 1.1
        overflow_penalty *= 0.9
        close_fit_boost *= 0.9
    elif item < 0.3 * max_cap:
        fullness_bonus *= 1.2

    fit_mask = waste >= 0
    priorities[fit_mask] += fit_reward / (waste[fit_mask] + 0.000001)

    overflow_mask = ~fit_mask
    overflow = item - bins_remain_cap[overflow_mask]
    priorities[overflow_mask] -= overflow_penalty * overflow / (max_cap + 0.000001)

    fullness = 1 - bins_remain_cap / (max_cap + 0.000001)
    priorities += fullness_bonus * fullness

    close_fit_mask = fit_mask & (waste <= (close_fit_threshold * max_cap))
    if np.any(close_fit_mask):
        ratios = item / bins_remain_cap[close_fit_mask]
        priorities[close_fit_mask] += close_fit_boost * np.log(ratios)

    overall_utilization = (1 - (total_capacity / (num_bins * max_cap))) if num_bins > 0 else 0.0
    priorities += capacity_utilization_bonus * overall_utilization * (1 - bins_remain_cap / (max_cap + 0.000001))

    return priorities
```
