```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that are large enough to fit the item
    and among those, favors bins with remaining capacity close to the item size
    (i.e., it attempts to fill bins as completely as possible without overflowing)
    and also penalizes almost full bins that cannot fit the current item to avoid
    fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Give a high priority to bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] = (bins_remain_cap[can_fit] - item)  # Smaller diff is better (try to fully pack).
    priorities[can_fit] = 1 / (1e-6 + priorities[can_fit])  # Avoid division by zero and invert so the lower the diff the better.

    # Penalize bins that are almost full, but cannot fit
    cannot_fit = bins_remain_cap < item
    almost_full = cannot_fit & (bins_remain_cap > 0.9 * np.max(bins_remain_cap)) # Arbitrary value for almost full bins
    priorities[almost_full] = -100 # Give these bins extremely low priority

    return priorities
```
