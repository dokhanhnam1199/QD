```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    A more sophisticated priority function that considers several factors:

    1.  Remaining capacity after adding the item: Bins with smaller remaining capacity after placement are preferred
        (minimize wasted space, encourages filling bins as much as possible).
    2.  Binary indicator: If the item doesn't fit, the priority is set to a very small value.
    3.  A small random component to help escape local optima.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Check if the item fits in the bin
    fits = bins_remain_cap >= item

    # If it doesn't fit, assign a very low priority
    priorities[~fits] = -np.inf

    # For bins where the item fits, calculate the remaining capacity after adding the item
    remaining_capacity = bins_remain_cap[fits] - item

    # Calculate priority based on remaining capacity: lower remaining capacity -> higher priority
    # Using an exponential function to heavily penalize higher remaining capacities
    priorities[fits] = np.exp(-remaining_capacity) #/ bins_remain_cap[fits] # Avoid divide by zero

    # Add a small random component to encourage exploration
    priorities[fits] += np.random.rand(np.sum(fits)) * 0.001

    return priorities
```
