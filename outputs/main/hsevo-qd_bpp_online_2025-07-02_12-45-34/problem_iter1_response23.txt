```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can fit the item relatively snugly,
    avoiding both nearly empty bins and bins where the item barely fits.
    It uses a combination of remaining capacity and the ratio of item size to remaining capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate a score based on how well the item fits.
            # We want a good fit, not too tight and not too loose.
            # Use a Gaussian-like function centered around an ideal fit ratio.
            fit_ratio = item / cap
            ideal_ratio = 0.8  # Experiment with different ideal ratios
            priority = np.exp(-((fit_ratio - ideal_ratio)**2) / (2 * 0.1**2)) #adjust standard deviation parameter as needed
            priorities[i] = priority
        else:
            priorities[i] = -np.inf  # Cannot fit, lowest priority

    return priorities
```
