```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins adaptively, considering item size, bin fullness, and global utilization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    avg_cap = np.mean(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    min_cap = np.min(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0

    num_bins = len(bins_remain_cap)
    total_capacity = np.sum(bins_remain_cap) if num_bins > 0 else 0.0

    # Hyperparameters with adaptive adjustments
    fit_reward = 1.0
    overflow_penalty = 0.5
    fullness_bonus = 0.2
    close_fit_boost = 0.7
    close_fit_threshold = 0.2
    empty_bin_penalty = 0.3
    diversity_bonus_weight = 0.01
    item_size_penalty = 0.4
    fragmentation_penalty = 0.1
    capacity_utilization_bonus_weight = 0.05 #New

    # Adaptive adjustments based on item size relative to bin capacities
    item_ratio_max = item / max_cap if max_cap > 0 else 0.0
    item_ratio_avg = item / avg_cap if avg_cap > 0 else 0.0
    item_ratio_min = item / min_cap if min_cap > 0 else 0.0

    if item_ratio_max > 0.7:
        fit_reward *= 1.1
        overflow_penalty *= 0.9
        close_fit_boost *= 0.9
        empty_bin_penalty *= 0.5
    elif item_ratio_max < 0.3:
        fullness_bonus *= 1.2
        empty_bin_penalty *= 1.3
        item_size_penalty *= 0.6
        fragmentation_penalty *= 1.2

    if item_ratio_avg > 1.0:
        fit_reward *= 0.8
        overflow_penalty *= 1.2

    # Fit Reward
    fit_mask = waste >= 0
    priorities[fit_mask] += fit_reward / (waste[fit_mask] + 0.000001)

    # Overflow Penalty
    overflow_mask = ~fit_mask
    overflow = item - bins_remain_cap[overflow_mask]
    priorities[overflow_mask] -= overflow_penalty * overflow / (max_cap + 0.000001)

    # Fullness Bonus
    fullness = 1 - bins_remain_cap / (max_cap + 0.000001)
    priorities += fullness_bonus * fullness

    # Close Fit Boost
    close_fit_mask = fit_mask & (waste <= (close_fit_threshold * max_cap))
    if np.any(close_fit_mask):
        ratios = item / bins_remain_cap[close_fit_mask]
        priorities[close_fit_mask] += close_fit_boost * np.log(ratios)

    # Adaptive Empty Bin Handling
    near_empty_mask = bins_remain_cap > (0.9 * max_cap)
    if item > 0.5 * max_cap:
        priorities[near_empty_mask] -= 0.05 * empty_bin_penalty
    else:
        priorities[near_empty_mask] -= empty_bin_penalty

    # Bin Diversity Consideration
    cap_diff = np.abs(bins_remain_cap - avg_cap)
    diversity_bonus = diversity_bonus_weight * (max_cap - cap_diff)
    priorities += diversity_bonus
    
    # Item Size penalty
    slightly_larger_mask = fit_mask & (waste < (0.5 * item))
    priorities[slightly_larger_mask] -= item_size_penalty * (item / (max_cap + 0.000001))
    
    # Fragmentation Penalty
    priorities[fit_mask] -= fragmentation_penalty * (waste[fit_mask] / (max_cap + 0.000001))

    # Capacity Utilization Bonus: Encourage bins to be used if overall utilization is low
    if num_bins > 0:
      capacity_utilization = total_capacity / (num_bins * max_cap) if max_cap > 0 else 0.0
      priorities += capacity_utilization_bonus_weight * capacity_utilization

    return priorities
```
