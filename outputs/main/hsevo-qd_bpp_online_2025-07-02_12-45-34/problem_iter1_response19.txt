```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Initialize priorities with a very low value
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    # Consider bins that can actually fit the item
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        # If no bins can fit the item, return low priorities everywhere.
        # A higher level routine might then decide to open a new bin.
        return priorities

    # Calculate "waste" after placing item in each valid bin
    waste = bins_remain_cap[valid_bins] - item

    # Heuristic 1: Minimize waste (First-Fit Decreasing inspired). Smaller waste is better.
    priority_waste = -waste  # Negative because smaller waste is higher priority

    # Heuristic 2: Avoid bins that become too empty after placing item. We want to make fuller bins (avoid fragmentation).
    # Let's say a bin becomes "too empty" if the remaining capacity is less than 10% of the bin size.
    # Here we assume bin size = 1 (since bins_remain_cap are normalized). Modify to fit the user case
    too_empty = waste < 0.1
    priority_empty = np.where(too_empty, -np.inf, 0)  # Penalize nearly empty bins

    # Combine the two heuristics: minimize waste but penalize bins becoming too empty
    priorities[valid_bins] = priority_waste + priority_empty

    # Heuristic 3: Prefer partially filled bins:
    # Slightly bias toward bins that are not completely empty at start and not full after inserting item.
    # Gives a bit more diversity. Only use if valid bins are available.
    # valid_bin_orig_cap = bins_remain_cap[valid_bins]
    # completely_empty = valid_bin_orig_cap == bins_remain_cap.max() #assume a uniform initial capacity to simplify the logic
    # completely_full_after = waste == 0
    # mid_bin_priority = np.where(~completely_empty & ~completely_full_after, 0.1, 0)
    # priorities[valid_bins] += mid_bin_priority

    return priorities
```
