```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, fill level, and overflow handling."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    fit_mask = waste >= 0

    # Prioritize bins where item fits, minimizing waste.
    priorities[fit_mask] = 1 / (waste[fit_mask] + 0.000001)

    # Penalize overflow, but prioritize bins closer to fitting.
    overflow_mask = ~fit_mask
    priorities[overflow_mask] = - (item - bins_remain_cap[overflow_mask]) / (np.max(bins_remain_cap) + 0.000001)

    # Incentivize filling bins that are already relatively full.
    fullness = (1 - bins_remain_cap / np.max(bins_remain_cap))
    priorities += fullness * 0.1

    # Adjust priorities based on the ratio of item size to remaining capacity.
    ratios = item / bins_remain_cap
    log_ratios = np.log(ratios)
    priorities -= log_ratios * 0.05  # Small adjustment based on log ratio

    return priorities
```
