```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, fill ratio, and overflow handling."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    fit_mask = waste >= 0

    #Prioritize bins that fit the item
    if np.any(fit_mask):
        fill_ratio = (bins_remain_cap[fit_mask] - waste[fit_mask]) / bins_remain_cap[fit_mask]
        priorities[fit_mask] = (1 / (waste[fit_mask] + 1e-6)) * (1 + fill_ratio)

    #Handle overflow
    overflow_mask = ~fit_mask
    overflow = item - bins_remain_cap[overflow_mask]
    priorities[overflow_mask] = -overflow / (np.max(bins_remain_cap) + 1e-6)

    #If large item, prioritize fuller bins
    large_item_threshold = 0.5 * np.max(bins_remain_cap)
    if item > large_item_threshold and np.any(fit_mask):
        priorities[fit_mask] *= (bins_remain_cap[fit_mask] / np.max(bins_remain_cap))

    return priorities
```
