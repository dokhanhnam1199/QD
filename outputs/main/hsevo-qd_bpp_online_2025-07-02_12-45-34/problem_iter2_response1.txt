```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste minimization and overflow penalty."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    fit_mask = waste >= 0

    # Fit, prioritize small waste
    priorities[fit_mask] = 1 / (waste[fit_mask] + 0.000001)

    # Does not fit, prioritize bins closer to fitting.  Scale to match fitted priority
    overflow_mask = ~fit_mask
    overflow = item - bins_remain_cap[overflow_mask]
    max_cap = np.max(bins_remain_cap)

    # Scale overflow penalty.  Bins near a fit should be preferred, but not more than a 'perfect' fit.
    priorities[overflow_mask] = -(max_cap / (overflow + max_cap)) * 0.99
    
    return priorities
```
