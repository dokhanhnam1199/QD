```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a base score.  Using a small positive number avoids division by zero.
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give a high priority to bins that can fit the item snugly (small waste).
    # The closer the remaining capacity is to the item size, the better.
    fit_score = np.where(bins_remain_cap >= item, np.exp(-np.abs(bins_remain_cap - item) / (item + 1e-9)), -np.inf)
    priorities += fit_score

    # Penalize bins that would be filled beyond a certain threshold after adding the item.
    fullness_threshold = 0.95  # Tuneable parameter: Percentage of bin capacity
    post_fill_levels = np.clip((bins_remain_cap - item) / np.max(bins_remain_cap), a_min=0, a_max=1)  # Use max to avoid div by zero
    overfill_penalty = np.where(post_fill_levels < (1 - fullness_threshold), -100, 0)  #Significant Penalty
    priorities += overfill_penalty
    # Prioritize bins with larger remaining capacity, but only if they can fit the item
    capacity_priority = np.where(bins_remain_cap >= item, bins_remain_cap / np.max(bins_remain_cap), -np.inf) #Normalize by the biggest cap
    priorities += capacity_priority

    return priorities
```
