```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste and overflow, adjusted by item size."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    fit_mask = waste >= 0
    
    #Prioritize bins where item fits with minimal waste, considering item size
    priorities[fit_mask] = (bins_remain_cap[fit_mask] / (waste[fit_mask] + 0.000001)) if np.any(fit_mask) else 0
    
    overflow_mask = ~fit_mask
    
    #Penalize overflow, but prioritize bins close to fitting, relative to item size
    if np.any(overflow_mask):
        overflow_amount = item - bins_remain_cap[overflow_mask]
        priorities[overflow_mask] = -overflow_amount / (item + 0.000001)
    
    return priorities
```
