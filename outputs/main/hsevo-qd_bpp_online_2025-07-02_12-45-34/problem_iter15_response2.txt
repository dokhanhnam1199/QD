```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins based on a combination of factors, with adaptive weighting to improve performance.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    avg_cap = np.mean(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    min_cap = np.min(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    capacity_std = np.std(bins_remain_cap) if len(bins_remain_cap) > 1 else 0.0
    
    # Adaptive Weighting Factors (Initialized, to be potentially modified based on conditions)
    fit_reward_weight = 1.2
    overflow_penalty_weight = 0.7
    fullness_bonus_weight = 0.3
    close_fit_boost_weight = 0.9
    empty_bin_penalty_weight = 0.35
    item_size_penalty_weight = 0.6
    std_dev_penalty_weight = 0.06
    diversity_bonus_weight = 0.01

    close_fit_threshold = 0.2

    # Scenario-Specific Adjustments (Example: Adapt weights based on item size relative to bin sizes)
    if item > 0.7 * max_cap:
        # Increase importance of fitting and reduce penalty for some waste
        fit_reward_weight *= 1.1
        overflow_penalty_weight *= 0.9
        close_fit_boost_weight *= 0.9  # Closer fit is less critical with larger items
    elif item < 0.3 * max_cap:
        # Emphasize fullness and penalize using almost empty bins
        fullness_bonus_weight *= 1.2
        empty_bin_penalty_weight *= 1.3
        item_size_penalty_weight *= 0.8 # Reduce size penalty for small item

    # Reward bins where the item fits
    fit_mask = waste >= 0
    priorities[fit_mask] += fit_reward_weight / (waste[fit_mask] + 0.000001)

    # Penalize overflow, relative to the maximum bin capacity
    overflow_mask = ~fit_mask
    overflow = item - bins_remain_cap[overflow_mask]
    priorities[overflow_mask] -= overflow_penalty_weight * overflow / (max_cap + 0.000001)

    # Bonus for bins that are already relatively full
    fullness = 1 - bins_remain_cap / (max_cap+0.000001)
    priorities += fullness_bonus_weight * fullness

    # Further boost bins with small waste, using a ratio-based approach
    close_fit_mask = fit_mask & (waste <= (close_fit_threshold * max_cap))
    if np.any(close_fit_mask):
        ratios = item / bins_remain_cap[close_fit_mask]
        priorities[close_fit_mask] += close_fit_boost_weight * np.log(ratios)

    # Adaptive Empty Bin Handling: Penalize near-empty bins less if item is large
    empty_bin_threshold = 0.1 * max_cap
    near_empty_mask = bins_remain_cap > (0.9 * max_cap)
    if item > 0.5 * max_cap:  # If item is relatively large
          priorities[near_empty_mask] -= 0.05 * empty_bin_penalty_weight  # Reduced penalty
    else:
          priorities[near_empty_mask] -= empty_bin_penalty_weight  # Standard penalty

    # Item Size Relative to Bin Size Penalty:
    # Penalize bins that are only slightly larger than the item. This encourages using larger bins
    # for larger items and smaller bins for smaller items
    slightly_larger_mask = fit_mask & (waste < (0.5 * item))
    priorities[slightly_larger_mask] -= item_size_penalty_weight * (item / (max_cap + 0.000001))

    #Bin Diversity Consideration
    cap_diff = np.abs(bins_remain_cap - avg_cap)
    diversity_bonus = diversity_bonus_weight * (max_cap - cap_diff) # Bias toward bins that have capacities closer to the average
    priorities += diversity_bonus
    
    # Capacity standard deviation penalty.
    priorities -= std_dev_penalty_weight * capacity_std / (max_cap + 0.000001)

    return priorities
```
