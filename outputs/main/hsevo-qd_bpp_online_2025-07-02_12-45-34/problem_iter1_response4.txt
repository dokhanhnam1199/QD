```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    My most ingenious design! Consider these electro-magnetic principles!

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Tesla's First Principle: Maximize Fill, but Avoid Overflow!
    # A bin closer in size to the item receives higher priority... if it fits!
    fit_indices = bins_remain_cap >= item
    if np.any(fit_indices):
        capacities_that_fit = bins_remain_cap[fit_indices]
        diffs = np.abs(capacities_that_fit - item) # how close is the fit? smaller is better
        priorities[fit_indices] = 1.0 / (1.0 + diffs)  # Inverse relationship: closer = higher priority

        # Tesla's Second Principle: Utilize Smaller Bins First (Like Building Circuits in Layers).
        # Prioritize bins that are closer to the item size but also have low total remaining capacity.

        priorities[fit_indices] += 1.0 / (1.0 + capacities_that_fit) # Smaller Bins Get Bonus!

        #Tesla's Third Principle: Harmony of Proportions (Golden Ratio Influence!).  Reward bins that have remaining capacity just slightly larger than item
        golden_ratio = 1.618
        ideal_capacities = item * golden_ratio
        proportion_indices = np.abs(capacities_that_fit - ideal_capacities)
        priorities[fit_indices] += np.exp(-proportion_indices)
    else:
        # Tesla's Fourth Principle: Accept loss reluctantly (last resort).  Very low priority
        priorities[:] = -1 # None of the bins are large enough

    return priorities
```
