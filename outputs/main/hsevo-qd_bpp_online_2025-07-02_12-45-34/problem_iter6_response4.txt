```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_count = len(bins_remain_cap)

    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item

    # Give high priority to bins where item fits
    fit_mask = waste >= 0
    
    #Prioritize nearly full bins to fill them up
    nearly_full_mask = fit_mask & (bins_remain_cap > 0) & (bins_remain_cap < 2*item)

    
    #Incentivize complete filling if it fits perfectly
    perfect_fit_mask = (waste >= 0) & (waste < 0.0001)
    priorities[perfect_fit_mask] = 1000 #extreme prioirty 

    priorities[fit_mask] = 1 / (waste[fit_mask] + 0.000001)

    #Give higher priority to nearly full bins that the item can fill
    priorities[nearly_full_mask] = 2 * (1 / (waste[nearly_full_mask] + 0.000001))  #increased priority compared to normal fit
    
    #Overflow strategy: Split items only when it is unavoidable or the bins are very empty
    overflow_mask = ~fit_mask
    priorities[overflow_mask] = - (item - bins_remain_cap[overflow_mask]) / (np.max(bins_remain_cap) + 0.000001) #Prioritize bins closer to fitting the item
    
    #Add a small amount of randomness to break ties. Helps in diverse datasets and avoids cyclical behavior
    priorities += np.random.normal(0, 0.00001, size=bin_count)

    return priorities
```
