```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins adaptively based on waste, overflow, fullness, diversity, and item size."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    avg_cap = np.mean(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    num_bins = len(bins_remain_cap)

    fit_reward = 1.0
    overflow_penalty = 0.5
    fullness_bonus = 0.2
    close_fit_boost = 0.7
    close_fit_threshold = 0.2
    empty_bin_penalty = 0.3

    # Fit priority
    fit_mask = waste >= 0
    priorities[fit_mask] += fit_reward / (waste[fit_mask] + 0.000001)

    # Overflow penalty
    overflow_mask = ~fit_mask
    overflow = item - bins_remain_cap[overflow_mask]
    priorities[overflow_mask] -= overflow_penalty * overflow / (max_cap + 0.000001)

    # Fullness bonus
    fullness = 1 - bins_remain_cap / (max_cap + 0.000001)
    priorities += fullness_bonus * fullness

    # Close fit bonus
    close_fit_mask = fit_mask & (waste <= (close_fit_threshold * max_cap))
    if np.any(close_fit_mask):
        ratios = item / bins_remain_cap[close_fit_mask]
        priorities[close_fit_mask] += close_fit_boost * np.log(ratios)
    
    #Adaptive Empty Bin Handling
    empty_bin_threshold = 0.1 * max_cap
    near_empty_mask = bins_remain_cap > (0.9 * max_cap)
    if item > 0.5 * max_cap:
        priorities[near_empty_mask] -= 0.05 * empty_bin_penalty
    else:
        priorities[near_empty_mask] -= empty_bin_penalty

    # Bin diversity consideration
    cap_diff = np.abs(bins_remain_cap - avg_cap)
    diversity_bonus = 0.01 * (max_cap - cap_diff)
    priorities += diversity_bonus

    # Capacity utilization bonus (global context)
    total_capacity = num_bins * max_cap if num_bins > 0 else max_cap
    current_utilization = (total_capacity - np.sum(bins_remain_cap)) / (total_capacity + 0.000001) if total_capacity > 0 else 0.0
    priorities += 0.05 * current_utilization

    # Adaptive weighting based on item size
    item_ratio_max = item / (max_cap + 0.000001)
    
    if item_ratio_max > 0.7:
        priorities[fit_mask] *= 1.1  # Emphasize fitting large items
    elif item_ratio_max < 0.3:
        priorities += 0.02 * (1-item_ratio_max) #Slight preference for smaller items in any bin
    
    return priorities
```
