```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste-based fit with adaptive overflow handling and fullness bonus."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0

    # Hyperparameters (Tunable)
    fit_reward = 1.0
    overflow_penalty = 0.5
    fullness_bonus = 0.2
    near_full_threshold = 0.1
    diversity_bonus_weight = 0.01

    # Fit Reward
    fit_mask = waste >= 0
    if np.any(fit_mask):
        priorities[fit_mask] += fit_reward / (waste[fit_mask] + 0.000001)

        # Best Fit Improvement:  Slightly boost the priority of bins with minimal waste.
        min_waste = np.min(waste[fit_mask])
        best_fit_mask = (waste == min_waste) & fit_mask
        priorities[best_fit_mask] += 0.2

        # Reward near-full bins:
        near_full_mask = (bins_remain_cap <= (item + near_full_threshold * max_cap)) & fit_mask
        priorities[near_full_mask] += 0.3 #Big bonus for filling near-full bins.
    # Overflow Handling: Dynamically adjust penalty based on remaining capacity distribution.
    else:
        overflow_mask = ~fit_mask
        overflow = item - bins_remain_cap[overflow_mask]
        priorities[overflow_mask] = - overflow_penalty * overflow / (max_cap + 0.000001)

        # Try to balance load (least overflow)
        min_overflow = np.min(item - bins_remain_cap[overflow_mask])
        least_overflow_mask = (item - bins_remain_cap == min_overflow) & overflow_mask
        priorities[least_overflow_mask] += 0.2 #Bonus for minimizing overflow when no fit

    # Fullness Bonus
    fullness = 1 - bins_remain_cap / (max_cap + 0.000001)
    priorities += fullness_bonus * fullness

    # Bin balancing. Incentivize bins with higher remaining capacity (avoid using bins too unevenly if possible)
    priorities += bins_remain_cap / (np.sum(bins_remain_cap) + 0.000001) #Added term for load balancing across bins

    # Bin Diversity Consideration
    avg_cap = np.mean(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    cap_diff = np.abs(bins_remain_cap - avg_cap)
    diversity_bonus = diversity_bonus_weight * (max_cap - cap_diff)
    priorities += diversity_bonus

    return priorities
```
