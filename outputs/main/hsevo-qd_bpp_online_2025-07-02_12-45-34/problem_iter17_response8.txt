```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization and ratio-based prioritization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    fit_mask = waste >= 0
    
    # Prioritize bins where the item fits, minimizing waste. Add small constant.
    priorities[fit_mask] = 1 / (waste[fit_mask] + 1e-6)

    #If it doesn't fit, prioritize based on how close the item fits relative to bin size.
    overflow_mask = ~fit_mask
    ratios = item / bins_remain_cap[overflow_mask]
    priorities[overflow_mask] = -np.log(ratios) #Use log to penalize overflow, relative to bin capacity

    return priorities
```
