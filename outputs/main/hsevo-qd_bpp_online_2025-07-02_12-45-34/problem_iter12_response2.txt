```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins considering waste, overflow, fullness, item size relative to bin sizes, and adaptive strategies.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    avg_cap = np.mean(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    min_cap = np.min(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    
    # Hyperparameters (Tuned using some manual exploration and intuition)
    fit_reward = 1.2  # Slightly increased reward for fitting
    overflow_penalty = 0.6 # Slightly increased penalty for overflow
    fullness_bonus = 0.25 # Slightly increased bonus for fullness
    close_fit_boost = 0.8  # Increased boost for close fits
    close_fit_threshold = 0.2
    empty_bin_penalty = 0.3
    item_size_penalty_factor = 0.5 # Penalty scaling for item size vs bin size.
    capacity_std = np.std(bins_remain_cap) if len(bins_remain_cap) > 1 else 0.0  # standard deviation of capacities
    std_dev_penalty = 0.05 #Penalty associated with high standard deviation
    
    # Reward bins where the item fits
    fit_mask = waste >= 0
    priorities[fit_mask] += fit_reward / (waste[fit_mask] + 0.000001)

    # Penalize overflow, relative to the maximum bin capacity
    overflow_mask = ~fit_mask
    overflow = item - bins_remain_cap[overflow_mask]
    priorities[overflow_mask] -= overflow_penalty * overflow / (max_cap + 0.000001)

    # Bonus for bins that are already relatively full
    fullness = 1 - bins_remain_cap / (max_cap+0.000001)
    priorities += fullness_bonus * fullness

    # Further boost bins with small waste, using a ratio-based approach
    close_fit_mask = fit_mask & (waste <= (close_fit_threshold * max_cap))
    if np.any(close_fit_mask):
        ratios = item / bins_remain_cap[close_fit_mask]
        priorities[close_fit_mask] += close_fit_boost * np.log(ratios)

    # Adaptive Empty Bin Handling: Penalize near-empty bins less if item is large
    empty_bin_threshold = 0.1 * max_cap
    near_empty_mask = bins_remain_cap > (0.9 * max_cap)
    if item > 0.5 * max_cap:  # If item is relatively large
          priorities[near_empty_mask] -= 0.05 * empty_bin_penalty  # Reduced penalty
    else:
          priorities[near_empty_mask] -= empty_bin_penalty  # Standard penalty

    # Item Size Relative to Bin Size Penalty:
    # Penalize bins that are only slightly larger than the item. This encourages using larger bins
    # for larger items and smaller bins for smaller items
    slightly_larger_mask = fit_mask & (waste < (0.5 * item))
    priorities[slightly_larger_mask] -= item_size_penalty_factor * (item / (max_cap + 0.000001))

    #Bin Diversity Consideration
    cap_diff = np.abs(bins_remain_cap - avg_cap)
    diversity_bonus = 0.01 * (max_cap - cap_diff) # Bias toward bins that have capacities closer to the average
    priorities += diversity_bonus
    
    # Capacity standard deviation penalty.
    priorities -= std_dev_penalty * capacity_std / (max_cap + 0.000001)

    return priorities
```
