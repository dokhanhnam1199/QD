```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, fill ratio, and overflow handling."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    fit_mask = waste >= 0
    overflow_mask = ~fit_mask

    # Prioritize fitting bins, considering fill ratio and waste.
    if np.any(fit_mask):
        fill_ratio = (bins_remain_cap[fit_mask] - waste[fit_mask]) / bins_remain_cap[fit_mask]
        priorities[fit_mask] = (1 / (waste[fit_mask] + 0.000001)) * (1 + fill_ratio)

        # Prioritize bins nearly full after packing the item
        almost_full = (waste[fit_mask] / bins_remain_cap[fit_mask]) < 0.1
        priorities[fit_mask][almost_full] *= 2  # Boost priority

    # Penalize overflow, scale by item size.
    if np.any(overflow_mask):
        overflow = item - bins_remain_cap[overflow_mask]
        priorities[overflow_mask] = -overflow * (item/np.max(bins_remain_cap)) / (np.max(bins_remain_cap) + 0.000001)

    return priorities
```
