```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility Check: Exclude bins that cannot fit the item.
    feasible_bins = bins_remain_cap >= item

    # 2. Reward bins with small remaining capacity after packing, but penalize if too small
    remaining_after_packing = bins_remain_cap - item
    priorities[feasible_bins] = np.exp(-np.abs(remaining_after_packing[feasible_bins]))

    # 3. If there are bins that fit exactly, assign the highest priority
    exact_fit = np.isclose(bins_remain_cap, item)
    priorities[exact_fit] = 10.0  # Very high priority for exact fit.

    # 4. Bonus for bins that are already somewhat full to avoid creating too many partially full bins
    # Normalized remaining capacity (closer to 0 means fuller)
    normalized_remaining = 1.0 - bins_remain_cap / np.max(bins_remain_cap)

    priorities[feasible_bins] += normalized_remaining[feasible_bins] * 0.5

    # Bins that can't fit the item should have priority 0
    priorities[~feasible_bins] = -np.inf

    return priorities
```
