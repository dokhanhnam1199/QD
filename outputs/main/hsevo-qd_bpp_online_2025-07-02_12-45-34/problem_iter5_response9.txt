```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Calculate bin priorities, balancing waste minimization and bin fullness.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    fit_mask = waste >= 0
    overflow_mask = ~fit_mask

    # Prioritize fitting bins, penalizing waste.
    priorities[fit_mask] = 1 / (waste[fit_mask] + 0.000001)

    # Prioritize bins closer to fitting the item
    priorities[overflow_mask] = - (item - bins_remain_cap[overflow_mask]) / (np.max(bins_remain_cap) + 0.000001)

    # Bonus for bins that are already relatively full.
    fullness = 1 - bins_remain_cap / np.max(bins_remain_cap)
    priorities += 0.1 * fullness # scale it by 0.1 to avoid dominating the waste

    return priorities
```
