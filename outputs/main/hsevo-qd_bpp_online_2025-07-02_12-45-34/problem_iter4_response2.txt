import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, fit_priority_scale: float = 1.6480504399503872, waste_epsilon: float = 0.00023497243848167676, overflow_penalty_scale: float = 2.4714822401072696, max_cap_epsilon: float = 0.0007225030977686381) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        fit_priority_scale: Scale of priority for bins where item fits.
        waste_epsilon: Small constant to avoid division by zero when calculating waste priority.
        overflow_penalty_scale: Scale of penalty for bins where item doesn't fit.
        max_cap_epsilon: Small constant to avoid division by zero when calculating overflow penalty.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item

    # Give high priority to bins where item fits and waste is minimized
    fit_mask = waste >= 0
    priorities[fit_mask] = fit_priority_scale / (waste[fit_mask] + waste_epsilon)  # Add a small constant to avoid division by zero

    # Give slightly lower priority to bins where item doesn't fit, but the overflow is minimized
    # This encourages splitting items across bins less often but still allows it when needed
    overflow_mask = ~fit_mask
    priorities[overflow_mask] = - overflow_penalty_scale * (item - bins_remain_cap[overflow_mask]) / (np.max(bins_remain_cap) + max_cap_epsilon) #Prioritize bins closer to fitting the item

    return priorities
