{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate waste if item is placed in each bin\n    waste = bins_remain_cap - item\n\n    # Give high priority to bins where item fits and waste is minimized\n    fit_mask = waste >= 0\n    priorities[fit_mask] = 1 / (waste[fit_mask] + 0.000001)  # Add a small constant to avoid division by zero\n\n    # Give slightly lower priority to bins where item doesn't fit, but the overflow is minimized\n    # This encourages splitting items across bins less often but still allows it when needed\n    overflow_mask = ~fit_mask\n    priorities[overflow_mask] = - (item - bins_remain_cap[overflow_mask]) / (np.max(bins_remain_cap) + 0.000001) #Prioritize bins closer to fitting the item\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the best heuristic incorporates several factors like waste minimization, best fit improvement, reward for near-full bins, overflow handling, and bin balancing, while the worst heuristic simply uses the negative log of the ratio of item size to remaining capacity. (2nd best) vs (second worst) show a similar contrast.\n\nComparing (1st) vs (2nd), the first heuristic has more explicit control over several rules that involve fitting heuristic, best fit improvement, reward near-full bins, overflow heuristic, bin balancing, while the second heuristic encapsulates a similar idea into some constants such as `fit_priority_scale`, `waste_epsilon`, `overflow_penalty_scale`, `max_cap_epsilon`.\n\nComparing (3rd) vs (4th), 3rd one uses some constant to weight the overflow and waste of bins, while 4th one uses a combination of `fill_ratio`, `large_item_threshold`, negative overflow, `close_fit_mask` to define the priority.\n\nComparing (second worst) vs (worst), the two heuristics are identical.\n\nOverall: The better heuristics use a combination of factors to calculate priority, including waste, overflow, fill ratio, and bin balancing, and provide explicit rules for different cases such as fitting and overflowing, while the worse heuristics tend to only consider one or two of these factors in a simple calculation. The best heuristics are highly configurable to adapt to problem domain.\n- \nOkay, let's refine the concept of self-reflection for heuristic design, steering clear of the pitfalls mentioned.\n\n*   **Keywords:** Multifactorial, adaptive, explicit rules, hyperparameter tuning.\n*   **Advice:** Design heuristics that combine diverse factors, use explicit conditional rules, and are adaptable to problem characteristics.\n*   **Avoid:** Sole reliance on simple ratios or static strategies. Don't neglect adaptive behavior.\n*   **Explanation:** Successful heuristics often integrate various problem-specific factors, employ clear rules, and adjust behavior dynamically using tunable hyperparameters, offering improved generalizability.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}