```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins for item placement, balancing fit, waste, and bin utilization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    fit_mask = waste >= 0

    if np.any(fit_mask):
        # Fit priority: Inverse of waste, boosted
        priorities[fit_mask] = (1 / (waste[fit_mask] + 1e-6)) + 1

        # Best fit bonus
        min_waste = np.min(waste[fit_mask])
        best_fit_mask = (waste == min_waste) & fit_mask
        priorities[best_fit_mask] += 2

        # Near-full bonus: if the bin is near full after putting item.
        near_full_threshold = item * 0.1 #Hyperparameter tuning 0.1
        near_full_mask = (bins_remain_cap - item) <= near_full_threshold & fit_mask
        priorities[near_full_mask] += 5 #High priority if near full.

    else:
        # Overflow penalty:  Minimize overflow amount.
        overflow_mask = ~fit_mask
        priorities[overflow_mask] = - (item - bins_remain_cap[overflow_mask])

        # Least overflow bonus
        min_overflow = np.min(item - bins_remain_cap[overflow_mask])
        least_overflow_mask = (item - bins_remain_cap == min_overflow) & overflow_mask
        priorities[least_overflow_mask] += 1 #Add small bonus

    # Bin balancing: Favor bins with more remaining capacity
    priorities += bins_remain_cap / (np.sum(bins_remain_cap) + 1e-6)
    return priorities
```
