{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins considering waste, overflow, and fullness.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    waste = bins_remain_cap - item\n\n    # Reward bins where the item fits\n    fit_mask = waste >= 0\n    priorities[fit_mask] = 1 / (waste[fit_mask] + 0.000001)\n\n    # Penalize overflow, relative to the maximum bin capacity\n    overflow_mask = ~fit_mask\n    overflow = item - bins_remain_cap[overflow_mask]\n    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0\n    priorities[overflow_mask] = - overflow / (max_cap + 0.000001)\n\n    # Bonus for bins that are already relatively full\n    fullness = 1 - bins_remain_cap / (max_cap+0.000001)\n    priorities += 0.1 * fullness\n\n    # Further boost bins with small waste, using a ratio-based approach\n    close_fit_mask = fit_mask & (waste <= (0.2 * max_cap)) #tune threshold\n    if np.any(close_fit_mask):  # Check if close_fit_mask is not empty\n        ratios = item / bins_remain_cap[close_fit_mask]\n        priorities[close_fit_mask] += 0.5 * np.log(ratios)  # Boost priority\n\n\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's refine the concept of self-reflection for heuristic design, steering clear of the pitfalls mentioned.\n\n*   **Keywords:** Multifactorial, adaptive, explicit rules, hyperparameter tuning.\n*   **Advice:** Design heuristics that combine diverse factors, use explicit conditional rules, and are adaptable to problem characteristics.\n*   **Avoid:** Sole reliance on simple ratios or static strategies. Don't neglect adaptive behavior.\n*   **Explanation:** Successful heuristics often integrate various problem-specific factors, employ clear rules, and adjust behavior dynamically using tunable hyperparameters, offering improved generalizability.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}