```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fit reward, overflow penalty, and fullness bonus with diversity."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    avg_cap = np.mean(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0

    fit_reward = 1.0
    overflow_penalty = 0.5
    fullness_bonus = 0.2
    diversity_bonus_weight = 0.01

    # Fit Reward
    fit_mask = waste >= 0
    priorities[fit_mask] += fit_reward / (waste[fit_mask] + 0.000001)

    # Overflow Penalty
    overflow_mask = ~fit_mask
    overflow = item - bins_remain_cap[overflow_mask]
    priorities[overflow_mask] -= overflow_penalty * overflow / (max_cap + 0.000001)

    # Fullness Bonus
    fullness = 1 - bins_remain_cap / (max_cap+0.000001)
    priorities += fullness_bonus * fullness
    
    # Bin Diversity Consideration
    cap_diff = np.abs(bins_remain_cap - avg_cap)
    diversity_bonus = diversity_bonus_weight * (max_cap - cap_diff)
    priorities += diversity_bonus

    return priorities
```
