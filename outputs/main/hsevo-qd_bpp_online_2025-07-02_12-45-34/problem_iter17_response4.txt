```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization with fullness and item-size considerations."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0

    # Fit priority and overflow penalty
    fit_mask = waste >= 0
    priorities[fit_mask] = 1 / (waste[fit_mask] + 0.000001)
    overflow_mask = ~fit_mask
    priorities[overflow_mask] = - (item - bins_remain_cap[overflow_mask]) / (max_cap + 0.000001)

    # Fullness bonus
    fullness = 1 - bins_remain_cap / (max_cap + 0.000001)
    priorities += 0.2 * fullness

    # Item size relative to bin size penalty
    slightly_larger_mask = fit_mask & (waste < (0.5 * item))
    priorities[slightly_larger_mask] -= 0.3 * (item / (max_cap + 0.000001))

    return priorities
```
