```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins based on remaining capacity, item size, and bin utilization,
    with adaptive strategies and refined reward/penalty system.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    avg_cap = np.mean(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    min_cap = np.min(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0

    # Hyperparameters (Tuned using some manual exploration and intuition)
    fit_reward = 1.2  # Increased reward for fitting
    overflow_penalty = 0.6  # Adjusted overflow penalty
    fullness_bonus = 0.25  # Increased bonus for fullness
    close_fit_boost = 0.8  # Increased boost for close fit
    close_fit_threshold = 0.15  # Reduced threshold for close fit (more selective)
    empty_bin_penalty = 0.35  # Increased empty bin penalty
    waste_penalty_factor = 0.1 #Penalty factor that will be applied to bins where the item fits but a certain level of waste occurs
    
    # Reward bins where the item fits
    fit_mask = waste >= 0
    priorities[fit_mask] += fit_reward / (waste[fit_mask] + 0.000001)

    # Penalize overflow, relative to the maximum bin capacity
    overflow_mask = ~fit_mask
    overflow = item - bins_remain_cap[overflow_mask]
    priorities[overflow_mask] -= overflow_penalty * overflow / (max_cap + 0.000001)

    # Bonus for bins that are already relatively full
    fullness = 1 - bins_remain_cap / (max_cap + 0.000001)
    priorities += fullness_bonus * fullness

    # Further boost bins with small waste, using a ratio-based approach
    close_fit_mask = fit_mask & (waste <= (close_fit_threshold * max_cap))
    if np.any(close_fit_mask):
        ratios = item / bins_remain_cap[close_fit_mask]
        priorities[close_fit_mask] += close_fit_boost * np.log(ratios)

    # Adaptive Empty Bin Handling: Penalize near-empty bins less if item is large
    near_empty_mask = bins_remain_cap > (0.9 * max_cap)  # or > (max_cap - empty_bin_threshold)
    if item > 0.5 * max_cap:  # If item is relatively large
        priorities[near_empty_mask] -= 0.05 * empty_bin_penalty  # Reduced penalty
    else:
        priorities[near_empty_mask] -= empty_bin_penalty  # Standard penalty
    
    #Bin Diversity Consideration
    cap_diff = np.abs(bins_remain_cap - avg_cap)
    diversity_bonus = 0.01 * (max_cap - cap_diff)  # Bias toward bins that have capacities closer to the average
    priorities += diversity_bonus

    # Waste Penalty: Discourage excessive waste
    waste_threshold = 0.6 * max_cap  # Define a threshold for acceptable waste
    excessive_waste_mask = fit_mask & (waste > waste_threshold)
    priorities[excessive_waste_mask] -= waste_penalty_factor * waste[excessive_waste_mask] / (max_cap + 0.000001)

    #Prioritize bins closer to minimum capacity if the item is small.
    if item < 0.2 * max_cap and len(bins_remain_cap) > 0:
        min_cap_bins = np.where(bins_remain_cap == min_cap)[0]
        priorities[min_cap_bins] += 0.05 #Slightly prioritize

    return priorities
```
