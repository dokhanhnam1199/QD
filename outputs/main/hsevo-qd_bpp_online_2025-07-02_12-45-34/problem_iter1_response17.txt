```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Heuristic:
    # 1. Consider the 'wastage' if an item is placed in a bin. We want to minimize this wastage, but
    #    also avoid situations where we leave a very small amount of space that's essentially useless.
    # 2. Bins with capacity smaller than the item size have zero priority (can't fit).
    # 3. To avoid getting stuck with nearly full bins we prefer packing to near-empty bins (normalized bin occupation).

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        remain_cap_valid = bins_remain_cap[valid_bins]
        wastage = remain_cap_valid - item
        # High priority if wastage is small, avoid large wastage.
        priorities[valid_bins] = np.exp(-np.abs(wastage) / item)  # Exponential decay based on wastage ratio to item size

        # Penalize small residual capacity to reduce small fragments later.
        residual_penalty = np.exp(-10*np.maximum(0, item - remain_cap_valid))  # Penalty grows quickly if item is larger than the residual capacity
        priorities[valid_bins] *= residual_penalty

        # Favor bins that have higher normalized occupation so we use bins evenly and reduce near-empty bins if possible.
        normalized_occupation = (bins_remain_cap[valid_bins].max() - bins_remain_cap[valid_bins]) / bins_remain_cap[valid_bins].max()
        priorities[valid_bins] += 0.1 * normalized_occupation # Weigh the contribution to favor more used bins

    return priorities
```
