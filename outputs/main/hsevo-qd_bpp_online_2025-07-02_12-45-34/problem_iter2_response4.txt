```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste and overflow, with ratio consideration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    fit_mask = waste >= 0
    overflow_mask = ~fit_mask

    # Prioritize fitting items, minimize waste.
    if np.any(fit_mask):
        priorities[fit_mask] = 1 / (waste[fit_mask] + 0.000001)

    # If no fit, consider ratio of item size to overflow amount
    if np.any(overflow_mask):
        overflow_amount = item - bins_remain_cap[overflow_mask]
        ratios = item / (bins_remain_cap[overflow_mask] + 0.000001)  # Avoid division by zero

        priorities[overflow_mask] = -overflow_amount / (np.max(bins_remain_cap) + 0.000001) + ratios / 10 # Combine overflow and ratio

    return priorities
```
