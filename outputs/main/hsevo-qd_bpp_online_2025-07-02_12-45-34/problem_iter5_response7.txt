```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering waste, overflow, and bin fullness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    
    # Fit
    fit_mask = waste >= 0
    priorities[fit_mask] = 1 / (waste[fit_mask] + 0.000001)
    
    # Overflow
    overflow_mask = ~fit_mask
    overflow = item - bins_remain_cap[overflow_mask]
    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    priorities[overflow_mask] = - overflow / (max_cap + 0.000001)
    
    # Fullness bonus
    fullness = 1 - bins_remain_cap / (np.max(bins_remain_cap) + 0.000001)
    priorities += 0.1 * fullness
    
    # Adaptive scaling based on item size. Prioritize fuller bins more for large items.
    item_scale = min(1.0, item / max_cap) if max_cap > 0 else 0.0 # scale relative to max_cap
    priorities += 0.2 * item_scale * fullness # Boost priority of full bins for larger items.

    return priorities
```
