```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Enhanced priority considering waste, overflow, fullness, and adaptive bin selection."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0

    # Hyperparameters (Tunable - example values provided)
    fit_reward = 1.2
    overflow_penalty = 0.6
    fullness_bonus = 0.25
    close_fit_boost = 0.8
    close_fit_threshold = 0.2
    empty_bin_penalty = 0.3
    item_size_penalty_factor = 0.5
    bin_balance_factor = 0.1

    # Fit Heuristic
    fit_mask = waste >= 0
    if np.any(fit_mask):
        priorities[fit_mask] += fit_reward / (waste[fit_mask] + 0.000001)

        # Best Fit Improvement
        min_waste = np.min(waste[fit_mask])
        best_fit_mask = (waste == min_waste) & fit_mask
        priorities[best_fit_mask] += close_fit_boost * (1 / (min_waste + 0.000001))

        # Near-Full Bins
        near_full_threshold = 0.1 * max_cap
        near_full_mask = (bins_remain_cap <= (item + near_full_threshold)) & fit_mask
        priorities[near_full_mask] += fullness_bonus

        # Item Size Penalty: Only prioritize if waste is not much less than item size.
        slightly_larger_mask = fit_mask & (waste < (0.5 * item))
        priorities[slightly_larger_mask] -= item_size_penalty_factor * (item / (max_cap + 0.000001))
    # Overflow Heuristic
    else:
        overflow_mask = ~fit_mask
        overflow = item - bins_remain_cap[overflow_mask]
        priorities[overflow_mask] -= overflow_penalty * overflow / (max_cap + 0.000001)

    # Adaptive Empty Bin Handling
    empty_bin_threshold = 0.1 * max_cap
    near_empty_mask = bins_remain_cap > (0.9 * max_cap)
    if item > 0.5 * max_cap:
        priorities[near_empty_mask] -= 0.05 * empty_bin_penalty
    else:
        priorities[near_empty_mask] -= empty_bin_penalty

    # Bin balancing - combining both methods from v0 and v1 to ensure even distribution
    priorities += bin_balance_factor * (bins_remain_cap / (np.sum(bins_remain_cap) + 0.000001))
    avg_cap = np.mean(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    cap_diff = np.abs(bins_remain_cap - avg_cap)
    diversity_bonus = 0.01 * (max_cap - cap_diff)
    priorities += diversity_bonus

    return priorities
```
