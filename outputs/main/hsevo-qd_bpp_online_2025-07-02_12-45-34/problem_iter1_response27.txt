```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version incorporates a "quantum" inspired exploration and exploitation.
    It uses a combination of remaining capacity, waste, and a stochastic
    element (inspired by quantum fluctuations) to determine priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate waste if item is placed in this bin
            waste = cap - item
            
            # Higher priority to bins that minimize waste (exploitation)
            priority = (cap / (waste + 1e-9))  # Avoid division by zero

            # Encourage bins that are already somewhat full (First Fit Decreasing inspiration)
            priority += cap # reward bigger remaining capacities

            # Introduce "quantum fluctuations" for exploration: random element scaled by inverse of waste
            priority += np.random.rand() / (waste + 0.1) # smaller waste causes bigger randomness
            
            priorities[i] = priority
        else:
            priorities[i] = -np.inf # bin cannot contain the item
    
    return priorities
```
