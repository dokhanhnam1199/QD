```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste and overflow, combining approaches."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    fit_mask = waste >= 0

    # Prioritize bins where the item fits, minimizing waste.
    if np.any(fit_mask):
        priorities[fit_mask] = 1 / (waste[fit_mask] + 1e-6)  # Avoid division by zero
    else:
        # If it doesn't fit anywhere, prioritize bins with the smallest overflow.
        overflow = item - bins_remain_cap
        priorities = -overflow / (np.max(bins_remain_cap) + 1e-6)
    return priorities
```
