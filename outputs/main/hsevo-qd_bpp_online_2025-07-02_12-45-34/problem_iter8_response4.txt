```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization and a fill-ratio based approach."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    fit_mask = waste >= 0

    # Prioritize fitting bins based on waste, scaled by fill ratio.
    if np.any(fit_mask):
        fill_ratio = item / (bins_remain_cap[fit_mask] + 1e-6)
        priorities[fit_mask] = fill_ratio / (waste[fit_mask] + 1e-6)

    # Penalize overflow, but less if the bin is close to fitting.
    overflow_mask = ~fit_mask
    if np.any(overflow_mask):
        overflow_amount = item - bins_remain_cap[overflow_mask]
        priorities[overflow_mask] = -overflow_amount / (np.max(bins_remain_cap) + 1e-6)

    return priorities
```
