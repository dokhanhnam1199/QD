```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that are a good fit, but also discourages
    leaving very small amounts of space in a bin. It uses a combination of
    the remaining capacity, the item size relative to the remaining capacity,
    and a penalty for leaving small gaps.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Encourage filling bins that are sufficiently large, but not too large
            # The closer item_size is to remaining capacity, the higher priority.
            # Introduce a penalty for leaving very small space after packing,
            # in order to pack items more tightly in a smaller number of bins.
            remaining_after_pack = cap - item

            priority = (item / cap)  # Prioritize filling bins that fit well.

            # Penalty for small gaps. Higher the penalty if gap is smaller.
            gap_penalty = 0.0

            if 0 < remaining_after_pack <= 0.1:  # Adjust threshold as needed
                gap_penalty = - 0.5 # a bigger negative value
            elif 0.1 < remaining_after_pack <= 0.25: #Adjust threshold as needed
                gap_penalty = -0.25 # a small negative value
            elif 0.25 < remaining_after_pack <=0.5:
                gap_penalty = -0.1
            priority += gap_penalty

            priorities[i] = priority
        else:
            priorities[i] = -np.inf  # Item doesn't fit
    return priorities
```
