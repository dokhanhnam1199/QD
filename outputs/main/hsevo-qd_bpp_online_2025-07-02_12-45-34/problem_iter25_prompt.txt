{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, \n                fit_reward: float = 1.133340864762426, \n                overflow_penalty: float = 0.7277369555239687, \n                fullness_bonus: float = 0.14061383949130402, \n                close_fit_boost: float = 1.2716352785074396, \n                close_fit_threshold: float = 0.36969269233630375, \n                empty_bin_penalty: float = 0.42865012797299296,\n                empty_bin_threshold_factor: float = 0.16709250667382297,\n                large_item_threshold_factor: float = 0.4353362178745349,\n                reduced_empty_bin_penalty_factor: float = 0.027598417221993923,\n                diversity_bonus_factor: float = 0.010499277569466912) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins considering waste, overflow, fullness, and adaptive strategies.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    waste = bins_remain_cap - item\n    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0\n    avg_cap = np.mean(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0\n    \n\n    # Reward bins where the item fits\n    fit_mask = waste >= 0\n    priorities[fit_mask] += fit_reward / (waste[fit_mask] + 0.000001)\n\n    # Penalize overflow, relative to the maximum bin capacity\n    overflow_mask = ~fit_mask\n    overflow = item - bins_remain_cap[overflow_mask]\n    priorities[overflow_mask] -= overflow_penalty * overflow / (max_cap + 0.000001)\n\n    # Bonus for bins that are already relatively full\n    fullness = 1 - bins_remain_cap / (max_cap+0.000001)\n    priorities += fullness_bonus * fullness\n\n    # Further boost bins with small waste, using a ratio-based approach\n    close_fit_mask = fit_mask & (waste <= (close_fit_threshold * max_cap))\n    if np.any(close_fit_mask):\n        ratios = item / bins_remain_cap[close_fit_mask]\n        priorities[close_fit_mask] += close_fit_boost * np.log(ratios)\n\n    # Adaptive Empty Bin Handling: Penalize near-empty bins less if item is large\n    empty_bin_threshold = empty_bin_threshold_factor * max_cap\n    near_empty_mask = bins_remain_cap > (0.9 * max_cap) # or > (max_cap - empty_bin_threshold)\n    if item > large_item_threshold_factor * max_cap:  # If item is relatively large\n          priorities[near_empty_mask] -= reduced_empty_bin_penalty_factor * empty_bin_penalty #Reduced penalty\n    else:\n          priorities[near_empty_mask] -= empty_bin_penalty  #Standard penalty\n          \n    #Bin Diversity Consideration\n    cap_diff = np.abs(bins_remain_cap - avg_cap)\n    diversity_bonus = diversity_bonus_factor * (max_cap - cap_diff) # Bias toward bins that have capacities closer to the average\n    priorities += diversity_bonus\n\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}