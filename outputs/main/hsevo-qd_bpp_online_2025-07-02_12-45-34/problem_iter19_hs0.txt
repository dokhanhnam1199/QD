import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                fit_reward: float = 1.8606401153475742,
                overflow_penalty: float = 0.23311623299493256,
                fullness_bonus: float = 0.24692029962156997,
                close_fit_boost: float = 0.755929203444544,
                close_fit_threshold: float = 0.31756747877776315,
                empty_bin_penalty: float = 0.18111007569931253,
                large_item_threshold: float = 0.6365035670064028,
                reduced_empty_bin_penalty_factor: float = 0.09119484752969076,
                diversity_bonus_factor: float = 0.004873566384835245,
                near_empty_threshold: float = 0.8819279417449031) -> np.ndarray:
    """
    Prioritizes bins considering waste, overflow, fullness, and adaptive strategies.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    avg_cap = np.mean(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    
    # Reward bins where the item fits
    fit_mask = waste >= 0
    priorities[fit_mask] += fit_reward / (waste[fit_mask] + 0.000001)

    # Penalize overflow, relative to the maximum bin capacity
    overflow_mask = ~fit_mask
    overflow = item - bins_remain_cap[overflow_mask]
    priorities[overflow_mask] -= overflow_penalty * overflow / (max_cap + 0.000001)

    # Bonus for bins that are already relatively full
    fullness = 1 - bins_remain_cap / (max_cap+0.000001)
    priorities += fullness_bonus * fullness

    # Further boost bins with small waste, using a ratio-based approach
    close_fit_mask = fit_mask & (waste <= (close_fit_threshold * max_cap))
    if np.any(close_fit_mask):
        ratios = item / bins_remain_cap[close_fit_mask]
        priorities[close_fit_mask] += close_fit_boost * np.log(ratios)

    # Adaptive Empty Bin Handling: Penalize near-empty bins less if item is large
    empty_bin_threshold = 0.1 * max_cap
    near_empty_mask = bins_remain_cap > (near_empty_threshold * max_cap) # or > (max_cap - empty_bin_threshold)
    if item > large_item_threshold * max_cap:  # If item is relatively large
          priorities[near_empty_mask] -= reduced_empty_bin_penalty_factor * empty_bin_penalty #Reduced penalty
    else:
          priorities[near_empty_mask] -= empty_bin_penalty  #Standard penalty
          
    #Bin Diversity Consideration
    cap_diff = np.abs(bins_remain_cap - avg_cap)
    diversity_bonus = diversity_bonus_factor * (max_cap - cap_diff) # Bias toward bins that have capacities closer to the average
    priorities += diversity_bonus

    return priorities
