{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Enhanced priority function considering multiple factors for better bin packing.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_count = len(bins_remain_cap)\n\n    # Calculate waste if item is placed in each bin\n    waste = bins_remain_cap - item\n\n    # Fit Heuristic: Prioritize bins where the item fits.\n    fit_mask = waste >= 0\n    if np.any(fit_mask):  # Only apply if at least one bin can fit the item\n        priorities[fit_mask] = (1 / (waste[fit_mask] + 0.000001)) + 0.1  # Increate priority compared to overflow. Avoid zero division.\n\n        # Best Fit Improvement:  Slightly boost the priority of bins with minimal waste.\n        min_waste = np.min(waste[fit_mask])\n        best_fit_mask = (waste == min_waste) & fit_mask\n        priorities[best_fit_mask] += 0.2  # A small bonus for the best fit\n\n        # Reward near-full bins:\n        near_full_threshold = 0.1  # Define a threshold for \"near full\" (e.g., 10% of bin capacity)\n        near_full_mask = (bins_remain_cap <= (item + near_full_threshold)) & fit_mask\n        priorities[near_full_mask] += 0.3 #Big bonus for filling near-full bins.\n    # Overflow Heuristic: Only used when NO bin fits.\n    else:\n        overflow_mask = ~fit_mask\n        priorities[overflow_mask] = - (item - bins_remain_cap[overflow_mask]) / (np.max(bins_remain_cap) + 0.000001)\n        # Try to balance load (least overflow)\n        min_overflow = np.min(item - bins_remain_cap[overflow_mask])\n        least_overflow_mask = (item - bins_remain_cap == min_overflow) & overflow_mask\n        priorities[least_overflow_mask] += 0.2 #Bonus for minimizing overflow when no fit\n\n    # Bin balancing. Incentivize bins with higher remaining capacity (avoid using bins too unevenly if possible)\n    priorities += bins_remain_cap / (np.sum(bins_remain_cap) + 0.000001) #Added term for load balancing across bins\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic considers waste, overflow, fullness, adaptive empty bin handling and bin diversity while the worst only uses a log ratio. (2nd) is identical to (1st). Comparing (1st) and (5th), (1st) includes hyperparameters and adaptive empty bin handling while (5th) does not. Comparing (5th) and (10th), (5th) considers fullness while (10th) does not. Comparing (10th) vs (18th), (10th) considers both fitting and overflowing items while (18th) only considers ratios. The top heuristics include more complex considerations and parameter tuning, while lower ones focus on simpler waste/overflow ratios or even direct ratios. Adding more factors like fullness, diversity, and adaptive strategies improves performance. Overall: The best heuristics combine multiple factors with tunable parameters, while simpler heuristics focusing on ratios perform worse. The best one also is adaptive to item size, and dynamically adjusts penalties.\n- \nOkay, I'll refine \"Current Self-Reflection\" to be more effective for heuristic design.\n\nHere's a redesigned reflection emphasizing actionable strategies and avoiding common pitfalls:\n\n*   **Keywords:** Multi-factor analysis, adaptive thresholds, hyperparameter tuning, weighted combinations.\n*   **Advice:** Design heuristics by integrating multiple relevant factors (not just waste/overflow). Dynamically adjust behavior using thresholds and adaptive strategies based on problem state.\n*   **Avoid:** Over-reliance on simplistic ratios or single-factor optimization. Neglecting the integration of adaptive mechanisms that respond to changing conditions.\n*   **Explanation:** Effective heuristics combine diverse factors with adaptive mechanisms controlled by hyperparameters. Experimentation and tuning are crucial for performance.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}