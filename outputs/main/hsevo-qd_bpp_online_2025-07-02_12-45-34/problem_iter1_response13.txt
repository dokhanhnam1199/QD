```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that have enough remaining capacity to hold
    the item, with a preference for bins that have a remaining capacity
    close to the item size. It also penalizes bins where the item would
    cause the bin to be nearly full (to avoid fragmentation).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First, filter bins that can actually hold the item.
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # If no bin can hold the item, return low priority for all.
        return priorities -1  # All bins have a low priority

    # Calculate priority scores for eligible bins.
    for i in range(len(bins_remain_cap)):
        if eligible_bins[i]:
            remaining_after_fit = bins_remain_cap[i] - item

            # Priority increases as the remaining capacity *after* fitting
            # gets smaller, but not too small to prevent fragmentation
            priority = 1.0 / (remaining_after_fit + 0.0001)  # Avoid division by zero

            # Modulate priority based on how *full* the bin will be after fitting.
            # Penalize bins that would become almost full (high fragmentation)
            if remaining_after_fit < 0.1:
                priority *= 0.1  # Significantly reduce priority

            # Higher priority if remaining_after_fit close to the item size (encourages matching)
            priority *= np.exp(-((bins_remain_cap[i] - item - item)**2)/(2*(item*0.2)**2)) #Gaussian peak at (remaining -item) = item. Standard deviation 20% of item

            priorities[i] = priority

    return priorities
```
