```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins considering waste, overflow, fullness, item size, and bin diversity with adaptive strategies.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    avg_cap = np.mean(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    std_cap = np.std(bins_remain_cap) if len(bins_remain_cap) > 0 else 0.0
    num_bins = len(bins_remain_cap)

    # Hyperparameters (Tuned using some manual exploration and intuition)
    fit_reward = 1.2  # Increased reward for fitting
    overflow_penalty = 0.6 #Increased penalty for overflow
    fullness_bonus = 0.25  # Slightly increased bonus for fullness
    close_fit_boost = 0.8 # Increased boost for close fit
    close_fit_threshold = 0.15 * max_cap  # Reduced threshold for close fit
    empty_bin_penalty = 0.35 # Increased Penalty for using empty bin
    item_size_penalty_factor = 0.5 # Penalty if item is large
    bin_diversity_bonus = 0.02 # Increased diversity bonus

    # Reward bins where the item fits
    fit_mask = waste >= 0
    priorities[fit_mask] += fit_reward / (waste[fit_mask] + 0.000001)

    # Penalize overflow, relative to the maximum bin capacity
    overflow_mask = ~fit_mask
    overflow = item - bins_remain_cap[overflow_mask]
    priorities[overflow_mask] -= overflow_penalty * overflow / (max_cap + 0.000001)

    # Bonus for bins that are already relatively full
    fullness = 1 - bins_remain_cap / (max_cap + 0.000001)
    priorities += fullness_bonus * fullness

    # Further boost bins with small waste, using a ratio-based approach
    close_fit_mask = fit_mask & (waste <= close_fit_threshold)
    if np.any(close_fit_mask):
        ratios = item / bins_remain_cap[close_fit_mask]
        priorities[close_fit_mask] += close_fit_boost * np.log(ratios)

    # Adaptive Empty Bin Handling: Penalize near-empty bins less if item is large
    near_empty_mask = bins_remain_cap > (0.9 * max_cap)
    if item > 0.5 * max_cap:  # If item is relatively large
        priorities[near_empty_mask] -= 0.05 * empty_bin_penalty  # Reduced penalty
    else:
        priorities[near_empty_mask] -= empty_bin_penalty  # Standard penalty

    # Bin Diversity Consideration
    cap_diff = np.abs(bins_remain_cap - avg_cap)
    priorities += bin_diversity_bonus * (max_cap - cap_diff)  # Bias toward bins that have capacities closer to the average

    # Item Size Consideration: Penalize bins more if the item is very large relative to bin size
    if item > 0.75 * max_cap:
        priorities -= item_size_penalty_factor * (item / max_cap)

    # Standard Deviation Penalty: Discourage using bins when capacity variance is high
    # This promotes a more balanced usage of bins
    if num_bins > 1: # Avoid division by zero and prevent issues with single bin scenarios
         priorities -= 0.005 * std_cap

    return priorities
```
