```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste, overflow, fullness, close fit, and item size."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0

    fit_reward = 1.0
    overflow_penalty = 0.5
    fullness_bonus = 0.2
    close_fit_boost = 0.7
    close_fit_threshold = 0.2
    
    fit_mask = waste >= 0
    
    # Prioritize bins with smaller waste, but also consider the fill ratio
    fill_ratio = (bins_remain_cap[fit_mask] - waste[fit_mask]) / (bins_remain_cap[fit_mask] + 0.000001) if np.any(fit_mask) else np.array([])
    priorities[fit_mask] = (fit_reward / (waste[fit_mask] + 0.000001)) * (1 + fill_ratio) if np.any(fit_mask) else np.array([])

    # Adjust priority based on the item size relative to the bin capacity
    large_item_threshold = 0.5 * max_cap
    if item > large_item_threshold:
        priorities[fit_mask] *= (bins_remain_cap[fit_mask] / max_cap) if np.any(fit_mask) else np.array([])

    overflow_mask = ~fit_mask
    overflow = item - bins_remain_cap[overflow_mask]
    priorities[overflow_mask] = -overflow_penalty * overflow / (max_cap + 0.000001) if np.any(overflow_mask) else np.array([])

    close_fit_mask = fit_mask & (waste <= (close_fit_threshold * max_cap))
    if np.any(close_fit_mask):
        priorities[close_fit_mask] += close_fit_boost

    # Bonus for bins that are already relatively full
    fullness = 1 - bins_remain_cap / (max_cap+0.000001)
    priorities += fullness_bonus * fullness

    return priorities
```
