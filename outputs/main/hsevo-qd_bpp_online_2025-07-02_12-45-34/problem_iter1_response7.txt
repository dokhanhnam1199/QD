```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Uses a more nuanced approach considering wasted space and fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap)

    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Calculate remaining capacity *after* placing the item in this bin.
            remaining_capacity = cap - item

            # A. Fit Score: How well does it fit? Closer to zero wasted space is better.
            fit_score = np.exp(-0.5 * (remaining_capacity)**2)  # Gaussian-like decay for wasted space. Lower remaining cap => higher fit score
            # A smaller std in the gaussian makes the fit_score to drop more sharply and quickly.

            # B. Capacity Score: Preferentially use bins that are already somewhat full.
            #    This tries to consolidate items rather than start new bins. A slight adjustment
            #    using log to reduce influence of small capacities. Avoid division by zero if cap is exactly zero.
            capacity_score = np.log1p(cap) # Logarithmic transformation to give less importance to bins with very high capacity
            if np.isinf(capacity_score):
               capacity_score = 0

            # C. Avoidance of almost-full: We should try to avoid using bins that have capacity just a bit larger than the item
            almost_full_penalty = 0.0
            if 0 < remaining_capacity < item / 4: # or any other sensible fraction
              almost_full_penalty = -10  # Significant penalty.

            # D. If item size is much greater than remaining capacity, big penalty!
            too_small_penalty = 0.0
            if item > 1.5 * cap:
              too_small_penalty = -100 # Significant penalty if a bin has insufficient capacity

            priorities[i] = fit_score + 0.5 * capacity_score + almost_full_penalty + too_small_penalty # Weighted sum of scores
        else:
            priorities[i] = -np.inf  # Impossible to fit, give it very low priority.

    return priorities
```
