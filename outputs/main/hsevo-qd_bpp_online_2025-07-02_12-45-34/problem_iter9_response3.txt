```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering waste, overflow, fullness, and bin diversity."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0

    # Fit Score: Favor bins where the item fits well
    fit_mask = waste >= 0
    if np.any(fit_mask):
        priorities[fit_mask] += 1 / (waste[fit_mask] + 0.000001)

        # Close Fit Bonus: Significantly reward near-perfect fits
        close_fit_mask = fit_mask & (waste <= (0.1 * max_cap))  # Tighter threshold
        if np.any(close_fit_mask):
            ratios = item / bins_remain_cap[close_fit_mask]
            priorities[close_fit_mask] += 1.0 * np.log(ratios)  # Increased boost

    # Overflow Penalty: Heavily penalize overflow, especially large overflows
    overflow_mask = ~fit_mask
    if np.any(overflow_mask):
        overflow = item - bins_remain_cap[overflow_mask]
        priorities[overflow_mask] = - (overflow**2) / (max_cap + 0.000001) # Quadratic penalty


    # Fullness Reward: Encourage filling bins that are already relatively full
    fullness = 1 - bins_remain_cap / (max_cap + 0.000001)
    priorities += 0.2 * fullness # Increased importance

    # Bin Diversity Factor: Slightly prefer bins with more remaining capacity if other factors are similar
    # Helps distribute items and avoid prematurely filling smaller bins.
    priorities += 0.05 * (bins_remain_cap / max_cap)

    # Capacity Thresholding: If bins are almost full, prioritize them highly
    almost_full_mask = bins_remain_cap <= (0.2 * max_cap) # Adjust threshold as needed
    if np.any(almost_full_mask):
        priorities[almost_full_mask] += 0.3 #boost for almost full bins


    return priorities
```
