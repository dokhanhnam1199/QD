```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item

    # Prioritize bins where the item fits
    fit_mask = waste >= 0
    
    if np.any(fit_mask):
        # Prioritize bins with minimal waste within the fitting bins
        min_waste = np.min(waste[fit_mask])
        best_fit_mask = (waste == min_waste) & fit_mask
        priorities[best_fit_mask] = 10  # Significantly higher priority for best fit
        
        # Prioritize other fitting bins, inversely proportional to waste
        priorities[fit_mask & ~best_fit_mask] = 5 / (waste[fit_mask & ~best_fit_mask] + 0.000001)
    else:
        #If it doesn't fit anywhere, consider splitting.
        overflow_mask = ~fit_mask
        priorities[overflow_mask] = - (item - bins_remain_cap[overflow_mask]) / (np.max(bins_remain_cap) + 0.000001)  # Prioritize bins closer to fitting
        #If still can't find a bin, prioritize the emptiest bin
        if np.all(priorities[overflow_mask] == 0):
            max_cap = np.max(bins_remain_cap)
            emptiest_bin_mask = bins_remain_cap == max_cap
            priorities[emptiest_bin_mask] = -1

    return priorities
```
