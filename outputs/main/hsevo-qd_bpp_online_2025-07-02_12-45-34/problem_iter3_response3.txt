```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item

    # Give very high priority to bins where item fits perfectly or nearly perfectly
    fit_mask = waste >= 0
    perfect_fit_mask = np.abs(waste) < 0.001  # Define what "perfect" means, adjust threshold as needed

    # Prioritize perfect fits extremely highly
    priorities[perfect_fit_mask] = 1000  # Large constant for perfect fits
    
    # Prioritize other fits based on waste, but less so than perfect fits
    priorities[fit_mask & ~perfect_fit_mask] = 10 / (waste[fit_mask & ~perfect_fit_mask] + 0.000001)
    
    # If no perfect fit bins exists, then penalize bins where item doesn't fit based on overflow
    overflow_mask = ~fit_mask
    if np.any(overflow_mask):
        priorities[overflow_mask] = - (item - bins_remain_cap[overflow_mask]) / (np.max(bins_remain_cap) + 0.000001)

    return priorities
```
