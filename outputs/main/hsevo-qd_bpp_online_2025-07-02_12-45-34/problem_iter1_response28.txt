```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a very low value
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    # Find bins where the item fits
    fit_indices = np.where(bins_remain_cap >= item)[0]

    if len(fit_indices) == 0:
      return priorities # No bin can fit, so return default -inf

    # Calculate the waste if the item is placed in each fitting bin.
    waste = bins_remain_cap[fit_indices] - item

    # Prioritize bins based on waste, but also consider filling ratio.
    # Goal: Minimize waste AND maximize bin utilization

    # Scale waste to be between 0 and 1 for normalization
    max_waste = np.max(waste)
    if max_waste > 0:
      scaled_waste = waste / max_waste
    else:
      scaled_waste = np.zeros_like(waste)


    filling_ratio = item / bins_remain_cap[fit_indices]

    # Combine the scaled waste and filling ratio to get the priority
    # Give waste a negative sign because we want to minimize it.
    priorities[fit_indices] = filling_ratio - scaled_waste

    return priorities
```
