{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate waste if item is placed in each bin\n    waste = bins_remain_cap - item\n\n    # Give high priority to bins where item fits and waste is minimized\n    fit_mask = waste >= 0\n    priorities[fit_mask] = 1 / (waste[fit_mask] + 0.000001)  # Add a small constant to avoid division by zero\n\n    # Give slightly lower priority to bins where item doesn't fit, but the overflow is minimized\n    # This encourages splitting items across bins less often but still allows it when needed\n    overflow_mask = ~fit_mask\n    priorities[overflow_mask] = - (item - bins_remain_cap[overflow_mask]) / (np.max(bins_remain_cap) + 0.000001) #Prioritize bins closer to fitting the item\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic considers waste and overflow using `1 / (waste + 0.000001)` for fitting items and `- (item - bins_remain_cap) / (np.max(bins_remain_cap) + 0.000001)` for overflowing items, while the worst one simply uses `-np.log(item / bins_remain_cap)`. The best heuristic prioritizes minimizing waste when the item fits and minimizing overflow when it doesn't, but the worst only considers ratios. (2nd best) vs (2nd worst) follows the same pattern. Comparing (1st) vs (2nd), we see that the second best heuristic adds sophistication by incorporating a fill ratio, adjusting priority based on item size and bin capacity via thresholding, and providing bonuses for near-perfect fits, suggesting a more refined approach to bin packing. The best only considers simple waste and overflow calculations. Comparing (4th) vs (5th), we observe the 4th heuristic adds a bonus for bins that are already relatively full, scaled by a `fullness` factor. Overall: Better heuristics incorporate nuanced strategies like fill ratio considerations, adaptive prioritization based on item size, and bonuses for desirable outcomes (e.g., near-perfect fits, fuller bins). Worse heuristics rely on simple calculations (like log ratios) without considering the nuances of bin packing.\n- \nOkay, here's a redefined \"Current Self-Reflection\" focused on designing better heuristics, avoiding the pitfalls of \"Ineffective Self-Reflection,\" and designed to inspire practical ideas:\n\n*   **Keywords:** Multifaceted, Adaptive, Incentivize, Contextual.\n\n*   **Advice:** Design heuristics that are sensitive to *context*. Adapt strategies based on item characteristics (size, shape) and bin state (remaining capacity, fill level).\n\n*   **Avoid:** Sole reliance on simplistic, static rules or universal application of a single strategy.\n\n*   **Explanation:** Effective heuristics should dynamically adjust their behavior based on the specific problem instance. Look for opportunities to reward desirable outcomes like full bins.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}