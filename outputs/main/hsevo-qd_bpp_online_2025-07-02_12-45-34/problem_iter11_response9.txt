```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering waste, overflow, fullness, and close fit bonus."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item

    # Reward bins where the item fits, prioritize smaller waste
    fit_mask = waste >= 0
    priorities[fit_mask] = 1 / (waste[fit_mask] + 0.000001)

    # Penalize overflow, relative to the maximum bin capacity
    overflow_mask = ~fit_mask
    overflow = item - bins_remain_cap[overflow_mask]
    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0
    priorities[overflow_mask] = - overflow / (max_cap + 0.000001)

    # Bonus for bins that are already relatively full, scaled by max_cap
    fullness = 1 - bins_remain_cap / (max_cap + 0.000001)
    priorities += 0.1 * fullness

    # Further boost bins with small waste, using a ratio-based approach
    close_fit_mask = fit_mask & (waste <= (0.2 * max_cap)) #tune threshold
    if np.any(close_fit_mask):  # Check if close_fit_mask is not empty
        ratios = item / bins_remain_cap[close_fit_mask]
        priorities[close_fit_mask] += 0.5 * np.log(ratios)  # Boost priority

    return priorities
```
