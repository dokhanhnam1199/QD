```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, overflow handling, and bin balancing."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Fit Heuristic
    waste = bins_remain_cap - item
    fit_mask = waste >= 0
    if np.any(fit_mask):
        priorities[fit_mask] = (1 / (waste[fit_mask] + 0.000001)) + 0.1
        min_waste = np.min(waste[fit_mask])
        best_fit_mask = (waste == min_waste) & fit_mask
        priorities[best_fit_mask] += 0.2
        near_full_threshold = 0.1
        near_full_mask = (bins_remain_cap <= (item + near_full_threshold)) & fit_mask
        priorities[near_full_mask] += 0.3
    else:
        overflow_mask = ~fit_mask
        priorities[overflow_mask] = - (item - bins_remain_cap[overflow_mask]) / (np.max(bins_remain_cap) + 0.000001)
        min_overflow = np.min(item - bins_remain_cap[overflow_mask])
        least_overflow_mask = (item - bins_remain_cap == min_overflow) & overflow_mask
        priorities[least_overflow_mask] += 0.2

    # Bin balancing using ratio of remaining capacity
    ratios = item / (bins_remain_cap + 0.000001) # avoid division by zero
    priorities += bins_remain_cap / (np.sum(bins_remain_cap) + 0.000001)
    return priorities
```
