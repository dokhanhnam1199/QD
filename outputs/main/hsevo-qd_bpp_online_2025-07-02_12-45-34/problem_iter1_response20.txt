```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after adding item
    remaining_after_add = bins_remain_cap - item

    # Give high priority to bins where the item fits
    fit_indices = np.where(remaining_after_add >= 0)[0]
    if len(fit_indices) > 0:
        priorities[fit_indices] = (bins_remain_cap[fit_indices] - item) / bins_remain_cap[fit_indices]  #Prioritize bins with smallest remaining capacity after adding. Higher the fill ratio, higher priority
        priorities[fit_indices] = 1 - priorities[fit_indices] # convert to ranking high to low
    
    #Very bad for adding item that dont fit. Assign min priority
    no_fit_indices = np.where(remaining_after_add < 0)[0]
    priorities[no_fit_indices] = -1  
        
    return priorities
```
