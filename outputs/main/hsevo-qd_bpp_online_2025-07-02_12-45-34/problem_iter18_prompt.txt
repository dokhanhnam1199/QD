{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins using adaptive weighting and multiple factors.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    waste = bins_remain_cap - item\n    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0\n    avg_cap = np.mean(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0\n\n    # Hyperparameters with adaptive adjustments\n    fit_reward = 1.0\n    overflow_penalty = 0.5\n    fullness_bonus = 0.2\n    close_fit_boost = 0.7\n    close_fit_threshold = 0.2\n    empty_bin_penalty = 0.3\n    diversity_bonus_weight = 0.01\n    item_size_penalty = 0.4 #New factor\n\n    # Adaptive adjustments based on item size\n    if item > 0.7 * max_cap:\n        fit_reward *= 1.1\n        overflow_penalty *= 0.9\n        close_fit_boost *= 0.9\n    elif item < 0.3 * max_cap:\n        fullness_bonus *= 1.2\n        empty_bin_penalty *= 1.3\n        item_size_penalty *= 0.6\n\n    # Fit Reward\n    fit_mask = waste >= 0\n    priorities[fit_mask] += fit_reward / (waste[fit_mask] + 0.000001)\n\n    # Overflow Penalty\n    overflow_mask = ~fit_mask\n    overflow = item - bins_remain_cap[overflow_mask]\n    priorities[overflow_mask] -= overflow_penalty * overflow / (max_cap + 0.000001)\n\n    # Fullness Bonus\n    fullness = 1 - bins_remain_cap / (max_cap + 0.000001)\n    priorities += fullness_bonus * fullness\n\n    # Close Fit Boost\n    close_fit_mask = fit_mask & (waste <= (close_fit_threshold * max_cap))\n    if np.any(close_fit_mask):\n        ratios = item / bins_remain_cap[close_fit_mask]\n        priorities[close_fit_mask] += close_fit_boost * np.log(ratios)\n\n    # Adaptive Empty Bin Handling\n    near_empty_mask = bins_remain_cap > (0.9 * max_cap)\n    if item > 0.5 * max_cap:\n        priorities[near_empty_mask] -= 0.05 * empty_bin_penalty\n    else:\n        priorities[near_empty_mask] -= empty_bin_penalty\n\n    # Bin Diversity Consideration\n    cap_diff = np.abs(bins_remain_cap - avg_cap)\n    diversity_bonus = diversity_bonus_weight * (max_cap - cap_diff)\n    priorities += diversity_bonus\n    \n    # Item Size penalty\n    slightly_larger_mask = fit_mask & (waste < (0.5 * item))\n    priorities[slightly_larger_mask] -= item_size_penalty * (item / (max_cap + 0.000001))\n\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, here's a redefined \"Current Self-Reflection\" aimed at improving heuristic design, specifically addressing the pitfalls of \"Ineffective Self-Reflection\":\n\n*   **Keywords:** Multi-faceted, adaptive, incremental refinement, hyperparameter tuning, problem-specific context, synergy, bias awareness.\n*   **Advice:** Design heuristics that combine multiple relevant factors (not just waste/overflow), dynamically adjusted based on the *specific* problem context and stage of the solution. Favor synergy between factors.\n*   **Avoid:** Over-reliance on simple ratios or single factors. Prematurely complex models. Blind hyperparameter tuning without understanding their impact.\n*   **Explanation:** Heuristics should evolve incrementally, adding complexity thoughtfully. Recognize inherent biases in chosen factors and address them proactively. Focus on designing systems that learn and adapt *within* the constraints of the problem.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}