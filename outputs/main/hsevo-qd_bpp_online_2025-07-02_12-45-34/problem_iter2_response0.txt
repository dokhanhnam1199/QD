```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste and overflow, improved version."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item

    fit_mask = waste >= 0
    priorities[fit_mask] = 1 / (waste[fit_mask] + 0.000001)

    overflow_mask = ~fit_mask
    overflow = item - bins_remain_cap[overflow_mask]
    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0 # avoid empty array
    priorities[overflow_mask] = - overflow / (max_cap + 0.000001)

    # Introduce a small bonus for bins that are already relatively full
    fullness = 1 - bins_remain_cap / (np.max(bins_remain_cap)+0.000001) # Avoid zero division and normalized to max bin size
    priorities += 0.1 * fullness  # scale fullness

    return priorities
```
