```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Heuristic:
    # 1. Consider only bins that can fit the item.
    # 2. Prioritize bins that have remaining capacity close to the item size (minimize wasted space).
    # 3. Avoid bins that are almost full (risk of creating highly fragmented bins in later stages).

    valid_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if np.any(valid_bins):
        # Calculate wasted space if item is placed in the bin.
        wasted_space = bins_remain_cap - item
        
        # Scale priorities based on the wasted space. Bins with less wasted space will have higher priorities.
        # Using a capped exponential function to heavily penalize near full or small spaces bins.
        priorities[valid_bins] = np.exp(- (wasted_space[valid_bins]**2)/(2*(item/2)**2) ) #Gaussian centered at 0 wasted space with std item/2

    return priorities
```
