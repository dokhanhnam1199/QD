```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculates bin priorities considering waste, overflow, and fill ratio."""
    fit_priority_scale = 100.0
    waste_epsilon = 0.001
    overflow_penalty_scale = 50.0
    max_cap_epsilon = 0.001
    near_full_reward = 20.0
    near_full_threshold = 0.9

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    fit_mask = waste >= 0

    # Prioritize bins where item fits, minimizing waste.
    priorities[fit_mask] = fit_priority_scale / (waste[fit_mask] + waste_epsilon)

    # Penalize overflow, prioritizing bins closer to fitting.
    overflow_mask = ~fit_mask
    priorities[overflow_mask] = -overflow_penalty_scale * (item - bins_remain_cap[overflow_mask]) / (np.max(bins_remain_cap) + max_cap_epsilon)

    # Reward bins that are near full after placing the item.
    post_fill_ratio = (bins_remain_cap - item) / np.max(bins_remain_cap) # Assume max cap is the same
    near_full_mask = (post_fill_ratio > 0) & (post_fill_ratio > near_full_threshold) & (fit_mask) # Only for those where item fits

    priorities[near_full_mask] += near_full_reward

    return priorities
```
