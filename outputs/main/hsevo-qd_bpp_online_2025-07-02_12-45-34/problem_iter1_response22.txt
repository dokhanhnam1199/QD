```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Heuristic inspired by gravitational force: larger remaining capacity attracts more.
    # Avoid exceeding capacity by assigning zero priority.
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        remain_cap_valid = bins_remain_cap[valid_bins]
        priorities[valid_bins] = remain_cap_valid / (item + 1e-9)  # Normalize by item size, avoid division by zero
        priorities[valid_bins] = np.clip(priorities[valid_bins], 0, 1)  # Limit priority to [0,1]
        # Add a small bonus for bins that are close to being full *after* adding the item.
        post_fill = 1 - (remain_cap_valid - item) / np.max(bins_remain_cap)
        priorities[valid_bins] += 0.1*post_fill  # Encourage full packing
        priorities[valid_bins] /= np.sum(priorities[valid_bins]) #Scale it down
    return priorities
```
