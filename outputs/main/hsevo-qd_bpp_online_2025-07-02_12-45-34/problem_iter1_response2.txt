```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by gravitational potential and energy minimization.
    Smaller remaining capacity creates stronger "gravitational pull".
    Also considers wasted space - penalizes bins with too much space left.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero. Add a small epsilon to the remaining capacity.
    epsilon = 1e-9
    bins_remain_cap = np.clip(bins_remain_cap, epsilon, None)  # Ensure positivity

    # Gravitational potential inspired term. Invert the remaining capacity, so bins with smaller remaining cap have a higher value.
    potential = 1.0 / bins_remain_cap

    #Consider cases where remaining space >> item size
    waste_penalty = np.exp( - (bins_remain_cap - item)**2 / (2 * (item**2 + epsilon)) )
    # waste_penalty = np.where(bins_remain_cap > item, np.exp(-(bins_remain_cap - item) / item), 1.0) # Simplified waste_penalty

    #Combine potential and penalty
    priorities = potential * waste_penalty
    # Prioritize bins that fit (remaining > item) only if not possible to find such bins.
    # priorities = np.where(bins_remain_cap >= item, potential * waste_penalty, -np.inf)
    # Handling empty array case where none of the bins have sufficient space:
    # if np.all(bins_remain_cap < item):
    #     priorities = potential # Fallback strategy
    return priorities
```
