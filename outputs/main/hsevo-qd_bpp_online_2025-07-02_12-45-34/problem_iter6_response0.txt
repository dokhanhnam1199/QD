```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_count = len(bins_remain_cap)

    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item

    # Give high priority to bins where item fits and waste is minimized
    fit_mask = waste >= 0
    
    # Prioritize bins based on how close they are to being full after packing the item
    # Use a power function to further incentivize near-full bins.
    priorities[fit_mask] = (bins_remain_cap[fit_mask] / (bins_remain_cap[fit_mask] - waste[fit_mask])) ** 2 # Higher value if waste is small relative to bin_remain_cap
    priorities[fit_mask] /= (waste[fit_mask] + 0.000001) #To differentiate when waste is similar
    

    # Give slightly lower priority to bins where item doesn't fit, but the overflow is minimized
    overflow_mask = ~fit_mask
    overflow = item - bins_remain_cap[overflow_mask]
    priorities[overflow_mask] = -overflow / (np.max(bins_remain_cap) + 0.000001)

    #Bonus for nearly full bins before adding item
    nearly_full_mask = (bins_remain_cap > item) & (bins_remain_cap < (item + 0.1))
    priorities[nearly_full_mask] += 0.5 # boost for nearly full bin

    return priorities
```
