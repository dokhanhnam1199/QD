```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste, overflow, fullness, and adaptive fitting for BPP."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    max_cap = np.max(bins_remain_cap) if len(bins_remain_cap) > 0 else 1.0

    # Fit: Inverse waste + bonus for near-full.
    fit_mask = waste >= 0
    if np.any(fit_mask):
        priorities[fit_mask] = (1 / (waste[fit_mask] + 0.000001))
        near_full_threshold = 0.1 * max_cap
        near_full_mask = (bins_remain_cap[fit_mask] <= (item + near_full_threshold))
        priorities[fit_mask][near_full_mask] += 0.3

        # Best Fit bonus
        min_waste = np.min(waste[fit_mask])
        best_fit_mask = (waste == min_waste) & fit_mask
        priorities[best_fit_mask] += 0.2
    # Overflow: Penalize overflow.
    else:
        overflow_mask = ~fit_mask
        overflow = item - bins_remain_cap[overflow_mask]
        priorities[overflow_mask] = - overflow / (max_cap + 0.000001)
        min_overflow = np.min(item - bins_remain_cap[overflow_mask])
        least_overflow_mask = (item - bins_remain_cap == min_overflow) & overflow_mask
        priorities[least_overflow_mask] += 0.2

    # Load balancing + Boost small waste
    priorities += bins_remain_cap / (np.sum(bins_remain_cap) + 0.000001)
    close_fit_mask = fit_mask & (waste <= (0.2 * max_cap))
    if np.any(close_fit_mask):
        ratios = item / bins_remain_cap[close_fit_mask]
        priorities[close_fit_mask] += 0.5 * np.log(ratios)

    return priorities
```
