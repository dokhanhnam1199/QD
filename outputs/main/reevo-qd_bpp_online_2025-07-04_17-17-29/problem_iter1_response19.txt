```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate wasted space if the item is added to each bin
    wasted_space = bins_remain_cap - item

    # Give high priority to bins that can fit the item perfectly or with minimal waste.
    # and penalize if items cannot be fit in bins
    for i, waste in enumerate(wasted_space):
        if waste >= 0:
            priorities[i] = 1 / (waste + 0.00001)  # Avoid division by zero, higher priority for smaller waste
        else:
            priorities[i] = -1000 # Very low priority if item doesn't fit

    # Further prioritize bins close to being full (without overflowing)
    # This helps consolidate items and reduce the number of bins used.
    fill_ratios = np.clip((bins_remain_cap - wasted_space) / bins_remain_cap, 0, 1) # fill ratio will be item/bin capacity if the item fits and zero otherwise.
    priorities += fill_ratios * 10 # boost priority proportional to how much bin will be filled

    return priorities
```
