```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # High priority to bins where item fits with smallest remaining space (First-Fit Decreasing principle)
    # Avoid fragmentation: prioritize bins that have just enough space.
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        remaining_space = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = -remaining_space  # Smaller remaining space => Higher priority

        # Boost bins close to full after packing, but avoid bins that get too full (risk of not fitting subsequent smaller items)
        # The boost is now proportional to how "full" the bin becomes after packing.
        nearly_full_mask = (remaining_space >= 0) & (remaining_space <= 0.3) #tolerate remaining space upto 0.3. Tuned
        if np.any(nearly_full_mask):
            fullness_ratio = (bins_remain_cap[fit_mask][nearly_full_mask] - remaining_space[nearly_full_mask]) / bins_remain_cap[fit_mask][nearly_full_mask] # Ratio of filled space to original capacity
            priorities[fit_mask][nearly_full_mask] += 2 * fullness_ratio # Boost is now proportional to fullness, amplified. Tuned

        # Penalize bins that become too full after packing
        too_full_mask = remaining_space < 0.05 #tunable. if remaining space < 0.05, it becomes 'too full'
        if np.any(too_full_mask & fit_mask): #make sure to only penalize bins where the item fits
            priorities[fit_mask][too_full_mask & (remaining_space > -1e-6)] -= 5 # Penalize, but only if there's very minor overflow due to floating point issues. Tuned
            priorities[fit_mask][too_full_mask & (remaining_space > -1e-6)] = np.clip(priorities[fit_mask][too_full_mask & (remaining_space > -1e-6)], -np.inf, 0) #Clip to avoid having positive prioirities from penalizing overflow, tuned
        
        # Item Size Relationship Consideration:
        # Prioritize bins that are a good multiple of the item size.
        # This encourages packing items of similar size together.
        size_ratio = item / bins_remain_cap[fit_mask]
        multiple_score = -np.abs(size_ratio - np.round(size_ratio)) * 0.5 # Penalize bins where the item isn't a good multiple of the remaining capacity
        priorities[fit_mask] += multiple_score


    else:
        # If the item does not fit in any bin, assign a very low priority
        priorities[:] = -np.inf

    return priorities
```
