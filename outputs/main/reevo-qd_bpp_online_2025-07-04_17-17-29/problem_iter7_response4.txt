```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # Feasibility check
    fit_mask = bins_remain_cap >= item

    if not np.any(fit_mask):
        # Item doesn't fit in any bin, assign a very low priority to all bins
        priorities[:] = -np.inf
        return priorities

    # Calculate remaining space if item is placed in each bin
    remaining_space = bins_remain_cap - item
    
    # Priority 1: Tight Fit - Minimize wasted space
    priorities = -np.abs(remaining_space)

    # Priority 2: Nearly Full Bins - Encourage filling bins that are almost full. Avoid excessive fullness.
    nearly_full_threshold_low = 0.1 * bin_capacity #tuneable
    nearly_full_threshold_high = 0.3 * bin_capacity #tuneable

    nearly_full_mask = (remaining_space >= 0) & (remaining_space <= nearly_full_threshold_high)
    
    priorities[nearly_full_mask] += 2 #tuneable : significant boost

    # Priority 3: Fragmentation Penalty - Penalize creating bins with very small remaining space
    fragmentation_threshold = 0.05 * bin_capacity  # Tuneable. Avoid bins that lead to tiny space
    fragmentation_mask = (remaining_space > 0) & (remaining_space <= fragmentation_threshold)
    priorities[fragmentation_mask] -= 3  # tuneable : significant penalty

    # Priority 4: Overfilling Penalty - Discourage bins that will become excessively full, risking later items
    overfill_threshold = -0.01* bin_capacity #Tuneable : allow a tiny tolerance to capture near fits
    overfill_mask = remaining_space < overfill_threshold
    priorities[overfill_mask] = -np.inf

    # Normalize priorities
    max_priority = np.max(priorities[priorities != -np.inf])
    if max_priority > -np.inf:
        priorities[priorities != -np.inf] /= max_priority  # Scale between 0-1

    return priorities
```
