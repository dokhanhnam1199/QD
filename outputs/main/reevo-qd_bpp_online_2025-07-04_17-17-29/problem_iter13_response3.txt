```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # Prioritize tight fits, but avoid overfills.
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        remaining_space = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = -remaining_space  # Smaller remaining space => Higher priority

        # Dynamically adjust rewards/penalties based on item size and remaining bin space.
        # Encourage filling near-full bins, but not completely.
        nearly_full_mask = (remaining_space >= 0) & (remaining_space <= 0.2 * bin_capacity)
        if np.any(nearly_full_mask):
            priorities[fit_mask][nearly_full_mask] += 0.5 * (1 - remaining_space[nearly_full_mask] / (0.2 * bin_capacity)) # Adjust the boost depending on how close to full

        # Penalize bins that become too full after packing (risk of not fitting subsequent smaller items).
        too_full_mask = (remaining_space > 0) & (remaining_space < 0.05 * bin_capacity)
        if np.any(too_full_mask):
             priorities[fit_mask][too_full_mask] -= 0.75* (0.05*bin_capacity - remaining_space[too_full_mask]) / (0.05 * bin_capacity)

        # Slightly penalize bins that end up with too much space left. The larger the item, the larger the penalty.
        # Helps distribute items more evenly.
        too_empty_mask = (remaining_space > 0.5 * bin_capacity)
        if np.any(too_empty_mask):
            priorities[fit_mask][too_empty_mask] -= 0.2 * (item / bin_capacity)  # Scale penalty with item size

    else:
        # If the item does not fit in any bin, assign a very low priority.
        priorities[:] = -np.inf

    return priorities
```
