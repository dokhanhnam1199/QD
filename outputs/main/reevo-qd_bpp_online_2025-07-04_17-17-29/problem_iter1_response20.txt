```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give high priority to bins that can fit the item snugly.
    # Avoid bins where item doesn't fit.
    
    for i, cap in enumerate(bins_remain_cap):
        if cap < item:
            priorities[i] = -np.inf # Or a very large negative number
        else:
            # Priority based on how much space will be wasted.  Smaller waste is better.
            waste = cap - item
            #priorities[i] = -waste  # Simple negative of waste
            
            #Prioritize bins that are closest to the item size, relative to total bin size
            priorities[i] = 1 / (1 + abs(cap - item)) #Reciprocal of 1+waste
    
    return priorities
```
