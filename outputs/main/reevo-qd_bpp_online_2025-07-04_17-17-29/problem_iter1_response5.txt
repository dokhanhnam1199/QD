```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Primary criterion: Can the item fit?
            priority = 1.0

            # Secondary criterion: How much space is left after packing? Prefer bins with smaller remaining space
            remaining_space = cap - item
            priority += 1.0 / (remaining_space + 0.0001)  # Avoid division by zero, higher priority for smaller remaining space

            # Tertiary criterion: Fill rate. Higher priority for bins closer to being full
            fill_rate = item / cap
            priority += fill_rate

            priorities[i] = priority
        else:
            priorities[i] = -1.0 # very low priority (cannot fit)
    return priorities
```
