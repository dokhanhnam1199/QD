[
  {
    "stdout_filepath": "problem_iter0_stdout0.txt",
    "code_path": "problem_iter0_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities",
    "response_id": 0,
    "obj": 149.30195452732352,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 11.60964047443681,
    "mi": 94.04446327225541,
    "token_count": 47.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response1.txt_stdout.txt",
    "code_path": "problem_iter1_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # High priority to bins where item fits with smallest remaining space (First-Fit Decreasing principle)\n    # Avoid fragmentation: prioritize bins that have just enough space.\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):\n        remaining_space = bins_remain_cap[fit_mask] - item\n        priorities[fit_mask] = -remaining_space  # Smaller remaining space => Higher priority\n\n        # Boost bins close to full after packing, but avoid bins that get too full (risk of not fitting subsequent smaller items)\n        nearly_full_mask = (remaining_space >= 0) & (remaining_space <= 0.2 * np.max(bins_remain_cap)) #tolerate a max 20% of the largest bin size as tolerance\n\n        if np.any(nearly_full_mask):\n            priorities[fit_mask][nearly_full_mask] += 1 # Small positive boost to encourage filling near-full bins, 1 could be tuned\n    else:\n        # If the item does not fit in any bin, assign a very low priority\n        priorities[:] = -np.inf\n\n    return priorities",
    "response_id": 1,
    "obj": 4.048663741523748,
    "SLOC": 12.0,
    "cyclomatic_complexity": 6.0,
    "halstead": 120.92782504182705,
    "mi": 83.27920988727506,
    "token_count": 140.0,
    "exec_success": true
  }
]