```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)  # Assuming all bins have same capacity, take max available as capacity

    # Fit score: Higher when the item fits
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        remaining_space = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1 / (remaining_space + 0.0001)  # Inverse of remaining space: smaller => Higher priority; adding small constant to avoid division by zero

        # Nearly full bonus: preference for bins that become nearly full
        nearly_full_threshold = 0.1 * bin_capacity  # Adjust threshold as needed
        nearly_full_mask = (remaining_space >= 0) & (remaining_space <= nearly_full_threshold)
        priorities[fit_mask][nearly_full_mask] += 1.0  # Significantly increased bonus

        # Medium fill bonus: A bonus if we make the bin about half full. Changed thresholds and bonus.
        medium_full_lower = 0.4 * bin_capacity
        medium_full_upper = 0.6 * bin_capacity
        medium_full_mask = (bins_remain_cap[fit_mask] >= medium_full_lower) & ((bins_remain_cap[fit_mask] - item) <= medium_full_upper)
        priorities[fit_mask][medium_full_mask] += 0.5  # Increased bonus for medium fill

        # Smallest remaining space bonus (among bins that fit): Gives priority to the bin with the smallest remaining space.
        min_remaining_space_index = np.argmin(remaining_space)
        priorities[fit_mask][min_remaining_space_index] += 0.75  # Extra bonus for smallest remaining space.

    else:
        # Item does not fit: Assign a negative priority proportional to how much it overflows
        overflow = item - bins_remain_cap
        priorities = -overflow * 2  # Penalize overflow more heavily

    return priorities
```
