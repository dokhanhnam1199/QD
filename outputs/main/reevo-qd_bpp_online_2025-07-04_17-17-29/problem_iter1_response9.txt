```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit-Decreasing inspired heuristic: prioritize bins that have just enough space.
    # Avoid fragmenting bins by preferring bins where the item fills a large proportion of the remaining capacity, but not so large as to be a tight fit leading to future issues.
    
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            fill_ratio = item / cap
            
            # Give higher priority to bins that result in a fill ratio in a good range (e.g., 0.6 - 0.9)
            if 0.6 <= fill_ratio <= 0.9:
                priorities[i] += 1.0 + fill_ratio # Fill Ratio will increase score for packing nicely

            # Prefer bins where item fits more tightly compared to completely empty or larger bins
            priorities[i] += np.exp(-np.abs(cap - item) / np.mean(bins_remain_cap))

            # Bonus for bins that would leave only a small amount of space, indicating efficient packing
            remaining_after_pack = cap - item
            if 0 < remaining_after_pack <= np.mean(bins_remain_cap)/4:  # tuneable parameter. packing this tightly can be good in some cases
                priorities[i] += 0.5

        else:
            priorities[i] = -np.inf # Infeasible to pack.
            
    return priorities
```
