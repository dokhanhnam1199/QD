```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            priorities[i] = (cap - item) / cap  # Remaining capacity ratio
        else:
            priorities[i] = -1.0  # Not feasible, very low priority

    # Add a small bonus for bins that are close to being full (but still fit the item)
    # This encourages filling existing bins more completely.
    near_full_threshold = 0.1  # Define what "close to full" means (e.g., remaining capacity < 10% of total)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item and cap / (cap + item) < near_full_threshold: #if the proportion of additional item is greater than near_full_threshold
            priorities[i] += 0.2  # Bonus for near-full bins

    return priorities
```
