```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # High priority to bins where item fits with smallest remaining space (First-Fit Decreasing principle)
    # Avoid fragmentation: prioritize bins that have just enough space.
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        remaining_space = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = -remaining_space  # Smaller remaining space => Higher priority

        # Boost bins close to full after packing, but avoid bins that get too full (risk of not fitting subsequent smaller items)
        tolerance_factor = 0.2
        nearly_full_threshold = tolerance_factor * np.max(bins_remain_cap)
        nearly_full_mask = (remaining_space >= 0) & (remaining_space <= nearly_full_threshold)

        if np.any(nearly_full_mask):
            priorities[fit_mask][nearly_full_mask] += 1 # Small positive boost to encourage filling near-full bins, 1 could be tuned

        # Penalize bins that become too full after packing: This helps balance bin usage
        too_full_threshold = -0.05 * np.max(bins_remain_cap) # A little bit of overflow may be acceptable, depending on the item dist.
        too_full_mask = remaining_space < too_full_threshold # Consider some small tolerance

        if np.any(too_full_mask):
            priorities[fit_mask][too_full_mask] -= 2  # Large negative penalty

        #Prioritize bins with a remaining capacity close to the current item size
        close_size_threshold = 0.2 * item
        close_size_mask = np.abs(bins_remain_cap[fit_mask] - item) <= close_size_threshold
        if np.any(close_size_mask):
             priorities[fit_mask][close_size_mask] += 0.5 # Medium positive boost
    else:
        # If the item does not fit in any bin, assign a very low priority
        priorities[:] = -np.inf

    return priorities
```
