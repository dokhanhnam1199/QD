```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Immediate fit has highest priority
    immediate_fit = np.isclose(bins_remain_cap, item)
    priorities[immediate_fit] = 1000  # High priority

    # First-Fit Decreasing-like: Prefer bins where the item fits and minimize wasted space
    fits = bins_remain_cap >= item
    waste = bins_remain_cap - item
    
    priorities[fits] = 100 / (waste[fits] + 0.001)  # Avoid division by zero

    # Avoid bins that are too small to fit the item
    priorities[bins_remain_cap < item] = -1000  # very low priority

    return priorities
```
