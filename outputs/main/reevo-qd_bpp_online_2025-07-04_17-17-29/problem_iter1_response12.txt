```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First-Fit Decreasing-like: prefer bins that can accommodate the item
            # Fill Rate: prefer bins that are filled more after the item is added
            fill_rate_after = item / cap

            # Remaining Capacity: prioritize bins with least remaining capacity after placement.
            remaining_cap_after = cap - item
            
            # Combination: a weighted combination of the above
            priorities[i] = 10 * (1 - remaining_cap_after / np.max(bins_remain_cap)) + 5 * fill_rate_after # remaining cap impact and fill rate impact

            # Best Fit - prefer bins that have just enough to fit item
            priorities[i] += 100/(cap - item + 0.001) #Add to priorites and prefer small diff. Add a small value for stability.

        else:
            # Penalize bins that cannot accommodate the item
            priorities[i] = -1e9

    return priorities
```
