```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] = 1

    # Among the bins that can fit, prioritize those with less remaining space after packing the item.
    remaining_space = bins_remain_cap - item
    remaining_space[~can_fit] = np.inf #set to infinity if it cannot fit so as to ignore it in prioritization

    #Invert the remaning space to use as priority (smaller remaning space = higher priority)
    priorities[can_fit] = 1/(remaining_space[can_fit] + 1e-9) #Added a small epsilon to prevent division by zero errors

    # Add a bonus to almost full bins
    almost_full = (bins_remain_cap >= item) & (remaining_space < 0.1) #Bins will only get this bonus when it fits. 0.1 here can be considered a hyperparameter.
    priorities[almost_full] += 2

    return priorities
```
