```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize bins where item fits with smallest remaining space (First-Fit Decreasing principle)
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        remaining_space = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = -remaining_space  # Smaller remaining space => Higher priority

        # Reward near-full bins after packing (but not excessively full)
        near_full_threshold = 0.2 # Tunable: consider bins with remaining capacity <= this value as nearly full
        nearly_full_mask = (remaining_space >= 0) & (remaining_space <= near_full_threshold)
        if np.any(nearly_full_mask):
            fullness_ratio = (bins_remain_cap[fit_mask][nearly_full_mask] - remaining_space[nearly_full_mask]) / bins_remain_cap[fit_mask][nearly_full_mask]
            priorities[fit_mask][nearly_full_mask] += 3 * fullness_ratio  # Boost proportional to fullness, amplified even more. Tuned

        # Penalize bins that become too full after packing. Stronger penalty.
        too_full_threshold = 0.03 # Tunable: consider bins with remaining capacity <= this value as too full
        too_full_mask = remaining_space < too_full_threshold
        if np.any(too_full_mask & fit_mask):
            priorities[fit_mask][too_full_mask & (remaining_space > -1e-6)] -= 10  # Stronger penalty to discourage overfilling. Tuned
            priorities[fit_mask][too_full_mask & (remaining_space > -1e-6)] = np.clip(priorities[fit_mask][too_full_mask & (remaining_space > -1e-6)], -np.inf, 0) # Ensure non-positive priority
        
        #Slight reward for filling up bins moderately to avoid excessive empty bins
        moderate_fill_threshold_lower = 0.5
        moderate_fill_threshold_upper = 0.8
        moderate_fill_mask = (remaining_space >= moderate_fill_threshold_lower) & (remaining_space <= moderate_fill_threshold_upper)
        if np.any(moderate_fill_mask):
            priorities[fit_mask][moderate_fill_mask] += 0.5

    else:
        # If the item does not fit in any bin, assign a very low priority
        priorities[:] = -np.inf

    return priorities
```
