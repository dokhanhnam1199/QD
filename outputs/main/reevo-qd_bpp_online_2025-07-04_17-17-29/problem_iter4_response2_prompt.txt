{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # High priority to bins where item fits with smallest remaining space (First-Fit Decreasing principle)\n    # Avoid fragmentation: prioritize bins that have just enough space.\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):\n        remaining_space = bins_remain_cap[fit_mask] - item\n        priorities[fit_mask] = -remaining_space  # Smaller remaining space => Higher priority\n\n        # Boost bins close to full after packing, but avoid bins that get too full (risk of not fitting subsequent smaller items)\n        # The boost is now proportional to how \"full\" the bin becomes after packing.\n        nearly_full_mask = (remaining_space >= 0) & (remaining_space <= 0.3) #tolerate remaining space upto 0.3. Tuned\n        if np.any(nearly_full_mask):\n            fullness_ratio = (bins_remain_cap[fit_mask][nearly_full_mask] - remaining_space[nearly_full_mask]) / bins_remain_cap[fit_mask][nearly_full_mask] # Ratio of filled space to original capacity\n            priorities[fit_mask][nearly_full_mask] += 2 * fullness_ratio # Boost is now proportional to fullness, amplified. Tuned\n\n        # Penalize bins that become too full after packing\n        too_full_mask = remaining_space < 0.05 #tunable. if remaining space < 0.05, it becomes 'too full'\n        if np.any(too_full_mask & fit_mask): #make sure to only penalize bins where the item fits\n            priorities[fit_mask][too_full_mask & (remaining_space > -1e-6)] -= 5 # Penalize, but only if there's very minor overflow due to floating point issues. Tuned\n            priorities[fit_mask][too_full_mask & (remaining_space > -1e-6)] = np.clip(priorities[fit_mask][too_full_mask & (remaining_space > -1e-6)], -np.inf, 0) #Clip to avoid having positive prioirities from penalizing overflow, tuned\n    else:\n        # If the item does not fit in any bin, assign a very low priority\n        priorities[:] = -np.inf\n\n    return priorities\n\n[Reflection]\nThe better code prioritizes fitting, minimizes wasted space/fragmentation, and avoids bins becoming too full.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}