```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)
    
    # Feasibility check
    fit_mask = bins_remain_cap >= item
    if not np.any(fit_mask):
        priorities[:] = -np.inf  # Item doesn't fit, lowest priority
        return priorities
    
    # Calculate remaining space after placing the item
    remaining_space = bins_remain_cap[fit_mask] - item
    
    # Core priority: Favor tighter fits (FFD principle)
    priorities[fit_mask] = -remaining_space

    # Refinement 1: Boost near-full bins (but avoid overflowing)
    nearly_full_threshold = 0.2 * max_cap
    nearly_full_mask = (remaining_space >= 0) & (remaining_space <= nearly_full_threshold)
    if np.any(nearly_full_mask):
        boost_factor = min(1.0, item / max_cap) # Scale the boost with item size
        priorities[fit_mask][nearly_full_mask] += 2 * boost_factor

    # Refinement 2: Penalize almost-full bins (encourage diversity)
    almost_full_threshold = 0.05 * max_cap
    almost_full_mask = (remaining_space > 0) & (remaining_space <= almost_full_threshold)
    if np.any(almost_full_mask):
        priorities[fit_mask][almost_full_mask] -= 0.5

    # Refinement 3: Penalize bins that are too empty (avoid spreading too thin)
    too_empty_threshold = 0.8 * max_cap
    too_empty_mask = (remaining_space >= 0) & (remaining_space >= too_empty_threshold)
    if np.any(too_empty_mask):
        priorities[fit_mask][too_empty_mask] -= 1
        
    return priorities
```
