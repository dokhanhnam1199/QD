```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)  # Assuming all bins have the same capacity

    # High priority to bins where item fits with smallest remaining space (First-Fit Decreasing principle)
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        remaining_space = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = -remaining_space  # Smaller remaining space => Higher priority

        # Boost bins close to full after packing, but avoid bins that get too full (risk of not fitting subsequent smaller items)
        nearly_full_threshold_low = 0.1 * bin_capacity
        nearly_full_threshold_high = 0.3 * bin_capacity

        nearly_full_mask = (remaining_space >= 0) & (remaining_space <= nearly_full_threshold_high)

        if np.any(nearly_full_mask):
            priorities[fit_mask][nearly_full_mask] += 2  # Small positive boost to encourage filling near-full bins, tune

        # Slight penalization to bins that become too empty, to encourage usage, but less harsh
        too_empty_mask = (bins_remain_cap[fit_mask] - item) > 0.6 * bin_capacity
        if np.any(too_empty_mask):
            priorities[fit_mask][too_empty_mask] -= 0.5  # Penalize bins that get too empty after placing the item, less harsh

        # Give slight preference to bins with higher initial remaining capacity if multiple bins are suitable.
        # Helps to distribute items and potentially avoid creating too many nearly-full bins too early.
        priorities[fit_mask] += bins_remain_cap[fit_mask] / (2 * bin_capacity) # Scale to avoid overpowering other priority components

    else:
        # If the item does not fit in any bin, assign a very low priority
        priorities[:] = -np.inf

    return priorities
```
