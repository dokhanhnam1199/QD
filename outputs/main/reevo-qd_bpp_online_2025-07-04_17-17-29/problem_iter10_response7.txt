```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize fitting the item
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        remaining_space = bins_remain_cap[fit_mask] - item
        
        # Minimize wasted space (First-Fit Decreasing principle)
        priorities[fit_mask] = -remaining_space

        # Encourage bins that will be reasonably full after packing
        fullness_threshold_low = 0.1  # Target lower bound for remaining capacity
        fullness_threshold_high = 0.4 # Target higher bound for remaining capacity. Tuned for better spread

        reasonably_full_mask = (remaining_space >= fullness_threshold_low) & (remaining_space <= fullness_threshold_high)
        if np.any(reasonably_full_mask):
            fullness_ratio = (bins_remain_cap[fit_mask][reasonably_full_mask] - remaining_space[reasonably_full_mask]) / bins_remain_cap[fit_mask][reasonably_full_mask]
            priorities[fit_mask][reasonably_full_mask] += 1.5 * fullness_ratio  # Increased boost for reasonably full bins. Tuned

        # Heavily Penalize bins that become nearly full to avoid overfilling. Stronger penalty.
        nearly_full_threshold = 0.05 # If remaining space is less than this, it's considered nearly full
        nearly_full_mask = remaining_space < nearly_full_threshold
        if np.any(nearly_full_mask):
             priorities[fit_mask][nearly_full_mask] -= 10 # Large penalty for nearly full bins. Tuned

    else:
        # If the item does not fit in any bin, assign a very low priority
        priorities[:] = -np.inf

    return priorities
```
