```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First, find bins that can actually fit the item
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        # If no bins can fit, prioritize bins with the largest remaining capacity.
        # In this edge case, we might need to open a new bin later anyway.
        priorities = bins_remain_cap
        return priorities

    # For bins that can fit the item:
    remaining_after_fit = bins_remain_cap[valid_bins] - item

    # Prioritize bins where the item fits best (smallest remaining space). Add a small constant
    # to remaining_after_fit to avoid division by zero in case of a perfect fit.
    priorities[valid_bins] = 1.0 / (remaining_after_fit + 0.0001)

    # Boost priority for almost full bins after packing. This encourages filling them up.
    almost_full_threshold = 0.1 #Bins will be more prioritised if remaining capacity less than 10%
    almost_full_bins = (item > bins_remain_cap * (1-almost_full_threshold)) & valid_bins

    priorities[almost_full_bins] *= 2.0 # Increase weight for almost full bins

    return priorities
```
