```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize bins where item fits
    fit_mask = bins_remain_cap >= item

    if np.any(fit_mask):
        remaining_space = bins_remain_cap[fit_mask] - item
        # Primary priority: minimize wasted space
        priorities[fit_mask] = -remaining_space

        # Dynamically adjust parameters based on item size
        item_size_threshold = 0.5 * np.max(bins_remain_cap)  # Example: half of the largest possible bin capacity
        nearly_full_threshold = 0.1 * np.max(bins_remain_cap) if item < item_size_threshold else 0.2 * np.max(bins_remain_cap)

        # Reward near-full bins (but not too full)
        nearly_full_mask = (remaining_space >= 0) & (remaining_space <= nearly_full_threshold) # small if item is small, larger otherwise

        if np.any(nearly_full_mask):
            # More significant boost for near-full bins when the item is small
            priority_boost = 2.0 if item < item_size_threshold else 1.0
            priorities[fit_mask][nearly_full_mask] += priority_boost


        # Penalize bins that will become too full after packing (increased fragmentation)
        too_full_threshold = -0.05 * np.max(bins_remain_cap) #small negative tolerance since remaining_space can be zero
        too_full_mask = (remaining_space < too_full_threshold) & (remaining_space >= -item)  #consider already feasible items only to avoid incorrect penalty


        if np.any(too_full_mask):
             priorities[fit_mask][too_full_mask] -= 3  #Large negative penalty to avoid these bins

    else:
        # Item does not fit: assign very low priority, but slightly better than completely full bins
        priorities[:] = -np.inf
        #Attempt to account for possibility of split (not fully implemented in bin packing)
        #Prioritize empty bins in the hopes that the item can be split later on.
        empty_bin_mask = bins_remain_cap == np.max(bins_remain_cap)
        if np.any(empty_bin_mask):
            priorities[empty_bin_mask] = -np.max(bins_remain_cap) *2  # slightly better than negative infinity

    return priorities
```
