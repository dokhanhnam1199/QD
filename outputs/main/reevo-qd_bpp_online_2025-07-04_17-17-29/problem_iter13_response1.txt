```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)  # Assuming all bins have the same capacity

    fit_mask = bins_remain_cap >= item

    if np.any(fit_mask):
        remaining_space = bins_remain_cap[fit_mask] - item
        
        # Prioritize tighter fits
        priorities[fit_mask] = (bin_capacity - remaining_space) / bin_capacity # reward bins for high utilization

        # Boost near-full bins
        nearly_full_threshold = 0.2 * bin_capacity
        nearly_full_mask = (remaining_space >= 0) & (remaining_space <= nearly_full_threshold)
        if np.any(nearly_full_mask):
            priorities[fit_mask][nearly_full_mask] += 0.5  # Tunable boost for nearly full bins

        # Penalize excessive emptiness after packing
        empty_threshold = 0.8 * bin_capacity # If >80% of bin is unused after placing item
        excessively_empty_mask = remaining_space > empty_threshold

        if np.any(excessively_empty_mask):
             priorities[fit_mask][excessively_empty_mask] -= 0.3 #Tunable penalty for empty bins

    else:
        # Item doesn't fit in any bin
        priorities[:] = -np.inf # Very low priority

    return priorities
```
