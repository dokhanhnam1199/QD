```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Very high priority if the item fits perfectly
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = 1e9  # Assign a very high priority
    
    # High priority for bins where the item fits and leaves minimal waste
    fits = bins_remain_cap >= item
    if np.any(fits):
        waste = bins_remain_cap[fits] - item
        # Prioritize bins with smallest waste, but also factor in bin usage.
        # Avoid pathological cases by adding a small value to waste
        priorities[fits] = 1.0 / (waste + 0.001) + bins_remain_cap[fits]/np.sum(bins_remain_cap)

    # Give negative priority to bins where item does not fit to disqualify them.
    priorities[~fits] = -1e9 #assign very low priority
    

    return priorities
```
