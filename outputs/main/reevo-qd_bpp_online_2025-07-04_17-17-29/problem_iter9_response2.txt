```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # High priority to bins where item fits with smallest remaining space (First-Fit Decreasing principle)
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        remaining_space = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = -remaining_space  # Smaller remaining space => Higher priority

        # Boost bins close to full after packing, but avoid bins that get too full
        tolerance_factor = 0.2
        max_cap = np.max(bins_remain_cap) #Use initial max capacity instead?
        nearly_full_threshold = tolerance_factor * max_cap

        nearly_full_mask = (remaining_space >= 0) & (remaining_space <= nearly_full_threshold)
        if np.any(nearly_full_mask):
            priorities[fit_mask][nearly_full_mask] += 2 # Larger boost to encourage filling near-full bins


        # Penalize bins that become too empty after packing.  Adjust penalty dynamically
        emptiness_threshold = 0.6 * max_cap #If bin is more than 60% empty after packing, apply penalty.

        too_empty_mask = (remaining_space > emptiness_threshold) & (remaining_space <= max_cap)
        if np.any(too_empty_mask):

            priorities[fit_mask][too_empty_mask] -= 0.5 #Moderate penalty for creating very empty bins, could be tuned

    else:
        # If the item does not fit in any bin, assign a very low priority
        priorities[:] = -np.inf

    return priorities
```
