```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # High priority to bins where item fits with smallest remaining space (First-Fit Decreasing principle)
    # Avoid fragmentation: prioritize bins that have just enough space.
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        remaining_space = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = -remaining_space  # Smaller remaining space => Higher priority

        # Boost bins close to full after packing, but avoid bins that get too full (risk of not fitting subsequent smaller items)
        max_cap = np.max(bins_remain_cap)
        nearly_full_mask = (remaining_space >= 0) & (remaining_space <= 0.2 * max_cap) #tolerate a max 20% of the largest bin size as tolerance

        if np.any(nearly_full_mask):
            priorities[fit_mask][nearly_full_mask] += 2  # Small positive boost to encourage filling near-full bins, tuned to 2

        # Slightly penalize bins that become almost completely full. This encourages a bit of diversity.
        almost_full_mask = (remaining_space > 0) & (remaining_space <= 0.05 * max_cap)
        if np.any(almost_full_mask):
            priorities[fit_mask][almost_full_mask] -= 0.5

        #Prioritize bins that have a remaining capacity close to the mean of the item sizes.
        mean_item_size = np.mean(item) if isinstance(item, np.ndarray) else item #handles both single item and array input for item.
        optimal_remaining_space_mask = (remaining_space >= 0.8*mean_item_size) & (remaining_space <= 1.2*mean_item_size)

        if np.any(optimal_remaining_space_mask):
            priorities[fit_mask][optimal_remaining_space_mask] += 1.0

    else:
        # If the item does not fit in any bin, assign a very low priority
        priorities[:] = -np.inf

    return priorities
```
