```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # High priority to bins where item fits with smallest remaining space (First-Fit Decreasing principle)
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        remaining_space = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = -remaining_space  # Smaller remaining space => Higher priority

        # Dynamically adjust "nearly full" threshold based on item size
        nearly_full_threshold = min(0.2 * np.max(bins_remain_cap), item) # Target near-full, relative to item and bin size
        nearly_full_mask = (remaining_space >= 0) & (remaining_space <= nearly_full_threshold)

        if np.any(nearly_full_mask):
            priorities[fit_mask][nearly_full_mask] += 2 # Stronger boost

        # Penalize bins where very small space will be left unused
        tiny_space_threshold = 0.1 * np.max(bins_remain_cap) # e.g., less than 10% of largest bin capacity
        tiny_space_mask = (remaining_space > 0) & (remaining_space <= tiny_space_threshold)

        if np.any(tiny_space_mask):
            priorities[fit_mask][tiny_space_mask] -= 0.5 # Slight negative penalty
    else:
        # If the item does not fit in any bin, assign a very low priority
        priorities[:] = -np.inf

    return priorities
```
