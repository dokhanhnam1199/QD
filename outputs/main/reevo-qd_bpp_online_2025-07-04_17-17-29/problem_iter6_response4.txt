```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize tight fits, avoid excessive fragmentation, and penalize infeasible assignments.
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        remaining_space = bins_remain_cap[fit_mask] - item
        
        # Prioritize tighter fits using a reciprocal function. This gives diminishing returns.
        priorities[fit_mask] = 1.0 / (remaining_space + 0.001)  # Add a small constant to avoid division by zero

        # Further boost bins that become nearly full after packing. This helps consolidate items.
        nearly_full_mask = (remaining_space >= 0) & (remaining_space <= 0.2 * np.max(bins_remain_cap)) #tolerate a max 20% of the largest bin size as tolerance
        if np.any(nearly_full_mask):
            priorities[fit_mask][nearly_full_mask] += 5  # Significant boost

        # Slightly penalize bins with significantly larger remaining capacity to avoid creating excessively empty bins.
        # This is a softer penalty than rejecting infeasible bins, but discourages large gaps.
        large_gap_mask = remaining_space > 0.5 * np.max(bins_remain_cap) #tolerate a max 50% of the largest bin size as tolerance
        if np.any(large_gap_mask):
             priorities[fit_mask][large_gap_mask] -= 1

    else:
        # Item does not fit in any bin. Heavily penalize this option by setting all priorities to negative infinity.
        priorities[:] = -np.inf

    return priorities
```
