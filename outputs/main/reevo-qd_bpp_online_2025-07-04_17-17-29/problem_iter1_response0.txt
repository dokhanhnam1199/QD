```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # High priority if the item fits and the remaining capacity is small.
    # This encourages filling bins as much as possible.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask]

    # If the item doesn't fit, give a very low priority (negative value).
    priorities[~fit_mask] = -1.0

    # Add a small random number to break ties and encourage exploration.
    priorities += np.random.rand(len(bins_remain_cap)) * 0.001

    return priorities
```
