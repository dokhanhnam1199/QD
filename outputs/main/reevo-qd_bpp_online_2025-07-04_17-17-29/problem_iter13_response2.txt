```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # Fit score: prioritize bins where item fits
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        remaining_space = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 100  # Base fit score

        # Tight fit bonus
        tight_fit_bonus = np.exp(-remaining_space / (0.1 * bin_capacity))  # Exponential decay based on remaining space
        priorities[fit_mask] += tight_fit_bonus

        # Near-full bonus
        near_full_threshold = 0.2 * bin_capacity
        near_full_mask = (remaining_space >= 0) & (remaining_space <= near_full_threshold)
        priorities[fit_mask][near_full_mask] += 50 # Larger bonus for near full

        # Avoid excessive emptiness penalty
        excessive_emptiness_threshold = 0.7 * bin_capacity
        initial_emptiness = bins_remain_cap[fit_mask]
        excessive_emptiness_mask = (initial_emptiness > excessive_emptiness_threshold)
        priorities[fit_mask][excessive_emptiness_mask] -= 20  # Penalty for using very empty bins

    else:
        # Item does not fit: assign a negative priority proportional to overfill amount
        overfill_amount = item - bins_remain_cap
        priorities = -overfill_amount  # Severe penalty if the item doesn't fit
        priorities[bins_remain_cap < 0] = -np.inf #Avoid bins that are already filled

    return priorities
```
