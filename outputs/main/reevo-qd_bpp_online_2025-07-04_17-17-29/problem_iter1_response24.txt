```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Immediate fit gets highest priority
    immediate_fit = (bins_remain_cap == item)
    priorities[immediate_fit] = 1000  # Very high priority

    # Next-fit-decreasing-like: prioritize bins that can fit item with smallest waste
    can_fit = (bins_remain_cap >= item)
    if np.any(can_fit):
        waste = bins_remain_cap[can_fit] - item
        min_waste = np.min(waste)
        priorities[can_fit] = 100 / (waste + 0.0001) # Higher waste gives smaller priority
    else:
        # If no bin can fit, assign a low priority (can modify this to allow overflow)
        priorities[:] = -1000 # Very Low priority so that the algorithm would add more bins.
        
    return priorities
```
