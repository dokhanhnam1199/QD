```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Assign very low priority to bins that cannot fit the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # For feasible bins, calculate priority based on multiple factors:

    # 1. Remaining capacity after placing the item (smaller is better, prefer filling bins)
    remaining_capacity = bins_remain_cap - item
    remaining_capacity[infeasible_mask] = np.inf  # Ensure infeasible bins don't influence

    # 2. Ratio of item size to remaining capacity (higher is better - trying to pack efficiently)
    capacity_ratio = item / bins_remain_cap
    capacity_ratio[infeasible_mask] = 0.0 #avoid inf/NaN

    # 3. Bonus for bins that are almost full after placing the item
    almost_full_bonus = np.where((remaining_capacity >= 0) & (remaining_capacity <= 0.1), 1.0, 0.0) #tunable threshold

    #Combine the factors to compute the priority
    priorities = capacity_ratio + almost_full_bonus - 0.1 * remaining_capacity  # Adjusted weights

    return priorities
```
