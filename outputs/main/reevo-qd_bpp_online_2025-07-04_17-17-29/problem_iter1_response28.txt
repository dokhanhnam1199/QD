```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item

    # Assign priorities based on different criteria
    for i, remaining_capacity in enumerate(remaining_capacities):
        if remaining_capacity >= 0:
            # If item fits:

            # 1. Prefer bins with less remaining capacity after adding item (First-Fit Decreasing inspired)
            priorities[i] += 1 / (remaining_capacity + 1e-9)  # Add a small constant to prevent division by zero

            # 2. Higher priority if the item fills more of the bin's original capacity (maximize bin usage)
            priorities[i] += item / (bins_remain_cap[i] + 1e-9)
            
            # 3. Give bins near the item size higher priority, promotes fitting similar sized items
            priorities[i] += np.exp(-np.abs(bins_remain_cap[i] - item))

            # 4. Avoid bins that will become almost full. If remaining capacity after packing is very small penalize.
            if remaining_capacity < 0.1: #Can be tunable parameter based on the bin capacity
                priorities[i] -= 10

        else:
            # If item doesn't fit, assign a very low priority
            priorities[i] = -1e9  # Very negative value

    return priorities
```
