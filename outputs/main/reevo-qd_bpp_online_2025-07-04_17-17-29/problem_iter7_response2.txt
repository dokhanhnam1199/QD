```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = np.max(bins_remain_cap)

    # Prioritize bins where the item fits
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        remaining_space = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1 / (remaining_space + 0.0001) # Smaller remaining space => Higher priority, avoid division by zero

        # Boost bins that become nearly full after packing
        nearly_full_threshold = 0.15 * bin_size  # Dynamically set nearly full threshold, tuneable
        nearly_full_mask = (remaining_space >= 0) & (remaining_space <= nearly_full_threshold)
        if np.any(nearly_full_mask):
            priorities[fit_mask][nearly_full_mask] += 5 # Higher boost for nearly full

        # Penalize bins that become too full after packing
        overfull_threshold = -0.05 * bin_size  #Allow small overfill if necessary, but heavily penalize it.
        overfull_mask = remaining_space < overfull_threshold
        if np.any(overfull_mask):
            priorities[fit_mask][overfull_mask] -= 10  # Large penalty

    else:
        # If the item does not fit in any bin, assign a penalty proportional to the overage
        overage = item - bins_remain_cap
        priorities = -overage # Penalize bins based on the amount of overflow needed.

    return priorities
```
