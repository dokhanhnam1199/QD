```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize tight fits, minimize fragmentation.
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        remaining_space = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = -remaining_space

        # Reward near-full bins, but add a penalty if remaining space is too small (increased fragmentation)
        nearly_full_threshold = 0.2 * np.max(bins_remain_cap)
        too_full_threshold = 0.05 * np.max(bins_remain_cap)  #Even smaller threshold for "too full"
        nearly_full_mask = (remaining_space >= 0) & (remaining_space <= nearly_full_threshold)
        too_full_mask = (remaining_space >= 0) & (remaining_space <= too_full_threshold)

        if np.any(nearly_full_mask):
            priorities[fit_mask][nearly_full_mask] += 5 #Increased boost for nearly full

        if np.any(too_full_mask):
            priorities[fit_mask][too_full_mask] -= 2 #Penalize almost full bins slightly to avoid them.

        #Small bonus for bins which are still relatively empty but can fit item.
        relatively_empty_threshold = 0.8 * np.max(bins_remain_cap)
        relatively_empty_mask = (bins_remain_cap[fit_mask] >= relatively_empty_threshold)

        if np.any(relatively_empty_mask):
            priorities[fit_mask][relatively_empty_mask] += 0.5

    else:
        # Harsh penalty for infeasibility
        priorities[:] = -np.inf

    return priorities
```
