```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Prioritize bins where the item fits
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = 1

    # Adjust priority based on remaining capacity after placing the item
    remaining_after_fit = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] += (bins_remain_cap[fit_mask] - item) / np.max(bins_remain_cap)

    # Give very high priority to bins that fit nearly perfectly
    near_perfect_fit_mask = (bins_remain_cap >= item) & (bins_remain_cap - item <= 0.1 * np.max(bins_remain_cap))  #Tolerance can be a parameter if needed

    priorities[near_perfect_fit_mask] += 5  # Large constant to greatly prioritize

    # For bins that don't fit, give them a negative priority, less preferable but still a possibility with some adjustments.  Consider a really really bad score instead.
    does_not_fit_mask = bins_remain_cap < item
    priorities[does_not_fit_mask] = -10 # Arbitrarily large negative number

    return priorities
```
