```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give high priority to bins that can fit the item snugly
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask] 

    # If an item doesn't fit, penalize harshly, but not to zero to allow for corner cases where only non-fitting bins are availiable.
    non_fit_mask = bins_remain_cap < item
    priorities[non_fit_mask] = -1000 * (item - bins_remain_cap[non_fit_mask])
    
    # Boost priority of bins which are nearly full, since filling them up avoids having near empty bins at the end.
    nearly_full_mask = (bins_remain_cap > 0) & (bins_remain_cap <= 2 * item) #arbitrary choice of 2*item as limit
    priorities[nearly_full_mask] += 0.1
    
    return priorities
```
