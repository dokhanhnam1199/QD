```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap) # Assuming all bins have same capacity, take max available as capacity

    # Fit score: Higher when the item fits
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        remaining_space = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1 / (remaining_space + 0.0001)  # Inverse of remaining space: smaller => Higher priority; adding small constant to avoid division by zero

        # Nearly full bonus: slight preference for bins that become nearly full
        nearly_full_mask = (remaining_space >= 0) & (remaining_space <= 0.2 * bin_capacity) # Up to 20% free space
        priorities[fit_mask][nearly_full_mask] += 0.5 # Bonus

        # Medium fill bonus: A bonus if we make the bin about half full
        medium_full_mask = (bins_remain_cap[fit_mask] >= 0.4 * bin_capacity) & ((bins_remain_cap[fit_mask] - item) <= 0.6* bin_capacity)
        priorities[fit_mask][medium_full_mask] += 0.25
    else:
        # Item does not fit: Assign a negative priority proportional to how much it overflows
        overflow = item - bins_remain_cap
        priorities = -overflow #Penalize more for bigger overflows


    return priorities
```
