```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Assign high priority to bins that can fit the item perfectly or almost perfectly.
    perfect_fit = np.isclose(bins_remain_cap, item)
    almost_perfect_fit = (bins_remain_cap > item) & (bins_remain_cap <= item * 1.1) # up to 10% larger
    
    priorities[perfect_fit] = 100  # Very high priority for perfect fit.
    priorities[almost_perfect_fit] = 90  # High priority for near perfect fit

    # Moderate priority if item fits with a reasonable amount of space left over
    reasonable_fit = (bins_remain_cap >= item)
    priorities[reasonable_fit] = bins_remain_cap[reasonable_fit] - item  # Remaining capacity becomes the score - try to minimize waste

    # Give a negative score if the item doesn't fit, discouraging from selecting a bin
    does_not_fit = (bins_remain_cap < item)
    priorities[does_not_fit] = -1000 #Large penalty

    return priorities
```
