```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # High priority to bins where item fits with smallest remaining space (First-Fit Decreasing principle)
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        remaining_space = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = -remaining_space  # Smaller remaining space => Higher priority

        # Dynamic adjustment based on item size:
        # If item is large, prioritize bins that will be reasonably full
        # If item is small, prioritize bins that are already nearly full
        max_cap = np.max(bins_remain_cap)
        if item > 0.5 * max_cap:
            # Large item: Encourage fitting into bins that would become at least 75% full
            nearly_full_mask = (remaining_space >= 0) & (bins_remain_cap[fit_mask] >= 0.75 * max_cap)
            if np.any(nearly_full_mask):
                priorities[fit_mask][nearly_full_mask] += 2 # Significant boost

        else:
            # Small item: Focus on filling almost full bins
             nearly_full_mask = (remaining_space >= 0) & (remaining_space <= 0.2 * max_cap)
             if np.any(nearly_full_mask):
                priorities[fit_mask][nearly_full_mask] += 1 # Small boost

        #Moderate penalty for bins getting too empty after placement to encourage using more full bins first.
        too_empty_mask = (remaining_space > 0.8 * max_cap)
        if np.any(too_empty_mask):
            priorities[fit_mask][too_empty_mask] -= 0.5


    else:
        # If the item does not fit in any bin, assign a very low priority
        priorities[:] = -np.inf

    return priorities
```
