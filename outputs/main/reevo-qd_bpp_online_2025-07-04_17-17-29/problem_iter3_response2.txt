```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get minimum priority
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Feasible bins
    feasible_mask = ~infeasible_mask
    feasible_bins_cap = bins_remain_cap[feasible_mask]

    # Tight fit priority (minimize wasted space)
    remaining_space = feasible_bins_cap - item
    priorities[feasible_mask] = -remaining_space

    # Prioritize bins that become nearly full after adding the item
    nearly_full_threshold = 0.1  # Adjust this threshold as needed (fraction of bin capacity)
    nearly_full_mask = (remaining_space >= 0) & (remaining_space <= nearly_full_threshold * np.max(bins_remain_cap))

    if np.any(nearly_full_mask):
        boost_magnitude = 2.0  # Tune this boost magnitude
        priorities[feasible_mask][nearly_full_mask] += boost_magnitude

    # Add a smaller boost to bins that are already relatively full, but not nearly full AFTER insertion
    relatively_full_threshold_lower = 0.2 # bins must be at least this full
    relatively_full_threshold_upper = 0.8
    relatively_full_mask = (bins_remain_cap[feasible_mask] <= relatively_full_threshold_upper * np.max(bins_remain_cap)) & (bins_remain_cap[feasible_mask] >= relatively_full_threshold_lower * np.max(bins_remain_cap))

    if np.any(relatively_full_mask):
        boost_magnitude_relative = 0.5
        priorities[feasible_mask][relatively_full_mask] += boost_magnitude_relative

    return priorities
```
