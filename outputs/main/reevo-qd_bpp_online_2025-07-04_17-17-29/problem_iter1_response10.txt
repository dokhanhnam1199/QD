```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate wasted space if the item is placed in each bin
    wasted_space = bins_remain_cap - item

    # Give a high priority to bins where the item fits and the wasted space is small
    fit_indices = wasted_space >= 0
    if np.any(fit_indices):
        # Prioritize bins with smaller wasted space
        priorities[fit_indices] = 1 / (wasted_space[fit_indices] + 0.0001)  # Adding a small constant to avoid division by zero

        # Boost priority for bins that are close to being full after adding the item
        close_to_full = (bins_remain_cap[fit_indices] - item) < (0.1 * np.max(bins_remain_cap)) #Consider tolerance of 10% of the max bin size
        priorities[fit_indices][close_to_full] *= 2
    else:
        # If the item doesn't fit in any bin, prioritize the bin with largest remaining capacity
         priorities = bins_remain_cap / np.max(bins_remain_cap)
         priorities = priorities / (item - bins_remain_cap) #This ensure larger bins are always prefered.
         priorities = np.nan_to_num(priorities, neginf=0, posinf=0) #remove infinities and nans if possible.
         priorities = -1*priorities #Make the values small negative number so that we add it to already initialized zeros, it gives a small negative prioirty.
         

    return priorities
```
