```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Assign a high priority if the item fits in the bin
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = 1

    # Calculate remaining capacity after placing the item
    remaining_capacity = bins_remain_cap - item

    #Prioritize bins with smallest remaining capacity
    priorities[fit_mask] += (bins_remain_cap[fit_mask] - item) / np.max(bins_remain_cap) if np.any(fit_mask) else 0

    # Negative priority for bins that don't fit
    priorities[~fit_mask] = -1

    return priorities
```
