```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # Feasibility check: if item fits
    fit_mask = bins_remain_cap >= item

    if np.any(fit_mask):
        # Remaining space after packing
        remaining_space = bins_remain_cap[fit_mask] - item

        # Prioritize tighter fits (minimize wasted space)
        priorities[fit_mask] = 1 / (remaining_space + 0.0001)  # Add small constant to avoid division by zero

        # Boost near-full bins, dynamically adjusted based on item size and bin capacity
        near_full_threshold = 0.2 * bin_capacity
        nearly_full_mask = (remaining_space >= 0) & (remaining_space <= near_full_threshold)
        if np.any(nearly_full_mask):
            priorities[fit_mask][nearly_full_mask] += 2  # Higher boost for nearly full

        # Penalize bins that become too full after packing
        too_full_threshold = -0.05 * bin_capacity # Allow minor overflows, but penalize it.
        overflow_mask = remaining_space < too_full_threshold
        if np.any(overflow_mask):
             priorities[fit_mask][overflow_mask] = -10  # Severe penalty to discourage overflow

    else:
        # If item doesn't fit, strongly discourage using this bin
        priorities[:] = -np.inf

    return priorities
```
