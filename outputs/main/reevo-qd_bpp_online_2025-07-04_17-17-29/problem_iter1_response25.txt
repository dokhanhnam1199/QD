```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First Fit Decreasing heuristic inspired
    # Prioritize bins that can fit the item without too much waste
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        waste = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1 / (waste + 0.0001)  # Inverse of waste, avoid division by zero

        # Give a small boost to bins that are almost full after packing
        almost_full = (bins_remain_cap[fit_mask] - item) < 0.1
        priorities[fit_mask][almost_full] += 2

    # For bins that cannot fit, give a very low priority
    priorities[~fit_mask] = -1e9  # Large negative number

    return priorities
```
