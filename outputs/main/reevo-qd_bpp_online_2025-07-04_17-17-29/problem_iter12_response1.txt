```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap) if bins_remain_cap.size > 0 else item  # Handle edge case of empty bins

    # High priority to bins where item fits with smallest remaining space (First-Fit Decreasing principle)
    # Avoid fragmentation: prioritize bins that have just enough space.
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        remaining_space = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = -remaining_space  # Smaller remaining space => Higher priority

        # Boost bins close to full after packing, but avoid bins that get too full (risk of not fitting subsequent smaller items)
        nearly_full_mask = (remaining_space >= 0) & (remaining_space <= 0.2 * max_cap)

        if np.any(nearly_full_mask):
            #Dynamically adjust the nearly full boost based on item size
            boost_factor = min(1.0, item / max_cap)  # Smaller items get a smaller boost
            priorities[fit_mask][nearly_full_mask] += 2 * boost_factor

        # Slightly penalize bins that become almost completely full. This encourages a bit of diversity.
        almost_full_mask = (remaining_space >= 0) & (remaining_space <= 0.05 * max_cap)
        if np.any(almost_full_mask):
            priorities[fit_mask][almost_full_mask] -= 0.5

        # Penalize bins that are too empty after placing the item to avoid spreading items thinly
        too_empty_threshold = 0.8 * max_cap #if 80% of the bin is still empty after placing the item
        too_empty_mask = (remaining_space >= 0) & (remaining_space >= too_empty_threshold)

        if np.any(too_empty_mask):
            priorities[fit_mask][too_empty_mask] -= 1 #Slightly penalize these bins

        # Introduce a small bonus for filling bins beyond a certain threshold
        # But less than the almost full penalty, so it doesn't override that
        partially_full_threshold = 0.5 * max_cap
        partially_full_mask = (remaining_space >= 0) & (remaining_space < partially_full_threshold) & ~almost_full_mask

        if np.any(partially_full_mask):
            priorities[fit_mask][partially_full_mask] += 0.25 # Small bonus

    else:
        # If the item does not fit in any bin, assign a very low priority.
        # If NO bins exist, prioritize creation
        if bins_remain_cap.size == 0:
            priorities[:] = 1  #Very high priority if bins is empty to create bin
        else:
            priorities[:] = -np.inf

    return priorities
```
