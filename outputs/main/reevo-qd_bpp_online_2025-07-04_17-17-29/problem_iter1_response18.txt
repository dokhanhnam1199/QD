```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Primary criterion: Can the item fit?
            priority = 1.0  # Base priority
            
            # Prefer bins with less remaining capacity after placing the item
            remaining = cap - item
            priority += 1.0 / (remaining + 0.0001)  # Avoid division by zero

            # Give a boost to bins that are relatively full before placing
            # the item, promoting better space utilization
            fullness_before = 1.0 - (cap / np.max(bins_remain_cap))
            priority += fullness_before
            
            priorities[i] = priority
        else:
            priorities[i] = -1.0 # Assign low priority if item does not fit
            
    return priorities
```
