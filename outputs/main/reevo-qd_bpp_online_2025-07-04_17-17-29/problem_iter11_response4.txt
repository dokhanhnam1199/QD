```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Fit score: prioritize bins where the item fits
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        remaining_space = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1 / (remaining_space + 1e-9)  # Inverse of remaining space, avoid division by zero
    else:
        priorities[:] = -np.inf  # Item does not fit

    # Fullness score: reward bins that will be nearly full
    nearly_full_threshold = 0.1  # Tuneable parameter: target occupancy (e.g., 90%)
    nearly_full_mask = fit_mask & (bins_remain_cap - item <= nearly_full_threshold)
    priorities[nearly_full_mask] += 2  # Large bonus for bins close to full

    # Wasted space penalty: penalize bins with large remaining space
    waste_threshold = 0.5  #Tuneable: if the remaining space after putting is more than half the bin capacity, penalize
    waste_mask = fit_mask & (bins_remain_cap - item > waste_threshold)
    priorities[waste_mask] -= 1

    # Item size consideration: Adapt thresholds according to the item size
    if item > 0.3: # Tuneable: if the item is large, prioritize bins where the item fits almost perfectly
        perfect_fit_threshold = 0.05 #tuneable
        perfect_fit_mask = fit_mask & (bins_remain_cap - item <= perfect_fit_threshold)
        priorities[perfect_fit_mask] += 3 # Bigger bonus for perfect fit

    return priorities
```
