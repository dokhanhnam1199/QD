```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize fitting the item
    fit_mask = bins_remain_cap >= item

    if np.any(fit_mask):
        remaining_space = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = -remaining_space  # Smaller remaining space => Higher priority

        # Encourage bins that will be nearly full after packing
        nearly_full_mask = (remaining_space >= 0) & (remaining_space <= 0.2)  # Tighter nearly full range
        if np.any(nearly_full_mask):
            fullness_ratio = (bins_remain_cap[fit_mask][nearly_full_mask] - remaining_space[nearly_full_mask]) / bins_remain_cap[fit_mask][nearly_full_mask]
            priorities[fit_mask][nearly_full_mask] += 3 * fullness_ratio  # Increased boost for nearly full bins, amplified, Tuned
            
        #Dynamically Adjust nearly full range
        dynamic_nearly_full_threshold = 0.15 * np.mean(bins_remain_cap)
        dynamic_nearly_full_mask = (remaining_space >= 0) & (remaining_space <= dynamic_nearly_full_threshold)
        if np.any(dynamic_nearly_full_mask):
            fullness_ratio = (bins_remain_cap[fit_mask][dynamic_nearly_full_mask] - remaining_space[dynamic_nearly_full_mask]) / bins_remain_cap[fit_mask][dynamic_nearly_full_mask]
            priorities[fit_mask][dynamic_nearly_full_mask] += 3.5* fullness_ratio # Sligthly higher bonus

        # Penalize bins that will become too full after packing (risk of wasted space due to inability to fit smaller items)
        too_full_mask = remaining_space < 0.03  # Reduced tolerance for "too full"
        if np.any(too_full_mask & fit_mask):
            priorities[fit_mask][too_full_mask & (remaining_space > -1e-6)] -= 7 # Increased penalty, tuned
            priorities[fit_mask][too_full_mask & (remaining_space > -1e-6)] = np.clip(priorities[fit_mask][too_full_mask & (remaining_space > -1e-6)], -np.inf, 0) #Clip to avoid having positive prioirities from penalizing overflow, tuned
            
        #If there is a close fit (high fullness ration) penalize more heavily if overfull
        close_fit_overfull_mask = (remaining_space < 0.03) & (remaining_space >= -0.1)
        if np.any(close_fit_overfull_mask & fit_mask):
             priorities[fit_mask][close_fit_overfull_mask & (remaining_space > -1e-6)] -= 10 # Increased penalty, tuned
             priorities[fit_mask][close_fit_overfull_mask & (remaining_space > -1e-6)] = np.clip(priorities[fit_mask][close_fit_overfull_mask & (remaining_space > -1e-6)], -np.inf, 0) #Clip to avoid having positive prioirities from penalizing overflow, tuned
            

        # Moderate penalty for bins with significantly larger remaining capacity after packing, to avoid them being filled too early
        large_space_mask = remaining_space > 0.5 # If there is still a lot of space available, apply some penalty,tuned
        if np.any(large_space_mask & fit_mask):
            priorities[fit_mask][large_space_mask] -= 0.5 * (remaining_space[large_space_mask] - 0.5)  #Proportional penalty if there is too much space, tuned
            
        #Small penalty for items put into bins near empty to dissuade from early commitments
        nearly_empty_mask = bins_remain_cap > 0.8
        if np.any(nearly_empty_mask & fit_mask):
            priorities[fit_mask][nearly_empty_mask[fit_mask]] -= 0.1 #Small penalty

    else:
        # If the item does not fit in any bin, assign a very low priority
        priorities[:] = -np.inf

    return priorities
```
