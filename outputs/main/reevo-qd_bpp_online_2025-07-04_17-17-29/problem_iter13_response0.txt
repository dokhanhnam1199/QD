```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)  # Assuming all bins have the same capacity.

    # Prioritize tight fits
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        remaining_space = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = bin_capacity - remaining_space # Closer to full is better

        # Near-full bonus, adjusted for item size.  Encourages filling but avoids very tight fits if large item
        near_full_threshold = 0.2 * bin_capacity # dynamically adjusted tolerance
        near_full_mask = (remaining_space >= 0) & (remaining_space <= near_full_threshold)
        if np.any(near_full_mask):
            priorities[fit_mask][near_full_mask] += 2 # Increased boost for nearly full
    else:
        # If the item does not fit in any bin, assign a very low priority (or indicate infeasibility)
        priorities[:] = -np.inf

    # Penalize bins that become too full or too empty after placing the item.
    # Avoid bins that are much larger than the item size.
    too_empty_mask = bins_remain_cap > 2 * item
    if np.any(fit_mask & too_empty_mask):
        priorities[fit_mask & too_empty_mask] -= 0.5 # Small penalty, tune

    return priorities
```
