```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # 1. Feasibility: Disqualify bins that cannot fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Very low priority

    # 2. Best Fit: Prioritize bins where the remaining capacity after placing the item is small
    feasible_bins = ~infeasible_bins
    remaining_capacity_after_fit = bins_remain_cap[feasible_bins] - item
    
    # 3. Avoid Fragmentation: Penalize bins that would result in small remaining capacities after placing item.
    # The threshold to define "small" depends on the item size and a tuneable parameter
    small_fragmentation_threshold = item * 0.2  # e.g., 20% of item size
    fragmentation_penalty = np.where(remaining_capacity_after_fit < small_fragmentation_threshold,
                                      -0.5 * (small_fragmentation_threshold - remaining_capacity_after_fit), # penalize up to fragmentation_threshold below zero
                                      0) # otherwise, no penalty.

    
    #4. Reward almost full bins when item is large to avoid many almost empty bins
    large_item_threshold = np.mean(bins_remain_cap) * 0.7
    almost_full_bonus = np.where((bins_remain_cap[feasible_bins] > large_item_threshold) & (item > 0.5*large_item_threshold),
                                  0.3 * (bins_remain_cap[feasible_bins] - large_item_threshold),
                                  0)

    # 5. Combine heuristics
    priorities[feasible_bins] = -remaining_capacity_after_fit + fragmentation_penalty + almost_full_bonus

    #6. Normalize the prioirites to make it more robust

    if np.all(priorities == -np.inf):
        return priorities # if no feasible bins, no change
    
    max_finite_priority = np.max(priorities[priorities != -np.inf])

    priorities[infeasible_bins] = -np.inf
    
    if max_finite_priority > -np.inf : # Normalizing the priorities to prevent errors when all bins are infeasible
       priorities[priorities != -np.inf] /= max_finite_priority
    
    return priorities
```
