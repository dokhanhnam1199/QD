```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        remaining_space = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = -remaining_space

        # Prioritize bins that will be filled to a high degree.
        fill_ratio = (bins_remain_cap[fit_mask] - remaining_space) / bins_remain_cap[fit_mask]
        high_fill_mask = (remaining_space >= 0) & (fill_ratio >= 0.7)  # Increased fill ratio threshold. Tuned
        if np.any(high_fill_mask):
            priorities[fit_mask][high_fill_mask] += 3 * fill_ratio # Increased boost, Tuned

        # Penalize bins that become too full, but allow for some tiny overfill due to floating point issues.
        too_full_mask = remaining_space < -0.001  # More strict threshold for "too full". Tuned
        if np.any(too_full_mask & fit_mask):
             priorities[fit_mask][too_full_mask] = -np.inf
        
        almost_full_mask = (remaining_space >= -0.001) & (remaining_space < 0)
        if np.any(almost_full_mask & fit_mask):
            priorities[fit_mask][almost_full_mask] -= 1 #Slightly penalize for overfill within tolerance, Tuned

        # Slightly prioritize bins with larger remaining capacity after fitting if no good fit is found
        if not np.any(high_fill_mask):
            priorities[fit_mask] += 0.5 * bins_remain_cap[fit_mask] if np.any(fit_mask) else 0 # Tweak this value
            
    else:
        priorities[:] = -np.inf # Item does not fit

    return priorities
```
