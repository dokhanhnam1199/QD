```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap) # Assume all bins have same max capacity

    # Fit Score: Prioritize bins where item fits with minimal wasted space.
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        remaining_space = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = -remaining_space  # Smaller remaining space => Higher priority

        # Near-Fullness Bonus: Reward bins that become nearly full after packing.
        near_full_threshold = 0.1 * bin_capacity  # Adjust for desired tightness
        nearly_full_mask = (remaining_space >= 0) & (remaining_space <= near_full_threshold)
        if np.any(nearly_full_mask):
            priorities[fit_mask][nearly_full_mask] += 2  # Stronger bonus for nearly full bins

        # Balance near-fullness bonus and wasted space using weights
        priorities[fit_mask] = 5 * priorities[fit_mask] #was - remaining_space, so scale it up

        # Fragmentation Penalty: Discourage leaving excessive space in bins.
        large_space_threshold = 0.5 * bin_capacity #avoid leaving larger than half the capacity
        large_space_mask = (remaining_space > near_full_threshold) & (remaining_space <= large_space_threshold)

        if np.any(large_space_mask):
             priorities[fit_mask][large_space_mask] -= 1 # slight penalty for leaving a bin that large

        overfull_threshold = item - bins_remain_cap[fit_mask] #the amount to overflow by
        overfull_mask = (overfull_threshold > 0) #create a mask of the overfull bins
    else:
        # No Fit Penalty: If item doesn't fit, assign a very negative priority.
        priorities[:] = -np.inf
    return priorities
```
