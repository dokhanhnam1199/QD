```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # High priority to bins where item fits with smallest remaining space (First-Fit Decreasing principle)
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        remaining_space = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = -remaining_space  # Smaller remaining space => Higher priority

        # Boost bins close to full after packing, but avoid bins that get too full (risk of not fitting subsequent smaller items)
        nearly_full_mask = (remaining_space >= 0) & (remaining_space <= 0.2 * np.max(bins_remain_cap))

        if np.any(nearly_full_mask):
            priorities[fit_mask][nearly_full_mask] += 5 # Increased boost to encourage filling near-full bins

        # Prioritize slightly larger bins less aggressively to leave room for smaller items
        slightly_larger_mask = (remaining_space > 0.2 * np.max(bins_remain_cap)) & (remaining_space <= 0.5* np.max(bins_remain_cap))
        if np.any(slightly_larger_mask):
             priorities[fit_mask][slightly_larger_mask] *= 0.5 # Reduce priority

    else:
        # If the item does not fit in any bin, assign a very low priority (large negative number)
        priorities[:] = -1e9

    return priorities
```
