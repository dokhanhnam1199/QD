```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Favor bins that can fit the item
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1  # Basic reward for fitting

    # Heuristic 2: Among the bins that fit, prefer the fullest ones *after* packing
    remaining_after_pack = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] += (1 - (remaining_after_pack / bins_remain_cap[fit_mask])) # Proportion of bin filled

    # Heuristic 3: If no bin fits, minimize wasted space. Higher is better.
    no_fit_mask = ~fit_mask

    if np.any(no_fit_mask):
       priorities[no_fit_mask] = -(item - bins_remain_cap[no_fit_mask]) # Smaller penalty is prefered. Closest to fitting,
       priorities[no_fit_mask] = np.clip(priorities[no_fit_mask], a_min=None, a_max=0) # Ensure negative.

    #Heuristic 4: Avoid creating bins nearly empty:

    nearly_empty = bins_remain_cap > 0.9

    if np.any(nearly_empty):
      priorities[nearly_empty] -= 0.05


    return priorities
```
