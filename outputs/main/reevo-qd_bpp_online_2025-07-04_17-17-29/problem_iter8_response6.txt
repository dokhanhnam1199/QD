```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap) if bins_remain_cap.size > 0 else 1.0  # Avoid division by zero

    # 1. Feasibility Check:
    fit_mask = bins_remain_cap >= item

    if not np.any(fit_mask):
        # Item doesn't fit in any bin
        priorities[:] = -1e9
        return priorities

    # 2. Remaining Space Priority:
    remaining_space = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] = -remaining_space  # Smaller remaining space => Higher priority (FFD)

    # 3. Near-Fullness Bonus:
    near_full_threshold = 0.2 * max_cap
    nearly_full_mask = (remaining_space >= 0) & (remaining_space <= near_full_threshold)
    if np.any(nearly_full_mask):
        priorities[fit_mask][nearly_full_mask] += 10  # Strong bonus for near-full bins

    # 4. Slightly Larger Bin Penalty:
    slightly_larger_threshold = 0.5 * max_cap
    slightly_larger_mask = (remaining_space > near_full_threshold) & (remaining_space <= slightly_larger_threshold)
    if np.any(slightly_larger_mask):
        priorities[fit_mask][slightly_larger_mask] *= 0.7  # Moderate penalty

    # 5. Bins close to item size bonus.
    close_to_item_size_threshold = item + 0.1 * max_cap
    close_to_item_size_mask = (bins_remain_cap[fit_mask] <= close_to_item_size_threshold) & (bins_remain_cap[fit_mask] >= item)

    if np.any(close_to_item_size_mask):
        priorities[fit_mask][close_to_item_size_mask] += 5  # Encourage bins that are only slightly larger than the item

    return priorities
```
