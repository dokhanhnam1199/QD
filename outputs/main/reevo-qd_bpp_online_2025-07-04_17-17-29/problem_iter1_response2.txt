```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: Bins that can fit the item get higher priority
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1  # Give a base priority for fitting

    # Rule 2: Smaller waste gets higher priority (within fitting bins)
    waste = bins_remain_cap - item
    waste[~fit_mask] = np.inf # Ignore bins that don't fit

    # Assign priority based on how small waste is (lower waste -> higher priority)
    priorities[fit_mask] += (1 / (waste[fit_mask] + 1e-6)) #add a tiny value to prevent dividing by zero
    
    # Rule 3: Adjust priorities based on the fill ratio after adding the item.
    fill_ratio_after = (bins_remain_cap - item) / bins_remain_cap
    fill_ratio_after[~fit_mask] = -1  # Mark bins that cannot fit

    # Give a bonus for bins that would be filled close to a target ratio (e.g., 75%)
    target_ratio = 0.75
    ratio_diff = np.abs(fill_ratio_after - target_ratio)
    priorities[fit_mask] += np.exp(-ratio_diff[fit_mask] * 10) # Boost bins closer to target
    
    # Rule 4: If no bin fits, prioritize the fullest bin (least remaining capacity). This is important!
    if not np.any(fit_mask):
        priorities = 1.0 / (bins_remain_cap + 1e-6)  # Prioritize bins with lower remaining capacity
    
    return priorities
```
