```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Immediate Fit: High priority for bins that can fit perfectly or nearly perfectly
    perfect_fit = np.isclose(bins_remain_cap, item)
    near_fit = (bins_remain_cap - item > 0) & (bins_remain_cap - item <= 0.1 * item) #tolerate a tolerance of 10% item size.

    priorities[perfect_fit] = 10  # Highest priority for perfect fit
    priorities[near_fit] = 9     # High priority for near fit

    # First-Fit-Decreasing inspired priority (try to fill bins reasonably well)
    reasonable_fit = (bins_remain_cap >= item) # only consider bins large enough
    
    if np.any(reasonable_fit): # added guard in case there are no reasonable fits
        priorities[reasonable_fit] = (bins_remain_cap[reasonable_fit] - item) / bins_remain_cap[reasonable_fit] # Ratio of wasted space
        priorities[reasonable_fit] = 1 - priorities[reasonable_fit] # make the fuller bins more desirable, invert to prioritize space saving.

    # Avoidance of extremely small remaining space: penalize if the remaining space would become very small.
    very_small_remaining = (bins_remain_cap > item) & (bins_remain_cap - item <= 0.05) # threshold=0.05
    priorities[very_small_remaining] = -5  # Negative priority, avoid these

    # Bins that cannot fit the item: very low priority
    cannot_fit = bins_remain_cap < item
    priorities[cannot_fit] = -100

    return priorities
```
