```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Prioritize bins that can fit the item
            remaining = cap - item
            priorities[i] = (cap / item)  # Prioritize smaller utilization rate if it fits

            # Bonus if very little space left (almost perfect fit)
            if remaining < 0.1 * cap:
              priorities[i] += 2  # Give a significant bonus
            elif remaining < 0.3 * cap:
                priorities[i] += 1  # give a smaller bonus
        else:
            priorities[i] = -1000  # Very low priority if it doesn't fit

    return priorities
```
