```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize tight fits, avoid excessive fragmentation.
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        remaining_space = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = -remaining_space  # Smaller remaining space => Higher priority

        # Boost bins close to full after packing, but avoid bins that get too full (risk of not fitting subsequent smaller items)
        nearly_full_mask = (remaining_space >= 0) & (remaining_space <= 0.2 * np.max(bins_remain_cap)) #tolerate a max 20% of the largest bin size as tolerance

        if np.any(nearly_full_mask):
            priorities[fit_mask][nearly_full_mask] += 1  # Small positive boost to encourage filling near-full bins, 1 could be tuned

        #Prioritize bins that, after placing the item, will have a remaining capacity that's closest to the mean of all item sizes observed so far (if available). This aims for a balanced fragmentation.
        #This part of the code is based on the assumption that we do not have access to any past information and thus cannot calculate the mean of the item sizes. Therefore, this part is omitted.

    else:
        # Penalize bins where the item doesn't fit.
        priorities[:] = -np.inf

    return priorities
```
