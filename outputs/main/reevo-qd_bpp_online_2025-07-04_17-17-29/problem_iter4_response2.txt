```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize fitting the item
    fit_mask = bins_remain_cap >= item

    if np.any(fit_mask):
        # Calculate remaining space if the item is placed in the bin
        remaining_space = bins_remain_cap[fit_mask] - item

        # Prioritize bins with smaller remaining space (First-Fit Decreasing principle)
        priorities[fit_mask] = -remaining_space

        # Boost bins that become nearly full, avoiding excessive fragmentation
        nearly_full_mask = (remaining_space >= 0) & (remaining_space <= 0.25)  # Adjusted tolerance

        if np.any(nearly_full_mask):
            fullness_ratio = (bins_remain_cap[fit_mask][nearly_full_mask] - remaining_space[nearly_full_mask]) / bins_remain_cap[fit_mask][nearly_full_mask]
            priorities[fit_mask][nearly_full_mask] += 3 * fullness_ratio  # Increased boost

        # Penalize bins that become too full, preventing overflow
        too_full_mask = remaining_space < 0.01  # Further reduced tolerance

        if np.any(too_full_mask & fit_mask):
           
            priorities[fit_mask][too_full_mask & (remaining_space > -1e-6)] -= 10 # Increased penalty, but handle very minor floating-point overflows
            priorities[fit_mask][too_full_mask & (remaining_space > -1e-6)] = np.clip(priorities[fit_mask][too_full_mask & (remaining_space > -1e-6)], -np.inf, 0)
        
        # Introduce a bonus for bins that were already relatively full *before* adding the item.
        # This encourages filling bins that are already partially used.
        already_full_mask = (bins_remain_cap >= item) & (bins_remain_cap <= 0.75) #Bins that are less than 75% full are considered for this bonus.
        if np.any(already_full_mask):
            initial_fullness = 1 - (bins_remain_cap[already_full_mask] / np.max(bins_remain_cap))
            priorities[already_full_mask] += 1 * initial_fullness # Proportional bonus

    else:
        # If the item doesn't fit, assign a very low priority
        priorities[:] = -np.inf

    return priorities
```
