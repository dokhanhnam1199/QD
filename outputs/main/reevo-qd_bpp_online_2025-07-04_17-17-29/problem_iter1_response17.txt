```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit-Decreasing inspired heuristic:
    # Give higher priority to bins that can fit the item best.

    can_fit = bins_remain_cap >= item
    
    # If no bin can fit, then all priorities are 0
    if not np.any(can_fit):
      return priorities

    priorities[can_fit] = bins_remain_cap[can_fit] - item # remaining capacity

    #Prefer the bin that gives the smallest remaining capacity
    priorities[can_fit] = -priorities[can_fit]

    #Bonus for bins which are almost full before placing the item
    almost_full = (bins_remain_cap > 0) & (bins_remain_cap < 1.5*item) & can_fit
    priorities[almost_full] += 1

    return priorities
```
