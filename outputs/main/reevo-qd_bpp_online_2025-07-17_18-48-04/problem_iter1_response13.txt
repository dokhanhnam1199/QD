```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Reward bins that can fit the item
            priorities[i] = (cap - item) / cap  # Remaining space ratio (smaller is better, so negative)
            priorities[i] += 1 # Add a base value to make it positive and more influential. This gives preference to bins that can accommodate the item.

            # Slightly penalize bins that are too large to avoid fragmentation
            if cap > 2 * item:
                priorities[i] -= 0.1 * (cap - 2 * item) / cap

        else:
            # Large negative priority if item doesn't fit
            priorities[i] = -1000 # Extremely low priority
    return priorities
```
