```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Initialize very low priority for bins that cannot fit the item
    priorities[bins_remain_cap < item] = -np.inf

    # For bins that can fit, prioritize based on remaining capacity
    # 1. Fill Rate: How much of the bin's capacity will be filled by the item.  Higher is generally better (more utilization)
    fill_rates = item / bins_remain_cap
    priorities[bins_remain_cap >= item] += fill_rates[bins_remain_cap >= item]

    # 2. Avoid Too Much Waste: Penalize bins where the item fits but leaves a significant amount of empty space,
    # because small remaining spaces are harder to fill later.  Introduce a parameter 'waste_threshold'
    waste = bins_remain_cap - item
    waste_threshold = np.mean(bins_remain_cap) / 2 # dynamic threshold

    priorities[(bins_remain_cap >= item) & (waste > waste_threshold)] -= 0.5 # slight penalty for high waste


    # 3. Smallest Waste: Prioritize bins that result in the smallest waste after adding item
    # Apply this only to bins with capacities closer to item's size to focus packing efforts.
    distance = np.abs(bins_remain_cap - item)
    priorities[bins_remain_cap >= item] -=  distance[bins_remain_cap >= item] / np.max(bins_remain_cap)
    
    # 4. Prioritize nearly full bins before new bins, promote filling existing containers.
    nearly_full = (bins_remain_cap >= item) & (bins_remain_cap < 1.5 * item) #check if after placing the new item bin will become nearly full.
    priorities[nearly_full] += 0.75
    

    return priorities
```
