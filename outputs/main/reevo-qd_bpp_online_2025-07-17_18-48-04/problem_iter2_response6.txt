```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Prefer bins that can fit the item. Big reward!
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 5

    # Heuristic 2: Minimize waste - prioritize bins where the item fits best (smallest remaining space).
    remaining_after_fit = bins_remain_cap[fit_mask] - item
    if remaining_after_fit.size > 0:
        # Scale the remaining capacity to [0, 1], smaller is better.  Invert and scale to prioritize.
        priorities[fit_mask] += (1 - (remaining_after_fit / np.max(bins_remain_cap[fit_mask]))).clip(0, 1)

    # Heuristic 3: Heavily penalize bins that cannot fit the item.
    infeasible_mask = ~fit_mask
    priorities[infeasible_mask] -= 10  # Large penalty to discourage infeasible assignments

    # Heuristic 4: Slightly prioritize bins that are already somewhat full. This encourages filling existing bins.
    # This is only applied to bins that *can* fit the item.
    already_full_mask = fit_mask
    priorities[already_full_mask] += (1 - (bins_remain_cap[already_full_mask] / np.max(bins_remain_cap))).clip(0, 1) * 0.5

    return priorities
```
