{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Initialize with a low default priority\n    priorities[:] = -1.0\n    \n    # Calculate remaining capacity after adding the item\n    remaining_capacities = bins_remain_cap - item\n    \n    # Assign high priority to bins that can fit the item\n    mask = remaining_capacities >= 0\n    priorities[mask] = 1.0\n\n    # Further differentiate based on how well the item fits.\n    # Bins that have closer remaining capacity to zero after adding the item should have even higher priority\n    priorities[mask] += 1.0 - (remaining_capacities[mask] / bins_remain_cap[mask])  # Normalize the remaining capacity\n    \n    # Give preference to bins with largest empty spaces after accommodating item if they fit\n    priorities[mask] += (bins_remain_cap[mask] - item) / bins_remain_cap.max() # using max bin cap as denominator to avoid high values.\n\n    # Handle bins that cannot fit: add a negative priority inversely proportional to their remaining capacity if we force to put it anyway, this way, it will select bins where item will have a minimum volume exceeding bin capacity. It tries to avoid big capacity overflow on bins. Not useful for standard bin packing. Kept only for some sort of adaptation\n    mask_not_fit = remaining_capacities < 0\n    priorities[mask_not_fit] = remaining_capacities[mask_not_fit] / bins_remain_cap.max()\n        \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Only consider bins that can fit the item\n    feasible_bins = bins_remain_cap >= item\n    priorities[~feasible_bins] = -np.inf  # Very low priority for infeasible bins\n\n    # 2. Remaining Capacity Utilization: Prefer bins with tighter fit\n    remaining_after_fit = bins_remain_cap - item\n    priorities[feasible_bins] = 1 / (remaining_after_fit[feasible_bins] + 1e-9)  # Avoid division by zero, prioritize smaller remaining capacity\n\n    # 3. Bonus for almost full bins to fill them up\n    almost_full = (bins_remain_cap > item) & (bins_remain_cap <= 2 * item)  # Check bins remaining capacity is slightly more than item size\n    priorities[almost_full] += 10  # Give these bins a boost, higher than other priority score\n\n    # 4. Add some randomness\n    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.1 # Small random number to introduce randomness\n\n    return priorities\n\n[Reflection]\nPrioritize feasibility, utilize remaining capacity tightly, fill almost-full bins, and add randomness.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}