```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Prefer bins that can fit the item
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1

    # Heuristic 2: Prefer bins with the least remaining capacity after adding the item (First-Fit Decreasing like)
    remaining_after_fit = bins_remain_cap[fit_mask] - item
    if remaining_after_fit.size > 0:
        priorities[fit_mask] += (1 - (remaining_after_fit / np.max(bins_remain_cap))).clip(0, 1) # scaled

    # Heuristic 3: Heavily penalize bins that cannot fit the item (try to fill existing bins first)
    priorities[~fit_mask] -= 0.5

    return priorities
```
