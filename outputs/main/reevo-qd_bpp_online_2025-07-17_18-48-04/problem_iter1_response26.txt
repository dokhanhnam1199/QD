```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Give a higher priority to bins that can fit the item.
            # Prioritize bins with smaller remaining capacity (First-Fit Decreasing principle).
            priorities[i] = 1 / (cap - item + 0.0001)  # Avoid division by zero

            # Small adjustment to prioritize bins that are closer to being full after placing the item
            priorities[i] += 10*item/cap # Add a reward for higher fill rate.

        else:
            # Very low priority if the item doesn't fit. We penalize it heavily, but not -inf to prevent errors.
            priorities[i] = -1000 #assigning a fixed penalty, could change based on the context.
    return priorities
```
