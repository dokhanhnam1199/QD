```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -1e9  # Very low priority for infeasible bins

    # 2. Remaining Capacity Utilization: Prefer bins with tighter fit.
    remaining_after_fit = bins_remain_cap - item
    # Give much higher scores to bins that are almost full.
    fill_ratio = item / (bins_remain_cap + 1e-9)  # Avoid division by zero
    priorities[feasible_bins] = fill_ratio[feasible_bins]**2 * 100  # Square the fill ratio and scale it.

    # 3. Bonus for almost full bins to fill them up, and prioritize them even more
    almost_full = (remaining_after_fit >= 0) & (remaining_after_fit <= 0.2 * np.max(bins_remain_cap))  # Bins that are 80-100% full after placing item
    priorities[almost_full] += 50  # Give a significant boost

    # 4. Add some randomness, scaled to the inverse of the item size (smaller items get more randomness)
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * (0.05 / (item + 0.05)) # Small random number to introduce randomness, scaled by item size

    # 5. If no bin can fit, prioritize bins with larger capacity.
    if not np.any(feasible_bins):
        priorities = bins_remain_cap
    return priorities
```
