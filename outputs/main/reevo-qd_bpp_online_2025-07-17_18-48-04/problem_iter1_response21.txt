```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit-Decreasing inspired heuristic: prioritize bins where the item fits best
    fit_mask = bins_remain_cap >= item
    
    if np.any(fit_mask): # only apply the formula on bins where items can fit
        slack = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1 / (slack + 0.00001)  # Smaller slack -> Higher priority, added small constant to avoid divide by zero
        
        # Bonus for bins that are almost full after adding the item (to consolidate)
        almost_full_mask = (slack >= 0) & (slack <= 0.1)  # If less than 0.1 left after adding
        priorities[fit_mask][almost_full_mask[fit_mask]] += 10  # Arbitrary large bonus

    else: # if it does not fit any existing bin, assign the highest priority to bin with largest capacity.
        priorities[np.argmax(bins_remain_cap)] = 1

    return priorities
```
