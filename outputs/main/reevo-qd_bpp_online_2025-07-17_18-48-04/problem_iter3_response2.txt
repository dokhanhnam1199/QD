```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -1e9  # Large negative priority for infeasible bins

    # 2. Remaining Capacity Utilization: Prefer bins with tighter fit.
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[remaining_after_fit < 0] = 0  # Handle cases where item > bin size due to numerical issues
    fill_ratio = (bins_remain_cap - remaining_after_fit) / bins_remain_cap
    priorities[feasible_bins] = fill_ratio[feasible_bins]**2  # Encourage high fill ratio

    # 3. Bonus for almost full bins to fill them up
    almost_full = (bins_remain_cap >= item) & (remaining_after_fit <= 0.1 * np.max(bins_remain_cap))
    priorities[almost_full] += 10  # Significant boost for almost full bins

    # 4. Controlled Randomness
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * (0.05 / (item + 0.05))

    # 5. Prioritize largest capacity when no fit is available.
    if np.all(~feasible_bins):
        priorities = bins_remain_cap / np.max(bins_remain_cap)
    
    return priorities
```
