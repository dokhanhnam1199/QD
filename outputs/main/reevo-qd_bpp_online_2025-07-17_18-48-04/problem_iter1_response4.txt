```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give a high priority to bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1

    # Prioritize bins with smallest remaining capacity that can fit the item.
    # This encourages filling bins rather than leaving many bins partially full.
    feasible_caps = bins_remain_cap[can_fit]
    if len(feasible_caps) > 0:
        priorities[can_fit] += (np.max(feasible_caps) - feasible_caps) / np.max(feasible_caps)

    # Penalize bins where the item almost doesn't fit. This tries to avoid creating very small remaining spaces.
    almost_fits = (bins_remain_cap > 0.9 * item) & (bins_remain_cap < item)
    priorities[almost_fits] -= 0.5  # Reduced penalty compared to not fitting

    #Give slight advantages to bins where the remaining capacity is close to standard deviation.
    deviation = np.abs(bins_remain_cap-np.mean(bins_remain_cap))
    priorities[can_fit] += np.exp(-deviation[can_fit])
    
    return priorities
```
