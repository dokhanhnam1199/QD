```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Eliminate bins that cannot fit the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf  # Very low priority

    # 2. First Fit Decreasing (FFD) inspired: Prioritize bins with smallest remaining capacity that can still fit the item.
    # This tries to fill up bins as much as possible before opening new ones.
    feasible_mask = bins_remain_cap >= item
    remaining_capacities = bins_remain_cap[feasible_mask]
    
    if len(remaining_capacities) > 0:
        priorities[feasible_mask] = -remaining_capacities #Give negative priority to bins with small capacity

        #3. Penalize waste (e.g., items barely fitting.) Reward bins with good fit.
        waste = bins_remain_cap[feasible_mask] - item
        waste_penalty = waste / item # ratio of remaining capacity / item_size
        priorities[feasible_mask] += -0.1 * waste_penalty  # Adjust strength as needed.

        # 4. Give small incentive to use the most empty bins.
        max_cap = np.max(bins_remain_cap)
        priorities += 0.001 * bins_remain_cap / max_cap
    

    return priorities
```
