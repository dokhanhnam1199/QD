```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Prioritize bins that can fit the item
            remaining_after_fit = cap - item
            priorities[i] = 1.0 / (0.001 + remaining_after_fit)  # Inverse of remaining space
            # Add a bonus for bins that are close to being full after adding the item. Prevents creating too many nearly empty bins
            if remaining_after_fit <= 0.1:
                 priorities[i]+= 1.0

            #Prioritize bins where item takes up a substantial part
            priorities[i]+= min(1.0,item/cap)


        else:
            # Give bins that cannot fit item a very low priority (negative).
            priorities[i] = -1000 #A Large negative number

    return priorities
```
