```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins that can fit the item. Infeasible gets very low priority
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf

    # 2. Remaining Capacity Utilization: Prioritize tighter fits, use inverse of remaining capacity.
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[remaining_after_fit < 0] = np.inf  # Set to infinity for infeasible bins to ensure they are not chosen

    priorities[feasible_bins] = 1 / (remaining_after_fit[feasible_bins] + 1e-9)  # Avoid division by zero
    
    # 3. Almost Full Bonus: Strong incentive to complete bins
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap <= (1.2 * item))  # Bins very close to fitting
    priorities[almost_full] += 50  # VERY high priority to finish bins.

    # 4. Controlled Randomness: Encourage exploration, scaled by item size. Reduced randomness
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.01

    return priorities
```
