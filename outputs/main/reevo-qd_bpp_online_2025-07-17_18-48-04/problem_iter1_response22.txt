```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Primary criterion: Favor bins that can fit the item.
            remaining_space = cap - item
            # Prioritize bins that leave less empty space (First Fit Decreasing heuristic idea). Avoids fragmentation
            priorities[i] = 1 / (remaining_space + 0.0001)  # Add small constant to avoid division by zero

            # Secondary criterion: If space left is smaller than the mean of all item sizes, encourage to fill.
            # items_mean = np.mean(item)  # this mean calculation can be slow when called many times.
            # if remaining_space <= items_mean: # Avoid excessive params; skip for simplicity.
            #     priorities[i] *= 2

            # Tertiary Criterion: Add a very small random number to add some diversity. Helps exploration.
            priorities[i] += np.random.rand() * 0.00001
        else:
            # Penalize bins that cannot fit the item.
            priorities[i] = -1000  # Very low priority

    return priorities
```
