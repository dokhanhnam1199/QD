```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: Bins that can't fit the item get a very low priority
    priorities[bins_remain_cap < item] = -np.inf
    
    # Rule 2: For bins that *can* fit, prioritize bins with tighter fit 
    # (but not too tight, to avoid fragmentation). Use a quadratic function
    # to favor bins closer to the item size but penalize those that are too close (small remaining space)
    
    valid_bins = bins_remain_cap >= item
    remaining_space = bins_remain_cap[valid_bins] - item
    
    # Use a function that peaks near zero and falls off as we move away. A parabola could work,
    # centered around zero.  Also, penalize small remaining space.
    priorities[valid_bins] = -np.abs(remaining_space - (item/2.0)) - 2* (remaining_space< (item/10.0))  # Prioritize half used (ish). Penalty if almost full.

    # Rule 3: If there are *no* bins that can fit, put equal (low) priority in all of them
    #         except ones that were close to fitting but not quite. These bins will then be opened, rather than bins we already filled (more wasteful)
    
    if np.all(priorities == -np.inf):
        # Find bins that are "close" to fitting (e.g., within 10% of item size).

        close_bins = (bins_remain_cap >= 0.9 * item) & (bins_remain_cap < item)
        
        #Assign moderate negative priority to these almost-fitting bins
        priorities[close_bins] = -10.0

        # Give same priority to any others to make one available.
        other_bins = ~(close_bins) #All non close bins.
        priorities[other_bins] = -20.0
        
        
    return priorities
```
