{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Rule 1: Bins that can't fit the item get a very low priority\n    priorities[bins_remain_cap < item] = -np.inf\n    \n    # Rule 2: For bins that *can* fit, prioritize bins with tighter fit \n    # (but not too tight, to avoid fragmentation). Use a quadratic function\n    # to favor bins closer to the item size but penalize those that are too close (small remaining space)\n    \n    valid_bins = bins_remain_cap >= item\n    remaining_space = bins_remain_cap[valid_bins] - item\n    \n    # Use a function that peaks near zero and falls off as we move away. A parabola could work,\n    # centered around zero.  Also, penalize small remaining space.\n    priorities[valid_bins] = -np.abs(remaining_space - (item/2.0)) - 2* (remaining_space< (item/10.0))  # Prioritize half used (ish). Penalty if almost full.\n\n    # Rule 3: If there are *no* bins that can fit, put equal (low) priority in all of them\n    #         except ones that were close to fitting but not quite. These bins will then be opened, rather than bins we already filled (more wasteful)\n    \n    if np.all(priorities == -np.inf):\n        # Find bins that are \"close\" to fitting (e.g., within 10% of item size).\n\n        close_bins = (bins_remain_cap >= 0.9 * item) & (bins_remain_cap < item)\n        \n        #Assign moderate negative priority to these almost-fitting bins\n        priorities[close_bins] = -10.0\n\n        # Give same priority to any others to make one available.\n        other_bins = ~(close_bins) #All non close bins.\n        priorities[other_bins] = -20.0\n        \n        \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Feasibility: Only consider bins that can fit the item\n    feasible_bins = bins_remain_cap >= item\n    \n    if not np.any(feasible_bins):\n        return priorities # No bin can fit, return all zero priorities.\n\n    # Calculate the wasted space if the item is placed in each feasible bin\n    wasted_space = bins_remain_cap - item\n    wasted_space[~feasible_bins] = np.inf  # Set wasted space to infinity for infeasible bins\n    \n    # Higher priority for bins with less wasted space\n    priorities = -wasted_space\n    \n    # Bonus for bins that are filled significantly after placing the item (to avoid fragmentation)\n    fill_ratios = (bins_remain_cap - wasted_space) / bins_remain_cap\n    \n    #Give significant fill ratios high priority\n    priorities = priorities + (fill_ratios >= 0.75) * 10  \n    \n    #Adjust priorties to be non-negative if negative\n    priorities = np.maximum(priorities, 0)\n    \n    return priorities\n\n[Reflection]\nPrioritize tight fits. Heavily reward high fill ratios to reduce fragmentation. Avoid explicitly handling infeasibility.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}