{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Rule 1: Bins that can't fit the item get a very low priority\n    priorities[bins_remain_cap < item] = -np.inf\n    \n    # Rule 2: For bins that *can* fit, prioritize bins with tighter fit \n    # (but not too tight, to avoid fragmentation). Use a quadratic function\n    # to favor bins closer to the item size but penalize those that are too close (small remaining space)\n    \n    valid_bins = bins_remain_cap >= item\n    remaining_space = bins_remain_cap[valid_bins] - item\n    \n    # Use a function that peaks near zero and falls off as we move away. A parabola could work,\n    # centered around zero.  Also, penalize small remaining space.\n    priorities[valid_bins] = -np.abs(remaining_space - (item/2.0)) - 2* (remaining_space< (item/10.0))  # Prioritize half used (ish). Penalty if almost full.\n\n    # Rule 3: If there are *no* bins that can fit, put equal (low) priority in all of them\n    #         except ones that were close to fitting but not quite. These bins will then be opened, rather than bins we already filled (more wasteful)\n    \n    if np.all(priorities == -np.inf):\n        # Find bins that are \"close\" to fitting (e.g., within 10% of item size).\n\n        close_bins = (bins_remain_cap >= 0.9 * item) & (bins_remain_cap < item)\n        \n        #Assign moderate negative priority to these almost-fitting bins\n        priorities[close_bins] = -10.0\n\n        # Give same priority to any others to make one available.\n        other_bins = ~(close_bins) #All non close bins.\n        priorities[other_bins] = -20.0\n        \n        \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First-Fit-Decreasing inspired heuristic: prioritize bins where the item fits best\n    fit_mask = bins_remain_cap >= item\n    \n    if np.any(fit_mask): # only apply the formula on bins where items can fit\n        slack = bins_remain_cap[fit_mask] - item\n        priorities[fit_mask] = 1 / (slack + 0.00001)  # Smaller slack -> Higher priority, added small constant to avoid divide by zero\n        \n        # Bonus for bins that are almost full after adding the item (to consolidate)\n        almost_full_mask = (slack >= 0) & (slack <= 0.1)  # If less than 0.1 left after adding\n        priorities[fit_mask][almost_full_mask[fit_mask]] += 10  # Arbitrary large bonus\n\n    else: # if it does not fit any existing bin, assign the highest priority to bin with largest capacity.\n        priorities[np.argmax(bins_remain_cap)] = 1\n\n    return priorities\n\n[Reflection]\nPrioritize tight fits and consolidation. If no fit, prefer opening the fullest bin.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}