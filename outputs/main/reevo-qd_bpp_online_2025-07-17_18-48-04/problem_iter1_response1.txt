```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Very large remaining capacity = very low priority. Bins with very little remaining capacity are favored.
    priorities = 1 / (bins_remain_cap + 1e-9)  # Avoid division by zero
    
    # Add a bonus if the item fits and doesn't leave too much space
    fit_indices = bins_remain_cap >= item
    remaining_after_fit = bins_remain_cap[fit_indices] - item
    priorities[fit_indices] += (item / (remaining_after_fit + item)) #item / (remaining_capacity + item)

    #If the item is very big and fills almost the whole bin, it also has an advantage.
    
    return priorities
```
