```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility check: Bins that cannot accommodate the item get a very low priority.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # 2. Best Fit heuristic: Prefer bins with smallest remaining capacity AFTER adding the item.
    # Only consider bins that *can* accommodate the item.

    feasible_mask = ~infeasible_mask
    remaining_after_fit = bins_remain_cap[feasible_mask] - item
    
    #Give bins filled closer to the cap a higher score
    priorities[feasible_mask] = -np.abs(remaining_after_fit)


    #3. Give a boost to almost-full bins. If we are very close to using the remaining space in a bin, fill it up.
    almost_full_threshold = 0.1  #tune this. 10% remaining capacity. This encourages early bin closures
    almost_full_mask = feasible_mask & (remaining_after_fit <= almost_full_threshold * bins_remain_cap[feasible_mask])
    priorities[almost_full_mask] += 10  # add to base priority from -abs(remaining_after_fit) so bins marked here have preference, tune boost.

    return priorities
```
