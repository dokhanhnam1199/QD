```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: High priority for bins that can accommodate the item.
    can_accommodate = bins_remain_cap >= item
    priorities[can_accommodate] += 1  # Basic reward for fitting.

    # Rule 2: Prioritize bins with less remaining capacity if the item fits
    # to reduce fragmentation
    remaining_space = bins_remain_cap - item
    priorities[can_accommodate] += (1 / (remaining_space[can_accommodate] + 0.0001))  # avoid division by zero. smaller remaining space -> higher priority.

    # Rule 3: Penalize bins where the item doesn't fit (set to -inf), 
    # this might not be necessary as we will choose the highest score.
    priorities[~can_accommodate] = -np.inf

    # Rule 4: Give a small bonus for almost full bins before adding the item, to push for completion.
    almost_full = (bins_remain_cap > item) & (bins_remain_cap < (item * 1.2)) #item + 20%
    priorities[almost_full] += 0.5  # Moderate encouragement for filling bins nearing capacity
    
    # Rule 5: Slight randomization to break ties and explore more possibilities (optional)
    priorities += np.random.rand(len(bins_remain_cap)) * 0.01
    
    return priorities
```
