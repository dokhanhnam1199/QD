```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf  # Very low priority for infeasible bins

    # 2. Remaining Capacity Utilization: Prefer bins with tighter fit.  Use a squared term to further penalize larger remaining capacities.
    remaining_after_fit = bins_remain_cap - item
    feasible_remaining_after_fit = remaining_after_fit[feasible_bins]
    priorities[feasible_bins] = 1 / (feasible_remaining_after_fit**2 + 1e-9)  # Avoid division by zero, prioritize smaller remaining capacity

    # 3. Bonus for almost full bins to fill them up, and prioritize them even more
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap <= 2 * item)  # Check bins remaining capacity is slightly more than item size and feasible
    priorities[almost_full] += 20  # Give these bins a significant boost, higher than other priority score

    # 4. Add some randomness, scaled to the inverse of the item size (smaller items get more randomness)
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * (0.1 / (item + 0.1)) # Small random number to introduce randomness, scaled by item size

    # 5. Prioritize bins that are nearly empty (First-Fit flavor) - only when item is relatively small
    nearly_empty = bins_remain_cap > (0.9 * np.max(bins_remain_cap))
    small_item = item < (0.2 * np.max(bins_remain_cap))
    if small_item:
        priorities[nearly_empty & feasible_bins] += 5  # Boost the priority of nearly empty bins if they can fit the item

    # 6. Prioritize using bins with very little content - a more aggressive first fit.
    very_empty = bins_remain_cap > (0.98 * np.max(bins_remain_cap))
    if small_item: # Apply this only to smaller items, for better balancing.
        priorities[very_empty & feasible_bins] += 10

    return priorities
```
