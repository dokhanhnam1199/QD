```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Basic score based on remaining capacity after adding the item
            remaining_after_add = cap - item
            priorities[i] = 1 / (remaining_after_add + 0.00001)  # Avoid division by zero, prefer bins with tighter fit.

            # Bonus if item fills a significant portion of the bin, prefer to completely fill bins
            fill_ratio = item / cap
            if fill_ratio > 0.75:
                priorities[i] += 2 # large bonus for nearly full
            elif fill_ratio > 0.5:
                priorities[i] += 1  # medium bonus

            # Small bonus to bins that are already partially full.
            if cap < 1.0:  #Assuming bin capacity is 1, adjust as needed
              priorities[i] += 0.5 # favour bins that are non-empty
        else:
            priorities[i] = -np.inf  # Cannot fit, so lowest priority
    return priorities
```
