```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities  # All priorities are zero if no bin can fit

    # 2. Remaining Capacity: Prefer bins with smaller remaining capacity after placing the item.
    remaining_capacity_after_placement = bins_remain_cap - item
    
    # Scale to avoid zero division and give higher priority to lower remaining capacity after placement for bins that *can* hold the item
    
    priorities[feasible_bins] = 1 / (remaining_capacity_after_placement[feasible_bins] + 0.0001)
    

    #3. Bonus for almost full bins: Bins that become almost full get a boost.
    almost_full_threshold = 0.1  # Define "almost full" as remaining capacity <= 10% of bin size. Assuming all bins have size 1
    almost_full = remaining_capacity_after_placement <= almost_full_threshold

    priorities[almost_full & feasible_bins] += 10 # add a high value bonus

    return priorities
```
