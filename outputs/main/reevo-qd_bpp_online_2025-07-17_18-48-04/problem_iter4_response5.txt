```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. Feasibility: Only consider bins that can fit the item. Infeasible gets large negative priority
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -1e9  # Huge negative priority for infeasible bins

    # 2. Remaining Capacity Utilization: Prioritize tighter fits, squared difference emphasizes near-full bins
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[remaining_after_fit < 0] = 0  # Ensure no negative values for infeasible bins

    # Calculate fill ratio, prioritize higher fill ratios
    fill_ratio = (bin_capacity - remaining_after_fit) / bin_capacity
    priorities[feasible_bins] += 100 * fill_ratio[feasible_bins]  # Substantially reward higher fill ratios

    # 3. Almost Full Bonus: Strong incentive to complete bins
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap <= (1.1 * item))  # Bins very close to fitting
    priorities[almost_full] += 500  # VERY high priority to finish bins.

    # 4. Controlled Randomness: Encourage exploration, scaled by item size
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * (0.05 / (item + 0.05))

    # 5. Handle No Fit Scenario: If no bin fits, use largest capacity bins with a smaller penalty
    if not np.any(feasible_bins):
        # Find bins with max capacity and assign a small positive priority
        max_cap_bins = bins_remain_cap == np.max(bins_remain_cap)
        priorities[max_cap_bins] = 1.0
        priorities[~max_cap_bins] = -1e9
    return priorities
```
