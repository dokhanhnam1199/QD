```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Assign high priority to bins that can fit the item snugly
    fit_mask = bins_remain_cap >= item
    
    if np.any(fit_mask):  # Check if there is at least one valid bin
      slack = bins_remain_cap[fit_mask] - item
      priorities[fit_mask] = np.exp(-slack) # Exponential decay to favor smaller slack
    else:
      #If no bin can fit, assign low priority to all bins with the largest remaining capacities.
      max_cap = np.max(bins_remain_cap)
      priorities[bins_remain_cap == max_cap] = -1.0
      
    
    return priorities
```
