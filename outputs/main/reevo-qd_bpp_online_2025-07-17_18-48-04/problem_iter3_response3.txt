```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -1e9  # Very low priority for infeasible bins

    # 2. Remaining Capacity Utilization: Prefer bins with tighter fit.
    remaining_after_fit = bins_remain_cap - item
    priorities[feasible_bins] += 100 * (item / bins_remain_cap[feasible_bins])  # Reward high fill ratio (item_size / bin_capacity)

    # 3. Bonus for almost full bins to fill them up
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap <= item + 0.1 * bin_capacity)
    priorities[almost_full] += 500  # Significant boost for almost full bins

    # 4. Add controlled randomness
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * (1 / (item + 0.01))  # scaled randomness

    # 5. Prioritize Nearly Empty bins slightly less than nearly full, but still higher than the base fill ratio
    nearly_empty = bins_remain_cap >= (0.9 * bin_capacity)
    priorities[nearly_empty & feasible_bins] += 100

    # 6. If no bin fits, select the largest capacity bins to start a new bin.
    if not np.any(feasible_bins):
        largest_capacity_bins = bins_remain_cap == np.max(bins_remain_cap)
        priorities[largest_capacity_bins] = 1  # Give these bins a minimal priority to at least select one
    
    return priorities
```
