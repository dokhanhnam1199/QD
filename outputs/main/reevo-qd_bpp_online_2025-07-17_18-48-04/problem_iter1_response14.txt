```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit-Decreasing Inspired: Prioritize bins that can fit the item, sorted by remaining capacity
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        priorities[can_fit] = bins_remain_cap[can_fit]  # Prioritize higher remaining capacity
        
        # A little bit of noise to break ties.
        priorities[can_fit] += np.random.rand(np.sum(can_fit)) * 0.0001

    else:
        # If no bin can fit, penalize bins close to fitting the item to avoid fragmentation
        diff = item - bins_remain_cap
        priorities = -diff # Higher the negative diff, more closer we are, hence a larger score
    
    return priorities
```
