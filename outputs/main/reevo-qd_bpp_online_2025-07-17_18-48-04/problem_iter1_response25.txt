```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate the wasted space if the item is placed in this bin.
            wasted_space = cap - item

            # Prioritize bins that can fit the item, but avoid bins that would
            # result in excessive wasted space, or nearly full bins after placement
            if wasted_space < 0.1: # Prefer almost full bins to fully utilize space. Tuneable parameter
                priorities[i] = 10 #Arbitrary high number

            else:
                priorities[i] = (1/(wasted_space + 0.00001))  # Inverse of wasted space plus a small number to prevent zero divison


    return priorities
```
