```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf  # Very low priority for infeasible bins

    # 2. Remaining Capacity Utilization: Prefer bins with tighter fit
    remaining_after_fit = bins_remain_cap - item
    priorities[feasible_bins] = 1 / (remaining_after_fit[feasible_bins] + 1e-9)  # Avoid division by zero, prioritize smaller remaining capacity

    # 3. Bonus for almost full bins to fill them up
    almost_full = (bins_remain_cap > item) & (bins_remain_cap <= 2 * item)  # Check bins remaining capacity is slightly more than item size
    priorities[almost_full] += 10  # Give these bins a boost, higher than other priority score

    # 4. Exploration: Introduce a preference for bins that are relatively empty, but can still fit
    relatively_empty = feasible_bins & (bins_remain_cap > 3 * item)
    priorities[relatively_empty] += 1  # Give slightly more priority to relatively empty bins that can fit

    # 5. Add some randomness
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.1 # Small random number to introduce randomness

    return priorities
```
