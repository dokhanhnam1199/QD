{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\nRuthlessly prioritize feasibility. Reward tight fits and near-full/empty bins non-linearly. Implement scaled randomness and first-fit preferences for exploration. Gracefully handle no-fit scenarios.\n\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Only consider bins that can fit the item\n    feasible_bins = bins_remain_cap >= item\n    priorities[~feasible_bins] = -np.inf  # Very low priority for infeasible bins\n\n    # 2. Remaining Capacity Utilization: Prefer bins with tighter fit. Use a squared term to further penalize larger remaining capacities.\n    remaining_after_fit = bins_remain_cap - item\n    priorities[feasible_bins] = 1 / (remaining_after_fit[feasible_bins]**2 + 1e-9)  # Avoid division by zero, prioritize smaller remaining capacity\n\n    # 3. Bonus for almost full bins to fill them up, and prioritize them even more\n    almost_full = (bins_remain_cap >= item) & (bins_remain_cap <= 2 * item)  # Check bins remaining capacity is slightly more than item size\n    priorities[almost_full] += 20  # Give these bins a significant boost, higher than other priority score\n\n    # 4. Add some randomness, scaled to the inverse of the item size (smaller items get more randomness)\n    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * (0.1 / (item + 0.1))  # Small random number to introduce randomness, scaled by item size\n\n    # 5. Prioritize bins that are nearly empty (First-Fit flavor)\n    nearly_empty = bins_remain_cap >= (0.9 * np.max(bins_remain_cap))  # Bin is almost empty\n    priorities[nearly_empty & feasible_bins] += 5  # Boost the priority of nearly empty bins if they can fit the item\n\n    # 6. Adjust almost full bonus, prioritizing bins that will be completely full.\n    perfect_fit = np.abs(remaining_after_fit) < 1e-6\n    priorities[perfect_fit] += 50 # Give even higher bonus if item fits almost perfectly.\n\n    return priorities\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}