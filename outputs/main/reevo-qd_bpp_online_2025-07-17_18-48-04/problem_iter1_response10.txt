```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate waste if the item is placed in this bin.
            waste = cap - item
            # Prioritize bins that minimize waste but also avoid extremely small waste.
            # Adding a small epsilon to avoid division by zero
            priorities[i] = (item / cap) * (1 / (waste + 0.01))

            # Penalize bins with very high remaining capacity (encourage filling partially used bins first)
            priorities[i] *= (1 - (cap / np.max(bins_remain_cap))) if np.max(bins_remain_cap) > 0 else 1.0

            # Give a small bonus to bins that have been used before (helps consolidation). This only matters if there is any item inside a bin.
            if cap < np.max(bins_remain_cap):  # If the bin is not empty, boost the priority a bit.
                priorities[i] += 0.1
        else:
            priorities[i] = -np.inf  # Cannot fit, so lowest priority.

    return priorities
```
