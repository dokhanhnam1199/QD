```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Initialize with a low default priority
    priorities[:] = -1.0
    
    # Calculate remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign high priority to bins that can fit the item
    mask = remaining_capacities >= 0
    priorities[mask] = 1.0

    # Further differentiate based on how well the item fits.
    # Bins that have closer remaining capacity to zero after adding the item should have even higher priority
    priorities[mask] += 1.0 - (remaining_capacities[mask] / bins_remain_cap[mask])  # Normalize the remaining capacity
    
    # Give preference to bins with largest empty spaces after accommodating item if they fit
    priorities[mask] += (bins_remain_cap[mask] - item) / bins_remain_cap.max() # using max bin cap as denominator to avoid high values.

    # Handle bins that cannot fit: add a negative priority inversely proportional to their remaining capacity if we force to put it anyway, this way, it will select bins where item will have a minimum volume exceeding bin capacity. It tries to avoid big capacity overflow on bins. Not useful for standard bin packing. Kept only for some sort of adaptation
    mask_not_fit = remaining_capacities < 0
    priorities[mask_not_fit] = remaining_capacities[mask_not_fit] / bins_remain_cap.max()
        
    return priorities
```
