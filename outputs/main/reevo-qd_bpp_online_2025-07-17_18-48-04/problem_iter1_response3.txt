```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Big enough bins have positive priority, others negative
    fit_mask = bins_remain_cap >= item
    
    # Prioritize almost full bins
    almost_full_mask = (bins_remain_cap >= item) & (bins_remain_cap <= 2 * item)
    priorities[almost_full_mask] = 2 - bins_remain_cap[almost_full_mask] / item
    
    # Prioritize well-fitting bins that are not very full
    well_fitting_mask = (bins_remain_cap >= item) & (bins_remain_cap > 2 * item)
    priorities[well_fitting_mask] = (bins_remain_cap[well_fitting_mask] - item) / np.max(bins_remain_cap)
    
    # Assign negative priority to bins which cannot fit the item
    priorities[~fit_mask] = -1
    
    return priorities
```
