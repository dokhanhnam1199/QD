```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf  # Very low priority for infeasible bins

    # 2. Remaining Capacity Utilization: Prefer bins with tighter fit. Scale by item size for normalization.
    remaining_after_fit = bins_remain_cap - item
    priorities[feasible_bins] = item / (remaining_after_fit[feasible_bins] + 1e-9)  # Prioritize smaller remaining capacity, normalized by item size

    # 3. Bonus for almost full bins to fill them up. Item size is important to scale the bonus.
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap <= (1.2 * item))  # Check bins remaining capacity is slightly more than item size. Slightly wider than v1.
    priorities[almost_full] += item * 5  # Give these bins a boost relative to item size

    # 4. Add some randomness, scaled by item size.
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * (0.01 * item) # Small random number to introduce randomness, scaled by item size

    return priorities
```
