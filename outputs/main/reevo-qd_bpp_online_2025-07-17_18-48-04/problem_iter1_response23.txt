```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Assign a high priority to bins where the item fits and leaves minimal waste.
    # Assign a low priority (or negative) to bins where the item doesn't fit.
    
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Priority is inversely proportional to the waste (cap - item) but also
            # proportional to the utilization (item / cap). We add a small constant
            # to avoid division by zero.

            waste = cap - item
            utilization = item / cap
            priorities[i] = utilization / (waste + 0.0001) # higher utilization and lower waste = higher priority
        else:
            #Very negative priority to the bins where item doesn't fit.
            priorities[i] = -1000  

    return priorities
```
