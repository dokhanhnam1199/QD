```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        return priorities # No bin can fit, return all zero priorities.

    # Calculate the wasted space if the item is placed in each feasible bin
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf  # Set wasted space to infinity for infeasible bins
    
    # Higher priority for bins with less wasted space
    priorities = -wasted_space
    
    # Bonus for bins that are filled significantly after placing the item (to avoid fragmentation)
    fill_ratios = (bins_remain_cap - wasted_space) / bins_remain_cap
    
    #Give significant fill ratios high priority
    priorities = priorities + (fill_ratios >= 0.75) * 10  
    
    #Adjust priorties to be non-negative if negative
    priorities = np.maximum(priorities, 0)
    
    return priorities
```
