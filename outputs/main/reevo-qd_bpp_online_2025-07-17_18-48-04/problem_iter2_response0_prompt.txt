{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Give a high priority to bins that can fit the item\n    can_fit = bins_remain_cap >= item\n    priorities[can_fit] += 1\n\n    # Prioritize bins with smallest remaining capacity that can fit the item.\n    # This encourages filling bins rather than leaving many bins partially full.\n    feasible_caps = bins_remain_cap[can_fit]\n    if len(feasible_caps) > 0:\n        priorities[can_fit] += (np.max(feasible_caps) - feasible_caps) / np.max(feasible_caps)\n\n    # Penalize bins where the item almost doesn't fit. This tries to avoid creating very small remaining spaces.\n    almost_fits = (bins_remain_cap > 0.9 * item) & (bins_remain_cap < item)\n    priorities[almost_fits] -= 0.5  # Reduced penalty compared to not fitting\n\n    #Give slight advantages to bins where the remaining capacity is close to standard deviation.\n    deviation = np.abs(bins_remain_cap-np.mean(bins_remain_cap))\n    priorities[can_fit] += np.exp(-deviation[can_fit])\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # First-Fit-Decreasing Inspired: Prioritize bins that can fit the item almost perfectly\n    # to reduce fragmentation.\n    \n    # Give a base score based on whether the item fits.  Bins that don't fit get -inf\n    fits = item <= bins_remain_cap\n    priorities[~fits] = -np.inf\n    \n    # Calculate wasted space if the item is placed in the bin\n    wasted_space = bins_remain_cap - item\n    \n    # Prioritize bins with minimal wasted space (avoid excessive fragmentation)\n    # Avoid division by zero by adding a small constant.\n    priorities[fits] = 1.0 / (wasted_space[fits] + 0.0001)  # Higher priority for less waste\n\n    # Add a bonus if the remaining capacity is close to a common fraction or a power of 2.\n    # common_fractions = [0.25, 0.5, 0.75]  # Consider using item size as the base instead.\n    \n    # capacity_ratios = bins_remain_cap / item  # bins_remain_cap is likely bigger than item\n\n    # prioritzing the perfect match\n    perfect_match = wasted_space == 0.0\n    priorities[perfect_match] = np.inf # Highest Priority\n\n    # Add a bonus if the remaining capacity is close to the item size\n    close_to_item = np.isclose(bins_remain_cap, item, rtol=0.1)\n    priorities[close_to_item] += 10 # Arbitrary bonus for closeness to the item\n\n    # Randomly break ties to explore different solutions. Add small random value\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.001 # Small random bonus for each bin\n\n\n    return priorities\n\n[Reflection]\nPrioritize tight fits, penalize wasted space, and add randomness for exploration. Avoid near-miss penalties.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}