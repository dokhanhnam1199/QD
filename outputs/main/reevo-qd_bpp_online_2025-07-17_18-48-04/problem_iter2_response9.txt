```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: bins that can fit the item
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities  # No bin can fit, return all zero priorities.

    # Wasted space calculation: prioritize tight fits
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf  # Large waste for infeasible bins

    priorities = -wasted_space #The smaller the wasted space, the higher the priority
    priorities[~feasible_bins] = -np.inf #Set priority to negative inf if infeasible.
    
    # Reward high fill ratios (avoid fragmentation) - significantly more reward than wasted space penalty
    fill_ratios = (bins_remain_cap - wasted_space) / bins_remain_cap
    priorities = priorities + (fill_ratios >= 0.75) * 100 #Huge reward for high fill ratio

    #Ensure that if feasible to add to a bin, its priority is always >= 0.
    priorities[feasible_bins] = np.maximum(priorities[feasible_bins],0)

    return priorities
```
