```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Large enough bins
    valid_bins = bins_remain_cap >= item
    
    if np.any(valid_bins):
        # Encourage to fill bins as full as possible
        fill_ratios = item / bins_remain_cap[valid_bins]
        priorities[valid_bins] = fill_ratios

        # Discourage bins where the remaining capacity is much larger than the item size.
        # Smaller differences yield larger penalties.
        capacity_diff = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] += np.exp(-capacity_diff)  # Exponential decay of penalty.

    # Slightly prefer bins that are already occupied (to create more "half full bins")
    occupied = bins_remain_cap < np.max(bins_remain_cap)
    priorities[occupied] += 0.1 * (bins_remain_cap[occupied] > 0)

    # Make sure the scores do not become too small if remaining capacity is low
    priorities += 1e-9
    
    return priorities
```
