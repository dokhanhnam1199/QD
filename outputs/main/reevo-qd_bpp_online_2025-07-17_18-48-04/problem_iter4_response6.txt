```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins that can fit the item. Infeasible bins get extremely low priority.
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf

    # 2. Remaining Capacity Utilization: Prioritize tighter fits using a non-linear function.
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[remaining_after_fit < 0] = np.inf # Set negative values to infinity for infeasible bins
    priorities[feasible_bins] = 10 / (remaining_after_fit[feasible_bins]**3 + 0.01) # Cubic penalty for larger remainders. Adding 0.01 to avoid large values

    # 3. Almost Full Bonus: Very high incentive to complete bins.
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap <= 1.2 * item)  # Slightly relaxed condition
    priorities[almost_full] += 100  # Substantial boost to finish bins

    # 4. Controlled Randomness: Introduce randomness scaled inversely to item size.
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * (0.05 / (item + 0.05))

    # 5. First-Fit Incentive: Prioritize nearly empty bins (encourage opening new bins).
    nearly_empty = bins_remain_cap >= (0.9 * np.max(bins_remain_cap))
    priorities[nearly_empty & feasible_bins] += 10 # Moderate boost for nearly empty feasible bins

    return priorities
```
