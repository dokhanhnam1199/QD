```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit-Decreasing Inspired: Prioritize bins that can fit the item almost perfectly
    # to reduce fragmentation.
    
    # Give a base score based on whether the item fits.  Bins that don't fit get -inf
    fits = item <= bins_remain_cap
    priorities[~fits] = -np.inf
    
    # Calculate wasted space if the item is placed in the bin
    wasted_space = bins_remain_cap - item
    
    # Prioritize bins with minimal wasted space (avoid excessive fragmentation)
    # Avoid division by zero by adding a small constant.
    priorities[fits] = 1.0 / (wasted_space[fits] + 0.0001)  # Higher priority for less waste

    # Add a bonus if the remaining capacity is close to a common fraction or a power of 2.
    # common_fractions = [0.25, 0.5, 0.75]  # Consider using item size as the base instead.
    
    # capacity_ratios = bins_remain_cap / item  # bins_remain_cap is likely bigger than item

    # prioritzing the perfect match
    perfect_match = wasted_space == 0.0
    priorities[perfect_match] = np.inf # Highest Priority

    # Add a bonus if the remaining capacity is close to the item size
    close_to_item = np.isclose(bins_remain_cap, item, rtol=0.1)
    priorities[close_to_item] += 10 # Arbitrary bonus for closeness to the item

    # Randomly break ties to explore different solutions. Add small random value
    priorities += np.random.rand(len(bins_remain_cap)) * 0.001 # Small random bonus for each bin


    return priorities
```
