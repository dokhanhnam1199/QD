```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    
    fit_bins_mask = bins_remain_cap >= item
    
    
    fitting_bins_remain_cap = bins_remain_cap[fit_bins_mask]
    
    
    if fitting_bins_remain_cap.size == 0:
        return priorities
    
    
    diffs = fitting_bins_remain_cap - item
    
    
    min_diff_index_in_fitting = np.argmin(diffs)
    
    
    original_indices = np.where(fit_bins_mask)[0]
    
    
    best_fit_bin_original_index = original_indices[min_diff_index_in_fitting]
    
    
    priorities[best_fit_bin_original_index] = 1.0 
    
    
    for i, capacity in enumerate(bins_remain_cap):
        if capacity >= item and i != best_fit_bin_original_index:
            
            priorities[i] = 1.0 / (capacity - item + 1e-6) 
            
    
    if np.max(priorities) > 0:
        priorities = priorities / np.max(priorities)
    
    return priorities
```
