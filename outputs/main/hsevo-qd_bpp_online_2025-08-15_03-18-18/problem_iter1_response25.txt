```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Inverse Distance (Proximity Fit).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # We want to prioritize bins that are "close" to fitting the item perfectly.
    # "Closeness" can be defined by the difference between remaining capacity and item size.
    # Inverse of this difference (plus a small epsilon to avoid division by zero) will give higher priority
    # to bins that have just enough or slightly more capacity than the item.
    # If the item doesn't fit, the priority will be very low.

    differences = bins_remain_cap - item
    
    # Bins where item fits have a non-negative difference. We want smaller non-negative differences.
    # Bins where item does not fit have a negative difference. These should have low priority.
    
    # For bins where the item fits (differences >= 0), calculate 1 / (difference + epsilon)
    # For bins where the item doesn't fit (differences < 0), assign a very small priority.
    
    epsilon = 1e-6
    priorities = np.zeros_like(bins_remain_cap)
    
    fits_mask = differences >= 0
    
    # Calculate priorities for bins where the item fits
    priorities[fits_mask] = 1.0 / (differences[fits_mask] + epsilon)
    
    # Ensure priorities are ordered correctly (higher value means better fit)
    # We can consider that a bin that is almost full and fits the item is better than
    # an empty bin. This is captured by the inverse difference.
    
    return priorities
```
