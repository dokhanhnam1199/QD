```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Softmax-based 'Best Fit' with an explicit perfect-fit bonus and
    a slight diversification factor for robust online bin packing.

    Prioritizes bins that offer a near-perfect fit while also slightly
    encouraging exploration of less filled bins to avoid premature convergence.
    """
    valid_bins_mask = bins_remain_cap >= item
    valid_bins_remain_cap = bins_remain_cap[valid_bins_mask]

    if valid_bins_remain_cap.size == 0:
        return np.zeros_like(bins_remain_cap)

    # Base score: inverse of remaining space after fitting (favors best fit)
    # Add a small constant to avoid division by zero and to differentiate non-perfect fits
    potential_fits = valid_bins_remain_cap - item
    base_scores = 1.0 / (potential_fits + 1e-9)

    # Introduce a bonus for perfect fits to strongly incentivize them
    perfect_fit_bonus = np.where(potential_fits == 0, 10.0, 0.0) # Significant bonus for perfect fit
    scores = base_scores + perfect_fit_bonus

    # Apply Softmax for a smoothed probability distribution, mitigating extreme values
    # Subtracting max score before exponentiation for numerical stability
    shifted_scores = scores - np.max(scores)
    exp_scores = np.exp(shifted_scores)
    probabilities = exp_scores / np.sum(exp_scores)

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    priorities[valid_bins_mask] = probabilities

    return priorities
```
