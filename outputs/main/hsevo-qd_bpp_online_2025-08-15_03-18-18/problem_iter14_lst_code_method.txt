{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Calculates priority scores for each bin using a Softmax-Based Fit strategy\n    for the online Bin Packing Problem.\n\n    This strategy prioritizes bins that have remaining capacity, with a higher\n    priority given to bins that can accommodate the item without significant\n    wastage, and also considers the overall \"fullness\" of bins.\n\n    Args:\n        item: The size of the item to be packed.\n        bins_remain_cap: A numpy array where each element represents the\n                         remaining capacity of a bin.\n\n    Returns:\n        A numpy array of the same size as bins_remain_cap, where each element\n        is the priority score for placing the item in the corresponding bin.\n    \"\"\"\n    # Filter out bins that cannot fit the item\n    valid_bins_mask = bins_remain_cap >= item\n    valid_bins_remain_cap = bins_remain_cap[valid_bins_mask]\n\n    if valid_bins_remain_cap.size == 0:\n        # If no bin can fit the item, return zero priorities for all bins\n        return np.zeros_like(bins_remain_cap)\n\n    # Calculate a score for each valid bin:\n    # We want to favor bins that are nearly full after placing the item.\n    # (capacity - item) represents the remaining capacity after placement.\n    # Smaller values of (capacity - item) are better.\n    # We can invert this by taking the negative or by calculating (item - capacity) if capacity < item.\n    # For simplicity and Softmax compatibility, let's focus on the 'goodness' of fit.\n    # A good fit means small remaining capacity. So, we can use 1 / (remaining_after_fit)\n    # or something similar.\n\n    # A common heuristic for BPP is \"Best Fit\": choosing the bin that leaves the least empty space.\n    # So, remaining_capacity - item should be minimized.\n    # We want to maximize the \"suitability\" score.\n    # Let's consider the negative of the remaining capacity after fitting as a base score.\n    # Larger negative values (closer to zero) are better.\n    base_scores = -(valid_bins_remain_cap - item)\n\n    # Add a penalty for bins that are already very full, encouraging spreading items if possible,\n    # unless an item perfectly fits. This can be tricky.\n    # For simplicity in v2, let's focus on the immediate fit.\n\n    # Apply Softmax to convert scores into probabilities (priorities)\n    # Softmax: exp(score) / sum(exp(all_scores))\n    # To avoid numerical instability with very large or small scores, we can shift scores.\n    # Subtracting the maximum score before exponentiation is a common technique.\n    shifted_scores = base_scores - np.max(base_scores)\n    exp_scores = np.exp(shifted_scores)\n    probabilities = exp_scores / np.sum(exp_scores)\n\n    # Create the final priority array, placing calculated priorities in their original positions\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    priorities[valid_bins_mask] = probabilities\n\n    return priorities\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines Best Fit with an adaptive diversification strategy.\n    Prioritizes bins that fit the item well, while also considering\n    the variance of remaining capacities to balance exploration and exploitation.\n    \"\"\"\n    valid_bins_mask = bins_remain_cap >= item\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    if not np.any(valid_bins_mask):\n        return priorities\n\n    valid_bins_remain_cap = bins_remain_cap[valid_bins_mask]\n\n    # Best Fit Component: Similarity to perfect fit. Smaller difference is better.\n    bf_scores = -(valid_bins_remain_cap - item)\n\n    # Adaptive Diversification Component: Use variance to adjust exploration.\n    # If variance is low (bins are similar), encourage exploration by rewarding larger capacities.\n    # If variance is high (bins are dissimilar), reduce exploration by penalizing larger capacities.\n    if len(valid_bins_remain_cap) > 1:\n        variance_capacity = np.var(valid_bins_remain_cap)\n        # Normalize variance to be a small value, can be a hyperparameter\n        normalized_variance = variance_capacity / np.mean(valid_bins_remain_cap)**2 if np.mean(valid_bins_remain_cap) > 0 else 0\n        # Heuristic: if variance is low, we want to diversify more by favoring emptier bins\n        # so we add a positive term proportional to capacity. If variance is high, we want to\n        # exploit good fits more, so we add a negative term proportional to capacity.\n        # This is a simplified approach to adaptive diversification.\n        adaptive_div_scores = -normalized_variance * valid_bins_remain_cap\n    else:\n        adaptive_div_scores = np.zeros_like(valid_bins_remain_cap)\n\n    # Combine components. Tune weights based on empirical performance.\n    w_bf = 1.0\n    w_adapt_div = 0.5 # Weight for adaptive diversification\n    \n    combined_scores = w_bf * bf_scores + w_adapt_div * adaptive_div_scores\n\n    # Apply Softmax for probabilistic selection. Shift for numerical stability.\n    if combined_scores.size > 0:\n        shifted_scores = combined_scores - np.max(combined_scores)\n        exp_scores = np.exp(shifted_scores)\n        probabilities = exp_scores / np.sum(exp_scores)\n    else:\n        probabilities = np.array([])\n\n    priorities[valid_bins_mask] = probabilities\n\n    return priorities\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Calculates priority scores for each bin using an adaptive, sensitivity-aware\n    strategy for the online Bin Packing Problem.\n\n    This heuristic aims to balance \"Best Fit\" (minimizing waste) with a\n    \"First Fit Decreasing\"-like tendency by slightly favoring bins that are\n    less full initially, but can still accommodate the item. It also incorporates\n    an adaptive component that can subtly shift focus based on the diversity\n    of available bin capacities.\n\n    Args:\n        item: The size of the item to be packed.\n        bins_remain_cap: A numpy array where each element represents the\n                         remaining capacity of a bin.\n\n    Returns:\n        A numpy array of the same size as bins_remain_cap, where each element\n        is the priority score for placing the item in the corresponding bin.\n    \"\"\"\n    valid_bins_mask = bins_remain_cap >= item\n    valid_bins_remain_cap = bins_remain_cap[valid_bins_mask]\n\n    if valid_bins_remain_cap.size == 0:\n        return np.zeros_like(bins_remain_cap)\n\n    # --- Core Heuristic Component: Best Fit / Least Waste ---\n    # Prioritize bins that leave minimal remaining capacity after packing.\n    # A lower (valid_bins_remain_cap - item) is better.\n    waste = valid_bins_remain_cap - item\n    best_fit_scores = -waste  # Maximize this score (minimize waste)\n\n    # --- Adaptive Component: Sensitivity to Bin Fullness ---\n    # Introduce a term that favors bins that are not excessively full *before*\n    # packing, but are still valid. This encourages spreading items initially,\n    # while still respecting the 'best fit' for the current item.\n    # We can achieve this by looking at the distribution of current bin capacities.\n    # If there's high variance in remaining capacities, we might slightly favor\n    # bins with more remaining capacity (but still fit the item).\n    # If capacities are very similar, focus more on best fit.\n\n    # Calculate a 'spread' factor based on the standard deviation of *all* bins' remaining capacities.\n    # A higher std dev means more diverse capacities.\n    if bins_remain_cap.size > 1:\n        std_dev_all_bins = np.std(bins_remain_cap)\n        # Normalize std_dev by the average capacity to make it somewhat scale-invariant.\n        # Add a small epsilon to avoid division by zero.\n        avg_cap_all_bins = np.mean(bins_remain_cap) + 1e-9\n        spread_factor = std_dev_all_bins / avg_cap_all_bins\n    else:\n        spread_factor = 0 # No spread if only one bin\n\n    # The adaptive score component:\n    # We want to increase the priority of bins with *more* remaining capacity\n    # when the spread_factor is high.\n    # Let's use the relative remaining capacity (valid_bins_remain_cap / bin_capacity_max_possible)\n    # for this term. Or simpler, just the raw remaining capacity.\n    # We want to positively correlate with remaining capacity, scaled by spread_factor.\n    # A simple approach: `spread_factor * (valid_bins_remain_cap / max_possible_capacity)`\n    # Let's use a simplified approach focusing on relative difference for now.\n    # We want to favor bins that are \"less full\" when spread is high.\n    # `valid_bins_remain_cap` is a proxy for \"less full\".\n    # So, a term like `spread_factor * valid_bins_remain_cap` could be added.\n\n    # A more nuanced approach: use the 'gap' (capacity - item)\n    # We want to penalize bins that result in a very small gap (best fit).\n    # Consider `spread_factor * (item / valid_bins_remain_cap)` - encourages using bins with more space\n    # when spread is high.\n\n    # Let's combine the two:\n    # Priority = w1 * (-waste) + w2 * (adaptive_term)\n    # We want to favor smaller waste.\n    # The adaptive term should make bins with *more* remaining capacity more attractive\n    # when `spread_factor` is high.\n\n    # Let's try a score that combines best-fit and a tendency to use bins\n    # that are not *critically* full.\n    # Score = BestFitScore - PenaltyForBeingTooFull\n    # PenaltyForBeingTooFull could be related to `1 / valid_bins_remain_cap` or `(max_cap - valid_bins_remain_cap)`.\n\n    # A new composite score:\n    # Base score: -(waste)  (favors minimal waste)\n    # Adaptive modifier: A term that slightly boosts bins with more remaining capacity,\n    # but this boost is stronger when `spread_factor` is higher.\n    # Consider `spread_factor * (valid_bins_remain_cap / average_remaining_capacity_of_valid_bins)`\n    # This gives a relative measure of how much space is left in a bin compared to average.\n\n    avg_valid_remain_cap = np.mean(valid_bins_remain_cap) + 1e-9\n    relative_remaining_cap = valid_bins_remain_cap / avg_valid_remain_cap\n\n    # The adaptive score: a multiplicative boost based on spread and relative remaining capacity.\n    # We want to amplify the priority of bins that are relatively spacious when diversity is high.\n    # This is a soft preference, not overriding best-fit entirely.\n    # A small additive term is safer for Softmax stability.\n    adaptive_scores = spread_factor * (relative_remaining_cap - 1.0) # Center around 0, positive for more remaining cap\n\n    # Combine scores: best_fit_scores are already designed to be maximized.\n    # adaptive_scores are also designed to be maximized (positive means good)\n    combined_scores = best_fit_scores + adaptive_scores\n\n    # Softmax to convert scores into probabilities (priorities)\n    # Shift scores to prevent overflow/underflow in exp.\n    if np.all(np.isfinite(combined_scores)):\n        shifted_scores = combined_scores - np.max(combined_scores)\n        exp_scores = np.exp(shifted_scores)\n        probabilities = exp_scores / np.sum(exp_scores)\n    else:\n        # Handle potential NaNs or Infs by reverting to a simple best-fit if calculation fails\n        # (though the logic above should prevent this with epsilon)\n        shifted_scores = best_fit_scores - np.max(best_fit_scores)\n        exp_scores = np.exp(shifted_scores)\n        probabilities = exp_scores / np.sum(exp_scores)\n\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    priorities[valid_bins_mask] = probabilities\n\n    return priorities\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Calculates priority scores for each bin using an adaptive Softmax-Based Fit\n    strategy for the online Bin Packing Problem, aiming for better adaptation\n    and robustness compared to v1.\n\n    This strategy prioritizes bins that can accommodate the item. It adapts\n    its scoring based on the \"tightness\" of the fit and the overall distribution\n    of available bin capacities. It uses a temperature parameter to control\n    exploration-exploitation.\n\n    Args:\n        item: The size of the item to be packed.\n        bins_remain_cap: A numpy array where each element represents the\n                         remaining capacity of a bin.\n\n    Returns:\n        A numpy array of the same size as bins_remain_cap, where each element\n        is the priority score for placing the item in the corresponding bin.\n    \"\"\"\n    valid_bins_mask = bins_remain_cap >= item\n\n    if not np.any(valid_bins_mask):\n        return np.zeros_like(bins_remain_cap, dtype=float)\n\n    valid_bins_remain_cap = bins_remain_cap[valid_bins_mask]\n\n    # Calculate a \"fit score\". Lower remaining capacity after placement is better.\n    # We want to maximize a score related to this.\n    # Using the negative of the remaining capacity after placing the item.\n    # A smaller (more negative) score means a tighter fit.\n    fit_scores = -(valid_bins_remain_cap - item)\n\n    # Introduce a \"spread\" or \"diversity\" component.\n    # If all valid bins are very similar in remaining capacity, we might want\n    # to slightly favor bins that are not the absolute tightest, to avoid\n    # creating many bins that are *almost* full, which can be inefficient later.\n    # A simple way to capture this is to consider the variance or standard deviation\n    # of the remaining capacities among valid bins.\n    # If variance is low, we might want to slightly penalize the absolute best fit\n    # to encourage using other slightly less optimal but still valid bins.\n    \n    # Calculate the standard deviation of remaining capacities for valid bins.\n    std_dev_valid_bins = np.std(valid_bins_remain_cap)\n\n    # Create a diversity bonus. If std_dev is small, the bonus is larger.\n    # We want to add a small amount to the score to increase exploration.\n    # Normalize std_dev to be between 0 and 1 for better control.\n    # Max possible std_dev could be large, so we might want to cap it or use a\n    # robust measure. For simplicity, let's consider a relative measure.\n    # A simple approach: if std_dev is very small, add a small positive value.\n    # This encourages picking something other than the absolute best fit if\n    # many bins are almost identical.\n    diversity_bonus = np.exp(-std_dev_valid_bins * 5.0) * 0.1 # Tune multiplier\n\n    # Combine fit_scores with diversity_bonus.\n    # Add the diversity bonus to all valid bins. This slightly nudges\n    # away from the absolute greedy choice when options are similar.\n    adjusted_scores = fit_scores + diversity_bonus\n\n    # Adaptive temperature for Softmax.\n    # A higher temperature leads to a more uniform distribution (more exploration).\n    # A lower temperature leads to a more peaked distribution (more exploitation).\n    # We can set temperature based on how \"difficult\" the current situation is.\n    # For example, if many items are large relative to bin capacity, we might want\n    # more exploration. Or if there's a high variance in item sizes.\n    # A simple adaptive strategy: if there are many valid bins, or if valid bins\n    # have very diverse capacities (high std_dev), use a slightly higher temp.\n    \n    # A simple adaptive temperature: based on the number of valid bins and std_dev.\n    num_valid_bins = len(valid_bins_remain_cap)\n    # Base temperature, can be tuned.\n    base_temp = 1.0\n    \n    # Increase temperature if there are many options or if capacities are very spread out.\n    temp_multiplier = 1.0 + (num_valid_bins / 10.0) * (std_dev_valid_bins / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0)\n    temperature = base_temp * temp_multiplier\n    \n    # Ensure temperature is not zero to avoid division by zero or infinite softmax.\n    temperature = max(temperature, 0.1)\n\n    # Apply Softmax with adaptive temperature.\n    # Shift scores to prevent overflow/underflow before exponentiation.\n    max_score = np.max(adjusted_scores)\n    shifted_scores = (adjusted_scores - max_score) / temperature\n    \n    exp_scores = np.exp(shifted_scores)\n    probabilities = exp_scores / np.sum(exp_scores)\n\n    # Create the final priority array, placing calculated priorities in their original positions.\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    priorities[valid_bins_mask] = probabilities\n\n    return priorities\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines Best Fit (minimizing waste) with a Softmax approach for robust priority.\n\n    Prioritizes bins that leave minimal remaining capacity after item placement,\n    using Softmax for smooth probability distribution and better exploration.\n    \"\"\"\n    valid_bins_mask = bins_remain_cap >= item\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    if not np.any(valid_bins_mask):\n        return priorities\n\n    suitable_bins_remain_cap = bins_remain_cap[valid_bins_mask]\n\n    # Base score: Negative of remaining capacity after fitting (closer to 0 is better)\n    # This embodies the \"Best Fit\" principle.\n    base_scores = -(suitable_bins_remain_cap - item)\n\n    # Softmax for normalization: Convert scores to a probability-like distribution\n    # Shift scores to prevent overflow/underflow before exponentiation\n    if np.max(base_scores) - np.min(base_scores) > 1e-9: # Avoid issues if all scores are identical\n        shifted_scores = base_scores - np.max(base_scores)\n        exp_scores = np.exp(shifted_scores)\n        # Ensure sum is not zero to avoid division by zero\n        sum_exp_scores = np.sum(exp_scores)\n        if sum_exp_scores > 1e-9:\n            probabilities = exp_scores / sum_exp_scores\n        else:\n            # Fallback if all exponentiated scores are effectively zero\n            probabilities = np.ones_like(base_scores) / len(base_scores)\n    else:\n        # If all base scores are the same, assign equal probability\n        probabilities = np.ones_like(base_scores) / len(base_scores)\n\n\n    priorities[valid_bins_mask] = probabilities\n\n    return priorities\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines Best Fit with adaptive diversification and a perfect fit bonus.\n    Prioritizes tight fits while encouraging exploration through variance and\n    rewarding perfect fits.\n    \"\"\"\n    valid_bins_mask = bins_remain_cap >= item\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    if not np.any(valid_bins_mask):\n        return priorities\n\n    valid_bins_remain_cap = bins_remain_cap[valid_bins_mask]\n\n    # Best Fit Component: Smaller difference (slack) is better.\n    slack = valid_bins_remain_cap - item\n    bf_scores = -slack\n\n    # Perfect Fit Bonus: Strongly reward bins with zero slack.\n    perfect_fit_bonus = np.where(slack == 0, 10.0, 0.0) # Significant bonus for perfect fits\n\n    # Adaptive Diversification Component: Use variance to adjust exploration.\n    if len(valid_bins_remain_cap) > 1:\n        variance_capacity = np.var(valid_bins_remain_cap)\n        # Normalize variance: Higher relative variance encourages diversification.\n        mean_cap = np.mean(valid_bins_remain_cap)\n        normalized_variance = (variance_capacity / (mean_cap**2)) if mean_cap > 0 else 0\n        \n        # Heuristic: Reward larger capacities when variance is high (exploit better fits),\n        # and penalize them when variance is low (encourage exploration of emptier bins).\n        # The sign is flipped from v0 to align with rewarding larger capacities when variance is high.\n        adaptive_div_scores = normalized_variance * valid_bins_remain_cap\n    else:\n        adaptive_div_scores = np.zeros_like(valid_bins_remain_cap)\n\n    # Combine components with tunable weights.\n    w_bf = 1.0\n    w_perfect_fit = 1.0\n    w_adapt_div = 0.5 # Weight for adaptive diversification\n\n    combined_scores = w_bf * bf_scores + w_perfect_fit * perfect_fit_bonus + w_adapt_div * adaptive_div_scores\n\n    # Apply Softmax for probabilistic selection. Shift for numerical stability.\n    if combined_scores.size > 0:\n        shifted_scores = combined_scores - np.max(combined_scores)\n        exp_scores = np.exp(shifted_scores)\n        probabilities = exp_scores / np.sum(exp_scores)\n    else:\n        probabilities = np.array([])\n\n    priorities[valid_bins_mask] = probabilities\n\n    return priorities\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines Best Fit (minimizing waste) with a Softmax approach for robust priority.\n\n    Prioritizes bins that leave minimal remaining capacity after item placement,\n    using Softmax for smooth probability distribution and better exploration.\n    \"\"\"\n    valid_bins_mask = bins_remain_cap >= item\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    if not np.any(valid_bins_mask):\n        return priorities\n\n    suitable_bins_remain_cap = bins_remain_cap[valid_bins_mask]\n\n    # Base score: Negative of remaining capacity after fitting (closer to 0 is better)\n    # This embodies the \"Best Fit\" principle.\n    base_scores = -(suitable_bins_remain_cap - item)\n\n    # Softmax for normalization: Convert scores to a probability-like distribution\n    # Shift scores to prevent overflow/underflow before exponentiation\n    if np.max(base_scores) - np.min(base_scores) > 1e-9: # Avoid issues if all scores are identical\n        shifted_scores = base_scores - np.max(base_scores)\n        exp_scores = np.exp(shifted_scores)\n        # Ensure sum is not zero to avoid division by zero\n        sum_exp_scores = np.sum(exp_scores)\n        if sum_exp_scores > 1e-9:\n            probabilities = exp_scores / sum_exp_scores\n        else:\n            # Fallback if all exponentiated scores are effectively zero\n            probabilities = np.ones_like(base_scores) / len(base_scores)\n    else:\n        # If all base scores are the same, assign equal probability\n        probabilities = np.ones_like(base_scores) / len(base_scores)\n\n\n    priorities[valid_bins_mask] = probabilities\n\n    return priorities\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Calculates priority scores for each bin using a Hybrid Softmax-Based Fit strategy\n    for the online Bin Packing Problem.\n\n    This strategy aims to balance 'Best Fit' (minimizing waste) with a\n    'First Fit' tendency for larger items by introducing a penalty for\n    bins that would leave very little space after packing. It also incorporates\n    a diversification element by slightly favoring less full bins to avoid\n    prematurely filling a few bins.\n\n    Args:\n        item: The size of the item to be packed.\n        bins_remain_cap: A numpy array where each element represents the\n                         remaining capacity of a bin.\n\n    Returns:\n        A numpy array of the same size as bins_remain_cap, where each element\n        is the priority score for placing the item in the corresponding bin.\n    \"\"\"\n    valid_bins_mask = bins_remain_cap >= item\n    valid_bins_remain_cap = bins_remain_cap[valid_bins_mask]\n\n    if valid_bins_remain_cap.size == 0:\n        return np.zeros_like(bins_remain_cap)\n\n    # Base score: Invert remaining capacity after fitting. Lower remaining is better.\n    # This promotes 'Best Fit'.\n    best_fit_scores = -(valid_bins_remain_cap - item)\n\n    # Diversification/Exploration score:\n    # Favor bins that are not already too full. This encourages spreading items.\n    # A higher score for bins with more remaining capacity (but still fitting the item).\n    # We use a sigmoid-like function to bound this influence.\n    # The idea is to give a slight boost to bins that are not nearly full,\n    # especially if the item is large.\n    # We can use 1 / (1 + exp(-(capacity - item - threshold))) where threshold is some value\n    # or more simply, a transformation of the remaining capacity after packing.\n    # Let's consider the remaining capacity itself as a measure. Higher remaining capacity\n    # after packing is less preferred for 'Best Fit', but might be good for diversification.\n    # We can create a score that is inversely related to how \"full\" the bin becomes.\n    # A bin that becomes almost full (low remaining cap) is good for BF, bad for diversity.\n    # A bin that remains very open (high remaining cap) is bad for BF, good for diversity.\n\n    # Let's create a score that penalizes bins that will have very little remaining space.\n    # This is a form of \"near miss\" avoidance for the next items.\n    # A small remaining capacity after packing (e.g., < item/2) could be penalized.\n    # Let's map the remaining capacity after packing `rem_after_fit` to a score.\n    rem_after_fit = valid_bins_remain_cap - item\n    \n    # Soft penalty for small remaining capacities. If rem_after_fit is small, this score is high.\n    # We want to *reduce* the priority for bins that leave very little space.\n    # Use a sigmoid-like function that maps small positive values to a range close to 0,\n    # and larger values to a range close to 1.\n    # We want to penalize small `rem_after_fit`.\n    # So, a function that is high for small `rem_after_fit` and low for large `rem_after_fit`\n    # is needed, and this should be subtracted from the main score.\n    \n    # A simple penalty: penalize if remaining capacity is less than item/2.\n    # More nuanced: exponential decay of penalty as remaining capacity increases.\n    # Let's use a logistic function scaled to penalize small positive remaining capacities.\n    # f(x) = 1 / (1 + exp(-k * (x - x0)))\n    # We want a function that is high when rem_after_fit is low.\n    # So we can use: penalty = 1 / (1 + exp(k * rem_after_fit)) where k is positive.\n    # Or, more simply, we can use a score that increases with remaining capacity,\n    # but we want to *reduce* the priority of bins with low remaining capacity.\n    \n    # Let's refine the score:\n    # Primary goal: Minimize `rem_after_fit` (Best Fit). Score = -rem_after_fit.\n    # Secondary goal: Avoid making bins too full if possible (Diversification).\n    # This means, if multiple bins offer similar \"best fit\", prefer the one that\n    # was initially less full.\n    # This is tricky to encode directly in a simple priority score.\n\n    # Alternative approach: Combine Best Fit with a bonus for initial capacity.\n    # Score = -rem_after_fit + alpha * initial_capacity_of_bin\n    # However, we don't have initial capacity, only remaining.\n\n    # Let's try a score that is good for Best Fit, but has a \"decay\" for being too full.\n    # Consider the \"gap\" created: `valid_bins_remain_cap - item`.\n    # We want to minimize this gap.\n    # Let's add a term that slightly favors bins that are less full initially.\n    # We can use the *current* remaining capacity as a proxy for how full the bin is.\n    # Higher `valid_bins_remain_cap` means the bin is less full.\n    \n    # Let's try a composite score:\n    # Score = w1 * (- (valid_bins_remain_cap - item)) + w2 * (valid_bins_remain_cap)\n    # The first term is Best Fit. The second term favors less full bins.\n    # Let's normalize these to avoid one dominating the other.\n\n    # Normalization factor for Best Fit: The maximum possible \"goodness\" is 0 (perfect fit).\n    # The worst \"goodness\" is -(max_capacity - min_item_size).\n    # Let's normalize `-(valid_bins_remain_cap - item)` to be between 0 and 1 (roughly).\n    # Or, more simply, let's use the raw negative remaining capacity.\n\n    # Let's introduce a \"diversification bonus\" that is proportional to the remaining capacity\n    # of the bin *before* packing. This encourages using bins that have more space available,\n    # as long as they fit the item.\n    # `bonus = alpha * valid_bins_remain_cap` where alpha is a small positive weight.\n    # This bonus counters the Best Fit score if the remaining capacity is significantly large.\n\n    alpha = 0.1  # Weight for diversification bonus. Tune this parameter.\n    diversification_bonus = alpha * valid_bins_remain_cap\n    \n    # Combined score: Best Fit score + diversification bonus\n    # Higher score is better.\n    # We want to minimize `valid_bins_remain_cap - item`. So we want to maximize `-(valid_bins_remain_cap - item)`.\n    # Higher `valid_bins_remain_cap` is better for diversification.\n    \n    # So, we want to maximize `-(valid_bins_remain_cap - item) + alpha * valid_bins_remain_cap`\n    # This simplifies to `alpha * valid_bins_remain_cap - valid_bins_remain_cap + item`\n    # which is `(alpha - 1) * valid_bins_remain_cap + item`.\n    # This still favors larger `valid_bins_remain_cap` if `alpha < 1`, which is the case.\n    \n    # Let's reconsider the goal. We want bins that are *almost* full (good fit),\n    # but not *too* full such that the remaining space is almost unusable.\n    # This suggests a function that peaks for intermediate remaining capacities after packing.\n\n    # A refined approach:\n    # 1. Best Fit score: `-(valid_bins_remain_cap - item)`. Maximize this.\n    # 2. Penalty for \"too little\" remaining space: `exp(-beta * (valid_bins_remain_cap - item))`\n    #    where beta is a positive constant. This term is high for small remaining space,\n    #    and we want to penalize high values. So, we subtract this penalty.\n    \n    beta = 2.0  # Penalty factor for small remaining space.\n    # We want to penalize small positive remaining capacities.\n    # Let rem_cap_after_packing = valid_bins_remain_cap - item\n    # Penalty increases as rem_cap_after_packing approaches 0.\n    # A function like `exp(-beta * rem_cap_after_packing)` works.\n    # If rem_cap_after_packing = 0, penalty is 1. If rem_cap_after_packing is large, penalty approaches 0.\n    # So, we subtract this penalty.\n    \n    # Let's combine:\n    # Score = -(valid_bins_remain_cap - item) - penalty_factor * exp(-beta * (valid_bins_remain_cap - item))\n    # This aims to reward good fits, but slightly disincentivize fits that leave almost no space.\n\n    # Let's try a simpler form that is more directly interpretable with Softmax.\n    # We want to prioritize bins where `valid_bins_remain_cap - item` is small.\n    # Let's introduce a \"niceness\" score.\n    # `niceness = 1.0 / (1.0 + (valid_bins_remain_cap - item))` -- this is high for small remaining space.\n    # But Softmax needs scores that can be positive/negative.\n\n    # Let's go back to the composite score idea, but ensure Softmax handles it well.\n    # We want to prioritize bins with small `(remaining_capacity - item)`.\n    # We also want to slightly favor bins that have more overall capacity (less full).\n    # So, we want to maximize `-(remaining_capacity - item) + alpha * remaining_capacity`.\n    \n    # Let's re-evaluate the original v1's Softmax base: `-(valid_bins_remain_cap - item)`.\n    # This encourages Best Fit.\n    # To add diversification, we can add a term that is higher for bins that are less full.\n    # `current_remaining_capacity` is a proxy for \"less full\".\n    # So, `score = -(valid_bins_remain_cap - item) + gamma * valid_bins_remain_cap`.\n    # `gamma` is a small positive number.\n    \n    gamma = 0.2  # Weight for diversification (favoring less full bins).\n    \n    # The score is `-(valid_bins_remain_cap - item) + gamma * valid_bins_remain_cap`\n    # = `-valid_bins_remain_cap + item + gamma * valid_bins_remain_cap`\n    # = `(gamma - 1) * valid_bins_remain_cap + item`.\n    \n    # This score will be higher for larger `valid_bins_remain_cap` if `gamma < 1`,\n    # which is the intended effect of diversification.\n    # However, we also want to prioritize Best Fit.\n\n    # Let's normalize the contribution of each term to prevent one from dominating.\n    # Best Fit contribution: `-(valid_bins_remain_cap - item)`\n    # Diversification contribution: `valid_bins_remain_cap`\n\n    # Maximum possible best fit score: 0 (perfect fit). Minimum: -(max_cap - min_item).\n    # Maximum possible diversification contribution: max_capacity. Minimum: min_fitting_capacity.\n\n    # A common strategy is to use a weighted sum, and then apply softmax.\n    # Let's use the raw scores and rely on Softmax scaling.\n    \n    # Final proposed score for each valid bin:\n    # Score = w_bf * BestFitScore + w_div * DiversificationScore\n    # BestFitScore = -(remaining_capacity_after_packing) = -(valid_bins_remain_cap - item)\n    # DiversificationScore = current_remaining_capacity = valid_bins_remain_cap\n    \n    w_bf = 1.0\n    w_div = 0.3 # Tune this weight. Higher means more preference for less full bins.\n    \n    composite_scores = w_bf * (-(valid_bins_remain_cap - item)) + w_div * valid_bins_remain_cap\n\n    # Softmax transformation:\n    # Shift scores to avoid numerical instability (large positive/negative values)\n    # Subtracting the maximum score is standard.\n    if composite_scores.size > 0:\n        shifted_scores = composite_scores - np.max(composite_scores)\n        exp_scores = np.exp(shifted_scores)\n        probabilities = exp_scores / np.sum(exp_scores)\n    else:\n        probabilities = np.array([])\n\n    # Create the final priority array, placing calculated priorities in their original positions\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    priorities[valid_bins_mask] = probabilities\n\n    return priorities\n\n[Heuristics 9th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \n    bin_capacities = 1.0  # Assuming a standard bin capacity of 1.0, can be generalized.\n    \n    potential_fits = bins_remain_cap - item\n    \n    valid_bins_mask = potential_fits >= 0\n    \n    priorities = np.zeros_like(bins_remain_cap)\n    \n    if np.any(valid_bins_mask):\n        \n        priorities[valid_bins_mask] = 1.0 / (potential_fits[valid_bins_mask] + 1e-9) # Add epsilon to avoid division by zero\n\n    return priorities\n\n[Heuristics 10th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \n    bin_capacities = 1.0  # Assuming a standard bin capacity of 1.0, can be generalized.\n    \n    potential_fits = bins_remain_cap - item\n    \n    valid_bins_mask = potential_fits >= 0\n    \n    priorities = np.zeros_like(bins_remain_cap)\n    \n    if np.any(valid_bins_mask):\n        \n        priorities[valid_bins_mask] = 1.0 / (potential_fits[valid_bins_mask] + 1e-9) # Add epsilon to avoid division by zero\n\n    return priorities\n\n[Heuristics 11th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    suitable_bins_mask = bins_remain_cap >= item\n    priorities[suitable_bins_mask] = 1.0 / (bins_remain_cap[suitable_bins_mask] - item + 1e-9)\n    return priorities\n\n[Heuristics 12th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \n    bin_capacities = 1.0  # Assuming a standard bin capacity of 1.0, can be generalized.\n    \n    potential_fits = bins_remain_cap - item\n    \n    valid_bins_mask = potential_fits >= 0\n    \n    priorities = np.zeros_like(bins_remain_cap)\n    \n    if np.any(valid_bins_mask):\n        \n        priorities[valid_bins_mask] = 1.0 / (potential_fits[valid_bins_mask] + 1e-9) # Add epsilon to avoid division by zero\n\n    return priorities\n\n[Heuristics 13th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    for i in range(len(bins_remain_cap)):\n        if bins_remain_cap[i] >= item:\n            priorities[i] = 1.0 / (bins_remain_cap[i] - item + 1e-9)\n    return priorities\n\n[Heuristics 14th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    for i in range(len(bins_remain_cap)):\n        if bins_remain_cap[i] >= item:\n            priorities[i] = 1.0 / (bins_remain_cap[i] - item + 1e-9)\n    return priorities\n\n[Heuristics 15th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    for i in range(len(bins_remain_cap)):\n        if bins_remain_cap[i] >= item:\n            priorities[i] = 1.0 / (bins_remain_cap[i] - item + 1e-9)\n    return priorities\n\n[Heuristics 16th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \n    bin_capacities = 1.0  # Assuming a standard bin capacity of 1.0, can be generalized.\n    \n    potential_fits = bins_remain_cap - item\n    \n    valid_bins_mask = potential_fits >= 0\n    \n    priorities = np.zeros_like(bins_remain_cap)\n    \n    if np.any(valid_bins_mask):\n        \n        priorities[valid_bins_mask] = 1.0 / (potential_fits[valid_bins_mask] + 1e-9) # Add epsilon to avoid division by zero\n\n    return priorities\n\n[Heuristics 17th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    valid_bins = bins_remain_cap >= item\n    \n    if not np.any(valid_bins):\n        return np.zeros_like(bins_remain_cap)\n    \n    effective_capacities = bins_remain_cap[valid_bins] - item\n    \n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[valid_bins] = np.exp(effective_capacities)\n    \n    if np.sum(priorities) == 0:\n        return np.ones_like(bins_remain_cap) / len(bins_remain_cap)\n        \n    return priorities / np.sum(priorities)\n\n[Heuristics 18th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    valid_bins = bins_remain_cap >= item\n    \n    if not np.any(valid_bins):\n        return np.zeros_like(bins_remain_cap)\n    \n    effective_capacities = bins_remain_cap[valid_bins] - item\n    \n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[valid_bins] = np.exp(effective_capacities)\n    \n    if np.sum(priorities) == 0:\n        return np.ones_like(bins_remain_cap) / len(bins_remain_cap)\n        \n    return priorities / np.sum(priorities)\n\n[Heuristics 19th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    valid_bins = bins_remain_cap >= item\n    \n    if not np.any(valid_bins):\n        return np.zeros_like(bins_remain_cap)\n    \n    effective_capacities = bins_remain_cap[valid_bins] - item\n    \n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[valid_bins] = np.exp(effective_capacities)\n    \n    if np.sum(priorities) == 0:\n        return np.ones_like(bins_remain_cap) / len(bins_remain_cap)\n        \n    return priorities / np.sum(priorities)\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Calculates priority scores for each bin using an adaptive strategy for the\n    online Bin Packing Problem. This version aims to balance fitting tightly\n    (Best Fit) with spreading items (Worst Fit) and incorporating an element\n    of exploration.\n\n    Args:\n        item: The size of the item to be packed.\n        bins_remain_cap: A numpy array where each element represents the\n                         remaining capacity of a bin.\n\n    Returns:\n        A numpy array of the same size as bins_remain_cap, where each element\n        is the priority score for placing the item in the corresponding bin.\n    \"\"\"\n    valid_bins_mask = bins_remain_cap >= item\n    valid_bins_remain_cap = bins_remain_cap[valid_bins_mask]\n\n    if valid_bins_remain_cap.size == 0:\n        return np.zeros_like(bins_remain_cap)\n\n    # --- Core Strategy: Balancing Best Fit and Worst Fit ---\n    # Best Fit component: Prioritize bins that leave minimal remaining space.\n    # We want to minimize (remaining_capacity - item).\n    # A good score for BF would be proportional to -(remaining_capacity - item).\n    # For Softmax, we want higher scores for better options. So, let's use\n    # a score that increases as remaining_capacity - item decreases.\n    # A simple inversion: 1 / (remaining_capacity - item + epsilon)\n    # Or, to keep it related to the previous approach: maximize -(remaining_capacity - item)\n    # To promote diversification, let's also consider the \"emptiness\" of the bin.\n    # Worst Fit component: Prioritize bins with *more* remaining capacity.\n    # This encourages spreading items.\n    # A score for WF could be proportional to remaining_capacity.\n\n    # Let's create a blended score.\n    # For Best Fit: prioritize small remaining capacity after placing the item.\n    # For Worst Fit: prioritize large initial remaining capacity.\n    # We want to maximize the utility.\n    # Let's consider the utility as a function of remaining capacity:\n    # utility = alpha * (1 / (valid_bins_remain_cap - item + 1e-9)) + beta * valid_bins_remain_cap\n\n    # For simplicity and to adapt the softmax approach, let's define scores\n    # where higher means more desirable.\n    # High score for small (remaining_capacity - item) => Best Fit tendency\n    # High score for large remaining_capacity => Worst Fit tendency (for exploration/diversification)\n\n    # Let's try a score that is a combination:\n    # Score = (large_capacity_bonus) * (remaining_capacity) - (misfit_penalty) * (remaining_capacity - item)\n    # A simpler approach:\n    # Prioritize bins where remaining_capacity - item is small (BF)\n    # BUT, also give a boost to bins that are \"more open\" (WF) to avoid early convergence.\n\n    # Let's combine the ideas:\n    # We want to favor small (remaining_capacity - item).\n    # Let's define a score for \"tightness\": TightnessScore = -(valid_bins_remain_cap - item)\n    # And a score for \"openness\": OpennessScore = valid_bins_remain_cap\n\n    # We can create a combined score, for example, by averaging or taking a weighted sum.\n    # A more robust approach is to introduce a \"temperature\" or \"exploration factor\"\n    # that modulates the influence of the Best Fit vs. Worst Fit tendencies.\n\n    # Let's try a score that is a compromise. We want to minimize (remaining_capacity - item).\n    # Let's use a function that is high when (remaining_capacity - item) is small.\n    # Consider a function like: `exp(-k * (remaining_capacity - item))`\n    # `k` can be an exploration parameter. A large `k` makes it more like Best Fit.\n    # A small `k` makes it flatter, more exploratory.\n\n    # To balance exploration and exploitation, let's make the \"tightness\" score\n    # have an exploratory element.\n    # Let's use a score that is high for bins that are \"good\" fits, but also\n    # has some preference for bins that aren't *too* full if an exact fit isn't available.\n\n    # --- Adaptive Exploration/Exploitation ---\n    # We can adapt the strength of the \"Best Fit\" tendency based on the distribution of remaining capacities.\n    # If capacities are very diverse, lean more towards Best Fit.\n    # If capacities are very similar, lean more towards diversification.\n\n    # A simple adaptation: Use a parameter `epsilon` that smooths the selection.\n    # Larger epsilon makes it more uniform (exploratory). Smaller epsilon makes it more greedy (exploitative).\n    # We can define epsilon based on the variance of remaining capacities.\n    variance_remain_cap = np.var(bins_remain_cap[bins_remain_cap > 0]) if np.any(bins_remain_cap > 0) else 1.0\n    # Scale variance to a reasonable epsilon range. Higher variance -> higher epsilon for more exploration.\n    epsilon = 0.1 + 0.5 * (1 / (1 + np.exp(-0.1 * variance_remain_cap))) # Sigmoid to bound epsilon\n\n    # Calculate scores:\n    # Score for \"good fit\" (lower remaining_capacity - item is better)\n    # Using a negative exponential for a sharp decrease in score as misfit increases.\n    # Adding epsilon for numerical stability and exploration.\n    goodness_of_fit_scores = np.exp(-10.0 * (valid_bins_remain_cap - item) / (item + 1e-9)) # Scale by item size\n\n    # Score for \"openness\" (higher remaining_capacity is better for spreading)\n    # Using a scaled exponential to give a significant boost to very open bins.\n    openness_scores = np.exp(0.1 * valid_bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)) # Scale by max capacity\n\n    # Combine scores using epsilon for adaptive weighting\n    # When epsilon is high (diverse capacities), openness_scores have more weight.\n    # When epsilon is low (similar capacities), goodness_of_fit_scores have more weight.\n    combined_scores = (1 - epsilon) * goodness_of_fit_scores + epsilon * openness_scores\n\n    # Softmax transformation to get priorities\n    # Shift scores to prevent overflow/underflow before exponentiation\n    shifted_scores = combined_scores - np.max(combined_scores)\n    exp_scores = np.exp(shifted_scores)\n    probabilities = exp_scores / np.sum(exp_scores)\n\n    # Create the final priority array\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    priorities[valid_bins_mask] = probabilities\n\n    return priorities\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}