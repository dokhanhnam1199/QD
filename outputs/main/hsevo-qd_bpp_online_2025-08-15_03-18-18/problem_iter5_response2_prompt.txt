{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Calculates priority scores for each bin using a Softmax-Based Fit strategy\n    for the online Bin Packing Problem.\n\n    This strategy prioritizes bins that have remaining capacity, with a higher\n    priority given to bins that can accommodate the item without significant\n    wastage, and also considers the overall \"fullness\" of bins.\n\n    Args:\n        item: The size of the item to be packed.\n        bins_remain_cap: A numpy array where each element represents the\n                         remaining capacity of a bin.\n\n    Returns:\n        A numpy array of the same size as bins_remain_cap, where each element\n        is the priority score for placing the item in the corresponding bin.\n    \"\"\"\n    # Filter out bins that cannot fit the item\n    valid_bins_mask = bins_remain_cap >= item\n    valid_bins_remain_cap = bins_remain_cap[valid_bins_mask]\n\n    if valid_bins_remain_cap.size == 0:\n        # If no bin can fit the item, return zero priorities for all bins\n        return np.zeros_like(bins_remain_cap)\n\n    # Calculate a score for each valid bin:\n    # We want to favor bins that are nearly full after placing the item.\n    # (capacity - item) represents the remaining capacity after placement.\n    # Smaller values of (capacity - item) are better.\n    # We can invert this by taking the negative or by calculating (item - capacity) if capacity < item.\n    # For simplicity and Softmax compatibility, let's focus on the 'goodness' of fit.\n    # A good fit means small remaining capacity. So, we can use 1 / (remaining_after_fit)\n    # or something similar.\n\n    # A common heuristic for BPP is \"Best Fit\": choosing the bin that leaves the least empty space.\n    # So, remaining_capacity - item should be minimized.\n    # We want to maximize the \"suitability\" score.\n    # Let's consider the negative of the remaining capacity after fitting as a base score.\n    # Larger negative values (closer to zero) are better.\n    base_scores = -(valid_bins_remain_cap - item)\n\n    # Add a penalty for bins that are already very full, encouraging spreading items if possible,\n    # unless an item perfectly fits. This can be tricky.\n    # For simplicity in v2, let's focus on the immediate fit.\n\n    # Apply Softmax to convert scores into probabilities (priorities)\n    # Softmax: exp(score) / sum(exp(all_scores))\n    # To avoid numerical instability with very large or small scores, we can shift scores.\n    # Subtracting the maximum score before exponentiation is a common technique.\n    shifted_scores = base_scores - np.max(base_scores)\n    exp_scores = np.exp(shifted_scores)\n    probabilities = exp_scores / np.sum(exp_scores)\n\n    # Create the final priority array, placing calculated priorities in their original positions\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    priorities[valid_bins_mask] = probabilities\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    suitable_bins_mask = bins_remain_cap >= item\n    priorities[suitable_bins_mask] = 1.0 / (bins_remain_cap[suitable_bins_mask] - item + 1e-9)\n    return priorities\n\n### Analyze & experience\n- Comparing Heuristic 1 (Best) vs. Heuristic 10 (Worst): Heuristic 1 uses a more sophisticated approach by combining \"Best Fit\" with a diversification penalty, and then applying Softmax for probability distribution. Heuristic 10 is a simple \"inverse proximity\" (Best Fit) without normalization or diversification.\n\nComparing Heuristic 1 vs. Heuristic 2: Heuristic 1 employs a hybrid strategy with a penalty for overly full bins, while Heuristic 2 focuses on perfect fits and inverse proximity. Both use Softmax, but Heuristic 1's diversification penalty is a more nuanced approach to avoid premature bin exhaustion.\n\nComparing Heuristic 2 vs. Heuristic 3: Heuristic 2 explicitly rewards perfect fits with a bonus, whereas Heuristic 3 only implicitly favors tighter fits through its base score calculation. Heuristic 2's direct reward for perfect fits is a stronger signal for that specific good outcome.\n\nComparing Heuristic 3 vs. Heuristic 11: Both focus on inverse proximity. Heuristic 11 adds a specific high priority for perfect fits, making it more explicit about rewarding exact matches, which can be beneficial.\n\nComparing Heuristic 11 vs. Heuristic 14: These are nearly identical, both prioritizing perfect fits and then using inverse proximity. The subtle difference in variable naming doesn't significantly alter behavior.\n\nComparing Heuristic 14 vs. Heuristic 12: Heuristic 14 explicitly handles perfect fits separately before applying inverse proximity, while Heuristic 12 directly applies inverse proximity (which handles perfect fits as a limit). Heuristic 14's explicit handling might be slightly more robust for edge cases or clarity.\n\nComparing Heuristic 12 vs. Heuristic 15: Heuristic 12 directly applies `1 / (remaining_capacity - item + 1e-9)` to valid bins. Heuristic 15 does the same but appears to have a static `bin_capacities = 1.0` which might be a placeholder and not used, making it functionally similar to Heuristic 12 if `bins_remain_cap` are already calculated differences. The use of `potential_fits` is cleaner.\n\nComparing Heuristic 15 vs. Heuristic 10: Both use the inverse proximity strategy. Heuristic 15 uses `potential_fits` and a mask, which is slightly more idiomatic NumPy than the explicit loop in Heuristic 10.\n\nComparing Heuristic 18/19 vs. Heuristic 20: Heuristics 18/19 use `exp(effective_capacities)` which rewards larger remaining capacities (more \"open\" bins). Heuristic 20 attempts a more complex adaptive strategy combining \"goodness of fit\" and \"openness,\" but its implementation might be overly complex or sensitive to parameter tuning. Heuristic 18/19's simplicity in rewarding openness is clear.\n\nComparing Heuristic 20 vs. Heuristic 1: Heuristic 1 is a more balanced and interpretable hybrid, directly penalizing overly tight fits. Heuristic 20's adaptive strategy with \"epsilon\" and scaled exponentials is more complex and potentially harder to tune effectively for general cases.\n\nOverall: More complex heuristics that combine multiple objectives (like Best Fit + Diversification) and use Softmax for normalization generally perform better (Heuristics 1, 2, 6, 7, 8, 20). Simple inverse proximity is decent but less robust (Heuristics 10, 11, 12, 13, 14, 15, 16, 17). Reward for perfect fits is a good addition (Heuristics 2, 11, 14).\n- \nHere's a redefined self-reflection for designing better heuristics:\n\n*   **Keywords:** Adaptive hybridization, Pareto fronts, meta-learning, sensitivity analysis.\n*   **Advice:** Focus on heuristics that adapt their strategies based on problem instance characteristics or performance feedback, rather than static combinations. Explore methods to identify and exploit \"sweet spots\" where certain heuristic components are most effective.\n*   **Avoid:** Blindly applying pre-defined hybrid strategies without understanding their impact on diverse problem instances. Over-reliance on single-objective optimization without considering trade-offs between conflicting goals.\n*   **Explanation:** True improvement comes from dynamic, data-informed adjustments, not just static mixing. Understanding how heuristic parameters or component choices affect outcomes across a spectrum of problems (like using sensitivity analysis or exploring Pareto fronts of heuristic properties) leads to more robust and performant designs.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}