```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    epsilon = 0.1
    valid_bins_mask = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    if np.any(valid_bins_mask):
        
        suitable_bins_remain_cap = bins_remain_cap[valid_bins_mask]
        
        greedy_scores = 1 / (suitable_bins_remain_cap - item + 1e-6) 
        
        random_scores = np.random.rand(np.sum(valid_bins_mask))
        
        combined_scores = epsilon * random_scores + (1 - epsilon) * greedy_scores
        
        priorities[valid_bins_mask] = combined_scores
        
    return priorities
```
