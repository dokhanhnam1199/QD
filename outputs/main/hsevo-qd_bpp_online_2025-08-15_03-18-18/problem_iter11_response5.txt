```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Hybrid heuristic combining Best Fit with an adaptive diversification bonus,
    using Softmax for smooth prioritization and rewarding perfect fits.
    """
    valid_bins_mask = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if not np.any(valid_bins_mask):
        return priorities

    suitable_bins_remain_cap = bins_remain_cap[valid_bins_mask]

    # Best Fit component: Negative remaining capacity after fitting
    # Closer to zero is better.
    best_fit_scores = -(suitable_bins_remain_cap - item)

    # Perfect Fit Bonus: Explicitly reward bins that will have zero remaining capacity
    # This helps in reducing fragmentation.
    perfect_fit_bonus = np.where(suitable_bins_remain_cap - item == 0, 1.0, 0.0)

    # Combine Best Fit with Perfect Fit Bonus
    combined_scores = best_fit_scores + perfect_fit_bonus

    # Softmax for normalization: Convert scores to a probability-like distribution
    # Shift scores to prevent overflow/underflow before exponentiation.
    # Use a small epsilon to ensure division by zero is avoided.
    epsilon = 1e-9
    if np.max(combined_scores) - np.min(combined_scores) > epsilon:
        shifted_scores = combined_scores - np.max(combined_scores)
        exp_scores = np.exp(shifted_scores)
        sum_exp_scores = np.sum(exp_scores)
        if sum_exp_scores > epsilon:
            probabilities = exp_scores / sum_exp_scores
        else:
            # Fallback if all exponentiated scores are effectively zero
            probabilities = np.ones_like(combined_scores) / len(combined_scores)
    else:
        # If all scores are the same, assign equal probability
        probabilities = np.ones_like(combined_scores) / len(combined_scores)

    priorities[valid_bins_mask] = probabilities

    return priorities
```
