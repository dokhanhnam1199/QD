```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines 'best fit' with a touch of randomness and explicit perfect fit handling.
    Prioritizes bins with minimal remaining capacity after fitting the item,
    giving a higher boost to perfect fits and adding a small random element.
    """
    epsilon = 0.05  # Weight for the random component
    
    potential_fits = bins_remain_cap - item
    
    valid_bins_mask = potential_fits >= 0
    
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    if np.any(valid_bins_mask):
        valid_potential_fits = potential_fits[valid_bins_mask]
        
        # Encourage perfect fits with a high score
        perfect_fit_mask = (valid_potential_fits < 1e-9)
        
        # Base score: inverse of remaining capacity (closer to zero is better)
        # Add epsilon to avoid division by zero and smooth scores
        base_scores = 1.0 / (valid_potential_fits + 1e-9)
        
        # Boost scores for perfect fits
        base_scores[perfect_fit_mask] *= 10.0  # Arbitrary boost factor for perfect fits
        
        # Introduce a small random component for exploration
        random_scores = np.random.rand(np.sum(valid_bins_mask))
        
        # Combine greedy (base_scores) and random scores
        combined_scores = (1 - epsilon) * base_scores + epsilon * random_scores
        
        priorities[valid_bins_mask] = combined_scores

    return priorities
```
