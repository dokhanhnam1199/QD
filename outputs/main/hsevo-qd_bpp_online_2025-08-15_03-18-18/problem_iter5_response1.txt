```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins by rewarding perfect fits, then tighter fits, normalized via Softmax.

    Combines perfect fit bonus with normalized inverse proximity for a balanced approach.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        return np.ones_like(bins_remain_cap) / len(bins_remain_cap)

    # Calculate effective remaining capacities for fitting bins
    effective_capacities = bins_remain_cap[can_fit_mask] - item

    # Assign scores: perfect fits get a bonus, others get inverse proximity
    scores = np.zeros_like(effective_capacities, dtype=float)

    # High priority for perfect fits
    perfect_fit_mask = effective_capacities == 0
    scores[perfect_fit_mask] = 1.5 # Increased bonus for perfect fit

    # For non-perfect fits, use inverse proximity to reward tighter fits
    non_perfect_fit_mask = ~perfect_fit_mask
    # Add a small value to avoid division by zero and ensure non-perfect fits have scores
    scores[non_perfect_fit_mask] = 1.0 / (effective_capacities[non_perfect_fit_mask] + 1e-9)

    # Apply scores to the corresponding bins
    priorities[can_fit_mask] = scores

    # Normalize priorities using Softmax for a probability distribution
    # Subtract max score for numerical stability before exponentiation
    max_score = np.max(priorities[can_fit_mask])
    exp_scores = np.exp(priorities[can_fit_mask] - max_score)

    # Ensure sum of probabilities is 1
    sum_exp_scores = np.sum(exp_scores)
    if sum_exp_scores == 0: # Handle case where all scores might be -inf after subtraction
        normalized_priorities = np.ones_like(bins_remain_cap) / len(bins_remain_cap)
    else:
        normalized_priorities = np.zeros_like(bins_remain_cap, dtype=float)
        normalized_priorities[can_fit_mask] = exp_scores / sum_exp_scores

    return normalized_priorities
```
