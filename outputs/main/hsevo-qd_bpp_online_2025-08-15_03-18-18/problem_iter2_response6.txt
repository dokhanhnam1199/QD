```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines perfect fit reward with inverse proximity for better bin selection."""
    
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    
    valid_bins_mask = bins_remain_cap >= item
    
    
    valid_bins_caps = bins_remain_cap[valid_bins_mask]
    
    
    if not np.any(valid_bins_mask):
        return priorities
    
    
    effective_capacities = valid_bins_caps - item
    
    
    perfect_fit_mask = effective_capacities == 0
    
    
    priorities[valid_bins_mask][perfect_fit_mask] = 1.0
    
    
    non_perfect_fit_mask = ~perfect_fit_mask
    
    
    priorities[valid_bins_mask][non_perfect_fit_mask] = 1.0 / (effective_capacities[non_perfect_fit_mask] + 1e-9)
    
    
    return priorities
```
