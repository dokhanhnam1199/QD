```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines "Best Fit" with a Softmax approach, prioritizing bins that leave minimal
    remaining capacity, while normalizing probabilities for selection.
    """
    
    potential_fits = bins_remain_cap - item
    
    valid_bins_mask = potential_fits >= 0
    
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    if np.any(valid_bins_mask):
        
        valid_potential_fits = potential_fits[valid_bins_mask]
        
        
        priorities[valid_bins_mask] = np.exp(valid_potential_fits) 
        
        
        if np.sum(priorities) > 0:
            priorities /= np.sum(priorities)
        else:
            
            priorities[valid_bins_mask] = 1.0 / np.sum(valid_bins_mask)
            
    return priorities
```
