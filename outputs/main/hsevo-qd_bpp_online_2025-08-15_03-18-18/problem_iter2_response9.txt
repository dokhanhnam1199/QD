```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit and Softmax for robust online bin packing priority.
    Prioritizes bins with minimal remaining space after packing, using Softmax
    for a smooth probability distribution. A small random component is added
    to encourage exploration.
    """
    valid_bins_mask = bins_remain_cap >= item
    valid_bins_remain_cap = bins_remain_cap[valid_bins_mask]

    if valid_bins_remain_cap.size == 0:
        return np.zeros_like(bins_remain_cap)

    # Best Fit component: prioritize bins that leave minimal remaining capacity
    # Higher score for smaller remaining capacity (i.e., closer to zero)
    best_fit_scores = -(valid_bins_remain_cap - item)

    # Add a small random exploration component
    exploration_scores = np.random.rand(valid_bins_remain_cap.size) * 0.1

    # Combine best fit and exploration scores
    combined_scores = best_fit_scores + exploration_scores

    # Use Softmax to convert scores to probabilities (priorities)
    # Shift scores to prevent numerical overflow/underflow
    shifted_scores = combined_scores - np.max(combined_scores)
    exp_scores = np.exp(shifted_scores)
    probabilities = exp_scores / np.sum(exp_scores)

    # Initialize priorities array with zeros
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    # Place the calculated probabilities into the corresponding valid bin positions
    priorities[valid_bins_mask] = probabilities

    return priorities
```
