```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Hybrid heuristic: prioritizes best fit, with a bonus for perfect fits
    and Softmax for probability distribution.
    """
    valid_bins_mask = bins_remain_cap >= item
    valid_bins_remain_cap = bins_remain_cap[valid_bins_mask]

    if valid_bins_remain_cap.size == 0:
        return np.zeros_like(bins_remain_cap)

    # Score: Prefer bins with minimal remaining capacity after placement (Best Fit)
    # Add a bonus for perfect fits (remaining_capacity - item == 0)
    remaining_after_fit = valid_bins_remain_cap - item
    scores = -(remaining_after_fit)
    perfect_fit_bonus = 1000.0 # Large bonus for exact fits
    scores[remaining_after_fit == 0] += perfect_fit_bonus

    # Apply Softmax to convert scores into probabilities (priorities)
    # Shift scores to avoid numerical instability with exp()
    shifted_scores = scores - np.max(scores)
    exp_scores = np.exp(shifted_scores)
    probabilities = exp_scores / np.sum(exp_scores)

    # Map probabilities back to original bin positions
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    priorities[valid_bins_mask] = probabilities

    return priorities
```
