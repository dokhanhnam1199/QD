```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit and a diversification score using a Softmax-like
    probabilistic assignment for online Bin Packing.
    """
    valid_bins_mask = bins_remain_cap >= item
    valid_bins_remain_cap = bins_remain_cap[valid_bins_mask]

    if valid_bins_remain_cap.size == 0:
        return np.zeros_like(bins_remain_cap)

    # Best Fit component: prioritize bins that leave minimal remaining capacity
    # We want to minimize (valid_bins_remain_cap - item).
    # For maximization in Softmax, we use the negative.
    best_fit_scores = -(valid_bins_remain_cap - item)

    # Diversification component: slightly favor bins with more remaining capacity
    # This acts as a soft push towards less full bins to spread items.
    # We use a small additive term to slightly boost scores of bins with more space.
    # Add a small epsilon to avoid division by zero and to ensure diversity.
    diversification_scores = valid_bins_remain_cap * 0.1  # Gentle preference for more space

    # Combine scores: Prioritize best fit, with a slight boost for diversification
    combined_scores = best_fit_scores + diversification_scores

    # Apply Softmax for probabilistic assignment
    # Shift scores to avoid numerical instability
    shifted_scores = combined_scores - np.max(combined_scores)
    exp_scores = np.exp(shifted_scores)
    probabilities = exp_scores / np.sum(exp_scores)

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    priorities[valid_bins_mask] = probabilities

    return priorities
```
