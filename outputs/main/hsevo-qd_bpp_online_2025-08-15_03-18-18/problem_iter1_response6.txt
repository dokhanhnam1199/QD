```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    suitable_bins_mask = bins_remain_cap >= item
    unsuitable_bins = np.where(~suitable_bins_mask)[0]
    suitable_bins = np.where(suitable_bins_mask)[0]

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if len(suitable_bins) == 0:
        return priorities

    remaining_capacities = bins_remain_cap[suitable_bins]
    
    diffs = remaining_capacities - item
    
    priorities[suitable_bins] = 1 / (1 + np.exp(-(diffs / np.mean(bins_remain_cap)) * 5))

    return priorities
```
