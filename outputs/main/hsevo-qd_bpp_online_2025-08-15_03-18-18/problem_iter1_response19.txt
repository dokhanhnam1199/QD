```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    valid_bins = bins_remain_cap >= item
    
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)
    
    effective_capacities = bins_remain_cap[valid_bins] - item
    
    priorities = np.zeros_like(bins_remain_cap)
    priorities[valid_bins] = np.exp(effective_capacities)
    
    if np.sum(priorities) == 0:
        return np.ones_like(bins_remain_cap) / len(bins_remain_cap)
        
    return priorities / np.sum(priorities)
```
