```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit with adaptive diversification.
    Prioritizes bins with minimal remaining capacity after packing,
    and diversifies by favoring bins with more initial capacity.
    Uses Softmax for probabilistic selection, with scaling based on capacity variance.
    """
    suitable_bins_mask = bins_remain_cap >= item
    
    if not np.any(suitable_bins_mask):
        return np.zeros_like(bins_remain_cap)
    
    current_bins_remain_cap = bins_remain_cap[suitable_bins_mask]
    
    
    # Best Fit component: penalize larger remaining capacity after packing
    # Add a small epsilon to avoid division by zero if remaining capacity is 0
    best_fit_scores = 1.0 / (current_bins_remain_cap - item + 1e-9)
    
    # Diversification component: favor bins that were initially more open
    # This is a proxy for initial capacity if we don't have it directly.
    # We can use the remaining capacity as a proxy for how "open" a bin was.
    # Higher remaining capacity initially suggests more "openness".
    diversification_scores = current_bins_remain_cap 
    
    # Combine scores: weighted sum, giving more weight to Best Fit
    # These weights can be tuned, here we give more weight to Best Fit.
    combined_scores = 0.7 * best_fit_scores + 0.3 * diversification_scores
    
    # Softmax for probabilistic selection and to handle score ranges
    # Adding a small value to prevent all scores from being too close
    priorities = np.exp(combined_scores - np.max(combined_scores))
    
    # Normalize probabilities
    sum_priorities = np.sum(priorities)
    if sum_priorities > 0:
        priorities /= sum_priorities
    else:
        # If all scores are zero or negative (e.g., due to exp), distribute uniformly
        priorities = np.ones_like(current_bins_remain_cap) / len(current_bins_remain_cap)

    final_priorities = np.zeros_like(bins_remain_cap)
    final_priorities[suitable_bins_mask] = priorities
    
    return final_priorities
```
