```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit (minimizing waste) with a Softmax approach for robust priority.

    Prioritizes bins that leave minimal remaining capacity after item placement,
    using Softmax for smooth probability distribution and better exploration.
    """
    valid_bins_mask = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if not np.any(valid_bins_mask):
        return priorities

    suitable_bins_remain_cap = bins_remain_cap[valid_bins_mask]

    # Base score: Negative of remaining capacity after fitting (closer to 0 is better)
    # This embodies the "Best Fit" principle.
    base_scores = -(suitable_bins_remain_cap - item)

    # Softmax for normalization: Convert scores to a probability-like distribution
    # Shift scores to prevent overflow/underflow before exponentiation
    if np.max(base_scores) - np.min(base_scores) > 1e-9: # Avoid issues if all scores are identical
        shifted_scores = base_scores - np.max(base_scores)
        exp_scores = np.exp(shifted_scores)
        # Ensure sum is not zero to avoid division by zero
        sum_exp_scores = np.sum(exp_scores)
        if sum_exp_scores > 1e-9:
            probabilities = exp_scores / sum_exp_scores
        else:
            # Fallback if all exponentiated scores are effectively zero
            probabilities = np.ones_like(base_scores) / len(base_scores)
    else:
        # If all base scores are the same, assign equal probability
        probabilities = np.ones_like(base_scores) / len(base_scores)


    priorities[valid_bins_mask] = probabilities

    return priorities
```
