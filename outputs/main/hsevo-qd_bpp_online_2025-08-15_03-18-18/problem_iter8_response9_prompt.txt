{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    suitable_bins_mask = bins_remain_cap >= item\n    priorities[suitable_bins_mask] = 1.0 / (bins_remain_cap[suitable_bins_mask] - item + 1e-9)\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Calculates priority scores for each bin using an adaptive strategy for the\n    online Bin Packing Problem. This version aims to balance fitting tightly\n    (Best Fit) with spreading items (Worst Fit) and incorporating an element\n    of exploration.\n\n    Args:\n        item: The size of the item to be packed.\n        bins_remain_cap: A numpy array where each element represents the\n                         remaining capacity of a bin.\n\n    Returns:\n        A numpy array of the same size as bins_remain_cap, where each element\n        is the priority score for placing the item in the corresponding bin.\n    \"\"\"\n    valid_bins_mask = bins_remain_cap >= item\n    valid_bins_remain_cap = bins_remain_cap[valid_bins_mask]\n\n    if valid_bins_remain_cap.size == 0:\n        return np.zeros_like(bins_remain_cap)\n\n    # --- Core Strategy: Balancing Best Fit and Worst Fit ---\n    # Best Fit component: Prioritize bins that leave minimal remaining space.\n    # We want to minimize (remaining_capacity - item).\n    # A good score for BF would be proportional to -(remaining_capacity - item).\n    # For Softmax, we want higher scores for better options. So, let's use\n    # a score that increases as remaining_capacity - item decreases.\n    # A simple inversion: 1 / (remaining_capacity - item + epsilon)\n    # Or, to keep it related to the previous approach: maximize -(remaining_capacity - item)\n    # To promote diversification, let's also consider the \"emptiness\" of the bin.\n    # Worst Fit component: Prioritize bins with *more* remaining capacity.\n    # This encourages spreading items.\n    # A score for WF could be proportional to remaining_capacity.\n\n    # Let's create a blended score.\n    # For Best Fit: prioritize small remaining capacity after placing the item.\n    # For Worst Fit: prioritize large initial remaining capacity.\n    # We want to maximize the utility.\n    # Let's consider the utility as a function of remaining capacity:\n    # utility = alpha * (1 / (valid_bins_remain_cap - item + 1e-9)) + beta * valid_bins_remain_cap\n\n    # For simplicity and to adapt the softmax approach, let's define scores\n    # where higher means more desirable.\n    # High score for small (remaining_capacity - item) => Best Fit tendency\n    # High score for large remaining_capacity => Worst Fit tendency (for exploration/diversification)\n\n    # Let's try a score that is a combination:\n    # Score = (large_capacity_bonus) * (remaining_capacity) - (misfit_penalty) * (remaining_capacity - item)\n    # A simpler approach:\n    # Prioritize bins where remaining_capacity - item is small (BF)\n    # BUT, also give a boost to bins that are \"more open\" (WF) to avoid early convergence.\n\n    # Let's combine the ideas:\n    # We want to favor small (remaining_capacity - item).\n    # Let's define a score for \"tightness\": TightnessScore = -(valid_bins_remain_cap - item)\n    # And a score for \"openness\": OpennessScore = valid_bins_remain_cap\n\n    # We can create a combined score, for example, by averaging or taking a weighted sum.\n    # A more robust approach is to introduce a \"temperature\" or \"exploration factor\"\n    # that modulates the influence of the Best Fit vs. Worst Fit tendencies.\n\n    # Let's try a score that is a compromise. We want to minimize (remaining_capacity - item).\n    # Let's use a function that is high when (remaining_capacity - item) is small.\n    # Consider a function like: `exp(-k * (remaining_capacity - item))`\n    # `k` can be an exploration parameter. A large `k` makes it more like Best Fit.\n    # A small `k` makes it flatter, more exploratory.\n\n    # To balance exploration and exploitation, let's make the \"tightness\" score\n    # have an exploratory element.\n    # Let's use a score that is high for bins that are \"good\" fits, but also\n    # has some preference for bins that aren't *too* full if an exact fit isn't available.\n\n    # --- Adaptive Exploration/Exploitation ---\n    # We can adapt the strength of the \"Best Fit\" tendency based on the distribution of remaining capacities.\n    # If capacities are very diverse, lean more towards Best Fit.\n    # If capacities are very similar, lean more towards diversification.\n\n    # A simple adaptation: Use a parameter `epsilon` that smooths the selection.\n    # Larger epsilon makes it more uniform (exploratory). Smaller epsilon makes it more greedy (exploitative).\n    # We can define epsilon based on the variance of remaining capacities.\n    variance_remain_cap = np.var(bins_remain_cap[bins_remain_cap > 0]) if np.any(bins_remain_cap > 0) else 1.0\n    # Scale variance to a reasonable epsilon range. Higher variance -> higher epsilon for more exploration.\n    epsilon = 0.1 + 0.5 * (1 / (1 + np.exp(-0.1 * variance_remain_cap))) # Sigmoid to bound epsilon\n\n    # Calculate scores:\n    # Score for \"good fit\" (lower remaining_capacity - item is better)\n    # Using a negative exponential for a sharp decrease in score as misfit increases.\n    # Adding epsilon for numerical stability and exploration.\n    goodness_of_fit_scores = np.exp(-10.0 * (valid_bins_remain_cap - item) / (item + 1e-9)) # Scale by item size\n\n    # Score for \"openness\" (higher remaining_capacity is better for spreading)\n    # Using a scaled exponential to give a significant boost to very open bins.\n    openness_scores = np.exp(0.1 * valid_bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)) # Scale by max capacity\n\n    # Combine scores using epsilon for adaptive weighting\n    # When epsilon is high (diverse capacities), openness_scores have more weight.\n    # When epsilon is low (similar capacities), goodness_of_fit_scores have more weight.\n    combined_scores = (1 - epsilon) * goodness_of_fit_scores + epsilon * openness_scores\n\n    # Softmax transformation to get priorities\n    # Shift scores to prevent overflow/underflow before exponentiation\n    shifted_scores = combined_scores - np.max(combined_scores)\n    exp_scores = np.exp(shifted_scores)\n    probabilities = exp_scores / np.sum(exp_scores)\n\n    # Create the final priority array\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    priorities[valid_bins_mask] = probabilities\n\n    return priorities\n\n### Analyze & experience\n- *   **Heuristics 1 vs. 2:** Heuristic 1 attempts a more nuanced approach by penalizing \"too empty\" bins and rewarding \"perfect fits\" explicitly, whereas Heuristic 2 uses a simple weighted sum of Best Fit and a diversification score (rewarding ample capacity). Heuristic 1's complexity in defining \"too empty\" and its reliance on `original_bin_capacities` (which are not directly available in the function signature, suggesting a potential flaw or assumption) makes it less robust than Heuristic 2's clearer combination of BF and diversification.\n\n*   **Heuristics 2 vs. 3:** Heuristic 2 combines Best Fit (minimizing remaining capacity) with a diversification component (favoring more initial capacity). Heuristic 3 is purely Best Fit, using Softmax for exploration. Heuristic 2 is likely better as it explicitly balances exploitation (BF) with exploration/diversification, whereas Heuristic 3 relies solely on Softmax's inherent exploration for BF.\n\n*   **Heuristics 3 vs. 7:** Both are pure Best Fit with Softmax. Heuristic 3 has slightly more robust Softmax implementation, handling cases where all scores are identical or near-identical. Heuristic 7 is conceptually similar but might be slightly less robust in edge cases of score distribution.\n\n*   **Heuristics 4 vs. 6:** Heuristic 4 tries to penalize overly tight fits using a sigmoid-like function on scaled remaining capacity. Heuristic 6 also penalizes tight fits but does so with a fixed bonus for perfect fits and a different penalty function. Heuristic 6 appears more structured with explicit components (perfect fit bonus, BF, diversification penalty) and more direct handling of edge cases in its penalty calculation. The scaling in Heuristic 4 for the penalty might be overly complex or sensitive.\n\n*   **Heuristics 5 vs. 1:** These appear to be identical implementations, both attempting a complex combination of BF, perfect fit bonus, and a penalty for large remaining space. The `original_bin_capacities` proxy issue is present in both.\n\n*   **Heuristics 8, 9, 10, 11, 12, 13, 16, 17:** These are all identical and implement a very basic \"inverse proximity\" heuristic: `1.0 / (bins_remain_cap - item + 1e-9)`. This is a simple Best Fit variant but lacks any Softmax normalization or explicit diversification, making it prone to exploitation and potentially unstable if capacities are very small. They are clearly inferior to those using Softmax. Heuristic 11-13 also incorrectly assume a fixed `bin_capacities = 1.0` which is not used.\n\n*   **Heuristics 14 & 15:** These are identical, implementing a loop-based Best Fit with a perfect fit bonus. They are less efficient than vectorized NumPy operations seen in others and lack Softmax, making selection purely greedy for \"perfect fit\" and then inverse proximity.\n\n*   **Heuristics 18:** This uses `np.exp(effective_capacities)` which is essentially an exponential Best Fit. It normalizes using division by the sum, similar to Softmax but without the temperature parameter or explicit score shifting for stability. It's better than the simple inverse proximity but less sophisticated than other Softmax variants.\n\n*   **Heuristics 19 & 20:** These are identical and represent the most sophisticated approach. They combine Best Fit (goodness of fit) and a diversification/Worst Fit tendency (openness) adaptively using an `epsilon` parameter derived from the variance of remaining capacities. This \"adaptive exploration/exploitation\" strategy, coupled with scaled exponential scoring and Softmax, is the most promising for balancing greedy choices with broader exploration.\n\n*   **Overall:** The ranking reflects a progression from simple inverse proximity (worst) to weighted sums of heuristics, explicit component-based combinations, and finally to adaptive, scaled, and diversified Softmax approaches (best). The top heuristics (19/20) are clearly superior due to their adaptive strategy and well-defined scoring components.\n- \nHere's a redefined approach to self-reflection for designing better heuristics:\n\n*   **Keywords:** Adaptive, Probabilistic, Hybrid, Robustness.\n*   **Advice:** Focus on adaptive parameter tuning for dynamic exploration-exploitation balance, leverage normalized probabilistic selection (e.g., Softmax with careful scaling) for diverse yet informed choices, and integrate hybrid strategies that blend greedy exploitation with systematic exploration.\n*   **Avoid:** Overly simplistic selection mechanisms (e.g., pure greedy), fixed parameter settings, and heuristics that don't account for edge cases like perfect fits or numerical instability.\n*   **Explanation:** Effective self-reflection identifies *how* to dynamically adapt heuristic behavior to problem characteristics, moving beyond static rules to create more generalizable and performant solutions.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}