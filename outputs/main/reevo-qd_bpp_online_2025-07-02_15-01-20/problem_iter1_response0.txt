```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First Fit Decreasing heuristic idea: Prefer bins that can fit the item.
    # Give a large positive priority to bins that can accommodate the item.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1.0

    # Avoid fragmentation: Penalize bins where the item will almost fill the bin
    # to avoid creating small, unusable spaces.
    almost_full_mask = (bins_remain_cap >= item) & (bins_remain_cap - item < 0.1 * bins_remain_cap.max()) # changed from item
    priorities[almost_full_mask] -= 0.5

    # Prefer to fill bins with more capacity available.
    # Encourage bins to be filled reasonably full before opening a new one.
    # This helps pack densely. Make sure to do this only for bins that actually fit the item.
    fit_bins_remain_cap = bins_remain_cap[fit_mask]
    if len(fit_bins_remain_cap) > 0: #avoid zero division
        priorities[fit_mask] += fit_bins_remain_cap/bins_remain_cap.max()
    
    # Penalize bins with little remaining capacity if item does not fit to avoid over filling.
    no_fit_mask = bins_remain_cap < item
    priorities[no_fit_mask] -= (item - bins_remain_cap[no_fit_mask])

    return priorities
```
