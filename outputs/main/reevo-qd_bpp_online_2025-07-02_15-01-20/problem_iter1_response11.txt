```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Assign high priority to bins where the item fits and leaves the least amount of space
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        residual_space = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] = 1 / (residual_space + 1e-9) # Avoid division by zero
    else:
        # If the item doesn't fit in any bin, prioritize bins that are closest in size.
        priorities = -np.abs(bins_remain_cap - item)
        priorities = priorities - np.min(priorities) # Shift to non-negative and have at least one zero
        if np.sum(priorities) > 0:
            priorities = priorities/np.sum(priorities)
        else:
            priorities = np.ones_like(bins_remain_cap)
            priorities = priorities/np.sum(priorities)


    return priorities
```
