```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: Can the item fit? If not, priority is -inf
    can_fit = item <= bins_remain_cap
    priorities[~can_fit] = -np.inf
    
    # Rule 2: If the item fits perfectly, highest priority
    perfect_fit = np.abs(item - bins_remain_cap) < 1e-6 # Account for floating point errors
    priorities[perfect_fit] = np.inf
    
    # Rule 3: Prioritize bins that will have less remaining capacity after packing
    remaining_after_pack = bins_remain_cap - item
    
    # Rule 4: Normalize remaining capacity. Avoid division by zero. Penalize near empty bins after insertion.
    safe_remaining = np.where(remaining_after_pack > 0, remaining_after_pack, 0.001) 

    priorities[can_fit & ~perfect_fit] = 1.0 / (safe_remaining[can_fit & ~perfect_fit] + 1e-9)
    
    return priorities
```
