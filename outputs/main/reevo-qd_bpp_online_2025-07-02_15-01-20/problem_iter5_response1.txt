```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Infeasible bins get the lowest priority
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    # Rule 2: Perfect fit is the best
    perfect_fit = np.isclose(item, bins_remain_cap)
    priorities[perfect_fit] = np.inf

    # Rule 3: Near-fit prioritization (high reward for small waste)
    almost_fit = (item <= bins_remain_cap) & (bins_remain_cap <= item + 0.1)  # VERY tight "almost fit" range
    if np.any(almost_fit):
        priorities[almost_fit] = 1000 / (bins_remain_cap[almost_fit] - item + 0.00001) # Much bigger reward

    # Rule 4: Capacity Ratio Penalty (Avoid fragmentation)
    fits = (item <= bins_remain_cap) & ~perfect_fit & ~almost_fit
    if np.any(fits):
        capacity_ratio = item / bins_remain_cap[fits]
        priorities[fits] = 10 * capacity_ratio - 5 * (1- capacity_ratio)**2 # Reward high ratio, penalize low

        # Additional penalty for large bins. Scales negatively with remaining cap.
        max_cap = np.max(bins_remain_cap)
        priorities[fits] -= 0.1 * (bins_remain_cap[fits] / max_cap)

    return priorities
```
