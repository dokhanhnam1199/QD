```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: If the item fits perfectly, highest priority
    perfect_fit = np.isclose(item, bins_remain_cap)
    priorities[perfect_fit] = np.inf

    # Rule 2: Sharpen near-fit prioritization (1% threshold)
    almost_fit = (item < bins_remain_cap) & (bins_remain_cap <= item * 1.01)
    if np.any(almost_fit):
        priorities[almost_fit] = 500 / (bins_remain_cap[almost_fit] - item + 0.0001)  # Aggressively reward near-fit

    # Rule 3: Prioritize bins that fit, penalizing waste more effectively
    fits = (item <= bins_remain_cap) & ~perfect_fit & ~almost_fit
    if np.any(fits):
        waste_ratio = (bins_remain_cap[fits] - item) / bins_remain_cap[fits]
        capacity_ratio = bins_remain_cap[fits] / np.max(bins_remain_cap)
        priorities[fits] = 1 / (waste_ratio + 0.0001) - 2 * capacity_ratio  # Inverse waste and capacity penalty

    # Rule 4: Explicit infeasibility handling
    priorities[item > bins_remain_cap] = -np.inf
    
    return priorities
```
