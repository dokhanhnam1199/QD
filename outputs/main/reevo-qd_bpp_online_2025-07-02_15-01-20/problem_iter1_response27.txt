```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First Fit Decreasing inspired priority: Prefer bins with capacity just enough for the item
            slack = cap - item
            priorities[i] = 1 / (slack + 0.00001)  # Avoid division by zero. Smaller slack, higher priority.

            # Bonus for almost full bins to fill them
            if slack < 0.1:  #tuneable param: if remaining capcity is small.
                 priorities[i] += 1 # Bonus priority.

            # Penalize bins that are too empty to leave them for possibly larger item later.
            if cap > 2 * item:  #tuneable param: If remaining capacity is too big.
                priorities[i] /= 2 # Reduces the priority.

        else:
            priorities[i] = -1e9  # Very low priority if item doesn't fit

    return priorities
```
