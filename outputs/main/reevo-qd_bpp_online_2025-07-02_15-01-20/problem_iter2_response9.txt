```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: If the item fits perfectly, highest priority
    perfect_fit = np.isclose(item, bins_remain_cap)
    priorities[perfect_fit] = np.inf

    # Rule 2: Higher priority if the item almost fits, minimizing waste. Consider it a very high priority, but less than perfect fit
    almost_fit = (item < bins_remain_cap) & (bins_remain_cap <= item * 1.2)
    priorities[almost_fit] = 1000 / (bins_remain_cap[almost_fit] - item)  # Inverse of waste, higher magnitude than other fits

    # Rule 3: Give some priority for bins that fit, scaled inversely to remaining capacity, with a penalty for excessive free space
    fits = (item <= bins_remain_cap) & ~perfect_fit & ~almost_fit
    remaining_space = bins_remain_cap[fits] - item
    priorities[fits] = remaining_space / bins_remain_cap[fits] - 0.2 * (bins_remain_cap[fits] / np.max(bins_remain_cap)) # balance wasted space vs. overall bin utilization

    # Rule 4: Zero priority for items that don't fit
    priorities[item > bins_remain_cap] = -np.inf
    
    return priorities
```
