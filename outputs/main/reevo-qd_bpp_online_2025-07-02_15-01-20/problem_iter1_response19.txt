```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining space after adding the item
    remaining_space = bins_remain_cap - item

    # Prioritize bins where the item fits
    fit_indices = remaining_space >= 0
    
    if np.any(fit_indices):
        # Prioritize bins with less remaining space after packing (first-fit decreasing style)
        priorities[fit_indices] = bins_remain_cap[fit_indices] - item
    
        # Boost priority if remaining space is very small to avoid fragmentation (optional)
        small_space_indices = (remaining_space >= 0) & (remaining_space <= 0.1) # Example threshold: 0.1
        priorities[small_space_indices] += 1.0

        # Prioritize bins closer to being full (relative to the item size)
        #priorities[fit_indices] += (item / bins_remain_cap[fit_indices]) 
    else:
        #If no bin fits the item, penalize based on how much the bin overflows (avoid this if possible but be graceful)
        overflow_amount = item - bins_remain_cap
        priorities = -overflow_amount

    return priorities
```
