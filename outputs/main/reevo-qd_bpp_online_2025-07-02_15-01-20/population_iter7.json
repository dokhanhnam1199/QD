[
  {
    "stdout_filepath": "problem_iter0_stdout0.txt",
    "code_path": "problem_iter0_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities",
    "response_id": 0,
    "obj": 149.30195452732352,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 11.60964047443681,
    "mi": 94.04446327225541,
    "token_count": 47.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response24.txt_stdout.txt",
    "code_path": "problem_iter1_code24.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Rule 1: If the item fits perfectly, highest priority\n    perfect_fit = np.isclose(item, bins_remain_cap)\n    priorities[perfect_fit] = np.inf\n\n    # Rule 2: Higher priority if the item almost fits, minimizing waste\n    almost_fit = (item < bins_remain_cap) & (bins_remain_cap < item * 1.2) # within 20%\n    priorities[almost_fit] = 100 / (bins_remain_cap[almost_fit] - item) # Inverse of remaining space. smaller the better\n\n    # Rule 3: Give some priority for bins that fit, scaled to remaining capacity and a penalty for too much free space.\n    fits = (item <= bins_remain_cap) & ~perfect_fit & ~almost_fit\n    priorities[fits] = (bins_remain_cap[fits] - item) / bins_remain_cap[fits] - 0.5 * (bins_remain_cap[fits] / np.max(bins_remain_cap)) # penalize bins with high remaining capacity\n\n\n    # Rule 4: zero priority for items that doesn't fit.\n    priorities[item > bins_remain_cap] = -np.inf\n    \n    return priorities",
    "response_id": 24,
    "obj": 2.8320702034304044,
    "SLOC": 13.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 175.93083758004835,
    "mi": 80.8357761338392,
    "token_count": 156.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response8.txt_stdout.txt",
    "code_path": "problem_iter2_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Rule 1: If the item fits perfectly, highest priority\n    perfect_fit = np.isclose(item, bins_remain_cap)\n    priorities[perfect_fit] = np.inf\n\n    # Rule 2: Higher priority if the item almost fits, minimizing waste\n    almost_fit = (item < bins_remain_cap) & (bins_remain_cap <= item * 1.3)  # within 30%\n    if np.any(almost_fit):\n        priorities[almost_fit] = 100 / (bins_remain_cap[almost_fit] - item + 0.0001) # Inverse of remaining space. smaller the better. Add a small number to avoid division by zero\n\n    # Rule 3: Give some priority for bins that fit, scaled to remaining capacity and a penalty for too much free space.\n    fits = (item <= bins_remain_cap) & ~perfect_fit & ~almost_fit\n    if np.any(fits):\n        priorities[fits] = (bins_remain_cap[fits] - item) / bins_remain_cap[fits] - 0.7 * (bins_remain_cap[fits] / np.max(bins_remain_cap)) # penalize bins with high remaining capacity more. Increased penalty to 0.7.\n\n    # Rule 4: zero priority for items that doesn't fit.\n    priorities[item > bins_remain_cap] = -np.inf\n    \n    return priorities",
    "response_id": 8,
    "obj": 3.260869565217396,
    "SLOC": 11.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 259.4606049037673,
    "mi": 82.12400163785595,
    "token_count": 170.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter3_response3.txt_stdout.txt",
    "code_path": "problem_iter3_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Rule 1: If the item fits perfectly, highest priority\n    perfect_fit = np.isclose(item, bins_remain_cap)\n    priorities[perfect_fit] = np.inf\n\n    # Rule 2: Near Fit - Significant priority for bins that fit with minimal waste\n    near_fit = (item < bins_remain_cap) & (bins_remain_cap <= item * 1.3)  # Adjusted range (30% more)\n    waste = bins_remain_cap[near_fit] - item\n    priorities[near_fit] = 100 / (waste + 0.001)  # Inverted waste, add small value to avoid division by zero\n\n    # Rule 3: Reasonable Fit - Moderate priority with penalty based on remaining capacity ratio\n    reasonable_fit = (item < bins_remain_cap) & ~near_fit & ~perfect_fit\n    remaining_ratio = (bins_remain_cap[reasonable_fit] - item) / bins_remain_cap[reasonable_fit]\n    priorities[reasonable_fit] = 50 * (1 - remaining_ratio) #Prioritize lower remaining ratio\n\n    # Rule 4: Infeasible - Zero priority for bins that cannot accommodate the item\n    priorities[item > bins_remain_cap] = -np.inf\n    \n    return priorities",
    "response_id": 3,
    "obj": 3.8492221779018885,
    "SLOC": 14.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 345.9253261676786,
    "mi": 80.85132931047148,
    "token_count": 200.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter4_response6.txt_stdout.txt",
    "code_path": "problem_iter4_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Rule 1: If the item fits perfectly, highest priority\n    perfect_fit = np.isclose(item, bins_remain_cap)\n    priorities[perfect_fit] = np.inf\n\n    # Rule 2: Higher priority if the item almost fits, minimizing waste\n    almost_fit = (item < bins_remain_cap) & (bins_remain_cap < item * 1.1) # within 10%\n    if np.any(almost_fit):\n        priorities[almost_fit] = 100 / (bins_remain_cap[almost_fit] - item + 0.0001) # Inverse of remaining space. smaller the better. Add a small number to avoid division by zero\n\n    # Rule 3: Give some priority for bins that fit, scaled to remaining capacity and a penalty for too much free space.\n    fits = (item <= bins_remain_cap) & ~perfect_fit & ~almost_fit\n    if np.any(fits):\n        priorities[fits] = (bins_remain_cap[fits] - item) / bins_remain_cap[fits] - 0.6 * (bins_remain_cap[fits] / np.max(bins_remain_cap)) # penalize bins with high remaining capacity\n\n\n    # Rule 4: zero priority for items that doesn't fit.\n    priorities[item > bins_remain_cap] = -np.inf\n    \n    return priorities",
    "response_id": 6,
    "obj": 1.4459513362584764,
    "SLOC": 13.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 303.3499014085797,
    "mi": 79.31358952839038,
    "token_count": 193.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response0.txt_stdout.txt",
    "code_path": "problem_iter5_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Rule 1: Infeasible bins get the lowest priority\n    infeasible = item > bins_remain_cap\n    priorities[infeasible] = -np.inf\n\n    # Rule 2: Perfect fit is the best\n    perfect_fit = np.isclose(item, bins_remain_cap)\n    priorities[perfect_fit] = np.inf\n\n    # Rule 3: Aggressively prioritize near-fits (0% to 5% waste)\n    near_fit = (item <= bins_remain_cap) & (bins_remain_cap <= item * 1.05) & ~perfect_fit\n    if np.any(near_fit):\n        waste_ratio = (bins_remain_cap[near_fit] - item) / item\n        priorities[near_fit] = 100 * (1 - waste_ratio)  # High reward for near-fits\n\n    # Rule 4: Penalize bins based on remaining capacity ratio and scale\n    feasible = (item <= bins_remain_cap) & ~perfect_fit & ~near_fit\n    if np.any(feasible):\n        capacity_ratio = item / bins_remain_cap[feasible]\n        priorities[feasible] = 10 * capacity_ratio - (bins_remain_cap[feasible]/ np.max(bins_remain_cap)) # reward high capacity ratio, penalize large bins\n\n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 15.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 281.3104817439633,
    "mi": 82.74610589014091,
    "token_count": 201.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response2.txt_stdout.txt",
    "code_path": "problem_iter6_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Rule 1: If the item fits perfectly, highest priority\n    perfect_fit = np.isclose(item, bins_remain_cap)\n    priorities[perfect_fit] = np.inf\n\n    # Rule 2: Higher priority if the item almost fits, minimizing waste\n    almost_fit = (item < bins_remain_cap) & (bins_remain_cap < item * 1.05) # within 5%\n    if np.any(almost_fit):\n        priorities[almost_fit] = 100 / (bins_remain_cap[almost_fit] - item + 0.0001) # Inverse of remaining space. smaller the better. Add a small number to avoid division by zero\n\n    # Rule 3: Give some priority for bins that fit, scaled to remaining capacity and a penalty for too much free space.\n    fits = (item <= bins_remain_cap) & ~perfect_fit & ~almost_fit\n    if np.any(fits):\n        priorities[fits] = (bins_remain_cap[fits] - item) / bins_remain_cap[fits] - 0.5 * (bins_remain_cap[fits] / np.max(bins_remain_cap)) # penalize bins with high remaining capacity\n\n    # Rule 4: zero priority for items that doesn't fit.\n    priorities[item > bins_remain_cap] = -np.inf\n    \n    return priorities",
    "response_id": 2,
    "obj": 0.8575987235739952,
    "SLOC": 15.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 297.4984149828081,
    "mi": 82.5759657807677,
    "token_count": 227.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter7_response3.txt_stdout.txt",
    "code_path": "problem_iter7_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Rule 1: If the item fits perfectly, highest priority\n    perfect_fit = np.isclose(item, bins_remain_cap)\n    priorities[perfect_fit] = np.inf\n\n    # Rule 2: Higher priority if the item almost fits, minimizing waste, but aggressively rewarded.\n    almost_fit = (item < bins_remain_cap) & (bins_remain_cap < item * 1.02)  # Tighter range: Within 2%\n    if np.any(almost_fit):\n        priorities[almost_fit] = 500 / (bins_remain_cap[almost_fit] - item + 0.0001)  # Aggressive reward: Increased scaling factor\n\n    # Rule 3: Give some priority for bins that fit, and apply stronger penalty for excessive waste.\n    fits = (item <= bins_remain_cap) & ~perfect_fit & ~almost_fit\n    if np.any(fits):\n        waste_ratio = (bins_remain_cap[fits] - item) / bins_remain_cap[fits]\n        capacity_ratio = bins_remain_cap[fits] / np.max(bins_remain_cap)\n        priorities[fits] = waste_ratio - 0.75 * capacity_ratio # Increased penalty for excessive space, scaled capacity\n        \n    # Explicit Infeasibility Handling\n    priorities[item > bins_remain_cap] = -np.inf\n    \n    return priorities",
    "response_id": 3,
    "obj": 2.4631033107299607,
    "SLOC": 13.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 321.453120277085,
    "mi": 81.50598487488132,
    "token_count": 204.0,
    "exec_success": true
  }
]