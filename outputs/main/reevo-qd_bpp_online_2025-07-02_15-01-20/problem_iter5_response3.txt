```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_count = len(bins_remain_cap)

    # Rule 1: If item doesn't fit, lowest priority
    doesnt_fit = item > bins_remain_cap
    priorities[doesnt_fit] = -np.inf

    # Rule 2: Perfect fit, highest priority
    perfect_fit = np.isclose(item, bins_remain_cap)
    priorities[perfect_fit] = np.inf
    
    # Rule 3: Near-fit heuristic with tight range and scaling
    near_fit_threshold = 0.05  # Define a small threshold for "near fit" (5% of item size)
    near_fit = (item <= bins_remain_cap) & (bins_remain_cap <= item * (1 + near_fit_threshold)) & ~perfect_fit
    if np.any(near_fit):
      remaining_space = bins_remain_cap[near_fit] - item
      priorities[near_fit] = 1000 * (1 - (remaining_space / (item * near_fit_threshold))) # scaled 0-1000.

    # Rule 4: Capacity Ratio Penalty for bins that fits, penalizing high remaining capacity
    fits = (item <= bins_remain_cap) & ~perfect_fit & ~near_fit
    if np.any(fits):
        capacity_ratio = item / bins_remain_cap[fits]
        priorities[fits] = 10 * capacity_ratio - 5 * (1 - capacity_ratio) # Reward closer fits, penalize high remaining ratio. Max ratio penalty set.
        

    return priorities
```
