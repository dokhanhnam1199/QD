```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Base priority on remaining capacity after adding the item.
            remaining_capacity = cap - item
            priorities[i] = remaining_capacity  # Prioritize bins with smallest remaining capacity. Can be tuned.

            # Add a bonus if the item fits perfectly (or almost perfectly)
            if 0 <= remaining_capacity <= 0.1: # play with the threshold
                priorities[i] += 10 # magnitude can be tuned

            # Penalize bins with very large remaining capacity (avoid fragmentation)
            if remaining_capacity > 0.7: # play with threshold
                 priorities[i] -= 2  # magnitude can be tuned

        else:
            priorities[i] = -np.inf  # Bin is not feasible
    return priorities
```
