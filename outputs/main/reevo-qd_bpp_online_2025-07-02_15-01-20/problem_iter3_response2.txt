```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Infeasible placement
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    # Rule 2: Perfect Fit
    perfect_fit = np.isclose(item, bins_remain_cap)
    priorities[perfect_fit] = np.inf

    # Rule 3: Near Fit (high priority, minimize waste)
    near_fit = (item < bins_remain_cap) & (bins_remain_cap <= item * 1.1)  # Up to 10% larger
    if np.any(near_fit):
        priorities[near_fit] = 1000 / (bins_remain_cap[near_fit] - item) 

    # Rule 4: Good Fit (minimize waste, penalize large remaining space)
    good_fit = (item < bins_remain_cap) & ~perfect_fit & ~near_fit
    if np.any(good_fit):
        waste_ratio = (bins_remain_cap[good_fit] - item) / bins_remain_cap[good_fit]
        capacity_ratio = bins_remain_cap[good_fit] / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0
        priorities[good_fit] = 100 * (1 - waste_ratio) - 50 * capacity_ratio # Reward small waste, penalize filling large bins slowly

    return priorities
```
