```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Infeasible bins get the lowest priority
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    # Rule 2: Aggressively reward tight fits (less than 10% waste)
    tight_fit = (item <= bins_remain_cap) & (bins_remain_cap <= item * 1.1)
    if np.any(tight_fit):
        priorities[tight_fit] = 1000 / (bins_remain_cap[tight_fit] - item + 0.0001) # Extreme reward
        
    # Rule 3: Reward bins where the item fits, but penalize high remaining capacity non-linearly
    feasible = (item <= bins_remain_cap) & ~tight_fit
    if np.any(feasible):
        remaining_ratio = (bins_remain_cap[feasible] - item) / bins_remain_cap[feasible]
        priorities[feasible] = 1 - remaining_ratio**2 - 0.1 * (bins_remain_cap[feasible] / np.max(bins_remain_cap)) # High priority for small waste, penalize bins with large cap.

    return priorities
```
