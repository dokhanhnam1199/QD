```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: Perfect fit - highest priority
    perfect_fit = np.isclose(item, bins_remain_cap)
    priorities[perfect_fit] = np.inf

    # Rule 2: Near fit (within 5% remaining capacity) - high priority, prioritize less waste
    near_fit = (item < bins_remain_cap) & (bins_remain_cap <= item * 1.05)
    priorities[near_fit] = 1000 / (bins_remain_cap[near_fit] - item)

    # Rule 3: Prioritize bins with enough space, but penalize excessive remaining capacity.  Calculate waste ratio.
    fits = (item < bins_remain_cap) & ~perfect_fit & ~near_fit
    waste_ratio = (bins_remain_cap[fits] - item) / bins_remain_cap[fits]
    priorities[fits] = 1 - waste_ratio - 0.2 * (bins_remain_cap[fits] / np.max(bins_remain_cap))  # Waste reduction + capacity threshold

    # Rule 4: Infeasible bins receive the lowest priority.
    priorities[item > bins_remain_cap] = -np.inf

    return priorities
```
