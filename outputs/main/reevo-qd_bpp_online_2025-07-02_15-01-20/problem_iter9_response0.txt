```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: If the item fits perfectly, highest priority
    perfect_fit = np.isclose(item, bins_remain_cap)
    priorities[perfect_fit] = np.inf

    # Rule 2: Aggressively reward tight fits (<10%)
    tight_fit = (item <= bins_remain_cap) & (bins_remain_cap <= item * 1.1)
    if np.any(tight_fit):
        priorities[tight_fit] = 1000 / (bins_remain_cap[tight_fit] - item + 0.0001)  # Inverse of remaining space, higher reward

    # Rule 3: Penalize high remaining capacity non-linearly
    fits = (item <= bins_remain_cap) & ~perfect_fit & ~tight_fit
    if np.any(fits):
        remaining_ratio = bins_remain_cap[fits] / np.max(bins_remain_cap)
        priorities[fits] = (1 - remaining_ratio**2)  # Non-linear penalty, higher is preferred
        #priorities[fits] = 1/(bins_remain_cap[fits] + 0.0001) # original

    # Rule 4: Explicit handling of infeasibility - very low priority
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    # Rule 5: Balancing utilization (modified)
    # Scale priority by current bin utilization to promote balancing
    #priorities[fits] *= (1 - remaining_ratio) # Not required, it creates weird behavior

    return priorities
```
