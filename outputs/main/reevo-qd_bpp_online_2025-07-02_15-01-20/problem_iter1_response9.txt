```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Calculate the remaining capacity after adding the item.
            remaining_cap = cap - item
            
            # Give higher priority to bins that can accommodate the item with minimal waste.
            #Prioritize bins with remaining capacity closest to zero, but also favor fuller bins initially
            
            if remaining_cap == 0:
                priorities[i] = 1000 #Highest priority if it fits perfectly

            else:

                fill_ratio = item/cap
                waste_ratio = remaining_cap/1.0 # scale remaining cap to 1 for relative comparison.

                priorities[i] = fill_ratio * (1- waste_ratio) #Prefer bins that fill nicely and leave little waste.

                #Add a tiny randomness to break ties in case the priorities are identical
                priorities[i] += np.random.rand()*0.001

        else:
            # Item doesn't fit, so assign a very low priority.
            priorities[i] = -1.0  # Extremely low priority to discourage this bin
            
    return priorities
```
