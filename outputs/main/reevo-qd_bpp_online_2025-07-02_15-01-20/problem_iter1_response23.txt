```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: First Fit Decreasing (FFD) inspired - prioritize bins that can fit the item best.
    #   If a bin can't fit, give it a very low priority (negative).
    #   Otherwise, prioritize bins with remaining capacity closest to the item size.
    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -1e9  # Very low priority if it doesn't fit

    fit_diff = bins_remain_cap[can_fit] - item
    priorities[can_fit] = -fit_diff  # Smaller difference = higher priority

    # Heuristic 2: Avoid fragmentation - prioritize bins with low capacity remaining.
    #   This can be combined with the first heuristic.

    #Heuristic 3: Penalize almost full bins which might prevent future packings.
    almost_full = (bins_remain_cap > item) & (bins_remain_cap < 2*item) #avoid creating bins that are almost full but can't pack most of items
    priorities[almost_full] -= item/(bins_remain_cap[almost_full]+1e-6) #slight penalty for being almost full
    return priorities
```
