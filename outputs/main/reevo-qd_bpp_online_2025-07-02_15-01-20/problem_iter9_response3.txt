```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # Rule 1: If the item fits perfectly, highest priority
    perfect_fit = np.isclose(item, bins_remain_cap)
    priorities[perfect_fit] = np.inf

    # Rule 2: Aggressively reward tight fits (<10% waste)
    tight_fit = (item < bins_remain_cap) & (bins_remain_cap <= item * 1.10)  # Within 10%
    if np.any(tight_fit):
         priorities[tight_fit] = 1000 / (bins_remain_cap[tight_fit] - item + 0.0001) # higher reward for less remaining capacity
    
    # Rule 3: Prioritize bins that fit, but penalize bins with high remaining capacity non-linearly.
    fits = (item <= bins_remain_cap) & ~perfect_fit & ~tight_fit
    if np.any(fits):
        remaining_ratio = bins_remain_cap[fits] / bin_capacity
        priorities[fits] =  10 * (1 - remaining_ratio**2) # Prioritize lower remaining capacity, non-linear penalty. 10 is just a scaling factor

    # Rule 4: Explicitly handle infeasibility: negative priority for bins that don't fit
    no_fit = item > bins_remain_cap
    priorities[no_fit] = -np.inf # Ensure these bins are never selected

    return priorities
```
