```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = np.max(bins_remain_cap)

    # Rule 1: If the item fits perfectly, highest priority (or almost perfect)
    perfect_fit = np.isclose(item, bins_remain_cap, rtol=0, atol=0.001)
    priorities[perfect_fit] = np.inf

    # Rule 2: Aggressively reward tight fits (waste < 10% of bin size)
    tight_fit = (item <= bins_remain_cap) & (bins_remain_cap - item <= 0.1 * bin_size) & ~perfect_fit
    if np.any(tight_fit):
        waste = bins_remain_cap[tight_fit] - item
        priorities[tight_fit] = 10 / (waste + 0.0001)  # Higher priority for less waste

    # Rule 3: Penalize high remaining capacity (non-linear penalty)
    fits = (item <= bins_remain_cap) & ~perfect_fit & ~tight_fit
    if np.any(fits):
        remaining_ratio = bins_remain_cap[fits] / bin_size
        priorities[fits] = 1 - 2 * remaining_ratio**2  # Non-linear penalty for high remaining capacity

    # Rule 4: Explicitly handle infeasibility (negative priority)
    priorities[item > bins_remain_cap] = -np.inf

    # Rule 5: Soft penalty to highly filled bins to encourage utilization of emptier bins if they fit, usefull for distributing load
    almost_full = (bins_remain_cap <= 0.2 * bin_size) & (item <= bins_remain_cap)
    if np.any(almost_full):
       priorities[almost_full] -= 0.1
    
    return priorities
```
