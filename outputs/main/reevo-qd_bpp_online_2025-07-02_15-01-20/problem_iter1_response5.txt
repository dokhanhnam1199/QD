```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First Fit Decreasing inspired - prioritize bins that have enough space, but not too much
            # reward bins with remaining capacity closest to the item size
            priorities[i] = np.exp(-np.abs(cap - item))

            # Bonus for bins that allow smallest waste:
            priorities[i] += 1.0 / (cap + 1e-9) # prevent division by zero

        else:
            # very low priority if bin is not large enough.
            priorities[i] = -1e9 # or some other very low value

    return priorities
```
