```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: Perfect Fit - Highest Priority
    perfect_fit = np.isclose(item, bins_remain_cap)
    priorities[perfect_fit] = np.inf

    # Rule 2: Near Fit - High Priority, minimizing waste
    near_fit = (item < bins_remain_cap) & (bins_remain_cap <= item * 1.3)  # Up to 30% larger than the item
    priorities[near_fit] = 100 / (bins_remain_cap[near_fit] - item)

    # Rule 3: Fits, but not a near fit - Moderate Priority, penalizing large remaining capacities
    fits = (item <= bins_remain_cap) & ~perfect_fit & ~near_fit
    
    # Calculate a score based on the ratio of item size to remaining capacity,
    # and penalize for large absolute remaining capacity to prevent spreading items too thinly.
    
    capacity_ratio = item / bins_remain_cap[fits]
    remaining_penalty = bins_remain_cap[fits] / np.max(bins_remain_cap) # Normalize remaining capacity for penalty
    priorities[fits] = capacity_ratio - 0.5 * remaining_penalty


    # Rule 4: Does not fit - Zero Priority (or negative infinity to strongly discourage)
    priorities[item > bins_remain_cap] = -np.inf
    
    return priorities
```
