```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give high priority to bins that can fit the item.
    fit_indices = bins_remain_cap >= item
    priorities[fit_indices] += 1.0

    # Among bins that can fit, prioritize those with least remaining space.
    remaining_after_fit = bins_remain_cap[fit_indices] - item
    priorities[fit_indices] += 1.0 / (remaining_after_fit + 0.0001)  # Adding a small constant to avoid division by zero.

    # Give a very small negative priority to bins that cannot fit, to avoid selecting them.
    priorities[~fit_indices] -= 0.0001 # Small negative priority

    return priorities
```
