```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: Bins that can fit the item get a higher base priority.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1.0
    
    # Rule 2: Smaller remaining capacity has less priority since we want to preserve empty space.
    priorities[fit_mask] -= bins_remain_cap[fit_mask]
    
    # Rule 3: Bins that are nearly full (after placing the item) get higher priority to maximize bin utilization.
    nearly_full_mask = (bins_remain_cap >= item) & ((bins_remain_cap - item) <= 0.1 * np.max(bins_remain_cap))  # Check if remaining capacity after item placement is within 10% of the maximum bin capacity.

    priorities[nearly_full_mask] += 2.0 # Big reward

    #Rule 4: If item cannot fit, heavily penalize the bin
    priorities[~fit_mask] = -1e9

    return priorities
```
