[
  {
    "stdout_filepath": "problem_iter0_stdout0.txt",
    "code_path": "problem_iter0_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities",
    "response_id": 0,
    "obj": 149.30195452732352,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 11.60964047443681,
    "mi": 94.04446327225541,
    "token_count": 47.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response24.txt_stdout.txt",
    "code_path": "problem_iter1_code24.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Rule 1: If the item fits perfectly, highest priority\n    perfect_fit = np.isclose(item, bins_remain_cap)\n    priorities[perfect_fit] = np.inf\n\n    # Rule 2: Higher priority if the item almost fits, minimizing waste\n    almost_fit = (item < bins_remain_cap) & (bins_remain_cap < item * 1.2) # within 20%\n    priorities[almost_fit] = 100 / (bins_remain_cap[almost_fit] - item) # Inverse of remaining space. smaller the better\n\n    # Rule 3: Give some priority for bins that fit, scaled to remaining capacity and a penalty for too much free space.\n    fits = (item <= bins_remain_cap) & ~perfect_fit & ~almost_fit\n    priorities[fits] = (bins_remain_cap[fits] - item) / bins_remain_cap[fits] - 0.5 * (bins_remain_cap[fits] / np.max(bins_remain_cap)) # penalize bins with high remaining capacity\n\n\n    # Rule 4: zero priority for items that doesn't fit.\n    priorities[item > bins_remain_cap] = -np.inf\n    \n    return priorities",
    "response_id": 24,
    "obj": 2.8320702034304044,
    "SLOC": 13.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 175.93083758004835,
    "mi": 80.8357761338392,
    "token_count": 156.0,
    "exec_success": true
  }
]