```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First Fit Decreasing-like heuristic: Prioritize bins with smallest remaining capacity that can still fit the item
            priorities[i] = 1 / (cap + 1e-9)  # Adding a small number to avoid division by zero

            # Best Fit heuristic: Prioritize the bin with the least wasted space
            remaining_space = cap - item
            priorities[i] += 1 / (remaining_space + 1e-9) if remaining_space >= 0 else 0  # Prioritize small remaining space

            # Level-oriented heuristic: if it fits nearly perfect, prioritize it.
            if abs(cap - item) < 0.1: #adjust threshold as necessary
                priorities[i] += 10 #boost for "almost perfect" fits
        else:
            priorities[i] = -1  # Cannot fit, assign low priority

    return priorities
```
