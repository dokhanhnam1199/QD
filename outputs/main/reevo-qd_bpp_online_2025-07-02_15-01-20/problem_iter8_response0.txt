```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Infeasible bins get the lowest priority
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    # Rule 2: Perfect fit is the best
    perfect_fit = np.isclose(item, bins_remain_cap)
    priorities[perfect_fit] = np.inf

    # Rule 3: Aggressively prioritize near-fits (0% to 10% waste)
    near_fit = (item <= bins_remain_cap) & (bins_remain_cap <= item * 1.1) & ~perfect_fit
    if np.any(near_fit):
        waste = bins_remain_cap[near_fit] - item
        priorities[near_fit] = 100 / (waste + 0.0001)

    # Rule 4: Prioritize bins that fit, but penalize excessive waste, scaled by max capacity
    feasible = (item <= bins_remain_cap) & ~perfect_fit & ~near_fit
    if np.any(feasible):
        waste = bins_remain_cap[feasible] - item
        priorities[feasible] = (1 - (waste / np.max(bins_remain_cap)))  # Reward fitting, penalize large waste relative to max bin size

    return priorities
```
