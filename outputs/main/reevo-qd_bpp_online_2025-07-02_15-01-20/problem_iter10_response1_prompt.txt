{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Rule 1: If the item fits perfectly, highest priority\n    perfect_fit = np.isclose(item, bins_remain_cap)\n    priorities[perfect_fit] = np.inf\n\n    # Rule 2: Higher priority if the item almost fits, minimizing waste, but aggressively rewarded.\n    almost_fit = (item < bins_remain_cap) & (bins_remain_cap < item * 1.02)  # Tighter range: Within 2%\n    if np.any(almost_fit):\n        priorities[almost_fit] = 500 / (bins_remain_cap[almost_fit] - item + 0.0001)  # Aggressive reward: Increased scaling factor\n\n    # Rule 3: Give some priority for bins that fit, and apply stronger penalty for excessive waste.\n    fits = (item <= bins_remain_cap) & ~perfect_fit & ~almost_fit\n    if np.any(fits):\n        waste_ratio = (bins_remain_cap[fits] - item) / bins_remain_cap[fits]\n        capacity_ratio = bins_remain_cap[fits] / np.max(bins_remain_cap)\n        priorities[fits] = waste_ratio - 0.75 * capacity_ratio # Increased penalty for excessive space, scaled capacity\n        \n    # Explicit Infeasibility Handling\n    priorities[item > bins_remain_cap] = -np.inf\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Rule 1: If the item fits perfectly, highest priority\n    perfect_fit = np.isclose(item, bins_remain_cap)\n    priorities[perfect_fit] = np.inf\n\n    # Rule 2: Higher priority if the item almost fits, minimizing waste\n    almost_fit = (item < bins_remain_cap) & (bins_remain_cap < item * 1.1) # within 10%\n    if np.any(almost_fit):\n        priorities[almost_fit] = 100 / (bins_remain_cap[almost_fit] - item + 0.0001) # Inverse of remaining space. smaller the better. Add a small number to avoid division by zero\n\n    # Rule 3: Give some priority for bins that fit, scaled to remaining capacity and a penalty for too much free space.\n    fits = (item <= bins_remain_cap) & ~perfect_fit & ~almost_fit\n    if np.any(fits):\n        priorities[fits] = (bins_remain_cap[fits] - item) / bins_remain_cap[fits] - 0.6 * (bins_remain_cap[fits] / np.max(bins_remain_cap)) # penalize bins with high remaining capacity\n\n\n    # Rule 4: zero priority for items that doesn't fit.\n    priorities[item > bins_remain_cap] = -np.inf\n    \n    return priorities\n\n[Reflection]\nThe better code uses a wider \"almost fit\" range, less aggressive reward for it, and less penalty for excessive space.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}