```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First Fit Decreasing (FFD) heuristic-inspired prioritization
    # Prefer bins with remaining capacity closest to the item size, but only if the item fits.
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        diffs = np.abs(bins_remain_cap[fit_mask] - item)
        priorities[fit_mask] = 1 / (1e-6 + diffs)  # Avoid division by zero and prioritize closer fits

        # Additionally boost bins that would be filled more completely
        fill_ratios = item / bins_remain_cap[fit_mask]
        priorities[fit_mask] += fill_ratios # Larger items in the bin lead to higher score.

    # Bonus for almost full bins before adding this item. Try to keep it that way!
    almost_full = bins_remain_cap > 0.0 # Consider a bin only if it exists.
    almost_full[fit_mask == False] = False
    priorities[almost_full] += 0.1 * (1-bins_remain_cap[almost_full]) # Bin with a small remanining capacity already will be prefered
    return priorities
```
