```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining capacity after adding the item
    remaining_capacity_after_add = bins_remain_cap - item

    # Prioritize bins that can accommodate the item
    can_accommodate = remaining_capacity_after_add >= 0
    priorities[can_accommodate] = 1

    # Within the bins that can accommodate, prioritize those with smallest remaining capacity.
    priorities[can_accommodate] = 1 / (remaining_capacity_after_add[can_accommodate] + 1e-6)  #Adding small number to avoid division by zero.


    #For bins that can't accommodate, assign negative priority proportional to how much it overflows.
    cannot_accommodate = remaining_capacity_after_add < 0
    priorities[cannot_accommodate] = remaining_capacity_after_add[cannot_accommodate]  # Assign the negative remaining capacity

    return priorities
```
