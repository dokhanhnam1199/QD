```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing heuristic inspired priority:
    # Give higher priority to bins where item fits with least waste
    # Avoids creating many bins with very small remaining capacity.
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        waste = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1.0 / (waste + 1e-9)  # Inverse of waste

    # If no bin fits, prioritize the fullest bin (least remaining capacity)
    # This tries to consolidate items into existing bins when no perfect fit exists.
    else:
        priorities = 1.0 / (bins_remain_cap + 1e-9) # Inverse of remaining cap

    return priorities
```
