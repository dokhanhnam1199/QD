```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility check: bins that can't fit the item get -inf priority
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf
    
    # Calculate remaining capacity after adding the item.
    remaining_capacity = bins_remain_cap - item
    
    # Reward bins with smaller remaining capacity (First Fit Decreasing logic). Avoid negative values by adding a constant.
    priorities[~infeasible_bins] = 1 / (remaining_capacity[~infeasible_bins] + 1e-9) # add a small constant to avoid division by zero
    
    # Further boost priority for almost full bins to improve bin utilization.
    almost_full_bins = (bins_remain_cap >= item) & (remaining_capacity < 0.1 * np.max(bins_remain_cap))
    priorities[almost_full_bins] += 10 # Increased from 5. Testing higher impact.

    # Small penalty for bins which after packing this item leave high amount of free space, avoiding putting too many small objects inside a single bin, which causes less opportunities for future larger items.
    high_rem_space = (bins_remain_cap >= item) & (remaining_capacity > 0.5 * np.max(bins_remain_cap))
    priorities[high_rem_space] -= 0.5 # Reduce from 1. Testing lower penalty.

    return priorities
```
