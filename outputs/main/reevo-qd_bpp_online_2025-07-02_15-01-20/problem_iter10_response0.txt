```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Perfect Fit - Highest priority
    perfect_fit = np.isclose(item, bins_remain_cap)
    priorities[perfect_fit] = np.inf

    # Rule 2: Near Fit - High priority, minimize waste
    near_fit = (item < bins_remain_cap) & (bins_remain_cap <= item * 1.2)  # Up to 20% larger
    if np.any(near_fit):
        waste = bins_remain_cap[near_fit] - item
        priorities[near_fit] = 1000 / (waste + 0.0001)

    # Rule 3: Reasonable Fit - Moderate priority, balance utilization
    reasonable_fit = (item < bins_remain_cap) & ~near_fit & ~perfect_fit
    if np.any(reasonable_fit):
        utilization_ratio = item / bins_remain_cap[reasonable_fit]
        priorities[reasonable_fit] = 50 * utilization_ratio

    # Rule 4: Infeasible - Zero priority
    priorities[item > bins_remain_cap] = -np.inf

    return priorities
```
