```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: If the item fits perfectly, highest priority
    perfect_fit = np.isclose(item, bins_remain_cap)
    priorities[perfect_fit] = np.inf

    # Rule 2: Higher priority if the item almost fits, minimizing waste
    almost_fit = (item < bins_remain_cap) & (bins_remain_cap <= item * 1.1)  # Adjusted threshold: within 10%
    if np.any(almost_fit):
        waste = bins_remain_cap[almost_fit] - item
        priorities[almost_fit] = 100 / (waste + 0.0001)  # Inverse of waste, smaller is better

    # Rule 3: Moderate priority for bins that fit, but penalize large remaining capacity
    reasonable_fit = (item < bins_remain_cap) & ~perfect_fit & ~almost_fit
    if np.any(reasonable_fit):
        remaining_ratio = (bins_remain_cap[reasonable_fit] - item) / bins_remain_cap[reasonable_fit]
        max_cap = np.max(bins_remain_cap)
        capacity_penalty = bins_remain_cap[reasonable_fit] / max_cap  # Normalize to max capacity
        priorities[reasonable_fit] = 50 * (1 - remaining_ratio) - 20 * capacity_penalty # Balanced remaining ratio and cap penalty

    # Rule 4: Zero priority for items that don't fit.
    priorities[item > bins_remain_cap] = -np.inf

    return priorities
```
