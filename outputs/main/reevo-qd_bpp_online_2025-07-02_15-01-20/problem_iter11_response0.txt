```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: If the item fits perfectly, highest priority
    perfect_fit = np.isclose(item, bins_remain_cap)
    priorities[perfect_fit] = np.inf

    # Rule 2: Near-perfect fit with wider margin and higher score.
    almost_fit1 = (item < bins_remain_cap) & (bins_remain_cap <= item * 1.1)  # within 10%
    if np.any(almost_fit1):
        priorities[almost_fit1] = 500 / (bins_remain_cap[almost_fit1] - item + 0.0001)

    # Rule 3: Tighter "almost fit" range for high priority
    almost_fit2 = (item < bins_remain_cap) & (bins_remain_cap <= item * 1.02)  # within 2%
    if np.any(almost_fit2):
        priorities[almost_fit2] = 1000 / (bins_remain_cap[almost_fit2] - item + 0.0001)

    # Rule 4: Give some priority for bins that fit, scaled to remaining capacity and penalize waste gently.
    fits = (item <= bins_remain_cap) & ~perfect_fit & ~almost_fit1 & ~almost_fit2
    if np.any(fits):
        priorities[fits] = (bins_remain_cap[fits] - item) / bins_remain_cap[fits] - 0.1 * (bins_remain_cap[fits] / np.max(bins_remain_cap))  # Less severe penalty

    # Rule 5: Explicitly handle infeasibility with small positive priority for exploration.
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -1e9  # Large negative to avoid unless necessary.
    
    return priorities
```
