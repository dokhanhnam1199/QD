```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Heuristic 1: First-Fit Decreasing (FFD) Inspired
    # Prioritize bins that can fit the item with minimal wasted space.
    fit_mask = bins_remain_cap >= item
    waste = bins_remain_cap - item
    priorities[fit_mask] = 1 / (waste[fit_mask] + 0.0001) # Avoid division by zero
    
    # Heuristic 2: Encourage Even Distribution
    # Add a bonus to bins with higher remaining capacity (but only if they fit).
    priorities[fit_mask] += bins_remain_cap[fit_mask] / np.sum(bins_remain_cap[fit_mask] + 0.0001)

    # Heuristic 3: Penalize bins that are almost full
    almost_full_mask = (bins_remain_cap > 0) & (bins_remain_cap < item)
    priorities[almost_full_mask] = -1000  # Extremely low priority
    
    #Heuristic 4: Avoid small wasted space
    small_waste_mask = fit_mask & (waste < 0.1)
    priorities[small_waste_mask] -= 0.5 #slightly reduced priority

    return priorities
```
