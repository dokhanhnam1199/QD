```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Infeasible bins get the lowest priority
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf
    
    # Rule 2: Perfect fit yields maximum priority
    perfect_fit = np.isclose(item, bins_remain_cap)
    priorities[perfect_fit] = np.inf
    
    # Rule 3: Prioritize "near fits" aggressively.  Only a narrow window.
    almost_fit = (item <= bins_remain_cap) & (bins_remain_cap <= item * 1.05) & ~perfect_fit # 5% tolerance
    if np.any(almost_fit):
        waste = bins_remain_cap[almost_fit] - item
        priorities[almost_fit] = 1000 / (waste + 0.0001)  # High reward, inversely proportional to waste

    # Rule 4: Bins that fit, but not "almost", receive penalties scaled by remaining capacity.
    fits = (item <= bins_remain_cap) & ~almost_fit
    if np.any(fits):
      capacity_ratio = item / bins_remain_cap[fits]
      priorities[fits] = 10 * capacity_ratio - (bins_remain_cap[fits] / np.max(bins_remain_cap))**2 # Reward filling bins and penalize bins with larger free space. Penalize squared to further discourage larger free spaces.
      

    return priorities
```
