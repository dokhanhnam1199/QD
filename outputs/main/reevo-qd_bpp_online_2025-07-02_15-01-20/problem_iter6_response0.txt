```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Infeasible bins get the lowest priority
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    # Rule 2: Perfect fit is the best
    perfect_fit = np.isclose(item, bins_remain_cap)
    priorities[perfect_fit] = np.inf

    # Rule 3: Aggressively prioritize near-fits (0% to 15% waste)
    near_fit = (item <= bins_remain_cap) & (bins_remain_cap <= item * 1.15) & ~perfect_fit
    if np.any(near_fit):
        waste = bins_remain_cap[near_fit] - item
        priorities[near_fit] = 500 / (waste + 0.001)  # Extremely high reward for near-fits, avoid div by zero

    # Rule 4: Prioritize bins with smaller remaining capacity
    feasible = (item <= bins_remain_cap) & ~perfect_fit & ~near_fit
    if np.any(feasible):
        remaining_capacity_ratio = item / bins_remain_cap[feasible]
        priorities[feasible] = 10 * remaining_capacity_ratio # Higher the ratio, the better
        

    return priorities
```
