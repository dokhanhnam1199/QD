```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Heuristic 1: Prefer bins where item fits and leaves the least space
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            priorities[i] = 1 / (cap - item + 1e-6)  # Smaller remaining space, higher priority
            
    # Heuristic 2: Big items should go to big enough bins to avoid fragmentation
    large_item_threshold = 0.7  # Tunable parameter: define large item
    
    if item > large_item_threshold:
        for i, cap in enumerate(bins_remain_cap):
            if cap >= item and cap < item + 0.3: #prefer bins slightly bigger than item
                 priorities[i] +=2 #boost these bins for large items
    
    
    # Heuristic 3: Prioritize bins that are not too empty and can accomodate the item. Avoid very empty bins.
    empty_bin_threshold = 0.2 # Tuneable parameter: defines an empty bin
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item and cap < 1 - empty_bin_threshold : # Assuming bin capacity is 1
            priorities[i] += 1

    
    return priorities
```
