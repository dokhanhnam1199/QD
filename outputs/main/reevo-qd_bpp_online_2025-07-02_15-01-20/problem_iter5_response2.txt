```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: If the item fits perfectly, assign a very high priority
    perfect_fit = np.isclose(item, bins_remain_cap)
    priorities[perfect_fit] = 1000

    # Rule 2: Aggressively prioritize near fits (e.g., within 5%)
    almost_fit = (item < bins_remain_cap) & (bins_remain_cap <= item * 1.05)
    if np.any(almost_fit):
        priorities[almost_fit] = 500 - 1000 * (bins_remain_cap[almost_fit] - item) / item  # Higher score for tighter fits

    # Rule 3: Penalize large remaining capacity severely
    fits = (item <= bins_remain_cap) & ~perfect_fit & ~almost_fit
    if np.any(fits):
         capacity_ratio = item / bins_remain_cap[fits]
         priorities[fits] = 100 * capacity_ratio - 50 * (1 - capacity_ratio)**2 # reward for high capacity ratios, penalty if space remains after packing.

    # Rule 4: Explicit infeasibility handling: bins that can't fit get the lowest priority
    priorities[item > bins_remain_cap] = -1000

    return priorities
```
