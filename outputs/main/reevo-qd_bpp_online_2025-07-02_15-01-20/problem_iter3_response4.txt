```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Infeasible placements get -inf
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    # Rule 2: Perfect fit is ideal, highest priority
    perfect_fit = np.isclose(item, bins_remain_cap)
    priorities[perfect_fit] = np.inf

    # Rule 3: Near-fit is good, prioritize bins with small waste
    near_fit = (item <= bins_remain_cap) & (bins_remain_cap <= item * 1.5) & ~perfect_fit  # within 50% of item size
    waste = bins_remain_cap[near_fit] - item
    priorities[near_fit] = 100 / (waste + 0.0001)  # Inverse of waste, avoid division by zero


    # Rule 4: Bins that fit, but aren't near or perfect, gets a penalty based on waste and remaining capacity ratio.
    fits = (item <= bins_remain_cap) & ~perfect_fit & ~near_fit
    remaining_ratio = bins_remain_cap[fits] / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0 # avoid division by zero
    waste = bins_remain_cap[fits] - item
    priorities[fits] = 1 / (waste + 0.0001) - 0.5 * remaining_ratio  # Inverse waste, penalized by remaining ratio.

    return priorities
```
