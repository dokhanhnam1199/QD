```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: If the item fits perfectly, highest priority
    perfect_fit = np.isclose(item, bins_remain_cap)
    priorities[perfect_fit] = np.inf

    # Rule 2: Higher priority if the item almost fits, minimizing waste (tighter range)
    almost_fit = (item < bins_remain_cap) & (bins_remain_cap <= item * 1.1) # within 10%
    waste = bins_remain_cap[almost_fit] - item
    priorities[almost_fit] = 100 / (waste + 0.0001)  # Inverse of remaining space. smaller the better. Added small constant for stability.

    # Rule 3: Give some priority for bins that fit, scaled to remaining capacity and a penalty for too much free space.
    fits = (item <= bins_remain_cap) & ~perfect_fit & ~almost_fit
    
    # Prioritize bins with smaller remaining capacity after placing the item, but penalize largely empty bins.
    remaining_after_fit = bins_remain_cap[fits] - item
    max_cap = np.max(bins_remain_cap) if bins_remain_cap.size > 0 else 1.0 # Avoid division by zero if bins_remain_cap is empty
    priorities[fits] = (1 - (remaining_after_fit / max_cap)) - 0.2 * (bins_remain_cap[fits] / max_cap)


    # Rule 4: zero priority for items that doesn't fit.
    priorities[item > bins_remain_cap] = -np.inf
    
    return priorities
```
