```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First Fit Decreasing inspired priority
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        priorities[valid_bins] = bins_remain_cap[valid_bins] - item # Prioritize bins where the item fits with less remaining space

    # Avoid creating too many nearly-empty bins
    nearly_empty_bins = bins_remain_cap > 0.9
    priorities[nearly_empty_bins] -= 0.1  # Slight penalty to very empty bins

    # Large waste penalty, prioritize bins close to being full
    waste = bins_remain_cap - item
    large_waste = (waste > 0) & (waste < 0.1) # Waste greater than 0 and less than 0.1
    priorities[large_waste] += 1 # Significantly incentivize this

    # Cannot fit bins are given negative priority
    priorities[~valid_bins] = -np.inf
    
    # Add a tiny random number to break ties
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-6

    return priorities
```
