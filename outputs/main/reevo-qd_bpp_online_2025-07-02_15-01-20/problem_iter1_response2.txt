```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First, prioritize bins that can actually fit the item
    fit_mask = bins_remain_cap >= item
    
    if not np.any(fit_mask):
        #If no bin can fit the item, try to minimize wasted space in those with minimal remaining capacity.
        priorities = -np.abs(bins_remain_cap - item)
        return priorities
    
    # Prioritize based on remaining capacity after packing
    remaining_after_pack = bins_remain_cap[fit_mask] - item
    
    # Higher priority to bins with smaller remaining capacity. In First Fit Decreasing, 
    # bins close to full are tried first, and this simulates it
    priorities[fit_mask] = 1.0 / (remaining_after_pack + 1e-9) #Small value to prevent divide by zero

    #Boost the priority if item fills bin by more than 75%
    fill_ratio = item / bins_remain_cap[fit_mask]
    boost = np.where(fill_ratio >= 0.75, fill_ratio, 1.0)

    priorities[fit_mask] *= boost

    return priorities
```
