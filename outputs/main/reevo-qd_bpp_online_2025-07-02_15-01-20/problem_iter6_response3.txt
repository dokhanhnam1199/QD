```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: If the item fits perfectly, highest priority
    perfect_fit = np.isclose(item, bins_remain_cap)
    priorities[perfect_fit] = np.inf

    # Rule 2: Near Fit - Significant priority for bins that fit with minimal waste
    near_fit = (item < bins_remain_cap) & (bins_remain_cap <= item * 1.3)  # Adjusted range (30% more)
    waste = bins_remain_cap[near_fit] - item
    priorities[near_fit] = 1000 / (waste + 0.001)  # Inverted waste, add small value to avoid division by zero, increased scale

    # Rule 3: Reasonable Fit - Moderate priority with penalty based on remaining capacity ratio
    reasonable_fit = (item < bins_remain_cap) & ~near_fit & ~perfect_fit
    remaining_ratio = (bins_remain_cap[reasonable_fit] - item) / bins_remain_cap[reasonable_fit]
    priorities[reasonable_fit] = 50 * (1 - remaining_ratio) #Prioritize lower remaining ratio

    # Rule 4: Infeasible - Zero priority for bins that cannot accommodate the item
    priorities[item > bins_remain_cap] = -np.inf
    
    return priorities
```
