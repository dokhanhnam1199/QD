```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Base priority based on remaining capacity. Prefer bins that are filled closer to full
            # if the item fits. Use a ratio related to how much of the bin will be filled after adding the item.
            priorities[i] = (item / cap)

            # Boost priority if the item almost fills the bin
            if cap - item < 0.1: #Arbitrary small threshold for near-fit.
                priorities[i] += 0.5 #Higher priority for near-fit
        else:
            priorities[i] = -1.0  # Negative priority if item doesn't fit

    return priorities
```
