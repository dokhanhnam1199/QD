```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Infeasible bins get negative infinity priority
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf
    
    # Rule 2: Perfect fit gets positive infinity priority
    perfect_fit = np.isclose(item, bins_remain_cap)
    priorities[perfect_fit] = np.inf

    # Rule 3: Aggressively reward near fits (smaller range)
    near_fit = (item <= bins_remain_cap) & (bins_remain_cap <= item * 1.02) & ~perfect_fit # Reduced range to 2%
    if np.any(near_fit):
        priorities[near_fit] = 500 / (bins_remain_cap[near_fit] - item + 0.0001) # Higher reward than before, Inverse of remaining space

    # Rule 4: Prioritize bins that fit, penalize excessive waste
    fits = (item <= bins_remain_cap) & ~perfect_fit & ~near_fit
    if np.any(fits):
        waste_ratio = (bins_remain_cap[fits] - item) / bins_remain_cap[fits]
        capacity_ratio = bins_remain_cap[fits] / np.max(bins_remain_cap)
        priorities[fits] = 10 * (1 - waste_ratio) - 5 * capacity_ratio # Adjusted coefficients for stronger waste penalty

    return priorities
```
