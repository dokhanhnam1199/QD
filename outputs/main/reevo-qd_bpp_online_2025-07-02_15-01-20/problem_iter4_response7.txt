```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: If the item fits perfectly, highest priority
    perfect_fit = np.isclose(item, bins_remain_cap)
    priorities[perfect_fit] = np.inf

    # Rule 2: Higher priority if the item almost fits, minimizing waste
    almost_fit = (item < bins_remain_cap) & (bins_remain_cap <= item * 1.3)  # within 30%
    if np.any(almost_fit):
        priorities[almost_fit] = 100 / (bins_remain_cap[almost_fit] - item + 0.0001) # Inverse of remaining space. smaller the better. Add a small number to avoid division by zero

    # Rule 3: Give some priority for bins that fit, scaled to remaining capacity and a penalty for too much free space.
    fits = (item <= bins_remain_cap) & ~perfect_fit & ~almost_fit
    if np.any(fits):
        priorities[fits] = (bins_remain_cap[fits] - item) / bins_remain_cap[fits] - 0.8 * (bins_remain_cap[fits] / np.max(bins_remain_cap)) # penalize bins with high remaining capacity more. Increased penalty to 0.8.

    # Rule 4: zero priority for items that doesn't fit.
    priorities[item > bins_remain_cap] = -np.inf
    
    return priorities
```
