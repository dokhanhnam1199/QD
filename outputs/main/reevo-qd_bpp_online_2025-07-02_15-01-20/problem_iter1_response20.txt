```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing inspired heuristic: prioritize bins that can fit the item reasonably well
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = bins_remain_cap[fit_mask] - item  # Remaining capacity after adding, smaller is better (higher priority)

    # If no bin can fit the item, try to minimize the waste if adding to a larger bin.
    no_fit_mask = ~fit_mask
    if np.any(no_fit_mask):
      priorities[no_fit_mask] = - (bins_remain_cap[no_fit_mask] - item)**2

    return priorities
```
