```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: Assign high priority to bins where item fits with minimal waste
    fit_mask = bins_remain_cap >= item
    waste = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] = 1 / (1e-6 + waste) # avoid division by zero
    
    # Rule 2: Give very low priority to bins that are too small
    priorities[bins_remain_cap < item] = -np.inf

    # Rule 3: Give slight boost to bins that are close to full already
    priorities += bins_remain_cap / np.max(bins_remain_cap) * 0.1 # scale bin remain cap
    
    return priorities
```
