```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: Near-perfect fit (wider margin): highest priority
    near_perfect_fit = (item < bins_remain_cap) & (bins_remain_cap < item * 1.1)  # Within 10%
    priorities[near_perfect_fit] = 1000 / (bins_remain_cap[near_perfect_fit] - item + 0.0001) # Significantly higher priority

    # Rule 2: Almost fit (tighter range): high priority, scaled
    almost_fit = (item < bins_remain_cap) & (bins_remain_cap < item * 1.02)  # Within 2%
    priorities[almost_fit] = 500 / (bins_remain_cap[almost_fit] - item + 0.0001) 

    # Rule 3: Fits but not a close fit: moderate priority, penalize waste gently
    fits = (item <= bins_remain_cap) & ~near_perfect_fit & ~almost_fit
    if np.any(fits):
        priorities[fits] = 10 * (bins_remain_cap[fits] - item) / bins_remain_cap[fits] - 0.1 * (bins_remain_cap[fits] / np.max(bins_remain_cap))

    # Rule 4: Infeasible: Very low priority, but not -inf to allow some exploration
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -10  # Negative, but not infinitely so.

    return priorities
```
