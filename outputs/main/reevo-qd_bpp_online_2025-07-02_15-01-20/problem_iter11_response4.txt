```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: If the item fits perfectly, highest priority, wider margin for "perfect"
    perfect_fit = (item <= bins_remain_cap) & (bins_remain_cap <= item * 1.01)
    priorities[perfect_fit] = np.inf

    # Rule 2: Higher priority if the item almost fits, minimizing waste, tighter range
    almost_fit = (item < bins_remain_cap) & (bins_remain_cap < item * 1.03)  # within 3%
    if np.any(almost_fit):
        priorities[almost_fit] = 500 / (bins_remain_cap[almost_fit] - item + 0.0001)  # Inverse of remaining space, amplified

    # Rule 3: Moderate priority for bins that fit, scaled to remaining capacity and penalize waste less aggressively
    fits = (item <= bins_remain_cap) & ~perfect_fit & ~almost_fit
    if np.any(fits):
        priorities[fits] = (bins_remain_cap[fits] - item) / bins_remain_cap[fits] - 0.2 * (bins_remain_cap[fits] / np.max(bins_remain_cap))  # Less severe penalty

    # Rule 4: Negative priority for items that don't fit, with some small chance for exploration
    does_not_fit = item > bins_remain_cap
    priorities[does_not_fit] = -1  # Strongly discourage infeasible placements
    
    # Small chance to still pick a bin that it doesn't fit as a form of exploration
    # if np.random.rand() < 0.01 and np.any(does_not_fit): #Very small chance
    #     infeasible_bins = np.where(does_not_fit)[0]
    #     chosen_bin = np.random.choice(infeasible_bins)
    #     priorities[chosen_bin] = -0.5
    
    return priorities
```
