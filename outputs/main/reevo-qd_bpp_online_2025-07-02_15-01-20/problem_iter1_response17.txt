```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First-Fit-Decreasing-like heuristic: prefer bins that can accommodate the item with minimal waste.
    # Give high priority to bins where the remaining capacity after placing the item is small but non-negative.
    remaining_after_fit = bins_remain_cap - item
    
    # Apply penalties to bins that cannot accommodate the item.
    infeasible_mask = remaining_after_fit < 0
    priorities[infeasible_mask] = -np.inf 
    
    # Give a priority bonus for almost full after the fit, penalize larger remainders after the fit.
    feasible_mask = remaining_after_fit >= 0
    priorities[feasible_mask] = -remaining_after_fit[feasible_mask] # minimize waste after fit
    
    # Bonus if bin capacity is large but the waste will be small (encourages packing small items into large bins if waste is low).
    priorities[feasible_mask] += 0.1 * bins_remain_cap[feasible_mask]

    # Adding noise to avoid ties (can slightly improve results and break symmetrical cases).
    priorities += np.random.normal(0, 0.001, size=bins_remain_cap.shape) 
    
    return priorities
```
