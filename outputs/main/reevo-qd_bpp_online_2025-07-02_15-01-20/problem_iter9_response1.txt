```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = np.max(bins_remain_cap)
    
    # Rule 1: If the item fits perfectly, highest priority
    perfect_fit = np.isclose(item, bins_remain_cap)
    priorities[perfect_fit] = np.inf

    # Rule 2: Reward tight fits (<10% waste) aggressively
    tight_fit = (item <= bins_remain_cap) & (bins_remain_cap <= item * 1.1)
    if np.any(tight_fit):
        waste = bins_remain_cap[tight_fit] - item
        priorities[tight_fit] = 100 - (waste / item * 100) # Higher priority for less waste relative to item size

    # Rule 3: Penalize high remaining capacity non-linearly
    fits = (item <= bins_remain_cap) & ~perfect_fit & ~tight_fit
    if np.any(fits):
        remaining_ratio = bins_remain_cap[fits] / bin_size
        priorities[fits] = - (remaining_ratio**2) * 10  # Square the ratio for stronger penalty

    # Rule 4: Large penalty for infeasibility
    priorities[item > bins_remain_cap] = -np.inf
    
    # Rule 5: Encourage filling bins (explicit fitting rule)
    if np.any(fits):
         priorities[fits] += 1 # Add a small bonus for fitting at all
        

    return priorities
```
