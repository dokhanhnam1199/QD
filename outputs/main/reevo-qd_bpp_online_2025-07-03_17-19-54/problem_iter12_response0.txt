```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_capacity = np.max(bins_remain_cap)

    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf  # Very low priority if it doesn't fit

    # 2. Best Fit Heuristic: Higher priority for bins with smallest remaining capacity after packing
    remaining_space_after_packing = bins_remain_cap - item
    priorities[feasible_bins] = -np.abs(remaining_space_after_packing[feasible_bins])

    # 3. Fill percentage heuristic: Promote bins that would be filled close to 100%
    fill_percentage = (max_capacity - remaining_space_after_packing) / max_capacity
    priorities[feasible_bins] += fill_percentage[feasible_bins]

    # 4. Fragmentation Control (less relevant in online, but still helpful): avoid leaving tiny gaps
    tiny_gap_threshold = 0.1 * max_capacity
    tiny_gap_bins = (remaining_space_after_packing > 0) & (remaining_space_after_packing <= tiny_gap_threshold)
    priorities[tiny_gap_bins] -= 0.2  # Discourage creating tiny gaps

    # 5. Bonus for bins that are empty
    empty_bins = bins_remain_cap == max_capacity
    priorities[empty_bins] += 0.1

    # 6. Item size proximity: Bins with remaining capacity close to the item size get a bonus
    proximity = np.abs(bins_remain_cap - item)
    proximity_score = np.exp(-proximity / (0.2 * max_capacity))  # Gaussian-like proximity score
    priorities[feasible_bins] += 0.05 * proximity_score[feasible_bins] #weigh the proximity.

    # 7. Adjusted Best Fit: Prioritize bins where the item fits well without excessive space
    fit_ratio = item / bins_remain_cap
    well_fitted = feasible_bins & (fit_ratio > 0.7)  # e.g., item occupies at least 70% of the bin
    priorities[well_fitted] += 0.15  # Give a bonus to well-fitted items

    #8. Penalize almost full bins that cannot accomodate item
    almost_full_threshold = max_capacity - item
    almost_full_bins = (bins_remain_cap < item) & (bins_remain_cap > almost_full_threshold -0.1*max_capacity)
    priorities[almost_full_bins] -=0.3 #Penalize them more than a tiny gap bin.

    return priorities
```
