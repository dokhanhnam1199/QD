```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_capacity = np.max(bins_remain_cap) #max capacity of any bin

    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf

    if np.any(feasible_bins): # only run if there are feasible bins

        # 2. Best Fit Heuristic: Higher priority for bins with smallest remaining capacity after packing
        remaining_space_after_packing = bins_remain_cap - item
        priorities[feasible_bins] += -np.abs(remaining_space_after_packing[feasible_bins])

        # 3. Fill percentage heuristic: Promote bins that would be filled close to 100%
        fill_percentage = (max_capacity - remaining_space_after_packing) / max_capacity # fill level normalized
        priorities[feasible_bins] += fill_percentage[feasible_bins]

        # 4. Empty bin bonus
        empty_bins = bins_remain_cap == max_capacity
        priorities[empty_bins] += 0.1

        # 5. Fragmentation penalty (tuned for online context) - penalize bins that will result in small remainders
        small_remainder_threshold = 0.1 * max_capacity
        small_remainder_bins = (remaining_space_after_packing > 0) & (remaining_space_after_packing <= small_remainder_threshold) #remainder within threshold but not negative
        priorities[small_remainder_bins] -= 0.05

        # 6. Item size proximity tie-breaker (scaled): Bins with remaining capacity close to item size get a small bonus.
        proximity = 1 - np.abs(remaining_space_after_packing[feasible_bins] - item) / max_capacity
        priorities[feasible_bins] += 0.01 * proximity
    return priorities
```
