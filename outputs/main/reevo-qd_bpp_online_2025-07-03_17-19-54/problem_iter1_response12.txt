```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate wasted space if item is placed in this bin
            wasted_space = cap - item

            # Prioritize bins where the item fits and minimize wasted space. Use inverse of wasted space.
            priorities[i] = 1 / (wasted_space + 0.00001)  # Add a small constant to avoid division by zero

            # Add a bonus for bins that are close to being full after adding the item
            fullness_ratio = item / cap
            priorities[i] += (1 - np.abs(fullness_ratio - 1))  # Closer to 1 after placing is good, avoid overfilling.

        else:
            # Very low priority if the item doesn't fit
            priorities[i] = -1000  # Very negative to ensure it's not picked
    return priorities
```
