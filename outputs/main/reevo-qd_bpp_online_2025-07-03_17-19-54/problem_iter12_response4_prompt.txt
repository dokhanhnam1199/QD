{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    max_capacity = np.max(bins_remain_cap)\n\n    # 1. Feasibility: Only consider bins that can fit the item\n    feasible_bins = bins_remain_cap >= item\n    priorities[~feasible_bins] = -np.inf  # Very low priority if it doesn't fit\n\n    # 2. Best Fit Heuristic: Higher priority for bins with smallest remaining capacity after packing\n    remaining_space_after_packing = bins_remain_cap - item\n    priorities[feasible_bins] += -np.abs(remaining_space_after_packing[feasible_bins])\n\n    # 3. Fill percentage heuristic: Promote bins that would be filled close to 100%\n    fill_percentage = (max_capacity - remaining_space_after_packing) / max_capacity\n    priorities[feasible_bins] += fill_percentage[feasible_bins]\n\n    # 4. Item Size Proximity: Prefer bins where the remaining capacity is close to item size\n    proximity_score = 1 - np.abs(remaining_space_after_packing - item) / max_capacity\n    priorities[feasible_bins] += proximity_score[feasible_bins] * 0.5 # scale it down, so other heuristics have priority\n\n    # 5. Bonus for bins that are empty\n    empty_bins = bins_remain_cap == max_capacity\n    priorities[empty_bins] += 0.2\n\n    # 6. Moderate the effect of fill percentage to avoid premature bin closing\n    full_threshold = 0.98 * max_capacity\n    overfilled_bins = (bins_remain_cap - item) < (0.02 * max_capacity)\n    priorities[overfilled_bins] -= 0.3 #slight penalty to avoid creating excessive almost full bins\n\n    return priorities\n\n[Reflection]\nConsider feasibility, best-fit, fill percentage, item-size proximity, and empty-bin bonuses. Avoid premature bin closing.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}