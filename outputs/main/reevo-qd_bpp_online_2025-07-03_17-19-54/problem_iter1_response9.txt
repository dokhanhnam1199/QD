```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit Decreasing-like heuristic: Favor bins with enough space, but not too much
    # to avoid creating many nearly-empty bins.
    
    # Give a high priority to bins that can fit the item.
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1.0
    
    # Further prioritize bins that can fit the item with minimal waste.
    waste = bins_remain_cap - item
    priorities[can_fit] += np.exp(-waste[can_fit])  # Exponentially decaying priority based on waste

    # Slightly penalize bins that are too full (to encourage fitting into emptier bins if possible and prevents very small waste)
    too_full = (bins_remain_cap - item) < 0.1  # Penalize if very little space left after placing the item. hyperparameter?
    priorities[too_full & can_fit] -= 0.5  # only reduces priorities if can_fit.

    # Very low priority for bins that cannot fit the item
    priorities[~can_fit] = -1e9  # set the priorities to a very negative value

    return priorities
```
