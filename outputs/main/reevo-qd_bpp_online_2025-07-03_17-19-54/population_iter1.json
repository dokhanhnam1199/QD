[
  {
    "stdout_filepath": "problem_iter0_stdout0.txt",
    "code_path": "problem_iter0_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities",
    "response_id": 0,
    "obj": 149.30195452732352,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 11.60964047443681,
    "mi": 94.04446327225541,
    "token_count": 47.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response3.txt_stdout.txt",
    "code_path": "problem_iter1_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Only consider bins that can fit the item\n    feasible_bins = bins_remain_cap >= item\n    priorities[~feasible_bins] = -np.inf  # Very low priority if it doesn't fit\n\n    # 2. Best Fit Heuristic: Higher priority for bins with smallest remaining capacity after packing\n    remaining_space_after_packing = bins_remain_cap - item\n    priorities[feasible_bins] = -np.abs(remaining_space_after_packing[feasible_bins]) #negative of absolute value promotes smaller waste\n\n    # 3. Fill percentage heuristic: Promote bins that would be filled close to 100%\n    fill_percentage = (bins_remain_cap - remaining_space_after_packing) / np.max(bins_remain_cap)\n    priorities[feasible_bins] += fill_percentage[feasible_bins] #addition to prior score promotes bins close to full.\n\n    # 4. Penalize near-full bins to prevent fragmentation, less relevant for online case as you pack immediately\n    near_full_threshold = 0.95 * np.max(bins_remain_cap)\n    near_full_bins = bins_remain_cap > near_full_threshold\n    priorities[near_full_bins] -= 0.1 # slight penalty\n\n    # 5. Bonus for bins that are empty\n    empty_bins = bins_remain_cap == np.max(bins_remain_cap) #assuming bins start at maximum capacity\n    priorities[empty_bins] += 0.05\n\n    return priorities",
    "response_id": 3,
    "obj": 4.048663741523748,
    "SLOC": 10.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 118.94197037642039,
    "mi": 83.16123692408948,
    "token_count": 131.0,
    "exec_success": true
  }
]