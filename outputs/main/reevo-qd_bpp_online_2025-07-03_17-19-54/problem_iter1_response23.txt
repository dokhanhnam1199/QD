```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item
    
    # 2. Remaining Capacity as Priority (First-Fit Decreasing-ish)
    priorities[feasible_bins] = bins_remain_cap[feasible_bins]
    
    # 3. Reward bins that will have low remaining capacity.
    remaining_after_fit = bins_remain_cap[feasible_bins] - item
    almost_full_bins = (remaining_after_fit > 0) & (remaining_after_fit <= 0.1 * np.max(bins_remain_cap))
    priorities[feasible_bins][almost_full_bins] *= 2  # Boost priority

    # 4. Penalize bins that will be left with too much space.
    wasteful_bins = (remaining_after_fit > 0.5 * np.max(bins_remain_cap)) & feasible_bins
    priorities[wasteful_bins] /= 1.5 # Reduce priority

    # 5. Handle infeasible bins: assign a very low priority so they're never chosen.
    priorities[~feasible_bins] = -1e9  # Large negative number as penalty

    return priorities
```
