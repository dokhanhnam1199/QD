```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            fill_ratio = item / cap
            waste = cap - item

            # Give higher priority to bins where the item fits well without much waste
            priorities[i] = 1 / (waste + 1e-9) # Avoid division by zero
            priorities[i] += 1 - fill_ratio # Encourages bins where item fills well.

            # Bonus for near-perfect fit
            if waste < 0.1:
                priorities[i] += 5

            # Moderate priority decay based on overall filled capacity (less desirable if bin is very empty still)
            priorities[i] *= (cap / np.max(bins_remain_cap))
        else:
            priorities[i] = -1e9  # Very low priority for bins that cannot accommodate the item
    return priorities
```
