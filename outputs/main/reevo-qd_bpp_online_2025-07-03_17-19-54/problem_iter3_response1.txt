```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf  # Very low priority if it doesn't fit

    # 2. Best Fit Heuristic: Higher priority for bins with smallest remaining capacity after packing
    remaining_space_after_packing = bins_remain_cap - item
    priorities[feasible_bins] = -np.abs(remaining_space_after_packing[feasible_bins])

    # 3. Fill percentage heuristic: Promote bins that would be filled close to 100%
    fill_percentage = (bins_remain_cap - remaining_space_after_packing) / np.max(bins_remain_cap)
    priorities[feasible_bins] += fill_percentage[feasible_bins]

    # 4. Fragmentation penalty: Penalize bins that will become too empty after packing, only if they were not nearly empty before.
    fragmentation_threshold = 0.2 * np.max(bins_remain_cap)
    became_fragmented = remaining_space_after_packing > fragmentation_threshold
    not_nearly_empty_before = bins_remain_cap < 0.95 * np.max(bins_remain_cap)

    priorities[feasible_bins & became_fragmented & not_nearly_empty_before] -= 0.03

    # 5. Bonus for bins that are empty
    empty_bins = bins_remain_cap == np.max(bins_remain_cap)
    priorities[empty_bins] += 0.05

    # 6. Larger bonus to bins that can fit the item *perfectly*
    perfect_fit = remaining_space_after_packing == 0
    priorities[perfect_fit] += 0.15

    return priorities
```
