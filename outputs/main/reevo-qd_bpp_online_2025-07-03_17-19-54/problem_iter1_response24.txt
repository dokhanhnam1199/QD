```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility check: a bin must have sufficient capacity.
    feasible_bins = bins_remain_cap >= item
    
    # Prioritize bins where the item fits best (smallest remaining space).
    remaining_space = bins_remain_cap - item
    
    # Assign high priority to bins that fit perfectly (or close to it).
    perfect_fit = np.isclose(remaining_space, 0)
    priorities[perfect_fit & feasible_bins] = 1000  # Very high priority for perfect fit
    
    # For bins that can accommodate the item, prioritize based on fill ratio
    fill_ratios = item / bins_remain_cap
    priorities[feasible_bins & ~perfect_fit] = 100 * (1 - np.abs(fill_ratios[feasible_bins & ~perfect_fit] - 0.8))  # Favor bins filled around 80%

    # Penalize bins with a large remaining space after packing the item.
    remaining_space_penalty = np.where(feasible_bins & ~perfect_fit, remaining_space[feasible_bins & ~perfect_fit] / np.max(bins_remain_cap), 0)
    priorities[feasible_bins & ~perfect_fit] -= 10 * remaining_space_penalty

    #Bins that don't have enough space
    priorities[~feasible_bins] = -np.inf

    return priorities
```
