```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First Fit Decreasing (FFD) inspired: Prefer bins with enough space.
    # Give very negative priority if the item doesn't fit.
    fits = bins_remain_cap >= item
    priorities[~fits] = -1e9  # Very low priority if it doesn't fit

    # Minimize wasted space: Give higher priority to bins where the item
    # fills most of the remaining capacity, but doesn't overflow.

    # Calculate wasted space after packing the item
    wasted_space = bins_remain_cap - item
    wasted_space[~fits] = np.inf  # Don't consider bins where it doesn't fit

    # Prefer bins that leave the least wasted space
    priorities[fits] = -wasted_space[fits]

    # Slightly prefer bins with more initial capacity available.  This helps
    # avoid filling small bins very early on if larger bins are available.
    priorities += bins_remain_cap * 0.001

    return priorities
```
