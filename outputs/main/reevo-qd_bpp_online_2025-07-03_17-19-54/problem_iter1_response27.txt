```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Large bins that can easily fit the item get a higher initial priority.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += bins_remain_cap[fit_mask] - item # remaining space if fit
    
    # Bins that can *barely* fit the item are penalized.  We want to avoid creating nearly-empty bins later.
    nearly_full_mask = (bins_remain_cap >= item) & (bins_remain_cap < item * 1.2)  # Adjust 1.2 threshold as needed
    priorities[nearly_full_mask] -= 100 # penalize
    
    # Consider bins where adding the item makes the bin at least half-full
    half_full_after_mask = (bins_remain_cap >= item) & ((bins_remain_cap - item) <= (0.5 * bins_remain_cap)) 
    priorities[half_full_after_mask] += 5 # encourage to make the bins fuller, avoid very empty bins at the end
        
    # Consider bins which after item is added become more closer to full bin
    bins_potential_cap = bins_remain_cap[bins_remain_cap >= item] - item
    distance_to_full = np.abs(bins_potential_cap)
    priorities[bins_remain_cap >= item] += (1 / (distance_to_full + 1e-6)) # High number indicates better options

    return priorities
```
