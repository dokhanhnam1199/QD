```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First Fit Decreasing Heuristic inspired approach
            space_waste = cap - item
            # Minimize waste. Larger remaining capacity is penalized
            priorities[i] = 1.0 / (1.0 + space_waste)
            # Prioritize bins with capacity closest to item size
            priorities[i] += 1.0 / (1.0 + np.abs(cap - 2*item))  # Bias for near full
            # Small bias to more full bins, less likely for future large items

        else:
            priorities[i] = -1e9  # Very low priority for bins that can't fit the item

    return priorities
```
