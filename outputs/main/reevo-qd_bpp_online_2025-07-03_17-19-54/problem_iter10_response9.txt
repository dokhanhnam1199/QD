```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)
    bin_capacity = max_cap  # Assuming all bins have same capacity initially

    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf  # Very low priority if it doesn't fit

    if np.any(feasible_bins):  # only perform calculations if there are feasible bins
        # 2. Best Fit Heuristic: Higher priority for bins with smallest remaining capacity after packing
        remaining_space_after_packing = bins_remain_cap - item
        priorities[feasible_bins] += -np.abs(remaining_space_after_packing[feasible_bins])  # negative of absolute value promotes smaller waste

        # 3. Fill percentage heuristic: Promote bins that would be filled close to 100%
        fill_percentage = (bin_capacity - remaining_space_after_packing) / bin_capacity
        priorities[feasible_bins] += fill_percentage[feasible_bins]  # addition to prior score promotes bins close to full.

        # 4. Penalize near-full bins to prevent fragmentation, less relevant for online case as you pack immediately, but helpful
        near_full_threshold = 0.95 * bin_capacity
        near_full_bins = bins_remain_cap >= near_full_threshold
        priorities[near_full_bins] -= 0.05  # slight penalty

        # 5. Bonus for bins that are empty, but less than others
        empty_bins = bins_remain_cap == bin_capacity
        priorities[empty_bins] += 0.025

        # 6. Small items into almost full bins
        small_item_threshold = 0.1 * bin_capacity
        almost_full_threshold = 0.9 * bin_capacity
        small_item = item <= small_item_threshold
        almost_full_bins = bins_remain_cap <= (bin_capacity - almost_full_threshold) and feasible_bins
        if small_item:
            priorities[almost_full_bins] += 0.1 # higher priority to fill up almost full bins with small items
    else:
        return priorities # no feasible bins, return -inf for all

    return priorities
```
