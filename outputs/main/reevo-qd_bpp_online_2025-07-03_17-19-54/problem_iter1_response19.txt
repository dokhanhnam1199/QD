```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item
    
    # High priority if the item fits and waste is minimized
    fit_mask = waste >= 0
    if np.any(fit_mask):
        priorities[fit_mask] = 1 / (waste[fit_mask] + 0.0001)  # Avoid division by zero; smaller waste = higher priority
        # Add a bonus for bins where the item fills the bin almost completely
        close_fit_mask = (waste[fit_mask] / item) < 0.1 #waste less than 10% of item size.
        priorities[fit_mask][close_fit_mask] *= 2  # Boost priority

    # Lower priority if item doesn't fit, but still consider it
    else:
        priorities = -np.abs(waste) #Prioritize bins that can ALMOST accommodate the item.

    return priorities
```
