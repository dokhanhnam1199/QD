```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Large Enough Bins get some initial score
    valid_bins = bins_remain_cap >= item
    priorities[valid_bins] += 1.0

    # Prioritize bins with less remaining capacity but can still fit. Closer to Full
    diff = bins_remain_cap - item
    priorities[valid_bins] += (1 - (diff[valid_bins] / bins_remain_cap[valid_bins]))

    # Bonus for almost perfect fit, reduces fragmentation. Experiment with scaling
    almost_full = (diff > 0) & (diff <= 0.1 * bins_remain_cap) # within 10% of bin size
    priorities[almost_full] += 2.0

    # Penalize bins too large, avoid creating very empty bins
    too_large = bins_remain_cap > 2 * item # Can be adjusted based on item distribution
    priorities[too_large] -= 0.5 #Slight penalization, can be tuned. Make it conditional upon the total remaining item volume.
    #Normalize such that the priorities range from 0 to 1 or scale similarly to make debugging or observing them easier
    #min_priority = np.min(priorities)
    #max_priority = np.max(priorities)

    #if max_priority > min_priority:  # Prevent division by zero
    #    priorities = (priorities - min_priority) / (max_priority - min_priority)

    return priorities
```
