```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item

    # 2. Remaining Capacity as a Factor: Prefer bins with less remaining capacity after adding the item, 
    #    but only for feasible bins. Also, avoid near-full bins.
    remaining_capacity_after_packing = bins_remain_cap - item
    remaining_capacity_after_packing[remaining_capacity_after_packing < 0] = np.inf  # mark infeasible.
    priorities[feasible_bins] = -remaining_capacity_after_packing[feasible_bins] # Higher priority if less remaining

    # 3. Avoid creating very small remaining spaces:
    small_space_threshold = 0.1  # e.g., 10% of bin capacity is "small"
    small_space_penalty = -100  # a very high penalty
    small_spaces = np.logical_and(remaining_capacity_after_packing > 0, remaining_capacity_after_packing < small_space_threshold)

    priorities[small_spaces] += small_space_penalty

    # 4. Encourage packing into bins close to item size.
    capacity_difference = np.abs(bins_remain_cap - item)
    priority_adjustment = -capacity_difference / np.max(bins_remain_cap) # penalize large capacity differences
    priorities[feasible_bins] += priority_adjustment[feasible_bins]
    return priorities
```
