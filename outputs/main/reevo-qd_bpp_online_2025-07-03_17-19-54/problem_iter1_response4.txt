```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Prioritize bins that can fit the item.
            # Higher priority to bins with smaller remaining capacity after packing the item
            priorities[i] = (cap - item) / cap  # Normalized remaining capacity

            # Slightly boost priority for bins closer to being full after packing
            priorities[i] = 1 - priorities[i] # Higher score for less remaining

        else:
            # Large negative priority for bins that can't fit the item.
            priorities[i] = -np.inf  # Prevent from selecting bins unable to fit item
    return priorities
```
