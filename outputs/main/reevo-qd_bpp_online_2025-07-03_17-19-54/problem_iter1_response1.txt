```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Initialize a very small value to avoid division by zero or log of zero
    epsilon = 1e-9
    
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Higher priority for bins that can accommodate the item
            
            #First Fit Decreasing Inspired Heuristic
            
            #Priority component: Ratio of item size to remaining capacity
            #Bins with remaining capacity closer to item size get higher priority (good fit)
            fit_ratio = item / (cap + epsilon)
            priorities[i] += (1 - abs(fit_ratio - 1)) # Higher if closer to 1
            
            #Priority component: Give a bonus to bins with larger remaining capacities
            #Avoid fragmentation by trying to fill bins somewhat efficiently
            priorities[i] += cap/np.max(bins_remain_cap+epsilon)

        else:
            # Assign a very low priority to bins that cannot accommodate the item
            priorities[i] = -1e9  # A very large negative number ensures these are last
    
    return priorities
```
