```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First Fit Decreasing Heuristic inspired approach: Prefer bins where the item fits reasonably well.
    # Higher score for bins where item fits with less wasted space (but only if it fits).
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        priorities[fit_mask] = (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask] # Remaining cap ratio
        priorities[fit_mask] = 1 - priorities[fit_mask]  # Inverted so smaller remaining cap gives larger score.
    else:
        # Item doesn't fit in any bin; give priority to bins with most remaining capacity.
        # A negative score ensures that if any bins *can* fit the item they get absolute priority.
        priorities = - bins_remain_cap/np.max(bins_remain_cap)

    # Add a small randomness to break ties and explore the space. (Can also scale this based on iteration number)
    priorities += np.random.rand(len(bins_remain_cap)) * 0.0001

    return priorities
```
