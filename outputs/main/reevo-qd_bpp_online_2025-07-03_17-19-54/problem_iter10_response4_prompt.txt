{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Only consider bins that can fit the item\n    feasible_bins = bins_remain_cap >= item\n    priorities[~feasible_bins] = -np.inf  # Very low priority if it doesn't fit\n\n    # 2. Best Fit Heuristic: Higher priority for bins with smallest remaining capacity after packing\n    remaining_space_after_packing = bins_remain_cap - item\n    priorities[feasible_bins] = -np.abs(remaining_space_after_packing[feasible_bins]) #negative of absolute value promotes smaller waste\n\n    # 3. Fill percentage heuristic: Promote bins that would be filled close to 100%\n    fill_percentage = (bins_remain_cap - remaining_space_after_packing) / np.max(bins_remain_cap)\n    priorities[feasible_bins] += fill_percentage[feasible_bins] #addition to prior score promotes bins close to full.\n\n    # 4. Penalize near-full bins to prevent fragmentation, less relevant for online case as you pack immediately\n    near_full_threshold = 0.95 * np.max(bins_remain_cap)\n    near_full_bins = bins_remain_cap > near_full_threshold\n    priorities[near_full_bins] -= 0.1 # slight penalty\n\n    # 5. Bonus for bins that are empty\n    empty_bins = bins_remain_cap == np.max(bins_remain_cap) #assuming bins start at maximum capacity\n    priorities[empty_bins] += 0.05\n\n    return priorities\n\n[Reflection]\nPrioritize feasibility, minimize waste, promote full bins, and consider fragmentation and empty bin bonuses.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}