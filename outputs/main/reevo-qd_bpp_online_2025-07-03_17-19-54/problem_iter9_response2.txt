```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_capacity = np.max(bins_remain_cap)

    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf  # Very low priority if it doesn't fit

    # 2. Best Fit Heuristic: Higher priority for bins with smallest remaining capacity after packing
    remaining_space_after_packing = bins_remain_cap - item
    
    # Avoid division by zero in edge cases by adding a small constant to denominator
    priorities[feasible_bins] = 1 / (np.abs(remaining_space_after_packing[feasible_bins]) + 0.00001) 

    # 3. Fill percentage heuristic: Promote bins that would be filled close to 100%
    fill_percentage = (max_capacity - bins_remain_cap + item) / max_capacity # fill percentage after adding the item
    priorities[feasible_bins] += fill_percentage[feasible_bins]

    # 4. Fragmentation control: Penalize bins with remaining capacity slightly larger than the item size
    fragmentation_threshold = item * 1.1  # e.g., if remaining capacity is just 10% more than item
    fragmented_bins = (remaining_space_after_packing > 0) & (remaining_space_after_packing <= fragmentation_threshold) & feasible_bins
    priorities[fragmented_bins] -= 0.2

    # 5. Bonus for empty bins: Give a significant boost
    empty_bins = bins_remain_cap == max_capacity
    priorities[empty_bins] += 1.0

    #6. Item size proximity : Give a small boost if remaining capacity is close to item size.
    proximity_score = np.exp(-np.abs(remaining_space_after_packing) / item)
    priorities[feasible_bins] += 0.1 * proximity_score[feasible_bins]


    return priorities
```
