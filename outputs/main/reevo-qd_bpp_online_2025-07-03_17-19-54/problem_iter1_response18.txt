```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Primary criterion: Can the item fit?
            remaining_after_fit = cap - item
            
            # Give higher priority to bins that result in less wasted space,
            # but prioritize bins that can fit the item snugly (avoid tiny leftovers)
            if remaining_after_fit == 0:
                priorities[i] = 1000  # Perfect fit! Very high priority
            elif remaining_after_fit < 0.1: # Prefer to fill bins up more
                 priorities[i] = 500 - (remaining_after_fit * 100)
            else:
                priorities[i] = 100 / (remaining_after_fit + 0.0001)  # Inverse of remaining cap
        else:
            priorities[i] = -1000  # Cannot fit, very low priority

    return priorities
```
