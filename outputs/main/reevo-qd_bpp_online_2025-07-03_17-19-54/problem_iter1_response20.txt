```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First-Fit Decreasing inspired: prioritize bins with capacity closest to item size
            priorities[i] = cap - item
            priorities[i] = -abs(priorities[i])  # Closer to 0 is higher priority

            # Give a boost for bins where the item fills a substantial portion
            fill_ratio = item / cap
            if 0.75 <= fill_ratio <= 1.0:
                 priorities[i] += 1 # Bonus points for good fit.
            elif fill_ratio > 1.0: #Considerable overlap - reject. This line should never be hit since we're checking cap >= item initially.
                priorities[i] = -np.inf

        else:
            priorities[i] = -np.inf  # Cannot fit

    # Add a small random component to break ties and explore different options
    priorities += np.random.rand(len(bins_remain_cap)) * 0.001

    return priorities
```
