```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf  # Very low priority if it doesn't fit

    # 2. Best Fit Heuristic: Higher priority for bins with smallest remaining capacity after packing, but scaled.
    remaining_space_after_packing = bins_remain_cap - item
    priorities[feasible_bins] = -np.abs(remaining_space_after_packing[feasible_bins]) / np.max(bins_remain_cap)  # Scaled best fit.

    # 3. Fill percentage heuristic: Promote bins that would be filled close to 100%
    fill_percentage = (bins_remain_cap - remaining_space_after_packing) / np.max(bins_remain_cap)
    priorities[feasible_bins] += fill_percentage[feasible_bins]

    # 4. Fragmentation penalty: Penalize bins where adding this item leads to small remaining space.
    fragment_threshold = 0.1 * np.max(bins_remain_cap)
    fragmented_bins = (remaining_space_after_packing > 0) & (remaining_space_after_packing <= fragment_threshold)
    priorities[fragmented_bins] -= 0.2 # Higher penalty than empty bonus

    # 5. Bonus for empty bins, but lessened to avoid always filling new ones.
    empty_bins = bins_remain_cap == np.max(bins_remain_cap)
    priorities[empty_bins] += 0.02

    #6. Reward bins that are close to half-full. This can encourage more balanced packing.
    half_full_lower = 0.4 * np.max(bins_remain_cap)
    half_full_upper = 0.6 * np.max(bins_remain_cap)

    half_full_bins = (bins_remain_cap >= half_full_lower) & (bins_remain_cap <= half_full_upper)
    priorities[half_full_bins] += 0.03 #slight reward

    return priorities
```
