```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First Fit Decreasing inspired heuristic: Give high priority to bins where the item fits with minimal waste.
    # Avoid fragmentation.

    # 1. Immediate Fit: If the item fits perfectly.
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = 1000  # Highest priority.

    # 2. Good Fit: If the item fits with minimal waste (e.g., waste < 10% of bin size).
    waste = bins_remain_cap - item
    good_fit = (waste >= 0) & (waste <= 0.1 * bins_remain_cap)
    priorities[good_fit] = 500 + (0.1 * bins_remain_cap[good_fit] - waste[good_fit]) * 100 # A slight preference toward less waste
    # Waste here is 0 to 0.1*capacity

    # 3. Moderate Fit: If the item fits but with more waste (waste < 50% of bin size).
    moderate_fit = (waste > 0.1 * bins_remain_cap) & (waste <= 0.5 * bins_remain_cap)
    priorities[moderate_fit] = 250 + (0.5 * bins_remain_cap[moderate_fit] - waste[moderate_fit]) * 50  # lower priority, bias toward less waste

    # 4. Last Resort: If the item fits, but there's a lot of waste.  Discourage filling almost empty bins
    fits = waste > 0
    priorities[fits & ~good_fit & ~moderate_fit] = 100 + (bins_remain_cap[fits & ~good_fit & ~moderate_fit] - waste[fits & ~good_fit & ~moderate_fit]) * 10 # Lower still, prefer bins that started less empty

    # If no bin fits, priorities remain zero which might be desirable behaviour.
    return priorities
```
