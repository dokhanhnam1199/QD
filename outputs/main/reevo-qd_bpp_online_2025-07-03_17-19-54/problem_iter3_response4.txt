```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf  # Very low priority if it doesn't fit

    # 2. Best Fit Heuristic: Higher priority for bins with smallest remaining capacity after packing
    remaining_space_after_packing = bins_remain_cap - item
    priorities[feasible_bins] = -np.abs(remaining_space_after_packing[feasible_bins])

    # 3. Fill percentage heuristic: Promote bins that would be filled close to 100%
    fill_percentage = (bins_remain_cap - remaining_space_after_packing) / np.max(bins_remain_cap)
    priorities[feasible_bins] += fill_percentage[feasible_bins]

    # 4. Fragmentation penalty adjusted for online
    # Penalize bins that, after packing, leave a gap smaller than a fraction of the average item size.
    average_item_size = np.mean(item) if isinstance(item,np.ndarray) else item
    fragmentation_threshold = 0.2 * average_item_size
    fragmented_bins = (remaining_space_after_packing > 0) & (remaining_space_after_packing < fragmentation_threshold)
    priorities[fragmented_bins] -= 0.2

    # 5. Bonus for empty bins, scaled by item size. Larger items get preference for empty bins
    empty_bins = bins_remain_cap == np.max(bins_remain_cap)
    priorities[empty_bins] += 0.1 * (item / np.max(bins_remain_cap))

    # 6. Add a bonus for bins where packing the item results in capacity utilization above a certain threshold
    utilization_threshold = 0.75
    current_utilization = (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap)
    future_utilization = (np.max(bins_remain_cap) - remaining_space_after_packing) / np.max(bins_remain_cap)
    desirable_utilization_bins = feasible_bins & (future_utilization >= utilization_threshold) & (current_utilization < utilization_threshold)
    priorities[desirable_utilization_bins] += 0.15

    return priorities
```
