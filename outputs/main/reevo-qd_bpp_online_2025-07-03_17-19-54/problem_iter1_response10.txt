```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        # If no bin can fit, assign minimal priority to all.  Important edge case.
        return priorities 

    # 2. Remaining Capacity Heuristic: Prioritize bins with smaller remaining capacity after adding the item. Goal is to fill bins completely before opening new ones.
    remaining_capacity_after_fit = bins_remain_cap - item
    remaining_capacity_after_fit[~feasible_bins] = np.inf #Ignore infeasible bins for min computation
    min_remaining_capacity = np.min(remaining_capacity_after_fit) # minimum capacity of only bins that could fit.
    
    # assign priority that is inverse related to the capacity remaining. smaller -> higher
    priorities[feasible_bins] = 1.0 / (1e-6 + remaining_capacity_after_fit[feasible_bins]) # Add a small epsilon to avoid division by zero
    
    #3. Bonus to bins which can have less than a certain threshold after addition
    threshold = 0.1 # can tune to see which number is best
    almost_full = remaining_capacity_after_fit <= threshold

    priorities[almost_full] = priorities[almost_full] * 2

    return priorities
```
