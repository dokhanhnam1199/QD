```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_capacity = np.max(bins_remain_cap)

    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf

    # 2. Best Fit Heuristic: Higher priority for bins with smallest waste
    remaining_space = bins_remain_cap - item
    remaining_space[~feasible_bins] = np.inf  # Ensure infeasible bins don't interfere
    best_fit_priority = -np.abs(remaining_space)
    priorities[feasible_bins] += best_fit_priority[feasible_bins]

    # 3. Fill percentage heuristic: Promote higher fill percentage
    fill_percentage = (max_capacity - bins_remain_cap + item) / max_capacity
    priorities[feasible_bins] += fill_percentage[feasible_bins]

    # 4. Fragmentation control: Penalize bins that would become too empty.  Helps pack bins more tightly.
    frag_threshold = 0.2 * max_capacity
    fragmented_bins = remaining_space > frag_threshold
    priorities[fragmented_bins & feasible_bins] -= 0.02  # Slightly penalize

    # 5. Empty bin bonus
    empty_bins = bins_remain_cap == max_capacity
    priorities[empty_bins] += 0.05

    # 6. Item size proximity: Tie-breaker, prefer bins whose remaining capacity is close to item size.
    proximity = -np.abs(bins_remain_cap - item)
    priorities[feasible_bins] += 0.01 * proximity[feasible_bins] #small amount
    return priorities
```
