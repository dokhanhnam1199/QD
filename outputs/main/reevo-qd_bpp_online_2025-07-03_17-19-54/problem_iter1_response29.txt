```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Disqualify bins that cannot fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # or a very large negative number

    # 2. Best Fit Criterion: Prioritize bins with smallest remaining capacity *after* adding the item.
    #    This aims to leave minimal wasted space and maximize bin utilization.

    feasible_bins = ~infeasible_bins
    remaining_after_fit = bins_remain_cap[feasible_bins] - item

    # Use inverse to prioritize smaller remainders (better fit). Add a small constant to avoid division by zero errors
    priorities[feasible_bins] = 1.0 / (remaining_after_fit + 1e-9)


    #3. Fill Level Prioritization: slightly favor bins which are nearly full, which could help reduce the chance of them being left partially filled at the end.
    fill_levels = (bins_remain_cap - remaining_after_fit) / (bins_remain_cap + item)

    priorities[feasible_bins] = priorities[feasible_bins] + fill_levels[feasible_bins]

    return priorities
```
