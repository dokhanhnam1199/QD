```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Can the item fit in the bin?
    feasible_bins = bins_remain_cap >= item

    # 2. Remaining Capacity: Higher priority to bins with less remaining capacity after placing item
    remaining_after_placement = bins_remain_cap - item
    remaining_after_placement[remaining_after_placement < 0] = np.inf # make infeasible bin very low priority

    #Prioritize almost full bins which can fit
    almost_full_threshold = 0.2 # Tuneable param - if the bin can be filled beyond 80%, then prioritize.
    almost_full_bins = (bins_remain_cap > item) & (remaining_after_placement / bins_remain_cap <= almost_full_threshold)

    priorities[feasible_bins] += 1  #Basic priority for fitting.

    priorities[feasible_bins] += 1.0 / (remaining_after_placement[feasible_bins] + 1e-9) # Inverse of wasted space, Add epsilon to prevent divide by zero

    priorities[almost_full_bins] += 5 # Significantly increase the priority of almost full bins. Tuneable param.

    return priorities
```
