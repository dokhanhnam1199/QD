```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Base priority based on how much space is left *after* packing
            remaining_after_pack = cap - item
            priorities[i] = (1 / (remaining_after_pack + 1e-6))  # Avoid division by zero

            # Bonus if it fits relatively snugly (avoid too much fragmentation)
            if item / cap > 0.75:  # Tunable parameter: ratio close to full
                priorities[i] += 1  # Give a small bonus

        else:
            priorities[i] = -np.inf  # Cannot fit, make lowest priority.

    return priorities
```
