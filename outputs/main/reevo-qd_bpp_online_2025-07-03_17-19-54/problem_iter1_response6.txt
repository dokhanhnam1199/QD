```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First, eliminate bins that can't fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf
    
    # For feasible bins:
    feasible_bins = ~infeasible_bins
    
    if np.any(feasible_bins):
        # 1. Remaining Capacity as Priority: Prefer bins with smaller remaining capacity *after* placing the item.
        remaining_after_placement = bins_remain_cap[feasible_bins] - item
        priorities[feasible_bins] = -np.abs(remaining_after_placement) # Prioritize bins that results to smallest remaining capacity after placement

        # 2. Avoidance of small remaining capacity.

        too_small_remaining = remaining_after_placement < 0.1 # Avoid bins that result in tiny remaining capacity.
        priorities[feasible_bins][too_small_remaining] -= 10 # reduce priority of those bins

        # 3. Bonus for bins filled halfway.
        halfway = np.abs(remaining_after_placement - item) # abs distance between capacity left and item size.
        near_half = halfway < 0.1 * item # bins near half fill.
        priorities[feasible_bins][near_half] += 5

        # 4. Bonus for near-perfect fit
        nearly_full = remaining_after_placement > 0 and remaining_after_placement < 0.01 * bins_remain_cap[feasible_bins]
        priorities[feasible_bins][nearly_full] += 10

        #5 scale all valid priorities between 0 and 10
        min_priority = np.min(priorities[feasible_bins])
        max_priority = np.max(priorities[feasible_bins])
        if max_priority != min_priority: #avoid divide by zero error
            priorities[feasible_bins] = 10 * (priorities[feasible_bins] - min_priority) / (max_priority - min_priority)
        else:
            priorities[feasible_bins] = 5

    return priorities
```
