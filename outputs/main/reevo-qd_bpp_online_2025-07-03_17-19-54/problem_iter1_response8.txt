```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Give a higher priority to bins where the item fits.
            remaining_space = cap - item
            
            # Strategy 1: Favor bins where the item fits best (minimize wasted space).
            # priorities[i] = 1.0 / (remaining_space + 1e-9)  # Avoid division by zero

            # Strategy 2: Favor bins that are almost full after adding the item
            # priorities[i] = 1.0 - (remaining_space / cap)

            # Strategy 3: Combination of both, with some scaling.  This aims to select bins that fits the item and leaves small space
            priorities[i] = (1.0 / (remaining_space + 1e-9)) + (1.0 - (remaining_space / cap)) *0.5


            # Strategy 4: Use a threshold for acceptable remaining space,
            # penalize bins where the remaining space is too small (e.g. less than 10% of bin size), encouraging to leave a usable bin space
            # threshold = 0.1 * 1.0  # Small percentage (0.1 representing 10% if binsize == 1)
            # if remaining_space > threshold:
            #    priorities[i] += 1  # Original priority
            # else:
            #     priorities[i] -= 0.5 # Penalize bin

        else:
            # If the item does not fit, assign a very low priority (negative).
            priorities[i] = -1e9
    return priorities
```
