```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_capacity = np.max(bins_remain_cap)

    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf  # Very low priority if it doesn't fit

    # 2. Best Fit Heuristic: Higher priority for bins with smallest remaining capacity after packing
    remaining_space_after_packing = bins_remain_cap - item
    priorities[feasible_bins] = -np.abs(remaining_space_after_packing[feasible_bins])

    # 3. Fill percentage heuristic: Promote bins that would be filled close to 100%
    fill_percentage = (max_capacity - remaining_space_after_packing) / max_capacity
    priorities[feasible_bins] += fill_percentage[feasible_bins]

    # 4. Penalize near-full bins to prevent fragmentation, less relevant for online case as you pack immediately, but still helpful
    near_full_threshold = 0.95 * max_capacity
    near_full_bins = bins_remain_cap > near_full_threshold
    priorities[near_full_bins] -= 0.1

    # 5. Bonus for bins that are empty
    empty_bins = bins_remain_cap == max_capacity
    priorities[empty_bins] += 0.05

    # 6. Modified Best Fit: give higher priority to bins where the item fills a large proportion of the remaining space
    proportion_filled = item / bins_remain_cap
    priorities[feasible_bins] += 0.5 * proportion_filled[feasible_bins] #scale the proportion filled

    # 7. Reduce priority if the item is very small relative to bin capacity
    small_item_threshold = 0.1 * max_capacity
    small_item = item < small_item_threshold
    if small_item:
        priorities[feasible_bins] -= 0.02 * (max_capacity - bins_remain_cap[feasible_bins]) / max_capacity #less likely to put very small items in partially full bins.

    return priorities
```
