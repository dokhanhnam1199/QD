```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First-Fit-Decreasing Inspired: Prioritize bins where the item fits well
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = bins_remain_cap[fit_mask] - item  # Remaining space after placing item

    # Avoid Fragmentation: Penalize small remaining capacity if item doesn't fit
    no_fit_mask = ~fit_mask
    priorities[no_fit_mask] = -1000 * (item - bins_remain_cap[no_fit_mask])**2  # Large negative penalty

    # Open New Bin Priority (Lower Bound): If no bins have good space add to the emptiest bin
    if np.all(priorities <= 0):
        min_cap = np.min(bins_remain_cap)
        emptiest_bin_mask = bins_remain_cap == min_cap
        priorities[emptiest_bin_mask] = 1

    # Emphasize Nearly Full Bins: If the item almost fills the bin.
    near_full_mask = (bins_remain_cap >= item) & (bins_remain_cap <= 1.1 * item) # A bit flexible. Can further tune 1.1
    priorities[near_full_mask] += 10 # Boost bins nearly filled.

    return priorities
```
