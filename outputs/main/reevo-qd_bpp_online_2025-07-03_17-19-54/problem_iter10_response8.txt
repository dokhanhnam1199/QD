```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_capacity = np.max(bins_remain_cap)

    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf  # Very low priority if it doesn't fit

    if np.any(feasible_bins): #proceed only if item fits in at least one bin

        # 2. Best Fit Heuristic: Higher priority for bins with smallest remaining capacity after packing
        remaining_space_after_packing = bins_remain_cap - item
        priorities[feasible_bins] += -np.abs(remaining_space_after_packing[feasible_bins])  # negative of absolute value promotes smaller waste


        # 3. Fill percentage heuristic: Promote bins that would be filled close to 100%
        fill_percentage = (max_capacity - remaining_space_after_packing) / max_capacity
        priorities[feasible_bins] += fill_percentage[feasible_bins]


        # 4. Penalize near-full bins to prevent fragmentation.
        near_full_threshold = 0.95 * max_capacity
        near_full_bins = bins_remain_cap[feasible_bins] > near_full_threshold
        priorities[feasible_bins][near_full_bins] -= 0.1

        # 5. Bonus for bins that are empty
        empty_bins = bins_remain_cap == max_capacity
        priorities[empty_bins] += 0.05

        #6. Prioritize bins with capacity closest to item size

        capacity_diff = np.abs(bins_remain_cap - item)
        priorities[feasible_bins] -= 0.01 * capacity_diff[feasible_bins]  # Smaller difference gives higher priority
    return priorities
```
