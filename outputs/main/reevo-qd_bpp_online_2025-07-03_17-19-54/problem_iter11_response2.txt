```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf  # Very low priority if it doesn't fit

    # 2. Best Fit Heuristic: Higher priority for bins with smallest remaining capacity after packing
    remaining_space_after_packing = bins_remain_cap - item
    priorities[feasible_bins] = -np.abs(remaining_space_after_packing[feasible_bins])

    # 3. Fill percentage heuristic: Promote bins that would be filled close to 100%
    fill_percentage = (bin_capacity - remaining_space_after_packing) / bin_capacity
    priorities[feasible_bins] += 0.5 * fill_percentage[feasible_bins] # Increased weighting of fill percentage

    # 4. Penalize near-full bins to prevent fragmentation
    near_full_threshold = 0.95 * bin_capacity
    near_full_bins = bins_remain_cap <= near_full_threshold + item
    near_full_and_feasible = near_full_bins & feasible_bins
    priorities[near_full_and_feasible] -= 0.2  # Increased penalty

    # 5. Bonus for bins that are empty
    empty_bins = bins_remain_cap == bin_capacity
    priorities[empty_bins] += 0.1

    # 6. Item size proximity: Break ties based on how close the remaining space is to a fraction of the item size.
    #    This encourages using up most of the space available.
    proximity_score = np.zeros_like(bins_remain_cap, dtype=float)
    for i in range(len(bins_remain_cap)):
        if feasible_bins[i]:
            proximity_score[i] = -np.abs(remaining_space_after_packing[i] - 0.5 * item)

    priorities[feasible_bins] += 0.05 * proximity_score[feasible_bins] # Less weight than other heuristic

    return priorities
```
