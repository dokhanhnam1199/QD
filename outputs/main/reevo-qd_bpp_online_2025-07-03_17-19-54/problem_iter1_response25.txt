```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Rule out bins that can't fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # or a very small number

    # 2. First-Fit-Decreasing inspired heuristic: give preference to bins with smallest remaining capacity, but still large enough
    #       to fit the item. This aims to fill bins more completely, leaving larger bins for possibly larger items in the future.

    #   Calculate the remaining capacity AFTER adding the item (only for feasible bins)
    remaining_after_fit = bins_remain_cap - item
    
    #   We only care about the ones that will leave positive/small remaining capacity
    valid_bins = (bins_remain_cap >= item) & (bins_remain_cap > 0)

    if np.any(valid_bins):  # if any valid bins
        priorities[valid_bins] = -remaining_after_fit[valid_bins]

        # Try to fill up bins more (based on the % of remaining capacity being used.
        fill_ratio = item / (bins_remain_cap[valid_bins])
        priorities[valid_bins] = priorities[valid_bins] + (fill_ratio * 10)

    # 3. Tie-breaking: Preferentially select bins with lower index (stability)
    #    (Not implemented here since bin index info isn't passed in)
    
    return priorities
```
