```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Primary criterion: Can the item fit?

            # First-Fit Decreasing-esque heuristic: Prefer bins that are close to full
            # If item fills the bin almost exactly, it's great
            fill_ratio = item / cap

            if 0.9 <= fill_ratio <= 1.0:
                priorities[i] += 100 # Very high priority for almost perfect fit
            elif fill_ratio > 1.0:
                priorities[i] = -np.inf # Should not happen since cap >= item, but safety
            else:
                priorities[i] += 10 * fill_ratio # Higher fill ratio gives higher priority
                
            # Modified Best-Fit: try to find smallest bin that can hold the item, 
            # but with noise. Avoid tiny differences leading to identical priorities
            priorities[i] += 1.0 / (cap + 0.0001 * np.random.rand())  # Add small noise

            # Remaining capacity as a secondary priority
            priorities[i] += cap * 0.01

        else:
            priorities[i] = -np.inf  # Cannot fit, lowest priority
            
    return priorities
```
