```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_capacity = np.max(bins_remain_cap)

    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf  # Very low priority if it doesn't fit

    # 2. Best Fit Heuristic: Higher priority for bins with smallest remaining capacity after packing
    remaining_space_after_packing = bins_remain_cap - item
    priorities[feasible_bins] += -np.abs(remaining_space_after_packing[feasible_bins])

    # 3. Fill percentage heuristic: Promote bins that would be filled close to 100%
    fill_percentage = (max_capacity - remaining_space_after_packing) / max_capacity
    priorities[feasible_bins] += fill_percentage[feasible_bins]

    # 4. Item Size Proximity: Prefer bins where the remaining capacity is close to item size
    proximity_score = 1 - np.abs(remaining_space_after_packing - item) / max_capacity
    priorities[feasible_bins] += proximity_score[feasible_bins] * 0.5 # scale it down, so other heuristics have priority

    # 5. Bonus for bins that are empty
    empty_bins = bins_remain_cap == max_capacity
    priorities[empty_bins] += 0.2

    # 6. Moderate the effect of fill percentage to avoid premature bin closing
    full_threshold = 0.98 * max_capacity
    overfilled_bins = (bins_remain_cap - item) < (0.02 * max_capacity)
    priorities[overfilled_bins] -= 0.3 #slight penalty to avoid creating excessive almost full bins

    # 7. Prioritize bins that were recently used.
    recently_used = bins_remain_cap < max_capacity
    priorities[recently_used] += 0.1

    return priorities
```
