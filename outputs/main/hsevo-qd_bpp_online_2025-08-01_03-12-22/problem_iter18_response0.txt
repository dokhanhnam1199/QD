```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    bin_capacity: float, # New parameter: The total capacity of a single bin. Essential for "aggressive closure."
    base_fit_priority: float = 50.0,
    rem_cap_penalty_factor: float = 3.5,
    rem_cap_penalty_exponent: float = 1.7,
    relative_fill_bonus_factor: float = 8.0,
    aggressive_closure_factor: float = 25.0,  # New: Multiplier for post-placement bin utilization bonus
    aggressive_closure_exponent: float = 4.0, # New: High exponent to strongly reward bins that become very full
    exact_fit_bonus: float = 150.0,        # New: Very high bonus for perfect fits
    min_allowed_priority: float = 0.5,
    non_fitting_priority: float = -10.0
) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements an advanced "Best Fit" strategy, emphasizing "Intelligent Bin Closure"
    and "Strategic Scoring". It refines the non-linear penalty for remaining capacity and introduces
    multiple, highly discriminating bonuses: one for filling a significant proportion of the bin's
    current available space, another for achieving high overall bin utilization post-placement, and
    a specific, very high bonus for exact fits. This combination aims to efficiently consolidate items
    and aggressively close bins.

    Args:
        item: Size of item to be added to the bin. Must be greater than 0.
        bins_remain_cap: Array of current remaining capacities for each bin.
        bin_capacity: The total capacity of a single bin. This is crucial for
                      calculating the "aggressive closure bonus" based on the final
                      overall utilization of the bin. Must be a positive value.
        base_fit_priority: A base score given to any bin where the item can fit.
                           This sets the initial priority before any adjustments.
        rem_cap_penalty_factor: A multiplier for the non-linear penalty applied
                                based on the remaining capacity after item placement.
                                Higher values penalize larger remaining capacities more.
        rem_cap_penalty_exponent: An exponent (typically > 1) applied to the
                                  remaining capacity when calculating the penalty.
                                  A value greater than 1 makes the penalty for
                                  larger remaining capacities disproportionately
                                  more severe, thereby strongly favoring very tight fits
                                  (i.e., less remaining space).
        relative_fill_bonus_factor: A multiplier for a bonus that rewards placing
                                    an item into a bin where it occupies a significant
                                    proportion of the bin's *current* available capacity.
                                    This encourages "filling up" bins that are already
                                    partially utilized or finding relatively large items
                                    for smaller remaining spaces.
        aggressive_closure_factor: A multiplier for a bonus that strongly rewards
                                   bins that become highly utilized (nearly full or full)
                                   after the item is placed. This promotes "intelligent bin closure"
                                   by making bins that are close to full very attractive.
        aggressive_closure_exponent: An exponent (typically > 1 and often higher than rem_cap_penalty_exponent)
                                     applied to the post-placement bin fill ratio when calculating this bonus.
                                     A high value ensures that the bonus disproportionately
                                     increases as the bin approaches full capacity (e.g., 90% vs 99% filled),
                                     making it highly attractive to nearly close bins.
        exact_fit_bonus: An extremely high, specific bonus awarded if an item
                         perfectly fills a bin, leaving zero remaining capacity.
                         This is the ultimate form of "intelligent bin closure" and ensures
                         such an optimal fit is highly prioritized.
        min_allowed_priority: The minimum priority score a bin can receive if
                              the item fits. This acts as a floor, preventing
                              valid placement priorities from becoming too low.
        non_fitting_priority: The priority score assigned to bins where the
                              item does not fit. Typically a low or negative value.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    if bin_capacity <= 0:
        raise ValueError("bin_capacity must be a positive value.")
    if item <= 0:
        # Items with non-positive size cannot be placed.
        # Or, if item is 0, it would fit everywhere, but not meaningfully.
        return np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)

    # Initialize all priorities with the score for non-fitting bins
    priorities = np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Only process if there are bins where the item can fit
    if np.any(can_fit_mask):
        fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
        remaining_after_placement = fitting_bins_remain_cap - item

        # Start with the base priority for fitting bins
        calculated_priorities = np.full_like(fitting_bins_remain_cap, fill_value=base_fit_priority, dtype=float)

        # 1. Non-linear Penalty for Remaining Capacity (Refined Best Fit)
        # Heavily penalizes leaving large amounts of space. Favors bins that result in very little remaining space.
        rem_cap_penalty = rem_cap_penalty_factor * (remaining_after_placement ** rem_cap_penalty_exponent)
        calculated_priorities -= rem_cap_penalty

        # 2. Relative Fill Bonus
        # Rewards placing the item where it constitutes a larger fraction of the *current* available capacity.
        # This encourages "filling up" bins that are already partially utilized.
        # Division is safe because if item > 0 and it fits, then fitting_bins_remain_cap must be > 0.
        relative_fill_ratio = item / fitting_bins_remain_cap
        relative_fill_bonus = relative_fill_bonus_factor * relative_fill_ratio
        calculated_priorities += relative_fill_bonus

        # 3. Aggressive Bin Closure Bonus
        # This bonus term strongly rewards placing the item such that the bin becomes highly utilized (near full).
        # It directly implements "Intelligent Bin Closure" by making bins that are close to full capacity
        # after placement much more attractive.
        # Calculate the fill ratio of the bin *after* the item is placed relative to total bin capacity.
        current_filled_capacity = bin_capacity - fitting_bins_remain_cap
        post_placement_fill_ratio = (current_filled_capacity + item) / bin_capacity
        # Ensure ratio is within [0, 1] range (clipping for robustness, though usually handled by masks)
        post_placement_fill_ratio = np.clip(post_placement_fill_ratio, 0.0, 1.0)

        aggressive_closure_bonus = aggressive_closure_factor * (post_placement_fill_ratio ** aggressive_closure_exponent)
        calculated_priorities += aggressive_closure_bonus

        # 4. Exact Fit Bonus (Strategic Scoring for perfect closure)
        # Apply a very high, specific bonus if the item perfectly fills a bin (remaining capacity is zero).
        # This is the most "strategic" and "discriminating" bonus, aiming for perfect bin utilization.
        exact_fit_mask = (remaining_after_placement == 0)
        calculated_priorities[exact_fit_mask] += exact_fit_bonus

        # Ensure that the calculated priority does not fall below a minimum allowed value
        calculated_priorities = np.maximum(calculated_priorities, min_allowed_priority)

        # Assign the calculated priorities to the corresponding bins
        priorities[can_fit_mask] = calculated_priorities

    return priorities
```
