```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Multi-factor heuristic: combines relative fill with a non-linear penalty for remaining space.
    Prioritizes bins that offer high proportional fill and minimize the remaining capacity after placement,
    promoting efficient bin closure.
    """
    # Initialize scores to negative infinity, ensuring bins where the item cannot fit are never selected.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a mask for bins with sufficient remaining capacity.
    can_fit_mask = bins_remain_cap >= item

    # Extract remaining capacities for only the bins that can fit the item.
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # --- Component 1: Relative Fill Ratio (inspired by priority_v0's core idea) ---
    # This term rewards bins where the item occupies a large proportion of the current available space.
    # It implicitly encourages tight fits by giving higher scores as bins_remain_cap approaches item size.
    # Note: Assumes item > 0.
    fill_ratio_score = item / fitting_bins_remain_cap

    # --- Component 2: Non-linear Penalty for Remaining Space After Placement ---
    # This term explicitly implements a non-linear penalty for the space left in the bin
    # after the item is placed (i.e., Best Fit principle). Larger remaining space leads
    # to a significantly harsher penalty (more negative score), thus strongly favoring
    # bins that achieve tighter packing and facilitate bin closure.
    # An exponent > 1 ensures non-linear behavior.
    remaining_after_placement = fitting_bins_remain_cap - item
    penalty_for_remaining_space = -np.power(remaining_after_placement, 2.0) # Using exponent 2.0 for non-linearity.
                                                                           # Perfect fits (rem_after=0) yield 0 penalty.

    # --- Combined Score ---
    # The final score is a sum of the relative fill bonus and the non-linear remaining space penalty.
    # This multi-factor approach leverages the strengths of both strategies:
    #   - Fill ratio ensures efficient use of current bin space.
    #   - Non-linear penalty promotes bin closure by disfavoring large leftovers.
    scores[can_fit_mask] = fill_ratio_score + penalty_for_remaining_space

    return scores
```
