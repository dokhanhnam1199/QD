```python
import numpy as np

class BinPackingHeuristics:
    def priority_v1(self,
                     item: float,
                     bins_remain_cap: np.ndarray,
                     base_fit_priority: float = 40.67957013415283,
                     remaining_capacity_penalty_factor: float = 2.527225052325968,
                     min_allowed_priority: float = 0.5896372460377476,
                     non_fitting_priority: float = -8.783827459234484) -> np.ndarray:
        """Returns priority with which we want to add item to each bin.

        This function calculates priority based on a "Best Fit" strategy:
        bins that can accommodate the item and have less remaining capacity after
        placement are prioritized higher.

        Args:
            item: Size of item to be added to the bin.
            bins_remain_cap: Array of capacities for each bin.
            base_fit_priority: A base score given to any bin where the item can fit.
                               This sets the initial priority before any penalties.
            remaining_capacity_penalty_factor: A multiplier for the penalty applied
                                               based on the remaining capacity after
                                               the item is placed. A higher value
                                               means larger remaining capacities
                                               are penalized more heavily,
                                               encouraging a "best-fit" approach.
            min_allowed_priority: The minimum priority score a bin can receive if
                                  the item fits. This acts as a floor, preventing
                                  priorities from becoming too low or negative
                                  for valid placements.
            non_fitting_priority: The priority score assigned to bins where the
                                  item does not fit. Typically 0 or a negative value.

        Return:
            Array of same size as bins_remain_cap with priority score of each bin.
        """
        # Initialize all priorities with the value for non-fitting bins
        priorities = np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)

        # Identify bins where the item can fit
        can_fit_mask = bins_remain_cap >= item

        # Only process if there are bins where the item can fit
        if np.any(can_fit_mask):
            # Calculate the remaining capacity for bins where the item could be placed
            remaining_after_placement = bins_remain_cap[can_fit_mask] - item

            # Calculate the priority for these bins
            # The formula applies a penalty based on the remaining capacity:
            # P = base_fit_priority - (penalty_factor * remaining_capacity)
            # This encourages smaller remaining capacities (best fit).
            calculated_priorities = base_fit_priority - (remaining_capacity_penalty_factor * remaining_after_placement)

            # Ensure that the calculated priority does not fall below a minimum allowed value
            calculated_priorities = np.maximum(calculated_priorities, min_allowed_priority)

            # Assign the calculated priorities to the corresponding bins
            priorities[can_fit_mask] = calculated_priorities

        return priorities

    def priority_v2(self,
                     item: float,
                     bins_remain_cap: np.ndarray,
                     base_fit_priority: float = 45.0, # Slightly increased base
                     remaining_capacity_penalty_factor: float = 2.8, # Slightly increased penalty
                     tight_fit_bonus_strength: float = 15.0, # New: Strength of the bonus for tight fits
                     tight_fit_decay_rate: float = 7.0, # New: How rapidly the bonus decays with increasing remaining capacity
                     min_allowed_priority: float = 0.5,
                     non_fitting_priority: float = -10.0) -> np.ndarray:
        """Returns priority with which we want to add item to each bin.

        This function enhances the "Best Fit" strategy by introducing a strong,
        exponentially decaying bonus for very tight fits. It prioritizes bins
        that minimize remaining capacity, but gives an additional significant
        boost to bins that would become nearly full or perfectly full after
        placing the item. This aims to consolidate items more effectively and
        "close off" bins.

        Args:
            item: Size of item to be added to the bin.
            bins_remain_cap: Array of capacities for each bin.
            base_fit_priority: A foundational score for any bin that can fit the item.
            remaining_capacity_penalty_factor: Multiplier for the linear penalty applied
                                               to remaining capacity. Higher values
                                               penalize larger remaining capacities more.
            tight_fit_bonus_strength: The maximum bonus applied when remaining capacity
                                      after placement is zero. This bonus diminishes
                                      exponentially as remaining capacity increases.
            tight_fit_decay_rate: Controls how quickly the `tight_fit_bonus` diminishes.
                                  A higher value means the bonus is very localized
                                  to extremely tight fits.
            min_allowed_priority: The minimum priority score for a bin if the item fits.
            non_fitting_priority: The priority score for bins where the item does not fit.

        Returns:
            Array of same size as bins_remain_cap with priority score of each bin.
        """
        priorities = np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)

        can_fit_mask = bins_remain_cap >= item

        if np.any(can_fit_mask):
            remaining_after_placement = bins_remain_cap[can_fit_mask] - item

            # 1. Base Best Fit component (linear penalty based on remaining capacity)
            calculated_priorities = base_fit_priority - (remaining_capacity_penalty_factor * remaining_after_placement)

            # 2. Add an exponential tight-fit bonus
            # This term is highest when remaining_after_placement is 0 and decays rapidly,
            # giving significant preference to very tight fits.
            tight_fit_bonus = tight_fit_bonus_strength * np.exp(-tight_fit_decay_rate * remaining_after_placement)
            calculated_priorities += tight_fit_bonus

            # 3. Ensure that the calculated priority does not fall below a minimum allowed value
            calculated_priorities = np.maximum(calculated_priorities, min_allowed_priority)

            priorities[can_fit_mask] = calculated_priorities

        return priorities
```
