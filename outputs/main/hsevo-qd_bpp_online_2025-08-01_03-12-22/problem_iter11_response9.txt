```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority for online bin packing, combining proportional fill,
    perfect fit bonus, and a penalty for small fragments.
    """
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Mask for bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    # Extract relevant capacities for bins that can fit the item.
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    if len(fitting_bins_remain_cap) == 0:
        return scores  # No bin can fit the item, all remain -inf.

    # 1. Proportional Fill (Primary Heuristic):
    # Prioritizes bins where the item consumes a high ratio of the *current* remaining capacity.
    # This aligns with the analysis indicating "proportional fill" as a top performer.
    # Clip value to prevent excessively large scores from division by near-zero remainders,
    # ensuring subsequent bonuses/penalties have a meaningful impact.
    MAX_PROPORTIONAL_SCORE = 100.0
    proportional_fill_score = np.clip(item / fitting_bins_remain_cap, 0.0, MAX_PROPORTIONAL_SCORE)

    # Calculate remaining capacity if the item is placed.
    remaining_after_fit = fitting_bins_remain_cap - item

    # Initialize scores for fitting bins with the proportional fill score.
    scores[can_fit_mask] = proportional_fill_score

    # 2. Perfect Fit Bonus:
    # Provides a significant, non-linear incentive for bins that become exactly full (or nearly so)
    # after placing the item. This rewards perfect utilization and bin closure.
    EPSILON = 1e-9  # Tolerance for floating-point perfect fit comparison.
    perfect_fit_mask = remaining_after_fit <= EPSILON
    PERFECT_FIT_BONUS = MAX_PROPORTIONAL_SCORE * 10  # Ensure bonus is substantial.

    scores[can_fit_mask][perfect_fit_mask] += PERFECT_FIT_BONUS

    # 3. Penalty for Small, Non-Zero Fragments:
    # Actively discourages leaving very small, potentially unusable, amounts of space.
    # This mitigates fragmentation and improves overall packing density.
    SMALL_FRAGMENT_THRESHOLD = 0.05 * item  # Fragment size relative to item.
    FRAGMENT_PENALTY = MAX_PROPORTIONAL_SCORE * 0.5  # Significant penalty.

    # Mask for fragments that are small but not perfectly zero.
    small_fragment_mask = (remaining_after_fit > EPSILON) & \
                          (remaining_after_fit <= SMALL_FRAGMENT_THRESHOLD)

    scores[can_fit_mask][small_fragment_mask] -= FRAGMENT_PENALTY

    return scores
```
