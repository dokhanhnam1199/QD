```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, BIN_CAPACITY: float) -> np.ndarray:
    """
    Combines 'Proportional Fill' (relative tightness) with 'Non-linear Total Utilization'
    bonus to robustly optimize bin packing. It prioritizes bins where the item
    fills a large proportion of available space AND rewards bins that become very full overall.
    """
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    can_fit_mask = bins_remain_cap >= item
    
    # If no bins can fit the item, return scores with -inf.
    if not np.any(can_fit_mask):
        return scores

    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # --- Component 1: Proportional Fill of Remaining Capacity ---
    # This component captures the 'proportional fill' insight (from top-ranked heuristics).
    # It prioritizes bins where the item uses a high percentage of the *currently available* capacity.
    # A higher power amplifies the preference for very tight proportional fits, aggressively filling current gaps.
    PROP_FILL_POWER = 3.0  
    PROP_FILL_SCALING_FACTOR = 10.0 

    # Add a tiny epsilon to prevent division by zero for edge cases (e.g., bins_remain_cap being 0).
    # numpy.finfo(float).eps is the smallest positive float for this dtype.
    proportional_fill_ratio = item / (fitting_bins_remain_cap + np.finfo(float).eps)
    proportional_fill_score = (proportional_fill_ratio ** PROP_FILL_POWER) * PROP_FILL_SCALING_FACTOR

    # --- Component 2: Non-linear Total Utilization Bonus ---
    # This component is adapted from 'priority_v0', rewarding bins that achieve
    # very high overall utilization, strategically aiming to "close" bins.
    UTIL_POWER = 4.0               
    BONUS_SCALING_FACTOR = 5.0     
    CLIP_MIN_UTIL = 0.5            

    remaining_after_fit = fitting_bins_remain_cap - item
    new_utilization = (BIN_CAPACITY - remaining_after_fit) / BIN_CAPACITY

    effective_utilization = np.maximum(0.0, new_utilization - CLIP_MIN_UTIL)
    utilization_bonus = (effective_utilization**UTIL_POWER) * item * BONUS_SCALING_FACTOR

    # Combine the two strategic components. The proportional fill drives immediate local
    # efficiency, while the utilization bonus guides towards global bin reduction.
    scores[can_fit_mask] = proportional_fill_score + utilization_bonus

    return scores
```
