```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    base_fit_priority: float = 50.0,
    rem_cap_penalty_factor: float = 3.5,
    rem_cap_penalty_exponent: float = 1.7,
    relative_fill_bonus_factor: float = 8.0,
    min_allowed_priority: float = 0.5,
    non_fitting_priority: float = -10.0
) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements a refined "Best Fit" strategy, designed to more
    aggressively prioritize optimal fits and encourage efficient bin utilization.
    It introduces a non-linear penalty for remaining capacity and a significant
    bonus for the item's relative size compared to the bin's current available space.

    Args:
        item: Size of item to be added to the bin. Must be greater than 0.
        bins_remain_cap: Array of current remaining capacities for each bin.
        base_fit_priority: A base score given to any bin where the item can fit.
                           This sets the initial priority before any adjustments.
        rem_cap_penalty_factor: A multiplier for the non-linear penalty applied
                                based on the remaining capacity after item placement.
                                Higher values penalize larger remaining capacities more.
        rem_cap_penalty_exponent: An exponent (typically > 1) applied to the
                                  remaining capacity when calculating the penalty.
                                  A value greater than 1 makes the penalty for
                                  larger remaining capacities disproportionately
                                  more severe, thereby strongly favoring very tight fits
                                  (i.e., less remaining space).
        relative_fill_bonus_factor: A multiplier for a bonus that rewards placing
                                    an item into a bin where it occupies a significant
                                    proportion of the bin's *current* available capacity.
                                    This encourages "filling up" bins that are already
                                    partially utilized or finding relatively large items
                                    for smaller remaining spaces.
        min_allowed_priority: The minimum priority score a bin can receive if
                              the item fits. This acts as a floor, preventing
                              valid placement priorities from becoming too low.
        non_fitting_priority: The priority score assigned to bins where the
                              item does not fit. Typically a low or negative value.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities with the score for non-fitting bins
    priorities = np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)

    # Identify bins where the item can fit
    # Item size must be strictly greater than 0 for typical BPP, so bins_remain_cap[can_fit_mask] > 0
    can_fit_mask = bins_remain_cap >= item

    # Only process if there are bins where the item can fit
    if np.any(can_fit_mask):
        fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
        remaining_after_placement = fitting_bins_remain_cap - item

        # 1. Non-linear Penalty for Remaining Capacity (Enhanced Best Fit)
        # Applying an exponent > 1 ensures that as remaining_after_placement increases,
        # the penalty grows disproportionately faster than a linear penalty,
        # thus heavily favoring bins that result in very little remaining space.
        rem_cap_penalty = rem_cap_penalty_factor * (remaining_after_placement ** rem_cap_penalty_exponent)

        # 2. Relative Fill Bonus
        # This bonus term rewards placing the item where it constitutes a larger
        # fraction of the *current* available capacity in the bin.
        # This encourages filling up bins that are already partially full,
        # or fitting smaller items into smaller remaining gaps, thereby "tidying up" bins.
        # Division by zero is inherently avoided here because if item > 0, then
        # fitting_bins_remain_cap must be > 0 (as fitting_bins_remain_cap >= item).
        relative_fill_ratio = item / fitting_bins_remain_cap
        relative_fill_bonus = relative_fill_bonus_factor * relative_fill_ratio

        # Combine the base priority, non-linear penalty, and relative fill bonus
        calculated_priorities = base_fit_priority - rem_cap_penalty + relative_fill_bonus

        # Ensure that the calculated priority does not fall below a minimum allowed value
        calculated_priorities = np.maximum(calculated_priorities, min_allowed_priority)

        # Assign the calculated priorities to the corresponding bins
        priorities[can_fit_mask] = calculated_priorities

    return priorities
```
