```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    base_fit_priority: float = 50.0,
    rem_cap_penalty_factor: float = 3.5,
    rem_cap_penalty_exponent: float = 1.7,
    relative_fill_bonus_factor: float = 8.0,
    perfect_fit_bonus: float = 15.0,
    min_allowed_priority: float = 0.5,
    non_fitting_priority: float = -10.0,
    epsilon: float = 1e-9
) -> np.ndarray:
    """Returns priority score for each bin. Combines non-linear Best Fit, relative fill, and a bonus for perfect fits.

    Aggressively prioritizes tight packing and efficient bin closure by penalizing
    larger remaining capacities and explicitly rewarding perfect fits, alongside
    a bonus for filling a significant proportion of a bin's available space.
    """
    # Initialize all priorities with the score for non-fitting bins
    priorities = np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)

    # Identify bins where the item can fit
    # Item size must be strictly greater than 0, so bins_remain_cap[can_fit_mask] > 0
    can_fit_mask = bins_remain_cap >= item

    # Only process if there are bins where the item can fit
    if np.any(can_fit_mask):
        fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
        remaining_after_placement = fitting_bins_remain_cap - item

        # 1. Non-linear Penalty for Remaining Capacity (Enhanced Best Fit)
        # Larger remaining capacity after placement results in a disproportionately higher penalty,
        # thereby strongly favoring very tight fits (less remaining space).
        rem_cap_penalty = rem_cap_penalty_factor * (remaining_after_placement ** rem_cap_penalty_exponent)

        # 2. Relative Fill Bonus
        # Rewards placing the item where it occupies a significant proportion of the
        # bin's *current* available capacity, encouraging efficient utilization.
        # Division by zero is avoided because fitting_bins_remain_cap >= item > 0.
        relative_fill_ratio = item / fitting_bins_remain_cap
        relative_fill_bonus = relative_fill_bonus_factor * relative_fill_ratio

        # Combine the base priority, non-linear penalty, and relative fill bonus
        calculated_priorities = base_fit_priority - rem_cap_penalty + relative_fill_bonus

        # 3. Explicit Bonus for Perfect Fits
        # Identify bins where the item would perfectly fit (remaining capacity is effectively zero).
        # This provides a strong incentive to 'close' bins, which is crucial for minimizing bin count.
        perfect_fit_mask = (remaining_after_placement < epsilon)

        # Apply the perfect fit bonus to the calculated priorities for these bins
        calculated_priorities[perfect_fit_mask] += perfect_fit_bonus

        # Ensure that the calculated priority does not fall below a minimum allowed value
        calculated_priorities = np.maximum(calculated_priorities, min_allowed_priority)

        # Assign the calculated priorities to the corresponding bins
        priorities[can_fit_mask] = calculated_priorities

    return priorities
```
