```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    BIN_CAPACITY: float,
    base_priority: float = 0.0,
    bf_max_score: float = 100.0,
    bf_decay_rate: float = 0.1,  # Smaller value means stronger preference for very tight fits
    util_bonus_factor: float = 50.0,
    util_exponent: float = 3.0,  # Higher exponent disproportionately rewards very high utilization
    exact_fit_threshold: float = 0.001,  # Threshold for considering "near exact fit"
    exact_fit_value: float = 20.0,  # Additional bonus for near exact fit
    min_allowed_priority: float = 0.5,
    non_fitting_priority: float = -100.0
) -> np.ndarray:
    """Returns priority with which we want to add item to each bin for online BPP.

    This function implements a sophisticated Best Fit Decreasing (BFD) like strategy,
    adapted for online bin packing, by combining multiple non-linear scoring components:
    1. A strong, exponentially decaying bonus for minimal remaining capacity (Best Fit).
    2. A power-law bonus for high overall bin utilization post-placement (Bin Closure).
    3. An explicit bonus for near-perfect fits, promoting bin closure.

    The aim is to meticulously calibrate the scoring to align with the objective
    of minimizing the total number of bins used by encouraging tight packing
    and efficient bin consolidation.

    Args:
        item: Size of item to be added to the bin. Must be greater than 0.
        bins_remain_cap: Array of current remaining capacities for each bin.
        BIN_CAPACITY: The total (original) capacity of a single bin. This is
                      crucial for calculating the overall bin utilization.
        base_priority: A foundational score applied to any bin where the item fits.
                       This sets a baseline for valid placements.
        bf_max_score: The maximum possible score given for a perfect Best Fit
                      (0 remaining capacity after placement). This score diminishes
                      exponentially as the remaining capacity increases, strongly
                      favoring very tight fits.
        bf_decay_rate: Controls the steepness of the exponential decay for the
                       Best Fit score. A smaller value means the score drops
                       more rapidly, making the heuristic highly aggressive in
                       favoring extremely tight fits over merely good ones.
        util_bonus_factor: Multiplier for the bonus derived from the bin's
                           overall utilization after the item is placed. This
                           component encourages filling bins as much as possible.
        util_exponent: An exponent (typically > 1) applied to the
                       post-placement utilization ratio. A higher exponent
                       makes the bonus disproportionately larger for bins
                       that become very highly utilized, strongly encouraging
                       bin closure and maximizing density.
        exact_fit_threshold: A small floating-point value. If the remaining
                             capacity after placing the item is below or equal
                             to this threshold, it's considered a "near exact fit".
        exact_fit_value: An additional, substantial bonus awarded for a
                         near exact fit, further promoting bin closure and
                         preventing tiny, unusable fragments of space.
        min_allowed_priority: The lowest priority score a bin can receive if
                              the item fits. Ensures valid bins always have
                              a minimum positive priority, preventing them from
                              being overlooked due to other negative influences.
        non_fitting_priority: The priority score assigned to bins where the
                              item does not fit. This should be a significantly
                              low or negative value (e.g., -100.0) to ensure
                              these bins are never selected when a fit is possible.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Ensure bins_remain_cap is a numpy array for efficient computations
    if not isinstance(bins_remain_cap, np.ndarray):
        bins_remain_cap = np.array(bins_remain_cap, dtype=float)

    # Initialize all priorities with the score for non-fitting bins
    priorities = np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)

    # Identify bins where the item can fit (remaining capacity is greater than or equal to item size)
    can_fit_mask = bins_remain_cap >= item

    # Only process if there are bins where the item can fit
    if np.any(can_fit_mask):
        fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
        remaining_after_placement = fitting_bins_remain_cap - item

        # Initialize calculated priorities for fitting bins with the base priority
        calculated_priorities = np.full_like(remaining_after_placement, fill_value=base_priority, dtype=float)

        # 1. Best Fit Component: Exponential score based on minimal remaining capacity.
        # This component heavily rewards bins that result in very little empty space.
        # As 'remaining_after_placement' increases, the exponential term 'exp(-x/rate)'
        # quickly approaches zero, thus diminishing the score for poorer fits.
        best_fit_score = bf_max_score * np.exp(-remaining_after_placement / bf_decay_rate)
        calculated_priorities += best_fit_score

        # 2. Post-Placement Overall Bin Utilization Bonus: Power-law score.
        # This component evaluates how full the bin becomes *relative to its total capacity*
        # after the item is placed. It directly promotes bin closure.
        # The total space filled in the bin after placement is BIN_CAPACITY - remaining_after_placement.
        post_placement_utilization = (BIN_CAPACITY - remaining_after_placement) / BIN_CAPACITY
        
        # Clip utilization to ensure it's within [0, 1] due to potential floating point inaccuracies
        post_placement_utilization = np.clip(post_placement_utilization, 0.0, 1.0)
        
        # Apply a power law (util_exponent > 1) to disproportionately reward very high utilization
        util_bonus = util_bonus_factor * (post_placement_utilization ** util_exponent)
        calculated_priorities += util_bonus

        # 3. Near-Exact Fit Bonus: Explicitly reward bins that are almost perfectly filled.
        # This helps in actively 'closing' bins by giving a significant boost to near-empty remainder.
        near_exact_fit_mask = remaining_after_placement <= exact_fit_threshold
        calculated_priorities[near_exact_fit_mask] += exact_fit_value

        # Ensure that the calculated priority does not fall below a minimum allowed value.
        # This acts as a floor, preventing valid fitting bins from inadvertently
        # receiving a very low or negative priority, thereby ensuring they remain viable choices.
        calculated_priorities = np.maximum(calculated_priorities, min_allowed_priority)

        # Assign the final calculated priorities to the corresponding fitting bins
        priorities[can_fit_mask] = calculated_priorities

    return priorities
```
