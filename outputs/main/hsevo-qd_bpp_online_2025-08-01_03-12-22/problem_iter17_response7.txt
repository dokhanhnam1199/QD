```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    BIN_CAPACITY: float,
    base_fit_priority: float = 50.0,
    rem_cap_penalty_factor: float = 3.5,
    rem_cap_penalty_exponent: float = 1.7,
    relative_fill_bonus_factor: float = 8.0,
    global_util_bonus_factor: float = 20.0,
    global_util_exponent: float = 3.0,
    min_util_for_global_bonus: float = 0.7,
    min_allowed_priority: float = 0.5,
    non_fitting_priority: float = -10.0
) -> np.ndarray:
    """Combines aggressive Best Fit with a strategic global utilization bonus for intelligent bin closure.
    Prioritizes tight fits and strongly rewards bins nearing full capacity to minimize total bins used.
    """
    # Initialize all priorities with the score for non-fitting bins
    priorities = np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Only process if there are bins where the item can fit
    if np.any(can_fit_mask):
        fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
        remaining_after_placement = fitting_bins_remain_cap - item

        # 1. Non-linear Penalty for Remaining Capacity (Enhanced Best Fit from priority_v0)
        # Heavily favors bins with very little remaining space after placement, due to exponent > 1.
        rem_cap_penalty = rem_cap_penalty_factor * (remaining_after_placement ** rem_cap_penalty_exponent)

        # 2. Relative Fill Bonus (from priority_v0)
        # Rewards placing the item where it occupies a significant proportion of the bin's *current available* capacity.
        # This helps in "tidying up" partially utilized bins by filling smaller gaps effectively.
        relative_fill_ratio = item / fitting_bins_remain_cap
        relative_fill_bonus = relative_fill_bonus_factor * relative_fill_ratio

        # 3. Strategic Global Utilization Bonus (Inspired by priority_v1's utilization bonus)
        # This bonus aims for "Intelligent Bin Closure" by strongly rewarding bins that become
        # highly utilized (close to BIN_CAPACITY) after item placement. This is distinct from
        # relative_fill_bonus, which focuses on the remaining gap. This encourages minimizing bin count.
        
        # Calculate the new total utilization of the bin if the item were placed there.
        # (BIN_CAPACITY - remaining_capacity_after_placement) / BIN_CAPACITY
        new_total_utilization = (BIN_CAPACITY - remaining_after_placement) / BIN_CAPACITY
        
        # Apply a threshold: bonus only applies if utilization exceeds a minimum value.
        effective_global_util = np.maximum(0.0, new_total_utilization - min_util_for_global_bonus)
        
        # Non-linear bonus: A higher exponent makes this bonus grow disproportionately faster
        # as the bin approaches 100% utilization, heavily prioritizing near-full bins.
        global_util_bonus = global_util_bonus_factor * (effective_global_util ** global_util_exponent)

        # Combine all priority components: base score, tight-fit preference, relative gap-fill, and global bin closure incentive.
        calculated_priorities = (
            base_fit_priority
            - rem_cap_penalty
            + relative_fill_bonus
            + global_util_bonus
        )

        # Ensure that the calculated priority does not fall below a minimum allowed value for valid placements.
        calculated_priorities = np.maximum(calculated_priorities, min_allowed_priority)

        # Assign the calculated priorities to the corresponding bins.
        priorities[can_fit_mask] = calculated_priorities

    return priorities
```
