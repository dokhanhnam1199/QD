```python
import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                base_fit_priority: float = 40.67957013415283,
                remaining_capacity_penalty_factor: float = 2.527225052325968,
                min_allowed_priority: float = 0.5896372460377476,
                non_fitting_priority: float = -8.783827459234484,
                perfect_fit_bonus_factor: float = 5.0,
                perfect_fit_sharpness: float = 15.0,
                fragment_penalty_amount: float = 10.0,
                fragment_threshold: float = 0.1,
                epsilon_for_fragment_check: float = 1e-6) -> np.ndarray:
    """Prioritizes bins using a Best Fit strategy, augmented with a bonus for near-perfect fits and a penalty for small, fragmented remaining capacities.
    """
    # Initialize all priorities with the value for non-fitting bins
    priorities = np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Only process if there are bins where the item can fit
    if np.any(can_fit_mask):
        # Calculate the remaining capacity for bins where the item could be placed
        remaining_after_placement = bins_remain_cap[can_fit_mask] - item

        # 1. Base Best Fit Score: Prioritizes bins that minimize remaining capacity after placement.
        # This is the core 'priority_v0' logic.
        base_scores = base_fit_priority - (remaining_capacity_penalty_factor * remaining_after_placement)

        # 2. Near-Perfect Fit Bonus: Rewards bins that become very full or achieve a perfect fit.
        # The exponential term provides a strong, non-linear incentive as remaining_after_placement approaches zero.
        # This component encourages tightly packed bins.
        perfect_fit_bonus = perfect_fit_bonus_factor * np.exp(-perfect_fit_sharpness * remaining_after_placement)

        # 3. Fragmentation Penalty: Penalizes leaving very small, non-zero amounts of space that might be unusable.
        # This aims to prevent creation of 'junk' space that's too small for future items.
        is_fragment = (remaining_after_placement > epsilon_for_fragment_check) & \
                      (remaining_after_placement <= fragment_threshold)
        fragment_penalty = np.where(is_fragment, fragment_penalty_amount, 0.0)

        # Combine all components: Base Best Fit + Perfect Fit Bonus - Fragmentation Penalty
        calculated_priorities = base_scores + perfect_fit_bonus - fragment_penalty

        # Ensure that the calculated priority does not fall below a minimum allowed value for fitting bins
        calculated_priorities = np.maximum(calculated_priorities, min_allowed_priority)

        # Assign the calculated priorities to the corresponding bins
        priorities[can_fit_mask] = calculated_priorities

    return priorities
```
