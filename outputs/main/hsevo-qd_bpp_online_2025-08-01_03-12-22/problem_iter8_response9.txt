```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best Fit with adaptive relative space utilization.

    Prioritizes tight fits and high proportional filling, exploiting patterns
    for efficient space allocation and reducing bin fragmentation.
    """
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity after placing the item (Best Fit component)
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Calculate the utilization ratio: how much of the bin's current capacity
    # the item would fill. This aims to exploit patterns by favoring bins
    # where the item makes a significant relative impact, helping to finish
    # off bins or efficiently use smaller available capacities.
    # Assumes item > 0 for typical BPP. If item is 0, ratio is 0.
    # If bins_remain_cap is 0, it only happens if item is also 0 (due to mask),
    # avoiding division by zero for positive items.
    utilization_ratio = item / bins_remain_cap[can_fit_mask]

    # Combine the two objectives:
    # 1. Maximize utilization ratio (positive contribution)
    # 2. Minimize remaining capacity (by making its negative a positive contribution,
    #    similar to priority_v0's 'Best Fit' principle)
    # This creates a priority score that rewards both relative space efficiency
    # and absolute tightness of fit, serving as an adaptive strategy.
    scores[can_fit_mask] = utilization_ratio - remaining_after_fit

    return scores
```
