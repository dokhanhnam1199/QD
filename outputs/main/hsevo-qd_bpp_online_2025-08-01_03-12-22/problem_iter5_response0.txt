```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority for bin selection, prioritizing perfect fits, then tight fits.

    This heuristic explicitly weights perfect matches extremely high. For non-perfect fits,
    it applies a score inversely proportional to the remaining capacity, reinforcing the
    'Best Fit' principle to maximize bin density and minimize the total bin count.
    """
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    can_fit_mask = bins_remain_cap >= item
    
    # Calculate the remaining capacity if the item were placed in each eligible bin.
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Identify bins where the item fits perfectly (remaining capacity is exactly zero).
    perfect_fit_mask = (remaining_after_fit == 0)
    
    # Assign a very high priority score to perfect fits to ensure their selection.
    scores[can_fit_mask][perfect_fit_mask] = 1e9 

    # For non-perfect fits, score them inversely proportional to the remaining capacity.
    # A smaller positive remainder (tighter fit) results in a higher score.
    # Add a small epsilon to avoid division by zero and for numerical stability.
    non_perfect_mask = ~perfect_fit_mask
    if np.any(non_perfect_mask):
        scores[can_fit_mask][non_perfect_mask] = 1.0 / (remaining_after_fit[non_perfect_mask] + 1e-9)

    return scores
```
