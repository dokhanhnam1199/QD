```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin.
    This heuristic implements a "Best Fit" strategy: it prioritizes bins
    that, after accommodating the item, would have the smallest remaining capacity.
    This helps in compacting items and reserving larger bins for larger future items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item will have a score of -inf.
        For bins that can fit the item, the score is the negative of the remaining
        capacity after placing the item. A smaller (closer to zero) remaining
        capacity will result in a higher (less negative) priority score.
    """
    # Calculate the potential remaining capacity if the current item were placed in each bin.
    # If a bin has capacity C and the item is I, the remaining would be C - I.
    potential_remaining = bins_remain_cap - item

    # Initialize priority scores. Bins where the item cannot fit should have the lowest possible priority.
    # We use -np.inf for bins that cannot accommodate the item.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit (i.e., remaining capacity would be non-negative).
    can_fit_mask = potential_remaining >= 0

    # For bins where the item fits, the priority is the negative of the potential remaining capacity.
    # This means:
    # - If potential_remaining is small (e.g., 0.1), score is -0.1 (high priority relative to other fitting bins).
    # - If potential_remaining is large (e.g., 0.9), score is -0.9 (low priority relative to other fitting bins).
    # This effectively makes "smaller remainder" equal to "higher priority".
    priority_scores[can_fit_mask] = -potential_remaining[can_fit_mask]

    return priority_scores
```
