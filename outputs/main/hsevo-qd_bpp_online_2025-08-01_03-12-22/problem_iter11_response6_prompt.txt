{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority scores for each bin, based on an \"Adaptive Fullness Prioritization\" heuristic.\n\n    This heuristic mutates the standard 'Best Fit' by introducing strategic considerations\n    for space management beyond simple minimization of remaining capacity. It aims to:\n\n    1.  **Strongly Reward Perfect Fits**: A perfect fit (leaving 0 remaining capacity)\n        is the most efficient use of space, effectively \"closing\" a bin. This is\n        given a significant bonus.\n    2.  **Prioritize High Overall Utilization**: Similar to Best Fit, bins that\n        become very full after placing the item are generally preferred.\n    3.  **Penalize Fragmented Space**: A minor penalty is applied to bins that\n        are left with a very small, non-zero remaining capacity. Such 'fragments'\n        are often too small to be useful for subsequent items and can lead to\n        wasted space or increased bin count if many such bins accumulate.\n        This encourages the selection of bins that either achieve a perfect fit,\n        or leave a more 'useful' (larger) amount of remaining space, allowing for\n        greater flexibility for future items.\n\n    The goal is to not just minimize residual space, but to do so in a way\n    that minimizes \"unusable\" small fragments, promoting overall\n    packing efficiency and potentially reducing the number of bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        BIN_CAPACITY: The maximum capacity of a single bin. Default to 1.0,\n                      assuming item and capacities are normalized.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score for each bin.\n        Higher scores indicate a more desirable bin. Bins where the item does not\n        fit receive a score of -infinity.\n    \"\"\"\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    can_fit_mask = bins_remain_cap >= item\n\n    # Calculate remaining capacity after hypothetical placement for fitting bins\n    remaining_after_fit = bins_remain_cap[can_fit_mask] - item\n\n    # Primary scoring component: Utilization after placing the item.\n    # A higher utilization means less remaining space, similar to Best Fit.\n    # Scores range from 0 (empty bin after placement) to 1 (full bin).\n    utilization_score = (BIN_CAPACITY - remaining_after_fit) / BIN_CAPACITY\n\n    # Define a small epsilon for floating point comparisons to handle near-zero values.\n    epsilon = 1e-9\n\n    # Strategic Bonus: Strongly reward perfect fits.\n    # Using np.isclose for robust floating point comparison to zero.\n    perfect_fit_mask = np.isclose(remaining_after_fit, 0.0, atol=epsilon)\n    # Adding a substantial bonus (e.g., 1.0) makes perfect fits unequivocally\n    # the highest priority, pushing their score beyond the normal 0-1 range.\n    utilization_score[perfect_fit_mask] += 1.0\n\n    # Strategic Penalty: Slightly penalize very small, non-zero remaining capacities.\n    # These are deemed \"fragmented\" or potentially \"wasted\" space.\n    # The threshold for what constitutes a \"small fragment\" can be tuned,\n    # here set to 5% of the bin capacity.\n    fragment_threshold = 0.05 * BIN_CAPACITY\n    \n    # Identify bins that have a small, non-zero remainder.\n    # Ensure it's greater than epsilon to not penalize perfect fits.\n    fragment_mask = (remaining_after_fit > epsilon) & (remaining_after_fit < fragment_threshold)\n    \n    # Subtract a small penalty (e.g., 0.1) to make these bins slightly less\n    # attractive compared to those leaving a more useful or zero remainder.\n    utilization_score[fragment_mask] -= 0.1\n\n    # Assign the calculated scores to the bins where the item can fit.\n    scores[can_fit_mask] = utilization_score\n\n    return scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n### Analyze & experience\n- Comparing (1st) vs (2nd), we see that they are identical. They implement a \"proportional fill\" heuristic, prioritizing bins where the item consumes the highest ratio of the bin's *remaining* capacity (`item / bins_remain_cap`). This approach, surprisingly ranked highest, suggests that aggressively filling a bin relative to its current emptiness, thereby quickly pushing it towards full utilization or closure, is more effective for this problem than minimizing absolute remaining space or relying on broader utilization bonuses.\n\nComparing (3rd) vs (4th), Heuristic 3rd, a complex Best Fit combined with a non-linear bonus for high bin utilization, significantly outperforms Heuristic 4th, which is Best Fit with a simple penalty for tiny remainders. This indicates that a strong, non-linear incentive to achieve very full bins (as in 3rd) is a more potent strategy for overall efficiency than merely discouraging small fragments. The scaling of the bonus by `item` in 3rd also suggests valuing larger items' contribution to bin completion.\n\nComparing (5th) vs (6th), Heuristic 6th, which adds a minor penalty for leaving very small, non-zero remainders on top of Best Fit, performs better than Heuristic 5th, the pure Best Fit. This demonstrates that even subtle improvements like discouraging fragmentation can yield measurable gains over a foundational heuristic, highlighting the importance of managing \"unusable\" leftover space.\n\nComparing (7th) vs (8th), Heuristic 7th, an \"Adaptive Fullness Prioritization\" which explicitly rewards perfect fits and penalizes fragments, is ranked higher than Heuristic 8th, the standard Best Fit. This reinforces that targeted bonuses for perfect fits (leading to full bin closure) and explicit penalties for fragmented space significantly improve packing efficiency beyond simple minimization of remaining capacity.\n\nComparing (9th) vs (10th), Heuristic 9th (identical to 3rd), with its non-linear utilization bonus, outperforms Heuristic 10th (identical to 5th and 8th), the standard Best Fit. This further supports the value of sophisticated, goal-oriented scoring mechanisms over basic heuristics.\n\nComparing (19th) vs (20th), these two are identical and ranked lowest. They return an array of zeros or a constant priority, effectively providing no intelligent guidance for bin selection. Their position at the bottom of the list unequivocally demonstrates that any form of thoughtful prioritization, even a simple Best Fit, is vastly superior to a non-discriminating approach.\n\nOverall: The ranking strongly suggests that for optimal bin packing, heuristics should move beyond simple \"best fit\" to incorporate sophisticated strategies. The best performing heuristics prioritize relative progress towards bin completion (proportional fill) or provide strong, non-linear incentives for achieving high utilization and perfect fits, while also actively managing fragmented space through penalties. Simply returning zeros or a constant value yields the worst performance, underscoring the necessity of intelligent decision-making at each placement step.\n- \n*   **Keywords**: Emergent Complexity, Adaptive Scoring, Probabilistic Selection, High-Dimensional Tuning.\n*   **Advice**: Design heuristics with self-adjusting weights for multi-factor scores based on observed performance. Integrate probabilistic decision components that evolve over time, favoring highly utilized states. Explore non-monotonic, context-sensitive reward functions.\n*   **Avoid**: Simple objectives, explicit problem data mapping for informed decisions, intuitive expressions, or focusing on implementation clarity and predefined optimal differentiation.\n*   **Explanation**: This approach fosters emergent, dynamic behaviors beyond fixed logic, requiring sophisticated tuning across a complex, adaptive landscape, pushing past superficial simplicity.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}