```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float = 1.0) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic, "Strategic Gap Optimization", aims to improve upon Best Fit
    by strategically prioritizing bin states that are more likely to lead to a
    lower total number of bins. It categorizes the remaining capacity after an
    item is placed into several types: 'perfect fit', 'large and useful gap',
    'small awkward gap', and 'medium awkward gap'.

    The core idea is to:
    1.  **Maximize Perfect Fits**: Give the highest priority to bins where the item
        fits exactly, resulting in zero remaining capacity. This fully utilizes a bin.
    2.  **Encourage Large Useful Gaps**: Assign high priority (second highest band) to bins
        that, after placing the item, would be left with a substantial amount of remaining
        capacity (e.g., more than half the bin's capacity). This strategy keeps bins "open"
        for larger items that may arrive later, avoiding the creation of many fragmented bins.
        Within this category, larger remaining gaps are preferred.
    3.  **Penalize Medium Awkward Gaps**: Give the lowest priority to bins that would be left
        with a "medium" amount of remaining capacity (e.g., between 10% and 50% of bin capacity).
        These gaps are often too small for large future items and too large for small items
        to fill perfectly, making them inefficient and hard to fill later.
    4.  **Slightly Prefer Smaller Awkward Gaps**: Assign a priority in between "Large Useful Gaps"
        and "Medium Awkward Gaps" for "small" remaining capacities (e.g., less than 10% but not zero).
        While not perfect, very small non-zero gaps are generally less problematic than medium ones.

    This approach is "Impact-Driven" by attempting to avoid problematic bin states
    and "Strategically Selects" based on the future utility of the remaining bin space,
    rather than just immediate tightness.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        bin_capacity: The total capacity of a single bin (default is 1.0, assuming normalized items).

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Scores are designed to rank the desirability of different remaining capacities.
        Bins where the item does not fit receive a score of -infinity to ensure they are never chosen.
    """
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    can_fit_mask = bins_remain_cap >= item

    # Get indices of bins where the item fits
    fitting_bin_indices = np.where(can_fit_mask)[0]
    
    # Calculate remaining capacity after placing the item for fitting bins
    rem_after_fit_for_indices = bins_remain_cap[fitting_bin_indices] - item

    # Define thresholds and constants for scoring bands
    PERFECT_FIT_SCORE = 1000.0  # Highest priority for perfect fits
    
    # Range for Large Useful Gaps: (LARGE_GAP_THRESHOLD, bin_capacity]
    # Score will range from 0 (at threshold) to LARGE_GAP_MAX_SCORE (at bin_capacity)
    LARGE_GAP_THRESHOLD = bin_capacity / 2.0  # e.g., 0.5 for 1.0 capacity
    LARGE_GAP_MAX_SCORE = 100.0

    # Range for Small Awkward Gaps: (0, SMALL_GAP_THRESHOLD]
    # Score will range from -SMALL_AWKWARD_PENALTY_MAX (at threshold) to a value close to 0 (as rem approaches 0)
    SMALL_GAP_THRESHOLD = bin_capacity / 10.0 # e.g., 0.1 for 1.0 capacity
    SMALL_AWKWARD_PENALTY_MAX = 10.0 # Max negative score (magnitude) for small awkward gaps

    # Range for Medium Awkward Gaps: (SMALL_GAP_THRESHOLD, LARGE_GAP_THRESHOLD]
    # Score will range from -SMALL_AWKWARD_PENALTY_MAX (at SMALL_GAP_THRESHOLD) to -MEDIUM_AWKWARD_PENALTY_MAX (at LARGE_GAP_THRESHOLD)
    MEDIUM_AWKWARD_PENALTY_MAX = 100.0 # Max negative score (magnitude) for medium awkward gaps

    # Category 1: Perfect Fit (rem_after_fit == 0)
    perfect_fit_mask_in_fitting = (rem_after_fit_for_indices == 0)
    scores[fitting_bin_indices[perfect_fit_mask_in_fitting]] = PERFECT_FIT_SCORE

    # Category 2: Large Useful Gap (rem_after_fit > LARGE_GAP_THRESHOLD)
    large_gap_mask_in_fitting = (rem_after_fit_for_indices > LARGE_GAP_THRESHOLD)
    rem_values_for_large_gap = rem_after_fit_for_indices[large_gap_mask_in_fitting]
    # Linear interpolation: score increases from 0 to LARGE_GAP_MAX_SCORE
    scores[fitting_bin_indices[large_gap_mask_in_fitting]] = \
        (rem_values_for_large_gap - LARGE_GAP_THRESHOLD) / (bin_capacity - LARGE_GAP_THRESHOLD) * LARGE_GAP_MAX_SCORE

    # Category 3: Small Awkward Gap (0 < rem_after_fit <= SMALL_GAP_THRESHOLD)
    small_awkward_mask_in_fitting = (rem_after_fit_for_indices > 0) & \
                                     (rem_after_fit_for_indices <= SMALL_GAP_THRESHOLD)
    rem_values_for_small_awkward = rem_after_fit_for_indices[small_awkward_mask_in_fitting]
    # Linear interpolation: score decreases (becomes more negative) from ~0 to -SMALL_AWKWARD_PENALTY_MAX
    scores[fitting_bin_indices[small_awkward_mask_in_fitting]] = \
        - (rem_values_for_small_awkward / SMALL_GAP_THRESHOLD) * SMALL_AWKWARD_PENALTY_MAX

    # Category 4: Medium Awkward Gap (SMALL_GAP_THRESHOLD < rem_after_fit <= LARGE_GAP_THRESHOLD)
    medium_awkward_mask_in_fitting = (rem_after_fit_for_indices > SMALL_GAP_THRESHOLD) & \
                                       (rem_after_fit_for_indices <= LARGE_GAP_THRESHOLD)
    rem_values_for_medium_awkward = rem_after_fit_for_indices[medium_awkward_mask_in_fitting]
    
    # Linear interpolation: score decreases from -SMALL_AWKWARD_PENALTY_MAX to -MEDIUM_AWKWARD_PENALTY_MAX
    # as remaining capacity goes from SMALL_GAP_THRESHOLD to LARGE_GAP_THRESHOLD.
    y1 = -SMALL_AWKWARD_PENALTY_MAX
    y2 = -MEDIUM_AWKWARD_PENALTY_MAX
    x1 = SMALL_GAP_THRESHOLD
    x2 = LARGE_GAP_THRESHOLD

    scores[fitting_bin_indices[medium_awkward_mask_in_fitting]] = \
        y1 + (rem_values_for_medium_awkward - x1) * (y2 - y1) / (x2 - x1)
    
    return scores
```
