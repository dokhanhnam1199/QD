```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins combining a non-linear tight-fit reward with a relative fill bonus.
    Focuses on minimizing remaining space while maximizing immediate bin utilization,
    giving significant preference to perfect or near-perfect fits.
    """
    # Initialize scores for all bins to negative infinity.
    # This ensures that bins where the item cannot fit will never be selected.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Determine which bins have sufficient remaining capacity for the item.
    can_fit_mask = bins_remain_cap >= item

    # If no bin can fit the item, return the initialized scores
    if not np.any(can_fit_mask):
        return scores

    # Filter to only bins where the item fits
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # Calculate the remaining capacity if the item were to be placed in these bins.
    remaining_after_fit = fitting_bins_remain_cap - item

    # Component 1: Non-linear tight-fit reward
    # This term heavily rewards very small remaining capacities (tight fits),
    # with perfect fits (remaining_after_fit = 0) receiving a very high, finite score.
    # np.finfo(float).eps is used as epsilon to prevent division by zero and provide a large score for perfect fits.
    epsilon = np.finfo(float).eps
    tight_fit_score = 1.0 / (remaining_after_fit + epsilon)

    # Component 2: Relative fill bonus
    # This term rewards placing the item into a bin where it occupies a large
    # proportion of the *current* available space, promoting efficient bin closure.
    # Since fitting_bins_remain_cap is guaranteed to be >= item (and item > 0),
    # the denominator will always be positive, so epsilon is not strictly needed here for division by zero.
    relative_fill_bonus = item / fitting_bins_remain_cap

    # Combine the scores. The non-linear tight-fit score will dominate for
    # very tight or perfect fits, while the relative fill bonus provides
    # additional discrimination for other fitting bins, aligning with multi-component scoring.
    scores[can_fit_mask] = tight_fit_score + relative_fill_bonus

    return scores
```
