```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit, proportional fill, perfect fit bonus, and small remainder penalty.
    Prioritizes tight fits, aggressive bin utilization, incentivizes complete
    bin fills, and penalizes unproductive small fragments.
    """
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity if item were placed in suitable bins
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Component 1: Best Fit Score (minimizes absolute remaining space)
    # A smaller positive remainder results in a larger (less negative) score.
    # A perfect fit (0 remainder) gets a score of 0 from this component.
    best_fit_score = -remaining_after_fit

    # Component 2: Proportional Fill Bonus (maximizes utilization relative to current emptiness)
    # Rewards placing an item into a bin where it consumes a large proportion of the *current*
    # remaining capacity. This encourages rapid consumption of existing bin space.
    # Scaled by 'item' size, giving larger items more influence in this specific bonus,
    # aligning with insights about valuing larger items' contribution to bin completion.
    # np.finfo(float).eps is added for numerical stability to prevent division by zero.
    proportional_fill_bonus = (item / (bins_remain_cap[can_fit_mask] + np.finfo(float).eps)) * item

    # Component 3: Perfect Fit Incentive (strong bonus for achieving zero remaining capacity)
    # Provides a significant, non-linear incentive to perfectly fill a bin, leading to its closure.
    # This aligns with the 'Adaptive Fullness Prioritization' and 'Non-linear Bonus' insights.
    PERFECT_FIT_BONUS_MAGNITUDE = 100.0 # A tunable constant for strong incentive
    perfect_fit_incentive = np.where(remaining_after_fit == 0, PERFECT_FIT_BONUS_MAGNITUDE, 0.0)

    # Component 4: Small Remainder Penalty (discourages leaving tiny, potentially unusable fragments)
    # Applies an additional penalty if the remainder is positive but falls below a
    # specified threshold, mitigating fragmentation.
    SMALL_REMAINDER_THRESHOLD = 0.05 # Tunable threshold to define 'small'
    PENALTY_FOR_SMALL_REMAINDER = -10.0 # Tunable penalty magnitude
    small_remainder_penalty = np.where(
        (remaining_after_fit > 0) & (remaining_after_fit <= SMALL_REMAINDER_THRESHOLD),
        PENALTY_FOR_SMALL_REMAINDER,
        0.0
    )

    # Combine all weighted components to form the final priority score for suitable bins.
    # The implicit weights are defined by the chosen magnitudes of each component.
    combined_score_for_fit = (
        best_fit_score +
        proportional_fill_bonus +
        perfect_fit_incentive +
        small_remainder_penalty
    )

    # Assign calculated scores to bins where the item can fit
    scores[can_fit_mask] = combined_score_for_fit

    return scores
```
