```python
import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                base_fit_priority: float = 40.67957013415283,
                remaining_capacity_penalty_factor: float = 2.527225052325968,
                min_allowed_priority: float = 0.5896372460377476,
                non_fitting_priority: float = -8.783827459234484) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function refines the "Best Fit" strategy by applying an exponential
    penalty based on the remaining capacity after placement. This means
    bins that leave very little remaining capacity are highly prioritized,
    with the priority dropping off sharply as the remaining capacity increases.

    The core intuition is to drastically reward very tight fits, aligning with
    the goal of minimizing waste and maximizing bin utilization. This provides
    stronger discrimination between "almost perfect" and "good" fits compared
    to a linear penalty.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        base_fit_priority: A base score given to any bin where the item can fit.
                           This is the maximum possible score, achieved for a perfect fit.
        remaining_capacity_penalty_factor: A multiplier for the exponential penalty.
                                           A higher value causes the priority to
                                           drop more rapidly as remaining capacity
                                           increases, emphasizing tighter fits more heavily.
        min_allowed_priority: The minimum priority score a bin can receive if
                              the item fits. This acts as a floor, preventing
                              priorities from becoming too low or negative
                              for valid placements, especially when the exponential
                              decay is very steep for larger remaining capacities.
        non_fitting_priority: The priority score assigned to bins where the
                              item does not fit. Typically a negative value to
                              ensure they are not selected.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities with the value for non-fitting bins
    priorities = np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Only process if there are bins where the item can fit
    if np.any(can_fit_mask):
        # Calculate the remaining capacity for bins where the item could be placed
        remaining_after_placement = bins_remain_cap[can_fit_mask] - item

        # Calculate the priority for these bins using an exponential decay:
        # P = base_fit_priority * exp(-penalty_factor * remaining_capacity)
        # This heavily prioritizes bins leaving very little space, as exp(-x)
        # rapidly approaches 0 as x increases.
        calculated_priorities = base_fit_priority * np.exp(-remaining_capacity_penalty_factor * remaining_after_placement)

        # Ensure that the calculated priority does not fall below a minimum allowed value.
        # This safeguards against extremely low priorities for valid but less ideal fits.
        calculated_priorities = np.maximum(calculated_priorities, min_allowed_priority)

        # Assign the calculated priorities to the corresponding bins
        priorities[can_fit_mask] = calculated_priorities

    return priorities
```
