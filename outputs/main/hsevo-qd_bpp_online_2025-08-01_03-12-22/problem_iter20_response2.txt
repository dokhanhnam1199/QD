```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Multi-factor priority: non-linear penalty for remaining space, bonus for relative fill,
    prioritizing efficient use and tight fits without an explicit perfect-fit bonus.
    """
    # Parameters calibrated for robust performance, favoring tight fits and high utilization.
    base_fit_priority: float = 50.0
    rem_cap_penalty_factor: float = 3.5
    rem_cap_penalty_exponent: float = 1.7  # Non-linear exponent strongly penalizes larger remainders
    relative_fill_bonus_factor: float = 8.0
    min_allowed_priority: float = 0.5
    non_fitting_priority: float = -10.0

    priorities = np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)
    can_fit_mask = bins_remain_cap >= item

    if np.any(can_fit_mask):
        fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
        remaining_after_placement = fitting_bins_remain_cap - item

        # 1. Non-linear Penalty for Remaining Capacity
        # Heavily penalizes bins that leave significant unused space, promoting tighter fits.
        rem_cap_penalty = rem_cap_penalty_factor * (remaining_after_placement ** rem_cap_penalty_exponent)

        # 2. Relative Fill Bonus
        # Rewards placing the item where it occupies a larger proportion of the bin's current capacity,
        # encouraging higher bin utilization. Ensures fitting_bins_remain_cap > 0 since item > 0.
        relative_fill_ratio = item / fitting_bins_remain_cap
        relative_fill_bonus = relative_fill_bonus_factor * relative_fill_ratio

        # Combine scores: Base priority + relative fill bonus - remaining capacity penalty.
        # This implicitly handles "perfect fits" without a discrete bonus, as very small
        # `remaining_after_placement` will incur minimal `rem_cap_penalty`.
        calculated_priorities = base_fit_priority - rem_cap_penalty + relative_fill_bonus

        # Ensure priorities do not fall below a minimum allowed value for valid fitting bins,
        # preventing them from being indistinguishable from non-fitting bins due to aggressive penalties.
        calculated_priorities = np.maximum(calculated_priorities, min_allowed_priority)

        priorities[can_fit_mask] = calculated_priorities

    return priorities
```
