```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using a refined Best Fit strategy, penalizing very small remainders.
    Designed for focused discrimination and controlled refinement based on core packing intuition.
    """
    # 1. Focused Discrimination: Initialize scores to negative infinity for all bins.
    # This ensures that bins where the item cannot fit are never chosen, providing clear non-choice.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify which bins have enough capacity for the item.
    can_fit_mask = bins_remain_cap >= item

    # 2. Prioritize Core Intuition (Best Fit): Calculate the remaining capacity for fittable bins.
    # The Best Fit strategy aims to minimize the leftover space. By negating this value,
    # a smaller remainder results in a higher (less negative) priority score.
    # A perfect fit (0 remainder) receives the highest possible score (0.0).
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item
    scores[can_fit_mask] = -remaining_after_fit

    # 3. Parameter Prudence & Controlled Refinement: Define thresholds and penalties for fragmentation.
    # These empirical values aim to discourage creating very tiny, potentially unusable gaps.
    # TUNING_NOTE: Adjust TINY_REMAINDER_THRESHOLD and PENALTY_FOR_TINY_REMAINDER based on typical item
    # and bin size distributions to optimize their impact.
    TINY_REMAINDER_THRESHOLD = 0.05  # e.g., 5% of assumed normalized bin capacity
    PENALTY_FOR_TINY_REMAINDER = 0.001 # A small penalty to slightly deprioritize fragmented space.

    # Apply a penalty to bins that would leave a very small, non-zero remainder.
    # This 'controlled refinement' improves over pure Best Fit by subtly guiding towards
    # either perfect fits or larger, more useful remaining spaces, avoiding detrimental fragmentation.
    # A small epsilon (1e-9) is used for robust floating-point comparison to ensure non-zero check.
    tiny_remainder_cond = (remaining_after_fit > 1e-9) & (remaining_after_fit < TINY_REMAINDER_THRESHOLD)
    scores[can_fit_mask][tiny_remainder_cond] -= PENALTY_FOR_TINY_REMAINDER

    return scores
```
