```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Implements 'Best Fit' heuristic: prioritizes bins that, after placing the item,
    leave the smallest positive remaining capacity, minimizing wasted space.
    Unfitting bins receive the lowest priority.

    Args:
        item: Size of item to be added.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining space in each bin if the item were placed there.
    # A smaller positive value indicates a better fit.
    potential_residual_space = bins_remain_cap - item

    # Initialize priorities. Bins that cannot accommodate the item are assigned
    # an extremely low priority score (negative infinity).
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask to identify only the bins where the item can fit.
    can_fit_mask = potential_residual_space >= 0

    # For the fitting bins, assign priority. We want to maximize the score for
    # bins with the smallest positive residual space. Taking the negative of
    # the residual space achieves this: a perfect fit (0 residual) gets 0 priority
    # (highest), while larger residuals get more negative (lower) priorities.
    priorities[can_fit_mask] = -potential_residual_space[can_fit_mask]

    return priorities
```
