```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority scores by combining Best Fit with a consolidation preference.

    This heuristic primarily targets the tightest fit (minimal remaining capacity).
    For bins yielding identical tightest fits, it subtly favors those already
    more full, aiming to consolidate items and potentially close bins faster.
    """
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    can_fit_mask = bins_remain_cap >= item

    # Primary Best Fit calculation: negative of remaining capacity after placement.
    # A perfect fit results in 0.0, which is the highest possible score.
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item
    primary_best_fit_scores = -remaining_after_fit

    # Introduce a small epsilon to ensure primary Best Fit dominance.
    EPSILON = 1e-9

    # Secondary preference: among bins tied by Best Fit, subtly favor those
    # that are already more full (have smaller initial remaining capacity).
    # By subtracting `bins_remain_cap * EPSILON`, a smaller `bins_remain_cap`
    # (meaning a fuller bin) results in a smaller subtraction, thus a higher
    # overall score. This encourages "closing" bins by filling them up faster.
    consolidation_bonus = -(bins_remain_cap[can_fit_mask] * EPSILON)

    # Combine the primary Best Fit scores with the consolidation preference.
    scores[can_fit_mask] = primary_best_fit_scores + consolidation_bonus

    return scores
```
