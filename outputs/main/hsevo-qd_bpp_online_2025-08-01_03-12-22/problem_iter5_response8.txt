```python
import numpy as np

# Assuming a standard bin capacity. In many BPP contexts, items and bins
# are normalized such that the bin capacity is 1.0.
# This constant needs to be known for evaluating the score of a new bin.
BIN_CAPACITY = 1.0 

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority for bin selection using an extended Best Fit strategy.

    Prioritizes existing bins by 'tightest fit' (smallest positive remaining capacity).
    Crucially, it includes a score for opening a *new* bin, allowing the decision
    logic to select the new bin if it offers a better 'fit' than any existing bin,
    thereby guiding the overall bin packing process more holistically.
    """
    # Initialize scores for all existing bins. Bins where the item cannot fit
    # initially receive a score of negative infinity, making them non-selectable.
    scores_existing_bins = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify existing bins that have sufficient remaining capacity for the item.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the Best Fit score for each *fitting* existing bin.
    # The score is the negative of the remaining capacity after the item is placed.
    # A smaller positive remainder results in a larger (less negative) score.
    # A perfect fit (0.0 remainder) yields the highest score (0.0).
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item
    scores_existing_bins[can_fit_mask] = -remaining_after_fit

    # Calculate the score for a potential *new* bin.
    # A new bin starts with full capacity (BIN_CAPACITY).
    # Its score is calculated using the same Best Fit logic.
    score_for_new_bin = -np.inf  # Default if item is too large even for a new bin
    if item <= BIN_CAPACITY:
        score_for_new_bin = -(BIN_CAPACITY - item)
    
    # Combine scores: append the new bin's score to the existing bins' scores.
    # The highest score across this combined array will indicate the optimal choice,
    # whether it's an existing bin or the decision to open a new one.
    all_scores = np.append(scores_existing_bins, score_for_new_bin)

    return all_scores
```
