```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    As Nikola Tesla, I envision a world of perfect efficiency and resonant harmony.
    For this 'packing current' to flow optimally, we must find the bin
    that accepts the 'electrical charge' (item) with the least possible
    dissipation of 'potential' (remaining capacity). This is analogous
    to achieving a perfect circuit where no energy is wasted.

    Therefore, we prioritize bins that allow for the 'tightest fit',
    leaving the minimal 'residual charge' or empty space.
    A perfectly filled bin yields the highest priority, for it embodies
    the most efficient utilization of capacity, akin to a perfectly
    tuned resonant circuit. Bins that cannot accommodate the item are
    excluded, as they represent an open circuit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Initialize priorities with an extremely low value for all bins.
    # This represents an 'open circuit' state where no item can pass.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify the 'conductive paths' - bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # For the 'conductive' bins, calculate a score.
    # We want to maximize the score for the *smallest* remaining space after placing the item.
    # This means minimizing `(bins_remain_cap[i] - item)`.
    # To convert this into a maximization problem, we compute `item - bins_remain_cap[i]`.
    # Consider:
    # - If `item = 5` and `bin_cap = 5` (perfect fit): Score = `5 - 5 = 0`
    # - If `item = 5` and `bin_cap = 6` (1 unit left): Score = `5 - 6 = -1`
    # - If `item = 5` and `bin_cap = 10` (5 units left): Score = `5 - 10 = -5`
    # The maximum value (0 in this case) indicates the best fit.
    # If no perfect fit, the least negative value (e.g., -1) is chosen,
    # ensuring the tightest possible fit.
    priorities[can_fit_mask] = item - bins_remain_cap[can_fit_mask]

    return priorities
```
