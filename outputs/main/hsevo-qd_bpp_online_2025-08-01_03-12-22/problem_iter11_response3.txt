```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes proportional fill, rewards perfect fits strongly, and penalizes tiny remainders.
    Aims for efficient space utilization and discourages fragmentation.
    """
    # Initialize scores, ensuring bins where item cannot fit have the lowest possible priority.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can physically fit.
    can_fit_mask = bins_remain_cap >= item
    
    # Extract remaining capacities for only those bins where the item fits.
    valid_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # Base score: Proportional Fill. This prioritizes bins where the item consumes a larger
    # fraction of the *current* remaining capacity. This encourages quickly filling bins
    # relative to their current emptiness, aiming for rapid utilization or closure.
    scores[can_fit_mask] = item / valid_bins_remain_cap

    # Calculate the remaining capacity in each bin *after* the item would be placed.
    # This is used for subsequent bonus and penalty calculations.
    remaining_after_fit = valid_bins_remain_cap - item

    # Define empirical constants for scoring adjustments. These may require tuning.
    PERFECT_FIT_BONUS = 2.0            # A substantial bonus to ensure perfect fits are highly preferred.
    TINY_REMAINDER_THRESHOLD = 0.05    # Threshold for what constitutes a "tiny" leftover space (e.g., 5% of bin).
    PENALTY_FOR_TINY_REMAINDER = 0.001 # A small penalty to slightly discourage leaving fragmented space.

    # Refinement 1: Apply a strong bonus for perfect fits.
    # Perfect fits mean the item exactly fills the remaining capacity, allowing the bin to be "closed" efficiently.
    # Using a small epsilon (1e-9) for robust floating-point comparison to zero.
    perfect_fit_cond = (remaining_after_fit < 1e-9)
    scores[can_fit_mask][perfect_fit_cond] += PERFECT_FIT_BONUS

    # Refinement 2: Apply a penalty for very small, non-zero remainders.
    # This discourages leaving highly fragmented, potentially unusable space in a bin.
    tiny_remainder_cond = (remaining_after_fit > 1e-9) & (remaining_after_fit < TINY_REMAINDER_THRESHOLD)
    scores[can_fit_mask][tiny_remainder_cond] -= PENALTY_FOR_TINY_REMAINDER

    return scores
```
