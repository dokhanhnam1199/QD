```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, BIN_CAPACITY: float,
                perfect_fit_bonus: float = 25.0,
                perfect_fit_epsilon: float = 1e-9,
                utilization_power: float = 5.0,
                utilization_bonus_factor: float = 15.0,
                min_utilization_threshold: float = 0.6,
                non_fitting_priority: float = -1e9) -> np.ndarray:
    """
    Combines Best Fit with strong incentives for bin closure and high utilization.
    Prioritizes minimizing remaining capacity, significantly rewards perfect fits,
    and applies a non-linear bonus for bins becoming highly utilized.
    """
    # Initialize priorities, setting a very low score for bins where the item cannot fit.
    priorities = np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)

    # Identify bins where the item can be placed.
    can_fit_mask = bins_remain_cap >= item

    if np.any(can_fit_mask):
        fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
        remaining_after_placement = fitting_bins_remain_cap - item

        # 1. Base Best Fit Score: Rewards tighter fits (less remaining capacity).
        # A smaller 'remaining_after_placement' results in a higher (less negative) base score.
        base_scores = -remaining_after_placement

        # 2. Perfect Fit Bonus: A substantial bonus for bins that are exactly filled by the item.
        # This aggressively promotes "closing" bins to maximize space efficiency.
        perfect_fit_mask_local = np.isclose(remaining_after_placement, 0.0, atol=perfect_fit_epsilon)
        perfect_fit_bonuses = np.zeros_like(base_scores)
        perfect_fit_bonuses[perfect_fit_mask_local] = perfect_fit_bonus

        # 3. High Utilization Bonus: Applies a non-linear bonus for bins becoming highly utilized.
        # This incentivizes configurations that make bins very full, even if not perfectly closed.
        # The bonus scales by the item size and is amplified by 'utilization_power' for high utilization.
        current_fill_of_fitting_bins = BIN_CAPACITY - fitting_bins_remain_cap
        new_utilization = (current_fill_of_fitting_bins + item) / BIN_CAPACITY

        # Only apply the bonus if the new utilization exceeds a certain threshold.
        effective_utilization = np.maximum(0.0, new_utilization - min_utilization_threshold)

        # The non-linear power strongly favors bins that are nearly full.
        # Scaling by 'item' size ensures larger items contributing to high utilization are more rewarded.
        utilization_bonuses = (effective_utilization**utilization_power) * item * utilization_bonus_factor

        # Combine all scoring components.
        calculated_priorities = base_scores + perfect_fit_bonuses + utilization_bonuses

        # Assign the calculated priorities to the bins where the item can fit.
        priorities[can_fit_mask] = calculated_priorities

    return priorities
```
