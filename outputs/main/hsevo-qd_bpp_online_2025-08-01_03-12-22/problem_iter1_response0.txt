```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version implements a 'Best Fit' heuristic principle.
    It prioritizes existing bins that, after accommodating the item, would have the
    smallest remaining capacity. This aims to maximize the utilization of each
    chosen bin and potentially reduce the total number of bins used.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity for each bin if the item were placed there.
    # A negative value indicates the item does not fit.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize priority scores for all bins.
    # Bins where the item does not fit should have a very low priority,
    # ensuring they are not chosen unless no other option is available (e.g., new bin needed).
    priority_scores = np.full_like(bins_remain_cap, np.NINF, dtype=float)

    # Create a boolean mask to identify bins where the item can actually fit.
    fits_mask = potential_remaining_cap >= 0

    # For bins where the item fits, assign a score based on the 'Best Fit' strategy.
    # The 'Best Fit' strategy seeks to minimize the remaining capacity after placement.
    # To translate this into a "higher is better" priority score, we use the negative
    # of the potential remaining capacity.
    # Example:
    # - If remaining capacity is 0 (perfect fit), score is 0.0 (highest possible for a fit).
    # - If remaining capacity is 0.1, score is -0.1.
    # - If remaining capacity is 0.5, score is -0.5.
    # This correctly makes 0.0 > -0.1 > -0.5, selecting the tightest fit.
    priority_scores[fits_mask] = -potential_remaining_cap[fits_mask]

    return priority_scores
```
