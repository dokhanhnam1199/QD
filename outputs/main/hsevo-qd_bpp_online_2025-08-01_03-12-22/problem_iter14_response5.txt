```python
import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                base_fit_priority: float = 40.67957013415283,
                remaining_capacity_penalty_factor: float = 2.527225052325968,
                fill_ratio_bonus_factor: float = 1.25, # New parameter for proportional fill bonus
                min_allowed_priority: float = 0.5896372460377476,
                non_fitting_priority: float = -8.783827459234484) -> np.ndarray:
    """Combines "Best Fit" with a "Proportional Fill" bonus to reinforce density
    and improve discrimination among optimal bins for superior packing.
    """
    priorities = np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)

    can_fit_mask = bins_remain_cap >= item

    if np.any(can_fit_mask):
        fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
        remaining_after_placement = fitting_bins_remain_cap - item

        # Base Best-Fit priority: penalize larger remaining capacities.
        calculated_priorities = base_fit_priority - (remaining_capacity_penalty_factor * remaining_after_placement)

        # Proportional Fill Bonus: add a bonus for items that fill a larger
        # proportion of the *current* bin capacity, reinforcing dense packing.
        # This term amplifies the "Best Fit" for tighter initial spaces.
        # Handle division by zero for bins_remain_cap if it somehow became 0,
        # though can_fit_mask already prevents item > 0 from fitting 0 capacity.
        # For item=0, fill_ratio would be 0, so no bonus.
        fill_ratio = np.divide(item, fitting_bins_remain_cap,
                               out=np.zeros_like(fitting_bins_remain_cap, dtype=float),
                               where=fitting_bins_remain_cap != 0)
        calculated_priorities += (fill_ratio_bonus_factor * fill_ratio)

        # Ensure priority doesn't fall below a minimum for fitting bins.
        calculated_priorities = np.maximum(calculated_priorities, min_allowed_priority)

        priorities[can_fit_mask] = calculated_priorities

    return priorities
```
