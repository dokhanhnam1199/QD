```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    completion_strength: float = 1000.0,
    completion_decay_rate: float = 0.02,
    relative_fill_bonus_factor: float = 25.0,
    large_rem_cap_penalty_factor: float = 8.0,
    large_rem_cap_exponent: float = 2.0,
    min_allowed_priority: float = 0.1,
    non_fitting_priority: float = -10000.0,
    epsilon: float = 1e-12
) -> np.ndarray:
    """Returns priority for online Bin Packing, emphasizing aggressive bin closure and efficient space utilization.

    This function implements a highly tuned "Best Fit" strategy with strong,
    non-linear incentives for bin completion (exact or near-exact fits) and
    efficient use of existing space. It heavily penalizes large remaining
    capacities after placement, fostering a strategy that aims to pack items
    as tightly as possible to minimize the total number of bins used.

    Args:
        item: Size of item to be added to the bin. Must be greater than 0.
        bins_remain_cap: Array of current remaining capacities for each bin.
        completion_strength: A very high multiplier for items that perfectly
                             or almost perfectly fill a bin. This is the primary
                             driver for bin closure, ensuring a huge advantage for
                             bins that are left with minimal or zero remaining capacity.
        completion_decay_rate: Controls how sharply the completion bonus decays
                               as the remaining capacity after placement deviates
                               from zero. Smaller values mean a sharper decay,
                               more strongly prioritizing extremely tight fits.
                               (e.g., 0.01 for very sharp, 0.1 for slightly broader)
        relative_fill_bonus_factor: Multiplier for a bonus that rewards placing
                                    an item into a bin where it occupies a significant
                                    proportion of the bin's *current* available capacity.
                                    This encourages "filling up" existing gaps and
                                    making progress on partially filled bins.
        large_rem_cap_penalty_factor: A multiplier for the non-linear penalty
                                      applied based on the remaining capacity after
                                      item placement. Higher values penalize larger
                                      remaining capacities more severely.
        large_rem_cap_exponent: An exponent (typically > 1.5) applied to the
                                remaining capacity when calculating the penalty.
                                A higher exponent makes the penalty for larger
                                remaining capacities disproportionately more severe,
                                strongly discouraging poor fits.
        min_allowed_priority: The minimum priority score a bin can receive if
                              the item fits. Acts as a floor to prevent valid
                              placement priorities from becoming too low, ensuring
                              they remain distinguishable from non-fitting bins.
        non_fitting_priority: The priority score assigned to bins where the
                              item does not fit. A very low or highly negative
                              value ensures these bins are never chosen.
        epsilon: A small constant used to prevent division by zero or
                 other numerical instabilities, especially when capacities
                 or decay rates are extremely close to zero.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)

    can_fit_mask = bins_remain_cap >= item

    if np.any(can_fit_mask):
        fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
        remaining_after_placement = fitting_bins_remain_cap - item

        # Ensure no negative remaining capacity due to floating point inaccuracies for near-exact fits.
        # This is crucial for the exponential decay to behave correctly.
        remaining_after_placement[remaining_after_placement < 0] = 0.0

        # Component 1: Bin Completion / Near-Completion Bonus (Exponential Decay)
        # This is the most crucial component. It provides an extremely high,
        # exponentially decaying bonus for 'remaining_after_placement' values
        # that are very close to zero, effectively and aggressively
        # prioritizing exact or near-exact fits for bin closure.
        completion_bonus = completion_strength * np.exp(
            -remaining_after_placement / (completion_decay_rate + epsilon)
        )

        # Component 2: Relative Fill Bonus
        # Rewards the item for occupying a large proportion of the *currently available*
        # space in the bin. This incentivizes progress on partially filled bins
        # and helps to "tidy up" existing gaps efficiently.
        # 'fitting_bins_remain_cap + epsilon' in the denominator prevents division by zero
        # in edge cases where capacity might theoretically become zero.
        relative_fill_ratio = item / (fitting_bins_remain_cap + epsilon)
        relative_fill_bonus = relative_fill_bonus_factor * relative_fill_ratio

        # Component 3: Penalty for Large Remaining Capacity (Non-linear Penalty)
        # This term strongly discourages selecting bins that would result in a
        # significant amount of unused or 'wasted' space. The exponent ensures
        # that the penalty grows disproportionately faster for larger remaining capacities,
        # reinforcing the Best Fit principle.
        rem_cap_penalty = large_rem_cap_penalty_factor * (
            remaining_after_placement ** large_rem_cap_exponent
        )

        # Combine all strategic components to form the priority score.
        # The sum of powerful bonuses for good fits minus a significant penalty for poor fits.
        calculated_priorities = (
            completion_bonus
            + relative_fill_bonus
            - rem_cap_penalty
        )

        # Apply a floor to ensure that valid placement priorities do not
        # drop below a minimum threshold, maintaining their distinguishability
        # from the extremely low 'non_fitting_priority'.
        calculated_priorities = np.maximum(calculated_priorities, min_allowed_priority)

        # Assign the calculated priorities back to the appropriate bins.
        priorities[can_fit_mask] = calculated_priorities

    return priorities
```
