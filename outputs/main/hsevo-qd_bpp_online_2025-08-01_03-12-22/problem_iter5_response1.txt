```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority score for each bin. Combines Best Fit with a penalty for very small, non-zero remainders.
    Prioritizes perfect fits, then larger useful gaps over tiny unusable ones, aiming to minimize wasted fragmented space.
    """
    # Initialize scores for all bins to negative infinity, ensuring un-fittable bins are never chosen.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Mask for bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity if item were placed. This is the core Best Fit principle.
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item
    # Initial score: negative of remaining capacity. Perfect fit (0 remainder) gets 0.0 (highest).
    scores[can_fit_mask] = -remaining_after_fit

    # Define thresholds for what constitutes a "tiny" and potentially "unusable" remainder.
    # These values are empirical and might need tuning based on typical item/bin size distributions.
    TINY_REMAINDER_THRESHOLD = 0.05  # e.g., 5% of an assumed normalized bin capacity (e.g., if max capacity is 1.0)
    PENALTY_FOR_TINY_REMAINDER = 0.001 # A small penalty, ensuring a perfect fit (0 remainder) still receives the highest score.

    # Identify valid bins that would result in a very small, non-zero remainder.
    # A small epsilon (1e-9) is used to robustly check for non-zero floating-point values.
    tiny_remainder_cond = (remaining_after_fit > 1e-9) & (remaining_after_fit < TINY_REMAINDER_THRESHOLD)

    # Apply a penalty to the scores of bins that leave a tiny, potentially unusable remainder.
    # This slightly discourages leaving highly fragmented space, encouraging either a perfect fit
    # or a more substantial, potentially useful remaining gap for future, larger items.
    scores[can_fit_mask][tiny_remainder_cond] -= PENALTY_FOR_TINY_REMAINDER

    return scores
```
