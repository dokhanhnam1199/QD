```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                bin_total_capacity: float = 1.0,
                base_fit_priority: float = 50.0,
                remaining_capacity_penalty_factor: float = 100.0,
                penalty_exponent: float = 2.0,
                perfect_fit_bonus: float = 100.0,
                perfect_fit_tolerance: float = 1e-6,
                min_allowed_priority: float = 0.5,
                non_fitting_priority: float = -1e9) -> np.ndarray:
    """
    Prioritizes bins using a best-fit strategy with a non-linear penalty for remaining capacity
    and a strong bonus for near-perfect fits, promoting intelligent bin closure.
    """
    # Initialize all priorities with a very low score for bins where the item cannot fit.
    priorities = np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)

    # Identify bins where the item can be placed.
    can_fit_mask = bins_remain_cap >= item

    # Process only if there are bins that can accommodate the item.
    if np.any(can_fit_mask):
        fitting_bins_caps = bins_remain_cap[can_fit_mask]
        remaining_after_placement = fitting_bins_caps - item

        # Scale remaining capacity relative to the bin's total capacity.
        # This normalizes the remaining space to a [0, 1] range, suitable for exponentiation.
        scaled_remaining = np.clip(remaining_after_placement / bin_total_capacity, 0.0, 1.0)

        # Calculate a base priority for fitting bins. A non-linear penalty is applied:
        # larger remaining capacities are penalized more aggressively due to the `penalty_exponent`.
        calculated_priorities = base_fit_priority - (remaining_capacity_penalty_factor * (scaled_remaining ** penalty_exponent))

        # Add a significant bonus for "perfect fits" (remaining capacity very close to zero).
        # This strongly incentivizes intelligent bin closure, improving overall packing density.
        perfect_fit_mask = remaining_after_placement <= perfect_fit_tolerance
        if np.any(perfect_fit_mask):
            calculated_priorities[perfect_fit_mask] += perfect_fit_bonus

        # Ensure the calculated priority for a fitting bin does not fall below a specified minimum.
        calculated_priorities = np.maximum(calculated_priorities, min_allowed_priority)

        # Assign the calculated priorities to the corresponding bins.
        priorities[can_fit_mask] = calculated_priorities

    return priorities
```
