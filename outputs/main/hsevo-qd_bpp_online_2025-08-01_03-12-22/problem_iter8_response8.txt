```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, BIN_CAPACITY: float = 1.0) -> np.ndarray:
    """
    Implements a Robust Best Fit strategy, maximizing bin utilization by minimizing
    remaining capacity without complex penalty/bonus rules.
    """
    # This simplified approach focuses purely on achieving the highest post-placement bin fullness,
    # avoiding complex tuning issues identified in previous adaptive heuristics.
    
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity after hypothetical placement for fitting bins
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Primary scoring component: Utilization after placing the item.
    # Higher utilization means less remaining space, directly implementing Best Fit.
    # A perfect fit (0 remaining) will result in a utilization score of 1.0, naturally
    # making it the highest priority among valid bins.
    utilization_score = (BIN_CAPACITY - remaining_after_fit) / BIN_CAPACITY

    # Assign the calculated scores to the bins where the item can fit.
    scores[can_fit_mask] = utilization_score

    return scores
```
