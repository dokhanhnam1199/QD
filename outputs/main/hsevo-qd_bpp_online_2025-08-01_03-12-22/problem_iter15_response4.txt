```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    base_fit_priority: float = 50.0,
    remaining_capacity_penalty_factor: float = 3.0,
    perfect_fit_bonus: float = 20.0,
    min_allowed_priority: float = 0.5,
    non_fitting_priority: float = -10.0
) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function enhances the "Best Fit" strategy by applying principles of:
    1.  **Focused Discrimination for Perfect Fits**: Assigns a significant bonus to bins
        where the item fits perfectly, prioritizing complete bin utilization.
    2.  **Aggressive Penalty for Large Gaps**: Uses a non-linear (quadratic) penalty
        for remaining capacity, strongly favoring bins that result in very tight
        fits over those leaving larger, potentially less useful, gaps.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        base_fit_priority: A base score given to any bin where the item can fit.
                           This sets the initial priority before any penalties.
        remaining_capacity_penalty_factor: A multiplier for the penalty applied
                                           based on the *square* of the remaining capacity.
                                           A higher value means larger remaining capacities
                                           are penalized much more heavily,
                                           encouraging a stronger "best-fit" approach.
        perfect_fit_bonus: An additional bonus score applied if the item
                           fits perfectly into a bin (remaining capacity is 0).
        min_allowed_priority: The minimum priority score a bin can receive if
                              the item fits. This acts as a floor, preventing
                              priorities from becoming too low or negative
                              for valid placements.
        non_fitting_priority: The priority score assigned to bins where the
                              item does not fit. Typically 0 or a negative value.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities with the value for non-fitting bins
    priorities = np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Only process if there are bins where the item can fit
    if np.any(can_fit_mask):
        # Calculate the remaining capacity for bins where the item could be placed
        remaining_after_placement = bins_remain_cap[can_fit_mask] - item

        # Calculate the priority for these bins using a quadratic penalty:
        # P = base_fit_priority - (penalty_factor * remaining_capacity^2)
        # This heavily penalizes larger remaining capacities, promoting very tight fits.
        calculated_priorities = base_fit_priority - (remaining_capacity_penalty_factor * remaining_after_placement**2)

        # Apply a significant bonus for perfect fits (remaining capacity is exactly 0)
        perfect_fit_mask = remaining_after_placement == 0
        if np.any(perfect_fit_mask):
            calculated_priorities[perfect_fit_mask] += perfect_fit_bonus

        # Ensure that the calculated priority does not fall below a minimum allowed value
        calculated_priorities = np.maximum(calculated_priorities, min_allowed_priority)

        # Assign the calculated priorities to the corresponding bins
        priorities[can_fit_mask] = calculated_priorities

    return priorities
```
