import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, no_fit_score: float = -7794903491.709345) -> np.ndarray:
    """Focuses on maximizing bin utilization by prioritizing bins that offer the highest proportional fill.

    This heuristic adaptively weighs each bin's suitability based on the item's
    relative size to the bin's current capacity, exploiting the pattern
    of high-density packing for efficient bin closure.
    """
    # Initialize scores for all bins using the configurable no_fit_score,
    # ensuring bins where the item cannot fit are never selected.
    scores = np.full_like(bins_remain_cap, no_fit_score, dtype=float)

    # Identify bins with sufficient remaining capacity for the item.
    can_fit_mask = bins_remain_cap >= item

    # For valid bins, calculate the 'fill ratio': the proportion of the bin's
    # current remaining capacity that the item would occupy.
    # This adaptively prioritizes bins that, upon accommodating the item, achieve
    # the highest relative utilization, leading to a more compact packing strategy.
    # A higher ratio indicates a tighter fit relative to the available space,
    # exploiting the pattern of efficient, high-density placement.
    # Note: Assumes item > 0. If item is 0, division would be 0/X (score 0), which is handled.
    # If item > 0 and bins_remain_cap is 0, can_fit_mask would be False.
    scores[can_fit_mask] = item / bins_remain_cap[can_fit_mask]

    return scores
