```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """This 'Best Fit' heuristic prioritizes bins that, after accommodating the item,
    leave the least remaining capacity. It minimizes wasted space, leading to compact
    packing. Bins unable to fit the item receive lowest priority.
    """
    # Initialize all priorities to negative infinity. This ensures that any bin
    # where the item does not fit will never be chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can physically fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining space if the item were placed in fitting bins.
    # This is a measure of the 'tightness' of the fit.
    remaining_space_after_fit = bins_remain_cap[can_fit_mask] - item

    # To implement Best Fit, we assign priorities by taking the negative
    # of this remaining space. A perfect fit (0 remaining) gets highest priority (0).
    # Tighter fits (smaller positive remaining) get priorities closer to 0.
    priorities[can_fit_mask] = -remaining_space_after_fit

    return priorities
```
