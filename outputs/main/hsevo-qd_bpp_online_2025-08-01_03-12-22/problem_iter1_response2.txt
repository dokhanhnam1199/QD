```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    As Isaac Newton, I observe the universe and deduce its fundamental principles.
    In the realm of packing, an efficient arrangement minimizes 'void' or 'empty space',
    much as matter coalesces to its most compact form under gravitational forces.
    Thus, for an incoming 'item', the optimal 'bin' is one that, upon receipt,
    will leave the least 'remaining capacity'. This 'Best Fit' principle guides our
    design, ensuring that bins are filled as completely as possible before
    new ones must be opened. This minimizes the overall count of 'active bins',
    much like a system naturally settles into its lowest energy state.

    The priority score is formulated such that:
    1. Bins incapable of accommodating the 'item' (where `bins_remain_cap < item`)
       are deemed invalid and are assigned an infinitesimally low priority (-np.inf),
       ensuring they are never selected.
    2. For valid bins, the score is calculated as the negative of the remaining capacity
       after the 'item' has been placed (`-(bins_remain_cap - item)`).
       This mathematical construction naturally elevates bins that yield a smaller
       post-placement remaining capacity. A perfect fit (zero remaining capacity)
       achieves the highest possible score of zero, while increasingly larger
       remaining capacities result in increasingly negative scores.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of current remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with a priority score for each bin.
        A higher score indicates a more desirable bin according to the Best Fit principle.
    """
    # Calculate the hypothetical remaining capacity for each bin if the item were placed.
    potential_remaining_cap = bins_remain_cap - item

    # Initialize all priorities to a very low value (negative infinity).
    # This serves as a baseline, primarily for bins where the item cannot fit.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)

    # Identify bins where the item can actually fit (remaining capacity >= 0).
    valid_bins_mask = potential_remaining_cap >= 0

    # For these valid bins, calculate the priority score based on the Best Fit principle.
    # The negative of the remaining capacity ensures that smaller remaining capacities
    # (i.e., tighter fits) result in larger (less negative, or zero) priority scores.
    # A perfect fit (potential_remaining_cap == 0) will yield a score of 0,
    # which is the highest possible priority for any valid bin.
    priorities[valid_bins_mask] = -potential_remaining_cap[valid_bins_mask]

    return priorities
```
