```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority for adding an item to each bin using a Best Fit strategy.

    This heuristic prioritizes bins that snugly fit the item, minimizing
    wasted space. Bins that cannot accommodate the item receive the lowest
    priority.
    """
    # Initialize all priorities to a very low value, ensuring non-fitting bins are ignored.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Calculate the space that would remain in each bin if the item were placed there.
    potential_remainders = bins_remain_cap - item

    # Create a mask for bins where the item can actually fit (remaining capacity is non-negative).
    fits_mask = potential_remainders >= 0

    # For fitting bins, assign priority based on the negative of the remaining space.
    # This ensures that bins with smaller positive remainders (closer to a perfect fit)
    # receive higher priority scores (closer to zero). A perfect fit (0 remainder) gets a score of 0.
    priorities[fits_mask] = -potential_remainders[fits_mask]

    return priorities
```
