```python
import numpy as np

# Global constant for bin capacity.
BIN_CAPACITY = 1.0 

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins using a non-linear 'Best Fit' (Quantum Fit) complemented by
    a focused penalty for leaving extremely small, often unusable, fragments.
    This balances efficient space utilization with avoiding 'fragmentation'.
    """
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    can_fit_mask = bins_remain_cap >= item
    
    # If no bin can fit the item, return early with all scores as -inf.
    if not np.any(can_fit_mask):
        return scores

    fitting_bins_idx = np.where(can_fit_mask)[0]
    current_bin_caps = bins_remain_cap[fitting_bins_idx]
    remaining_after_fit = current_bin_caps - item

    # Component 1: Fundamental Tightness (Quantum Fit)
    # A non-linear reward: 0 for a perfect fit, increasingly negative for larger remainders.
    # This strongly drives the heuristic towards minimizing wasted space.
    score_quantum_fit = -np.expm1(remaining_after_fit / BIN_CAPACITY)

    # Component 2: Small Fragment Avoidance (Simplified Flux Equilibrium)
    # Introduces a significant penalty if placing the item would result in leaving
    # a very small (and likely unusable) fragment of space. This is a targeted
    # simplification of 'Boundary Avoidance' for robustness.
    FRAGMENT_PENALTY_THRESHOLD = 0.05 * BIN_CAPACITY  # e.g., 5% of bin capacity
    FRAGMENT_PENALTY_VALUE = -0.75  # A strong negative penalty to strongly discourage such fits

    # Apply penalty only if the remaining space is positive (not a perfect fit)
    # and falls below the defined fragment threshold.
    fragment_penalty = np.zeros_like(remaining_after_fit)
    is_small_fragment = (remaining_after_fit > 0) & (remaining_after_fit < FRAGMENT_PENALTY_THRESHOLD)
    fragment_penalty[is_small_fragment] = FRAGMENT_PENALTY_VALUE

    # Combined Score: Sum of Quantum Fit and Fragment Penalty.
    # No dynamic weights, harmonic fullness, or exploration noise, adhering to the
    # principle that simplicity with well-chosen parameters often outperforms
    # complex, dynamically-tuned strategies if not perfectly balanced.
    combined_scores_for_fitting_bins = score_quantum_fit + fragment_penalty

    # Assign the calculated scores back to the original scores array,
    # leaving -np.inf for bins where the item does not fit.
    scores[fitting_bins_idx] = combined_scores_for_fitting_bins

    return scores
```
