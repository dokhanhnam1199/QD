```python
import numpy as np

# Assuming a standard bin capacity. In a full system, this would likely be
# a parameter passed to the function, part of a class, or a global constant.
# For this heuristic, we assume it's a known constant, often normalized to 1.0.
BIN_CAPACITY = 1.0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic represents a strategic evolution beyond a pure 'Best Fit'
    approach by incorporating an 'Impact-Driven' perspective on bin utilization.
    While still strongly valuing efficient space use, it introduces a bias towards
    consolidating items into bins that are already significantly filled. The aim
    is to accelerate the 'closure' of existing bins, thereby potentially
    minimizing the total number of bins required and exploiting the problem's
    fixed-capacity structure more effectively.

    The priority score for each bin is a weighted combination of two key factors:

    1.  **Tightness of Fit (Best Fit Component):** This term prioritizes bins
        that, upon receiving the item, leave the smallest possible remaining
        capacity. A perfect fit (0 remaining capacity) is inherently valued
        highest by this component. This directly mirrors `priority_v1`'s core.
        (Contribution: `ALPHA * -remaining_capacity_after_fit`)

    2.  **Current Bin Fill Level (Consolidation Component):** This novel term
        provides a bonus to bins that are already more utilized (i.e., have
        less remaining capacity before the item is placed). By favoring
        bins closer to full, the heuristic encourages filling and effectively
        'closing' bins sooner. This strategically reduces the number of
        active, partially filled bins.
        (Contribution: `BETA * current_bin_fill_level`)

    The combined score is:
    `Score = (ALPHA * -remaining_capacity_after_fit) + (BETA * current_bin_fill_level)`

    `ALPHA` is set to be significantly larger than `BETA`. This ensures that
    'tightness of fit' remains the primary decision criterion, while the
    'current bin fill level' acts as a refined tie-breaker or a subtle preference
    when multiple bins offer similarly good fits. This design reflects a
    'Strategic Selection' that seeks measurable performance uplift in bin count.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Scores are calculated. Bins where the item does not fit receive a score
        of -infinity to ensure they are never chosen.
        The bin with the largest score will be selected.
    """
    # Initialize scores for all bins to negative infinity.
    # This ensures that bins where the item cannot fit will never be selected.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Determine which bins have sufficient remaining capacity for the item.
    can_fit_mask = bins_remain_cap >= item

    # If no bin can fit the item, return the scores array with -inf everywhere.
    if not np.any(can_fit_mask):
        return scores

    # --- Component 1: Tightness of Fit (Best Fit principle) ---
    # Calculate the remaining capacity if the item were to be placed there.
    # We want to minimize this remaining capacity, so we take its negative.
    # A perfect fit (0 remaining) yields a score of 0.0 from this component.
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # --- Component 2: Current Bin Fill Level (Consolidation principle) ---
    # Calculate how much of the bin is already filled before adding the current item.
    # This encourages placing items into bins that are already significantly utilized.
    current_fill_level = BIN_CAPACITY - bins_remain_cap[can_fit_mask]

    # --- Tunable Weights ---
    # ALPHA: Weight for the Best Fit component. This is the primary driver.
    # BETA: Weight for the Consolidation component. This acts as a secondary
    #       preference or tie-breaker, nudging towards filling existing bins.
    # The relative magnitudes are crucial: ALPHA >> BETA to maintain Best Fit
    # as dominant, but BETA > 0 to introduce the consolidation bias.
    ALPHA = 1.0
    BETA = 0.05  # A small positive weight, e.g., 5% of ALPHA, for subtle influence.

    # Combine the components to get the final priority score.
    # Maximizing this score means:
    # 1. Minimizing `remaining_after_fit` (due to `-remaining_after_fit`).
    # 2. Maximizing `current_fill_level`.
    calculated_scores = (ALPHA * -remaining_after_fit) + (BETA * current_fill_level)

    # Apply the calculated scores to the bins where the item can fit.
    scores[can_fit_mask] = calculated_scores

    return scores
```
