```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Dynamically prioritizes bins using an inverse capacity fit.

    This heuristic adaptively assigns higher scores to tighter fits,
    especially emphasizing near-perfect and perfect fits by exploiting
    the non-linear relationship of remaining capacity, thus promoting early
    bin completion and efficient space utilization.
    """
    # Initialize scores for all bins to negative infinity.
    # This ensures that bins where the item cannot fit will never be selected.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Determine which bins have sufficient remaining capacity for the item.
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity after placing the item for fitting bins.
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Use a small epsilon to prevent division by zero for perfect fits (remaining_after_fit = 0).
    # This value also acts as a sensitivity parameter, defining the "floor" for capacity differences
    # that are still significantly differentiated. A smaller epsilon makes the curve steeper near zero,
    # more strongly emphasizing perfect/near-perfect fits (pattern exploitation).
    epsilon = 1e-9

    # Assign scores based on the inverse of the remaining capacity.
    # This non-linear transformation creates an "adaptive" prioritization:
    # smaller remaining capacities (tighter fits) receive disproportionately higher scores.
    # This strategy exploits the pattern that completely or nearly completely
    # filled bins are highly desirable for overall packing efficiency.
    scores[can_fit_mask] = 1.0 / (remaining_after_fit + epsilon)

    return scores
```
