```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a 'Best Fit' heuristic with a touch of minimizing quantum
    of wasted space.

    Imagine each bin as a potential well, and the item as a quantum particle
    trying to find its lowest energy state. The "energy" here is the
    remaining space in the bin after placing the item. We want to find
    the bin that leads to the lowest 'excitation energy' (least leftover space).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # First, let's calculate the 'potential residual space' for each bin
    # if the item were to be placed there. This is like calculating the
    # energy state of the system after a "transition".
    potential_residual_space = bins_remain_cap - item

    # Initialize the priorities. For bins that cannot accommodate the item,
    # the 'energy barrier' is infinite. In a prioritization scheme where
    # higher numbers mean higher priority, we'll assign a very low (negative infinite)
    # score to these impossible states.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Now, identify the 'allowed transitions' â€“ the bins where the item actually fits.
    # This is where the potential residual space is non-negative.
    can_fit_mask = potential_residual_space >= 0

    # For the bins where the item can fit, we want to select the one that
    # leaves the *least* amount of remaining space. This is analogous to
    # minimizing 'entropy' or 'disorder' in the system, or seeking the most
    # efficient packing, minimizing "quantum of wasted space".
    #
    # If a bin leaves a small positive `potential_residual_space`, its priority
    # should be high. If it leaves a large `potential_residual_space`, its
    # priority should be lower. Taking the negative of this value directly
    # achieves this: a smaller positive residual space yields a larger
    # (less negative, or closer to zero) priority score. A perfect fit
    # (0 residual space) gives a priority of 0, which is the highest
    # possible positive score among all valid (negative) scores.
    priorities[can_fit_mask] = -potential_residual_space[can_fit_mask]

    return priorities
```
