```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    bin_capacity: float,
    base_fit_priority: float = 60.0,
    normalized_remaining_penalty_factor: float = 150.0,
    remaining_capacity_penalty_power: float = 2.5,
    min_allowed_priority: float = 0.1,
    non_fitting_priority: float = -15.0
) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, using a
    non-linear penalty for remaining capacity to strongly favor best fits,
    especially those that nearly fill a bin.

    This function enhances the "Best Fit" strategy by applying a power-law
    penalty to the *normalized* remaining capacity after placement. This
    approach significantly amplifies the priority difference between bins that
    leave very little space (near-perfect fits) and those that leave a moderate
    amount of space. It encourages tighter packing and faster bin closure.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        bin_capacity: The total fixed capacity of a single bin. This is crucial
                      for normalizing the remaining capacity for the power penalty,
                      making the heuristic robust across different bin sizes.
        base_fit_priority: A base score given to any bin where the item can fit.
                           This sets the initial priority before any penalties.
        normalized_remaining_penalty_factor: A multiplier for the penalty applied
                                             based on the *normalized* remaining
                                             capacity after the item is placed.
                                             A higher value means larger remaining
                                             capacities are penalized more heavily.
        remaining_capacity_penalty_power: The exponent to which the normalized
                                          remaining capacity is raised for the
                                          penalty. A value > 1 (e.g., 2.0 or 2.5)
                                          will disproportionately penalize
                                          larger remaining capacities, making
                                          near-perfect fits (those leaving very
                                          little normalized space) much more attractive
                                          and easily distinguishable.
        min_allowed_priority: The minimum priority score a bin can receive if
                              the item fits. This acts as a floor, preventing
                              priorities from becoming too low or negative
                              for valid placements.
        non_fitting_priority: The priority score assigned to bins where the
                              item does not fit. Typically a significantly
                              negative value to discourage selection.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities with the value for non-fitting bins
    priorities = np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Only process if there are bins where the item can fit
    if np.any(can_fit_mask):
        # Calculate the remaining capacity for bins where the item could be placed
        remaining_after_placement = bins_remain_cap[can_fit_mask] - item

        # Normalize the remaining capacity by the total bin capacity.
        # This makes the penalty robust to different bin sizes and allows the
        # power term to operate on values between 0 and 1.
        if bin_capacity <= 0:
            # In a typical BPP, bin_capacity will always be positive.
            # This check is for robustness against invalid input.
            raise ValueError("bin_capacity must be a positive value.")
        
        normalized_remaining_after_placement = remaining_after_placement / bin_capacity

        # Calculate the priority for these bins using a power penalty:
        # P = base_fit_priority - (penalty_factor * (normalized_remaining_after_placement ^ power))
        # A higher `power` value will make the priority drop much faster as
        # `normalized_remaining_after_placement` increases, thus strongly favoring
        # bins that achieve a very tight fit.
        calculated_priorities = base_fit_priority - (
            normalized_remaining_penalty_factor * (normalized_remaining_after_placement ** remaining_capacity_penalty_power)
        )

        # Ensure that the calculated priority does not fall below a minimum allowed value
        calculated_priorities = np.maximum(calculated_priorities, min_allowed_priority)

        # Assign the calculated priorities to the corresponding bins
        priorities[can_fit_mask] = calculated_priorities

    return priorities
```
