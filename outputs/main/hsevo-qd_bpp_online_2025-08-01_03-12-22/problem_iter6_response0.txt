```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, BIN_CAPACITY: float = 1.0) -> np.ndarray:
    """
    Returns priority scores for each bin, based on an "Adaptive Fullness Prioritization" heuristic.

    This heuristic mutates the standard 'Best Fit' by introducing strategic considerations
    for space management beyond simple minimization of remaining capacity. It aims to:

    1.  **Strongly Reward Perfect Fits**: A perfect fit (leaving 0 remaining capacity)
        is the most efficient use of space, effectively "closing" a bin. This is
        given a significant bonus.
    2.  **Prioritize High Overall Utilization**: Similar to Best Fit, bins that
        become very full after placing the item are generally preferred.
    3.  **Penalize Fragmented Space**: A minor penalty is applied to bins that
        are left with a very small, non-zero remaining capacity. Such 'fragments'
        are often too small to be useful for subsequent items and can lead to
        wasted space or increased bin count if many such bins accumulate.
        This encourages the selection of bins that either achieve a perfect fit,
        or leave a more 'useful' (larger) amount of remaining space, allowing for
        greater flexibility for future items.

    The goal is to not just minimize residual space, but to do so in a way
    that minimizes "unusable" small fragments, promoting overall
    packing efficiency and potentially reducing the number of bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        BIN_CAPACITY: The maximum capacity of a single bin. Default to 1.0,
                      assuming item and capacities are normalized.

    Returns:
        Array of same size as bins_remain_cap with priority score for each bin.
        Higher scores indicate a more desirable bin. Bins where the item does not
        fit receive a score of -infinity.
    """
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity after hypothetical placement for fitting bins
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Primary scoring component: Utilization after placing the item.
    # A higher utilization means less remaining space, similar to Best Fit.
    # Scores range from 0 (empty bin after placement) to 1 (full bin).
    utilization_score = (BIN_CAPACITY - remaining_after_fit) / BIN_CAPACITY

    # Define a small epsilon for floating point comparisons to handle near-zero values.
    epsilon = 1e-9

    # Strategic Bonus: Strongly reward perfect fits.
    # Using np.isclose for robust floating point comparison to zero.
    perfect_fit_mask = np.isclose(remaining_after_fit, 0.0, atol=epsilon)
    # Adding a substantial bonus (e.g., 1.0) makes perfect fits unequivocally
    # the highest priority, pushing their score beyond the normal 0-1 range.
    utilization_score[perfect_fit_mask] += 1.0

    # Strategic Penalty: Slightly penalize very small, non-zero remaining capacities.
    # These are deemed "fragmented" or potentially "wasted" space.
    # The threshold for what constitutes a "small fragment" can be tuned,
    # here set to 5% of the bin capacity.
    fragment_threshold = 0.05 * BIN_CAPACITY
    
    # Identify bins that have a small, non-zero remainder.
    # Ensure it's greater than epsilon to not penalize perfect fits.
    fragment_mask = (remaining_after_fit > epsilon) & (remaining_after_fit < fragment_threshold)
    
    # Subtract a small penalty (e.g., 0.1) to make these bins slightly less
    # attractive compared to those leaving a more useful or zero remainder.
    utilization_score[fragment_mask] -= 0.1

    # Assign the calculated scores to the bins where the item can fit.
    scores[can_fit_mask] = utilization_score

    return scores
```
