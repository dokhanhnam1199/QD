```python
import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                base_fit_priority: float = 40.67957013415283,
                remaining_capacity_penalty_factor: float = 2.527225052325968,
                proportional_fill_bonus_factor: float = 15.0, # Tunable factor to weigh proportional fit
                min_allowed_priority: float = 0.5896372460377476,
                non_fitting_priority: float = -8.783827459234484) -> np.ndarray:
    """Combines Best Fit with a bonus for higher proportional fill to achieve denser packing.

    This heuristic prioritizes bins that leave minimal remaining capacity while
    also rewarding those where the item occupies a larger proportion of the bin's
    current space, encouraging tighter fits and efficient bin closure.
    """
    # Initialize all priorities with the value for non-fitting bins
    priorities = np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Only process if there are bins where the item can fit
    if np.any(can_fit_mask):
        # Extract remaining capacities for eligible bins
        eligible_bins_remain_cap = bins_remain_cap[can_fit_mask]

        # Calculate the remaining capacity after item placement (core Best Fit component)
        remaining_after_placement = eligible_bins_remain_cap - item

        # Calculate the base priority based on minimizing remaining capacity
        # This is the primary driver, directly from the highly-ranked priority_v0
        calculated_priorities = base_fit_priority - (remaining_capacity_penalty_factor * remaining_after_placement)

        # Add a bonus based on the 'proportional fill' (inspired by priority_v1, but as a bonus)
        # This term rewards bins where the item occupies a larger percentage of the available space,
        # which encourages tighter fits within the chosen bin and can help differentiate
        # between bins that leave similar absolute remaining capacity.
        # Ensure eligible_bins_remain_cap is not zero to prevent division by zero;
        # this is implicitly handled by `can_fit_mask` (bins_remain_cap >= item)
        # and assuming item > 0.
        proportional_fill = item / eligible_bins_remain_cap
        calculated_priorities += proportional_fill_bonus_factor * proportional_fill

        # Ensure that the calculated priority does not fall below a minimum allowed value
        calculated_priorities = np.maximum(calculated_priorities, min_allowed_priority)

        # Assign the calculated priorities to the corresponding bins
        priorities[can_fit_mask] = calculated_priorities

    return priorities
```
