```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic, "Best Fit with Strategic Gap Management", is a mutation
    of the traditional Best Fit approach. While Best Fit minimizes the
    remaining capacity, this version introduces a more nuanced evaluation
    of the leftover space, aiming to prevent the creation of small,
    potentially unusable "dust" gaps within bins. It prioritizes:

    1.  **Perfect Fits:** A significant positive bonus is awarded for a
        perfect fit (leaving exactly 0 remaining capacity). This is the
        most efficient use of space and directly contributes to closing bins.
    2.  **Regular Fits:** For fits that leave a non-trivial amount of
        remaining capacity, the score is the negative of this capacity,
        similar to Best Fit. This encourages filling bins efficiently
        without creating problematic small remnants.
    3.  **Dust Gap Avoidance:** A substantial penalty is applied to bins
        that, upon accommodating the item, would be left with a very small,
        non-zero amount of capacity (a "dust" gap). These gaps are often
        too small to be useful for subsequent items, leading to wasted space
        and effectively making the bin "full" prematurely in a practical sense.
        By penalizing these, the heuristic encourages either a perfect fit,
        a fit leaving a larger and potentially more useful gap, or even
        opening a new bin if all existing options result in dust.

    The thresholds and bonus/penalty values are tunable parameters,
    reflecting an iterative design approach where empirical performance
    on diverse datasets would guide their optimization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin. It's assumed
                         these are normalized such that 1.0 represents a full bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Scores are designed to make the most desirable bins have the highest score.
        Bins where the item does not fit receive a score of -infinity
        to ensure they are never chosen.
    """
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Determine which bins have sufficient remaining capacity for the item.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity if the item were to be placed there.
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # --- Tunable Heuristic Parameters ---
    # EPSILON_DUST: The threshold below which a non-zero remaining capacity
    #               is considered "dust" (e.g., 5% of a unit bin capacity).
    #               This value should ideally be informed by the typical smallest
    #               item size or desired minimal useful gap.
    EPSILON_DUST = 0.05

    # BONUS_PERFECT_FIT: A significant positive score boost for a perfect fit.
    #                    This makes perfect fits highly desirable, often
    #                    the top choice if available.
    BONUS_PERFECT_FIT = 1.0

    # PENALTY_DUST_GAP: A large negative score for creating a "dust" gap.
    #                   This should make such bins highly undesirable,
    #                   even preferring opening a new bin over creating
    #                   inefficiently utilized space. Its magnitude should be
    #                   significantly lower than any 'regular fit' score.
    PENALTY_DUST_GAP = -10.0
    # -----------------------------------

    # Apply scoring logic for bins where the item fits.
    # Iterate through the deltas for fitting bins and apply the specific scoring.
    # Using enumerate with a mask to correctly assign scores back to original indices.
    for i, delta in enumerate(remaining_after_fit):
        original_idx = np.where(can_fit_mask)[0][i]

        if np.isclose(delta, 0.0):  # Perfect fit (remaining capacity is effectively zero)
            scores[original_idx] = BONUS_PERFECT_FIT
        elif 0 < delta < EPSILON_DUST:  # "Dust" gap (small, non-zero remaining capacity)
            scores[original_idx] = PENALTY_DUST_GAP
        else:  # Regular fit (non-dust, positive remaining capacity)
            # Standard Best Fit logic: minimize positive remaining capacity.
            # Thus, we take the negative to maximize the score for smaller remainders.
            scores[original_idx] = -delta

    return scores
```
