```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    base_fit_priority: float = 60.0,
    rem_cap_penalty_factor: float = 4.0,
    rem_cap_penalty_exponent: float = 2.0,
    relative_fill_bonus_factor: float = 10.0,
    perfect_fit_bonus: float = 20.0,
    perfect_fit_epsilon: float = 1e-9,
    min_allowed_priority: float = 0.5,
    non_fitting_priority: float = -15.0
) -> np.ndarray:
    """Prioritizes bins using a combined strategy: aggressive best fit with non-linear penalty,
    rewards high relative fill, and gives a strong bonus for perfect fits to maximize bin closure and utilization.
    """
    # Initialize all priorities with a low score for non-fitting bins
    priorities = np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)

    # Identify bins where the item can fit (remaining capacity must be greater than or equal to item size)
    can_fit_mask = bins_remain_cap >= item

    # Process only if there are valid bins for placement
    if np.any(can_fit_mask):
        fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
        remaining_after_placement = fitting_bins_remain_cap - item

        # Start with a base priority for all fitting bins
        calculated_priorities = np.full_like(remaining_after_placement, fill_value=base_fit_priority, dtype=float)

        # 1. Non-linear Penalty for Remaining Capacity (from `priority_v0`):
        # Applies a progressively heavier penalty for larger remaining capacities. This aggressively favors
        # bins that result in very little empty space, promoting tight packing.
        rem_cap_penalty = rem_cap_penalty_factor * (remaining_after_placement ** rem_cap_penalty_exponent)
        calculated_priorities -= rem_cap_penalty

        # 2. Relative Fill Bonus (from `priority_v0`):
        # Rewards placing an item into a bin where it constitutes a significant proportion of the *current*
        # available capacity. This encourages filling up bins that are already partially utilized.
        relative_fill_ratio = item / fitting_bins_remain_cap
        relative_fill_bonus = relative_fill_bonus_factor * relative_fill_ratio
        calculated_priorities += relative_fill_bonus

        # 3. Perfect Fit Bonus (from `priority_v1`):
        # Provides a substantial bonus if the item perfectly fills the remaining space in a bin.
        # This explicitly incentivizes "closing" bins, which is crucial for minimizing the total
        # number of bins used and improving overall space utilization.
        perfect_fit_mask_local = np.isclose(remaining_after_placement, 0.0, atol=perfect_fit_epsilon)
        calculated_priorities[perfect_fit_mask_local] += perfect_fit_bonus

        # Ensure that the calculated priority does not fall below a minimum allowed value for valid fits,
        # preventing valid placement options from becoming undesirably low.
        calculated_priorities = np.maximum(calculated_priorities, min_allowed_priority)

        # Assign the calculated priorities to the corresponding bins in the main array
        priorities[can_fit_mask] = calculated_priorities

    return priorities
```
