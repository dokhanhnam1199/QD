```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    bin_capacity: float = 1.0, # New parameter: The maximum capacity of a single bin.
    base_fit_priority: float = 50.0,
    rem_cap_penalty_factor: float = 4.0, # Increased from 3.5 for a slightly stronger penalty
    rem_cap_penalty_exponent: float = 2.5, # Significantly increased from 1.7 for a much steeper best-fit penalty
    relative_fill_bonus_factor: float = 8.0, # Same as v1, emphasizes filling current available space
    final_fullness_bonus_factor: float = 30.0, # New, very high bonus factor for bin closure
    final_fullness_exponent: float = 5.0, # New, very high exponent for sharp reward near full capacity
    min_allowed_priority: float = 0.5,
    non_fitting_priority: float = -10.0
) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, focusing on Intelligent Bin Closure.

    This function is a mutated and enhanced version of priority_v1, designed to aggressively
    prioritize "Intelligent Bin Closure" and achieve "Strategic Scoring". It refines the
    "Best Fit" strategy with a steeper non-linear penalty for remaining capacity and introduces
    a powerful new bonus for bins that are nearly or completely full *after* the item is placed.
    This comprehensive approach encourages both tight fits within available space and the
    strategic completion of bins, minimizing the creation of awkwardly sized leftover spaces.

    Args:
        item: Size of item to be added to the bin. Must be greater than 0.
        bins_remain_cap: Array of current remaining capacities for each bin.
        bin_capacity: The maximum capacity of a single bin. Defaults to 1.0, assuming a
                      normalized bin packing problem. This is crucial for calculating the
                      new `final_fullness_bonus` based on the bin's total capacity.
        base_fit_priority: A base score given to any bin where the item can fit.
                           This sets the initial priority before any adjustments.
        rem_cap_penalty_factor: A multiplier for the non-linear penalty applied
                                based on the remaining capacity after item placement.
                                Higher values penalize larger remaining capacities more.
        rem_cap_penalty_exponent: An exponent (e.g., 2.5) applied to the remaining capacity
                                  when calculating the penalty. A value significantly
                                  greater than 1 makes the penalty for larger remaining
                                  capacities disproportionately more severe, thereby
                                  strongly favoring very tight fits (i.e., less remaining space).
        relative_fill_bonus_factor: A multiplier for a bonus that rewards placing an item into
                                    a bin where it occupies a significant proportion of the
                                    bin's *current* available capacity. This encourages
                                    "filling up" bins that are already partially utilized.
        final_fullness_bonus_factor: A new, powerful multiplier for a bonus that specifically
                                     rewards placing an item into a bin such that the bin becomes
                                     very full (close to its total capacity `bin_capacity`).
                                     This directly supports the "Intelligent Bin Closure" goal.
        final_fullness_exponent: A new, very high exponent (e.g., 5.0) applied to the ratio of
                                 the bin's final fullness to its total capacity. This creates
                                 a sharp, non-linear reward curve, heavily favoring bins that
                                 are near or at full capacity after placement, making their
                                 priority scores significantly higher than other options.
        min_allowed_priority: The minimum priority score a bin can receive if the item fits.
                              This acts as a floor, preventing valid placement priorities from
                              becoming too low.
        non_fitting_priority: The priority score assigned to bins where the item does not fit.
                              Typically a low or negative value.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    if not (item > 0):
        # Items must have positive size for valid packing. Handle as per problem constraints.
        # For simplicity, if item is non-positive, no bin will fit, return default.
        return np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)

    # Initialize all priorities with the score for non-fitting bins
    priorities = np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)

    # Identify bins where the item can fit (remaining capacity must be >= item size)
    can_fit_mask = bins_remain_cap >= item

    # Only process if there are bins where the item can fit
    if np.any(can_fit_mask):
        fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
        remaining_after_placement = fitting_bins_remain_cap - item

        # --- Core priority components ---

        # 1. Non-linear Penalty for Remaining Capacity (Aggressive Best Fit)
        # Applying a higher exponent disproportionately increases the penalty for
        # larger remaining capacities, strongly favoring very tight fits.
        rem_cap_penalty = rem_cap_penalty_factor * (remaining_after_placement ** rem_cap_penalty_exponent)

        # 2. Relative Fill Bonus (Density within current available space)
        # Rewards placing the item where it occupies a significant fraction of the *current*
        # available capacity, encouraging the efficient use of existing partial bins.
        # Division by zero is avoided because if item > 0 and it fits, then fitting_bins_remain_cap > 0.
        relative_fill_ratio = item / fitting_bins_remain_cap
        relative_fill_bonus = relative_fill_bonus_factor * relative_fill_ratio

        # 3. NEW: Final Bin Fullness Bonus (Strategic Bin Closure)
        # This is a powerful new term that directly addresses "Intelligent Bin Closure".
        # It calculates how full the bin will be *relative to its total capacity* after placement,
        # and applies a bonus with a very high exponent. This creates a sharp "spike" in priority
        # for bins that are nearly or completely full, making them highly attractive.
        # Handle cases where bin_capacity might be zero or negative (though it should be positive in BPP).
        if bin_capacity <= 0:
            final_fullness_bonus = np.zeros_like(remaining_after_placement)
        else:
            # Calculate the filled capacity after placing the item
            # This is (original_total_capacity - remaining_after_placement)
            # Or, (bin_capacity - (bins_remain_cap - item))
            filled_capacity_after_placement = bin_capacity - remaining_after_placement
            # The ratio of filled capacity to total capacity
            final_bin_occupancy_ratio = filled_capacity_after_placement / bin_capacity
            # Clip the ratio to [0, 1] to handle potential floating point inaccuracies
            final_bin_occupancy_ratio = np.clip(final_bin_occupancy_ratio, 0.0, 1.0)
            final_fullness_bonus = final_fullness_bonus_factor * (final_bin_occupancy_ratio ** final_fullness_exponent)

        # Combine all components to calculate the priority score for fitting bins
        calculated_priorities = (
            base_fit_priority
            - rem_cap_penalty          # Penalizes empty space after placement
            + relative_fill_bonus      # Rewards using a large portion of currently available space
            + final_fullness_bonus     # Strongly rewards overall bin completion
        )

        # Ensure that the calculated priority does not fall below a minimum allowed value
        calculated_priorities = np.maximum(calculated_priorities, min_allowed_priority)

        # Assign the calculated priorities to the corresponding bins in the original array
        priorities[can_fit_mask] = calculated_priorities

    return priorities
```
