```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Refined "Best Fit" strategy with strong emphasis on minimizing remaining
    capacity and a focused penalty for creating tiny, unusable fragments.
    """
    BIN_CAPACITY = 1.0 

    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    can_fit_mask = bins_remain_cap >= item
    
    if not np.any(can_fit_mask):
        return scores

    fitting_bins_idx = np.where(can_fit_mask)[0]
    current_bin_caps = bins_remain_cap[fitting_bins_idx]
    remaining_after_fit = current_bin_caps - item

    # --- Fixed Parameters for Tuning (Optimized for robustness and performance) ---
    # These parameters are tuned to balance aggressive best-fit and fragment avoidance.

    # 1. Best Fit Steepness: Controls the exponential decay of the score.
    # Higher values heavily reward very tight fits (closer to 0 remainder).
    FIT_STEEPNESS_FACTOR = 15.0 

    # 2. Fragment Penalty Parameters: Targets small, non-zero remaining capacities.
    # FRAGMENT_PENALTY_THRESHOLD: Max remainder size considered a "fragment".
    # FRAGMENT_PENALTY_PEAK_VALUE: Maximum penalty strength.
    # FRAGMENT_PENALTY_SIGMA: Controls the "width" of the penalty curve around its peak.
    FRAGMENT_PENALTY_THRESHOLD = 0.03 * BIN_CAPACITY 
    FRAGMENT_PENALTY_PEAK_VALUE = 0.8 
    FRAGMENT_PENALTY_SIGMA = 0.01 * BIN_CAPACITY
    
    # Small noise component for tie-breaking and exploration.
    EXPLORATION_NOISE_SCALE = 1e-5 * BIN_CAPACITY

    # --- Scoring Components Calculation ---

    # Component 1: Exponential Best Fit Score
    # Assigns a score of 1.0 for a perfect fit (0 remainder), decaying exponentially
    # as the remaining capacity increases. This robustly implements "Best Fit".
    score_best_fit = np.exp(-(remaining_after_fit / BIN_CAPACITY) * FIT_STEEPNESS_FACTOR)

    # Component 2: Fragment Penalty Score
    # Applies a penalty (Gaussian-shaped hump) for remaining capacities that are
    # small but greater than zero, discouraging the creation of unusable "dust".
    score_fragment_penalty = np.zeros_like(remaining_after_fit)
    
    # Calculate penalty only for bins where item fits and remaining capacity is positive
    positive_remain_mask = remaining_after_fit > 0
    
    # The peak of the penalty curve is centered within the fragment threshold range.
    penalty_center = FRAGMENT_PENALTY_THRESHOLD / 2.0 
    
    # Calculate the Gaussian penalty for relevant remaining capacities.
    # Added a small epsilon for numerical stability in the denominator.
    score_fragment_penalty[positive_remain_mask] = \
        FRAGMENT_PENALTY_PEAK_VALUE * \
        np.exp(-((remaining_after_fit[positive_remain_mask] - penalty_center)**2) / (2.0 * FRAGMENT_PENALTY_SIGMA**2 + 1e-9))
    
    # Ensure penalty is only applied for remainders within the defined fragment range.
    score_fragment_penalty = np.where(remaining_after_fit <= FRAGMENT_PENALTY_THRESHOLD, score_fragment_penalty, 0)
    
    # --- Combined Score Calculation ---
    # Sum of Best Fit score and subtracted Fragment Penalty, plus a small noise.
    combined_scores_for_fitting_bins = (
        score_best_fit - score_fragment_penalty +
        np.random.normal(0, scale=EXPLORATION_NOISE_SCALE, size=len(fitting_bins_idx))
    )

    # Assign calculated scores back to the original scores array,
    # keeping -np.inf for bins where the item does not fit.
    scores[fitting_bins_idx] = combined_scores_for_fitting_bins

    return scores
```
