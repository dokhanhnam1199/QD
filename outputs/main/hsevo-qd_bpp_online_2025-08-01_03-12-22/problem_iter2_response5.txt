```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority for each bin based on the Best Fit heuristic.

    Prioritizes bins that, if the item were placed, would result in the
    smallest remaining capacity, ensuring efficient space utilization.
    Bins unable to accommodate the item receive the lowest priority.
    """
    # Initialize priorities to an extremely low value for all bins.
    # This effectively disqualifies bins that cannot hold the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a mask to identify only those bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    # For the bins that can accommodate the item, calculate a score.
    # The Best Fit heuristic aims to minimize the leftover space.
    # This means we want `(bins_remain_cap - item)` to be as small as possible (ideally 0).
    # To convert this into a priority (higher score is better), we maximize `item - bins_remain_cap`.
    # A perfect fit (item == capacity) yields 0, which is the highest possible score.
    # A looser fit (item < capacity) yields a negative score, with larger negative values
    # indicating more wasted space.
    priorities[can_fit_mask] = item - bins_remain_cap[can_fit_mask]

    return priorities
```
