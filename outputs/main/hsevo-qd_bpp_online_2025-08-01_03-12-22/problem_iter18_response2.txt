```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    base_fit_priority: float = 50.0,
    rem_cap_penalty_factor: float = 3.5,
    rem_cap_penalty_exponent: float = 1.7,
    relative_fill_bonus_factor: float = 8.0,
    perfect_fit_threshold: float = 0.01,
    perfect_fit_bonus: float = 180.0,
    min_allowed_priority: float = 0.5,
    non_fitting_priority: float = -10.0
) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function refines the "Best Fit" strategy, enhancing "priority_v1"
    with a strong emphasis on "Intelligent Bin Closure". It introduces a
    significant, dedicated bonus for "near-perfect fits", aggressively
    prioritizing bins that can be almost completely filled, thereby minimizing
    fragmentation and promoting efficient bin closure.

    Args:
        item: Size of item to be added to the bin. Must be greater than 0.
        bins_remain_cap: Array of current remaining capacities for each bin.
        base_fit_priority: A base score given to any bin where the item can fit.
                           This sets the initial priority before any adjustments.
        rem_cap_penalty_factor: A multiplier for the non-linear penalty applied
                                based on the remaining capacity after item placement.
                                Higher values penalize larger remaining capacities more.
        rem_cap_penalty_exponent: An exponent (typically > 1) applied to the
                                  remaining capacity when calculating the penalty.
                                  A value greater than 1 makes the penalty for
                                  larger remaining capacities disproportionately
                                  more severe, thereby strongly favoring very tight fits
                                  (i.e., less remaining space).
        relative_fill_bonus_factor: A multiplier for a bonus that rewards placing
                                    an item into a bin where it occupies a significant
                                    proportion of the bin's *current* available capacity.
                                    This encourages "filling up" bins that are already
                                    partially utilized or finding relatively large items
                                    for smaller remaining spaces.
        perfect_fit_threshold: If the remaining capacity after item placement is
                               less than or equal to this threshold, a substantial
                               'perfect_fit_bonus' is added. This strategically targets
                               scenarios where a bin can be considered 'closed' or
                               left with negligible unusable space.
        perfect_fit_bonus: A large, fixed bonus applied to bins that achieve a
                           near-perfect fit. This value should be high enough to
                           make such bins overwhelmingly attractive, reflecting a
                           strategic priority for bin closure.
        min_allowed_priority: The minimum priority score a bin can receive if
                              the item fits. This acts as a floor, preventing
                              valid placement priorities from becoming too low.
        non_fitting_priority: The priority score assigned to bins where the
                              item does not fit. Typically a low or negative value.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities with the score for non-fitting bins
    priorities = np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Only process if there are bins where the item can fit
    if np.any(can_fit_mask):
        fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
        remaining_after_placement = fitting_bins_remain_cap - item

        # 1. Non-linear Penalty for Remaining Capacity (Enhanced Best Fit)
        # This term strongly favors bins with minimal remaining space after placement.
        rem_cap_penalty = rem_cap_penalty_factor * (remaining_after_placement ** rem_cap_penalty_exponent)

        # 2. Relative Fill Bonus
        # This term rewards maximizing the utilization of the bin's current available space.
        # Division by zero is avoided as fitting_bins_remain_cap >= item > 0.
        relative_fill_ratio = item / fitting_bins_remain_cap
        relative_fill_bonus = relative_fill_bonus_factor * relative_fill_ratio

        # 3. Strategic Near-Perfect Fit Bonus (Intelligent Bin Closure)
        # This is a new, aggressive component designed to strongly incentivize
        # "closing" a bin by leaving a very small or zero remaining capacity.
        # It ensures that bins nearing full capacity are given top preference.
        near_perfect_fit_mask = remaining_after_placement <= perfect_fit_threshold
        perfect_fit_bonus_term = np.where(near_perfect_fit_mask, perfect_fit_bonus, 0.0)

        # Combine the base priority, non-linear penalty, relative fill bonus,
        # and the new perfect fit bonus.
        calculated_priorities = (
            base_fit_priority
            - rem_cap_penalty
            + relative_fill_bonus
            + perfect_fit_bonus_term  # Add the high bonus for near-perfect fits
        )

        # Ensure that the calculated priority does not fall below a minimum allowed value
        calculated_priorities = np.maximum(calculated_priorities, min_allowed_priority)

        # Assign the calculated priorities to the corresponding bins
        priorities[can_fit_mask] = calculated_priorities

    return priorities
```
