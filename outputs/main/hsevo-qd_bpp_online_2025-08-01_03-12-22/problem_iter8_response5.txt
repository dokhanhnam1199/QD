```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, BIN_CAPACITY: float = 1.0) -> np.ndarray:
    """
    Prioritizes perfect fits, then minimizes remaining space,
    while penalizing small, potentially unusable fragments.
    """
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    can_fit_mask = bins_remain_cap >= item

    # If no bin can fit, return the initialized scores with -inf
    if not np.any(can_fit_mask):
        return scores

    # Calculate remaining capacity after hypothetical placement for fitting bins
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Base score: Best Fit (smaller remaining capacity gives a higher score, 0 remaining is 0)
    # This naturally ranks bins by how full they become.
    base_scores_for_fitting_bins = -remaining_after_fit

    # Define a small epsilon for robust floating point comparisons to handle near-zero values.
    epsilon = 1e-9

    # Strategic Bonus: Strongly reward perfect fits.
    # A perfect fit (remaining_after_fit is effectively 0) gets a very high, fixed score.
    # This ensures it's always chosen over any non-perfect fit.
    perfect_fit_mask = np.isclose(remaining_after_fit, 0.0, atol=epsilon)
    # Assign a value significantly higher than any possible 'base_score' (-0 to -BIN_CAPACITY)
    # For example, BIN_CAPACITY * 2.0 ensures it's positive and clearly dominant.
    base_scores_for_fitting_bins[perfect_fit_mask] = BIN_CAPACITY * 2.0

    # Strategic Penalty: Penalize very small, non-zero remaining capacities ("fragments").
    # These are deemed inefficient space.
    # The threshold for what constitutes a "small fragment" is tuneable.
    fragment_threshold = 0.05 * BIN_CAPACITY # e.g., anything less than 5% of bin capacity
    
    # Identify bins that result in a small, non-zero remainder.
    # Ensure it's greater than epsilon to exclude perfect fits.
    fragment_mask = (remaining_after_fit > epsilon) & (remaining_after_fit < fragment_threshold)
    
    # Subtract a penalty value. This makes these fragmented bins less desirable.
    # The penalty should be large enough to make a fragmented bin worse than a bin
    # that leaves a larger, potentially more useful amount of space.
    fragment_penalty_value = 0.15 * BIN_CAPACITY # Tunable penalty amount
    base_scores_for_fitting_bins[fragment_mask] -= fragment_penalty_value

    # Assign the calculated scores back to the bins where the item can fit.
    scores[can_fit_mask] = base_scores_for_fitting_bins

    return scores
```
