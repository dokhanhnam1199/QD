```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    base_fit_priority: float = 50.0,
    rem_cap_penalty_factor: float = 3.5,
    rem_cap_penalty_exponent: float = 1.7,
    relative_fill_bonus_factor: float = 8.0,
    min_allowed_priority: float = 0.5,
    non_fitting_priority: float = -10.0
) -> np.ndarray:
    """Enhanced Best Fit using continuous, multi-factor scoring to maximize bin utilization
    and implicitly reward tight fits, avoiding discrete bonuses.
    """
    priorities = np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)
    can_fit_mask = bins_remain_cap >= item

    if np.any(can_fit_mask):
        fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
        remaining_after_placement = fitting_bins_remain_cap - item

        # 1. Non-linear Penalty for Remaining Capacity (Enhanced Best Fit)
        # Heavily penalizes bins that leave a lot of unused space, promoting tighter fits.
        rem_cap_penalty = rem_cap_penalty_factor * (remaining_after_placement ** rem_cap_penalty_exponent)

        # 2. Relative Fill Bonus
        # Rewards placing the item where it occupies a larger proportion of the bin's current capacity.
        # This is crucial for efficient bin utilization and implicitly supports bin closure.
        # Avoids division by zero as fitting_bins_remain_cap >= item > 0.
        relative_fill_ratio = item / fitting_bins_remain_cap
        relative_fill_bonus = relative_fill_bonus_factor * relative_fill_ratio

        # Combine base priority with penalties and bonuses.
        # The smooth, continuous nature of these components implicitly handles 'perfect fits'
        # without needing an explicit, discrete bonus, as suggested by performance analysis.
        calculated_priorities = base_fit_priority - rem_cap_penalty + relative_fill_bonus

        # Ensure priorities do not fall below a minimum allowed value for fitting bins
        calculated_priorities = np.maximum(calculated_priorities, min_allowed_priority)

        priorities[can_fit_mask] = calculated_priorities

    return priorities
```
