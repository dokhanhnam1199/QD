```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, BIN_CAPACITY: float = 1.0) -> np.ndarray:
    """
    Combines strong Best Fit with aggressive perfect fit seeking, adapting to minimize
    wasted space and prioritize optimal bin closure.
    """
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        return scores

    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Core: Best Fit strategy by prioritizing bins that leave the least remaining capacity.
    # Scores are higher (less negative) for smaller remaining capacities.
    base_scores = -remaining_after_fit

    # Strategic Bonus: Aggressively reward perfect fits, making them the top priority.
    # This promotes optimal bin closure, a key pattern for efficiency.
    epsilon = 1e-9
    perfect_fit_mask = np.isclose(remaining_after_fit, 0.0, atol=epsilon)
    
    # A bonus significantly larger than the range of base_scores ensures perfect fits
    # are always chosen first. Base scores range from -BIN_CAPACITY to 0.
    perfect_fit_bonus = BIN_CAPACITY + epsilon 
    base_scores[perfect_fit_mask] += perfect_fit_bonus

    scores[can_fit_mask] = base_scores

    return scores
```
