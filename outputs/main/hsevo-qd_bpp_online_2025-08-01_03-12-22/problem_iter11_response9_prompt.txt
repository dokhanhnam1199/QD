{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Inspired by the principles of efficient space-time utilization, this\n    heuristic aims to find the 'tightest fit' for the item.\n    A tighter fit means less wasted space within a bin, optimizing the\n    overall density of packing and minimizing the necessity for new bins.\n\n    From my perspective, 'Best Fit' is analogous to minimizing the\n    residual 'field distortion' (unused capacity) in a local region\n    (a bin). We prioritize bins that, upon accommodating the item, leave\n    the smallest possible, yet positive, remaining capacity. A perfect fit,\n    leaving zero residual capacity, is the most efficient use of space\n    and is therefore given the highest priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Scores are calculated as the negative of the remaining capacity after\n        the item is placed. Bins where the item does not fit receive a score\n        of -infinity to ensure they are never chosen.\n        The bin with the largest (least negative) score is the 'best fit'.\n    \"\"\"\n    # Initialize scores for all bins to negative infinity.\n    # This ensures that bins where the item cannot fit will never be selected.\n    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Determine which bins have sufficient remaining capacity for the item.\n    can_fit_mask = bins_remain_cap >= item\n\n    # For the bins where the item fits, calculate the remaining capacity\n    # if the item were to be placed there.\n    # We want to minimize this remaining capacity to achieve a 'tight fit'.\n    # Hence, we take the negative of this value:\n    # A smaller positive remainder (e.g., 0.1) becomes a larger negative score (-0.1).\n    # A perfect fit (0.0 remainder) becomes the highest score (0.0).\n    remaining_after_fit = bins_remain_cap[can_fit_mask] - item\n    scores[can_fit_mask] = -remaining_after_fit\n\n    return scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        default_priority_value: The base priority value used to initialize the priority array.\n                                In the original implementation, this was implicitly 0.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # The original implementation implicitly returned an array filled with zeros.\n\n### Analyze & experience\n- Comparing (1st) vs (2nd), we see that they are identical. They implement a \"proportional fill\" heuristic, prioritizing bins where the item consumes the highest ratio of the bin's *remaining* capacity (`item / bins_remain_cap`). This approach, surprisingly ranked highest, suggests that aggressively filling a bin relative to its current emptiness, thereby quickly pushing it towards full utilization or closure, is more effective for this problem than minimizing absolute remaining space or relying on broader utilization bonuses.\n\nComparing (3rd) vs (4th), Heuristic 3rd, a complex Best Fit combined with a non-linear bonus for high bin utilization, significantly outperforms Heuristic 4th, which is Best Fit with a simple penalty for tiny remainders. This indicates that a strong, non-linear incentive to achieve very full bins (as in 3rd) is a more potent strategy for overall efficiency than merely discouraging small fragments. The scaling of the bonus by `item` in 3rd also suggests valuing larger items' contribution to bin completion.\n\nComparing (5th) vs (6th), Heuristic 6th, which adds a minor penalty for leaving very small, non-zero remainders on top of Best Fit, performs better than Heuristic 5th, the pure Best Fit. This demonstrates that even subtle improvements like discouraging fragmentation can yield measurable gains over a foundational heuristic, highlighting the importance of managing \"unusable\" leftover space.\n\nComparing (7th) vs (8th), Heuristic 7th, an \"Adaptive Fullness Prioritization\" which explicitly rewards perfect fits and penalizes fragments, is ranked higher than Heuristic 8th, the standard Best Fit. This reinforces that targeted bonuses for perfect fits (leading to full bin closure) and explicit penalties for fragmented space significantly improve packing efficiency beyond simple minimization of remaining capacity.\n\nComparing (9th) vs (10th), Heuristic 9th (identical to 3rd), with its non-linear utilization bonus, outperforms Heuristic 10th (identical to 5th and 8th), the standard Best Fit. This further supports the value of sophisticated, goal-oriented scoring mechanisms over basic heuristics.\n\nComparing (19th) vs (20th), these two are identical and ranked lowest. They return an array of zeros or a constant priority, effectively providing no intelligent guidance for bin selection. Their position at the bottom of the list unequivocally demonstrates that any form of thoughtful prioritization, even a simple Best Fit, is vastly superior to a non-discriminating approach.\n\nOverall: The ranking strongly suggests that for optimal bin packing, heuristics should move beyond simple \"best fit\" to incorporate sophisticated strategies. The best performing heuristics prioritize relative progress towards bin completion (proportional fill) or provide strong, non-linear incentives for achieving high utilization and perfect fits, while also actively managing fragmented space through penalties. Simply returning zeros or a constant value yields the worst performance, underscoring the necessity of intelligent decision-making at each placement step.\n- \n*   **Keywords**: Emergent Complexity, Adaptive Scoring, Probabilistic Selection, High-Dimensional Tuning.\n*   **Advice**: Design heuristics with self-adjusting weights for multi-factor scores based on observed performance. Integrate probabilistic decision components that evolve over time, favoring highly utilized states. Explore non-monotonic, context-sensitive reward functions.\n*   **Avoid**: Simple objectives, explicit problem data mapping for informed decisions, intuitive expressions, or focusing on implementation clarity and predefined optimal differentiation.\n*   **Explanation**: This approach fosters emergent, dynamic behaviors beyond fixed logic, requiring sophisticated tuning across a complex, adaptive landscape, pushing past superficial simplicity.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}