```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by the principles of efficient space-time utilization, this
    heuristic aims to find the 'tightest fit' for the item.
    A tighter fit means less wasted space within a bin, optimizing the
    overall density of packing and minimizing the necessity for new bins.

    From my perspective, 'Best Fit' is analogous to minimizing the
    residual 'field distortion' (unused capacity) in a local region
    (a bin). We prioritize bins that, upon accommodating the item, leave
    the smallest possible, yet positive, remaining capacity. A perfect fit,
    leaving zero residual capacity, is the most efficient use of space
    and is therefore given the highest priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Scores are calculated as the negative of the remaining capacity after
        the item is placed. Bins where the item does not fit receive a score
        of -infinity to ensure they are never chosen.
        The bin with the largest (least negative) score is the 'best fit'.
    """
    # Initialize scores for all bins to negative infinity.
    # This ensures that bins where the item cannot fit will never be selected.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Determine which bins have sufficient remaining capacity for the item.
    can_fit_mask = bins_remain_cap >= item

    # For the bins where the item fits, calculate the remaining capacity
    # if the item were to be placed there.
    # We want to minimize this remaining capacity to achieve a 'tight fit'.
    # Hence, we take the negative of this value:
    # A smaller positive remainder (e.g., 0.1) becomes a larger negative score (-0.1).
    # A perfect fit (0.0 remainder) becomes the highest score (0.0).
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item
    scores[can_fit_mask] = -remaining_after_fit

    return scores
```
