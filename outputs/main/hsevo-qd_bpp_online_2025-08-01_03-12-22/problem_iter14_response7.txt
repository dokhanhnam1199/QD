```python
import numpy as np

# Global constant for bin capacity.
BIN_CAPACITY = 1.0 

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines 'Best Fit' (minimize remaining space) with a 'Target Fullness'
    reward and a 'Fragment Avoidance' penalty, using fixed weights.
    Prioritizes bins for balanced utilization.
    """
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    can_fit_mask = bins_remain_cap >= item
    
    # If no bin can fit the item, return early with all scores as -inf.
    if not np.any(can_fit_mask):
        return scores

    fitting_bins_idx = np.where(can_fit_mask)[0]
    current_bin_caps = bins_remain_cap[fitting_bins_idx]
    remaining_after_fit = current_bin_caps - item

    # --- Fixed Heuristic Parameters ---
    # These weights and thresholds are chosen to reflect the desired prioritization.
    # The 'Analyze & experience' suggests fixed parameters often outperform complex dynamic ones.
    WEIGHT_BEST_FIT = 10.0          # High weight: directly penalizes wasted space
    WEIGHT_TARGET_FULLNESS = 5.0    # Moderate weight: encourages bins to reach an ideal fullness
    WEIGHT_FRAGMENT_PENALTY = -20.0 # Heavy penalty: strongly discourages leaving very small unusable gaps

    TARGET_FULLNESS = 0.85          # Desired percentage of bin fullness after item placement
    MIN_FRAGMENT_THRESHOLD = 0.05 * BIN_CAPACITY # Smallest acceptable remaining space, below which is penalized

    # === Scoring Components Calculation ===

    # Component 1: Best Fit Score
    # Rewards bins where the remaining capacity after placing the item is smallest.
    # `-(remaining_after_fit)`: a smaller positive remainder leads to a score closer to 0 (higher).
    score_best_fit = -remaining_after_fit

    # Component 2: Target Fullness Score
    # Rewards bins whose new fullness (after placing the item) is close to the TARGET_FULLNESS.
    # Uses a quadratic penalty for deviation: `-(deviation)^2`. Max score of 0 when new_fullness == TARGET_FULLNESS.
    new_fullness = (BIN_CAPACITY - remaining_after_fit) / BIN_CAPACITY
    score_target_fullness = -(new_fullness - TARGET_FULLNESS)**2

    # Component 3: Fragment Avoidance Penalty
    # Applies a large penalty if placing the item would leave a very small, potentially unusable
    # fragment of space in the bin (i.e., remaining_after_fit is positive but below threshold).
    score_fragment_penalty_base = np.where(
        (remaining_after_fit > 1e-9) & (remaining_after_fit < MIN_FRAGMENT_THRESHOLD), # Check for positive but small
        1.0, # Apply a penalty 'unit' if conditions met
        0.0
    )
    # The actual penalty value comes from multiplying by WEIGHT_FRAGMENT_PENALTY.

    # === Combined Score Calculation ===
    # A weighted sum of the individual components.
    combined_scores_for_fitting_bins = (
        WEIGHT_BEST_FIT * score_best_fit +
        WEIGHT_TARGET_FULLNESS * score_target_fullness +
        WEIGHT_FRAGMENT_PENALTY * score_fragment_penalty_base
    )

    # Assign the calculated scores back to the original scores array,
    # leaving -np.inf for bins where the item does not fit.
    scores[fitting_bins_idx] = combined_scores_for_fitting_bins

    return scores
```
