```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes perfect fits explicitly, then best fit for all others.

    This heuristic employs an adaptive strategy by distinctively
    elevating perfect fits, then applying a Best Fit principle to
    maximize residual space efficiency across other options, exploiting
    the pattern of full bin utilization for emergent performance.
    """
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Determine which bins have sufficient remaining capacity for the item.
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity if the item were to be placed in fitting bins.
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Apply Best Fit principle: scores are the negative of remaining capacity.
    # This prioritizes smaller positive remainders (closer to zero).
    scores[can_fit_mask] = -remaining_after_fit

    # Adaptive strategy: Strongly prioritize perfect fits.
    # A perfect fit leaves zero remaining capacity. While -0.0 is already the highest
    # among negative scores, explicitly setting a high positive value ensures this
    # critical pattern (full bin utilization) is unequivocally dominant,
    # preventing any floating-point nuances or tie-breaking ambiguities.
    perfect_fit_mask = (remaining_after_fit == 0.0)
    # Assign a clearly superior score to perfect fits. 1.0 is sufficient as other scores are <= 0.
    scores[can_fit_mask][perfect_fit_mask] = 1.0

    return scores
```
