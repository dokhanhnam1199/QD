```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    As Marie Curie, I seek the most stable and efficient configuration for my
    "elements" (items) within my "reactors" (bins). This function implements
    a 'Best Fit' heuristic, preferring bins that, after accommodating the
    current item, leave the smallest possible amount of remaining space.
    This aims to fill bins as densely as possible, akin to achieving a compact
    atomic structure, thus minimizing wasted space and optimizing the overall
    arrangement. Bins that cannot fit the item are given an infinitely low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin.
    """
    # Initialize priorities with a very low value for all bins.
    # This ensures that bins that cannot fit the item are effectively ignored.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Calculate the space that would remain if the item were placed in each bin.
    # A smaller positive remainder is preferred for 'Best Fit'.
    potential_remaining_space = bins_remain_cap - item

    # Identify which bins can actually accommodate the item.
    # Only consider bins where the remaining capacity is greater than or equal to the item size.
    can_fit_mask = potential_remaining_space >= 0

    # For bins that can fit the item, set their priority.
    # To implement 'Best Fit' (minimize remaining space), we assign the negative
    # of the remaining space as the priority. This way, a smaller positive
    # remaining space (e.g., 0.1) results in a higher priority score (e.g., -0.1)
    # compared to a larger remaining space (e.g., 0.5, yielding -0.5).
    priorities[can_fit_mask] = -potential_remaining_space[can_fit_mask]

    return priorities
```
