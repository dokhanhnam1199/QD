```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on the Best Fit strategy, maximizing the tightness of fit.

    Selects the bin that, after accommodating the item, leaves the smallest
    possible remaining capacity, ensuring efficient space utilization.
    Bins unable to fit the item receive the lowest possible priority.
    """
    # Initialize priorities with an extremely low value, indicating bins are not viable by default.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate a priority score.
    # The Best Fit strategy aims to minimize the remaining capacity after placing the item.
    # To convert this minimization problem into a maximization (higher score = better),
    # we negate the remaining space: `-(remaining_capacity - item)`.
    # A smaller positive remainder (closer to 0) will result in a higher (less negative) score.
    priorities[can_fit_mask] = -(bins_remain_cap[can_fit_mask] - item)

    return priorities
```
