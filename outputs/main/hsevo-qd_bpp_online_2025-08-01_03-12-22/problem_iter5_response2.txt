```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority for each bin, combining 'Best Fit' with an exponential score decay.

    This heuristic prioritizes tight fits exponentially. Perfect fits receive the highest score (1.0).
    Poor fits are de-prioritized with scores approaching zero, effectively reflecting a neutral
    preference for highly unsuitable bins while maintaining strong discrimination for good fits.
    """
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Determine which bins have sufficient remaining capacity for the item.
    can_fit_mask = bins_remain_cap >= item

    # For the bins where the item fits, calculate the remaining capacity
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Use an exponential function to assign scores:
    # A smaller 'remaining_after_fit' (tighter fit) results in a higher score.
    # A perfect fit (0.0 remainder) yields the maximum score (exp(0) = 1.0).
    # For increasing remainders, the score rapidly approaches 0.
    # This gives strong preference to very tight fits, and soft de-prioritization
    # (scores close to zero) for bins that offer a poor fit, combining the
    # precision of 'Best Fit' with a qualitative aspect of 'neutrality' for less ideal bins.
    scale_factor = 0.1  # Adjust this value to control the steepness of the decay.
                        # Smaller values mean a steeper decay, emphasizing very tight fits more.

    scores[can_fit_mask] = np.exp(-remaining_after_fit / scale_factor)

    return scores
```
