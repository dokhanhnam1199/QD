```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Refined Best Fit heuristic with adaptive fullness prioritization.

    This heuristic combines the effectiveness of Best Fit with a subtle
    adaptive mechanism. It prioritizes bins that offer the tightest fit
    (leaving minimal remaining capacity), and secondarily, it favors
    bins that are already more full. This approach aims to consolidate
    items efficiently, exploiting existing bin fullness patterns to
    minimize the number of open bins and promote early bin closure.
    """
    # Initialize scores for all bins to negative infinity.
    # This ensures that bins where the item cannot fit will never be selected.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Determine which bins have sufficient remaining capacity for the item.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the base score using the Best Fit principle:
    # Maximize (item - bins_remain_cap_before_placement).
    # This is equivalent to minimizing (bins_remain_cap_after_placement).
    # A smaller positive remainder results in a larger (less negative) score.
    # A perfect fit (0.0 remainder) results in a score of 0.0, the highest possible for this base.
    base_best_fit_scores = -(bins_remain_cap[can_fit_mask] - item)

    # Adaptive Element / Pattern Exploitation:
    # Introduce a small bonus based on the current fullness of the bin *before* placement.
    # This assumes a normalized bin capacity of 1.0, common in BPP where items are floats.
    # '1.0 - bins_remain_cap' represents the current fill level of the bin.
    # Fuller bins (smaller bins_remain_cap) receive a larger bonus, subtly favoring
    # consolidation into already-used bins. This dynamic helps to "close" bins faster,
    # exploiting the current "pattern" of bin fullness in the solution landscape.
    # The small factor (1e-6) ensures this bonus primarily acts as a tie-breaker
    # or a slight preference without overriding the primary Best Fit objective.
    consolidation_bonus = 1e-6 * (1.0 - bins_remain_cap[can_fit_mask])

    # Combine the base Best Fit score with the consolidation bonus
    scores[can_fit_mask] = base_best_fit_scores + consolidation_bonus

    return scores
```
