```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority for placing an item, implementing an 'Impact-Driven Best Fit' strategy.

    This heuristic strategically minimizes residual bin capacity to maximize space utilization.
    It rigorously prioritizes bins that achieve the tightest fit, explicitly differentiating
    from arbitrary placement to drive optimal packing density.
    """
    # Initialize scores, assigning negative infinity to bins where the item cannot fit.
    # This ensures these bins are never selected, aligning with a strategic, valid-choice-only approach.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins with sufficient capacity to accommodate the item.
    # This is a fundamental structural exploitation of the bin packing problem.
    can_fit_mask = bins_remain_cap >= item

    # For fitting bins, calculate the remaining capacity if the item were placed.
    # This value quantifies the 'wasted space' or 'suboptimal utilization' for a given bin.
    remaining_capacity_after_placement = bins_remain_cap[can_fit_mask] - item

    # Assign priority scores: the negative of the remaining capacity.
    # A smaller positive remainder (tighter fit) results in a score closer to zero (higher priority).
    # A perfect fit (zero remainder) yields the highest possible score of 0.0,
    # directly reflecting optimal immediate space utilization and thus driving performance metrics.
    scores[can_fit_mask] = -remaining_capacity_after_placement

    return scores
```
