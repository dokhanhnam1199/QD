```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns a priority score for each bin, optimized for maximizing bin utilization.

    This heuristic is driven by the principle of achieving the highest possible
    'density' within each selected bin. It aims to maximize the proportion of
    a bin's capacity that is filled after an item is placed, thereby minimizing
    wasted space and reducing the overall number of bins required. By prioritizing
    bins that become most full (or have the smallest remaining capacity),
    it strategically exploits the problem structure to promote efficient packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Scores are calculated to reflect the 'fullness' of the bin after the
        item is placed. A higher score indicates a better fit (more utilized space).
        Bins where the item does not fit receive a score of negative infinity.
    """
    # Initialize scores to negative infinity. Bins that cannot fit the item
    # will retain this score, ensuring they are never chosen.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a mask for bins where the item can physically fit.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can accommodate the item, calculate the new state of 'fullness'.
    # A bin's current 'filled' capacity is (Total_Capacity - bins_remain_cap).
    # The 'newly filled' capacity after placing the item is (current_filled + item).
    # Maximizing this value directly optimizes for higher bin utilization.
    # Note: If Total_Capacity is constant for all bins, maximizing (item - bins_remain_cap)
    # or minimizing (bins_remain_cap - item) is mathematically equivalent.
    # We use (item - bins_remain_cap) to align with this direct maximization.
    scores[can_fit_mask] = item - bins_remain_cap[can_fit_mask]

    return scores
```
