```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, BIN_CAPACITY: float) -> np.ndarray:
    """
    Combines 'Best Fit' with 'Proportional Fill' and a 'Strategic Utilization Bonus'.
    Prioritizes aggressive bin closure, high overall bin utilization, perfect fits,
    and penalizes fragments for optimal packing efficiency.
    """
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item
    if not np.any(can_fit_mask):
        return scores # No bins can fit the item, return default -inf scores

    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
    remaining_after_fit = fitting_bins_remain_cap - item

    # --- Component 1: Base Best Fit Score ---
    # Encourages minimizing the remaining capacity, thus maximizing the filled space.
    best_fit_scores = -remaining_after_fit

    # --- Component 2: Proportional Fill Incentive ---
    # Rewards bins where the item consumes a high ratio of the *remaining* capacity.
    # This aggressively pushes bins towards being filled or closed quickly,
    # aligning with the "proportional fill" insight.
    # Add epsilon to prevent division by zero for numerical stability.
    proportional_fill_incentive = item / (fitting_bins_remain_cap + np.finfo(float).eps)
    PROPORTIONAL_FILL_WEIGHT = 1.5  # Tune this weight based on desired impact.

    # --- Component 3: Strategic Utilization Bonus (from priority_v0) ---
    # Incentivizes achieving high overall bin utilization (i.e., making bins very full).
    # This aids in consolidating items and reducing the total number of bins used,
    # reflecting the importance of "strong, non-linear incentives for high utilization".
    new_utilization = (BIN_CAPACITY - remaining_after_fit) / BIN_CAPACITY

    UTIL_POWER = 4.0               # Aggressiveness of bonus with utilization.
    BONUS_SCALING_FACTOR = 5.0     # Overall magnitude of the bonus.
    CLIP_MIN_UTIL = 0.5            # Minimum utilization for bonus to apply.

    effective_utilization = np.maximum(0.0, new_utilization - CLIP_MIN_UTIL)
    # Scale bonus by item size: larger items contributing to full bins have more impact.
    utilization_bonus = (effective_utilization**UTIL_POWER) * item * BONUS_SCALING_FACTOR

    # --- Component 4: Targeted Bonuses/Penalties ---
    # Explicitly rewards perfect fits and penalizes leaving tiny, unusable fragments,
    # as advised by the analysis on "targeted bonuses" and "managing fragmented space".
    
    # Perfect Fit Bonus: awarded when a bin becomes exactly full (remaining_after_fit == 0).
    perfect_fit_mask = remaining_after_fit == 0
    PERFECT_FIT_BONUS_VALUE = 10.0 * BIN_CAPACITY # Scale by bin capacity for consistency.

    # Fragment Penalty: applied when a very small, non-zero space is left.
    FRAGMENT_THRESHOLD_RATIO = 0.05 # e.g., if remaining < 5% of bin capacity.
    fragment_mask = (remaining_after_fit > 0) & (remaining_after_fit < FRAGMENT_THRESHOLD_RATIO * BIN_CAPACITY)
    FRAGMENT_PENALTY_VALUE = -2.0 * BIN_CAPACITY # Scale by bin capacity.

    # Combine all weighted components
    combined_scores_for_fitting_bins = best_fit_scores + \
                                      (PROPORTIONAL_FILL_WEIGHT * proportional_fill_incentive) + \
                                      utilization_bonus

    # Apply perfect fit bonus and fragment penalty
    combined_scores_for_fitting_bins[perfect_fit_mask] += PERFECT_FIT_BONUS_VALUE
    combined_scores_for_fitting_bins[fragment_mask] += FRAGMENT_PENALTY_VALUE

    scores[can_fit_mask] = combined_scores_for_fitting_bins

    return scores
```
