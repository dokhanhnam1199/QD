```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    base_fit_priority: float = 55.0,
    rem_cap_penalty_factor: float = 3.8,
    rem_cap_penalty_exponent: float = 1.7,
    relative_fill_bonus_factor: float = 8.5,
    perfect_fit_threshold: float = 0.01,
    perfect_fit_bonus: float = 190.0,
    min_allowed_priority: float = 0.5,
    non_fitting_priority: float = -10.0
) -> np.ndarray:
    """Multi-factor, non-linear scoring optimizing bin utilization and closure.
    This function integrates a base fit priority, non-linear remaining capacity
    penalty, relative fill bonus, and a strategic bonus for near-perfect fits,
    calibrated for robust performance in online bin packing.
    """
    # Initialize priorities, with non-fitting bins receiving a low score.
    priorities = np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)

    # Mask for bins where the item can physically fit.
    can_fit_mask = bins_remain_cap >= item

    # Process only fitting bins to avoid unnecessary calculations and errors (e.g., division by zero).
    if np.any(can_fit_mask):
        fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
        remaining_after_placement = fitting_bins_remain_cap - item

        # 1. Non-linear Penalty for Remaining Capacity: This term heavily penalizes
        # bins that would have significant remaining space after item placement.
        # The exponent (e.g., 1.7) ensures that larger remaining capacities are
        # disproportionately penalized, strongly favoring tight fits.
        rem_cap_penalty = rem_cap_penalty_factor * (remaining_after_placement ** rem_cap_penalty_exponent)

        # 2. Relative Fill Bonus: Rewards placing an item into a bin where it
        # occupies a significant proportion of the *current* available capacity.
        # This encourages "filling up" bins, especially those already partially utilized.
        # Division by zero is inherently avoided as fitting_bins_remain_cap >= item > 0.
        relative_fill_ratio = item / fitting_bins_remain_cap
        relative_fill_bonus = relative_fill_bonus_factor * relative_fill_ratio

        # 3. Strategic Near-Perfect Fit Bonus (Intelligent Bin Closure): This
        # component applies a substantial bonus to bins that are almost
        # completely filled after the item is placed (remaining capacity below
        # a small threshold). This aggressively prioritizes bin closure to
        # minimize fragmentation.
        near_perfect_fit_mask = remaining_after_placement <= perfect_fit_threshold
        bin_closure_bonus_term = np.where(near_perfect_fit_mask, perfect_fit_bonus, 0.0)

        # Combine the base priority, non-linear penalty, relative fill bonus,
        # and the strategic bin closure bonus for a comprehensive score.
        calculated_priorities = (
            base_fit_priority
            - rem_cap_penalty
            + relative_fill_bonus
            + bin_closure_bonus_term
        )

        # Ensure that the calculated priority does not fall below a minimum
        # allowed value for bins where the item fits.
        calculated_priorities = np.maximum(calculated_priorities, min_allowed_priority)

        # Assign the calculated priorities to the corresponding bins.
        priorities[can_fit_mask] = calculated_priorities

    return priorities
```
