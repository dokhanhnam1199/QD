```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, BIN_CAPACITY: float = 1.0) -> np.ndarray:
    """
    Calculates priority scores using an "Enhanced Best Fit" heuristic.
    It primarily aims for Best Fit (minimizing remaining capacity) while
    strategically prioritizing true perfect fits to optimize bin closure.
    """
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity after hypothetical placement for fitting bins
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Base score: Pure Best Fit. Higher score for smaller remaining capacity.
    # A perfect fit (0 remaining) naturally yields the highest base score (0.0).
    base_scores_for_fit = -remaining_after_fit

    # Define a small epsilon for robust floating point comparisons.
    epsilon = 1e-9

    # Adaptive Strategy & Pattern Exploitation: Robust Perfect Fit Preference
    # Identify bins that result in a perfect fit (remaining capacity is effectively zero).
    perfect_fit_mask = np.isclose(remaining_after_fit, 0.0, atol=epsilon)

    # Apply a small, symbolic bonus to perfect fits. This ensures they are
    # strictly preferred over any non-perfect fit (even those leaving an
    # infinitesimally small positive remainder), providing a robust numerical
    # edge and reinforcing the strategy of "closing" bins efficiently.
    base_scores_for_fit[perfect_fit_mask] += BIN_CAPACITY * epsilon * 10

    # Assign the calculated scores to the bins where the item can fit.
    scores[can_fit_mask] = base_scores_for_fit

    return scores
```
