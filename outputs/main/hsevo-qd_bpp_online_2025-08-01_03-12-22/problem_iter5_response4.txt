```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which to add an item to each bin, maximizing the ratio of item size to remaining bin capacity.

    This heuristic combines the 'Best Fit' principle with a focus on maximizing the
    proportion of a bin's remaining space consumed by the item. A higher ratio indicates
    a tighter, more efficient use of space, aiming to minimize wasted capacity and new bins.
    """
    # Initialize scores to negative infinity, ensuring bins where the item cannot fit are never chosen.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins with sufficient capacity for the item.
    can_fit_mask = bins_remain_cap >= item

    # For bins where the item fits, calculate the priority score as the ratio of the item size
    # to the bin's current remaining capacity. This intrinsically prioritizes bins
    # where the item fills a larger proportion of the available space, leading to a 'tight fit'.
    # A perfect fit (item == bins_remain_cap) yields a score of 1.0.
    # Note: bins_remain_cap[can_fit_mask] will always be positive as item > 0 and bins_remain_cap >= item.
    scores[can_fit_mask] = item / bins_remain_cap[can_fit_mask]

    return scores
```
