```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    bin_capacity: float, # New parameter: The total, original capacity of each bin
    base_fit_priority: float = 20.0,
    tight_fit_exp_bonus_factor: float = 120.0,
    tight_fit_decay_rate: float = 25.0, # Higher value means bonus drops off very fast as remaining capacity increases
    overall_fill_bonus_factor: float = 80.0,
    overall_fill_exponent: float = 3.5, # High exponent strongly favors bins that are nearly 100% full
    relative_fill_ratio_bonus_factor: float = 15.0, # Rewards filling a large proportion of current available space
    remaining_cap_penalty_factor: float = 0.5, # Introduce a slight linear penalty for remaining capacity
    min_allowed_priority: float = 0.5,
    non_fitting_priority: float = -100.0, # Made more negative to strongly discourage non-fits
    epsilon: float = 1e-9 # Small value to prevent division by zero or numerical instability
) -> np.ndarray:
    """Returns priority with which we want to add item to each bin for online BPP.

    This function implements an advanced, multi-faceted Best Fit strategy with
    parametrically tuned incentives for optimal bin utilization and bin closure.
    It combines an aggressive exponential bonus for tight fits, a strong
    non-linear bonus for overall bin fill, and a relative fill bonus,
    all designed to minimize the total number of bins used.

    Args:
        item: Size of item to be added to the bin. Must be greater than 0.
        bins_remain_cap: Array of current remaining capacities for each bin.
        bin_capacity: The total, original capacity of a single bin. Assumed to be
                      uniform for all bins. This is crucial for calculating
                      overall bin fill ratio.
        base_fit_priority: A base score given to any bin where the item can fit.
                           This acts as a floor for a valid fit before specific
                           bonuses/penalties are applied.
        tight_fit_exp_bonus_factor: Multiplier for the exponential bonus rewarding
                                    very small remaining capacity after item placement.
                                    This creates a steep reward for near-perfect fits.
        tight_fit_decay_rate: Determines how rapidly the tight fit bonus decreases
                              as remaining capacity increases. Higher values mean
                              the bonus drops off much faster, strongly favoring
                              only the most minimal remaining spaces.
        overall_fill_bonus_factor: Multiplier for the bonus based on the overall
                                   fill ratio of the bin *after* placing the item
                                   relative to its original capacity.
        overall_fill_exponent: An exponent (typically > 2) for the overall fill
                               ratio bonus. A high exponent makes the bonus
                               disproportionately higher for very high fill ratios
                               (e.g., 90-100%), strongly incentivizing bin closure.
        relative_fill_ratio_bonus_factor: Multiplier for the bonus rewarding placing
                                          an item where it occupies a significant
                                          proportion of the bin's *current available* capacity.
                                          This helps "clean up" existing partially-filled bins.
        remaining_cap_penalty_factor: A minor linear penalty for the remaining capacity.
                                      This serves as a general disincentive for larger
                                      remaining spaces, complementing the exponential bonus.
        min_allowed_priority: The minimum priority score a bin can receive if
                              the item fits. Prevents valid placement priorities
                              from becoming too low.
        non_fitting_priority: The priority score assigned to bins where the
                              item does not fit. Set to a very low negative value
                              to ensure these are never chosen unless no other option exists.
        epsilon: A small value used for numerical stability, especially to prevent
                 division by zero or issues with floating point comparisons near zero.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    if not isinstance(bins_remain_cap, np.ndarray):
        bins_remain_cap = np.array(bins_remain_cap)

    priorities = np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)

    # Identify bins where the item can fit. Add epsilon for robustness against float precision.
    can_fit_mask = bins_remain_cap >= (item - epsilon)

    # Only process if there are bins where the item can fit
    if np.any(can_fit_mask):
        fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
        remaining_after_placement = fitting_bins_remain_cap - item

        # Ensure remaining_after_placement is non-negative due to potential float errors
        remaining_after_placement[remaining_after_placement < 0] = 0

        # --- Priority Component 1: Tight Fit Exponential Bonus ---
        # This component heavily rewards bins that result in very little remaining space
        # (i.e., item fits very tightly). The exponential decay ensures that even
        # a small increase in `remaining_after_placement` leads to a significant drop in bonus.
        tight_fit_bonus = tight_fit_exp_bonus_factor * np.exp(-tight_fit_decay_rate * remaining_after_placement)

        # --- Priority Component 2: Overall Bin Fill Ratio Bonus ---
        # This rewards making the bin as full as possible relative to its original capacity.
        # A high exponent makes this bonus disproportionately high for bins nearing full capacity,
        # strongly incentivizing bin closure.
        actual_bin_capacity = bin_capacity if bin_capacity > epsilon else 1.0 # Fallback for safety

        # Calculate the total filled amount in the bin AFTER the item is placed
        current_filled_amount = actual_bin_capacity - fitting_bins_remain_cap
        new_filled_amount = current_filled_amount + item
        
        # Cap new_filled_amount at actual_bin_capacity to handle potential overfills due to epsilon/rounding
        new_filled_amount = np.minimum(new_filled_amount, actual_bin_capacity)

        overall_fill_ratio = new_filled_amount / actual_bin_capacity
        overall_fill_bonus = overall_fill_bonus_factor * (overall_fill_ratio ** overall_fill_exponent)

        # --- Priority Component 3: Relative Fill Ratio Bonus (within current remaining space) ---
        # This rewards placing the item where it occupies a significant proportion
        # of the *currently available* capacity in the bin, encouraging efficient use of current space.
        relative_fill_ratio = item / (fitting_bins_remain_cap + epsilon)
        relative_fill_bonus = relative_fill_ratio_bonus_factor * relative_fill_ratio

        # --- Priority Component 4: Minor Remaining Capacity Penalty ---
        # A simple linear penalty for any remaining capacity, acting as a general disincentive
        # for larger gaps, complementing the sharpness of the exponential bonus.
        rem_cap_penalty = remaining_cap_penalty_factor * remaining_after_placement

        # Combine all components
        calculated_priorities = (
            base_fit_priority
            + tight_fit_bonus
            + overall_fill_bonus
            + relative_fill_bonus
            - rem_cap_penalty # Subtract the penalty
        )

        # Ensure that the calculated priority does not fall below a minimum allowed value
        calculated_priorities = np.maximum(calculated_priorities, min_allowed_priority)

        # Assign the calculated priorities to the corresponding bins
        priorities[can_fit_mask] = calculated_priorities

    return priorities
```
