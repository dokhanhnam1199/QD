```python
import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                base_fit_priority: float = 40.67957013415283,
                remaining_capacity_penalty_factor: float = 2.527225052325968,
                relative_fill_bonus_factor: float = 15.0,
                min_allowed_priority: float = 0.5896372460377476,
                non_fitting_priority: float = -8.783827459234484,
                perfect_fit_bonus: float = 10.0,
                perfect_fit_epsilon: float = 1e-9) -> np.ndarray:
    """Combines Best Fit with relative fill and a strong perfect fit bonus.
    Prioritizes tight fits and efficient bin closure for improved packing density.
    """
    # Initialize all priorities with the value for non-fitting bins
    priorities = np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Only process if there are bins where the item can fit
    if np.any(can_fit_mask):
        fitting_bins_cap = bins_remain_cap[can_fit_mask]
        remaining_after_placement = fitting_bins_cap - item

        # Base priority using a "Best Fit" approach: penalizes larger remaining capacities.
        calculated_priorities = base_fit_priority - (remaining_capacity_penalty_factor * remaining_after_placement)

        # Add a bonus based on the item's proportional fill of the bin's current capacity.
        # This rewards higher relative utilization, favoring bins where the item takes up a larger percentage of available space.
        # Assumes item > 0. If item is 0, this term will be 0.
        relative_fill = item / fitting_bins_cap
        calculated_priorities += (relative_fill_bonus_factor * relative_fill)

        # Apply a significant bonus for "perfect fits" (remaining capacity is nearly zero).
        # This incentivizes completely filling and "closing" bins.
        perfect_fit_mask_local = np.isclose(remaining_after_placement, 0.0, atol=perfect_fit_epsilon)
        calculated_priorities[perfect_fit_mask_local] += perfect_fit_bonus

        # Ensure that the calculated priority does not fall below a minimum allowed value
        calculated_priorities = np.maximum(calculated_priorities, min_allowed_priority)

        # Assign the calculated priorities to the corresponding bins
        priorities[can_fit_mask] = calculated_priorities

    return priorities
```
