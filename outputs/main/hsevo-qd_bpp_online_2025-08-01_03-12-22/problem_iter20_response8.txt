```python
import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                base_score: float = 50.0,
                relative_fill_weight: float = 30.0,
                remaining_penalty_weight: float = 60.0,
                remaining_penalty_exponent: float = 2.0,
                min_allowed_priority: float = 0.5,
                non_fitting_priority: float = -10.0) -> np.ndarray:
    """Prioritizes bins by combining relative item fill and a non-linear penalty for remaining capacity.
    This encourages both efficient bin usage and tight packing, implicitly rewarding perfect fits.
    """
    # Initialize all priorities with a score for non-fitting bins
    priorities = np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Only process if there are bins where the item can fit
    if np.any(can_fit_mask):
        fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

        # Calculate the remaining capacity for bins where the item could be placed
        remaining_after_placement = fitting_bins_remain_cap - item

        # Calculate the "relative fill": how much the item fills the *current* bin capacity.
        # This term strongly rewards items that occupy a large proportion of the available space.
        # For a perfect fit (item == fitting_bins_remain_cap), this term contributes its full weight.
        # Assumes item > 0, preventing division by zero if fitting_bins_remain_cap is 0.
        relative_fill = item / fitting_bins_remain_cap

        # Calculate combined priority:
        # 1. Base score provides a general priority level.
        # 2. Relative fill bonus rewards bins where the item fills a significant portion,
        #    promoting effective space utilization and implicitly perfect fits.
        # 3. Non-linear remaining capacity penalty strongly punishes bins with more
        #    leftover space, encouraging tighter fits.
        calculated_priorities = (base_score +
                                 (relative_fill_weight * relative_fill) -
                                 (remaining_penalty_weight * (remaining_after_placement ** remaining_penalty_exponent)))

        # Ensure that the calculated priority does not fall below a minimum allowed value
        calculated_priorities = np.maximum(calculated_priorities, min_allowed_priority)

        # Assign the calculated priorities to the corresponding bins
        priorities[can_fit_mask] = calculated_priorities

    return priorities
```
