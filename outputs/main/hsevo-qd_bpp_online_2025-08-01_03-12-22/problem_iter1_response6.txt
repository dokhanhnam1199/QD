```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Drawing inspiration from the relentless pull of gravity that compacts matter
    into the densest possible states, this heuristic, which I affectionately call
    the 'Singularity Fit', prioritizes bins that will achieve the highest
    density, or conversely, leave the least "empty space" after accommodating the item.
    It's akin to minimizing the volume of spacetime occupied for a given mass,
    creating a more 'perfect' local compression.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the theoretical remaining capacity for each bin if the item were placed.
    # This represents the 'empty space' that would be left in each local universe (bin).
    hypothetical_remaining_capacity = bins_remain_cap - item

    # Initialize priorities. Bins that cannot fit the item are like regions of spacetime
    # too small to contain the incoming energy â€“ they are given an infinitely low priority.
    # They are simply not viable.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # For bins where the item *can* fit (where remaining capacity is non-negative),
    # we want to maximize the "snugness". This means minimizing the remaining
    # hypothetical_remaining_capacity.
    # By taking the negative of this value, a smaller remaining capacity (closer to zero)
    # results in a higher (less negative) priority score, thus favoring the 'tightest' fit.
    # This forces the item towards the most efficient available 'event horizon'.
    viable_bins_mask = hypothetical_remaining_capacity >= 0
    priorities[viable_bins_mask] = -hypothetical_remaining_capacity[viable_bins_mask]

    return priorities
```
