```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    BIN_CAPACITY: float = 1.0,
    base_fit_priority: float = 50.0,
    rem_cap_penalty_factor: float = 3.5,
    rem_cap_penalty_exponent: float = 1.7,
    relative_fill_bonus_factor: float = 8.0,
    min_allowed_priority: float = 0.5,
    non_fitting_priority: float = -10.0,
    fragment_penalty_value: float = 2.0,
    fragment_threshold_ratio: float = 0.05,
    epsilon: float = 1e-9
) -> np.ndarray:
    """Combines non-linear best-fit with relative fill bonus, adding a calibrated
    penalty for small, fragmented remaining capacities to optimize bin closure
    and avoid unusable space.
    """
    priorities = np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)
    can_fit_mask = bins_remain_cap >= item

    if np.any(can_fit_mask):
        fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
        remaining_after_placement = fitting_bins_remain_cap - item

        # Apply a non-linear penalty for remaining capacity (stronger for larger remainders)
        rem_cap_penalty = rem_cap_penalty_factor * (remaining_after_placement ** rem_cap_penalty_exponent)

        # Apply a bonus for filling a high proportion of the bin's current capacity
        relative_fill_bonus = relative_fill_bonus_factor * (item / fitting_bins_remain_cap)

        # Calculate base priority for fitting bins
        calculated_priorities = base_fit_priority - rem_cap_penalty + relative_fill_bonus

        # Introduce a penalty for fragmented space (small, non-zero remaining capacity)
        # This discourages creating bins with small, hard-to-use gaps.
        fragment_threshold = fragment_threshold_ratio * BIN_CAPACITY
        fragment_mask = (remaining_after_placement > epsilon) & (remaining_after_placement < fragment_threshold)
        calculated_priorities[fragment_mask] -= fragment_penalty_value

        # Ensure priorities don't fall below a minimum for valid placements
        calculated_priorities = np.maximum(calculated_priorities, min_allowed_priority)

        # Assign calculated priorities to the fitting bins
        priorities[can_fit_mask] = calculated_priorities

    return priorities
```
