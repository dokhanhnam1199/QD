```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add an item to each bin,
    incorporating an adaptive strategy based on item size.

    This heuristic transcends a static rule by dynamically adjusting its
    approach to the problem's current state, enabling a more strategic
    allocation. It introduces a subtle 'search dynamic' by blending the
    'tightest fit' principle with a 'bin state awareness' that adapts
    to the incoming item's size.

    For smaller items, it subtly reinforces the tendency to 'top off'
    already fuller bins, exploiting patterns of existing partial fills to
    consolidate space. For larger items, it gently encourages placing them
    into more empty (newer) bins, aiming to create more 'primary' bins
    and avoid fragmenting existing ones with large items that might leave
    awkwardly small remnants.

    The `K_STRATEGIC` and `BIN_CAPACITY_ASSUMED` are parameters that could
    be 'learned' or tuned for specific problem instances or item distributions,
    representing a form of implicit parameter learning within the heuristic's design.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
                         It is assumed that the nominal BIN_CAPACITY is
                         implicitly 1.0 for calculation of relative item sizes
                         and bin states. If bin capacities vary or are scaled
                         differently, this value should be adjusted.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Scores are calculated to guide the selection towards a more globally
        efficient packing strategy. Bins where the item does not fit receive
        a score of -infinity to ensure they are never chosen.
        The bin with the largest (least negative) score is the 'best' strategic fit.
    """
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Determine which bins have sufficient remaining capacity for the item.
    can_fit_mask = bins_remain_cap >= item

    # If no bin fits, return the scores array with -inf for all bins.
    if not np.any(can_fit_mask):
        return scores

    # --- Core Best Fit (Tightness) Component ---
    # This remains the primary driver, ensuring efficient local space utilization.
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item
    base_fit_scores = -remaining_after_fit

    # --- Strategic (Adaptive Bin State) Component ---
    # This component adds a dynamic preference based on item size and bin fullness.

    # Assumption: The standard bin capacity is 1.0. This is common in BPP literature.
    # If the bins_remain_cap values imply a different scale (e.g., integers up to 100),
    # BIN_CAPACITY_ASSUMED should be set accordingly (e.g., 100).
    BIN_CAPACITY_ASSUMED = 1.0

    # Normalize item size (0 to 1) for strategic decision-making.
    item_norm = item / BIN_CAPACITY_ASSUMED

    # Calculate a strategic weight factor that adapts based on item_norm.
    # It ranges from -1 (for very small items, favoring fuller bins)
    # to +1 (for very large items, favoring emptier bins).
    # When item_norm is 0.5, the factor is 0, making the strategy purely Best Fit.
    strategic_weight_factor = 2 * (item_norm - 0.5)

    # Calculate a 'bin state score' for each candidate bin.
    # This score represents how full/empty a bin is, relative to its total capacity.
    # It ranges from -0.5 (for a full bin, bins_remain_cap near 0)
    # to +0.5 (for an empty bin, bins_remain_cap near BIN_CAPACITY_ASSUMED).
    bin_state_score = (bins_remain_cap[can_fit_mask] / BIN_CAPACITY_ASSUMED) - 0.5

    # Determine the overall impact of the strategic component.
    # K_STRATEGIC is a tunable parameter controlling the influence of adaptation.
    # A smaller K_STRATEGIC means Best Fit dominates more.
    K_STRATEGIC = 0.1 # This value can be tuned via experimentation.

    # Combine the strategic components:
    # If strategic_weight_factor is negative (small item) AND bin_state_score is negative (full bin),
    # their product is positive, adding a bonus to fuller bins.
    # If strategic_weight_factor is positive (large item) AND bin_state_score is positive (empty bin),
    # their product is positive, adding a bonus to empty bins.
    strategic_component_contribution = K_STRATEGIC * strategic_weight_factor * bin_state_score

    # Combine the base Best Fit score with the strategic component.
    final_scores = base_fit_scores + strategic_component_contribution

    # Apply the calculated scores to the bins that can fit the item.
    scores[can_fit_mask] = final_scores

    return scores
```
