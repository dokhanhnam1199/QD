```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which to add an item to each bin,
    using an 'Adaptive Fit with Residual Management' (AFRM) heuristic.

    This heuristic mutates the 'Best Fit' approach by incorporating
    an adaptive strategy that intelligently manages residual bin capacity.
    It identifies and exploits "patterns" in the resulting bin states:
    strongly favoring perfect closure, moderately favoring near-closure,
    and significantly penalizing fragmented, awkward intermediate capacities.
    This creates an emergent search dynamic that pushes towards more
    efficient consolidation of items and fewer, more usable bin states,
    aiming for superior overall packing performance.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin. It is assumed
                         that a typical bin's total capacity is 1.0 for
                         defining internal thresholds (e.g., if items are
                         normalized sizes). Adjust thresholds if your
                         BIN_CAPACITY significantly differs.

    Return:
        Array of same size as bins_remain_cap with priority score for each bin.
        Scores are calculated based on the resulting remaining capacity,
        with strategic bonuses and penalties applied. Bins where the item
        does not fit receive a score of -infinity to ensure they are never chosen.
    """
    # Assuming a normalized bin capacity for defining strategic thresholds.
    # This is an internal parameter for the heuristic's "knowledge" about bin scale.
    BIN_CAPACITY = 1.0
    # A small epsilon for robust floating-point comparisons.
    EPSILON = 1e-9

    # Initialize scores for all bins to negative infinity.
    # Bins where the item cannot fit will receive this default low score.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can conceptually fit.
    # An item fits if its size is less than or approximately equal to the remaining capacity.
    can_fit_mask = bins_remain_cap >= item - EPSILON

    # Calculate the remaining capacity for bins where the item can be placed.
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Base score: Apply the Best Fit principle (negative of remaining capacity).
    # A smaller positive remainder results in a less negative (higher) score.
    scores[can_fit_mask] = -remaining_after_fit

    # --- Adaptive Strategy: Modifying scores based on remaining capacity patterns ---

    # These thresholds define 'intelligent decision points' in our heuristic.
    # They categorize the resulting remaining capacity into strategic zones.
    # Values are relative to BIN_CAPACITY and can be tuned for specific problem instances.
    VERY_SMALL_REMAINDER_THRESHOLD = 0.10 * BIN_CAPACITY  # e.g., < 10% of bin capacity
    MEDIUM_REMAINDER_LOWER_THRESHOLD = 0.10 * BIN_CAPACITY # Start of the 'awkward' range
    MEDIUM_REMAINDER_UPPER_THRESHOLD = 0.40 * BIN_CAPACITY # End of the 'awkward' range

    # Iterate over only the bins that can fit the item to apply strategic adjustments.
    fit_indices_global = np.where(can_fit_mask)[0]

    for i_local, i_global in enumerate(fit_indices_global):
        rem = remaining_after_fit[i_local] # The remaining capacity for this specific bin

        # 1. Perfect Fit (Near Zero) Bonus:
        # Give an extremely high priority to exact fits (or very near misses).
        # This strongly encourages bin closure, which is highly efficient.
        if np.isclose(rem, 0.0, atol=EPSILON):
            # A large fixed bonus to make this the highest priority.
            scores[i_global] += BIN_CAPACITY * 2.5
            continue # No further modifications needed for a perfect fit

        # 2. Very Small Remainder Bonus:
        # If the remainder is small (but not zero), it means the bin is almost full.
        # Encourage closing such bins to consolidate space, reducing open bins.
        elif rem > EPSILON and rem < VERY_SMALL_REMAINDER_THRESHOLD:
            # The bonus is inversely proportional to the remainder size within this range,
            # giving slightly higher preference to even tighter "very small" fits.
            bonus_magnitude = (VERY_SMALL_REMAINDER_THRESHOLD - rem) / VERY_SMALL_REMAINDER_THRESHOLD
            scores[i_global] += BIN_CAPACITY * 0.7 * bonus_magnitude # A significant, but less than perfect, bonus

        # 3. Medium Remainder Penalty:
        # Apply a penalty for creating "awkward" medium-sized remainders.
        # These are often too large for very small items and too small for large items,
        # leading to fragmented and hard-to-use space, hindering future packing.
        elif rem >= MEDIUM_REMAINDER_LOWER_THRESHOLD and rem < MEDIUM_REMAINDER_UPPER_THRESHOLD:
            # A substantial fixed penalty.
            scores[i_global] -= BIN_CAPACITY * 0.8

        # For large remainders (rem >= MEDIUM_REMAINDER_UPPER_THRESHOLD),
        # the score remains primarily determined by the original Best Fit calculation.
        # This implicitly favors leaving larger contiguous spaces when a tight fit
        # isn't possible, which can be useful for future larger items.

    return scores
```
