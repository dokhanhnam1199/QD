```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines proportional fill with perfect fit bonuses and tiny remainder penalties.

    This heuristic prioritizes high relative utilization, strongly rewards perfect fits,
    and discourages leaving small, unusable fragmented space.
    """
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Mask for bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    # --- Base Score: Proportional Fill (from priority_v0) ---
    # Prioritizes bins where the item consumes the highest ratio of the bin's current
    # remaining capacity. This aggressively pushes bins towards closure.
    # Assumes item > 0. If item is 0, score becomes 0 for all fitting bins.
    # If item > 0 and a bin's remaining capacity is 0, can_fit_mask will be False.
    # Therefore, no division by zero issues expected for typical BPP.
    scores[can_fit_mask] = item / bins_remain_cap[can_fit_mask]

    # --- Perfect Fit Bonus ---
    # Explicitly rewards scenarios where the item perfectly fills the remaining capacity.
    # This aligns with insights about strong, non-linear incentives for high utilization
    # and bin closure.
    perfect_fit_mask = (bins_remain_cap == item)
    # A substantial bonus to make perfect fits highly desirable, outweighing other factors.
    PERFECT_FIT_BONUS = 10.0
    scores[perfect_fit_mask] += PERFECT_FIT_BONUS

    # --- Tiny Remainder Penalty ---
    # Penalizes bins that would be left with a very small, potentially unusable,
    # positive remaining capacity after placing the item. This addresses the need
    # to manage fragmented space.
    potential_remainder = bins_remain_cap - item

    # Define a threshold for what constitutes a "tiny" remainder.
    # For normalized bin capacities (e.g., max 1.0), 0.1 is often considered tiny.
    TINY_REMAINDER_THRESHOLD = 0.1
    # A significant penalty to discourage such fragmentation.
    TINY_REMAINDER_PENALTY = 5.0

    # Apply penalty only to bins where the item fits, and a tiny, positive remainder would result.
    tiny_remainder_mask = (potential_remainder > 0) & (potential_remainder < TINY_REMAINDER_THRESHOLD) & can_fit_mask
    scores[tiny_remainder_mask] -= TINY_REMAINDER_PENALTY

    return scores
```
