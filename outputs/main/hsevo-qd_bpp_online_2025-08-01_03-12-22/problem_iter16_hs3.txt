import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    k_util_bonus: float = 8.590383549132635,
    k_fragment_penalty: float = 3.171950858997778,
    exp_sharpness: float = 9.90535730978404,
    epsilon: float = 5.729863631844796e-05,
    fragment_threshold: float = 0.384310088061933) -> np.ndarray:
    """Combines proportional fill, non-linear high utilization bonus, and fragmentation penalty.

    Prioritizes bins by relative fill, rewards perfect/near-perfect fits,
    and penalizes creating very small, often unusable, remaining space.
    """
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Mask for bins where the item can actually fit
    can_fit_mask = bins_remain_cap >= item

    # If no bin can fit the item, return scores with -inf for all
    if not np.any(can_fit_mask):
        return scores

    # Get relevant remaining capacities for eligible bins
    valid_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # --- Heuristic Components ---

    # 1. Proportional Fill (from 'priority_v0'): Base score for how much of the bin's current
    #    remaining capacity the item will occupy. Maximize this for a tighter fit.
    base_fill_scores = item / valid_bins_remain_cap

    # Calculate remaining capacity after placing the item
    remaining_after_item = valid_bins_remain_cap - item

    # 2. Non-linear Bonus for High Utilization / Near-Perfect Fits (from 3rd & 7th heuristics)
    # This bonus heavily rewards bins that become very full or achieve a perfect fit.
    # The exponential term ensures a strong, non-linear incentive as remaining_after_item approaches zero.
    utilization_bonus = k_util_bonus * np.exp(-exp_sharpness * remaining_after_item)

    # 3. Penalty for Fragmentation (from 6th & 7th heuristics)
    # Penalizes leaving very small, non-zero amounts of space that might be unusable.
    # This applies if the remaining space is positive but below a certain threshold.
    fragment_penalty_mask = (remaining_after_item > epsilon) & (remaining_after_item <= fragment_threshold)
    fragment_penalties = np.zeros_like(base_fill_scores)
    fragment_penalties[fragment_penalty_mask] = k_fragment_penalty

    # Combine all components for the valid bins
    total_valid_scores = base_fill_scores + utilization_bonus - fragment_penalties

    # Assign calculated scores back to the original scores array
    scores[can_fit_mask] = total_valid_scores

    return scores
