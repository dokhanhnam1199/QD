```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority for online bin packing, prioritizing tight fits
    with a secondary tie-breaking for further space optimization.
    This extends 'Best Fit' by favoring bins that are already more utilized
    among those with the same best primary fit, enhancing overall packing density.
    """
    # Initialize scores for all bins to negative infinity.
    # This ensures that bins where the item cannot fit are never selected,
    # aligning with the crucial functional correctness observed in better heuristics.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit. This is the fundamental
    # 'structural exploitation' required for any meaningful placement.
    can_fit_mask = bins_remain_cap >= item

    # If no bin can fit the item, all scores remain -inf, indicating a new bin is needed.
    if not np.any(can_fit_mask):
        return scores

    # Calculate the primary priority (Best Fit): Minimize remaining capacity.
    # A smaller positive remainder results in a larger (less negative) score.
    # A perfect fit (0 remainder) yields the highest possible primary score of 0.0.
    primary_remain_after_fit = bins_remain_cap[can_fit_mask] - item
    primary_scores = -primary_remain_after_fit

    # Implement a secondary priority for tie-breaking among bins with identical primary scores.
    # To further optimize space (impact-driven), among equally "best fit" bins,
    # we prefer the one that is already more utilized (i.e., has smaller remaining capacity).
    # This consolidates items more effectively, preventing fragmentation across multiple bins.
    # Maximizing -bins_remain_cap achieves this (smaller capacity -> larger negative value -> higher score when added).
    secondary_scores = -bins_remain_cap[can_fit_mask]

    # Combine primary and secondary scores. A small epsilon ensures the primary score
    # dominates completely, while the secondary score only influences tie-breaking.
    # This reflects a strategic, hierarchical decision-making process.
    EPSILON = 1e-9 # A sufficiently small value to ensure primary ranking is preserved

    scores[can_fit_mask] = primary_scores + EPSILON * secondary_scores

    return scores
```
