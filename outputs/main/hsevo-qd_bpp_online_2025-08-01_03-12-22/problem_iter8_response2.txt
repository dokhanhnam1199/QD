```python
import numpy as np

# Assume BIN_CAPACITY is a global constant or default as per the problem description.
# In a real-world scenario, this would ideally be passed as an argument or configured.
BIN_CAPACITY = 1.0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Adaptive tuning of Best Fit: subtly rewards perfect fits and penalizes small fragments
    to optimize long-term bin utilization, improving upon aggressive fixed parameters.
    """
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity after hypothetical placement for fitting bins
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Primary scoring component: Utilization after placing the item.
    # This acts as the Best Fit foundation, preferring fuller bins.
    utilization_score = (BIN_CAPACITY - remaining_after_fit) / BIN_CAPACITY

    # Define a small epsilon for robust floating point comparisons to zero.
    epsilon = 1e-9

    # Strategic Bonus: Subtly reward perfect fits.
    # The previous bonus of 1.0 was found to be too aggressive, potentially
    # disrupting overall strategy. A smaller bonus gently pushes perfect fits.
    perfect_fit_mask = np.isclose(remaining_after_fit, 0.0, atol=epsilon)
    utilization_score[perfect_fit_mask] += 0.05 # A moderate bonus (e.g., 5% of max score)

    # Strategic Penalty: Slightly penalize very small, non-zero remaining capacities.
    # These "fragmented" spaces can be hard to use later. A smaller penalty
    # avoids over-penalization seen in previous versions.
    # The fragment threshold remains reasonable for identifying small remnants.
    fragment_threshold = 0.05 * BIN_CAPACITY
    
    # Identify bins that have a small, non-zero remainder.
    fragment_mask = (remaining_after_fit > epsilon) & (remaining_after_fit < fragment_threshold)
    
    # Subtract a small penalty to discourage creating these hard-to-use fragments.
    utilization_score[fragment_mask] -= 0.02 # A minor penalty (e.g., 2% of max score)

    # Assign the calculated scores to the bins where the item can fit.
    scores[can_fit_mask] = utilization_score

    return scores
```
