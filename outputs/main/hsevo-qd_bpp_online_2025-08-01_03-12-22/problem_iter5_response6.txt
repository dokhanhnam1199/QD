```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which to add item to each bin, strongly favoring tight fits.

    This heuristic employs an 'impact-driven' strategy, using an exponential decay to
    aggressively prioritize bins that result in minimal remaining capacity after placement.
    A perfect fit yields the highest score, with priorities sharply decreasing for
    even slightly larger remainders, promoting highly efficient space utilization.
    """
    # Initialize scores for all bins to negative infinity.
    # This ensures that bins where the item cannot fit will never be selected.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Determine which bins have sufficient remaining capacity for the item.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity if the item were to be placed in suitable bins.
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Apply an exponential decay to the remaining capacity to generate scores.
    # This creates a strong non-linear preference for smaller remainders:
    # A smaller remaining capacity (closer to 0) yields a higher score (closer to 1.0).
    # The '10.0' is a sensitivity factor (k); higher values strongly penalize larger remainders,
    # making the heuristic more aggressive in seeking perfect/near-perfect fits.
    scores[can_fit_mask] = np.exp(-10.0 * remaining_after_fit)

    return scores
```
