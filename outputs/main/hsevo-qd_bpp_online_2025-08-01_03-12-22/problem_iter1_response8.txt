```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin.

    Inspired by the meticulous work of Rosalind Franklin, this heuristic aims for
    the 'Best Fit' by prioritizing bins that, after accommodating the item, would
    have the least remaining capacity. This strategy minimizes wasted space
    within each bin, leading to a more compact and efficient packing, much like
    how molecular structures find their most stable and ordered arrangement.

    A perfect fit (leaving zero remaining capacity) is considered the highest priority
    among valid options. Bins where the item cannot physically fit are assigned
    an extremely low priority score.

    Args:
        item: Size of the item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of the same size as bins_remain_cap with a priority score for each bin.
        Higher scores indicate a more preferred bin.
    """
    # Initialize all priorities to negative infinity. This ensures that any bin
    # where the item does not fit will never be chosen, as it will retain this
    # very low score.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask to identify bins where the item can physically fit.
    # An item fits if its size is less than or equal to the bin's remaining capacity.
    can_fit_mask = bins_remain_cap >= item

    # For the bins where the item can fit, calculate the 'remaining space'
    # if the item were placed there. This is a measure of the 'tightness' of the fit.
    remaining_space_after_fit = bins_remain_cap[can_fit_mask] - item

    # To implement the Best Fit heuristic (which aims to minimize
    # remaining_space_after_fit), we assign priorities by taking the negative
    # of this remaining space.
    # - A perfect fit (remaining_space_after_fit = 0) will yield a priority of 0.
    # - A tight fit (small positive remaining_space_after_fit) will yield a
    #   priority slightly less than 0 (e.g., -0.1).
    # - A loose fit (large positive remaining_space_after_fit) will yield a
    #   much more negative priority (e.g., -0.5).
    # This ensures that the bin resulting in the smallest positive remaining space
    # (or a perfect 0) will have the highest priority (closest to 0 or 0 itself).
    priorities[can_fit_mask] = -remaining_space_after_fit

    return priorities
```
