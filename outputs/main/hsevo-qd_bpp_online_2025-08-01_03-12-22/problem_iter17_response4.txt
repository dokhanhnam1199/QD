```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best Fit with non-linear penalties, a perfect fit bonus, and
    discourages tiny remainders, optimizing for dense packing and bin closure.
    """
    # Initialize scores to negative infinity, ensuring un-fittable bins are never chosen.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Mask for bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity if item were placed in fittable bins.
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Heuristic Parameters (tuned for performance, might need further adjustment)
    # Exponent for non-linear penalty on remaining capacity. Higher values severely penalize larger gaps.
    REM_CAP_PENALTY_EXPONENT = 2.0
    # Bonus for achieving a perfect fit (remaining capacity is zero).
    PERFECT_FIT_BONUS = 1.0
    # Threshold below which a non-zero remainder is considered "tiny" and potentially useless.
    TINY_REMAINDER_THRESHOLD = 0.05
    # Penalty applied to bins that result in a tiny, non-zero remainder, to discourage fragmentation.
    PENALTY_FOR_TINY_REMAINDER = 0.001

    # Base score: Apply a non-linear penalty to remaining capacity.
    # Perfect fit (0 remainder) initially gets 0.0. Larger remainders get increasingly negative scores.
    scores[can_fit_mask] = -(remaining_after_fit ** REM_CAP_PENALTY_EXPONENT)

    # Identify bins that result in a perfect fit (remaining capacity is effectively zero).
    perfect_fit_cond = np.isclose(remaining_after_fit, 0.0, atol=1e-9)
    # Add a significant bonus for perfect fits, making them the top priority.
    scores[can_fit_mask][perfect_fit_cond] += PERFECT_FIT_BONUS

    # Identify valid bins that would result in a very small, non-zero remainder.
    # A small epsilon (1e-9) is used to robustly check for non-zero floating-point values.
    tiny_remainder_cond = (remaining_after_fit > 1e-9) & (remaining_after_fit < TINY_REMAINDER_THRESHOLD)
    # Apply a penalty to discourage leaving highly fragmented, potentially unusable space.
    scores[can_fit_mask][tiny_remainder_cond] -= PENALTY_FOR_TINY_REMAINDER

    return scores
```
