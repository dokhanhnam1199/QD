```python
import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                base_fit_priority: float = 40.67957013415283,
                remaining_capacity_penalty_factor: float = 2.527225052325968,
                min_allowed_priority: float = 0.5896372460377476,
                non_fitting_priority: float = -8.783827459234484,
                perfect_fit_bonus: float = 10.0,
                perfect_fit_epsilon: float = 1e-9) -> np.ndarray:
    """Combines Best Fit with a strong bonus for perfect item placement.
    Prioritizes minimizing remaining bin capacity while significantly rewarding bins
    that are completely filled by the item, improving space utilization.
    """
    # Initialize all priorities with the value for non-fitting bins
    priorities = np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Only process if there are bins where the item can fit
    if np.any(can_fit_mask):
        # Calculate the remaining capacity for bins where the item could be placed
        remaining_after_placement = bins_remain_cap[can_fit_mask] - item

        # Calculate the base priority using a "Best Fit" approach
        # This penalizes larger remaining capacities, encouraging a tight fit.
        calculated_priorities = base_fit_priority - (remaining_capacity_penalty_factor * remaining_after_placement)

        # Apply a significant bonus for "perfect fits" (remaining capacity is nearly zero).
        # This incentivizes closing bins efficiently.
        perfect_fit_mask_local = np.isclose(remaining_after_placement, 0.0, atol=perfect_fit_epsilon)
        calculated_priorities[perfect_fit_mask_local] += perfect_fit_bonus

        # Ensure that the calculated priority does not fall below a minimum allowed value
        calculated_priorities = np.maximum(calculated_priorities, min_allowed_priority)

        # Assign the calculated priorities to the corresponding bins
        priorities[can_fit_mask] = calculated_priorities

    return priorities
```
