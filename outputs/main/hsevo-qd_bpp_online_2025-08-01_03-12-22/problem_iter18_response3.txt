```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    exact_fit_bonus: float = 1000.0,
    inverse_rem_cap_factor: float = 150.0,
    inverse_rem_cap_epsilon: float = 1e-6,
    relative_fill_bonus_factor: float = 15.0,
    relative_fill_exponent: float = 2.5,
    min_allowed_priority: float = 0.5,
    non_fitting_priority: float = -1000.0
) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function implements an aggressively tuned "Best Fit Decreasing" like strategy,
    designed to maximize bin closure and dense packing. It features a strong
    inverse reward for minimal remaining capacity, an amplified bonus for
    high utilization, and an explicit, high priority for exact fits.

    Args:
        item: Size of item to be added to the bin. Must be greater than 0.
        bins_remain_cap: Array of current remaining capacities for each bin.
        exact_fit_bonus: A substantially high bonus applied if the item fits
                         exactly into a bin (leaving 0 remaining capacity).
                         This ensures such a bin is almost always the top choice.
        inverse_rem_cap_factor: A multiplier for the inverse of the remaining
                                capacity after item placement. This term provides
                                a sharp, non-linear reward for very small
                                remaining capacities, heavily favoring tight fits.
        inverse_rem_cap_epsilon: A tiny value added to the remaining capacity
                                 to prevent division by zero, particularly
                                 when an exact fit occurs. Its magnitude ensures
                                 it doesn't significantly alter scores for
                                 non-exact fits.
        relative_fill_bonus_factor: A multiplier for a bonus based on the item's size
                                    relative to the bin's current available capacity.
                                    This term rewards effective utilization of existing
                                    bin space.
        relative_fill_exponent: An exponent (typically > 1) applied to the
                                relative fill ratio. A higher exponent makes
                                the bonus disproportionately larger for items
                                that fill a very high percentage of the
                                current available capacity, encouraging dense packing.
        min_allowed_priority: The minimum priority score a bin can receive if
                              the item fits. Prevents valid placement priorities
                              from becoming negligibly low.
        non_fitting_priority: The priority score assigned to bins where the
                              item does not fit. Set to a very low/negative
                              value to clearly exclude these bins.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities with the score for non-fitting bins
    priorities = np.full_like(bins_remain_cap, fill_value=non_fitting_priority, dtype=float)

    # Identify bins where the item can fit
    can_fit_mask = bins_remain_cap >= item

    # Only process if there are bins where the item can fit
    if np.any(can_fit_mask):
        fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
        remaining_after_placement = fitting_bins_remain_cap - item

        # Initialize calculated priorities for fitting bins
        calculated_priorities = np.zeros_like(remaining_after_placement)

        # 1. Inverse Remaining Capacity Reward (Aggressive Bin Closure)
        # This term provides a steep, inverse reward. As 'remaining_after_placement'
        # approaches zero, this term's value skyrockets, making bins with very
        # tight fits extremely desirable. The epsilon handles exact fits (0 remaining).
        inverse_rem_cap_score = inverse_rem_cap_factor / (remaining_after_placement + inverse_rem_cap_epsilon)
        calculated_priorities += inverse_rem_cap_score

        # 2. Relative Fill Bonus (Utilization Incentive)
        # Rewards placing the item where it constitutes a larger fraction of the
        # *current* available capacity in the bin. Applying an exponent (e.g., 2.5)
        # disproportionately amplifies the score for high fill ratios, pushing for
        # efficient use of available space.
        # Division by zero for `fitting_bins_remain_cap` is avoided because
        # `item > 0` implies `fitting_bins_remain_cap >= item > 0`.
        relative_fill_ratio = item / fitting_bins_remain_cap
        relative_fill_bonus = relative_fill_bonus_factor * (relative_fill_ratio ** relative_fill_exponent)
        calculated_priorities += relative_fill_bonus

        # 3. Explicit Exact Fit Bonus (Ultimate Bin Closure Priority)
        # This is a critical addition. If an item fits a bin exactly, it should
        # almost always be the preferred choice, as it perfectly closes a bin.
        # This bonus ensures such a scenario yields the highest possible priority.
        exact_fit_mask = (remaining_after_placement == 0)
        calculated_priorities[exact_fit_mask] += exact_fit_bonus

        # Ensure that the calculated priority does not fall below a minimum allowed value
        calculated_priorities = np.maximum(calculated_priorities, min_allowed_priority)

        # Assign the calculated priorities to the corresponding bins
        priorities[can_fit_mask] = calculated_priorities

    return priorities
```
