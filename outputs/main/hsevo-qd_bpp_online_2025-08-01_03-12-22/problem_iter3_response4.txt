```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic is a 'quadratic' mutation of the 'Best Fit' strategy,
    designed to enhance its effectiveness by aggressively prioritizing
    tighter fits. It does this by scoring bins based on the negative square
    of the remaining capacity after the item is placed.

    The rationale for this quadratic penalty is to create a non-linear
    preference:
    1.  **Amplified Best Fit:** Larger remaining capacities are penalized
        disproportionately more than smaller ones. For instance, a bin
        leaving 0.4 capacity will be penalized 16 times more than one
        leaving 0.1 capacity (0.4^2 vs 0.1^2), whereas the linear 'Best Fit'
        penalizes it only 4 times more. This strongly pushes the selection
        towards the absolute tightest available fits.
    2.  **Reduced Fragmentation (Hypothesis):** By making the cost of
        leaving even slightly more space significantly higher, this heuristic
        aims to encourage maximum compaction within chosen bins. This could
        potentially lead to fewer, more fully utilized bins and reduce
        the occurrence of bins with small, difficult-to-fill remnants,
        thereby potentially lowering the total bin count.
    3.  **Perfect Fit Preservation:** A perfect fit (0 remaining capacity)
        still results in a score of 0.0, which remains the highest possible
        score, as intended.

    This approach maintains the core principle of Best Fit but applies a
    stronger 'gravitational pull' towards the most efficient space utilization,
    aligning with the objective of minimizing the number of bins. Its
    effectiveness would be validated through empirical testing on diverse
    problem instances.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Scores are calculated as the negative square of the remaining capacity
        after the item is placed. Bins where the item does not fit receive a score
        of -infinity to ensure they are never chosen.
        The bin with the largest (least negative) score is the 'best fit'.
    """
    # Initialize scores for all bins to negative infinity.
    # This ensures that bins where the item cannot fit will never be selected.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Determine which bins have sufficient remaining capacity for the item.
    can_fit_mask = bins_remain_cap >= item

    # For the bins where the item fits, calculate the remaining capacity
    # if the item were to be placed there.
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # Apply a non-linear (quadratic) penalty to the remaining capacity.
    # We take the negative of the squared remaining capacity.
    # This heavily penalizes larger remainders, making very tight fits
    # (smaller remainders) disproportionately more attractive.
    scores[can_fit_mask] = -np.power(remaining_after_fit, 2.0)

    return scores
```
