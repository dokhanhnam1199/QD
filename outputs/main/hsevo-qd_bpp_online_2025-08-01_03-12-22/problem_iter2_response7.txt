```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using the Best Fit strategy.

    Selects the bin that, after placing the item, leaves the smallest
    positive remaining capacity. A perfect fit yields the highest priority.
    """
    # Initialize scores to negative infinity for bins that cannot fit the item.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can be placed.
    can_fit_mask = bins_remain_cap >= item

    # For valid bins, calculate the remaining capacity after item placement.
    # We prioritize minimizing this remaining capacity; thus, we use its negative as the score.
    # A smaller positive remainder (closer to zero) results in a higher (less negative) score.
    # A perfect fit (zero remainder) achieves the maximum score of 0.0.
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item
    scores[can_fit_mask] = -remaining_after_fit

    return scores
```
