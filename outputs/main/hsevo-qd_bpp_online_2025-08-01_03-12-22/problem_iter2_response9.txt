```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Implements a 'Best Fit' strategy for online bin packing.
    Prioritizes bins that will have the smallest remaining capacity after placing
    the item, aiming to compact items and conserve larger capacities for future use.
    """
    # Calculate the remaining capacity if the item were placed in each bin.
    potential_remaining = bins_remain_cap - item

    # Initialize priority scores. Bins that cannot fit the item receive the lowest possible priority.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can actually fit (remaining capacity would be non-negative).
    can_fit_mask = potential_remaining >= 0

    # For fitting bins, the score is the negative of the potential remaining capacity.
    # This ensures that a smaller remainder results in a higher (less negative) priority.
    priority_scores[can_fit_mask] = -potential_remaining[can_fit_mask]

    return priority_scores
```
