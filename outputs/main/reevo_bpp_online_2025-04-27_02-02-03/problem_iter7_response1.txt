```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: prioritize only bins that can accommodate the item.
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # If no bin can fit the item, prioritize bins with maximum remaining capacity
        priorities = bins_remain_cap / np.max(bins_remain_cap) # Normalize to [0, 1]
        return priorities

    # Calculate fill percentage if item were placed in each feasible bin.
    fill_percentage = (bins_remain_cap[feasible_bins] - item) / np.max(bins_remain_cap)
    
    # Define a small constant to avoid division by zero or very large values.
    epsilon = 1e-6

    # Reward tight fits: the smaller the remaining capacity, the higher the priority.
    # Invert the remaining capacity and add a small constant for stability.
    tight_fit_priority = 1.0 / (fill_percentage + epsilon)
    
    # Boost priority for almost exact fits
    exact_fit = np.abs(bins_remain_cap[feasible_bins] - item) < 0.001
    tight_fit_priority[exact_fit] += 10
    
    # Gently penalize waste
    waste_penalty = (fill_percentage + epsilon)**2  # Square to emphasize larger waste
    tight_fit_priority -= waste_penalty

    priorities[feasible_bins] = tight_fit_priority
    
    return priorities
```
