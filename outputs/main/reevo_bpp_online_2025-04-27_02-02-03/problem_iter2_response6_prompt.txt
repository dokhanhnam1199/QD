{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Very high priority for bins that can fit the item almost perfectly.\n    fit_threshold = 0.95\n    perfect_fit_bins = (bins_remain_cap >= item) & (item / bins_remain_cap >= fit_threshold)\n    priorities[perfect_fit_bins] += 1000\n\n    # Higher priority for bins that can fit the item, but not too loosely.\n    good_fit_bins = (bins_remain_cap >= item)\n    priorities[good_fit_bins] += (bins_remain_cap[good_fit_bins] - item) / bins_remain_cap[good_fit_bins]\n\n    # Small priority for bins close to full, which avoids spreading items.\n    almost_full_bins = bins_remain_cap > 0\n    priorities[almost_full_bins] += 1 / (bins_remain_cap[almost_full_bins] + 0.00001)\n\n    # Negative priority for bins where the item doesn't fit.\n    no_fit_bins = bins_remain_cap < item\n    priorities[no_fit_bins] = -100\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate the wasted space if the item is placed in the bin\n    wasted_space = bins_remain_cap - item\n\n    # Give a high priority to bins that can accommodate the item.\n    feasible_bins = wasted_space >= 0\n    priorities[feasible_bins] = 1\n\n    #Prioritize almost full bins when the item can be put into the bin.\n    almost_full_threshold = 0.1 #adjust this parameter. The closer it is to zero the more you want the level to be almost full\n    almost_full_bins = (wasted_space >=0) & (wasted_space <= almost_full_threshold * np.max(bins_remain_cap)) #compare to max for normalization purposes\n    priorities[almost_full_bins] += 2\n\n    # Add a bonus for bins that minimize wasted space\n    # This is only applied to feasible bins.\n    min_wasted_space = np.min(wasted_space[feasible_bins]) if np.any(feasible_bins) else np.inf # find minimum waste among feasible bins\n    best_fit_bins = (wasted_space >= 0) & (wasted_space <= min_wasted_space + 1e-6)  # Add tolerance for floating point comparison\n    priorities[best_fit_bins] += 1\n\n    # Penalize bins that would leave a very small remaining capacity, even if feasible\n    small_remaining_cap_threshold = 0.1 #Adjust this parameter based on what defines a small remaining cap.\n    small_remaining_cap_bins = (wasted_space >= 0) & (wasted_space < small_remaining_cap_threshold * np.max(bins_remain_cap))\n    priorities[small_remaining_cap_bins] -= 0.5\n\n    # Return priorities\n    return priorities\n\n[Reflection]\nThe better code normalizes wasted space and prioritizes almost-full bins, penalizing small remaining capacities for refinement.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}