{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    max_cap = np.max(bins_remain_cap)\n\n    # Feasibility is paramount: Infeasible bins get a very low priority.\n    feasible_bins = bins_remain_cap >= item\n    priorities[~feasible_bins] = -np.inf  # Set infeasible bins to lowest priority\n\n    # Calculate wasted space\n    wasted_space = bins_remain_cap - item\n    wasted_space[~feasible_bins] = np.inf\n\n    # Normalize wasted space for comparison.\n    normalized_waste = wasted_space / max_cap\n\n    # Reward bins that minimize normalized wasted space (Best Fit).\n    best_fit_bonus = 5.0\n    priorities[feasible_bins] += best_fit_bonus * (1 - normalized_waste[feasible_bins])\n\n    # Prioritize almost full bins (small remaining capacity).\n    almost_full_threshold = 0.1\n    almost_full_bonus = 3.0\n    almost_full_bins = feasible_bins & (normalized_waste <= almost_full_threshold)\n    priorities[almost_full_bins] += almost_full_bonus\n\n    # Penalize fragmentation gently (bins that leave a very small remaining capacity).\n    fragmentation_threshold = 0.05\n    fragmentation_penalty = 1.0\n    fragmented_bins = feasible_bins & (normalized_waste <= fragmentation_threshold)\n    priorities[fragmented_bins] -= fragmentation_penalty\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = 1.0  # Assuming bin capacity is 1.0, can be generalized\n\n    # Feasibility check\n    eligible_bins = bins_remain_cap >= item\n\n    if not np.any(eligible_bins):\n        # If no bin can fit the item, prioritize bins with maximum remaining capacity\n        priorities = bins_remain_cap / np.max(bins_remain_cap)  # Normalize to [0, 1]\n        return priorities\n\n    # Remaining capacity after adding the item\n    remaining_capacity_after = bins_remain_cap[eligible_bins] - item\n\n    # Calculate fill ratio\n    fill_ratio = (bin_capacity - bins_remain_cap[eligible_bins] + item) / bin_capacity\n\n    # Reward tight fits (bins where the remaining capacity is small), avoid division by zero\n    tight_fit_score = 1.0 / (remaining_capacity_after + 0.0001)\n\n    # Penalize excessive waste (bins that are too large for the item)\n    # The penalty is proportional to the square of the remaining capacity.\n    waste_penalty = remaining_capacity_after**2\n\n\n    # Combine the scores, balancing tight fit and waste penalty\n    priorities[eligible_bins] = tight_fit_score / (1 + waste_penalty) #The lower the waste, the higher the priority\n\n    # Boost the priority of bins that have almost exactly the item size left. This favors best-fit\n    exact_fit = np.abs(bins_remain_cap[eligible_bins] - item) < 0.001  # tolerate small error\n    priorities[eligible_bins][exact_fit] += 10\n\n    #Prioritize bins that become full after packing\n    full_fit = np.abs(bins_remain_cap[eligible_bins] - item) < 0.00001\n    priorities[eligible_bins][full_fit] += 5\n\n    return priorities\n\n[Reflection]\nFavor tight fits, penalize waste, and handle infeasibility gracefully. Reward bins that become full.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}