{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Very high priority for bins that can fit the item almost perfectly.\n    fit_threshold = 0.95\n    perfect_fit_bins = (bins_remain_cap >= item) & (item / bins_remain_cap >= fit_threshold)\n    priorities[perfect_fit_bins] += 1000\n\n    # Higher priority for bins that can fit the item, but not too loosely.\n    good_fit_bins = (bins_remain_cap >= item)\n    priorities[good_fit_bins] += (bins_remain_cap[good_fit_bins] - item) / bins_remain_cap[good_fit_bins]\n\n    # Small priority for bins close to full, which avoids spreading items.\n    almost_full_bins = bins_remain_cap > 0\n    priorities[almost_full_bins] += 1 / (bins_remain_cap[almost_full_bins] + 0.00001)\n\n    # Negative priority for bins where the item doesn't fit.\n    no_fit_bins = bins_remain_cap < item\n    priorities[no_fit_bins] = -100\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility: Only consider bins that can fit the item\n    feasible_bins = bins_remain_cap >= item\n    \n    # 2. Remaining capacity after placement: Prioritize bins that leave less space\n    remaining_capacity = bins_remain_cap - item\n    remaining_capacity[~feasible_bins] = np.inf # Assign a very high value for infeasible bins\n    \n    # 3. Fill percentage: Prioritize bins with higher fill percentage after adding the item\n    fill_percentage = (bins_remain_cap - remaining_capacity) / (np.max(bins_remain_cap)+item) #fill percentage with hypothetically filling an empty bin by item size + max_bin_capacity\n    \n    \n    # 4. Combination of the above factors\n    priorities[feasible_bins] = (fill_percentage[feasible_bins] + 1 / (remaining_capacity[feasible_bins] + 1e-9)) #small constant to avoid divide by zero\n\n\n    return priorities\n\n[Reflection]\nPrioritize feasibility, minimize remaining capacity, and maximize fill percentage for online bin packing.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}