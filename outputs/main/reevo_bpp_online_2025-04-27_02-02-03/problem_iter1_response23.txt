```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Give high priority to bins where item fits, but not by much.  First-Fit-Decreasing Inspired
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        priorities[fit_mask] = bins_remain_cap[fit_mask] - item  # Smaller difference is better
        priorities[fit_mask] = np.max(bins_remain_cap) - priorities[fit_mask] #Invert.
        # Bonus for being close to full after packing
        remaining_after_pack = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] += np.exp(-remaining_after_pack) #Exponential decay for remaining. Prevents very large remaining capacities.

    # Penalize bins where item doesn't fit
    not_fit_mask = ~fit_mask
    priorities[not_fit_mask] = -np.inf

    return priorities
```
