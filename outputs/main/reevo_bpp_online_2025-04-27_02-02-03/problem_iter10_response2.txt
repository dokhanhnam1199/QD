```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # If no bin can fit the item, prioritize bins with maximum remaining capacity
        priorities = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.ones_like(bins_remain_cap)
        return priorities

    # Remaining capacity after placement
    remaining_capacity_after_placement = bins_remain_cap[eligible_bins] - item

    # Reward exact fits strongly
    exact_fit_threshold = 0.001
    exact_fit = np.abs(remaining_capacity_after_placement) <= exact_fit_threshold
    priorities[eligible_bins][exact_fit] += 1000  # Significantly higher priority for near-exact fits

    # Prioritize bins with smaller remaining capacity (encourage filling) - but not too small
    near_full_threshold = 0.1
    not_near_full = remaining_capacity_after_placement >= near_full_threshold
    priorities[eligible_bins][not_near_full] += 1.0 / (remaining_capacity_after_placement[not_near_full] + 0.001) if np.any(not_near_full) else 0

    # Penalize wasted space (non-linearly)
    wasted_space = remaining_capacity_after_placement
    priorities[eligible_bins] -= 0.1 * wasted_space**2

    # Discourage near-full bins - less aggressively now that exact fits are highly prioritized
    near_full = remaining_capacity_after_placement < near_full_threshold
    priorities[eligible_bins][near_full] *= 0.8  # Reduce priority if almost full, but not as much as before

    # Normalize to avoid extreme values dominating (only if priorities are positive)
    max_priority = np.max(priorities)
    if max_priority > 0:
        priorities /= max_priority

    return priorities
```
