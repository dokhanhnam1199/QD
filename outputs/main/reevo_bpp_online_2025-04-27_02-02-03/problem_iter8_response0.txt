```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # If no bin can fit, prioritize bins with largest remaining capacity
        priorities = bins_remain_cap / np.max(bins_remain_cap)
        return priorities

    # Calculate remaining capacity after placing the item in eligible bins
    remaining_capacity_after_placement = bins_remain_cap[eligible_bins] - item

    # Normalize the remaining capacity to get a fill ratio (higher is better)
    fill_ratio = (bins_remain_cap[eligible_bins] - remaining_capacity_after_placement) / bins_remain_cap[eligible_bins]
    
    # Base priority on fill ratio; Higher fill ratio (more full) gets higher priority.
    priorities[eligible_bins] = fill_ratio

    # Reward tight fits (small remaining capacity) using reciprocal of remaining capacity
    # Add a small value to avoid division by zero in case of exact fit.
    priorities[eligible_bins] += 0.5 / (remaining_capacity_after_placement + 0.001)

    # Significant boost for near-perfect fits.
    exact_fit_threshold = 0.001
    exact_fit_bins = np.abs(bins_remain_cap[eligible_bins] - item) <= exact_fit_threshold
    priorities[eligible_bins][exact_fit_bins] += 10  # Substantial priority boost

    # Moderate penalty for bins that, after the item is added, are nearly full
    near_full_threshold = 0.1
    near_full_bins = remaining_capacity_after_placement < near_full_threshold
    priorities[eligible_bins][near_full_bins] *= 0.75 # Slight decrease in priority

    # Prioritize bins that are already partially full
    already_full_threshold = 0.2 # Adjust this hyperparameter
    already_full_bins = bins_remain_cap[eligible_bins] < (1 - already_full_threshold) #Assuming bin size is 1
    priorities[eligible_bins][already_full_bins] *= 1.2 # Give a moderate bonus

    # Add a penalty for large wasted space.
    large_waste_threshold = 0.5
    large_waste_bins = remaining_capacity_after_placement > large_waste_threshold
    priorities[eligible_bins][large_waste_bins] *= 0.8

    return priorities
```
