```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First, consider only bins that can accommodate the item.
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # If no bin can fit the item, prioritize bins with maximum remaining capacity
        priorities = bins_remain_cap / np.max(bins_remain_cap)  # Normalize to [0, 1]
        return priorities

    # Calculate remaining capacity after placing the item in eligible bins.
    remaining_capacity_after_placement = bins_remain_cap[eligible_bins] - item

    # Prioritize bins with smaller remaining capacity after placement using inverse.
    priorities[eligible_bins] = 1.0 / (remaining_capacity_after_placement + 0.001)

    # Strongly boost priority for near-exact fits.
    exact_fit_threshold = 0.01
    exact_fit = np.abs(remaining_capacity_after_placement) <= exact_fit_threshold
    priorities[eligible_bins][exact_fit] += 50

    # Gently penalize near-full bins to avoid extreme fragmentation.
    near_full_threshold = 0.1
    near_full_bins = remaining_capacity_after_placement < near_full_threshold
    priorities[eligible_bins][near_full_bins] *= 0.3

    return priorities
```
