```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # A bin can only be selected if its remaining capacity >= item
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return priorities # no possible bins
    
    # Calculate the remaining capacity after adding the item for eligible bins
    remaining_capacity_after_item = bins_remain_cap[eligible_bins] - item
    
    # Calculate the utilization rate (remaining capacity / original capacity) for eligible bins
    # Use original remaining capacity to calculate utilization (fraction of how full the bin *would* be)
    utilization_rate = (bins_remain_cap[eligible_bins] - remaining_capacity_after_item) / 1.0
    
    # Prioritize bins with higher utilization rate (higher fill percentage)
    priorities[eligible_bins] = utilization_rate  # Higher priority for higher utilization

    return priorities
```
