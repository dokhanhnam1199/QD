```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    # 2. Remaining capacity after placement: Prioritize bins that leave less space
    remaining_capacity = bins_remain_cap - item
    remaining_capacity[~feasible_bins] = np.inf # Assign a very high value for infeasible bins
    
    # 3. Fill percentage: Prioritize bins with higher fill percentage after adding the item
    fill_percentage = (bins_remain_cap[feasible_bins] - remaining_capacity[feasible_bins]) / (bins_remain_cap[feasible_bins] + 1e-9) #fill percentage

    
    # 4. Combination of the above factors
    priorities[feasible_bins] = fill_percentage + (1 / (remaining_capacity[feasible_bins] + 1e-9)) #small constant to avoid divide by zero

    return priorities
```
