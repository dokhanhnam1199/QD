```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0  # Assuming bin capacity is 1.0, can be generalized

    # Feasibility check
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # If no bin can fit the item, prioritize bins with maximum remaining capacity, scaled down.
        priorities = bins_remain_cap / np.max(bins_remain_cap) / 100 # Normalize to [0, 0.01]
        return priorities

    # Remaining capacity after adding the item
    remaining_capacity_after = bins_remain_cap[eligible_bins] - item

    # Calculate fill ratio (how full the bin will be after packing)
    fill_ratio = (bin_capacity - bins_remain_cap[eligible_bins] + item) / bin_capacity

    # Reward tight fits (bins where the remaining capacity is small)
    # The smaller the remaining capacity, the higher the score
    tight_fit_score = 1.0 / (remaining_capacity_after + 0.0001)

    # Penalize excessive waste (bins that are too large for the item)
    # The penalty is proportional to the square of the remaining capacity.  Increase penalty effect.
    waste_penalty = remaining_capacity_after**2 * 2

    # Combine the scores, balancing tight fit and waste penalty
    priorities[eligible_bins] = tight_fit_score / (1 + waste_penalty) #The lower the waste, the higher the priority

    # Boost the priority of bins that have almost exactly the item size left. This favors best-fit
    exact_fit = np.abs(bins_remain_cap[eligible_bins] - item) < 0.001  # tolerate small error
    priorities[eligible_bins][exact_fit] += 10

    #Prioritize bins that become full after packing. Give a bigger bonus.
    full_fit = np.abs(bins_remain_cap[eligible_bins] - item) < 0.00001
    priorities[eligible_bins][full_fit] += 20

    # Slightly prioritize bins that are already somewhat full, but not too full.
    already_full_threshold_low = 0.2
    already_full_threshold_high = 0.8
    already_full = (bins_remain_cap >= item) & (bins_remain_cap < (bin_capacity - item)*already_full_threshold_high) & (bins_remain_cap > (bin_capacity - item)*already_full_threshold_low)
    priorities[already_full] += 2

    return priorities
```
