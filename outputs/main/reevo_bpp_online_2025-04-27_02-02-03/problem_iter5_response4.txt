```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0 # Assume bin capacity is 1.0

    # First, consider only bins that can accommodate the item.
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # If no bin can fit the item, prioritize bins with maximum remaining capacity. This can help in scenarios where future items are smaller.
        priorities = bins_remain_cap / bin_capacity # Use fill ratio as priority since no bins fit the item
        return priorities

    # Calculate remaining capacity after placing the item.
    remaining_capacity_after_placement = bins_remain_cap[eligible_bins] - item

    # Calculate fill ratio after placing the item. This will guide selection towards fuller bins.
    fill_ratio_after_placement = (bin_capacity - remaining_capacity_after_placement) / bin_capacity
    
    # Prioritize bins with smaller remaining capacity (Best-Fit approach).  Add a small constant to prevent division by zero.
    priorities[eligible_bins] = 1.0 / (remaining_capacity_after_placement + 0.0001)

    # Enhance priority for bins that result in a high fill ratio.  This is to encourage good packing.
    priorities[eligible_bins] += fill_ratio_after_placement * 2 # Multiply the fill ratio by a factor to give it more weight.

    # Heavily prioritize near-exact fits.
    exact_fit_threshold = 0.001
    exact_fit = np.abs(bins_remain_cap[eligible_bins] - item) <= exact_fit_threshold
    priorities[eligible_bins][exact_fit] += 100  # Substantially boost priority for near-exact fits.

    # Penalize bins that, after placing the item, still have significant remaining capacity. Encourage fuller bins.
    waste_threshold = 0.5
    excessive_waste = remaining_capacity_after_placement > waste_threshold
    priorities[eligible_bins][excessive_waste] *= 0.1

    return priorities
```
