```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0  # Assuming bin capacity is 1.0, can be generalized

    # Feasibility check
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # If no bin can fit the item, prioritize bins with maximum remaining capacity (Worst Fit)
        priorities = bins_remain_cap / np.max(bins_remain_cap)
        return priorities

    # Remaining capacity after adding the item
    remaining_capacity_after = bins_remain_cap[eligible_bins] - item

    # Tight Fit Score: Higher score for smaller remaining capacity
    tight_fit_score = 1.0 / (remaining_capacity_after + 0.0001)

    # Waste Penalty: Higher penalty for larger remaining capacity
    waste_penalty = remaining_capacity_after**2

    # Combine scores: Balance tight fit and waste penalty.
    priorities[eligible_bins] = tight_fit_score - waste_penalty

    # Exact Fit Bonus: Give a significant bonus if the item fits almost perfectly.
    exact_fit = np.abs(bins_remain_cap[eligible_bins] - item) < 0.001
    priorities[eligible_bins][exact_fit] += 10

    # Full Fit Bonus: Prioritize bins that become full after packing
    full_fit = np.abs(bins_remain_cap[eligible_bins] - item) < 0.00001
    priorities[eligible_bins][full_fit] += 5

    # Normalize the priorities to ensure they are in a reasonable range.
    max_priority = np.max(priorities[eligible_bins]) if np.any(eligible_bins) else 1.0 # Avoid division by zero
    priorities[eligible_bins] /= max_priority

    return priorities
```
