```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Can the item fit in the bin?
    feasible_bins = bins_remain_cap >= item

    # 2. Remaining capacity after packing: Smaller is better (First Fit Decreasing principle)
    remaining_capacity_after_packing = bins_remain_cap - item
    remaining_capacity_after_packing[~feasible_bins] = np.inf  # Penalize infeasible bins

    # 3. Avoid fragmentation: Bins with capacities closest to item size get higher priority
    capacity_difference = np.abs(bins_remain_cap - item)


    # Combine the factors:
    priorities[feasible_bins] = (
        1 / (1 + remaining_capacity_after_packing[feasible_bins]) +
        1 / (1 + capacity_difference[feasible_bins])
    )

    # If no bin is feasible, assign small priority (or zero) to all
    if not np.any(feasible_bins):
        priorities[:] = 0.0

    return priorities
```
