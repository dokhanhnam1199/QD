{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\nPrioritize feasibility. Heavily reward near-exact fits based on remaining capacity. Gently penalize both wasted space (non-linearly) and near-full bins. Gracefully handle infeasibility. Normalize remaining capacity for bin selection.\n\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First, consider only bins that can accommodate the item.\n    eligible_bins = bins_remain_cap >= item\n\n    if not np.any(eligible_bins):\n        # If no bin can fit the item, prioritize bins with maximum remaining capacity\n        priorities = bins_remain_cap / np.max(bins_remain_cap) # Normalize to [0, 1]\n        return priorities\n\n    # For eligible bins, calculate a score based on remaining capacity *after* placing the item.\n    remaining_capacity_after_placement = bins_remain_cap[eligible_bins] - item\n    \n    # Prioritize bins where the remaining capacity after placing the item is small, but non-negative.\n    # This encourages filling bins more completely. Add a small value to avoid division by zero in case of exact fit.\n    priorities[eligible_bins] = 1.0 / (remaining_capacity_after_placement + 0.001)\n    \n    # Boost the priority of bins that have almost exactly the item size left. This favors best-fit\n    exact_fit = np.abs(bins_remain_cap[eligible_bins] - item) < 0.001 # tolerate small error\n    priorities[eligible_bins][exact_fit] += 10  # Add a significant boost\n\n    # Reduce priority for near-full bins even if there is some leftover capacity after addition\n    near_full_threshold = 0.1 # Adjust this hyperparameter as needed.\n    near_full_bins = (bins_remain_cap[eligible_bins] - item) < near_full_threshold\n    priorities[eligible_bins][near_full_bins] *= 0.5 # Reduce priority, but not eliminate\n\n    return priorities\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}