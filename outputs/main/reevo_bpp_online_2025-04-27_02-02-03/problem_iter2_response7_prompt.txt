{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Heuristic 1:  Favor bins that can fit the item\n    fit_mask = bins_remain_cap >= item\n    priorities[fit_mask] += 1\n\n    # Heuristic 2:  Among bins that fit, favor bins with smallest remaining capacity AFTER placing the item\n    remaining_after_placement = bins_remain_cap[fit_mask] - item\n    if len(remaining_after_placement) > 0:\n        min_remaining = np.min(remaining_after_placement)\n        min_remaining_mask = (bins_remain_cap[fit_mask] - item) == min_remaining\n        priorities[fit_mask][min_remaining_mask] += 2 # Give slightly higher priority\n\n    # Heuristic 3: If no bin fits, prioritize the bin with the largest remaining capacity\n    if not np.any(fit_mask):\n        priorities = bins_remain_cap / np.max(bins_remain_cap)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # High priority for bins that can fit the item snugly\n    fit_mask = bins_remain_cap >= item\n    \n    # Give a score based on how full the bin will be after adding the item\n    fill_ratios = np.zeros_like(bins_remain_cap, dtype=float)\n    fill_ratios[fit_mask] = (item / bins_remain_cap[fit_mask])\n    \n    priorities[fit_mask] = 1 - np.abs(fill_ratios[fit_mask] - 1)  # Penalize bins that have a lot of space left over\n\n    # Bonus for nearly full bins. We don't want the bin to be too full though\n    nearly_full_mask = (bins_remain_cap >= item) & (bins_remain_cap - item <= 0.1)\n    priorities[nearly_full_mask] += 0.5  # slightly higher priority for these bins.\n\n\n    # If no bins can fit, then return a very low negative priority\n    if not np.any(fit_mask):\n        priorities = np.full_like(bins_remain_cap, -np.inf)\n    \n\n    return priorities\n\n[Reflection]\nThe better code uses fill ratio and penalizes wasted space, promoting snug fits. Negative priority avoids unfit bins.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}