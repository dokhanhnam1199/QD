```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0 # Assume bin capacity is 1 for normalization

    # Feasibility check: prioritize bins that can accommodate the item
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # If no bin can fit, prioritize bins with the maximum remaining normalized capacity
        priorities = bins_remain_cap / bin_capacity
        return priorities
    
    # Calculate fill percentage if the item is placed in each feasible bin
    fill_percentage = (bins_remain_cap[feasible_bins] - item) / bin_capacity
    
    # Reward tight fits (smaller remaining capacity is better)
    priorities[feasible_bins] = 1.0 - fill_percentage

    # Boost priority for near exact fits
    exact_fit = np.abs(bins_remain_cap[feasible_bins] - item) < 0.001  # Tolerate a small error
    priorities[feasible_bins][exact_fit] += 10 # Significant boost to priority
    
    # Gently penalize large waste
    waste_threshold = 0.5 # Normalize between [0, 1]
    large_waste = fill_percentage > waste_threshold
    priorities[feasible_bins][large_waste] *= 0.5 # Gentle penalization

    return priorities
```
