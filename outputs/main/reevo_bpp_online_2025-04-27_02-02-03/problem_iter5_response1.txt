```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0  # Assuming bin capacity is 1.0, can be generalized

    # Feasibility check
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # If no bin can fit the item, prioritize bins with maximum remaining capacity
        priorities = bins_remain_cap / np.max(bins_remain_cap)  # Normalize to [0, 1]
        return priorities

    # Normalized fill ratio (how full the bin would be if the item were added)
    fill_ratio = (bin_capacity - bins_remain_cap + item) / bin_capacity
    fill_ratio_eligible = fill_ratio[eligible_bins]

    # Remaining capacity after adding the item
    remaining_capacity_after = bins_remain_cap[eligible_bins] - item

    # Reward tight fits (bins where the remaining capacity is small)
    tight_fit_score = 1.0 / (remaining_capacity_after + 0.001)

    # Penalize excessive waste (bins that are too large for the item)
    waste_penalty = np.abs(remaining_capacity_after)

    # Combine the scores
    priorities[eligible_bins] = tight_fit_score #/ (1 + waste_penalty) # waste_penalty without +1 to maintain high priority

    # Boost the priority of bins that have almost exactly the item size left. This favors best-fit
    exact_fit = np.abs(bins_remain_cap[eligible_bins] - item) < 0.001  # tolerate small error
    priorities[eligible_bins][exact_fit] += 10

    #Prioritize bins that becomes full after packing
    full_fit = np.abs(bins_remain_cap[eligible_bins] - item) < 0.00001
    priorities[eligible_bins][full_fit] += 5
    
    return priorities
```
