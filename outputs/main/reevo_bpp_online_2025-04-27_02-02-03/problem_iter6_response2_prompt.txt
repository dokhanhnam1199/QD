{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # A bin can only be selected if its remaining capacity >= item\n    eligible_bins = bins_remain_cap >= item\n\n    if not np.any(eligible_bins):\n        return priorities # no possible bins\n    \n    # Calculate the remaining capacity after adding the item for eligible bins\n    remaining_capacity_after_item = bins_remain_cap[eligible_bins] - item\n    \n    # Calculate the utilization rate (remaining capacity / original capacity) for eligible bins\n    # Use original remaining capacity to calculate utilization (fraction of how full the bin *would* be)\n    utilization_rate = (bins_remain_cap[eligible_bins] - remaining_capacity_after_item) / 1.0\n    \n    # Prioritize bins with higher utilization rate (higher fill percentage)\n    priorities[eligible_bins] = utilization_rate  # Higher priority for higher utilization\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can accommodate the item\n    eligible_bins = bins_remain_cap >= item\n\n    if not np.any(eligible_bins):\n        # If no bin can fit, prioritize bins with largest remaining capacity\n        priorities = bins_remain_cap / np.max(bins_remain_cap)\n        return priorities\n\n    # Calculate remaining capacity after placing the item in eligible bins\n    remaining_capacity_after_placement = bins_remain_cap[eligible_bins] - item\n\n    # Normalize the remaining capacity to get a fill ratio (higher is better)\n    fill_ratio = (bins_remain_cap[eligible_bins] - remaining_capacity_after_placement) / bins_remain_cap[eligible_bins]\n    \n    # Base priority on fill ratio; Higher fill ratio (more full) gets higher priority.\n    priorities[eligible_bins] = fill_ratio\n\n    # Reward tight fits (small remaining capacity) using reciprocal of remaining capacity\n    # Add a small value to avoid division by zero in case of exact fit.\n    priorities[eligible_bins] += 1.0 / (remaining_capacity_after_placement + 0.001)\n\n    # Significant boost for near-perfect fits.\n    exact_fit_threshold = 0.001\n    exact_fit_bins = np.abs(bins_remain_cap[eligible_bins] - item) <= exact_fit_threshold\n    priorities[eligible_bins][exact_fit_bins] += 10  # Substantial priority boost\n\n    # Moderate penalty for bins that, after the item is added, are nearly full\n    near_full_threshold = 0.1\n    near_full_bins = remaining_capacity_after_placement < near_full_threshold\n    priorities[eligible_bins][near_full_bins] *= 0.75 # Slight decrease in priority\n\n    # Prioritize bins that are already partially full\n    already_full_threshold = 0.2 # Adjust this hyperparameter\n    already_full_bins = bins_remain_cap[eligible_bins] < (1 - already_full_threshold) #Assuming bin size is 1\n    priorities[eligible_bins][already_full_bins] *= 1.2 # Give a moderate bonus\n\n    return priorities\n\n[Reflection]\nThe better code uses fill ratio, tight fit rewards, and near-full penalties for improved bin utilization.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}