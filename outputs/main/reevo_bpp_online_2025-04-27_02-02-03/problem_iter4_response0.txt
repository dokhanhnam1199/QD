```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0  # Assuming bins have unit capacity

    # Infeasible bins get a strongly negative priority
    infeasible_bins = item > bins_remain_cap
    priorities[infeasible_bins] = -1000  # Large negative priority

    # Calculate wasted space if item is placed in the bin
    wasted_space = bins_remain_cap - item

    # Feasible bins
    feasible_bins = ~infeasible_bins

    if np.any(feasible_bins):
        # Relative waste: prioritize bins with less relative waste
        relative_waste = wasted_space[feasible_bins] / bin_capacity
        priorities[feasible_bins] += (1 - relative_waste) * 5  # Scale the priority

        # Prioritize near-full bins: Add bonus if bin is near full after placing item
        near_full_threshold = 0.1 * bin_capacity
        near_full_bins = feasible_bins & (wasted_space <= near_full_threshold)
        priorities[near_full_bins] += 3  # Significant bonus

        # Penalize tiny remainders: Avoid bins that leave very small space
        tiny_remainder_threshold = 0.05 * bin_capacity
        tiny_remainder_bins = feasible_bins & (wasted_space > 0) & (wasted_space < tiny_remainder_threshold)
        priorities[tiny_remainder_bins] -= 2  # Mild penalty

        # Prioritize bins where the item fits best (smallest waste)
        min_waste = np.min(wasted_space[feasible_bins])
        best_fit_bins = feasible_bins & (wasted_space <= (min_waste + 1e-6))
        priorities[best_fit_bins] += 1 # Small bonus for best fit

    return priorities
```
