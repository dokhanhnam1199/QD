```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # High priority for bins that can fit the item
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = 10  # Substantially higher base priority

    # Prioritize bins with smaller remaining capacity after adding the item (proportional)
    remaining_after_fit = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] += 10 / (remaining_after_fit + 0.0001)  # avoid division by zero and stronger prioritization of smaller remainders

    # Bonus for bins that are almost full *before* adding the item, as long as they fit. Stronger bonus.
    almost_full_threshold = 0.2  # Increased threshold for "almost full"
    almost_full_mask = (bins_remain_cap >= item) & (bins_remain_cap < (item + almost_full_threshold))
    priorities[almost_full_mask] += 50  # Significantly higher priority for almost full bins

    # Penalize bins that cannot fit the item, proportional to the waste
    no_fit_mask = bins_remain_cap < item
    waste = item - bins_remain_cap[no_fit_mask]
    priorities[no_fit_mask] = - (waste / (bins_remain_cap[no_fit_mask] + 0.0001)) * 10 #Higher impact penalty

    #Add a bonus for bins that are close to full before adding
    close_to_full_threshold = 0.9
    close_to_full_before_mask = bins_remain_cap > 0.0001 #Avoid potential infs
    cap_ratio = (bins_remain_cap[close_to_full_before_mask])
    close_to_full_before_mask = bins_remain_cap[close_to_full_before_mask] / (cap_ratio + 0.0001) >= close_to_full_threshold

    return priorities
```
