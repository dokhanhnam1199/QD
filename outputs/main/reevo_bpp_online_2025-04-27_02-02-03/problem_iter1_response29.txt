```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Prefer bins that can accommodate the item
    can_accommodate = bins_remain_cap >= item
    priorities[can_accommodate] += 1  # Give these bins a base priority

    # Rule 2: Prioritize bins with tighter fit to avoid fragmentation
    remaining_after_fit = bins_remain_cap - item
    fit_ratio = item / bins_remain_cap
    priorities[can_accommodate] += fit_ratio[can_accommodate]  # Higher ratio means better fit

    # Rule 3: Penalize almost-full bins if the item won't fit, to avoid filling them completely without packing it.
    almost_full = (bins_remain_cap < item) & (bins_remain_cap > 0)
    priorities[almost_full] -= (item - bins_remain_cap[almost_full])  # Penalty depends on how much item exceeds bin capacity.

    # Rule 4: small value to not empty bins, to encourage even distribution
    priorities[bins_remain_cap > item] += 0.01

    return priorities
```
