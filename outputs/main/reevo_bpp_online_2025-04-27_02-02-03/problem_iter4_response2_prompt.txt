{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = 1.0 # Assuming bins have unit capacity; change if different\n\n    # Infeasibility check\n    eligible_bins = bins_remain_cap >= item\n\n    if not np.any(eligible_bins):\n        # Prioritize bins that are most empty, but penalize strongly because no bin fits.\n        priorities = bins_remain_cap / np.max(bins_remain_cap)\n        priorities = priorities * 0.1 # Scale down the priorities if no bin fits\n        return priorities\n\n    # Calculate fill percentage if item were added to eligible bins\n    fill_percentage_after = (bin_capacity - (bins_remain_cap[eligible_bins] - item)) / bin_capacity\n\n    # Prioritize high fill percentage, but also consider the remaining capacity\n    priorities[eligible_bins] = fill_percentage_after / (bin_capacity - (bins_remain_cap[eligible_bins] - item) + 0.001) # Avoid division by zero and prioritizes smaller remainder\n\n    # Encourage tighter fits - boost priority if the bin is almost full after placing the item\n    nearly_full = (bins_remain_cap[eligible_bins] - item) < 0.1 * bin_capacity\n    priorities[eligible_bins][nearly_full] *= 2 # A multiplicative boost\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # A bin can only be selected if its remaining capacity >= item\n    eligible_bins = bins_remain_cap >= item\n\n    if not np.any(eligible_bins):\n        return priorities # no possible bins\n    \n    # Calculate the remaining capacity after adding the item for eligible bins\n    remaining_capacity_after_item = bins_remain_cap[eligible_bins] - item\n    \n    # Calculate the utilization rate (remaining capacity / original capacity) for eligible bins\n    utilization_rate = remaining_capacity_after_item / bins_remain_cap[eligible_bins]\n    \n    # Prioritize bins with lower utilization rate (higher fill percentage)\n    priorities[eligible_bins] = 1 - utilization_rate  # Higher priority for lower utilization\n\n    return priorities\n\n[Reflection]\nFocus on utilization rate and avoid scaling/multiplicative boosts. Directly prioritize higher fill percentage for eligible bins.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}