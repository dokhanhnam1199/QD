```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Big enough to fit priority
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = 1

    # Fill rate priority. Higher fill is better, to reduce fragmentation.
    fill_rate = item / bins_remain_cap
    priorities[fit_mask] += fill_rate[fit_mask]

    # Remaining capacity priority. Try to use emptier bins first.
    # Smaller remaining capacity implies a greater 'urgency' to fill the bin.
    priorities[fit_mask] += (1 / (bins_remain_cap[fit_mask] + 1e-6)) # avoid zero division
    
    # Additional term to prioritize bins that almost perfectly fit the item.
    almost_perfect = np.abs(bins_remain_cap - item) / np.max(bins_remain_cap)
    priorities[fit_mask] += np.exp(-10 * almost_perfect[fit_mask])
    
    return priorities
```
