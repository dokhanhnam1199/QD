{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = 1.0  # Assuming bins have unit capacity\n\n    # Infeasible bins get a strongly negative priority, proportional to the degree of overflow.\n    overflow = item - bins_remain_cap\n    infeasible_bins = overflow > 0\n    priorities[infeasible_bins] = -100 * (overflow[infeasible_bins] / item) # Strong penalty for infeasibility.\n\n    # Feasible bins: prioritize based on utilization.\n    feasible_bins = ~infeasible_bins\n    remaining_capacity = bins_remain_cap[feasible_bins]\n    \n    if np.any(feasible_bins):\n        # Calculate fill percentage *after* adding the item.\n        fill_after = (bin_capacity - (remaining_capacity - item)) / bin_capacity\n        fill_after = np.clip(fill_after, 0, 1) # Ensure fill_after is within [0, 1]\n\n        # Prioritize higher fill.  Add small value to remaining capacity to avoid division by 0\n        priorities[feasible_bins] = fill_after # Relative utilization.\n\n        #Add bonus for near exact fits\n        near_exact_fit = np.abs(remaining_capacity - item) < 0.001\n        priorities[feasible_bins][near_exact_fit] += 10\n\n        # Penalize large empty space if the bin is not empty\n        large_empty_space = (remaining_capacity - item) > 0.5 * bin_capacity #is larger than half the bin size\n        priorities[feasible_bins][large_empty_space] *= 0.1\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    max_cap = np.max(bins_remain_cap)\n\n    # Calculate the wasted space if the item is placed in the bin\n    wasted_space = bins_remain_cap - item\n\n    # Give a high priority to bins that can accommodate the item.\n    feasible_bins = wasted_space >= 0\n    priorities[feasible_bins] = 1\n\n    # Prioritize almost full bins when the item can be put into the bin.\n    almost_full_threshold = 0.1  # Adjust this parameter.\n    almost_full_bins = (wasted_space >= 0) & (wasted_space <= almost_full_threshold * max_cap)\n    priorities[almost_full_bins] += 2\n\n    # Add a bonus for bins that minimize wasted space\n    # This is only applied to feasible bins.\n    min_wasted_space = np.min(wasted_space[feasible_bins]) if np.any(feasible_bins) else np.inf  # find minimum waste among feasible bins\n    best_fit_bins = (wasted_space >= 0) & (wasted_space <= min_wasted_space + 1e-6)  # Add tolerance for floating point comparison\n    priorities[best_fit_bins] += 1\n\n    # Penalize bins that would leave a very small remaining capacity, even if feasible\n    small_remaining_cap_threshold = 0.1  # Adjust this parameter.\n    small_remaining_cap_bins = (wasted_space >= 0) & (wasted_space < small_remaining_cap_threshold * max_cap)\n    priorities[small_remaining_cap_bins] -= 0.5\n\n    # Normalize wasted space and prioritize based on normalized waste\n    normalized_waste = wasted_space / max_cap\n    feasible_bins = wasted_space >= 0\n    if np.any(feasible_bins):\n        priorities[feasible_bins] += (1 - normalized_waste[feasible_bins])  # Higher priority for less waste\n\n    return priorities\n\n[Reflection]\nFocus on feasibility, wasted space normalization, and rewarding/penalizing specific waste thresholds.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}