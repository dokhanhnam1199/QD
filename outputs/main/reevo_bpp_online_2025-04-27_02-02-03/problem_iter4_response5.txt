```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give high priority to bins that can fit the item snugly
    fit_mask = bins_remain_cap >= item

    if np.any(fit_mask):
        waste = bins_remain_cap[fit_mask] - item
        # Prioritize bins with less waste, using a ratio relative to item size
        priorities[fit_mask] = item / (waste + 1e-9)  # Add small constant to avoid division by zero

        # Further prioritize bins where the item fills a substantial portion of the bin
        fill_ratio = item / bins_remain_cap[fit_mask]
        priorities[fit_mask] *= (fill_ratio**2)  # squaring to give more weight to fill ratio.
        
        # Boost slightly if almost full
        almost_full = waste < 0.1
        priorities[fit_mask][almost_full] *= 1.2

    # For bins that cannot fit, give them a very low priority (negative).  This should discourage algorithm from trying to pack impossible bins.
    no_fit_mask = bins_remain_cap < item
    if np.any(no_fit_mask):
        priorities[no_fit_mask] = -1000 * (item / (bins_remain_cap[no_fit_mask] + 1e-9))  # The bigger the relative difference, the more negative the priority.  Using item/cap ratio

    return priorities
```
