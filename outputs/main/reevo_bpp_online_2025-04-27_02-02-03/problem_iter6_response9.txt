```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # A bin can only be selected if its remaining capacity >= item
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return priorities  # no possible bins

    # Calculate utilization rate (item size / original capacity) for eligible bins
    utilization_rate = item / (1 - (bins_remain_cap[eligible_bins] - item))
    priorities[eligible_bins] = utilization_rate

    #Prioritize by how much space is left over after packing. Smaller leftover is better.
    remaining_space = bins_remain_cap[eligible_bins] - item
    priorities[eligible_bins] = 1/(remaining_space + 0.0001) # add a small number to avoid division by zero.
    return priorities
```
