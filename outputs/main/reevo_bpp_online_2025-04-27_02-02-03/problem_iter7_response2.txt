```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: consider only bins that can accommodate the item.
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # If no bin can fit the item, prioritize bins with maximum remaining capacity
        priorities = bins_remain_cap / np.max(bins_remain_cap) # Normalize to [0, 1]
        return priorities

    # Calculate remaining capacity after placing the item in feasible bins
    remaining_capacity_after_placement = bins_remain_cap[feasible_bins] - item

    # Calculate fill percentage: how much of the bin will be filled after placement
    fill_percentage = (bins_remain_cap[feasible_bins] - remaining_capacity_after_placement) / bins_remain_cap[feasible_bins]

    # Reward tight fits: prioritize bins where the remaining capacity is small
    # Use a normalized value for comparison
    normalized_remaining_capacity = remaining_capacity_after_placement / np.max(bins_remain_cap) # Values near 0 are preferred
    priorities[feasible_bins] = 1 - normalized_remaining_capacity  # Invert: closer to 1 means better fit

    # Encourage higher fill percentage: bins which are more full get higher priority.
    priorities[feasible_bins] += fill_percentage

    # Give significant bonus to bins with almost perfect fit. Avoid using ==
    exact_fit = np.abs(bins_remain_cap[feasible_bins] - item) < 0.001
    priorities[feasible_bins][exact_fit] += 5  # Boost for exact fit

    # Penalize waste: reduce priority if there's significant waste after placement.
    waste_threshold = 0.2
    significant_waste = remaining_capacity_after_placement / np.max(bins_remain_cap) > waste_threshold
    priorities[feasible_bins][significant_waste] *= 0.5  # Reduce priority

    return priorities
```
