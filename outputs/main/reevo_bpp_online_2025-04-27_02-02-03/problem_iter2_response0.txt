```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities  # No feasible bins, return all zeros

    # 2. Remaining capacity after placement:
    remaining_capacity = bins_remain_cap - item
    remaining_capacity[~feasible_bins] = np.inf  # Assign a very high value for infeasible bins

    # 3. Fill percentage after adding the item (normalized)
    fill_percentage = (bins_remain_cap - remaining_capacity) / np.max(bins_remain_cap)
    fill_percentage[~feasible_bins] = 0  # Infeasible bins have 0 fill percentage

    # 4. Combine heuristics: fill percentage and inverse of remaining capacity
    # Normalize remaining capacity to be between 0 and 1
    normalized_remaining_capacity = remaining_capacity / np.max(bins_remain_cap)
    normalized_remaining_capacity[~feasible_bins] = 1 #Infeasible bins will have max remaining capacity
    
    #Prioritize bins with higher fill percentage and lower normalized remaining capacity.
    priorities[feasible_bins] = fill_percentage[feasible_bins] - normalized_remaining_capacity[feasible_bins]

    return priorities
```
