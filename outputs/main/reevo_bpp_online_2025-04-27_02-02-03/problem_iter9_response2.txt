```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Identify feasible bins
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        # No feasible bins, prioritize based on remaining capacity to minimize waste.
        priorities = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)
        return priorities

    # Calculate remaining capacity after placing the item in feasible bins
    remaining_capacity_after = bins_remain_cap[feasible_bins] - item

    # Reward near-exact fits heavily
    exact_fit_threshold = 0.001
    exact_fit = np.abs(remaining_capacity_after) <= exact_fit_threshold
    priorities[feasible_bins][exact_fit] += 100  # Huge reward for exact fit

    # Priority score based on remaining capacity (avoiding division by zero)
    priorities[feasible_bins] += 1.0 / (remaining_capacity_after + 0.001)

    # Penalize wasted space (non-linearly)
    wasted_space_penalty = remaining_capacity_after**2
    priorities[feasible_bins] -= wasted_space_penalty * 0.1  # Adjusted penalty strength

    # Penalize near-full bins
    near_full_threshold = 0.1
    near_full = remaining_capacity_after < near_full_threshold
    priorities[feasible_bins][near_full] *= 0.5

    # Normalize priorities to ensure consistent behavior
    max_priority = np.max(priorities)
    if max_priority > 0:
        priorities /= max_priority

    return priorities
```
