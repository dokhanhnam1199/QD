```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)
    bin_capacity = 1.0  # Assuming bins have unit capacity

    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities  # No feasible bins, return all zeros

    # 2. Remaining capacity after placement:
    remaining_capacity = bins_remain_cap - item
    remaining_capacity[~feasible_bins] = bin_capacity  # set to bin capacity for infeasible bins, higher than anything else

    # 3. Fill percentage after adding the item
    fill_percentage = (bin_capacity - remaining_capacity) / bin_capacity
    fill_percentage[~feasible_bins] = -np.inf  # Infeasible bins get the lowest priority

    # 4. Near-exact fit bonus: Substantially increased bonus
    near_exact_fit = np.abs(remaining_capacity[feasible_bins]) <= 0.05 * bin_capacity  # within 5% of bin size
    priorities[feasible_bins] += near_exact_fit * 3.0  # add larger bonus only to feasible bins

    # 5. Prioritize higher fill percentage (after placement)
    priorities[feasible_bins] += fill_percentage[feasible_bins]

    # 6. Very Small remaining capacity bonus: To prioritize almost full bins (more aggressive)
    almost_full_threshold = 0.10
    almost_full_bonus = 1.5
    almost_full_bins = feasible_bins & (remaining_capacity <= almost_full_threshold * bin_capacity)
    priorities[almost_full_bins] += almost_full_bonus

    return priorities
```
