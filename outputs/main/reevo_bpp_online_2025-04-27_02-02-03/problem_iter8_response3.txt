```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0  # Assuming bins have unit capacity
    num_bins = len(bins_remain_cap)

    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities  # No feasible bins, return all zeros

    # 2. Remaining capacity after placement:
    remaining_capacity = bins_remain_cap - item
    remaining_capacity[~feasible_bins] = np.inf

    # 3. Fill percentage after adding the item
    fill_percentage = (bin_capacity - remaining_capacity) / bin_capacity
    fill_percentage[~feasible_bins] = -np.inf  # Infeasible bins get the lowest priority

    # 4. Near-exact fit bonus:
    near_exact_fit_threshold = 0.10 * bin_capacity # increased threshold a bit
    near_exact_fit = (remaining_capacity >= 0) & (remaining_capacity <= near_exact_fit_threshold)
    priorities[near_exact_fit] += 3.0 # Increased the bonus

    # 5. Prioritize lower remaining capacity (after placement), but only for feasible bins

    # 6. Combine heuristics: fill percentage and remaining capacity
    priorities = fill_percentage - 0.3 * remaining_capacity #Weighting remaining_capacity - removed normalization


    return priorities
```
