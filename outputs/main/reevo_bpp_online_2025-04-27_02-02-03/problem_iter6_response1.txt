```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)

    # Feasibility is paramount: Infeasible bins get a very low priority.
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf  # Set infeasible bins to lowest priority

    # Calculate wasted space
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins] = np.inf

    # Normalize wasted space for comparison.
    normalized_waste = wasted_space / max_cap

    # Reward bins that minimize normalized wasted space (Best Fit).
    best_fit_bonus = 5.0
    priorities[feasible_bins] += best_fit_bonus * (1 - normalized_waste[feasible_bins])

    # Prioritize almost full bins (small remaining capacity).
    almost_full_threshold = 0.1
    almost_full_bonus = 3.0
    almost_full_bins = feasible_bins & (normalized_waste <= almost_full_threshold)
    priorities[almost_full_bins] += almost_full_bonus

    # Penalize fragmentation gently (bins that leave a very small remaining capacity).
    fragmentation_threshold = 0.05
    fragmentation_penalty = 1.0
    fragmented_bins = feasible_bins & (normalized_waste <= fragmentation_threshold)
    priorities[fragmented_bins] -= fragmentation_penalty

    return priorities
```
