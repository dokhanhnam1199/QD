```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Heuristic 1:  Favor bins that can fit the item
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1

    # Heuristic 2:  Among bins that fit, favor bins with smallest remaining capacity AFTER placing the item
    remaining_after_placement = bins_remain_cap[fit_mask] - item
    if len(remaining_after_placement) > 0:
        min_remaining = np.min(remaining_after_placement)
        min_remaining_mask = (bins_remain_cap[fit_mask] - item) == min_remaining
        priorities[fit_mask][min_remaining_mask] += 2 # Give slightly higher priority

    # Heuristic 3: If no bin fits, prioritize the bin with the largest remaining capacity
    if not np.any(fit_mask):
        priorities = bins_remain_cap / np.max(bins_remain_cap)

    return priorities
```
