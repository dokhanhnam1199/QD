```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = 1.0  # Assuming bin size is 1, modify if needed.

    # Identify feasible bins
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # No feasible bin, prioritize bins with largest remaining capacity, normalized
        priorities = bins_remain_cap / np.max(bins_remain_cap)
        return priorities

    # Calculate fill percentage if the item is placed in each feasible bin
    fill_percentage = (bin_size - (bins_remain_cap[feasible_bins] - item)) / bin_size

    # Remaining capacity after placement
    remaining_capacity = bins_remain_cap[feasible_bins] - item

    # Calculate the priority score for feasible bins
    priorities[feasible_bins] = fill_percentage / (remaining_capacity + 0.0001) # Adding a small constant to avoid division by zero

    #Boost the priority of bins that have almost exactly the item size left. This favors best-fit
    exact_fit = np.abs(bins_remain_cap[feasible_bins] - item) < 0.001 # tolerate small error
    priorities[feasible_bins][exact_fit] += 10  # Add a significant boost
    

    return priorities
```
