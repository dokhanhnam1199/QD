```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First Fit Decreasing inspired: Prioritize bins that can accommodate the item
    # without a lot of wasted space.
    
    # 1. Feasibility: Assign a very low priority to bins that cannot fit the item.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf
    
    # 2. Waste Minimization: For feasible bins, prioritize those that minimize waste.
    # Calculate the remaining capacity if the item is placed in the bin.
    remaining_capacity = bins_remain_cap - item
    
    # Prioritize bins with smaller remaining capacity (avoid large waste).
    # Using a negative value to convert remaining capacity to a priority score.
    feasible_mask = bins_remain_cap >= item
    priorities[feasible_mask] = -remaining_capacity[feasible_mask] # higher negative value = higher priority

    # 3. Bonus for Almost Full: If the item fills the bin to almost full, give it a bonus.
    almost_full_threshold = 0.1 # e.g., fill the bin within 10% of its capacity
    almost_full_mask = feasible_mask & (remaining_capacity <= almost_full_threshold)
    priorities[almost_full_mask] += 10  # Add a significant bonus

    #4. Small Item Preference: When many bins can accomodate the items, choose the one which is already fairly full
    priorities += bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0 

    return priorities
```
