```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: If a bin can fit the item perfectly, prioritize it highly.
    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6  # Using a small tolerance
    priorities[perfect_fit] = 1000.0  # Very high priority

    # Rule 2: Prioritize bins that can accommodate the item, but avoid excessive remaining capacity.
    can_fit = bins_remain_cap >= item
    if np.any(can_fit):
        # Score based on how full the bin would be *after* placing the item
        remaining_after_fit = bins_remain_cap[can_fit] - item
        fill_ratio = (bins_remain_cap[can_fit] - remaining_after_fit) / bins_remain_cap[can_fit]

        # We want bins to be reasonably full, but not too full that we risk fragmentation
        priority_score = fill_ratio # Direct proportionality to fullness
        priorities[can_fit] = priority_score

    # Rule 3: If no bin can fit, return very low priorities to signal no action.
    else:
        priorities[:] = -1000.0
    
    return priorities
```
