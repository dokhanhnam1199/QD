```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Reward bins that can fit the item
            priorities[i] += 1.0

            # Give higher priority to bins where the item fits best
            priorities[i] += (cap - item) / np.max(bins_remain_cap)  # Favor tighter fits

            # Penalize almost full bins - encourages consolidation
            priorities[i] += np.exp(-10 * (cap - item))

            #Bonus to empty/new bins, encourage starting new bin only if existing ones are less appropriate
            if cap == np.max(bins_remain_cap):
                priorities[i] -= 0.1
        else:
            # Very Low priority if item cannot fit
            priorities[i] = -1000 # Or some very negative number

    return priorities
```
