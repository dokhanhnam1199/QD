```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # If no bin can fit, prioritize bins with the most remaining capacity, but with a penalty
        if np.max(bins_remain_cap) > 0:  # Avoid division by zero
            priorities = bins_remain_cap / np.max(bins_remain_cap) - 0.5  # Normalize and penalize
        else:
            priorities = np.zeros_like(bins_remain_cap) # no bins available
        return priorities

    # Calculate remaining capacity after placing the item (for eligible bins)
    remaining_capacity_after = bins_remain_cap[eligible_bins] - item

    # Sharply reward exact fits
    exact_fit = np.abs(remaining_capacity_after) < 0.001
    priorities[eligible_bins][exact_fit] += 100

    # Prioritize best-fit, penalize waste non-linearly
    priorities[eligible_bins] += np.exp(-5 * remaining_capacity_after) # exponential to penalize waste strongly
    
    # Penalize near-full bins heavily
    near_full_threshold = 0.1
    near_full = remaining_capacity_after < near_full_threshold
    priorities[eligible_bins][near_full] *= 0.1  # significant penalty

    # Normalize priorities to be between 0 and 1.  Add a small constant to avoid div by zero
    priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities) + 0.0001)


    return priorities
```
