```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Heuristic 1: Fill bins as full as possible (minimize wasted space)
    fill_levels = bins_remain_cap - item
    
    # Assign very low priority to bins that can't fit the item
    priorities[fill_levels < 0] = -np.inf
    
    # Give higher priority to bins where fill_levels are small (almost full)
    priorities[fill_levels >= 0] = 1 / (fill_levels[fill_levels >= 0] + 1e-6)  # Adding small constant to avoid division by zero

    # Heuristic 2: Use the First-Fit Decreasing logic by prioritizing bins based on their remaining capacity.
    # Sort the bins based on their remaining capacity
    sorted_indices = np.argsort(bins_remain_cap)[::-1]
    
    # Update priorities based on sorted indices - favour using fullest bins first that still fit the items
    for i, idx in enumerate(sorted_indices):
        if bins_remain_cap[idx] >= item:
            priorities[idx] += (len(bins_remain_cap) - i)  # Boost priority if bin fits item and is larger than others

    # Heuristic 3: If item perfectly fits into any bin, give it the highest priority
    perfect_fit = np.abs(fill_levels) < 1e-6  # Allow tiny numerical errors in perfect match
    priorities[perfect_fit] = np.inf
            
    return priorities
```
