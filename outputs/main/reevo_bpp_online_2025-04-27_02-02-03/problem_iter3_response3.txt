```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0 # Assume bins of unit capacity

    # Identify bins that can accommodate the item
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # If no bin can fit the item, prioritize bins with the most remaining capacity.
        priorities = bins_remain_cap / bin_capacity  # Normalized remaining capacity
        return priorities
    
    # Calculate the fill percentage *after* adding the item for eligible bins.
    remaining_capacity_after = bins_remain_cap[eligible_bins] - item
    fill_percentage_after = (bin_capacity - remaining_capacity_after) / bin_capacity
    
    # Prioritize bins with higher fill percentage *after* placing the item
    priorities[eligible_bins] = fill_percentage_after

    # Refine priority based on relative waste
    relative_waste = remaining_capacity_after / bin_capacity
    priorities[eligible_bins] /= (relative_waste + 0.001) #Avoid division by zero and amplify smaller waste
    
    # Boost the priority of bins close to an exact fit.
    exact_fit_tolerance = 0.001
    exact_fit = np.abs(bins_remain_cap[eligible_bins] - item) <= exact_fit_tolerance
    priorities[eligible_bins][exact_fit] *= 5 #Boost factor for almost exact fit

    # Reduce priority for near full but not exactly full bins
    near_full_threshold = 0.95
    near_full_bins = fill_percentage_after > near_full_threshold
    priorities[eligible_bins][near_full_bins] *= 0.75

    return priorities
```
