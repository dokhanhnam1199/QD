```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap) #Assume all bins have same capacity, normalize against this.

    # First, consider only bins that can accommodate the item.
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # If no bin can fit the item, prioritize bins with maximum remaining capacity, but heavily penalized
        priorities = bins_remain_cap / bin_capacity
        priorities = priorities**0.1 # Reduce the range for when no bin fits
        return priorities

    # For eligible bins, calculate a score based on remaining capacity *after* placing the item.
    remaining_capacity_after_placement = bins_remain_cap[eligible_bins] - item
    
    # Prioritize bins where the remaining capacity after placing the item is small, but non-negative.
    # This encourages filling bins more completely.
    priorities[eligible_bins] = 1.0 / (remaining_capacity_after_placement + 0.0001) # Add tiny value to avoid division by zero

    # Sharply boost the priority of bins that have almost exactly the item size left. This favors best-fit
    exact_fit = np.abs(bins_remain_cap[eligible_bins] - item) < 0.001 # tolerate small error
    priorities[eligible_bins][exact_fit] += 100  # Add a very significant boost

    # Heavily penalize near-full bins, encouraging bin utilization.
    near_full_threshold = 0.2 * bin_capacity # as a fraction of bin capacity
    near_full_bins = remaining_capacity_after_placement < near_full_threshold
    priorities[eligible_bins][near_full_bins] *= 0.1  # Significantly reduce priority

    # Introduce a waste penalty term. This penalizes leaving larger gaps. It's non-linear to reduce sensitivity.
    waste_penalty = (remaining_capacity_after_placement / bin_capacity)**2
    priorities[eligible_bins] -= waste_penalty

    return priorities
```
