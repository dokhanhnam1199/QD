```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Heuristic 1: Best Fit - Prioritize bins with the smallest remaining capacity that can still fit the item.
    # The smaller the waste, the better.

    # Heuristic 2: Avoid Fragmentation - Penalize bins where adding the item would result in a small remaining capacity.
    # Add bonus for bins that accommodate item exactly or leave substantial capacity for later items

    # Heuristic 3:  First Fit Adjustment - Initial bins get a slight bump in priority.

    valid_bins = bins_remain_cap >= item
    
    if not np.any(valid_bins):
        return priorities #No valid bin

    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  #Invalid bins have infinite waste.

    priorities = -waste #Best fit

    #Fragmentation
    small_waste_threshold = 0.1  #Tune this
    frag_penalty = -100 #Tune this
    substantial_capacity_bonus = 10 #Tune this

    for i in range(len(bins_remain_cap)):
        if bins_remain_cap[i] >= item:
            post_fill_capacity = bins_remain_cap[i] - item
            if 0 < post_fill_capacity <= small_waste_threshold:
                priorities[i] += frag_penalty
            elif post_fill_capacity > item:
                priorities[i] += substantial_capacity_bonus


    #First fit Adjustment (slight bump for earlier bins)
    for i in range(len(bins_remain_cap)):
        if bins_remain_cap[i] >= item:
            priorities[i] += (len(bins_remain_cap) - i)/len(bins_remain_cap) #small additive bonus

    return priorities
```
