```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0 # Assuming bins have unit capacity

    # Consider only bins that can accommodate the item.
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # If no bin can fit the item, prioritize bins with maximum remaining capacity.
        # Normalize to [0, 1], but also penalize heavily, because this is a bad situation
        priorities = bins_remain_cap / bin_capacity  
        priorities = priorities**0.1 # Less aggressive priority for bins without enough capacity
        return priorities

    # Calculate remaining capacity AFTER placing the item, normalized to [0, 1].
    remaining_capacity_after_placement = (bins_remain_cap[eligible_bins] - item) / bin_capacity

    # Sharp reward for exact fits
    exact_fit = np.abs(bins_remain_cap[eligible_bins] - item) < 0.001 # tolerate small error
    priorities[eligible_bins][exact_fit] += 100  # Large boost for exact fit

    # Best-fit score using the inverse of the remaining capacity.
    priorities[eligible_bins] += 1.0 / (remaining_capacity_after_placement + 0.001)

    # Penalize near-full bins non-linearly using exponential function.
    near_full_threshold = 0.1
    near_full_bins = (bins_remain_cap[eligible_bins] - item) / bin_capacity < near_full_threshold
    priorities[eligible_bins][near_full_bins] *= np.exp(-5 * ((near_full_threshold - remaining_capacity_after_placement[near_full_bins]) / near_full_threshold)) # Strong penalty

    # Normalize the remaining capacity to penalize waste.
    waste = remaining_capacity_after_placement
    priorities[eligible_bins] -= 5 * waste**2 #Non-linear penalty for unused space

    return priorities
```
