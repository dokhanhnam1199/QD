{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Heuristic 1:  Favor bins that can fit the item\n    fit_mask = bins_remain_cap >= item\n    priorities[fit_mask] += 1\n\n    # Heuristic 2:  Among bins that fit, favor bins with smallest remaining capacity AFTER placing the item\n    remaining_after_placement = bins_remain_cap[fit_mask] - item\n    if len(remaining_after_placement) > 0:\n        min_remaining = np.min(remaining_after_placement)\n        min_remaining_mask = (bins_remain_cap[fit_mask] - item) == min_remaining\n        priorities[fit_mask][min_remaining_mask] += 2 # Give slightly higher priority\n\n    # Heuristic 3: If no bin fits, prioritize the bin with the largest remaining capacity\n    if not np.any(fit_mask):\n        priorities = bins_remain_cap / np.max(bins_remain_cap)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Give high priority to bins that can fit the item.\n    fit_mask = bins_remain_cap >= item\n    priorities[fit_mask] = 1\n\n    # For bins that can fit the item, prioritize those with smaller remaining capacity after adding the item.\n    remaining_after_fit = bins_remain_cap[fit_mask] - item\n    priorities[fit_mask] += 1 / (remaining_after_fit + 0.0001)  # avoid division by zero and prioritize smaller remainders\n    \n    # Bonus for bins that are almost full *before* adding the item, as long as they fit.\n    almost_full_threshold = 0.1  # Define \"almost full\" as within 10% of bin capacity\n    almost_full_mask = (bins_remain_cap >= item) & (bins_remain_cap < (item + almost_full_threshold))\n    priorities[almost_full_mask] += 2 # give a much bigger priority\n\n    # Penalize bins that cannot fit the item to the item size ratio\n    no_fit_mask = bins_remain_cap < item\n    priorities[no_fit_mask] = - (item / (bins_remain_cap[no_fit_mask] + 0.0001)) #Avoid division by zero.\n\n    return priorities\n\n[Reflection]\nThe improved code uses proportional priorities, penalizes non-fitting bins and prefers almost-full bins, enhancing bin utilization.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}