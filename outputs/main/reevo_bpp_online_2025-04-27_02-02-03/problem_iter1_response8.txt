```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Immediate fit gets highest priority
    immediate_fit = np.isclose(bins_remain_cap, item)
    priorities[immediate_fit] = 1000  # High priority

    # Best fit gets high priority
    possible_bins = bins_remain_cap >= item
    if np.any(possible_bins):
        best_fit_idx = np.argmin(bins_remain_cap[possible_bins] - item)
        indices = np.where(possible_bins)[0]
        best_fit_bin = indices[best_fit_idx]

        priorities[best_fit_bin] = 500 #give a decent priority.

    # Prioritize bins that minimize wasted space, but penalize if the item is significantly smaller.
    waste = bins_remain_cap - item
    priorities[bins_remain_cap >= item] = 100 - (waste[bins_remain_cap >= item] / np.max(bins_remain_cap)) * 50

    # Penalize bins that are too full (or not enough space)
    priorities[bins_remain_cap < item] = -1000

    return priorities
```
