```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Very high priority for bins that can fit the item almost perfectly.
    fit_threshold = 0.95
    perfect_fit_bins = (bins_remain_cap >= item) & (item / bins_remain_cap >= fit_threshold)
    priorities[perfect_fit_bins] += 1000

    # Higher priority for bins that can fit the item, but not too loosely.
    good_fit_bins = (bins_remain_cap >= item)
    priorities[good_fit_bins] += (bins_remain_cap[good_fit_bins] - item) / bins_remain_cap[good_fit_bins]

    # Small priority for bins close to full, which avoids spreading items.
    almost_full_bins = bins_remain_cap > 0
    priorities[almost_full_bins] += 1 / (bins_remain_cap[almost_full_bins] + 0.00001)

    # Negative priority for bins where the item doesn't fit.
    no_fit_bins = bins_remain_cap < item
    priorities[no_fit_bins] = -100

    return priorities
```
