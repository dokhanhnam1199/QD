```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify feasible bins
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # If no bin can fit, prioritize bins with the most remaining capacity.
        # This helps to open new bins more strategically when necessary.
        priorities = bins_remain_cap / np.max(bins_remain_cap)
        return priorities

    # Calculate remaining capacity after placing the item in feasible bins.
    remaining_capacity = bins_remain_cap[feasible_bins] - item

    # Prioritize based on the reciprocal of remaining capacity (tighter fit is better).
    # Add a small constant to avoid division by zero.
    priorities[feasible_bins] = 1.0 / (remaining_capacity + 0.0001)

    # Reward near-exact fits.
    exact_fit_threshold = 0.05
    exact_fit_bins = np.abs(remaining_capacity) <= exact_fit_threshold
    priorities[feasible_bins][exact_fit_bins] += 10  # Substantial boost

    # Penalize bins that become near-full after placing the item to avoid fragmentation
    near_full_threshold = 0.1
    near_full_bins = remaining_capacity <= near_full_threshold
    priorities[feasible_bins][near_full_bins] *= 0.3 # Reduce priority, but not to zero to allow use.

    return priorities
```
