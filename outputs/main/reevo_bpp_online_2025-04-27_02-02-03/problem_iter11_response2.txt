```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0 # Assume bin capacity is 1

    # First, consider only bins that can accommodate the item.
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # If no bin can fit the item, prioritize bins with maximum remaining capacity (normalized).
        priorities = bins_remain_cap / bin_capacity  # Normalize to [0, 1]
        return priorities

    # For eligible bins, calculate remaining capacity after placing the item.
    remaining_capacity_after_placement = bins_remain_cap[eligible_bins] - item
    
    # Sharp reward for exact fits.
    exact_fit = np.abs(bins_remain_cap[eligible_bins] - item) < 0.001
    priorities[eligible_bins][exact_fit] += 100  # Substantially boost exact fits

    # Base priority based on best-fit. Higher priority to bins that leave less space.
    # Use a non-linear function to penalize wasted space.
    waste_ratio = remaining_capacity_after_placement / bin_capacity
    priorities[eligible_bins] += np.exp(-5 * waste_ratio) # Exponential decay of priority as waste increases
    
    # Penalize near-full bins non-linearly.  Stronger penalty as bin approaches full.
    near_full_threshold = 0.1 * bin_capacity
    near_full_bins = remaining_capacity_after_placement < near_full_threshold
    priorities[eligible_bins][near_full_bins] *= (remaining_capacity_after_placement[near_full_bins]/near_full_threshold)**2 # Quadratic penalty

    # Normalize priorities (optional, but can help with scaling)
    max_priority = np.max(priorities)
    if max_priority > 0:
        priorities /= max_priority

    return priorities
```
