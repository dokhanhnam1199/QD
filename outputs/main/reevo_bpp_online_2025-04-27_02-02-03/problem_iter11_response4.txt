```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0 # Assume bins have unit capacity

    # Normalize remaining capacities
    normalized_capacities = bins_remain_cap / bin_capacity

    # Find bins that can accommodate the item
    eligible_bins = normalized_capacities >= item

    if not np.any(eligible_bins):
        # If no bin can fit the item, prioritize bins with maximum remaining capacity, but penalize heavily
        priorities = normalized_capacities**0.5  # Prioritize fuller bins slightly
        priorities -= 10 # Large negative penalty, so only chosen as a last resort
        return priorities

    # Calculate remaining capacity after placement for eligible bins
    remaining_capacity_after_placement = normalized_capacities[eligible_bins] - item

    # Sharply reward exact fits
    exact_fit = np.abs(remaining_capacity_after_placement) < 0.001
    priorities[eligible_bins][exact_fit] += 100  # Huge reward for exact fit

    # Penalize near-full bins, but only if they're not an exact fit.
    near_full_threshold = 0.1
    near_full_bins = (remaining_capacity_after_placement < near_full_threshold) & (~exact_fit) # Exclude exact fits
    priorities[eligible_bins][near_full_bins] -= 50 # Significant penalty for near-full

    # Prioritize best fit, penalizing waste non-linearly (quadratic penalty for unused space)
    priorities[eligible_bins] += (1 - remaining_capacity_after_placement)**2 # Favor tighter fits.

    # Normalize the priorities to a reasonable range
    max_priority = np.max(priorities)
    if max_priority > 0:
        priorities = priorities / max_priority

    return priorities
```
