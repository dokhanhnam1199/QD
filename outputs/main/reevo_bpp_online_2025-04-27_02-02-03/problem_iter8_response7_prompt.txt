{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    max_cap = np.max(bins_remain_cap)\n\n    # Feasibility is paramount: Infeasible bins get a very low priority.\n    feasible_bins = bins_remain_cap >= item\n    priorities[~feasible_bins] = -np.inf  # Set infeasible bins to lowest priority\n\n    # Calculate wasted space\n    wasted_space = bins_remain_cap - item\n    wasted_space[~feasible_bins] = np.inf\n\n    # Normalize wasted space for comparison.\n    normalized_waste = wasted_space / max_cap\n\n    # Reward bins that minimize normalized wasted space (Best Fit).\n    best_fit_bonus = 5.0\n    priorities[feasible_bins] += best_fit_bonus * (1 - normalized_waste[feasible_bins])\n\n    # Prioritize almost full bins (small remaining capacity).\n    almost_full_threshold = 0.1\n    almost_full_bonus = 3.0\n    almost_full_bins = feasible_bins & (normalized_waste <= almost_full_threshold)\n    priorities[almost_full_bins] += almost_full_bonus\n\n    # Penalize fragmentation gently (bins that leave a very small remaining capacity).\n    fragmentation_threshold = 0.05\n    fragmentation_penalty = 1.0\n    fragmented_bins = feasible_bins & (normalized_waste <= fragmentation_threshold)\n    priorities[fragmented_bins] -= fragmentation_penalty\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Only consider bins that can fit the item\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        return priorities  # No feasible bins, return all zeros\n\n    # 2. Remaining capacity after placement:\n    remaining_capacity = bins_remain_cap - item\n\n    # 3. Fill percentage after adding the item\n    fill_percentage = (bins_remain_cap - remaining_capacity) / 1.0  # Assuming bin capacity is 1.0\n\n    # 4. Combine heuristics: fill percentage and remaining capacity\n    # Prioritize bins with higher fill percentage and lower remaining capacity.\n\n    # Normalize remaining capacity: prioritize smaller remainders (tighter fit)\n    max_cap = np.max(bins_remain_cap[feasible_bins])\n    normalized_remaining_capacity = remaining_capacity[feasible_bins] / max_cap if max_cap > 0 else np.zeros_like(remaining_capacity[feasible_bins])\n\n    priorities[feasible_bins] = fill_percentage[feasible_bins] - normalized_remaining_capacity\n\n    # Add a bonus for bins that are nearly full after placing the item\n    nearly_full_threshold = 0.1\n    nearly_full = remaining_capacity[feasible_bins] <= nearly_full_threshold\n    priorities[feasible_bins][nearly_full] += 0.2  # Add a small bonus\n\n    return priorities\n\n[Reflection]\nFocus on fill percentage, remaining capacity normalization, and feasibility for robust bin selection.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}