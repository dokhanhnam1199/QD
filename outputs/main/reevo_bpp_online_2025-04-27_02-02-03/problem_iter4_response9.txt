```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.mean(bins_remain_cap) #Estimating bin size, if variable bin sizes are allowed, this needs to be adjusted

    # 1. Feasibility: Can the item fit in the bin?
    feasible_bins = bins_remain_cap >= item

    # 2. Remaining capacity after packing: Smaller is better (Best Fit principle)
    remaining_capacity_after_packing = bins_remain_cap - item
    remaining_capacity_after_packing[~feasible_bins] = np.inf  # Penalize infeasible bins heavily

    # 3. Avoid fragmentation:  Bins resulting in very small remaining capacity are penalized
    fragmentation_threshold = 0.1 * bin_capacity  # Adjust as needed, relative to bin size
    fragmentation_penalty = -10  # Adjust as needed
    fragmented_bins = (remaining_capacity_after_packing > 0) & (remaining_capacity_after_packing <= fragmentation_threshold)

    # 4. Reward almost full bins.
    almost_full_threshold = 0.05 * bin_capacity  # proportion of bin size, adjust as needed. Represents the item size being close to bin size.
    almost_full_reward = 5

    almost_full_bins = (item >= (bins_remain_cap - almost_full_threshold)) & feasible_bins

    # 5. Normalize remaining capacity to bin size for better scaling
    normalized_remaining_capacity = remaining_capacity_after_packing / bin_capacity

    # Combine the factors:

    priorities[feasible_bins] = (
        1.0 / (1.0 + normalized_remaining_capacity[feasible_bins])  # Prefer smaller remaining capacity, normalized
    )
    priorities[fragmented_bins] += fragmentation_penalty #Penalize fragmentation
    priorities[almost_full_bins] += almost_full_reward

    # If no bin is feasible, strongly penalize
    if not np.any(feasible_bins):
        priorities[:] = -np.inf

    return priorities
```
