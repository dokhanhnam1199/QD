```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # High priority for bins that can fit the item snugly
    fit_mask = bins_remain_cap >= item

    # Give a score based on how full the bin will be after adding the item
    fill_ratios = np.zeros_like(bins_remain_cap, dtype=float)
    fill_ratios[fit_mask] = (item / bins_remain_cap[fit_mask])

    # Prioritize bins that result in a high fill ratio but aren't overfilled
    priorities[fit_mask] = fill_ratios[fit_mask]

    # Bonus for nearly full bins, but penalize if it's too full (item barely fits)
    nearly_full_mask = (bins_remain_cap >= item) & (bins_remain_cap - item <= 0.2)
    priorities[nearly_full_mask] += 0.3

    # Slightly penalize bins where the item fits but leaves a large gap
    large_gap_mask = (bins_remain_cap >= item) & (bins_remain_cap - item > 0.5)
    priorities[large_gap_mask] -= 0.1

    # If no bins can fit, then return a very low negative priority
    if not np.any(fit_mask):
        priorities = np.full_like(bins_remain_cap, -np.inf)

    return priorities
```
