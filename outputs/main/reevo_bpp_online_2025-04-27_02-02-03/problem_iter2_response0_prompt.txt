{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Heuristic 1: Best Fit - Prioritize bins with the smallest remaining capacity that can still fit the item.\n    # The smaller the waste, the better.\n\n    # Heuristic 2: Avoid Fragmentation - Penalize bins where adding the item would result in a small remaining capacity.\n    # Add bonus for bins that accommodate item exactly or leave substantial capacity for later items\n\n    # Heuristic 3:  First Fit Adjustment - Initial bins get a slight bump in priority.\n\n    valid_bins = bins_remain_cap >= item\n    \n    if not np.any(valid_bins):\n        return priorities #No valid bin\n\n    waste = bins_remain_cap - item\n    waste[waste < 0] = np.inf  #Invalid bins have infinite waste.\n\n    priorities = -waste #Best fit\n\n    #Fragmentation\n    small_waste_threshold = 0.1  #Tune this\n    frag_penalty = -100 #Tune this\n    substantial_capacity_bonus = 10 #Tune this\n\n    for i in range(len(bins_remain_cap)):\n        if bins_remain_cap[i] >= item:\n            post_fill_capacity = bins_remain_cap[i] - item\n            if 0 < post_fill_capacity <= small_waste_threshold:\n                priorities[i] += frag_penalty\n            elif post_fill_capacity > item:\n                priorities[i] += substantial_capacity_bonus\n\n\n    #First fit Adjustment (slight bump for earlier bins)\n    for i in range(len(bins_remain_cap)):\n        if bins_remain_cap[i] >= item:\n            priorities[i] += (len(bins_remain_cap) - i)/len(bins_remain_cap) #small additive bonus\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility: Only consider bins that can fit the item\n    feasible_bins = bins_remain_cap >= item\n    \n    # 2. Remaining capacity after placement: Prioritize bins that leave less space\n    remaining_capacity = bins_remain_cap - item\n    remaining_capacity[~feasible_bins] = np.inf # Assign a very high value for infeasible bins\n    \n    # 3. Fill percentage: Prioritize bins with higher fill percentage after adding the item\n    fill_percentage = (bins_remain_cap - remaining_capacity) / (np.max(bins_remain_cap)+item) #fill percentage with hypothetically filling an empty bin by item size + max_bin_capacity\n    \n    \n    # 4. Combination of the above factors\n    priorities[feasible_bins] = (fill_percentage[feasible_bins] + 1 / (remaining_capacity[feasible_bins] + 1e-9)) #small constant to avoid divide by zero\n\n\n    return priorities\n\n[Reflection]\nFocus on fill percentage and remaining capacity. Normalize and combine heuristics for better performance.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}