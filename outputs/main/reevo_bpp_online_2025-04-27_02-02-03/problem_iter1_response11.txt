```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # High priority for bins that can fit the item snugly
    fit_mask = bins_remain_cap >= item
    
    # Give a score based on how full the bin will be after adding the item
    fill_ratios = np.zeros_like(bins_remain_cap, dtype=float)
    fill_ratios[fit_mask] = (item / bins_remain_cap[fit_mask])
    
    priorities[fit_mask] = 1 - np.abs(fill_ratios[fit_mask] - 1)  # Penalize bins that have a lot of space left over

    # Bonus for nearly full bins. We don't want the bin to be too full though
    nearly_full_mask = (bins_remain_cap >= item) & (bins_remain_cap - item <= 0.1)
    priorities[nearly_full_mask] += 0.5  # slightly higher priority for these bins.


    # If no bins can fit, then return a very low negative priority
    if not np.any(fit_mask):
        priorities = np.full_like(bins_remain_cap, -np.inf)
    

    return priorities
```
