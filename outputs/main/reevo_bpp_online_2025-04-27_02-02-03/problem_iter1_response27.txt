```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Primary criterion: Can the item fit?
            priority = 1.0

            # Secondary criterion: Fill rate - prefer bins that will be filled more completely
            fill_rate = item / cap
            priority += fill_rate

            # Tertiary criterion: Avoid fragmentation - prefer bins with larger remaining capacity AFTER placement
            remaining_after = cap - item
            priority += 1.0 / (remaining_after + 0.0001)  # Avoid division by zero and scale inversely. The smaller the value after insertion the better

            priorities[i] = priority
        else:
            priorities[i] = -1e9  # Very low priority if the item doesn't fit

    return priorities
```
