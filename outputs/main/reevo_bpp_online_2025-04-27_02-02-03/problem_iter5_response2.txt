```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item.
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # If no bin can fit the item, prioritize bins with the maximum remaining capacity.
        priorities = bins_remain_cap / np.max(bins_remain_cap)
        return priorities

    # Calculate remaining capacity after placement for eligible bins.
    remaining_capacity_after_placement = bins_remain_cap[eligible_bins] - item

    # Encourage tight fits by prioritizing bins with small remaining capacity.
    # Use reciprocal of remaining capacity as a base priority. Avoid division by zero.
    priorities[eligible_bins] = 1.0 / (remaining_capacity_after_placement + 0.0001)

    # Reward exact fits (or very close to exact fits).
    exact_fit_tolerance = 0.001
    exact_fit = np.abs(remaining_capacity_after_placement) < exact_fit_tolerance
    priorities[eligible_bins][exact_fit] += 10  # Significant bonus for near-perfect fit

    # Penalize bins that become excessively full after placement. Define a threshold for excessive fullness.
    fullness_threshold = 0.95
    current_fill_levels = 1.0 - bins_remain_cap[eligible_bins] / np.max(bins_remain_cap) #normalize bin capacities
    future_fill_levels = 1.0 - remaining_capacity_after_placement / np.max(bins_remain_cap)
    excessive_fullness = future_fill_levels > fullness_threshold
    priorities[eligible_bins][excessive_fullness] *= 0.2  # Reduce priority if bin becomes excessively full

    # Normalize priorities to be in a reasonable range (e.g., 0 to 1).
    max_priority = np.max(priorities)
    if max_priority > 0:
        priorities /= max_priority

    return priorities
```
