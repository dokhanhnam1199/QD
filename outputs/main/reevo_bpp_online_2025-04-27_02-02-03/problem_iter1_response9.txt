```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First Fit Decreasing-like heuristic: Prefer bins that can accommodate the item with minimal wasted space
            priorities[i] = (cap - item) / cap  # Closer to 0 means less wasted space, so prioritize smaller waste
            # Bonus for almost full: higher priority if close to full AFTER adding item
            if cap - item < 0.1: # tune this threshold
                priorities[i] += 0.5

        else:
            priorities[i] = -1  # Negative priority if it doesn't fit, discourages placement
            
    # Small noise to break ties and encourage exploration
    priorities += np.random.normal(0, 0.001, size=bins_remain_cap.shape) 

    return priorities
```
