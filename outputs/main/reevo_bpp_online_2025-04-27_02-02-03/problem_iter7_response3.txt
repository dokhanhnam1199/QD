```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: prioritize feasible bins, otherwise distribute.
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # If no bin can fit the item, distribute across all bins
        priorities = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.ones_like(bins_remain_cap)
        return priorities

    # Calculate fill percentage if item is placed in the bin.
    fill_percentage = (bins_remain_cap[eligible_bins] - item) / bins_remain_cap[eligible_bins]

    # Reward tight fits (higher fill percentage -> higher priority).
    priorities[eligible_bins] = 1.0 - np.abs(fill_percentage)  # Invert fill_percentage to reward smaller remainders

    # Boost for almost exact fits
    exact_fit_threshold = 0.001
    exact_fit_bins = np.abs(bins_remain_cap[eligible_bins] - item) <= exact_fit_threshold
    priorities[eligible_bins][exact_fit_bins] += 1.5

    # Normalize remaining capacity for best-fit selection.
    normalized_remaining_capacity = bins_remain_cap[eligible_bins] / np.max(bins_remain_cap)

    return priorities
```
