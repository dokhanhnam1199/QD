```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0  # Assume bin capacity is 1.0, normalize to this if it's different

    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # If no bin can fit the item, prioritize bins with maximum remaining capacity, but heavily penalized
        priorities = bins_remain_cap / np.max(bins_remain_cap) - 100  # Large negative penalty
        return priorities

    remaining_capacity_after_placement = bins_remain_cap[eligible_bins] - item

    # Normalized fill percentage (utilization) after adding the item. Higher is better.
    fill_percentage = (bin_capacity - remaining_capacity_after_placement) / bin_capacity
    
    # Prioritize higher utilization; add a small epsilon to remaining capacity for stability
    priorities[eligible_bins] = fill_percentage / (remaining_capacity_after_placement + 0.0001)
    
    # Boost near exact fit; same as v1
    exact_fit = np.abs(bins_remain_cap[eligible_bins] - item) < 0.001 # tolerate small error
    priorities[eligible_bins][exact_fit] += 10
    
    # Slightly reduce priority for near full bins
    near_full_threshold = 0.1 # Hyperparameter
    near_full_bins = (bins_remain_cap[eligible_bins] - item) < near_full_threshold
    priorities[eligible_bins][near_full_bins] *= 0.8

    return priorities
```
