```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0  # Assuming bins have unit capacity

    # Infeasible bins get a strongly negative priority, proportional to the degree of overflow.
    overflow = item - bins_remain_cap
    infeasible_bins = overflow > 0
    priorities[infeasible_bins] = -100 * (overflow[infeasible_bins] / item)  # Strong penalty for infeasibility.

    # Feasible bins: prioritize based on utilization.
    feasible_bins = ~infeasible_bins
    remaining_capacity = bins_remain_cap[feasible_bins]

    if np.any(feasible_bins):
        # Calculate fill percentage *after* adding the item.
        fill_after = (bin_capacity - (remaining_capacity - item)) / bin_capacity
        fill_after = np.clip(fill_after, 0, 1)  # Ensure fill_after is within [0, 1]

        # Prioritize higher fill. Add small value to remaining capacity to avoid division by 0
        priorities[feasible_bins] = fill_after  # Relative utilization.

        # Add bonus for near exact fits
        near_exact_fit = np.abs(remaining_capacity - item) < 0.05 #Reduced tolerance
        priorities[feasible_bins][near_exact_fit] += 5

        # Penalize large empty space if the bin is not empty and item is small compared to bin
        large_empty_space = (remaining_capacity - item) > 0.6 * bin_capacity and item < 0.4 * bin_capacity  # Adjusted parameters
        priorities[feasible_bins][large_empty_space] *= 0.2

        #Prioritize bins that are already relatively full
        already_full = bins_remain_cap[feasible_bins] < 0.5
        priorities[feasible_bins][already_full] += 0.5 * fill_after[already_full]


    return priorities
```
