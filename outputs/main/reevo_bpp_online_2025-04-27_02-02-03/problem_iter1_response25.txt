```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate the wasted space if the item is placed in the bin
    wasted_space = bins_remain_cap - item

    # Give a high priority to bins that can accommodate the item.
    feasible_bins = wasted_space >= 0
    priorities[feasible_bins] = 1

    #Prioritize almost full bins when the item can be put into the bin.
    almost_full_threshold = 0.1 #adjust this parameter. The closer it is to zero the more you want the level to be almost full
    almost_full_bins = (wasted_space >=0) & (wasted_space <= almost_full_threshold * np.max(bins_remain_cap)) #compare to max for normalization purposes
    priorities[almost_full_bins] += 2

    # Add a bonus for bins that minimize wasted space
    # This is only applied to feasible bins.
    min_wasted_space = np.min(wasted_space[feasible_bins]) if np.any(feasible_bins) else np.inf # find minimum waste among feasible bins
    best_fit_bins = (wasted_space >= 0) & (wasted_space <= min_wasted_space + 1e-6)  # Add tolerance for floating point comparison
    priorities[best_fit_bins] += 1

    # Penalize bins that would leave a very small remaining capacity, even if feasible
    small_remaining_cap_threshold = 0.1 #Adjust this parameter based on what defines a small remaining cap.
    small_remaining_cap_bins = (wasted_space >= 0) & (wasted_space < small_remaining_cap_threshold * np.max(bins_remain_cap))
    priorities[small_remaining_cap_bins] -= 0.5

    # Return priorities
    return priorities
```
