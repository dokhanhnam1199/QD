```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: a bin can only be selected if its remaining capacity >= item
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return priorities  # no possible bins

    # Calculate the remaining capacity after adding the item for eligible bins
    remaining_capacity_after_item = bins_remain_cap[eligible_bins] - item

    # Prioritize based on fill percentage (relative to original capacity)
    bin_capacity = 1.0  # Assuming bins have unit capacity
    fill_percentage = (bin_capacity - remaining_capacity_after_item) / bin_capacity

    priorities[eligible_bins] = fill_percentage

    # Bonus for near-exact fits
    near_exact_fit = np.abs(remaining_capacity_after_item) < 0.01
    priorities[eligible_bins][near_exact_fit] += 0.5

    # Penalize bins where a large empty space will be left
    large_empty_space = remaining_capacity_after_item > 0.5 * bin_capacity
    priorities[eligible_bins][large_empty_space] *= 0.5

    return priorities
```
