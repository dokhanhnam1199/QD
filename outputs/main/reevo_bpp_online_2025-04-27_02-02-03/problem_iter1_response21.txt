```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Prefer bins where item fits
    fits = bins_remain_cap >= item
    priorities[fits] += 1.0

    # Heuristic 2: Among bins that fit, prefer those with less remaining capacity
    # after adding the item (First Fit Decreasing variant). Goal is to fill bins optimally.
    remaining_after_fit = bins_remain_cap[fits] - item
    priorities[fits] += (1 - remaining_after_fit / bins_remain_cap[fits]).reshape(-1)
    
    # Heuristic 3: Penalize bins that would be left with very small remaining capacity
    # If remaining capacity is less than 10% of bin size, reduce priority
    small_remaining = (bins_remain_cap - item) < (0.1 * bins_remain_cap)
    priorities[small_remaining] -= 0.5  # Subtract a small amount to deprioritize

    # Heuristic 4: For bins where item doesnt fit, prioritize bins closest in capacity to item size.
    # This tries to minimise the "waste" of large capacities unused
    doesnt_fit = bins_remain_cap < item
    diff = np.abs(bins_remain_cap[doesnt_fit] - item)
    priorities[doesnt_fit] -= diff / np.max(item, bins_remain_cap[doesnt_fit].max(), initial=1) # subtract propotional to the waste

    return priorities
```
