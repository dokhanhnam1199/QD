```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0 # Assuming bins have unit capacity; change if different

    # Infeasibility check
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # Prioritize bins that are most empty, but penalize strongly because no bin fits.
        priorities = bins_remain_cap / np.max(bins_remain_cap)
        priorities = priorities * 0.1 # Scale down the priorities if no bin fits
        return priorities

    # Calculate fill percentage if item were added to eligible bins
    fill_percentage_after = (bin_capacity - (bins_remain_cap[eligible_bins] - item)) / bin_capacity

    # Prioritize high fill percentage, but also consider the remaining capacity
    priorities[eligible_bins] = fill_percentage_after / (bin_capacity - (bins_remain_cap[eligible_bins] - item) + 0.001) # Avoid division by zero and prioritizes smaller remainder

    # Encourage tighter fits - boost priority if the bin is almost full after placing the item
    nearly_full = (bins_remain_cap[eligible_bins] - item) < 0.1 * bin_capacity
    priorities[eligible_bins][nearly_full] *= 2 # A multiplicative boost

    return priorities
```
