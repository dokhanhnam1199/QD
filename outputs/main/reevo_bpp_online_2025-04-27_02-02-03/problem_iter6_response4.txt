```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities  # No feasible bins, return all zeros

    # 2. Remaining capacity after placement:
    remaining_capacity = bins_remain_cap - item

    # 3. Fill percentage after adding the item
    fill_percentage = (bins_remain_cap - remaining_capacity) / 1.0  # Assuming bin capacity is 1.0

    # 4. Combine heuristics: fill percentage and remaining capacity
    # Prioritize bins with higher fill percentage and lower remaining capacity.

    # Normalize remaining capacity: prioritize smaller remainders (tighter fit)
    max_cap = np.max(bins_remain_cap[feasible_bins])
    normalized_remaining_capacity = remaining_capacity[feasible_bins] / max_cap if max_cap > 0 else np.zeros_like(remaining_capacity[feasible_bins])

    priorities[feasible_bins] = fill_percentage[feasible_bins] - normalized_remaining_capacity

    # Add a bonus for bins that are nearly full after placing the item
    nearly_full_threshold = 0.1
    nearly_full = remaining_capacity[feasible_bins] <= nearly_full_threshold
    priorities[feasible_bins][nearly_full] += 0.2  # Add a small bonus

    return priorities
```
