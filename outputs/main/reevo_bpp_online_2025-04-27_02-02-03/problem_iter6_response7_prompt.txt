{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # A bin can only be selected if its remaining capacity >= item\n    eligible_bins = bins_remain_cap >= item\n\n    if not np.any(eligible_bins):\n        return priorities # no possible bins\n    \n    # Calculate the remaining capacity after adding the item for eligible bins\n    remaining_capacity_after_item = bins_remain_cap[eligible_bins] - item\n    \n    # Calculate the utilization rate (remaining capacity / original capacity) for eligible bins\n    # Use original remaining capacity to calculate utilization (fraction of how full the bin *would* be)\n    utilization_rate = (bins_remain_cap[eligible_bins] - remaining_capacity_after_item) / 1.0\n    \n    # Prioritize bins with higher utilization rate (higher fill percentage)\n    priorities[eligible_bins] = utilization_rate  # Higher priority for higher utilization\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = 1.0  # Assuming bin capacity is 1.0, can be generalized\n\n    # Feasibility check\n    eligible_bins = bins_remain_cap >= item\n\n    if not np.any(eligible_bins):\n        # If no bin can fit the item, prioritize bins with maximum remaining capacity\n        priorities = bins_remain_cap / np.max(bins_remain_cap)  # Normalize to [0, 1]\n        return priorities\n\n    # Normalized fill ratio (how full the bin would be if the item were added)\n    fill_ratio = (bin_capacity - bins_remain_cap + item) / bin_capacity\n    fill_ratio_eligible = fill_ratio[eligible_bins]\n\n    # Remaining capacity after adding the item\n    remaining_capacity_after = bins_remain_cap[eligible_bins] - item\n\n    # Reward tight fits (bins where the remaining capacity is small)\n    tight_fit_score = 1.0 / (remaining_capacity_after + 0.001)\n\n    # Penalize excessive waste (bins that are too large for the item)\n    waste_penalty = np.abs(remaining_capacity_after)\n\n    # Combine the scores\n    priorities[eligible_bins] = tight_fit_score #/ (1 + waste_penalty) # waste_penalty without +1 to maintain high priority\n\n    # Boost the priority of bins that have almost exactly the item size left. This favors best-fit\n    exact_fit = np.abs(bins_remain_cap[eligible_bins] - item) < 0.001  # tolerate small error\n    priorities[eligible_bins][exact_fit] += 10\n\n    #Prioritize bins that becomes full after packing\n    full_fit = np.abs(bins_remain_cap[eligible_bins] - item) < 0.00001\n    priorities[eligible_bins][full_fit] += 5\n    \n    return priorities\n\n[Reflection]\nThe better code prioritizes tight fits and full bins, while penalizing waste and normalizing when no fit exists.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}