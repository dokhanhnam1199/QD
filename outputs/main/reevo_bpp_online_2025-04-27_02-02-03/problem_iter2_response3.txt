```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # A bin can only be selected if its remaining capacity >= item
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return priorities # no possible bins
    
    # Prioritize based on relative waste (smaller is better).  Invert so larger is better.
    relative_waste = (bins_remain_cap[eligible_bins] - item) / bins_remain_cap[eligible_bins]
    priorities[eligible_bins] = 1 - relative_waste  # Scale to [0, 1] where 1 is best.

    # Boost for bins that have a high percentage utilization if item added.
    post_fill_utilization = (bins_remain_cap[eligible_bins] - item) / 1.0
    
    # Scale utilization boost. Higher utilization gets a higher boost.
    utilization_boost = 1 - post_fill_utilization #Scale so values between 0 and 1
    utilization_boost = np.clip(utilization_boost, 0, 1) #Ensure bounds [0, 1]
    priorities[eligible_bins] += utilization_boost

    return priorities
```
