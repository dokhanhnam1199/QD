```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    capacity = bins_remain_cap[0] + item  # maximum capacity of bin
    # First, consider only bins that can accommodate the item.
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # If no bin can fit the item, prioritize bins with maximum remaining capacity, but heavily penalize
        priorities = bins_remain_cap / capacity - 100  # Normalize and severely penalize
        return priorities

    # For eligible bins, calculate a score based on remaining capacity *after* placing the item.
    remaining_capacity_after_placement = bins_remain_cap[eligible_bins] - item

    # Prioritize tight fits non-linearly.
    priorities[eligible_bins] = np.exp(-10 * remaining_capacity_after_placement / capacity)  # Stronger non-linear reward for smaller space

    # Heavily boost the priority of bins that have almost exactly the item size left. This favors best-fit
    exact_fit = np.abs(bins_remain_cap[eligible_bins] - item) < 0.001  # tolerate small error
    priorities[eligible_bins][exact_fit] += 100  # Add a significant boost

    # Penalize wasted space, but less severely than infeasibility, and non-linearly.
    wasted_space = remaining_capacity_after_placement / capacity
    priorities[eligible_bins] -= 2 * wasted_space**2  # Reduced penalty for waste

    # Add gentle near-full bin penalization.
    near_full_threshold = 0.1  # Fraction of bin size
    near_full_bins = (bins_remain_cap[eligible_bins] - item) < near_full_threshold * capacity
    priorities[eligible_bins][near_full_bins] *= 0.9  # Reduce priority slightly

    return priorities
```
