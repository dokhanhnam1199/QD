```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # If no bin fits, prioritize bins with the maximum remaining capacity.
        priorities = bins_remain_cap / np.max(bins_remain_cap)
        return priorities

    # Calculate remaining capacity after placing the item in eligible bins
    remaining_capacity_after_placement = bins_remain_cap[eligible_bins] - item

    # Calculate fill ratio after placing item
    fill_ratio_after_placement = (bins_remain_cap[eligible_bins] + item - remaining_capacity_after_placement) / (bins_remain_cap[eligible_bins] + item)  # Assuming initial bin size is bins_remain_cap + item conceptually

    # Prioritize based on normalized fill ratio and remaining capacity
    priorities[eligible_bins] = fill_ratio_after_placement 

    # Reward tight fits (best-fit strategy)
    exact_fit = np.abs(remaining_capacity_after_placement) < 0.001  # Tolerance for "exact" fit
    priorities[eligible_bins][exact_fit] += 10

    # Penalize excessive waste (large remaining capacity after placement)
    waste_penalty = remaining_capacity_after_placement / np.max(bins_remain_cap) # Normalized waste
    priorities[eligible_bins] -= waste_penalty * 0.5  # Adjust the penalty factor

    # Boost nearly-full bins, but only if they're not an exact fit (handled above)
    near_full_threshold = 0.1 
    near_full_bins = (remaining_capacity_after_placement < near_full_threshold) & (~exact_fit)
    priorities[eligible_bins][near_full_bins] *= 1.2 # Small boost

    return priorities
```
