```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # A bin can only be selected if its remaining capacity >= item
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return priorities # no possible bins
    
    priorities[eligible_bins] = (bins_remain_cap[eligible_bins] - item) / bins_remain_cap[eligible_bins]

    #Boost for bins that have a high percentage utilization if item added.
    utilization = (bins_remain_cap - item) / 1.0
    
    utilization[utilization < 0] = -1 # Mark invalid bins as -1

    #Scale so values between 0 and 1
    utilization[utilization >=0] = 1 - utilization[utilization>=0] #Make 0 be a close full and 1 be empty.
    
    priorities = priorities + utilization
    
    return priorities
```
