{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = 1.0  # Assuming bin capacity is 1.0, can be generalized\n\n    # Feasibility check\n    eligible_bins = bins_remain_cap >= item\n\n    if not np.any(eligible_bins):\n        # If no bin can fit the item, prioritize bins with maximum remaining capacity (Worst Fit)\n        priorities = bins_remain_cap / np.max(bins_remain_cap)\n        return priorities\n\n    # Remaining capacity after adding the item\n    remaining_capacity_after = bins_remain_cap[eligible_bins] - item\n\n    # Tight Fit Score: Higher score for smaller remaining capacity\n    tight_fit_score = 1.0 / (remaining_capacity_after + 0.0001)\n\n    # Waste Penalty: Higher penalty for larger remaining capacity\n    waste_penalty = remaining_capacity_after**2\n\n    # Combine scores: Balance tight fit and waste penalty.\n    priorities[eligible_bins] = tight_fit_score - waste_penalty\n\n    # Exact Fit Bonus: Give a significant bonus if the item fits almost perfectly.\n    exact_fit = np.abs(bins_remain_cap[eligible_bins] - item) < 0.001\n    priorities[eligible_bins][exact_fit] += 10\n\n    # Full Fit Bonus: Prioritize bins that become full after packing\n    full_fit = np.abs(bins_remain_cap[eligible_bins] - item) < 0.00001\n    priorities[eligible_bins][full_fit] += 5\n\n    # Normalize the priorities to ensure they are in a reasonable range.\n    max_priority = np.max(priorities[eligible_bins]) if np.any(eligible_bins) else 1.0 # Avoid division by zero\n    priorities[eligible_bins] /= max_priority\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = 1.0  # Assuming bin capacity is normalized to 1. Adjust as needed.\n\n    # Feasibility check: Identify bins that can accommodate the item\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        # If no bin can fit, prioritize bins with maximum remaining capacity (normalized)\n        priorities = bins_remain_cap / bin_capacity # Normalize to [0, 1]\n        return priorities\n\n    # Calculate remaining capacity after placing the item in feasible bins\n    remaining_capacity_after_placement = bins_remain_cap[feasible_bins] - item\n\n    # Reward near-exact fits heavily\n    exact_fit = np.abs(remaining_capacity_after_placement) < 0.001  # Tolerate small error\n    priorities[feasible_bins][exact_fit] += 100  # Significant boost for near-exact fits\n\n    # Prioritize smaller remaining capacity (encourage packing tightly)\n    # But avoid division by zero by adding a small constant\n    priorities[feasible_bins] += 1.0 / (remaining_capacity_after_placement + 0.001)\n\n    # Penalize wasted space (non-linearly - exponential decay)\n    wasted_space = remaining_capacity_after_placement\n    priorities[feasible_bins] -= np.exp(5 * wasted_space) - 1  # Exponential penalty, adjust the factor (5) as needed\n\n    # Penalize near-full bins gently\n    near_full_threshold = 0.1 * bin_capacity  # e.g., 10% of bin capacity\n    near_full_bins = remaining_capacity_after_placement < near_full_threshold\n    priorities[feasible_bins][near_full_bins] -= 10  # Gentle penalty for near-full bins\n\n    # Normalize priorities to a reasonable range (optional, but can help stability)\n    max_priority = np.max(priorities)\n    if max_priority > 0:\n        priorities /= max_priority\n\n    return priorities\n\n[Reflection]\nPrioritize exact fits, penalize waste exponentially, and gently discourage near-full bins for better packing.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}