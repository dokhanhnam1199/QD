{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First, consider only bins that can accommodate the item.\n    eligible_bins = bins_remain_cap >= item\n\n    if not np.any(eligible_bins):\n        # If no bin can fit the item, prioritize bins with maximum remaining capacity\n        priorities = bins_remain_cap / np.max(bins_remain_cap)  # Normalize to [0, 1]\n        return priorities\n\n    # Calculate remaining capacity after placing the item in eligible bins.\n    remaining_capacity_after_placement = bins_remain_cap[eligible_bins] - item\n\n    # Prioritize bins with smaller remaining capacity after placement using inverse.\n    priorities[eligible_bins] = 1.0 / (remaining_capacity_after_placement + 0.001)\n\n    # Strongly boost priority for near-exact fits.\n    exact_fit_threshold = 0.05\n    exact_fit = np.abs(remaining_capacity_after_placement) <= exact_fit_threshold\n    priorities[eligible_bins][exact_fit] += 30\n\n    # Gently penalize near-full bins to avoid extreme fragmentation.\n    near_full_threshold = 0.15\n    near_full_bins = remaining_capacity_after_placement < near_full_threshold\n    priorities[eligible_bins][near_full_bins] *= 0.7\n\n    # Slightly reward bins with larger initial capacity, to encourage using emptier bins if all else is equal.\n    priorities[eligible_bins] += bins_remain_cap[eligible_bins] / np.max(bins_remain_cap) * 0.1\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Only consider bins that can fit the item\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        return priorities  # No feasible bins, return all zeros\n\n    # 2. Remaining capacity after placement:\n    remaining_capacity = bins_remain_cap - item\n\n    # 3. Fill percentage after adding the item\n    fill_percentage = (bins_remain_cap - remaining_capacity)  # Assuming bin capacity is 1.0, simplified calculation\n\n    # 4. Combine heuristics: fill percentage and remaining capacity\n    # Prioritize bins with higher fill percentage and lower remaining capacity.\n\n    # Normalize remaining capacity: prioritize smaller remainders (tighter fit)\n    max_cap_feasible = np.max(bins_remain_cap[feasible_bins])\n    normalized_remaining_capacity = remaining_capacity[feasible_bins] / max_cap_feasible if max_cap_feasible > 0 else np.zeros_like(remaining_capacity[feasible_bins])\n\n    priorities[feasible_bins] = fill_percentage[feasible_bins] - 0.5 * normalized_remaining_capacity  # Scale down the impact of remaining capacity\n\n    # Add a bonus for bins that are nearly full after placing the item\n    nearly_full_threshold = 0.1\n    nearly_full = remaining_capacity[feasible_bins] <= nearly_full_threshold\n    priorities[feasible_bins][nearly_full] += 0.2  # Add a small bonus\n\n    #Penalize bins that have too much space left after placing the item, because this would lead to a lot of small items and would make it hard to find a good fit later\n    large_waste_threshold = 0.7\n    large_waste = remaining_capacity[feasible_bins] >= large_waste_threshold\n    priorities[feasible_bins][large_waste] -= 0.1\n\n    return priorities\n\n[Reflection]\nPrioritize fill percentage, penalize excessive waste. Normalize remaining capacity for tighter fits.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}