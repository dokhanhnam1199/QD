```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)

    # Calculate the wasted space if the item is placed in the bin
    wasted_space = bins_remain_cap - item

    # Feasibility is paramount: Strongly prioritize feasible bins.
    feasible_bins = wasted_space >= 0
    priorities[feasible_bins] += 5  # Large base priority for feasibility

    # Normalize wasted space for comparison. Only consider feasible bins.
    normalized_waste = np.zeros_like(wasted_space, dtype=float)  # Initialize normalized_waste
    normalized_waste[feasible_bins] = wasted_space[feasible_bins] / max_cap

    # Reward bins that minimize normalized wasted space.
    if np.any(feasible_bins):
        min_normalized_waste = np.min(normalized_waste[feasible_bins])
        best_fit_bins = feasible_bins & (normalized_waste <= min_normalized_waste + 1e-6)
        priorities[best_fit_bins] += 3  # Significant bonus for best fit.

    # Prioritize almost full bins (small remaining capacity).
    almost_full_threshold = 0.1
    almost_full_bins = feasible_bins & (normalized_waste <= almost_full_threshold)
    priorities[almost_full_bins] += 2  # Bonus for near-full bins.

    # Penalize bins that leave a very small remaining capacity after packing.
    small_remaining_cap_threshold = 0.05
    small_remaining_cap_bins = feasible_bins & (normalized_waste <= small_remaining_cap_threshold)
    priorities[small_remaining_cap_bins] -= 1 # Slight penalty to encourage other bins

    # Incentivize filling up more space by giving a higher priority to bins with less normalized waste.
    priorities[feasible_bins] += (1 - normalized_waste[feasible_bins])

    return priorities
```
