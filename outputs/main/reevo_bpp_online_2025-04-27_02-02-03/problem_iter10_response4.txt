```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: prioritize only bins that can accommodate the item.
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # If no bin can fit the item, prioritize bins with maximum remaining capacity
        priorities = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)  # Normalize to [0, 1]
        return priorities

    # Calculate remaining capacity after placing the item in each feasible bin.
    remaining_capacity = bins_remain_cap[feasible_bins] - item
    
    # Define a small constant to avoid division by zero or very large values.
    epsilon = 1e-6

    # Reward tight fits: the smaller the remaining capacity, the higher the priority.
    tight_fit_priority = 1.0 / (remaining_capacity + epsilon)

    # Boost priority for almost exact fits
    exact_fit = np.abs(remaining_capacity) < 0.05 * item  #Dynamic exact fit threshold
    tight_fit_priority[exact_fit] += 20

    # Penalize waste non-linearly (e.g., squared waste).
    # Normalize remaining_capacity to the range [0, 1] relative to item size.
    normalized_waste = remaining_capacity / (item + epsilon)
    waste_penalty = normalized_waste**3  # Cubic waste penalty
    tight_fit_priority -= waste_penalty

    priorities[feasible_bins] = tight_fit_priority

    #Slightly favor bins with larger initial capacity to avoid using almost full bins if possible
    priorities[feasible_bins] += bins_remain_cap[feasible_bins] / np.max(bins_remain_cap) * 0.05 if np.max(bins_remain_cap) > 0 else 0

    return priorities
```
