```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First, prioritize bins that can fit the item.  Bins that cannot fit it
    # get a very low priority (negative infinity, which effectively excludes them).
    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -np.inf

    # For bins that can fit, calculate a score based on remaining capacity *after*
    # adding the item.  We want to minimize wasted space.
    remaining_after = bins_remain_cap[can_fit] - item
    priorities[can_fit] = -remaining_after  # Higher remaining after is worse

    # Bonus: Slightly prefer bins that are already somewhat full. This encourages
    # us to fill up partially filled bins before starting new ones.  The magnitude
    # here is important; too large and we'll disregard actual fit.

    priorities[can_fit] += 0.1 * (1 - (bins_remain_cap[can_fit] / np.max(bins_remain_cap)))

    #Further improvement: Try to find "almost full" bins that this item would perfectly fit
    almost_full_threshold = 0.95 * np.max(bins_remain_cap)
    almost_full_bins = (bins_remain_cap >= almost_full_threshold) & can_fit
    priorities[almost_full_bins] += 1

    return priorities
```
