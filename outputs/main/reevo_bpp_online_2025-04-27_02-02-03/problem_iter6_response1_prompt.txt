{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.mean(bins_remain_cap) #Estimating bin size, if variable bin sizes are allowed, this needs to be adjusted\n\n    # 1. Feasibility: Can the item fit in the bin?\n    feasible_bins = bins_remain_cap >= item\n\n    # 2. Remaining capacity after packing: Smaller is better (Best Fit principle)\n    remaining_capacity_after_packing = bins_remain_cap - item\n    remaining_capacity_after_packing[~feasible_bins] = np.inf  # Penalize infeasible bins heavily\n\n    # 3. Avoid fragmentation:  Bins resulting in very small remaining capacity are penalized\n    fragmentation_threshold = 0.1 * bin_capacity  # Adjust as needed, relative to bin size\n    fragmentation_penalty = -10  # Adjust as needed\n    fragmented_bins = (remaining_capacity_after_packing > 0) & (remaining_capacity_after_packing <= fragmentation_threshold)\n\n    # 4. Reward almost full bins.\n    almost_full_threshold = 0.05 * bin_capacity  # proportion of bin size, adjust as needed. Represents the item size being close to bin size.\n    almost_full_reward = 5\n\n    almost_full_bins = (item >= (bins_remain_cap - almost_full_threshold)) & feasible_bins\n\n    # 5. Normalize remaining capacity to bin size for better scaling\n    normalized_remaining_capacity = remaining_capacity_after_packing / bin_capacity\n\n    # Combine the factors:\n\n    priorities[feasible_bins] = (\n        1.0 / (1.0 + normalized_remaining_capacity[feasible_bins])  # Prefer smaller remaining capacity, normalized\n    )\n    priorities[fragmented_bins] += fragmentation_penalty #Penalize fragmentation\n    priorities[almost_full_bins] += almost_full_reward\n\n    # If no bin is feasible, strongly penalize\n    if not np.any(feasible_bins):\n        priorities[:] = -np.inf\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    max_cap = np.max(bins_remain_cap)\n\n    # Calculate the wasted space if the item is placed in the bin\n    wasted_space = bins_remain_cap - item\n\n    # Feasibility is paramount: Strongly prioritize feasible bins.\n    feasible_bins = wasted_space >= 0\n    priorities[feasible_bins] += 5  # Large base priority for feasibility\n\n    # Normalize wasted space for comparison. Only consider feasible bins.\n    normalized_waste = np.zeros_like(wasted_space, dtype=float)  # Initialize normalized_waste\n    normalized_waste[feasible_bins] = wasted_space[feasible_bins] / max_cap\n\n    # Reward bins that minimize normalized wasted space.\n    if np.any(feasible_bins):\n        min_normalized_waste = np.min(normalized_waste[feasible_bins])\n        best_fit_bins = feasible_bins & (normalized_waste <= min_normalized_waste + 1e-6)\n        priorities[best_fit_bins] += 3  # Significant bonus for best fit.\n\n    # Prioritize almost full bins (small remaining capacity).\n    almost_full_threshold = 0.1\n    almost_full_bins = feasible_bins & (normalized_waste <= almost_full_threshold)\n    priorities[almost_full_bins] += 2  # Bonus for near-full bins.\n\n    # Penalize bins that leave a very small remaining capacity after packing.\n    small_remaining_cap_threshold = 0.05\n    small_remaining_cap_bins = feasible_bins & (normalized_waste <= small_remaining_cap_threshold)\n    priorities[small_remaining_cap_bins] -= 1 # Slight penalty to encourage other bins\n\n    # Incentivize filling up more space by giving a higher priority to bins with less normalized waste.\n    priorities[feasible_bins] += (1 - normalized_waste[feasible_bins])\n\n    return priorities\n\n[Reflection]\nPrioritize feasibility. Normalize waste. Reward best fit and near-full bins. Penalize excessive fragmentation gently.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}