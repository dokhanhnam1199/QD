```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give high priority to bins that can fit the item.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = 1

    # For bins that can fit the item, prioritize those with smaller remaining capacity after adding the item.
    remaining_after_fit = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] += 1 / (remaining_after_fit + 0.0001)  # avoid division by zero and prioritize smaller remainders
    
    # Bonus for bins that are almost full *before* adding the item, as long as they fit.
    almost_full_threshold = 0.1  # Define "almost full" as within 10% of bin capacity
    almost_full_mask = (bins_remain_cap >= item) & (bins_remain_cap < (item + almost_full_threshold))
    priorities[almost_full_mask] += 2 # give a much bigger priority

    # Penalize bins that cannot fit the item to the item size ratio
    no_fit_mask = bins_remain_cap < item
    priorities[no_fit_mask] = - (item / (bins_remain_cap[no_fit_mask] + 0.0001)) #Avoid division by zero.

    return priorities
```
