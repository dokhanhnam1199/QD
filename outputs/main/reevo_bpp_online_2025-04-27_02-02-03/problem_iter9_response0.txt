```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility check
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        # No feasible bin: prioritize based on remaining capacity
        priorities = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)
        return priorities
    
    # Calculate remaining capacity after placing item in feasible bins
    remaining_after = bins_remain_cap[feasible_bins] - item
    
    # Reward near-exact fits heavily
    exact_fit = np.abs(remaining_after) < 0.001
    priorities[feasible_bins][exact_fit] += 100.0
    
    # Penalize wasted space (non-linearly)
    wasted_space_penalty = np.exp(remaining_after)
    priorities[feasible_bins] += 1.0 / (wasted_space_penalty + 0.001)
    
    # Penalize near-full bins
    near_full = remaining_after < 0.1  # Adjust threshold as needed
    priorities[feasible_bins][near_full] *= 0.1  # Reduce priority significantly
    
    # Normalize priorities of feasible bins
    if np.sum(priorities[feasible_bins]) > 0:
        priorities[feasible_bins] /= np.sum(priorities[feasible_bins])
    
    return priorities
```
