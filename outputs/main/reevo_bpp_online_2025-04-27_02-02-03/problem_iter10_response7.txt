```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = 1.0  # Assuming bin capacity is normalized to 1. Adjust as needed.

    # Feasibility check: Identify bins that can accommodate the item
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # If no bin can fit, prioritize bins with maximum remaining capacity (normalized)
        priorities = bins_remain_cap / bin_capacity  # Normalize to [0, 1]
        return priorities

    # Calculate remaining capacity after placing the item in feasible bins
    remaining_capacity_after_placement = bins_remain_cap[feasible_bins] - item

    # Reward near-exact fits heavily
    exact_fit_threshold = 0.001
    exact_fit = np.abs(remaining_capacity_after_placement) <= exact_fit_threshold  # Tolerate small error
    priorities[feasible_bins][exact_fit] += 100  # Significant boost for near-exact fits

    # Penalize wasted space (exponentially)
    waste_penalty_factor = 5  # Adjust as needed; higher = stronger penalty
    waste_penalty = np.exp(waste_penalty_factor * remaining_capacity_after_placement) - 1
    priorities[feasible_bins] -= waste_penalty

    # Gently discourage near-full bins
    near_full_threshold = 0.1 * bin_capacity  # e.g., 10% of bin capacity
    near_full_bins = remaining_capacity_after_placement <= near_full_threshold
    priorities[feasible_bins][near_full_bins] -= 10  # Gentle penalty for near-full bins

    # Encourage smaller remaining capacity after placement (tight packing), avoid division by zero.
    priorities[feasible_bins] += 1.0 / (remaining_capacity_after_placement + 0.0001)

    # Normalize priorities to a reasonable range (optional, but can help stability)
    max_priority = np.max(priorities)
    if max_priority > 0:
        priorities /= max_priority

    return priorities
```
