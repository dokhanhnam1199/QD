```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Assign high priority to bins that can fit the item snugly.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask]

    # Penalize bins that cannot fit the item.
    priorities[~fit_mask] = -np.inf

    # Prioritize bins with smaller remaining capacity among bins that can fit item.
    priorities[fit_mask] = 1 - priorities[fit_mask]

    # Scale the priorities between 0 and 1 to improve stability.
    priorities[fit_mask] = (priorities[fit_mask] - np.min(priorities[fit_mask])) / (np.max(priorities[fit_mask]) - np.min(priorities[fit_mask])) if np.any(fit_mask) else 0
    
    return priorities
```
