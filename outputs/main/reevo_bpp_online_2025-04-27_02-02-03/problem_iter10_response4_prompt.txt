{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First, consider only bins that can accommodate the item.\n    eligible_bins = bins_remain_cap >= item\n\n    if not np.any(eligible_bins):\n        # If no bin can fit the item, prioritize bins with maximum remaining capacity\n        priorities = bins_remain_cap / np.max(bins_remain_cap)  # Normalize to [0, 1]\n        return priorities\n\n    # Calculate remaining capacity after placing the item in eligible bins.\n    remaining_capacity_after_placement = bins_remain_cap[eligible_bins] - item\n\n    # Prioritize bins with smaller remaining capacity after placement using inverse.\n    priorities[eligible_bins] = 1.0 / (remaining_capacity_after_placement + 0.001)\n\n    # Strongly boost priority for near-exact fits.\n    exact_fit_threshold = 0.05\n    exact_fit = np.abs(remaining_capacity_after_placement) <= exact_fit_threshold\n    priorities[eligible_bins][exact_fit] += 30\n\n    # Gently penalize near-full bins to avoid extreme fragmentation.\n    near_full_threshold = 0.15\n    near_full_bins = remaining_capacity_after_placement < near_full_threshold\n    priorities[eligible_bins][near_full_bins] *= 0.7\n\n    # Slightly reward bins with larger initial capacity, to encourage using emptier bins if all else is equal.\n    priorities[eligible_bins] += bins_remain_cap[eligible_bins] / np.max(bins_remain_cap) * 0.1\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility check: prioritize only bins that can accommodate the item.\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        # If no bin can fit the item, prioritize bins with maximum remaining capacity\n        priorities = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap) # Normalize to [0, 1]\n        return priorities\n\n    # Calculate remaining capacity after placing the item in each feasible bin.\n    remaining_capacity = bins_remain_cap[feasible_bins] - item\n    \n    # Define a small constant to avoid division by zero or very large values.\n    epsilon = 1e-6\n\n    # Reward tight fits: the smaller the remaining capacity, the higher the priority.\n    tight_fit_priority = 1.0 / (remaining_capacity + epsilon)\n\n    # Boost priority for almost exact fits\n    exact_fit = np.abs(remaining_capacity) < 0.001\n    tight_fit_priority[exact_fit] += 10\n\n    # Penalize waste non-linearly (e.g., squared waste).\n    # Normalize remaining_capacity to the range [0, 1] relative to item size.\n    normalized_waste = remaining_capacity / (item + epsilon)\n    waste_penalty = normalized_waste**2  # Square to emphasize larger waste\n    tight_fit_priority -= waste_penalty\n\n    priorities[feasible_bins] = tight_fit_priority\n\n    return priorities\n\n[Reflection]\nPrioritize tight fits, penalize waste non-linearly, and use normalization to guide bin selection effectively.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}