```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Primary priority: Prefer bins that can accommodate the item
            priority = 1.0
            # Secondary priority: Prefer bins with less remaining capacity (First Fit Decreasing variant)
            priority += (1 - (cap - item) / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else 1.0
            # Tertiary priority: slight nudge to bins nearing full
            priority += (1 - (cap / np.max(bins_remain_cap))) * 0.1 if np.max(bins_remain_cap) > 0 else 0.1
            priorities[i] = priority
        else:
            priorities[i] = -1.0  # Cannot fit, lowest priority

    return priorities
```
