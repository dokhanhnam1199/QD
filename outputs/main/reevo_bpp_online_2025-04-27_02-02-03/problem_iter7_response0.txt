```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: only consider bins that can accommodate the item.
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # If no bin can fit, spread the item amongst the least full bins.
        # Prioritize bins with maximum remaining capacity using normalization
        priorities = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)
        return priorities

    # Calculate fill percentage if item is added to each feasible bin
    fill_percentage = (item) / (bins_remain_cap[feasible_bins])
    
    # Reward tight fits: prioritize bins where the item nearly fills the bin.
    tight_fit_score = 1 / (bins_remain_cap[feasible_bins] - item + 0.001)

    # Combine fill percentage and tight fit score
    priorities[feasible_bins] = fill_percentage + tight_fit_score

    # Boost bins with almost exact fit
    exact_fit = np.abs(bins_remain_cap[feasible_bins] - item) < 0.001
    priorities[feasible_bins][exact_fit] += 10
    
    # Normalize priorities to the range [0,1] for stable performance
    max_priority = np.max(priorities)
    if max_priority > 0:
        priorities = priorities / max_priority
    
    return priorities
```
