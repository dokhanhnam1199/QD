```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic implements a "Best Fit" strategy, prioritizing bins
    that, after accommodating the item, would leave the smallest amount of
    remaining space. This aims to keep bins as "tightly packed" as possible,
    reserving larger empty spaces for potentially larger future items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining space in each bin if the item were placed there.
    # A negative value here means the item does not fit.
    potential_remain_after_placement = bins_remain_cap - item

    # Initialize priority scores.
    # We use a float array to allow for -np.inf.
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify which bins can actually fit the item (remaining capacity >= 0).
    can_fit_mask = potential_remain_after_placement >= 0

    # For bins that can fit the item:
    # The priority is the negative of the remaining space.
    # A smaller remaining space (e.g., 0.1) will result in a larger negative score (-0.1).
    # A larger remaining space (e.g., 0.5) will result in a smaller negative score (-0.5).
    # Since we want to choose the bin with the HIGHEST priority score,
    # minimizing `potential_remain_after_placement` corresponds to maximizing
    # `-potential_remain_after_placement`. This is the core of Best Fit.
    priorities[can_fit_mask] = -potential_remain_after_placement[can_fit_mask]

    # For bins that cannot fit the item:
    # Assign a very low priority (negative infinity) to ensure they are never
    # selected if there is any bin that can accommodate the item.
    priorities[~can_fit_mask] = -np.inf

    return priorities
```
