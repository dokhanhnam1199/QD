```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best-Fit and consolidation with explicit perfect-fit prioritization
    and a penalty for small, potentially useless remaining spaces. Balances immediate fit
    with long-term bin consolidation and fragmentation avoidance.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        return priorities

    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
    remaining_after_fit = fitting_bins_remain_cap - item

    # --- Tunable Heuristic Parameters ---
    BIN_CAPACITY = 1.0

    # Best-Fit component weight. Negative: smaller `remaining_after_fit` is better.
    WEIGHT_BEST_FIT = -1.0 
    # Consolidation component weight. Positive: encourages filling existing bins.
    WEIGHT_CONSOLIDATION = 0.05 
    
    # Score for a perfect fit. Should be the highest possible score.
    PERFECT_FIT_SCORE = 1000.0

    # Threshold for what constitutes a "small, potentially useless" remainder.
    FRAGMENT_THRESHOLD = 0.08 * BIN_CAPACITY 
    # Multiplier for the penalty applied to small non-zero remainders.
    SMALL_REMAINDER_PENALTY_MULTIPLIER = 100.0 
    # --- End Tunable Heuristic Parameters ---

    # 1. Base Score Calculation: Best-Fit + Consolidation (similar to priority_v0)
    # This provides a general preference for tight fits and filling existing bins.
    best_fit_scores = remaining_after_fit * WEIGHT_BEST_FIT
    current_fullness = BIN_CAPACITY - fitting_bins_remain_cap
    consolidation_scores = current_fullness * WEIGHT_CONSOLIDATION
    
    # Apply these combined scores to all fitting bins initially.
    base_combined_scores = best_fit_scores + consolidation_scores
    priorities[can_fit_mask] = base_combined_scores

    # 2. Perfect Fit Override (from priority_v1 insight)
    # Identify bins where the item fits perfectly (remainder is approximately zero).
    perfect_fit_mask_in_fitting = np.isclose(remaining_after_fit, 0.0, atol=1e-9)
    if np.any(perfect_fit_mask_in_fitting):
        # Map the mask back to the original `priorities` array and assign the high score.
        original_indices_perfect_fit = np.where(can_fit_mask)[0][perfect_fit_mask_in_fitting]
        priorities[original_indices_perfect_fit] = PERFECT_FIT_SCORE

    # 3. Small Fragment Penalty (from priority_v1 insight)
    # Identify bins that leave a small, non-zero remainder, which might be unusable.
    # Exclude perfect fits from this penalty, as they are already handled and prioritized.
    small_remainder_mask_in_fitting = (remaining_after_fit > 1e-9) & \
                                      (remaining_after_fit < FRAGMENT_THRESHOLD) & \
                                      (~perfect_fit_mask_in_fitting) # Ensure perfect fits are not penalized
    
    if np.any(small_remainder_mask_in_fitting):
        # Calculate a penalty: larger remainder (but still below threshold) is less penalized.
        # This pushes scores for these bins significantly lower.
        penalty_term = (FRAGMENT_THRESHOLD - remaining_after_fit[small_remainder_mask_in_fitting]) * SMALL_REMAINDER_PENALTY_MULTIPLIER

        # Map back to original `priorities` array and subtract the penalty.
        original_indices_to_penalize = np.where(can_fit_mask)[0][small_remainder_mask_in_fitting]
        priorities[original_indices_to_penalize] -= penalty_term

    return priorities
```
