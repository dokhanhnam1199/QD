```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using a robust Best-Fit approach: tighter fits are preferred,
    and bins that cannot fit the item are strictly excluded using negative infinity.
    """
    # Initialize all priorities to negative infinity. This ensures that
    # bins which cannot accommodate the item are effectively deprioritized
    # to the lowest possible value, making them unchoosable if any valid bin exists.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate the remaining capacity after placement.
    # We want to minimize this remaining capacity to achieve a "best fit".
    # By taking the negative of the remaining capacity, a smaller positive remainder
    # (i.e., a tighter fit) results in a larger (less negative) priority score.
    # A perfect fit (remaining_capacity == 0) results in a score of 0.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item
    
    # Assign priorities: negative remaining capacity for valid bins.
    # This directly implements the Best-Fit strategy where minimizing remaining space
    # (or maximizing its negative) leads to the highest priority.
    priorities[can_fit_mask] = -remaining_capacity_after_fit 

    return priorities
```
