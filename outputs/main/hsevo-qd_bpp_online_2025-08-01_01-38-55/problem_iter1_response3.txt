```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin.

    Drawing inspiration from Marie Curie's pursuit of efficiency and the
    meticulous handling of resources, this function aims to minimize "radioactive
    waste" â€“ the unused capacity left in a bin after an item is placed.

    This heuristic prioritizes bins that offer the 'snuggest' fit, ideally
    leaving zero or very little remaining space. Such a fit is akin to achieving
    a stable, perfectly utilized structure.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities remaining in each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher scores indicate a more desirable bin for the item.
    """
    # Calculate the hypothetical remaining capacity after placing the item in each bin.
    # This represents the 'potential waste' or unutilized space.
    potential_waste = bins_remain_cap - item

    # Initialize priority scores. Bins that cannot fit the item are assigned
    # the lowest possible priority (-infinity) to ensure they are never chosen
    # if a valid option exists.
    priority_scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify the 'stable' candidates: bins where the item can actually fit.
    fitting_bins_mask = potential_waste >= 0

    # A very small epsilon is added to the denominator to prevent division by zero
    # in the case of a perfect fit (where potential_waste is exactly 0).
    # This ensures a finite, yet extremely high, priority for a perfect fit.
    epsilon = 1e-9  # A microscopic allowance, like background radiation

    # For bins that can fit the item, assign priority based on the inverse
    # of the potential waste. A smaller waste implies a higher priority.
    # This effectively implements a 'Best Fit' strategy, but with a non-linear
    # scaling that greatly rewards tighter fits.
    priority_scores[fitting_bins_mask] = 1.0 / (potential_waste[fitting_bins_mask] + epsilon)

    return priority_scores
```
