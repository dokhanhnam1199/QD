```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                epsilon: float = 1e-9, 
                perfect_fit_score: float = 1e12,
                tight_fit_exponent: float = 2.0) -> np.ndarray:
    """Prioritizes bins using enhanced Best-Fit: extreme bonus for perfect fits, 
    and a tunable non-linear decay (via exponent) for non-perfect tight fits. 
    Focuses on maximizing bin utilization and adaptability through parameters.
    """
    # Initialize all priorities to a very low number, effectively deprioritizing
    # bins that cannot accommodate the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item
    
    # If no bin can fit the item, return the low-priority array immediately.
    if not np.any(can_fit_mask):
        return priorities

    # Calculate the remaining capacity after placing the item for fitting bins.
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
    remaining_capacity_after_fit = fitting_bins_remain_cap - item

    # Identify "perfect fits" where the remaining capacity is effectively zero.
    is_perfect_fit = remaining_capacity_after_fit < epsilon

    # Calculate scores for non-perfect fits using a tunable non-linear decay.
    # The `tight_fit_exponent` allows control over how steeply the score drops
    # as leftover space increases, making very tight fits disproportionately
    # more desirable. `epsilon` ensures numerical stability and avoids division by zero.
    scores = 1.0 / np.power(remaining_capacity_after_fit + epsilon, tight_fit_exponent)
    
    # Apply an overriding, very high bonus for truly perfect fits. This ensures
    # a perfect fit is always chosen over any non-perfect fit, regardless of its
    # closeness, promoting efficient bin closure.
    scores[is_perfect_fit] = perfect_fit_score

    # Assign the calculated scores to the bins that can fit the item.
    priorities[can_fit_mask] = scores
    
    return priorities
```
