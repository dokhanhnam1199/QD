import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                default_low_priority: float = -75.40150368108308,
                fit_score_weight: float = -1.8610525259499173) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best-Fit-like heuristic.
    Bins that fit the item are prioritized based on how little space
    would be left after placing the item (i.e., tighter fits get higher scores).
    Bins that cannot fit the item receive a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        default_low_priority: The priority assigned to bins that cannot accommodate the item.
                              Should be a very low number (e.g., -np.inf) to ensure they are
                              not chosen if any valid bin exists.
        fit_score_weight: A multiplier applied to the negative remaining capacity after fit.
                          A negative value (e.g., -1.0) ensures that tighter fits (smaller
                          remaining capacity) receive higher scores.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to a very low number. This ensures that
    # bins which cannot accommodate the item are effectively deprioritized.
    # Using default_low_priority makes them guaranteed to not be chosen if any valid bin exists.
    priorities = np.full_like(bins_remain_cap, default_low_priority, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate the remaining capacity after placement.
    # We want to minimize this remaining capacity to achieve a "best fit".
    # By taking the remaining capacity and multiplying by fit_score_weight,
    # a smaller positive remainder (i.e., a tighter fit) results in a larger priority score
    # when fit_score_weight is negative.
    # A perfect fit (remaining_capacity == 0) results in a score of 0.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item
    priorities[can_fit_mask] = remaining_capacity_after_fit * fit_score_weight

    return priorities
