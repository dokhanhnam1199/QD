```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best-Fit with continuous scoring for bin fullness and
    penalties for small fragmentation gaps, emphasizing dynamic adaptation.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can physically fit
    can_fit_mask = bins_remain_cap >= item
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # If no bin can fit the item, return priorities indicating this.
    if not np.any(can_fit_mask):
        return priorities

    # Calculate the remaining capacity for bins after placing the item
    remaining_capacity_after_fit = fitting_bins_remain_cap - item

    # Define constants for heuristic weighting. These can be tuned.
    NOMINAL_BIN_CAPACITY = 1.0 # Assumed, consistent with bins_remain_cap normalization.

    # Weights for different components to balance their influence
    BEST_FIT_WEIGHT = 1.0                  # Prioritizes smaller remaining capacity
    CONSOLIDATION_WEIGHT = 15.0            # Rewards bins that are already full
    FRAGMENTATION_PENALTY_STRENGTH = 5.0   # How strong the penalty is for small gaps
    FRAGMENTATION_PENALTY_DECAY = 0.02     # Controls how quickly the penalty diminishes for larger gaps
    PERFECT_FIT_BONUS = 50.0               # Specific bonus for a perfect fit

    # --- Core Scoring Components ---
    # 1. Base Score (Best-Fit principle):
    #    A smaller remaining capacity (tighter fit) yields a higher score.
    scores = -remaining_capacity_after_fit * BEST_FIT_WEIGHT

    # 2. Consolidation Bonus (Continuous Bin Fullness):
    #    Reward placing items into bins that are already significantly full.
    #    This bonus scales linearly with the current fill level of the bin.
    current_fill_level = (NOMINAL_BIN_CAPACITY - fitting_bins_remain_cap) / NOMINAL_BIN_CAPACITY
    scores += current_fill_level * CONSOLIDATION_WEIGHT

    # 3. Fragmentation Penalty (Continuous Small Gap Penalty):
    #    Apply a penalty for placements that leave a very small, non-zero
    #    remaining capacity. The penalty is highest for gaps near zero and
    #    decays exponentially as the gap size increases.
    positive_gaps_mask = remaining_capacity_after_fit > 0
    penalty = FRAGMENTATION_PENALTY_STRENGTH * np.exp(-remaining_capacity_after_fit[positive_gaps_mask] / FRAGMENTATION_PENALTY_DECAY)
    scores[positive_gaps_mask] -= penalty

    # 4. Perfect Fit Bonus:
    #    If an item perfectly fills a bin, give a distinct, significant bonus.
    perfect_fit_mask = remaining_capacity_after_fit == 0
    scores[perfect_fit_mask] += PERFECT_FIT_BONUS

    # Assign the calculated scores to the respective bins.
    priorities[can_fit_mask] = scores

    return priorities
```
