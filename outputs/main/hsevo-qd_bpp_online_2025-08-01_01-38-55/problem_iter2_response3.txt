```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using an inverse relationship with residual space,
    strongly favoring perfect or near-perfect fits to complete bins faster.
    """
    # Initialize priorities to a very low value for all bins.
    # This ensures bins that cannot fit the item are never chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify which bins can accommodate the current item.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity (slack) after placing the item
    # for only those bins that can fit.
    slack = bins_remain_cap[can_fit_mask] - item

    # Implement a non-linear inverse relationship for scoring.
    # A small epsilon is added to the slack to prevent division by zero
    # in case of a perfect fit (slack = 0).
    # This makes the priority skyrocket as slack approaches zero,
    # aggressively rewarding perfect or very tight fits, which aligns
    # with strategies that aim to complete bins quickly.
    epsilon = 1e-9 # A small constant to avoid division by zero
    priorities[can_fit_mask] = 1.0 / (slack + epsilon)

    return priorities
```
