```python
import numpy as np

# Define a constant for the bin capacity.
# In many Bin Packing Problem formulations, item sizes are normalized
# such that the bin capacity is 1.0. If your problem uses different
# absolute values, this constant should reflect the actual bin capacity.
# If bins can have different capacities, this would need to be passed
# as an array corresponding to each bin's total capacity.
# For simplicity, we assume a uniform bin capacity here, typical for online BPP.
BIN_CAPACITY = 1.0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns a priority score for each bin, implementing an enhanced
    heuristic that combines a strong incentive for perfect fits,
    a preference for tighter fits, and a subtle encouragement for
    consolidating items into already partially filled bins.

    This heuristic is designed to be:
    - Multi-objective: Balancing tight fits with bin consolidation.
    - Granular: Applying different levels of incentives.
    - Contextual: Considering the current "fullness" of bins.
    - Non-linear: Assigning a disproportionately high reward for perfect fits.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to a very low number. Bins that cannot fit
    # the item will retain this low priority, ensuring they are not chosen
    # if any valid option exists.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    # If no bin can fit the item, return the initialized priorities (all -inf).
    # This typically implies a new bin must be opened by the higher-level logic.
    if not np.any(can_fit_mask):
        return priorities

    # Extract remaining capacities for only the fitting bins.
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # Calculate the space that would be left in the bin after placing the item.
    # A smaller 'remaining_capacity_after_fit' indicates a tighter fit.
    remaining_capacity_after_fit = fitting_bins_remain_cap - item

    # --- Heuristic Parameters (tuned for effect) ---
    # A very high bonus for exact fits (non-linear reward).
    PERFECT_FIT_BONUS = 1000.0

    # Multiplier for the penalty based on remaining space (Best-Fit component).
    # A higher multiplier means looser fits are more heavily penalized.
    LOOSE_FIT_PENALTY_MULTIPLIER = 1.0

    # Multiplier for incentivizing putting items into bins that are already
    # somewhat occupied (consolidation incentive). This promotes filling
    # existing bins before resorting to new ones or leaving many partially empty bins.
    FULLNESS_INCENTIVE_MULTIPLIER = 0.1

    # --- Score Calculation ---

    # 1. Base Score (Best-Fit like): Penalize bins based on how much space
    #    would be left after placing the item. A smaller remainder is better.
    #    By taking the negative, smaller remainder -> higher score.
    current_priorities = -remaining_capacity_after_fit * LOOSE_FIT_PENALTY_MULTIPLIER

    # 2. Perfect Fit Bonus: Apply a significant bonus for exact fits.
    #    This strongly incentivizes the most efficient placement.
    perfect_fit_mask = remaining_capacity_after_fit == 0
    current_priorities[perfect_fit_mask] += PERFECT_FIT_BONUS

    # 3. Fullness Incentive: Add a small bonus based on how much space is
    #    already occupied in the bin *before* placing the current item.
    #    This encourages "filling up" existing bins to full capacity,
    #    which can reduce the total number of bins used over time.
    #    (BIN_CAPACITY - fitting_bins_remain_cap) gives the amount of space
    #    already filled in each fitting bin.
    space_already_occupied = BIN_CAPACITY - fitting_bins_remain_cap
    current_priorities += space_already_occupied * FULLNESS_INCENTIVE_MULTIPLIER

    # Assign the calculated scores back to the main priorities array for the fitting bins.
    priorities[can_fit_mask] = current_priorities

    return priorities
```
