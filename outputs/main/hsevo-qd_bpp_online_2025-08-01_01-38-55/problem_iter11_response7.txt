```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                w_tight_fit: float = 1.0, w_consolidation: float = 0.1) -> np.ndarray:
    """
    Returns priority for placing an item, combining Best-Fit with consolidation,
    reflecting adaptive control and integrated design for online BPP.

    This heuristic dynamically balances minimizing immediate wasted space (tight fit)
    with prioritizing bins already nearing capacity (consolidation), allowing
    adaptive tuning for diverse problem instances.
    """
    # Initialize all priorities to a very low number to effectively deprioritize
    # bins that cannot accommodate the item, ensuring they are not chosen
    # if any valid bin exists.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # Extract remaining capacities only for bins where the item can fit.
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # Component 1: Tight Fit Score (Best-Fit-like approach)
    # This component favors bins where placing the item would leave the least amount
    # of leftover space. A smaller (bins_remain_cap - item) value results in a
    # higher score (closer to zero or positive if perfect fit).
    score_tight_fit = item - fitting_bins_remain_cap

    # Component 2: Bin Consolidation Score (Fullness Preference)
    # This component encourages "closing" bins by preferring those that are
    # already significantly utilized (i.e., have smaller remaining capacity).
    # A smaller current remaining capacity (more full) results in a higher score.
    score_consolidation = -fitting_bins_remain_cap

    # Combine the two components using tunable weights.
    # This integrated design allows for adaptive control of the heuristic's behavior,
    # balancing the singular focus on immediate space efficiency with the
    # contextual strategy of long-term bin consolidation.
    combined_score = (w_tight_fit * score_tight_fit) + (w_consolidation * score_consolidation)

    # Apply the calculated combined scores to the valid bins in the priorities array.
    priorities[can_fit_mask] = combined_score

    return priorities
```
