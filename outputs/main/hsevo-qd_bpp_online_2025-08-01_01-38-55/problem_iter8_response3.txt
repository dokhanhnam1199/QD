```python
import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                default_low_priority: float = -13.732882263687515,
                fit_score_weight: float = -4.7273623240749325,
                consolidation_bonus: float = 0.0) -> np.ndarray:
    """Prioritizes bins using a best-fit strategy with tunable
    weighting for remaining capacity and an optional consolidation bonus.
    """
    priorities = np.full_like(bins_remain_cap, default_low_priority, dtype=float)
    can_fit_mask = bins_remain_cap >= item

    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item
    
    # Calculate Best-Fit score: tighter fits (smaller remaining_capacity)
    # yield higher scores when fit_score_weight is negative.
    priorities[can_fit_mask] = remaining_capacity_after_fit * fit_score_weight
    
    # Add a tunable consolidation bonus to all bins that can fit the item.
    # This bias encourages filling existing bins and can be adjusted
    # to prioritize overall consolidation.
    priorities[can_fit_mask] += consolidation_bonus

    return priorities
```
