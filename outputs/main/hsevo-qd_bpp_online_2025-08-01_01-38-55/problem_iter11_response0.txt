```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                default_low_priority: float = float('-inf'),
                fit_score_weight: float = -4.7273623240749325,
                current_fullness_weight: float = -1.0) -> np.ndarray:
    """Returns priority for each bin, combining Best-Fit with a preference for already fuller bins.
    Uses tunable weights for adaptive control, promoting tight fits and bin consolidation for efficient packing.
    """
    # Initialize all priorities to a very low number for bins that cannot fit.
    # Using float('-inf') ensures they are never chosen if any valid bin exists.
    priorities = np.full_like(bins_remain_cap, default_low_priority, dtype=float)

    # Identify bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate scores only for bins that can fit the item.
    if np.any(can_fit_mask):
        # Component 1: Best-Fit score (prioritizing tightest fits)
        # Calculates the remaining capacity after placing the item.
        # A negative fit_score_weight makes smaller remaining_capacity_after_fit (tighter fits) result in higher scores.
        remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item
        fit_score = remaining_capacity_after_fit * fit_score_weight

        # Component 2: Current Bin Fullness score (prioritizing already fuller bins)
        # Uses the current remaining capacity. A smaller current_remaining_capacity means the bin is fuller.
        # A negative current_fullness_weight makes smaller current_remaining_capacity (fuller bins) result in higher scores.
        current_remaining_capacity = bins_remain_cap[can_fit_mask]
        fullness_score = current_remaining_capacity * current_fullness_weight

        # Combine the scores using a weighted sum for continuous integration.
        priorities[can_fit_mask] = fit_score + fullness_score

    return priorities
```
