```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best Fit with a fill proportion incentive for robust packing.

    Prioritizes bins that yield the smallest residual space (aggressive Best Fit)
    and additionally rewards bins where the item fills a larger proportion of
    the bin's remaining capacity, promoting highly efficient space utilization.
    """
    
    # Initialize priorities. Bins that cannot fit the item are assigned a
    # very low priority, effectively making them ineligible.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify all bins where the item can physically fit.
    can_fit_mask = bins_remain_cap >= item

    # Epsilon to prevent division by zero and provide a large score for perfect fits.
    # This small value also ensures that 0-residual results in a very high, but finite, score.
    epsilon = 1e-9 

    # Calculate the 'residual space' if the item were placed into the eligible bins.
    residual_space = bins_remain_cap[can_fit_mask] - item

    # --- Core Best Fit (Aggressive, Non-Linear) ---
    # The primary priority is inversely proportional to the residual space.
    # This strongly penalizes larger residuals and gives an extremely high preference
    # to perfect or near-perfect fits, aggressively pushing for bin completion.
    score_best_fit = 1.0 / (residual_space + epsilon)

    # --- Granular Fill Proportion Incentive ---
    # Additionally, calculate the proportion of the bin's *remaining capacity*
    # that the item would fill. This provides a secondary, granular incentive
    # to select bins where the item utilizes a larger percentage of the available space,
    # even among bins that don't offer a perfect fit.
    score_fill_proportion = item / (bins_remain_cap[can_fit_mask] + epsilon)

    # Combine the two scores. The 'score_best_fit' term will dominate when
    # residual_space is very small, ensuring perfect fits are paramount.
    # The 'score_fill_proportion' adds a nuanced layer of differentiation
    # for overall efficiency across all eligible bins.
    priorities[can_fit_mask] = score_best_fit + score_fill_proportion
    
    return priorities
```
