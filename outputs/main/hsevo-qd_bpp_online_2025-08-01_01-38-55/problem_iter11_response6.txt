```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    max_bin_capacity: float,
    unfit_bin_priority_value: float = -np.inf,
    fit_score_weight: float = -1.0,
    bin_fullness_weight: float = 0.5
) -> np.ndarray:
    """Combines Best-Fit with bin consolidation: prioritizes tight fits and fuller bins.

    Args:
        item: Size of item.
        bins_remain_cap: Remaining capacity of bins.
        max_bin_capacity: Max capacity of any bin.
        unfit_bin_priority_value: Priority for bins that cannot fit.
        fit_score_weight: Weight for Best-Fit (negative for tighter fits).
        bin_fullness_weight: Weight for consolidating into fuller bins (positive).

    Returns:
        Priority score for each bin.
    """
    # Initialize all priorities to a very low value for bins that cannot fit.
    priorities = np.full_like(bins_remain_cap, unfit_bin_priority_value, dtype=float)

    # Create a mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate Best-Fit score for fitting bins:
    # Smaller remaining space after placement (tighter fit) gets a higher score
    # when 'fit_score_weight' is negative.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item
    best_fit_scores = fit_score_weight * remaining_capacity_after_fit

    # Calculate Bin Fullness score for fitting bins:
    # Prioritizes bins that are already more utilized (i.e., have less remaining capacity).
    # 'used_capacity' is higher for fuller bins, leading to a higher score
    # when 'bin_fullness_weight' is positive.
    used_capacity = max_bin_capacity - bins_remain_cap[can_fit_mask]
    bin_fullness_scores = bin_fullness_weight * used_capacity

    # Combine the two scores for fitting bins. The tunable weights allow balancing
    # the preference for tight fits versus bin consolidation.
    priorities[can_fit_mask] = best_fit_scores + bin_fullness_scores

    return priorities
```
