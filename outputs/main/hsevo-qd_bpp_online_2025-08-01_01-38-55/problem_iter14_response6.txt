```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best-Fit with bin consolidation, prioritizing perfect fits
    and using a weighted linear sum for other cases.
    """
    # Initialize all priorities to a very low number (-inf) to effectively deprioritize
    # bins that cannot accommodate the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, return the deprioritized array immediately.
    if not np.any(can_fit_mask):
        return priorities

    # Extract relevant data for bins that can fit the item.
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
    remaining_after_fit = fitting_bins_remain_cap - item

    # --- Tunable Heuristic Parameters ---
    # PERFECT_FIT_SCORE: A very high, overriding score for a perfect fit.
    # This ensures that perfect utilization of a bin is always the top priority.
    PERFECT_FIT_SCORE = 10000.0

    # W_BEST_FIT: Weight for the Best-Fit component. A negative value ensures
    # that smaller 'remaining_after_fit' (tighter fits) yield higher scores.
    W_BEST_FIT = -5.0

    # W_FULLNESS: Weight for the bin consolidation component. A negative value
    # ensures that smaller 'fitting_bins_remain_cap' (bins that are already fuller)
    # yield higher scores, promoting the filling of existing bins.
    W_FULLNESS = -1.0
    # --- End Heuristic Parameters ---

    # Calculate base scores for all fitting bins using a linear weighted combination.
    # This combines the "Best-Fit" objective (minimize remaining_after_fit)
    # with the "Consolidation" objective (prefer fuller bins before placement).
    combined_scores = (W_BEST_FIT * remaining_after_fit) + \
                      (W_FULLNESS * fitting_bins_remain_cap)

    # Apply the special, dominant bonus for truly perfect fits.
    # np.isclose is used for robust floating-point comparison to zero.
    perfect_fit_mask = np.isclose(remaining_after_fit, 0.0, atol=1e-9)
    combined_scores[perfect_fit_mask] = PERFECT_FIT_SCORE

    # Assign the calculated scores to the positions corresponding to the fitting bins.
    priorities[can_fit_mask] = combined_scores

    return priorities
```
