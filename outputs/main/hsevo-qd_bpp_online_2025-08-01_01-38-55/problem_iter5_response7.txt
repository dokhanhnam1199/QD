```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on Best-Fit, selecting the bin that minimizes leftover space.
    This simple and robust approach avoids aggressive non-linear incentives, promoting global flexibility.
    """
    # Initialize all priorities to a very low number (-inf) for bins that cannot accommodate the item.
    # This ensures that only valid bins are considered for placement.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # For the bins that can fit the item, calculate the capacity that would remain
    # if the item were placed in them. This is the "leftover space."
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item

    # Implement the Best-Fit logic: the goal is to minimize the remaining capacity.
    # To translate "minimize remaining capacity" into "maximize priority score,"
    # we negate the remaining capacity. A smaller positive remaining capacity
    # (closer to zero) will result in a higher (less negative, closer to zero) score.
    # A perfect fit (0 remaining capacity) will yield the highest possible score of 0.
    scores_for_fitting_bins = -remaining_capacity_after_fit

    # Assign these calculated scores to the corresponding fitting bins in the priorities array.
    priorities[can_fit_mask] = scores_for_fitting_bins

    return priorities
```
