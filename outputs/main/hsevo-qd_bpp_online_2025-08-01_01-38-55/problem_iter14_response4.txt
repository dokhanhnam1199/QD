```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                w_tight_fit: float = 1.0, w_current_fullness: float = 0.1,
                w_close_bin_bonus: float = 0.5, close_bin_threshold: float = 0.01) -> np.ndarray:
    """Returns priority score for each bin by combining tight fit, current bin fullness,
    and a bonus for bins that would be nearly full after placement.
    """
    # Key idea: This heuristic prioritizes bins based on a weighted sum of Best-Fit
    # (minimizing post-placement space), current bin fullness, and a conditional
    # bonus for bins that become almost completely full after the item is placed.
    # This combines continuous preferences with a targeted consolidation incentive.

    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    can_fit_mask = bins_remain_cap >= item
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    if fitting_bins_remain_cap.size == 0:
        return priorities # No bins can fit the item

    # Component 1: Tight Fit (Best-Fit-like)
    # Goal: Minimize the space left after placing the item. This is equivalent to
    # maximizing the negative of the remaining space, or (item - current_remaining_capacity).
    score_tight_fit = item - fitting_bins_remain_cap

    # Component 2: Current Bin Fullness
    # Goal: Prefer bins that are already closer to being full (have smaller current remaining capacity).
    # Maximizing the negative of the current remaining capacity achieves this.
    score_current_fullness = -fitting_bins_remain_cap

    # Component 3: Close Bin Bonus
    # Goal: Provide an explicit, conditional bonus for bins that would be almost
    # completely filled after the item is placed, encouraging bin closure.
    remaining_after_placement = fitting_bins_remain_cap - item
    score_close_bin_bonus = np.where(remaining_after_placement <= close_bin_threshold, 1.0, 0.0)

    # Combine the scores using tunable weights.
    combined_score = (w_tight_fit * score_tight_fit) + \
                     (w_current_fullness * score_current_fullness) + \
                     (w_close_bin_bonus * score_close_bin_bonus)

    # Apply the calculated scores to the valid bins in the priorities array.
    priorities[can_fit_mask] = combined_score

    return priorities
```
