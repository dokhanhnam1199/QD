```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best-Fit-like heuristic with consideration for emergent fragmentation.

    This heuristic extends Best-Fit by assigning a significant bonus to perfect fits
    and applying a penalty to choices that result in small, potentially unusable,
    non-zero remaining capacities within a bin. This aims to foster "structural integrity"
    by discouraging the creation of "junk" bins, promoting either full utilization
    or leaving larger, more versatile remaining space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        (Assumes a normalized bin capacity of 1.0, typical for BPP literature,
         though this constant is not directly used in calculations, it grounds the bonus/penalty scales.)

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to a very low number, ensuring bins that cannot fit
    # are effectively deprioritized.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity after placing the item for fitting bins.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item

    # Define a small epsilon for robust floating point comparisons (e.g., for perfect fit).
    EPSILON = 1e-9

    # --- Step 1: Handle Perfect Fits ---
    # Identify bins where the item fits perfectly (or extremely close to it due to float precision).
    perfect_fit_mask = remaining_capacity_after_fit < EPSILON

    # Assign a very high priority to perfect fits. This makes them highly desirable,
    # ensuring they are chosen over any non-perfect fit. A value of 10.0 is chosen
    # as it's significantly higher than any possible negative score from non-perfect fits.
    priorities[can_fit_mask][perfect_fit_mask] = 10.0 

    # --- Step 2: Handle Non-Perfect Fits with Potential for Problematic Fragments ---
    # Get the indices of bins that can fit the item but do not result in a perfect fit.
    non_perfect_fit_indices = np.where(~perfect_fit_mask)[0] 

    if len(non_perfect_fit_indices) > 0:
        # Extract the actual remaining capacities for these non-perfect fits.
        r_prime_non_perfect = remaining_capacity_after_fit[non_perfect_fit_indices]

        # Define a threshold for what constitutes a "small, potentially unusable" fragment.
        # This threshold is adaptive, proportional to the size of the item being placed.
        # The idea is that a remaining space is "problematic" if it's very small relative
        # to the item that was just placed, making it less likely to be useful for future items.
        # For instance, if the remaining capacity is less than 40% of the item's size.
        SMALL_FRAGMENT_THRESHOLD = item * 0.4 
        
        # Identify which of these non-perfect fits fall into the "problematic fragment" range.
        # This means the remaining capacity is positive but smaller than the defined threshold.
        problematic_fragment_mask = (r_prime_non_perfect > EPSILON) & \
                                    (r_prime_non_perfect <= SMALL_FRAGMENT_THRESHOLD)

        # Initialize scores for non-perfect fits using the standard Best-Fit logic.
        # These scores are negative, where a smaller absolute value means a tighter fit.
        current_scores_for_non_perfect = -r_prime_non_perfect

        # Apply a penalty to problematic fragments.
        # The penalty factor effectively amplifies the "negativity" of these scores,
        # making them less desirable than larger, more useful fragments.
        # A factor of 1.0 means the problematic fragment's negative score is doubled.
        PENALTY_MULTIPLIER = 1.0 

        current_scores_for_non_perfect[problematic_fragment_mask] *= (1.0 + PENALTY_MULTIPLIER)

        # Assign these calculated scores back to the main priorities array for the relevant bins.
        priorities[can_fit_mask][non_perfect_fit_indices] = current_scores_for_non_perfect

    return priorities
```
