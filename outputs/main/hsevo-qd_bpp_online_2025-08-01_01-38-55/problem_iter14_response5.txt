```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes exact fits, then best fits, with a consolidation bonus for partially-filled bins.
    Combines strong Best-Fit principles with efficient bin utilization to minimize bin count.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        return priorities

    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
    remaining_after_fit = fitting_bins_remain_cap - item

    # --- Base Score: Best-Fit (negative of remaining capacity) ---
    # Tighter fits (smaller remaining) yield higher (less negative) scores.
    base_scores = -remaining_after_fit

    # --- Perfect Fit Bonus ---
    # Assign a very high score to perfect fits to ensure they are always chosen first.
    PERFECT_FIT_SCORE = 1000.0
    perfect_fit_mask = np.isclose(remaining_after_fit, 0.0, atol=1e-9)
    base_scores[perfect_fit_mask] = PERFECT_FIT_SCORE

    # --- Consolidation Bias (from priority_v0) ---
    # Apply a small bonus to bins that are already partially filled,
    # encouraging reuse over opening effectively "new" bins, breaking ties.
    consolidation_bonus = 0.01

    # Identify maximum capacity among bins that can fit the item.
    # Bins at this capacity are considered "newly opened" or effectively empty.
    max_current_capacity = np.max(fitting_bins_remain_cap)
    
    # Identify fitting bins that are NOT "newly opened" (i.e., they are already partially filled).
    is_partially_filled_fitting_bins = fitting_bins_remain_cap < max_current_capacity

    # Apply the consolidation bonus to partially filled bins.
    # This nudges selection towards existing bins when Best-Fit scores are close,
    # but does not override the explicit PERFECT_FIT_SCORE.
    base_scores[is_partially_filled_fitting_bins] += consolidation_bonus

    # Assign the calculated scores to the fitting bins in the main priority array.
    priorities[can_fit_mask] = base_scores

    return priorities
```
