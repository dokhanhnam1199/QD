```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                fit_score_weight: float = -1.0,
                new_bin_penalty_value: float = 0.0) -> np.ndarray:
    """Returns priority for adding an item to each bin, combining tunable Best-Fit
    with an optional penalty for opening new (empty) bins.

    Prioritizes tighter fits. A negative `fit_score_weight` promotes Best-Fit.
    Optionally, `new_bin_penalty_value` penalizes selecting completely empty bins.
    """
    # Initialize all priorities to a very low number for bins that cannot fit.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity if item were placed in suitable bins.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item

    # Base Best-Fit score: a negative `fit_score_weight` means smaller remaining capacity
    # (tighter fit) results in a higher score.
    base_scores = fit_score_weight * remaining_capacity_after_fit

    # Apply optional consolidation bias: penalize using an "empty" bin.
    # Assumes an "empty" bin is one with the maximum current remaining capacity.
    if new_bin_penalty_value > 0 and bins_remain_cap.size > 0:
        inferred_bin_capacity = np.max(bins_remain_cap)
        # Identify bins that are currently empty (at full capacity) and can fit the item.
        is_empty_bin_mask = np.isclose(bins_remain_cap[can_fit_mask], inferred_bin_capacity)
        # Apply penalty to these identified empty bins.
        base_scores[is_empty_bin_mask] -= new_bin_penalty_value

    priorities[can_fit_mask] = base_scores

    return priorities
```
