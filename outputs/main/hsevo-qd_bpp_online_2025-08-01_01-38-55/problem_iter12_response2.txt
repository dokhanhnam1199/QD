```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a hybrid heuristic that prioritizes perfect fits,
    then encourages leaving large, versatile spaces, and heavily
    penalizes leaving very small, potentially useless spaces.

    This heuristic is designed to be more "contextual" and "adaptive"
    than a simple Best-Fit. It aims to avoid local optima (e.g.,
    a tight fit that leaves a fragmented, unusable space) by shaping
    the remaining capacities in a more strategic way.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to a very low number. Bins that cannot
    # accommodate the item are effectively deprioritized.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, return the deprioritized array.
    if not np.any(can_fit_mask):
        return priorities

    # Calculate the remaining capacity after placing the item for fitting bins.
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
    remaining_after_fit = fitting_bins_remain_cap - item

    # --- Heuristic Parameters (Tunable) ---
    # Assuming standard bin capacity is 1.0. This is a common assumption
    # for normalized item sizes in BPP unless specified otherwise.
    BIN_CAPACITY = 1.0

    # Score for a perfect fit (remaining_capacity_after_fit == 0).
    # This should be the highest possible score, ensuring it's always chosen.
    PERFECT_FIT_SCORE = 1000.0

    # Threshold for what constitutes a "small, potentially useless" remainder.
    # If the remaining space is less than this fraction of the bin capacity,
    # it's considered poor and heavily penalized.
    # This avoids creating many bins with tiny, unusable gaps.
    FRAGMENT_THRESHOLD = 0.05 * BIN_CAPACITY # e.g., 5% of bin capacity

    # Multiplier for the penalty applied to small, non-zero remainders.
    # Higher values lead to stronger discouragement of such fits.
    SMALL_REMAINDER_PENALTY_MULTIPLIER = 50.0

    # Multiplier for the score applied to larger, versatile remainders.
    # This encourages leaving substantial space in a bin for future items,
    # akin to a "Worst-Fit" approach for non-tight fits.
    LARGE_REMAINDER_MULTIPLIER = 2.0
    # --- End Heuristic Parameters ---

    # Apply scores based on different conditions for `remaining_after_fit`:

    # 1. Perfect Fit: `remaining_after_fit` is approximately zero.
    perfect_fit_mask = np.isclose(remaining_after_fit, 0.0, atol=1e-9)
    priorities[can_fit_mask][perfect_fit_mask] = PERFECT_FIT_SCORE

    # 2. Small, Potentially Useless Remainder: `0 < remaining_after_fit < FRAGMENT_THRESHOLD`.
    # These are fits that are not perfect, but leave very little space,
    # which might be too small for most subsequent items, leading to fragmentation.
    small_remainder_mask = (remaining_after_fit > 1e-9) & (remaining_after_fit < FRAGMENT_THRESHOLD)
    
    # The penalty increases as `remaining_after_fit` gets closer to zero (from the positive side).
    # This creates a "valley" in the scoring function just after zero.
    penalty_scores = - (FRAGMENT_THRESHOLD - remaining_after_fit[small_remainder_mask]) * SMALL_REMAINDER_PENALTY_MULTIPLIER
    priorities[can_fit_mask][small_remainder_mask] = penalty_scores

    # 3. Large, Versatile Remainder: `remaining_after_fit >= FRAGMENT_THRESHOLD`.
    # For these cases, we prefer leaving larger remaining spaces, as they are
    # more likely to accommodate future, larger items, maintaining bin versatility.
    # This is a Worst-Fit-like component for non-tight fits.
    large_remainder_mask = remaining_after_fit >= FRAGMENT_THRESHOLD
    
    # Linear scoring: higher `remaining_after_fit` leads to a higher score.
    # These scores are designed to be positive but lower than the `PERFECT_FIT_SCORE`.
    large_remainder_scores = remaining_after_fit[large_remainder_mask] * LARGE_REMAINDER_MULTIPLIER
    priorities[can_fit_mask][large_remainder_mask] = large_remainder_scores

    return priorities
```
