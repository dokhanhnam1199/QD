```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority, combining Best-Fit with a continuous bias towards fuller bins.
    Prioritizes tight fits and then favors bins that are already more utilized.
    """
    # Assuming normalized item sizes and bin capacities (e.g., item sizes are fractions of 1.0).
    # If not normalized, BIN_CAPACITY should be provided as an input.
    BIN_CAPACITY = 1.0 

    # Initialize priorities to negative infinity, ensuring bins that cannot fit
    # the item are never chosen if any valid bin exists.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate scores only for bins that can accommodate the item.
    if np.any(can_fit_mask):
        fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

        # Component 1: Best-Fit score (primary heuristic).
        # This prioritizes bins that leave the smallest remaining capacity after the item is placed.
        # A perfect fit results in a score of 0, while looser fits yield more negative scores.
        remaining_capacity_after_fit = fitting_bins_remain_cap - item
        best_fit_scores = -remaining_capacity_after_fit

        # Component 2: Bin Fullness score (secondary consolidation bias).
        # This gives a bonus to bins that are already more full (i.e., have less remaining capacity
        # before the item is placed). Normalized to a 0-1 range for consistent scaling.
        normalized_fullness_scores = (BIN_CAPACITY - fitting_bins_remain_cap) / BIN_CAPACITY

        # Combine the scores. Best-Fit is the dominant factor, and the fullness score acts
        # as a secondary preference or tie-breaker. The weight (0.1) is a tunable parameter
        # to control the strength of the consolidation bias.
        priorities[can_fit_mask] = best_fit_scores + 0.1 * normalized_fullness_scores

    return priorities
```
