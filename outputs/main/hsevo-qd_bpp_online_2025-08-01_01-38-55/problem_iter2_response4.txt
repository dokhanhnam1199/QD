```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using inverse of residual space, strongly favoring near-perfect fits.

    This heuristic aggressively rewards bins that are almost full (or perfectly full)
    after placing the item, by using an inverse relationship to the remaining space.
    It combines Best Fit with a non-linear scoring to achieve tighter packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining space in each bin if the item were placed there.
    potential_remain_after_placement = bins_remain_cap - item

    # Initialize priority scores to negative infinity.
    # This ensures bins that cannot fit the item are never selected.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify which bins can actually fit the item (remaining capacity >= 0).
    can_fit_mask = potential_remain_after_placement >= 0

    # For bins that can fit the item:
    # Use an inverse relationship for priority: 1.0 / (residual_space + epsilon).
    # A smaller residual_space (closer to a perfect fit) results in a disproportionately larger priority.
    # Add a small epsilon to prevent division by zero for perfect fits (when residual_space is exactly 0)
    # and to give them a very high, but finite, priority score.
    epsilon = 1e-9

    # Get the residual capacities for only the bins that can fit the item.
    fitting_bins_residuals = potential_remain_after_placement[can_fit_mask]

    # Calculate priorities for these fitting bins using the inverse weighting.
    # Perfect fits (residual = 0) will yield a very high score (1.0 / epsilon).
    priorities[can_fit_mask] = 1.0 / (fitting_bins_residuals + epsilon)

    return priorities
```
