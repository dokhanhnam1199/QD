```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best-Fit and consolidation, adds a strong perfect-fit bonus,
    and penalizes creating small, potentially unusable fragments.
    """
    # Initialize all priorities to a very low number, effectively deprioritizing
    # bins that cannot fit the item or are not considered.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, return the deprioritized array.
    if not np.any(can_fit_mask):
        return priorities

    # Extract remaining capacities for only the fitting bins.
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # --- Tunable Heuristic Parameters ---
    # Weight for the Best-Fit component. A negative value ensures smaller
    # `remaining_after_fit` leads to a higher (less negative) priority score.
    WEIGHT_BEST_FIT = -1.0 

    # Weight for the consolidation component. This encourages filling bins that are
    # already partially full. It should be positive.
    WEIGHT_CONSOLIDATION = 0.01 
    
    # Assumed maximum capacity of a bin. Common for normalized BPP instances.
    BIN_CAPACITY = 1.0 

    # A very large bonus to strongly prioritize bins where the item fits perfectly.
    PERFECT_FIT_BONUS = 100.0 

    # Threshold for what constitutes a "small, unusable" fragment. If the remaining
    # capacity after placing the item is between (0, MIN_USABLE_FRAGMENT_SIZE),
    # it's considered an undesirable fragment.
    MIN_USABLE_FRAGMENT_SIZE = 0.05 

    # A negative penalty applied if placing the item creates a small, unusable fragment.
    FRAGMENT_PENALTY = -10.0 
    # --- End Tunable Heuristic Parameters ---

    # 1. Best-Fit Component:
    # Calculate the remaining capacity if the item is placed.
    remaining_after_fit = fitting_bins_remain_cap - item
    # A smaller `remaining_after_fit` (tighter fit) results in a score closer to 0 (less negative),
    # which is a higher priority.
    best_fit_scores = remaining_after_fit * WEIGHT_BEST_FIT

    # 2. Consolidation Component (Bin Fullness):
    # Calculate how full each bin currently is. A higher value means the bin is more full.
    current_fullness = BIN_CAPACITY - fitting_bins_remain_cap
    # Add a bonus proportional to the current fullness. This biases towards
    # filling existing, partially used bins.
    consolidation_scores = current_fullness * WEIGHT_CONSOLIDATION

    # Combine the two components to get the initial priority score for fitting bins.
    combined_scores = best_fit_scores + consolidation_scores
    
    # 3. Perfect Fit Bonus:
    # Identify bins where the item perfectly fits (remaining capacity is effectively zero).
    perfect_fit_mask_local = np.isclose(remaining_after_fit, 0.0)
    if np.any(perfect_fit_mask_local):
        combined_scores[perfect_fit_mask_local] += PERFECT_FIT_BONUS

    # 4. Small Fragment Penalty:
    # Apply a penalty if the remaining space is small but not zero (i.e., creates an "unusable" fragment).
    # Uses a small epsilon (1e-9) to distinguish from exact zero.
    small_fragment_mask_local = (remaining_after_fit > 1e-9) & (remaining_after_fit < MIN_USABLE_FRAGMENT_SIZE)
    if np.any(small_fragment_mask_local):
        combined_scores[small_fragment_mask_local] += FRAGMENT_PENALTY # Add negative penalty

    # Assign the calculated scores to the fitting bins in the main priority array.
    priorities[can_fit_mask] = combined_scores

    return priorities
```
