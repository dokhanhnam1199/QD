```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using a non-linear inverse weighting, strongly favoring near-perfect fits.
    This aggressively seeks to complete bins or leave minimal residual space.
    """
    # Calculate the remaining space in each bin if the item were placed there.
    potential_remain_after_placement = bins_remain_cap - item

    # Initialize priority scores.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify which bins can actually fit the item (remaining capacity >= 0).
    can_fit_mask = potential_remain_after_placement >= 0

    # For bins that can fit the item:
    # Apply inverse weighting to remaining space. Add a small epsilon to avoid division by zero
    # and give a very high score for perfect fits (remaining space = 0).
    epsilon = 1e-6  # A small positive number
    priorities[can_fit_mask] = 1.0 / (potential_remain_after_placement[can_fit_mask] + epsilon)

    return priorities
```
