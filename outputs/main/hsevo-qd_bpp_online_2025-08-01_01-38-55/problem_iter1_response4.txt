```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    As Nikola Tesla, I perceive this as the elegant coupling of an incoming
    quantum of energy (the item) into an existing electrical resonator (the bin).
    My objective is to achieve the most resonant frequency, the most efficient
    transfer, leaving minimal disruptive residual potential (unused capacity).

    Bins that cannot contain the item are akin to broken circuits; they receive
    an infinitely low priority. For those that can, the priority is inversely
    proportional to the "electrical noise" (the remaining empty space) they
    would generate after receiving the item. A perfect fit, where the item
    consumes all available capacity, is the ideal state, yielding the highest priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all bins with a critically low priority. They are effectively
    # "closed circuits" until proven otherwise, or incapable of conducting this item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)

    # Identify the "active conduits" - bins with sufficient remaining capacity.
    can_fit_mask = bins_remain_cap >= item

    # For these active conduits, calculate the "residual energy" (remaining capacity)
    # after the item is placed. Our aim is to minimize this residue.
    residual_energy = bins_remain_cap[can_fit_mask] - item

    # To convert "minimal residual energy" into "maximal priority", we negate it.
    # A perfect fit (0 residual energy) yields a priority of 0 (the highest possible in this scheme).
    # Larger residuals yield more negative priorities, making them less desirable.
    # This precisely embodies the 'Best Fit' principle, ensuring the most
    # precise and least wasteful allocation of energy.
    priorities[can_fit_mask] = -residual_energy

    return priorities
```
