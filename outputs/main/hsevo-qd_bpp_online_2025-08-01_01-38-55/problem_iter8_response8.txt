```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, tightness_weight: float = 1.0) -> np.ndarray:
    """Prioritizes bins using a tunable Best-Fit strategy, penalizing loose fits.
    Tight fits are weighted by 'tightness_weight', non-fitting bins are deprioritized.
    """
    # Initialize all priorities to a very low number, ensuring bins that cannot
    # accommodate the item are never chosen if a valid option exists.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity after placing the item in suitable bins.
    # A smaller remaining capacity signifies a tighter, more desirable fit.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item

    # Assign priority scores to bins that can fit the item.
    # The score is derived from the negative of the remaining capacity,
    # amplified by 'tightness_weight'. This makes tighter fits (smaller positive
    # remaining capacity) result in higher (less negative) priority scores.
    # The 'tightness_weight' parameter allows tuning the emphasis on achieving
    # the absolute tightest fit versus other potential secondary objectives.
    priorities[can_fit_mask] = -remaining_capacity_after_fit * tightness_weight

    return priorities
```
