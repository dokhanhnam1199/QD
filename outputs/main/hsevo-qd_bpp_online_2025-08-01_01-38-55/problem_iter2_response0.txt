```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines aggressive Best Fit with a density incentive.

    Prioritizes bins by inverse of residual space, strongly favoring perfect fits.
    Additionally, rewards bins where the item fills a larger proportion of remaining capacity,
    promoting efficient space utilization.
    """
    
    # Initialize priorities. Bins that cannot fit the item are assigned a
    # very low priority, effectively making them ineligible.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify all bins where the item can physically fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the 'residual space' if the item were placed into the bins that can accommodate it.
    residual_space = bins_remain_cap[can_fit_mask] - item

    # A small epsilon to prevent division by zero for perfect fits and ensure
    # perfect fits receive an extremely high, but finite, score.
    epsilon = 1e-9 

    # Primary scoring component: Inverse proportionality to residual space.
    # This aggressively penalizes larger residuals and gives a paramount preference to perfect fits,
    # aligning with the "Newtonian" principle of minimal wasted space.
    inverse_residual_score = 1.0 / (residual_space + epsilon)

    # Secondary scoring component: Proportion of the bin's current remaining capacity filled by the item.
    # This term provides a "density" incentive, rewarding bins where the item utilizes a larger
    # fraction of the available space, promoting more compact bin configurations.
    density_score = item / bins_remain_cap[can_fit_mask]

    # Combine the scores. The inverse_residual_score term will typically dominate due to its
    # non-linear nature, ensuring Best Fit remains the primary driver. The density_score
    # provides a refined, granular incentive, especially differentiating between bins
    # with similar small residuals, pushing towards a higher overall density of packed bins.
    priorities[can_fit_mask] = inverse_residual_score + density_score
    
    return priorities
```
