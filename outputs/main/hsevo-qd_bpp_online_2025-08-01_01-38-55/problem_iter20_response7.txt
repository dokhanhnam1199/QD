```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                perfect_fit_bonus: float = 1000.0,
                linear_fit_weight: float = -4.5,  # Negative: smaller remaining_after_fit (tighter) is better.
                bin_fullness_weight: float = -1.2, # Negative: smaller current_remaining_capacity (fuller bin) is better.
                exp_frag_penalty_weight: float = -25.0, # Negative: penalizes small non-zero remainders.
                exp_frag_decay_rate: float = 60.0, # Positive: higher value makes penalty decay faster with remainder size.
                epsilon_perfect_fit: float = 1e-9, # Tolerance for identifying a perfect fit (remaining_cap = 0).
                default_low_priority: float = float('-inf')) -> np.ndarray:
    """
    Combines Best-Fit, Bin Consolidation, a clear Perfect-Fit bonus, and a smooth
    exponential penalty for small non-zero remaining capacities, promoting robust
    packing and fragmentation avoidance through continuous and state-aware scoring.
    """
    # Initialize all priorities to a very low number for bins that cannot fit.
    priorities = np.full_like(bins_remain_cap, default_low_priority, dtype=float)

    # Identify bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, return the deprioritized array.
    if not np.any(can_fit_mask):
        return priorities

    # Calculate remaining capacity after placing the item for fitting bins.
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
    remaining_after_fit = fitting_bins_remain_cap - item

    # Identify perfect fits (remaining capacity is effectively zero).
    perfect_fit_mask = np.isclose(remaining_after_fit, 0.0, atol=epsilon_perfect_fit)

    # Assign a very high priority score for perfect fits to ensure they are chosen.
    priorities[can_fit_mask][perfect_fit_mask] = perfect_fit_bonus

    # Process non-perfect fits.
    non_perfect_fit_mask = ~perfect_fit_mask
    
    if np.any(non_perfect_fit_mask):
        # Extract relevant capacities for non-perfect fitting bins.
        non_perfect_remaining_after_fit = remaining_after_fit[non_perfect_fit_mask]
        non_perfect_current_cap = fitting_bins_remain_cap[non_perfect_fit_mask]

        # Component 1: Linear Best-Fit score
        # A negative weight makes smaller remaining_capacity_after_fit (tighter fits) result in higher scores.
        linear_fit_score = non_perfect_remaining_after_fit * linear_fit_weight

        # Component 2: Current Bin Fullness score
        # A negative weight makes smaller current_remaining_capacity (fuller bins) result in higher scores.
        fullness_score = non_perfect_current_cap * bin_fullness_weight

        # Component 3: Smooth Exponential Fragmentation Penalty
        # This penalizes small, non-zero remaining capacities that might lead to "useless" fragments.
        # The penalty is strongest for remainders just above zero and decays exponentially.
        # It's applied only to non-perfect fits, as perfect fits are handled separately.
        exponential_penalty = np.exp(-exp_frag_decay_rate * non_perfect_remaining_after_fit) * exp_frag_penalty_weight
        
        # Combine the scores for non-perfect fits using a weighted sum.
        priorities[can_fit_mask][non_perfect_fit_mask] = linear_fit_score + fullness_score + exponential_penalty

    return priorities
```
