```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                unfit_bin_priority_value: float = -np.inf,
                fit_score_weight: float = -1.0,
                current_fullness_weight: float = -0.5) -> np.ndarray:
    """Combines Best-Fit with a bin consolidation bias.
    Prioritizes bins that offer a tight fit while also rewarding bins
    that are already fuller, to minimize bin fragmentation.
    """
    # Initialize all priorities to a very low value for bins that cannot fit.
    priorities = np.full_like(bins_remain_cap, unfit_bin_priority_value, dtype=float)

    # Identify bins where the item can physically fit.
    can_fit_mask = bins_remain_cap >= item

    # If there are bins that can fit the item, calculate their priority scores.
    if np.any(can_fit_mask):
        # Component 1: Best-Fit (minimizing remaining space after item placement).
        # A negative `fit_score_weight` ensures that smaller remaining space
        # (tighter fit) results in a higher priority score (less negative).
        remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item
        score_tight_fit = fit_score_weight * remaining_capacity_after_fit

        # Component 2: Bin Consolidation/Fullness Bias.
        # A negative `current_fullness_weight` ensures that bins with less
        # remaining capacity (i.e., already fuller bins) receive a higher
        # priority score (less negative contribution), encouraging consolidation.
        score_fullness = current_fullness_weight * bins_remain_cap[can_fit_mask]

        # Combine the two components for fitting bins.
        priorities[can_fit_mask] = score_tight_fit + score_fullness

    return priorities
```
