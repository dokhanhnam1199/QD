```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns a priority score for each bin, implementing a nuanced heuristic
    that balances Best-Fit with an awareness of emergent fragmentation.

    This heuristic aims to foster beneficial emergent behaviors and maintain
    structural integrity of bin capacities by discouraging the creation of
    "middle-ground" fragmented capacities. These are capacities that are
    often too small to accommodate large future items but too large to be
    efficiently filled by very small items. It subtly prioritizes outcomes
    where a bin either becomes very full (tight fit, potentially closing a bin)
    or retains a substantial amount of space (keeping it "open" for large items).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
                         Assumes capacities are non-negative.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        # If no bin can fit the item, all priorities remain -inf.
        # The calling Bin Packing algorithm should interpret this as a need to open a new bin.
        return priorities

    # Calculate the remaining capacity after placing the item in each fitting bin.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item

    # --- Incorporating Global Context and Anti-Fragmentation ---
    # We want to penalize scenarios where the remaining capacity falls into a "mid-range"
    # relative to the largest possible remaining capacity *for this specific item*
    # given the current set of available bins.
    # This helps avoid creating many bins with awkward, fragmented capacities.

    # Determine the maximum possible remaining capacity if this item were placed
    # into the largest currently available fitting bin. This acts as a dynamic
    # upper bound for the 'remaining_capacity_after_fit' for the current item.
    max_possible_rem_after_fit = np.max(remaining_capacity_after_fit)

    # Base score: Best-Fit component (prioritizes smaller remaining capacities).
    # A smaller `remaining_capacity_after_fit` results in a less negative (higher) score.
    # A perfect fit (0 remaining) gets a score of 0.
    base_bf_score = -remaining_capacity_after_fit

    # Anti-fragmentation penalty:
    # This term penalizes remaining capacities that are in the "middle" of the
    # range [0, max_possible_rem_after_fit]. A quadratic function like x * (Max - x)
    # is 0 at the boundaries (0 and Max) and maximal at the midpoint (Max/2).
    # By subtracting this term, we effectively depress scores for middle-range outcomes.
    # The `penalty_coefficient` balances the strength of this anti-fragmentation
    # objective against the primary Best-Fit objective. A value of 0.5 means the
    # maximum penalty is roughly half the magnitude of the smallest base_bf_score
    # (assuming max_possible_rem_after_fit is significant).
    penalty_coefficient = 0.5  # Tunable: Adjusts the strength of the anti-fragmentation push.

    mid_range_penalty = penalty_coefficient * (remaining_capacity_after_fit *
                                               (max_possible_rem_after_fit - remaining_capacity_after_fit))

    # The final priority combines the Best-Fit preference with the anti-fragmentation penalty.
    # Higher scores are better.
    priorities[can_fit_mask] = base_bf_score - mid_range_penalty

    return priorities
```
