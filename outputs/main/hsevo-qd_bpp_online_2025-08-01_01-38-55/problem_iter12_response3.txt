```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, BIN_MAX_CAPACITY: float) -> np.ndarray:
    """
    Returns priority for online Bin Packing, aiming to reduce the total number of bins
    by balancing the immediate goal of finding a tight fit with the long-term goal
    of avoiding unusable fragmentation.

    This heuristic mutates the Best-Fit approach (`priority_v1`) by introducing:
    1. A strong bonus for perfect fits, making them the absolute top priority.
    2. A significant penalty for bins that, after placing the item, would result in
       a remaining capacity within a predefined 'fragmentation zone'. This zone represents
       a small, potentially unusable amount of space that could hinder future placements.
       Bins outside this zone (i.e., those leaving larger, more useful capacities)
       are preferred over those within the fragmentation zone, even if they result in
       a slightly less 'tight' fit according to pure Best-Fit.

    This strategy aims to prevent scenarios where many bins are left with tiny,
    awkward capacities that cannot accommodate subsequent items, thereby forcing
    the opening of new bins unnecessarily. It implements a context-aware decision process
    by leveraging the `BIN_MAX_CAPACITY` and focuses on the global objective of minimizing bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        BIN_MAX_CAPACITY: The maximum capacity of any bin. Assumed to be uniform for all bins.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to a very low number. This ensures that
    # bins which cannot accommodate the item are effectively deprioritized.
    # Using -np.inf makes them guaranteed to not be chosen if any valid bin exists.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # If no bin can fit the item, all priorities remain -np.inf, signaling that a new bin is needed.
    if not np.any(can_fit_mask):
        return priorities

    # Calculate remaining capacity after placing the item for bins that can fit it.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item

    # --- Heuristic Parameters (Dynamic Control Points) ---
    # Defines the upper bound of the 'fragmentation zone'. Remaining capacities
    # strictly greater than 0 but less than or equal to this threshold are penalized.
    # This value can be tuned based on typical item size distributions or desired bin utilization.
    fragment_threshold = 0.15 * BIN_MAX_CAPACITY  # E.g., 15% of bin capacity

    # Multiplier for the fragmentation penalty. A higher value means a stronger
    # discouragement for creating fragmented bins.
    fragment_penalty_multiplier = 10.0

    # --- Base Priority Calculation (Best-Fit-like) ---
    # For bins that can fit the item, an initial score is assigned based on
    # how little space would be left (tighter fits are better, less negative score).
    # A perfect fit (0 remaining) gets a score of 0.
    priorities[can_fit_mask] = -remaining_capacity_after_fit

    # --- Strategic Adjustments ---

    # 1. Perfect Fit Bonus:
    # Bins that allow for a perfect fit (remaining capacity becomes exactly 0)
    # are given the absolute highest priority. This ensures such opportunities are always taken.
    perfect_fit_mask = (remaining_capacity_after_fit == 0)
    priorities[can_fit_mask][perfect_fit_mask] = np.inf # Use np.inf for guaranteed selection

    # 2. Fragmentation Penalty:
    # Identify bins that would result in a small, potentially unusable remainder.
    # These are bins where 0 < remaining_capacity_after_fit <= fragment_threshold.
    fragment_zone_mask = (remaining_capacity_after_fit > 0) & (remaining_capacity_after_fit <= fragment_threshold)

    # Apply a penalty to these bins. The penalty is proportional to how "deep"
    # into the fragmentation zone the remainder falls (smaller remainders are penalized more).
    # This makes bins leading to fragmented space less attractive than bins leaving
    # larger, more useful space, or even less attractive than opening a new bin
    # if all other fitting options are highly fragmented.
    penalty_amount = (fragment_threshold - remaining_capacity_after_fit[fragment_zone_mask]) * fragment_penalty_multiplier
    priorities[can_fit_mask][fragment_zone_mask] -= penalty_amount

    return priorities
```
