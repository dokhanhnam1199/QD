```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority for bin selection, implementing a robust linear Best-Fit heuristic.
    It prioritizes bins that leave the least remaining space after item placement,
    promoting efficient bin consolidation. Unsuitable bins receive minimal priority.
    """
    # Initialize priorities to a very low value (-np.inf). This ensures bins
    # that cannot fit the item are definitively deprioritized, aligning with
    # the need for strategic intelligence over arbitrary choices (like v1).
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit, calculate the remaining capacity after placing the item.
    # The Best-Fit principle dictates that tighter fits (smaller remaining capacity)
    # are preferred. By negating this value, a smaller positive remainder results
    # in a larger (less negative) priority score. This simple linear approach
    # proved robust and effective, avoiding the pitfalls of complex non-linear
    # scoring or perfect-fit bonuses that can lead to local optima.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item
    priorities[can_fit_mask] = -remaining_capacity_after_fit

    return priorities
```
