```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best-Fit-like heuristic with a bias towards utilizing
    bins that are already significantly filled.

    This function builds on the Best-Fit principle by primarily favoring bins
    that result in the least remaining space after the item is placed.
    Additionally, it introduces a subtle preference for bins that are
    already well-utilized (i.e., have less remaining capacity before placement).
    This encourages "finishing off" bins, promoting a more compact packing
    by consolidating items into fewer bins.

    Args:
        item: Size of item to be added to the bin. Assumed to be normalized (e.g., between 0 and 1).
        bins_remain_cap: Array of remaining capacities for each bin. Assumed to be normalized (e.g., between 0 and 1).

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to a very low number. This ensures that
    # bins which cannot accommodate the item are effectively deprioritized.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, all priorities remain -np.inf.
    # This implicitly signals to the calling logic that a new bin should be opened.
    if not np.any(can_fit_mask):
        return priorities

    # Assume a standard bin capacity for normalized items (e.g., 1.0).
    # This value represents the total capacity of a full, empty bin.
    # This assumption is common in many BPP problem formulations.
    BIN_CAPACITY = 1.0

    # 1. Best-Fit Component:
    # Prioritizes bins where the item creates the tightest fit (i.e., leaves the least remaining space).
    # A smaller remaining capacity results in a higher (less negative) score.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item
    best_fit_component = -remaining_capacity_after_fit

    # 2. Utilization Bias Component:
    # Prioritizes bins that are already more filled (less remaining capacity) BEFORE the current item is placed.
    # This encourages "finishing off" bins that are already well-utilized,
    # rather than starting new bins or using relatively empty ones if a tighter fit exists elsewhere.
    # (BIN_CAPACITY - bins_remain_cap) gives the amount of space already filled in the bin.
    current_fill_component = BIN_CAPACITY - bins_remain_cap[can_fit_mask]

    # Combine the components:
    # 'alpha' is a weighting factor (tunable parameter).
    # A small positive 'alpha' provides a gentle nudge towards more utilized bins,
    # without overriding the primary Best-Fit goal.
    # If alpha is 0, it behaves identically to priority_v1.
    # A larger alpha would make the function more heavily favor already-full bins.
    alpha = 0.1 # This parameter can be adjusted based on desired packing behavior.

    priorities[can_fit_mask] = best_fit_component + alpha * current_fill_component

    return priorities
```
