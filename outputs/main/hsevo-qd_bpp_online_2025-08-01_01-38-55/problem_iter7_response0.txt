import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, unfit_bin_priority_value: float = -7523322707.098899, fit_score_weight: float = -5.045411058574856) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best-Fit-like heuristic.
    Bins that fit the item are prioritized based on how little space
    would be left after placing the item (i.e., tighter fits get higher scores).
    Bins that cannot fit the item receive a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        unfit_bin_priority_value: The priority score assigned to bins that
                                   cannot accommodate the item. Default is -np.inf,
                                   ensuring they are never chosen if any valid bin exists.
        fit_score_weight: A weighting factor applied to the remaining capacity
                          of fitting bins. A negative value ensures that tighter fits
                          (smaller remaining capacity) result in higher priority scores.
                          Default is -1.0, which means a perfect fit (0 remaining capacity)
                          scores 0, and larger remaining capacities get more negative scores.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to a very low number. This ensures that
    # bins which cannot accommodate the item are effectively deprioritized.
    priorities = np.full_like(bins_remain_cap, unfit_bin_priority_value, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate the remaining capacity after placement.
    # We want to minimize this remaining capacity to achieve a "best fit".
    # By applying the fit_score_weight to the remaining capacity, a smaller positive remainder
    # (i.e., a tighter fit) results in a larger priority score when fit_score_weight is negative.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item
    priorities[can_fit_mask] = fit_score_weight * remaining_capacity_after_fit

    return priorities
