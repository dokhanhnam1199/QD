```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing an enhanced Best-Fit-like heuristic with a non-linear
    scoring function that strongly incentivizes perfect fits and applies
    a decaying reward for other tight fits.

    This version goes beyond a simple linear 'minimizing leftover space'
    by introducing a multi-objective perspective through:
    1. A significant bonus for perfect utilization of a bin.
    2. A non-linear (inverse) reward for non-perfect fits,
       making very tight fits significantly more desirable than slightly looser ones.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to a very low number. This ensures that
    # bins which cannot accommodate the item are effectively deprioritized.
    # Using -np.inf makes them guaranteed to not be chosen if any valid bin exists.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity after placing the item for fitting bins.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item

    # Define a small epsilon for robust floating-point comparisons
    # and to prevent division by zero for actual perfect fits.
    epsilon = 1e-9

    # --- Multi-Objective / Non-Linear Scoring Strategy ---

    # 1. Identify "perfect fits" (remaining capacity is effectively zero).
    #    These are critical outcomes as they fully utilize a bin and reduce fragmentation.
    is_perfect_fit = remaining_capacity_after_fit < epsilon

    # 2. Calculate scores for non-perfect fits using an inverse relationship.
    #    This ensures a non-linear decay: smaller remaining capacities get
    #    disproportionately higher positive scores. Adding epsilon to the denominator
    #    ensures numerical stability and provides a very high but finite score
    #    for nearly perfect non-zero fits.
    scores_for_non_perfect_fits = 1.0 / (remaining_capacity_after_fit + epsilon)

    # Initialize combined scores with the non-perfect fit calculations.
    combined_scores = scores_for_non_perfect_fits

    # 3. Apply a significant, overriding bonus for truly perfect fits.
    #    This ensures that a perfect fit is always chosen over any non-perfect fit,
    #    no matter how small the remaining capacity in other bins might be.
    #    The value (e.g., 2.0 / epsilon) is chosen to be orders of magnitude
    #    larger than the highest possible score from `1.0 / (remaining + epsilon)`.
    PERFECT_FIT_SCORE_BONUS = 2.0 / epsilon
    combined_scores[is_perfect_fit] = PERFECT_FIT_SCORE_BONUS

    # Assign the calculated scores to the bins that can fit the item.
    priorities[can_fit_mask] = combined_scores

    return priorities
```
