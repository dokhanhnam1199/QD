```python
import numpy as np

class PriorityHeuristics:
    def __init__(self, max_bin_capacity: float):
        """
        Initializes the heuristics with the maximum capacity of a single bin.

        Args:
            max_bin_capacity: The total capacity of a new, empty bin.
                              This constant is crucial for context-aware scoring
                              such as percentages of total capacity.
        """
        self.max_bin_capacity = max_bin_capacity

    def priority_v1(self, item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
        """
        Returns priority with which we want to add item to each bin,
        implementing a Best-Fit-like heuristic.
        Bins that fit the item are prioritized based on how little space
        would be left after placing the item (i.e., tighter fits get higher scores).
        Bins that cannot fit the item receive a very low priority.

        Args:
            item: Size of item to be added to the bin.
            bins_remain_cap: Array of remaining capacities for each bin.

        Return:
            Array of same size as bins_remain_cap with priority score of each bin.
        """
        # Initialize all priorities to a very low number. This ensures that
        # bins which cannot accommodate the item are effectively deprioritized.
        # Using -np.inf makes them guaranteed to not be chosen if any valid bin exists.
        priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

        # Create a boolean mask for bins where the item can actually fit.
        can_fit_mask = bins_remain_cap >= item

        # For bins that can fit the item, calculate the remaining capacity after placement.
        # We want to minimize this remaining capacity to achieve a "best fit".
        # By taking the negative of the remaining capacity, a smaller positive remainder
        # (i.e., a tighter fit) results in a larger (less negative) priority score.
        # A perfect fit (remaining_capacity == 0) results in a score of 0.
        priorities[can_fit_mask] = -(bins_remain_cap[can_fit_mask] - item)

        return priorities

    def priority_v2(self, item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
        """
        Returns priority with which we want to add item to each bin,
        implementing an adaptive heuristic that combines Best-Fit with
        fragmentation avoidance and perfect-fit incentives.

        This heuristic adopts a more context-aware and adaptive strategy by:
        1.  **Perfect Fit Bonus:** Strongly incentivizing bins that are filled completely,
            promoting 'resolved' bin states.
        2.  **Fragmentation Penalty:** Discouraging placement that leaves very small,
            potentially unusable (fragmented) gaps within a bin, preventing
            local optima that lead to wasted space.
        3.  **Small Item Bin Opening Incentive:** For very small items, slightly
            preferring placement in relatively empty bins over partially filled ones.
            This aims to keep existing partially filled bins available for larger,
            better-fitting items, promoting more flexible overall bin usage.

        Args:
            item: Size of item to be added to the bin.
            bins_remain_cap: Array of remaining capacities for each bin.

        Return:
            Array of same size as bins_remain_cap with priority score of each bin.
        """
        priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

        # Mask for bins where the item can physically fit
        can_fit_mask = bins_remain_cap >= item
        
        # Calculate potential remaining capacity for bins that can fit the item
        # This is a critical intermediate value for all scoring components.
        remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item

        # --- Base Score: Best-Fit Logic ---
        # Tighter fits (smaller positive remainder) yield a higher base score (less negative).
        # A remainder of 0 gets a base score of 0.
        priorities[can_fit_mask] = -remaining_capacity_after_fit

        # --- Adaptive / Contextual Enhancements ---

        # 1. Perfect Fit Bonus: Heavily incentivize filling a bin completely (remaining == 0).
        # This value should be large enough to make a perfect fit almost always the top choice.
        PERFECT_FIT_BONUS = self.max_bin_capacity * 2 
        perfect_fit_mask = (remaining_capacity_after_fit == 0) & can_fit_mask
        priorities[perfect_fit_mask] += PERFECT_FIT_BONUS

        # 2. Fragmentation Penalty: Discourage leaving very small, non-zero remainders.
        # These are typically hard to fill and represent wasted space or 'trapped' capacity.
        # A remainder is considered 'fragmented' if it's less than 10% of the total bin capacity.
        FRAGMENTATION_THRESHOLD_PERCENT = 0.10 
        # The penalty should be significant enough to make fragmented outcomes undesirable.
        FRAGMENTATION_PENALTY = self.max_bin_capacity * 0.7 
        
        # Identify bins that fit, are NOT a perfect fit, and result in a small, non-zero remainder.
        fragmented_remainder_mask = can_fit_mask & \
                                    (remaining_capacity_after_fit > 0) & \
                                    (remaining_capacity_after_fit < FRAGMENTATION_THRESHOLD_PERCENT * self.max_bin_capacity)
        
        priorities[fragmented_remainder_mask] -= FRAGMENTATION_PENALTY

        # 3. Small Item Bin Opening Incentive: For very small items, give a bonus
        # for placing them in relatively empty bins (e.g., bins that are >75% empty).
        # This prevents small items from consuming the 'best fit' spot in a partially
        # filled bin that might be ideal for a larger, future item.
        SMALL_ITEM_THRESHOLD_PERCENT = 0.05  # Item is "small" if its size <= 5% of max_bin_capacity
        OPEN_BIN_THRESHOLD_PERCENT = 0.75    # A bin is "relatively empty" if >= 75% of its capacity remains
        SMALL_ITEM_OPEN_BIN_BONUS = self.max_bin_capacity * 0.3 # Moderate bonus

        if item <= SMALL_ITEM_THRESHOLD_PERCENT * self.max_bin_capacity:
            # Construct the mask for applying this specific bonus:
            # - The bin must be able to fit the item (`can_fit_mask`).
            # - The bin must be relatively empty before placement (`bins_remain_cap >= OPEN_BIN_THRESHOLD_PERCENT * self.max_bin_capacity`).
            # - The placement must NOT result in a perfect fit (perfect fits are already super-rewarded).
            # - The placement must NOT result in a fragmented remainder (fragmented outcomes are penalized).
            final_small_item_bonus_mask = can_fit_mask & \
                                          (bins_remain_cap >= OPEN_BIN_THRESHOLD_PERCENT * self.max_bin_capacity) & \
                                          (remaining_capacity_after_fit > 0) & \
                                          (remaining_capacity_after_fit >= FRAGMENTATION_THRESHOLD_PERCENT * self.max_bin_capacity)
            
            priorities[final_small_item_bonus_mask] += SMALL_ITEM_OPEN_BIN_BONUS

        return priorities
```
