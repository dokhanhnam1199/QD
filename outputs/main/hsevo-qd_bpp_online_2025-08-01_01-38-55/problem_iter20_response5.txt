```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                default_low_priority: float = float('-inf'),
                tight_fit_linear_weight: float = -10.0,
                fragment_avoidance_quadratic_weight: float = 100.0,
                consolidation_weight: float = -1.0) -> np.ndarray:
    """
    Continuously balances Best-Fit with a penalty for small unusable fragments,
    and a preference for consolidating items into already fuller bins.
    """
    # Initialize all priorities to a very low number for bins that cannot fit the item.
    priorities = np.full_like(bins_remain_cap, default_low_priority, dtype=float)

    # Identify bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    if np.any(can_fit_mask):
        remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item
        current_remaining_capacity = bins_remain_cap[can_fit_mask]

        # Component 1: Fit Quality (combines Best-Fit and Fragment Avoidance)
        # The linear term prioritizes tighter fits (smaller remaining_capacity_after_fit).
        # The quadratic term creates a "valley" to penalize small, non-zero remaining capacities,
        # encouraging either perfect fits or larger, more versatile remaining spaces.
        fit_score = (remaining_capacity_after_fit * tight_fit_linear_weight) + \
                    (remaining_capacity_after_fit**2 * fragment_avoidance_quadratic_weight)

        # Component 2: Current Bin Fullness (Consolidation)
        # Prioritizes bins that are already fuller, promoting bin consolidation.
        fullness_score = current_remaining_capacity * consolidation_weight

        # Combine all scores
        priorities[can_fit_mask] = fit_score + fullness_score

    return priorities
```
