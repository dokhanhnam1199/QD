```python
import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                fit_score_weight: float = 1.0,
                consolidation_bonus_weight: float = 0.05,
                default_low_priority: float = -np.inf) -> np.ndarray:
    """
    Combines Best-Fit with a continuous consolidation strategy. Rewards bins proportional to their
    current fullness among fitting options to encourage efficient space utilization and adaptability.
    """
    # Initialize all priorities to a very low number for bins that cannot fit the item.
    priorities = np.full_like(bins_remain_cap, default_low_priority, dtype=float)

    # Identify all bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # If no bins can accommodate the item, return the array with deprioritized scores.
    if not np.any(can_fit_mask):
        return priorities

    # --- Best-Fit Logic ---
    # Calculate the remaining capacity for bins that can fit the item.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item

    # Base score: Prioritize tighter fits (smaller remaining capacity).
    # The negative sign converts smaller remaining capacity into a higher score.
    base_scores = fit_score_weight * (-remaining_capacity_after_fit)

    # --- Continuous Consolidation Bias ---
    # This component rewards bins that are already more "full" (i.e., have less remaining capacity)
    # among the available fitting bins. This promotes filling existing, partially-used bins first,
    # aligning with adaptive strategies for better space consolidation.

    # Extract remaining capacities for only those bins that can fit the item.
    fitting_bins_caps = bins_remain_cap[can_fit_mask]

    # Determine the range of remaining capacities among the fitting bins.
    min_fitting_cap = np.min(fitting_bins_caps)  # Capacity of the most full fitting bin
    max_fitting_cap = np.max(fitting_bins_caps)  # Capacity of the most empty fitting bin

    consolidation_scores = np.zeros_like(fitting_bins_caps, dtype=float)

    # If there's a range of capacities (i.e., not all fitting bins are equally full/empty),
    # calculate a continuous consolidation score.
    if max_fitting_cap > min_fitting_cap:
        # The score is higher for bins closer to min_fitting_cap (more full) and lower
        # for bins closer to max_fitting_cap (more empty). It ranges from 0 to 1.
        consolidation_scores = (max_fitting_cap - fitting_bins_caps) / (max_fitting_cap - min_fitting_cap)
    # If all fitting bins have the same capacity, consolidation_scores remains 0, meaning
    # no differential bonus is applied based on "fullness" among them.

    # Combine the base (Best-Fit) scores with the tunable consolidation bonus.
    adjusted_scores = base_scores + consolidation_bonus_weight * consolidation_scores

    # Assign the calculated scores back to the appropriate bins in the main priority array.
    priorities[can_fit_mask] = adjusted_scores

    return priorities
```
