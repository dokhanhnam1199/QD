```python
import numpy as np

# Assume a normalized bin capacity. This is a common practice in Bin Packing Problems (BPP)
# where item sizes and bin capacities are scaled, often such that the bin capacity is 1.0.
# If item sizes and bins_remain_cap are provided in absolute units, this constant
# should be adjusted to reflect the actual fixed capacity of each bin.
BIN_CAPACITY = 1.0 

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin,
    implementing an adaptive Best-Fit heuristic with fragmentation control.

    This heuristic builds upon the Best-Fit principle but incorporates state-aware
    adjustments to address common sub-optimalities in online bin packing,
    specifically focusing on managing bin fragmentation.

    Priorities are determined as follows:
    1.  **Perfect Fits (Highest Priority)**: Bins where the item fits exactly,
        leaving zero remaining capacity, are given an overwhelmingly high priority.
        This strongly encourages "closing" bins cleanly and efficiently.
    2.  **Standard Best-Fit**: For bins where the item fits but not perfectly,
        the base priority is determined by how little space would be left after
        placing the item (i.e., tighter fits receive higher scores).
    3.  **Fragmentation Control (Penalty for Awkward Gaps)**: A significant
        penalty is applied to bins that, after placing the item, would be left
        with a "medium-sized" remaining capacity. These "awkward gaps" are
        often too small for many future items but too large to be considered
        effectively "closed," leading to wasted space and an increased number
        of bins. This mechanism aims to push the remaining capacity towards
        either very small (near-perfect fit) or larger, more flexible amounts.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with a priority score for each bin.
        Higher scores indicate higher desirability. Bins that cannot fit the item
        receive a very low (negative infinity) priority.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # If no bins fit, return the initialized priorities (-inf for all),
    # indicating that no valid placement is possible.
    if not np.any(can_fit_mask):
        return priorities

    # Calculate the remaining capacity after placing the item for all fitting bins.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item

    # --- Core Best-Fit Scoring ---
    # For fitting bins, the base score is the negative of the remaining capacity.
    # A smaller remaining capacity (tighter fit) results in a larger (less negative) score.
    # A perfect fit (0 remaining) gets a base score of 0.
    priorities[can_fit_mask] = -remaining_capacity_after_fit

    # --- Adaptive Component 1: Strong Preference for Perfect Fits ---
    # Identify bins that would result in a perfect fit.
    perfect_fit_mask = np.isclose(remaining_capacity_after_fit, 0.0, atol=1e-9)
    # Get the original indices of these perfect-fit bins.
    perfect_fit_indices = np.where(can_fit_mask)[0][perfect_fit_mask]

    # Assign a very high priority score to perfect fits. This ensures they are
    # selected over any non-perfect fit, regardless of other factors.
    if len(perfect_fit_indices) > 0:
        priorities[perfect_fit_indices] = 1000.0  # A large positive value to guarantee selection

    # --- Adaptive Component 2: Fragmentation Control (Penalty for Awkward Gaps) ---
    # This mechanism aims to "rectify accumulating sub-optimality" by discouraging
    # leaving specific remaining capacities that are often hard to fill efficiently.
    
    # Define the range of "awkward" remaining capacities as a fraction of BIN_CAPACITY.
    # These percentages are empirical and can be tuned based on typical item size distributions.
    # For example, gaps between 5% and 30% of bin capacity are often considered awkward.
    awkward_min = 0.05 * BIN_CAPACITY
    awkward_max = 0.30 * BIN_CAPACITY
    
    # Define the strength of the penalty. This value should be significant enough
    # to make a bin with an awkward gap less desirable than a bin with a slightly
    # worse Best-Fit score but outside the awkward range.
    penalty_strength = 0.5 

    # Apply this penalty only to bins that fit and are NOT perfect fits,
    # as perfect fits are already assigned the highest priority.
    non_perfect_fit_indices = np.where(can_fit_mask)[0][~perfect_fit_mask]

    for i in non_perfect_fit_indices:
        current_rem_after = bins_remain_cap[i] - item
        
        # If the remaining capacity after placing the item falls within the awkward range,
        # apply a penalty to its priority score.
        if awkward_min <= current_rem_after <= awkward_max:
            priorities[i] += -penalty_strength # Add a negative value to lower priority

    return priorities
```
