```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    
    Inspired by the celestial dance where each body finds its most precise orbit,
    this heuristic, Best Fit, seeks the bin that provides the tightest possible
    fit for the item, leaving the minimum remaining space. This aims to conserve
    larger empty spaces for future, potentially larger, items, much like
    observing the efficient ordering of the cosmos.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates a more desirable bin. Bins where the item
        cannot fit will have a very low (negative infinity) priority.
    """
    # Initialize all priorities to a very low value. Bins where the item
    # cannot fit should essentially be disqualified.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Determine which bins have sufficient remaining capacity for the item.
    can_fit_mask = bins_remain_cap >= item

    # For bins where the item can fit, calculate the "goodness" of the fit.
    # We desire the bin that leaves the smallest amount of free space after
    # the item is placed (i.e., (remaining_capacity - item) is minimized).
    # To achieve this with a maximum priority score, we use the negative of
    # this difference. A smaller positive difference results in a larger
    # (less negative, closer to zero) priority score.
    # For example:
    #   - If remaining_capacity - item = 0 (perfect fit), priority = 0.
    #   - If remaining_capacity - item = 5 (loose fit), priority = -5.
    #   - If remaining_capacity - item = 1 (tight fit), priority = -1.
    # The maximum priority will correspond to the tightest fit.
    priorities[can_fit_mask] = -(bins_remain_cap[can_fit_mask] - item)

    return priorities
```
