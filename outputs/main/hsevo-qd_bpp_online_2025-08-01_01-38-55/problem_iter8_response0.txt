```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    bin_capacity: float,
    unfit_bin_priority_value: float = -np.inf,
    fit_score_weight: float = -1.0,
    consolidation_weight: float = 0.1,
) -> np.ndarray:
    """Returns priority scores using a tunable Best-Fit strategy combined with
    a tunable consolidation bias, favoring bins that are already partially full.
    """
    priorities = np.full_like(bins_remain_cap, unfit_bin_priority_value, dtype=float)

    can_fit_mask = bins_remain_cap >= item

    # Only calculate scores for bins where the item can fit
    if np.any(can_fit_mask):
        fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

        # Best-Fit component: Prioritizes bins that will have the least remaining space.
        # A negative weight (e.g., -1.0) ensures smaller remaining capacity yields higher score.
        remaining_capacity_after_fit = fitting_bins_remain_cap - item
        best_fit_score = fit_score_weight * remaining_capacity_after_fit

        # Consolidation component: Prioritizes bins that are already partially filled.
        # A positive weight rewards bins with more 'used' capacity, encouraging consolidation.
        current_filled_capacity = bin_capacity - fitting_bins_remain_cap
        consolidation_score = consolidation_weight * current_filled_capacity

        # Combine the two weighted components
        priorities[can_fit_mask] = best_fit_score + consolidation_score

    return priorities
```
