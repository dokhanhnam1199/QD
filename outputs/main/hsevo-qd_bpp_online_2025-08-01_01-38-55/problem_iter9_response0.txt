```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                w_tight_fit: float = 1.0, w_fullness: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a tunable heuristic combining a Best-Fit-like approach with a
    preference for fuller bins.

    Bins that fit the item are prioritized based on two weighted components:
    1.  **Tight Fit:** How little space would be left after placing the item (i.e., tighter fits get higher scores).
        This component directly relates to the Best-Fit heuristic.
    2.  **Bin Fullness:** How full the bin already is (i.e., smaller remaining capacity means a fuller bin, getting a higher score).
        This component encourages "closing" bins by filling those that are already significantly utilized.

    Bins that cannot fit the item receive a very low priority, effectively preventing their selection.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        w_tight_fit: Weight for the "tight fit" component. A higher value emphasizes
                     minimizing leftover space after placement.
        w_fullness: Weight for the "bin fullness" component. A higher value emphasizes
                    using bins that are already more filled.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to a very low number. This ensures that
    # bins which cannot accommodate the item are effectively deprioritized.
    # Using -np.inf makes them guaranteed to not be chosen if any valid bin exists.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate scores only for bins that can fit the item
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # Component 1: Tight Fit (Best-Fit-like)
    # The goal is to minimize (bins_remain_cap - item), which is the space left after placement.
    # To maximize this, we use the negative: -(bins_remain_cap - item) = item - bins_remain_cap.
    # A smaller remaining capacity after fit results in a higher score.
    score_tight_fit = item - fitting_bins_remain_cap

    # Component 2: Bin Fullness
    # The goal is to prefer bins that already have a smaller remaining capacity
    # (i.e., are closer to being full).
    # To maximize this, we use the negative of remaining capacity: -fitting_bins_remain_cap.
    # A smaller current remaining capacity results in a higher score.
    score_fullness = -fitting_bins_remain_cap

    # Combine the scores using tunable weights.
    # The overall priority is a weighted sum of these two components.
    combined_score = (w_tight_fit * score_tight_fit) + (w_fullness * score_fullness)

    # Apply the calculated scores to the valid bins in the priorities array.
    priorities[can_fit_mask] = combined_score

    return priorities
```
