import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                 no_fit_priority: float = -564696723.4507606,
                 fit_score_multiplier: float = -9.615623000208059) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best-Fit-like heuristic.
    Bins that fit the item are prioritized based on how little space
    would be left after placing the item (i.e., tighter fits get higher scores).
    Bins that cannot fit the item receive a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        no_fit_priority: The priority score assigned to bins that cannot accommodate the item.
                         Defaults to -np.inf to effectively deprioritize them.
        fit_score_multiplier: A multiplier applied to the negative remaining capacity for bins
                              that can fit the item. A value of -1.0 (default) ensures that
                              tighter fits (smaller remaining capacity) result in higher scores.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to a very low number using no_fit_priority.
    priorities = np.full_like(bins_remain_cap, no_fit_priority, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate the remaining capacity after placement.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item
    
    # Apply the fit_score_multiplier to the remaining capacity to get the priority.
    # A negative multiplier (like the default -1.0) ensures that a smaller
    # remaining capacity results in a higher (less negative) priority score.
    priorities[can_fit_mask] = remaining_capacity_after_fit * fit_score_multiplier

    return priorities
