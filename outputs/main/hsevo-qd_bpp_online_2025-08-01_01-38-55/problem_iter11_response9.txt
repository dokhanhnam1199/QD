```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float,
                weight_best_fit: float = 1.0, weight_fullness: float = 0.5) -> np.ndarray:
    """Combines Best-Fit with a Bin Fullness bias using tunable weights for adaptive control.
    Prioritizes tighter fits and fuller bins to encourage consolidation and efficient space utilization.
    """
    # Initialize all priorities to a very low number, ensuring bins that cannot fit the item
    # are effectively deprioritized and will not be chosen if any valid bin exists.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate the Best-Fit component.
    # This component scores bins based on how little space would be left after placing the item.
    # A smaller remaining capacity results in a score closer to zero (or less negative), which is higher.
    # Example: if item=0.3, bin_cap_rem=0.5 -> -(0.5-0.3) = -0.2 (tighter fit)
    #          if item=0.3, bin_cap_rem=1.0 -> -(1.0-0.3) = -0.7 (looser fit)
    score_best_fit = -(bins_remain_cap[can_fit_mask] - item)

    # Calculate the Bin Fullness component.
    # This component gives a higher score to bins that are already more full.
    # Fullness is calculated as (used_capacity / total_capacity).
    # A bin that is 70% full (0.3 remaining if capacity is 1.0) gets a fullness score of 0.7.
    score_fullness = (bin_capacity - bins_remain_cap[can_fit_mask]) / bin_capacity

    # Combine the two components using tunable weights.
    # This allows for adapting the heuristic's behavior based on specific problem characteristics
    # or desired packing strategies (e.g., prioritize tight fits more, or prioritize consolidating items).
    combined_score = (weight_best_fit * score_best_fit) + \
                     (weight_fullness * score_fullness)

    # Assign the calculated combined scores to the bins that can fit the item.
    priorities[can_fit_mask] = combined_score

    return priorities
```
