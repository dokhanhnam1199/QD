```python
import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                bin_max_capacity: float,
                default_low_priority: float = -13.732882263687515,
                fit_score_weight: float = -4.7273623240749325,
                consolidation_bonus_weight: float = 0.5) -> np.ndarray:
    """Combines Best-Fit with a tunable consolidation bonus.

    Prioritizes tighter fits. Adds a bonus for bins already in use (not empty),
    encouraging consolidation into existing bins before opening new ones.
    """
    # Initialize all priorities to a very low number, ensuring bins that cannot
    # fit the item are effectively deprioritized and will not be chosen if any valid bin exists.
    priorities = np.full_like(bins_remain_cap, default_low_priority, dtype=float)

    # Identify bins where the item can physically fit.
    can_fit_mask = bins_remain_cap >= item

    # --- Best-Fit Component ---
    # For bins that can fit, calculate the remaining capacity after placing the item.
    # A negative 'fit_score_weight' means smaller remaining capacity (tighter fit)
    # results in a higher (less negative) priority score.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item
    best_fit_scores = remaining_capacity_after_fit * fit_score_weight

    # --- Consolidation Component ---
    # Add a bonus for bins that are already in use (i.e., not completely empty).
    # This encourages 'consolidation' by filling existing bins before starting new ones.
    # A bin is considered 'not empty' if its remaining capacity is less than its maximum capacity.
    is_not_empty_mask_for_fit_bins = bins_remain_cap[can_fit_mask] < bin_max_capacity
    consolidation_bonus = is_not_empty_mask_for_fit_bins * consolidation_bonus_weight

    # Combine the Best-Fit score and the Consolidation bonus for eligible bins.
    # The sum represents the final priority for choosing a bin.
    priorities[can_fit_mask] = best_fit_scores + consolidation_bonus

    return priorities
```
