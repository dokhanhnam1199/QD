```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best-Fit with a bin fullness score, assuming fixed bin capacity.
    Prioritizes tighter fits and existing, fuller bins to minimize new bin openings.
    """
    # Assume a standard bin capacity. In many BPP contexts, items and bins are normalized
    # such that the bin capacity is 1.0. This value might need adjustment based on
    # the actual scale of items in a specific problem instance.
    BIN_CAPACITY = 1.0 

    # Initialize all priorities to a very low number, effectively deprioritizing
    # bins that cannot accommodate the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, return the default low priorities.
    if not np.any(can_fit_mask):
        return priorities

    # --- Heuristic Components ---

    # 1. Best-Fit Score: Rewards tighter fits.
    # A smaller `(bins_remain_cap - item)` (remaining space after placement)
    # results in a larger (less negative) priority.
    # A perfect fit (0 remaining space) results in a score of 0.
    fit_score = -(bins_remain_cap[can_fit_mask] - item)

    # 2. Bin Fullness Score: Rewards bins that are already more full.
    # This promotes consolidating items into existing bins rather than opening new ones.
    # Calculated as a proportion of the bin's original capacity, ranging from 0 (empty) to 1 (full).
    fullness_score = (BIN_CAPACITY - bins_remain_cap[can_fit_mask]) / BIN_CAPACITY

    # --- Tunable Weights ---
    # These weights determine the relative importance of Best-Fit vs. Bin Fullness.
    # They can be further optimized for specific problem characteristics.
    # Default values are chosen to give primary emphasis to Best-Fit
    # while adding a significant consolidation bias, aligning with observed top performers.
    fit_score_weight = 1.0  # Weight for the tightness of fit
    fullness_score_weight = 0.5 # Weight for how full the bin already is

    # --- Combine Scores ---
    # The final priority for a bin is a weighted sum of its fit score and fullness score.
    # Higher combined score indicates a more desirable bin.
    priorities[can_fit_mask] = (fit_score_weight * fit_score) + \
                               (fullness_score_weight * fullness_score)

    return priorities
```
