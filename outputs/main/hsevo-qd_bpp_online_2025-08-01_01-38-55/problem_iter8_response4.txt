```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    bin_capacity: float,
    unfit_bin_priority_value: float = -np.inf,
    fit_score_weight: float = -1.0,
    consolidation_bonus_weight: float = 0.5,
) -> np.ndarray:
    """Combines Best-Fit with a tunable bonus for consolidating items into already-used bins.
    Prioritizes tight fits, while also preferring bins that are already partially filled.
    """
    priorities = np.full_like(bins_remain_cap, unfit_bin_priority_value, dtype=float)

    can_fit_mask = bins_remain_cap >= item

    # Calculate Best-Fit score for bins that can accommodate the item.
    # A negative 'fit_score_weight' means smaller remaining capacity (tighter fit) yields a higher score.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item
    best_fit_scores = fit_score_weight * remaining_capacity_after_fit

    # Add a consolidation bonus: encourages using bins that are already partially filled.
    # The bonus is proportional to the bin's current fill ratio (before placing the item).
    # This nudges the algorithm to consolidate items into existing bins rather than opening new ones.
    if bin_capacity > 0:
        current_fill_ratio = (bin_capacity - bins_remain_cap[can_fit_mask]) / bin_capacity
    else:
        current_fill_ratio = np.zeros_like(bins_remain_cap[can_fit_mask])

    consolidation_scores = consolidation_bonus_weight * current_fill_ratio

    # Combine the Best-Fit score with the consolidation bonus.
    priorities[can_fit_mask] = best_fit_scores + consolidation_scores

    return priorities
```
