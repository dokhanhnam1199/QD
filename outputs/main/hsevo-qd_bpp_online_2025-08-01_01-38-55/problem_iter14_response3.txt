```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                fit_score_weight: float = 1.0,
                consolidation_bonus_weight: float = 0.01,
                fragment_threshold: float = 0.05,
                fragment_penalty_weight: float = 10.0,
                perfect_fit_bonus: float = 1000.0,
                default_low_priority: float = -np.inf) -> np.ndarray:
    """
    Combines Best-Fit and consolidation, penalizing fragmented small remainders, and prioritizing perfect fits.
    Aims for tight packing while managing bin versatility and avoiding tiny unusable spaces.
    """
    # Initialize all priorities to a very low number for bins that cannot fit.
    priorities = np.full_like(bins_remain_cap, default_low_priority, dtype=float)

    # Identify bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, return the deprioritized array.
    if not np.any(can_fit_mask):
        return priorities

    # --- Calculate potentials for fitting bins ---
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
    remaining_capacity_after_fit = fitting_bins_remain_cap - item

    # 1. Base Score: Encourages tighter fits (Best-Fit principle).
    # A smaller 'remaining_capacity_after_fit' results in a score closer to zero (higher, assuming fit_score_weight > 0).
    base_scores = fit_score_weight * (-remaining_capacity_after_fit)

    # Start with base_scores, then apply adjustments
    adjusted_scores = base_scores.copy()

    # 2. Consolidation Bias: Bonus for partially filled existing bins.
    # This encourages using existing, partially filled bins over opening a new, completely empty one.
    # A bin is "partially filled" if its current remaining capacity is not the maximum possible (e.g., not a brand new, empty bin).
    # We check against the maximum *current* remaining capacity among fitting bins to distinguish "fullest" available.
    if len(fitting_bins_remain_cap) > 0: # Ensure there are fitting bins to calculate max
        max_current_capacity_among_fitting_bins = np.max(fitting_bins_remain_cap)
        # Apply bonus to any bin that is not the "most empty" (i.e., not a newly opened bin with max capacity)
        is_partially_filled_mask = fitting_bins_remain_cap < max_current_capacity_among_fitting_bins
        adjusted_scores[is_partially_filled_mask] += consolidation_bonus_weight

    # 3. Fragmentation Penalty: Penalize leaving very small, non-zero remainders.
    # This avoids creating "unusable" small gaps in bins.
    # Only applies if 'remaining_capacity_after_fit' is positive but below the threshold.
    fragment_mask = (remaining_capacity_after_fit > 1e-9) & (remaining_capacity_after_fit < fragment_threshold)

    if np.any(fragment_mask):
        # The penalty increases as the remainder gets closer to zero within the fragment_threshold.
        # This makes tighter non-perfect fits *less* desirable if they fall into the fragment zone.
        penalty_magnitudes = (fragment_threshold - remaining_capacity_after_fit[fragment_mask]) * fragment_penalty_weight
        adjusted_scores[fragment_mask] -= penalty_magnitudes

    # 4. Perfect Fit Bonus: Ensure exact fits have the highest priority.
    # This overrides any other score calculations for these specific cases.
    perfect_fit_mask = np.isclose(remaining_capacity_after_fit, 0.0, atol=1e-9)
    if np.any(perfect_fit_mask):
        adjusted_scores[perfect_fit_mask] = perfect_fit_bonus # Assign very high score

    # Assign the calculated scores to the fitting bins in the main priority array.
    priorities[can_fit_mask] = adjusted_scores

    return priorities
```
