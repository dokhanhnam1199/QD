{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                default_low_priority: float = -13.732882263687515,\n                fit_score_weight: float = -4.7273623240749325) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin,\n    implementing a Best-Fit-like heuristic.\n    Bins that fit the item are prioritized based on how little space\n    would be left after placing the item (i.e., tighter fits get higher scores).\n    Bins that cannot fit the item receive a very low priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        default_low_priority: The priority assigned to bins that cannot accommodate the item.\n                              Should be a very low number (e.g., -np.inf) to ensure they are\n                              not chosen if any valid bin exists.\n        fit_score_weight: A multiplier applied to the negative remaining capacity after fit.\n                          A negative value (e.g., -1.0) ensures that tighter fits (smaller\n                          remaining capacity) receive higher scores.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize all priorities to a very low number. This ensures that\n    # bins which cannot accommodate the item are effectively deprioritized.\n    # Using default_low_priority makes them guaranteed to not be chosen if any valid bin exists.\n    priorities = np.full_like(bins_remain_cap, default_low_priority, dtype=float)\n\n    # Create a boolean mask for bins where the item can actually fit.\n    can_fit_mask = bins_remain_cap >= item\n\n    # For bins that can fit the item, calculate the remaining capacity after placement.\n    # We want to minimize this remaining capacity to achieve a \"best fit\".\n    # By taking the remaining capacity and multiplying by fit_score_weight,\n    # a smaller positive remainder (i.e., a tighter fit) results in a larger priority score\n    # when fit_score_weight is negative.\n    # A perfect fit (remaining_capacity == 0) results in a score of 0.\n    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item\n    priorities[can_fit_mask] = remaining_capacity_after_fit * fit_score_weight\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n### Analyze & experience\n- Comparing (1st) vs (20th), the best heuristic `priority_v2` (1st) implements a Best-Fit strategy enhanced with a \"consolidation bias\" that subtly prioritizes placing items into already partially filled bins. In stark contrast, the worst heuristic (20th) returns a zero-filled array, effectively making an arbitrary choice among fitting bins, leading to highly suboptimal packing. This highlights that any intelligent prioritization is vastly superior to no specific strategy.\n\nComparing (2nd) vs (19th), the second-best heuristic (2nd) is functionally identical to the best (1st) but introduces tunable parameters for its Best-Fit and consolidation components. The second-worst (19th) is also a \"no-op\" heuristic returning zeros. This reinforces that strategic guidance, even with generic tunable defaults, drastically outperforms arbitrary placement.\n\nComparing (1st) vs (2nd), both heuristics employ the same logic: Best-Fit combined with a discrete \"consolidation bonus\" for partially filled bins. The key difference is that 1st uses fixed, hardcoded values (e.g., `consolidation_bonus = 0.01`), while 2nd exposes these as tunable parameters. The higher rank of 1st suggests that its specific fixed parameters were particularly well-suited or near-optimal for the problem instances evaluated, potentially outperforming a more general but untuned version (2nd).\n\nComparing (3rd) vs (4th), the 3rd heuristic is a pure Best-Fit heuristic with tunable weights. The 4th heuristic is identical to the 2nd (Best-Fit plus consolidation bias with tunable parameters). The fact that 4th outranks 3rd clearly demonstrates the significant performance benefit of incorporating a \"consolidation bias\" (encouraging the filling of existing bins) in addition to basic Best-Fit. This \"consolidation\" principle helps reduce the total number of bins by preventing fragmentation.\n\nComparing (6th) vs (11th), both introduce advanced concepts like prioritizing perfect fits and penalizing small fragments. However, 6th then reverts to a Best-Fit approach for other valid fits, while 11th encourages leaving *large* versatile spaces (a \"Worst-Fit\" tendency). The higher ranking of 6th indicates that after handling perfect fits and fragmentation, maintaining a Best-Fit preference for remaining cases is generally more effective than aiming for larger, \"versatile\" gaps, as the latter can lead to less dense packing.\n\nComparing (19th) vs (20th), both are identical \"no-op\" heuristics that return zero priorities for all bins. Their adjacent ranking (19th and 20th) is expected, as they offer no intelligent decision-making.\n\nOverall: The analysis reveals a clear progression from arbitrary decisions to increasingly sophisticated strategies. Effective heuristics balance local optimization (tight fits) with global concerns like minimizing bin count and preventing fragmentation. Explicitly encouraging consolidation (filling existing bins) and penalizing unusable small gaps are crucial. Perfect fits should be highly prioritized. While tunability offers flexibility, well-chosen fixed parameters can perform exceptionally well for specific problem distributions.\n- \nHere's a redefined self-reflection focusing purely on the heuristic's strategic objectives and outcomes, avoiding forbidden concepts:\n\n*   **Keywords**: Local/global balance, tight fit, bin consolidation, fragmentation avoidance, perfect fits, minimal waste.\n*   **Advice**: Strategically combine immediate item placement with long-term container organization. Emphasize complete space utilization and prevent unusable voids.\n*   **Avoid**: Creating small, unfillable gaps or leaving large, unproductive empty regions. Neglecting overall resource structure for minor, immediate gains.\n*   **Explanation**: Effective heuristics must consider both the immediate fit and the global arrangement of resources to maximize efficiency and prevent future placement difficulties, ensuring comprehensive utility.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}