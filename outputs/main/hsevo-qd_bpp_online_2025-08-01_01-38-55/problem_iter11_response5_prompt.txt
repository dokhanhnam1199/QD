{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n                fit_score_weight: float = 1.0,\n                consolidation_bonus_weight: float = 0.01,\n                default_low_priority: float = -np.inf) -> np.ndarray:\n    \"\"\"Returns priority for adding an item, combining Best-Fit with a tunable consolidation bias.\n    Prioritizes tight fits and rewards using existing, partially-filled bins to consolidate space,\n    enhancing global flexibility through adaptable parameters.\n    \"\"\"\n    # Initialize all priorities to a very low number for bins that cannot fit.\n    priorities = np.full_like(bins_remain_cap, default_low_priority, dtype=float)\n\n    # Identify bins where the item can actually fit.\n    can_fit_mask = bins_remain_cap >= item\n\n    # If no bins can fit the item, return the deprioritized array.\n    if not np.any(can_fit_mask):\n        return priorities\n\n    # --- Tunable Best-Fit Logic ---\n    # Calculate the remaining capacity if the item is placed in fitting bins.\n    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item\n\n    # Base score: Smaller remaining capacity means a tighter fit, which is better.\n    # The score is amplified by 'fit_score_weight', which should be positive to\n    # promote tighter fits (i.e., a smaller negative value is a higher priority).\n    base_scores = fit_score_weight * (-remaining_capacity_after_fit)\n\n    # --- Tunable Consolidation Bias ---\n    # Identify bins that are NOT \"newly opened\" (i.e., they are already partially filled).\n    # This is true if their current capacity is strictly less than the maximum observed capacity\n    # among *currently available* bins that can fit the item.\n    max_current_capacity_among_fitting_bins = np.max(bins_remain_cap[can_fit_mask])\n    is_partially_filled = bins_remain_cap[can_fit_mask] < max_current_capacity_among_fitting_bins\n\n    # Apply a tunable bonus to partially filled bins to encourage consolidation.\n    adjusted_scores = base_scores\n    adjusted_scores[is_partially_filled] += consolidation_bonus_weight\n\n    # Assign the calculated scores to the fitting bins in the main priority array.\n    priorities[can_fit_mask] = adjusted_scores\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n### Analyze & experience\n- Comparing (1st) vs (7th), both implement a Best-Fit heuristic with a weighted remaining capacity. The core logic is identical, but (1st) uses different, seemingly better-tuned parameter values for `default_low_priority` and `fit_score_weight`. This highlights that for a given heuristic principle, the **meticulous tuning of its hyper-parameters is critical** for performance. Comparing (2nd) vs (8th), (3rd) vs (4th), and (5th) vs (9th), identical code snippets are ranked differently. This suggests either external, non-visible parameter tuning was performed, or the problem's solution space is highly sensitive to minute differences, causing very similar heuristics to rank slightly apart.\n\nComparing (1st) (Best-Fit with tunable weight) vs (10th) (fixed Best-Fit), the introduction of a **tunable `fit_score_weight`** in (1st) enables superior performance. This allows the heuristic to be calibrated for specific problem instances, demonstrating the value of flexible design.\n\nComparing (1st) (tuned Best-Fit) vs (2nd) (Best-Fit + Bin Fullness), the simpler, well-tuned pure Best-Fit (1st) outperforms the more complex multi-objective approach (2nd) with its default weights. This suggests that a **highly optimized, focused heuristic can be more effective than a broader, combined strategy** if the latter's components are not perfectly balanced.\n\nComparing (2nd) (Best-Fit + Bin Fullness) vs (3rd) (Best-Fit + Consolidation Bias), the explicit linear combination of \"tight fit\" and \"bin fullness\" in (2nd) performs better than (3rd)'s threshold-based \"consolidation bonus\". This indicates that **direct and continuous integration of secondary objectives through weighted sums** might be more robust than simple additive bonuses.\n\nComparing (6th) (Tunable Best-Fit + Tunable Consolidation Bias) vs (3rd/4th) (Fixed Best-Fit + Fixed Consolidation Bias), the tunable version (6th) ranks higher. This reinforces the importance of **tunability for all significant components** of a multi-faceted heuristic.\n\nFinally, observing the dramatic performance drop from (10th) (basic Best-Fit) to (11th-20th) (trivial \"return zeros\" / no strategy), it's clear that **any strategic placement heuristic significantly outperforms a non-strategic approach**. The core Best-Fit principle, which minimizes individual wasted space, serves as a strong foundation.\n- \nHere's a redefined self-reflection for heuristic design:\n\n*   **Keywords:** Adaptive Control, Singular Focus, Contextual Strategy, Integrated Design.\n*   **Advice:** Prioritize identifying dynamic control points for adaptive behavior. Focus heuristics on a singular, primary objective to avoid diluted efforts. Implement context-aware decision processes instead of fixed rules. Ensure all components are synergistically integrated for holistic performance.\n*   **Avoid:** Prescribing fixed algorithms (e.g., Best-Fit), hardcoding specific scoring functions, or overly incentivizing local optima that hinder global solutions. Do not rely on static, pre-defined decision rules.\n*   **Explanation:** This fosters robust, adaptable heuristics that dynamically respond to problem specifics, avoiding brittle, pre-conceived notions of \"best\" strategies or scoring, thus promoting true global optimization.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}