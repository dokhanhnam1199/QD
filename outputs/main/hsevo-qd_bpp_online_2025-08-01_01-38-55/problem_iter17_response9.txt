```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes Best-Fit, with significant bonus for perfect fits and a bias towards
    consolidating items into already partially filled bins to minimize new bin openings."""

    # Initialize all priorities to a very low number. Bins that cannot fit
    # the item will effectively not be chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, return the deprioritized array.
    if not np.any(can_fit_mask):
        return priorities

    # Get the capacities of bins that can fit the item
    fitting_bins_caps = bins_remain_cap[can_fit_mask]

    # --- Best-Fit Base Score ---
    # Calculate the remaining capacity if the item is placed.
    remaining_capacity_after_fit = fitting_bins_caps - item

    # The base score is the negative of the remaining capacity.
    # A smaller remaining capacity indicates a tighter fit (higher priority).
    base_scores = -remaining_capacity_after_fit

    # --- Perfect Fit Bonus ---
    # Give a very high bonus for a perfect fit to ensure it's always chosen first.
    # Use a small epsilon for robust floating-point comparison.
    PERFECT_FIT_EPSILON = 1e-9
    PERFECT_FIT_BONUS = 1000.0  # A large constant to dominate other scores.

    is_perfect_fit = np.abs(remaining_capacity_after_fit) < PERFECT_FIT_EPSILON
    base_scores[is_perfect_fit] += PERFECT_FIT_BONUS

    # --- Consolidation Bias ---
    # To encourage consolidation, add a small bonus to bins that are already
    # partially filled. This promotes filling existing bins over opening new ones.
    
    # Infer "newly opened" bins by finding the maximum remaining capacity among available bins.
    # Any bin with less than this maximum is considered partially filled.
    max_current_capacity = np.max(fitting_bins_caps)

    # Identify bins that are partially filled (i.e., not at maximum current capacity).
    CAPACITY_CHECK_EPSILON = 1e-9 # Tolerance for float comparison
    is_partially_filled = (max_current_capacity - fitting_bins_caps) > CAPACITY_CHECK_EPSILON

    # Define a small positive bonus, meant to influence choices between closely-scoring bins.
    CONSOLIDATION_BONUS = 0.01

    # Apply the bonus to partially filled bins.
    base_scores[is_partially_filled] += CONSOLIDATION_BONUS

    # Assign the calculated scores to the fitting bins in the main priority array.
    priorities[can_fit_mask] = base_scores

    return priorities
```
