```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best-Fit with consolidation, perfect fit priority, and small fragment penalty.
    Prioritizes perfect fits, then consolidates existing bins by penalizing new ones, while avoiding tiny unusable spaces.
    """
    # Initialize all priorities to a very low number, effectively deprioritizing non-fitting bins.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, return the deprioritized array.
    if not np.any(can_fit_mask):
        return priorities

    # Get indices and current capacities of fitting bins for targeted operations.
    fitting_bins_indices = np.where(can_fit_mask)[0]
    fitting_bins_current_caps = bins_remain_cap[fitting_bins_indices]
    remaining_after_fit = fitting_bins_current_caps - item

    # Heuristic Parameters (Based on "Analyze & experience" for effective values)
    BIN_CAPACITY = 1.0  # Common assumption for normalized item/bin sizes
    PERFECT_FIT_SCORE = 1000.0  # Ensures perfect fits are always chosen
    FRAGMENT_THRESHOLD = 0.05 * BIN_CAPACITY  # Remaining space smaller than this is penalized
    SMALL_REMAINDER_PENALTY_MULTIPLIER = 50.0  # Controls severity of fragment penalty
    CONSOLIDATION_BONUS = 0.01  # Small bonus for filling existing (partially used) bins

    # --- Apply scoring based on categories of remaining capacity after fit ---

    # 1. Perfect Fit: `remaining_after_fit` is approximately zero.
    perfect_fit_sub_mask = np.isclose(remaining_after_fit, 0.0, atol=1e-9)
    priorities[fitting_bins_indices[perfect_fit_sub_mask]] = PERFECT_FIT_SCORE

    # 2. Small, Potentially Useless Remainder: `0 < remaining_after_fit < FRAGMENT_THRESHOLD`.
    # These fits create very little space, which might be too small for future items.
    small_remainder_sub_mask = (remaining_after_fit > 1e-9) & (remaining_after_fit < FRAGMENT_THRESHOLD)
    
    # The penalty increases (becomes more negative) as remaining_after_fit gets closer to zero.
    penalty_scores = - (FRAGMENT_THRESHOLD - remaining_after_fit[small_remainder_sub_mask]) * SMALL_REMAINDER_PENALTY_MULTIPLIER
    priorities[fitting_bins_indices[small_remainder_sub_mask]] = penalty_scores

    # 3. Other Valid Fits: `remaining_after_fit >= FRAGMENT_THRESHOLD`.
    # For these, apply Best-Fit logic enhanced with a consolidation bias.
    general_fit_sub_mask = remaining_after_fit >= FRAGMENT_THRESHOLD

    if np.any(general_fit_sub_mask):
        # Base Best-Fit score: Negative of remaining capacity. A tighter fit (smaller positive remainder)
        # results in a score closer to 0 (less negative), indicating higher priority.
        base_scores = -remaining_after_fit[general_fit_sub_mask]

        # Consolidation Bias: Add a small bonus to bins that are already partially filled.
        # This nudges the algorithm to prefer an existing bin over a 'new' (full capacity) one.
        
        # Determine the maximum current capacity among these "general fit" bins.
        # Any bin with this maximum capacity is considered effectively "new" or "empty".
        max_current_fitting_capacity = np.max(fitting_bins_current_caps[general_fit_sub_mask])
        
        # Identify bins that are NOT at their maximum capacity (i.e., they are partially filled).
        is_partially_filled_for_general_fits = fitting_bins_current_caps[general_fit_sub_mask] < max_current_fitting_capacity
        
        # Apply the consolidation bonus.
        adjusted_scores = base_scores
        adjusted_scores[is_partially_filled_for_general_fits] += CONSOLIDATION_BONUS
        
        priorities[fitting_bins_indices[general_fit_sub_mask]] = adjusted_scores

    return priorities
```
