```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, BIN_CAPACITY: float) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin.

    This heuristic combines a Best-Fit-like approach with strategies for
    bin consolidation and fragmentation avoidance. It prioritizes:
    1. Perfect fits (leaving 0 capacity).
    2. Avoiding "awkward" medium-sized remaining capacities.
    3. Slightly favoring bins that would be left with very large capacities
       (keeping them open for future large items) over awkward medium ones.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        BIN_CAPACITY: The total capacity of a new, empty bin. This is
                      crucial for evaluating the "largeness" of remaining gaps.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to a very low number. Bins that cannot
    # accommodate the item will retain this value, effectively deprioritizing them.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity after placement for bins that can fit the item.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item

    # Base score (Best-Fit-like): Tighter fits (smaller remaining capacity) get higher scores.
    # A perfect fit (0 remaining) gets 0. A larger remaining capacity gets a more negative score.
    base_scores = -remaining_capacity_after_fit

    # Apply the base scores to the appropriate bins.
    priorities[can_fit_mask] = base_scores

    # --- Strategic Enhancements for Bin Consolidation and Fragmentation Avoidance ---

    # 1. Perfect Fit Bonus: Strongly prioritize bins that result in a perfect fit.
    # This directly achieves "complete space utilization" and "bin consolidation".
    perfect_fit_mask = (remaining_capacity_after_fit == 0)
    # The bonus must be large enough to guarantee a perfect fit is always chosen
    # over any non-perfect fit. The maximum possible negative base score is when
    # remaining_capacity_after_fit is at its maximum (BIN_CAPACITY - minimum_item_size).
    # So, a bonus slightly larger than BIN_CAPACITY ensures dominance.
    PERFECT_FIT_BONUS = BIN_CAPACITY + 0.01
    priorities[can_fit_mask][perfect_fit_mask] += PERFECT_FIT_BONUS

    # Define thresholds for classifying remaining gaps:
    # These are critical hyperparameters. They aim to differentiate between
    # (a) "very small" gaps (near full), (b) "medium" awkward gaps, and (c) "large" useful gaps (near empty).
    # Using fractions of BIN_CAPACITY makes them adaptive.
    THRESHOLD_SMALL_GAP = BIN_CAPACITY * 0.2  # E.g., if remaining < 20% of bin
    THRESHOLD_LARGE_GAP = BIN_CAPACITY * 0.8  # E.g., if remaining >= 80% of bin

    # Penalties and bonuses to apply based on gap size for non-perfect fits.
    # These values also act as hyperparameters.
    MEDIUM_GAP_PENALTY = BIN_CAPACITY * 0.2  # Penalize awkward middle gaps
    LARGE_GAP_BONUS = BIN_CAPACITY * 0.1   # Slightly reward keeping bins very open

    # Apply these strategic adjustments only to bins that are not a perfect fit.
    non_perfect_fit_mask = ~perfect_fit_mask

    # Get the remaining capacities for bins that are not perfect fits.
    rem_after_non_perfect = remaining_capacity_after_fit[non_perfect_fit_mask]

    # Identify "medium" gaps: Not very small and not very large.
    medium_gap_mask = (rem_after_non_perfect > THRESHOLD_SMALL_GAP) & \
                      (rem_after_non_perfect < THRESHOLD_LARGE_GAP)

    # Identify "large" gaps: A significant portion of the bin remains empty.
    large_gap_mask = (rem_after_non_perfect >= THRESHOLD_LARGE_GAP)

    # Apply penalty to "medium" gaps: This discourages leaving bins in an ambiguous state,
    # encouraging choices towards either fully closing a bin or keeping it wide open.
    # This addresses "avoiding small, unfillable gaps" (by making "medium" worse).
    priorities[can_fit_mask][non_perfect_fit_mask][medium_gap_mask] -= MEDIUM_GAP_PENALTY

    # Apply bonus to "large" gaps: This slightly increases the attractiveness of bins
    # that remain mostly empty even after placement, preserving them for larger future items.
    # This contributes to "long-term container organization".
    priorities[can_fit_mask][non_perfect_fit_mask][large_gap_mask] += LARGE_GAP_BONUS

    return priorities
```
