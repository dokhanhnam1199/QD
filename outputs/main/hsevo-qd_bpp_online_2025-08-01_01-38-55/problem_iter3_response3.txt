```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best-Fit-like heuristic with a strong non-linear
    incentive for perfect or very tight fits.

    This version enhances `priority_v1` by applying a non-linear bonus
    to bins that result in very little remaining capacity, strongly
    prioritizing perfect or near-perfect fits. This aligns with the advice
    to use "non-linear reward functions to strongly incentivize critical,
    high-value outcomes (e.g., perfect fits)" and "exploit problem-specific
    structures" (like zero-waste fits).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to a very low number. This ensures that
    # bins which cannot accommodate the item are effectively deprioritized.
    # Using -np.inf makes them guaranteed to not be chosen if any valid bin exists.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate the remaining capacity after placement.
    # This value represents the "waste" space if the item is placed here.
    # We want to minimize this remaining capacity.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item

    # Component 1: Best-Fit heuristic (linear negative relationship)
    # A smaller remaining_capacity_after_fit yields a higher (less negative) base score.
    base_priority = -remaining_capacity_after_fit

    # Component 2: Non-linear bonus for tight fits, especially perfect fits.
    # This applies a strong, exponentially decaying bonus as remaining_capacity_after_fit approaches zero.
    # - K: A constant factor determining the maximum bonus awarded for a perfect fit (when remaining_capacity_after_fit = 0).
    #      Set to a value significantly larger than typical negative base_priority values to ensure
    #      perfect fits receive the highest possible score.
    # - alpha: A constant factor controlling the decay rate of the bonus.
    #          A larger alpha means the bonus decays more rapidly, making it highly
    #          concentrated on very small remaining capacities.
    K = 1000.0  # Example: A large constant. Should be chosen to dominate regular scores.
    alpha = 5.0 # Example: High decay rate to emphasize very tight fits.

    tight_fit_bonus = K * np.exp(-alpha * remaining_capacity_after_fit)

    # Combine the base Best-Fit priority with the non-linear tight-fit bonus.
    # This creates a score that strongly favors bins resulting in very little
    # wasted space, while still preferring tighter fits overall for others.
    priorities[can_fit_mask] = base_priority + tight_fit_bonus

    return priorities
```
