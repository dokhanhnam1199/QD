```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    As a black hole theorist, I seek to maximize the 'density' of our bins,
    minimizing the 'cosmic voids' (empty space) within them. This heuristic
    aims for a 'Best Fit' approach by prioritizing bins that will result in
    the smallest remaining capacity, much like matter striving to coalesce
    into the densest possible configuration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities. Bins that cannot fit the item are given an
    # infinitely low priority, ensuring they are not considered.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify the 'event horizons' where an item can be pulled in.
    # These are the bins with sufficient remaining capacity.
    can_fit_mask = bins_remain_cap >= item

    # For the bins that can accommodate the item, calculate the 'residual energy'
    # â€“ the capacity that would remain after the item is placed.
    # Our goal is to minimize this residual space, creating a tighter,
    # more efficient packing.
    residual_capacity = bins_remain_cap[can_fit_mask] - item

    # To select the bin with the smallest residual capacity (the 'Best Fit'),
    # we assign a priority that is the negative of this residual.
    # Thus, a smaller positive residual results in a larger (less negative) priority.
    # This reflects our cosmic imperative: to pack things as densely as possible.
    priorities[can_fit_mask] = -residual_capacity

    return priorities
```
