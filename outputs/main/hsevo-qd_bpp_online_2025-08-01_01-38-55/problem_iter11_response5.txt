```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                fit_score_weight: float = 1.0,
                consolidation_weight: float = 0.5,
                default_low_priority: float = -np.inf) -> np.ndarray:
    """Combines Best-Fit with a continuous consolidation score.
    Prioritizes tight fits and continuously rewards using bins that are already partially filled,
    promoting efficient space usage and consolidation through tunable parameters.
    """
    priorities = np.full_like(bins_remain_cap, default_low_priority, dtype=float)
    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        return priorities

    # Best-Fit Component: Prioritizes bins with the smallest remaining capacity after placing the item.
    # A smaller remaining capacity (bins_remain_cap - item) means a tighter fit,
    # so we negate it to make it a higher score.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item
    best_fit_scores = fit_score_weight * (-remaining_capacity_after_fit)

    # Consolidation Component: Continuously rewards using existing, partially-filled bins.
    # 'max_current_capacity_among_fitting_bins' acts as a reference for a "full" bin capacity,
    # if an empty bin is available.
    max_current_capacity_among_fitting_bins = np.max(bins_remain_cap[can_fit_mask])
    
    # The consolidation score is higher for bins that are already more "full" (i.e., have less
    # remaining capacity relative to the maximum observed capacity). This encourages consolidation.
    consolidation_scores = consolidation_weight * (max_current_capacity_among_fitting_bins - bins_remain_cap[can_fit_mask])

    # Combine the weighted scores to determine the final priority.
    combined_scores = best_fit_scores + consolidation_scores

    priorities[can_fit_mask] = combined_scores

    return priorities
```
