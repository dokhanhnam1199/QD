```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic aims to implement a variant of the "Best Fit" strategy,
    prioritizing bins that, after accommodating the item, would have the
    smallest remaining capacity (i.e., the tightest fit).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates higher priority. Bins that cannot fit the item
        are assigned a very low (negative infinity) priority.
    """
    # Initialize priorities for all bins to a very low value.
    # This ensures bins that cannot fit the item are never chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify which bins can accommodate the current item.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit, calculate the "slack" â€“ the remaining capacity
    # after the item is placed.
    slack = bins_remain_cap[can_fit_mask] - item

    # For a Best Fit strategy, we want to minimize this slack.
    # To convert this into a priority score where higher is better (for np.argmax),
    # we can use the negative of the slack.
    # A smaller (closer to zero) positive slack will result in a larger
    # (closer to zero or positive) priority score.
    # For example, if slack is 0.1, priority is -0.1. If slack is 0.0 (perfect fit),
    # priority is 0.0 (the highest possible for this scheme).
    # If slack is 0.5, priority is -0.5.
    priorities[can_fit_mask] = -slack

    return priorities
```
