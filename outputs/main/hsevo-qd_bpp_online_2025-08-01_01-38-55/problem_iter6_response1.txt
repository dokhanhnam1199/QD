```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which to add an item to each bin,
    mutating a Best-Fit-like heuristic to encourage filling existing bins
    over opening new ones, while still favoring tighter fits where possible.
    This seeks to balance immediate bin utilization with overall solution quality and global flexibility.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to a very low number. Bins that cannot
    # accommodate the item are effectively deprioritized.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate the remaining capacity after placement.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item

    # Initialize priorities with a Best-Fit-like scoring:
    # A smaller remaining capacity results in a higher (less negative) score,
    # thus prioritizing tighter fits. A perfect fit yields a score of 0.
    priorities[can_fit_mask] = -remaining_capacity_after_fit

    # Domain Intelligence and Global Flexibility Mutation:
    # In online Bin Packing, a common heuristic to improve overall solution quality
    # (i.e., reduce the total number of bins used) is to preferentially fill existing,
    # partially used bins before opening new ones. This strategy maintains "global flexibility"
    # by delaying the commitment to new bins and consolidating items into fewer containers.
    #
    # We identify "empty" or "largest available" bins as those having the maximum
    # remaining capacity among all bins that can fit the item. These are the candidates
    # for being newly opened bins. A subtle penalty is applied to these bins.
    # This penalty subtly pushes items towards partially filled bins,
    # unless an empty/new bin offers a significantly better (e.g., perfect or near-perfect) fit.
    
    if bins_remain_cap[can_fit_mask].size > 0:
        # Find the maximum remaining capacity among bins that can fit the item.
        # This often corresponds to the capacity of a "newly opened" bin
        # or the largest available space for the current item.
        max_fitting_capacity = np.max(bins_remain_cap[can_fit_mask])
        
        # Identify bins that currently have this maximum fitting capacity.
        is_empty_or_largest_bin_mask = (bins_remain_cap == max_fitting_capacity) & can_fit_mask

        # Apply a subtle, context-driven penalty to these "empty" or "largest available" bins.
        # The penalty is proportional to the item size. This makes it scale with the problem's
        # typical magnitudes and ensures it's not an arbitrary fixed value.
        # It's small enough not to drastically alter the Best-Fit preference but significant
        # enough to act as a tie-breaker or to shift preference when scores are very close.
        penalty = item * 0.001  # A small fraction (0.1%) of the item's size.

        priorities[is_empty_or_largest_bin_mask] -= penalty
    
    return priorities
```
