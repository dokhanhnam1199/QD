```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                # Tunable weights for general case (from priority_v0)
                fit_score_weight: float = -4.7273623240749325,
                current_fullness_weight: float = -1.0,
                default_low_priority: float = float('-inf'),
                # Tunable parameters for specific cases (from priority_v1)
                PERFECT_FIT_SCORE: float = 1000.0,
                BIN_CAPACITY: float = 1.0,  # Assumes standard bin capacity for thresholds
                FRAGMENT_THRESHOLD: float = 0.05,  # As a fraction of BIN_CAPACITY
                SMALL_REMAINDER_PENALTY_MULTIPLIER: float = 50.0) -> np.ndarray:
    """Combines Best-Fit and bin consolidation, with high priority for perfect fits and penalties for tiny remainders."""

    # Initialize all priorities to a very low number for bins that cannot fit or haven't been scored.
    priorities = np.full_like(bins_remain_cap, default_low_priority, dtype=float)

    # Identify bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit, return the default deprioritized array.
    if not np.any(can_fit_mask):
        return priorities

    # Calculate remaining capacity after placing the item for all fitting bins.
    # This array corresponds only to the bins identified by `can_fit_mask`.
    remaining_after_fit_for_fitting_bins = bins_remain_cap[can_fit_mask] - item
    
    # --- 1. Perfect Fit (Highest Priority) ---
    # Assign a very high score to bins where the item fits perfectly, leaving zero remaining space.
    perfect_fit_mask_local = np.isclose(remaining_after_fit_for_fitting_bins, 0.0, atol=1e-9)
    priorities[can_fit_mask][perfect_fit_mask_local] = PERFECT_FIT_SCORE

    # --- 2. Small, Potentially Useless Remainder (Penalty) ---
    # Define the absolute threshold for what constitutes a "small" fragment.
    fragment_upper_bound = FRAGMENT_THRESHOLD * BIN_CAPACITY
    
    # Identify bins where the item fits, leaving a small, non-zero remainder.
    # These are considered undesirable as they fragment space.
    small_remainder_mask_local = (remaining_after_fit_for_fitting_bins > 1e-9) & \
                                 (remaining_after_fit_for_fitting_bins < fragment_upper_bound)
    
    # Calculate penalty scores: A stronger negative penalty for smaller remainders within this range,
    # discouraging the creation of unusable gaps.
    penalty_scores = - (fragment_upper_bound - remaining_after_fit_for_fitting_bins[small_remainder_mask_local]) * SMALL_REMAINDER_PENALTY_MULTIPLIER
    priorities[can_fit_mask][small_remainder_mask_local] = penalty_scores

    # --- 3. General Case: Best-Fit + Consolidation ---
    # For all other bins that can fit the item but are not perfect fits and do not result in small fragments,
    # apply a combination of Best-Fit and a preference for already fuller bins.
    
    # Create a mask for bins that are eligible for this general case calculation.
    # These are bins within `can_fit_mask` that were not assigned a score by the perfect fit or small remainder logic.
    general_case_eligible_mask = ~perfect_fit_mask_local & ~small_remainder_mask_local
    
    if np.any(general_case_eligible_mask):
        # Extract the original remaining capacities for these specific bins.
        current_remaining_capacity_general = bins_remain_cap[can_fit_mask][general_case_eligible_mask]
        
        # Extract the remaining capacity after fitting the item for these specific bins.
        remaining_capacity_after_fit_general = remaining_after_fit_for_fitting_bins[general_case_eligible_mask]

        # Component 1: Best-Fit score. A negative weight makes smaller `remaining_capacity_after_fit`
        # (tighter fits) result in a higher score.
        fit_score = remaining_capacity_after_fit_general * fit_score_weight

        # Component 2: Current Bin Fullness score (consolidation bias). A negative weight makes
        # smaller `current_remaining_capacity` (fuller bins) result in a higher score.
        fullness_score = current_remaining_capacity_general * current_fullness_weight

        # Combine the scores for the general case bins.
        priorities[can_fit_mask][general_case_eligible_mask] = fit_score + fullness_score

    return priorities
```
