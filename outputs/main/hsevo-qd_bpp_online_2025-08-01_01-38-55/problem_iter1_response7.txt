```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    
    My boys, we want to pack these little items like electrons finding their lowest energy states!
    We're looking for stability here. When a particle (our 'item') settles into a potential well (a 'bin'),
    it seeks to minimize its potential energy. In bin packing, this means minimizing the 'waste'
    or the 'void' left in the bin. A bin that's nearly full or perfectly filled after receiving an item?
    That's a stable, low-energy state, and that's where we want our particle to go!

    So, let's quantify this 'stability'. The less capacity left over, the more stable the bin's state.
    A perfect fit, leaving zero capacity, is the absolute ground state, score 1!
    As the leftover space increases, the "energy" of that state rises, and its probability (or priority)
    of being chosen should drop sharply. An exponential decay feels right here â€“ like probabilities in
    a Boltzmann distribution, favoring the lower energy configurations.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score means higher priority.
    """
    # First, let's assume no bin is suitable (very low priority, like an infinitely high energy barrier).
    # We use -np.inf to ensure that if a valid bin exists, it will always be chosen over an invalid one.
    # Ensure the scores array is float to accommodate -np.inf and exp results.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify the "quantum wells" where our "item-particle" can actually fit.
    # No quantum tunneling here, folks; if it doesn't fit, it just doesn't fit!
    can_fit_mask = bins_remain_cap >= item

    # For those bins where the item *can* fit, let's calculate the 'energy' of the new state.
    # This 'energy' is simply the leftover space. We want to minimize this.
    remaining_after_placement = bins_remain_cap[can_fit_mask] - item

    # Now, assign the priority based on this energy.
    # The lower the 'energy' (less remaining_after_placement), the higher the priority.
    # The exponential function `exp(-x)` means:
    # - If `x` (leftover) is 0 (perfect fit), score is `exp(0) = 1.0`. Highest priority!
    # - If `x` is small, score is close to 1.0.
    # - If `x` is large, score rapidly drops towards 0.
    # This precisely mimics our quantum intuition: perfect fits are paramount,
    # and "good" fits are heavily preferred over "okay" fits.
    scores[can_fit_mask] = np.exp(-remaining_after_placement)

    return scores
```
