```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float = 1.0) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing an adaptive Best-Fit-like heuristic with fragmentation avoidance.

    This version extends the Best-Fit strategy by dynamically penalizing bins
    that, after placing the item, would be left with a very small, potentially
    unusable remaining capacity. The goal is to encourage either a perfect fit
    (remaining capacity = 0) or to leave a sufficiently large, more useful
    remaining capacity, thereby mitigating the accumulation of many fragmented bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacity: The total capacity of a single bin. Default is 1.0,
                      assuming item sizes and bin capacities are normalized
                      relative to this value (e.g., items are between 0 and 1).

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to a very low number. This ensures that
    # bins which cannot accommodate the item are effectively deprioritized.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity for bins where the item can fit.
    rem_after_fit = bins_remain_cap[can_fit_mask] - item

    # --- Base Priority: Best-Fit Component ---
    # We want to minimize remaining capacity, so a smaller positive remainder
    # results in a larger (less negative) priority score. A perfect fit (0 remaining)
    # gets a score of 0, which is the highest possible base priority.
    base_priorities = -rem_after_fit

    # --- Adaptive Adjustment: Fragmentation Avoidance Penalty ---
    # This mechanism dynamically adjusts priorities based on the resulting
    # remaining capacity's "usefulness" to prevent accumulating sub-optimal states.

    # FRAGMENTATION_THRESHOLD: Defines what is considered a "very small" remaining capacity.
    # Remnants smaller than this (but greater than 0) will incur a penalty.
    # Tunable parameter: A percentage of the bin's total capacity.
    FRAGMENTATION_THRESHOLD = 0.15 * bin_capacity

    # PENALTY_STRENGTH: Controls how heavily these fragmented capacities are penalized.
    # Tunable parameter: Higher values will more strongly discourage small remnants.
    PENALTY_STRENGTH = 0.75 # Increased from 0.5 to make it more impactful

    # Initialize an array to hold the adaptive penalty for relevant bins
    adaptive_penalty = np.zeros_like(rem_after_fit)

    # Identify bins where a penalty should be applied:
    # 1. The remaining capacity is greater than 0 (not a perfect fit).
    # 2. The remaining capacity is less than or equal to the FRAGMENTATION_THRESHOLD.
    penalty_target_mask = (rem_after_fit > 0) & (rem_after_fit <= FRAGMENTATION_THRESHOLD)

    if np.any(penalty_target_mask):
        # Calculate the penalty for affected bins.
        # The penalty is scaled: it's strongest when rem_after_fit approaches 0,
        # and diminishes to 0 as rem_after_fit approaches FRAGMENTATION_THRESHOLD.
        penalty_scale = (FRAGMENTATION_THRESHOLD - rem_after_fit[penalty_target_mask]) / FRAGMENTATION_THRESHOLD
        adaptive_penalty[penalty_target_mask] = PENALTY_STRENGTH * penalty_scale

    # Combine the base Best-Fit priority with the calculated adaptive penalty.
    # The penalty is subtracted, making these bins less desirable.
    priorities[can_fit_mask] = base_priorities - adaptive_penalty

    return priorities
```
