```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, BIN_MAX_CAPACITY: float = 1.0) -> np.ndarray:
    """Prioritizes best fits, penalizes tiny fragments with a continuous function,
    and subtly favors bins that are already fuller, enhancing overall solution structure.
    """
    # Initialize all priorities to a very low number for bins that cannot fit the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        # If no bin can accommodate the item, return the initialized priorities,
        # indicating that a new bin must be opened.
        return priorities

    # Store original remaining capacities for bins that can fit the item (for consolidation bonus).
    original_remaining_capacity_valid_bins = bins_remain_cap[can_fit_mask]
    # Calculate the remaining capacity for these bins after placing the item.
    remaining_capacity_after_fit = original_remaining_capacity_valid_bins - item

    # --- Component 1: Best-Fit Base Score ---
    # This encourages tight fits: smaller `remaining_capacity_after_fit` yields a higher score.
    # A perfect fit (remainder = 0) gets the highest base score of 0.
    base_fit_score = -remaining_capacity_after_fit

    # --- Component 2: Continuous Fragmentation Penalty ---
    # This component discourages creating very small, potentially unusable, fragments of space.
    # The penalty is continuous: highest for remainders just above zero, smoothly decaying to zero.
    
    # Define an adaptive threshold for what constitutes a "small fragment".
    # It considers both a minimum absolute size (relative to max bin capacity)
    # and a relative size (to the current item's size), capped to a reasonable fraction.
    FRAGMENT_THRESHOLD = max(0.01 * BIN_MAX_CAPACITY, 0.05 * item)
    FRAGMENT_THRESHOLD = min(FRAGMENT_THRESHOLD, 0.2 * BIN_MAX_CAPACITY) 

    fragment_penalty = np.zeros_like(remaining_capacity_after_fit)

    # Identify non-zero remainders within the fragmentation zone.
    # Using a small epsilon (1e-9) to account for floating-point inaccuracies
    # when checking for truly zero remainder (perfect fit).
    is_fragment_zone = (remaining_capacity_after_fit > 1e-9) & \
                       (remaining_capacity_after_fit < FRAGMENT_THRESHOLD)

    if np.any(is_fragment_zone):
        # Determine the maximum penalty magnitude. This is a tunable parameter,
        # scaled by BIN_MAX_CAPACITY for consistent behavior across different problem scales.
        PENALTY_MAGNITUDE = 0.25 * BIN_MAX_CAPACITY 
        
        # Calculate the relative position of the fragment within the threshold:
        # close to 0 for very small fragments, close to 1 for fragments near the threshold.
        relative_fragment_size = remaining_capacity_after_fit[is_fragment_zone] / FRAGMENT_THRESHOLD
        
        # Apply a non-linear penalty. It's highest when remainder is near zero,
        # and smoothly decays to zero as the remainder approaches FRAGMENT_THRESHOLD.
        # The power (e.g., 2) makes the penalty steeper for very small fragments.
        fragment_penalty[is_fragment_zone] = -PENALTY_MAGNITUDE * ((1 - relative_fragment_size)**2)

    # --- Component 3: Bin Fullness / Consolidation Bonus ---
    # This component provides a subtle positive bias towards bins that are already
    # relatively full *before* the current item is placed. This encourages consolidating
    # items into fewer bins, promoting the "closure" of bins and preventing items
    # from being spread too thinly across many bins.
    
    # Calculate the current fullness percentage of the bins that can fit the item.
    current_bin_fullness = (BIN_MAX_CAPACITY - original_remaining_capacity_valid_bins) / BIN_MAX_CAPACITY
    
    # Determine the maximum bonus magnitude. This is a tunable parameter,
    # typically smaller than the Best-Fit or Penalty magnitudes to avoid overriding them.
    CONSOLIDATION_BONUS_MAGNITUDE = 0.05 * BIN_MAX_CAPACITY
    
    # Apply a non-linear bonus (e.g., squared) to further emphasize very full bins,
    # providing a stronger incentive to fill them up.
    consolidation_bonus = CONSOLIDATION_BONUS_MAGNITUDE * (current_bin_fullness**2)

    # --- Combine All Scores ---
    # The final priority score is a sum of the Best-Fit preference,
    # the continuous fragmentation penalty, and the bin consolidation bonus.
    combined_score = base_fit_score + fragment_penalty + consolidation_bonus

    # Assign the calculated combined scores back to the appropriate bins in the priorities array.
    priorities[can_fit_mask] = combined_score

    return priorities
```
