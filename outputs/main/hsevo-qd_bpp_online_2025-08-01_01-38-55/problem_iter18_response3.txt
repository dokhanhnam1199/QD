```python
import numpy as np

class BinPackingHeuristics:
    @staticmethod
    def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
        """Returns priority with which we want to add item to each bin,
        implementing a Best-Fit-like heuristic.
        Bins that fit the item are prioritized based on how little space
        would be left after placing the item (i.e., tighter fits get higher scores).
        Bins that cannot fit the item receive a very low priority.

        Args:
            item: Size of item to be added to the bin.
            bins_remain_cap: Array of remaining capacities for each bin.

        Return:
            Array of same size as bins_remain_cap with priority score of each bin.
        """
        # Initialize all priorities to a very low number. This ensures that
        # bins which cannot accommodate the item are effectively deprioritized.
        # Using -np.inf makes them guaranteed to not be chosen if any valid bin exists.
        priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

        # Create a boolean mask for bins where the item can actually fit.
        can_fit_mask = bins_remain_cap >= item

        # For bins that can fit the item, calculate the remaining capacity after placement.
        # We want to minimize this remaining capacity to achieve a "best fit".
        # By taking the negative of the remaining capacity, a smaller positive remainder
        # (i.e., a tighter fit) results in a larger (less negative) priority score.
        # A perfect fit (remaining_capacity == 0) results in a score of 0.
        # A bin that is barely larger than the item will get a score close to 0.
        # A bin much larger than the item will get a more negative score.
        remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item
        priorities[can_fit_mask] = -remaining_capacity_after_fit

        return priorities

    @staticmethod
    def priority_v2(item: float, bins_remain_cap: np.ndarray, max_bin_capacity: float = 1.0) -> np.ndarray:
        """Returns priority with which we want to add item to each bin.
        This heuristic aims to balance Best-Fit (tight fits) with Bin Consolidation
        (preferring to fill already used bins) and a strong preference for perfect fits,
        to achieve better long-term container organization and prevent unusable voids.

        The scoring combines:
        1. A core Best-Fit component: prioritizes bins that result in smaller remaining capacity.
        2. A Bin Consolidation Bonus: rewards placing items into bins that are already more filled,
           encouraging the use of existing bins over new or nearly empty ones. This helps in
           "long-term container organization" and "preventing large unproductive empty regions."
        3. A Perfect Fit Premium: gives an exceptionally high score for items that fit perfectly,
           promoting "complete space utilization" and closing of bins, thereby reducing
           "small, unfillable gaps" by eliminating them entirely.

        Args:
            item: Size of item to be added to the bin.
            bins_remain_cap: Array of remaining capacities for each bin.
            max_bin_capacity: The total capacity of each bin. Defaults to 1.0, a common
                              normalization in Bin Packing Problems. This value is crucial
                              for calculating the 'filled' portion of a bin.

        Return:
            Array of same size as bins_remain_cap with priority score of each bin.
        """
        # Initialize all priorities to a very low number to deprioritize bins that cannot fit.
        priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

        # Identify bins where the item can actually fit.
        can_fit_mask = bins_remain_cap >= item
        fit_indices = np.where(can_fit_mask)[0]

        # If no bin can fit the item, return the initialized priorities (all -inf).
        if not np.any(can_fit_mask):
            return priorities

        # --- Calculate Components for Scoring ---

        # 1. Potential remaining capacity after placing the item.
        remaining_capacity_after_fit = bins_remain_cap[fit_indices] - item

        # 2. Base score (Best-Fit component):
        # A smaller `remaining_capacity_after_fit` yields a higher (less negative) score.
        # A perfect fit (0 remaining) gets a 0 from this component.
        base_scores = -remaining_capacity_after_fit

        # 3. Bin Consolidation Bonus:
        # This component rewards bins that are already more filled.
        # `(max_bin_capacity - bins_remain_cap[fit_indices])` is the amount of space already occupied.
        # Normalize this by `max_bin_capacity` to get a ratio from 0 (empty) to 1 (full).
        filled_ratio = (max_bin_capacity - bins_remain_cap[fit_indices]) / max_bin_capacity
        
        # The weight determines the influence of the consolidation bonus.
        # It should be significant enough to matter when base_scores are close,
        # but not so high that it completely overrides the Best-Fit principle for vastly different fits.
        # A value like 0.1-0.3 (as a fraction of max_bin_capacity) provides a moderate influence.
        consolidation_bonus_weight = 0.2 * max_bin_capacity 
        consolidation_bonus = consolidation_bonus_weight * filled_ratio

        # 4. Perfect Fit Premium:
        # A very high constant bonus to guarantee that perfect fits are always chosen
        # over any non-perfect fit, regardless of other scoring components.
        # This value should be greater than the maximum possible sum of `base_scores` (which is 0)
        # and `consolidation_bonus` (which is `consolidation_bonus_weight`).
        PERFECT_FIT_PREMIUM = max_bin_capacity + consolidation_bonus_weight + 1.0 

        # --- Combine Components ---
        current_priorities = base_scores + consolidation_bonus

        # Apply the perfect fit premium where applicable
        perfect_fit_mask_local = (remaining_capacity_after_fit == 0)
        current_priorities[perfect_fit_mask_local] += PERFECT_FIT_PREMIUM

        # Assign the calculated priorities back to the main array for fitting bins.
        priorities[fit_indices] = current_priorities

        return priorities
```
