```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                bin_capacity: float,
                fullness_threshold_ratio: float = 0.95,
                fullness_bonus_weight: float = 1.0,
                perfect_fit_bonus_weight: float = 10.0) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    combining Best-Fit with a strategic bonus for bins that become very full
    or perfectly full after placement. This heuristic aims to not only find
    the tightest fit but also to encourage "closing" bins (making them very full)
    to minimize the total number of bins used.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacity: The total capacity of a single bin. This is crucial for
                      calculating the "fullness" percentage of a bin after
                      an item is placed.
        fullness_threshold_ratio: A float between 0 and 1. If a bin's filled
                                  percentage after placing the item meets or
                                  exceeds this threshold, it receives an
                                  additional bonus score. This encourages
                                  bins to be filled completely.
        fullness_bonus_weight: The additional priority score given for meeting
                               the `fullness_threshold_ratio`. A higher value
                               makes filling bins to near capacity more attractive.
        perfect_fit_bonus_weight: The additional priority score given if the item
                                  perfectly fills the remaining space of a bin
                                  (i.e., remaining capacity becomes exactly 0).
                                  This is typically a strong incentive to
                                  "close" a bin optimally.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
        Bins that cannot fit the item receive a very low (negative infinity) priority.
    """
    if not (0 <= fullness_threshold_ratio <= 1):
        raise ValueError("fullness_threshold_ratio must be between 0 and 1.")
    if bin_capacity <= 0:
        raise ValueError("bin_capacity must be a positive number.")

    # Initialize all priorities to a very low number. Bins that cannot fit
    # the item will retain this value, ensuring they are not chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # If no bin can fit the item, return the initialized priorities (all -inf for valid bins).
    # This implicitly means a new bin would be opened by the higher-level logic.
    if not np.any(can_fit_mask):
        return priorities

    # Extract current capacities for only the bins that can fit the item.
    fitting_bins_current_cap = bins_remain_cap[can_fit_mask]

    # 1. Base Best-Fit component:
    # We want to minimize the remaining capacity, so a smaller positive remainder
    # results in a larger (less negative) priority score. A perfect fit (0 remainder)
    # gets a score of 0 here.
    remaining_capacity_after_fit = fitting_bins_current_cap - item
    priorities[can_fit_mask] = -remaining_capacity_after_fit

    # 2. Strategic Bonus for "Very Full" or "Perfectly Full" Bins:
    # Calculate the total amount of space that would be occupied in the bin
    # if the current item is placed.
    new_filled_amount = bin_capacity - remaining_capacity_after_fit

    # Calculate the new filled percentage of the bin.
    # np.errstate is used to suppress potential division by zero warning
    # if bin_capacity somehow becomes zero, though checked by initial ValueError.
    with np.errstate(divide='ignore', invalid='ignore'):
        new_filled_percentage = new_filled_amount / bin_capacity
    
    # Identify bins that meet or exceed the fullness threshold.
    # This mask applies only to the `fitting_bins_current_cap` subset.
    fullness_bonus_mask_local = new_filled_percentage >= fullness_threshold_ratio
    
    # Apply the fullness bonus to the relevant bins.
    # The bonus is added to the existing Best-Fit score.
    priorities[can_fit_mask][fullness_bonus_mask_local] += fullness_bonus_weight

    # Identify bins where placing the item results in exactly 0 remaining capacity.
    perfect_fit_mask_local = remaining_capacity_after_fit == 0
    
    # Apply the perfect fit bonus. This bonus can stack with the general fullness bonus,
    # as a perfect fit will naturally result in 100% fullness (unless threshold > 1.0).
    priorities[can_fit_mask][perfect_fit_mask_local] += perfect_fit_bonus_weight

    return priorities
```
