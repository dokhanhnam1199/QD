```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, fit_weight: float = 1.0, consolidation_weight: float = 0.05) -> np.ndarray:
    """Combines Best-Fit with a continuous consolidation bias, prioritizing
    tighter fits and existing fuller bins. Tunable weights allow adaptation.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, return the deprioritized array.
    if not np.any(can_fit_mask):
        return priorities

    # Extract relevant data for bins that can fit the item
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # --- 1. Best-Fit Component: Prioritize minimizing wasted space ---
    # Score is the negative of the remaining capacity after placing the item.
    # A smaller remaining capacity (tighter fit) results in a score closer to zero (higher priority).
    base_fit_scores = -(fitting_bins_remain_cap - item)

    # --- 2. Continuous Consolidation Bias: Prioritize existing, partially filled bins ---
    # Calculate a score that incentivizes using bins that are already "less new"
    # or more filled. This is achieved by comparing each fitting bin's remaining
    # capacity against the maximum remaining capacity among all *currently available*
    # fitting bins. A larger difference indicates a more "used" bin.
    max_current_capacity = np.max(fitting_bins_remain_cap)
    
    # This score is zero for "new" bins (where remaining capacity equals max_current_capacity)
    # and positive for partially filled bins, increasing as the bin is more filled.
    consolidation_scores = (max_current_capacity - fitting_bins_remain_cap)

    # --- Combined Weighted Score ---
    # Sum the weighted components. 'fit_weight' typically dominates, while
    # 'consolidation_weight' provides a subtle, continuous nudge towards consolidation.
    combined_scores = (fit_weight * base_fit_scores) + (consolidation_weight * consolidation_scores)

    # Assign the calculated scores to the fitting bins in the main priority array.
    priorities[can_fit_mask] = combined_scores

    return priorities
```
