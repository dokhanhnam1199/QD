```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using an inverse relationship to residual capacity, aggressively favoring perfect or near-perfect fits.
    This non-linear scaling strongly incentivizes tight packing and rapid bin completion, improving overall space utilization.
    """
    # Calculate the theoretical remaining capacity for each bin after placing the item.
    remaining_after_fit = bins_remain_cap - item

    # Initialize all scores to a very low value, effectively disqualifying any bin
    # that cannot accommodate the item (i.e., where remaining_after_fit would be negative).
    scores = np.full_like(bins_remain_cap, -np.inf)

    # Identify which bins can actually fit the item (remaining capacity non-negative).
    can_fit_mask = remaining_after_fit >= 0

    # Get the remaining capacities for only the bins that can fit the item.
    valid_remaining = remaining_after_fit[can_fit_mask]

    # Identify bins that result in a perfect fit (zero remaining capacity).
    perfect_fit_mask_local = (valid_remaining == 0)

    # Identify bins that result in a positive, non-zero remaining capacity.
    positive_remaining_mask_local = (valid_remaining > 0)

    # Assign an extremely high priority (infinity) to perfect fits.
    # This ensures that if a perfect fit is available, it will always be chosen.
    scores[can_fit_mask][perfect_fit_mask_local] = np.inf

    # For bins that result in a positive remaining capacity, assign a score
    # based on the inverse of that remaining capacity. This creates a non-linear
    # preference: smaller positive residuals get disproportionately higher scores.
    # A small epsilon is added to the denominator to prevent division by zero
    # for extremely small positive values (though perfect zeros are handled above)
    # and to ensure numerical stability.
    epsilon = 1e-9
    scores[can_fit_mask][positive_remaining_mask_local] = 1.0 / (valid_remaining[positive_remaining_mask_local] + epsilon)

    return scores
```
