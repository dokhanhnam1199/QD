```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                w_tight_fit: float = 1.0, w_fullness: float = 0.1,
                perfect_fit_bonus: float = 1000.0) -> np.ndarray:
    """Combines Best-Fit and Bin Fullness, strongly prioritizing perfect fits.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        w_tight_fit: Weight for the "tight fit" component.
        w_fullness: Weight for the "bin fullness" component.
        perfect_fit_bonus: A large bonus applied to bins that perfectly fit the item.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to a very low number to deprioritize unfit bins.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    if fitting_bins_remain_cap.size == 0:
        return priorities # No bin can accommodate the item.

    # Calculate "Tight Fit" score: rewards smaller remaining space after placement.
    # item - fitting_bins_remain_cap -> smaller (more negative) for loose fit, closer to 0 for tight fit.
    score_tight_fit = item - fitting_bins_remain_cap

    # Calculate "Bin Fullness" score: rewards bins that are already more filled.
    # -fitting_bins_remain_cap -> smaller (more negative) for empty bins, closer to 0 for full bins.
    score_fullness = -fitting_bins_remain_cap

    # Combine the scores using tunable weights.
    combined_score = (w_tight_fit * score_tight_fit) + (w_fullness * score_fullness)

    # Identify and apply a significant bonus for perfect fits.
    # A perfect fit leaves exactly 0 remaining capacity after the item is placed.
    perfect_fit_mask_in_fitting = np.isclose(fitting_bins_remain_cap, item)
    combined_score[perfect_fit_mask_in_fitting] += perfect_fit_bonus

    # Apply the calculated scores to the valid bins in the priorities array.
    priorities[can_fit_mask] = combined_score

    return priorities
```
