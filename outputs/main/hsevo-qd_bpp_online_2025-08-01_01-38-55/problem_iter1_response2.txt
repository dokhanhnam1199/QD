```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    As Newton, I observe that nature abhors a vacuum and tends towards the most
    efficient arrangement, minimizing wasted space. For our bins, this translates
    to the principle of 'Best Fit'. We seek to place an item into the bin where it
    will occupy the space most compactly, leaving the smallest possible remainder.
    This action effectively "fills" the bin most completely, making it less likely
    to accommodate future large items and pushing it towards completion, thereby
    conserving the larger, more versatile spaces in other bins.

    A bin that precisely fits an item (leaving zero remaining capacity) is akin to
    matter perfectly settling into its equilibrium position, achieving maximum density.
    Thus, such a fit should be of paramount priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        Higher score indicates higher priority.
    """
    
    # Initialize priorities. Bins that cannot fit the item are assigned a
    # very low priority, effectively making them ineligible.
    # This prevents the item from being "forced" into an incompatible space.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify all bins where the item can physically fit.
    # This is our domain of possible interactions.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the 'residual space' if the item were placed into the bins
    # that can accommodate it. This is the "void" left behind.
    residual_space = bins_remain_cap[can_fit_mask] - item

    # To ensure perfect fits (residual_space == 0) receive an extremely high,
    # but finite, priority without causing division by zero, we add a tiny epsilon.
    # This models an infinite preference for perfect compaction.
    epsilon = 1e-9 

    # The priority is inversely proportional to the residual space.
    # A smaller residual space indicates a 'tighter fit' and thus a higher priority.
    # This mirrors the natural tendency towards minimum potential energy or maximum density.
    priorities[can_fit_mask] = 1.0 / (residual_space + epsilon)
    
    return priorities
```
