```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using a simple Best-Fit heuristic, minimizing leftover space.
    Rewards bins that result in the smallest remaining capacity after fitting, naturally
    prioritizing perfect fits without aggressive non-linear weighting, favoring robust overall performance.
    """
    # Initialize all priorities to a very low number to effectively deprioritize bins
    # where the item cannot fit, ensuring they are never chosen if a valid bin exists.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually be placed.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity for only those bins that can accommodate the item.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item

    # --- Simple Best-Fit Scoring Strategy ---
    # The core idea of Best-Fit is to minimize the "leftover" space.
    # By taking the negative of the remaining capacity, we ensure:
    # 1. Smaller positive remaining capacities result in scores closer to zero (higher priority).
    # 2. A perfect fit (0 remaining capacity) results in a score of 0, which is the highest possible.
    # This straightforward linear approach aligns with robustness and avoids overly aggressive
    # non-linear incentives that might hinder global performance.
    scores_for_fitting_bins = -remaining_capacity_after_fit

    # Assign the calculated scores to the respective bins identified by the mask.
    priorities[can_fit_mask] = scores_for_fitting_bins

    return priorities
```
