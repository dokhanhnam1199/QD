```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                fit_score_weight: float = 1.0,
                unfit_bin_priority: float = -np.inf) -> np.ndarray:
    """Returns priority for bin selection, applying a tunable Best-Fit.
    Prioritizes tighter fits with a customizable weight, and distinct low priority for unfit bins.
    """
    # Initialize priorities, setting a configurable low score for bins that cannot fit the item.
    priorities = np.full_like(bins_remain_cap, unfit_bin_priority, dtype=float)

    # Identify bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate remaining capacity for bins that can fit the item.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item

    # Apply Best-Fit logic: smaller remaining capacity leads to higher priority.
    # The 'fit_score_weight' (expected positive) amplifies or dampens this preference.
    priorities[can_fit_mask] = -fit_score_weight * remaining_capacity_after_fit

    return priorities
```
