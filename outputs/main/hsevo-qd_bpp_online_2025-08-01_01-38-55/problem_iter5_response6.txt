```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority for each bin, prioritizing best-fit. Tighter fits (less remaining capacity)
    get higher scores. Bins unable to fit the item receive an extremely low priority.
    """
    # Initialize priorities. Bins that cannot fit the item are assigned negative infinity,
    # ensuring they are never chosen if any valid bin exists. This promotes robustness.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a mask for bins where the item can be placed.
    can_fit_mask = bins_remain_cap >= item

    # For valid bins, calculate the remaining capacity after the item is placed.
    # To implement Best-Fit, we want to minimize this remaining capacity.
    # By negating this value, smaller positive remainders (tighter fits) result
    # in larger (less negative) priority scores, aligning with "simplicity" and
    # "robustness" by using a natural scaling factor of -1 instead of an arbitrary weight.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item
    priorities[can_fit_mask] = -remaining_capacity_after_fit

    return priorities
```
