```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority for online Bin Packing using a Best-Fit-First-Fit strategy.
    Prioritizes bins that offer the tightest fit (least remaining space).
    For equally good fits, earlier bins are preferred for deterministic choice.
    Bins unable to fit the item receive very low priority.
    """
    # Initialize all priorities to a very low number, effectively deprioritizing
    # bins that cannot accommodate the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    # For fitting bins, calculate the remaining capacity after placing the item.
    # We aim to minimize this remaining capacity (Best-Fit principle).
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item

    # Core Best-Fit scoring: a smaller remaining capacity (tighter fit) results in a
    # larger (less negative, closer to zero) priority score.
    # Additionally, apply a small linear penalty based on the bin's original index.
    # This implements a First-Fit tie-breaking rule, favoring earlier bins
    # when multiple bins offer an identical best fit, promoting deterministic behavior
    # while maintaining the simplicity and robustness advised by analysis.
    epsilon = 1e-6  # A very small positive number to ensure tie-breaking effect is minimal
    fitting_bin_indices = np.arange(len(bins_remain_cap))[can_fit_mask]
    
    priorities[can_fit_mask] = -remaining_capacity_after_fit - (fitting_bin_indices * epsilon)

    return priorities
```
