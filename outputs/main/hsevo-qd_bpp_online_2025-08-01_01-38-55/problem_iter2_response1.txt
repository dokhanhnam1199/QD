```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit strategy with non-linear inverse scoring to heavily
    reward bins resulting in the smallest remaining capacity, prioritizing near-perfect fits.
    """
    # Initialize priorities. Bins that cannot fit the item are given an
    # infinitely low priority, ensuring they are not considered.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins with sufficient remaining capacity to fit the item.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the residual capacity (space remaining) for eligible bins.
    residual_capacity = bins_remain_cap[can_fit_mask] - item

    # Add a small epsilon to prevent division by zero when residual_capacity is 0
    # (i.e., a perfect fit). This also ensures positive, finite priorities.
    epsilon = 1e-9

    # Assign priority using an inverse relationship: smaller residual capacity
    # results in a significantly higher positive priority. This non-linear
    # scaling strongly favors "tightest fits".
    priorities[can_fit_mask] = 1.0 / (residual_capacity + epsilon)

    return priorities
```
