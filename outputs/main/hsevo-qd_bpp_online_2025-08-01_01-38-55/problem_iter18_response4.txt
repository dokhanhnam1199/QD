```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This heuristic extends the Best-Fit approach by specifically:
    1. Prioritizing perfect fits (leaving zero space) with a very high bonus.
    2. Penalizing the creation of very small, non-zero "fragmented" gaps,
       to encourage more effective use of remaining space in other bins.
    3. Applying standard Best-Fit logic for other scenarios (favoring tighter fits).

    This strategy aims for local tight fits while also considering the long-term
    bin organization by avoiding hard-to-fill small voids and encouraging
    complete space utilization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to a very low number. Bins that cannot
    # accommodate the item are effectively deprioritized, ensuring they are
    # not chosen if any valid bin exists.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # --- Heuristic Parameters ---
    # A small epsilon for robust floating-point comparisons to zero.
    EPSILON = 1e-9
    # A significant positive bonus for a perfect fit. This ensures that
    # if an item perfectly fills a bin, that bin is chosen above all others.
    PERFECT_FIT_BONUS = 1000.0
    # The threshold defining a "small gap". If the remaining capacity after
    # placing an item is greater than 0 but less than this threshold,
    # it's considered a potentially unusable fragmented space.
    # This value is a heuristic and might need tuning for specific problem scales.
    SMALL_GAP_THRESHOLD = 0.1
    # A penalty applied to bins that would result in a small, fragmented gap.
    # This penalty should be large enough to make these options less desirable
    # than bins that leave more substantial, potentially more useful remaining space.
    SMALL_GAP_PENALTY = 100.0
    # ----------------------------

    # Identify bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item
    
    # Extract remaining capacities for only the bins that can fit the item.
    fitting_bins_rem_cap = bins_remain_cap[can_fit_mask]
    remaining_capacity_after_fit = fitting_bins_rem_cap - item

    # Create masks for different fitting scenarios within the 'can_fit_mask' subset
    # 1. Perfect Fit: Remaining capacity is exactly zero.
    perfect_fit_sub_mask = np.isclose(remaining_capacity_after_fit, 0.0, atol=EPSILON)

    # 2. Small Gap Fit: Remaining capacity is non-zero but below the defined small gap threshold.
    small_gap_fit_sub_mask = (remaining_capacity_after_fit > EPSILON) & \
                             (remaining_capacity_after_fit < SMALL_GAP_THRESHOLD)

    # 3. Standard Best Fit: Remaining capacity is equal to or above the small gap threshold.
    # This captures all other valid fits that are not perfect or small gaps.
    standard_best_fit_sub_mask = ~perfect_fit_sub_mask & ~small_gap_fit_sub_mask & (remaining_capacity_after_fit >= 0)

    # Apply scores based on the determined fitting scenarios
    
    # Assign the high bonus for perfect fits.
    priorities[can_fit_mask][perfect_fit_sub_mask] = PERFECT_FIT_BONUS

    # Apply penalty for creating small, potentially unusable gaps.
    # The score is made more negative than standard best-fit options.
    priorities[can_fit_mask][small_gap_fit_sub_mask] = \
        -remaining_capacity_after_fit[small_gap_fit_sub_mask] - SMALL_GAP_PENALTY

    # For standard best-fit scenarios, prioritize tighter fits (smaller remaining capacity).
    # This is done by taking the negative of the remaining capacity, so a smaller positive
    # remainder results in a higher (less negative) priority score.
    priorities[can_fit_mask][standard_best_fit_sub_mask] = \
        -remaining_capacity_after_fit[standard_best_fit_sub_mask]

    return priorities
```
