```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                fit_score_weight: float = 1.0,
                consolidation_bonus_weight: float = 0.01,
                default_low_priority: float = -np.inf) -> np.ndarray:
    """Returns priority for adding an item, combining Best-Fit with a tunable consolidation bias.
    Prioritizes tight fits and rewards using existing, partially-filled bins to consolidate space,
    enhancing global flexibility through adaptable parameters.
    """
    # Initialize all priorities to a very low number for bins that cannot fit.
    priorities = np.full_like(bins_remain_cap, default_low_priority, dtype=float)

    # Identify bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, return the deprioritized array.
    if not np.any(can_fit_mask):
        return priorities

    # --- Tunable Best-Fit Logic ---
    # Calculate the remaining capacity if the item is placed in fitting bins.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item

    # Base score: Smaller remaining capacity means a tighter fit, which is better.
    # The score is amplified by 'fit_score_weight', which should be positive to
    # promote tighter fits (i.e., a smaller negative value is a higher priority).
    base_scores = fit_score_weight * (-remaining_capacity_after_fit)

    # --- Tunable Consolidation Bias ---
    # Identify bins that are NOT "newly opened" (i.e., they are already partially filled).
    # This is true if their current capacity is strictly less than the maximum observed capacity
    # among *currently available* bins that can fit the item.
    max_current_capacity_among_fitting_bins = np.max(bins_remain_cap[can_fit_mask])
    is_partially_filled = bins_remain_cap[can_fit_mask] < max_current_capacity_among_fitting_bins

    # Apply a tunable bonus to partially filled bins to encourage consolidation.
    adjusted_scores = base_scores
    adjusted_scores[is_partially_filled] += consolidation_bonus_weight

    # Assign the calculated scores to the fitting bins in the main priority array.
    priorities[can_fit_mask] = adjusted_scores

    return priorities
```
