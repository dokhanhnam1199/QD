```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Inspired by the principle of elegant efficiency and the 'relativity'
    of an item's volume to the available space within a container, this
    heuristic aims for the 'best fit'. We seek to minimize the void space
    that remains after an item is placed, thereby ensuring the most
    compact packing possible for the individual placement decision.

    A bin is prioritized if, after accommodating the item, it leaves the
    smallest positive residual capacity. This preserves larger gaps in other
    bins for future, potentially larger, items, or simply achieves a tighter
    overall packing. Bins that cannot fit the item are given an infinitesimally
    small priority, effectively disqualifying them.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A lower positive difference (bins_remain_cap - item) results in a
        higher (less negative) priority score.
    """
    # Calculate the theoretical remaining capacity for each bin after placing the item.
    # This is a measure of the "excess space" or "tightness of fit".
    remaining_after_fit = bins_remain_cap - item

    # Initialize all scores to a very low value. This effectively disqualifies
    # any bin that cannot accommodate the item, as their remaining_after_fit
    # would be negative, and we only update positive or zero remaining_after_fit.
    # We choose a sufficiently small negative number to ensure it's always lower
    # than any valid score.
    scores = np.full_like(bins_remain_cap, -np.inf)

    # Identify which bins can actually fit the item.
    # These are the bins where remaining_after_fit is non-negative.
    can_fit_mask = remaining_after_fit >= 0

    # For the bins that can fit the item, we assign a score.
    # The score is the negative of the remaining space.
    # This means a smaller remaining space (e.g., 0.1) yields a higher score (-0.1)
    # compared to a larger remaining space (e.g., 0.5 which yields -0.5).
    # The bin with the largest (least negative) score will be the one
    # with the smallest positive remaining capacity after placement (the best fit).
    scores[can_fit_mask] = -remaining_after_fit[can_fit_mask]

    return scores
```
