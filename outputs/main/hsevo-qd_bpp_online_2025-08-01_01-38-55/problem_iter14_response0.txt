```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best-Fit with a continuous consolidation bias.
    Prioritizes tight fits and actively filling existing bins by adding a bonus
    proportional to a bin's current fullness, with tunable weights.
    """
    # Initialize all priorities to a very low number, effectively deprioritizing
    # bins that cannot fit the item or are not considered.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, return the deprioritized array.
    if not np.any(can_fit_mask):
        return priorities

    # Extract remaining capacities for only the fitting bins.
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # --- Tunable Heuristic Parameters ---
    # Weight for the Best-Fit component. A negative value is used because a smaller
    # `remaining_after_fit` is better, leading to a higher (less negative) score.
    WEIGHT_BEST_FIT = -1.0 

    # Weight for the consolidation component. This encourages filling bins that are
    # already partially full. It should be a positive value, typically small enough
    # not to completely override a significantly better Best-Fit, but large enough
    # to influence decisions, especially in near-tie scenarios.
    WEIGHT_CONSOLIDATION = 0.01 
    
    # Assumed maximum capacity of a bin. This is common for normalized BPP instances.
    # Used to calculate the "current fullness" of a bin.
    BIN_CAPACITY = 1.0 
    # --- End Tunable Heuristic Parameters ---

    # 1. Best-Fit Component:
    # Calculate the remaining capacity if the item is placed.
    remaining_after_fit = fitting_bins_remain_cap - item
    # The score is proportional to the negative of this value:
    # A smaller `remaining_after_fit` (tighter fit) results in a score closer to 0 (less negative),
    # which is a higher priority.
    best_fit_scores = remaining_after_fit * WEIGHT_BEST_FIT

    # 2. Consolidation Component (Bin Fullness):
    # Calculate how full each bin currently is. A higher value means the bin is more full.
    current_fullness = BIN_CAPACITY - fitting_bins_remain_cap
    # Add a bonus proportional to the current fullness. This biases towards
    # filling existing, partially used bins.
    consolidation_scores = current_fullness * WEIGHT_CONSOLIDATION

    # Combine the two components to get the final priority score for fitting bins.
    combined_scores = best_fit_scores + consolidation_scores
    
    # Assign the calculated scores to the fitting bins in the main priority array.
    priorities[can_fit_mask] = combined_scores

    return priorities
```
