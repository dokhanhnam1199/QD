```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best-Fit with a continuous consolidation bias to prioritize filling existing,
    already-used bins more. It prioritizes tighter fits and rewards bins that are already partially full.
    """
    # Initialize all priorities to a very low number. Bins that cannot fit
    # the item will effectively not be chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, return the deprioritized array.
    if not np.any(can_fit_mask):
        return priorities

    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # --- Best-Fit Component (Primary Driver) ---
    # The base score is the negative of the remaining capacity after placing the item.
    # A smaller remaining capacity (tighter fit) results in a score closer to 0 (less negative),
    # making it a higher priority.
    best_fit_scores = -(fitting_bins_remain_cap - item)

    # --- Continuous Consolidation Bias Component (Secondary Driver) ---
    # This component encourages placing items into bins that are already partially filled,
    # thereby promoting consolidation and reducing the opening of new bins.

    # Heuristic for inferring 'initial_bin_capacity':
    # We assume the maximum remaining capacity among currently available bins represents
    # the original capacity of a "new" or "empty" bin. This provides a baseline for fullness.
    # Add a small epsilon to prevent division by zero in case max_possible_capacity is ever 0.
    max_possible_capacity = np.max(fitting_bins_remain_cap)
    epsilon = 1e-9

    # Calculate the "fullness" of each fitting bin *before* the item is placed.
    # Fullness ranges from 0 (for a 'new' bin) to a value approaching 1 (for a very full bin).
    bin_fullness = (max_possible_capacity - fitting_bins_remain_cap) / (max_possible_capacity + epsilon)

    # Define a tunable weight for the consolidation bonus.
    # This parameter allows adjusting how strongly the consolidation objective influences
    # the selection compared to the best-fit objective. A value of 0 results in pure Best-Fit.
    # A moderate positive value helps break ties and encourages consolidation without
    # overriding significantly better Best-Fit options.
    consolidation_weight = 0.5  # This value should be tuned for optimal performance.

    # The consolidation bonus is a continuous value, proportional to the bin's fullness.
    # This is more robust than a simple binary bonus based on a threshold.
    consolidation_bonus_scores = bin_fullness * consolidation_weight

    # --- Combine Scores ---
    # The total priority score is the sum of the Best-Fit score and the consolidation bonus.
    # This allows both objectives to contribute to the final decision.
    total_scores = best_fit_scores + consolidation_bonus_scores

    # Assign the calculated combined scores to the fitting bins in the main priority array.
    priorities[can_fit_mask] = total_scores

    return priorities
```
