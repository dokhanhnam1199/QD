```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using an inverse relationship to remaining capacity, aggressively seeking tight fits.

    This heuristic combines Best Fit with a non-linear scoring, giving
    disproportionately high preference to bins approaching a perfect fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
        A higher score indicates higher priority. Bins that cannot fit the item
        are assigned a very low (negative infinity) priority.
    """
    # Initialize priorities for all bins to a very low value.
    # This ensures bins that cannot fit the item are never chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify which bins can accommodate the current item.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit, calculate the "slack" â€“ the remaining capacity
    # after the item is placed.
    slack = bins_remain_cap[can_fit_mask] - item

    # Use a small epsilon to prevent division by zero if slack is exactly 0 (perfect fit).
    # A perfect fit (slack=0) should yield the highest possible score.
    # An inverse relationship (1 / (slack + epsilon)) achieves this:
    # - As slack approaches 0, priority approaches 1/epsilon (very high).
    # - As slack increases, priority decreases.
    epsilon = 1e-9 # A very small positive number

    # Calculate priority using the inverse of slack plus epsilon.
    # This aggressively favors bins that result in very small remaining space.
    priorities[can_fit_mask] = 1.0 / (slack + epsilon)

    return priorities
```
