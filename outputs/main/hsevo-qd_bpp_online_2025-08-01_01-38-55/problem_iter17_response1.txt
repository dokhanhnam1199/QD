```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                fit_score_weight: float = 1.0,
                consolidation_bonus_weight: float = 0.05,
                perfect_fit_bonus: float = 100.0,
                default_low_priority: float = -np.inf) -> np.ndarray:
    """Prioritizes perfect fits, then best-fit, and finally consolidates items into
    already partially-filled bins to minimize new bin usage and fragmentation.
    """
    # Initialize all priorities to a very low number for bins that cannot fit.
    priorities = np.full_like(bins_remain_cap, default_low_priority, dtype=float)

    # Identify bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, return the deprioritized array.
    if not np.any(can_fit_mask):
        return priorities

    # --- Base Score: Best-Fit Logic ---
    # Calculate the remaining capacity if the item is placed in fitting bins.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item

    # Base score: Smaller remaining capacity means a tighter fit, which is better.
    base_scores = fit_score_weight * (-remaining_capacity_after_fit)

    # --- Perfect Fit Bonus ---
    # Apply a significant bonus for exact fits (remaining capacity will be 0).
    perfect_fit_mask = remaining_capacity_after_fit == 0
    base_scores[perfect_fit_mask] += perfect_fit_bonus

    # --- Consolidation Bias ---
    # Identify bins that are not the "emptiest" among fitting bins.
    # This implicitly favors using existing, partially-filled bins over opening
    # potentially "new" (or most empty) bins that can also fit the item.
    max_current_capacity_among_fitting_bins = np.max(bins_remain_cap[can_fit_mask])
    is_not_newly_opened_bin_or_most_empty = bins_remain_cap[can_fit_mask] < max_current_capacity_among_fitting_bins

    # Apply a tunable bonus to these bins to encourage consolidation.
    adjusted_scores = base_scores
    adjusted_scores[is_not_newly_opened_bin_or_most_empty] += consolidation_bonus_weight

    # Assign the calculated scores to the fitting bins in the main priority array.
    priorities[can_fit_mask] = adjusted_scores

    return priorities
```
