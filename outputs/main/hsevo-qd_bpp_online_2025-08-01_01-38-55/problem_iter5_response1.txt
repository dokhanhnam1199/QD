```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Implements a simple, robust Best-Fit heuristic. Prioritizes bins that
    minimize leftover space, avoiding complex non-linear incentives for broader applicability.
    """
    # Initialize all priorities to a very low number, effectively deprioritizing
    # bins that cannot accommodate the item. Using -np.inf ensures they are never
    # chosen if any valid bin exists.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask to identify bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity in bins that can fit the item, after placement.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item

    # Apply a linear scoring strategy: the priority is the negative of the remaining capacity.
    # This prioritizes bins that result in the smallest leftover space.
    # A perfect fit (0 remaining capacity) will receive the highest possible score (0),
    # while larger remaining capacities result in progressively lower (more negative) scores.
    # This direct minimization of leftover space aligns with the "simpler linear Best-Fit"
    # identified as robust and effective.
    priorities[can_fit_mask] = -remaining_capacity_after_fit

    return priorities
```
