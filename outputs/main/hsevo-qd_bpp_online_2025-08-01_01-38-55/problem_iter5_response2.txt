```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using a robust Best-Fit approach.
    Tighter fits (smaller remaining capacity) get higher scores.
    Bins that cannot fit the item receive the lowest possible priority.
    """
    # Initialize all priorities to negative infinity. This ensures bins that cannot
    # accommodate the item are never chosen if any valid bin exists.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask to identify bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit, calculate the remaining capacity if the item were placed.
    # We want to minimize this remaining capacity (tighter fit).
    # By negating this value, smaller positive remainders result in higher (less negative) scores.
    # A perfect fit (0 remaining) gets a score of 0.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item
    priorities[can_fit_mask] = -remaining_capacity_after_fit

    return priorities
```
