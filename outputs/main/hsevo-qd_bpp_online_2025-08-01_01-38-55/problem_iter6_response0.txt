```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version enhances the Best-Fit heuristic by incorporating a "consolidation"
    bias. It subtly prioritizes placing items into bins that are already partially
    filled, over opening entirely new bins (or using effectively "new" bins that are
    still at their maximum initial capacity), provided the fit is comparable.
    This promotes filling existing bins first to reduce the total bin count,
    aligning with the goal of "Global Flexibility" and "overall solution quality"
    by preventing fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to a very low number. Bins that cannot fit
    # the item will effectively not be chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, return the deprioritized array.
    if not np.any(can_fit_mask):
        return priorities

    # --- Best-Fit (Base Logic) ---
    # Calculate the remaining capacity if the item is placed.
    # A smaller remaining capacity indicates a tighter fit.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item

    # The base score is the negative of the remaining capacity.
    # A perfect fit (0 remaining) gets a score of 0. Tighter fits (smaller positive
    # remaining capacity) get scores closer to 0 (less negative), making them higher priority.
    base_scores = -remaining_capacity_after_fit

    # --- Consolidation Bias (Domain Intelligence & Global Flexibility) ---
    # To encourage consolidation, we add a small bonus to bins that are already
    # partially filled. This nudges the algorithm to prefer an existing bin
    # over a new one (or one that's still at its maximum capacity) if the
    # Best-Fit scores are very close.

    # Infer "newly opened" bins: We assume that any bin whose remaining capacity
    # is equal to the maximum remaining capacity among all *currently available*
    # bins (that can fit the item) is considered effectively "new" or "empty".
    # This heuristic works well if bins are opened with a fixed capacity.
    max_current_capacity = np.max(bins_remain_cap[can_fit_mask])

    # Identify bins that are NOT "newly opened" (i.e., they are already partially filled).
    # This is true if their current capacity is strictly less than the maximum observed capacity.
    is_partially_filled = bins_remain_cap[can_fit_mask] < max_current_capacity

    # Define a small positive bonus. This value should be small enough not to
    # override a significantly better Best-Fit score, but large enough to
    # differentiate between closely scoring bins or break ties.
    # The choice of 0.01 is a simple, robust constant for floating-point comparisons.
    consolidation_bonus = 0.01

    # Apply the bonus to partially filled bins.
    adjusted_scores = base_scores
    adjusted_scores[is_partially_filled] += consolidation_bonus

    # Assign the calculated scores to the fitting bins in the main priority array.
    priorities[can_fit_mask] = adjusted_scores

    return priorities
```
