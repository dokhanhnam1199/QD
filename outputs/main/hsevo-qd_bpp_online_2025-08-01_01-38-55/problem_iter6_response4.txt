```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity_total: float) -> np.ndarray:
    """Returns a priority score for each bin, implementing a heuristic that
    prioritizes perfect fits and then efficiently utilizes remaining bins,
    while promoting "global flexibility" by avoiding traps of extremely small,
    unusable remaining capacities.

    Bins that cannot fit the item receive a very low priority.
    For bins that can fit:
    1.  **Perfect Fits**: Bins where the item fills the remaining capacity exactly
        (or very close to it, considering floating-point precision) receive the
        absolute highest priority. This is the ideal outcome, consolidating space perfectly.
    2.  **Non-Perfect Fits**: For all other bins that can fit the item, the primary
        priority is based on a Best-Fit approach (tighter fits are generally preferred).
        However, a small penalty is applied to these non-perfect fits. This ensures that
        a perfect fit (if available) is always chosen over any non-perfect fit,
        even a very tight one. This addresses the "limiting future options" by
        reducing the incentive to create extremely small, positive remaining capacities
        that are effectively unusable ("crumbs").

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacity_total: The maximum total capacity of a single bin.
                            This is used for contextual parameterization of scores.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Mask for bins where the item can physically fit
    can_fit_mask = bins_remain_cap >= item

    # Epsilon for robust floating-point comparisons, a standard practice.
    EPSILON = 1e-9

    # 1. Identify perfect fits
    # A perfect fit occurs when (bins_remain_cap - item) is effectively zero.
    perfect_fit_mask = can_fit_mask & np.isclose(bins_remain_cap, item, atol=EPSILON)

    # Assign a very high, distinct score for perfect fits.
    # This score must be guaranteed to be higher than any possible score from non-perfect fits.
    # A linear Best-Fit score ranges from 0 (perfect fit) down to -bin_capacity_total.
    # So, (bin_capacity_total + item + a small constant) will be sufficiently large.
    PERFECT_FIT_SCORE = bin_capacity_total + item + 1.0

    priorities[perfect_fit_mask] = PERFECT_FIT_SCORE

    # 2. Score non-perfect fits
    # These are bins that can fit the item, but not perfectly.
    non_perfect_and_fitting_mask = can_fit_mask & ~perfect_fit_mask

    # Calculate the base Best-Fit score for these bins.
    # Best-Fit prefers tighter fits: a smaller (remaining_capacity - item)
    # results in a larger (less negative) score: -(remaining_capacity - item).
    # This is equivalent to (item - remaining_capacity).
    base_bf_scores = item - bins_remain_cap[non_perfect_and_fitting_mask]

    # Apply a small penalty to all non-perfect fits.
    # This penalty ensures that any perfect fit (if available) will always be chosen
    # over any non-perfect fit, regardless of how tight the non-perfect fit is.
    # The penalty is contextualized by the total bin capacity, ensuring it's not arbitrary.
    NON_PERFECT_FIT_PENALTY = bin_capacity_total * 1e-6 # A small fraction of total capacity

    priorities[non_perfect_and_fitting_mask] = base_bf_scores - NON_PERFECT_FIT_PENALTY

    return priorities
```
