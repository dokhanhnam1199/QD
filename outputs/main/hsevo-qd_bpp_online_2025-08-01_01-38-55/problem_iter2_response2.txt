```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using a non-linear inverse relationship to residual space,
    aggressively favoring very tight or perfect fits to minimize bin count.
    """
    # Initialize priorities for all bins to a very low value.
    # This ensures bins that cannot fit the item are never chosen.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify which bins can accommodate the current item.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit, calculate the "residual space" after the item is placed.
    residual_space = bins_remain_cap[can_fit_mask] - item

    # Add a small epsilon to prevent division by zero if residual_space is 0 (perfect fit).
    # This also ensures that perfect fits (residual_space=0) yield the highest possible score,
    # aligning with the "inverse weighting" strategy identified as superior.
    epsilon = 1e-9

    # Apply a non-linear inverse weighting. A smaller residual space results in a
    # significantly higher priority score, strongly incentivizing the tightest fits,
    # as indicated by the analysis of top-performing heuristics.
    priorities[can_fit_mask] = 1.0 / (residual_space + epsilon)

    return priorities
```
