```python
import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                default_low_priority: float = -13.732882263687515,
                fit_score_weight: float = -4.7273623240749325,
                consolidation_weight: float = 1.0) -> np.ndarray:
    """Combines Best-Fit with a consolidation bias, prioritizing tighter fits
    and fuller bins to minimize open bins and improve packing density.
    """
    # Initialize all priorities to a very low number, ensuring bins that cannot
    # accommodate the item are effectively deprioritized.
    priorities = np.full_like(bins_remain_cap, default_low_priority, dtype=float)

    # Identify bins where the item can be placed.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate a combined priority score.
    # This combination balances two objectives:
    # 1. Best-Fit: Placing the item into the bin that leaves the least amount of space (tightest fit).
    #    A negative 'fit_score_weight' ensures that a smaller 'remaining_capacity_after_fit'
    #    results in a higher priority score.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item
    best_fit_scores = remaining_capacity_after_fit * fit_score_weight

    # 2. Consolidation Bias: Prioritizing bins that are already fuller (have less current
    #    remaining capacity). This encourages reusing existing bins and reduces the
    #    number of open bins, leading to better overall bin utilization.
    #    A positive 'consolidation_weight' makes smaller 'bins_remain_cap' (i.e., fuller bins)
    #    result in a higher score from this component (due to the negative sign).
    consolidation_scores = -bins_remain_cap[can_fit_mask] * consolidation_weight

    # Combine the two components to get the final priority for eligible bins.
    priorities[can_fit_mask] = best_fit_scores + consolidation_scores

    return priorities
```
