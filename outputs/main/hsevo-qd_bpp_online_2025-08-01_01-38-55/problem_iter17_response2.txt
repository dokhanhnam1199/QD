```python
import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                bin_capacity: float,
                default_low_priority: float = -13.732882263687515,
                fit_score_weight: float = -4.7273623240749325,
                perfect_fit_bonus: float = 10.0,
                consolidation_bias: float = 0.01) -> np.ndarray:
    """Prioritizes best-fit, strongly favors perfect fits, and subtly encourages filling existing bins.

    Args:
        item: Size of item to be packed.
        bins_remain_cap: Remaining capacities of all bins.
        bin_capacity: The full capacity of a single bin.
        default_low_priority: Score for bins that cannot fit the item.
        fit_score_weight: Weight for the remaining space after fit (negative for best-fit).
        perfect_fit_bonus: Extra score for a perfect fit.
        consolidation_bias: Extra score for partially filled bins, promoting consolidation.

    Returns:
        Array of priority scores for each bin.
    """
    # Initialize all priorities to a very low value for bins that cannot accommodate the item.
    priorities = np.full_like(bins_remain_cap, default_low_priority, dtype=float)

    # Find bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item
    fitting_bins_indices = np.where(can_fit_mask)[0]

    if fitting_bins_indices.size > 0:
        # Calculate remaining capacity if item is placed (for Best-Fit).
        remaining_capacity_after_fit = bins_remain_cap[fitting_bins_indices] - item

        # Base score: Best-Fit (tighter fits get higher scores due to negative weight).
        current_priorities = remaining_capacity_after_fit * fit_score_weight

        # Add significant bonus for perfect fits.
        is_perfect_fit = np.isclose(remaining_capacity_after_fit, 0.0, atol=1e-9)
        current_priorities[is_perfect_fit] += perfect_fit_bonus

        # Add subtle consolidation bias for bins already partially filled (not pristine empty).
        is_partially_filled = bins_remain_cap[fitting_bins_indices] < bin_capacity
        current_priorities[is_partially_filled] += consolidation_bias

        # Update priorities for valid bins.
        priorities[fitting_bins_indices] = current_priorities

    return priorities
```
