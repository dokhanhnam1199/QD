```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                w_tight_fit: float = 1.0, w_fullness: float = 0.5,
                w_perfect_fit_bonus: float = 5.0) -> np.ndarray:
    """Prioritizes bins by combining tight-fit, existing fullness, and a tunable bonus for perfect fits.
    This integrates robust Best-Fit principles with strong consolidation incentives.
    """
    # Initialize all priorities to a very low number, effectively deprioritizing
    # bins that cannot accommodate the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, return the array with deprioritized values.
    if not np.any(can_fit_mask):
        return priorities

    # Extract remaining capacities for only the fitting bins.
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # Calculate the remaining capacity *after* placing the item.
    remaining_after_fit = fitting_bins_remain_cap - item

    # Component 1: Tight Fit Score (Best-Fit-like)
    # Higher score for smaller remaining space after item placement.
    # This is achieved by maximizing the negative of `remaining_after_fit`.
    score_tight_fit = -remaining_after_fit

    # Component 2: Bin Fullness Score
    # Higher score for bins that are already fuller (i.e., have less remaining capacity).
    # This promotes consolidating items into existing, partially filled bins.
    score_fullness = -fitting_bins_remain_cap

    # Component 3: Perfect Fit Bonus
    # A specific, tunable bonus is applied if the item fits perfectly, leaving zero space.
    # This strongly encourages "closing" a bin efficiently, a key consolidation strategy.
    perfect_fit_mask_local = np.isclose(remaining_after_fit, 0.0, atol=1e-9)
    score_perfect_fit_bonus = np.zeros_like(fitting_bins_remain_cap, dtype=float)
    score_perfect_fit_bonus[perfect_fit_mask_local] = w_perfect_fit_bonus

    # Combine the scores using tunable weights.
    # The heuristic prioritizes continuous components (tight fit, fullness) but
    # also incorporates a specific, strong incentive for perfect fits.
    combined_score = (w_tight_fit * score_tight_fit) + \
                     (w_fullness * score_fullness) + \
                     score_perfect_fit_bonus

    # Apply the calculated combined scores back to the original `priorities` array
    # for only the bins that could fit the item.
    priorities[can_fit_mask] = combined_score

    return priorities
```
