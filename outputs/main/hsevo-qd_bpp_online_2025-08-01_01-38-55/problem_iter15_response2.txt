```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, BIN_MAX_CAPACITY: float = 1.0) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin.
    This heuristic is designed to be an adaptive variant of Best-Fit,
    considering 'Structural Integrity' and 'Emergent Properties' of the
    overall bin packing solution, moving beyond rigid local optimization.

    It improves upon a simple Best-Fit by:
    1.  **Strongly Prioritizing Perfect Fits:** Bins that can precisely fit the
        item (leaving zero remainder) receive the highest possible score.
    2.  **Penalizing Fragmentation:** It applies a significant penalty to bins
        where placing the item would leave a very small, non-zero, and
        potentially unusable remainder (a "fragment"). This aims to prevent
        the creation of many tiny, difficult-to-fill pockets of space, which
        can lead to an increased total number of bins used (a negative
        emergent property for the global solution).
    3.  **Adaptive Thresholding:** The definition of a "small fragment" is
        adaptive, considering both a small absolute value (relative to the
        bin's maximum capacity, providing 'Global Context') and a value relative
        to the current item's size ('Adaptive Design').
    4.  **Best-Fit Tendency for Other Cases:** For all other valid fits (perfect
        fits, or fits leaving remainders larger than the fragmentation threshold),
        it reverts to the Best-Fit principle, favoring tighter fits to minimize
        wasted space, while implicitly encouraging closure of bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: A NumPy array containing the remaining capacities
                         for each bin.
        BIN_MAX_CAPACITY: The maximum capacity of any bin. This parameter
                          provides crucial global context for evaluating
                          remainder sizes and setting penalty scales.
                          Defaults to 1.0, assuming item and bin sizes are normalized.

    Returns:
        A NumPy array of the same size as `bins_remain_cap`, where each
        element is the calculated priority score for the corresponding bin.
        Bins that cannot fit the item will have a very low priority (-np.inf).
    """
    # Initialize all priorities to a very low number. This ensures that
    # bins which cannot accommodate the item are effectively deprioritized.
    # Using -np.inf makes them guaranteed not to be chosen if any valid bin exists.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        # If no bin can accommodate the item, return the initialized priorities.
        # This implies that a new bin must be opened in the broader packing algorithm.
        return priorities

    # Calculate the remaining capacity for bins where the item can be placed.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item

    # --- Component 1: Best-Fit Base Score ---
    # Tighter fits (smaller `remaining_capacity_after_fit`) are more desirable.
    # A perfect fit (remainder = 0) gets a score of 0. Larger remainders get
    # increasingly negative scores.
    base_fit_score = -remaining_capacity_after_fit

    # --- Component 2: Fragmentation Penalty ---
    # This component penalizes solutions that lead to 'Structural Degradation'
    # by creating very small, likely unusable, fragments of space.
    # Define an adaptive threshold for what constitutes a "small fragment".
    # It considers both an absolute minimum size (e.g., 1% of max bin capacity)
    # and a relative minimum size (e.g., 5% of the current item's size).
    # Using `max` ensures it meets at least a minimum absolute size criterion,
    # while `min` prevents the threshold from becoming too large for very small items.
    FRAGMENT_THRESHOLD = max(0.01 * BIN_MAX_CAPACITY, 0.05 * item)
    FRAGMENT_THRESHOLD = min(FRAGMENT_THRESHOLD, 0.5 * item) # Cap threshold to avoid penalizing useful mid-range remainders

    fragment_penalty = np.zeros_like(remaining_capacity_after_fit)

    # Identify bins where the item fits, but leaves a small, non-zero fragment.
    # Using a small epsilon (1e-9) to account for floating-point inaccuracies
    # when checking for truly zero remainder.
    is_fragmented_remainder = (remaining_capacity_after_fit > 1e-9) & \
                              (remaining_capacity_after_fit < FRAGMENT_THRESHOLD)

    # Determine the magnitude of the penalty. This value is relative to the
    # `BIN_MAX_CAPACITY` to scale appropriately across different problem sizes.
    # A larger magnitude means fragmented bins are heavily discouraged.
    PENALTY_MAGNITUDE = 0.2 * BIN_MAX_CAPACITY  # This is a key tunable parameter

    # Apply the penalty to identified fragmented remainders.
    fragment_penalty[is_fragmented_remainder] = -PENALTY_MAGNITUDE

    # --- Combine Scores ---
    # The final priority combines the best-fit preference with the fragmentation penalty.
    # This guides the heuristic to make decisions that lead to better 'Emergent Properties'
    # for the overall packing solution.
    combined_score = base_fit_score + fragment_penalty

    # Assign the calculated combined scores back to the appropriate bins.
    priorities[can_fit_mask] = combined_score

    return priorities
```
