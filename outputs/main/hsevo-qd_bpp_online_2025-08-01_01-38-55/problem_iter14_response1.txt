```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                default_low_priority: float = float('-inf'),
                fit_score_weight: float = -4.7273623240749325,
                current_fullness_weight: float = -1.0,
                perfect_fit_bonus: float = 1000.0) -> np.ndarray:
    """Combines Best-Fit and bin consolidation, with a strong preference for perfect fits.
    This adaptive heuristic balances tight packing with efficient bin utilization, avoiding fragmentation.
    """
    # Initialize all priorities to a very low number. Bins that cannot
    # accommodate the item are effectively deprioritized.
    priorities = np.full_like(bins_remain_cap, default_low_priority, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, return the deprioritized array.
    if not np.any(can_fit_mask):
        return priorities

    # Extract relevant capacities for fitting bins
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # --- Core Scoring: Weighted combination of Best-Fit and Bin Fullness ---
    # Component 1: Best-Fit score (prioritizing tightest fits)
    # Calculates the remaining capacity after placing the item.
    # A negative fit_score_weight makes smaller remaining_capacity_after_fit (tighter fits)
    # result in higher scores.
    remaining_capacity_after_fit = fitting_bins_remain_cap - item
    fit_score = remaining_capacity_after_fit * fit_score_weight

    # Component 2: Current Bin Fullness score (prioritizing already fuller bins)
    # Uses the current remaining capacity. A smaller current_remaining_capacity means the bin is fuller.
    # A negative current_fullness_weight makes smaller current_remaining_capacity (fuller bins)
    # result in higher scores, promoting consolidation.
    current_remaining_capacity = fitting_bins_remain_cap
    fullness_score = current_remaining_capacity * current_fullness_weight

    # Combine the scores using a weighted sum for continuous integration.
    # This forms the base priority for all fitting bins.
    priorities[can_fit_mask] = fit_score + fullness_score

    # --- Enhancement: Strong Bonus for Perfect Fits ---
    # Identify bins where the item fits exactly, leaving zero remaining capacity.
    # A very high, absolute bonus ensures these are always chosen if available,
    # as perfect fits are highly desirable for optimal packing.
    perfect_fit_mask = np.isclose(remaining_capacity_after_fit, 0.0, atol=1e-9)
    # Apply the bonus directly to the relevant priorities.
    priorities[can_fit_mask][perfect_fit_mask] = perfect_fit_bonus

    return priorities
```
