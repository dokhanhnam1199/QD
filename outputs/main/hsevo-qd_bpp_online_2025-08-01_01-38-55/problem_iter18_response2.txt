```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add an item to each bin,
    implementing a sophisticated heuristic that combines the Best-Fit principle
    with strategic considerations for bin consolidation, perfect fits, and
    the avoidance of small, unfillable gaps.

    This heuristic aims to:
    1. Strongly favor perfect fits to maximize complete bin utilization.
    2. Prioritize tight fits (Best-Fit) to minimize immediate waste.
    3. Penalize placements that result in very small, potentially unusable
       remaining capacities, preventing "fragmentation" of bin space.
    4. Provide a bonus for placing items in bins that are already highly
       utilized, encouraging the "consolidation" and closure of bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
                         Assumes capacities are normalized (e.g., bin capacity = 1.0).

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can physically fit
    can_fit_mask = bins_remain_cap >= item
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # Calculate the remaining capacity for bins after placing the item
    remaining_capacity_after_fit = fitting_bins_remain_cap - item

    # --- Core Scoring Components ---

    # 1. Base Score (Best-Fit principle):
    #   A smaller remaining capacity (tighter fit) yields a higher base score.
    #   Scores range from 0 (perfect fit) to negative values.
    base_scores = -remaining_capacity_after_fit

    # Define constants for heuristic weighting. These can be tuned.
    PERFECT_FIT_BONUS = 1000.0  # Large bonus for a perfect fit, making it highly desirable.
    SMALL_GAP_THRESHOLD = 0.05  # A fractional threshold for what constitutes a "small" gap.
                                # E.g., if bin capacity is 1.0, 0.05 means 5% of bin.
    SMALL_GAP_PENALTY_FACTOR = 200.0 # Multiplier for the penalty applied to small gaps.
                                    # Higher values mean stronger discouragement.
    CONSOLIDATION_THRESHOLD = 0.75 # Threshold (as a fraction of total capacity)
                                   # for a bin to be considered "highly utilized".
    CONSOLIDATION_BONUS_FACTOR = 50.0 # Multiplier for the bonus applied to highly utilized bins.

    # 2. Perfect Fit Bonus:
    #    If an item perfectly fills a bin, give a substantial bonus. This is a
    #    highly desirable outcome for bin packing efficiency.
    perfect_fit_mask = remaining_capacity_after_fit == 0
    base_scores[perfect_fit_mask] += PERFECT_FIT_BONUS

    # 3. Small Gap Penalty:
    #    Apply a penalty for placements that leave a very small, non-zero
    #    remaining capacity. Such small gaps are often "unfillable" and
    #    lead to wasted space/fragmentation. The penalty is higher for smaller gaps.
    small_gap_mask = (remaining_capacity_after_fit > 0) & (remaining_capacity_after_fit < SMALL_GAP_THRESHOLD)
    # Penalty magnitude is inversely proportional to the gap size within the threshold
    penalty_values = (SMALL_GAP_THRESHOLD - remaining_capacity_after_fit[small_gap_mask]) * SMALL_GAP_PENALTY_FACTOR
    base_scores[small_gap_mask] -= penalty_values

    # 4. Consolidation Bonus:
    #    Reward placing items into bins that are already significantly full.
    #    This encourages "closing" bins and reduces the total number of
    #    active bins, contributing to bin consolidation.
    #    Assumes a nominal total bin capacity (e.g., 1.0) if not explicitly provided.
    NOMINAL_BIN_CAPACITY = 1.0 # This needs to be consistent with how bins_remain_cap are scaled.
    current_fill_level = (NOMINAL_BIN_CAPACITY - fitting_bins_remain_cap) / NOMINAL_BIN_CAPACITY

    consolidation_mask = current_fill_level >= CONSOLIDATION_THRESHOLD
    # The bonus can scale with how full the bin is beyond the threshold
    consolidation_bonus = current_fill_level[consolidation_mask] * CONSOLIDATION_BONUS_FACTOR
    base_scores[consolidation_mask] += consolidation_bonus

    # Assign the calculated scores to the respective bins.
    priorities[can_fit_mask] = base_scores

    return priorities
```
