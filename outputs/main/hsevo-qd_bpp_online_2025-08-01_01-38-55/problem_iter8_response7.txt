```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                default_low_priority: float = -13.732882263687515,
                fit_score_weight: float = -4.7273623240749325) -> np.ndarray:
    """Parameterized Best-Fit heuristic.
    Prioritizes bins with tunable scores: tighter fits are favored,
    and bins that cannot fit the item receive a very low priority.
    """
    # Initialize all priorities to a very low number. This ensures that bins which
    # cannot accommodate the item are effectively deprioritized, guaranteeing they
    # are not chosen if any valid bin exists.
    priorities = np.full_like(bins_remain_cap, default_low_priority, dtype=float)

    # Identify bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate the remaining capacity after placement.
    # By multiplying by a negative 'fit_score_weight', a smaller positive remainder
    # (i.e., a tighter fit) results in a larger priority score. This implements
    # a Best-Fit-like behavior, with the weighting being a tunable parameter.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item
    priorities[can_fit_mask] = remaining_capacity_after_fit * fit_score_weight

    return priorities
```
