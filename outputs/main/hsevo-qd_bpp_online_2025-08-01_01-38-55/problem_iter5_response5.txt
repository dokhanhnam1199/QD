```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Implements a robust Best-Fit heuristic by prioritizing bins that leave
    the least space, ensuring tighter fits yield higher positive scores.
    Non-fitting bins are heavily deprioritized.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to a very low number, effectively ruling out
    # bins that cannot accommodate the item or are not ideal fits.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # If there are bins that can fit the item, proceed with scoring them.
    if np.any(can_fit_mask):
        # Calculate the remaining capacity after placing the item in potential bins.
        # A smaller remaining capacity indicates a tighter fit, which is preferred.
        remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item

        # To ensure higher scores mean higher priority and all valid scores are non-negative,
        # we subtract the remaining capacity from the maximum possible remaining capacity
        # among the currently fitting bins. This scales scores such that a perfect fit
        # (0 remaining) gets the highest score, and the "worst" fitting bin gets 0.
        max_possible_leftover_for_fitting_bins = np.max(remaining_capacity_after_fit)
        
        # Assign priorities based on this inverted scale.
        priorities[can_fit_mask] = max_possible_leftover_for_fitting_bins - remaining_capacity_after_fit

    return priorities
```
