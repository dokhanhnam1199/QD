```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best-Fit with a bin fullness preference, dynamically adapting weightings based on average bin emptiness.
    """
    # Initialize all priorities to a very low number to deprioritize bins that cannot fit the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can fit.
    can_fit_mask = bins_remain_cap >= item
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]

    # If no bin can fit the item, return the deprioritized array.
    if fitting_bins_remain_cap.size == 0:
        return priorities

    # --- Core Scoring Components (Best-Fit-like and Bin Fullness) ---
    # Component 1: Tight Fit (Best-Fit-like)
    # Higher score for less remaining space after placing the item.
    score_tight_fit = item - fitting_bins_remain_cap

    # Component 2: Bin Fullness
    # Higher score for bins that are already more full (smaller remaining capacity).
    score_fullness = -fitting_bins_remain_cap

    # --- Dynamic Weight Adaptation based on Bin State ---
    # This makes the heuristic "adaptive" and "state-aware".
    # Assume a nominal bin capacity for normalization. This is crucial for defining 'fullness' objectively.
    # In many BPP contexts, items and capacities are normalized, e.g., to 1.0.
    BIN_CAPACITY_ASSUMED = 1.0 

    # Calculate the normalized average emptiness of bins that can fit the item.
    # A value close to 0 means bins are generally full. A value close to 1 means bins are generally empty.
    normalized_avg_emptiness = np.mean(fitting_bins_remain_cap) / BIN_CAPACITY_ASSUMED

    # Define base weights for overall preference and a parameter for adaptive swing.
    # These parameters are internal but can be conceptually tuned or derived.
    w_tight_fit_base = 0.7  # Default preference towards tight fitting
    w_fullness_base = 0.3   # Default preference towards filling existing bins
    adaptive_swing = 0.6    # How much the weights can shift (0 = no adaptation)

    # Calculate an 'emptiness bias' to shift weights.
    # Bias is negative if bins are full (emphasize fullness), positive if empty (emphasize tight fit).
    emptiness_bias = (normalized_avg_emptiness - 0.5) * 2 * adaptive_swing

    # Apply the bias to adjust the weights dynamically.
    # When `normalized_avg_emptiness` is low (bins full), `w_tight_fit` decreases and `w_fullness` increases.
    # When `normalized_avg_emptiness` is high (bins empty), `w_tight_fit` increases and `w_fullness` decreases.
    w_tight_fit = w_tight_fit_base + emptiness_bias
    w_fullness = w_fullness_base - emptiness_bias

    # Ensure weights remain positive and reasonable.
    w_tight_fit = max(0.01, w_tight_fit)
    w_fullness = max(0.01, w_fullness)

    # Normalize weights to ensure their sum is 1.0, maintaining relative importance.
    total_effective_weight = w_tight_fit + w_fullness
    w_tight_fit /= total_effective_weight
    w_fullness /= total_effective_weight

    # --- Combine Scores with Adaptive Weights ---
    combined_score = (w_tight_fit * score_tight_fit) + (w_fullness * score_fullness)

    # Apply the calculated scores to the valid bins in the priorities array.
    priorities[can_fit_mask] = combined_score

    return priorities
```
