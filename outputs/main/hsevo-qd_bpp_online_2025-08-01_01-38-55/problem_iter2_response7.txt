```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority by maximizing tightness of fit using an inverse relationship.
    This aggressively prioritizes bins leading to the smallest positive residual capacity,
    favoring near-perfect and perfect fits to optimize space utilization.
    """
    # Initialize all scores to a very low value, effectively disqualifying bins that cannot fit the item.
    # Using -np.inf ensures these bins are never selected unless no valid bin exists.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)

    # Identify which bins can actually fit the item.
    # This creates a boolean mask for efficient indexing.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the residual space for only those bins that can fit the item.
    # This avoids unnecessary calculations and potential negative residuals.
    residual_space = bins_remain_cap[can_fit_mask] - item

    # For bins that can fit, assign a score using an inverse relationship to residual space.
    # A small epsilon (machine epsilon) is added to the residual_space. This prevents
    # division by zero for perfect fits (residual_space = 0) and ensures these
    # perfect fits receive the highest possible finite score, as per analysis.
    epsilon = np.finfo(float).eps  # Smallest positive representable float
    scores[can_fit_mask] = 1.0 / (residual_space + epsilon)

    return scores
```
