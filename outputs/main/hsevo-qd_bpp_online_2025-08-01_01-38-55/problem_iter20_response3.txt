```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                fit_weight: float = 2.0,
                perfect_fit_bonus: float = 1000.0,
                fragment_threshold: float = 0.05,
                fragment_penalty_weight: float = 50.0,
                consolidation_bonus_weight: float = 0.01,
                default_low_priority: float = -np.inf) -> np.ndarray:
    """Combines Best-Fit with perfect-fit bonus, penalizes small fragmented spaces,
    and encourages consolidation into partially-filled bins to maintain versatility.
    """
    priorities = np.full_like(bins_remain_cap, default_low_priority, dtype=float)

    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        return priorities

    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
    remaining_after_fit = fitting_bins_remain_cap - item

    # 1. Base Score: Implements Best-Fit by prioritizing tighter fits (smaller remaining capacity).
    # A smaller remaining_after_fit results in a smaller negative value for -remaining_after_fit,
    # which when multiplied by positive 'fit_weight', yields a higher score.
    current_scores = fit_weight * (-remaining_after_fit)

    # 2. Perfect Fit Bonus: Apply a very high score for exact fits to ensure they are always preferred.
    perfect_fit_mask = np.isclose(remaining_after_fit, 0.0, atol=1e-9)
    current_scores[perfect_fit_mask] += perfect_fit_bonus

    # 3. Fragment Penalty: Heavily penalize small, non-zero remainders to avoid creating "useless" space.
    # The penalty magnitude increases as 'remaining_after_fit' approaches zero from the positive side,
    # creating a "valley" in the scoring function for fragmented spaces.
    small_remainder_mask = (remaining_after_fit > 1e-9) & (remaining_after_fit < fragment_threshold)
    penalty_magnitude = (fragment_threshold - remaining_after_fit[small_remainder_mask]) * fragment_penalty_weight
    current_scores[small_remainder_mask] -= penalty_magnitude

    # 4. Consolidation Bonus: Encourage using existing, partially-filled bins over opening new ones
    # or using the emptiest available bin. A bin is considered "partially filled" if its current
    # capacity is less than the maximum capacity among all *currently fitting* bins.
    max_current_capacity_among_fitting_bins = np.max(fitting_bins_remain_cap)
    is_partially_filled = fitting_bins_remain_cap < max_current_capacity_among_fitting_bins
    
    # Apply this bonus to any partially-filled bin that can fit the item.
    # Its effect will be weighed against the base fit score, perfect fit bonus, and fragment penalty.
    current_scores[is_partially_filled] += consolidation_bonus_weight

    # Assign the calculated scores to the fitting bins in the main priority array.
    priorities[can_fit_mask] = current_scores

    return priorities
```
