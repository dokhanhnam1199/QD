```python
import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                fit_score_weight: float = 1.0,
                consolidation_bonus_weight: float = 0.01,
                perfect_fit_bonus: float = 1000.0,
                fragment_threshold: float = 0.05,
                fragment_penalty_weight: float = 50.0,
                default_low_priority: float = -np.inf) -> np.ndarray:
    """Prioritizes Best-Fit, perfect fits, and consolidating items into existing bins.
    Penalizes leaving small, unusable fragments. Balances immediate fit with long-term bin utilization.
    """
    # Initialize all priorities to a very low number for bins that cannot fit.
    priorities = np.full_like(bins_remain_cap, default_low_priority, dtype=float)

    # Identify bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, return the deprioritized array.
    if not np.any(can_fit_mask):
        return priorities

    # Get the capacities of bins where the item can fit
    fitting_bins_cap = bins_remain_cap[can_fit_mask]
    # Calculate remaining capacity if the item is placed
    remaining_capacity_after_fit = fitting_bins_cap - item

    # --- 1. Base Score (Best-Fit Logic) ---
    # Smaller remaining capacity (tighter fit) results in a less negative, thus higher, base score.
    adjusted_scores = fit_score_weight * (-remaining_capacity_after_fit)

    # --- 2. Perfect Fit Bonus ---
    # Apply a large bonus for bins where the item fills the capacity exactly,
    # leaving zero remaining space. This is a highly desirable outcome.
    perfect_fit_mask = remaining_capacity_after_fit == 0
    adjusted_scores[perfect_fit_mask] += perfect_fit_bonus

    # --- 3. Tunable Consolidation Bias ---
    # Encourage placing items into already partially-filled bins to consolidate space
    # and avoid opening new bins. This is done by giving a bonus to bins that are not
    # "empty" (i.e., not having the maximum remaining capacity among all fitting bins).
    max_current_capacity_among_fitting_bins = np.max(fitting_bins_cap)
    is_partially_filled = fitting_bins_cap < max_current_capacity_among_fitting_bins
    # Apply bonus, ensuring perfect fits (if also partially filled) still get their high bonus
    adjusted_scores[is_partially_filled] += consolidation_bonus_weight

    # --- 4. Small Fragment Penalty ---
    # Penalize bins that, if chosen, would leave a very small, potentially unusable
    # amount of remaining capacity. This discourages creating "dead space".
    # Only applies if a gap is left (remaining_capacity_after_fit > 0)
    small_fragment_mask = (remaining_capacity_after_fit > 0) & (remaining_capacity_after_fit < fragment_threshold)
    adjusted_scores[small_fragment_mask] -= fragment_penalty_weight

    # Assign the calculated scores to the fitting bins in the main priority array.
    priorities[can_fit_mask] = adjusted_scores

    return priorities
```
