```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority for online Bin Packing, combining Best-Fit's non-linear
    tightness reward with a tunable consolidation bias towards fuller bins.

    This heuristic integrates:
    1. An overriding bonus for perfect fits.
    2. A weighted sum of 'tightness after fit' and 'initial bin fullness' for
       non-perfect fits, with tunable influence.
    """
    # Initialize all priorities to a very low number, effectively deprioritizing
    # bins that cannot accommodate the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item
    
    # If no bin can fit the item, return the initialized priorities (all -inf).
    if not np.any(can_fit_mask):
        return priorities

    # Get the remaining capacities for only those bins that can fit the item.
    fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
    
    # Calculate the remaining capacity after placing the item in fitting bins.
    remaining_capacity_after_fit = fitting_bins_remain_cap - item

    # Define a small epsilon for robust floating-point comparisons,
    # and to prevent division by zero for actual perfect or near-zero fits.
    epsilon = 1e-9

    # --- Tunable Parameters for Combined Prioritization Strategy ---
    # Weight for the 'tight fit' component: higher value emphasizes minimizing
    # leftover space after placement (core Best-Fit).
    W_TIGHT_FIT = 1.0 
    
    # Weight for the 'consolidation bias' component: higher value emphasizes
    # putting items into bins that are already fuller (i.e., have less current
    # remaining capacity). This promotes closing off partially used bins.
    W_CONSOLIDATION_BIAS = 0.2 

    # The absolute score for a perfect fit. This value must be orders of
    # magnitude larger than any possible score from the weighted sum to
    # guarantee that a perfect fit is always chosen first.
    PERFECT_FIT_SCORE_BONUS = 2.0 / epsilon 

    # 1. Identify "perfect fits" (remaining capacity is effectively zero).
    is_perfect_fit = remaining_capacity_after_fit < epsilon

    # 2. Calculate scores for non-perfect fits using a weighted combination:
    #    a) Tightness Score: Inverse of the remaining capacity after placement.
    #       Smaller remaining_capacity_after_fit leads to a higher score.
    tight_fit_scores = W_TIGHT_FIT / (remaining_capacity_after_fit + epsilon)
    
    #    b) Consolidation Score: Inverse of the initial remaining capacity.
    #       Smaller fitting_bins_remain_cap (meaning the bin was already fuller)
    #       leads to a higher score, incentivizing filling existing bins.
    consolidation_scores = W_CONSOLIDATION_BIAS / (fitting_bins_remain_cap + epsilon)

    # Combine these two aspects for non-perfect fits through a weighted sum.
    combined_scores = tight_fit_scores + consolidation_scores

    # 3. Apply the significant, overriding bonus for truly perfect fits.
    combined_scores[is_perfect_fit] = PERFECT_FIT_SCORE_BONUS

    # Assign the calculated combined scores to the bins that can fit the item.
    priorities[can_fit_mask] = combined_scores

    return priorities
```
