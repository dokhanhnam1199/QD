```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns priority with which we want to add an item to each bin,
    implementing a heuristic that balances a Best-Fit-like strategy with a
    preference for filling already-used bins to promote closure and reduce fragmentation.

    This function is designed to foster beneficial emergent behaviors (like
    efficient bin closure) and maintain solution flexibility, prioritizing
    adaptive decision rules that consider a global context (the bin's total
    capacity and current state) over rigid local optimizations.

    The priority score for a bin that can fit the item is calculated as:
    score = (bin_capacity - bins_remain_cap) - (bins_remain_cap - item)

    This formula combines two key aspects:
    1.  `(bin_capacity - bins_remain_cap)`: Represents the amount of space already
        occupied in the bin. A higher value means the bin is more full, which
        is preferred to encourage closing bins. This component addresses the
        "Global Context" and "Structural Integrity" by pushing towards consolidation.
    2.  `-(bins_remain_cap - item)`: Represents the "Best-Fit" criterion. This is
        the negative of the remaining capacity after the item is placed. A smaller
        remainder (tighter fit) results in a higher score. This ensures efficiency
        in space utilization within the chosen bin.

    The sum of these two components prioritizes bins that are already well-utilized
    AND offer a good fit for the current item, leading to a more robust packing.

    Bins that cannot fit the item receive a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacity: The total capacity of each bin. This provides the
                      "Global Context" for evaluating bin fullness.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to a very low number, effectively deprioritizing
    # bins that cannot accommodate the item.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # For bins that can fit the item, calculate the priority score.
    if np.any(can_fit_mask):
        # Component 1: Score based on how much the bin is already filled.
        # This encourages using bins that are closer to being full, aiming to "close" them.
        current_fill_amount = bin_capacity - bins_remain_cap[can_fit_mask]

        # Component 2: Score based on the tightness of the fit (Best-Fit principle).
        # We want to minimize the remaining capacity after placing the item.
        # A smaller positive remainder results in a larger (less negative) score.
        remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item
        best_fit_score = -remaining_capacity_after_fit

        # Combine the two components.
        # This additive combination means a bin that is already very full AND provides
        # a tight fit will receive a very high priority.
        priorities[can_fit_mask] = current_fill_amount + best_fit_score

    return priorities
```
