```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                bin_capacity: float,
                fragmentation_threshold_ratio: float = 0.05,
                fragmentation_penalty_strength: float = 0.1,
                fill_preference_weight: float = 1.0) -> np.ndarray:
    """Returns priority with which we want to add item to each bin,
    implementing a Best-Fit-like heuristic with consideration for avoiding
    small, fragmented remaining spaces and tunable preference for filling.

    This function enhances a Best-Fit baseline by introducing parameterized mechanisms
    for "Contextual Tuning" and aims to avoid "Explicitly rewarding perfect sub-solutions
    if detrimental to global optimality" by potentially penalizing tiny, unusable gaps.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacity: The total capacity of a single bin. Essential for contextual tuning.
                      Must be a positive value (e.g., 1.0 if items are normalized between 0 and 1).
        fragmentation_threshold_ratio: If the remaining capacity of a bin after placing the item
                                      is below this ratio of the `bin_capacity` (but still > 0),
                                      a penalty is applied. E.g., 0.05 means if < 5% of bin_capacity
                                      is left, and it's not a perfect fit, penalize.
                                      Value should be between 0 and 1.
        fragmentation_penalty_strength: The absolute strength of the penalty applied for creating
                                        a fragmented (small, non-zero) space. This value is subtracted
                                        from the base Best-Fit score, making such bins less attractive.
                                        Should be non-negative.
        fill_preference_weight: A multiplier for the Best-Fit component of the score.
                                Higher values mean tighter fits (less remaining space) are
                                more strongly preferred. Should be positive.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    if not (item >= 0):
        raise ValueError("Item size must be non-negative.")
    if not (bin_capacity > 0):
        raise ValueError("bin_capacity must be a positive value.")
    if not (0 <= fragmentation_threshold_ratio <= 1):
        raise ValueError("fragmentation_threshold_ratio must be between 0 and 1.")
    if not (fragmentation_penalty_strength >= 0):
        raise ValueError("fragmentation_penalty_strength must be non-negative.")
    if not (fill_preference_weight > 0):
        raise ValueError("fill_preference_weight must be positive.")

    # Initialize all priorities to a very low number. Bins that cannot fit the item
    # are effectively deprioritized to ensure they are not chosen if any valid bin exists.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Create a boolean mask for bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # Calculate the remaining capacity after placing the item in bins that can fit.
    # This is the core calculation for the Best-Fit heuristic.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item

    # Base Best-Fit score:
    # We want to minimize remaining_capacity_after_fit. By taking its negative,
    # a smaller positive remainder (tighter fit) results in a larger (less negative) priority score.
    # A perfect fit (remaining_capacity_after_fit == 0) gets a score of 0.
    # The 'fill_preference_weight' allows tuning how aggressively tighter fits are preferred.
    base_scores = -remaining_capacity_after_fit * fill_preference_weight

    # Calculate the absolute threshold for considering a remaining space as "fragmented".
    # This threshold is relative to the total bin_capacity, providing contextual adaptability.
    fragmentation_threshold = bin_capacity * fragmentation_threshold_ratio

    # Identify bins that, after placing the item, would result in a "fragmented" space.
    # A space is considered fragmented if it's:
    # 1. Not perfectly filled (remaining_capacity_after_fit > 0)
    # 2. Very small (remaining_capacity_after_fit < fragmentation_threshold)
    is_fragmented_space_mask = (remaining_capacity_after_fit > 0) & \
                               (remaining_capacity_after_fit < fragmentation_threshold)

    # Apply a penalty to the scores of bins that would lead to fragmented space.
    # This addresses the heuristic advice to "avoid explicitly rewarding perfect sub-solutions
    # if detrimental to global optimality". By penalizing tiny, non-zero gaps, we discourage
    # making bins almost full but then unusable for subsequent items, thus potentially
    # reducing overall bin usage by encouraging more "useful" gaps or perfect fills.
    base_scores[is_fragmented_space_mask] -= fragmentation_penalty_strength

    # Assign the calculated scores back to the main priorities array for bins that can fit.
    priorities[can_fit_mask] = base_scores

    return priorities
```
