```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, fit_score_weight: float = -1.0, consolidation_bonus: float = 0.01) -> np.ndarray:
    """Combines Best-Fit with a tunable consolidation bias, prioritizing existing bins
    for global optimization while allowing flexible weighting of fit tightness.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, return the deprioritized array.
    if not np.any(can_fit_mask):
        return priorities

    # Calculate the remaining capacity if the item is placed.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item

    # Base score using a tunable weight for the Best-Fit strategy.
    # A negative 'fit_score_weight' (e.g., -1.0) means smaller remaining capacity (tighter fit)
    # results in a higher score (less negative). This generalizes the Best-Fit concept.
    base_scores = fit_score_weight * remaining_capacity_after_fit

    # --- Consolidation Bias (Tunable and Context-Aware) ---
    # To encourage consolidation, we add a tunable bonus to bins that are already
    # partially filled. This promotes filling existing bins to reduce the total bin count.
    # We infer "partially filled" by checking if a bin's remaining capacity is strictly
    # less than the maximum observed capacity among all currently available bins.
    # This correctly identifies bins that aren't "brand new" or fully empty.
    max_current_capacity_fitting_bins = np.max(bins_remain_cap[can_fit_mask])
    is_partially_filled = bins_remain_cap[can_fit_mask] < max_current_capacity_fitting_bins

    # Apply the tunable 'consolidation_bonus' to partially filled bins.
    adjusted_scores = base_scores
    adjusted_scores[is_partially_filled] += consolidation_bonus

    # Assign the calculated scores to the fitting bins in the main priority array.
    priorities[can_fit_mask] = adjusted_scores

    return priorities
```
