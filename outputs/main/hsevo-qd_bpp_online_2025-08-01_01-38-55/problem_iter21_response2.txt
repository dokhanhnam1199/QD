```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, BIN_SIZE: float = 1.0) -> np.ndarray:
    """
    Returns priority for adding an item, implementing an adaptive Best-Fit-like heuristic
    with a strong preference for perfect fits and a penalty for leaving very small,
    potentially unusable, remainders. This aims to reduce bin fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        BIN_SIZE: The maximum capacity of a bin. Assumed to be uniform for all bins
                  and used to contextualize 'tiny' remainders. Defaults to 1.0.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize all priorities to a very low number. Bins that cannot fit the item
    # or are invalid choices will effectively be deprioritized.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # 1. Identify bins where the item can actually fit.
    can_fit_mask = bins_remain_cap >= item
    feasible_bins_indices = np.where(can_fit_mask)[0]

    if not feasible_bins_indices.size:
        # If no bin can fit the item, all priorities remain -inf.
        # The higher-level logic should then typically open a new bin.
        return priorities

    # Calculate the remaining capacity for bins that can fit the item.
    remaining_capacity_after_fit = bins_remain_cap[can_fit_mask] - item

    # 2. Base Best-Fit Score: Prioritize tighter fits (smaller remaining space).
    # Scores are calculated as the negative of the remaining capacity, so a smaller
    # positive remainder results in a larger (less negative) priority score.
    priorities[can_fit_mask] = -remaining_capacity_after_fit

    # 3. Strong Perfect Fit Bonus (Bin Closure Incentive):
    # If placing the item results in a bin being exactly full (0 remaining capacity),
    # give it an exceptionally high priority. This strongly encourages closing bins,
    # which is a key strategy for minimizing the total number of bins used.
    perfect_fit_mask = (remaining_capacity_after_fit == 0)
    if np.any(perfect_fit_mask):
        # Using np.inf ensures that any perfect fit is always chosen over any
        # non-perfect fit, regardless of other penalty/bonus calculations.
        priorities[can_fit_mask][perfect_fit_mask] = np.inf

    # 4. Small Remainder Penalty (Fragmentation Avoidance):
    # This adaptive component discourages leaving bins with very small,
    # potentially unusable, residual capacities. Such "tiny" gaps can accumulate
    # and lead to inefficient bin utilization over time.
    # The threshold for what constitutes a "tiny" remainder is relative to BIN_SIZE.
    TINY_REMAINDER_THRESHOLD = 0.05 * BIN_SIZE  # e.g., 5% of bin size is considered tiny
    PENALTY_FOR_TINY_REMAINDER = 0.5 * BIN_SIZE # A substantial penalty, relative to BIN_SIZE

    # Apply penalty only to non-perfect fits that result in a tiny remainder.
    # Exclude perfect fits as they are already handled by the infinite bonus.
    tiny_remainder_mask = (remaining_capacity_after_fit > 0) & \
                          (remaining_capacity_after_fit < TINY_REMAINDER_THRESHOLD)

    if np.any(tiny_remainder_mask):
        # Subtract the penalty from the existing Best-Fit score for these bins.
        # This makes them less attractive than other non-perfect fits that leave
        # larger, potentially more usable, gaps.
        priorities[can_fit_mask][tiny_remainder_mask] -= PENALTY_FOR_TINY_REMAINDER

    return priorities
```
