```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                perfect_fit_bonus: float = 1000.0,
                best_fit_slope_weight: float = -5.0, # Negative: smaller remainder is higher priority
                fragment_penalty_strength: float = 20.0, # How strong the penalty is for small fragments
                fragment_threshold_ratio: float = 0.05, # Threshold for "small" fragments, as ratio of bin_capacity
                default_low_priority: float = -1e9, # Priority for bins that cannot fit the item
                bin_capacity: float = 1.0 # Assumed total capacity of a single bin, for relative calculations
                ) -> np.ndarray:
    """
    Prioritizes bins using a Best-Fit approach, enhanced with a strong
    perfect-fit bonus and a penalty for creating very small,
    potentially unusable remaining spaces (fragmentation avoidance).
    """
    # Initialize all priorities to a very low number, ensuring bins that cannot
    # fit the item are effectively deprioritized and never chosen if valid options exist.
    priorities = np.full_like(bins_remain_cap, default_low_priority, dtype=float)

    # Identify bins where the item can physically fit.
    can_fit_mask = bins_remain_cap >= item

    # If no bin can fit the item, return the array of low priorities.
    if not np.any(can_fit_mask):
        return priorities

    # Calculate the remaining capacity for bins that can accommodate the item.
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item

    # 1. Base Best-Fit score: Bins that leave less space (tighter fits) get a higher score.
    # A negative `best_fit_slope_weight` ensures that smaller `remaining_after_fit` values
    # result in a larger (less negative) priority score.
    fitting_priorities = remaining_after_fit * best_fit_slope_weight

    # 2. Perfect Fit Bonus: Assign a very high score to bins that result in a perfect fit (zero remaining space).
    # This ensures perfect fits are overwhelmingly preferred. `np.isclose` is used for robust float comparison.
    perfect_fit_indices = np.isclose(remaining_after_fit, 0.0, atol=1e-9)
    fitting_priorities[perfect_fit_indices] += perfect_fit_bonus

    # 3. Fragmentation Penalty: Penalize non-zero, very small remaining capacities.
    # This discourages creating bins with tiny, potentially unusable gaps.
    # The penalty is linearly applied, being strongest closest to zero and fading to nothing
    # as the remaining capacity approaches `fragment_threshold`.
    fragment_threshold = fragment_threshold_ratio * bin_capacity

    # Identify small, non-zero remaining capacities that fall into the fragmentation zone.
    small_fragment_indices = (remaining_after_fit > 1e-9) & (remaining_after_fit < fragment_threshold)

    if np.any(small_fragment_indices):
        # Calculate the penalty based on how small the fragment is.
        # `penalty_values` will be negative, reducing the priority score for these bins.
        penalty_values = -fragment_penalty_strength * \
                         (fragment_threshold - remaining_after_fit[small_fragment_indices]) / fragment_threshold
        fitting_priorities[small_fragment_indices] += penalty_values

    # Assign the calculated priorities back to the main priority array for the fitting bins.
    priorities[can_fit_mask] = fitting_priorities

    return priorities
```
