```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines nuanced prioritization strategies with effective normalization.
    Prioritizes bins based on a balance between best fit and capacity usage proportion.
    """
    # Calculate priority score for each bin
    priorities = np.where(bins_remain_cap >= item,
                          2 / ((1 / (1 - (bins_remain_cap - item) / bins_remain_cap)) + (1 / (item / bins_remain_cap))),
                          -1.0)
    
    # Normalize priorities using softmax-like function
    max_priority = np.max(priorities)
    if max_priority > -1.0:
        exp_priorities = np.exp(priorities - max_priority)
        sum_exp_priorities = np.sum(exp_priorities)
        priorities = np.where(priorities > -1.0, exp_priorities / sum_exp_priorities, priorities)
    
    # Adjust priorities using a Gaussian-like function for bins that can fit the item
    priorities = np.where(bins_remain_cap >= item,
                          priorities * np.exp(-((bins_remain_cap - item) / item) ** 2),
                          priorities)
    
    # Slightly penalize bins with very high remaining capacity
    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap > item * 1.5),
                          priorities * 0.8,
                          priorities)
    
    return priorities
```
