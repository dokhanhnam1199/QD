```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin using an advanced heuristic.

    The heuristic used here combines multiple strategies to prioritize bins based on their remaining capacity,
    wastage minimization, and utilization. It differentiates among viable options by taking into account the 
    relative fit, proportion of capacity used, and absolute remaining capacity, while ensuring numerical stability.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the priority score for each bin based on the remaining capacity
    # Prioritize bins that minimize wastage and have a good fit
    priorities = np.where(bins_remain_cap >= item,
                          # Combine the relative fit, proportion of capacity used, and a term to minimize wastage
                          (1 - (bins_remain_cap - item) / bins_remain_cap) * (item / bins_remain_cap) * np.exp(-(bins_remain_cap - item)),
                          -1.0)  # Penalize bins that can't fit the item

    # Normalize the priorities to ensure numerical stability and enhance differentiation
    max_priority = np.max(priorities)
    if max_priority > -1.0:  # Check if there are bins that can fit the item
        priorities = np.where(priorities > -1.0, priorities / max_priority, priorities)

    # Introduce a slight penalty for bins with very low utilization after adding the item
    priorities = np.where((bins_remain_cap >= item) & ((bins_remain_cap - item) / bins_remain_cap < 0.1),
                          priorities * 0.8,  # Reduce priority for bins that will be too full
                          priorities)

    return priorities
```
