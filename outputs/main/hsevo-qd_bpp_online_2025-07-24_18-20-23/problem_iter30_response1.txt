```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin using an advanced heuristic.

    The heuristic used here combines multiple strategies to prioritize bins based on their remaining capacity,
    utilization rate, and the relative fit of the item. It also incorporates a sophisticated normalization technique
    to differentiate among viable bins effectively.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the priority score for each bin based on multiple factors
    # We want to prioritize bins where the item fits, has a good relative fit, and a high utilization rate
    priorities = np.where(bins_remain_cap >= item,
                          # Combine the relative fit, utilization rate, and a factor to encourage packing denser bins
                          (1 - np.abs(bins_remain_cap - item) / (bins_remain_cap + item)) * 
                          (item / (bins_remain_cap + item)) * 
                          (1 / (1 + np.exp(-(bins_remain_cap - item)))),
                          -1.0)  # Penalize bins that can't fit the item

    # Normalize the priorities using a softmax-like function to enhance differentiation
    max_priority = np.max(priorities)
    if max_priority > -1.0:  # Check if there are bins that can fit the item
        exp_priorities = np.exp(priorities - max_priority)
        priorities = np.where(priorities > -1.0, exp_priorities / np.max(exp_priorities), priorities)

    # Further differentiate among bins that can fit the item by applying a non-linear transformation
    priorities = np.where((bins_remain_cap >= item),
                          priorities * (1 + np.log(1 + item / (bins_remain_cap - item + 1e-6))),
                          priorities)

    return priorities
```
