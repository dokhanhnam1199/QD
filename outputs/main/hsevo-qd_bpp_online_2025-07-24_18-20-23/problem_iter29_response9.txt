```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines nuanced relative fit and proportion used with sophisticated normalization and differentiation.
    """
    # Calculate priority score with nuanced relative fit and proportion used
    priorities = np.where(bins_remain_cap >= item,
                          (1 - np.abs(bins_remain_cap - item) / (bins_remain_cap + 1e-9)) * np.log(item / (bins_remain_cap - item + item) + 1),
                          -1.0)
    
    # Normalize priorities with robust technique
    max_priority = np.max(priorities)
    min_priority = np.min(priorities)
    if max_priority > -1.0:  
        priorities = np.where(priorities > -1.0, (priorities - min_priority) / (max_priority - min_priority + 1e-9), priorities)
    
    # Differentiate among viable bins with non-linear penalty for high remaining capacity
    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap > item * 2),
                          priorities * np.exp(-(bins_remain_cap - item * 2) / item),
                          priorities)
    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap <= item * 2),
                          priorities * 1.1,  # Slightly increase priority for bins with relatively low remaining capacity
                          priorities)
    
    return priorities
```
