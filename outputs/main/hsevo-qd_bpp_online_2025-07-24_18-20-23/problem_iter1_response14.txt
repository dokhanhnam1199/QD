```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # For each bin, check if the item can fit
    # Assign high priority to bins that can fit the item and have the least remaining capacity
    # Assign low priority (negative infinity) to bins that cannot fit the item
    priority = np.where(bins_remain_cap >= item, 1 / (bins_remain_cap + 1e-6), -np.inf)
    
    # To avoid division by zero, we add a small value (1e-6) to bins_remain_cap
    
    # Normalize the priority scores to be between 0 and 1 for bins that can fit the item
    max_priority = np.max(priority)
    if max_priority != -np.inf:  # Check if there is at least one bin that can fit the item
        priority = np.where(priority != -np.inf, (priority - (-np.inf)) / (max_priority - (-np.inf)), -np.inf)
    
    return priority
```
