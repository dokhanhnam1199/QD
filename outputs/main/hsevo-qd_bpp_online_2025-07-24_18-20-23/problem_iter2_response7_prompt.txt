{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_capacity_after_addition = bins_remain_cap - item\n    \n    # Mask out bins that cannot hold the item (i.e., remaining capacity would be negative)\n    valid_bins = remaining_capacity_after_addition >= 0\n    \n    # Priority score is the remaining capacity after addition for valid bins, \n    # and a very low score for bins that cannot hold the item\n    priority_scores = np.where(valid_bins, remaining_capacity_after_addition, -1e10)\n    \n    # To encourage packing items tightly, we can use a non-linear scoring function, \n    # e.g., exp(-remaining_capacity_after_addition) for valid bins\n    priority_scores = np.where(valid_bins, np.exp(-remaining_capacity_after_addition), -1e10)\n    \n    return priority_scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # For each bin, check if the item can fit\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    \n    # Higher priority for bins that are almost full (to minimize waste)\n    fullness_priority = bins_remain_cap / (item + 1e-9)\n    \n    # Combine the two priorities, giving higher priority to valid bins that are almost full\n    priority = valid_bins * (1 + fullness_priority)\n    \n    return priority\n\n### Analyze & experience\n- Comparing the best heuristics (1st) with the worst (20th), we see that the top heuristic prioritizes bins based on the remaining capacity after adding the item, with a focus on minimizing waste. In contrast, the worst heuristic uses a similar approach but with a less effective combination of priorities. \nComparing (1st) vs (2nd), we see that both use a similar approach but the 1st one directly uses the negative remaining capacity, while the 2nd one uses the absolute difference between the remaining capacity and the item size. \n(3rd) vs (4th) shows that the 3rd is identical to the 2nd, while the 4th uses a more complex heuristic that penalizes bins that would be left with too much or too little remaining capacity.\nComparing (second worst) vs (worst), we see that they are identical, indicating a repetition in the list.\nOverall, the top heuristics tend to focus on minimizing waste by prioritizing bins that are closest to being full or have the least remaining capacity after adding the item.\n- \nTo improve heuristics, let's rethink \"Current self-reflection.\" Since \"Ineffective self-reflection\" is None, we'll focus on enhancing the existing approach.\n\n* **Keywords**: Prioritization, bin capacity, combination of priorities\n* **Advice**: Explore diverse prioritization strategies and evaluate their effectiveness in various scenarios.\n* **Avoid**: Over-reliance on a single prioritization method, neglecting edge cases.\n* **Explanation**: By diversifying prioritization strategies and considering multiple scenarios, we can develop more robust and adaptable heuristics, ultimately leading to better optimization outcomes.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}