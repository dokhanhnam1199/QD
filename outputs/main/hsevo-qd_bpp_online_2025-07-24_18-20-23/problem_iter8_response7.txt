```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for each bin using a heuristic that combines 
    nuanced prioritization and numerical stability.

    Prioritizes bins with remaining capacity close to the item size using a Gaussian function.
    """
    # Prioritize bins where the item fits exactly or leaves a small remainder
    priorities = np.where(bins_remain_cap >= item, 
                          np.exp(-((bins_remain_cap - item) / item) ** 2),  # Gaussian function
                          -1.0)  # Penalize bins that can't fit the item
    
    # Ensure bins that can't fit the item have a lower priority than any bin that can fit the item
    priorities = np.where(bins_remain_cap < item, priorities - np.max(priorities[bins_remain_cap >= item]) - 1e-6, priorities)
    
    # Add a small random noise to the priorities to avoid tie-breaking issues
    priorities += np.random.uniform(-1e-6, 1e-6, size=len(bins_remain_cap))
    
    return priorities
```
