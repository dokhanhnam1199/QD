```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines 'best fit' and nuanced prioritization heuristics with numerical stability for online Bin Packing Problem.
    Prioritizes bins with remaining capacity closest to the item size and normalizes valid bin priorities.
    """
    # Calculate 'best fit' score with epsilon for numerical stability and nuanced prioritization using a Gaussian function
    scores = np.where(bins_remain_cap >= item, np.exp(-((bins_remain_cap - item) / item) ** 2), 0)
    
    # Normalize the scores
    max_score = np.max(scores)
    if max_score > 0:
        scores /= max_score
    
    # Set priority to negative infinity for bins that cannot fit the item and add a small random noise to avoid tie-breaking issues
    priority = np.where(bins_remain_cap >= item, scores, -np.inf) + np.random.uniform(-1e-6, 1e-6, size=len(bins_remain_cap))
    
    # Normalize priority scores for valid bins using exponential function
    valid_bins = priority != -np.inf
    if np.any(valid_bins):
        max_priority = np.max(priority[valid_bins])
        priority[valid_bins] = np.exp(-(max_priority - priority[valid_bins]))
    
    return priority
```
