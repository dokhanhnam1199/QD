```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for each bin using a combined heuristic.
    Combines relative fit and proportion of capacity used with nuanced normalization.
    """
    # Calculate priority score for each bin
    priorities = np.where(bins_remain_cap >= item,
                          (1 - np.abs(bins_remain_cap - item) / item) * (item / (bins_remain_cap - item + item)),
                          -1.0)  # Penalize bins that can't fit the item
    
    # Normalize priorities
    max_priority = np.max(priorities)
    if max_priority > -1.0:  
        priorities = np.where(priorities > -1.0, priorities / max_priority, priorities)
    
    # Differentiate among viable bins
    priorities = np.where((bins_remain_cap >= item) & ((item / (bins_remain_cap - item + item)) < 0.5),
                          priorities * 0.8,  # Reduce priority for bins that will be less than half full
                          priorities)
    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap <= item * 2),
                          priorities * 1.1,  # Slightly increase priority for bins with relatively low remaining capacity
                          priorities)
    
    return priorities
```
