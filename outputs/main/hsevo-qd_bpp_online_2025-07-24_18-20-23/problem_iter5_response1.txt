```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines fit priority and fullness priority with numerical stability for online bin packing.

    Args:
        item: Size of item to be added.
        bins_remain_cap: Array of remaining capacities.

    Returns:
        Array of priority scores for each bin.
    """
    # Calculate fit priority and fullness priority
    fit_priority = np.where(bins_remain_cap >= item, 
                            1 - np.abs(bins_remain_cap - item) / (item + 1e-6),  # Prioritize bins with capacity close to item size
                            -1.0)  # Penalize bins that can't fit the item
    
    fullness_priority = np.where(bins_remain_cap >= item, 
                                 1 - bins_remain_cap / (item + bins_remain_cap - item + 1e-6),  # Avoid division by zero
                                 -1.0)
    
    # Combine priorities with scaling for differentiation
    priorities = 0.6 * fit_priority + 0.4 * fullness_priority
    
    # Ensure bins that can't fit the item have lower priority
    priorities = np.where(bins_remain_cap < item, priorities - np.max(priorities), priorities)
    
    # Scale priorities to enhance differentiation among viable bins
    max_priority = np.max(priorities)
    if max_priority != -1.0:  
        priorities = np.where(priorities != -1.0 - np.max(priorities), np.exp(-(priorities - max_priority)), priorities)
    
    return priorities
```
