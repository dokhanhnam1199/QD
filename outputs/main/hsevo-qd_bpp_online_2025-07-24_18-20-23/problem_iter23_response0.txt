```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines relative fit, proportion of capacity used, and nuanced normalization.
    Differentiates among viable bins based on remaining capacity.
    """
    # Calculate priority score for each bin
    priorities = np.where(bins_remain_cap >= item,
                          (1 - np.abs(bins_remain_cap - item) / item) * (item / bins_remain_cap),
                          -1.0)  # Penalize bins that can't fit the item
    
    # Normalize priorities
    max_priority = np.max(priorities)
    if max_priority > -1.0:  
        priorities = np.where(priorities > -1.0, priorities / max_priority, priorities)
    
    # Differentiate among viable bins
    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap > item * 2),
                          priorities * 0.9,  # Slightly reduce priority for bins with high remaining capacity
                          priorities)
    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap <= item * 2),
                          priorities * 1.1,  # Slightly increase priority for bins with relatively low remaining capacity
                          priorities)
    
    return priorities
```
