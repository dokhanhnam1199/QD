```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin using a more nuanced heuristic.

    The heuristic used here combines multiple strategies to prioritize bins based on their remaining capacity.
    It prioritizes bins that have just enough capacity for the item, leaves a reasonable remainder, and avoids bins that would be too full or too empty.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the priority score for each bin based on the remaining capacity
    # We want to prioritize bins where the item fits and leaves a reasonable remainder
    priorities = np.where(bins_remain_cap >= item, 
                          np.exp(-((bins_remain_cap - item) / item) ** 2),  # Gaussian prioritization for bins with remaining capacity close to the item size
                          -1.0)  # Penalize bins that can't fit the item
    
    # Introduce a nuanced differentiation among viable bins based on their fullness
    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap < 2 * item), 
                          priorities * (1 + 0.1 * (bins_remain_cap / item)),  # Slightly prioritize bins that are not too empty
                          priorities)
    
    # Normalize the priorities to ensure numerical stability
    max_priority = np.max(priorities)
    if max_priority > 0:
        priorities = priorities / max_priority
    
    return priorities
```
