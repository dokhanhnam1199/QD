```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin using a more sophisticated heuristic.

    The heuristic used here combines multiple strategies to create a robust solution. It prioritizes bins that have 
    just enough capacity for the item, penalizes bins that would be left with too much or too little remaining capacity, 
    and ensures numerical stability.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the priority score for each bin based on the remaining capacity
    # We want to prioritize bins where the item fits exactly or leaves a small remainder
    priorities = np.where(bins_remain_cap >= item, 
                          np.exp(-((bins_remain_cap - item) / item) ** 2),  # Gaussian prioritization for bins with remaining capacity close to the item size
                          -1.0)  # Penalize bins that can't fit the item
    
    # Add a small random noise to the priorities to avoid ties and ensure exploration
    priorities += np.random.uniform(0, 1e-6, size=len(bins_remain_cap))
    
    # Ensure that bins that can't fit the item have a lower priority than any bin that can fit the item
    priorities = np.where(bins_remain_cap < item, priorities - np.max(priorities) - 1e-6, priorities)
    
    return priorities
```
