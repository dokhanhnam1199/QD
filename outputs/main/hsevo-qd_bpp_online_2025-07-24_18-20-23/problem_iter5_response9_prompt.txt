{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority score for each bin based on remaining capacity and item size.\n    Prioritizes bins that can fit the item with minimal remaining capacity.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item\n    remaining_cap = bins_remain_cap - item\n    \n    # Bins that can fit the item have higher priority based on remaining capacity\n    valid_bins = remaining_cap >= 0\n    \n    # Assign high priority to valid bins with minimal remaining capacity\n    priority = np.where(valid_bins, -remaining_cap, -np.inf)\n    \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority scores for each bin based on remaining capacity and fullness.\n    \n    Combines the benefits of minimizing waste and prioritizing almost full bins.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_capacity_after_addition = bins_remain_cap - item\n    \n    # Mask out bins that cannot hold the item\n    valid_bins = remaining_capacity_after_addition >= 0\n    \n    # Priority score is a combination of remaining capacity and fullness\n    priority_scores = np.where(valid_bins, np.exp(-remaining_capacity_after_addition) + bins_remain_cap / (item + 1e-9), -1e10)\n    \n    return priority_scores\n\n### Analyze & experience\n- Comparing the best heuristic (1st) with the worst (20th), we see that the top heuristic uses a more nuanced approach with epsilon to avoid division by zero and prioritizes bins based on remaining capacity closest to the item size. \nComparing (1st) vs (2nd), we see that the 1st heuristic uses epsilon for numerical stability, while the 2nd heuristic combines multiple prioritization strategies. \n(2nd) vs (19th) shows that both use a combination of strategies, but (2nd) is more complex. \n(3rd) vs (18th) shows similar patterns in prioritizing bins based on remaining capacity. \nOverall, top heuristics tend to use more sophisticated combinations of strategies and numerical stability measures.\n- \nTo come up with a redefined 'Current self-reflection', let's analyze the given information.\n\n* Keywords: Prioritization strategies, numerical stability, edge cases, robust solutions.\n* Advice: Combine multiple strategies, ensure numerical stability, and handle different scenarios effectively.\n* Avoid: Solely focusing on minimizing waste and using a single prioritization method.\n* Explanation: The redefined 'Current self-reflection' should focus on creating robust heuristics by combining strategies and ensuring stability, while avoiding a narrow focus on waste minimization and single-method prioritization. This leads to more effective and adaptable heuristics.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}