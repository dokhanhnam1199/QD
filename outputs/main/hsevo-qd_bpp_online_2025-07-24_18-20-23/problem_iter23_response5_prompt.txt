{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin using a nuanced heuristic.\n\n    The heuristic used here combines multiple strategies to prioritize bins based on their remaining capacity.\n    It not only considers bins that have just enough capacity for the item but also differentiates among viable options\n    by taking into account the proportion of capacity used and the absolute remaining capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the priority score for each bin based on the remaining capacity\n    # We want to prioritize bins where the item fits and leaves a reasonable remainder\n    priorities = np.where(bins_remain_cap >= item,\n                          # Combine the relative fit (how close the remaining capacity is to the item size)\n                          # with the proportion of the bin that will be used\n                          (1 - np.abs(bins_remain_cap - item) / item) * (item / (bins_remain_cap - item + item)),\n                          -1.0)  # Penalize bins that can't fit the item\n\n    # Normalize the priorities to ensure numerical stability and enhance differentiation\n    max_priority = np.max(priorities)\n    if max_priority > -1.0:  # Check if there are bins that can fit the item\n        priorities = np.where(priorities > -1.0, priorities / max_priority, priorities)\n\n    # Further differentiate among bins that can fit the item by slightly penalizing those with very high remaining capacity\n    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap > item * 2),\n                          priorities * 0.9,  # Slightly reduce priority for bins with high remaining capacity\n                          priorities)\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin using an advanced heuristic.\n\n    The heuristic combines multiple strategies to prioritize bins based on their remaining capacity,\n    focusing on the best fit, proportion of capacity used, and avoiding unnecessary complexity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the priority score for each bin based on the remaining capacity\n    # Prioritize bins where the item fits and leaves a minimal remainder (best fit)\n    priorities = np.where(bins_remain_cap >= item,\n                          # Combine the relative fit with the proportion of the bin that will be used after adding the item\n                          (1 - (bins_remain_cap - item) / bins_remain_cap) * (item / bins_remain_cap),\n                          -1.0)  # Penalize bins that can't fit the item\n\n    # Normalize the priorities to ensure numerical stability and enhance differentiation\n    max_priority = np.max(priorities)\n    if max_priority > -1.0:  # Check if there are bins that can fit the item\n        priorities = np.where(priorities > -1.0, priorities / max_priority, priorities)\n\n    # Slightly penalize bins with very low utilization after adding the item to encourage packing efficiency\n    priorities = np.where((bins_remain_cap >= item) & ((item / bins_remain_cap) < 0.5),\n                          priorities * 0.8,  # Reduce priority for bins that will be less than half full after adding the item\n                          priorities)\n\n    return priorities\n\n### Analyze & experience\n- Comparing the best heuristic (1st) with the worst (20th), we observe that the top heuristic combines relative fit and proportion of capacity used with nuanced normalization, whereas the worst relies on a Gaussian-like function with random noise. \nThe top heuristics (1st-5th) generally emphasize nuanced normalization and differentiation among viable bins, while the bottom ones (16th-20th) either lack these aspects or introduce unnecessary complexity.\nComparing (1st) vs (2nd), we see a slight variation in the formula used for calculating priorities, with the 1st using a logarithmic term. \n(3rd) vs (4th) shows a similar pattern, with both using relative fit and proportion used, but differing in their normalization approach. \nComparing (second worst) vs (worst), we see that both use a Gaussian-like function, but the worst adds random noise.\nOverall, the top heuristics tend to focus on a balanced and nuanced approach to prioritization, while the lower-ranked ones either overcomplicate or oversimplify the prioritization logic.\n- \nTo provide a useful response, let's analyze the given 'Current self-reflection' and 'Ineffective self-reflection'.\n\nUpon examination, it appears that 'Current self-reflection' emphasizes combining multiple strategies, nuanced prioritization, and effective normalization, while avoiding unnecessary complexity and redundancy. 'Ineffective self-reflection', on the other hand, seems to reiterate similar points, but with some repetition and less clarity.\n\nHere's a redefined 'Current self-reflection' in 4 bullet points:\n\n* **Keywords**: Nuanced prioritization, multiple strategies, normalization, differentiation.\n* **Advice**: Combine relative fit and proportion of capacity used with effective normalization and differentiation among viable bins.\n* **Avoid**: Unnecessary complexity, redundancy, and repetition in heuristic designs.\n* **Explanation**: By focusing on nuanced prioritization and combining multiple strategies, we can design more effective heuristics that avoid common pitfalls, leading to better performance and robustness.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}