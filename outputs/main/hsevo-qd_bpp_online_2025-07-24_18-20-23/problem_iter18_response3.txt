```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin using an advanced heuristic.

    The heuristic used here combines multiple strategies to prioritize bins based on their remaining capacity,
    waste space, and the proportion of capacity used, ensuring a nuanced and efficient bin selection process.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the priority score for each bin based on the remaining capacity
    # We want to prioritize bins where the item fits, with a focus on minimizing waste space
    priorities = np.where(bins_remain_cap >= item,
                          # Combine the relative fit, proportion of the bin used, and a penalty for large remaining capacity
                          ((item / (bins_remain_cap)) * (1 - np.abs(bins_remain_cap - item) / bins_remain_cap)),
                          -1.0)  # Penalize bins that can't fit the item

    # Normalize the priorities to ensure numerical stability and enhance differentiation
    max_priority = np.max(priorities)
    if max_priority > -1.0:  # Check if there are bins that can fit the item
        priorities = np.where(priorities > -1.0, priorities / max_priority, priorities)

    # Introduce a non-linear penalty for bins with very high remaining capacity to encourage tighter packing
    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap > item * 1.5),
                          priorities * np.exp(-(bins_remain_cap - item) / item),  # Non-linear penalty
                          priorities)

    return priorities
```
