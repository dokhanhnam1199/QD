```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for each bin by combining relative fit, proportion of capacity used, 
    and nuanced normalization to ensure numerical stability and differentiation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate priority score based on relative fit and proportion of capacity used
    priorities = np.where(bins_remain_cap >= item, 
                          (1 - (bins_remain_cap - item) / bins_remain_cap) * np.exp(-((bins_remain_cap - item) / item) ** 2),  
                          -1.0)  # Penalize bins that can't fit the item
    
    # Normalize priorities to ensure numerical stability and enhance differentiation
    max_priority = np.max(priorities)
    if max_priority > -1.0:  
        priorities = np.where(priorities > -1.0, priorities / max_priority, priorities)

    # Introduce a slight penalty for bins with very low utilization after adding the item
    priorities = np.where((bins_remain_cap >= item) & ((item / (bins_remain_cap - item + item)) < 0.5),
                          priorities * 0.8,  
                          priorities)

    # Add a small random noise to the priorities to avoid tie-breaking issues
    priorities += np.random.uniform(-1e-6, 1e-6, size=len(bins_remain_cap))
    
    return priorities
```
