```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin using an enhanced heuristic.

    The heuristic used here builds upon the previous version by introducing a more sophisticated differentiation 
    among viable bins and improving the normalization process for better numerical stability and priority differentiation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the priority score for each bin based on the remaining capacity
    # We want to prioritize bins where the item fits and leaves a reasonable remainder
    priorities = np.where(bins_remain_cap >= item,
                          # Introduce a more nuanced relative fit calculation that considers both the absolute difference and the proportion of the bin used
                          (1 - np.abs(bins_remain_cap - item) / (bins_remain_cap + 1e-9)) * np.exp(-(bins_remain_cap - item) / item),
                          -1.0)  # Penalize bins that can't fit the item

    # Normalize the priorities to ensure numerical stability and enhance differentiation
    max_priority = np.max(priorities)
    min_priority = np.min(priorities)
    if max_priority > -1.0:  # Check if there are bins that can fit the item
        # Apply a more robust normalization technique to improve differentiation among viable bins
        priorities = np.where(priorities > -1.0, (priorities - min_priority) / (max_priority - min_priority + 1e-9), priorities)

    # Further differentiate among bins that can fit the item by applying a non-linear penalty for those with very high remaining capacity
    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap > item * 2),
                          priorities * np.exp(-(bins_remain_cap - item * 2) / item),  # Apply a non-linear penalty
                          priorities)

    return priorities
```
