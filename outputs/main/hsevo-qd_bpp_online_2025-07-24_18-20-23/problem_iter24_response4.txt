```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin using an advanced heuristic.

    The heuristic used here combines multiple strategies to prioritize bins based on their remaining capacity,
    with a focus on nuanced differentiation and effective normalization. It not only considers bins that have 
    just enough capacity for the item but also differentiates among viable options by taking into account the 
    proportion of capacity used, the absolute remaining capacity, and a non-linear fit score.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the priority score for each bin based on the remaining capacity
    # We want to prioritize bins where the item fits and leaves a reasonable remainder
    priorities = np.where(bins_remain_cap >= item,
                          # Combine the relative fit (how close the remaining capacity is to the item size) with a non-linear score,
                          # the proportion of the bin that will be used, and a penalty for high remaining capacity
                          ((1 - np.abs(bins_remain_cap - item) / (bins_remain_cap + item)) ** 2) * (item / (bins_remain_cap)),
                          -1.0)  # Penalize bins that can't fit the item

    # Normalize the priorities to ensure numerical stability and enhance differentiation
    max_priority = np.max(priorities)
    if max_priority > -1.0:  # Check if there are bins that can fit the item
        priorities = np.where(priorities > -1.0, priorities / max_priority, priorities)

    # Further differentiate among bins that can fit the item by applying a non-linear penalty for those with very high remaining capacity
    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap > item * 2),
                          priorities * (1 - (bins_remain_cap - item) / (bins_remain_cap + item)),  # Apply a non-linear penalty
                          priorities)

    return priorities
```
