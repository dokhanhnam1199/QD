```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines relative fit and proportion of capacity used, with nuanced normalization and differentiation.
    """
    # Calculate priority score based on relative fit and proportion of capacity used
    priorities = np.where(bins_remain_cap >= item, 
                          (1 - np.abs(bins_remain_cap - item) / (item + 1e-6)) * (item / (bins_remain_cap)), 
                          -1.0)  # Penalize bins that can't fit the item
    
    # Normalize priorities for viable bins
    viable_bins = priorities > -1.0
    if np.any(viable_bins):
        max_priority = np.max(priorities[viable_bins])
        priorities[viable_bins] /= max_priority
    
    # Differentiate among viable bins by slightly penalizing those with high remaining capacity
    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap > item * 2), 
                          priorities * 0.9, priorities)
    
    return priorities
```
