```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin using an advanced heuristic.

    The heuristic used here combines multiple strategies to prioritize bins based on their remaining capacity,
    utilization rate, and the relative fit of the item. It also employs a sophisticated normalization technique
    to differentiate among viable options effectively.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the priority score for each bin based on multiple factors
    # We want to prioritize bins where the item fits well, leaves a reasonable remainder, and has a high utilization rate
    priorities = np.where(bins_remain_cap >= item,
                          # Combine the relative fit, utilization rate, and a penalty for high remaining capacity
                          ((1 - np.abs(bins_remain_cap - item) / (bins_remain_cap + 1e-9)) *  # Relative fit with regularization
                           (item / (bins_remain_cap + 1e-9)) *  # Utilization rate with regularization
                           np.exp(-(bins_remain_cap - item) / (item + 1e-9))),  # Penalty for high remaining capacity
                          -1.0)  # Penalize bins that can't fit the item

    # Normalize the priorities using a softmax-like function to enhance differentiation
    max_priority = np.max(priorities)
    if max_priority > -1.0:  # Check if there are bins that can fit the item
        viable_bins = priorities > -1.0
        priorities[viable_bins] = np.exp(priorities[viable_bins] - max_priority) / np.sum(np.exp(priorities[viable_bins] - max_priority))
        priorities[~viable_bins] = 0.0  # Ensure non-viable bins have zero priority

    # Further differentiation is achieved through the softmax normalization, making additional steps redundant

    return priorities
```
