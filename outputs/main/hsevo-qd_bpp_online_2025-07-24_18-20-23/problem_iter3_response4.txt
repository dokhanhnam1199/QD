```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin using a combination of multiple heuristics.

    The heuristic used here combines the 'First-Fit Decreasing' algorithm with a 'Best-Fit' strategy, 
    and adds an additional term to prioritize bins that are more full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the 'Best-Fit' score for each bin based on the remaining capacity
    # We want to prioritize bins where the item fits and leaves a small remainder
    best_fit_scores = np.where(bins_remain_cap >= item, 
                               1 - np.abs(bins_remain_cap - item) / item,  # Prioritize bins with remaining capacity close to the item size
                               -1.0)  # Penalize bins that can't fit the item

    # Calculate the 'Fullness' score for each bin based on its remaining capacity
    # We want to prioritize bins that are more full (i.e., have less remaining capacity)
    fullness_scores = np.where(bins_remain_cap >= item, 
                               1 - bins_remain_cap / (item + bins_remain_cap - item + 1e-6),  # Prioritize bins that are more full
                               -1.0)  # Penalize bins that can't fit the item

    # Combine the 'Best-Fit' and 'Fullness' scores into a single priority score
    priorities = 0.7 * best_fit_scores + 0.3 * fullness_scores
    
    # Ensure that bins that can't fit the item have a lower priority than any bin that can fit the item
    priorities = np.where(bins_remain_cap < item, priorities - np.max(priorities), priorities)
    
    return priorities
```
