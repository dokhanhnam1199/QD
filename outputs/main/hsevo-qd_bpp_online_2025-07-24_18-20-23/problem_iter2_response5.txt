```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority score for each bin by combining the 'best fit' and 'valid bin' heuristics.
    Prioritizes bins that are closest to being full and can still hold the item.
    """
    # Calculate 'best fit' score: higher for bins with remaining capacity closest to the item size
    best_fit_scores = np.where(bins_remain_cap >= item, 1 / (np.abs(bins_remain_cap - item) + 1e-6), 0)
    
    # Normalize the scores
    max_score = np.max(best_fit_scores)
    if max_score > 0:
        best_fit_scores /= max_score
    
    # Combine with 'valid bin' indicator to ensure only valid bins are considered
    valid_bins = (bins_remain_cap >= item).astype(float)
    priority = best_fit_scores * valid_bins
    
    return priority
```
