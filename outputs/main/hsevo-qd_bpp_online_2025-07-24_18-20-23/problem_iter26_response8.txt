```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines relative fit and proportion of capacity used with nuanced normalization and differentiation.
    """
    # Calculate priority score for each bin
    priorities = np.where(bins_remain_cap >= item,
                          (1 - np.abs(bins_remain_cap - item) / item) * np.log(item / (bins_remain_cap - item + item) + 1),
                          -1.0)  # Penalize bins that can't fit the item
    
    # Normalize priorities
    valid_bins = priorities != -1.0
    if np.any(valid_bins):
        max_priority = np.max(priorities[valid_bins])
        priorities[valid_bins] = priorities[valid_bins] / max_priority
    
    # Differentiate among viable bins using a strategy similar to priority_v1
    diff = np.abs(bins_remain_cap - item)
    priorities = np.where((bins_remain_cap >= item) & (diff < item / 2),
                          priorities * 1.1,  # Increase priority for bins with relatively low difference
                          priorities)
    priorities = np.where((bins_remain_cap >= item) & (diff >= item / 2),
                          priorities * 0.9,  # Reduce priority for bins with high difference
                          priorities)
    
    return priorities
```
