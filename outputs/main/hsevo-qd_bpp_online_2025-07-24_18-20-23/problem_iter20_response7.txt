```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for each bin using a heuristic combining relative fit, proportion used, and nuanced normalization.

    The heuristic prioritizes bins based on their remaining capacity, focusing on a balanced approach for effective bin packing.
    """
    # Calculate priority scores combining relative fit and proportion used
    priorities = np.where(bins_remain_cap >= item, 
                          (1 - (bins_remain_cap - item) / bins_remain_cap) * np.exp(-((bins_remain_cap - item) / item) ** 2),  
                          -1.0)  # Penalize bins that can't fit the item
    
    # Normalize priorities to ensure numerical stability and enhance differentiation
    max_priority = np.max(priorities)
    if max_priority > -1.0:  
        priorities = np.where(priorities > -1.0, priorities / max_priority, priorities)

    # Slightly reward bins with lower remaining capacity after adding the item
    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap <= item * 2), 
                          priorities * 1.1,  
                          priorities)

    return priorities
```
