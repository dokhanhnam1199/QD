```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines nuanced prioritization strategies: prioritizes bins with remaining capacity closest to item size,
    uses a Gaussian-like function, and normalizes valid bin priorities for numerical stability.
    """
    epsilon = 1e-6  # Small value for numerical stability
    valid_bins = bins_remain_cap >= item
    # Combine strategies: prioritize bins with remaining capacity close to item size and use Gaussian-like function
    priority = np.where(valid_bins, np.exp(-((bins_remain_cap - item) / (item + epsilon)) ** 2), -np.inf)
    # Normalize priority scores for valid bins
    valid_bins = priority != -np.inf
    if np.any(valid_bins):
        max_priority = np.max(priority[valid_bins])
        priority[valid_bins] = np.exp(-(max_priority - priority[valid_bins]))
    # Add a small random noise to the priorities to avoid tie-breaking issues
    priority += np.where(valid_bins, np.random.uniform(-1e-6, 1e-6, size=len(bins_remain_cap)), 0)
    return priority
```
