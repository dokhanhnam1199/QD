```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines relative fit and proportion of capacity used with nuanced normalization and differentiation.
    
    Prioritizes bins where the item fits, leaves a reasonable remainder, and has a good utilization rate.
    """
    # Calculate priority score based on relative fit and proportion of capacity used
    priorities = np.where(bins_remain_cap >= item, 
                          (1 - (bins_remain_cap - item) / bins_remain_cap) * np.exp(-((bins_remain_cap - item) / item) ** 2),
                          -1.0)  # Penalize bins that can't fit the item
    
    # Normalize priorities to enhance differentiation
    max_priority = np.max(priorities)
    if max_priority > -1.0:  
        priorities = np.where(priorities > -1.0, priorities / max_priority, priorities)
    
    # Differentiate among bins that can fit the item by rewarding those with lower remaining capacity
    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap <= item * 2), 
                          priorities * 1.1,  # Slightly increase priority for bins with relatively low remaining capacity
                          priorities)
    
    # Add a small random noise to avoid tie-breaking issues
    priorities += np.random.uniform(-1e-6, 1e-6, size=len(bins_remain_cap))
    
    return priorities
```
