import numpy as np
import random
import math
import scipy
import torch
def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.0008715681901078698, 
                 priority_weight: float = 7.648362113450399, normalization_base: float = 9.436429986441222) -> np.ndarray:
    """
    Combines strategies: prioritizes bins with remaining capacity closest to item size,
    ensures numerical stability with epsilon, and normalizes valid bin priorities.
    """
    # Check if bins can fit the item and calculate priority
    valid_bins = bins_remain_cap >= item
    diff = np.abs(bins_remain_cap - item)
    priority = np.where(valid_bins, -diff + priority_weight / (bins_remain_cap + epsilon), -np.inf)
    
    # Normalize priority scores for valid bins
    valid_bins = priority != -np.inf
    if np.any(valid_bins):
        max_priority = np.max(priority[valid_bins])
        priority[valid_bins] = np.exp(-normalization_base * (max_priority - priority[valid_bins]))
    
    return priority
