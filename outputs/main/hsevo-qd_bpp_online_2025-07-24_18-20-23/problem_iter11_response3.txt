```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines relative fit and proportion of capacity used strategies with nuanced normalization for numerical stability.
    """
    # Check if bins can fit the item and calculate priority
    valid_bins = bins_remain_cap >= item
    diff = np.abs(bins_remain_cap - item)
    priority = np.where(valid_bins, -diff + 1 / (bins_remain_cap + 1e-6), -np.inf)
    
    # Normalize priority scores for valid bins using a Gaussian-like function
    valid_bins = priority != -np.inf
    if np.any(valid_bins):
        max_priority = np.max(priority[valid_bins])
        priority[valid_bins] = np.exp(-((max_priority - priority[valid_bins]) / (max_priority + 1e-6)) ** 2)
    
    # Add a small random noise to the priorities to avoid tie-breaking issues
    priority += np.random.uniform(-1e-6, 1e-6, size=len(bins_remain_cap))
    
    return priority
```
