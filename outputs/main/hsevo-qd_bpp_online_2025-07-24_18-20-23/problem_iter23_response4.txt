```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines relative fit and proportion used with nuanced normalization and differentiation.
    """
    # Calculate priority score for each bin
    priorities = np.where(bins_remain_cap >= item,
                          (1 - np.abs(bins_remain_cap - item) / item) * (item / (bins_remain_cap - item + item)),
                          -1.0)
    
    # Normalize priorities
    max_priority = np.max(priorities)
    if max_priority > -1.0:
        priorities = np.where(priorities > -1.0, priorities / max_priority, priorities)

    # Slightly penalize bins with high remaining capacity and reward those with lower remaining capacity
    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap > item * 2), priorities * 0.9, priorities)
    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap <= item * 2), priorities * 1.1, priorities)

    return priorities
```
