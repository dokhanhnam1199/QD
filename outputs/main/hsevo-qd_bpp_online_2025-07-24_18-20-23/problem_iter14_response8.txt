```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines relative fit and proportion of capacity used with nuanced normalization for online bin packing.
    Prioritizes bins where the item fits with a reasonable remainder and differentiates among viable options.
    """
    epsilon = 1e-6  # Small value for numerical stability
    valid_bins = bins_remain_cap >= item
    
    # Calculate relative fit and proportion used, inspired by priority_v0
    relative_fit = 1 - np.abs(bins_remain_cap - item) / (item + epsilon)
    proportion_used = item / (bins_remain_cap + epsilon)
    priority = np.where(valid_bins, relative_fit * proportion_used, -1.0)
    
    # Normalize priority scores for valid bins, similar to priority_v0
    max_priority = np.max(priority)
    if max_priority > -1.0:  
        priority = np.where(priority > -1.0, priority / max_priority, priority)
    
    # Introduce a differentiation strategy inspired by priority_v1
    diff = np.abs(bins_remain_cap - item)
    adjustment = np.exp(-diff / (item + epsilon))  # Adjust based on how close the bin capacity is to the item size
    priority = np.where(valid_bins, priority * adjustment, priority)
    
    return priority
```
