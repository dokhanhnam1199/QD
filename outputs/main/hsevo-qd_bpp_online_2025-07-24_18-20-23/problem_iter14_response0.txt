```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines relative fit, proportion of capacity used, and nuanced normalization for online bin packing.
    Prioritizes bins with remaining capacity close to item size and differentiates among viable options.
    """
    epsilon = 1e-6  # Small value for numerical stability
    valid_bins = bins_remain_cap >= item
    # Calculate relative fit and proportion used
    relative_fit = 1 - np.abs(bins_remain_cap - item) / (item + epsilon)
    proportion_used = item / (bins_remain_cap + epsilon)
    priority = np.where(valid_bins, relative_fit * proportion_used, -1.0)
    
    # Normalize priority scores for valid bins using exponential normalization
    if np.any(valid_bins):
        max_priority = np.max(priority[valid_bins])
        priority[valid_bins] = np.exp(-(max_priority - priority[valid_bins]))
    
    # Differentiate among bins that can fit the item based on remaining capacity
    priority = np.where((bins_remain_cap >= item) & (bins_remain_cap > item * 2),
                        priority * 0.9,  # Slightly reduce priority for bins with high remaining capacity
                        priority)
    
    return priority
```
