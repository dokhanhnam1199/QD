```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines relative fit and proportion of capacity used with nuanced normalization for online Bin Packing Problem.
    
    Prioritizes bins where the item fits, considering both the relative fit and the proportion of capacity used.
    """
    epsilon = 1e-6  # For numerical stability
    # Calculate priority score combining relative fit and proportion of capacity used
    priorities = np.where(bins_remain_cap >= item, 
                          (1 - np.abs(bins_remain_cap - item) / (item + epsilon)) * (item / (bins_remain_cap + epsilon)), 
                          -1.0)  # Penalize bins that can't fit the item
    
    # Normalize priorities for bins that can fit the item
    valid_bins = priorities > -1.0
    if np.any(valid_bins):
        max_priority = np.max(priorities[valid_bins])
        priorities[valid_bins] = priorities[valid_bins] / max_priority  # Normalize valid priorities
    
    # Slightly penalize bins with very high remaining capacity
    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap > item * 2), 
                          priorities * 0.9,  # Reduce priority for bins with high remaining capacity
                          priorities)
    
    return priorities
```
