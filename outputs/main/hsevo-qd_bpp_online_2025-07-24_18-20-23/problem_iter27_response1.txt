```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin using an advanced heuristic.

    The heuristic combines relative fit, proportion of capacity used, and a novel 'waste minimization' strategy.
    It prioritizes bins that fit the item snugly, utilizes a significant portion of the bin's capacity, and minimizes waste.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the priority score for each bin based on the remaining capacity
    # We want to prioritize bins where the item fits and leaves minimal remainder
    priorities = np.where(bins_remain_cap >= item,
                          # Combine relative fit, proportion of capacity used, and waste minimization
                          (1 - (bins_remain_cap - item) / bins_remain_cap) * np.log(item / (bins_remain_cap - item + item) + 1),
                          -1.0)  # Penalize bins that can't fit the item

    # Normalize the priorities using a softmax-like function to enhance differentiation
    max_priority = np.max(priorities)
    if max_priority > -1.0:  # Check if there are bins that can fit the item
        exp_priorities = np.exp(priorities - max_priority)
        priorities = np.where(priorities > -1.0, exp_priorities / np.sum(exp_priorities), -1.0)

    # Slightly penalize bins with very high remaining capacity to encourage snug fits
    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap > item * 1.5),
                          priorities * 0.8,  # Reduce priority for bins with high remaining capacity
                          priorities)

    return priorities
```
