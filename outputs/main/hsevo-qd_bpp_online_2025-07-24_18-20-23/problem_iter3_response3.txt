```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin using a more sophisticated heuristic.

    The heuristic used here combines multiple prioritization strategies to adapt to different scenarios.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the priority score for each bin based on the remaining capacity
    # We want to prioritize bins where the item fits exactly or leaves a small remainder
    fit_priority = np.where(bins_remain_cap >= item, 
                            1 - np.abs(bins_remain_cap - item) / item,  # Prioritize bins with remaining capacity close to the item size
                            -1.0)  # Penalize bins that can't fit the item
    
    # Prioritize bins that are relatively full to minimize the number of bins used
    fullness_priority = np.where(bins_remain_cap >= item, 
                                 1 - bins_remain_cap / (item + bins_remain_cap - item + 1e-6),  # Avoid division by zero
                                 -1.0)
    
    # Combine the two prioritization strategies
    priorities = 0.6 * fit_priority + 0.4 * fullness_priority
    
    # Ensure that bins that can't fit the item have a lower priority than any bin that can fit the item
    priorities = np.where(bins_remain_cap < item, priorities - np.max(priorities), priorities)
    
    return priorities
```
