```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin using a more sophisticated heuristic.

    The heuristic used here combines multiple prioritization strategies to adapt to various scenarios.
    It prioritizes bins that have just enough capacity for the item, penalizes bins that would be left with too much or too little remaining capacity,
    and also considers the relative remaining capacity to encourage a more balanced bin utilization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the priority score for each bin based on the remaining capacity
    # We want to prioritize bins where the item fits exactly or leaves a small remainder
    fit_priority = np.where(bins_remain_cap >= item, 
                            1 - np.abs(bins_remain_cap - item) / item,  # Prioritize bins with remaining capacity close to the item size
                            -1.0)  # Penalize bins that can't fit the item
    
    # Calculate a secondary priority based on the relative remaining capacity after adding the item
    # This encourages using bins in a way that balances their remaining capacities
    relative_cap_priority = np.where(bins_remain_cap >= item, 
                                      (bins_remain_cap - item) / bins_remain_cap,  # Higher priority for bins that are more full after adding the item
                                      -1.0)
    
    # Combine the two priorities
    # The first priority ensures we prefer bins that fit the item well, and the second priority helps in balancing the bin usage
    priorities = fit_priority + 0.5 * relative_cap_priority
    
    # Ensure that bins that can't fit the item have a lower priority than any bin that can fit the item
    priorities = np.where(bins_remain_cap < item, priorities - np.max(priorities), priorities)
    
    return priorities
```
