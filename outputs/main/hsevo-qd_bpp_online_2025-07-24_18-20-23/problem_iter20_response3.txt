```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines relative fit and proportion used with nuanced normalization and differentiation.
    """
    epsilon = 1e-6  # Numerical stability
    valid_bins = bins_remain_cap >= item
    # Relative fit and proportion used
    relative_fit = 1 - np.abs(bins_remain_cap - item) / (item + epsilon)
    proportion_used = np.log(item / (bins_remain_cap + epsilon) + 1)  # Logarithmic factor
    priority = np.where(valid_bins, relative_fit * proportion_used, -1.0)
    
    # Nuanced normalization and differentiation
    if np.any(valid_bins):
        max_priority = np.max(priority)
        if max_priority > -1.0:  
            priority = np.where(priority > -1.0, priority / max_priority, priority)
        # Differentiate bins with high remaining capacity
        priority = np.where((bins_remain_cap >= item) & (bins_remain_cap > item * 2),
                            priority * 0.9,  # Reduce priority for high remaining capacity
                            priority)
    
    return priority
```
