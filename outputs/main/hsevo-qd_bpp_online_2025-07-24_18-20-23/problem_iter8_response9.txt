```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines nuanced prioritization with numerical stability and normalization.
    Prioritizes bins with remaining capacity close to the item size.
    """
    # Calculate priority using a Gaussian-like function for bins that can fit the item
    priorities = np.where(bins_remain_cap >= item, 
                          np.exp(-((bins_remain_cap - item) / item) ** 2),  # Nuanced prioritization
                          -np.inf)  # Penalize bins that can't fit the item
    
    # Normalize valid bin priorities to enhance differentiation
    valid_priorities = priorities[bins_remain_cap >= item]
    if len(valid_priorities) > 0:  
        max_priority = np.max(valid_priorities)
        priorities = np.where(priorities != -np.inf, np.exp(priorities - max_priority), priorities)
    
    # Add a small random noise to avoid tie-breaking issues
    priorities += 1e-8 * np.random.rand(*priorities.shape)
    
    return priorities
```
