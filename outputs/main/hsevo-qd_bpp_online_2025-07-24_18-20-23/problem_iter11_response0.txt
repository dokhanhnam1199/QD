```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines multiple strategies to prioritize bins based on their remaining capacity.
    Uses relative fit, proportion of capacity used, and a Gaussian-like function for nuanced prioritization.
    """
    # Calculate priority score using relative fit and proportion of capacity used
    priorities = np.where(bins_remain_cap >= item, 
                          (1 - np.abs(bins_remain_cap - item) / item) * (item / (bins_remain_cap - item + item)), 
                          -1.0)
    
    # Apply a Gaussian-like function to further differentiate among viable bins
    priorities = np.where(bins_remain_cap >= item, 
                          priorities * np.exp(-((bins_remain_cap - item) / item) ** 2), 
                          priorities)
    
    # Normalize priorities for numerical stability
    max_priority = np.max(priorities)
    if max_priority > -1.0:  
        priorities = np.where(priorities > -1.0, priorities / max_priority, priorities)
    
    # Add a small random noise to avoid tie-breaking issues
    priorities += np.random.uniform(-1e-6, 1e-6, size=len(bins_remain_cap))
    
    return priorities
```
