{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin using a nuanced heuristic.\n\n    The heuristic used here combines multiple strategies to prioritize bins based on their remaining capacity.\n    It not only considers bins that have just enough capacity for the item but also differentiates among viable options\n    by taking into account the proportion of capacity used and the absolute remaining capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the priority score for each bin based on the remaining capacity\n    # We want to prioritize bins where the item fits and leaves a reasonable remainder\n    priorities = np.where(bins_remain_cap >= item,\n                          # Combine the relative fit (how close the remaining capacity is to the item size)\n                          # with the proportion of the bin that will be used\n                          (1 - np.abs(bins_remain_cap - item) / item) * (item / (bins_remain_cap - item + item)),\n                          -1.0)  # Penalize bins that can't fit the item\n\n    # Normalize the priorities to ensure numerical stability and enhance differentiation\n    max_priority = np.max(priorities)\n    if max_priority > -1.0:  # Check if there are bins that can fit the item\n        priorities = np.where(priorities > -1.0, priorities / max_priority, priorities)\n\n    # Further differentiate among bins that can fit the item by slightly penalizing those with very high remaining capacity\n    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap > item * 2),\n                          priorities * 0.9,  # Slightly reduce priority for bins with high remaining capacity\n                          priorities)\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin using an advanced heuristic.\n\n    The heuristic combines multiple strategies to prioritize bins based on their remaining capacity,\n    focusing on nuanced prioritization, normalization, and differentiation among viable options.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the priority score for each bin based on the remaining capacity\n    # We want to prioritize bins where the item fits and leaves a reasonable remainder\n    priorities = np.where(bins_remain_cap >= item,\n                          # Combine the relative fit (how close the remaining capacity is to the item size)\n                          # with the proportion of the bin that will be used after adding the item\n                          (1 - (bins_remain_cap - item) / bins_remain_cap) * np.log(item / (bins_remain_cap - item + item) + 1),\n                          -1.0)  # Penalize bins that can't fit the item\n\n    # Normalize the priorities to ensure numerical stability and enhance differentiation\n    max_priority = np.max(priorities)\n    if max_priority > -1.0:  # Check if there are bins that can fit the item\n        priorities = np.where(priorities > -1.0, priorities / max_priority, priorities)\n\n    # Introduce a slight penalty for bins with very low utilization after adding the item\n    priorities = np.where((bins_remain_cap >= item) & ((item / (bins_remain_cap - item + item)) < 0.5),\n                          priorities * 0.8,  # Reduce priority for bins that will be less than half full\n                          priorities)\n\n    # Further differentiate among bins that can fit the item by slightly rewarding those with lower remaining capacity\n    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap <= item * 2),\n                          priorities * 1.1,  # Slightly increase priority for bins with relatively low remaining capacity\n                          priorities)\n\n    return priorities\n\n### Analyze & experience\n- Comparing the best heuristic (1st) with the worst (20th), we see that the top heuristic uses a nuanced combination of relative fit and proportion of capacity used, with careful normalization and differentiation among viable bins. In contrast, the worst heuristic relies on a Gaussian-like function and adds random noise to priorities. The top heuristics generally use more sophisticated and nuanced calculations for priority scores, such as combining relative fit and proportion of capacity used. They also often apply more refined normalization techniques. Comparing the 1st and 2nd heuristics, both use similar strategies but with slight differences in calculation and differentiation. The 1st heuristic uses a logarithmic function for proportion used, while the 2nd uses a simple proportion. The worst heuristics (like 20th) tend to rely on simpler or less nuanced strategies, such as using a Gaussian-like function without considering the proportion of capacity used. Overall, the better heuristics tend to have more complex and nuanced priority calculations, more sophisticated normalization, and differentiation strategies.\n- \nTo redesign 'Current self-reflection', let's analyze the given information. \n\n* Keywords: Nuanced prioritization, multiple strategies, normalization, differentiation among viable bins.\n* Advice: Combine multiple factors for priority calculations and use sophisticated normalization techniques to differentiate among viable bins effectively.\n* Avoid: Overly simplistic strategies, redundancy, unnecessary complexity, and randomness.\n* Explanation: By focusing on nuanced prioritization and combining multiple strategies with effective normalization, we can create more robust and effective heuristics that differentiate among viable bins and enhance packing efficiency.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}