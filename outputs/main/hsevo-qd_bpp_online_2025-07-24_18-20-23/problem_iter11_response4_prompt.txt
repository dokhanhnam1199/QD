{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin using a nuanced heuristic.\n\n    The heuristic used here combines multiple strategies to prioritize bins based on their remaining capacity.\n    It not only considers bins that have just enough capacity for the item but also differentiates among viable options\n    by taking into account the proportion of capacity used and the absolute remaining capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the priority score for each bin based on the remaining capacity\n    # We want to prioritize bins where the item fits and leaves a reasonable remainder\n    priorities = np.where(bins_remain_cap >= item,\n                          # Combine the relative fit (how close the remaining capacity is to the item size)\n                          # with the proportion of the bin that will be used\n                          (1 - np.abs(bins_remain_cap - item) / item) * (item / (bins_remain_cap - item + item)),\n                          -1.0)  # Penalize bins that can't fit the item\n\n    # Normalize the priorities to ensure numerical stability and enhance differentiation\n    max_priority = np.max(priorities)\n    if max_priority > -1.0:  # Check if there are bins that can fit the item\n        priorities = np.where(priorities > -1.0, priorities / max_priority, priorities)\n\n    # Further differentiate among bins that can fit the item by slightly penalizing those with very high remaining capacity\n    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap > item * 2),\n                          priorities * 0.9,  # Slightly reduce priority for bins with high remaining capacity\n                          priorities)\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines fit priority with nuanced normalization for online bin packing.\n    Prioritizes bins with remaining capacity closest to item size and ensures numerical stability.\n    \"\"\"\n    # Check if bins can fit the item and calculate priority\n    epsilon = 1e-6  # Small value for numerical stability\n    valid_bins = bins_remain_cap >= item\n    diff = np.abs(bins_remain_cap - item)\n    priority = np.where(valid_bins, -diff + 1 / (bins_remain_cap + epsilon), -np.inf)\n    \n    # Combine fit priority with fullness priority\n    fullness_priority = np.where(valid_bins, 1 - bins_remain_cap / (bins_remain_cap + item + epsilon), 0)\n    priority = np.where(valid_bins, priority + 0.4 * fullness_priority, priority)\n    \n    # Normalize priority scores for valid bins\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        max_priority = np.max(priority[valid_bins])\n        priority[valid_bins] = np.exp(-(max_priority - priority[valid_bins]))\n    \n    return priority\n\n### Analyze & experience\n- Comparing the best heuristics (1st to 7th) with the worst (14th to 20th), we see that the top heuristics use a combination of strategies to prioritize bins, including relative fit, proportion of capacity used, and absolute remaining capacity. They also normalize priorities to ensure numerical stability. In contrast, the worst heuristics either repeat the same strategy or introduce unnecessary complexity. Comparing (1st) vs (8th), we see that the top heuristic uses a more nuanced normalization and considers both relative fit and proportion of capacity used. (8th) vs (9th) shows that a small difference in epsilon value doesn't significantly impact performance. (9th) vs (10th) indicates that introducing an optimal epsilon is crucial. Overall, a good heuristic should combine multiple strategies, normalize priorities, and avoid unnecessary complexity.\n- \nTo redefine 'Current self-reflection' and avoid 'Ineffective self-reflection', let's analyze the given information.\n\n* Keywords: Multiple strategies, nuanced prioritization, numerical stability, normalization, differentiation.\n* Advice: Combine strategies like relative fit and proportion of capacity used, ensuring nuanced prioritization and normalization for numerical stability.\n* Avoid: Unnecessary complexity, redundancy, and ineffective handling of edge cases.\n* Explanation: By integrating multiple strategies and focusing on nuanced prioritization and normalization, we can design more robust and effective heuristics that differentiate among viable options and maintain numerical stability.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}