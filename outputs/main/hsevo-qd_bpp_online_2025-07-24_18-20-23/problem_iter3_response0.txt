```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin using a combination of prioritization strategies.

    The heuristic used here combines multiple strategies to prioritize bins that have just enough capacity for the item, 
    and penalizes bins that would be left with too much or too little remaining capacity. It also considers the relative 
    remaining capacity of the bins to diversify the prioritization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the priority score for each bin based on the remaining capacity
    # We want to prioritize bins where the item fits exactly or leaves a small remainder
    fit_priority = np.where(bins_remain_cap >= item, 
                            1 - np.abs(bins_remain_cap - item) / item,  # Prioritize bins with remaining capacity close to the item size
                            -1.0)  # Penalize bins that can't fit the item
    
    # Calculate a secondary priority based on the relative remaining capacity after adding the item
    relative_cap_priority = np.where(bins_remain_cap >= item, 
                                     (bins_remain_cap - item) / bins_remain_cap,  # Prioritize bins that are filled to a high level
                                     -1.0)  # Penalize bins that can't fit the item
    
    # Combine the two priorities using a weighted sum
    priorities = 0.7 * fit_priority + 0.3 * relative_cap_priority
    
    # Ensure that bins that can't fit the item have a lower priority than any bin that can fit the item
    priorities = np.where(bins_remain_cap < item, priorities - np.max(priorities), priorities)
    
    return priorities
```
