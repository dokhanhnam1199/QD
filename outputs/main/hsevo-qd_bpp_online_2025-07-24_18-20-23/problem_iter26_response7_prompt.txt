{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines relative fit, proportion of capacity used, and nuanced normalization.\n    Differentiates among viable bins based on remaining capacity.\n    \"\"\"\n    # Calculate priority score for each bin\n    priorities = np.where(bins_remain_cap >= item,\n                          (1 - np.abs(bins_remain_cap - item) / item) * (item / bins_remain_cap),\n                          -1.0)  # Penalize bins that can't fit the item\n    \n    # Normalize priorities\n    max_priority = np.max(priorities)\n    if max_priority > -1.0:  \n        priorities = np.where(priorities > -1.0, priorities / max_priority, priorities)\n    \n    # Differentiate among viable bins\n    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap > item * 2),\n                          priorities * 0.9,  # Slightly reduce priority for bins with high remaining capacity\n                          priorities)\n    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap <= item * 2),\n                          priorities * 1.1,  # Slightly increase priority for bins with relatively low remaining capacity\n                          priorities)\n    \n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines fit priority with nuanced normalization for online bin packing.\n    Prioritizes bins with remaining capacity closest to item size and ensures numerical stability.\n    \"\"\"\n    # Check if bins can fit the item and calculate priority\n    epsilon = 1e-6  # Small value for numerical stability\n    valid_bins = bins_remain_cap >= item\n    diff = np.abs(bins_remain_cap - item)\n    priority = np.where(valid_bins, -diff + 1 / (bins_remain_cap + epsilon), -np.inf)\n    \n    # Combine fit priority with fullness priority\n    fullness_priority = np.where(valid_bins, 1 - bins_remain_cap / (bins_remain_cap + item + epsilon), 0)\n    priority = np.where(valid_bins, priority + 0.4 * fullness_priority, priority)\n    \n    # Normalize priority scores for valid bins\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        max_priority = np.max(priority[valid_bins])\n        priority[valid_bins] = np.exp(-(max_priority - priority[valid_bins]))\n    \n    return priority\n\n### Analyze & experience\n- Comparing the best heuristic (1st) with the worst (20th), we see that the best heuristic combines relative fit and proportion of capacity used with nuanced normalization, while the worst heuristic uses a Gaussian-like function to prioritize bins. \nThe top heuristics (1st-5th) generally use a combination of relative fit and proportion of capacity used, with varying normalization and differentiation strategies. \nIn contrast, the lower-ranked heuristics (15th-20th) use more diverse strategies, such as exponential functions and random noise. \nComparing (1st) vs (2nd), we see similar strategies with slight variations in normalization and differentiation. \n(3rd) vs (4th) also show similar strategies, with the main difference being in the order of operations. \nOverall, the top heuristics tend to use more straightforward and interpretable strategies, while the lower-ranked heuristics use more complex and varied approaches.\n- \nTo redesign 'Current self-reflection', let's analyze the given information.\n\n* Keywords: \n    - Multiple strategies\n    - Nuanced prioritization\n    - Normalization\n    - Differentiation\n* Advice: \n    - Combine relative fit and proportion of capacity used\n    - Experiment with normalization techniques to enhance prioritization\n* Avoid: \n    - Redundancy\n    - Unnecessary complexity\n    - Repetition\n* Explanation: By focusing on a mix of strategies and nuanced prioritization with effective normalization, we can create more robust heuristics that differentiate among viable options efficiently.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}