```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for adding an item to each bin, 
    prioritizing bins with the least remaining capacity after addition.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Assign priority based on remaining capacity after addition
    priority = np.where(remaining_cap_after_addition >= 0, 
                        -remaining_cap_after_addition,  # Prioritize bins with least remaining capacity
                        -np.inf)  # Penalize bins that cannot accommodate the item
    
    # Scale priorities to enhance differentiation among viable bins
    max_priority = np.max(priority)
    if max_priority != -np.inf:  
        priority = np.where(priority != -np.inf, np.exp(-(priority - max_priority)), priority)
    
    return priority
```
