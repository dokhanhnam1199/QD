```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines elements of minimizing waste and prioritizing almost full bins with numerical stability.
    """
    # Calculate remaining capacity after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Prioritize bins that can hold the item and will have the least remaining capacity
    # while also considering the fullness factor
    priority = np.where(remaining_cap_after_addition >= 0, 
                        # Combine the negative remaining capacity with a fullness factor
                        # and a term that prioritizes bins with remaining capacity closest to the item size
                        -remaining_cap_after_addition + bins_remain_cap / (item + 1e-9) - np.abs(bins_remain_cap - item) / (bins_remain_cap.max() + 1e-9), 
                        -np.inf)
    
    return priority
```
