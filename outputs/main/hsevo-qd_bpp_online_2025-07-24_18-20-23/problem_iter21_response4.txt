```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin using an advanced heuristic.

    The heuristic combines relative fit, proportion of capacity used, and a nuanced normalization technique
    to prioritize bins. It differentiates among viable bins and handles edge cases effectively.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the priority score for each bin based on the remaining capacity
    # Prioritize bins where the item fits, using a combination of relative fit and capacity utilization
    priorities = np.where(bins_remain_cap >= item,
                          (1 - (bins_remain_cap - item) / bins_remain_cap) * (item / bins_remain_cap),
                          -1.0)  # Penalize bins that can't fit the item

    # Apply a nuanced normalization by considering the range of priorities for viable bins
    viable_bins = priorities > -1.0
    if np.any(viable_bins):  # Check if there are bins that can fit the item
        min_priority = np.min(priorities[viable_bins])
        max_priority = np.max(priorities[viable_bins])
        if max_priority != min_priority:  # Avoid division by zero
            priorities[viable_bins] = (priorities[viable_bins] - min_priority) / (max_priority - min_priority)
        priorities[~viable_bins] = -1.0  # Maintain penalty for non-viable bins

    # Differentiate among bins that can fit the item by slightly penalizing those with very low capacity utilization
    priorities = np.where((bins_remain_cap >= item) & (item / bins_remain_cap < 0.5),
                          priorities * 0.8,  # Slightly reduce priority for bins with low utilization
                          priorities)

    return priorities
```
