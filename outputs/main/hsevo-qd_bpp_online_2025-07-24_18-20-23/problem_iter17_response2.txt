```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines relative fit and proportion of capacity used with nuanced normalization.
    Prioritizes bins based on remaining capacity while ensuring numerical stability.
    """
    # Calculate priority score using a combination of relative fit and capacity used
    priorities = np.where(bins_remain_cap >= item, 
                          (1 - np.abs(bins_remain_cap - item) / item) * (item / (bins_remain_cap - item + item)), 
                          -1.0)
    
    # Normalize priorities for numerical stability
    max_priority = np.max(priorities)
    if max_priority > -1.0:  
        priorities = np.where(priorities > -1.0, priorities / max_priority, priorities)
    
    # Add a small random noise to avoid tie-breaking issues
    priorities += np.random.uniform(-1e-6, 1e-6, size=len(bins_remain_cap))
    
    # Further differentiate among bins that can fit the item
    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap > item * 2), 
                          priorities * 0.9,  
                          priorities)
    
    return priorities
```
