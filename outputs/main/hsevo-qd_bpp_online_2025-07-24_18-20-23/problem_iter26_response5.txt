```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines relative fit, proportion used with nuanced normalization and differentiation for online bin packing.
    Prioritizes bins with capacity closest to item size and differentiates among viable options.
    """
    epsilon = 1e-6  # Small value for numerical stability
    valid_bins = bins_remain_cap >= item
    
    # Relative fit and proportion used
    relative_fit = 1 - np.abs(bins_remain_cap - item) / (bins_remain_cap + epsilon)
    proportion_used = item / (bins_remain_cap + epsilon)
    priority = np.where(valid_bins, relative_fit * proportion_used, -1.0)
    
    # Nuanced normalization and differentiation
    if np.any(valid_bins):
        max_priority = np.max(priority)
        if max_priority > -1.0:  
            priority = np.where(priority > -1.0, priority / max_priority, priority)
        # Reward bins with lower remaining capacity and penalize those with high remaining capacity
        priority = np.where((bins_remain_cap >= item) & (item / bins_remain_cap > 0.5), priority * 1.1, priority)
        priority = np.where((bins_remain_cap >= item) & (item / bins_remain_cap <= 0.5), priority * 0.9, priority)
    
    return priority
```
