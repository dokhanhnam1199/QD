```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin using an advanced heuristic.

    The heuristic combines relative fit, proportion of capacity used, and remaining capacity to prioritize bins.
    It normalizes priorities using a softmax function to enhance differentiation and stability.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the priority score for each bin based on the remaining capacity
    # We want to prioritize bins where the item fits, considering relative fit and capacity usage
    priorities = np.where(bins_remain_cap >= item,
                          # Combine relative fit and proportion of capacity used
                          (1 - np.abs(bins_remain_cap - item) / (bins_remain_cap + item)) * np.log(item / (bins_remain_cap - item + 1e-6) + 1),
                          -1e6)  # Penalize bins that can't fit the item with a large negative value

    # Apply softmax normalization to priorities to enhance differentiation and stability
    valid_bins = priorities > -1e5  # Identify bins that can fit the item
    if np.any(valid_bins):
        max_priority = np.max(priorities[valid_bins])
        priorities[valid_bins] = np.exp(priorities[valid_bins] - max_priority) / np.sum(np.exp(priorities[valid_bins] - max_priority))
        priorities[~valid_bins] = 0.0  # Ensure bins that can't fit the item have zero priority

    return priorities
```
