{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin using a more sophisticated heuristic.\n\n    The heuristic used here combines multiple prioritization strategies to adapt to different scenarios.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the priority score for each bin based on the remaining capacity\n    # We want to prioritize bins where the item fits exactly or leaves a small remainder\n    fit_priority = np.where(bins_remain_cap >= item, \n                            1 - np.abs(bins_remain_cap - item) / item,  # Prioritize bins with remaining capacity close to the item size\n                            -1.0)  # Penalize bins that can't fit the item\n    \n    # Prioritize bins that are relatively full to minimize the number of bins used\n    fullness_priority = np.where(bins_remain_cap >= item, \n                                 1 - bins_remain_cap / (item + bins_remain_cap - item + 1e-6),  # Avoid division by zero\n                                 -1.0)\n    \n    # Combine the two prioritization strategies\n    priorities = 0.6 * fit_priority + 0.4 * fullness_priority\n    \n    # Ensure that bins that can't fit the item have a lower priority than any bin that can fit the item\n    priorities = np.where(bins_remain_cap < item, priorities - np.max(priorities), priorities)\n    \n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority scores for adding an item to each bin, \n    prioritizing bins with the least remaining capacity after addition.\n    \"\"\"\n    # Calculate the remaining capacity after adding the item to each bin\n    remaining_cap_after_addition = bins_remain_cap - item\n    \n    # Assign priority based on remaining capacity after addition\n    priority = np.where(remaining_cap_after_addition >= 0, \n                        -remaining_cap_after_addition,  # Prioritize bins with least remaining capacity\n                        -np.inf)  # Penalize bins that cannot accommodate the item\n    \n    # Scale priorities to enhance differentiation among viable bins\n    max_priority = np.max(priority)\n    if max_priority != -np.inf:  \n        priority = np.where(priority != -np.inf, np.exp(-(priority - max_priority)), priority)\n    \n    return priority\n\n### Analyze & experience\n- Comparing the best heuristic (1st) with the worst (20th), we see that the top heuristic uses a more nuanced approach with epsilon to avoid division by zero and prioritizes bins based on remaining capacity closest to the item size. \nComparing (1st) vs (2nd), we see that the 1st heuristic uses epsilon for numerical stability, while the 2nd heuristic combines multiple prioritization strategies. \n(2nd) vs (19th) shows that both use a combination of strategies, but (2nd) is more complex. \n(3rd) vs (18th) shows similar patterns in prioritizing bins based on remaining capacity. \nOverall, top heuristics tend to use more sophisticated combinations of strategies and numerical stability measures.\n- \nTo come up with a redefined 'Current self-reflection', let's analyze the given information.\n\n* Keywords: Prioritization strategies, numerical stability, edge cases, robust solutions.\n* Advice: Combine multiple strategies, ensure numerical stability, and handle different scenarios effectively.\n* Avoid: Solely focusing on minimizing waste and using a single prioritization method.\n* Explanation: The redefined 'Current self-reflection' should focus on creating robust heuristics by combining strategies and ensuring stability, while avoiding a narrow focus on waste minimization and single-method prioritization. This leads to more effective and adaptable heuristics.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}