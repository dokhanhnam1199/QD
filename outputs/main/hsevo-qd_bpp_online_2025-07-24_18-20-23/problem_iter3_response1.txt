```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin using a more advanced heuristic.

    The heuristic used here combines multiple prioritization strategies to adapt to various scenarios.
    It prioritizes bins that have just enough capacity for the item, leaves a reasonable remainder, and considers the bin's fill level.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the capacity remaining after adding the item to each bin
    remaining_after_addition = bins_remain_cap - item
    
    # Prioritize bins where the item fits and leaves a reasonable remainder (not too much or too little)
    fit_priority = np.where(bins_remain_cap >= item, 
                            1 - np.abs(remaining_after_addition) / (bins_remain_cap + 1e-9),  # Avoid division by zero
                            -1.0)  # Penalize bins that can't fit the item
    
    # Encourage filling bins that are nearly empty (to reduce fragmentation) and penalize bins that are too full
    fill_level_priority = np.where(bins_remain_cap >= item, 
                                   1 - (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-9),  # Normalize fill level
                                   0.0)  # Neutral for bins that can't fit the item
    
    # Combine the two priorities, giving more weight to the fit priority
    priorities = 0.7 * fit_priority + 0.3 * fill_level_priority
    
    # Ensure that bins that can't fit the item have a lower priority than any bin that can fit the item
    priorities = np.where(bins_remain_cap < item, priorities - np.max(priorities), priorities)
    
    return priorities
```
