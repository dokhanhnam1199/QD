```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines nuanced prioritization and normalization for effective bin packing.
    Prioritizes bins with remaining capacity closest to item size and normalizes valid bin priorities.
    """
    epsilon = 1e-6  # Numerical stability
    valid_bins = bins_remain_cap >= item
    # Gaussian-like function to prioritize bins with remaining capacity close to item size
    priority = np.where(valid_bins, np.exp(-((bins_remain_cap - item) / item) ** 2), -np.inf)
    # Normalize priority scores for valid bins
    valid_bins = priority != -np.inf
    if np.any(valid_bins):
        max_priority = np.max(priority[valid_bins])
        priority[valid_bins] = np.exp(-(max_priority - priority[valid_bins])) + 1e-8 * np.random.rand(np.sum(valid_bins))  # Add noise for tie-breaking
    return priority
```
