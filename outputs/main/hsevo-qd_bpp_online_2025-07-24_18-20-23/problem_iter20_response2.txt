```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority scores for each bin by combining relative fit, proportion used, and nuanced normalization.

    Combines the benefits of multiple strategies to prioritize bins effectively.
    """
    # Calculate priority score using a combination of relative fit and proportion used
    priorities = np.where(bins_remain_cap >= item, 
                          (1 - np.abs(bins_remain_cap - item) / item) * np.exp(-((bins_remain_cap - item) / item)),  
                          -1.0)  # Penalize bins that can't fit the item
    
    # Normalize priorities to ensure numerical stability
    max_priority = np.max(priorities)
    if max_priority > -1.0:  
        priorities = np.where(priorities > -1.0, priorities / max_priority, priorities)
    
    # Add a small random noise to avoid tie-breaking issues
    priorities += np.random.uniform(-1e-6, 1e-6, size=len(bins_remain_cap))
    
    return priorities
```
