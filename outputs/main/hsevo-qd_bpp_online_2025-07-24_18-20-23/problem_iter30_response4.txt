```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin using an advanced heuristic.

    The heuristic used here combines multiple strategies to prioritize bins based on their remaining capacity,
    utilization proportion, and relative fit. It differentiates among viable options effectively and
    incorporates a more sophisticated normalization technique.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the priority score for each bin based on multiple factors
    # We want to prioritize bins where the item fits, has a good relative fit, and results in high utilization
    priorities = np.where(bins_remain_cap >= item,
                          # Combine the relative fit, utilization proportion, and a factor to encourage tighter packing
                          (1 - np.abs(bins_remain_cap - item) / (bins_remain_cap + item)) * 
                          (item / (bins_remain_cap)) * 
                          (1 / (1 + np.exp(-(bins_remain_cap - item) / item))),
                          -1.0)  # Penalize bins that can't fit the item

    # Advanced normalization technique to enhance differentiation among viable bins
    viable_bins = priorities > -1.0
    if np.any(viable_bins):  
        max_priority = np.max(priorities[viable_bins])
        min_priority = np.min(priorities[viable_bins])
        if max_priority != min_priority:  # Avoid division by zero
            priorities = np.where(viable_bins, 
                                  (priorities - min_priority) / (max_priority - min_priority), 
                                  priorities)

    # Further differentiate among bins that can fit the item by slightly penalizing those with very high remaining capacity
    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap > item * 2),
                          priorities * 0.8,  # Reduce priority for bins with high remaining capacity
                          priorities)

    return priorities
```
