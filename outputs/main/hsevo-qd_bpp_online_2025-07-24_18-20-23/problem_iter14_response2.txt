```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Heuristics combining nuanced prioritization and normalization strategies.
    Prioritizes bins based on relative fit and proportion of capacity used.
    """
    # Calculate priority score using a Gaussian-like function for bins that can fit the item
    priorities = np.where(bins_remain_cap >= item, 
                          np.exp(-((bins_remain_cap - item) / item) ** 2) * (item / (bins_remain_cap - item + item)),  
                          -1.0)  # Penalize bins that can't fit the item
    
    # Normalize priorities for numerical stability
    max_priority = np.max(priorities)
    if max_priority > -1.0:  
        priorities = np.where(priorities > -1.0, priorities / max_priority, priorities)
    
    # Slightly penalize bins with high remaining capacity to ensure differentiation
    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap > item * 2),
                          priorities * 0.9,  
                          priorities)
    
    # Add a small random noise to avoid tie-breaking issues
    priorities += np.random.uniform(-1e-6, 1e-6, size=len(bins_remain_cap))
    
    return priorities
```
