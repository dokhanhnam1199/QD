import numpy as np
import random
import math
import scipy
import torch
def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.0005967204031916545, 
                 threshold_for_valid_bins: float = -0.2710932304462399, weight_for_diff: float = 7.469600674674274, 
                 weight_for_bins_remain_cap: float = 8.44275863703851, max_priority_offset: float = 0.2246982106806772) -> np.ndarray:
    """
    Combines strategies: prioritizes bins with remaining capacity closest to item size,
    ensures numerical stability with epsilon, and normalizes valid bin priorities.
    """
    # Check if bins can fit the item and calculate priority
    valid_bins = bins_remain_cap >= item + threshold_for_valid_bins
    diff = np.abs(bins_remain_cap - item)
    priority = np.where(valid_bins, -weight_for_diff * diff + weight_for_bins_remain_cap / (bins_remain_cap + epsilon), -np.inf)
    
    # Normalize priority scores for valid bins
    valid_bins = priority != -np.inf
    if np.any(valid_bins):
        max_priority = np.max(priority[valid_bins])
        priority[valid_bins] = np.exp(-(max_priority - priority[valid_bins]) + max_priority_offset)
    
    return priority
