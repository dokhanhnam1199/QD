```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines relative fit and proportion used with nuanced normalization and differentiation.
    """
    # Calculate priority score for each bin based on remaining capacity
    priorities = np.where(bins_remain_cap >= item,
                          (1 - np.abs(bins_remain_cap - item) / item) * (item / bins_remain_cap),  # Combine relative fit and proportion used
                          -1.0)  # Penalize bins that can't fit the item
    
    # Normalize priorities for numerical stability and differentiation
    max_priority = np.max(priorities)
    if max_priority > -1.0:  
        priorities = np.where(priorities > -1.0, priorities / max_priority, priorities)
    
    # Differentiate among viable bins by slightly penalizing those with high remaining capacity
    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap > item * 2),
                          priorities * 0.9,  # Slightly reduce priority for bins with high remaining capacity
                          priorities)

    # Further differentiate by penalizing bins with low utilization after adding the item
    priorities = np.where((bins_remain_cap >= item) & ((item / bins_remain_cap) < 0.5),
                          priorities * 0.8,  # Reduce priority for bins that will be less than half full
                          priorities)

    return priorities
```
