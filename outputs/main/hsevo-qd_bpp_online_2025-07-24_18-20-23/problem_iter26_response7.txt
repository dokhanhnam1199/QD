```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines relative fit, proportion of capacity used, and nuanced normalization.
    Uses exponential normalization and differentiates among viable bins based on remaining capacity.
    """
    # Check if bins can fit the item and calculate priority
    valid_bins = bins_remain_cap >= item
    relative_fit = 1 - np.abs(bins_remain_cap - item) / item  # Relative fit strategy
    proportion_used = item / bins_remain_cap  # Proportion of capacity used
    
    # Combine relative fit and proportion of capacity used
    priority = np.where(valid_bins, relative_fit * proportion_used, -1.0)
    
    # Exponential normalization for valid bins
    valid_indices = np.where(valid_bins)[0]
    if len(valid_indices) > 0:
        max_priority = np.max(priority[valid_indices])
        priority[valid_indices] = np.exp(-(max_priority - priority[valid_indices]))
    
    # Differentiate among viable bins
    priority = np.where((valid_bins) & (bins_remain_cap > item * 2),
                        priority * 0.9,  # Slightly reduce priority for bins with high remaining capacity
                        priority)
    priority = np.where((valid_bins) & (bins_remain_cap <= item * 2),
                        priority * 1.1,  # Slightly increase priority for bins with relatively low remaining capacity
                        priority)
    
    return priority
```
