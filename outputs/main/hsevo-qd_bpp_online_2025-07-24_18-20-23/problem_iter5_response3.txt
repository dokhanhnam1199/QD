```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines 'best fit' and 'valid bin' heuristics with numerical stability for online Bin Packing Problem.
    Prioritizes bins closest to being full and can hold the item.
    """
    # Calculate 'best fit' score with epsilon for numerical stability
    best_fit_scores = np.where(bins_remain_cap >= item, 1 / (np.abs(bins_remain_cap - item) + 1e-6), 0)
    
    # Normalize the scores
    max_score = np.max(best_fit_scores)
    if max_score > 0:
        best_fit_scores /= max_score
    
    # Set priority to negative infinity for bins that cannot fit the item
    priority = np.where(bins_remain_cap >= item, best_fit_scores, -np.inf)
    
    # Normalize priority scores for valid bins using exponential function
    valid_bins = priority != -np.inf
    if np.any(valid_bins):
        max_priority = np.max(priority[valid_bins])
        priority[valid_bins] = np.exp(-(max_priority - priority[valid_bins]))
    
    return priority
```
