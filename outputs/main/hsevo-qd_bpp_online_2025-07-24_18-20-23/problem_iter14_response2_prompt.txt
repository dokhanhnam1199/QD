{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin using a nuanced heuristic.\n\n    The heuristic used here combines multiple strategies to prioritize bins based on their remaining capacity.\n    It not only considers bins that have just enough capacity for the item but also differentiates among viable options\n    by taking into account the proportion of capacity used and the absolute remaining capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the priority score for each bin based on the remaining capacity\n    # We want to prioritize bins where the item fits and leaves a reasonable remainder\n    priorities = np.where(bins_remain_cap >= item,\n                          # Combine the relative fit (how close the remaining capacity is to the item size)\n                          # with the proportion of the bin that will be used\n                          (1 - np.abs(bins_remain_cap - item) / item) * (item / (bins_remain_cap - item + item)),\n                          -1.0)  # Penalize bins that can't fit the item\n\n    # Normalize the priorities to ensure numerical stability and enhance differentiation\n    max_priority = np.max(priorities)\n    if max_priority > -1.0:  # Check if there are bins that can fit the item\n        priorities = np.where(priorities > -1.0, priorities / max_priority, priorities)\n\n    # Further differentiate among bins that can fit the item by slightly penalizing those with very high remaining capacity\n    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap > item * 2),\n                          priorities * 0.9,  # Slightly reduce priority for bins with high remaining capacity\n                          priorities)\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin using a more advanced heuristic.\n\n    The heuristic used here combines multiple strategies to create a robust solution.\n    It prioritizes bins that have just enough capacity for the item, penalizes bins that would be left with too much or too little remaining capacity,\n    and ensures numerical stability by avoiding division by zero.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the priority score for each bin based on the remaining capacity\n    # We want to prioritize bins where the item fits exactly or leaves a small remainder\n    priorities = np.where(bins_remain_cap >= item, \n                          np.exp(-((bins_remain_cap - item) / item) ** 2),  # Use a Gaussian-like function to prioritize bins with remaining capacity close to the item size\n                          -1.0)  # Penalize bins that can't fit the item\n    \n    # Ensure that bins that can't fit the item have a lower priority than any bin that can fit the item\n    priorities = np.where(bins_remain_cap < item, priorities - np.max(priorities[bins_remain_cap >= item]) - 1e-6, priorities)\n    \n    # Add a small random noise to the priorities to avoid tie-breaking issues\n    priorities += np.random.uniform(-1e-6, 1e-6, size=len(bins_remain_cap))\n    \n    return priorities\n\n### Analyze & experience\n- Comparing the best heuristics (1st) with the worst (20th), we see that the top heuristics tend to use more nuanced normalization and prioritization strategies, such as combining relative fit and proportion of capacity used. The worst heuristics, while similar in structure, lack the fine-tuned adjustments seen in the top ones. Comparing (1st) vs (2nd), we see they are identical, suggesting a potential tie or overfitting in the ranking. (3rd) vs (4th) shows a difference in calculation of `priorities`, with (3rd) using a slightly different formula. (19th) vs (20th) are identical, indicating repetition in the list. Overall, top heuristics tend to have more sophisticated prioritization and normalization, while the worst ones are either repetitive or lack these nuances.\n- \nTo redesign 'Current self-reflection', let's analyze and merge the given information.\n\n* Keywords: nuanced prioritization, normalization, diversity, numerical stability, remaining capacity\n* Advice: \n    - Combine multiple prioritization strategies\n    - Normalize priorities for numerical stability\n    - Focus on nuanced prioritization based on remaining capacity\n    - Ensure differentiation among viable options\n* Avoid: \n    - Repetition and redundancy\n    - Unnecessary complexity\n    - Ineffective handling of edge cases\n* Explanation: By merging the insights and avoiding the pitfalls, we can design better heuristics that effectively handle different scenarios and edge cases by combining multiple strategies and normalizing priorities.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}