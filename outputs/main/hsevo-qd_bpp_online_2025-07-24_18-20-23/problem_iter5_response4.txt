```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines nuanced fit priority and relative capacity priority for robust bin selection.
    """
    # Calculate fit priority with numerical stability
    fit_priority = np.where(bins_remain_cap >= item, 1 - np.abs(bins_remain_cap - item) / (item + 1e-9), -1.0)
    
    # Calculate relative capacity priority after adding the item
    relative_cap_priority = np.where(bins_remain_cap >= item, (bins_remain_cap - item) / (bins_remain_cap + 1e-9), -1.0)
    
    # Combine priorities with a weighted sum
    priorities = fit_priority + 0.5 * relative_cap_priority
    
    # Ensure bins that can't fit the item have lower priority
    priorities = np.where(bins_remain_cap < item, priorities - np.max(priorities), priorities)
    
    return priorities
```
