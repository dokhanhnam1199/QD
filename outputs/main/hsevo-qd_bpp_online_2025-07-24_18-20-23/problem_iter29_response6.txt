```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines relative fit and proportion of capacity used with harmonic mean-like approach and nuanced normalization.
    Prioritizes bins where the item fits with a reasonable remainder and differentiates among viable options.
    """
    # Calculate priority score based on relative fit and proportion of capacity used
    epsilon = 1e-6  # Small value for numerical stability
    valid_bins = bins_remain_cap >= item
    relative_fit = 1 - np.abs(bins_remain_cap - item) / (item + epsilon)
    proportion_used = item / (bins_remain_cap + epsilon)
    
    # Harmonic mean-like approach to balance best fit and capacity usage
    priority = np.where(valid_bins,
                        2 / ((1 / relative_fit) + (1 / proportion_used)),
                        -1.0)
    
    # Normalize priority scores for valid bins using softmax-like function
    max_priority = np.max(priority)
    if max_priority > -1.0:  
        exp_priority = np.exp(priority - max_priority)
        sum_exp_priority = np.sum(exp_priority)
        priority = np.where(priority > -1.0, exp_priority / sum_exp_priority, priority)
    
    # Further differentiate among bins that can fit the item
    priority = np.where((bins_remain_cap >= item) & (bins_remain_cap > item * 1.5),
                        priority * 0.9,  # Slightly reduce priority for bins with high remaining capacity
                        priority)
    
    return priority
```
