```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines nuanced prioritization and normalization for online bin packing.
    Prioritizes bins with remaining capacity closest to item size and ensures numerical stability.
    """
    # Check if bins can fit the item and calculate priority
    epsilon = 1e-6  # Small value for numerical stability
    valid_bins = bins_remain_cap >= item
    diff = np.abs(bins_remain_cap - item)
    priority = np.where(valid_bins, -diff + 1 / (bins_remain_cap + epsilon), -np.inf)
    
    # Combine fit priority with fullness priority and a Gaussian-like function
    fullness_priority = np.where(valid_bins, 1 - bins_remain_cap / (bins_remain_cap + item + epsilon), 0)
    gaussian_priority = np.where(valid_bins, np.exp(-((bins_remain_cap - item) / item) ** 2), 0)
    priority = np.where(valid_bins, priority + 0.4 * fullness_priority + 0.2 * gaussian_priority, priority)
    
    # Normalize priority scores for valid bins
    valid_bins = priority != -np.inf
    if np.any(valid_bins):
        max_priority = np.max(priority[valid_bins])
        priority[valid_bins] = np.exp(-(max_priority - priority[valid_bins]))
    
    # Add a small random noise to the priorities to avoid tie-breaking issues
    priority += np.random.uniform(-1e-6, 1e-6, size=len(bins_remain_cap))
    
    return priority
```
