```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines 'best fit' and Gaussian prioritization with normalization for online Bin Packing Problem.
    Prioritizes bins with remaining capacity closest to the item size and ensures numerical stability.
    """
    # Calculate 'best fit' score using Gaussian prioritization with epsilon for numerical stability
    scores = np.where(bins_remain_cap >= item, np.exp(-((bins_remain_cap - item) / item) ** 2), 0)
    
    # Normalize the scores
    max_score = np.max(scores)
    if max_score > 0:
        scores /= max_score
    
    # Add a small random noise to the priorities to avoid ties and ensure exploration
    scores += np.random.uniform(0, 1e-6, size=len(bins_remain_cap))
    
    # Set priority to negative infinity for bins that cannot fit the item
    priority = np.where(bins_remain_cap >= item, scores, -np.inf)
    
    return priority
```
