```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines nuanced remaining capacity prioritization with fullness consideration and numerical stability.
    """
    # Check if the item can fit in each bin with a small epsilon for numerical stability
    valid_bins = (bins_remain_cap >= item).astype(float)
    
    # Priority score based on remaining capacity after addition, with a small epsilon
    remaining_capacity_after_addition = bins_remain_cap - item + 1e-6
    priority_scores = np.where(valid_bins == 1, 1 / remaining_capacity_after_addition, -1.0)
    
    # Modify the priority scores to consider the fullness of the bin, similar to priority_v0
    fullness_factor = 1 + (1 - (remaining_capacity_after_addition) / (bins_remain_cap + 1e-6))
    priority_scores = np.where(valid_bins == 1, priority_scores * fullness_factor, priority_scores)
    
    # Additional exponential factor to prioritize bins that are almost full, inspired by priority_v1
    priority_scores = np.where(valid_bins == 1, priority_scores * np.exp(-remaining_capacity_after_addition), priority_scores)
    
    return priority_scores
```
