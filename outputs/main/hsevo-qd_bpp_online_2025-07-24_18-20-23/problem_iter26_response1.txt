```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines relative fit and proportion of capacity used with nuanced normalization.
    Differentiates among viable bins based on remaining capacity.
    """
    # Calculate priority score for each bin
    priorities = np.where(bins_remain_cap >= item,
                          (1 - np.abs(bins_remain_cap - item) / item) * np.log(item / (bins_remain_cap - item + item) + 1),
                          -1.0)  
    
    # Normalize priorities
    max_priority = np.max(priorities)
    if max_priority > -1.0:  
        priorities = np.where(priorities > -1.0, priorities / max_priority, priorities)
    
    # Differentiate among viable bins with an additional check for low utilization
    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap > item * 2),
                          priorities * 0.9,  
                          priorities)
    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap <= item * 2),
                          priorities * 1.1,  
                          priorities)
    # Introduce a slight penalty for bins with very low utilization after adding the item
    priorities = np.where((bins_remain_cap >= item) & ((item / (bins_remain_cap - item + item)) < 0.5),
                          priorities * 0.8,  
                          priorities)

    return priorities
```
