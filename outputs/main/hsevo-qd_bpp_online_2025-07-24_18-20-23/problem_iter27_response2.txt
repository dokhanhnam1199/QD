```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin using an enhanced heuristic.

    The heuristic used here combines relative fit, proportion of capacity used, and a penalty for bins with very high remaining capacity.
    It normalizes the priorities using a softmax function to enhance differentiation among viable options.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the relative fit and proportion of capacity used for each bin
    relative_fit = 1 - np.abs(bins_remain_cap - item) / (bins_remain_cap + 1e-8)  # Avoid division by zero
    capacity_used_proportion = item / (bins_remain_cap + item)

    # Combine the relative fit and proportion of capacity used
    priorities = np.where(bins_remain_cap >= item, relative_fit * capacity_used_proportion, -1.0)

    # Apply a penalty for bins with very high remaining capacity
    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap > item * 2), priorities * 0.8, priorities)

    # Normalize the priorities using a softmax function
    valid_bins = priorities > -1.0
    if np.any(valid_bins):
        max_priority = np.max(priorities[valid_bins])
        priorities[valid_bins] = np.exp((priorities[valid_bins] - max_priority) / (max_priority + 1e-8))  # Softmax normalization
        priorities[~valid_bins] = 0.0  # Set priority to 0 for bins that cannot fit the item
    else:
        priorities = np.zeros_like(priorities)

    return priorities
```
