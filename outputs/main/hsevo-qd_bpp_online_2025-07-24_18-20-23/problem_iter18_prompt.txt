{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin using a nuanced heuristic.\n\n    The heuristic used here combines multiple strategies to prioritize bins based on their remaining capacity.\n    It not only considers bins that have just enough capacity for the item but also differentiates among viable options\n    by taking into account the proportion of capacity used and the absolute remaining capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the priority score for each bin based on the remaining capacity\n    # We want to prioritize bins where the item fits and leaves a reasonable remainder\n    priorities = np.where(bins_remain_cap >= item,\n                          # Combine the relative fit (how close the remaining capacity is to the item size)\n                          # with the proportion of the bin that will be used\n                          (1 - np.abs(bins_remain_cap - item) / item) * (item / (bins_remain_cap - item + item)),\n                          -1.0)  # Penalize bins that can't fit the item\n\n    # Normalize the priorities to ensure numerical stability and enhance differentiation\n    max_priority = np.max(priorities)\n    if max_priority > -1.0:  # Check if there are bins that can fit the item\n        priorities = np.where(priorities > -1.0, priorities / max_priority, priorities)\n\n    # Further differentiate among bins that can fit the item by slightly penalizing those with very high remaining capacity\n    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap > item * 2),\n                          priorities * 0.9,  # Slightly reduce priority for bins with high remaining capacity\n                          priorities)\n\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nTo design better heuristics, let's redefine 'Current self-reflection'. \nHere are the key takeaways in 4 bullet points:\n* **Keywords**: Nuanced prioritization, numerical stability, normalization, multiple strategies\n* **Advice**: Combine relative fit and proportion of capacity used, and prioritize bins based on remaining capacity while ensuring numerical stability.\n* **Avoid**: Redundancy, unnecessary complexity, and repetition by ensuring diversity in heuristic designs.\n* **Explanation**: By focusing on nuanced prioritization and avoiding ineffective practices, we can create more robust and effective heuristics that handle different scenarios efficiently.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}