```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines nuanced 'best fit' and Gaussian heuristics with numerical stability for online Bin Packing Problem.
    Prioritizes bins with remaining capacity closest to the item size using a combination of strategies.
    """
    # Calculate 'best fit' score with epsilon for numerical stability
    best_fit_scores = np.where(bins_remain_cap >= item, 1 / (np.abs(bins_remain_cap - item) + 1e-6), 0)
    
    # Normalize the 'best fit' scores
    max_score = np.max(best_fit_scores)
    if max_score > 0:
        best_fit_scores /= max_score
    
    # Calculate Gaussian priority scores
    gaussian_scores = np.exp(-((bins_remain_cap - item) / item) ** 2)
    gaussian_scores = np.where(bins_remain_cap >= item, gaussian_scores, 0)
    max_gaussian = np.max(gaussian_scores)
    if max_gaussian > 0:
        gaussian_scores /= max_gaussian
    
    # Combine 'best fit' and Gaussian scores for valid bins
    priority = np.where(bins_remain_cap >= item, 0.5 * best_fit_scores + 0.5 * gaussian_scores, -np.inf)
    
    # Add a small random noise to the priorities to avoid tie-breaking issues
    valid_bins = priority != -np.inf
    if np.any(valid_bins):
        priority[valid_bins] += np.random.uniform(-1e-6, 1e-6, size=np.sum(valid_bins))
    
    return priority
```
