{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority scores for each bin using a combined heuristic.\n    \n    Combines relative fit and proportion of capacity used with nuanced normalization.\n    \"\"\"\n    # Calculate priority score for each bin\n    priorities = np.where(bins_remain_cap >= item,\n                          (1 - np.abs(bins_remain_cap - item) / item) * np.log(item / (bins_remain_cap - item + item) + 1),\n                          -1.0)  # Penalize bins that can't fit the item\n    \n    # Normalize priorities\n    max_priority = np.max(priorities)\n    if max_priority > -1.0:  \n        priorities = np.where(priorities > -1.0, priorities / max_priority, priorities)\n    \n    # Differentiate among viable bins\n    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap > item * 2),\n                          priorities * 0.9,  # Slightly reduce priority for bins with high remaining capacity\n                          priorities)\n    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap <= item * 2),\n                          priorities * 1.1,  # Slightly increase priority for bins with relatively low remaining capacity\n                          priorities)\n    \n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin using an advanced heuristic.\n\n    The heuristic combines multiple strategies to prioritize bins based on their remaining capacity,\n    focusing on nuanced prioritization, normalization, and differentiation among viable options.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the priority score for each bin based on the remaining capacity\n    # We want to prioritize bins where the item fits and leaves a reasonable remainder\n    priorities = np.where(bins_remain_cap >= item,\n                          # Combine the relative fit (how close the remaining capacity is to the item size)\n                          # with the proportion of the bin that will be used after adding the item\n                          (1 - (bins_remain_cap - item) / bins_remain_cap) * np.log(item / (bins_remain_cap - item + item) + 1),\n                          -1.0)  # Penalize bins that can't fit the item\n\n    # Normalize the priorities to ensure numerical stability and enhance differentiation\n    max_priority = np.max(priorities)\n    if max_priority > -1.0:  # Check if there are bins that can fit the item\n        priorities = np.where(priorities > -1.0, priorities / max_priority, priorities)\n\n    # Introduce a slight penalty for bins with very low utilization after adding the item\n    priorities = np.where((bins_remain_cap >= item) & ((item / (bins_remain_cap - item + item)) < 0.5),\n                          priorities * 0.8,  # Reduce priority for bins that will be less than half full\n                          priorities)\n\n    # Further differentiate among bins that can fit the item by slightly rewarding those with lower remaining capacity\n    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap <= item * 2),\n                          priorities * 1.1,  # Slightly increase priority for bins with relatively low remaining capacity\n                          priorities)\n\n    return priorities\n\n### Analyze & experience\n- Comparing the top-ranked heuristics, we observe a consistent use of a combination of relative fit and proportion of capacity used. For instance, Heuristics 1st and 2nd both employ a nuanced normalization strategy and differentiate among viable bins. \nHeuristics 1st uses `relative_fit * proportion_used` while Heuristics 2nd uses `(1 - np.abs(bins_remain_cap - item) / item) * np.log(item / (bins_remain_cap - item + item) + 1)`, indicating a variation in the calculation of priority scores.\nIn contrast, lower-ranked heuristics like Heuristics 19th and 20th use a Gaussian-like function `np.exp(-((bins_remain_cap - item) / item) ** 2)` to prioritize bins, which is simpler but less effective.\nComparing (1st) vs (2nd), we see the first heuristic uses a more straightforward calculation for `priority`, while the second heuristic introduces a logarithmic factor.\n(3rd) vs (4th) shows identical implementations, indicating potential redundancy or a strong similarity in effective strategies.\nOverall, top heuristics tend to combine multiple factors (relative fit, proportion used, and nuanced normalization) and differentiate among viable bins, suggesting that a balanced approach is key to their effectiveness.\n- \nTo design better heuristics, let's refine 'Current self-reflection' by avoiding the repetitive and less effective aspects found in 'Ineffective self-reflection'. Here's a redefined approach in 4 bullet points:\n\n* **Keywords**: Nuanced prioritization, multiple strategies, normalization, differentiation.\n* **Advice**: Combine relative fit and proportion of capacity used with nuanced normalization to enhance prioritization and ensure differentiation among viable bins.\n* **Avoid**: Redundancy, unnecessary complexity, and ineffective handling of edge cases.\n* **Explanation**: By focusing on nuanced prioritization and combining multiple strategies while ensuring normalization and differentiation, we can create more robust and effective heuristics that handle various scenarios efficiently.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}