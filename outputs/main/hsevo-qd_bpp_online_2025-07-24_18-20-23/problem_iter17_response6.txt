```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines relative fit and proportion of capacity used with nuanced normalization for online bin packing.
    Prioritizes bins with remaining capacity closest to item size while ensuring numerical stability.
    """
    # Calculate priority score based on relative fit and capacity used
    epsilon = 1e-6  # Small value for numerical stability
    valid_bins = bins_remain_cap >= item
    diff = np.abs(bins_remain_cap - item)
    priority = np.where(valid_bins, -diff + 1 / (bins_remain_cap + epsilon), -np.inf)
    
    # Add a Gaussian-like penalty for bins that are not a good fit
    priority = np.where(valid_bins, priority + 0.4 * np.exp(-((bins_remain_cap - item) / item) ** 2), priority)
    
    # Normalize priority scores for valid bins
    valid_bins = priority != -np.inf
    if np.any(valid_bins):
        max_priority = np.max(priority[valid_bins])
        priority[valid_bins] = np.exp(-(max_priority - priority[valid_bins]))
    
    # Add a small random noise to the priorities to avoid tie-breaking issues
    priority += np.random.uniform(-1e-6, 1e-6, size=len(bins_remain_cap))
    
    return priority
```
