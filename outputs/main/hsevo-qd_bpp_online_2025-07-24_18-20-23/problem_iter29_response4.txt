```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Nuanced heuristic combining relative fit and proportion of capacity used with logarithmic scaling,
    followed by normalization and differentiation among viable bins.
    """
    # Calculate priority score combining relative fit and proportion used with logarithmic scaling
    priorities = np.where(bins_remain_cap >= item,
                          (1 - np.abs(bins_remain_cap - item) / item) * np.log(item / (bins_remain_cap - item + item) + 1),
                          -1.0)
    
    # Normalize priorities
    max_priority = np.max(priorities)
    if max_priority > -1.0:
        priorities = np.where(priorities > -1.0, priorities / max_priority, priorities)

    # Differentiate among viable bins by slightly penalizing those with high remaining capacity
    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap > item * 2),
                          priorities * 0.9,
                          priorities)
    # Further differentiate by rewarding bins with lower remaining capacity
    priorities = np.where((bins_remain_cap >= item) & (bins_remain_cap <= item * 2),
                          priorities * 1.1,
                          priorities)

    return priorities
```
