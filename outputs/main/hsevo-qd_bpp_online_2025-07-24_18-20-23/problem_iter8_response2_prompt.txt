{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines nuanced remaining capacity prioritization with fullness consideration and numerical stability.\n    \"\"\"\n    # Check if the item can fit in each bin with a small epsilon for numerical stability\n    valid_bins = (bins_remain_cap >= item).astype(float)\n    \n    # Priority score based on remaining capacity after addition, with a small epsilon\n    remaining_capacity_after_addition = bins_remain_cap - item + 1e-6\n    priority_scores = np.where(valid_bins == 1, 1 / remaining_capacity_after_addition, -1.0)\n    \n    # Modify the priority scores to consider the fullness of the bin, similar to priority_v0\n    fullness_factor = 1 + (1 - (remaining_capacity_after_addition) / (bins_remain_cap + 1e-6))\n    priority_scores = np.where(valid_bins == 1, priority_scores * fullness_factor, priority_scores)\n    \n    # Additional exponential factor to prioritize bins that are almost full, inspired by priority_v1\n    priority_scores = np.where(valid_bins == 1, priority_scores * np.exp(-remaining_capacity_after_addition), priority_scores)\n    \n    return priority_scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin using a more advanced heuristic.\n\n    The heuristic used here combines multiple strategies to create a robust solution.\n    It prioritizes bins that have just enough capacity for the item, penalizes bins that would be left with too much or too little remaining capacity,\n    and ensures numerical stability by avoiding division by zero.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the priority score for each bin based on the remaining capacity\n    # We want to prioritize bins where the item fits exactly or leaves a small remainder\n    priorities = np.where(bins_remain_cap >= item, \n                          np.exp(-((bins_remain_cap - item) / item) ** 2),  # Use a Gaussian-like function to prioritize bins with remaining capacity close to the item size\n                          -1.0)  # Penalize bins that can't fit the item\n    \n    # Ensure that bins that can't fit the item have a lower priority than any bin that can fit the item\n    priorities = np.where(bins_remain_cap < item, priorities - np.max(priorities[bins_remain_cap >= item]) - 1e-6, priorities)\n    \n    # Add a small random noise to the priorities to avoid tie-breaking issues\n    priorities += np.random.uniform(-1e-6, 1e-6, size=len(bins_remain_cap))\n    \n    return priorities\n\n### Analyze & experience\n- Comparing the best heuristic (1st) with the worst (20th), we see that the top heuristic uses a combination of strategies, prioritizes bins with remaining capacity closest to the item size, and normalizes valid bin priorities. In contrast, the worst heuristic combines fit priority and fullness priority but lacks the nuanced normalization and prioritization seen in the top heuristics. Comparing (1st) vs (2nd), both use similar strategies but with slight differences in normalization. (3rd) vs (4th) are identical, indicating potential redundancy. Comparing (second worst) vs (worst), we see similar structures but with differences in scaling and combining priorities. Overall, effective heuristics tend to combine multiple strategies, prioritize bins based on remaining capacity relative to the item size, ensure numerical stability, and normalize or scale priorities to enhance differentiation among viable bins.\n- \nTo design better heuristics, let's redefine 'Current self-reflection' while avoiding 'Ineffective self-reflection'. Here's the analysis:\n\n* **Keywords**: Nuanced prioritization, numerical stability, normalization, differentiation.\n* **Advice**: Combine multiple strategies with careful consideration of remaining capacity and prioritize based on nuanced factors.\n* **Avoid**: Redundancy, ineffective prioritization, and lack of differentiation among viable options.\n* **Explanation**: By focusing on nuanced prioritization and numerical stability, and avoiding redundancy, we can create more robust and effective heuristics that handle different scenarios and edge cases, ultimately leading to better solutions.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}