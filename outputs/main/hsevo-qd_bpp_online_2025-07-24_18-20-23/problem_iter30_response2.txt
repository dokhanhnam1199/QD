```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin using an advanced heuristic.

    The heuristic used here combines multiple factors for priority calculations and employs sophisticated normalization techniques.
    It prioritizes bins based on their remaining capacity, the proportion of capacity used, and the relative fit of the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the priority score for each bin based on multiple factors
    # We want to prioritize bins where the item fits and leaves a reasonable remainder
    priorities = np.where(bins_remain_cap >= item,
                          # Combine the relative fit, proportion of capacity used, and a penalty for high remaining capacity
                          ((1 - np.abs(bins_remain_cap - item) / (bins_remain_cap + 1e-9)) *  # Relative fit with regularization
                           (item / (bins_remain_cap + 1e-9)) *  # Proportion of capacity used with regularization
                           np.exp(-(bins_remain_cap - item) / (item + 1e-9))),  # Penalty for high remaining capacity
                          -1.0)  # Penalize bins that can't fit the item

    # Normalize the priorities using a softmax-like function to enhance differentiation
    max_priority = np.max(priorities)
    if max_priority > -1.0:  # Check if there are bins that can fit the item
        eligible_bins = priorities > -1.0
        priorities[eligible_bins] = np.exp(priorities[eligible_bins] - max_priority) / np.sum(np.exp(priorities[eligible_bins] - max_priority))
        priorities[~eligible_bins] = 0.0

    # Further differentiate among bins by applying a non-linear transformation
    priorities = np.where(priorities > 0,
                          np.power(priorities, 1.5),  # Non-linear transformation to enhance differentiation
                          priorities)

    return priorities
```
