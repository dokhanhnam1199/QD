{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines strategies: prioritizes bins with remaining capacity closest to item size,\n    ensures numerical stability with epsilon, and normalizes valid bin priorities.\n    \"\"\"\n    epsilon = 1e-6  # Small value for numerical stability\n    # Check if bins can fit the item and calculate priority\n    valid_bins = bins_remain_cap >= item\n    diff = np.abs(bins_remain_cap - item)\n    priority = np.where(valid_bins, -diff + 1 / (bins_remain_cap + epsilon), -np.inf)\n    \n    # Normalize priority scores for valid bins\n    valid_bins = priority != -np.inf\n    if np.any(valid_bins):\n        max_priority = np.max(priority[valid_bins])\n        priority[valid_bins] = np.exp(-(max_priority - priority[valid_bins]))\n    \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines fit priority and fullness priority with numerical stability for online bin packing.\n\n    Args:\n        item: Size of item to be added.\n        bins_remain_cap: Array of remaining capacities.\n\n    Returns:\n        Array of priority scores for each bin.\n    \"\"\"\n    # Calculate fit priority and fullness priority\n    fit_priority = np.where(bins_remain_cap >= item, \n                            1 - np.abs(bins_remain_cap - item) / (item + 1e-6),  # Prioritize bins with capacity close to item size\n                            -1.0)  # Penalize bins that can't fit the item\n    \n    fullness_priority = np.where(bins_remain_cap >= item, \n                                 1 - bins_remain_cap / (item + bins_remain_cap - item + 1e-6),  # Avoid division by zero\n                                 -1.0)\n    \n    # Combine priorities with scaling for differentiation\n    priorities = 0.6 * fit_priority + 0.4 * fullness_priority\n    \n    # Ensure bins that can't fit the item have lower priority\n    priorities = np.where(bins_remain_cap < item, priorities - np.max(priorities), priorities)\n    \n    # Scale priorities to enhance differentiation among viable bins\n    max_priority = np.max(priorities)\n    if max_priority != -1.0:  \n        priorities = np.where(priorities != -1.0 - np.max(priorities), np.exp(-(priorities - max_priority)), priorities)\n    \n    return priorities\n\n### Analyze & experience\n- Comparing the best heuristic (1st) with the worst (20th), we see that the top heuristic uses a combination of strategies, prioritizes bins with remaining capacity closest to the item size, and normalizes valid bin priorities. In contrast, the worst heuristic combines fit priority and fullness priority but lacks the nuanced normalization and prioritization seen in the top heuristics. Comparing (1st) vs (2nd), both use similar strategies but with slight differences in normalization. (3rd) vs (4th) are identical, indicating potential redundancy. Comparing (second worst) vs (worst), we see similar structures but with differences in scaling and combining priorities. Overall, effective heuristics tend to combine multiple strategies, prioritize bins based on remaining capacity relative to the item size, ensure numerical stability, and normalize or scale priorities to enhance differentiation among viable bins.\n- \nTo design better heuristics, let's redefine 'Current self-reflection' while avoiding 'Ineffective self-reflection'. Here's the analysis:\n\n* **Keywords**: Nuanced prioritization, numerical stability, normalization, differentiation.\n* **Advice**: Combine multiple strategies with careful consideration of remaining capacity and prioritize based on nuanced factors.\n* **Avoid**: Redundancy, ineffective prioritization, and lack of differentiation among viable options.\n* **Explanation**: By focusing on nuanced prioritization and numerical stability, and avoiding redundancy, we can create more robust and effective heuristics that handle different scenarios and edge cases, ultimately leading to better solutions.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}