```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines 'Best-Fit' and nuanced prioritization strategies with numerical stability.
    """
    # Calculate priority using 'Best-Fit' strategy with epsilon for stability
    priorities = np.where(bins_remain_cap >= item, 
                          1 / (bins_remain_cap - item + 1e-6),  # Best-Fit with epsilon
                          -np.inf)  # Penalize bins that can't fit the item
    
    # Scale priorities to enhance differentiation among viable bins
    max_priority = np.max(priorities)
    if max_priority != -np.inf:  
        priorities = np.where(priorities != -np.inf, np.exp(priorities - max_priority), priorities)
    
    return priorities
```
