```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    The priority is higher for bins that have enough capacity for the item and 
    lower remaining capacity after accommodating the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_after_addition = bins_remain_cap - item
    
    # Create a mask to identify bins that can accommodate the item
    can_fit = remaining_after_addition >= 0
    
    # Assign a very low priority to bins that cannot accommodate the item
    priority = np.where(can_fit, -remaining_after_addition, -np.inf)
    
    # To avoid division by zero and to make the priority more meaningful,
    # we can further adjust it by considering the ratio of remaining capacity 
    # after addition to the original remaining capacity
    # However, in this simple version, we stick to the basic idea
    
    return priority
```
