```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, using a heuristic that prioritizes minimizing waste and bin fullness.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities  # No bins can fit the item

    waste = bins_remain_cap[valid_bins] - item
    fullness = 1.0 - (bins_remain_cap[valid_bins] / np.max(bins_remain_cap))
    priorities[valid_bins] = fullness * (1.0 / (waste + 1e-6))

    return priorities
```
