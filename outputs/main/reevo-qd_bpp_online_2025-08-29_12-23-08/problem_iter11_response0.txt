```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Exact fit gets highest priority
    exact_fit_indices = np.where(np.isclose(bins_remain_cap, item))[0]
    priorities = np.zeros_like(bins_remain_cap)
    priorities[exact_fit_indices] = 1.0

    # Prioritize bins with smallest remaining capacity (tightest fit)
    remaining_capacities = bins_remain_cap[priorities == 0]
    if len(remaining_capacities) > 0:
        sorted_indices = np.argsort(remaining_capacities)
        priorities[np.where(priorities == 0)[0][sorted_indices]] = 0.5

    # Prioritize bins that are almost full (but not overfull)
    almost_full_indices = np.where((bins_remain_cap >= item) & (bins_remain_cap < item * 1.2))[0]
    if len(almost_full_indices) > 0:
        priorities[almost_full_indices] = 0.3
        
    return priorities
```
