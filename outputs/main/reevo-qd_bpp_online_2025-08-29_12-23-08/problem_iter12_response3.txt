```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Sigmoid Fit Score and Almost-Full Penalty with dynamic parameter adjustment.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate fit score for each bin
    fit_scores = item / bins_remain_cap

    # Apply sigmoid function to the fit scores
    # A higher sigmoid value indicates a better fit
    sigmoid_scores = 1 / (1 + np.exp(-5 * (fit_scores - 0.5)))

    # Adjust parameters as needed - dynamic adjustment based on average remaining capacity
    avg_remaining_cap = np.mean(bins_remain_cap)
    penalty_factor = 10 * (1 - avg_remaining_cap / 1.0)  # Adjust penalty based on how full bins are overall
    almost_full_penalty = np.exp(-penalty_factor * (bins_remain_cap / 1.0))

    # Combine sigmoid score and almost-full penalty
    priorities = sigmoid_scores * almost_full_penalty

    return priorities
```
