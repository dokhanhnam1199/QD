```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Exact fit gets highest priority
    exact_fit = (bins_remain_cap == item)
    priorities[exact_fit] = 100.0

    # Best fit: minimize remaining capacity after placing the item
    remaining_capacity = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)
    priorities += 1.0 / (remaining_capacity + 1e-6)

    # Penalize near-full bins (avoid very small remaining capacity)
    fullness = bins_remain_cap / np.max(bins_remain_cap)  # Normalize capacity
    priorities -= 2.0 * (fullness**2) # Quadratic penalty near full

    # Smoothly penalize waste (relative fullness is key)
    waste_penalty = np.where(bins_remain_cap >= item, item / bins_remain_cap, 1.0)
    priorities -= 0.5 * waste_penalty

    return priorities
```
