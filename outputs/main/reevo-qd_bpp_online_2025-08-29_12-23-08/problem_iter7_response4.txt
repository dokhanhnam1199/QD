```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between item size and remaining capacity
    diff = bins_remain_cap - item

    # Prioritize exact fits (diff == 0)
    exact_fit = (diff == 0).astype(float) * 1000  # High priority for exact fits

    # Prioritize tight fits (small positive difference)
    tight_fit = np.where(diff > 0, 1 / diff, 0)  # Higher priority for smaller differences

    # Penalize nearly full bins (small remaining capacity)
    fullness_penalty = np.where(bins_remain_cap < item * 1.1, 1 / (item * 1.1 - bins_remain_cap), 0) #Small penalty for near full bins

    # Combine the scores
    priorities = exact_fit + tight_fit - fullness_penalty

    return priorities
```
