```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Sigmoid Fit Score.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero and negative capacities
    valid_bins = bins_remain_cap > 0
    bins_remain_cap_valid = bins_remain_cap[valid_bins]

    # Calculate the fit ratio: item size / remaining capacity
    fit_ratios = item / bins_remain_cap_valid
    
    # Use a sigmoid function to map the fit ratio to a priority score.
    # The sigmoid function maps values to the range (0, 1), with lower fit ratios (better fit)
    # resulting in higher scores.
    # We use a scaling factor (e.g., 10) to control the steepness of the sigmoid.
    priorities_valid = 1 / (1 + np.exp(10 * (fit_ratios - 0.5))) 

    # Create an array of priorities with the same size as bins_remain_cap
    priorities = np.zeros_like(bins_remain_cap)
    priorities[valid_bins] = priorities_valid
    
    return priorities
```
