```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate the waste if the item is placed in each bin.
    waste = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)

    # Prioritize bins where the item fits exactly or closely.
    fit_score = np.where(bins_remain_cap >= item, 1.0 / (waste + 1e-6), 0.0)
    priorities = fit_score

    # Penalize near-full bins (avoid creating many almost-full bins).
    fullness = bins_remain_cap
    near_full_penalty = np.exp(-fullness / 10.0) #Example scaling, adjust based on expected item sizes and bin capacity
    priorities += near_full_penalty * 0.1

    # Smoothly penalize large waste (relative to bin capacity).  Avoid huge gaps.
    relative_waste = np.where(bins_remain_cap >= item, waste / bins_remain_cap, np.inf)
    waste_penalty = np.exp(relative_waste) * 0.05
    priorities -= waste_penalty

    return priorities
```
