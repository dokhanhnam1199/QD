```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Exact fit gets highest priority
    exact_fit_priority = np.where(bins_remain_cap == item, 1000, 0)

    # Best fit (minimal waste)
    waste = bins_remain_cap - item
    best_fit_priority = np.where(waste >= 0, 1 / (waste + 1e-6), 0)  # Only consider bins that can fit the item

    # Penalize nearly full bins (exponential decay) - more aggressive penalty
    fullness_penalty = np.exp(-bins_remain_cap / item)

    # Reward bins that are not empty
    not_empty_reward = np.where(bins_remain_cap > 0, 1, 0)

    # Combine priorities with weights.  Adjust weights as needed.
    priorities = (
        0.6 * exact_fit_priority +
        0.3 * best_fit_priority +
        0.1 * not_empty_reward -
        0.2 * fullness_penalty
    )
    return priorities
```
