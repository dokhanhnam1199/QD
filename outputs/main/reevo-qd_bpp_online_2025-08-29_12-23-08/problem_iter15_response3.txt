```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.01) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Probability of exploration.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate the waste if the item is placed in each bin.
    waste = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)

    # Base priority on minimizing waste (smaller waste is better).
    priorities = 1.0 / (waste + 1e-6)

    # Penalize bins that are almost full to avoid creating many nearly-full bins
    fullness = bins_remain_cap / np.max(bins_remain_cap)
    priorities = priorities * (1.0 - fullness)

    # Exploration: Add a small random value to each bin with probability epsilon.
    if np.random.rand() < epsilon:
        priorities += np.random.rand(n_bins) * 0.01

    return priorities
```
