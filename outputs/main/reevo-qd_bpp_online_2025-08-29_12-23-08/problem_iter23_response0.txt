```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the waste score for each bin
    waste = bins_remain_cap - item
    waste_scores = waste / np.maximum(1e-6, bins_remain_cap)  # Avoid division by zero

    # Exact fit gets a high boost
    exact_fit_mask = np.isclose(bins_remain_cap, item)
    waste_scores[exact_fit_mask] = 10.0

    # Prefer bins with minimal waste
    priorities = -waste_scores

    # Reward bins with larger remaining capacities, preventing early commitment to small bins
    priorities = priorities + bins_remain_cap * 0.002

    # Penalize nearly full bins to avoid fragmentation
    fullness = bins_remain_cap / np.max(bins_remain_cap)
    priorities = priorities * (1 - fullness * 0.4)

    # Penalize bins that are almost full
    priorities = priorities - (fullness > 0.95) * 5  # Harsh penalty for nearly full bins

    # Ensure bins that are too small get a very low priority
    invalid_bins = bins_remain_cap < item
    priorities[invalid_bins] = -10.0

    return priorities
```
