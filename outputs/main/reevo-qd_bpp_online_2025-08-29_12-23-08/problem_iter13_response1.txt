```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate the waste if the item is placed in each bin.
    waste = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)

    # Base priority on minimizing waste (smaller waste is better).
    priorities = 1.0 / (waste + 1e-6)

    # Sigmoid scaling to favor tightness, and subtly penalize nearly-full bins.
    priorities = 1.0 / (1.0 + np.exp(-5 * (bins_remain_cap - item)))

    # Dynamic parameter adjustment based on average remaining capacity.
    avg_remaining = np.mean(bins_remain_cap)
    if avg_remaining < item:
        priorities *= 0.5  # Reduce priority for nearly full bins
    
    return priorities
```
