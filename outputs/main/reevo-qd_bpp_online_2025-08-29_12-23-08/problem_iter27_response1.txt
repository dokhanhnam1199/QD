```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Exact fit gets the highest priority
    exact_fit_mask = np.isclose(item, bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    priorities[exact_fit_mask] = 100.0

    # For bins that don't have an exact fit, prioritize based on remaining capacity and fullness
    other_bins = ~exact_fit_mask
    remaining_capacity = bins_remain_cap[other_bins]
    fullness = 1 - (remaining_capacity / np.max(bins_remain_cap))
    fit_score = item / remaining_capacity

    # Sigmoid function for smooth scaling
    sigmoid_score = 1 / (1 + np.exp(-(fit_score - 0.7)))
    
    # Combine capacity and sigmoid score
    priorities[other_bins] = sigmoid_score * remaining_capacity * 0.01

    # Ensure bins that are too small get a very low priority
    invalid_bins = bins_remain_cap < item
    priorities[invalid_bins] = 0.01

    # Add small random noise to encourage exploration
    priorities = priorities + np.random.rand(len(bins_remain_cap)) * 0.001
    
    return priorities
```
