```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Exact fit gets highest priority
    exact_fit_priority = np.where(bins_remain_cap == item, 1000, 0)

    # Best fit (minimal waste)
    waste = bins_remain_cap - item
    best_fit_priority = np.where(waste >= 0, 1 / (waste + 1e-6), 0)

    # Penalize nearly full bins - exponential decay
    fullness_penalty = np.exp(-bins_remain_cap / item)

    # Combine priorities - adjust weights as needed
    priorities = exact_fit_priority + 2 * best_fit_priority - 0.5 * fullness_penalty

    return priorities
```
