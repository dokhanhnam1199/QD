```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    diff = bins_remain_cap - item
    
    # Exact fit: highest priority
    exact_fit = (diff == 0).astype(float) * 1000
    
    # Tight fit: high priority, inversely proportional to remaining space
    tight_fit = np.where(diff > 0, 1 / (diff + 1e-6), 0)  # Add a small epsilon to avoid division by zero
    
    # Penalize nearly full bins
    fullness_penalty = np.where(bins_remain_cap < item * 1.1, 1 / (item * 1.1 - bins_remain_cap + 1e-6), 0) #Avoid division by zero

    # Combine scores with weights
    priorities = exact_fit + 5 * tight_fit - 2 * fullness_penalty
    
    return priorities
```
