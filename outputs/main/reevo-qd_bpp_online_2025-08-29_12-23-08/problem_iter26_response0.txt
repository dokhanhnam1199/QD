```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the fit score for each bin
    fit_scores = item / bins_remain_cap
    
    # Avoid division by zero and prioritize bins with some remaining capacity
    valid_bins = bins_remain_cap > 0
    fit_scores[~valid_bins] = -np.inf
    
    # Exact fit gets a huge boost
    exact_fit_mask = np.isclose(fit_scores, 1.0)
    fit_scores[exact_fit_mask] = 10.0

    # Apply a sigmoid function to the fit scores to get priority
    # This ensures that bins with a better fit (closer to 1) get higher priority,
    # but also penalizes bins that are too full (fit score > 1).
    # The sigmoid function parameters can be adjusted to fine-tune the behavior.
    priorities = 1 / (1 + np.exp(-5 * (fit_scores - 0.5)))

    # Gently reward bins with larger remaining capacities
    priorities = priorities + bins_remain_cap * 0.002

    return priorities
```
