```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Exact fit: highest priority
    exact_fit_bins = np.where(bins_remain_cap == item)[0]
    priorities[exact_fit_bins] = 2.0

    # Best fit: prioritize bins with smallest remaining capacity after placing the item
    fitting_bins = np.where(bins_remain_cap >= item)[0]
    if len(fitting_bins) > 0:
        diffs = bins_remain_cap[fitting_bins] - item
        priorities[fitting_bins] = 1.0 - (diffs / np.max(bins_remain_cap))  # Normalize difference

    return priorities
```
