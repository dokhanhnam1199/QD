```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Exact fit gets highest priority
    exact_fit = (bins_remain_cap == item)
    priorities = np.where(exact_fit, 10.0, 0.0)

    # Best fit (minimal waste) gets next priority
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Penalize bins that are too small
    priorities = np.where(priorities == 0.0, 1.0 / (waste + 1e-6), priorities)

    # Add a small amount of randomness (epsilon-greedy) for exploration
    epsilon = 0.05
    if np.random.rand() < epsilon:
        priorities += np.random.rand(len(bins_remain_cap)) * 0.1

    # Boost bins with larger remaining capacity to encourage distribution
    priorities += bins_remain_cap * 0.01

    return priorities
```
