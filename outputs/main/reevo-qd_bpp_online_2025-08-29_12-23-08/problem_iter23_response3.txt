```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the waste score for each bin
    waste = bins_remain_cap - item
    waste_scores = waste / bins_remain_cap

    # Exact fit gets a high boost
    exact_fit_mask = np.isclose(waste_scores, 0.0)
    waste_scores[exact_fit_mask] = 1.0

    # Penalize nearly full bins
    fullness = bins_remain_cap / np.max(bins_remain_cap)
    waste_scores = waste_scores * (1 - fullness * 0.5)

    # Reward bins with larger remaining capacities
    waste_scores = waste_scores + bins_remain_cap * 0.002

    # Penalize bins that are too small
    invalid_bins = bins_remain_cap < item
    waste_scores[invalid_bins] = 0.01

    # Add a small amount of randomness
    noise = np.random.rand(len(bins_remain_cap)) * 0.01
    waste_scores = waste_scores + noise

    return waste_scores
```
