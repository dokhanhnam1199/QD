```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Exact fit gets highest priority
    exact_fit_mask = (bins_remain_cap == item)
    priorities = np.where(exact_fit_mask, 1000.0, 0.0)

    # Next, best fit (minimal waste)
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Penalize bins that are too small
    priorities = np.where(priorities == 0, 1.0 / (waste + 1e-6), priorities)

    # Penalize nearly full bins (avoid fragmentation)
    fullness = bins_remain_cap / np.max(bins_remain_cap)
    priorities = priorities * (1.0 - fullness * 0.8)  # Increased penalty for full bins

    return priorities
```
