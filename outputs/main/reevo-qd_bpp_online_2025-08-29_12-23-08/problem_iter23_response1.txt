```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the waste for each bin
    waste = bins_remain_cap - item

    # Exact fit gets a very high priority
    exact_fit_mask = np.isclose(waste, 0.0)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    priorities[exact_fit_mask] = 10.0

    # Prioritize bins with minimal waste
    priorities += waste * 0.5

    # Reward bins with larger remaining capacities (but not full bins)
    priorities += bins_remain_cap * 0.002

    # Penalize nearly full bins (avoid fragmentation)
    fullness = bins_remain_cap / np.max(bins_remain_cap)
    priorities -= fullness**2 * 0.4

    # Penalize bins that are too small
    invalid_bins = bins_remain_cap < item
    priorities[invalid_bins] = 0.01
    
    # Add a small amount of randomness
    priorities += np.random.rand(len(bins_remain_cap)) * 0.001

    return priorities
```
