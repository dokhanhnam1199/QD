```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Exact fit gets highest priority
    exact_fit_mask = np.isclose(item, bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap)
    priorities[exact_fit_mask] = 1.0

    # Prioritize bins where the item fits
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        # Calculate the fit score (closer to 1 is better)
        fit_scores = item / bins_remain_cap
        fit_scores[~valid_bins] = 0.0 # Set invalid bins to zero
        
        # Scale fit scores using sigmoid function
        priorities[valid_bins] = 1 / (1 + np.exp(-5 * (fit_scores[valid_bins] - 0.7)))

        # Reward larger remaining capacity
        priorities[valid_bins] += bins_remain_cap[valid_bins] * 0.001

        # Add a small amount of randomness
        priorities += np.random.rand(len(bins_remain_cap)) * 0.0005

    return priorities
```
