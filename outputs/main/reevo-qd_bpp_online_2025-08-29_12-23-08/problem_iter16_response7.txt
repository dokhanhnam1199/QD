```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the fit score for each bin
    fit_scores = item / bins_remain_cap

    # Exact fit gets a huge boost
    exact_fit_mask = np.isclose(fit_scores, 1.0)
    fit_scores[exact_fit_mask] = 10.0  # Significantly higher score for exact fit

    # Apply a sigmoid function to the fit scores to get priority
    # This ensures that bins with a better fit (closer to 1) get higher priority,
    # but also penalizes bins that are too full (fit score > 1).
    # The sigmoid function parameters can be adjusted to fine-tune the behavior.
    priorities = 1 / (1 + np.exp(-7 * (fit_scores - 0.5)))

    # Penalize bins that are almost empty to encourage filling them up first
    very_empty_mask = bins_remain_cap > 0.95
    priorities[very_empty_mask] *= 0.7

    # Reward bins with larger remaining capacities (to a degree)
    priorities = priorities + bins_remain_cap * 0.005

    return priorities
```
