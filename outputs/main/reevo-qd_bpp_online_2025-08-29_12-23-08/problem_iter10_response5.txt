```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero and bins with no capacity
    valid_bins = bins_remain_cap > 0
    bins_remain_cap_valid = bins_remain_cap[valid_bins]

    # Calculate the fit score for each valid bin
    fit_scores = item / bins_remain_cap_valid

    # Calculate a fullness score (higher is worse)
    fullness_scores = 1 - (bins_remain_cap_valid - item) / bins_remain_cap_valid

    # Combine fit and fullness.  We want high fit and low fullness.
    combined_scores = fit_scores - fullness_scores

    # Apply a sigmoid function to the combined scores to get priority
    # This ensures positive priorities and scales the values.
    priorities = 1 / (1 + np.exp(-5 * (combined_scores - 0.5)))

    # Create an array of priorities with the same size as bins_remain_cap
    result_priorities = np.zeros_like(bins_remain_cap)
    result_priorities[valid_bins] = priorities

    return result_priorities
```
