```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Exact fit gets highest priority
    exact_fit = np.isclose(bins_remain_cap, item)
    priorities = np.where(exact_fit, 1.0, 0.0)

    # For bins that don't have an exact fit, calculate priority based on remaining capacity
    remaining_capacities = bins_remain_cap[~exact_fit]
    item_ratios = item / remaining_capacities
    
    # Use sigmoid function to scale priorities between 0 and 1
    sigmoid_values = 1 / (1 + np.exp(-5 * (1 - item_ratios)))
    
    # Assign sigmoid values to the corresponding bins
    priorities[~exact_fit] = sigmoid_values
    
    # Add a small amount of randomness for exploration
    priorities += np.random.rand(len(bins_remain_cap)) * 0.001

    # Ensure bins that are too small get a very low priority
    invalid_bins = bins_remain_cap < item
    priorities[invalid_bins] = 0.001

    return priorities
```
