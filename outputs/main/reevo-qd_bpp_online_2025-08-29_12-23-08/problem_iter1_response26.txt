```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Sigmoid Fit Score.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate fit score for each bin
    fit_scores = item / bins_remain_cap
    
    # Apply sigmoid function to the fit scores
    # A higher sigmoid value indicates a better fit
    sigmoid_scores = 1 / (1 + np.exp(-5 * (fit_scores - 0.5)))  # Adjust parameters as needed

    # Penalize bins that are almost full to encourage spreading items
    # Prevents all items being placed in the first few bins.
    almost_full_penalty = np.exp(-10 * (bins_remain_cap / 1.0))

    priorities = sigmoid_scores * almost_full_penalty
    return priorities
```
