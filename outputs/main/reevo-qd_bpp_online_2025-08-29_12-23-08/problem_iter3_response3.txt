```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero and bins with no remaining capacity
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    # Calculate the fit score for each valid bin
    fit_scores = item / bins_remain_cap[valid_bins]

    # Apply a sigmoid function to the fit scores to get priority
    # This ensures that bins with a better fit (closer to 1) get higher priority,
    # but also penalizes bins that are too full (fit score > 1).
    # The sigmoid function parameters can be adjusted to fine-tune the behavior.
    priorities = 1 / (1 + np.exp(-5 * (fit_scores - 0.5)))

    # Create an array to store the priorities for all bins
    all_priorities = np.zeros_like(bins_remain_cap)

    # Assign the priorities to the valid bins
    all_priorities[valid_bins] = priorities

    return all_priorities
```
