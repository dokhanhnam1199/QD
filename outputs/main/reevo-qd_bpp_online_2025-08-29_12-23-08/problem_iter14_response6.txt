```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Exact fit gets highest priority
    exact_fit_mask = (bins_remain_cap == item)
    priorities = np.where(exact_fit_mask, 1000.0, 0.0)

    # Best fit (minimal waste) - prioritize bins where item fits
    waste = bins_remain_cap - item
    valid_bins = waste >= 0
    waste = waste[valid_bins]
    if len(waste) > 0:
        best_fit_index = np.argmin(waste)
        priorities[valid_bins][best_fit_index] = 500.0  # High priority for best fit

    # Penalize nearly full bins (avoid fragmentation) - relative fullness
    fullness = bins_remain_cap / np.max(bins_remain_cap)
    priorities = priorities * (1.0 - fullness * 0.8)

    # Add a small bonus for larger remaining capacities (encourages usage)
    priorities = priorities + bins_remain_cap * 0.01

    return priorities
```
