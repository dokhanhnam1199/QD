```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    # Fit score: how well the item fits in the bin
    fit_score = item / bins_remain_cap
    fit_score[~valid_bins] = 0

    # Utilization score: how full the bin is after adding the item
    utilization_score = (bins_remain_cap - item) / bins_remain_cap
    utilization_score[~valid_bins] = 0

    # Combine fit and utilization scores
    combined_score = 0.7 * fit_score + 0.3 * utilization_score

    # Smooth penalty for almost full bins
    almost_full_penalty = np.exp(-5 * (1.0 - bins_remain_cap / 1.0))

    # Apply penalty
    priorities = combined_score * almost_full_penalty

    return priorities
```
