```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap > 0

    if not np.any(valid_bins):
        return priorities

    bins_remain_cap_valid = bins_remain_cap[valid_bins]
    fit_ratios = item / bins_remain_cap_valid
    fullness = 1 - (bins_remain_cap_valid / np.max(bins_remain_cap))

    # Combine fit and fullness.  Higher fullness *and* good fit are preferred.
    combined_score = (1 - fit_ratios) * fullness

    # Use sigmoid to scale
    priorities_valid = 1 / (1 + np.exp(-10 * (combined_score - 0.5)))

    priorities[valid_bins] = priorities_valid
    return priorities
```
