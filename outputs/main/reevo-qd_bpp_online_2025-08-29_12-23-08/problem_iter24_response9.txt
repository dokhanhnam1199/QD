```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Exact fit preference
    exact_fit = bins_remain_cap == item
    priorities[exact_fit] = 100.0

    # Capacity-aware scoring (smoothness and avoiding almost full bins)
    fitting_bins = bins_remain_cap >= item
    
    fit_scores = item / bins_remain_cap
    fit_scores[~fitting_bins] = 0  # Set to zero if item doesn't fit

    sigmoid_scores = 1 / (1 + np.exp(-5 * (fit_scores - 0.5)))

    almost_full_penalty = np.exp(-10 * (1 - bins_remain_cap / 1.0))

    priorities[fitting_bins] = sigmoid_scores[fitting_bins] * almost_full_penalty[fitting_bins]

    return priorities
```
