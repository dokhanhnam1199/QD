```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, tightness_factor: float = 5.0) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        tightness_factor: Scaling factor for prioritizing tighter fits.
                          Higher values emphasize tight fits more strongly.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate the difference between the item size and the remaining capacity.
    diff = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)

    # Prioritize bins with smaller differences (better fit).
    priorities = 1.0 / (diff + 1e-6)

    # Apply sigmoid scaling to favor tighter fits and penalize nearly full bins.
    priorities = tightness_factor * (1.0 / (1.0 + np.exp(-priorities)))

    # Add a small penalty for bins that are almost full
    almost_full_penalty = np.exp(-10 * (1 - bins_remain_cap / 1.0))
    priorities = priorities * almost_full_penalty

    return priorities
```
