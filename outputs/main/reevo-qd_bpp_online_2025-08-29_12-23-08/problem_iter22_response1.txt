```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    # Fit score: how well the item fits in the bin
    fit_score = item / bins_remain_cap
    fit_score[~valid_bins] = 0.0

    # Utilization score: how full the bin is *after* adding the item
    utilization_score = (bins_remain_cap - item) / bins_remain_cap
    utilization_score[~valid_bins] = 0.0

    # Fullness penalty: penalize bins that are almost full
    fullness_penalty = np.exp(-5 * (1 - utilization_score))
    fullness_penalty[~valid_bins] = 0.0

    # Empty/near-empty boost: boost bins that are empty or nearly empty
    empty_boost = np.exp(-10 * (1 - bins_remain_cap / 1.0))  # Assuming bin capacity is 1.0
    empty_boost[~valid_bins] = 0.0
    
    # Combine the scores
    combined_score = 0.5 * fit_score + 0.3 * utilization_score + 0.2 * empty_boost

    priorities[valid_bins] = combined_score[valid_bins] * fullness_penalty[valid_bins]
    
    return priorities
```
