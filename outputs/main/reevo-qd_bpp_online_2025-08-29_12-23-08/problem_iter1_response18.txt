```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Epsilon-Greedy.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Exploration rate (probability of choosing a random bin).
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate greedy priority (best fit)
    suitable_bins = bins_remain_cap >= item
    if np.any(suitable_bins):
        best_bin_index = np.argmin(bins_remain_cap[suitable_bins] - item)
        best_bin_index = np.where(suitable_bins)[0][best_bin_index]
        priorities[best_bin_index] = 1.0

    # Add exploration with probability epsilon
    if np.random.rand() < epsilon:
        # Assign random priorities to all bins
        priorities = np.random.rand(n_bins)

    return priorities
```
