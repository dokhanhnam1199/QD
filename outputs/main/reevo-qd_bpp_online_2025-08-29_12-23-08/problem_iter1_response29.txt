```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Softmax-Based Fit.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate fit score for each bin.  Higher fit means better.
    fit_scores = np.where(bins_remain_cap >= item, bins_remain_cap - item, 0)

    # Apply Softmax to convert fit scores to probabilities.
    # This emphasizes bins with better fit, but still considers all viable bins.
    # Adding a small epsilon to prevent division by zero.
    epsilon = 1e-8
    exp_fit = np.exp(fit_scores / (max(fit_scores) + epsilon))
    probabilities = exp_fit / np.sum(exp_fit)

    return probabilities
```
