```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate the fractional fit for each bin
    fit_scores = np.where(bins_remain_cap > 0, item / bins_remain_cap, 0)

    # Use a smooth function (sigmoid) to assign priority based on fit.
    # Adjust the scaling factor (e.g., 5) and offset (e.g., 0.5) to tune the behavior.
    # A higher scaling factor makes the function steeper, leading to more distinct priorities.
    # The offset shifts the function, influencing which fit scores get higher priority.
    priorities = 1 / (1 + np.exp(-5 * (fit_scores - 0.5)))

    return priorities
```
