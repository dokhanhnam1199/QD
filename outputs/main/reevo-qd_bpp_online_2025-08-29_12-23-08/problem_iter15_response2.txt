```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate how much space the item would leave in each bin
    remaining_space = np.where(bins_remain_cap >= item, bins_remain_cap - item, -1.0)

    # Best fit: prioritize bins where the item fits snugly
    fit_score = np.where(remaining_space >= 0, 1.0 / (remaining_space + 1e-6), 0.0)
    priorities += fit_score

    # Penalize near-full bins.  The closer to full, the lower the priority.
    fullness = bins_remain_cap
    fullness_penalty = 1.0 - (fullness / 1.0)
    priorities -= fullness_penalty * 0.5  # Reduce the penalty's impact

    # Penalize waste.
    waste_penalty = np.where(remaining_space >= 0, 0.0, 1.0)
    priorities -= waste_penalty * 0.2

    return priorities
```
