```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate waste
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Penalize bins that are too small

    # Exact fit bonus
    exact_fit = np.isclose(bins_remain_cap, item)
    exact_fit_score = np.where(exact_fit, 10.0, 0.0)

    # Prioritize bins with minimal waste
    waste_score = 1.0 / (waste + 1e-6)  # Add a small value to prevent division by zero

    # Reward partially full bins
    capacity_score = bins_remain_cap * 0.001

    # Penalize almost full bins (fragmentation)
    fullness = 1.0 - (bins_remain_cap / np.max(bins_remain_cap))
    fullness_penalty = fullness * 0.5

    # Combine scores
    priorities = exact_fit_score + waste_score + capacity_score - fullness_penalty

    # Ensure invalid bins have very low priority
    priorities[bins_remain_cap < item] = 0.01

    return priorities
```
