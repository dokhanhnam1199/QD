```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the fit score for each bin
    fit_scores = np.zeros_like(bins_remain_cap, dtype=float)
    exact_fit_mask = np.isclose(bins_remain_cap, item)
    fit_scores[exact_fit_mask] = 1.0

    # Reward bins with sufficient remaining capacity
    valid_bins = bins_remain_cap >= item
    fit_scores[valid_bins] = bins_remain_cap[valid_bins] / np.max(bins_remain_cap)
    fit_scores[valid_bins] = 1.0 - (1.0 - fit_scores[valid_bins])**2 # Sigmoid-like scaling

    # Penalize nearly full bins
    fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    fit_scores = fit_scores * (1 - fullness * 0.5)

    # Reward larger remaining capacities
    fit_scores = fit_scores + bins_remain_cap * 0.001

    # Add small random noise to encourage exploration
    fit_scores = fit_scores + np.random.rand(len(bins_remain_cap)) * 0.0005
    
    return fit_scores
```
