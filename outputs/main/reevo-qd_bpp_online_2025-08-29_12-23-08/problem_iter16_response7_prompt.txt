{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Exact fit gets highest priority\n    exact_fit_mask = (bins_remain_cap == item)\n    priorities = np.where(exact_fit_mask, 1000.0, 0.0)\n\n    # Best fit (minimal waste) - prioritize bins where item fits\n    waste = bins_remain_cap - item\n    valid_bins = waste >= 0\n    waste = waste[valid_bins]\n    if len(waste) > 0:\n        best_fit_index = np.argmin(waste)\n        priorities[valid_bins][best_fit_index] = 500.0  # High priority for best fit\n\n    # Penalize nearly full bins (avoid fragmentation) - relative fullness\n    fullness = bins_remain_cap / np.max(bins_remain_cap)\n    priorities = priorities * (1.0 - fullness * 0.8)\n\n    # Add a small bonus for larger remaining capacities (encourages usage)\n    priorities = priorities + bins_remain_cap * 0.01\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the fit score for each bin\n    fit_scores = item / bins_remain_cap\n\n    # Exact fit gets a huge boost\n    exact_fit_mask = np.isclose(fit_scores, 1.0)\n    fit_scores[exact_fit_mask] = 2.0  # Significantly higher score for exact fit\n\n    # Apply a sigmoid function to the fit scores to get priority\n    # This ensures that bins with a better fit (closer to 1) get higher priority,\n    # but also penalizes bins that are too full (fit score > 1).\n    # The sigmoid function parameters can be adjusted to fine-tune the behavior.\n    priorities = 1 / (1 + np.exp(-5 * (fit_scores - 0.5)))\n\n    # Penalize bins that are almost empty to encourage filling them up first\n    very_empty_mask = bins_remain_cap > 0.95\n    priorities[very_empty_mask] *= 0.8\n\n    return priorities\n\n[Reflection]\nPrioritize smooth scoring (sigmoid), consider bin fullness, and reward exact fits heavily.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}