```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Exact fit gets the highest priority
    exact_fit_mask = np.isclose(item, bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    priorities[exact_fit_mask] = 1.0

    # For bins where an exact fit isn't possible, prioritize based on remaining capacity and fullness
    remaining_capacities = bins_remain_cap[~exact_fit_mask]
    fullness = 1 - (remaining_capacities / np.max(remaining_capacities))
    fit_scores = item / remaining_capacities

    # Use a sigmoid function to scale the fit score, prioritizing partial fullness
    sigmoid_scores = 1 / (1 + np.exp(-(fit_scores - 0.7)))

    # Combine fit score, remaining capacity, and a small amount of randomness
    priorities[~exact_fit_mask] = sigmoid_scores * remaining_capacities * 0.01 + remaining_capacities * 0.001 + np.random.rand(len(remaining_capacities)) * 0.0001

    # Ensure bins that are too small get a very low priority
    invalid_bins = bins_remain_cap < item
    priorities[invalid_bins] = 0.001

    return priorities
```
