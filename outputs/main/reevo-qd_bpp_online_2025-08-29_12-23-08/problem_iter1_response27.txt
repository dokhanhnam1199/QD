```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Calculate the 'fit' score for each bin.  Higher is better.
    # If the item fits, the score is based on how tightly it fits.
    # If the item doesn't fit, the score is 0.
    for i in range(len(bins_remain_cap)):
        if bins_remain_cap[i] >= item:
            priorities[i] = bins_remain_cap[i] - item  # Remaining capacity
    
    # Add a small bonus for bins with very low remaining capacity
    # to encourage filling almost-full bins first (first-fit decreasing like behavior)
    priorities += 0.1 * np.exp(-bins_remain_cap)
    
    return priorities
```
