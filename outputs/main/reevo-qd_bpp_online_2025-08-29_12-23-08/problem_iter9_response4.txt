```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Exact fit gets highest priority
    exact_fit_indices = np.where(bins_remain_cap == item)[0]
    priorities = np.zeros_like(bins_remain_cap)
    if len(exact_fit_indices) > 0:
        priorities[exact_fit_indices] = 1.0

    # Best fit gets second highest priority
    remaining_capacities = bins_remain_cap[priorities == 0]
    if len(remaining_capacities) > 0:
        best_fit_index = np.argmin(np.abs(remaining_capacities - item))
        priorities[np.where(bins_remain_cap == remaining_capacities[best_fit_index])[0][0]] = 0.5

    # Remaining bins get priority based on remaining capacity
    priorities[priorities == 0] = bins_remain_cap[priorities == 0] / np.max(bins_remain_cap)
    
    return priorities
```
