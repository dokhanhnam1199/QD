```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item

    if np.sum(valid_bins) == 0:
        return priorities

    # Calculate fit score for each bin
    fit_scores = item / bins_remain_cap[valid_bins]

    # Apply sigmoid function to the fit scores
    sigmoid_scores = 1 / (1 + np.exp(-5 * (fit_scores - 0.5)))

    # Adjust parameters as needed
    # Penalize bins that are almost full to encourage spreading items
    almost_full_penalty = np.exp(-10 * ((1.0 - bins_remain_cap[valid_bins]) / 1.0))

    # Item-specific adjustment: smaller items get a boost to bin spreading
    item_spread_boost = np.exp(-5 * item)

    priorities[valid_bins] = sigmoid_scores * almost_full_penalty * item_spread_boost

    return priorities
```
