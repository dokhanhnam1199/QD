```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item
    if not np.any(valid_bins):
        return priorities

    # Fit score: how well the item fits in the bin
    fit_score = item / bins_remain_cap
    fit_score[~valid_bins] = 0

    # Utilization score: how full the bin is after adding the item
    utilization_score = (bins_remain_cap - item) / bins_remain_cap
    utilization_score[~valid_bins] = 0

    # Combine fit and utilization scores
    combined_score = 0.6 * fit_score + 0.4 * utilization_score

    # Penalty for almost full bins (discourage putting items in bins that are already very full)
    almost_full_penalty = np.exp(-5 * (1 - (bins_remain_cap - item) / bins_remain_cap))
    almost_full_penalty[~valid_bins] = 0

    # Boost for empty or nearly empty bins.
    empty_boost = np.exp(-10 * (1 - bins_remain_cap / 1.0))
    empty_boost[~valid_bins] = 0

    priorities = combined_score * almost_full_penalty * empty_boost
    return priorities
```
