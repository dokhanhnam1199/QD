{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\n## BPP Heuristic Design - Constructive Hints (Refined):\n\n**Prioritize exact fits above all else.** Score bins with smooth, scaled fitness (sigmoid preferred) favoring partial fullness & larger remaining capacity. Keep it simple \u2013 directness & minimal waste win! Controlled randomness aids exploration.\n\n\n\n\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the fit score for each bin\n    fit_scores = item / bins_remain_cap\n\n    # Exact fit gets a high boost\n    exact_fit_mask = np.isclose(fit_scores, 1.0)\n    fit_scores[exact_fit_mask] = 10.0\n\n    # Reward good fits (between 0.5 and 1.0)\n    good_fit_mask = (fit_scores > 0.5) & (fit_scores < 1.0)\n    fit_scores[good_fit_mask] = fit_scores[good_fit_mask] * 5.0\n\n    # Penalize nearly full bins\n    fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap))\n    priorities = fit_scores * (1 - fullness * 0.7)\n\n    # Reward bins with larger remaining capacities\n    priorities = priorities + bins_remain_cap * 0.002\n\n    # Ensure bins that are too small get a very low priority\n    invalid_bins = bins_remain_cap < item\n    priorities[invalid_bins] = 0.01\n\n    # Add small random noise to encourage exploration\n    priorities = priorities + np.random.rand(len(bins_remain_cap)) * 0.001\n\n    return priorities\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}