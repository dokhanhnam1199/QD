```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the fit score for each bin
    fit_scores = np.where(bins_remain_cap > 0, item / bins_remain_cap, 0)

    # Exact fit bonus
    exact_fit_bonus = np.where(np.isclose(fit_scores, 1.0), 10, 0)

    # Waste score (1 - fit_score)
    waste_scores = 1 - fit_scores

    # Combine fit and waste, with sigmoid scaling
    priorities = (exact_fit_bonus + 1 / (1 + np.exp(-5 * (waste_scores))))

    # Penalize nearly full bins to avoid saturation.
    priorities = np.where(bins_remain_cap < item, 0, priorities)

    return priorities
```
