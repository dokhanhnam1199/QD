```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Exact fit gets highest priority
    exact_fit_indices = np.where(bins_remain_cap == item)[0]
    priorities = np.zeros_like(bins_remain_cap)
    if len(exact_fit_indices) > 0:
        priorities[exact_fit_indices] = 1.0

    # Next best fit (minimize waste)
    remaining_indices = np.where(bins_remain_cap >= item)[0]
    if len(remaining_indices) > 0:
        waste = bins_remain_cap[remaining_indices] - item
        priorities[remaining_indices] = 1.0 / (1.0 + waste)

    return priorities
```
