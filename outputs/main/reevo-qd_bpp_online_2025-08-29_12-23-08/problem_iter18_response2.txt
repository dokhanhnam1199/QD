```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Exact fit gets highest priority
    exact_fit_indices = np.where(bins_remain_cap == item)[0]
    priorities[exact_fit_indices] = 1000  # High priority for exact fit

    # Remaining bins are prioritized based on how close they are to fitting the item
    remaining_indices = np.where(bins_remain_cap >= item)[0]
    if len(remaining_indices) > 0:
        fit_scores = item / bins_remain_cap[remaining_indices]
        # Apply a sigmoid function to the fit scores to get priority
        # This ensures that bins with a better fit (closer to 1) get higher priority,
        # but also penalizes bins that are too full (fit score > 1).
        # The sigmoid function parameters can be adjusted to fine-tune the behavior.
        priorities[remaining_indices] = 1 / (1 + np.exp(-8 * (fit_scores - 0.5)))
    return priorities
```
