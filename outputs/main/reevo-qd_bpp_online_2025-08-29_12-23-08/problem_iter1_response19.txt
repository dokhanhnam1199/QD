```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Softmax-Based Fit.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the fit of the item into each bin.  Bins that are too small get 0 fit.
    fit = np.where(bins_remain_cap >= item, bins_remain_cap - item, 0.0)

    # Normalize the fit values using softmax.
    if np.sum(fit) > 0:  # handle all fits being 0
        probabilities = np.exp(fit) / np.sum(np.exp(fit))
    else:
        probabilities = np.zeros_like(bins_remain_cap)

    return probabilities
```
