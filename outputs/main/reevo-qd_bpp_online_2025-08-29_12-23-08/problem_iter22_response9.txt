```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize exact fits
    exact_fit = (bins_remain_cap == item)
    priorities[exact_fit] = 1.0

    # Prioritize bins where the item fits with minimal remaining capacity
    remaining_capacity = bins_remain_cap - item
    valid_bins = remaining_capacity >= 0

    if np.any(valid_bins):
        # Prioritize based on remaining capacity, giving higher priority to smaller remaining capacity
        priorities[valid_bins] = 1.0 / (remaining_capacity[valid_bins] + 1e-9)

    # Additionally, consider bin density (current usage)
    bin_density = 1.0 - (bins_remain_cap / np.max(bins_remain_cap))  # Normalize to 0-1
    priorities = priorities * (1.0 + 0.5 * bin_density) #Boost the score

    return priorities
```
