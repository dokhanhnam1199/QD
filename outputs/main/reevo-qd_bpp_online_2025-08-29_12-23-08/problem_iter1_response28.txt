```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Epsilon-Greedy.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Exploration rate.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate the 'greedy' priority:  how well the item fits
    fit_scores = np.where(bins_remain_cap >= item, bins_remain_cap - item, -1)

    # Epsilon-greedy exploration
    if np.random.rand() < epsilon:
        # Randomly assign priorities (exploration)
        priorities = np.random.rand(len(bins_remain_cap))
    else:
        # Use fit scores as priorities (exploitation)
        priorities = fit_scores

    return priorities
```
