```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the fit score for each bin
    fit_scores = item / bins_remain_cap

    # Exact fit gets a high boost
    exact_fit_mask = np.isclose(fit_scores, 1.0)
    fit_scores[exact_fit_mask] = 9.0

    # Apply a sigmoid function to the fit scores to get priority.
    # This encourages better fit without excessive penalty for slightly overfull bins.
    priorities = 1 / (1 + np.exp(-5 * (fit_scores - 0.6)))

    # Penalize nearly full bins to avoid fragmentation.
    fullness = bins_remain_cap / np.max(bins_remain_cap)
    priorities = priorities * (1 - fullness * 0.6)

    # Reward bins with larger remaining capacities, preventing early commitment to small bins
    priorities = priorities + bins_remain_cap * 0.003

    # Ensure bins that are too small get a very low priority
    invalid_bins = bins_remain_cap < item
    priorities[invalid_bins] = 0.01

    return priorities
```
