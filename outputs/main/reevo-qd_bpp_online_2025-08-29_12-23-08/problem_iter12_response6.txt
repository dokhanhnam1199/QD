```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Exact fit gets highest priority
    exact_fit_priority = np.where(bins_remain_cap == item, 1000, 0)

    # Best fit (minimal waste)
    waste = bins_remain_cap - item
    best_fit_priority = 1 / (waste + 1e-6)  # Adding a small value to avoid division by zero

    # Penalize nearly full bins - more aggressive penalty
    fullness_penalty = np.exp(-bins_remain_cap / item)

    # Reward bins with larger remaining capacity
    capacity_reward = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)

    # Combine priorities
    priorities = exact_fit_priority + best_fit_priority - 0.5 * fullness_penalty + 0.2 * capacity_reward

    return priorities
```
