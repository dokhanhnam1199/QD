```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the fit score for each bin
    fit_scores = item / bins_remain_cap

    # Exact fit gets a huge bonus
    exact_fit_bonus = np.where(np.isclose(fit_scores, 1.0), 100.0, 0.0)

    # Calculate waste
    waste = bins_remain_cap - item

    # Prioritize minimal waste and bin fullness
    priorities = (waste / bins_remain_cap) + exact_fit_bonus

    # Apply sigmoid scaling for better balance
    priorities = 1 / (1 + np.exp(-5 * (priorities - 0.5)))

    # Penalize bins with zero remaining capacity (avoid division by zero)
    priorities[bins_remain_cap <= 0] = 0.0

    return priorities
```
