```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate waste for each bin
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Penalize bins that are too small

    # Prioritize exact fits
    exact_fit_mask = np.isclose(bins_remain_cap, item)
    waste[exact_fit_mask] = 0.0  # Zero waste for exact fits

    # Calculate a score based on waste (lower waste is better)
    scores = -waste

    # Reward bins with larger remaining capacity (encourage spreading)
    scores = scores + bins_remain_cap * 0.002

    # Penalize bins that are almost full (avoid fragmentation)
    fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    scores = scores * (1 - fullness * 0.4)

    # Introduce a small amount of randomness
    scores = scores + np.random.rand(len(bins_remain_cap)) * 0.01

    return scores
```
