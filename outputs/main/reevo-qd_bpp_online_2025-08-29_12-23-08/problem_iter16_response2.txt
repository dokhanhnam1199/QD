```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Exact fit gets highest priority
    exact_fit_priority = np.where(bins_remain_cap == item, 1000, 0)

    # Prioritize bins that can accommodate the item
    fitting_bins = bins_remain_cap >= item
    
    # Tightness: How full the bin will be after adding the item
    tightness_priority = np.zeros_like(bins_remain_cap)
    tightness_priority[fitting_bins] = (bins_remain_cap[fitting_bins] - item) / bins_remain_cap[fitting_bins]
    
    # Penalize nearly empty bins slightly
    empty_penalty = np.where(bins_remain_cap > item * 0.95, 0.1, 0)
    
    # Combine priorities: Exact fit dominates, then tightness, then penalty
    priorities = exact_fit_priority + tightness_priority + empty_penalty
    return priorities
```
