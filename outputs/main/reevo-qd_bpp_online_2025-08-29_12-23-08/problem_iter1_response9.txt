```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Softmax-Based Fit strategy.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the fit score for each bin
    fit_scores = np.where(bins_remain_cap >= item, bins_remain_cap - item, -1)

    # Normalize the fit scores using softmax
    if np.sum(fit_scores > 0) > 0:
        exp_fit_scores = np.exp(fit_scores)
        sum_exp_fit_scores = np.sum(exp_fit_scores[fit_scores > 0])
        probabilities = exp_fit_scores / sum_exp_fit_scores
    else:
        probabilities = np.zeros_like(bins_remain_cap)

    return probabilities
```
