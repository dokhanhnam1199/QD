```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Exact fit gets highest priority
    exact_fit = (bins_remain_cap == item)
    priorities[exact_fit] = 10.0

    # Best fit (minimal waste) gets next priority
    valid_bins = bins_remain_cap >= item
    waste = bins_remain_cap[valid_bins] - item
    waste[waste < 0] = np.inf  # Penalize bins that are too small
    priorities[valid_bins] = np.where(priorities[valid_bins] == 0.0, 1.0 / (waste + 1e-6), priorities[valid_bins])

    # Add a small amount of randomness (epsilon-greedy) for exploration
    epsilon = 0.05
    if np.random.rand() < epsilon:
        priorities += np.random.rand(len(bins_remain_cap)) * 0.1

    return priorities
```
