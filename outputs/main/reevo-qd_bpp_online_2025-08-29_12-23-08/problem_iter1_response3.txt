```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Almost Full Fit.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate the ratio of item size to remaining capacity for each bin.
    # Higher ratio means the bin is almost full and better fit for the item.
    
    valid_bins = bins_remain_cap >= item
    
    if np.sum(valid_bins) == 0:
        return priorities

    ratios = item / bins_remain_cap[valid_bins]
    
    # Use 1 - ratio as priority, so smaller remaining capacity results in higher priority
    priorities[valid_bins] = 1 - ratios

    return priorities
```
