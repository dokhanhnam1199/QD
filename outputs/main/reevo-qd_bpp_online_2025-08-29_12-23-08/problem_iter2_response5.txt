```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate fit score (lower is better)
    fit_scores = item / bins_remain_cap
    fit_scores = np.where(bins_remain_cap == 0, np.inf, fit_scores)  # Avoid division by zero

    # Apply sigmoid to fit scores
    sigmoid_scores = 1 / (1 + np.exp(-5 * (fit_scores - 0.5)))

    # Penalize bins that are almost full (higher penalty for nearly full bins)
    almost_full_penalty = np.exp(-10 * (bins_remain_cap / 1.0))

    # Encourage distribution by penalizing bins that already have a lot of items
    # (e.g., low remaining capacity). This helps avoid early saturation.
    distribution_penalty = bins_remain_cap / np.max(bins_remain_cap)
    distribution_penalty = 1 - distribution_penalty

    # Combine the scores
    priorities = sigmoid_scores * almost_full_penalty * distribution_penalty

    return priorities
```
