```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, tightness_factor: float = 2.0) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        tightness_factor: Scaling factor for tightness. Higher values emphasize tighter fits.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate the difference between the item size and the remaining capacity.
    diff = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)

    # Prioritize bins where the item fits tightly (small difference).
    priorities = np.exp(-tightness_factor * diff)

    # Penalize nearly full bins (small remaining capacity after packing).
    # This subtly discourages creating too many almost-full bins.
    #priorities *= (bins_remain_cap / np.max(bins_remain_cap))  # Normalize capacity

    return priorities
```
