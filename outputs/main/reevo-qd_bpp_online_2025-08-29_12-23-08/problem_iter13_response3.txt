```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, tightness_factor: float = 2.0) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        tightness_factor:  Controls the emphasis on tight fits. Higher values
                           increase the preference for bins where the item
                           fits snugly.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate the difference between the item size and the remaining capacity.
    diff = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)

    # Use a sigmoid function to scale the difference, favoring tighter fits.
    # The tightness_factor controls the steepness of the sigmoid.
    priorities = 1.0 / (1.0 + np.exp(tightness_factor * diff))

    # Slightly penalize almost full bins to avoid creating many nearly-full bins.
    fullness = 1.0 - (bins_remain_cap / bins_remain_cap.max())
    priorities *= (1.0 - fullness * 0.1)  # Reduced penalty

    return priorities
```
