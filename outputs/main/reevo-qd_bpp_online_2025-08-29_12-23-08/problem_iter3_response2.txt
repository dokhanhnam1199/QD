```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero and handle bins with no capacity
    valid_bins = bins_remain_cap > 0
    bins_remain_cap_valid = bins_remain_cap[valid_bins]

    # Calculate fit score, penalizing near-full bins.
    fit_scores = item / bins_remain_cap_valid
    fit_scores = np.clip(fit_scores, 0.0, 1.0)  # Cap fit score at 1.0

    # Apply sigmoid scaling for smoother prioritization.
    # Adjust parameters as needed for different item size distributions.
    priorities_valid = 1.0 / (1.0 + np.exp(-5.0 * (fit_scores - 0.5)))

    # Create a zero-filled array for the final priorities.
    priorities = np.zeros_like(bins_remain_cap)

    # Assign the calculated priorities to the valid bins.
    priorities[valid_bins] = priorities_valid

    return priorities
```
