```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, tightness_factor: float = 2.0) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        tightness_factor: Controls the preference for tighter fits. Higher values
                          increase the preference.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate the difference between the item size and the remaining capacity
    diff = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)

    # Apply sigmoid scaling to favor tighter fits. The tightness_factor
    # controls how much tighter fits are preferred.
    priorities = np.exp(-tightness_factor * diff)

    # Slightly penalize nearly-full bins to prevent them from being overfilled
    # immediately.  This helps maintain a more balanced bin utilization.
    fullness = 1.0 - (bins_remain_cap / np.max(bins_remain_cap))
    priorities *= (1.0 - fullness * 0.1)  # Mild penalty for full bins

    # Ensure that bins with insufficient capacity have very low priority.
    priorities[bins_remain_cap < item] = 0.0

    return priorities
```
