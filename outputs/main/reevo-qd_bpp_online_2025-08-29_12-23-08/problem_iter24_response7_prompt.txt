{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n\n    if np.sum(valid_bins) == 0:\n        return priorities\n\n    # Calculate fit score for each bin\n    fit_scores = item / bins_remain_cap[valid_bins]\n\n    # Apply sigmoid function to the fit scores\n    sigmoid_scores = 1 / (1 + np.exp(-5 * (fit_scores - 0.5)))\n\n    # Adjust parameters as needed\n    # Penalize bins that are almost full to encourage spreading items\n    almost_full_penalty = np.exp(-10 * ((1.0 - bins_remain_cap[valid_bins]) / 1.0))\n\n    # Item-specific adjustment: smaller items get a boost to bin spreading\n    item_spread_boost = np.exp(-5 * item)\n\n    priorities[valid_bins] = sigmoid_scores * almost_full_penalty * item_spread_boost\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    \"\"\"Returns priority with which we want to add item to each bin using Exact Fit First strategy.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    \n    # Exact fit gets highest priority\n    exact_fit_indices = np.where(bins_remain_cap == item)[0]\n    priorities[exact_fit_indices] = 1000  # High priority for exact fit\n\n    # Remaining bins are prioritized based on how close they are to fitting the item\n    remaining_indices = np.where(bins_remain_cap >= item)[0]\n    if len(remaining_indices) > 0:\n        diffs = bins_remain_cap[remaining_indices] - item\n        priorities[remaining_indices] = 1 / (diffs + 1e-6)  # Lower difference = higher priority\n    \n    return priorities\n\n[Reflection]\nPrioritize simplicity & exploit problem specifics (exact fit). Combine strategies; avoid overly complex, adjustable functions.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}