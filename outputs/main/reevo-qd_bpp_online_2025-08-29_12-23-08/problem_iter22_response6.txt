```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.01) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        epsilon: Probability of exploration.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    n_bins = len(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-fit/Best-fit preference: prioritize bins where the item fits
    fit_bins = bins_remain_cap >= item
    if np.any(fit_bins):
        waste = bins_remain_cap[fit_bins] - item
        priorities[fit_bins] = 1.0 / (waste + 1e-6)  # Best Fit: Smaller waste is better

    # Penalize near-full bins (smoothly) - avoid creating many almost-full bins
    fullness = bins_remain_cap / np.max(bins_remain_cap)  # Relative fullness (0 to 1)
    priorities = priorities * (1 - fullness**2)  # More aggressive penalty for near-full bins

    # Exploration: Add a small random value to each bin with probability epsilon.
    if np.random.rand() < epsilon:
        priorities += np.random.rand(n_bins) * 0.01  # Smaller exploration bonus

    return priorities
```
