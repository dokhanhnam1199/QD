```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if np.sum(valid_bins) == 0:
        return priorities

    # Exact fit gets highest priority
    exact_fit = (bins_remain_cap[valid_bins] == item)
    priorities[valid_bins & exact_fit] = 1.0

    # Minimal waste (Best fit) - Normalized with sigmoid for smoother scores
    waste = bins_remain_cap[valid_bins] - item
    priorities[valid_bins & (waste >= 0)] = 1.0 / (1.0 + np.exp(-waste * 5.0))  # Sigmoid scaling

    # Favor partially filled bins
    fill_ratio = 1.0 - (bins_remain_cap[valid_bins] / float(np.max(bins_remain_cap)))
    priorities[valid_bins] += fill_ratio * 0.5

    # Add a small amount of randomness for exploration
    epsilon = 0.05
    if np.random.rand() < epsilon:
        priorities += np.random.rand(len(bins_remain_cap)) * 0.1

    return priorities
```
