```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Exact fit gets highest priority
    exact_fit_priority = np.where(bins_remain_cap == item, 1000, 0)

    # Prioritize bins that are almost full (tightness)
    tightness_priority = 1 / (bins_remain_cap + 1e-6)  # Avoid division by zero

    # Add a bonus for bins that have a capacity close to the item size
    close_fit_priority = np.exp(-((bins_remain_cap - item)**2) / (2 * (item**2)))

    # Combine priorities: Exact fit dominates, then tightness, then close fit
    priorities = exact_fit_priority + 5 * tightness_priority + 2 * close_fit_priority

    return priorities
```
