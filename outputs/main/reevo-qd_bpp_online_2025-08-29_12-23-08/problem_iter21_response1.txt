```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if np.sum(valid_bins) == 0:
        return priorities

    # Exact fit gets highest priority
    exact_fit = (bins_remain_cap[valid_bins] == item)
    priorities[valid_bins & exact_fit] = 10.0

    # Best fit (minimal waste) gets next priority, scaled by remaining capacity
    waste = bins_remain_cap[valid_bins] - item
    priorities[valid_bins & (waste >= 0)] = (1.0 / (waste + 1e-6)) * bins_remain_cap[valid_bins & (waste >= 0)]

    # Favor partially full bins with larger remaining capacity
    priorities[valid_bins] += bins_remain_cap[valid_bins] * 0.5

    # Penalize nearly full bins (discourage waste)
    fullness = 1 - (bins_remain_cap[valid_bins] - item) / bins_remain_cap[valid_bins]
    priorities[valid_bins] -= fullness * 2

    # Penalize bins that would leave very little space after packing
    priorities[valid_bins] -= (item / bins_remain_cap[valid_bins]) * 1.5

    # Add a small amount of randomness (epsilon-greedy) for exploration
    epsilon = 0.05
    if np.random.rand() < epsilon:
        priorities += np.random.rand(len(bins_remain_cap)) * 0.1

    return priorities
```
