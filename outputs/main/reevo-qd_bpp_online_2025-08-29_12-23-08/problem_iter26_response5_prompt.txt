{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    \"\"\"Returns priority with which we want to add item to each bin using Random Fit.\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if np.sum(valid_bins) == 0:\n        return priorities  # No bin can fit the item\n\n    # Assign a random priority score to the valid bins. In Random Fit, the bins\n    # are typically chosen randomly from the feasible bins. Here, we represent\n    # this by assigning uniformly random scores.\n    num_valid_bins = np.sum(valid_bins)\n    random_priorities = np.random.rand(num_valid_bins)\n    bin_index = 0\n    for i in range(len(bins_remain_cap)):\n        if valid_bins[i]:\n            priorities[i] = random_priorities[bin_index]\n            bin_index += 1\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin, using a heuristic that prioritizes minimizing waste and bin fullness.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return priorities  # No bins can fit the item\n\n    waste = bins_remain_cap[valid_bins] - item\n    fullness = bins_remain_cap[valid_bins] / np.max(bins_remain_cap)\n    utilization = 1.0 - fullness\n\n    # Combine waste and fullness to create a priority score.\n    # Prioritize bins with low waste and high fullness (low utilization).\n    priorities[valid_bins] = (1.0 / (waste + 1e-6)) * utilization\n\n    return priorities\n\n[Reflection]\nPrioritize minimizing waste *and* considering bin utilization/fullness\u2014don't just rely on randomness.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}