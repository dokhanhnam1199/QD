```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Exact fit gets highest priority
    exact_fit_mask = (bins_remain_cap == item)
    priorities = np.where(exact_fit_mask, 1000.0, 0.0)

    # Best fit (minimal waste)
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Infeasible bins get infinite waste
    valid_bins = waste != np.inf

    if np.any(valid_bins):
        priorities[valid_bins] = 1.0 / (waste[valid_bins] + 1e-6)

    # Penalize nearly full bins (avoid fragmentation)
    fullness = bins_remain_cap / np.max(bins_remain_cap)
    priorities = priorities * (1.0 - fullness * 0.8) # Increased fragmentation penalty

    # Encourage using bins that are not empty
    not_empty_mask = bins_remain_cap > 0
    priorities = np.where(not_empty_mask, priorities, 0.1)

    # Small bonus to partially filled bins
    partially_filled_mask = (bins_remain_cap > item) & (bins_remain_cap < np.max(bins_remain_cap) * 0.7)  # Reduced threshold
    priorities[partially_filled_mask] += 0.2 # Increased bonus

    # Small bonus to bins with some waste, but not full.
    some_waste_mask = (bins_remain_cap > item) & (bins_remain_cap < np.max(bins_remain_cap))
    priorities[some_waste_mask] += 0.05

    return priorities
```
