```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Exact fit gets highest priority
    exact_fit_mask = (bins_remain_cap == item)
    priorities = np.where(exact_fit_mask, 1000.0, 0.0)

    # Next, best fit (minimal waste)
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Penalize bins that are too small
    fit_score = 1.0 / (waste + 1e-6)
    priorities = np.where(priorities == 0, fit_score, priorities)

    # Penalize fragmentation - avoid nearly full bins
    fullness = bins_remain_cap / np.max(bins_remain_cap)
    priorities = priorities * (1.0 - fullness * 0.7)  # Adjusted penalty

    # Encourage using bins that are not empty
    not_empty_mask = bins_remain_cap > 0
    priorities = np.where(not_empty_mask, priorities, 0.1)

    # Add a small random value to break ties and encourage exploration
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-6
    return priorities
```
