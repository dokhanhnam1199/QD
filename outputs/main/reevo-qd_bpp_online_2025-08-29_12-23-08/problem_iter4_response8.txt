```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_ages: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        bin_ages: Array of ages of each bin (number of items already in the bin).

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins = bins_remain_cap > 0
    bins_remain_cap_valid = bins_remain_cap[valid_bins]
    bin_ages_valid = bin_ages[valid_bins]

    # Calculate fit score. Higher is better, but penalize near-full bins
    fit_scores = item / bins_remain_cap_valid

    # Sigmoid scaling to smooth fit scores and prevent saturation. Adjust parameters as needed
    priorities = 1 / (1 + np.exp(-5 * (fit_scores - 0.7)))

    # Apply a fullness bonus to bins that have been partially used
    fullness_bonus = (bins_remain_cap_valid - item) / bins_remain_cap_valid
    priorities = priorities * (1 + 0.2 * fullness_bonus)

    # Add a bin age penalty. Older bins are preferred to promote bin reuse.
    age_penalty = 1 / (1 + bin_ages_valid)  # Inversely proportional to age
    priorities = priorities * (1 + 0.1 * age_penalty)

    # Pad the priorities array with zeros for invalid bins.
    result = np.zeros_like(bins_remain_cap)
    result[valid_bins] = priorities
    return result
```
