```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin, incorporating reflections.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero and prioritize bins with some remaining capacity
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap)

    # Calculate fit score, penalizing overfull bins.
    fit_scores = np.where(valid_bins, item / bins_remain_cap, -1)

    # Sigmoid scaling with dynamic adjustment. Larger item -> more aggressive scaling
    scale_factor = 5 + item * 2  # Adjust as needed
    priorities = 1 / (1 + np.exp(-scale_factor * (fit_scores - 0.5)))

    # Boost bins that are already somewhat full, encouraging consolidation
    fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    priorities = priorities * (0.5 + 0.5 * fullness)

    # Add a small bonus for bins that have very little remaining capacity (encourages closing bins)
    small_capacity_bonus = np.where(bins_remain_cap <= item * 0.1, 0.2, 0)
    priorities = priorities + small_capacity_bonus

    # Scale priorities to between 0-1, with higher score for fuller bins
    return priorities
```
