```python
import numpy as np

def priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    return priorities

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    # Prioritize bins where the item fits exactly
    exact_fit = bins_remain_cap == item
    priorities[exact_fit] = 100  # High priority for exact fits

    # Next, prioritize bins where the item fits and leaves the least space.
    # This is the First Fit Decreasing strategy, trying to fill bins as much as possible.
    fitting_bins = bins_remain_cap >= item
    priorities[fitting_bins] = 1.0 / (bins_remain_cap[fitting_bins] - item + 1e-6) # Avoid division by zero. Adding a very small value.
    return priorities
```
