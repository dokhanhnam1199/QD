```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the fit score for each bin
    fit_scores = item / bins_remain_cap

    # Exact fit gets highest priority
    exact_fit_mask = (fit_scores == 1)
    priorities = np.where(exact_fit_mask, 1000, 0)  # High priority for exact fit

    # For bins without exact fit, prioritize minimal waste and fullness
    remaining_bins = bins_remain_cap[~exact_fit_mask]
    fit_scores_remaining = fit_scores[~exact_fit_mask]

    # Apply a sigmoid function to the fit scores to get priority
    # This ensures that bins with a better fit (closer to 1) get higher priority,
    # but also penalizes bins that are too full (fit score > 1).
    # The sigmoid function parameters can be adjusted to fine-tune the behavior.
    sigmoid_scores = 1 / (1 + np.exp(-5 * (fit_scores_remaining - 0.5)))

    priorities[~exact_fit_mask] = sigmoid_scores

    # Penalize bins that are nearly empty to avoid creating many partially filled bins
    priorities = np.where(bins_remain_cap < item * 0.1, priorities - 10, priorities)

    return priorities
```
