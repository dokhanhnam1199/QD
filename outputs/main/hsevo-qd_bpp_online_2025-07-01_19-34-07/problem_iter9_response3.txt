```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version refines the priority calculation by considering multiple factors
    in a more nuanced and adaptive manner.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Handle edge cases: bins that cannot fit the item
    infeasible_mask = bins_remain_cap < item
    priorities = np.full_like(bins_remain_cap, -np.inf)  # Mark infeasible bins with -inf
    
    # Avoid division by zero and operate only on feasible bins
    feasible_bins_remain_cap = bins_remain_cap[~infeasible_mask]
    if feasible_bins_remain_cap.size == 0:
        return priorities
    
    # Calculate remaining capacities after adding item, cliping negative values to 0
    remaining_after_add = np.clip(feasible_bins_remain_cap - item, 0, np.inf)
    
    # 1. Capacity Utilization Score: favors bins filling up nicely without too much waste.
    utilization_score = (feasible_bins_remain_cap - remaining_after_add) / feasible_bins_remain_cap # item / feasible_bins_remain_cap
    
    # 2. Waste Minimization Score: penalizes bins that would leave too much empty space.
    waste_penalty = remaining_after_add / np.max(bins_remain_cap)  # Normalized to max bin size

    # 3. Item Size Significance Score: Considers how significant is the item size comparing to available space
    item_significance = item / np.max(bins_remain_cap)

    #Adaptive Weighting: Dynamically adjust the importance of each factor.
    alpha = 0.6 # Weight for utilization
    beta = 0.3 # Weight for waste
    gamma = 0.1 #Weight for item_significance

    combined_priority = (alpha * utilization_score) - (beta * waste_penalty) + (gamma * item_significance)

    # Assign priority to feasible bins and return
    priorities[~infeasible_mask] = combined_priority
    return priorities
```
