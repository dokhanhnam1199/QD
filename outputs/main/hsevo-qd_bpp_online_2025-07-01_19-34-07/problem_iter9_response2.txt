```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version aims for a more balanced approach considering multiple factors.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Feasibility check: Disqualify bins that can't fit the item.
    feasible_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf  # Initialize with negative infinity

    # Calculate priority only for feasible bins
    if np.any(feasible_bins):
        remaining_capacity = bins_remain_cap[feasible_bins]
        # 1. Remaining Capacity Factor: Prefer bins with tighter fits, but avoid being too tight
        capacity_utilization = (item / remaining_capacity)
        capacity_priority = np.exp(-5 * np.abs(capacity_utilization - 0.8)) #Gaussian like curve centered around 0.8 utilization. Higher std means flatter curve.

        # 2. Balance Factor: Distribute items more evenly among bins.
        # Penalize bins with very small remaining capacity after adding the item.
        balance_factor = np.exp(-10*(remaining_capacity - item) / np.max(remaining_capacity)) #Higher std means flatter curve.

        # 3.Bin level
        bin_level = 1 - remaining_capacity / np.max(bins_remain_cap)
        bin_level_factor = np.exp(-2*bin_level)


        # Combine the factors.  Experiment with different weights.
        combined_priority = 0.5 * capacity_priority + 0.3 * balance_factor + 0.2 * bin_level_factor

        priorities[feasible_bins] = combined_priority
    return priorities
```
