```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that are a close fit for the item, but also considers the
    overall remaining capacity. Bins that are too full or too empty receive a lower priority.
    Specifically:
    1.  Calculate the wasted space if the item is placed in each bin.
    2.  Calculate a 'fit' score based on how small the wasted space is relative to the item size and remaining capacity. Closer fits are preferred. A penalty is applied if the wasted space is zero.
    3. Consider bins that are almost full to be filled, and avoid them
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    wasted_space = bins_remain_cap - item
    # Give a large negative priority if item doesn't fit in bin
    priorities = np.where(wasted_space < 0, -np.inf, 0)

    # Prioritize bins with closer fit.
    fit_score = np.where(wasted_space >= 0, (item / (wasted_space + 0.00001)) * (bins_remain_cap/(bins_remain_cap.max() + 0.00001)), 0)

    priorities = np.where(wasted_space >=0 , fit_score , priorities)

    # Consider bins with lower capacity to be less favorable (if it will be fully occupied)
    almost_full_penalty = np.where(wasted_space <= item/10000 , -np.inf,0) #avoid using very small portion of bin

    priorities = priorities + almost_full_penalty

    return priorities
```
