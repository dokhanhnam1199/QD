```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Inspired by space-time curvature, we prioritize bins where the
    item "bends" the remaining capacity the most significantly.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate the "gravitational effect" based on item size and remaining capacity.
    # A larger item has a stronger effect; smaller remaining capacity implies higher urgency.
    gravitational_effect = item / bins_remain_cap**2 # Inverse square relationship, reminiscent of gravity

    # Introduce a term that favors bins that are reasonably full, but can still accomodate the item.
    # This prevents premature exhaustion of some bins and promotes better overall packing.
    fill_factor = (1 - (bins_remain_cap - item) / bins_remain_cap)
    fill_factor = np.where(bins_remain_cap < item, -np.inf, fill_factor) #make inelligible when not fitting

    # Combine gravitational effect and fill factor
    priorities = gravitational_effect + fill_factor
    return priorities
```
