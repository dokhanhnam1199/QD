```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on a combination of gravitational effect and fill factor."""
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)
    gravitational_effect = item / bins_remain_cap**2
    fill_factor = (1 - (bins_remain_cap - item) / bins_remain_cap)
    fill_factor = np.where(bins_remain_cap < item, -np.inf, fill_factor)
    priorities = gravitational_effect + fill_factor
    
    # Adaptive capacity scaling based on the item size.
    # If the item is large, we want to favor bins with more remaining capacity.
    capacity_scaling = np.exp(-item / bins_remain_cap) 
    
    priorities = priorities * capacity_scaling
    
    return priorities
```
