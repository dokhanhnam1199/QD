```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version considers a more nuanced approach, combining several factors:
    - Remaining capacity relative to item size.
    - A "fill-level" that encourages using partially filled bins.
    - A penalty for bins that are almost full (to avoid overfilling).
    - A boost for bins where the item fits snugly.
    - Adaptive scaling based on item size and remaining capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Handle cases where item doesn't fit (explicitly sets low priority).
    item_too_large = bins_remain_cap < item
    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf
    priorities[item_too_large] = -np.inf  # Very low priority if item doesn't fit.
    
    # Calculate the priority only for the bins where the item fits.
    valid_bins = ~item_too_large
    if not np.any(valid_bins):
        return priorities
    
    remaining_cap_valid = bins_remain_cap[valid_bins]
    
    # Relative Capacity: How much space is left compared to the item's size?
    relative_capacity = item / remaining_cap_valid
    
    # Fill Level:  Encourages filling bins that are already somewhat full.
    fill_level = 1 - (remaining_cap_valid / np.max(bins_remain_cap)) #Normalized for adaptivity

    # Snug Fit: Gives a boost to bins where the item fits relatively snugly.
    snug_fit = np.exp(-np.abs(remaining_cap_valid - item) / (item + 1e-9)) #Avoid div by zero
    

    # Penalty for Almost Full: Discourages adding to bins that are close to full.
    almost_full_threshold = 0.9  #Adjustable threshold
    almost_full = remaining_cap_valid / np.max(bins_remain_cap) < (1-almost_full_threshold)
    almost_full_penalty = np.where(almost_full, -10, 0) #Large penalty

    # Combined Priority: Weighing different factors to achieve better packing.
    # The weights could be tuned further
    priorities_valid = (
        1.0 * relative_capacity +
        0.7 * fill_level +
        0.9 * snug_fit +
        0.5 * almost_full_penalty
    )

    priorities[valid_bins] = priorities_valid
    
    return priorities
```
