```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version prioritizes bins where the item fills a significant portion
    of the remaining capacity, but also considers the absolute remaining capacity.
    It also introduces a penalty for nearly-full bins to avoid excessive fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Avoid division by zero.  Bins with 0 capacity get priority -inf.
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return priorities - np.inf  # all invalid so give them lowest priority.

    ratios = np.zeros_like(bins_remain_cap)
    ratios[valid_bins] = item / bins_remain_cap[valid_bins]

    # Prioritize bins where item fills a substantial portion of remaining capacity.
    capacity_priority = np.exp(-np.abs(ratios - 0.8))  # Peak at 0.8 fill ratio.

    # Consider the absolute remaining capacity - favoring bins with sufficient space
    # but not overly large bins.
    remaining_capacity_priority = np.exp(-bins_remain_cap / item)  # Prefer smaller gaps but cap exponential term

    # Add small penalty for nearly full bins if item nearly fills remaining space. Avoids extreme fragmentation
    near_full_penalty = np.where((bins_remain_cap - item) / bins_remain_cap < 0.1, -0.5, 0)

    # Give lowest priority to those where item doesnt fit
    does_fit = bins_remain_cap >= item
    priorities = capacity_priority + remaining_capacity_priority + near_full_penalty
    priorities[~does_fit] = -np.inf
    return priorities
```
