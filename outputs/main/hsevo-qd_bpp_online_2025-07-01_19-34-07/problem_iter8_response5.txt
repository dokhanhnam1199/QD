```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines gravitational effect and fill factor with ratio scaling."""
    # Avoid division by zero
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Gravitational effect
    gravitational_effect = item / bins_remain_cap**2

    # Fill factor
    fill_factor = (1 - (bins_remain_cap - item) / bins_remain_cap)
    fill_factor = np.where(bins_remain_cap < item, -np.inf, fill_factor)

    # Ratio scaling
    ratios = item / bins_remain_cap
    scaled_ratios = np.tanh(ratios) # Using tanh to bound the ratios

    # Combined priority
    priorities = gravitational_effect + fill_factor + scaled_ratios
    return priorities
```
