```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization, fit, balance, and remaining capacity considerations."""
    epsilon = 1e-9
    feasible_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf

    utilization = (1 - bins_remain_cap / (np.max(bins_remain_cap) + epsilon))
    utilization = np.clip(utilization, 0, 1)
    utilization_factor = utilization**2

    fit_score = np.exp(-np.abs(bins_remain_cap - item) / (item + epsilon))

    balance_factor = np.sqrt(bins_remain_cap / (np.max(bins_remain_cap) + epsilon))

    remaining_capacity_penalty = np.exp(-10 * np.maximum(0, bins_remain_cap - item) / (np.max(bins_remain_cap)+epsilon))


    priority_weights = {
        'utilization': 0.3,
        'fit': 0.4,
        'balance': 0.1,
        'penalty': 0.2
    }

    priorities[feasible_bins] = (
        priority_weights['utilization'] * utilization_factor[feasible_bins] +
        priority_weights['fit'] * fit_score[feasible_bins] +
        priority_weights['balance'] * balance_factor[feasible_bins] +
        priority_weights['penalty'] * remaining_capacity_penalty[feasible_bins]
    )

    return priorities
```
