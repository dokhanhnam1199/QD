```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, min_capacity: float = 1e-6, gravity_power: float = 2.0) -> np.ndarray:
    """Combines gravitational effect and fill factor with adaptive scaling."""
    # Avoid division by zero
    bins_remain_cap = np.where(bins_remain_cap <= 0, min_capacity, bins_remain_cap)

    # Gravitational effect
    gravitational_effect = item / bins_remain_cap**gravity_power

    # Fill factor
    fill_factor = (1 - (bins_remain_cap - item) / bins_remain_cap)
    fill_factor = np.where(bins_remain_cap < item, -np.inf, fill_factor)

    # Adaptive scaling based on item size
    scale = np.clip(item, 0.1, 1.0)  # Scale factor, preventing extreme values

    priorities = scale * (gravitational_effect + fill_factor)
    return priorities
```
