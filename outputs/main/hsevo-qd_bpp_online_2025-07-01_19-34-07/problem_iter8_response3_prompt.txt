{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    This version prioritizes bins based on a multi-faceted approach, \n    considering remaining capacity, item fit, and potential waste.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # 1. Feasibility Check: Disqualify bins that can't fit the item\n    feasible = bins_remain_cap >= item\n    priorities = np.where(feasible, 0, -np.inf)  # Infeasible bins get -inf priority\n\n    # 2. Remaining Capacity Utilization: Prioritize bins with smaller remaining capacity after placing the item, but not too small\n    remaining_after_fit = bins_remain_cap - item\n    \n    #Avoid division by zero.\n    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)\n    remaining_after_fit = np.where(remaining_after_fit <= 0, 1e-9, remaining_after_fit)\n\n    #A term to maximize the utilization\n    utilization_factor = 1 - (remaining_after_fit / bins_remain_cap)\n    utilization_factor = np.where(utilization_factor < 0, 0, utilization_factor) #Ensure this is never negative\n\n    # 3. Waste Minimization: Penalize bins that would leave too much empty space\n    waste_penalty = np.exp(-remaining_after_fit) # Exponential decay.  Less waste, less penality.\n\n    # 4. Combine Factors (weighted)\n    priorities = np.where(feasible, 0.7 * utilization_factor + 0.3 * waste_penalty, priorities) # Prioritize bins that are feasible\n    \n    # 5. Adaptive Scaling: Dynamically adjust based on item size relative to bin size.\n    relative_size = item / bins_remain_cap\n    if np.any(relative_size > 0.5):  # If item is relatively large, emphasize utilization\n        priorities = np.where(feasible, 0.8 * utilization_factor + 0.2 * waste_penalty, priorities)\n    elif np.all(relative_size < 0.2): # If items are small, emphasize minimizing waste\n        priorities = np.where(feasible, 0.3 * utilization_factor + 0.7 * waste_penalty, priorities)\n        \n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic combines gravitational effect, fill ratio, and adaptive capacity scaling, while the worst only uses log ratios of item size to remaining capacity. (2nd best) vs (2nd worst) exhibits a similar pattern, where the second best heuristic incorporates gravitational effects and fill factors, a more sophisticated approach than simply using log ratios. Comparing (1st) vs (2nd), we see that the first heuristic uses an adaptive capacity scaling factor in addition to gravitational effect and fill ratio, while the second only uses the first two. (3rd) vs (4th) shows the third uses the same approach as the first, while the fourth incorporates feasibility checks, remaining capacity utilization, waste minimization, and adaptive scaling. Comparing (second worst) vs (worst), we see that they are identical, only calculating `priorities` using `-log_ratios`. Overall: The better heuristics consider multiple factors, including remaining capacity, item size, and potential waste, often employing non-linear relationships and adaptive scaling. The worse heuristics rely on simpler calculations, such as ratios or log ratios, and lack the nuanced considerations of the better ones. The best heuristics often incorporate a notion of \"gravitational effect\" or capacity utilization, favoring bins that are already reasonably full and penalizing those that would lead to excessive fragmentation.\n- \nOkay, I'm ready to refine \"Current Self-Reflection\" to be more effective for designing better heuristics. Let's focus on actionable insights and avoiding common pitfalls.\n\nHere's a revised definition of \"Current Self-Reflection\":\n\n*   **Keywords:** Nuance, adaptability, problem-specificity, robustness, multi-factor, feasibility, utilization, waste minimization, edge cases, adaptive scaling, non-linear.\n*   **Advice:** Design heuristics that adapt to specific problem characteristics (e.g., item size distribution). Prioritize feasibility, resource utilization, and waste reduction while considering their interdependencies.\n*   **Avoid:** Oversimplification, inflexible formulas, ignoring edge cases. Don't rely on simple ratios of parameters without considering the broader context.\n*   **Explanation:** Strive for nuanced heuristics that combine multiple factors through adaptive and potentially non-linear relationships. Robustly handle edge cases and tailor the heuristic's behavior to the unique aspects of the problem.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}