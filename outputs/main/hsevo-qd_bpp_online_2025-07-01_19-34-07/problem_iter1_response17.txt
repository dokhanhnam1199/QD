```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # A bin is viable only if it can fit the item
    viable_bins = bins_remain_cap >= item

    if not np.any(viable_bins):
        return priorities  # No viable bin, return all zeros

    # Calculate the wasted space if the item is added to each viable bin
    wasted_space = bins_remain_cap - item
    wasted_space[~viable_bins] = np.inf  # Assign infinite waste to non-viable bins


    # Prioritize bins with smaller wasted space, but give preference to bins that leave *some* waste
    # This prevents overfilling bins too early
    priorities[viable_bins] = -wasted_space[viable_bins]
    
    #Smallest diff to bin_remain_cap (favors nearly full bins).

    diffs = np.abs(item - bins_remain_cap) # Calculate the absolute differences

    # We only care for differences from those that can actually fit
    diffs[~viable_bins] = np.inf
    priorities[viable_bins] -= diffs[viable_bins]/np.max(bins_remain_cap)


    #Add a component that strongly favors bins where the item represents a larger fraction of their total capacity (before packing item)
    fraction_bins_used = item / bins_remain_cap
    fraction_bins_used[~viable_bins] = 0 #set the non-viable ones to zero.
    priorities[viable_bins] += 3*fraction_bins_used[viable_bins]

    return priorities
```
