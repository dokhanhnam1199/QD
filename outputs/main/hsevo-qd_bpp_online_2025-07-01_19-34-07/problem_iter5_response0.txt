```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines gravitational effect, fill ratio, and adaptive capacity scaling."""
    # Avoid division by zero
    min_capacity = 1e-9
    bins_remain_cap = np.where(bins_remain_cap <= 0, min_capacity, bins_remain_cap)

    # Gravitational effect
    gravity_power = 2
    gravitational_effect = item / (bins_remain_cap**gravity_power)

    # Fill ratio
    fill_ratio = item / bins_remain_cap
    fill_ratio = np.where(bins_remain_cap < item, -np.inf, fill_ratio)

    # Adaptive capacity scaling based on item size
    capacity_scaling_factor = np.exp(-bins_remain_cap / item) if item > 0 else np.exp(-bins_remain_cap)

    # Combine the factors with weights. Weights can be tuned.
    priorities = gravitational_effect + fill_ratio + capacity_scaling_factor
    return priorities
```
