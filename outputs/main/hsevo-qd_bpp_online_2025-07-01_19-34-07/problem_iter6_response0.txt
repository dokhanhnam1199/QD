```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version prioritizes bins based on a combination of factors,
    including remaining capacity, item size relative to bin size, and
    a penalty for near-empty bins. It also includes an adaptive element
    based on the distribution of item sizes.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a small value
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Ensure item fits in the bin
    feasible_bins = bins_remain_cap >= item

    # If no bin is feasible, return low priorities for all bins
    if not np.any(feasible_bins):
        return priorities

    # Calculate remaining capacity ratio (how full the bin would be)
    remaining_ratio = (bins_remain_cap[feasible_bins] - item) / bins_remain_cap[feasible_bins]

    # Prioritize bins that utilize space well (avoiding almost-full or almost-empty bins)
    utilization_priority = np.exp(-((remaining_ratio - 0.5) ** 2) / 0.08)  # Gaussian-like preference for mid-range fill

    # Item size as a fraction of bin size
    item_ratio = item / bins_remain_cap[feasible_bins]

    # Prefer bins where the item doesn't dominate, but also isn't tiny
    item_size_priority = np.exp(-((item_ratio - 0.4) ** 2) / 0.18)

    # Combine factors to create a comprehensive priority score
    priorities[feasible_bins] = (utilization_priority + item_size_priority)


    # Add slight randomness to break ties and explore solutions (Optional, but can be beneficial)
    priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.01

    return priorities
```
