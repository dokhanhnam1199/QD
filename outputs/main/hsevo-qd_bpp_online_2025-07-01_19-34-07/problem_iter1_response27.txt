```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version adds a penalty for bins that will be overfilled and a bonus for bins that are nearly full after packing the item. It also incorporates a stochastic element inspired by quantum mechanics.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-6  # Small value to avoid division by zero and log of zero

    for i, remaining_capacity in enumerate(bins_remain_cap):
        # Penalty for bins that will be overfilled
        if remaining_capacity < item:
            priorities[i] = -1e9  # Very low priority
            continue

        # Calculate the fill ratio after adding the item
        fill_ratio = (item) / (remaining_capacity + epsilon)

        # Bonus for bins that are nearly full after adding the item.  The closer to 1, the better.
        near_full_bonus = np.exp(-10 * np.abs(1 - fill_ratio)) # sharper curve for near full reward

        # Probability based on remaining capacity (quantum inspired): higher capacity, less likely to choose it
        capacity_probability = np.exp(-remaining_capacity/item) # larger remaining cap, smaller prob. and vice versa. Avoid 0 values for capacity.

        #Stochastic element (Feynman path integral): Add some noise to the probabilities
        stochastic_noise = np.random.normal(0, 0.1)  # Gaussian noise

        priorities[i] = near_full_bonus * (1 - capacity_probability) + stochastic_noise

    return priorities
```
