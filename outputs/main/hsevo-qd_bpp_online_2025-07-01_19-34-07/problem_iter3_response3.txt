```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version incorporates multiple factors and non-linear relationships
    to achieve improved bin packing performance.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Epsilon to avoid division by zero
    epsilon = 1e-9
    bins_remain_cap = np.where(bins_remain_cap <= 0, epsilon, bins_remain_cap)

    # 1. Remaining Capacity Ratio: How much of the bin remains?
    capacity_ratio = bins_remain_cap / np.max(bins_remain_cap)  # Normalize to [0, 1]

    # 2. Item Fit Score: How well does the item fit in the bin?
    item_fit_score = (bins_remain_cap - item) / bins_remain_cap
    item_fit_score = np.where(bins_remain_cap < item, -np.inf, item_fit_score)  # Ineligible bins
    item_fit_score = np.clip(item_fit_score, -1, 1)  # Clip to reasonable range

    # 3. Bin Utilization: How full is the bin if we add the item?
    bin_utilization = (bins_remain_cap - item) / np.max(bins_remain_cap)
    bin_utilization = np.where(bins_remain_cap < item, -np.inf, bin_utilization)  # Ineligible bins
    bin_utilization = 1-np.clip(bin_utilization, 0, 1)

    # 4. Packing Density: encourage bins to be densely packed (minimize wasted space)
    packing_density = item / bins_remain_cap
    packing_density = np.where(bins_remain_cap < item, -np.inf, packing_density)

    # 5. Balance factor: favor bins with capacities close to item size.
    balance_factor = np.exp(-np.abs(bins_remain_cap - item) / (np.max(bins_remain_cap)+epsilon))
    balance_factor = np.where(bins_remain_cap < item, -np.inf, balance_factor)

    # Combined Priority:  A non-linear combination of the factors
    priorities = (
        2 * item_fit_score
        +  bin_utilization
        + 0.5 * packing_density
        + 1.5 * balance_factor
    )

    return priorities
```
