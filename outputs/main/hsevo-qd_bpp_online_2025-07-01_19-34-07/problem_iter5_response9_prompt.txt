{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Inspired by space-time curvature, we prioritize bins where the\n    item \"bends\" the remaining capacity the most significantly.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        min_capacity: Minimum capacity to avoid division by zero.\n        gravity_power: power of bins_remain_cap in gravitational_effect\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Avoid division by zero\n    bins_remain_cap = np.where(bins_remain_cap <= 0, min_capacity, bins_remain_cap)\n\n    # Calculate the \"gravitational effect\" based on item size and remaining capacity.\n    # A larger item has a stronger effect; smaller remaining capacity implies higher urgency.\n    gravitational_effect = item / bins_remain_cap**gravity_power # Inverse square relationship, reminiscent of gravity\n\n    # Introduce a term that favors bins that are reasonably full, but can still accomodate the item.\n    # This prevents premature exhaustion of some bins and promotes better overall packing.\n    fill_factor = (1 - (bins_remain_cap - item) / bins_remain_cap)\n    fill_factor = np.where(bins_remain_cap < item, -np.inf, fill_factor) #make inelligible when not fitting\n\n    # Combine gravitational effect and fill factor\n    priorities = gravitational_effect + fill_factor\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the best heuristic combines gravitational effect, fill factor, and capacity scaling, while the worst only uses the log of ratios of item size to remaining capacity. (2nd) refines (1st) by introducing adjustable `gravity_power` and a `min_capacity` parameter to avoid division by zero. Comparing (1st) vs (2nd), we see that (2nd) removes `capacity_scaling`. (3rd) is a much more sophisticated heuristic than (4th), as it incorporates feasibility checks, capacity utilization, item fit score, balance factor, remaining capacity penalty, and adaptive scaling based on item size, using a weighted sum of these factors, whereas (4th) implements `gravitational_effect + fill_factor + capacity_scaling`. Comparing (2nd) vs (3rd), we see (3rd) incorporates item size to adaptively scale weights.\n\nOverall: More complex heuristics that consider multiple factors (feasibility, utilization, fit, balance, penalty) and adapt to item size tend to perform better. The gravity metaphor appears consistently in higher-ranked heuristics. The worst-performing heuristics use very simple ratios and logarithms, lacking nuanced considerations. Heuristics that avoid division by zero via `min_capacity` or `epsilon` are more robust.\n- \nOkay, let's redefine \"Current self-reflection\" to focus on effective heuristic design, avoiding the pitfalls of ineffective approaches.\n\nHere's a breakdown to guide better heuristic creation:\n\n*   **Keywords:** Multifactorial, Adaptive, Robustness, Edge-case Handling, Problem-Specific.\n*   **Advice:** Design heuristics that integrate multiple relevant factors (feasibility, utilization, fit), and tailor their behavior based on specific problem characteristics (e.g., item size distributions).\n*   **Avoid:** Overly simplistic combinations of factors (e.g., solely relying on log ratios). Prioritize a nuanced and contextual approach.\n*   **Explanation:** Effective heuristics should leverage multiple information sources and adapt based on the problem. Robustness requires handling edge cases.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}