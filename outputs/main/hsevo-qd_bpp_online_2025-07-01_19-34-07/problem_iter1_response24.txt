```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing Heuristic with a twist of harmonic bin sizing
    # Prioritize bins that fit the item reasonably well but aren't too empty afterward.
    # Incorporate remaining capacity to select near-full bins first, but penalize tiny fragments.

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Base priority based on how much space is wasted after packing.
            waste = cap - item
            priorities[i] = 1 / (waste + 1e-6)  # Invert, so smaller waste -> higher priority. Epsilon prevents division by zero

            # Give a substantial bonus to bins that are almost full after packing.
            if waste <= 0.1:  # tunable hyperparameter, e.g. relative to item size or bin size
                priorities[i] += 10 # high priority if almost full. Tunable constant.

            # Penalize bins where only a tiny fraction of space is used in total, to avoid creating excessive fragmentation early on
            if item / cap < 0.1:
                priorities[i] -= 5  # high penalty if almost empty after allocation. Tunable constant.
        else:
            priorities[i] = -np.inf  # Item doesn't fit, so exclude this bin
            
    return priorities
```
