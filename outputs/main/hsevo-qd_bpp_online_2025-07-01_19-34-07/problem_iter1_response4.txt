```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Prioritize bins that can fit the item
    fit_mask = bins_remain_cap >= item
    
    # Calculate waste if item is placed in a bin. Smaller waste is better.
    waste = bins_remain_cap - item
    
    # Set a high priority to bins that can fit, and the smaller the waste, the higher the priority.
    priorities[fit_mask] = (1 / (waste[fit_mask] + 0.000001)) # Small value to avoid division by zero. The smaller waste value, the bigger priority.
    
    # Penalize bins that can't fit. This will be close to zero or slightly negative.
    priorities[~fit_mask] = -1000*(item - bins_remain_cap[~fit_mask])**2 # Large negative values, prefer other bins.  Square to penalize further

    return priorities
```
