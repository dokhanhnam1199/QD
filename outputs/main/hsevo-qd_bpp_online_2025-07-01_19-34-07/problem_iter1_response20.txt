```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] = 1

    # Among bins that can fit the item, prioritize bins with smaller remaining capacity after packing.
    remaining_after_pack = bins_remain_cap - item
    priorities[can_fit] += (bins_remain_cap[can_fit] - item) / bins_remain_cap[can_fit].sum()  # Normalize remaining cap after pack. Smaller remaining capacity means higher priority.

    # For bins that cannot fit the item, assign a very low priority (or 0)
    priorities[~can_fit] = 0
    # If no bins can fit the item, give a tiny positive value to all bins to avoid all zeros and allow new bin creation.
    if not np.any(can_fit):
      priorities += 1e-9

    return priorities
```
