```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Higher priority for bins that can fit the item snugly
            slack = cap - item
            priorities[i] = np.exp(-slack)  # Exponential decay based on slack
            #Prioritize bins that are close to being filled with the current item
            #priorities[i] = item/cap

            # Consider fragmentation: Avoid bins with very large remaining capacity unless very few options
            if cap > 2 * item:
               priorities[i] *= 0.5  #Reduced priority if cap is much larger than item
        else:
            priorities[i] = -np.inf  # Cannot fit, lowest priority
    return priorities
```
