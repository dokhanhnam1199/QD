```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version considers multiple factors: remaining capacity, item size relative
    to bin size, and a penalty for bins that are already very full to promote
    better distribution of items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    
    # Handle bins that cannot fit the item
    infeasible_mask = bins_remain_cap < item
    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf  # Initialize with -inf for infeasible bins
    priorities[infeasible_mask] = -np.inf #ensure it is -inf

    # Calculate priority for feasible bins
    feasible_mask = ~infeasible_mask
    if np.any(feasible_mask):
        remaining_capacities = bins_remain_cap[feasible_mask]

        # Factor 1: Capacity utilization - prioritize bins that are relatively full, but can still fit the item.
        utilization = (1 - (remaining_capacities - item) / remaining_capacities)
        utilization = np.clip(utilization, 0, 1)  # Ensure utilization is between 0 and 1

        # Factor 2: Relative item size -  Smaller items are generally more flexible, so consider its ratio relative to the bin.
        relative_size = item / remaining_capacities
        relative_size = np.clip(relative_size, 0, 1) # bound it

        # Factor 3: Avoidance of almost-full bins. Penalty to avoid filling bins to the brim which causes fragmentation
        almost_full_penalty = np.exp(-10 * (remaining_capacities - item)) # exponential decay penalty

        # Combine factors to calculate priority
        priorities[feasible_mask] =  2 * utilization + relative_size - 0.5*almost_full_penalty  # Weighted combination of factors

    return priorities
```
