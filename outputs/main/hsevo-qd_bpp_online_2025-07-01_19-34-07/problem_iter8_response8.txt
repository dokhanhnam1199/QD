```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Calculates priority scores for bins based on item size, remaining capacity, and utilization.
    Combines utilization, fit, and balance factors with adaptive scaling based on item size.
    """
    epsilon = 1e-9
    feasible_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf

    utilization = (1 - bins_remain_cap / (np.max(bins_remain_cap) + epsilon))
    utilization = np.clip(utilization, 0, 1)
    utilization_factor = utilization**2

    fit_score = np.exp(-np.abs(bins_remain_cap - item) / (item + epsilon))
    balance_factor = np.sqrt(bins_remain_cap / (np.max(bins_remain_cap) + epsilon))

    item_scale = np.clip(item / (np.mean(bins_remain_cap) + epsilon), 0, 1)

    priority_weights = {
        'utilization': 0.3 + 0.1 * item_scale,
        'fit': 0.4 - 0.2 * item_scale,
        'balance': 0.3 + 0.1 * item_scale
    }

    priorities[feasible_bins] = (
        priority_weights['utilization'] * utilization_factor[feasible_bins] +
        priority_weights['fit'] * fit_score[feasible_bins] +
        priority_weights['balance'] * balance_factor[feasible_bins]
    )

    return priorities
```
