```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version considers a more nuanced approach by incorporating multiple factors
    and non-linear relationships to prioritize bin selection.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    
    # Handle bins that cannot fit the item
    infeasible_mask = bins_remain_cap < item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    priorities[infeasible_mask] = -np.inf
    
    # Calculate remaining capacity ratio, handling edge cases
    valid_bins_mask = ~infeasible_mask
    remaining_capacity = bins_remain_cap[valid_bins_mask]

    # Normalize item size relative to remaining capacity
    normalized_item_size = item / remaining_capacity
    normalized_item_size = np.clip(normalized_item_size, 0, 1)  # Ensure it's within [0, 1]

    # Fill-level score: how full the bin would be *after* placing the item
    future_fill_level = 1 - ((remaining_capacity - item) / np.max(bins_remain_cap))  #Normalize by max capacity.

    # Capacity-usage urgency
    capacity_urgency = 1 / (remaining_capacity + 1e-9)  # Prevent division by zero

    # Balancing term to avoid overly full bins
    balance_term = np.exp(-5 * future_fill_level)

    # Combining factors with weights
    combined_priority = (
        1.0 * normalized_item_size
        + 2.0 * capacity_urgency
        + 0.5 * future_fill_level
        + 0.8 * balance_term

    )

    priorities[valid_bins_mask] = combined_priority
    return priorities
```
