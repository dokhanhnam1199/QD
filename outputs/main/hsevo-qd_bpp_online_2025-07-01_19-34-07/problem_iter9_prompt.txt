{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Inspired by space-time curvature, we prioritize bins where the\n    item \"bends\" the remaining capacity the most significantly.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Avoid division by zero\n    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)\n\n    # Calculate the \"gravitational effect\" based on item size and remaining capacity.\n    # A larger item has a stronger effect; smaller remaining capacity implies higher urgency.\n    gravitational_effect = item / bins_remain_cap**2 # Inverse square relationship, reminiscent of gravity\n\n    # Introduce a term that favors bins that are reasonably full, but can still accomodate the item.\n    # This prevents premature exhaustion of some bins and promotes better overall packing.\n    fill_factor = (1 - (bins_remain_cap - item) / bins_remain_cap)\n    fill_factor = np.where(bins_remain_cap < item, -np.inf, fill_factor) #make inelligible when not fitting\n\n    # Combine gravitational effect and fill factor\n    priorities = gravitational_effect + fill_factor\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, I'm ready to refine \"Current Self-Reflection\" to be more effective for designing better heuristics. Let's focus on actionable insights and avoiding common pitfalls.\n\nHere's a revised definition of \"Current Self-Reflection\":\n\n*   **Keywords:** Nuance, adaptability, problem-specificity, robustness, multi-factor, feasibility, utilization, waste minimization, edge cases, adaptive scaling, non-linear.\n*   **Advice:** Design heuristics that adapt to specific problem characteristics (e.g., item size distribution). Prioritize feasibility, resource utilization, and waste reduction while considering their interdependencies.\n*   **Avoid:** Oversimplification, inflexible formulas, ignoring edge cases. Don't rely on simple ratios of parameters without considering the broader context.\n*   **Explanation:** Strive for nuanced heuristics that combine multiple factors through adaptive and potentially non-linear relationships. Robustly handle edge cases and tailor the heuristic's behavior to the unique aspects of the problem.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}