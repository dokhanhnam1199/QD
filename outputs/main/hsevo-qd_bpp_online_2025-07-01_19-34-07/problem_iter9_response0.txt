```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version prioritizes bins based on a combination of factors,
    including remaining capacity, item size relative to bin size, and a
    penalty for almost-full bins that would lead to significant wasted space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Feasibility check: assign lowest priority if item doesn't fit
    priorities = np.where(bins_remain_cap < item, -np.inf, 0.0)

    # Calculate remaining capacity after adding the item
    remaining_after_add = bins_remain_cap - item

    # Calculate the fill ratio *after* placing the item.  Higher fill is better.
    fill_ratio_after = (bins_remain_cap - remaining_after_add) / bins_remain_cap
    fill_ratio_after = np.where(bins_remain_cap < item, 0, fill_ratio_after)

    # Reward bins that will be filled close to full, but penalize leaving small space
    # a threshold based on item size to avoid fragmentation
    waste_threshold = item * 0.1  # e.g., 10% of item size as acceptable waste
    waste_penalty = np.where((remaining_after_add > 0) & (remaining_after_add <= waste_threshold), -0.5, 0.0)

    # Bonus for bins that are already reasonably full to encourage packing
    preexisting_fill_ratio = (bins_remain_cap - bins_remain_cap) / bins_remain_cap #always 0
    preexisting_fill_ratio = 1 - (bins_remain_cap / bins_remain_cap.max())

    # Combine all factors to determine the priority
    priorities = fill_ratio_after + waste_penalty + preexisting_fill_ratio

    return priorities
```
