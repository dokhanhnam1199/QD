```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Calculate the remaining capacity after adding the item
    remaining_after_add = bins_remain_cap - item

    # Initialize priority array with a small negative value
    priorities = np.full(bins_remain_cap.shape, -1e9)  # Use a very negative value

    # Identify bins where the item fits
    valid_bins = remaining_after_add >= 0

    # If no bin can fit the item, return the initialized small values, so First Fit Decreasing (FFD) will choose the first bin.
    if not np.any(valid_bins):
      return priorities

    # Calculate fill ratio for valid bins
    fill_ratio = item / bins_remain_cap

    # Higher priority for bins that will be filled more completely
    priorities[valid_bins] = 1 - (remaining_after_add[valid_bins] / bins_remain_cap[valid_bins]) # Use up space as much as possible

    # Prioritize bins close to full utilization after placing the item
    # but with a diminishing marginal utility for extra-small gaps.
    priorities[valid_bins] += np.exp(-10 * remaining_after_add[valid_bins])

    return priorities
```
