```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a very small value to avoid -inf in log calculations if bin_remain_cap is smaller than item
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Calculate available capacity after adding item
    available_capacity = bins_remain_cap - item

    # Heuristic 1: Consider only bins where the item fits.
    fit_indices = available_capacity >= 0
    if not np.any(fit_indices):
        # If no bin fits, prioritize the bin with the most remaining capacity
        priorities = bins_remain_cap
        return priorities
    
    # Heuristic 2: Calculate waste (remaining capacity) after fitting.
    waste = bins_remain_cap[fit_indices] - item

    # Heuristic 3: Prioritize based on minimizing fragmentation and filling as much as possible, 
    # with a preference for bins that are already relatively full.
    # A bin filled to 90% capacity before adding the current item should be preferred.
    
    capacity_ratios_before = (bins_remain_cap[fit_indices] + item) / (bins_remain_cap[fit_indices] + item).max() # Avoid division by 0 in case all caps are zero

    # Combine heuristics: Higher the better
    priorities[fit_indices] = 1 / (waste + 1e-9) + capacity_ratios_before

    return priorities
```
