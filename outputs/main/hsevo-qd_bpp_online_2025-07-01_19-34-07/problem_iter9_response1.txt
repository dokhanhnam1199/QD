```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version incorporates several improvements over v1:
    1.  Remaining Capacity as a percentage of the bin size
    2.  Scaled Item Size as a percentage of bin size
    3.  A sigmoid function to create a non-linear relationship between
        remaining capacity and priority.
    4.  An "urgency" factor that increases priority as bins fill up.
    5.  A penalty for bins that can't fit the item

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    bin_size = 1.0  # Assuming bin size is normalized to 1

    # Handle bins that cannot fit the item immediately
    infeasible = bins_remain_cap < item
    priority = np.zeros_like(bins_remain_cap)
    priority[infeasible] = -np.inf  # Mark infeasible bins with lowest priority


    # Calculate priorities for feasible bins
    feasible = ~infeasible
    if np.any(feasible):
        remaining_capacity_ratio = bins_remain_cap[feasible] / bin_size
        scaled_item_size = item / bin_size

        # Sigmoid function to prioritize partially filled bins
        # The parameters (loc, scale) can be tuned based on problem characteristics
        # loc shifts the sigmoid curve, scale controls the steepness
        sigmoid_value = 1 / (1 + np.exp((remaining_capacity_ratio - 0.5) * 10))

        # Urgency factor: higher priority as bin fills up
        urgency = 1 - remaining_capacity_ratio

        # Combine sigmoid and urgency
        priority[feasible] = sigmoid_value + urgency * 0.5 #urgency scaled to reduce impact

    return priority
```
