```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: Prioritize bins that can fit the item.
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1.0

    # Rule 2: Among bins that can fit, prioritize those with the least remaining space after packing.  This implements a "best fit" heuristic.
    remaining_space = bins_remain_cap - item
    remaining_space[~can_fit] = np.inf  # Ignore bins that cannot fit
    min_remaining_space = np.min(remaining_space)
    
    best_fit_mask = np.isclose(remaining_space, min_remaining_space) & can_fit  # Account for floating-point precision
    priorities[best_fit_mask] += 2.0

    # Rule 3: Penalize bins that will be mostly full after packing to encourage even distribution.
    fullness_ratio = (bins_remain_cap - item) / bins_remain_cap
    priorities += (1 - np.abs(fullness_ratio-0.5)) * can_fit #give slight increase if we can get it near half full
    
    # Rule 4: Add small randomness to break ties, prevents getting stuck in local minima
    priorities += np.random.rand(len(bins_remain_cap)) * 0.01

    return priorities
```
