{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines gravitational effect and fill factor with a capacity scaling.\"\"\"\n    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)\n\n    gravitational_effect = item / bins_remain_cap**2\n\n    fill_factor = (1 - (bins_remain_cap - item) / bins_remain_cap)\n    fill_factor = np.where(bins_remain_cap < item, -np.inf, fill_factor)\n\n    capacity_scaling = np.exp(-bins_remain_cap) # scale by remaining capacity\n\n    priorities = gravitational_effect + fill_factor + capacity_scaling\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the first combines gravitational effect, fill factor, and capacity scaling, while the last only uses the log of the item/capacity ratio. 1st also handles the zero-capacity edge case, while 20th doesn't explicitly. Comparing (2nd best) vs (second worst), 2nd uses gravitational effect, fill ratio, and adaptive capacity scaling while 19th still only uses log ratios and lacks edge case handling. Comparing (1st) vs (2nd), we see that 2nd adds a gravity power parameter and an adaptive capacity scaling based on item size and weights the factors while 1st uses simpler capacity scaling. (3rd) vs (4th), 3rd introduces parameters `small_cap_threshold` and `gravity_power` and uses them, while 4th implements sophisticated factors utilization, fit, balance, and penalty with adaptive scaling. Comparing (second worst) vs (worst), we see they are identical and implement only a log ratio calculation. Overall: The better heuristics consider multiple factors, often with adaptive scaling or weighting. They also handle edge cases such as division by zero. Simpler heuristics rely on a single factor, such as the ratio of item size to remaining capacity. \"Gravitational effect\" and \"fill factor/ratio\" are re-occurring components. Adaptive scaling and edge-case handling also appear to be advantageous.\n- \nHere's a refined definition of \"Current Self-Reflection\" focusing on effective heuristic design:\n\n*   **Keywords:** Multi-factor integration, adaptive scaling, edge case handling, problem characteristics, robustness.\n\n*   **Advice:** Design heuristics by combining relevant factors, adapting their influence (weighting/scaling) based on problem-specific traits. Ensure robustness by addressing potential edge cases.\n\n*   **Avoid:** Overly simplistic calculations, purely linear combinations, disregarding problem context, focusing solely on log ratios.\n\n*   **Explanation:** Effective heuristic design requires a nuanced approach. Go beyond simple formulas by adapting factor influence based on problem characteristics and meticulously handling edge cases for robustness.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}