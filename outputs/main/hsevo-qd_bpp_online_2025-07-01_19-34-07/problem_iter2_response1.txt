```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines gravitational effect and fill factor with a capacity scaling."""
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    gravitational_effect = item / bins_remain_cap**2

    fill_factor = (1 - (bins_remain_cap - item) / bins_remain_cap)
    fill_factor = np.where(bins_remain_cap < item, -np.inf, fill_factor)

    capacity_scaling = np.exp(-bins_remain_cap) # scale by remaining capacity

    priorities = gravitational_effect + fill_factor + capacity_scaling
    return priorities
```
