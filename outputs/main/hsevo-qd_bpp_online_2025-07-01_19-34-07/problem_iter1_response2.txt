```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a small negative value. This discourages invalid moves.
    priorities = -np.inf * np.ones_like(bins_remain_cap)

    # Identify bins that can accommodate the item
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities  # No bin can fit, all have negative infinite priority

    # Calculate space utilization for valid bins
    space_utilization = item / bins_remain_cap[valid_bins]

    # Prioritize bins based on the remaining capacity after placing the item: larger remain_cap after placement, bigger penalty
    remaining_capacity = bins_remain_cap[valid_bins] - item

    # Compute a score based on utilization and remaining capacity
    # We want higher utilization AND lower remaining capacity after placement
    # So we will subtract remaining capacity after placement from utilization
    scores = space_utilization - 0.1*remaining_capacity
    # We scale it with 0.1 to make sure the most utilization part is preferred

    priorities[valid_bins] = scores

    return priorities
```
