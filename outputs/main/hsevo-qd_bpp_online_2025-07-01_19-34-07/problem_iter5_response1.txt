```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, min_capacity: float = 1e-6, gravity_power: float = 2.0, balance_factor: float = 1.0) -> np.ndarray:
    """Combines gravitational effect and balance to prioritize bins."""

    bins_remain_cap = np.where(bins_remain_cap <= 0, min_capacity, bins_remain_cap)

    gravitational_effect = item / bins_remain_cap**gravity_power
    fill_factor = (1 - (bins_remain_cap - item) / bins_remain_cap)
    fill_factor = np.where(bins_remain_cap < item, -np.inf, fill_factor)

    #Prioritize bins with capacity near the mean capacity
    mean_capacity = np.mean(bins_remain_cap)
    capacity_deviation = np.abs(bins_remain_cap - mean_capacity)
    balance = np.exp(-balance_factor * capacity_deviation / mean_capacity)

    priorities = gravitational_effect + fill_factor + balance
    return priorities
```
