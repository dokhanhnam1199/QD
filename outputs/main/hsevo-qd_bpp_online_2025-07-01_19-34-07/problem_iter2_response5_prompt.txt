{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n    Inspired by space-time curvature, we prioritize bins where the\n    item \"bends\" the remaining capacity the most significantly.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Avoid division by zero\n    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)\n\n    # Calculate the \"gravitational effect\" based on item size and remaining capacity.\n    # A larger item has a stronger effect; smaller remaining capacity implies higher urgency.\n    gravitational_effect = item / bins_remain_cap**2 # Inverse square relationship, reminiscent of gravity\n\n    # Introduce a term that favors bins that are reasonably full, but can still accomodate the item.\n    # This prevents premature exhaustion of some bins and promotes better overall packing.\n    fill_factor = (1 - (bins_remain_cap - item) / bins_remain_cap)\n    fill_factor = np.where(bins_remain_cap < item, -np.inf, fill_factor) #make inelligible when not fitting\n\n    # Combine gravitational effect and fill factor\n    priorities = gravitational_effect + fill_factor\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (11th), we see the first heuristic uses a combination of gravitational effect and fill factor to determine priority, while the 11th uses a simple logarithmic ratio. The gravitational effect in the first heuristic prioritizes bins with smaller remaining capacity more strongly and `fill_factor` promotes bins that are reasonably full. The 11th heuristic solely focuses on the ratio of item size to remaining capacity. The fill factor aims to prevent prematurely exhausting some bins and promotes better overall packing.\n\nComparing (2nd) vs (12th), (3rd) vs (13th), ..., they are identical to the first and 11th heuristics, respectively. Therefore, the same analysis applies.\n\nComparing (1st) vs (2nd), (2nd) vs (3rd), ..., (9th) vs (10th), the functions are identical. This implies that their ranking is based on some factor outside of the function definitions provided (e.g., testing data or integration).\n\nComparing (11th) vs (12th), (12th) vs (13th), ..., (19th) vs (20th), these functions are also identical. Again, suggesting the ranking is based elsewhere.\n\nOverall: The better performing heuristics calculate priority based on a more complex formula involving division by the square of the remaining capacity and consideration of fill factor. The inferior heuristics only utilize log ratios. The consistent repetition suggests the ranking has more to do with a system outside of the code itself.\n- \nOkay, let's refine \"Current Self-Reflection\" to guide better heuristic design, avoiding common pitfalls:\n\n*   **Keywords:** Nuance, Multifactorial, Non-linear, Holistic, Adaptive.\n\n*   **Advice:** Explore complex, non-linear combinations of factors beyond simple ratios. Prioritize creating a more complete picture of the problem space, incorporating diverse data points.\n\n*   **Avoid:** Over-reliance on single transformations (e.g., log ratios) without considering other relevant factors. Rigid formulas; heuristics should adapt based on context.\n\n*   **Explanation:** Effective heuristics require understanding interdependencies between factors and crafting adaptive models, not just applying isolated mathematical operations.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}