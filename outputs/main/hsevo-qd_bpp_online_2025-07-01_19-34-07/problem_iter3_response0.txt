```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version incorporates multiple factors, non-linear relationships,
    and adaptive scaling to improve bin packing efficiency.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    epsilon = 1e-9  # Small constant to avoid division by zero and numerical instability

    # 1. Basic Feasibility Check: Eliminate bins that cannot fit the item.
    feasible_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf  # Initialize to -inf

    # 2. Capacity Utilization Factor: Favor bins that are already reasonably full.
    #    This encourages filling bins and reduces fragmentation.
    utilization = (1 - bins_remain_cap / (np.max(bins_remain_cap) + epsilon))
    utilization = np.clip(utilization, 0, 1)  # Ensure values are within [0, 1]
    utilization_factor = utilization**2 # Non-linear, emphasize already full bins


    # 3. Item Fit Score: How well the item fits into the remaining space.
    #    A tighter fit is generally preferred, but not if it leads to excessive fragmentation.
    fit_score = np.exp(-np.abs(bins_remain_cap - item) / (item + epsilon))

    # 4. Balance Factor: Discourage near-empty bins from being used too early.
    #    This helps to keep options open for larger items later on.
    balance_factor = np.sqrt(bins_remain_cap / (np.max(bins_remain_cap) + epsilon))

    # 5. Remaining Capacity Penalty: Penalize bins with very little remaining capacity
    #    after placing the current item.  This avoids creating slivers.
    remaining_capacity_penalty = np.exp(-10 * np.maximum(0, bins_remain_cap - item) / (np.max(bins_remain_cap)+epsilon))


    # Adaptive Scaling: Adjust the weights of the factors based on the item size.
    #  - For smaller items, prioritize utilization and fit.
    #  - For larger items, prioritize feasibility and balance.
    item_scale = np.clip(item / (np.mean(bins_remain_cap) + epsilon), 0, 1)
    
    #6. Combine the Factors:  Weighted sum of the individual factors.
    priority_weights = {
        'utilization': 0.3 + 0.1*item_scale,
        'fit': 0.4 - 0.2 * item_scale,
        'balance': 0.1+ 0.4*item_scale,
        'penalty': 0.2 - 0.1*item_scale
    }

    # Assign priorities to feasible bins
    priorities[feasible_bins] = (
        priority_weights['utilization'] * utilization_factor[feasible_bins] +
        priority_weights['fit'] * fit_score[feasible_bins] +
        priority_weights['balance'] * balance_factor[feasible_bins] +
        priority_weights['penalty'] * remaining_capacity_penalty[feasible_bins]
    )

    return priorities
```
