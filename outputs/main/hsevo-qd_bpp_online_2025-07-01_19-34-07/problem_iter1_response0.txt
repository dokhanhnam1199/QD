```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Give higher priority to bins where the item fits
            space_waste = cap - item
            priorities[i] = (1 / (space_waste + 0.0001))  # Avoid division by zero, prioritize less waste
            # Further prioritize bins with smaller remaining capacity after packing
            priorities[i] += (1 / (cap + 0.0001)) #Prioritize bins with small cap to fill them quickly.
        else:
            # Negative priority for bins that don't fit the item
            priorities[i] = -1e9  # Very low priority
    return priorities
```
