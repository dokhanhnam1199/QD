```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Heuristic:
    # 1.  High priority for bins where the item fits and leaves the least waste
    # 2.  Negative (very low) priority for bins where the item does not fit.
    # 3.  Scale the positive priorities based on how 'full' the bin will be, preferring fuller bins.
    # 4. Add a small bonus to bins with almost empty space to encourage their use and prevent large fragmentation

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins where the item fits
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        # Item does not fit into any bin. Return a small value for all to ensure one bin gets picked arbitrarily
        return priorities - 1e9  # Very negative value for all bins

    # Calculate remaining capacity *after* adding item to each valid bin
    remaining_capacity_after_fit = bins_remain_cap[valid_bins] - item

    # Calculate fill ratio which tells us how full a valid bin is. This makes the algorithm choose the fuller bin.
    fill_ratio = (bins_remain_cap[valid_bins] - remaining_capacity_after_fit) / bins_remain_cap[valid_bins]

    # Calculate waste after adding the item, this is inversely related to priority
    waste = remaining_capacity_after_fit

    # The closer we are to completely filling a bin, the higher priority we give it
    priorities[valid_bins] = (fill_ratio * 100 - waste) # Combines multiple factors and balances them

    # Bonus to near empty bins
    near_empty_bins = bins_remain_cap > 0.95 * np.max(bins_remain_cap) # Bins with > 95% maximum capacity
    priorities[near_empty_bins] += 1 # small bonus

    return priorities
```
