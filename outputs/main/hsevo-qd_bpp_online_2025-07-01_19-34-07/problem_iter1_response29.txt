```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Uses a combination of remaining capacity and wasted space to prioritize bins.
    Favors bins that can fit the item with minimal wasted space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item

    # Assign a base priority based on whether the item fits
    fits = wasted_space >= 0
    priorities[fits] = 1  # Base priority for bins that can fit the item

    # Adjust priority based on wasted space (smaller wasted space is better)
    # Use a non-linear function to heavily penalize large wasted space
    priorities[fits] += np.exp(-wasted_space[fits] / item)

    # Penalize bins that cannot fit the item harshly.
    priorities[~fits] = -np.inf  # Mark as completely undesirable if item doesn't fit

    return priorities
```
