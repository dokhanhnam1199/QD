```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Employing a cost-benefit analysis, emphasizing a 'just fit' scenario.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Assign large negative priority for bins that cannot fit the item
    priorities[bins_remain_cap < item] = -np.inf

    # Prioritize bins where the remaining capacity is close to the item size
    # Smaller wasted space (bins_remain_cap - item) receives higher priority.
    # Introduce a scaling factor to emphasize bins that offer tight packing.
    waste = bins_remain_cap - item
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
      waste_normalized = waste[valid_bins] / bins_remain_cap[valid_bins] # Waste relative to original capacity

      # A concave function to strongly prefer smaller waste, approaching optimal use.
      priorities[valid_bins] = np.exp(-10*waste_normalized) # Emphasize tight fit using exponent

    return priorities
```
