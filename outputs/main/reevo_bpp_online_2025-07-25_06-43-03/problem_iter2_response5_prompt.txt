{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to encourage the packing of items into bins \n    where the item size is close to the remaining capacity, thereby minimizing \n    waste and reducing the number of bins needed.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the waste that would result from adding the item to each bin\n    waste = np.abs(bins_remain_cap - item)\n    \n    # Calculate the priority score as the inverse of the waste\n    # Add a small value to avoid division by zero\n    priority = 1 / (waste + 1e-6)\n    \n    # Give higher priority to bins with less remaining capacity\n    priority *= (bins_remain_cap - item + 1e-6)\n    \n    # Ensure that bins with more than enough capacity get higher priority\n    priority[bins_remain_cap >= item] *= 2\n    \n    # Return the priority scores\n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins that have the least amount of remaining capacity and \n    can still fit the item. If a bin cannot fit the item, its priority is set to negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the minimum remaining capacity for each bin that can still fit the item\n    min_remain_cap = np.where(bins_remain_cap >= item, bins_remain_cap, np.inf)\n    \n    # Calculate the priority score for each bin based on the minimum remaining capacity\n    priority_scores = np.where(bins_remain_cap >= item, -min_remain_cap, -np.inf)\n    \n    # Return the priority scores\n    return priority_scores\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins that have the least amount of remaining capacity \n    relative to the item size and can still fit the item. If a bin cannot fit the item, its \n    priority is set to negative infinity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the ratio of remaining capacity to item size for each bin that can still fit the item\n    ratio = np.where(bins_remain_cap >= item, bins_remain_cap / (bins_remain_cap + item), np.inf)\n    \n    # Calculate the priority score for each bin based on the ratio\n    priority_scores = np.where(bins_remain_cap >= item, -ratio, -np.inf)\n    \n    # Return the priority scores\n    return priority_scores\n\n[Reflection]\nSimplify and prioritize feasible bins with least remaining capacity.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}