{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins with the most remaining capacity,\n    while minimizing the waste of space (by adding the item to the bin with the smallest remaining capacity that can still fit the item).\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the maximum possible priority for each bin\n    max_priority = np.where(bins_remain_cap >= item, bins_remain_cap, np.iinfo(np.int64).min)\n    \n    # Apply a Gaussian penalty to the priority, favoring bins with more remaining capacity\n    priorities = max_priority - (np.abs(max_priority - item) ** 2) / (2 * np.ones_like(max_priority))\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to encourage the packing of items into bins \n    where the item size is close to the remaining capacity, thereby minimizing \n    waste and reducing the number of bins needed.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the waste that would be left in each bin if the item were added\n    waste = np.maximum(bins_remain_cap - item, 0)\n    \n    # Calculate the ratio of the item size to the remaining capacity of each bin\n    ratio = item / (bins_remain_cap + 1e-9)  # Add a small value to avoid division by zero\n    \n    # Calculate the priority score for each bin based on the waste and ratio\n    priority = 1 / (waste + 1e-9) + 1 / (1 + np.abs(ratio - 1))  \n    \n    # Ensure that bins with insufficient capacity have a priority of zero\n    priority[bins_remain_cap < item] = 0\n    \n    return priority\n\n[Reflection]\nPrioritize minimizing waste and optimal item-bin size ratios.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}