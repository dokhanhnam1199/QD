```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to prioritize bins that have the least remaining capacity but can still accommodate the item.
    It favors bins with remaining capacity closest to the item size, to minimize waste and maximize bin utilization.
    For bins with the same remaining capacity, it prioritizes bins with capacity closest to the item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the mask for feasible bins (bins that can accommodate the item)
    feasible_mask = bins_remain_cap >= item

    # Calculate the difference between the remaining capacity of each feasible bin and the item size
    diff = np.abs(bins_remain_cap - item)

    # Calculate the priority score for each feasible bin
    priority = feasible_mask.astype(int) / (1 + diff)

    # To break ties, use the ratio of the item size to the remaining capacity
    ratio = bins_remain_cap / item
    ratio = np.where(ratio > 1, ratio, 1)  # Clip ratio to be at least 1
    priority += feasible_mask.astype(int) / (1 + ratio)

    # For bins that can't accommodate the item, set their priority score to 0
    priority[bins_remain_cap < item] = 0

    return priority
```
