{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins based on the ratio of the remaining capacity and the item size.\n    If a bin has a higher remaining capacity compared to the item size, it gets a higher priority.\n    Additionally, bins with lower remaining capacities are prioritized over those with higher remaining capacities,\n    to ensure that bins are fully utilized.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    with np.errstate(divide='ignore', invalid='ignore'):\n        # Calculate the ratio of the remaining capacity and the item size\n        ratios = bins_remain_cap / (item + 1e-9)  # Add a small value to item to avoid division by zero\n\n        # Calculate a mask to avoid adding the item to a bin where it doesn't fit\n        item_fits = bins_remain_cap >= item\n\n        # Calculate the priority score as the ratio of item size and the remaining capacity of the bin,\n        # if the item fits in the bin\n        priority_scores = np.where(item_fits, ratios, 0)\n\n        # Lower remaining capacity bins get more priority\n        priority_scores = np.where(item_fits, priority_scores * (1 / (bins_remain_cap + 1e-9)), 0)\n\n    return priority_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to encourage the packing of items into bins \n    where the item size is closest to the remaining capacity, thereby minimizing waste.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the difference between the remaining capacity of each bin and the item size\n    capacity_diff = np.abs(bins_remain_cap - item)\n    \n    # Invert the differences to give higher priority to bins with smaller differences\n    priority_scores = 1 / (capacity_diff + 1e-8)  # add a small value to avoid division by zero\n    \n    # Give higher priority to bins with more remaining capacity to discourage overfilling\n    priority_scores *= bins_remain_cap\n    \n    return priority_scores\n\n[Reflection]\nPrioritize bins with closest remaining capacity to item size.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}