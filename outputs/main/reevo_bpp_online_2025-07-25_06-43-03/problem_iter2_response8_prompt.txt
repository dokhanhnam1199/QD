{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins with the most remaining capacity,\n    while minimizing the waste of space (by adding the item to the bin with the smallest remaining capacity that can still fit the item).\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the maximum possible priority for each bin\n    max_priority = np.where(bins_remain_cap >= item, bins_remain_cap, np.iinfo(np.int64).min)\n    \n    # Apply a Gaussian penalty to the priority, favoring bins with more remaining capacity\n    priorities = max_priority - (np.abs(max_priority - item) ** 2) / (2 * np.ones_like(max_priority))\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to favor bins that have enough capacity to hold the item and \n    also prefer bins with the least remaining capacity, which indicates that the bin is almost full.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity that is enough to hold the item\n    valid_cap = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)\n    \n    # Set the priority score as the inverse of the valid capacity, favoring bins with the least remaining capacity\n    priority_score = -valid_cap\n    \n    # Replace -inf (indicating invalid bins) with very low priority scores\n    priority_score = np.where(priority_score == np.inf, -1e6, priority_score)\n    \n    # Return the priority scores for each bin\n    return priority_score\n\n[Reflection]\nFavor bins with least remaining capacity.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}