```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on the ratio of the remaining capacity and the item size.
    If a bin has a higher remaining capacity compared to the item size, it gets a higher priority.
    Additionally, bins with lower remaining capacities are prioritized over those with higher remaining capacities,
    to ensure that bins are fully utilized.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    with np.errstate(divide='ignore', invalid='ignore'):
        # Calculate the ratio of the remaining capacity and the item size
        ratios = bins_remain_cap / (item + 1e-9)  # Add a small value to item to avoid division by zero

        # Calculate a mask to avoid adding the item to a bin where it doesn't fit
        item_fits = bins_remain_cap >= item

        # Calculate the priority score as the ratio of item size and the remaining capacity of the bin,
        # if the item fits in the bin
        priority_scores = np.where(item_fits, ratios, 0)

        # Lower remaining capacity bins get more priority
        priority_scores = np.where(item_fits, priority_scores * (1 / (bins_remain_cap + 1e-9)), 0)

    return priority_scores
```
