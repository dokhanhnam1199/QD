```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on how close their remaining capacity is to the item size.
    If a bin has just enough capacity to hold the item, it gets the highest priority.
    Bins with less capacity than the item get zero priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the absolute difference between the remaining capacity and the item size
    # This gives us a measure of how close each bin's capacity is to the item size
    diff = np.abs(bins_remain_cap - item)
    
    # Bins with less capacity than the item get zero priority
    priority_score = np.where(bins_remain_cap < item, 0, 
                              # Priority is higher for bins that can just hold the item
                              1 / (1 + diff))
    
    # To break ties, prioritize bins with more remaining capacity
    max_priority = np.max(priority_score)
    priority_score = np.where(priority_score == max_priority, 
                              priority_score * (1 + bins_remain_cap / (1 + np.sum(bins_remain_cap))), 
                              priority_score)
    
    return priority_score
```
