```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins that have the least amount of remaining capacity and 
    can still fit the item. If a bin cannot fit the item, its priority is set to negative infinity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the minimum remaining capacity for each bin that can still fit the item
    min_remain_cap = np.where(bins_remain_cap >= item, bins_remain_cap, np.inf)
    
    # Calculate the priority score for each bin based on the minimum remaining capacity
    priority_scores = np.where(bins_remain_cap >= item, -min_remain_cap, -np.inf)
    
    # Return the priority scores
    return priority_scores

def priority_v3(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins that have the least amount of remaining capacity 
    relative to the item size and can still fit the item. If a bin cannot fit the item, its 
    priority is set to negative infinity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the ratio of remaining capacity to item size for each bin that can still fit the item
    ratio = np.where(bins_remain_cap >= item, bins_remain_cap / (bins_remain_cap + item), np.inf)
    
    # Calculate the priority score for each bin based on the ratio
    priority_scores = np.where(bins_remain_cap >= item, -ratio, -np.inf)
    
    # Return the priority scores
    return priority_scores
```
