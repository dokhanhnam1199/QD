```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers multiple factors, with adjustments and new factors for improved performance:
    1. Waste: Prioritizes bins where the item fits well, minimizing wasted space, but uses a more nuanced penalty.
    2. Fill Level: Encourages filling bins as much as possible, using a sigmoid function for a smoother reward.
    3. Item Count Approximation: Incorporates a proxy for item count.
    4. Balance: Introduce a balance term, that encourages using bins that lead to average remaining capacity.
    5. Suitability: Emphasizes bins that are just large enough for the item.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9  # Small value to avoid division by zero and log of zero

    # Waste: Prioritize bins where the item fits relatively well.
    waste = bins_remain_cap - item
    waste_penalty = np.where(waste >= 0, np.exp(-waste / (item + epsilon)), -np.inf)  # Exponential decay, scaled by item size.
    priorities += waste_penalty

    # Fill Level: Encourage filling bins, but not too much.  Use sigmoid for smoother reward
    fill_ratio = item / (bins_remain_cap + epsilon)
    fill_reward = 1 / (1 + np.exp(-5 * (fill_ratio - 0.7)))  # Sigmoid centered around 0.7 fill ratio.  Steeper slope.
    priorities += fill_reward

    # Item Count Approximation: Encourages placing items in bins that were sparsely filled (more sensitive to small changes).  Use a log scale.
    item_density = np.log(bins_remain_cap + epsilon)
    priorities += item_density

    # Balance term: Encourage using bins that lead to an average remaining capacity
    mean_remaining = np.mean(bins_remain_cap)
    balance = -np.abs(bins_remain_cap - mean_remaining) / (mean_remaining + epsilon)
    priorities += balance

    # Suitability: Emphasizes bins that are just large enough.  Higher peak and rapid drop off
    suitability = np.where(waste >=0, np.exp(-10 * waste/ (item + epsilon)), -np.inf)
    priorities += suitability
    return priorities
```
