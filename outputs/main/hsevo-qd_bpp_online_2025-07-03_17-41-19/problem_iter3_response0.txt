```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers multiple factors, with refined weighting and scaling:
    1. Waste: Prioritizes bins where the item fits relatively well, minimizing wasted space.  Uses a more sensitive exponential decay.
    2. Fill Level: Encourages filling bins as much as possible, but penalizes overfilling. Uses a sigmoid function for smoother behavior.
    3. Bin Utilization: Directly rewards bins that have been used to some extent, encouraging balanced usage.
    4. Stability: Favors bins that are closest to the item size, scaled by the item size itself.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9  # Small value to avoid division by zero and log of zero

    # Waste: Prioritize bins where the item fits relatively well.
    waste = bins_remain_cap - item
    waste_penalty = np.where(waste >= 0, np.exp(-10 * waste / item), -np.inf)  # More sensitive exponential decay, scaled by item size. Harsh penalty for overfill.
    priorities += waste_penalty

    # Fill Level: Encourage filling bins, but not too much.  Sigmoid function
    fill_ratio = item / (bins_remain_cap + epsilon)
    fill_reward = 1 / (1 + np.exp(5 - 10 * fill_ratio)) # Sigmoid centered around fill_ratio = 0.5
    priorities += fill_reward

    # Bin Utilization: Reward bins that have some items in them already
    utilization = (1 - bins_remain_cap) # Previously available capacity
    utilization_reward = np.where(utilization > 0, np.tanh(utilization), 0) #tanh squashes the values and 0 if it is new bin.
    priorities += 0.5 * utilization_reward

    # Stability (Closeness to Item Size): Scaled by item size
    stability = -np.abs(bins_remain_cap - item) / (item + epsilon)
    priorities += 0.25 * stability

    return priorities
```
