```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, capacity, and normalized item size."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    waste = bins_remain_cap - item
    fit_mask = waste >= 0
    priorities = np.where(fit_mask, np.exp(-waste / (item + epsilon)), -np.inf)

    capacity_factor = bins_remain_cap / (np.max(bins_remain_cap) + epsilon)
    priorities = np.where(fit_mask, priorities + 0.5 * capacity_factor, priorities)

    normalized_item_size = item / (np.max(bins_remain_cap) + epsilon)
    priorities = np.where(fit_mask, priorities + 0.1 * (1 - normalized_item_size), priorities)

    threshold = 0.1
    small_capacity_penalty = np.where(bins_remain_cap / (np.max(bins_remain_cap) + epsilon) < threshold, -10, 0)
    priorities += small_capacity_penalty

    return priorities
```
