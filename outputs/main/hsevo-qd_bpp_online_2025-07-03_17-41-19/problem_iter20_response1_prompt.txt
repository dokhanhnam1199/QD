{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This priority function considers multiple factors:\n    1. Waste: Prioritizes bins where the item fits relatively well, minimizing wasted space.\n    2. Fill Level: Encourages filling bins as much as possible, but penalizes overfilling.\n    3. Item Fit: A stronger focus on how well the item fits relative to the bin's capacity.\n    4. Bin Utilization: Directly incentivize using bins that have already been started.\n    5. Number of items: Approximated by remaining space.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    epsilon = 1e-9  # Small value to avoid division by zero and log of zero\n\n    # Waste: Prioritize bins where the item fits relatively well.\n    waste = bins_remain_cap - item\n    waste_penalty = np.where(waste >= 0, np.exp(-waste), -np.inf)  # Exponential decay for waste, harsh penalty for overfill\n    priorities += waste_penalty\n\n    # Fill Level: Encourage filling bins, but not too much.\n    fill_ratio = item / (bins_remain_cap + epsilon)\n    fill_reward = np.where(fill_ratio <= 1, fill_ratio, -np.inf)  # linear reward, harsh penalty. Experiment different functions\n    priorities += fill_reward\n\n    # Item Fit: How well the item fits, using a scaled sigmoid function.\n    item_fit = 1 / (1 + np.exp(5 * (waste / (item + epsilon) - 0.5))) # Experiment with the scaling factor 5 and offset 0.5\n    item_fit = np.where(waste >= 0, item_fit, 0) # Only consider if item fits.\n    priorities += item_fit\n\n    # Bin Utilization: Encourage using bins that are already partially filled.\n    bin_utilization = 1 - bins_remain_cap # scale between zero and one\n    priorities += bin_utilization\n    \n    # Number of items (Approximated by remaining space): Encourages placing items in bins that were sparsely filled\n    item_density = np.exp(-bins_remain_cap) # Lower remaining cap equals larger item_density, less filled\n    priorities += 0.1 * item_density\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the top heuristic considers waste, remaining capacity, item size normalization, and capacity threshold, using carefully weighted combinations and normalization techniques. In contrast, the bottom heuristic uses a simple log ratio of item size to remaining capacity. (2nd) is identical to (1st). Comparing (1st) vs (4th), the top heuristic uses a more sophisticated combination of waste minimization, remaining capacity and item size normalization with capacity threshold, while the (4th) heuristic combines waste minimization and fill level considerations with less nuanced penalties and rewards. (5th) considers waste, fill level, item fit, bin utilization, and number of items (approximated by remaining space). (6th) considers waste minimization and a modified fill ratio. (7th) considers waste, fill level, bin utilization, best fit heuristic influence, and avoidance of near-empty bins. (8th) considers waste, fill level, number of items, and stability and uses scaling factors. Comparing (8th) vs (9th), (8th) has scaling factors as parameters and (9th) doesn't. Comparing (7th) vs (10th), they are identical. Comparing (11th) vs (15th), (11th) considers waste minimization, fill level encouragement and stability, while (15th) is a simplified one. Comparing (13th) vs (14th), they are identical. Overall: The better heuristics incorporate multiple factors with careful weighting and normalization, and avoid edge-case penalties.\n- \nOkay, let's refine \"Current Self-Reflection\" for designing better heuristics, avoiding pitfalls of \"Ineffective Self-Reflection\":\n\n*   **Keywords:** Relevant factors, mathematical modeling, weighting, edge cases, robustness, scaling, feasibility constraints.\n\n*   **Advice:** Prioritize incorporating *all* truly relevant factors *directly* instead of approximating; use appropriate (but not necessarily complex or non-linear) mathematical models, and carefully tune weights. Ensure robustness.\n\n*   **Avoid:** Over-reliance on non-linear functions (exponential, sigmoid, etc.) *without strong justification*; Approximating missing data when direct incorporation is feasible; Premature optimization of parameters.\n\n*   **Explanation:** Focus on a solid foundation. Accurately represent the problem's core elements mathematically, handle boundary conditions gracefully, and only add complexity *after* a simple, robust heuristic exists.\n\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}