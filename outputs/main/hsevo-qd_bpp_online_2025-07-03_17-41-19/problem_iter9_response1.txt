```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers multiple factors, with refined weighting and a focus on avoiding edge-case penalties:
    1.  Waste: Prioritizes bins where the item fits relatively well, minimizing wasted space.  Uses a more nuanced penalty.
    2.  Fill Level: Encourages filling bins as much as possible, but penalizes overfilling. Exponential reward for fill ratio.
    3.  Balance: Encourages a more balanced distribution of items across bins, especially when bins are similarly filled.
    4.  Adaptability: Introduces a parameter (alpha) to adjust the relative importance of waste vs. fill level.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9  # Small value to avoid division by zero and log of zero
    alpha = 0.5  # Adjust the weight of waste vs. fill (0 to 1)

    # Waste: Prioritize bins where the item fits relatively well, minimizing wasted space.
    waste = bins_remain_cap - item
    waste_penalty = np.where(waste >= 0, np.exp(-waste / (item + epsilon)), -np.inf)  # Exponential decay scaled by item size
    priorities += alpha * waste_penalty

    # Fill Level: Encourage filling bins, but not too much.
    fill_ratio = item / (bins_remain_cap + epsilon)
    fill_reward = np.where(fill_ratio <= 1, np.exp(fill_ratio), -np.inf)
    priorities += (1 - alpha) * fill_reward

    # Balance: Encourages a more balanced distribution of items. Avoid extreme fill levels early on.
    # This helps in scenarios where bins have similar remaining capacities.
    bin_utilization = 1 - (bins_remain_cap / (np.max(bins_remain_cap) + epsilon)) # Relative to the fullest bin
    balance_reward = np.exp(-np.abs(bin_utilization - 0.5)) # Target around 50% utilization.  Avoids being too greedy.
    priorities += 0.1 * balance_reward  # Smaller weight.  Balance is secondary.


    return priorities
```
