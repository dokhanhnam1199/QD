{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines best-fit and remaining capacity considerations for bin selection.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    epsilon = 1e-9\n\n    waste = bins_remain_cap - item\n    fit_mask = waste >= 0\n    priorities = np.where(fit_mask, np.exp(-waste / (item + epsilon)), -np.inf)\n\n    capacity_factor = bins_remain_cap / (np.max(bins_remain_cap) + epsilon)\n    priorities = np.where(fit_mask, priorities + 0.5 * capacity_factor, priorities)\n\n    normalized_item_size = item / (np.max(bins_remain_cap) + epsilon)\n    priorities = np.where(fit_mask, priorities + 0.1 * (1 - normalized_item_size), priorities)\n\n    fill_ratio = item / (bins_remain_cap + epsilon)\n    fill_reward = np.where(fit_mask & (fill_ratio <= 1), np.exp(1 - np.abs(1 - fill_ratio)), -np.inf)\n    priorities = np.where(fit_mask, priorities + 0.2 * fill_reward, priorities)\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, here's a refined perspective on self-reflection for heuristic design, aiming to avoid pitfalls:\n\n*   **Keywords:** **Factor Relevance, Principled Combination, Robustness, Validation.**\n*   **Advice:** Focus on *why* factors are relevant and *how* they interact fundamentally. Justify function choices based on problem structure, not just trial and error.\n*   **Avoid:** Blindly applying non-linear functions without clear justification. Over-tuning parameters without understanding their impact. Neglecting thorough testing and validation against diverse scenarios.\n*   **Explanation:** Instead of simply combining factors and using functions, deeply analyze their relationships. Validate assumptions and ensure robustness beyond training data.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}