```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers multiple factors, emphasizing simplicity and effectiveness:
    1.  Waste Ratio: Focuses on minimizing wasted space relative to the item size.
    2.  Binary Fit: A strong preference (but not exclusive) for bins that can accommodate the item.
    3.  Remaining Capacity: Prioritizes bins with higher remaining capacity after fitting the item,
        but only among bins that can accommodate the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9  # Small value to avoid division by zero

    # Binary Fit: Massive boost for bins that can fit, otherwise 0
    fit_mask = bins_remain_cap >= item
    priorities += fit_mask * 1000  # Large constant to strongly prefer fitting bins

    # Waste Ratio: Minimize waste relative to item size (only for fitting bins)
    waste = bins_remain_cap - item
    waste_ratio = np.where(fit_mask, waste / (item + epsilon), 0)  # Only calculate for fitting bins
    priorities -= waste_ratio  # Lower waste ratio is better

    # Remaining Capacity: Prioritize bins with more capacity *after* placement, but only among bins where it fits
    remaining_capacity_priority = np.where(fit_mask, bins_remain_cap - item, 0)
    priorities += remaining_capacity_priority * 0.1 # Add smaller weight

    return priorities
```
