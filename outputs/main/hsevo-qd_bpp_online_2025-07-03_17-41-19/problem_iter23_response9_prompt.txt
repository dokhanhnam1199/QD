{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines best-fit and remaining capacity considerations for bin selection.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    epsilon = 1e-9\n\n    waste = bins_remain_cap - item\n    fit_mask = waste >= 0\n    priorities = np.where(fit_mask, np.exp(-waste / (item + epsilon)), -np.inf)\n\n    capacity_factor = bins_remain_cap / (np.max(bins_remain_cap) + epsilon)\n    priorities = np.where(fit_mask, priorities + 0.5 * capacity_factor, priorities)\n\n    normalized_item_size = item / (np.max(bins_remain_cap) + epsilon)\n    priorities = np.where(fit_mask, priorities + 0.1 * (1 - normalized_item_size), priorities)\n\n    fill_ratio = item / (bins_remain_cap + epsilon)\n    fill_reward = np.where(fit_mask & (fill_ratio <= 1), np.exp(1 - np.abs(1 - fill_ratio)), -np.inf)\n    priorities = np.where(fit_mask, priorities + 0.2 * fill_reward, priorities)\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    A refined priority function for online bin packing that considers:\n    - Waste (lower waste is better)\n    - Bin utilization (higher utilization is better)\n    - Item size relative to bin size (favors bins well-suited to the item)\n    - Remaining capacity relative to average capacity.\n\n    This version avoids excessive use of exponentials and focuses on a more direct\n    combination of relevant factors, with careful handling of edge cases.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    epsilon = 1e-9  # Small constant to avoid division by zero\n\n    # Feasibility check: Can the item fit in the bin?\n    fit_mask = bins_remain_cap >= item\n\n    if not np.any(fit_mask):\n        return priorities  # No feasible bins, all priorities remain 0\n\n    # 1. Waste:  Smaller waste is better.  We only consider waste for feasible bins.\n    waste = bins_remain_cap - item\n    waste_priority = np.where(fit_mask, 1 - (waste / (np.max(bins_remain_cap[fit_mask]) + epsilon)), 0) # Normalize waste\n    waste_priority = np.where(waste_priority < 0, 0, waste_priority) #ensure waste priority is non-negative\n\n    # 2. Utilization: Higher utilization (item size / bin capacity) is better.\n    utilization = item / (bins_remain_cap + epsilon)\n    utilization_priority = np.where(fit_mask, utilization, 0) # Only consider utilization of feasible bins.\n\n    # 3. Item size relative to average remaining capacity.\n    avg_remaining_capacity = np.mean(bins_remain_cap)\n    size_difference = np.abs(item - avg_remaining_capacity)\n    size_priority = 1 - (size_difference / (np.max(bins_remain_cap) + epsilon))\n    size_priority = np.clip(size_priority, 0, 1) # ensure size_priority is between 0 and 1\n\n    # 4. Remaining capacity relative to other bin capacity:\n    capacity_ratio = bins_remain_cap / (np.max(bins_remain_cap) + epsilon)\n\n\n    # Combine the priorities with weights.  Experiment with these weights.\n    priorities = (\n        0.4 * waste_priority +\n        0.3 * utilization_priority +\n        0.1 * size_priority +\n        0.2 * capacity_ratio\n    )\n\n    # Infeasible bins get a very low priority\n    priorities = np.where(fit_mask, priorities, -np.inf)\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic considers waste, capacity, item size, and fill ratio, using exponentials and normalization for a nuanced priority score, while the worst only uses `item/bin_remain_cap` and `np.log`, without considering if the item fits. (2nd best) vs (2nd worst) is the same as (1st) vs (20th). Comparing (1st) vs (2nd), we see the functions are identical, indicating potential redundancy or a need for further differentiation. (3rd) vs (4th), heuristic 3 adds small capacity threshold (with severe penalty) which leads to better performance. Comparing (second worst) vs (worst), they all similarly use `item / bins_remain_cap` and `np.log`, which is oversimplified. Overall: The best heuristics incorporate multiple factors with carefully chosen weighting and normalization, while the worst rely on simple ratios, leading to suboptimal bin packing. Adding carefully considered factors improves results.\n- \nOkay, here's a refined perspective on self-reflection for heuristic design, aiming to avoid pitfalls:\n\n*   **Keywords:** **Factor Relevance, Principled Combination, Robustness, Validation.**\n*   **Advice:** Focus on *why* factors are relevant and *how* they interact fundamentally. Justify function choices based on problem structure, not just trial and error.\n*   **Avoid:** Blindly applying non-linear functions without clear justification. Over-tuning parameters without understanding their impact. Neglecting thorough testing and validation against diverse scenarios.\n*   **Explanation:** Instead of simply combining factors and using functions, deeply analyze their relationships. Validate assumptions and ensure robustness beyond training data.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}