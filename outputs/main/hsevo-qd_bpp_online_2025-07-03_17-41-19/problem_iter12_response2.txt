```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers multiple factors, with a focus on bin utilization
    and a refined approach to waste and stability.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9  # Small value to avoid division by zero and log of zero

    # 1. Waste Optimization: Prioritize bins that minimize waste, but with a smoother penalty.
    waste = bins_remain_cap - item
    fit = waste >= 0
    waste_penalty = np.zeros_like(bins_remain_cap, dtype=float)
    waste_penalty[fit] = np.exp(-waste[fit] / item)  # Scale waste by item size for better sensitivity
    waste_penalty[~fit] = -1e9 # High penalty for bins where item doesn't fit
    priorities += waste_penalty

    # 2. Fill Level Optimization:  Encourage bins that will be filled to a high percentage, but avoid overfilling. Use a sigmoid function for a smoother transition.
    fill_ratio = item / (bins_remain_cap + epsilon)
    fill_reward = np.where(fill_ratio <= 1, 1 / (1 + np.exp(-5 * (fill_ratio - 0.8))), 0)  # Sigmoid centered at 0.8 fill ratio
    priorities += fill_reward

    # 3. Stability Enhancement: Prioritize bins with remaining capacity close to a target value *after* placing the item. This promotes more balanced distribution.
    target_capacity = np.mean(bins_remain_cap) # Target capacity is the current average
    stability = -np.abs((bins_remain_cap - item) - target_capacity)
    priorities += stability * 0.1 # Reduced weight as stability is secondary

    # 4. Encourage re-using partially filled bins
    # This is different from filling the MOST filled bin, this encourages bins to be around half full
    fill_level = (bins_remain_cap - item)/(bins_remain_cap + epsilon)
    fill_level_priority = np.where(fit, np.exp(-np.abs(fill_level - 0.5)), -1e9)
    priorities += fill_level_priority * 0.2

    return priorities
```
