```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins where the item fits best without wasting too much space.
    It calculates a score based on how much of the bin's remaining capacity will be used.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give a very low priority (negative infinity) to bins that can't fit the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Calculate space utilization for feasible bins: item_size / remaining_capacity
    utilization = item / bins_remain_cap

    # Calculate wasted space ratio for feasible bins: (remaining_capacity - item_size) / remaining_capacity
    wasted_space_ratio = (bins_remain_cap - item) / bins_remain_cap

    # Give priority based on a combination of utilization and wasted space. Aiming for good utilization and small wasted space
    # A bin with utilization close to 1 and wasted_space close to 0 is preferred
    priorities[~infeasible_mask] = utilization[~infeasible_mask] - wasted_space_ratio[~infeasible_mask]**2 # Square the wasted space to penalize higher values.
    # Add a tiny bias towards more full bins if all feasible.
    priorities[~infeasible_mask] += 0.00001 * bins_remain_cap[~infeasible_mask]
    return priorities
```
