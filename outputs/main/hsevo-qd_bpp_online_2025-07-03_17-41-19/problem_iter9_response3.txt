```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function refines the logic of v1, emphasizing a balance
    between waste minimization, fill level optimization, and stability,
    while also considering the relative size of the item compared to the bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9  # Small value to avoid division by zero and log of zero

    # Waste Minimization: Prioritize bins with minimal waste, but with a decay.
    waste = bins_remain_cap - item
    waste_penalty = np.where(waste >= 0, np.exp(-2 * waste / (item + epsilon)), -np.inf)  # Exponential decay scaled to item size, harsher penalty
    priorities += waste_penalty

    # Fill Level Optimization: Encourage near-full bins. A more refined fill ratio.
    fill_ratio = item / (bins_remain_cap + epsilon)
    fill_reward = np.where(fill_ratio <= 1, np.exp(2 * (1 - np.abs(1 - fill_ratio))), -np.inf)  # Reward close to full, hard penalty for overfill
    priorities += fill_reward

    # Stability and Item Size Consideration: Favor bins close to item size, relatively.
    stability = -np.abs(bins_remain_cap - item) / (item + epsilon) # Normalized stability
    priorities += stability

    # Relative Item Size: Penalize bins that are significantly larger than the item.
    relative_size = item / (bins_remain_cap + epsilon)
    size_penalty = np.where(relative_size <= 1, np.exp(-5 * (1 - relative_size)), 0)
    priorities -= size_penalty # Subtract to penalize
    return priorities
```
