```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # 1. Feasibility: Disqualify bins that cannot fit the item
    feasible_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    priorities[~feasible_bins] = -np.inf  # Lowest priority

    # 2. Maximize Space Utilization (First-Fit Decreasing principle)
    remaining_space = bins_remain_cap - item
    priorities[feasible_bins] = -np.abs(remaining_space[feasible_bins])  # Closer to 0 is better
    
    # 3. Bonus for bins that fit the item almost perfectly
    close_fit_threshold = 0.1  # A bin is considered a close fit if remaining space is less than 10% of total capacity. Can tune
    total_bin_capacity = bins_remain_cap + remaining_space  # Approximate total capacity
    
    is_close_fit = feasible_bins & (remaining_space >=0) & (remaining_space / total_bin_capacity < close_fit_threshold)

    priorities[is_close_fit] += 1.0 # Small value to boost
    
    return priorities
```
