```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, fill ratio, and bin utilization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    # Waste minimization: Smaller waste is better
    waste = bins_remain_cap - item
    waste_penalty = np.where(waste >= 0, -waste, -np.inf)
    priorities += waste_penalty

    # Fill ratio: Encourages fuller bins, normalized by item size
    fill_ratio = item / (bins_remain_cap + item + epsilon)
    fill_reward = np.where(fill_ratio <= 1, fill_ratio, -np.inf)
    priorities += fill_reward

    # Bin utilization: Reward bins that are already relatively full
    bin_utilization = (1 - (bins_remain_cap / bins_remain_cap.max())) if bins_remain_cap.max() > 0 else 0
    utilization_reward = np.where(bins_remain_cap > 0, bin_utilization, -np.inf)

    priorities += 0.5*utilization_reward #scale factor

    return priorities
```
