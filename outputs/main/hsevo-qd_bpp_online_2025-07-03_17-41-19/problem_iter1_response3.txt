```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Give higher priority to bins where the item fits, but not too much larger
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask] # lower remaining ratio is better
    priorities[fit_mask] = 1 - priorities[fit_mask]  # higher value means higher priority

    # Apply a penalty for bins that are too empty after insertion (encourage filling)
    post_fill_remain = bins_remain_cap[fit_mask] - item
    empty_threshold = 0.2
    too_empty_mask = (post_fill_remain / 1.0) > empty_threshold  # 1.0 represents full capacity
    priorities[fit_mask][too_empty_mask] *= 0.5 #reduce priority

    # very important to prevent putting things into full/almost-full bins
    almost_full_threshold = 0.05
    almost_full_mask = (bins_remain_cap <= almost_full_threshold) # avoid adding to almost full bin
    priorities[almost_full_mask] = -1.0 #assign the lowest priority.

    return priorities
```
