```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, fill ratio, and bin stability."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    # Waste minimization
    waste = bins_remain_cap - item
    waste_penalty = np.where(waste >= 0, -waste, -np.inf)
    priorities += waste_penalty

    # Fill ratio (normalized by item size)
    fill_ratio = item / (bins_remain_cap + item + epsilon)
    fill_reward = np.where(fill_ratio <= 1, fill_ratio, -np.inf)
    priorities += fill_reward

    # Bin stability (avoid near-empty bins after placement)
    stability = bins_remain_cap - item # remaining cap after putting item
    stability_reward = np.where(stability > (np.mean(bins_remain_cap)+ epsilon), 0, -1 * (np.mean(bins_remain_cap)- stability))

    priorities += stability_reward

    return priorities
```
