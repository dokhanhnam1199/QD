```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by the concept of Hawking Radiation and the information paradox.
    We want to balance between packing bins efficiently and leaving options
    open for future items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Step 1: Filter bins that can actually fit the item.
    eligible_bins = bins_remain_cap >= item

    # Step 2: Initialize priorities.  Ineligible bins get -inf priority.
    priorities = np.full(bins_remain_cap.shape, -np.inf)
    priorities[eligible_bins] = 0  # Give eligible bins a starting priority of 0

    # Step 3: Calculate "Hawking Radiation" term.  This represents the entropy
    # increase associated with filling a bin.  Fuller bins radiate less information.
    remaining_fraction = bins_remain_cap[eligible_bins] / np.max(bins_remain_cap) #Scale remainig cap to 0-1 to avoid numerical instability if max is really big.
    radiation = np.exp(-10*remaining_fraction) #Exponential decay of "Hawking radiation" with fullness

    # Step 4: Calculate "Information Density" term.  Packing items tightly increases
    # information density, which is generally good for optimization.  The smaller
    # the leftover space, the higher the density.

    waste = bins_remain_cap[eligible_bins] - item
    information_density = np.where(waste > 0, np.exp(-10*waste / item), 1e10)  # Prevent div by zero; vastly prefer tight fits

    # Step 5:  Combine the terms.  Weigh information density more heavily than
    # "Hawking Radiation", encouraging tight packing.
    priorities[eligible_bins] = 0.7 * information_density + 0.3 * radiation

    #Step 6: Bonus for almost full bins
    almost_full_bonus = np.where(bins_remain_cap[eligible_bins] - item < 0.1, 1, 0)
    priorities[eligible_bins] += almost_full_bonus

    return priorities
```
