```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Give very low priority to bins that cannot fit the item
    priorities[remaining_capacities < 0] = -np.inf
    
    # For bins that can fit the item:
    
    # 1. Fill almost full bins (Minimize wasted space)
    almost_full = (bins_remain_cap >= item) & (remaining_capacities <= 0.1) # Tolerate a small waste
    priorities[almost_full] = 1000 #Very high priority for these bins

    # 2. Balance the remaining capacity (avoid too empty and too full)
    valid_bins = (bins_remain_cap >= item) & (~almost_full)

    if np.any(valid_bins): #Only calculate if we have any valid bins

        cap_diff = np.abs(remaining_capacities[valid_bins] - np.mean(remaining_capacities[valid_bins]))
        # Normalize cap_diff to be between 0 and 1, and penalize large cap_diff.
        priorities[valid_bins] = 1 - (cap_diff / np.max(cap_diff))

        #3. Secondary priority is based on how full it will be after adding item
        fill_ratio = item / bins_remain_cap[valid_bins]
        priorities[valid_bins] += fill_ratio
    
    return priorities
```
