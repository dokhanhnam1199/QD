```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, waste_exp_scale: float = 1.0, fill_exp_scale: float = 1.0, stability_weight: float = 0.1, epsilon: float = 1e-6) -> np.ndarray:
    """Combines waste minimization and fill level considerations."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Waste: Prioritize bins with minimal waste.
    waste = bins_remain_cap - item
    waste_penalty = np.where(waste >= 0, np.exp(-waste * waste_exp_scale), -np.inf)
    priorities += waste_penalty

    # Fill Level: Encourage filling bins.
    fill_ratio = item / (bins_remain_cap + epsilon)
    fill_reward = np.where(fill_ratio <= 1, fill_ratio * fill_exp_scale, -np.inf) # Linear reward
    priorities += fill_reward

    # Stability: Favors bins closest to item size
    stability = -np.abs(bins_remain_cap - item) * stability_weight
    priorities += stability

    return priorities
```
