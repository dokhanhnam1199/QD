```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function refines the approach by:
    1. Waste Optimization: Focuses on minimizing waste with a more nuanced penalty.
    2. Fill Level Balancing: Encourages filling bins without excessive fragmentation, and avoids overfilling.
    3. Remaining Capacity Emphasis: Prioritizes bins with suitable remaining capacity, avoiding very empty or almost full bins.
    4. Fragmentation Avoidance: Directly penalizes bins that would lead to small remaining fragments after packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9  # Small value to avoid division by zero

    # Waste Optimization: Prioritize bins where the item fits well, minimizing waste.
    waste = bins_remain_cap - item
    fit = waste >= 0  # Boolean array indicating if the item fits

    # Apply a more nuanced waste penalty only if the item fits
    waste_penalty = np.where(fit, -np.abs(waste / (bins_remain_cap + epsilon)), -np.inf)  # Normalized waste penalty, -inf if doesn't fit
    priorities += waste_penalty

    # Fill Level Balancing: Encourage filling, avoid overfilling and excessive fragmentation
    fill_ratio = item / (bins_remain_cap + epsilon)
    fill_reward = np.where(fit, np.exp(-np.abs(fill_ratio - 0.7)), -np.inf)  # Encourage fill close to 70%
    priorities += fill_reward

    # Remaining Capacity Emphasis: Give a boost to bins with ideal remaining capacity.
    capacity_preference = np.exp(-np.abs(bins_remain_cap - item * 1.5)) #prefer bins with remain cap slightly bigger than item
    priorities += capacity_preference

    # Fragmentation Avoidance: Discourage creating tiny fragments
    fragment_penalty = np.where(fit & (waste < 0.1), -10, 0)  # Harsh penalty for creating fragments < 0.1 (or other suitable threshold)
    priorities += fragment_penalty

    return priorities
```
