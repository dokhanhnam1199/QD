```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste, fill level, and capacity.
    Combines best-fit, capacity awareness, and fill ratio considerations.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    waste = bins_remain_cap - item
    fit_mask = waste >= 0

    # Best-fit component
    priorities = np.where(fit_mask, np.exp(-2 * waste / (item + epsilon)), -np.inf)

    # Capacity-aware component
    max_cap = np.max(bins_remain_cap) + epsilon
    capacity_factor = bins_remain_cap / max_cap
    priorities = np.where(fit_mask, priorities + 0.3 * np.sqrt(capacity_factor), priorities)

    # Fill ratio reward
    fill_ratio = item / (bins_remain_cap + epsilon)
    fill_reward = np.where(fit_mask & (fill_ratio <= 1), np.exp(-np.abs(1 - fill_ratio)), -np.inf)
    priorities = np.where(fit_mask, priorities + 0.15 * fill_reward, priorities)

    # Stability (Closeness to Item Size):
    stability = -np.abs(bins_remain_cap - item) / max_cap
    priorities = np.where(fit_mask, priorities + 0.05 * stability, priorities)

    return priorities
```
