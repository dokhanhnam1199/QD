```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can fit the item reasonably well,
    avoiding both near-empty bins (wasteful) and bins that are almost full
    (risk of overflow). It uses a combination of remaining capacity and
    a 'sweet spot' heuristic.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate how much space will be left if the item is placed in the bin
            remaining_after_placement = cap - item

            # Heuristic 1: Prioritize bins where the remaining space is a reasonable fraction
            # of the item size (e.g., 0.1 to 0.5 of the item size)
            if 0.1 * item <= remaining_after_placement <= 0.5 * item:
                priorities[i] += 5.0  # Boost priority for this "sweet spot"

            # Heuristic 2: Preferentially fill bins that are already somewhat full
            # so long as sufficient capacity remains to accept the current item.
            #This is a proxy for preferring to "finish off" partial bins.
            priorities[i] += (1 - (cap / bins_remain_cap.max())) * 2 #Normalize remaining cap

            # Heuristic 3: Slight preference against filling almost full bins.

            if item > 0.8 * cap: #item would fill above 80%

                priorities[i] -=1 #decrease priorirty
            #Heuristic 4: Slight preference for almost empty bins if its the only bin that fits.

            # Base priority is inversely proportional to wasted space
            # Higher priority for bins that would be more full after placement
            priorities[i] += item / cap  # filling percentage

        else:
            priorities[i] = -np.inf  # Impossible to place, very low priority.

    return priorities
```
