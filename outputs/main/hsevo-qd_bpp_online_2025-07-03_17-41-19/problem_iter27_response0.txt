```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, remaining capacity, and fill ratio considerations with improved normalization and penalties."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    waste = bins_remain_cap - item
    fit_mask = waste >= 0

    # Best-Fit component: prioritize smaller waste, but penalize if waste is too large relative to item size
    waste_ratio = waste / (item + epsilon)
    best_fit_priority = np.where(fit_mask, np.exp(-5 * waste_ratio), -np.inf)  # Increased sensitivity to waste ratio
    priorities = np.where(fit_mask, priorities + best_fit_priority, priorities)

    # Remaining Capacity component: Favor bins with higher remaining capacity, but with diminishing returns
    max_cap = np.max(bins_remain_cap) + epsilon
    capacity_normalized = bins_remain_cap / max_cap
    capacity_priority = np.sqrt(capacity_normalized)  # Diminishing returns as capacity increases
    priorities = np.where(fit_mask, priorities + 0.4 * capacity_priority, priorities)

    # Fill Ratio component: Reward bins that are filled close to full, but penalize bins that are overfilled.
    fill_ratio = item / (bins_remain_cap + epsilon)
    fill_reward = np.where(fit_mask, np.exp(-5 * np.abs(1 - fill_ratio)), -np.inf) # Increased sensitivity to fill ratio
    priorities = np.where(fit_mask, priorities + 0.5 * fill_reward, priorities)

    # Penalize bins that are significantly larger than the item (to avoid leaving huge gaps)
    large_bin_penalty = np.where(fit_mask & (bins_remain_cap > 3 * item), -0.2, 0)  # Moderate penalty for significantly large bins
    priorities = np.where(fit_mask, priorities + large_bin_penalty, priorities)

    return priorities
```
