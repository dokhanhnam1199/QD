```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization and fill level with a stability factor."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    # Waste minimization: Smaller waste is better
    waste = bins_remain_cap - item
    waste_penalty = np.where(waste >= 0, -waste, -np.inf)
    priorities += waste_penalty

    # Fill level: Encourages fuller bins
    fill_ratio = item / (bins_remain_cap + epsilon)
    fill_reward = np.where(fill_ratio <= 1, fill_ratio, -np.inf)
    priorities += fill_reward

    # Stability: Prefer bins with higher remaining capacity (avoid overfilling in future)
    stability_reward = bins_remain_cap / (np.sum(bins_remain_cap) + epsilon)
    priorities += stability_reward

    return priorities
```
