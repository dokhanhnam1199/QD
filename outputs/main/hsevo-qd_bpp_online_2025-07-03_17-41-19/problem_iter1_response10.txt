```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Prioritize bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] = 1

    # Among bins that can fit, prioritize bins with smaller remaining capacity
    # after placing the item (i.e., minimize wasted space)
    remaining_space = bins_remain_cap[can_fit] - item
    priorities[can_fit] += 1 / (remaining_space + 0.0001) # Avoid division by zero
    # Alternatively prioritize based on how full the bin would be
    priorities[can_fit] += item / bins_remain_cap[can_fit]

    #For the bins that cannot fit the current item, assign a very small priority to avoid assigning new item in a completely new bin
    cannot_fit=bins_remain_cap < item
    priorities[cannot_fit] = -np.inf  #Avoid bins that can't fit

    return priorities
```
