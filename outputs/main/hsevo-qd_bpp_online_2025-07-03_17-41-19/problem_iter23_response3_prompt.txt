{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins based on a combination of factors,\n    aiming for a balance between minimizing waste, maximizing fill, and maintaining\n    stability. It refines the approach in priority_v1 by using a more targeted\n    strategy for each component.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    epsilon = 1e-9  # Small value to avoid division by zero\n\n    # 1. Waste Minimization (Primary Goal)\n    waste = bins_remain_cap - item\n    # Only consider bins where the item fits\n    feasible_bins = waste >= 0\n    if not np.any(feasible_bins):\n        return priorities # No feasible bin, return all zeros\n\n    # Prioritize bins with minimal waste using a reciprocal function. Clipping\n    # waste at a small value prevents overly large priorities for nearly full bins.\n    clipped_waste = np.clip(waste[feasible_bins], a_min=epsilon, a_max=None)  # Ensure waste is never zero.\n    waste_priority = 1 / clipped_waste\n    priorities[feasible_bins] += waste_priority\n\n    # 2. Fill Level Encouragement (Secondary, conditional on feasibility)\n    # Encourage filling the bin as much as possible, relative to its *original* size.\n    # This helps prevent fragmenting larger bins early on.\n    fill_ratio = item / (bins_remain_cap[feasible_bins] + epsilon)\n\n    # Use a sigmoid function to gently reward higher fill ratios, but prevent extreme values.\n    # Sigmoid squashes the fill_ratio to be between 0 and 1\n    fill_priority = 1 / (1 + np.exp(-5 * (fill_ratio - 0.5))) # Steep sigmoid centered at fill_ratio=0.5\n    priorities[feasible_bins] += fill_priority\n    \n    # 3. Stability (Tertiary) - Prefer bins close to item size, but with a small weight\n    stability = -np.abs(bins_remain_cap[feasible_bins] - item)\n    # Scale stability to have a smaller impact\n    stability_priority = stability * 0.1\n    priorities[feasible_bins] += stability_priority\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic considers waste, capacity, item size, and fill ratio, using exponentials and normalization for a nuanced priority score, while the worst only uses `item/bin_remain_cap` and `np.log`, without considering if the item fits. (2nd best) vs (2nd worst) is the same as (1st) vs (20th). Comparing (1st) vs (2nd), we see the functions are identical, indicating potential redundancy or a need for further differentiation. (3rd) vs (4th), heuristic 3 adds small capacity threshold (with severe penalty) which leads to better performance. Comparing (second worst) vs (worst), they all similarly use `item / bins_remain_cap` and `np.log`, which is oversimplified. Overall: The best heuristics incorporate multiple factors with carefully chosen weighting and normalization, while the worst rely on simple ratios, leading to suboptimal bin packing. Adding carefully considered factors improves results.\n- \nOkay, here's a refined perspective on self-reflection for heuristic design, aiming to avoid pitfalls:\n\n*   **Keywords:** **Factor Relevance, Principled Combination, Robustness, Validation.**\n*   **Advice:** Focus on *why* factors are relevant and *how* they interact fundamentally. Justify function choices based on problem structure, not just trial and error.\n*   **Avoid:** Blindly applying non-linear functions without clear justification. Over-tuning parameters without understanding their impact. Neglecting thorough testing and validation against diverse scenarios.\n*   **Explanation:** Instead of simply combining factors and using functions, deeply analyze their relationships. Validate assumptions and ensure robustness beyond training data.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}