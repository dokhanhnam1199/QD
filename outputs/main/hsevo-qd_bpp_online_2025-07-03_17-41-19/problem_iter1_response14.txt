```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First, prioritize bins that can fit the item
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = 1  # Basic fit

    # For fitting bins, give higher priority to bins that are closer to full after packing
    remaining_after_pack = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] += 1 / (remaining_after_pack + 0.0001) # avoid division by zero, favoring smaller remainders. Higher score means preferred.

    # Penalize bins where item won't fit (strongly)
    not_fit_mask = ~fit_mask # the tilda (~) operator means "not"
    priorities[not_fit_mask] = - (item - bins_remain_cap[not_fit_mask])**2 # huge negative priority based on difference

    return priorities
```
