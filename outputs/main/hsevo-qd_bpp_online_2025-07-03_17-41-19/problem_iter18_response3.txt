```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function focuses on minimizing waste and promoting balanced bin utilization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9  # Small value to avoid division by zero

    # Waste-focused priority:  Bins with the smallest *positive* waste are preferred.
    waste = bins_remain_cap - item
    valid_bins = waste >= 0
    
    if np.any(valid_bins): # if there are bins with enough space
        priorities[valid_bins] = -waste[valid_bins] # Smaller waste is better (more negative, thus higher priority)
        priorities[~valid_bins] = -np.inf  # Disqualify bins where the item doesn't fit
    else:
        # If no bin fits, assign a low priority to all. We are handling this case gracefully
        priorities[:] = -np.inf
    
    # Bin Utilization Balance: Encourage filling bins somewhat evenly.
    # Add a bonus for bins that are neither too full nor too empty *after* adding the item
    future_remain_cap = bins_remain_cap - item
    future_remain_cap = np.clip(future_remain_cap, a_min=0, a_max=None)  # Ensure no negative capacities
    
    # Calculate a scaled remaining capacity to promote balance. We want to avoid extreme values.
    balance_bonus = np.exp(-np.abs(future_remain_cap - np.mean(future_remain_cap[future_remain_cap > 0])))
    
    priorities += balance_bonus # Add the balance bonus

    return priorities
```
