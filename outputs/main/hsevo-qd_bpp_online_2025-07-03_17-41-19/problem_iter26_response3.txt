```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, normalized capacity, and a small capacity penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    # Best Fit: Exponentially prefer smaller waste
    waste = bins_remain_cap - item
    fit_mask = waste >= 0
    priorities = np.where(fit_mask, np.exp(-waste / (item + epsilon)), -np.inf)

    # Normalized Capacity: Favor bins with more remaining capacity, scaled to [0, 1]
    capacity_factor = bins_remain_cap / (np.max(bins_remain_cap) + epsilon)
    priorities = np.where(fit_mask, priorities + 0.5 * capacity_factor, priorities)

    # Small Capacity Threshold: Penalize bins that are almost full. Stronger penalty.
    threshold = 0.2 # Adjusted threshold
    small_capacity_penalty = np.where(bins_remain_cap / (np.max(bins_remain_cap) + epsilon) < threshold, -20, 0) #Increased penalty
    priorities += small_capacity_penalty
    
    return priorities
```
