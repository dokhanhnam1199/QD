```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function introduces a non-linear scoring function based on both
    remaining capacity and the "nearness" of the item size to the remaining
    capacity.  It also adds a small bonus to bins that can fit the item
    perfectly.  The goal is to avoid fragmentation by encouraging near-perfect
    fits and to prefer bins with sufficient capacity but without being overly
    large.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Small constant to avoid division by zero
    epsilon = 1e-6

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Base score: Higher remaining capacity yields a higher score, but with diminishing returns.
            priorities[i] = np.sqrt(cap)

            # Encourage near-perfect fits: Higher the value, higher the risk
            nearness = np.exp(-np.abs(cap - item) / (item + epsilon))
            priorities[i] += 2 * nearness

            # Bonus for perfect fit
            if np.abs(cap - item) < epsilon:  # Approximately equal. Prevents small difference
              priorities[i] += 5 # big bonus

            # Penalize extremely large empty space
            if cap > 2 * item:
                priorities[i] -= np.log(cap / item)  # Log penalty

        else:
            priorities[i] = -1e9  # Very low priority if it doesn't fit. A very large negative number.

    return priorities
```
