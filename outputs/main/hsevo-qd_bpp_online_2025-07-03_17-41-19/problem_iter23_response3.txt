```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on waste, fill ratio, and a size difference penalty."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return priorities

    waste = bins_remain_cap[feasible_bins] - item
    waste_priority = 1 / (waste + epsilon)
    priorities[feasible_bins] += waste_priority

    fill_ratio = item / (bins_remain_cap[feasible_bins] + epsilon)
    fill_priority = fill_ratio  # Linear fill reward
    priorities[feasible_bins] += fill_priority

    size_diff = np.abs(bins_remain_cap[feasible_bins] - item)
    size_diff_penalty = -size_diff * 0.05  # Penalize size differences
    priorities[feasible_bins] += size_diff_penalty

    return priorities
```
