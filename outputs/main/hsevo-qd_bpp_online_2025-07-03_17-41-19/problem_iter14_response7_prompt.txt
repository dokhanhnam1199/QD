{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines waste minimization and fill level to improve priority.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    epsilon = 1e-9\n\n    # Waste minimization: Smaller waste is better\n    waste = bins_remain_cap - item\n    waste_penalty = np.where(waste >= 0, -waste, -np.inf)\n    priorities += waste_penalty\n\n    # Fill level: Encourages fuller bins\n    fill_ratio = item / (bins_remain_cap + epsilon)\n    fill_reward = np.where(fill_ratio <= 1, fill_ratio, -np.inf)\n    priorities += fill_reward\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic considers waste, fill level, bin utilization, best fit, and avoidance of near-empty bins, using specific penalties and rewards. The worst heuristic only calculates the negative log of the ratio of item size to remaining bin capacity.\nComparing (2nd) vs (19th), the second-best incorporates waste, fill level, number of items (approximated), and stability, using scaling factors for each. The 19th heuristic only considers the negative log of the ratio of item size to remaining bin capacity.\nComparing (1st) vs (2nd), we see the 1st heuristic uses hardcoded weights and specific conditions for bonuses/penalties, while the 2nd heuristic uses scaling factors that can be tuned.\nComparing (3rd) vs (4th), the 3rd heuristic combines waste minimization and a modified fill ratio, while the 4th adds a balance factor and an adaptability parameter (alpha).\nComparing (second worst) vs (worst), we see both calculate the same priorities; they are identical.\nOverall: The better heuristics incorporate multiple factors like waste, fill level, bin utilization, and stability, often using exponential or sigmoid functions to model the rewards and penalties. They also include mechanisms for balancing bin utilization and avoiding edge cases. The worse heuristics are simplistic, considering only the ratio of item size to remaining capacity, which is insufficient for effective bin packing. Tunable parameters (like `alpha` or scaling factors) appear in the better heuristics, which provides more flexibility to adapt for different problem instances.\n- \nOkay, here's a redefinition of \"Current Self-Reflection\" focused on designing better heuristics, avoiding the pitfalls identified in \"Ineffective Self-Reflection,\" and offering actionable advice:\n\n*   **Keywords:** Iterative refinement, problem-specific adaptation, transparent rationale, validation.\n*   **Advice:** Begin with a minimal, interpretable heuristic. Systematically add complexity *only* when justified by data. Continuously validate the heuristic's performance on relevant problem instances. Document the *why* behind each design choice.\n*   **Avoid:** Premature optimization, blindly applying non-linear functions without justification, introducing parameters without a clear purpose, neglecting computational cost.\n*   **Explanation:** Focus on building understanding first. Don't over-engineer. Understand each element's contribution before adding more. Verification is key.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}