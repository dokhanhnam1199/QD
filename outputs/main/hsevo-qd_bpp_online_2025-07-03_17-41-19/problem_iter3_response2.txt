```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers multiple factors, with adjustments to v1:
    1. Waste: Prioritizes bins where the item fits relatively well, minimizing wasted space.  Handles edge cases of very small waste.
    2. Fill Level: Encourages filling bins as much as possible, with a tunable preference.
    3. Item Fragmentation:  Penalizes creating bins with remaining space significantly larger or smaller than the item size.
    4. Balance: Encourages usage of bins with mid-range capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9  # Small value to avoid division by zero

    # Waste: Prioritize bins where the item fits relatively well.
    waste = bins_remain_cap - item
    fit = waste >= -epsilon  # Consider near fits
    waste_penalty = np.where(fit, np.exp(-5 * waste), -np.inf) # Exponential decay for waste, harsher penalty for overfill, increased sensitivity
    priorities += waste_penalty

    # Fill Level: Encourage filling bins, but not too much.  Adjustable fill target.
    fill_ratio = item / (bins_remain_cap + epsilon)
    fill_reward = np.where(fill_ratio <= 1, np.exp(1.5 * fill_ratio), -np.inf) # Target slightly higher fill ratio
    priorities += fill_reward

    # Item Fragmentation Penalty: Penalize bins where the remaining space is far from the item size.
    fragmentation_penalty = -np.abs(waste - item)  #Prefer waste to be similar to item
    fragmentation_penalty = np.where(fit, np.exp(fragmentation_penalty), 0) # only apply when fit
    priorities += 0.5 * fragmentation_penalty # Reduce weight

    # Balance: Encourage usage of bins with average remaining capacity.
    avg_cap = np.mean(bins_remain_cap)
    balance_reward = -np.abs(bins_remain_cap - avg_cap)
    priorities += 0.1 * balance_reward # Reduce weight

    return priorities
```
