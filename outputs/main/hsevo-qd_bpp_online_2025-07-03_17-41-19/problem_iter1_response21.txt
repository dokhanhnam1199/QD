```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins with remaining capacity slightly larger than the item,
    aiming to minimize wasted space. It also discourages placing items in almost-full bins
    to avoid excessive fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Prioritize bins that can fit the item, but not by too much.
    # This avoids extreme fragmentation.  The 'sweet spot' is around 1.0 to 1.2 * item_size.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = np.exp(-(bins_remain_cap[fit_mask] - item) / item)  # Exponential decay

    # 2. Slightly boost bins that are closer to full, but not completely full.
    # This attempts to consolidate items. However, don't boost too much when bins are nearly full.
    near_full_mask = (bins_remain_cap > 0) & (bins_remain_cap < item * 1.1)  # allow slightly more than the item size to prioritize almost full bins a bit to utilize it.
    priorities[near_full_mask] += 0.5

    #3 Penalize bins with insufficient space so they are tried last
    insufficient_mask = bins_remain_cap < item
    priorities[insufficient_mask] -= 1e9
    return priorities
```
