```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    My improved heuristic factors in:
    1. Whether the item fits in the bin. Bins that can't fit get a priority of -np.inf.
    2. A 'wastage' term: Prefer bins that have a remaining capacity close to the item size.
    3. A 'balance' term: Prefer bins that are more full (lower remaining capacity).
    4. A 'near-full' boost: If the bin will be nearly full after adding the item, give it a substantial priority boost.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Impossible to place item in the bins
    no_fit_mask = bins_remain_cap < item
    priorities[no_fit_mask] = -np.inf
    
    # Where item can fit, compute the waste
    fit_mask = ~no_fit_mask
    
    if np.any(fit_mask):
        waste = bins_remain_cap[fit_mask] - item
        
        # Prefer less waste
        waste_priority = -np.abs(waste) 
        
        #Prefer more full bins
        balance_priority = 1 - (bins_remain_cap[fit_mask])
            
        # Near-full boost
        near_full_threshold = 0.1
        near_full_boost = 10.0
        near_full_mask = (waste >= 0) & (waste <= near_full_threshold)
        waste_priority[near_full_mask] += near_full_boost
            
        priorities[fit_mask] = waste_priority + balance_priority
        
    return priorities
```
