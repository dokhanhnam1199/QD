```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid priority: Waste, fill ratio, and capacity-weighted fill."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    # Waste minimization
    waste = bins_remain_cap - item
    waste_penalty = np.where(waste >= 0, -waste, -np.inf)
    priorities += waste_penalty

    # Fill level reward
    fill_ratio = item / (bins_remain_cap + epsilon)
    fill_reward = np.where(fill_ratio <= 1, fill_ratio, -np.inf)
    priorities += fill_reward

    # Capacity-weighted fill: Favor bins with larger remaining capacity if fill is good
    capacity_weighted_fill = bins_remain_cap * fill_ratio
    priorities += np.where(fill_ratio <= 1, capacity_weighted_fill, -np.inf) # apply only to feasible bins

    return priorities
```
