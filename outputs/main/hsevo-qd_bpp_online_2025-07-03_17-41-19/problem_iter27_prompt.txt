{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines best-fit and remaining capacity considerations for bin selection.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    epsilon = 1e-9\n\n    waste = bins_remain_cap - item\n    fit_mask = waste >= 0\n    priorities = np.where(fit_mask, np.exp(-waste / (item + epsilon)), -np.inf)\n\n    capacity_factor = bins_remain_cap / (np.max(bins_remain_cap) + epsilon)\n    priorities = np.where(fit_mask, priorities + 0.5 * capacity_factor, priorities)\n\n    normalized_item_size = item / (np.max(bins_remain_cap) + epsilon)\n    priorities = np.where(fit_mask, priorities + 0.1 * (1 - normalized_item_size), priorities)\n\n    fill_ratio = item / (bins_remain_cap + epsilon)\n    fill_reward = np.where(fit_mask & (fill_ratio <= 1), np.exp(1 - np.abs(1 - fill_ratio)), -np.inf)\n    priorities = np.where(fit_mask, priorities + 0.2 * fill_reward, priorities)\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's redefine \"Current self-reflection\" for designing better heuristics, avoiding the pitfalls of \"Ineffective self-reflection,\" and aiming for actionable advice.\n\n**Redefined \"Current Self-Reflection\":**\n\n*   **Keywords:** Multi-factor, normalization, weighting, edge-case handling, domain knowledge, rewards/penalties, scaling, clipping, constraints, feasibility.\n\n*   **Advice:** Prioritize identifying *truly* relevant factors. Design mathematical functions that realistically model factor relationships and enforce constraints. Consider both positive (rewards) and negative (penalties) impacts, and implement scaling/clipping to maintain robustness.\n\n*   **Avoid:** Overly complex, generic non-linear functions (e.g., *just* using exponentials/sigmoids without justification). Premature optimization.\n\n*   **Explanation:** The goal is to create heuristics based on a clear understanding of the problem. Keep it simple initially and build up complexity *only* as needed. Avoid using advanced math functions without a strong rationale tied to the problem domain.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}