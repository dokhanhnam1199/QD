```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization and fill level with a tuned balance."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9
    waste = bins_remain_cap - item
    waste_penalty = np.where(waste >= 0, -waste, -np.inf)
    priorities += waste_penalty

    fill_ratio = item / (bins_remain_cap + epsilon)
    fill_reward = np.where(fill_ratio <= 1, fill_ratio, -np.inf)
    priorities += 0.5 * fill_reward  # Tuned balance

    # Add small bonus for bins that are already somewhat full. This promotes stability
    initial_fill = 1 - (bins_remain_cap / (np.max(bins_remain_cap)+epsilon))
    stability_bonus = np.where(initial_fill > 0.5, 0.1 * initial_fill, 0)
    priorities += stability_bonus
    return priorities
```
