```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A refined priority function for online bin packing, considering best-fit,
    remaining capacity, and fill ratio with improved weighting and handling
    of edge cases. Aims for a balance between packing efficiency and bin utilization.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9  # Small constant to avoid division by zero

    # 1. Feasibility Check: Identify bins that can accommodate the item
    fit_mask = bins_remain_cap >= item

    # 2. Waste Minimization (Best-Fit component)
    waste = bins_remain_cap - item
    # Prioritize bins with minimal waste, but only if they fit.  Use inverse of waste + small offset.
    priorities = np.where(fit_mask, 1.0 / (waste + epsilon), -np.inf)  # High priority to small waste

    # 3. Capacity Utilization (Remaining Capacity component)
    # Give preference to bins that are already relatively full to consolidate items.
    # This promotes efficient space utilization.
    capacity_ratio = (np.max(bins_remain_cap) - bins_remain_cap + epsilon) / (np.max(bins_remain_cap) + epsilon)

    priorities = np.where(fit_mask, priorities + 0.3 * capacity_ratio, priorities) #Add Capacity ratio to the priorities if bins are feasible.
    # 4. Fill Ratio Reward: Incentivize bins with fill ratios close to 1
    #   Reward bins where the item fills a significant portion of the remaining capacity.
    fill_ratio = item / (bins_remain_cap + epsilon)
    #Reward packing bins almost completely.
    fill_reward = np.exp(-np.abs(1 - fill_ratio) * 5)
    priorities = np.where(fit_mask, priorities + 0.5 * fill_reward, priorities)

    # 5. Large Item Placement Strategy: Place large items in emptier bins

    item_size_ratio = item / (np.max(bins_remain_cap)+epsilon)
    large_item_bonus = bins_remain_cap / (np.max(bins_remain_cap) + epsilon)

    #If item is larger than some threshold prioritize larger bins
    priorities = np.where(fit_mask & (item_size_ratio > 0.5), priorities + 0.2*large_item_bonus, priorities)

    return priorities
```
