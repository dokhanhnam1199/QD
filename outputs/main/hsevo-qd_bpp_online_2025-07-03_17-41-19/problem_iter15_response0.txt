```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on a refined set of criteria:
    1.  Space Utilization: Aims to minimize wasted space while also considering the overall fill level of the bin.
    2.  Item Fit: Prioritizes bins where the item fits with a small amount of remaining space.
    3.  Bin Level Balancing: Encourages balancing the fill levels across all bins to prevent some bins from becoming full while others remain empty.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of the same size as bins_remain_cap, with the priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9  # Small value to avoid division by zero

    # Space Utilization: Minimize waste, but consider overall fill level.
    waste = bins_remain_cap - item
    # Only consider bins that can fit the item
    feasible_bins = waste >= 0
    if not np.any(feasible_bins):
        return priorities # if no bin can accommodate, return default priorities.

    waste_normalized = waste[feasible_bins] / (bins_remain_cap[feasible_bins] + epsilon) # Waste as proportion of capacity
    waste_priority = np.exp(-5 * waste_normalized)  # Exponential decay, higher weight on smaller waste

    priorities[feasible_bins] += waste_priority

    # Item Fit: Prefer bins where the item fits snugly (small remaining space).
    item_fit = np.exp(-10 * np.abs(waste[feasible_bins])/item) # Prefer waste close to 0, relative to item size
    priorities[feasible_bins] += item_fit

    # Bin Level Balancing: Encourage filling bins to a similar level.
    # This encourages use of emptier bins while others start filling up
    bins_utilization = 1 - (bins_remain_cap + epsilon) / (np.max(bins_remain_cap) + epsilon)
    bin_balance_priority = np.exp(-5 * bins_utilization)
    priorities += bin_balance_priority
  
    return priorities
```
