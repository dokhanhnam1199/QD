```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers multiple factors, refined for better performance:
    1. Waste: Prioritizes bins where the item fits well, using a more nuanced penalty.
    2. Fill Level: Emphasizes filling bins close to full, but avoids overfilling.
    3. Item Fragmentation: Discourages creating small remaining spaces that are hard to fill later.
    4. Best Fit Preference: Strongly favors bins that offer a very close fit (smallest possible waste).
    5. Remaining Capacity Diversity: Introduces a penalty for selecting bins that leave similar remaining capacities across all bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9  # Small value to avoid division by zero

    # Waste: Prioritize bins where the item fits relatively well, with a smoother penalty.
    waste = bins_remain_cap - item
    fit = waste >= 0
    waste_penalty = np.zeros_like(waste, dtype=float)
    waste_penalty[fit] = np.exp(-waste[fit] / (item + epsilon))  # Scale waste by item size

    waste_penalty[~fit] = -np.inf  # Harsh penalty for overfill

    priorities += waste_penalty

    # Fill Level: Encourage filling bins close to full.
    fill_ratio = item / (bins_remain_cap + epsilon)
    fill_reward = np.where(fill_ratio <= 1, np.power(fill_ratio, 2), -np.inf)  # Emphasize near-full bins
    priorities += fill_reward

    # Item Fragmentation: Discourage small remaining spaces.
    remaining_space_penalty = np.where(fit, -np.exp(-bins_remain_cap), 0)
    priorities += remaining_space_penalty

    # Best Fit Preference: Strongly favor bins that offer the best fit.
    min_waste = np.min(waste[fit] if np.any(fit) else np.array([np.inf])) #Handles edge case
    best_fit_bonus = np.where(np.abs(waste - min_waste) < epsilon, 1, 0) * 2  # Substantially reward best fit
    priorities += best_fit_bonus

    #Remaining Capacity Diversity penalty
    if np.sum(fit) > 1:
       capacities_after_placement = bins_remain_cap - item
       capacities_after_placement = capacities_after_placement[fit]

       std_dev_capacity = np.std(capacities_after_placement)
       diversity_penalty = -np.exp(-std_dev_capacity)
       priorities[fit] += diversity_penalty

    return priorities
```
