```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version prioritizes bins that can accommodate the item closely,
    but also penalizes near-empty bins unless absolutely necessary.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give a base score inversely proportional to the wasted space
    waste = bins_remain_cap - item
    # Prioritize bins that *can* accommodate the item
    feasible_bins = waste >= 0
    if not np.any(feasible_bins):
      #if no feasible bin available. select the bin with minimum waste.
      min_waste_bin = np.argmin(bins_remain_cap)
      priorities[min_waste_bin] = 1.0
      return priorities

    waste[~feasible_bins] = np.inf  # Exclude infeasible bins
    priorities[feasible_bins] = 1.0 / (waste[feasible_bins] + 0.00001) # small value to avoid dividing by zero, and smoothing


    # Further prioritize bins with higher fill ratio to pack bins densely
    fill_ratio = item / bins_remain_cap
    fill_ratio[~feasible_bins] = 0
    priorities = priorities + fill_ratio


    # Slightly de-prioritize near-empty bins unless they are the only option,
    # which encourages filling bins before starting new ones.
    empty_threshold = 0.9  # bins with more than 90% remaining capacity

    nearly_empty = bins_remain_cap > empty_threshold
    if np.any(feasible_bins & ~nearly_empty): # if there are feasible bins and not nealy empty
      priorities[feasible_bins & nearly_empty] *= 0.5 # reduce priority of these near empty bins if any other better candidates available


    return priorities
```
