```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization and fill level considerations."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    # Waste: Exponential decay for bins where the item fits well
    waste = bins_remain_cap - item
    waste_penalty = np.where(waste >= 0, np.exp(-5 * waste / (item + epsilon)), -np.inf) #Scale by item and avoid zero division
    priorities += waste_penalty

    # Fill Level: Sigmoid function to encourage filling
    fill_ratio = item / (bins_remain_cap + epsilon)
    fill_reward = 1 / (1 + np.exp(2 - 4 * fill_ratio)) # Sigmoid centered around fill_ratio = 0.5
    priorities += fill_reward

    return priorities
```
