```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Return priority of adding item to each bin, balancing waste, fill level, and stability."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    # Waste minimization (critical): Exponential penalty for waste, inf for overfill
    waste = bins_remain_cap - item
    waste_penalty = np.where(waste >= 0, np.exp(-waste), -np.inf)
    priorities += waste_penalty

    # Fill level encouragement: Exponential reward for filling
    fill_ratio = item / (bins_remain_cap + epsilon)
    fill_reward = np.where(fill_ratio <= 1, np.exp(fill_ratio), -np.inf)
    priorities += fill_reward
    
    # Item density (sparsity): Encourage less filled bins
    item_density = np.exp(-bins_remain_cap)
    priorities += item_density

    # Stability (closeness to item size):
    stability = -np.abs(bins_remain_cap - item)
    priorities += stability

    return priorities
```
