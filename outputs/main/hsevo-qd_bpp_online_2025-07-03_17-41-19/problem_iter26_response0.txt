```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, fill level, utilization, and stability."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    # Waste: More sensitive exponential decay, harsh penalty for overfill.
    waste = bins_remain_cap - item
    waste_penalty = np.where(waste >= 0, np.exp(-10 * waste / (item + epsilon)), -np.inf)
    priorities += waste_penalty

    # Fill Level: Sigmoid function centered around fill_ratio = 0.5.
    fill_ratio = item / (bins_remain_cap + epsilon)
    fill_reward = 1 / (1 + np.exp(5 - 10 * fill_ratio))
    priorities += fill_reward

    # Bin Utilization: Reward bins that have some items in them already.
    utilization = (1 - bins_remain_cap)
    utilization_reward = np.where(utilization > 0, np.tanh(utilization), 0)
    priorities += 0.5 * utilization_reward

    # Stability (Closeness to Item Size): Scaled by item size.
    stability = -np.abs(bins_remain_cap - item) / (item + epsilon)
    priorities += 0.25 * stability

    return priorities
```
