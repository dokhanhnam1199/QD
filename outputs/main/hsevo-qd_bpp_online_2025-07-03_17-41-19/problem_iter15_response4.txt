```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on a combination of factors:
    1. Space Utilization: Minimizes wasted space while encouraging good fill rates, but only if the item fits.
    2. Item Fit: Favors bins where the item fits with minimal waste.
    3. Remaining Capacity: Bins with higher remaining capacity are slightly favored initially.
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    # 1. Space Utilization
    waste = bins_remain_cap - item
    fit_mask = waste >= 0  # Only consider bins where the item fits

    if np.any(fit_mask):
        # Calculate space utilization only for bins where the item fits. Prevents errors and unnecessary calculations
        space_utilization = item / (bins_remain_cap[fit_mask] + epsilon)
        priorities[fit_mask] += space_utilization

        # Item Fit (Minimize waste)
        waste_score = np.exp(-waste[fit_mask])
        priorities[fit_mask] += waste_score
    else:
        # If the item doesn't fit in any bin, return a very low priority for all bins.
        return np.full_like(bins_remain_cap, -np.inf)
        

    # 3. Remaining Capacity: Give a slight initial preference to bins with more remaining capacity.
    # This can help distribute items more evenly in the beginning. But don't over-emphasize it.
    priorities[fit_mask] += 0.1 * (bins_remain_cap[fit_mask] / np.max(bins_remain_cap + epsilon))

    return priorities
```
