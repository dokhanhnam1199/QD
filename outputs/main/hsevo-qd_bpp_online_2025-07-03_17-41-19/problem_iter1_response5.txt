```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    A cunning blend of utilization and avoidance of near-overflow.
    Inspired by the harmony of the spheres and the efficiency of packing celestial orbs.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # 1. Feasibility check: Bins that cannot accommodate the item receive a negative infinite priority.
    priorities = np.where(bins_remain_cap >= item, 0.0, -np.inf)

    # 2. Calculate space utilization if the item were placed in each feasible bin.
    utilizations = item / bins_remain_cap
    utilizations = np.where(np.isinf(utilizations), 0.0, utilizations) # Set inf to 0

    # 3. Near-overflow penalty:  Bins with remaining capacity close to the item size get a penalty.
    #    This is to avoid leaving tiny fragments in bins.  A subtle consideration, akin to epicycles!
    near_overflow_penalty = np.exp(-10 * (bins_remain_cap - item) / item) # Increased exponent for more penalty

    # 4. Combine utilization and penalty.  A higher utilization is generally good, but near-overflow is bad.
    priorities = np.where(priorities != -np.inf, utilizations - near_overflow_penalty, priorities)

    # 5. Add a small bias favoring bins with more remaining capacity. This aids in distributing items,
    # akin to how the divine rotates the celestial bodies. This mitigates concentrating all smaller items in one bin
    # and making later large items fail to find available spot
    priorities = np.where(priorities != -np.inf, priorities + 0.1* bins_remain_cap/np.max(bins_remain_cap), priorities)

    return priorities
```
