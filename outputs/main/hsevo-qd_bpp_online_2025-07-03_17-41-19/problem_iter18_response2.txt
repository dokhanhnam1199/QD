```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function prioritizes minimizing wasted space and balancing bin utilization.
    It combines a waste-based score with a modified level score, and stability reward.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    # Waste: Prioritize bins where the item fits with minimal waste.
    waste = bins_remain_cap - item
    fit = waste >= 0
    waste_score = np.zeros_like(waste, dtype=float)
    waste_score[fit] = np.exp(-waste[fit])
    waste_score[~fit] = -np.inf
    priorities += waste_score
    
    # Encourage filling bins to a reasonable level. Heavily penalize bins already almost full.
    fill_ratio = item / (bins_remain_cap + epsilon)
    level_score = np.zeros_like(fill_ratio)
    level_score[(fill_ratio > 0) & (fill_ratio <= 1)] = fill_ratio[(fill_ratio > 0) & (fill_ratio <= 1)]
    level_score[fill_ratio > 1] = -np.inf  # Strict penalty for not fitting
    priorities += level_score

    # Stability: Favor bins close to item size.
    stability = -np.abs(bins_remain_cap - item)
    priorities += stability / np.max(np.abs(bins_remain_cap-item)+epsilon)

    return priorities
```
