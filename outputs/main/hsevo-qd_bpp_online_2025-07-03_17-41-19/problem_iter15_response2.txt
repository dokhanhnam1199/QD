```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on a waste-focused approach,
    with adjustments for fill level and a tie-breaking mechanism.  It avoids
    complex non-linear transformations unless strictly necessary and focuses
    on interpretability.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9  # Small value to avoid division by zero

    # 1. Waste Minimization: Primary driver - prefer bins with smallest waste
    waste = bins_remain_cap - item
    fit_mask = waste >= 0  # Only consider bins where the item fits

    # If no bins can fit the item, return an array of -inf.  This handles cases where
    # the current item is larger than all available bins and prevents exceptions.
    if not np.any(fit_mask):
        return np.full_like(bins_remain_cap, -np.inf)

    priorities = np.where(fit_mask, -waste, -np.inf) # Smaller waste gets higher priority

    # 2. Fill Level (Secondary): Encourages higher fill, but only for fitting bins
    fill_ratio = item / (bins_remain_cap + epsilon)
    priorities = np.where(fit_mask, priorities + fill_ratio, priorities)

    # 3. Tie-breaker: Prefer bins with *more* remaining capacity *among fitting bins*
    #    This helps to spread items more evenly if multiple bins have similar waste.
    priorities = np.where(fit_mask, priorities + (bins_remain_cap / np.max(bins_remain_cap[fit_mask])), priorities) #Normalize remaining capacity for fitting bins

    return priorities
```
