```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by the celestial dance, we shall prioritize bins that are a 'golden ratio' match
    to the item's size, but also penalize those dangerously close to overflowing,
    lest we plunge into darkness!

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    golden_ratio = (1 + np.sqrt(5)) / 2
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, capacity in enumerate(bins_remain_cap):
        if capacity >= item:
            # Reward bins that can fit the item.  The closer to a "golden" fill, the better.
            fill_ratio = item / capacity
            golden_diff = abs(fill_ratio - (1 / golden_ratio))  # Aim for around 61.8% fill from the item
            priorities[i] = -golden_diff # Smaller difference is better
            
            # Penalize bins that would be too full after adding the item. Stronger the closer they are to overfull
            remaining = capacity - item
            if remaining < 0.1 * capacity: # Arbitrary closeness threshold, e.g. 10% remaining after placing the item in the bin.
               overfill_penalty = -np.exp(-remaining) # Large negative penalty if very close to overfull
               priorities[i] += overfill_penalty


        else:
            # Give very negative priority to bins that cannot fit the item. Like being cast out of orbit.
            priorities[i] = -1e9  # A very large negative number

    return priorities
```
