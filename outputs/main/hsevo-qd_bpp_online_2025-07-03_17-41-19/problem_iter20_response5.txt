```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, fill level and stability using weights."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    waste = bins_remain_cap - item
    feasible_bins = waste >= 0
    if not np.any(feasible_bins):
        return priorities

    waste_penalty = np.where(feasible_bins, np.exp(-waste[feasible_bins]), 0)
    fill_ratio = item / (bins_remain_cap[feasible_bins] + epsilon)
    fill_reward = np.exp(fill_ratio)

    stability = -np.abs(bins_remain_cap[feasible_bins] - item)
    
    priorities[feasible_bins] = waste_penalty + fill_reward + 0.1*stability
    return priorities
```
