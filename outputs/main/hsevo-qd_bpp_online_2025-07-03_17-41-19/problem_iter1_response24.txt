```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Utilizes a combination of factors including space utilization and fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Avoid division by zero
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return priorities  # No valid bins, all priorities zero

    # Calculate space utilization (closer to 1 is better - fills the bin well)
    space_utilization = np.zeros_like(bins_remain_cap, dtype=float)
    space_utilization[valid_bins] = item / bins_remain_cap[valid_bins]
    space_utilization[~valid_bins] = -np.inf #Invalid bins should have minimal priority
    
    # Calculate fragmentation (small remaining space after adding item is bad).
    # Penalize bins that would have very little space left.
    remaining_space_after_fit = bins_remain_cap - item
    fragmentation_penalty = np.zeros_like(bins_remain_cap, dtype=float)
    fragmentation_penalty[remaining_space_after_fit >= 0] = np.exp(-10 * remaining_space_after_fit[remaining_space_after_fit >= 0] / np.max(bins_remain_cap)) # Higher Penalty if space is too fragmented, exponential decay. avoid infinity errors by scaling the penalty to the bin capacity
    fragmentation_penalty[remaining_space_after_fit < 0] = -np.inf  #Invalid bins should have minimal priority

    # Prioritize bins that have enough space but avoid excessive fragmentation
    priorities = space_utilization + fragmentation_penalty
    
    # Add a slight bias towards bins that are already occupied, which could encourage packing items closer together
    occupation_bias = np.where(bins_remain_cap < 1, 0.1, 0) #Assuming bin capacity is 1
    priorities = priorities + occupation_bias
    return priorities
```
