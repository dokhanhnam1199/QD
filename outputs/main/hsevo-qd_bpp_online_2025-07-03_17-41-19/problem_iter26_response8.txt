```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on best fit, capacity, and fill ratio."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    # Best Fit: Minimize waste (similar to priority_v0)
    waste = bins_remain_cap - item
    fit_mask = waste >= 0
    priorities = np.where(fit_mask, np.exp(-waste / (item + epsilon)), -np.inf)

    # Remaining Capacity Consideration (similar to priority_v0)
    capacity_factor = bins_remain_cap / (np.max(bins_remain_cap) + epsilon)
    priorities = np.where(fit_mask, priorities + 0.5 * capacity_factor, priorities)

    # Fill Ratio: Encourages fuller bins (similar to priority_v1 but adjusted)
    fill_ratio = item / (bins_remain_cap + epsilon)
    fill_reward = np.where(fit_mask, fill_ratio, -np.inf) #consider only valid bins
    priorities = np.where(fit_mask, priorities + 0.3 * fill_reward, priorities)

    return priorities
```
