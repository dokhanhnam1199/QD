```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero and negative values in log
    valid_bins = bins_remain_cap > 0
    adjusted_caps = bins_remain_cap[valid_bins]

    if adjusted_caps.size == 0:
        return np.full_like(bins_remain_cap, -np.inf)

    # Calculate the waste if item is placed in the bin
    waste = adjusted_caps - item
    
    # High priority if waste is small and positive
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_indices = np.where(valid_bins)[0] # Get original indices for valid bins

    positive_waste_indices = (waste > 0)

    if positive_waste_indices.any():
        # Use inverse of waste if waste is positive
        priorities[valid_indices[positive_waste_indices]] = 1 / (waste[positive_waste_indices] + 1e-9) # avoid division by zero
    else:
        # Penalize bins where the item doesn't fit with -inf
       priorities[valid_indices] = -np.inf


    return priorities
```
