```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers multiple factors:
    1. Waste: Prioritizes bins where the item fits relatively well, minimizing wasted space, but using a more refined penalty.
    2. Fill Level: Encourages filling bins as much as possible, but penalizes overfilling (impossible but included for completeness).  A logistic function is used for a smoother reward.
    3. Item Fragility (based on item size): Accounts for the item's "fragility". Smaller items are more flexible and can be placed almost anywhere. Larger items are less flexible and require a tighter fit.
    4. Bin Utilization Balance: Aims to balance the utilization of bins.  Penalizes bins that are already nearly full to encourage spreading items across bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9  # Small value to avoid division by zero and log of zero
    bin_size = 1.0 #Assumed Bin Size for normalization

    # Waste: Prioritize bins where the item fits relatively well.
    waste = bins_remain_cap - item
    waste_penalty = np.where(waste >= 0, np.exp(-5 * waste), -np.inf)  # Sharper exponential decay for waste, harsher penalty for overfill
    priorities += waste_penalty

    # Fill Level: Encourage filling bins, but not too much, using a logistic function
    fill_ratio = item / (bins_remain_cap + epsilon)
    fill_reward = 1 / (1 + np.exp(5 * (fill_ratio - 0.9)))  # Logistic function, peaks around 90% fill
    priorities += fill_reward

    # Item Fragility (based on item size): Smaller items are more flexible.
    item_fragility = np.clip(item / bin_size, 0.1, 1.0)  # Normalize item size to bin size and clip for stability
    fragility_factor = np.exp(-5 * item_fragility)  # Smaller items have higher fragility factor, making them more flexible
    priorities += fragility_factor * np.ones_like(bins_remain_cap)


    # Bin Utilization Balance: Penalize nearly full bins
    utilization = (bin_size - bins_remain_cap) / bin_size
    utilization_penalty = -np.exp(10 * (utilization - 0.9))  # Strong penalty for bins near full utilization
    priorities += utilization_penalty


    return priorities
```
