```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Try to find the bin that fits most snugly without wasting too much space.
            # Prioritize bins where the remaining space after packing is small
            remaining_space = cap - item
            priorities[i] = 1 / (remaining_space + 1e-9) # Avoid division by zero and higher priority for smaller rem_space
            # Bonus for almost full bins (avoid creating too many almost empty bins)
            if remaining_space < 0.1: #Tune this value
                priorities[i] *= 2 # Can change the multiplication factor

        else:
            priorities[i] = -1e9 # very low priority to not fitting bins.

    return priorities
```
