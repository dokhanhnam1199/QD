```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, fill level, and utilization for bin selection."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    # Waste minimization with exponential scaling.
    waste = bins_remain_cap - item
    waste_priority = np.where(waste >= 0, np.exp(-5 * waste / (item + epsilon)), -np.inf)
    priorities += waste_priority

    # Fill level reward using sigmoid.
    fill_ratio = item / (bins_remain_cap + epsilon)
    fill_priority = 1 / (1 + np.exp(2 - 4 * fill_ratio))
    priorities += fill_priority

    # Bin utilization reward (encourage using partially filled bins).
    utilization = 1 - bins_remain_cap
    utilization_priority = np.where(utilization > 0, np.sqrt(utilization), 0)
    priorities += 0.3 * utilization_priority
    
    return priorities
```
