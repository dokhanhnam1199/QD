```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A refined priority function for online bin packing, balancing best-fit,
    remaining capacity, and fill ratio while addressing edge cases.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9
    max_bin_capacity = np.max(bins_remain_cap) + epsilon

    # Feasibility mask: Only consider bins that can accommodate the item
    fit_mask = bins_remain_cap >= item

    # 1. Best-Fit Prioritization (Waste Minimization)
    waste = bins_remain_cap - item
    waste = np.clip(waste, 0, max_bin_capacity)  # Ensure waste is within bounds
    waste_penalty = np.where(fit_mask, -waste / max_bin_capacity, -np.inf) # Normalize and penalize waste
    priorities = np.where(fit_mask, priorities + waste_penalty, priorities)

    # 2. Remaining Capacity Reward (Balance Utilization)
    capacity_ratio = bins_remain_cap / max_bin_capacity
    capacity_reward = np.where(fit_mask, 0.3 * capacity_ratio, -np.inf) # Normalize and reward high capacity bins
    priorities = np.where(fit_mask, priorities + capacity_reward, priorities)

    # 3. Fill Ratio Optimization (Target Near-Perfect Fill)
    fill_ratio = item / (bins_remain_cap + epsilon)
    fill_difference = np.abs(1 - fill_ratio)
    fill_reward = np.where(fit_mask, -np.abs(fill_difference), -np.inf)
    priorities = np.where(fit_mask, priorities + 0.5 * fill_reward, priorities)
    # Encourage bins that get filled closest to full.

    # 4. Item Size Consideration (Small Items into Smaller Bins)
    item_size_factor = item / max_bin_capacity
    item_size_reward = np.where(fit_mask, 0.1 * (1 - item_size_factor), -np.inf)
    priorities = np.where(fit_mask, priorities + item_size_reward, priorities)

    # 5. Prioritize almost full bins. Give a boost if item fits nearly perfectly
    almost_full_bonus = np.where(fit_mask & (waste < 0.1 * max_bin_capacity), 0.5, 0) # big reward
    priorities = np.where(fit_mask, priorities + almost_full_bonus, priorities)

    return priorities
```
