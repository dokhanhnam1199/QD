```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers multiple factors, with refined weighting and considerations:
    1.  Waste Optimization: Emphasizes minimizing waste, particularly small waste.
    2.  Bin Utilization: Strongly encourages filling bins as much as possible without overfilling.
    3.  Item Fragmentation Avoidance: Discourages creating bins with very small remaining capacity after placing the item.
    4.  Balance: Tries to keep the bins at same fill level.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9  # Small value to avoid division by zero

    # Waste Optimization: Minimize waste, especially small waste.  Higher weight.
    waste = bins_remain_cap - item
    waste_priority = np.where(waste >= 0, np.exp(-5 * waste), -np.inf)  # Sharp decay for waste. Increased the weight on waste to make the algorithm focus on it.
    priorities += waste_priority

    # Bin Utilization: Fill bins as much as possible. Higher weight
    fill_ratio = item / (bins_remain_cap + epsilon)
    fill_priority = np.where(fill_ratio <= 1, fill_ratio**2, -np.inf)  # Use fill_ratio squared to boost high fill. Higher weight
    priorities += 2*fill_priority

    # Item Fragmentation Avoidance: Avoid creating bins with tiny remaining capacity.
    remaining_capacity_penalty = np.where(waste > 0, np.exp( -10 * np.abs(waste-item/2)), -np.inf)  # Penalize small remaining capacity harshly.
    priorities += 0.5*remaining_capacity_penalty

    #Balance: Try to keep bins at same fill level.
    mean_remaining_capacity = np.mean(bins_remain_cap)
    capacity_balance = -np.abs(bins_remain_cap - mean_remaining_capacity)
    priorities += 0.2*capacity_balance

    return priorities
```
