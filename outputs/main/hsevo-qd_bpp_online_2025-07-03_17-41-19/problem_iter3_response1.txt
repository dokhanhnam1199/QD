```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers multiple factors:
    1. Waste: Prioritizes bins where the item fits relatively well, minimizing wasted space, with more nuanced penalty.
    2. Fill Level: Encourages filling bins as much as possible, but penalizes overfilling (impossible but included for completeness), using a different functional form.
    3. Stability: Favors bins that are closest to the item size relative to the bin capacity.
    4. Balance: Encourages a more balanced distribution of items across bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9  # Small value to avoid division by zero

    # Waste: Prioritize bins where the item fits relatively well.  Reduced steepness of penalty for smaller waste
    waste = bins_remain_cap - item
    waste_penalty = np.where(waste >= 0, -waste / (item + epsilon), -np.inf)  # Linear penalty scaled by item size.  Avoids exp for speed
    priorities += waste_penalty

    # Fill Level: Encourage filling bins, but not too much. Sigmoid function for fill level reward
    fill_ratio = item / (bins_remain_cap + epsilon)
    fill_reward = np.where(fill_ratio <= 1, 1 / (1 + np.exp(5 - 10 * fill_ratio)), -np.inf)  # Sigmoid centered around fill_ratio = 0.5
    priorities += fill_reward

    # Stability (Closeness to Item Size, Relative to Bin Size):
    stability = -np.abs(bins_remain_cap - item) / (bins_remain_cap + epsilon)  # Normalized by bin capacity
    priorities += stability

    # Balance: Encourage balanced use of bins. Give bins with larger remaining capacity a slight boost.
    balance_factor = bins_remain_cap / (np.sum(bins_remain_cap) + epsilon)
    priorities += 0.1 * balance_factor

    return priorities
```
