{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins based on a combination of factors,\n    aiming for a balance between minimizing waste, maximizing fill, and maintaining\n    stability. It refines the approach in priority_v1 by using a more targeted\n    strategy for each component.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    epsilon = 1e-9  # Small value to avoid division by zero\n\n    # 1. Waste Minimization (Primary Goal)\n    waste = bins_remain_cap - item\n    # Only consider bins where the item fits\n    feasible_bins = waste >= 0\n    if not np.any(feasible_bins):\n        return priorities # No feasible bin, return all zeros\n\n    # Prioritize bins with minimal waste using a reciprocal function. Clipping\n    # waste at a small value prevents overly large priorities for nearly full bins.\n    clipped_waste = np.clip(waste[feasible_bins], a_min=epsilon, a_max=None)  # Ensure waste is never zero.\n    waste_priority = 1 / clipped_waste\n    priorities[feasible_bins] += waste_priority\n\n    # 2. Fill Level Encouragement (Secondary, conditional on feasibility)\n    # Encourage filling the bin as much as possible, relative to its *original* size.\n    # This helps prevent fragmenting larger bins early on.\n    fill_ratio = item / (bins_remain_cap[feasible_bins] + epsilon)\n\n    # Use a sigmoid function to gently reward higher fill ratios, but prevent extreme values.\n    # Sigmoid squashes the fill_ratio to be between 0 and 1\n    fill_priority = 1 / (1 + np.exp(-5 * (fill_ratio - 0.5))) # Steep sigmoid centered at fill_ratio=0.5\n    priorities[feasible_bins] += fill_priority\n    \n    # 3. Stability (Tertiary) - Prefer bins close to item size, but with a small weight\n    stability = -np.abs(bins_remain_cap[feasible_bins] - item)\n    # Scale stability to have a smaller impact\n    stability_priority = stability * 0.1\n    priorities[feasible_bins] += stability_priority\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the first heuristic uses a combination of waste minimization, fill level encouragement, bin utilization, and stability, with carefully chosen functions (exponential decay, sigmoid, tanh) and weights, while the 20th only considers a simple log ratio of item size to remaining capacity. (2nd best) vs (second worst) shows a similar pattern: the second heuristic incorporates waste, fill level, and balance, with an adaptive weight for waste vs. fill, whereas the second worst only uses a log ratio. Comparing (1st) vs (2nd), we see the first uses stability scaled by item size and tanh, while the second focuses on adaptability with alpha and balance with gaussian distribution. (3rd) vs (4th) shows the third prioritizes waste minimization, fill level encouragement, and stability, using reciprocal, sigmoid, and linear functions, with conditional feasibility checks, whereas the fourth simply adds waste penalty and fill reward. Comparing (second worst) vs (worst), we see both compute and return the negative log of the ratio of item size to remaining capacity, indicating minimal feature engineering and consideration of multiple factors. Overall: The better heuristics incorporate multiple factors with careful weighting and tailored functions (exponential, sigmoid, tanh), consider feasibility, and aim for a balance between waste minimization, fill level, bin utilization, and stability. They also often use scaling and clipping to avoid extreme values and division by zero. Worse heuristics tend to rely on simpler calculations (e.g., just ratio or log ratio), lack nuanced weighting, and don't account for feasibility or potential edge cases.\n- \nOkay, let's refine \"Current Self-Reflection\" to build better heuristics, while actively avoiding the pitfalls of \"Ineffective Self-Reflection.\"\n\nHere's a revised approach:\n\n*   **Keywords:** Problem Understanding, Factor Relevance, Empirical Validation, Adaptive Refinement.\n\n*   **Advice:** Start with a deep understanding of the problem. Prioritize identifying truly *relevant* factors, not just many factors. Focus on rigorous *empirical validation* to assess performance. Emphasize an iterative process of adaptive refinement based on experimental results.\n\n*   **Avoid:** Blindly using complex, non-linear functions *before* understanding factor relationships. Over-reliance on tunable parameters without a clear validation strategy. Over-engineering early in the process.\n\n*   **Explanation:** Effective heuristics stem from understanding the problem and validating ideas with data, not just blindly applying complexity. Validation guides refinement.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}