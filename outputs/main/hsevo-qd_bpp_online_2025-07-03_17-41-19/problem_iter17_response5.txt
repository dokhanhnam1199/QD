```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, fill level, and balance."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    # Waste minimization
    waste = bins_remain_cap - item
    waste_penalty = np.where(waste >= 0, -waste, -np.inf)
    priorities += waste_penalty

    # Fill level
    fill_ratio = item / (bins_remain_cap + epsilon)
    fill_reward = np.where(fill_ratio <= 1, fill_ratio, -np.inf)
    priorities += fill_reward

    # Balance (favor bins with remaining capacity closer to item size)
    balance = -np.abs(waste)  # Smaller absolute waste is better for balance
    balance_reward = np.where(waste >= 0, balance, -np.inf)
    priorities += 0.5 * balance_reward  # Reduced weight for balance

    return priorities
```
