```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers multiple factors:
    1. Waste: Prioritizes bins where the item fits relatively well, minimizing wasted space.
    2. Fill Level: Encourages filling bins as much as possible, but penalizes overfilling.
    3. Item Fit: A stronger focus on how well the item fits relative to the bin's capacity.
    4. Bin Utilization: Directly incentivize using bins that have already been started.
    5. Number of items: Approximated by remaining space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9  # Small value to avoid division by zero and log of zero

    # Waste: Prioritize bins where the item fits relatively well.
    waste = bins_remain_cap - item
    waste_penalty = np.where(waste >= 0, np.exp(-waste), -np.inf)  # Exponential decay for waste, harsh penalty for overfill
    priorities += waste_penalty

    # Fill Level: Encourage filling bins, but not too much.
    fill_ratio = item / (bins_remain_cap + epsilon)
    fill_reward = np.where(fill_ratio <= 1, fill_ratio, -np.inf)  # linear reward, harsh penalty. Experiment different functions
    priorities += fill_reward

    # Item Fit: How well the item fits, using a scaled sigmoid function.
    item_fit = 1 / (1 + np.exp(5 * (waste / (item + epsilon) - 0.5))) # Experiment with the scaling factor 5 and offset 0.5
    item_fit = np.where(waste >= 0, item_fit, 0) # Only consider if item fits.
    priorities += item_fit

    # Bin Utilization: Encourage using bins that are already partially filled.
    bin_utilization = 1 - bins_remain_cap # scale between zero and one
    priorities += bin_utilization
    
    # Number of items (Approximated by remaining space): Encourages placing items in bins that were sparsely filled
    item_density = np.exp(-bins_remain_cap) # Lower remaining cap equals larger item_density, less filled
    priorities += 0.1 * item_density

    return priorities
```
