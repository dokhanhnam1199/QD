```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines waste minimization and fill ratio with a scaling factor.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    # Waste minimization: Smaller waste is better
    waste = bins_remain_cap - item
    waste_penalty = np.where(waste >= 0, -waste, -np.inf)
    priorities += waste_penalty

    # Fill level: Encourages fuller bins, scaled by item size
    fill_ratio = item / (bins_remain_cap + epsilon)
    fill_reward = np.where(fill_ratio <= 1, fill_ratio, -np.inf)
    priorities += fill_reward * item  # Scale fill reward by item size

    # Add a small bonus for bins that are almost full to encourage packing
    almost_full_bonus = np.where((bins_remain_cap > item) & (bins_remain_cap - item < 0.1), 0.5, 0) # Check if current item can be added & remaining cap less than 0.1
    priorities += almost_full_bonus
    
    return priorities
```
