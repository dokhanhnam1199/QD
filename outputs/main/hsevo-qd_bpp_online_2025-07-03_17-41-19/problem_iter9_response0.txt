```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers multiple factors, with refined weighting and adaptive components:
    1.  Waste: Prioritizes bins where the item fits well, minimizing wasted space.  Uses a more nuanced penalty.
    2.  Fill Level: Encourages filling bins as much as possible, but penalizes overfilling. Uses a sigmoid function for smoother reward.
    3.  Bin Utilization: Adapts based on overall bin utilization (average fill).
    4.  Item Fragmentation:  Discourages creating very small remaining spaces, based on item size.
    5.  Best Fit Preference: Encourages best fit, within reason.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9  # Small value to avoid division by zero and log of zero

    # Waste: Prioritize bins where the item fits relatively well.  Less harsh penalty.
    waste = bins_remain_cap - item
    waste_penalty = np.where(waste >= 0, np.exp(-waste/item), -np.inf)  # Exponential decay, scaled by item size, harsh penalty for overfill
    priorities += waste_penalty

    # Fill Level: Encourage filling bins, but not too much. Sigmoid for smoother reward.
    fill_ratio = item / (bins_remain_cap + epsilon)
    fill_reward = 1 / (1 + np.exp(5 - 10 * fill_ratio)) # Sigmoid centered around 0.5 fill ratio
    priorities += fill_reward

    # Bin Utilization (Adaptive): Adjusts based on how full the bins already are.
    avg_fill = np.mean((1 - bins_remain_cap) )  #Estimate average fill of the bins.
    utilization_factor = np.exp(2 * avg_fill)  # Higher utilization, more importance on filling.
    priorities += utilization_factor * fill_reward

    # Item Fragmentation: Discourage leaving very small remaining spaces.
    frag_penalty = np.where(waste > 0, np.exp(-10 * waste / item), 0) #Stronger if waste is small.  Only applied to bins where item fits
    priorities -= frag_penalty

    # Best Fit Preference: Encourage closer to best fit.
    best_fit_score = np.where(waste >=0, np.exp(-np.abs(waste)/item), -np.inf)
    priorities += 0.5 * best_fit_score #Less weighting.
    return priorities
```
