```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers multiple factors with refined weighting:
    1.  Waste: Prioritizes bins where the item fits relatively well, minimizing wasted space. Uses a more nuanced penalty.
    2.  Fill Level: Encourages filling bins as much as possible, but penalizes overfilling.
    3.  Bin Utilization: Encourages more balanced bin usage.
    4.  Item Fit: Prioritizes bins where the remaining capacity is close to the item size, adjusted for bin near-emptiness/fullness.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9  # Small value to avoid division by zero and log of zero
    bin_capacity = bins_remain_cap.max() #Assumes all bins have same capacity

    # Waste Penalty (Adjusted Exponential):
    waste = bins_remain_cap - item
    waste_penalty = np.where(waste >= 0, np.exp(-2 * waste / bin_capacity), -np.inf)  # Sharper decay, normalized by bin capacity
    priorities += 2 * waste_penalty  # Increased weight

    # Fill Level Reward (Sigmoid):
    fill_ratio = item / (bins_remain_cap + epsilon)
    fill_reward = np.where(fill_ratio <= 1, 1 / (1 + np.exp(5 - 10 * fill_ratio)), -np.inf) # Sigmoid function to smooth reward, strong penalty for overfill
    priorities += 3 * fill_reward # Increased weight

    #Bin Utilization Reward (Variance):
    utilization_penalty = -np.abs(bins_remain_cap - np.mean(bins_remain_cap)) / bin_capacity
    priorities += utilization_penalty # Small weight

    # Item Fit Penalty (Adaptive):
    fit_difference = np.abs(bins_remain_cap - item)
    # Scale the penalty based on the remaining capacity: bins that are close to full
    # will have a smaller fit penalty than bins that are nearly empty.
    fit_penalty = -fit_difference / (bin_capacity + epsilon) * (1 - bins_remain_cap / (bin_capacity + epsilon))
    priorities += 1.5 * fit_penalty  # Moderate weight

    return priorities
```
