```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can fit the item and then
    considers the remaining capacity after packing.  It attempts to
    balance packing items into bins where they fit well (high fill rate)
    while also trying to minimize wasted space (leave bins mostly full).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give bins that can fit the item an initial priority boost
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = 1.0

    # If no bins can fit, return all zeros (or a tiny value for numerical stability if preferred)
    if not np.any(fit_mask):
        return priorities

    # Calculate fill ratio and remaining capacity for feasible bins
    fill_ratio = item / bins_remain_cap[fit_mask] # item / space_available. want this to be close to 1
    remaining_capacity = bins_remain_cap[fit_mask] - item # how much space is left

    # Calculate the score based on fill ratio and remaining capacity.
    # We want a fill ratio close to 1 and low remainig capacity.  Higher weights means they contribute more.

    fill_weight = 2.0  # Boost influence to fill ratio
    capacity_weight = 1.0 # regular influence to capacity

    # Fill is "how filled is" space with item's addition. Remaining is 'how much wasted'
    fill_scores = fill_weight * (1-np.abs(fill_ratio -1)) # High = Closer Fill,
    remaining_cap_scores = capacity_weight / (1 + remaining_capacity) # High if not much remains. Using reciprocal of the capacity itself.

    #Combine for total Priority to feasible set
    feasible_scores = fill_scores + remaining_cap_scores

    #update priorities to new vals
    priorities[fit_mask] = feasible_scores

    return priorities
```
