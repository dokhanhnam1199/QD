```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit with capacity and fill ratio considerations."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    # Best-fit: Prioritize bins with minimal waste
    waste = bins_remain_cap - item
    fit_mask = waste >= 0
    priorities = np.where(fit_mask, -waste, -np.inf)  # Raw waste as a starting point

    # Remaining capacity: Encourage use of bins with more space
    capacity_factor = bins_remain_cap / (np.max(bins_remain_cap) + epsilon) #Normalized
    priorities = np.where(fit_mask, priorities + 0.3 * capacity_factor, priorities) # Add capacity as a secondary factor.

    # Fill ratio: Reward bins that will be filled well
    fill_ratio = item / (bins_remain_cap + epsilon)  # Use item size as numerator
    priorities = np.where(fit_mask, priorities + 0.2* fill_ratio, priorities)

    # Penalize almost full bins.
    threshold = 0.1 # if remaining capacity is less than 10% of bin size, penalize
    small_capacity_penalty = np.where(bins_remain_cap / (np.max(bins_remain_cap) + epsilon) < threshold, -10, 0)
    priorities += small_capacity_penalty
    
    return priorities
```
