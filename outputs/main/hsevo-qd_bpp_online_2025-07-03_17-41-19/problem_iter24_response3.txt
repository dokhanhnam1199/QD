```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A refined priority function for online bin packing, focusing on balanced bin utilization
    and penalizing fragmentation.

    This version emphasizes both best-fit and a measure of how 'densely' the item would fill the bin,
    while also considering the relative emptiness of bins to encourage even distribution.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    # 1. Feasibility Mask: Identify bins that can accommodate the item
    fit_mask = bins_remain_cap >= item

    # If no bins can fit the item, assign a small negative priority to all bins.  This is very important
    # to avoid crashes and to ensure a 'last resort' strategy.
    if not np.any(fit_mask):
        return np.full_like(priorities, -1e-6)

    # 2. Waste Minimization (Best-Fit Component): Prioritize bins with minimal waste
    waste = bins_remain_cap - item
    waste_penalty = np.where(fit_mask, -np.abs(waste) / (item + epsilon), -np.inf) #Linear penalty better

    # 3. Density Reward: Reward bins that would be filled densely by the item
    fill_ratio = item / (bins_remain_cap + epsilon)
    density_reward = np.where(fit_mask, np.clip(fill_ratio, 0, 1), -np.inf) # Clip fill_ratio
    #Scale density_reward so it doesn't dominate
    density_reward_scaled = 0.7*density_reward #0.7 makes sense.

    # 4. Empty Bin Penalty (Spread-Out Component): Discourage using almost-empty bins if other bins are available
    #   This is crucial for evening out the bin utilization.
    relative_capacity = bins_remain_cap / (np.max(bins_remain_cap) + epsilon) # Important!
    empty_bin_penalty = -relative_capacity # Linear penalty.
    empty_bin_penalty = np.where(fit_mask,empty_bin_penalty, -np.inf)
    #Scale the empty_bin_penalty so it has appropriate effect.
    empty_bin_penalty_scaled = 0.3*empty_bin_penalty


    # 5. Combine the Factors: Use weights to control the influence of each factor
    priorities = waste_penalty + density_reward_scaled + empty_bin_penalty_scaled

    return priorities
```
