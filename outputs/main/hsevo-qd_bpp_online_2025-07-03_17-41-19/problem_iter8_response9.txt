```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, fill level, and utilization for bin selection."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    # Waste: Exponential penalty for waste, discourages overfilling.
    waste = bins_remain_cap - item
    waste_penalty = np.where(waste >= 0, np.exp(-5 * waste / (item + epsilon)), -np.inf)
    priorities += waste_penalty

    # Fill Level: Encourages bins to be filled to near capacity.
    fill_ratio = item / (bins_remain_cap + epsilon)
    fill_reward = np.exp(-5 * np.abs(fill_ratio - 0.75))
    priorities += fill_reward

    # Utilization: Rewards bins that already have items packed.
    utilization = 1 - bins_remain_cap
    utilization_reward = np.where(utilization > 0, np.sqrt(utilization), 0)
    priorities += 0.25 * utilization_reward
    return priorities
```
