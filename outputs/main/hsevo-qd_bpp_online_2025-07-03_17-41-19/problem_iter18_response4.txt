```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function refines the bin selection process by:
    1.  Best Fit Emphasis: Strongly prioritizes bins where the item fits with minimal waste. This is the core principle of Best-Fit heuristics.
    2.  Remaining Capacity Consideration: Balances the "Best Fit" with a preference for bins that still have substantial capacity, avoiding premature fragmentation.
    3.  Item Size Normalization: Normalize the item size to better reflect its significance relative to bin capacity.
    4.  Capacity Threshold: Introduces a threshold for considering bins. Bins with very small remaining capacity relative to item size are heavily penalized.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9  # Small value to avoid division by zero

    # 1. Best Fit Emphasis: Minimize waste
    waste = bins_remain_cap - item
    # Only consider bins where the item fits
    fit_mask = waste >= 0
    priorities = np.where(fit_mask, np.exp(-waste / (item + epsilon)), -np.inf)  # Normalized waste for better comparison. Exp to prioritize smaller waste.
    # 2. Remaining Capacity Consideration: Balance best fit with available space.
    # Prioritize bins with more remaining capacity (avoid excessive fragmentation)
    capacity_factor = bins_remain_cap / (np.max(bins_remain_cap) + epsilon)  # Normalize remaining capacity
    priorities = np.where(fit_mask, priorities + 0.5 * capacity_factor, priorities)  # Add capacity as a secondary factor. Multiply by 0.5 so it doesn't override best-fit.

    # 3. Item Size Normalization
    normalized_item_size = item / (np.max(bins_remain_cap) + epsilon) # normalize to largest bin to give it context.
    priorities = np.where(fit_mask, priorities + 0.1 * (1 - normalized_item_size), priorities)

    # 4. Capacity Threshold: Penalize bins that are almost full
    threshold = 0.1  # If remaining capacity is less than 10% of bin size, penalize.
    small_capacity_penalty = np.where(bins_remain_cap / (np.max(bins_remain_cap) + epsilon) < threshold, -10, 0) #severe penalty
    priorities += small_capacity_penalty

    return priorities
```
