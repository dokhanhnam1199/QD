```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can fit the item almost perfectly.
    It uses a combination of the remaining capacity and the relative size
    of the item compared to the bin capacity. It also avoids very small remaining capacities.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Prefer bins where the item fills a significant portion of the bin
            fill_ratio = item / cap
            # Higher fill_ratio is generally better, but we also want some remaining space
            # to avoid extreme fragmentation later. We use a sigmoid function to model this.
            priority = np.exp(-((fill_ratio - 0.9)**2) / (2 * 0.1**2)) # Gaussian-like distribution, favoring fill around 0.9
            if cap < 0.01: # Avoid bins with very tiny remaining capacities
                priority = -1e9 # very low priority
            priorities[i] = priority
        else:
            priorities[i] = -1e9 # Not feasible to pack this item

    return priorities
```
