{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This priority function considers multiple factors:\n    1. Waste: Prioritizes bins where the item fits relatively well, minimizing wasted space.\n    2. Fill Level: Encourages filling bins as much as possible, but penalizes overfilling (impossible but included for completeness).\n    3. Number of Items: Accounts for how many items are already present in bins (not directly accessible in online BPP). We approximate using the amount of available space. Sparsely filled bins are encouraged, up to a point. Densely filled bins discouraged.\n    4. Stability: Favors bins that are closest to the item size.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        waste_exp_scale: Scaling factor for the waste penalty.\n        fill_exp_scale: Scaling factor for the fill reward.\n        item_density_scale: Scaling factor for the item density reward.\n        stability_scale: Scaling factor for the stability reward.\n        epsilon: Small value to avoid division by zero and log of zero\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Waste: Prioritize bins where the item fits relatively well.\n    waste = bins_remain_cap - item\n    waste_penalty = np.where(waste >= 0, np.exp(-waste * waste_exp_scale), -np.inf)  # Exponential decay for waste, harsh penalty for overfill. Negative inf indicates bin won't fit\n    priorities += waste_penalty\n\n    # Fill Level: Encourage filling bins, but not too much.\n    fill_ratio = item / (bins_remain_cap + epsilon)\n    fill_reward = np.where(fill_ratio <= 1, np.exp(fill_ratio * fill_exp_scale), -np.inf)\n    priorities += fill_reward\n\n    # Number of Items (Approximated by remaining space): Encourages placing items in bins that were sparsely filled\n    item_density = np.exp(-bins_remain_cap * item_density_scale) # Lower remaining cap equals larger item_density, less filled\n    priorities += item_density\n    # Stability (Closeness to Item Size):\n\n    stability = -np.abs(bins_remain_cap - item) * stability_scale\n    priorities += stability\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic considers both waste minimization and fill level, while the worst only considers a simple ratio. (2nd best) vs (second worst), heuristic 2nd incorporates waste, fill level, bin utilization and stability. (3rd) vs (4th), both utilize waste, fill level, item density and stability, but they use different scaling factors and weights. Comparing (1st) vs (2nd), the best heuristic uses simpler linear combinations of waste and fill level, while the second best employs exponential decay, sigmoid functions, and tanh for more nuanced behavior. (3rd) vs (4th), they use exponential decay for waste, fill and density, and scaled stability with small different parameters. Comparing (second worst) vs (worst), both are identical. Overall: Better heuristics incorporate multiple factors, often with non-linear scaling or weighting, and are well-documented. Simpler heuristics focusing on a single ratio tend to perform worse. Including bin utilization and stability generally improves performance. Tunable parameters offer further refinement.\n- \nOkay, let's redefine \"Current self-reflection\" to make it more effective for designing heuristics and avoid the pitfalls of \"Ineffective self-reflection.\" Here's a breakdown:\n\n*   **Keywords:** Rigorous evaluation, explainability, adaptive parameters, modular design.\n\n*   **Advice:** Focus on rigorous evaluation of heuristic performance across diverse problem instances. Prioritize explainability by clearly articulating the rationale behind design choices. Incorporate adaptive parameters that respond to problem characteristics during runtime. Promote modularity to facilitate component replacement and refinement.\n\n*   **Avoid:** Over-reliance on single evaluation metrics. Neglecting edge cases or unforeseen scenarios. Premature optimization without clear performance benchmarks.\n\n*   **Explanation:** Effective self-reflection leads to designing heuristics that are not only performant but also robust, understandable, and easily adaptable to changing problem dynamics. Design your evaluation such that the performance is measurable and comparable to other heuristics.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}