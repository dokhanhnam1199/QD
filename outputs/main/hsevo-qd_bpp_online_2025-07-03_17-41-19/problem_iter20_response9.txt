```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit, capacity consideration, and stability."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    waste = bins_remain_cap - item
    fit_mask = waste >= 0

    # Best Fit: Prioritize minimal waste.
    priorities = np.where(fit_mask, np.exp(-waste / (item + epsilon)), -np.inf)

    # Capacity Consideration: Favor bins with more space.
    capacity_factor = bins_remain_cap / (np.max(bins_remain_cap) + epsilon)
    priorities = np.where(fit_mask, priorities + 0.3 * capacity_factor, priorities) # Reduced influence

    # Stability: Reward bins that are already relatively full (but can still fit the item).
    fill_level = 1 - capacity_factor
    priorities = np.where(fit_mask, priorities + 0.2 * fill_level, priorities) #Reduced influence.
    return priorities
```
