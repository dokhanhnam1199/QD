```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function prioritizes bins that can accommodate the item with minimal wasted space.
    It also adds a small bonus to bins that are already partially full to encourage
    filling up bins before opening new ones (a variant of first-fit-decreasing).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate wasted space if the item is placed in each bin.
    wasted_space = bins_remain_cap - item

    # Give high priority to bins where the item fits perfectly or with minimal waste.
    # Avoid placing item in bins that doesn't fit the item.
    for i in range(len(bins_remain_cap)):
        if wasted_space[i] >= 0:
            priorities[i] = np.exp(-wasted_space[i])  # Smaller waste, higher priority
        else:
            priorities[i] = -1e9  # Very low priority if the item does not fit.

    # Add a bonus for bins that are already partially full (first-fit-decreasing heuristic).
    # This encourages filling up bins rather than opening new ones.  We normalize by
    # initial capacity for fair comparison.  Assume initial capacity is always 1.0
    filled_ratio = 1.0 - bins_remain_cap
    priorities += 0.1 * filled_ratio # Adjust 0.1 to fine tune how important is bin filling

    return priorities
```
