```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to favor bins that have just enough capacity to 
    hold the item, in order to minimize the number of bins used and reduce waste.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the ratio of the item size to the remaining capacity of each bin
    ratio = bins_remain_cap / item
    
    # Give higher priority to bins with more capacity available
    priority = np.where(bins_remain_cap >= item, 1 / ratio, 0)
    
    # If multiple bins have the same ratio, the one with the smallest remaining capacity gets higher priority
    priority += np.where(priority > 0, 1 / (1 + np.abs(priority)), 0)
    
    # Apply a small random noise to avoid always selecting the same bin in case of a tie
    priority += np.random.uniform(0.0, 1e-6, size=priority.shape)
    
    return priority
```
