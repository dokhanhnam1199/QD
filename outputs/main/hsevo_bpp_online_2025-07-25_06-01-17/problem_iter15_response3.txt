```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, historic_item_sizes: list = []) -> np.ndarray:
    """
    Combines adaptive multi-objective priorities, dynamic weighting, and forecasting.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score for the current item's fit
    fit_priority = 1 / (1 + capacity_diff)
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    fit_priority[bins_remain_cap < item] = 0
    
    # Calculate the average historic item size
    if historic_item_sizes:
        avg_historic_size = np.mean(historic_item_sizes)
    else:
        avg_historic_size = np.mean(bins_remain_cap)  # Using mean remaining capacity as a proxy for historic item sizes
    
    # Forecast the future item sizes based on historic item sizes
    forecast_size = avg_historic_size * np.random.uniform(0.9, 1.1, size=len(bins_remain_cap))
    
    # Calculate the bin utilization, considering both the current item and future potential
    utilization_priority = (bins_remain_cap + avg_historic_size) / (bins_remain_cap + item + avg_historic_size + forecast_size)
    
    # Calculate the bin's "emptiness" priority
    emptiness_priority = bins_remain_cap / (bins_remain_cap + avg_historic_size)
    
    # Calculate the overall priority, balancing the current item's fit, bin utilization, and emptiness
    alpha = 0.4  # Adaptive weighting for the current item's fit
    beta = 0.3  # Adaptive weighting for bin utilization
    delta = 0.3  # Adaptive weighting for bin emptiness
    priority = alpha * fit_priority + beta * utilization_priority + delta * emptiness_priority
    
    # Ensure the priority scores are not NaN (e.g., due to division by zero)
    priority = np.nan_to_num(priority)
    
    # Assign high priority to bins with enough capacity and a good fit
    priority = np.where(bins_remain_cap >= item, priority, -1)
    
    return priority
```
