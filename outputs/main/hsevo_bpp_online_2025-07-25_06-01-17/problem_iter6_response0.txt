```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A mutated priority function for online Bin Packing Problem, 
    incorporating dynamic weighting, trade-offs, and flexibility.
    """
    # Calculate the weighted difference between the remaining capacity of each bin and the item size
    weight = 0.5  # adaptive weighting factor
    capacity_diff = np.abs(bins_remain_cap - item)
    weighted_diff = weight * capacity_diff + (1 - weight) * bins_remain_cap
    
    # Calculate a priority score based on the weighted difference
    priority_score = 1 / (1 + weighted_diff)
    
    # Incorporate a penalty factor for bins with insufficient capacity
    penalty_factor = 1 / (1 + np.exp(np.maximum(0, item - bins_remain_cap)))
    
    # Calculate the bin utilization, considering both the current item and future potential
    avg_historic_size = np.mean(bins_remain_cap)  # Using mean remaining capacity as a proxy for historic item sizes
    utilization_priority = (bins_remain_cap + avg_historic_size) / (bins_remain_cap + item + avg_historic_size)
    
    # Calculate the average bin capacity and item size to inform the weighting
    avg_bin_cap = np.mean(bins_remain_cap)
    avg_item_size = item  # or use a running average of item sizes
    
    # Adaptive weighting based on the problem landscape
    alpha = 0.4  # initial weighting for fit priority
    beta = 0.3  # initial weighting for utilization priority
    gamma = 0.3  # initial weighting for penalty factor
    
    if avg_bin_cap > avg_item_size:
        alpha += 0.1
        beta -= 0.1
    else:
        alpha -= 0.1
        beta += 0.1
    
    # Calculate the overall priority, balancing the current item's fit, bin utilization, and penalty factor
    priority = alpha * priority_score + beta * utilization_priority + gamma * penalty_factor * bins_remain_cap
    
    # Ensure the priority scores are not NaN (e.g., due to division by zero)
    priority = np.nan_to_num(priority)
    
    # Assign high priority to bins with enough capacity and a good fit
    priority = np.where(bins_remain_cap >= item, priority, -1)
    
    return priority
```
