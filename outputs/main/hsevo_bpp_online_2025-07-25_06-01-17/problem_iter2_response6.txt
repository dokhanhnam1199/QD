```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines bin fullness and item fit for priority.
    """
    # Calculate the "closeness" of each bin to being full after adding the item
    remaining_capacity_after_item = bins_remain_cap - item
    
    # Ignore bins that cannot accommodate the item
    eligible_bins = remaining_capacity_after_item >= 0
    
    # For eligible bins, calculate priority based on bin fullness and item fit
    priority_scores = np.zeros_like(bins_remain_cap)
    priority_scores[eligible_bins] = 1 / (1 + remaining_capacity_after_item[eligible_bins])
    
    # Favor bins with higher remaining capacity
    priority_scores[eligible_bins] += bins_remain_cap[eligible_bins] / (1 + np.abs(remaining_capacity_after_item[eligible_bins]))
    
    # Set priority to -inf for bins that cannot accommodate the item
    priority_scores[~eligible_bins] = -np.inf
    
    return priority_scores
```
