```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to pack items into the bins that have the
    most available space. It's based on the idea that the best strategy for the
    online bin packing problem is to use the 'First-Fit Decreasing' algorithm, 
    but adapted to the priority function framework. The priority function score 
    is inversely proportional to the difference between the bin's remaining capacity 
    and the item size, with a higher score indicating a better fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check for zero division errors
    denominators = np.maximum(bins_remain_cap - item, 1e-9)
    
    # Calculate priority score based on difference between bin capacity and item size
    priority_scores = 1 / denominators
    
    # We also prefer bins that are not empty, so let's give them extra points
    non_empty_bins = (bins_remain_cap > 0)
    priority_scores[non_empty_bins] *= 1.1  # Magic factor, tune it as you like

    return priority_scores
```
