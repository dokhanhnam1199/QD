```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, historic_item_sizes: np.ndarray = None, alpha: float = 0.5, beta: float = 0.3) -> np.ndarray:
    """
    Returns a priority score for each bin, taking into account the item size, remaining capacity, 
    and potential future items. This heuristic aims to balance efficient placements, minimize waste, 
    and anticipate future constraints.

    Args:
        item: Size of the item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        historic_item_sizes: Array of previously seen item sizes (default is None).
        alpha: Weight for the capacity difference objective (default is 0.5).
        beta: Weight for the future item forecasting objective (default is 0.3).

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score (lower difference -> higher priority)
    priority_capacity = 1 / (1 + capacity_diff)
    
    # If historic item sizes are available, forecast future item sizes
    if historic_item_sizes is not None:
        # Calculate the average size of historic items
        avg_historic_size = np.mean(historic_item_sizes)
        
        # Calculate the difference between the remaining capacity of each bin and the forecasted item size
        forecast_diff = np.abs(bins_remain_cap - avg_historic_size)
        
        # Invert the differences to obtain a priority score (lower difference -> higher priority)
        priority_forecast = 1 / (1 + forecast_diff)
        
        # Combine the priority scores using weighting factors
        priority = alpha * priority_capacity + beta * priority_forecast
    else:
        # If no historic item sizes are available, use only the capacity difference objective
        priority = priority_capacity
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    priority[bins_remain_cap < item] = 0
    
    return priority
```
