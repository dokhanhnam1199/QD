```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combine bin fullness and item fit for priority.
    """
    # Calculate the ratio of the item size to the remaining capacity of each bin
    ratio = item / np.maximum(bins_remain_cap, 1e-8)  # avoid division by zero
    
    # Assign higher priority to bins with lower ratio (i.e., less likely to leave a small gap)
    # and with more remaining capacity (i.e., more space to accommodate future items)
    priority = np.where(bins_remain_cap >= item, 
                       # for bins that can hold the item, the priority is inversely proportional to the remaining capacity
                       bins_remain_cap * (1 - ratio) / (bins_remain_cap + 1), 
                       # for bins that cannot hold the item, the priority is zero
                       0.0)
    return priority
```
