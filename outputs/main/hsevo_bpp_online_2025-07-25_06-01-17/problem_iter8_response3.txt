```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, all_items: np.ndarray = None) -> np.ndarray:
    """
    Combines multi-objective optimization, adaptive weighting, and dynamic prioritization.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score (lower difference -> higher priority)
    priority = 1 / (1 + capacity_diff)
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    priority[bins_remain_cap < item] = 0
    
    # Introduce a 'balance' factor to prioritize bins with remaining capacity close to 50% of the bin size
    balance_factor = 1 - np.abs((bins_remain_cap - item) / (bins_remain_cap + item))
    priority *= balance_factor
    
    # Calculate a penalty factor for each bin based on the shortfall or excess capacity
    shortfall = np.maximum(0, item - bins_remain_cap)
    excess = np.maximum(0, bins_remain_cap - item)
    penalty_factor = 1 / (1 + np.exp(shortfall)) * 1 / (1 + np.exp(excess))
    priority *= penalty_factor
    
    # Calculate the wasted space for each bin if the item is added
    wasted_space = np.maximum(bins_remain_cap - item, 0)
    
    # Invert the wasted space so that bins with least wasted space get higher priority
    inverted_wasted_space = 1 / (wasted_space + 1e-6)  # Add small value for numerical stability
    
    # Combine the two priorities
    combined_priority = priority * inverted_wasted_space
    
    # Consider forecasting future items to anticipate constraints
    if all_items is not None:
        future_items = all_items[all_items > item]
        forecast_factor = 1 / (1 + np.sum(future_items))
        combined_priority *= forecast_factor
    
    # Normalize the priorities to ensure they add up to 1
    normalized_priority = combined_priority / (np.sum(combined_priority) + 1e-6)
    
    # Ensure bins with higher remaining capacity get higher priority when the item fits
    normalized_priority = np.where(bins_remain_cap >= item, normalized_priority + 0.1 * bins_remain_cap, normalized_priority)
    
    return normalized_priority
```
