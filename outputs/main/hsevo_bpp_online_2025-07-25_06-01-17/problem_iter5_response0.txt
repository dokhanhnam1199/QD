```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines multi-objective approach with dynamic weighting.
    """
    # Calculate the waste (remaining capacity) if the item is added to each bin
    waste = bins_remain_cap - item
    
    # Give higher priority to bins where item fits more tightly
    delta = np.where(waste < 0, -np.inf, waste)
    
    # Prioritize bins with just enough capacity and higher available space
    priority = np.where(delta > 0, bins_remain_cap / (delta + 1e-10), -np.inf)
    
    # Calculate the ratio of the item size to the remaining capacity of each bin
    ratio = item / np.maximum(bins_remain_cap, 1e-8)  # avoid division by zero
    
    # Assign higher priority to bins with lower ratio (i.e., less likely to leave a small gap)
    # and with more remaining capacity (i.e., more space to accommodate future items)
    priority_ratio = np.where(bins_remain_cap >= item, 
                              # for bins that can hold the item, the priority is inversely proportional to the remaining capacity
                              bins_remain_cap * (1 - ratio) / (bins_remain_cap + 1), 
                              # for bins that cannot hold the item, the priority is zero
                              0.0)
    
    # Combine priorities using dynamic weighting
    alpha = 0.7  # weight for priority based on waste
    beta = 0.3  # weight for priority based on ratio
    combined_priority = alpha * priority + beta * priority_ratio
    
    # Avoid bins that are too full or too empty
    combined_priority = np.where(bins_remain_cap < item, -np.inf, combined_priority)
    combined_priority = np.where(bins_remain_cap == 0, combined_priority * 0.9, combined_priority)  # reduce priority for empty bins
    
    return combined_priority
```
