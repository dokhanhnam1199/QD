```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, all_items: np.ndarray = None) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to improve upon the previous version by 
    considering multiple objectives, prioritizing efficient placements, and 
    anticipating future items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        all_items: Optional array of all items (including future ones) for forecasting.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score (lower difference -> higher priority)
    priority = 1 / (1 + capacity_diff)
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    priority[bins_remain_cap < item] = 0
    
    # Introduce a 'balance' factor to prioritize bins with remaining capacity close to 50% of the bin size
    balance_factor = 1 - np.abs((bins_remain_cap - item) / (bins_remain_cap + item))
    priority *= balance_factor
    
    # If all items are provided, consider forecasting future items to anticipate constraints
    if all_items is not None:
        future_items = all_items[all_items > item]
        forecast_factor = 1 / (1 + np.sum(future_items))
        priority *= forecast_factor
    
    return priority
```
