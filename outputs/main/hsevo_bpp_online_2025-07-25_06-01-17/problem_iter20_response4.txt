```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Adaptive, nuanced, multi-objective heuristic.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score for the current item's fit
    fit_priority = 1 / (1 + np.log(1 + capacity_diff))  # Improved fit priority
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    fit_priority[bins_remain_cap < item] = 0
    
    # Calculate the ratio of the item size to the remaining capacity of each bin
    ratio = item / np.maximum(bins_remain_cap, 1e-8)  # avoid division by zero
    
    # Assign higher priority to bins with lower ratio (i.e., less likely to leave a small gap)
    # and with more remaining capacity (i.e., more space to accommodate future items)
    priority_ratio = np.where(bins_remain_cap >= item, 
                              # for bins that can hold the item, the priority is inversely proportional to the remaining capacity
                              bins_remain_cap * (1 - ratio) / (bins_remain_cap + 1), 
                              # for bins that cannot hold the item, the priority is zero
                              0.0)
    
    # Calculate the bin utilization, considering both the current item and future potential
    avg_bin_cap = np.mean(bins_remain_cap)
    utilization_priority = (bins_remain_cap + avg_bin_cap) / (bins_remain_cap + item + avg_bin_cap)
    
    # Adaptive weighting based on the problem landscape
    alpha_min = 0.5143700815933027
    alpha_max = 0.6317414200996265
    alpha = alpha_min + (alpha_max - alpha_min) * (item / (item + avg_bin_cap))  # Dynamic weighting for fit priority
    beta_min = 0.5305372003112541
    beta_max = 0.22893487109456445
    beta = beta_min + (beta_max - beta_min) * (bins_remain_cap.mean() / (bins_remain_cap.mean() + item))  # Dynamic weighting for utilization priority
    
    # Calculate the overall priority, balancing the current item's fit, bin utilization, and penalty factor
    shortfall = np.maximum(0, item - bins_remain_cap)
    excess = np.maximum(0, bins_remain_cap - item)
    penalty_factor = 1 / (1 + np.exp(shortfall)) * 1 / (1 + np.exp(excess))
    priority = alpha * fit_priority + beta * utilization_priority + 0.378029924253778 * penalty_factor * bins_remain_cap
    
    # Incorporate a penalty for bins with low remaining capacity
    penalty_for_low_capacity = 1 / (1 + np.exp(-bins_remain_cap))
    priority *= penalty_for_low_capacity
    
    # Ensure the priority scores are not NaN (e.g., due to division by zero)
    priority = np.nan_to_num(priority)
    
    # Assign high priority to bins with enough capacity and a good fit
    priority = np.where(bins_remain_cap >= item, priority, -1)
    
    # Dynamic prioritization based on the current state of the bins
    max_bin_priority = np.max(priority)
    priority[priority < max_bin_priority] *= (1 - (max_bin_priority - priority[priority < max_bin_priority]) / max_bin_priority)
    
    return priority

# Example usage:
item_size = 10.0
bins_remain_cap = np.array([5.0, 15.0, 20.0])
priority_scores = priority_v2(item_size, bins_remain_cap)
print("Priority scores:", priority_scores)
```
