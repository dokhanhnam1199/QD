import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, penalty_factor_weight: float = 6.876689487983441, high_priority_threshold: float = 0.6953337121425994, capacity_weight: float = 4.039541950497912) -> np.ndarray:
    """
    Combines elements of v0 and v1 heuristics for better outcomes.
    """
    # Calculate the shortfall or excess capacity for each bin
    shortfall = np.maximum(0, item - bins_remain_cap)
    excess = np.maximum(0, bins_remain_cap - item)
    
    # Calculate a penalty factor for each bin based on the shortfall or excess capacity
    penalty_factor = penalty_factor_weight / (1 + np.exp(shortfall)) * penalty_factor_weight / (1 + np.exp(excess))
    
    # Assign high priority to bins with enough capacity and a good fit
    priority = np.where(bins_remain_cap >= item, bins_remain_cap * penalty_factor, -1)
    
    # Ensure bins with higher remaining capacity get higher priority when the item fits
    priority = np.where(bins_remain_cap >= item, priority + capacity_weight * bins_remain_cap, priority)
    
    return priority
