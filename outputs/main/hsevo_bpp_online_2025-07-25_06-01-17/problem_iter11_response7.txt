```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Improved heuristic combining adaptive weighting and multi-objective optimization.
    """
    
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Calculate an adaptive weight based on the item size and bin capacities
    adaptive_weight = 1 / (1 + np.exp(-item / np.mean(bins_remain_cap)))
    
    # Invert the differences to obtain a priority score for the current item's fit
    fit_priority = adaptive_weight / (1 + capacity_diff)
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    fit_priority[bins_remain_cap < item] = 0
    
    # Calculate the waste (remaining capacity) if the item is added to each bin
    waste = bins_remain_cap - item
    
    # Give higher priority to bins where item fits more tightly
    delta = np.where(waste < 0, -np.inf, waste)
    
    # Prioritize bins with just enough capacity and higher available space
    priority_tight_fit = np.where(delta > 0, bins_remain_cap / (delta + 1e-10), -np.inf)
    
    # Calculate the ratio of the item size to the remaining capacity of each bin
    ratio = item / np.maximum(bins_remain_cap, 1e-8)  # avoid division by zero
    
    # Assign higher priority to bins with lower ratio (i.e., less likely to leave a small gap)
    # and with more remaining capacity (i.e., more space to accommodate future items)
    priority_ratio = np.where(bins_remain_cap >= item, 
                              # for bins that can hold the item, the priority is inversely proportional to the remaining capacity
                              bins_remain_cap * (1 - ratio) / (bins_remain_cap + 1), 
                              # for bins that cannot hold the item, the priority is zero
                              0.0)
    
    # Calculate a balance factor to prioritize bins with remaining capacity close to 50% of the bin size
    avg_bin_size = np.mean(bins_remain_cap)
    balance_factor = 1 - np.abs((bins_remain_cap - avg_bin_size / 2) / avg_bin_size)
    
    # Calculate the overall priority, balancing the current item's fit, bin utilization, and balance factor
    alpha = 0.5  # weight for priority based on fit
    beta = 0.3  # weight for priority based on tight fit
    gamma = 0.2  # weight for priority based on ratio and balance factor
    combined_priority = alpha * fit_priority + beta * priority_tight_fit + gamma * (priority_ratio * balance_factor)
    
    # Ensure the priority scores are not NaN (e.g., due to division by zero)
    combined_priority = np.nan_to_num(combined_priority)
    
    return combined_priority
```
