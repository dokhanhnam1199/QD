```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                alpha: float = 0.4, beta: float = 0.3, gamma: float = 0.3) -> np.ndarray:
    """
    Adaptive, multi-objective priority function for online Bin Packing Problem (BPP).
    
    This function incorporates dynamic weighting, shortfall/excess capacity penalties, 
    and adaptive utilization prioritization to efficiently pack items into bins.
    """
    
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score for the current item's fit
    fit_priority = 1 / (1 + capacity_diff)
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    fit_priority[bins_remain_cap < item] = 0
    
    # Calculate the shortfall or excess capacity for each bin
    shortfall = np.maximum(0, item - bins_remain_cap)
    excess = np.maximum(0, bins_remain_cap - item)
    
    # Calculate a penalty factor for each bin based on the shortfall or excess capacity
    penalty_factor = 1 / (1 + np.exp(shortfall)) * 1 / (1 + np.exp(excess))
    
    # Calculate the bin utilization, considering both the current item and future potential
    avg_historic_size = np.mean(bins_remain_cap)  # Using mean remaining capacity as a proxy for historic item sizes
    utilization_priority = (bins_remain_cap + avg_historic_size) / (bins_remain_cap + item + avg_historic_size)
    
    # Adaptive weighting based on the problem's current state
    total_remain_cap = np.sum(bins_remain_cap)
    if total_remain_cap == 0:
        adapt_weight = 0
    else:
        adapt_weight = (item / total_remain_cap) * alpha + (1 - item / total_remain_cap) * beta
    
    # Dynamic prioritization based on the current item's size and the remaining capacities
    dynamic_prioritization = np.exp(-capacity_diff / (1 + item))
    
    # Calculate the overall priority, balancing the current item's fit, bin utilization, and adaptive weighting
    priority = adapt_weight * fit_priority + (1 - adapt_weight) * (beta * utilization_priority + gamma * dynamic_prioritization)
    
    # Ensure the priority scores are not NaN (e.g., due to division by zero)
    priority = np.nan_to_num(priority)
    
    # Assign high priority to bins with enough capacity and a good fit
    priority = np.where(bins_remain_cap >= item, priority, -1)
    
    return priority
```
