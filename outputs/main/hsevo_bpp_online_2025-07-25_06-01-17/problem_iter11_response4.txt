```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines adaptive weighting and multi-objective optimization with balancing.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score (lower difference -> higher priority)
    priority_capacity = 1 / (1 + capacity_diff)
    
    # Calculate a penalty factor for each bin based on the shortfall or excess capacity
    shortfall = np.maximum(0, item - bins_remain_cap)
    excess = np.maximum(0, bins_remain_cap - item)
    penalty_factor = 1 / (1 + np.exp(shortfall)) * 1 / (1 + np.exp(excess))
    
    # Calculate the available space in each bin relative to the item size
    relative_available_space = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)
    
    # Adaptive weighting based on the problem landscape
    alpha = 0.4  # initial weighting for fit priority
    beta = 0.3  # initial weighting for utilization priority
    gamma = 0.3  # initial weighting for penalty factor
    
    avg_bin_cap = np.mean(bins_remain_cap)
    if avg_bin_cap > item:
        alpha += 0.1
        beta -= 0.1
    else:
        alpha -= 0.1
        beta += 0.1
    
    # Introduce a 'balance' factor to prioritize bins with remaining capacity close to 50% of the bin size
    balance_factor = 1 - np.abs((bins_remain_cap - item) / (bins_remain_cap + item))
    
    # Combine the priorities using adaptive weighting and balancing
    priorities = alpha * priority_capacity + beta * (bins_remain_cap / (bins_remain_cap + item)) + gamma * penalty_factor * bins_remain_cap + 0.1 * balance_factor
    
    # Ensure priorities are not negative
    priorities = np.where(priorities < 0, 0, priorities)
    
    # Consider the remaining capacity of each bin to avoid overfilling
    priorities = np.where(bins_remain_cap >= item, priorities + 0.01 * bins_remain_cap, priorities)
    
    return priorities
```
