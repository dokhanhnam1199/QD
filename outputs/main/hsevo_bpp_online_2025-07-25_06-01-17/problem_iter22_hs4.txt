def priority_v2(item: float, 
                bins_remain_cap: np.ndarray, 
                alpha: float = 1.180101380016118, 
                beta: float = 0.25378443252040594, 
                gamma: float = 0.5043587444849241, 
                epsilon: float = -1.7831892159597124e-07) -> np.ndarray:
    """
    Adaptive, multi-objective heuristic for online Bin Packing Problem.
    """
    
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score for the current item's fit
    # Using log-based invert function for a more nuanced approach
    fit_priority = 1 / (1 + np.log(1 + capacity_diff))  
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    fit_priority[bins_remain_cap < item] = 0
    
    # Calculate the shortfall or excess capacity for each bin
    shortfall = np.maximum(0, item - bins_remain_cap)
    excess = np.maximum(0, bins_remain_cap - item)
    
    # Calculate a penalty factor for each bin based on the shortfall or excess capacity
    # Using a more complex formula for a more adaptive approach
    penalty_factor = 1 / (1 + np.exp(shortfall)) * 1 / (1 + np.exp(excess))
    
    # Calculate the bin utilization, considering both the current item and future potential
    avg_historic_size = np.mean(bins_remain_cap)  
    utilization_priority = (bins_remain_cap + avg_historic_size) / (bins_remain_cap + item + avg_historic_size)
    
    # Introduce a new objective: minimizing the number of bins used
    bin_usage_priority = 1 / (1 + np.exp(bins_remain_cap / (bins_remain_cap + item)))
    
    # Calculate the waste (remaining capacity) if the item is added to each bin
    waste = bins_remain_cap - item
    
    # Give higher priority to bins where item fits more tightly
    delta = np.where(waste < 0, -np.inf, waste)
    
    # Prioritize bins with just enough capacity and higher available space
    priority_tight_fit = np.where(delta > 0, bins_remain_cap / (delta + epsilon), -np.inf)
    
    # Forecast future item sizes based on the average remaining capacity
    forecasted_item_size = np.mean(bins_remain_cap) + np.std(bins_remain_cap)
    future_potential_priority = bins_remain_cap / (bins_remain_cap + forecasted_item_size)
    
    # Adaptive weighting based on the problem's current state
    # Calculate the overall priority, balancing multiple competing objectives
    combined_priority = alpha * fit_priority + beta * utilization_priority + gamma * (priority_tight_fit * penalty_factor * future_potential_priority * bins_remain_cap) + (1 - alpha - beta - gamma) * bin_usage_priority
    
    # Ensure the priority scores are not NaN (e.g., due to division by zero)
    combined_priority = np.nan_to_num(combined_priority)
    
    # Assign high priority to bins with enough capacity and a good fit
    combined_priority = np.where(bins_remain_cap >= item, combined_priority, -1)
    
    return combined_priority
