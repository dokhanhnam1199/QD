```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins with enough capacity, favoring tight fits and low waste.
    """
    # Create a mask to identify bins that can hold the item
    can_hold_item = bins_remain_cap >= item
    
    # Calculate the waste that would be caused by adding the item to each bin
    waste = bins_remain_cap - item
    
    # Calculate the "closeness" of each bin to being full after adding the item
    remaining_capacity_after_item = bins_remain_cap - item
    
    # Calculate the priority score for each bin, considering both waste and closeness to full
    priority = np.where(can_hold_item, 1 / (waste + 1) * (1 / (1 + remaining_capacity_after_item)), 0)
    
    return priority
```
