```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines multi-objective and weighted factors for better bin packing.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score (lower difference -> higher priority)
    priority_capacity = 1 / (1 + capacity_diff)
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    priority_capacity[bins_remain_cap < item] = 0
    
    # Calculate priority based on how full the bin is and how well the item fits
    priority_fullness = np.where(bins_remain_cap >= item, 
                                 # for bins that can hold the item, the priority is inversely proportional to the remaining capacity
                                 1.0 / (bins_remain_cap + 1), 
                                 # for bins that cannot hold the item, the priority is zero
                                 0.0)
    
    # Introduce a 'balance' factor to prioritize bins with remaining capacity close to 50% of the bin size
    balance_factor = 1 - np.abs((bins_remain_cap - item) / (bins_remain_cap + item))
    
    # Combine the priorities using adaptive weighting
    priorities = 0.5 * priority_capacity + 0.3 * priority_fullness + 0.2 * balance_factor
    
    # Ensure priorities are not negative
    priorities = np.where(priorities < 0, 0, priorities)
    
    return priorities
```
