```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, historic_item_sizes: np.ndarray = None, alpha: float = 0.5, beta: float = 0.3) -> np.ndarray:
    """
    Multi-objective heuristic with dynamic weighting.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score (lower difference -> higher priority)
    priority_capacity = 1 / (1 + capacity_diff)
    
    # Calculate the available space in each bin relative to the item size
    # to favor bins that have enough capacity to fit the item and have the most available space
    relative_available_space = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)
    
    # Combine the two priorities to balance competing factors
    priority_balance = priority_capacity * relative_available_space / (item + 1e-6)
    
    # If historic item sizes are available, forecast future item sizes
    if historic_item_sizes is not None:
        # Calculate the average size of historic items
        avg_historic_size = np.mean(historic_item_sizes)
        
        # Calculate the difference between the remaining capacity of each bin and the forecasted item size
        forecast_diff = np.abs(bins_remain_cap - avg_historic_size)
        
        # Invert the differences to obtain a priority score (lower difference -> higher priority)
        priority_forecast = 1 / (1 + forecast_diff)
        
        # Combine the priority scores using weighting factors
        priority = alpha * priority_balance + beta * priority_forecast
    else:
        # If no historic item sizes are available, use only the balance priority
        priority = priority_balance
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    priority[bins_remain_cap < item] = 0
    
    return priority
```
