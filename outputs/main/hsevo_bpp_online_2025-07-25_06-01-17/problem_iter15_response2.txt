```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, historic_item_sizes: np.ndarray = None, alpha: float = 0.4, beta: float = 0.3, gamma: float = 0.3) -> np.ndarray:
    """
    Combines adaptive weighting, multiple objectives, and dynamic weighting for the online Bin Packing Problem.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score for the current item's fit
    fit_priority = 1 / (1 + capacity_diff)
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    fit_priority[bins_remain_cap < item] = 0
    
    # Calculate the bin utilization, considering both the current item and future potential
    if historic_item_sizes is not None:
        avg_historic_size = np.mean(historic_item_sizes)
    else:
        avg_historic_size = np.mean(bins_remain_cap)  # Using mean remaining capacity as a proxy for historic item sizes
    utilization_priority = (bins_remain_cap + avg_historic_size) / (bins_remain_cap + item + avg_historic_size)
    
    # Calculate a penalty factor for each bin based on the shortfall or excess capacity
    shortfall = np.maximum(0, item - bins_remain_cap)
    excess = np.maximum(0, bins_remain_cap - item)
    penalty_factor = 1 / (1 + np.exp(shortfall)) * 1 / (1 + np.exp(excess))
    
    # Forecast the potential future item placements and adjust the weighting accordingly
    forecast_weight = np.exp(-np.abs(bins_remain_cap - item)) / (1 + np.maximum(0, bins_remain_cap - item))
    adaptive_weight = forecast_weight * (alpha + beta * utilization_priority + gamma * penalty_factor)
    
    # Calculate the overall priority, balancing the current item's fit, bin utilization, and forecasted potential
    priority = fit_priority * adaptive_weight
    
    # Ensure the priority scores are not NaN (e.g., due to division by zero)
    priority = np.nan_to_num(priority)
    
    # Assign high priority to bins with enough capacity and a good fit
    priority = np.where(bins_remain_cap >= item, priority, -1)
    
    return priority

# Example usage:
item_size = 5.0
bins_remain_cap = np.array([10.0, 8.0, 12.0])
historic_item_sizes = np.array([3.0, 4.0, 6.0])

priority_scores = priority_v2(item_size, bins_remain_cap, historic_item_sizes)
print(priority_scores)
```
