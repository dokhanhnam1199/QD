import numpy as np

def priority_v2(
    item: float, 
    bins_remain_cap: np.ndarray, 
    alpha: float = 0.8583524896109961, 
    beta: float = 0.5066877775978947, 
    gamma: float = 0.5956401875194907, 
    epsilon: float = 3.0737491604118222e-09) -> np.ndarray:
    """
    Combines adaptive weighting and multiple objectives for robust optimization.
    """
    
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score for the current item's fit
    fit_priority = 1 / (1 + capacity_diff)
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    fit_priority[bins_remain_cap < item] = 0
    
    # Calculate the shortfall or excess capacity for each bin
    shortfall = np.maximum(0, item - bins_remain_cap)
    excess = np.maximum(0, bins_remain_cap - item)
    
    # Calculate a penalty factor for each bin based on the shortfall or excess capacity
    penalty_factor = 1 / (1 + np.exp(shortfall)) * 1 / (1 + np.exp(excess))
    
    # Calculate the bin utilization, considering both the current item and future potential
    avg_historic_size = np.mean(bins_remain_cap)  # Using mean remaining capacity as a proxy for historic item sizes
    utilization_priority = (bins_remain_cap + avg_historic_size) / (bins_remain_cap + item + avg_historic_size)
    
    # Forecast the future item sizes based on the remaining capacities
    forecast_factor = bins_remain_cap / (bins_remain_cap + item)
    
    # Calculate the waste (remaining capacity) if the item is added to each bin
    waste = bins_remain_cap - item
    
    # Give higher priority to bins where item fits more tightly
    delta = np.where(waste < 0, -np.inf, waste)
    
    # Prioritize bins with just enough capacity and higher available space
    priority_tight_fit = np.where(delta > 0, bins_remain_cap / (delta + epsilon), -np.inf)
    
    # Calculate the overall priority, balancing the current item's fit, bin utilization, and tight fit
    combined_priority = alpha * fit_priority + beta * utilization_priority + gamma * (priority_tight_fit * penalty_factor * forecast_factor * bins_remain_cap)
    
    # Ensure the priority scores are not NaN (e.g., due to division by zero)
    combined_priority = np.nan_to_num(combined_priority)
    
    # Assign high priority to bins with enough capacity and a good fit
    combined_priority = np.where(bins_remain_cap >= item, combined_priority, -1)
    
    return combined_priority

# Example usage:
item_size = 10.0
bins_remain_cap = np.array([5.0, 15.0, 20.0])
priority_scores = priority_v2(item_size, bins_remain_cap)
print("Priority scores:", priority_scores)
