```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Adaptive, multi-objective priority function combining dynamic weighting and balancing.
    """
    
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score (lower difference -> higher priority)
    fit_priority = 1 / (1 + capacity_diff)
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    fit_priority = np.where(bins_remain_cap >= item, fit_priority, 0)
    
    # Introduce a 'balance' factor to prioritize bins with remaining capacity close to 50% of the bin size
    balance_factor = 1 - np.abs((bins_remain_cap - item) / (bins_remain_cap + item))
    fit_priority *= balance_factor
    
    # Calculate the tightness of fit for the current item in each bin
    tight_fit_priority = np.exp(-np.abs(bins_remain_cap - item))
    
    # Calculate a utilization-aware penalty factor for each bin
    utilization_penalty = 1 / (1 + np.exp(-np.maximum(0, item - bins_remain_cap) / np.mean(bins_remain_cap))) * 1 / (1 + np.exp(np.maximum(0, bins_remain_cap - item) / np.mean(bins_remain_cap)))
    
    # Calculate the bin utilization, considering both the current item and future potential
    avg_historic_size = np.mean(bins_remain_cap)  # Using mean remaining capacity as a proxy for historic item sizes
    utilization_priority = (bins_remain_cap + avg_historic_size) / (bins_remain_cap + item + avg_historic_size)
    
    # Calculate a dynamic weight for balancing fit and utilization priorities
    dynamic_weight = np.exp(-(capacity_diff / np.mean(capacity_diff)))
    
    # Calculate the overall priority, balancing the current item's fit, bin utilization, and penalties
    alpha = 0.4  # Dynamic weighting for fit priority
    beta = 0.3   # Dynamic weighting for utilization priority
    gamma = 0.3  # Dynamic weighting for tight fit priority
    
    combined_priority = alpha * fit_priority + beta * utilization_priority * utilization_penalty + gamma * tight_fit_priority
    
    # Normalize the priorities to ensure they add up to 1
    normalized_priority = combined_priority / (np.sum(combined_priority) + 1e-6)
    
    return normalized_priority
```
