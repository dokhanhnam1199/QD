```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines adaptive weighting and multi-objective optimization.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score for the current item's fit
    fit_priority = 1 / (1 + capacity_diff)
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    fit_priority[bins_remain_cap < item] = 0
    
    # Calculate the shortfall or excess capacity for each bin
    shortfall = np.maximum(0, item - bins_remain_cap)
    excess = np.maximum(0, bins_remain_cap - item)
    
    # Calculate a penalty factor for each bin based on the shortfall or excess capacity
    penalty_factor = 5.6183698719462525 / (1 + np.exp(shortfall)) * 1 / (1 + np.exp(excess))
    
    # Calculate bin utilization, considering both the current item and future potential
    avg_historic_size = 5.24157358822766 * np.mean(bins_remain_cap)  # Using mean remaining capacity as a proxy for historic item sizes
    utilization_priority = (bins_remain_cap + avg_historic_size) / (bins_remain_cap + item + avg_historic_size)
    
    # Ensure utilization_priority does not exceed the utilization_threshold
    utilization_threshold = 0.8882678823010766
    utilization_priority = np.where(utilization_priority > utilization_threshold, utilization_threshold, utilization_priority)
    
    # Calculate waste (remaining capacity) if the item is added to each bin
    waste = bins_remain_cap - item
    
    # Give higher priority to bins where item fits more tightly
    delta = np.where(waste < 0, -np.inf, waste)
    
    # Prioritize bins with just enough capacity and higher available space
    priority_tight_fit = np.where(delta > 0, bins_remain_cap / (delta + 1e-10), -np.inf)
    
    # Use dynamic weighting based on the item size and remaining capacity
    weight_tight_fit = np.where(item > np.mean(bins_remain_cap), 0.6, 0.4)
    weight_fit_priority = np.where(item < np.mean(bins_remain_cap), 0.3, 0.2)
    weight_utilization = 1 - weight_tight_fit - weight_fit_priority
    
    # Calculate the overall priority, balancing the current item's fit, bin utilization, and tight fit
    priority = weight_tight_fit * priority_tight_fit + weight_fit_priority * fit_priority + weight_utilization * utilization_priority + (1 - weight_tight_fit - weight_fit_priority - weight_utilization) * penalty_factor * bins_remain_cap
    
    # Ensure the priority scores are not NaN (e.g., due to division by zero)
    priority = np.nan_to_num(priority)
    
    # Assign high priority to bins with enough capacity and a good fit
    threshold_item_size = 1.7749043239515936
    priority = np.where(bins_remain_cap >= threshold_item_size, priority, -1)
    
    return priority
```
