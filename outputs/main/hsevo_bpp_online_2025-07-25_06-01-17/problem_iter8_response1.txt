```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines adaptive weighting and multi-objective optimization.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score for the capacity difference factor
    priority_capacity = 1 / (1 + capacity_diff)  # Prioritize bins with smallest capacity difference
    
    # Calculate the shortfall or excess capacity for each bin
    shortfall = np.maximum(0, item - bins_remain_cap)
    excess = np.maximum(0, bins_remain_cap - item)

    # Calculate a penalty factor for each bin based on the shortfall or excess capacity
    penalty_factor = 1 / (1 + np.exp(shortfall)) * 1 / (1 + np.exp(excess))
    
    # Calculate the available space in each bin relative to the item size
    relative_available_space = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)

    # Combine the priorities using dynamic weighting
    # Weight1: gives more importance to bins with enough capacity and a good fit
    weight1 = np.where(bins_remain_cap >= item, bins_remain_cap * penalty_factor, 0)
    # Weight2: favors bins that have enough capacity to fit the item and have the most available space
    weight2 = priority_capacity * relative_available_space / (item + 1e-6)
    
    # Calculate the current utilization of each bin
    current_utilization = 1 - (bins_remain_cap / np.sum(bins_remain_cap))
    
    # Calculate the priority score for the current utilization factor
    priority_utilization = 1 / (1 + current_utilization)  # Prioritize bins with lowest utilization
    
    # Combine the weighted priorities with dynamic weighting
    alpha = 0.4  # weight for capacity difference
    beta = 0.3   # weight for current utilization
    gamma = 0.3  # weight for available space and penalty factor
    combined_priority = alpha * priority_capacity + beta * priority_utilization + gamma * (weight1 + weight2)
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    combined_priority[bins_remain_cap < item] = 0  # Ensure item can fit in bin
    
    return combined_priority
```
