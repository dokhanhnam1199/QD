```python
import numpy as np

# Define weighting factors with default values
alpha = 0.4
beta = 0.3
gamma = 0.3

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines multi-objective priorities with dynamic weighting and fragmentation.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score for the current item's fit
    fit_priority = 1 / (1 + capacity_diff)
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    fit_priority[bins_remain_cap < item] = 0
    
    # Calculate the shortfall or excess capacity for each bin
    shortfall = np.maximum(0, item - bins_remain_cap)
    excess = np.maximum(0, bins_remain_cap - item)
    
    # Calculate a penalty factor for each bin based on the shortfall or excess capacity
    penalty_factor = 1 / (1 + np.exp(shortfall)) * 1 / (1 + np.exp(excess))
    
    # Calculate the bin utilization, considering both the current item and future potential
    avg_historic_size = np.mean(bins_remain_cap)  # Using mean remaining capacity as a proxy for historic item sizes
    utilization_priority = (bins_remain_cap + avg_historic_size) / (bins_remain_cap + item + avg_historic_size)
    
    # Calculate the bin fragmentation, prioritizing bins with less wasted space
    fragmentation_priority = 1 / (1 + np.abs(bins_remain_cap - item) / bins_remain_cap)
    fragmentation_priority[bins_remain_cap == 0] = 0
    
    # Dynamically adjust the weighting factors
    avg_remain_cap = np.mean(bins_remain_cap)
    if avg_remain_cap < item:
        alpha = 0.5
        beta = 0.3
        gamma = 0.2
    else:
        alpha = 0.3
        beta = 0.4
        gamma = 0.3
    
    # Calculate the overall priority, balancing the current item's fit, bin utilization, and fragmentation
    priority = alpha * fit_priority + beta * utilization_priority + gamma * fragmentation_priority
    
    # Ensure the priority scores are not NaN (e.g., due to division by zero)
    priority = np.nan_to_num(priority)
    
    # Assign high priority to bins with enough capacity and a good fit
    priority = np.where(bins_remain_cap >= item, priority, -1)
    
    return priority
```
