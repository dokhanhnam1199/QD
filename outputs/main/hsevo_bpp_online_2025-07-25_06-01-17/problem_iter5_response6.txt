```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines multi-objective approach with dynamic weighting.
    """
    # Calculate the shortfall or excess capacity for each bin
    shortfall = np.maximum(0, item - bins_remain_cap)
    excess = np.maximum(0, bins_remain_cap - item)

    # Calculate a penalty factor for each bin based on the shortfall or excess capacity
    penalty_factor = 1 / (1 + np.exp(shortfall)) * 1 / (1 + np.exp(excess))

    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)

    # Invert the differences to obtain a priority score (lower difference -> higher priority)
    priority_score = 1 / (1 + capacity_diff)

    # Calculate the available space in each bin relative to the item size
    relative_available_space = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)

    # Combine the priorities using dynamic weighting
    # Weight1: gives more importance to bins with enough capacity and a good fit
    weight1 = np.where(bins_remain_cap >= item, bins_remain_cap * penalty_factor, 0)
    # Weight2: favors bins that have enough capacity to fit the item and have the most available space
    weight2 = priority_score * relative_available_space / (item + 1e-6)

    # Combine the weighted priorities
    combined_priority = weight1 + weight2

    # If the item size exceeds the remaining capacity, set the priority to 0
    combined_priority[bins_remain_cap < item] = 0

    # Ensure bins with higher remaining capacity get higher priority when the item fits
    combined_priority = np.where(bins_remain_cap >= item, combined_priority + bins_remain_cap, combined_priority)

    return combined_priority
```
