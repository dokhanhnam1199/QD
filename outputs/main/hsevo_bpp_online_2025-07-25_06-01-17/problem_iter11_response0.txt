```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines adaptive weighting and multi-objective optimization.
    """
    # Calculate the waste (remaining capacity) if the item is added to each bin
    waste = bins_remain_cap - item
    
    # Give higher priority to bins where item fits more tightly
    delta = np.where(waste < 0, -np.inf, waste)
    
    # Prioritize bins with just enough capacity and higher available space
    priority_tight_fit = np.where(delta > 0, bins_remain_cap / (delta + 1e-10), -np.inf)
    
    # Calculate the ratio of the item size to the remaining capacity of each bin
    ratio = item / np.maximum(bins_remain_cap, 1e-8)  # avoid division by zero
    
    # Assign higher priority to bins with lower ratio (i.e., less likely to leave a small gap)
    # and with more remaining capacity (i.e., more space to accommodate future items)
    priority_ratio = np.where(bins_remain_cap >= item, 
                              # for bins that can hold the item, the priority is inversely proportional to the remaining capacity
                              bins_remain_cap * (1 - ratio) / (bins_remain_cap + 1), 
                              # for bins that cannot hold the item, the priority is zero
                              0.0)
    
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score (lower difference -> higher priority)
    priority_capacity = 1 / (1 + capacity_diff)
    
    # Calculate a penalty factor for each bin based on the shortfall or excess capacity
    shortfall = np.maximum(0, item - bins_remain_cap)
    excess = np.maximum(0, bins_remain_cap - item)
    penalty_factor = 1 / (1 + np.exp(shortfall)) * 1 / (1 + np.exp(excess))
    
    # Calculate the shortfall or excess capacity for each bin
    adaptive_shortfall = np.maximum(0, item - bins_remain_cap)
    adaptive_excess = np.maximum(0, bins_remain_cap - item)
    adaptive_weight = 1 / (1 + np.exp(-item / np.mean(bins_remain_cap)))
    
    # Invert the differences to obtain a priority score for the current item's fit
    adaptive_fit_priority = adaptive_weight / (1 + capacity_diff)
    
    # Calculate a utilization-aware penalty factor for each bin
    utilization_penalty = 1 / (1 + np.exp(-adaptive_shortfall / np.mean(bins_remain_cap))) * 1 / (1 + np.exp(adaptive_excess / np.mean(bins_remain_cap)))
    
    # Calculate the bin utilization, considering both the current item and future potential
    avg_historic_size = np.mean(bins_remain_cap)  # Using mean remaining capacity as a proxy for historic item sizes
    utilization_priority = (bins_remain_cap + avg_historic_size) / (bins_remain_cap + item + avg_historic_size)
    
    # Calculate a dynamic weight for balancing fit and utilization priorities
    dynamic_weight = np.exp(-(capacity_diff / np.mean(capacity_diff)))
    
    # Combine priorities using adaptive weighting
    alpha = 0.7  # weight for priority based on waste
    beta = 0.2  # weight for priority based on ratio
    gamma = 0.1  # weight for priority based on capacity difference
    delta_weight = 0.5  # weight for adaptive fit priority
    epsilon_weight = 0.5  # weight for utilization priority
    combined_priority = alpha * priority_tight_fit + beta * priority_ratio + gamma * priority_capacity * penalty_factor
    combined_priority += delta_weight * adaptive_fit_priority + epsilon_weight * utilization_priority * utilization_penalty * bins_remain_cap
    
    # Avoid bins that are too full or too empty
    combined_priority = np.where(bins_remain_cap < item, -np.inf, combined_priority)
    combined_priority = np.where(bins_remain_cap == 0, combined_priority * 0.9, combined_priority)  # reduce priority for empty bins
    
    return combined_priority
```
