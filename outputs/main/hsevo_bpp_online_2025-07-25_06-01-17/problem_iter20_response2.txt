```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines adaptive weighting and nuanced prioritization.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score for the current item's fit
    fit_priority = 1 / (1 + np.log(1 + capacity_diff))  
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    fit_priority[bins_remain_cap < item] = 0
    
    # Calculate the shortfall or excess capacity for each bin
    shortfall = np.maximum(0, item - bins_remain_cap)
    excess = np.maximum(0, bins_remain_cap - item)
    
    # Calculate a penalty factor for each bin based on the shortfall or excess capacity
    penalty_factor = 1 / (1 + np.exp(shortfall)) * 1 / (1 + np.exp(excess))
    
    # Adaptive weighting based on the problem landscape
    alpha = 0.4 + 0.2 * (item / (item + np.mean(bins_remain_cap)))  # Dynamic weighting for fit priority
    beta = 0.3 + 0.1 * (bins_remain_cap.mean() / (bins_remain_cap.mean() + item))  # Dynamic weighting for utilization priority
    gamma = 0.3  # Weighting for penalty factor
    
    # Calculate the bin utilization, considering both the current item and future potential
    utilization_priority = (bins_remain_cap + np.mean(bins_remain_cap)) / (bins_remain_cap + item + np.mean(bins_remain_cap))
    
    # Introduce a 'balance' factor to prioritize bins with remaining capacity close to 50% of the bin size
    balance_factor = 1 - np.abs((bins_remain_cap - item) / (bins_remain_cap + item))
    
    # Forecast the future item sizes based on the remaining capacities
    forecast_factor = bins_remain_cap / (bins_remain_cap + item)
    
    # Calculate the priority based on tight fit and future potential
    priority_tight_fit = np.where(bins_remain_cap - item > 0, bins_remain_cap / (bins_remain_cap - item + 1e-10), -np.inf)
    
    # Calculate the overall priority, balancing the current item's fit, bin utilization, and tight fit
    priority = alpha * fit_priority + beta * utilization_priority + gamma * (penalty_factor * forecast_factor * bins_remain_cap) + 0.1 * balance_factor + 0.1 * priority_tight_fit
    
    # Ensure the priority scores are not NaN (e.g., due to division by zero)
    priority = np.nan_to_num(priority)
    
    # Assign high priority to bins with enough capacity and a good fit
    priority = np.where(bins_remain_cap >= item, priority, -1)
    
    # Dynamic prioritization based on the current state of the bins
    max_bin_priority = np.max(priority)
    priority[priority < max_bin_priority] *= (1 - (max_bin_priority - priority[priority < max_bin_priority]) / max_bin_priority)
    
    return priority

# Example usage:
item_size = 10.0
bins_remain_cap = np.array([5.0, 15.0, 20.0])
priority_scores = priority_v2(item_size, bins_remain_cap)
print("Priority scores:", priority_scores)
```
