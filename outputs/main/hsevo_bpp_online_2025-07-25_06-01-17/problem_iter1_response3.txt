```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to favor bins that have just enough capacity to 
    accommodate the item, to avoid splitting items across multiple bins. It uses a 
    combination of the remaining capacity and the item size to calculate the priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the "closeness" of each bin to being full after adding the item
    remaining_capacity_after_item = bins_remain_cap - item
    
    # Initialize priority scores with zeros
    priority_scores = np.zeros_like(bins_remain_cap)
    
    # Ignore bins that cannot accommodate the item
    eligible_bins = remaining_capacity_after_item >= 0
    
    # For eligible bins, higher priorities are assigned to bins that are closer to being full
    priority_scores[eligible_bins] = 1 / (1 + remaining_capacity_after_item[eligible_bins])
    
    # Alternatively, if we want to favor the least full bin that can accommodate the item,
    # we can use the following formula instead:
    # priority_scores[eligible_bins] = -remaining_capacity_after_item[eligible_bins]
    
    return priority_scores
```
