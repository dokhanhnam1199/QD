```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, historic_item_sizes: list = None, alpha: float = 0.4, beta: float = 0.3, gamma: float = 0.3) -> np.ndarray:
    """
    Mutated priority function that incorporates adaptive weighting, multiple objectives, and dynamic weighting.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score for the current item's fit
    fit_priority = 1 / (1 + capacity_diff)
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    fit_priority[bins_remain_cap < item] = 0
    
    # Calculate the bin utilization, considering both the current item and future potential
    if historic_item_sizes is not None:
        avg_historic_size = np.mean(historic_item_sizes)
    else:
        avg_historic_size = np.mean(bins_remain_cap)  # Using mean remaining capacity as a proxy for historic item sizes
    
    utilization_priority = (bins_remain_cap + item) / (bins_remain_cap + item + avg_historic_size)
    
    # Calculate the bin's remaining capacity after placing the item, considering future item placements
    future_capacity = np.maximum(0, bins_remain_cap - item)
    future_utilization_priority = future_capacity / (future_capacity + avg_historic_size)
    
    # Calculate the overall priority, balancing the current item's fit, bin utilization, and future capacity
    priority = alpha * fit_priority + beta * utilization_priority + gamma * future_utilization_priority
    
    # Ensure the priority scores are not NaN (e.g., due to division by zero)
    priority = np.nan_to_num(priority)
    
    # Assign high priority to bins with enough capacity and a good fit
    priority = np.where(bins_remain_cap >= item, priority, -1)
    
    # Adaptively adjust the priority scores based on the problem's state
    min_priority = np.min(priority)
    max_priority = np.max(priority)
    if max_priority - min_priority > 0:
        priority = (priority - min_priority) / (max_priority - min_priority)
    
    return priority

# Example usage:
bins_remain_cap = np.array([10, 20, 30, 40, 50])
item_size = 15
priority_scores = priority_v2(item_size, bins_remain_cap)
print(priority_scores)
```
