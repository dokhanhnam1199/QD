{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines adaptive weighting and multi-objective optimization.\n    \"\"\"\n    # Calculate the shortfall or excess capacity for each bin\n    shortfall = np.maximum(0, item - bins_remain_cap)\n    excess = np.maximum(0, bins_remain_cap - item)\n\n    # Calculate a penalty factor for each bin based on the shortfall or excess capacity\n    penalty_factor = 1 / (1 + np.exp(shortfall)) * 1 / (1 + np.exp(excess))\n\n    # Calculate the difference between the remaining capacity of each bin and the item size\n    capacity_diff = np.abs(bins_remain_cap - item)\n\n    # Invert the differences to obtain a priority score (lower difference -> higher priority)\n    priority_score = 1 / (1 + capacity_diff)\n\n    # Calculate the available space in each bin relative to the item size\n    relative_available_space = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)\n\n    # Adaptive weighting based on the problem landscape\n    alpha = 0.4  # initial weighting for fit priority\n    beta = 0.3  # initial weighting for utilization priority\n    gamma = 0.3  # initial weighting for penalty factor\n\n    avg_bin_cap = np.mean(bins_remain_cap)\n    if avg_bin_cap > item:\n        alpha += 0.1\n        beta -= 0.1\n    else:\n        alpha -= 0.1\n        beta += 0.1\n\n    # Calculate the overall priority, balancing the current item's fit, bin utilization, and penalty factor\n    weight1 = np.where(bins_remain_cap >= item, bins_remain_cap * penalty_factor, 0)\n    weight2 = priority_score * relative_available_space / (item + 1e-6)\n    combined_priority = weight1 + weight2\n\n    # Ensure bins with higher remaining capacity get higher priority when the item fits\n    combined_priority = np.where(bins_remain_cap >= item, combined_priority + bins_remain_cap, combined_priority)\n\n    # Assign high priority to bins with enough capacity and a good fit\n    priority = alpha * priority_score + beta * (bins_remain_cap / (bins_remain_cap + item)) + gamma * penalty_factor * bins_remain_cap\n    priority = np.where(bins_remain_cap >= item, priority, -1)\n\n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines adaptive weighting and multi-objective optimization.\n    \"\"\"\n    # Calculate the difference between the remaining capacity of each bin and the item size\n    capacity_diff = np.abs(bins_remain_cap - item)\n    \n    # Invert the differences to obtain a priority score (lower difference -> higher priority)\n    priority_capacity = 1 / (1 + capacity_diff)\n    \n    # If the item size exceeds the remaining capacity, set the priority to 0\n    priority_capacity[bins_remain_cap < item] = 0\n    \n    # Calculate priority based on how full the bin is and how well the item fits\n    priority_fullness = np.where(bins_remain_cap >= item, \n                                 # for bins that can hold the item, the priority is inversely proportional to the remaining capacity\n                                 1.0 / (bins_remain_cap + 1), \n                                 # for bins that cannot hold the item, the priority is zero\n                                 0.0)\n    \n    # Introduce a 'balance' factor to prioritize bins with remaining capacity close to 50% of the bin size\n    balance_factor = 1 - np.abs((bins_remain_cap - item) / (bins_remain_cap + item))\n    \n    # Calculate a penalty factor for each bin based on the shortfall or excess capacity\n    shortfall = np.maximum(0, item - bins_remain_cap)\n    excess = np.maximum(0, bins_remain_cap - item)\n    penalty_factor = 1 / (1 + np.exp(shortfall)) * 1 / (1 + np.exp(excess))\n    \n    # Combine the priorities using adaptive weighting\n    priorities = 0.4 * priority_capacity + 0.3 * priority_fullness + 0.2 * balance_factor + 0.1 * penalty_factor\n    \n    # Ensure priorities are not negative\n    priorities = np.where(priorities < 0, 0, priorities)\n    \n    # Consider the remaining capacity of each bin to avoid overfilling\n    priorities = np.where(bins_remain_cap >= item, priorities + 0.01 * bins_remain_cap, priorities)\n    \n    return priorities\n\n### Analyze & experience\n- Comparing the 1st heuristic vs the 20th heuristic, we see that the best heuristic uses a combination of multi-objective priorities with dynamic weighting, while the worst heuristic uses a similar approach but with less effective weighting and prioritization. \nComparing the 2nd heuristic vs the 19th heuristic, we see that the second-best heuristic introduces a 'balance' factor to prioritize bins with remaining capacity close to 50% of the bin size, while the second-worst heuristic lacks this factor. \nComparing the 3rd heuristic vs the 18th heuristic, we see that the third-best heuristic uses adaptive weighting based on the problem's current state, while the third-worst heuristic uses a less effective adaptive weighting approach. \nOverall: the better heuristics tend to use more effective combinations of multi-objective priorities, dynamic weighting, and adaptive balancing, while the worse heuristics lack these elements or implement them less effectively.\n- \nHere's a redefined 'Current self-reflection' with key points:\n* **Keywords**: Balancing, adaptation, weighted factors\n* **Advice**: Design heuristics that adapt to problem states and balance multiple objectives\n* **Avoid**: Prioritizing single factors, neglecting problem state changes\n* **Explanation**: Focus on dynamic weighting and forecasting to create effective heuristics, avoiding rigid prioritization and incorporating problem state adaptation.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}