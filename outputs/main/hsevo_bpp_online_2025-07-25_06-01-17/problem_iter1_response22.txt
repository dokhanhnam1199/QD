```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function favors bins that have the most remaining capacity,
    while at the same time trying to fit items into bins where they would 
    minimize the remaining capacity, thus reducing waste.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the waste (remaining capacity) if the item is added to each bin
    waste = bins_remain_cap - item
    
    # Delta : Give higher priority to bins where item fits more tightly
    delta = np.where(waste < 0, -np.inf, waste)
    
    # More remaining space, higher priority
    priority = bins_remain_cap
    
    # Balance priorities such that bins with higher remaining capacity have lower priority scores when item cannot fit
    priority = np.where(delta > 0, priority / (delta + 1e-10), -np.inf)
    
    # If item cannot be packed, bin should not be selected.
    priority = np.where(bins_remain_cap < item, -np.inf, priority)
    
    return priority
```
