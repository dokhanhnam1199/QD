```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins that have the most available capacity,
    tying with the bin that will be filled the most after adding the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Priority score is inversely proportional to the remaining capacity after adding the item
    # Add a small value to prevent division by zero
    priorities = 1 / np.maximum(bins_remain_cap - item, 1e-6)
    
    # Add a secondary priority that prefers bins that will be filled the most after adding the item
    secondary_priority = (bins_remain_cap - item) / bins_remain_cap
    
    # Normalize the secondary priority to be between 0 and 1
    max_secondary_priority = np.max(secondary_priority)
    min_secondary_priority = np.min(secondary_priority)
    normalized_secondary_priority = (secondary_priority - min_secondary_priority) / (max_secondary_priority - min_secondary_priority + 1e-6)
    
    # Combine the two priorities
    priorities += normalized_secondary_priority
    
    return priorities
```
