{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines elements of previous heuristics for better performance.\n    \"\"\"\n    # Calculate the waste (remaining capacity) if the item is added to each bin\n    waste = bins_remain_cap - item\n    \n    # Give higher priority to bins where item fits more tightly\n    delta = np.where(waste < 0, -np.inf, waste)\n    \n    # Prioritize bins with just enough capacity and higher available space\n    priority = np.where(delta > 0, bins_remain_cap / (delta + 1e-10), -np.inf)\n    \n    # Avoid bins that are too full or too empty\n    priority = np.where(bins_remain_cap < item, -np.inf, priority)\n    priority = np.where(bins_remain_cap == 0, priority * 0.9, priority)  # reduce priority for empty bins\n    \n    # Balance priorities based on bin fullness and item fit\n    priority = np.where(bins_remain_cap > item, priority * (1 + (bins_remain_cap - item) / (bins_remain_cap + 1e-10)), priority)\n    \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns a priority score for each bin, balancing the current item's fit with future potential and bin utilization.\n\n    Args:\n        item: Size of the item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n        historic_item_sizes: Optional array of previously packed item sizes for forecasting.\n        alpha: Weight for the current item's fit (default: 0.5).\n        beta: Weight for bin utilization and future potential (default: 0.3).\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    # Calculate the difference between the remaining capacity of each bin and the item size\n    capacity_diff = np.abs(bins_remain_cap - item)\n    \n    # Invert the differences to obtain a priority score for the current item's fit\n    fit_priority = 1 / (1 + capacity_diff)\n    \n    # If the item size exceeds the remaining capacity, set the priority to 0\n    fit_priority[bins_remain_cap < item] = 0\n    \n    # Calculate the bin utilization, considering both the current item and future potential\n    if historic_item_sizes is not None:\n        avg_historic_size = np.mean(historic_item_sizes)\n        utilization_priority = (bins_remain_cap + avg_historic_size) / (bins_remain_cap + item + avg_historic_size)\n    else:\n        utilization_priority = bins_remain_cap / (bins_remain_cap + item)\n    \n    # Calculate the overall priority, balancing the current item's fit and bin utilization\n    priority = alpha * fit_priority + beta * utilization_priority\n    \n    # Ensure the priority scores are not NaN (e.g., due to division by zero)\n    priority = np.nan_to_num(priority)\n    \n    return priority\n\n### Analyze & experience\n- Comparing 1st vs 20th, we see that the best heuristic considers multiple objectives (capacity difference, balance factor, and forecasting) to prioritize bins, while the worst heuristic only combines balance and forecasting without considering the capacity difference. \nComparing 2nd vs 19th, we see that the second-best heuristic also considers multiple objectives, but with a different approach to calculating the priority scores. \nComparing 3rd vs 18th, we see that the third-best heuristic uses weighted factors to combine different priorities, while the 18th heuristic uses a simpler approach to combine priorities. \nOverall: Better heuristics consider multiple objectives, use weighted factors, and have a more sophisticated approach to calculating priority scores.\n- \nHere's a redefined 'Current self-reflection' to design better heuristics:\n* **Keywords**: Multi-objective, weighted factors, balance\n* **Advice**: Incorporate dynamic weighting, consider trade-offs, and prioritize flexibility\n* **Avoid**: Overemphasizing tight fits, myopic focus on single objectives\n* **Explanation**: By considering multiple objectives and using adaptive weighting, heuristics can effectively balance competing priorities and adapt to changing problem landscapes.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}