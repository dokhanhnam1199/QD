{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to favor bins that have enough capacity to hold the item\n    and give higher priority to bins that have just enough capacity, thus minimizing waste.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Create a mask to identify bins that can hold the item\n    can_hold_item = bins_remain_cap >= item\n    \n    # Calculate the waste that would be caused by adding the item to each bin\n    waste = bins_remain_cap - item\n    \n    # Calculate the priority score for each bin\n    priority = np.where(can_hold_item, 1 / (waste + 1), 0)\n    \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to favor bins that have just enough capacity to \n    accommodate the item, to avoid splitting items across multiple bins. It uses a \n    combination of the remaining capacity and the item size to calculate the priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the \"closeness\" of each bin to being full after adding the item\n    remaining_capacity_after_item = bins_remain_cap - item\n    \n    # Initialize priority scores with zeros\n    priority_scores = np.zeros_like(bins_remain_cap)\n    \n    # Ignore bins that cannot accommodate the item\n    eligible_bins = remaining_capacity_after_item >= 0\n    \n    # For eligible bins, higher priorities are assigned to bins that are closer to being full\n    priority_scores[eligible_bins] = 1 / (1 + remaining_capacity_after_item[eligible_bins])\n    \n    # Alternatively, if we want to favor the least full bin that can accommodate the item,\n    # we can use the following formula instead:\n    # priority_scores[eligible_bins] = -remaining_capacity_after_item[eligible_bins]\n    \n    return priority_scores\n\n### Analyze & experience\n- Comparing the 1st heuristic vs the 20th heuristic, we see that the best heuristic prioritizes bins based on how full they are and how well the item fits, while the worst heuristic only considers the available space relative to the item size. The 2nd heuristic vs the 19th heuristic shows that the former favors bins with just enough capacity, while the latter prioritizes bins with enough capacity and higher available space. Comparing the 3rd vs the 18th, we see that the former assigns higher priority to bins with lower ratio of item size to remaining capacity, while the latter favors bins with enough capacity to fit the item. The 4th vs the 17th heuristic comparison reveals that the former uses a combination of remaining capacity and item size to calculate priority, while the latter acts as a First-Fit Decreasing heuristic. Overall, better heuristics consider multiple factors such as bin fullness, item fit, and available space, while worse heuristics rely on a single factor.\n- \nHere's a redefined 'Current self-reflection' with key points to design better heuristics:\n* **Keywords**: Balance, Priority, Forecasting\n* **Advice**: Consider multiple objectives, prioritize efficient placements, and anticipate future items\n* **Avoid**: Oversimplification, narrow focus, and neglecting future constraints\n* **Explanation**: By balancing competing factors, prioritizing tight fits, and considering future placements, heuristics can be designed to optimize outcomes and adapt to changing conditions.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}