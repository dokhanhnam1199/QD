```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Adaptive, multi-objective priority function for online Bin Packing Problem.
    Combines dynamic weighting, fit-based prioritization, and utilization-aware penalties.
    """
    
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Calculate an adaptive weight based on the item size and bin capacities
    adaptive_weight = 1 / (1 + np.exp(-item / np.mean(bins_remain_cap)))
    
    # Invert the differences to obtain a priority score for the current item's fit
    fit_priority = adaptive_weight / (1 + capacity_diff)
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    fit_priority[bins_remain_cap < item] = 0
    
    # Calculate the shortfall or excess capacity for each bin
    shortfall = np.maximum(0, item - bins_remain_cap)
    excess = np.maximum(0, bins_remain_cap - item)
    
    # Calculate a utilization-aware penalty factor for each bin
    utilization_penalty = 1 / (1 + np.exp(-shortfall / np.mean(bins_remain_cap))) * 1 / (1 + np.exp(excess / np.mean(bins_remain_cap)))
    
    # Calculate the bin utilization, considering both the current item and future potential
    avg_historic_size = np.mean(bins_remain_cap)  # Using mean remaining capacity as a proxy for historic item sizes
    utilization_priority = (bins_remain_cap + avg_historic_size) / (bins_remain_cap + item + avg_historic_size)
    
    # Calculate a dynamic weight for balancing fit and utilization priorities
    dynamic_weight = np.exp(-(capacity_diff / np.mean(capacity_diff)))
    
    # Calculate the overall priority, balancing the current item's fit and bin utilization
    priority = dynamic_weight * fit_priority + (1 - dynamic_weight) * utilization_priority * utilization_penalty * bins_remain_cap
    
    # Ensure the priority scores are not NaN (e.g., due to division by zero)
    priority = np.nan_to_num(priority)
    
    # Assign high priority to bins with enough capacity and a good fit
    priority = np.where(bins_remain_cap >= item, priority, -1)
    
    # Further refine the priority scores based on the bins' remaining capacities
    priority += np.log(bins_remain_cap + 1) / np.log(np.mean(bins_remain_cap) + 1)
    
    return priority
```
