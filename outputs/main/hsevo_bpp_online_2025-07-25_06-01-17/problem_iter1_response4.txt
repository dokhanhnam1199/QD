```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function prioritizes bins based on the following rules:
    1. The bin with the smallest remaining capacity that can still fit the item is prioritized.
    2. If multiple bins have the same smallest remaining capacity, the one that is the most empty (i.e., has the most remaining capacity relative to its original capacity) is prioritized.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the absolute difference between the remaining capacity and the item size
    # This will be used to prioritize bins that have just enough capacity
    abs_diff = np.abs(bins_remain_cap - item)
    
    # Create a mask for bins that have enough capacity to hold the item
    mask = bins_remain_cap >= item
    
    # Calculate the relative remaining capacity (remaining capacity divided by original capacity)
    # This will be used to prioritize less full bins when there are multiple bins with the same smallest remaining capacity
    rel_remain_cap = bins_remain_cap / np.max(bins_remain_cap)
    
    # Create the priority score array, setting priority scores to -1 for bins that cannot hold the item
    priority_scores = np.where(mask, -abs_diff, -1)
    
    # For bins with the same smallest remaining capacity, prioritize the one with the most remaining capacity relative to its original capacity
    priority_scores += np.where(mask, rel_remain_cap, 0)
    
    return priority_scores
```
