```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines adaptive weighting, multiple objectives, and dynamic forecasting.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score for the current item's fit
    fit_priority = 1 / (1 + np.log(1 + capacity_diff) / np.log(3.260733352983878 + 1))  # Improved fit priority
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    fit_priority[bins_remain_cap < item] = 0
    
    # Calculate the shortfall or excess capacity for each bin
    shortfall = np.maximum(0, item - bins_remain_cap)
    excess = np.maximum(0, bins_remain_cap - item)
    
    # Calculate a penalty factor for each bin based on the shortfall or excess capacity
    penalty_factor = 1 / (1 + np.exp(shortfall) / 8.750124496524109) * 1 / (1 + np.exp(excess) / 8.750124496524109)
    
    # Adaptive weighting based on the problem landscape
    avg_bin_cap = np.mean(bins_remain_cap)
    alpha = 0.5312997516499514 + (0.5100436931845322 - 0.5312997516499514) * (item / (item + avg_bin_cap))  # Dynamic weighting for fit priority
    beta = 0.39664870844933536 + (0.3737788894904021 - 0.39664870844933536) * (bins_remain_cap.mean() / (bins_remain_cap.mean() + item))  # Dynamic weighting for utilization priority
    
    # Calculate the bin utilization, considering both the current item and future potential
    avg_historic_size = np.mean(bins_remain_cap)  # Using mean remaining capacity as a proxy for historic item sizes
    utilization_priority = (bins_remain_cap + avg_historic_size) / (bins_remain_cap + item + avg_historic_size)
    
    # Calculate the overall priority, balancing the current item's fit, bin utilization, and penalty factor
    priority = alpha * fit_priority + beta * utilization_priority + (1 - alpha - beta) * penalty_factor * bins_remain_cap
    
    # Ensure the priority scores are not NaN (e.g., due to division by zero)
    priority = np.nan_to_num(priority)
    
    # Assign high priority to bins with enough capacity and a good fit
    priority = np.where(bins_remain_cap >= item, priority, -1)
    
    # Dynamic prioritization based on the current state of the bins
    max_bin_priority = np.max(priority)
    priority[priority < max_bin_priority] *= (1 - (max_bin_priority - priority[priority < max_bin_priority]) / max_bin_priority)
    
    return priority
```
