{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns a priority score for each bin, taking into account the item size, remaining capacity, \n    and potential future items. This heuristic aims to balance efficient placements, minimize waste, \n    and anticipate future constraints.\n\n    Args:\n        item: Size of the item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        historic_item_sizes: Array of previously seen item sizes (default is None).\n        alpha: Weight for the capacity difference objective (default is 0.5).\n        beta: Weight for the future item forecasting objective (default is 0.3).\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the difference between the remaining capacity of each bin and the item size\n    capacity_diff = np.abs(bins_remain_cap - item)\n    \n    # Invert the differences to obtain a priority score (lower difference -> higher priority)\n    priority_capacity = 1 / (1 + capacity_diff)\n    \n    # If historic item sizes are available, forecast future item sizes\n    if historic_item_sizes is not None:\n        # Calculate the average size of historic items\n        avg_historic_size = np.mean(historic_item_sizes)\n        \n        # Calculate the difference between the remaining capacity of each bin and the forecasted item size\n        forecast_diff = np.abs(bins_remain_cap - avg_historic_size)\n        \n        # Invert the differences to obtain a priority score (lower difference -> higher priority)\n        priority_forecast = 1 / (1 + forecast_diff)\n        \n        # Combine the priority scores using weighting factors\n        priority = alpha * priority_capacity + beta * priority_forecast\n    else:\n        # If no historic item sizes are available, use only the capacity difference objective\n        priority = priority_capacity\n    \n    # If the item size exceeds the remaining capacity, set the priority to 0\n    priority[bins_remain_cap < item] = 0\n    \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combine balance and forecasting to prioritize bins.\n    \"\"\"\n    # Calculate the difference between the remaining capacity of each bin and the item size\n    # to encourage packing items into bins where the item size is close to the remaining capacity\n    capacity_diff = np.abs(bins_remain_cap - item)\n    \n    # Invert the differences to obtain a priority score (lower difference -> higher priority)\n    priority = 1 / (1 + capacity_diff)\n    \n    # Calculate the available space in each bin relative to the item size\n    # to favor bins that have enough capacity to fit the item and have the most available space\n    relative_available_space = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)\n    \n    # Combine the two priorities to balance competing factors\n    combined_priority = priority * relative_available_space / (item + 1e-6)\n    \n    # If the item size exceeds the remaining capacity, set the priority to 0\n    combined_priority[bins_remain_cap < item] = 0\n    \n    return combined_priority\n\n### Analyze & experience\n- Comparing 1st vs 20th, we see that the best heuristic considers multiple objectives (capacity difference, balance factor, and forecasting) to prioritize bins, while the worst heuristic only combines balance and forecasting without considering the capacity difference. \nComparing 2nd vs 19th, we see that the second-best heuristic also considers multiple objectives, but with a different approach to calculating the priority scores. \nComparing 3rd vs 18th, we see that the third-best heuristic uses weighted factors to combine different priorities, while the 18th heuristic uses a simpler approach to combine priorities. \nOverall: Better heuristics consider multiple objectives, use weighted factors, and have a more sophisticated approach to calculating priority scores.\n- \nHere's a redefined 'Current self-reflection' to design better heuristics:\n* **Keywords**: Multi-objective, weighted factors, balance\n* **Advice**: Incorporate dynamic weighting, consider trade-offs, and prioritize flexibility\n* **Avoid**: Overemphasizing tight fits, myopic focus on single objectives\n* **Explanation**: By considering multiple objectives and using adaptive weighting, heuristics can effectively balance competing priorities and adapt to changing problem landscapes.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}