```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A mutated priority function for online Bin Packing Problem, 
    incorporating adaptive weighting and multi-objective optimization.
    """
    
    # Calculate the tightness of fit for the current item in each bin
    fit_priority = np.exp(-np.abs(bins_remain_cap - item))
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    fit_priority = np.where(bins_remain_cap >= item, fit_priority, 0)
    
    # Calculate the utilization ratio for each bin, considering the current item
    utilization_priority = (bins_remain_cap + item) / (bins_remain_cap + np.mean(bins_remain_cap))
    
    # Calculate a penalty factor for each bin based on the excess capacity
    excess_penalty = np.exp(-np.maximum(0, bins_remain_cap - item))
    
    # Calculate the overall priority, balancing the current item's fit, bin utilization, and excess penalty
    alpha = 0.4  # Dynamic weighting for fit priority
    beta = 0.3   # Dynamic weighting for utilization priority
    gamma = 0.3  # Dynamic weighting for excess penalty
    
    priority = alpha * fit_priority + beta * utilization_priority + gamma * excess_penalty
    
    # Ensure the priority scores are not NaN (e.g., due to division by zero)
    priority = np.nan_to_num(priority)
    
    # Assign high priority to bins with enough capacity and a good fit
    priority = np.where(bins_remain_cap >= item, priority, -1)
    
    return priority
```
