{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function prioritizes bins based on how full they are, \n    and how well the item fits in the bin. The bin that can fill up the most \n    with the item, or the bin that is closest to being full after adding the \n    item gets the highest priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the ratio of the item to each bin's remaining capacity\n    ratio = np.where(bins_remain_cap == 0, 0, item / bins_remain_cap)\n    \n    # Calculate the remaining space in each bin after adding the item\n    remaining_space = np.where(bins_remain_cap >= item, bins_remain_cap - item, 0)\n    \n    # Calculate a \"fill\" score for each bin: how much of the bin would be full after adding the item\n    fill_score = np.where(remaining_space == 0, 1, 1 - remaining_space / bins_remain_cap)\n    \n    # Calculate the priority score for each bin\n    priority_score = np.where(ratio == 0, 0, ratio * fill_score)\n    \n    return priority_score\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function favors bins that have the most remaining capacity,\n    while taking into account the size of the item to be added.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the ratio of remaining capacity to item size for each bin\n    ratio = bins_remain_cap / item\n    \n    # Apply a penalty to bins that are already close to full\n    penalty = (1 - (bins_remain_cap / item)) * (bins_remain_cap < item)\n    \n    # Calculate the priority score as the product of the ratio and the penalty\n    priority = ratio * (1 - penalty)\n    \n    # Add a small positive value to avoid division by zero\n    priority += np.finfo(np.float64).eps\n    \n    # Normalize the priority scores to favor bins with the most remaining capacity\n    priority = priority / np.sum(priority)\n    \n    return np.array(priority)\n\n### Analyze & experience\n- Comparing the 1st heuristic vs the 20th heuristic, we see that the best heuristic prioritizes bins based on how full they are and how well the item fits, while the worst heuristic only considers the available space relative to the item size. The 2nd heuristic vs the 19th heuristic shows that the former favors bins with just enough capacity, while the latter prioritizes bins with enough capacity and higher available space. Comparing the 3rd vs the 18th, we see that the former assigns higher priority to bins with lower ratio of item size to remaining capacity, while the latter favors bins with enough capacity to fit the item. The 4th vs the 17th heuristic comparison reveals that the former uses a combination of remaining capacity and item size to calculate priority, while the latter acts as a First-Fit Decreasing heuristic. Overall, better heuristics consider multiple factors such as bin fullness, item fit, and available space, while worse heuristics rely on a single factor.\n- \nHere's a redefined 'Current self-reflection' with key points to design better heuristics:\n* **Keywords**: Balance, Priority, Forecasting\n* **Advice**: Consider multiple objectives, prioritize efficient placements, and anticipate future items\n* **Avoid**: Oversimplification, narrow focus, and neglecting future constraints\n* **Explanation**: By balancing competing factors, prioritizing tight fits, and considering future placements, heuristics can be designed to optimize outcomes and adapt to changing conditions.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}