import numpy as np

def priority_v2(
    item: float, 
    bins_remain_cap: np.ndarray, 
    utilization_threshold: float = 0.7590946956378941, 
    alpha: float = 0.9520443949839602, 
    beta: float = 0.1079436699973515, 
    gamma: float = 0.34091258722472495, 
    threshold_item_size: float = 3.632046812552434) -> np.ndarray:
    """
    Combines adaptive weighting, multi-objective optimization, and dynamic prioritization.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score for the current item's fit
    fit_priority = 1 / (1 + capacity_diff)
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    fit_priority[bins_remain_cap < item] = 0
    
    # Introduce a 'balance' factor to prioritize bins with remaining capacity close to 50% of the bin size
    balance_factor = 1 - np.abs((bins_remain_cap - item) / (bins_remain_cap + item))
    balance_priority = balance_factor * fit_priority
    
    # Calculate the shortfall or excess capacity for each bin
    shortfall = np.maximum(0, item - bins_remain_cap)
    excess = np.maximum(0, bins_remain_cap - item)
    
    # Calculate a penalty factor for each bin based on the shortfall or excess capacity
    penalty_factor = 1 / (1 + np.exp(shortfall)) * 1 / (1 + np.exp(excess))
    
    # Calculate the bin utilization, considering both the current item and future potential
    avg_historic_size = np.mean(bins_remain_cap)  # Using mean remaining capacity as a proxy for historic item sizes
    utilization_priority = (bins_remain_cap + avg_historic_size) / (bins_remain_cap + item + avg_historic_size)
    
    # Ensure utilization_priority does not exceed a certain threshold (e.g., 0.9)
    utilization_priority = np.where(utilization_priority > utilization_threshold, utilization_threshold, utilization_priority)
    
    # Calculate the overall priority, balancing the current item's fit, balance factor, and bin utilization
    priority = alpha * fit_priority + beta * balance_priority + gamma * utilization_priority + (1 - alpha - beta - gamma) * penalty_factor * bins_remain_cap
    
    # Ensure the priority scores are not NaN (e.g., due to division by zero)
    priority = np.nan_to_num(priority)
    
    # Assign high priority to bins with enough capacity and a good fit
    priority = np.where(bins_remain_cap >= threshold_item_size, priority, -1)
    
    return priority
