```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function favors bins that have the most remaining capacity,
    while taking into account the size of the item to be added.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the ratio of remaining capacity to item size for each bin
    ratio = bins_remain_cap / item
    
    # Apply a penalty to bins that are already close to full
    penalty = (1 - (bins_remain_cap / item)) * (bins_remain_cap < item)
    
    # Calculate the priority score as the product of the ratio and the penalty
    priority = ratio * (1 - penalty)
    
    # Add a small positive value to avoid division by zero
    priority += np.finfo(np.float64).eps
    
    # Normalize the priority scores to favor bins with the most remaining capacity
    priority = priority / np.sum(priority)
    
    return np.array(priority)
```
