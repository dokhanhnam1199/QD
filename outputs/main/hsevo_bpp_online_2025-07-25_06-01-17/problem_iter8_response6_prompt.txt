{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    item: float, \n    bins_remain_cap: np.ndarray, \n    alpha: float = 0.5029788187823183, \n    beta: float = 0.354118246767853, \n    threshold_item_size: float = 1.7749043239515936, \n    utilization_threshold: float = 0.8882678823010766, \n    penalty_factor_weight: float = 5.6183698719462525, \n    historic_size_weight: float = 5.24157358822766) -> np.ndarray:\n    \"\"\"\n    Combines multi-objective priorities with dynamic weighting.\n    \"\"\"\n    # Calculate the difference between the remaining capacity of each bin and the item size\n    capacity_diff = np.abs(bins_remain_cap - item)\n    \n    # Invert the differences to obtain a priority score for the current item's fit\n    fit_priority = 1 / (1 + capacity_diff)\n    \n    # If the item size exceeds the remaining capacity, set the priority to 0\n    fit_priority[bins_remain_cap < item] = 0\n    \n    # Calculate the shortfall or excess capacity for each bin\n    shortfall = np.maximum(0, item - bins_remain_cap)\n    excess = np.maximum(0, bins_remain_cap - item)\n    \n    # Calculate a penalty factor for each bin based on the shortfall or excess capacity\n    penalty_factor = penalty_factor_weight / (1 + np.exp(shortfall)) * 1 / (1 + np.exp(excess))\n    \n    # Calculate the bin utilization, considering both the current item and future potential\n    avg_historic_size = historic_size_weight * np.mean(bins_remain_cap)  # Using mean remaining capacity as a proxy for historic item sizes\n    utilization_priority = (bins_remain_cap + avg_historic_size) / (bins_remain_cap + item + avg_historic_size)\n    \n    # Ensure utilization_priority does not exceed the utilization_threshold\n    utilization_priority = np.where(utilization_priority > utilization_threshold, utilization_threshold, utilization_priority)\n    \n    # Calculate the overall priority, balancing the current item's fit and bin utilization\n    priority = alpha * fit_priority + beta * utilization_priority + (1 - alpha - beta) * penalty_factor * bins_remain_cap\n    \n    # Ensure the priority scores are not NaN (e.g., due to division by zero)\n    priority = np.nan_to_num(priority)\n    \n    # Assign high priority to bins with enough capacity and a good fit\n    priority = np.where(bins_remain_cap >= threshold_item_size, priority, -1)\n    \n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines multi-objective and dynamic weighting for better outcomes.\n    \"\"\"\n    # Calculate the difference between the remaining capacity of each bin and the item size\n    capacity_diff = np.abs(bins_remain_cap - item)\n    \n    # Invert the differences to obtain a priority score (lower difference -> higher priority)\n    priority = 1 / (1 + capacity_diff)\n    \n    # If the item size exceeds the remaining capacity, set the priority to 0\n    priority[bins_remain_cap < item] = 0\n    \n    # Introduce a 'balance' factor to prioritize bins with remaining capacity close to 50% of the bin size\n    balance_factor = 1 - np.abs((bins_remain_cap - item) / (bins_remain_cap + item))\n    priority *= balance_factor\n    \n    # Calculate a penalty factor for each bin based on the shortfall or excess capacity\n    shortfall = np.maximum(0, item - bins_remain_cap)\n    excess = np.maximum(0, bins_remain_cap - item)\n    penalty_factor = 1 / (1 + np.exp(shortfall)) * 1 / (1 + np.exp(excess))\n    priority *= penalty_factor\n    \n    # Consider forecasting future items to anticipate constraints\n    if all_items is not None:\n        future_items = all_items[all_items > item]\n        forecast_factor = 1 / (1 + np.sum(future_items))\n        priority *= forecast_factor\n    \n    # Ensure bins with higher remaining capacity get higher priority when the item fits\n    priority = np.where(bins_remain_cap >= item, priority + 0.1 * bins_remain_cap, priority)\n    \n    return priority\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the best heuristic uses a more complex calculation involving dynamic weighting, shortfall, and excess capacity, whereas the worst heuristic uses a simpler calculation with a fixed weighting factor. \nComparing (2nd) vs (19th), we see that the second-best heuristic introduces a balance factor and forecasting, while the second-worst heuristic lacks these features. \nComparing (3rd) vs (18th), we see that the third-best heuristic uses a combination of capacity difference, balance factor, and forecasting, whereas the third-worst heuristic relies solely on capacity difference and penalty factor. \nComparing (4th) vs (17th), we see that the fourth-best heuristic incorporates multi-objective priorities with dynamic weighting and fragmentation priority, while the fourth-worst heuristic uses a simpler weighted difference calculation. \nComparing (5th) vs (16th), we see that the fifth-best heuristic combines capacity difference, balance factor, and forecasting, whereas the fifth-worst heuristic uses a simpler calculation with a fixed weighting factor. \nComparing (6th) vs (15th), we see that the sixth-best heuristic uses a combination of multi-objective priorities with dynamic weighting, while the sixth-worst heuristic lacks the dynamic weighting. \nComparing (7th) vs (14th), we see that the seventh-best heuristic introduces a utilization priority, while the seventh-worst heuristic relies solely on capacity difference and penalty factor. \nComparing (8th) vs (13th), we see that the eighth-best heuristic uses a combination of capacity difference, balance factor, and forecasting, whereas the eighth-worst heuristic uses a simpler calculation with a fixed weighting factor. \nComparing (9th) vs (12th), we see that the ninth-best heuristic incorporates multi-objective priorities with dynamic weighting, while the ninth-worst heuristic uses a simpler weighted difference calculation. \nComparing (10th) vs (11th), we see that the tenth-best heuristic uses a combination of capacity difference, balance factor, and forecasting, whereas the tenth-worst heuristic lacks the forecasting feature. \nOverall: Better heuristics tend to use more complex calculations, incorporate multiple objectives, and use dynamic weighting, while worse heuristics rely on simpler calculations with fixed weighting factors.\n- \nHere's a redefined 'Current self-reflection' with useful advice:\n* Keywords: adaptive, multi-objective, dynamic\n* Advice: Consider adaptive weighting, multi-objective optimization, and dynamic prioritization\n* Avoid: simplistic balancing, over-emphasis on tight fits, static prioritization\n* Explanation: By incorporating adaptive and dynamic elements, heuristics can better respond to changing problem conditions, leading to more effective optimization solutions.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}