```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines adaptive weighting and multi-objective optimization with balancing.
    """
    
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score (lower difference -> higher priority)
    priority_capacity = 1 / (1 + capacity_diff)
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    priority_capacity[bins_remain_cap < item] = 0
    
    # Calculate priority based on how full the bin is and how well the item fits
    priority_fullness = np.where(bins_remain_cap >= item, 
                                 # for bins that can hold the item, the priority is inversely proportional to the remaining capacity
                                 1.0 / (bins_remain_cap + 1), 
                                 # for bins that cannot hold the item, the priority is zero
                                 0.0)
    
    # Introduce a 'balance' factor to prioritize bins with remaining capacity close to 50% of the bin size
    balance_factor = 1 - np.abs((bins_remain_cap - item) / (bins_remain_cap + item))
    
    # Calculate a penalty factor for each bin based on the shortfall or excess capacity
    shortfall = np.maximum(0, item - bins_remain_cap)
    excess = np.maximum(0, bins_remain_cap - item)
    penalty_factor = 1 / (1 + np.exp(shortfall)) * 1 / (1 + np.exp(excess))
    
    # Calculate the bin utilization, considering both the current item and future potential
    avg_historic_size = np.mean(bins_remain_cap)  # Using mean remaining capacity as a proxy for historic item sizes
    utilization_priority = (bins_remain_cap + avg_historic_size) / (bins_remain_cap + item + avg_historic_size)
    
    # Adaptive weighting based on the problem's current state
    total_remain_cap = np.sum(bins_remain_cap)
    if total_remain_cap == 0:
        adapt_weight = 0
    else:
        adapt_weight = (item / total_remain_cap) * 0.4 + (1 - item / total_remain_cap) * 0.3
    
    # Dynamic prioritization based on the current item's size and the remaining capacities
    dynamic_prioritization = np.exp(-capacity_diff / (1 + item))
    
    # Combine the priorities using adaptive weighting
    priorities = adapt_weight * priority_capacity + (1 - adapt_weight) * (0.3 * utilization_priority + 0.2 * balance_factor + 0.1 * penalty_factor + 0.1 * dynamic_prioritization)
    
    # Ensure priorities are not negative
    priorities = np.where(priorities < 0, 0, priorities)
    
    # Consider the remaining capacity of each bin to avoid overfilling
    priorities = np.where(bins_remain_cap >= item, priorities + 0.01 * bins_remain_cap, priorities)
    
    return priorities
```
