```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, historic_item_sizes: np.ndarray = None, alpha: float = 0.5, beta: float = 0.3) -> np.ndarray:
    """
    Combines multi-objective approach with adaptive weighting.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score (lower difference -> higher priority)
    priority_capacity = 1 / (1 + capacity_diff)
    
    # Calculate the shortfall or excess capacity for each bin
    shortfall = np.maximum(0, item - bins_remain_cap)
    excess = np.maximum(0, bins_remain_cap - item)
    
    # Calculate a penalty factor for each bin based on the shortfall or excess capacity
    penalty_factor = 1 / (1 + np.exp(shortfall)) * 1 / (1 + np.exp(excess))
    
    # If historic item sizes are available, forecast future item sizes
    if historic_item_sizes is not None:
        # Calculate the average size of historic items
        avg_historic_size = np.mean(historic_item_sizes)
        
        # Calculate the difference between the remaining capacity of each bin and the forecasted item size
        forecast_diff = np.abs(bins_remain_cap - avg_historic_size)
        
        # Invert the differences to obtain a priority score (lower difference -> higher priority)
        priority_forecast = 1 / (1 + forecast_diff)
        
        # Combine the priority scores using weighting factors
        priority = alpha * priority_capacity * penalty_factor + beta * priority_forecast * penalty_factor
    else:
        # If no historic item sizes are available, use only the capacity difference objective
        priority = priority_capacity * penalty_factor
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    priority[bins_remain_cap < item] = 0
    
    # Ensure bins with higher remaining capacity get higher priority when the item fits
    priority = np.where(bins_remain_cap >= item, priority + bins_remain_cap, priority)
    
    return priority
```
