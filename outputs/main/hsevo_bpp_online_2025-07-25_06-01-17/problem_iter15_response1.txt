```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, historic_item_sizes: list, alpha: float = 0.4, beta: float = 0.3, gamma: float = 0.3) -> np.ndarray:
    """
    Adaptive weighting for multiple objectives, incorporating forecasting and dynamic weighting.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score for the current item's fit
    fit_priority = 1 / (1 + capacity_diff)
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    fit_priority[bins_remain_cap < item] = 0
    
    # Forecast future item sizes based on historic data
    forecasted_item_size = np.mean(historic_item_sizes[-10:]) if historic_item_sizes else item
    
    # Calculate the potential wasted space for each bin
    wasted_space = bins_remain_cap - item
    
    # Calculate a priority score for minimizing wasted space
    wasted_space_priority = 1 / (1 + np.exp(wasted_space))
    
    # Calculate the bin utilization, considering both the current item and future potential
    utilization_priority = (bins_remain_cap + forecasted_item_size) / (bins_remain_cap + item + forecasted_item_size)
    
    # Calculate the overall priority, balancing the current item's fit, bin utilization, and wasted space
    priority = alpha * fit_priority + beta * utilization_priority + gamma * wasted_space_priority
    
    # Incorporate dynamic weighting based on the problem's state
    if np.mean(bins_remain_cap) < item:
        # If the average remaining capacity is less than the item size, prioritize fit and utilization
        priority = 0.5 * fit_priority + 0.3 * utilization_priority + 0.2 * wasted_space_priority
    elif np.mean(bins_remain_cap) > 2 * item:
        # If the average remaining capacity is more than twice the item size, prioritize wasted space minimization
        priority = 0.2 * fit_priority + 0.2 * utilization_priority + 0.6 * wasted_space_priority
    
    # Ensure the priority scores are not NaN (e.g., due to division by zero)
    priority = np.nan_to_num(priority)
    
    # Assign high priority to bins with enough capacity and a good fit
    priority = np.where(bins_remain_cap >= item, priority, -1)
    
    return priority
```
