{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function is designed to pack items into the bins that have the\n    most available space. It's based on the idea that the best strategy for the\n    online bin packing problem is to use the 'First-Fit Decreasing' algorithm, \n    but adapted to the priority function framework. The priority function score \n    is inversely proportional to the difference between the bin's remaining capacity \n    and the item size, with a higher score indicating a better fit.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Check for zero division errors\n    denominators = np.maximum(bins_remain_cap - item, 1e-9)\n    \n    # Calculate priority score based on difference between bin capacity and item size\n    priority_scores = 1 / denominators\n    \n    # We also prefer bins that are not empty, so let's give them extra points\n    non_empty_bins = (bins_remain_cap > 0)\n    priority_scores[non_empty_bins] *= 1.1  # Magic factor, tune it as you like\n\n    return priority_scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This priority function favors bins that have the most remaining capacity,\n    while at the same time trying to fit items into bins where they would \n    minimize the remaining capacity, thus reducing waste.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the waste (remaining capacity) if the item is added to each bin\n    waste = bins_remain_cap - item\n    \n    # Delta : Give higher priority to bins where item fits more tightly\n    delta = np.where(waste < 0, -np.inf, waste)\n    \n    # More remaining space, higher priority\n    priority = bins_remain_cap\n    \n    # Balance priorities such that bins with higher remaining capacity have lower priority scores when item cannot fit\n    priority = np.where(delta > 0, priority / (delta + 1e-10), -np.inf)\n    \n    # If item cannot be packed, bin should not be selected.\n    priority = np.where(bins_remain_cap < item, -np.inf, priority)\n    \n    return priority\n\n### Analyze & experience\n- Comparing the 1st heuristic vs the 20th heuristic, we see that the best heuristic prioritizes bins based on how full they are and how well the item fits, while the worst heuristic only considers the available space relative to the item size. The 2nd heuristic vs the 19th heuristic shows that the former favors bins with just enough capacity, while the latter prioritizes bins with enough capacity and higher available space. Comparing the 3rd vs the 18th, we see that the former assigns higher priority to bins with lower ratio of item size to remaining capacity, while the latter favors bins with enough capacity to fit the item. The 4th vs the 17th heuristic comparison reveals that the former uses a combination of remaining capacity and item size to calculate priority, while the latter acts as a First-Fit Decreasing heuristic. Overall, better heuristics consider multiple factors such as bin fullness, item fit, and available space, while worse heuristics rely on a single factor.\n- \nHere's a redefined 'Current self-reflection' with key points to design better heuristics:\n* **Keywords**: Balance, Priority, Forecasting\n* **Advice**: Consider multiple objectives, prioritize efficient placements, and anticipate future items\n* **Avoid**: Oversimplification, narrow focus, and neglecting future constraints\n* **Explanation**: By balancing competing factors, prioritizing tight fits, and considering future placements, heuristics can be designed to optimize outcomes and adapt to changing conditions.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}