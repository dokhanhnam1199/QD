```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines elements of v0 and v1 heuristics for better results.
    """
    # Calculate priority based on how full the bin is and how well the item fits
    priority_fullness = np.where(bins_remain_cap >= item, 
                                 # for bins that can hold the item, the priority is inversely proportional to the remaining capacity
                                 1.0 / (bins_remain_cap + 1), 
                                 # for bins that cannot hold the item, the priority is zero
                                 0.0)
    
    # Calculate priority based on available space relative to the item size
    priority_space = np.where(bins_remain_cap >= item, bins_remain_cap, -1)
    
    # Combine the two priorities, giving more weight to the fullness priority
    priorities = 0.7 * priority_fullness + 0.3 * priority_space
    
    # Ensure priorities are not negative
    priorities = np.where(priorities < 0, 0, priorities)
    
    return priorities
```
