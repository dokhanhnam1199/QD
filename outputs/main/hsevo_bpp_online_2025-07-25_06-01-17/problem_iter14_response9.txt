```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.4, beta: float = 0.3, gamma: float = 0.3) -> np.ndarray:
    """
    Combining adaptive weighting and forecasting.
    """
    
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score for the current item's fit
    fit_priority = 1 / (1 + capacity_diff)
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    fit_priority[bins_remain_cap < item] = 0
    
    # Calculate the shortfall or excess capacity for each bin
    shortfall = np.maximum(0, item - bins_remain_cap)
    excess = np.maximum(0, bins_remain_cap - item)
    
    # Calculate a penalty factor for each bin based on the shortfall or excess capacity
    penalty_factor = 1 / (1 + np.exp(shortfall)) * 1 / (1 + np.exp(excess))
    
    # Calculate the bin utilization, considering both the current item and future potential
    avg_historic_size = np.mean(bins_remain_cap)  
    utilization_priority = (bins_remain_cap + avg_historic_size) / (bins_remain_cap + item + avg_historic_size)
    
    # Calculate the forecasted utilization priority based on the average remaining capacity and item size
    forecasted_utilization_priority = (np.mean(bins_remain_cap) + item) / (np.mean(bins_remain_cap) + item + avg_historic_size)
    
    # Adjust the weighting factors based on the problem state (average remaining capacity and item size)
    adjusted_alpha = alpha * (1 - np.mean(bins_remain_cap) / (item + np.mean(bins_remain_cap)))
    adjusted_beta = beta * (1 - np.mean(bins_remain_cap) / (item + np.mean(bins_remain_cap)))
    adjusted_gamma = gamma * (1 - np.mean(bins_remain_cap) / (item + np.mean(bins_remain_cap)))
    
    # Calculate the overall priority, balancing the current item's fit, bin utilization, and forecasted utilization
    priority = adjusted_alpha * fit_priority + adjusted_beta * utilization_priority + adjusted_gamma * forecasted_utilization_priority
    
    # Incorporate a penalty for bins with low remaining capacity
    penalty_for_low_capacity = 1 / (1 + np.exp(-bins_remain_cap))
    priority *= penalty_for_low_capacity
    
    # Ensure the priority scores are not NaN (e.g., due to division by zero)
    priority = np.nan_to_num(priority)
    
    # Assign high priority to bins with enough capacity and a good fit
    priority = np.where(bins_remain_cap >= item, priority, -1)
    
    # Adapt the weights based on the problem state (e.g., the number of bins and their remaining capacities)
    num_bins = len(bins_remain_cap)
    avg_capacity = np.mean(bins_remain_cap)
    if num_bins > 10 and avg_capacity < item / 2:
        adjusted_alpha += 0.1
        adjusted_beta -= 0.05
        adjusted_gamma -= 0.05
    elif num_bins < 5 and avg_capacity > item * 2:
        adjusted_alpha -= 0.1
        adjusted_beta += 0.05
        adjusted_gamma += 0.05
    
    # Recalculate the overall priority with the adapted weights
    priority = adjusted_alpha * fit_priority + adjusted_beta * utilization_priority + adjusted_gamma * forecasted_utilization_priority
    
    return priority
```
