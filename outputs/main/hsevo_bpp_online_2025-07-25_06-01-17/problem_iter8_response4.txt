```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines adaptive weighting and multi-objective optimization.
    """
    # Calculate the shortfall or excess capacity for each bin
    shortfall = np.maximum(0, item - bins_remain_cap)
    excess = np.maximum(0, bins_remain_cap - item)

    # Calculate a penalty factor for each bin based on the shortfall or excess capacity
    penalty_factor = 1 / (1 + np.exp(shortfall)) * 1 / (1 + np.exp(excess))

    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)

    # Invert the differences to obtain a priority score (lower difference -> higher priority)
    priority_score = 1 / (1 + capacity_diff)

    # Calculate the available space in each bin relative to the item size
    relative_available_space = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)

    # Adaptive weighting based on the problem landscape
    alpha = 0.4  # initial weighting for fit priority
    beta = 0.3  # initial weighting for utilization priority
    gamma = 0.3  # initial weighting for penalty factor

    avg_bin_cap = np.mean(bins_remain_cap)
    if avg_bin_cap > item:
        alpha += 0.1
        beta -= 0.1
    else:
        alpha -= 0.1
        beta += 0.1

    # Calculate the overall priority, balancing the current item's fit, bin utilization, and penalty factor
    weight1 = np.where(bins_remain_cap >= item, bins_remain_cap * penalty_factor, 0)
    weight2 = priority_score * relative_available_space / (item + 1e-6)
    combined_priority = weight1 + weight2

    # Ensure bins with higher remaining capacity get higher priority when the item fits
    combined_priority = np.where(bins_remain_cap >= item, combined_priority + bins_remain_cap, combined_priority)

    # Assign high priority to bins with enough capacity and a good fit
    priority = alpha * priority_score + beta * (bins_remain_cap / (bins_remain_cap + item)) + gamma * penalty_factor * bins_remain_cap
    priority = np.where(bins_remain_cap >= item, priority, -1)

    return priority
```
