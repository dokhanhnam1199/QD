import numpy as np

def priority_v2(
    item: float, 
    bins_remain_cap: np.ndarray, 
    alpha: float = 0.7840992432033196, 
    beta: float = 0.7881452111585203, 
    threshold_item_size: float = 5.193129360893225, 
    utilization_threshold: float = 0.8008551052230239, 
    penalty_factor_weight: float = 1.0561278430632925, 
    historic_size_weight: float = 7.347986018330197) -> np.ndarray:
    """
    Combines multi-objective priorities with dynamic weighting.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score for the current item's fit
    fit_priority = 1 / (1 + capacity_diff)
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    fit_priority[bins_remain_cap < item] = 0
    
    # Calculate the shortfall or excess capacity for each bin
    shortfall = np.maximum(0, item - bins_remain_cap)
    excess = np.maximum(0, bins_remain_cap - item)
    
    # Calculate a penalty factor for each bin based on the shortfall or excess capacity
    penalty_factor = penalty_factor_weight / (1 + np.exp(shortfall)) * 1 / (1 + np.exp(excess))
    
    # Calculate the bin utilization, considering both the current item and future potential
    avg_historic_size = historic_size_weight * np.mean(bins_remain_cap)  # Using mean remaining capacity as a proxy for historic item sizes
    utilization_priority = (bins_remain_cap + avg_historic_size) / (bins_remain_cap + item + avg_historic_size)
    
    # Ensure utilization_priority does not exceed the utilization_threshold
    utilization_priority = np.where(utilization_priority > utilization_threshold, utilization_threshold, utilization_priority)
    
    # Calculate the overall priority, balancing the current item's fit and bin utilization
    priority = alpha * fit_priority + beta * utilization_priority + (1 - alpha - beta) * penalty_factor * bins_remain_cap
    
    # Ensure the priority scores are not NaN (e.g., due to division by zero)
    priority = np.nan_to_num(priority)
    
    # Assign high priority to bins with enough capacity and a good fit
    priority = np.where(bins_remain_cap >= threshold_item_size, priority, -1)
    
    return priority
