```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.4, beta: float = 0.3, gamma: float = 0.3) -> np.ndarray:
    """
    Enhanced multi-objective priority function for online Bin Packing Problem.
    
    Parameters:
    item (float): The size of the item to be packed.
    bins_remain_cap (np.ndarray): An array of remaining capacities of each bin.
    alpha (float, optional): Weight for the item fit priority. Defaults to 0.4.
    beta (float, optional): Weight for the bin utilization priority. Defaults to 0.3.
    gamma (float, optional): Weight for the bin capacity priority. Defaults to 0.3.
    
    Returns:
    np.ndarray: An array of priority scores for each bin.
    """
    
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score for the current item's fit
    fit_priority = 1 / (1 + np.log(1 + capacity_diff))
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    fit_priority[bins_remain_cap < item] = 0
    
    # Calculate the bin utilization, considering both the current item and future potential
    avg_historic_size = np.mean(bins_remain_cap)  # Using mean remaining capacity as a proxy for historic item sizes
    utilization_priority = (bins_remain_cap + avg_historic_size) / (bins_remain_cap + item + avg_historic_size)
    
    # Calculate the bin capacity priority, prioritizing bins with sufficient capacity
    capacity_priority = bins_remain_cap / (bins_remain_cap + item + 1e-9)
    
    # Calculate the overall priority, balancing the current item's fit, bin utilization, and bin capacity
    priority = alpha * fit_priority + beta * utilization_priority + gamma * capacity_priority
    
    # Ensure the priority scores are not NaN (e.g., due to division by zero)
    priority = np.nan_to_num(priority)
    
    # Assign high priority to bins with enough capacity and a good fit
    priority = np.where(bins_remain_cap >= item, priority, -1)
    
    return priority

# Example usage:
item_size = 10.0
bin_capacities = np.array([20.0, 30.0, 15.0])
priority_scores = priority_v2(item_size, bin_capacities)

print(priority_scores)
```
