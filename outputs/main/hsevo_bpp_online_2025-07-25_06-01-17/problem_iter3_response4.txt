```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, max_bin_capacity: float, 
                item_arrival_history: list = None, num_future_items: int = 10) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This priority function is designed to balance competing factors, prioritize tight fits, 
    and consider future placements to minimize waste and optimize outcomes.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        max_bin_capacity: Maximum capacity of each bin.
        item_arrival_history: List of item sizes in the order they arrived (optional).
        num_future_items: Number of future items to consider (optional).

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score (lower difference -> higher priority)
    priority = 1 / (1 + capacity_diff)
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    priority[bins_remain_cap < item] = 0
    
    # Consider the balance between bins by penalizing bins with low remaining capacity
    balance_factor = 1 - (bins_remain_cap / max_bin_capacity)
    priority *= (1 - balance_factor)
    
    # Consider future item arrivals by forecasting the next items
    if item_arrival_history:
        forecast_factor = np.zeros_like(priority)
        for i in range(num_future_items):
            next_item_size = item_arrival_history[-i - 1] if i < len(item_arrival_history) else item
            forecastCapacityDiff = np.abs(bins_remain_cap - next_item_size)
            forecast_factor += 1 / (1 + forecastCapacityDiff)
        forecast_factor /= num_future_items
        priority *= (1 + forecast_factor)
    
    return priority
```
