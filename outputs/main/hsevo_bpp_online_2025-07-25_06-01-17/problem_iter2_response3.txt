```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines elements of previous heuristics for better performance.
    """
    # Calculate the waste (remaining capacity) if the item is added to each bin
    waste = bins_remain_cap - item
    
    # Give higher priority to bins where item fits more tightly
    delta = np.where(waste < 0, -np.inf, waste)
    
    # Prioritize bins with just enough capacity and higher available space
    priority = np.where(delta > 0, bins_remain_cap / (delta + 1e-10), -np.inf)
    
    # Avoid bins that are too full or too empty
    priority = np.where(bins_remain_cap < item, -np.inf, priority)
    priority = np.where(bins_remain_cap == 0, priority * 0.9, priority)  # reduce priority for empty bins
    
    # Balance priorities based on bin fullness and item fit
    priority = np.where(bins_remain_cap > item, priority * (1 + (bins_remain_cap - item) / (bins_remain_cap + 1e-10)), priority)
    
    return priority
```
