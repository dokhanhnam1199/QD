```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combine balance and forecasting to prioritize bins.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    # to encourage packing items into bins where the item size is close to the remaining capacity
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score (lower difference -> higher priority)
    priority = 1 / (1 + capacity_diff)
    
    # Calculate the available space in each bin relative to the item size
    # to favor bins that have enough capacity to fit the item and have the most available space
    relative_available_space = np.where(bins_remain_cap >= item, bins_remain_cap - item, -np.inf)
    
    # Combine the two priorities to balance competing factors
    combined_priority = priority * relative_available_space / (item + 1e-6)
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    combined_priority[bins_remain_cap < item] = 0
    
    return combined_priority
```
