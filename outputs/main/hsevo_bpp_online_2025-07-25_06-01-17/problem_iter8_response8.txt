```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines adaptive weighting and multi-objective optimization.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score (lower difference -> higher priority)
    priority = 1 / (1 + capacity_diff)
    
    # If the item size exceeds the remaining capacity, set the priority to 0
    priority = np.where(bins_remain_cap >= item, priority, 0)
    
    # Introduce a 'balance' factor to prioritize bins with remaining capacity close to 50% of the bin size
    balance_factor = 1 - np.abs((bins_remain_cap - item) / (bins_remain_cap + item))
    priority *= balance_factor
    
    # Calculate the tightness of fit for the current item in each bin
    fit_priority = np.exp(-np.abs(bins_remain_cap - item))
    
    # Calculate the utilization ratio for each bin, considering the current item
    utilization_priority = (bins_remain_cap + item) / (bins_remain_cap + np.mean(bins_remain_cap))
    
    # Calculate a penalty factor for each bin based on the excess capacity
    excess_penalty = np.exp(-np.maximum(0, bins_remain_cap - item))
    
    # Calculate the overall priority, balancing the current item's fit, bin utilization, and excess penalty
    alpha = 0.4  # Dynamic weighting for fit priority
    beta = 0.3   # Dynamic weighting for utilization priority
    gamma = 0.3  # Dynamic weighting for excess penalty
    
    # Combine the priorities
    combined_priority = alpha * fit_priority + beta * utilization_priority + gamma * priority * balance_factor
    
    # Normalize the priorities to ensure they add up to 1
    normalized_priority = combined_priority / (np.sum(combined_priority) + 1e-6)
    
    return normalized_priority
```
