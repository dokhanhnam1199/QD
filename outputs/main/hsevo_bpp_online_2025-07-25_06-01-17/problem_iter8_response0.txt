```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, all_items: np.ndarray = None) -> np.ndarray:
    """
    Combines dynamic weighting, capacity difference, balance factor, and forecasting.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score (lower difference -> higher priority)
    priority_capacity_diff = 1 / (1 + capacity_diff)
    
    # Introduce a 'balance' factor to prioritize bins with remaining capacity close to 50% of the bin size
    balance_factor = 1 - np.abs((bins_remain_cap - item) / (bins_remain_cap + item))
    
    # Calculate waste (remaining capacity) if the item is added to each bin
    waste = bins_remain_cap - item
    
    # Give higher priority to bins where item fits more tightly
    delta = np.where(waste < 0, -np.inf, waste)
    
    # Prioritize bins with just enough capacity and higher available space
    priority_tight_fit = np.where(delta > 0, bins_remain_cap / (delta + 1e-10), -np.inf)
    
    # Calculate the overall priority, balancing the current item's fit, bin utilization, and tight fit
    # Use dynamic weighting based on the item size and remaining capacity
    weight_tight_fit = np.where(item > np.mean(bins_remain_cap), 0.6, 0.4)
    weight_capacity_diff = np.where(item < np.mean(bins_remain_cap), 0.3, 0.2)
    weight_balance = 1 - weight_tight_fit - weight_capacity_diff
    
    priority = weight_tight_fit * priority_tight_fit + weight_capacity_diff * priority_capacity_diff + weight_balance * balance_factor
    
    # Consider forecasting future items to anticipate constraints
    if all_items is not None:
        future_items = all_items[all_items > item]
        forecast_factor = 1 / (1 + np.sum(future_items))
        priority *= forecast_factor
    
    # Ensure the priority scores are not NaN (e.g., due to division by zero) and avoid bins that are too full or too empty
    priority = np.where(bins_remain_cap < item, -np.inf, priority)
    priority = np.where(bins_remain_cap == 0, priority * 0.9, priority)  # reduce priority for empty bins
    
    return priority
```
