```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Balances item fit and remaining capacity.
    """
    # Calculate the difference between the remaining capacity of each bin and the item size
    capacity_diff = np.abs(bins_remain_cap - item)
    
    # Invert the differences to obtain a priority score (lower difference -> higher priority)
    priority_fit = 1 / (1 + capacity_diff)
    
    # Calculate the remaining capacity relative to the item size
    relative_cap = bins_remain_cap / item
    
    # Favor bins with enough capacity to fit the item
    capacity_mask = bins_remain_cap >= item
    
    # Use a weighted sum to balance the two objectives
    priority_capacity = np.where(capacity_mask, relative_cap, 0)
    
    # Combine the two priorities, favoring a good fit and sufficient capacity
    priority = priority_fit * priority_capacity
    
    # Ensure bins with negative remaining capacity or insufficient capacity have zero priority
    priority[bins_remain_cap < item] = 0
    
    # Ensure all priorities are non-negative
    priority = np.maximum(priority, 0)
    
    return priority
```
