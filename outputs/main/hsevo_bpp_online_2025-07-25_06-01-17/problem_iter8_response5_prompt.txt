{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines multi-objective approach with dynamic weighting.\n    \"\"\"\n    # Calculate the waste (remaining capacity) if the item is added to each bin\n    waste = bins_remain_cap - item\n    \n    # Give higher priority to bins where item fits more tightly\n    delta = np.where(waste < 0, -np.inf, waste)\n    \n    # Prioritize bins with just enough capacity and higher available space\n    priority = np.where(delta > 0, bins_remain_cap / (delta + 1e-10), -np.inf)\n    \n    # Calculate the ratio of the item size to the remaining capacity of each bin\n    ratio = item / np.maximum(bins_remain_cap, 1e-8)  # avoid division by zero\n    \n    # Assign higher priority to bins with lower ratio (i.e., less likely to leave a small gap)\n    # and with more remaining capacity (i.e., more space to accommodate future items)\n    priority_ratio = np.where(bins_remain_cap >= item, \n                              # for bins that can hold the item, the priority is inversely proportional to the remaining capacity\n                              bins_remain_cap * (1 - ratio) / (bins_remain_cap + 1), \n                              # for bins that cannot hold the item, the priority is zero\n                              0.0)\n    \n    # Combine priorities using dynamic weighting\n    alpha = 0.7  # weight for priority based on waste\n    beta = 0.3  # weight for priority based on ratio\n    combined_priority = alpha * priority + beta * priority_ratio\n    \n    # Avoid bins that are too full or too empty\n    combined_priority = np.where(bins_remain_cap < item, -np.inf, combined_priority)\n    combined_priority = np.where(bins_remain_cap == 0, combined_priority * 0.9, combined_priority)  # reduce priority for empty bins\n    \n    return combined_priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines multi-objective approach with adaptive weighting.\n    \"\"\"\n    # Calculate the difference between the remaining capacity of each bin and the item size\n    capacity_diff = np.abs(bins_remain_cap - item)\n    \n    # Invert the differences to obtain a priority score (lower difference -> higher priority)\n    priority_capacity = 1 / (1 + capacity_diff)\n    \n    # Calculate the shortfall or excess capacity for each bin\n    shortfall = np.maximum(0, item - bins_remain_cap)\n    excess = np.maximum(0, bins_remain_cap - item)\n    \n    # Calculate a penalty factor for each bin based on the shortfall or excess capacity\n    penalty_factor = 1 / (1 + np.exp(shortfall)) * 1 / (1 + np.exp(excess))\n    \n    # If historic item sizes are available, forecast future item sizes\n    if historic_item_sizes is not None:\n        # Calculate the average size of historic items\n        avg_historic_size = np.mean(historic_item_sizes)\n        \n        # Calculate the difference between the remaining capacity of each bin and the forecasted item size\n        forecast_diff = np.abs(bins_remain_cap - avg_historic_size)\n        \n        # Invert the differences to obtain a priority score (lower difference -> higher priority)\n        priority_forecast = 1 / (1 + forecast_diff)\n        \n        # Combine the priority scores using weighting factors\n        priority = alpha * priority_capacity * penalty_factor + beta * priority_forecast * penalty_factor\n    else:\n        # If no historic item sizes are available, use only the capacity difference objective\n        priority = priority_capacity * penalty_factor\n    \n    # If the item size exceeds the remaining capacity, set the priority to 0\n    priority[bins_remain_cap < item] = 0\n    \n    # Ensure bins with higher remaining capacity get higher priority when the item fits\n    priority = np.where(bins_remain_cap >= item, priority + bins_remain_cap, priority)\n    \n    return priority\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the best heuristic uses a more complex calculation involving dynamic weighting, shortfall, and excess capacity, whereas the worst heuristic uses a simpler calculation with a fixed weighting factor. \nComparing (2nd) vs (19th), we see that the second-best heuristic introduces a balance factor and forecasting, while the second-worst heuristic lacks these features. \nComparing (3rd) vs (18th), we see that the third-best heuristic uses a combination of capacity difference, balance factor, and forecasting, whereas the third-worst heuristic relies solely on capacity difference and penalty factor. \nComparing (4th) vs (17th), we see that the fourth-best heuristic incorporates multi-objective priorities with dynamic weighting and fragmentation priority, while the fourth-worst heuristic uses a simpler weighted difference calculation. \nComparing (5th) vs (16th), we see that the fifth-best heuristic combines capacity difference, balance factor, and forecasting, whereas the fifth-worst heuristic uses a simpler calculation with a fixed weighting factor. \nComparing (6th) vs (15th), we see that the sixth-best heuristic uses a combination of multi-objective priorities with dynamic weighting, while the sixth-worst heuristic lacks the dynamic weighting. \nComparing (7th) vs (14th), we see that the seventh-best heuristic introduces a utilization priority, while the seventh-worst heuristic relies solely on capacity difference and penalty factor. \nComparing (8th) vs (13th), we see that the eighth-best heuristic uses a combination of capacity difference, balance factor, and forecasting, whereas the eighth-worst heuristic uses a simpler calculation with a fixed weighting factor. \nComparing (9th) vs (12th), we see that the ninth-best heuristic incorporates multi-objective priorities with dynamic weighting, while the ninth-worst heuristic uses a simpler weighted difference calculation. \nComparing (10th) vs (11th), we see that the tenth-best heuristic uses a combination of capacity difference, balance factor, and forecasting, whereas the tenth-worst heuristic lacks the forecasting feature. \nOverall: Better heuristics tend to use more complex calculations, incorporate multiple objectives, and use dynamic weighting, while worse heuristics rely on simpler calculations with fixed weighting factors.\n- \nHere's a redefined 'Current self-reflection' with useful advice:\n* Keywords: adaptive, multi-objective, dynamic\n* Advice: Consider adaptive weighting, multi-objective optimization, and dynamic prioritization\n* Avoid: simplistic balancing, over-emphasis on tight fits, static prioritization\n* Explanation: By incorporating adaptive and dynamic elements, heuristics can better respond to changing problem conditions, leading to more effective optimization solutions.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}