```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines factors for a balanced heuristic.
    """
    # Calculate the wasted space for each bin if the item is added
    wasted_space = np.maximum(bins_remain_cap - item, 0)
    
    # Invert the wasted space so that bins with least wasted space get higher priority
    inverted_wasted_space = 1 / (wasted_space + 1e-6)  # Add small value for numerical stability
    
    # Calculate the priority score for each bin based on the remaining capacity and item fit
    priority_score = inverted_wasted_space * (bins_remain_cap / (bins_remain_cap + item + 1e-6))  # Add small value for numerical stability
    
    # Consider bins that have enough capacity to hold the item and favor tight fits
    capacity_priority = np.where(bins_remain_cap >= item, 
                                 bins_remain_cap - item + 1, 
                                 0)
    
    # Combine the two priorities
    combined_priority = priority_score * capacity_priority
    
    # Normalize the priorities to ensure they add up to 1
    normalized_priority = combined_priority / (np.sum(combined_priority) + 1e-6)
    
    return normalized_priority
```
