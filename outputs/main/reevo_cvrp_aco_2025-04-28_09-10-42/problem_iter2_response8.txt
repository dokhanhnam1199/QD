```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:

    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version incorporates a combination of distance, demand, and depot proximity to guide edge selection.
    It also sparsifies the matrix by setting unpromising edges to zero.  It adds a customer clustering encouragement.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    # Parameters (adjust these to fine-tune the heuristic)
    distance_importance = 1.0
    demand_importance = 0.5
    depot_proximity_importance = 0.2
    clustering_importance = 0.1
    sparsification_threshold = 0.1 #remove edges if their value is smaller than threshold * max value

    max_demand = np.max(demands)

    #Calculate the center of mass of all customers (excluding the depot)
    center_x = np.mean(coordinates[1:, 0])
    center_y = np.mean(coordinates[1:, 1])
    center = np.array([center_x, center_y])


    for i in range(n):
        for j in range(n):
            if i != j:
                # Distance factor (shorter distances are preferred)
                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Add a small constant to avoid division by zero

                # Demand factor (penalize edges connecting nodes with high demands, relative to capacity)
                demand_factor = 1 - (demands[i] + demands[j]) / (2 * capacity)
                demand_factor = max(0, demand_factor)  # Ensure the factor is non-negative

                #Proximity to depot factor
                depot_proximity_factor = 1 - (distance_matrix[0, i] + distance_matrix[0, j])/(np.max(distance_matrix) * 2 + 1e-6)

                #Clustering encouragement. Encourage edges that connect customers that are geometrically close to each other
                #relative to the distance to the overall center of mass.
                clustering_factor = 0.0
                if i != 0 and j != 0:
                    dist_i_center = np.linalg.norm(coordinates[i] - center)
                    dist_j_center = np.linalg.norm(coordinates[j] - center)
                    clustering_factor = 1 - distance_matrix[i, j] / (dist_i_center + dist_j_center + 1e-6) #Avoid division by zero


                # Combine the factors
                heuristics_matrix[i, j] = (distance_importance * distance_factor +
                                            demand_importance * demand_factor +
                                            depot_proximity_importance* depot_proximity_factor +
                                            clustering_importance * clustering_factor)
    # Sparsify the matrix (remove edges that are unlikely to be in the solution)
    max_heuristic = np.max(heuristics_matrix)
    if max_heuristic > 0: #Avoid issues if max_heuristic is zero.
        threshold = sparsification_threshold * max_heuristic
        heuristics_matrix[heuristics_matrix < threshold] = 0

    return heuristics_matrix
```
