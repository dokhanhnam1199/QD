```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    This version incorporates savings, demand considerations, and sparsification, along with improved scaling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    # Calculate savings matrix (Clarke-Wright Savings Algorithm)
    savings_matrix = np.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Node proximity to depot
    depot_proximity = np.zeros(n)
    for i in range(1, n):
        depot_proximity[i] = 1 / (distance_matrix[0, i] + 1e-9)  # Closer is better
    depot_proximity = depot_proximity / np.max(depot_proximity)

    # Demand factor
    demand_factor = demands / capacity  # Ratio of demand to capacity. Smaller is generally better

    # Combine factors
    for i in range(n):
        for j in range(n):
            if i != j:
                # Primary factors: savings and inverse distance
                heuristics_matrix[i, j] = savings_matrix[i, j] / (distance_matrix[i, j] + 1e-9)

                # Secondary factors: depot proximity and demand
                if i != 0 and j != 0:
                    heuristics_matrix[i, j] *= (0.5 + depot_proximity[i] * depot_proximity[j])  # Favor proximity; scaled down impact
                    heuristics_matrix[i, j] /= (0.5 + demand_factor[i] + demand_factor[j])  # Penalize high demand; scaled down impact


    # Sparsify the matrix: zero out edges that are too long (less promising)
    distance_threshold = np.mean(distance_matrix) * 1.2 # Reduced threshold for stricter sparsification
    heuristics_matrix[distance_matrix > distance_threshold] = 0.0

    # Further sparsification based on heuristics score (row-wise)
    sparsity_level = 0.15  # Increase sparsity
    for i in range(n):
        row = heuristics_matrix[i, :].copy()
        indices = np.argsort(row)[::-1]
        threshold_index = int(n * sparsity_level)
        mask = np.ones(n, dtype=bool)
        mask[indices[:threshold_index]] = False
        heuristics_matrix[i, mask] = 0

    # Normalize the heuristics matrix using robust scaling to handle outliers
    non_zero_values = heuristics_matrix[heuristics_matrix > 0]
    if non_zero_values.size > 0:
        median_heuristic = np.median(non_zero_values)
        iqr_heuristic = np.percentile(non_zero_values, 75) - np.percentile(non_zero_values, 25)
        if iqr_heuristic > 0:
            heuristics_matrix = (heuristics_matrix - median_heuristic) / iqr_heuristic
        else: # if iqr is zero then just divide by max to avoid nan
            max_heuristic = np.max(heuristics_matrix)
            if max_heuristic > 0:
              heuristics_matrix = heuristics_matrix / max_heuristic

        heuristics_matrix = np.clip(heuristics_matrix, -1, 1) # Clip values
        heuristics_matrix = (heuristics_matrix + 1) / 2 # Scale between 0 and 1


    return heuristics_matrix
```
