{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    This version incorporates several factors to assess the promise of including each edge\n    in a solution and sparsifies the matrix.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Vector of customer demands (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge (n x n).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    promise = np.zeros_like(distance_matrix, dtype=float)\n\n    # Heuristic factors:\n    # 1. Inverse Distance: Shorter distances are generally more promising.\n    inverse_distance = 1 / (distance_matrix + 1e-6)  # Add a small constant to avoid division by zero\n\n    # 2. Demand Consideration: Edges connecting nodes with high demands might be less promising\n    #    if they quickly exhaust vehicle capacity.  We penalize edges that connect to nodes\n    #    whose sum exceeds capacity by itself with other random nodes.\n\n    demand_penalty = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                demand_penalty[i, j] = 0\n                continue\n\n            # Estimate how likely exceeding the capacity if node i and j are visited sequentially.\n            # We compute the average demand and assume half the customer needs to be visited.\n\n            if demands[i] + demands[j] > capacity :\n                demand_penalty[i, j] = 0.1 # set to a small amount when demand exceeds alone\n            else:\n                demand_penalty[i, j] = 1\n\n    # 3. Angle to Depot: Edges that lead \"away\" from the depot might be less promising.\n    #    Calculate the angle between the edge (i, j) and the line connecting node i to the depot.\n\n    angle_factor = np.ones_like(distance_matrix, dtype=float)\n    depot_coord = coordinates[0]\n    for i in range(1, n):  # Skip depot\n        coord_i = coordinates[i]\n        for j in range(1, n):\n            if i == j:\n                angle_factor[i, j] = 0\n                continue\n\n            coord_j = coordinates[j]\n\n            # Calculate vectors\n            vec_i_depot = depot_coord - coord_i\n            vec_i_j = coord_j - coord_i\n\n            # Calculate dot product and magnitudes\n            dot_product = np.dot(vec_i_depot, vec_i_j)\n            magnitude_i_depot = np.linalg.norm(vec_i_depot)\n            magnitude_i_j = np.linalg.norm(vec_i_j)\n\n            # Calculate cosine of the angle\n            if magnitude_i_depot > 0 and magnitude_i_j > 0 :\n                 cos_angle = dot_product / (magnitude_i_depot * magnitude_i_j)\n                 # Angle in radians\n                 angle = np.arccos(np.clip(cos_angle, -1.0, 1.0))  # Clip to avoid NaN due to floating-point errors\n\n                 # Penalize edges with large angles (away from the depot)\n                 angle_factor[i, j] = 1 - (angle / np.pi)  # Normalize to [0, 1]\n\n            else:\n                 angle_factor[i,j] = 0 # angle not well-defined when points overlapping\n\n    # Combine the factors:\n    promise = inverse_distance * demand_penalty * angle_factor\n\n    # Sparsify the matrix:  Zero out edges that are unlikely to be in the optimal solution.\n    # Here, we keep only the top 'k' edges for each node.\n\n    k = 10  # Keep top k edges\n\n    for i in range(n):\n        row = promise[i, :].copy()  # Copy the row to avoid modifying while iterating\n        indices = np.argsort(row)[::-1]  # Indices sorted by promise in descending order\n        for j in range(n):\n            if j not in indices[:k]:\n                promise[i, j] = 0.0  # Zero out edges not in the top k\n\n    return promise\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Vector of customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros((n, n))\n\n    # Calculate savings for each pair of customers\n    savings = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                savings[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n\n    # Combine distance, savings, and demand considerations\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Prioritize shorter distances, higher savings, and consider demand\n                heuristics[i, j] = (\n                    (1 / (distance_matrix[i, j] + 1e-6))  # Avoid division by zero\n                    * (savings[i, j] + 1e-6)\n                    / (demands[i] + demands[j] + 1e-6) # encourage merging small demand earlier\n                )\n            else:\n                heuristics[i, j] = 0  # No self-loops\n\n    # Sparsify the matrix: Keep only a percentage of the most promising edges for each node\n    sparsity_level = 0.3 # Keep top 30% edges for each node. Can be tuned.\n\n    for i in range(n):\n        row = heuristics[i, :].copy() # Copy to avoid modifying during sort\n        indices = np.argsort(row)[::-1] # indices from high to low\n        threshold_index = int(n * sparsity_level) # Determine how many values to keep\n\n        # Create a mask of indices we want to set to 0\n        mask = np.ones(n, dtype=bool)\n        mask[indices[:threshold_index]] = False # only set topk to nonzero. set rest to zero.\n        heuristics[i, mask] = 0\n        heuristics[i, i] = 0 # prevent loops\n\n    return heuristics\n\n[Reflection]\nSavings calculation and demand consideration are key. Sparsify based on a percentage.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}