```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    This version improves upon v1 by incorporating a refined demand factor and angle consideration.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate savings for each edge
    savings_matrix = np.zeros_like(distance_matrix, dtype=float)
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Normalize distance matrix (inverse)
    normalized_distance = 1 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero
    normalized_distance = normalized_distance / np.max(normalized_distance)

    # Normalize savings matrix
    normalized_savings = savings_matrix / np.max(savings_matrix + 1e-6)

    # Demand factor: Penalize edges connecting nodes with high demands if they exceed capacity
    demand_factor = np.ones_like(distance_matrix, dtype=float)
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                total_demand = demands[i] + demands[j]
                if total_demand > capacity:
                    demand_factor[i, j] = 0.01  # Significantly penalize
                else:
                    # Scale penalty based on how close to capacity
                    demand_factor[i, j] = max(0.1, 1 - (total_demand / capacity))

    # Angle consideration: Favor edges that point towards the depot
    angle_factor = np.ones_like(distance_matrix, dtype=float)
    depot_coord = coordinates[0]
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                vec_i_depot = depot_coord - coordinates[i]
                vec_i_j = coordinates[j] - coordinates[i]

                dot_product = np.dot(vec_i_depot, vec_i_j)
                magnitude_i_depot = np.linalg.norm(vec_i_depot)
                magnitude_i_j = np.linalg.norm(vec_i_j)

                if magnitude_i_depot > 0 and magnitude_i_j > 0:
                    cos_angle = dot_product / (magnitude_i_depot * magnitude_i_j)
                    angle = np.arccos(np.clip(cos_angle, -1.0, 1.0))
                    angle_factor[i, j] = 1 - (2 * abs(angle - np.pi/2) / np.pi)  # Higher if closer to perpendicular
                else:
                    angle_factor[i, j] = 0.1  # Penalize overlapping points

    # Combine distance, savings, demand, and angle
    combined_metric = normalized_distance * normalized_savings * demand_factor * angle_factor

    # Sparsify the matrix: Keep only a certain percentage of best edges for each node
    sparsity_threshold = 0.8  # Percentage of values to zero out, range 0 to 1

    for i in range(n):
        row = combined_metric[i, :]
        threshold = np.percentile(row, sparsity_threshold * 100)
        for j in range(n):
            if combined_metric[i, j] < threshold:
                combined_metric[i, j] = 0
            if i == j:
                combined_metric[i, j] = 0

    heuristics_matrix = combined_metric
    return heuristics_matrix
```
