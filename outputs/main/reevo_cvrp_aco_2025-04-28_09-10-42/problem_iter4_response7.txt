```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:

    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    Improved version with normalization, harsher demand penalty, angle favoring, adaptive sparsification based on heuristic values.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Savings calculation
    savings_matrix = np.zeros_like(distance_matrix, dtype=float)
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Depot proximity (inverse distance)
    depot_proximity = np.zeros(n, dtype=float)
    for i in range(1, n):
        depot_proximity[i] = 1.0 / distance_matrix[0, i]

    # Demand ratio
    demand_ratio = demands / capacity

    # Angle calculation (diversification)
    angle_matrix = np.zeros_like(distance_matrix, dtype=float)
    for i in range(1, n):
        for j in range(i + 1, n):
            vector_i = coordinates[i] - coordinates[0]
            vector_j = coordinates[j] - coordinates[0]
            norm_i = np.linalg.norm(vector_i)
            norm_j = np.linalg.norm(vector_j)
            if norm_i > 0 and norm_j > 0:
                dot_product = np.dot(vector_i, vector_j)
                cosine_angle = dot_product / (norm_i * norm_j)
                angle = np.arccos(np.clip(cosine_angle, -1.0, 1.0))
                angle_matrix[i, j] = angle
                angle_matrix[j, i] = angle

    # Normalization
    savings_matrix = (savings_matrix - np.min(savings_matrix)) / (np.max(savings_matrix) - np.min(savings_matrix) + 1e-9)
    depot_proximity = (depot_proximity - np.min(depot_proximity)) / (np.max(depot_proximity) - np.min(depot_proximity) + 1e-9)
    demand_ratio = (demand_ratio - np.min(demand_ratio)) / (np.max(demand_ratio) - np.min(demand_ratio) + 1e-9)
    angle_matrix = (angle_matrix - np.min(angle_matrix)) / (np.max(angle_matrix) - np.min(angle_matrix) + 1e-9)
    distance_matrix = (distance_matrix - np.min(distance_matrix)) / (np.max(distance_matrix) - np.min(distance_matrix) + 1e-9)

    # Combine factors (additive combination)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = (
                    savings_matrix[i, j]
                    - distance_matrix[i, j]  # Subtract distance directly
                    + 0.5 * depot_proximity[i] + 0.5 * depot_proximity[j] #Favoring edges closer to depot
                    - 5 * demand_ratio[i] - 5 * demand_ratio[j]  # harsher demand penalty
                    + 0.2 * (np.pi - angle_matrix[i, j])  # Favor larger angles
                )

    # Sparsification (adaptive based on quantile)
    quantile_threshold = np.quantile(heuristics_matrix[heuristics_matrix > 0], 0.25)  # 25th quantile
    heuristics_matrix[heuristics_matrix < quantile_threshold] = 0.0
    heuristics_matrix[distance_matrix > np.mean(distance_matrix) * 2] = 0.0  # remove paths too long

    return heuristics_matrix
```
