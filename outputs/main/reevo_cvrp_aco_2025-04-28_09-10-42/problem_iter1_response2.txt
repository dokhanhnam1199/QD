```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate savings for each pair of nodes
    savings_matrix = np.zeros_like(distance_matrix, dtype=float)
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]
    
    # Node proximity based on Euclidean Distance
    proximity_matrix = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                proximity_matrix[i, j] = 1 / (1 + distance_matrix[i,j])
            else:
                proximity_matrix[i,j] = 0
                
    # Demand penalty
    demand_penalty = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
             demand_penalty[i, j] = np.exp(demands[i] + demands[j] / capacity)
    demand_penalty = np.clip(demand_penalty, 0, 5)  # Cap penalty to avoid very large numbers
             
    # Combined heuristic
    for i in range(n):
        for j in range(n):
            if i != j:
                 heuristic_matrix[i, j] = (0.5 * savings_matrix[i, j] + 0.5 * proximity_matrix[i, j]) / (1 + 0.1 * demand_penalty[i,j])
            else:
                heuristic_matrix[i,j] = 0
    
    # Sparsify the matrix: remove edges with very low heuristic values.
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 20)  # Keep top 80%
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Ensure diagonal elements are zero
    np.fill_diagonal(heuristic_matrix, 0)

    return heuristic_matrix
```
