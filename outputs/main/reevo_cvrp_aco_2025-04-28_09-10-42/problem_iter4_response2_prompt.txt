{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n    This version incorporates savings, demand considerations, and sparsification.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Vector of customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros((n, n))\n\n    # Calculate savings for each pair of customers\n    savings = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                savings[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n\n    # Combine distance, savings, and demand considerations\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Prioritize shorter distances, higher savings, and consider demand\n                demand_factor = (demands[i] + demands[j]) / capacity # demand relative to capacity\n                heuristics[i, j] = (\n                    (savings[i, j] + 1e-6)\n                    / (distance_matrix[i, j] + 1e-6)\n                    / (demand_factor + 1e-6) # Encourage merging small demand earlier\n                )\n            else:\n                heuristics[i, j] = 0  # No self-loops\n\n    # Sparsify the matrix: Keep only a percentage of the most promising edges for each node\n    sparsity_level = 0.3  # Keep top 30% edges for each node. Can be tuned.\n\n    for i in range(n):\n        row = heuristics[i, :].copy()  # Copy to avoid modifying during sort\n        indices = np.argsort(row)[::-1]  # indices from high to low\n        threshold_index = int(n * sparsity_level)  # Determine how many values to keep\n\n        # Create a mask of indices we want to set to 0\n        mask = np.ones(n, dtype=bool)\n        mask[indices[:threshold_index]] = False  # only set topk to nonzero. set rest to zero.\n        heuristics[i, mask] = 0\n        heuristics[i, i] = 0  # prevent loops\n\n    return heuristics\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros_like(distance_matrix)\n\n    # Calculate savings matrix (Clarke-Wright Savings Algorithm)\n    savings_matrix = np.zeros_like(distance_matrix)\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Node proximity to depot\n    depot_proximity = np.zeros(n)\n    for i in range(1, n):\n        depot_proximity[i] = 1 / distance_matrix[0, i]  # Closer is better\n    depot_proximity = depot_proximity / np.max(depot_proximity)\n\n    # Demand factor\n    demand_factor = demands / capacity  # Ratio of demand to capacity. Smaller is generally better\n\n    # Combine factors\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Primary factors: savings and inverse distance\n                heuristics_matrix[i, j] = savings_matrix[i, j] / distance_matrix[i, j]\n\n                # Secondary factors: depot proximity and demand\n                if i != 0 and j != 0:\n                    heuristics_matrix[i, j] *= (1 + depot_proximity[i] + depot_proximity[j]) # favoring proximity to the depot\n                    heuristics_matrix[i, j] /= (1 + demand_factor[i] + demand_factor[j])\n\n    # Sparsify the matrix: zero out edges that are too long (less promising)\n    distance_threshold = np.mean(distance_matrix) * 2 #remove longer paths for efficiency\n    heuristics_matrix[distance_matrix > distance_threshold] = 0.0\n\n    # Normalize the heuristics matrix\n    max_heuristic = np.max(heuristics_matrix)\n    if max_heuristic > 0:\n        heuristics_matrix = heuristics_matrix / max_heuristic\n\n    return heuristics_matrix\n\n[Reflection]\nSavings calculation, depot proximity, demand normalization, and distance-based sparsification improve heuristic quality.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}