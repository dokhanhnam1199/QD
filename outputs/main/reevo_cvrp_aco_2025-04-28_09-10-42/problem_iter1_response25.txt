```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version incorporates several factors to assess the promise of including each edge
    in a solution and sparsifies the matrix.

    Args:
        distance_matrix (np.ndarray): Distance matrix (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Vector of customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge (n x n).
    """

    n = distance_matrix.shape[0]
    promise = np.zeros_like(distance_matrix, dtype=float)

    # Heuristic factors:
    # 1. Inverse Distance: Shorter distances are generally more promising.
    inverse_distance = 1 / (distance_matrix + 1e-6)  # Add a small constant to avoid division by zero

    # 2. Demand Consideration: Edges connecting nodes with high demands might be less promising
    #    if they quickly exhaust vehicle capacity.  We penalize edges that connect to nodes
    #    whose sum exceeds capacity by itself with other random nodes.

    demand_penalty = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_penalty[i, j] = 0
                continue

            # Estimate how likely exceeding the capacity if node i and j are visited sequentially.
            # We compute the average demand and assume half the customer needs to be visited.

            if demands[i] + demands[j] > capacity :
                demand_penalty[i, j] = 0.1 # set to a small amount when demand exceeds alone
            else:
                demand_penalty[i, j] = 1

    # 3. Angle to Depot: Edges that lead "away" from the depot might be less promising.
    #    Calculate the angle between the edge (i, j) and the line connecting node i to the depot.

    angle_factor = np.ones_like(distance_matrix, dtype=float)
    depot_coord = coordinates[0]
    for i in range(1, n):  # Skip depot
        coord_i = coordinates[i]
        for j in range(1, n):
            if i == j:
                angle_factor[i, j] = 0
                continue

            coord_j = coordinates[j]

            # Calculate vectors
            vec_i_depot = depot_coord - coord_i
            vec_i_j = coord_j - coord_i

            # Calculate dot product and magnitudes
            dot_product = np.dot(vec_i_depot, vec_i_j)
            magnitude_i_depot = np.linalg.norm(vec_i_depot)
            magnitude_i_j = np.linalg.norm(vec_i_j)

            # Calculate cosine of the angle
            if magnitude_i_depot > 0 and magnitude_i_j > 0 :
                 cos_angle = dot_product / (magnitude_i_depot * magnitude_i_j)
                 # Angle in radians
                 angle = np.arccos(np.clip(cos_angle, -1.0, 1.0))  # Clip to avoid NaN due to floating-point errors

                 # Penalize edges with large angles (away from the depot)
                 angle_factor[i, j] = 1 - (angle / np.pi)  # Normalize to [0, 1]

            else:
                 angle_factor[i,j] = 0 # angle not well-defined when points overlapping

    # Combine the factors:
    promise = inverse_distance * demand_penalty * angle_factor

    # Sparsify the matrix:  Zero out edges that are unlikely to be in the optimal solution.
    # Here, we keep only the top 'k' edges for each node.

    k = 10  # Keep top k edges

    for i in range(n):
        row = promise[i, :].copy()  # Copy the row to avoid modifying while iterating
        indices = np.argsort(row)[::-1]  # Indices sorted by promise in descending order
        for j in range(n):
            if j not in indices[:k]:
                promise[i, j] = 0.0  # Zero out edges not in the top k

    return promise
```
