{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n    This version focuses on depot proximity, demand ratio, and targeted sparsification using distance and heuristics scores.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Vector of customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate savings matrix (Clarke-Wright Savings Algorithm)\n    savings_matrix = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Depot proximity: Closer is better.  Invert distance and normalize\n    depot_proximity = np.zeros(n)\n    for i in range(1, n):\n        depot_proximity[i] = 1 / (distance_matrix[0, i] + 1e-9)\n    depot_proximity /= np.max(depot_proximity)\n\n    # Demand ratio:  Demand relative to vehicle capacity. Smaller is better.\n    demand_ratio = demands / capacity\n\n    # Heuristic combination\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Base heuristic: savings / distance\n                heuristics_matrix[i, j] = savings_matrix[i, j] / (distance_matrix[i, j] + 1e-9)\n\n                # Adjust for depot proximity and demand ratio\n                if i != 0 and j != 0:\n                    heuristics_matrix[i, j] *= (1 + depot_proximity[i] + depot_proximity[j])\n                    heuristics_matrix[i, j] /= (1 + demand_ratio[i] + demand_ratio[j])\n\n    # Sparsification based on distance: Remove long edges\n    distance_threshold = np.mean(distance_matrix) * 1.2  # Slightly more aggressive\n    heuristics_matrix[distance_matrix > distance_threshold] = 0.0\n\n    # Sparsification based on heuristics score: Keep top edges per node\n    sparsity_level = 0.15  # Even more aggressive sparsification\n    for i in range(n):\n        row = heuristics_matrix[i, :].copy()\n        indices = np.argsort(row)[::-1]\n        threshold_index = int(n * sparsity_level)\n        mask = np.ones(n, dtype=bool)\n        mask[indices[:threshold_index]] = False  # Only keep top edges\n        heuristics_matrix[i, mask] = 0.0\n\n    # Normalize the heuristics matrix\n    max_heuristic = np.max(heuristics_matrix)\n    if max_heuristic > 0:\n        heuristics_matrix = heuristics_matrix / max_heuristic\n\n    return heuristics_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n\n    \"\"\"\n    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n    This version prioritizes savings and inverse distance, simplifies depot proximity, and adjusts the sparsification threshold.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros_like(distance_matrix)\n\n    # Calculate savings matrix (Clarke-Wright Savings Algorithm)\n    savings_matrix = np.zeros_like(distance_matrix)\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Demand factor\n    normalized_demands = demands / np.max(demands)  # Normalize demand for better scaling\n    demand_penalty = 1 + 2 * (normalized_demands[:, None] + normalized_demands[None, :])  # Creates a demand penalty matrix\n\n    # Combine factors\n    inverse_distance = 1 / (distance_matrix + 1e-9)  # Avoid division by zero\n\n    heuristics_matrix = savings_matrix * inverse_distance / demand_penalty\n\n    # Encourage connection to depot\n    for i in range(1, n):\n        heuristics_matrix[0, i] *= 1.2  # Slightly favor connections to the depot\n        heuristics_matrix[i, 0] *= 1.2\n\n    # Sparsify the matrix adaptively\n    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 40)  # Adaptive threshold\n    heuristics_matrix[heuristics_matrix < threshold] = 0.0\n\n    # Normalize the heuristics matrix\n    max_heuristic = np.max(heuristics_matrix)\n    if max_heuristic > 0:\n        heuristics_matrix = heuristics_matrix / max_heuristic\n\n    return heuristics_matrix\n\n[Reflection]\nSavings, inverse distance, and demand considerations, with adaptive sparsification, yield better heuristic guidance.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}