```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Calculate savings matrix
    savings_matrix = np.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Node proximity to depot
    depot_proximity = np.zeros(n)
    for i in range(1, n):
        depot_proximity[i] = 1 / distance_matrix[0, i]

    # Demand factor: penalize edges connecting high-demand nodes
    demand_factor = np.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(1,n):
              demand_factor[i,j] = 1 / (demands[i] + demands[j] + 1e-6)  #Avoid zero division

    # Distance-based heuristic, inversed
    distance_heuristic = 1 / (distance_matrix + 1e-6) #Avoid zero division


    # Combine heuristics
    heuristic_matrix = (0.4 * distance_heuristic +
                          0.3 * savings_matrix +
                          0.2 * demand_factor+
                          0.1 * np.outer(depot_proximity, depot_proximity))


    #Sparsify matrix (remove edges unlikely to be useful)
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 30) #Keep top 70%
    heuristic_matrix[heuristic_matrix < threshold] = 0


    #Set diagonals to 0
    np.fill_diagonal(heuristic_matrix, 0)

    return heuristic_matrix
```
