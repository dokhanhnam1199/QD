```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """

    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Calculate a cost factor based on distance
    distance_factor = 1 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero

    # Calculate a demand factor considering capacity constraints
    demand_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_factor[i, j] = 0
            elif i == 0:  # From depot, consider only the demand of the destination
                demand_factor[i,j] = 1/(demands[j] + 1e-6)
            elif j == 0: # to the depot, consider only the demand of the origin
                demand_factor[i, j] = 1/(demands[i] + 1e-6)
            else:
                demand_factor[i, j] = 1/(demands[i] + demands[j] + 1e-6)

    # Combine distance and demand factors (you can experiment with different combinations)
    heuristics_matrix = distance_factor * demand_factor

    # Sparsify the matrix to reduce edges to explore
    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 50)  # take only 50 % percentile of the values which are non-zero
    heuristics_matrix[heuristics_matrix < threshold] = 0  # set those values to zero

    return heuristics_matrix
```
