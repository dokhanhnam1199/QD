```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix: Distance matrix (shape: n by n).
        coordinates: Euclidean coordinates of nodes (shape: n by 2).
        demands: Vector of customer demands (shape: n).
        capacity: Vehicle capacity.

    Returns:
        Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings for each edge
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Combine distance, savings, and demand considerations
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0
            else:
                # Favor shorter distances
                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Avoid division by zero

                # Incorporate savings - higher savings are better
                savings_factor = savings_matrix[i, j]

                # Penalize edges connecting nodes with high demand (makes it harder to fit within capacity)
                demand_penalty = demands[i] + demands[j] # Larger demands decrease the heuristic

                heuristic_matrix[i, j] = distance_factor + 0.5*savings_factor - 0.01*demand_penalty #Combine distance and savings and demand

    # Sparsify the matrix: remove edges that are very long, or have negative savings or low demand and savings together
    distance_threshold = np.mean(distance_matrix) * 2  # Example threshold: twice the average distance

    for i in range(n):
        for j in range(n):
             if distance_matrix[i, j] > distance_threshold :
                heuristic_matrix[i, j] = 0 #Remove edge if too far

    #Normalize the values
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix = heuristic_matrix / max_val
    
    return heuristic_matrix
```
