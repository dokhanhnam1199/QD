{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    This version incorporates a combination of distance, demand, and depot proximity to guide edge selection.\n    It also sparsifies the matrix by setting unpromising edges to zero.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Vector of customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros_like(distance_matrix)\n\n    # Parameters (adjust these to fine-tune the heuristic)\n    distance_importance = 1.0\n    demand_importance = 0.5\n    depot_proximity_importance = 0.2\n    sparsification_threshold = 0.1 #remove edges if their value is smaller than threshold * max value\n\n    max_demand = np.max(demands)\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Distance factor (shorter distances are preferred)\n                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Add a small constant to avoid division by zero\n\n                # Demand factor (penalize edges connecting nodes with high demands, relative to capacity)\n                demand_factor = 1 - (demands[i] + demands[j]) / (2 * capacity)\n                demand_factor = max(0, demand_factor)  # Ensure the factor is non-negative\n                #Proximity to depot factor\n                depot_proximity_factor = 1 - (distance_matrix[0, i] + distance_matrix[0, j])/(np.max(distance_matrix) * 2 + 1e-6)\n\n\n                # Combine the factors\n                heuristics_matrix[i, j] = (distance_importance * distance_factor +\n                                            demand_importance * demand_factor + depot_proximity_importance* depot_proximity_factor)\n    # Sparsify the matrix (remove edges that are unlikely to be in the solution)\n    max_heuristic = np.max(heuristics_matrix)\n    threshold = sparsification_threshold * max_heuristic\n    heuristics_matrix[heuristics_matrix < threshold] = 0\n\n    return heuristics_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Vector of customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate savings for each edge\n    savings_matrix = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Normalize distance matrix (inverse)\n    normalized_distance = 1 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero\n    normalized_distance = normalized_distance / np.max(normalized_distance)\n\n    # Normalize savings matrix\n    normalized_savings = savings_matrix / np.max(savings_matrix + 1e-6)\n\n    # Demand factor: Penalize edges connecting nodes with high demands if they exceed capacity\n    demand_factor = np.ones_like(distance_matrix, dtype=float)\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                if demands[i] + demands[j] > capacity:\n                    demand_factor[i, j] = 0.1  # Significantly penalize\n\n    # Sparsify the matrix: Keep only a certain percentage of best edges for each node\n    sparsity_threshold = 0.7 # Percentage of values to zero out, range 0 to 1\n    combined_metric = normalized_distance + normalized_savings # Combine normalized matrices. other operations could also work (e.g. mult)\n\n    for i in range(n):\n        row = combined_metric[i, :]\n        threshold = np.percentile(row, sparsity_threshold*100)\n        for j in range(n):\n            if combined_metric[i, j] < threshold:\n                combined_metric[i, j] = 0\n            if i == j:\n                combined_metric[i,j] = 0\n\n\n    # Combine all factors: Distance, Savings, Demand\n    heuristics_matrix = combined_metric * demand_factor\n    return heuristics_matrix\n\n[Reflection]\nSavings calculations, normalization, and demand-based edge penalization yield a more effective heuristic. Sparsity also matters.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}