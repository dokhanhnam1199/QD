```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    # Savings calculation (Clarke-Wright)
    savings = np.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(i + 1, n):
            savings[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings[j, i] = savings[i, j]

    # Depot proximity (inverse distance)
    depot_proximity = np.zeros(n)
    for i in range(1, n):
        depot_proximity[i] = 1 / distance_matrix[0, i]

    # Demand ratio
    demand_ratio = demands / capacity

    # Angle calculation
    angles = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                vector_i = coordinates[i] - coordinates[0]
                vector_j = coordinates[j] - coordinates[0]
                norm_i = np.linalg.norm(vector_i)
                norm_j = np.linalg.norm(vector_j)
                if norm_i > 0 and norm_j > 0:
                    dot_product = np.dot(vector_i, vector_j)
                    cosine_angle = dot_product / (norm_i * norm_j)
                    angles[i, j] = np.arccos(np.clip(cosine_angle, -1.0, 1.0))  # Clip to avoid errors

    # Combine factors additively
    alpha = 1.0
    beta = 0.5
    gamma = 0.2
    delta = 0.3
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = (
                    alpha * savings[i, j]
                    - beta * distance_matrix[i, j]  # Penalize long distances
                    + gamma * (depot_proximity[i] + depot_proximity[j] if i > 0 and j > 0 else 0)
                    - delta * (demand_ratio[i] + demand_ratio[j] if i > 0 and j > 0 else 0) # Penalize large demands
                )
                # Discourage edges connecting nodes with very different angles from the depot
                if i > 0 and j > 0:
                      heuristics_matrix[i,j] -= abs(angles[i, j])

    # Adaptive sparsification (based on a quantile)
    quantile = 0.75  # Keep top 25% of edges
    threshold = np.quantile(heuristics_matrix[heuristics_matrix > 0], quantile)
    heuristics_matrix[heuristics_matrix < threshold] = 0.0 # Filter based on heuristic value

    return heuristics_matrix
```
