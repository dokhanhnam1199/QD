{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n    Prioritizes proximity and demand jointly. Sparsifies adaptively using percentiles for better edge selection.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros((n, n))\n\n    # Proximity factor based on Euclidean distance\n    proximity_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                euclidean_distance = np.linalg.norm(coordinates[i] - coordinates[j])\n                proximity_matrix[i, j] = 1 / (euclidean_distance + 1e-6)  # Avoid division by zero\n\n    # Demand factor\n    demand_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                demand_cost = demands[i] + demands[j]\n                if i == 0 or j == 0: #depot\n                    demand_cost = max(demands[i], demands[j]) #Only consider outgoing/incoming demand. Set to zero if depot.\n\n                demand_matrix[i, j] = 1 / (demand_cost + 1e-6) if demand_cost <= 2*capacity else 0 #Ensure that demand costs does not exceed vehicle capacity.\n\n    # Combine proximity and demand factors\n    heuristics_matrix = proximity_matrix * demand_matrix\n\n    # Sparsify the matrix adaptively\n    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 50)  #adaptive threshold\n    heuristics_matrix[heuristics_matrix < threshold] = 0\n\n\n    return heuristics_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n    This version prioritizes savings and inverse distance, simplifies depot proximity, and adjusts the sparsification threshold.\n    It introduces adaptive sparsification based on heuristic values.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros_like(distance_matrix)\n\n    # Calculate savings matrix (Clarke-Wright Savings Algorithm)\n    savings_matrix = np.zeros_like(distance_matrix)\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Simplified depot proximity\n    depot_proximity = np.zeros(n)\n    for i in range(1, n):\n        depot_proximity[i] = 1 / (distance_matrix[0, i] + 1e-9)  # Closer is better; avoid division by zero\n    depot_proximity = depot_proximity / np.max(depot_proximity)\n\n    # Demand factor\n    demand_factor = demands / capacity  # Ratio of demand to capacity. Smaller is generally better\n    demand_factor = np.clip(demand_factor, 0, 1)\n\n    # Combine factors\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Primary factors: savings and inverse distance\n                heuristics_matrix[i, j] = savings_matrix[i, j] / (distance_matrix[i, j] + 1e-9) #avoid division by zero\n\n                # Secondary factors: depot proximity and demand\n                if i != 0 and j != 0:\n                    heuristics_matrix[i, j] *= (0.5 + depot_proximity[i] * depot_proximity[j]) # slightly favor depot proximity\n                    heuristics_matrix[i, j] /= (1 + demand_factor[i] + demand_factor[j])\n\n    # Adaptive Sparsification based on percentile\n    heuristic_values = heuristics_matrix[heuristics_matrix > 0]\n    if heuristic_values.size > 0: #avoid empty array\n      threshold = np.percentile(heuristic_values, 40)  # Keep top 60% of edges (higher values)\n      heuristics_matrix[heuristics_matrix < threshold] = 0.0\n\n    # Sparsify the matrix: zero out edges that are too long (less promising)\n    distance_threshold = np.mean(distance_matrix) * 1.75  # Adjusted threshold\n    heuristics_matrix[distance_matrix > distance_threshold] = 0.0\n\n\n    # Normalize the heuristics matrix\n    max_heuristic = np.max(heuristics_matrix)\n    if max_heuristic > 0:\n        heuristics_matrix = heuristics_matrix / max_heuristic\n\n    return heuristics_matrix\n\n[Reflection]\nSavings calculation, depot proximity, demand ratio, adaptive sparsification, and normalization improve edge selection.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}