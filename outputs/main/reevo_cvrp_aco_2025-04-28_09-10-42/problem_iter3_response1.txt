```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:

    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    # Calculate savings matrix (Clarke-Wright Savings Algorithm)
    savings_matrix = np.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Depot proximity - inverse distance to depot
    depot_proximity = np.zeros(n)
    for i in range(1, n):
        depot_proximity[i] = 1 / distance_matrix[0, i]

    # Demand ratio
    demand_ratio = demands / capacity

    # Angle calculation (Diversification)
    angle_matrix = np.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(i + 1, n):
            # Vectors from depot to nodes i and j
            vector_i = coordinates[i] - coordinates[0]
            vector_j = coordinates[j] - coordinates[0]

            # Calculate the angle between the vectors
            dot_product = np.dot(vector_i, vector_j)
            magnitudes = np.linalg.norm(vector_i) * np.linalg.norm(vector_j)
            if magnitudes > 0:  # Avoid division by zero
                angle = np.arccos(dot_product / magnitudes)
                angle_matrix[i, j] = angle
                angle_matrix[j, i] = angle
            else:
                angle_matrix[i, j] = 0
                angle_matrix[j, i] = 0


    # Combine factors additively
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = (
                    savings_matrix[i, j]
                    - distance_matrix[i, j]
                    + 0.5 * (depot_proximity[i] + depot_proximity[j] if i != 0 and j != 0 else 0)
                    - 0.2 * (demand_ratio[i] + demand_ratio[j] if i != 0 and j != 0 else 0)
                    + 0.1 * angle_matrix[i,j] # incentivize diversification
                )

    # Adaptive Sparsification (using a quantile)
    quantile_threshold = np.quantile(heuristics_matrix[heuristics_matrix > 0], 0.25)  # Keep top 75%
    heuristics_matrix[heuristics_matrix < quantile_threshold] = 0.0

    return heuristics_matrix
```
