```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:

    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    This version further refines depot proximity, demand factors, sparsification, and normalization.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    # Calculate savings matrix (Clarke-Wright Savings Algorithm)
    savings_matrix = np.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Refined depot proximity: considers both distance and a capacity aspect.
    depot_proximity = np.zeros(n)
    for i in range(1, n):
        depot_proximity[i] = (1 / (distance_matrix[0, i] + 1e-9)) * (1 - (demands[i] / capacity))
    depot_proximity = np.clip(depot_proximity, 0, 1) # Ensure it is within [0, 1] range
    depot_proximity = depot_proximity / np.max(depot_proximity)


    # Demand factor: Adjusted to have a stronger influence
    demand_factor = demands / capacity
    demand_factor = np.clip(demand_factor, 0, 1)  # Clip to [0, 1]
    demand_factor = demand_factor**2 # Increasing the impact of the demand factor

    # Combine factors
    for i in range(n):
        for j in range(n):
            if i != j:
                # Primary factors: savings and inverse distance
                heuristics_matrix[i, j] = savings_matrix[i, j] / (distance_matrix[i, j] + 1e-9)

                # Secondary factors: depot proximity and demand
                if i != 0 and j != 0:
                    heuristics_matrix[i, j] *= (0.75 + depot_proximity[i] * depot_proximity[j] * 0.25)  # Prioritize depot proximity more
                    heuristics_matrix[i, j] /= (1 + 1.5*(demand_factor[i] + demand_factor[j])) # Stronger penalty for high demand edges


    # Sparsify the matrix: Adaptive threshold based on savings
    savings_threshold = np.mean(savings_matrix[savings_matrix > 0]) * 0.75 # Focus on meaningful savings.
    distance_threshold = np.mean(distance_matrix) * 2.0 # Higher distance threshold
    heuristics_matrix[savings_matrix < savings_threshold] = 0.0 #Remove low savings edges.
    heuristics_matrix[distance_matrix > distance_threshold] = 0.0 # Remove edges exceeding distance


    # Normalize the heuristics matrix, avoid normalization if all values are zero.
    max_heuristic = np.max(heuristics_matrix)
    if max_heuristic > 0:
        heuristics_matrix = heuristics_matrix / max_heuristic

    return heuristics_matrix
```
