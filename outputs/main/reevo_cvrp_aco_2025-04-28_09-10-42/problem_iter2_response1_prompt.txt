{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n    Combines distance, demand, and geometric proximity to estimate edge desirability.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Vector of customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Parameters (can be tuned)\n    distance_weight = 0.5\n    demand_weight = 0.3\n    proximity_weight = 0.2\n    sparsity_threshold = 0.1  # Threshold for sparsifying the matrix. Edges with heuristic value lower than this will be set to 0.\n\n    # Node-specific information (e.g. distance to depot, demand)\n    distance_to_depot = distance_matrix[0, :]\n    \n    # Heuristic computation\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # No self-loops\n            else:\n                # Distance factor: Shorter distances are more desirable\n                distance_factor = 1 / (distance_matrix[i, j] + 1e-6) # add a small number to avoid division by zero\n\n                # Demand factor: Favor edges connecting nodes with lower demands.  Also prefer the depot\n                demand_factor = 1 / (demands[i] + demands[j] + 1e-6)\n                if i == 0 or j == 0:\n                    demand_factor = 1\n\n                # Proximity factor: Penalize edges between nodes that are geometrically far from each other relative to the depot\n                # We can define proximity as: smaller difference of distance to depot, larger is the better connection,\n                proximity_factor = 1 / (abs(distance_to_depot[i] - distance_to_depot[j]) + 1e-6)\n                # Combine factors\n                heuristic_matrix[i, j] = (\n                    distance_weight * distance_factor\n                    + demand_weight * demand_factor\n                    + proximity_weight * proximity_factor\n                )\n\n    # Normalize the heuristic matrix\n    max_heuristic = np.max(heuristic_matrix)\n    if max_heuristic > 0:\n        heuristic_matrix /= max_heuristic\n\n    # Sparsify the matrix: Remove unpromising edges to speed up stochastic sampling\n    heuristic_matrix[heuristic_matrix < sparsity_threshold] = 0\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for the Capacitated Vehicle Routing Problem (CVRP) based on\n    stochastic solution sampling, considering distance, demand, and angle.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Customer demands (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge\n                   in a solution (n x n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros((n, n))\n\n    # Heuristic 1: Inverse distance\n    distance_heuristic = 1 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero\n\n    # Heuristic 2: Demand-based penalty\n    demand_penalty = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                demand_penalty[i, j] = demands[j] / capacity\n\n    # Heuristic 3: Angle penalty (encourage less sharp turns)\n    angle_penalty = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Find a suitable k for angle calculation, skipping 'i' and 'j'\n                 k_candidates = [k for k in range(n) if k != i and k != j]\n                 if k_candidates:\n                    k = k_candidates[0]\n\n                    vector_ij = coordinates[j] - coordinates[i]\n                    vector_jk = coordinates[k] - coordinates[j]\n\n                    # Normalize vectors to calculate angle correctly\n                    vector_ij = vector_ij / (np.linalg.norm(vector_ij) + 1e-6) #avoid zero norm division\n                    vector_jk = vector_jk / (np.linalg.norm(vector_jk) + 1e-6) #avoid zero norm division\n\n                    dot_product = np.dot(vector_ij, vector_jk)\n                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))  # Clip to avoid domain errors\n                    angle_penalty[i, j] = angle / np.pi # Normalize to [0,1]\n\n    # Combine heuristics\n    heuristics_matrix = distance_heuristic * (1 - demand_penalty) * (1 - angle_penalty)\n\n    # Sparsify the matrix (set unpromising elements to zero)\n    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 25) #Consider only non-zero elements for percentile calculation\n    heuristics_matrix[heuristics_matrix < threshold] = 0\n\n    # Ensure that depot connections are more heavily favored.\n    for i in range(1, n):\n        heuristics_matrix[0, i] *= 2.0\n        heuristics_matrix[i, 0] *= 2.0\n\n    # Remove self loops\n    for i in range(n):\n        heuristics_matrix[i, i] = 0\n\n    return heuristics_matrix\n\n[Reflection]\nAngles, demand ratios, and depot prioritization yield better CVRP heuristics than simple distance/demand ratios and proximity.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}