```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This function combines several factors to determine the promise of including each edge in a solution.
    It also sparsifies the matrix by setting unpromising elements to zero.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """

    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    # Parameters (can be tuned)
    alpha = 1.0  # Importance of distance
    beta = 0.5   # Importance of demand compatibility
    gamma = 0.2  # Importance of proximity to depot
    delta = 0.1  # Importance of angle to depot

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics_matrix[i, j] = 0  # No self-loops
                continue

            # Distance factor
            distance_factor = np.exp(-alpha * distance_matrix[i, j] / np.mean(distance_matrix))

            # Demand compatibility factor: Favor connections that, if combined with the current route, do not violate capacity
            demand_factor = np.exp(-beta * demands[i] * demands[j] / (capacity**2)) if i > 0 and j > 0 else 1.0

            # Proximity to depot factor: Prioritize edges close to the depot
            depot_distance_factor = np.exp(-gamma * (distance_matrix[0, i] + distance_matrix[0, j]) / (2 * np.mean(distance_matrix)))

            # Angle to depot factor: Favor paths that bring the vehicle closer to the depot.
            angle_to_depot = 0
            if i > 0 and j > 0:
                vec_i_depot = coordinates[0] - coordinates[i]
                vec_j_depot = coordinates[0] - coordinates[j]
                vec_i_j = coordinates[j] - coordinates[i]

                cos_angle = np.dot(vec_i_depot, vec_i_j) / (np.linalg.norm(vec_i_depot) * np.linalg.norm(vec_i_j) + 1e-9)
                angle_to_depot = np.exp(delta * cos_angle)

            heuristics_matrix[i, j] = distance_factor * demand_factor * depot_distance_factor * angle_to_depot

    # Sparsify the matrix: Keep only the most promising edges for each node
    for i in range(n):
        row = heuristics_matrix[i, :]
        threshold = np.quantile(row[row > 0], 0.75)  # Keep top 25% of non-zero values
        heuristics_matrix[i, row < threshold] = 0

    return heuristics_matrix
```
