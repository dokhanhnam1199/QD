```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    This version prioritizes diversification and angle calculations, and avoids normalization.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    # Savings calculation (Clarke-Wright Savings Algorithm)
    savings_matrix = np.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Depot proximity (inverse distance)
    depot_proximity = np.zeros(n)
    for i in range(1, n):
        depot_proximity[i] = 1 / (distance_matrix[0, i] + 1e-6)  # Add small constant to avoid division by zero

    # Demand ratio (demand / capacity)
    demand_ratio = demands / capacity

    # Angle calculation (between node i, depot, and node j)
    angle_matrix = np.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(i + 1, n):
            # Vectors from depot to nodes i and j
            vector_i = coordinates[i] - coordinates[0]
            vector_j = coordinates[j] - coordinates[0]

            # Calculate dot product and magnitudes
            dot_product = np.dot(vector_i, vector_j)
            magnitude_i = np.linalg.norm(vector_i)
            magnitude_j = np.linalg.norm(vector_j)

            # Calculate angle (in radians)
            if magnitude_i > 0 and magnitude_j > 0:
                angle = np.arccos(dot_product / (magnitude_i * magnitude_j + 1e-6)) #prevent zero division
                angle_matrix[i, j] = angle
                angle_matrix[j, i] = angle
            else:
                angle_matrix[i, j] = 0
                angle_matrix[j, i] = 0

    # Combine factors (additively)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = (
                    savings_matrix[i, j]
                    - distance_matrix[i, j]
                    + 0.5 * (depot_proximity[i] + depot_proximity[j])
                    - 0.5 * (demand_ratio[i] + demand_ratio[j])
                    - 0.1 * angle_matrix[i, j] # Penalize larger angles for diversification
                )

    # Adaptive Sparsification (based on distance)
    distance_threshold = np.quantile(distance_matrix[distance_matrix > 0], 0.75) # Keep only 75% shortest edges

    heuristics_matrix[distance_matrix > distance_threshold] = -1e9 #very negative values

    return heuristics_matrix
```
