```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))

    # Calculate savings for each pair of customers
    savings = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                savings[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]

    # Combine distance, savings, and demand considerations
    for i in range(n):
        for j in range(n):
            if i != j:
                # Prioritize shorter distances, higher savings, and consider demand
                heuristics[i, j] = (
                    (1 / (distance_matrix[i, j] + 1e-6))  # Avoid division by zero
                    * (savings[i, j] + 1e-6)
                    / (demands[i] + demands[j] + 1e-6) # encourage merging small demand earlier
                )
            else:
                heuristics[i, j] = 0  # No self-loops

    # Sparsify the matrix: Keep only a percentage of the most promising edges for each node
    sparsity_level = 0.3 # Keep top 30% edges for each node. Can be tuned.

    for i in range(n):
        row = heuristics[i, :].copy() # Copy to avoid modifying during sort
        indices = np.argsort(row)[::-1] # indices from high to low
        threshold_index = int(n * sparsity_level) # Determine how many values to keep

        # Create a mask of indices we want to set to 0
        mask = np.ones(n, dtype=bool)
        mask[indices[:threshold_index]] = False # only set topk to nonzero. set rest to zero.
        heuristics[i, mask] = 0
        heuristics[i, i] = 0 # prevent loops

    return heuristics
```
