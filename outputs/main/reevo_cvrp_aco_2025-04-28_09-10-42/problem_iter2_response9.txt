```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    Improved version incorporating diversification, refined angle calculation, demand considerations,
    and adaptive sparsity for enhanced CVRP heuristics.

    Args:
        distance_matrix (np.ndarray): Distance matrix (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Vector of customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge (n x n).
    """

    n = distance_matrix.shape[0]
    promise = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance: Shorter distances are more promising.
    inverse_distance = 1 / (distance_matrix + 1e-6)

    # 2. Demand Consideration: Penalize edges connecting nodes that would likely exceed capacity early.
    demand_penalty = np.ones_like(distance_matrix, dtype=float)
    avg_demand = np.mean(demands)
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_penalty[i, j] = 0
                continue

            # Penalty increases if demands[i] + demands[j] + avg_demand * k > capacity
            # where k is some factor (e.g. 0.5, 1). This is a softer constraint
            # than only consider immediate node pairs.
            k = 0.75
            if demands[i] + demands[j] + avg_demand * k > capacity:
                demand_penalty[i, j] = (capacity - (demands[i] + demands[j] + avg_demand * k)) / capacity #scaled linearly, if capacity small, penalty larger.
                demand_penalty[i, j] = np.clip(demand_penalty[i,j], 0, 1) #Ensure that value are between 0 and 1
                demand_penalty[i, j] = 1-demand_penalty[i, j] #convert to penalty form.
                #if demands[i] + demands[j] > capacity: #consider the pure capacity constraint.

    # 3. Angle to Depot: Edges leading "away" from the depot are less promising.
    angle_factor = np.ones_like(distance_matrix, dtype=float)
    depot_coord = coordinates[0]
    for i in range(1, n):
        coord_i = coordinates[i]
        for j in range(1, n):
            if i == j:
                angle_factor[i, j] = 0
                continue

            coord_j = coordinates[j]

            # Calculate vectors
            vec_i_depot = depot_coord - coord_i
            vec_i_j = coord_j - coord_i

            # Calculate dot product and magnitudes
            dot_product = np.dot(vec_i_depot, vec_i_j)
            magnitude_i_depot = np.linalg.norm(vec_i_depot)
            magnitude_i_j = np.linalg.norm(vec_i_j)

            # Calculate cosine of the angle and adjust. Apply penalty when the point j is going away from the depot (>= 90 degree).
            if magnitude_i_depot > 0 and magnitude_i_j > 0:
                cos_angle = dot_product / (magnitude_i_depot * magnitude_i_j)
                angle = np.arccos(np.clip(cos_angle, -1.0, 1.0))

                #Modified angle factor calculation, penalizing angles > 90 degrees more.
                if angle > np.pi / 2: # > 90 degree
                    angle_factor[i, j] = 1 - 2 * (angle - np.pi/2) / np.pi
                else:
                    angle_factor[i, j] = 1 # No penalty if is less than 90
                angle_factor[i, j] = np.clip(angle_factor[i, j], 0, 1) # clip it between 0 and 1.

            else:
                angle_factor[i, j] = 0  # Handle cases with overlapping points

    # 4. Diversification: Encourage exploration of different routes by adding a small random factor.
    random_factor = np.random.uniform(0.9, 1.1, size=(n, n))  # Random values between 0.9 and 1.1
    random_factor = (random_factor + random_factor.T) / 2 #ensure matrix symmetry

    # Combine the factors
    promise = inverse_distance * demand_penalty * angle_factor * random_factor

    # 5. Adaptive Sparsity: Adjust the number of kept edges based on instance size or density.
    # Smaller n -> smaller k, larger n -> larger k, ensure good balance between exploration and exploitation
    k = max(3, int(np.sqrt(n)))

    for i in range(n):
        row = promise[i, :].copy()
        indices = np.argsort(row)[::-1]
        for j in range(n):
            if j not in indices[:k]:
                promise[i, j] = 0.0

    return promise
```
