```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    Combines distance, demand, and geometric proximity to estimate edge desirability.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Parameters (can be tuned)
    distance_weight = 0.5
    demand_weight = 0.3
    proximity_weight = 0.2
    sparsity_threshold = 0.1  # Threshold for sparsifying the matrix. Edges with heuristic value lower than this will be set to 0.

    # Node-specific information (e.g. distance to depot, demand)
    distance_to_depot = distance_matrix[0, :]
    
    # Heuristic computation
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
            else:
                # Distance factor: Shorter distances are more desirable
                distance_factor = 1 / (distance_matrix[i, j] + 1e-6) # add a small number to avoid division by zero

                # Demand factor: Favor edges connecting nodes with lower demands.  Also prefer the depot
                demand_factor = 1 / (demands[i] + demands[j] + 1e-6)
                if i == 0 or j == 0:
                    demand_factor = 1

                # Proximity factor: Penalize edges between nodes that are geometrically far from each other relative to the depot
                # We can define proximity as: smaller difference of distance to depot, larger is the better connection,
                proximity_factor = 1 / (abs(distance_to_depot[i] - distance_to_depot[j]) + 1e-6)
                # Combine factors
                heuristic_matrix[i, j] = (
                    distance_weight * distance_factor
                    + demand_weight * demand_factor
                    + proximity_weight * proximity_factor
                )

    # Normalize the heuristic matrix
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix /= max_heuristic

    # Sparsify the matrix: Remove unpromising edges to speed up stochastic sampling
    heuristic_matrix[heuristic_matrix < sparsity_threshold] = 0

    return heuristic_matrix
```
