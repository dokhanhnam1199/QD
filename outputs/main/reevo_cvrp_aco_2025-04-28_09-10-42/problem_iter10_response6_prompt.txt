{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n\n    \"\"\"\n    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n    This version prioritizes savings and inverse distance, simplifies depot proximity, and adjusts the sparsification threshold.\n    It also incorporates adaptive sparsification based on percentile cutoffs. And normalizes the heuristic matrix.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros_like(distance_matrix)\n\n    # Calculate savings matrix (Clarke-Wright Savings Algorithm)\n    savings_matrix = np.zeros_like(distance_matrix)\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Demand factor\n    demand_factor = demands / capacity  # Ratio of demand to capacity. Smaller is generally better\n    demand_factor = np.clip(demand_factor, 0, 1)\n\n    # Depot proximity factor (prioritize connections to the depot)\n    depot_proximity = np.zeros_like(distance_matrix)\n    for i in range(1,n):\n        depot_proximity[0, i] = 1 / (distance_matrix[0, i] + 1e-9)\n        depot_proximity[i, 0] = depot_proximity[0, i]\n\n\n    # Combine factors\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Primary factors: savings and inverse distance\n                heuristics_matrix[i, j] = savings_matrix[i, j] / (distance_matrix[i, j] + 1e-9) #avoid division by zero\n\n                #Penalize high demand edges\n                heuristics_matrix[i, j] /= (1 + demand_factor[i] + demand_factor[j])\n\n                #Incorporate depot proximity\n                heuristics_matrix[i,j] += depot_proximity[i,j]\n\n\n\n    # Adaptive sparsification based on heuristic values and percentile cutoff\n    heuristic_values = heuristics_matrix[np.triu_indices_from(heuristics_matrix, k=1)]  # Upper triangle values\n    cutoff_percentile = 40  # dynamically adjusted.\n    cutoff_value = np.percentile(heuristic_values, cutoff_percentile)\n    heuristics_matrix[heuristics_matrix < cutoff_value] = 0.0\n\n    # Further sparsification based on distance\n    distance_threshold = np.mean(distance_matrix) * 1.2  # Reduced threshold\n    heuristics_matrix[distance_matrix > distance_threshold] = 0.0\n\n    # Normalize the heuristics matrix\n    max_heuristic = np.max(heuristics_matrix)\n    if max_heuristic > 0:\n        heuristics_matrix = heuristics_matrix / max_heuristic\n\n    return heuristics_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n    This version refines factor weighting, depot proximity, demand influence, and adaptive distance thresholds for improved heuristic design.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros_like(distance_matrix)\n\n    # Calculate savings matrix (Clarke-Wright Savings Algorithm)\n    savings_matrix = np.zeros_like(distance_matrix)\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Depot proximity - inverse distance to depot, squared to emphasize closer nodes\n    depot_proximity = np.zeros(n)\n    for i in range(1, n):\n        depot_proximity[i] = 1 / (distance_matrix[0, i] + 1e-9)  # Closer is better; avoid division by zero\n    depot_proximity = (depot_proximity / np.max(depot_proximity))**2 # Emphasize proximity by squaring\n\n    # Demand factor - ratio of demand to capacity, with a sigmoid-like transformation\n    demand_factor = demands / capacity  # Ratio of demand to capacity. Smaller is generally better\n    demand_factor = np.clip(demand_factor, 0, 1)\n    demand_penalty = 1 / (1 + np.exp(5 * (demand_factor - 0.5)))  # Sigmoid to penalize high demand more sharply\n\n\n    # Combine factors to create the heuristics matrix\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Primary factor: savings\n                heuristics_matrix[i, j] = savings_matrix[i, j]\n\n                # Secondary factors: depot proximity and demand. Do not consider depot proximity for depot itself.\n                proximity_factor = 1.0\n                if i != 0 and j != 0:\n                    proximity_factor = (0.75 + 0.25 * depot_proximity[i] * depot_proximity[j]) # Weight depot proximity less\n\n                demand_component = 1.0\n                if i != 0 and j != 0:\n                     demand_component = (demand_penalty[i] * demand_penalty[j])  # Geometric mean to penalize if either is high\n\n                # Distance penalty. Further distances are less attractive\n                distance_penalty = (distance_matrix[i, j] + 1e-9)**0.5 # Reduce impact by square root\n\n                heuristics_matrix[i, j] = heuristics_matrix[i, j] * proximity_factor * demand_component / distance_penalty # Savings * Proximity * Demand / Distance\n\n    # Sparsify the matrix: zero out edges that are too long (less promising) - Adaptive threshold based on Savings\n    savings_threshold = np.percentile(savings_matrix[savings_matrix > 0], 75) # Base distance filter off savings\n    distance_threshold = np.mean(distance_matrix) * 1.5  # Adjusted threshold, further reducing the impact\n\n    heuristics_matrix[(distance_matrix > distance_threshold) & (savings_matrix < savings_threshold)] = 0.0  # Apply to edges beyond distance threshold but also low savings\n\n    # Normalize the heuristics matrix\n    max_heuristic = np.max(heuristics_matrix)\n    if max_heuristic > 0:\n        heuristics_matrix = heuristics_matrix / max_heuristic\n\n    return heuristics_matrix\n\n[Reflection]\nPrioritize savings, proximity, and demand, with adaptive thresholds and careful factor weighting.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}