```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Parameters (tunable)
    alpha = 1.0  # Importance of distance
    beta = 0.5  # Importance of demand consideration
    gamma = 0.2 # Importance of angle relative to depot

    depot_x, depot_y = coordinates[0]

    for i in range(n):
        for j in range(n):
            if i != j:
                distance_factor = distance_matrix[i, j]
                demand_factor = demands[j] / capacity if i == 0 else 0 # Only consider demand when routing *from* the depot
                
                # Angle relative to the depot (encourage going away from depot when leaving)
                angle_factor = 0
                if i != 0: # Angle relative to depot is irrelevant if starting from the depot
                  angle = np.arctan2(coordinates[j][1] - depot_y, coordinates[j][0] - depot_x) - np.arctan2(coordinates[i][1] - depot_y, coordinates[i][0] - depot_x)
                  angle_factor = np.cos(angle) # Cosine gives higher value for aligned vectors, make opposite to avoid selecting such links

                heuristic_matrix[i, j] = (
                    alpha / (distance_factor + 1e-6)  # Avoid division by zero
                    - beta * demand_factor
                    - gamma * angle_factor
                )
    
    # Sparsify the matrix (set unpromising elements to zero)
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.2)  # Keep top 80%
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
