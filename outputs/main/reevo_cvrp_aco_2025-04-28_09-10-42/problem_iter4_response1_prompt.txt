{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n    This version prioritizes diversification and angle calculations and avoids normalization.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros_like(distance_matrix)\n\n    # Savings matrix (Clarke-Wright Savings Algorithm)\n    savings_matrix = np.zeros_like(distance_matrix)\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Depot proximity factor (inverse distance to depot)\n    depot_proximity = np.zeros(n)\n    for i in range(1, n):\n        depot_proximity[i] = 1 / (distance_matrix[0, i] + 1e-9)  # Adding a small constant to avoid division by zero\n    \n    # Demand ratio factor\n    demand_ratio = demands / capacity\n\n    # Angle between nodes i-0-j (encourage diverse routes)\n    angle_matrix = np.zeros_like(distance_matrix)\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            # Vectors from depot (0) to nodes i and j\n            vector_i = coordinates[i] - coordinates[0]\n            vector_j = coordinates[j] - coordinates[0]\n\n            # Calculate the dot product and magnitudes\n            dot_product = np.dot(vector_i, vector_j)\n            magnitude_i = np.linalg.norm(vector_i)\n            magnitude_j = np.linalg.norm(vector_j)\n\n            # Calculate the cosine of the angle\n            cos_angle = dot_product / (magnitude_i * magnitude_j + 1e-9) #avoid division by zero\n            \n            #Calculate angle in radians\n            angle = np.arccos(np.clip(cos_angle, -1.0, 1.0)) #clip to avoid domain errors\n            angle_matrix[i, j] = angle\n            angle_matrix[j, i] = angle\n\n    # Combine factors additively, no normalization\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristics_matrix[i, j] = (\n                    savings_matrix[i, j]\n                    - distance_matrix[i, j] # Prefer shorter distances\n                    + 0.5 * (depot_proximity[i] + depot_proximity[j]) # Favor closeness to depot\n                    - 0.1 * (demand_ratio[i] + demand_ratio[j]) # Discourage high demand edges\n                    + 0.2 * angle_matrix[i, j] # Encourage diverse routes (larger angles)\n                )\n\n    # Adaptive sparsification based on a percentage threshold\n    threshold_percentage = 0.75  # Keep the top 25% of edges\n    threshold = np.quantile(heuristics_matrix[heuristics_matrix > 0], 1 - threshold_percentage)\n    heuristics_matrix[heuristics_matrix < threshold] = 0\n\n    return heuristics_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n\n    \"\"\"\n    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    This version incorporates a combination of distance, demand, and depot proximity to guide edge selection.\n    It also sparsifies the matrix by setting unpromising edges to zero.  It adds a customer clustering encouragement.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Vector of customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros_like(distance_matrix)\n\n    # Parameters (adjust these to fine-tune the heuristic)\n    distance_importance = 1.0\n    demand_importance = 0.5\n    depot_proximity_importance = 0.2\n    clustering_importance = 0.1\n    sparsification_threshold = 0.1 #remove edges if their value is smaller than threshold * max value\n\n    max_demand = np.max(demands)\n\n    #Calculate the center of mass of all customers (excluding the depot)\n    center_x = np.mean(coordinates[1:, 0])\n    center_y = np.mean(coordinates[1:, 1])\n    center = np.array([center_x, center_y])\n\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Distance factor (shorter distances are preferred)\n                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Add a small constant to avoid division by zero\n\n                # Demand factor (penalize edges connecting nodes with high demands, relative to capacity)\n                demand_factor = 1 - (demands[i] + demands[j]) / (2 * capacity)\n                demand_factor = max(0, demand_factor)  # Ensure the factor is non-negative\n\n                #Proximity to depot factor\n                depot_proximity_factor = 1 - (distance_matrix[0, i] + distance_matrix[0, j])/(np.max(distance_matrix) * 2 + 1e-6)\n\n                #Clustering encouragement. Encourage edges that connect customers that are geometrically close to each other\n                #relative to the distance to the overall center of mass.\n                clustering_factor = 0.0\n                if i != 0 and j != 0:\n                    dist_i_center = np.linalg.norm(coordinates[i] - center)\n                    dist_j_center = np.linalg.norm(coordinates[j] - center)\n                    clustering_factor = 1 - distance_matrix[i, j] / (dist_i_center + dist_j_center + 1e-6) #Avoid division by zero\n\n\n                # Combine the factors\n                heuristics_matrix[i, j] = (distance_importance * distance_factor +\n                                            demand_importance * demand_factor +\n                                            depot_proximity_importance* depot_proximity_factor +\n                                            clustering_importance * clustering_factor)\n    # Sparsify the matrix (remove edges that are unlikely to be in the solution)\n    max_heuristic = np.max(heuristics_matrix)\n    if max_heuristic > 0: #Avoid issues if max_heuristic is zero.\n        threshold = sparsification_threshold * max_heuristic\n        heuristics_matrix[heuristics_matrix < threshold] = 0\n\n    return heuristics_matrix\n\n[Reflection]\nNormalization, clustering encouragement, and adaptive sparsification contribute to better heuristic performance.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}