```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    This version prioritizes savings and inverse distance, simplifies depot proximity, and adjusts the sparsification threshold.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    # Calculate savings matrix (Clarke-Wright Savings Algorithm)
    savings_matrix = np.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Demand factor: account for both origin and destination demands
    normalized_demands = demands / np.max(demands)
    demand_penalty = 1 + 1.5 * (normalized_demands[:, None] + normalized_demands[None, :])  # Increased penalty effect

    # Combine factors: Savings and inverse distance, penalized by demand
    inverse_distance = 1 / (distance_matrix + 1e-9)
    heuristics_matrix = savings_matrix * inverse_distance / demand_penalty

    # Encourage connection to depot, but less aggressively
    for i in range(1, n):
        heuristics_matrix[0, i] *= 1.1
        heuristics_matrix[i, 0] *= 1.1

    # Adaptive sparsification based on percentile threshold
    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 45)  # Adjusted percentile
    heuristics_matrix[heuristics_matrix < threshold] = 0.0

    # Further sparsification: Keep top 20% edges per node
    for i in range(n):
        row = heuristics_matrix[i, :].copy()
        indices = np.argsort(row)[::-1]
        top_k = int(0.2 * n)  # Keep top 20%
        mask = np.ones(n, dtype=bool)
        mask[indices[:top_k]] = False
        heuristics_matrix[i, mask] = 0.0

    # Normalize the heuristics matrix
    max_heuristic = np.max(heuristics_matrix)
    if max_heuristic > 0:
        heuristics_matrix = heuristics_matrix / max_heuristic

    return heuristics_matrix
```
