{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for solving the Capacitated Vehicle Routing Problem (CVRP)\n    via stochastic solution sampling.\n\n    This version incorporates distance, demand, and angular considerations\n    to determine the desirability of including an edge in the solution.\n    It also sparsifies the matrix.\n\n    Args:\n        distance_matrix: A numpy array of shape (n, n) representing the distance\n                         between each pair of nodes.\n        coordinates: A numpy array of shape (n, 2) representing the Euclidean\n                     coordinates of each node.\n        demands: A numpy array of shape (n,) representing the demand of each node.\n        capacity: An integer representing the capacity of each vehicle.\n\n    Returns:\n        A numpy array of shape (n, n) representing the prior indicators of how\n        promising it is to include each edge in a solution.  Higher values\n        indicate more promising edges. Sparsified such that many entries are zero.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Parameters (tuned experimentally)\n    distance_weight = 1.0\n    demand_weight = 0.5\n    angle_weight = 0.2\n    sparsification_threshold = 0.1 # Remove edges below this fraction of max score\n    depot_penalty = 2.0 # Higher penalty for returning to depot early.  Avoid very short subtours.\n\n    max_demand = np.max(demands)\n\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # No self-loops\n                continue\n\n            distance = distance_matrix[i, j]\n\n            # Incorporate demand: Penalize edges connecting nodes with very high demand.\n            # Also penalize nodes with high demand that aren't close to the depot\n            demand_factor = 1.0\n            if i != 0 and j != 0: #not to or from depot\n                demand_factor = 1.0 - (demands[i] + demands[j]) / (2*capacity)\n                demand_factor = max(0.0, demand_factor) #bound at zero\n            elif i ==0: #origin\n                 demand_factor = 1.0 - (demands[j]) / (capacity * depot_penalty) # Less tolerant for short routes starting from depot\n                 demand_factor = max(0.0, demand_factor)\n            elif j == 0: #returning to depot\n                 demand_factor = 1.0 - (demands[i]) / (capacity * depot_penalty) #Less tolerant for short routes returning to depot.\n                 demand_factor = max(0.0, demand_factor)\n\n\n            # Incorporate angle:  Favor edges that create less sharp turns (more direct routes)\n            # This is a rough approximation and could be improved with more neighbor consideration.\n            angle_factor = 1.0\n            if i != 0 and j!=0: #only add penalty when neither are the depot\n                vector_i_depot = coordinates[0] - coordinates[i]\n                vector_i_j = coordinates[j] - coordinates[i]\n\n                # Normalize vectors\n                norm_i_depot = np.linalg.norm(vector_i_depot)\n                norm_i_j = np.linalg.norm(vector_i_j)\n\n                if norm_i_depot > 0 and norm_i_j > 0:  #avoid division by zero\n                    vector_i_depot = vector_i_depot / norm_i_depot\n                    vector_i_j = vector_i_j / norm_i_j\n\n                    dot_product = np.dot(vector_i_depot, vector_i_j)\n                    angle_factor = (1 + dot_product) / 2  # Scale to [0, 1], higher is better (smaller angle)\n\n            # Combine factors\n            heuristic_matrix[i, j] = (\n                (distance_weight / (distance + 1e-6))  # Add a small constant to prevent division by zero\n                * (demand_factor ** demand_weight)\n                * (angle_factor ** angle_weight)\n            )\n\n    #Sparsify the matrix\n    max_heuristic = np.max(heuristic_matrix)\n    if max_heuristic > 0:\n        threshold = sparsification_threshold * max_heuristic\n        heuristic_matrix[heuristic_matrix < threshold] = 0\n\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for CVRP based on distance, demand, and angle considerations.\n\n    Args:\n        distance_matrix: Distance matrix between nodes.\n        coordinates: Coordinates of the nodes.\n        demands: Demand of each node.\n        capacity: Vehicle capacity.\n\n    Returns:\n        A matrix indicating the desirability of each edge.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros((n, n))\n\n    # Parameters to control the influence of each factor\n    alpha = 1.0   # Weight for distance\n    beta = 0.5    # Weight for demand\n    gamma = 0.2   # Weight for angle\n\n    # Node importance based on demand\n    node_importance = demands / np.sum(demands)\n\n    # Calculate angles between nodes relative to the depot\n    depot_x, depot_y = coordinates[0]\n    angles = np.zeros(n)\n    for i in range(1, n):\n        x, y = coordinates[i]\n        angles[i] = np.arctan2(y - depot_y, x - depot_x)\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Distance factor: shorter distance is better\n                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Adding a small constant to avoid division by zero\n\n                # Demand factor: Prefer edges connecting nodes with high demand (scaled down)\n                demand_factor = (node_importance[i] + node_importance[j])\n\n                # Angle factor: Penalize sharp turns relative to the depot.  Smaller angle difference is better\n                angle_diff = np.abs(angles[i] - angles[j])\n                angle_factor = 1 / (angle_diff + 1e-6) #smaller differences indicate higher priority\n\n                # Combine the factors\n                heuristics_matrix[i, j] = (alpha * distance_factor +\n                                           beta * demand_factor +\n                                           gamma * angle_factor)\n\n    # Sparsify the matrix: Keep only top k connections per node\n    k = int(np.sqrt(n))  # Number of connections to keep.  Dynamically scale based on the size of the graph\n\n    for i in range(n):\n        row = heuristics_matrix[i, :]\n        indices = np.argsort(row)[-k:]  # Indices of the top k values\n        mask = np.ones(n, dtype=bool)\n        mask[indices] = False\n        heuristics_matrix[i, mask] = 0  # Set non-top-k elements to zero\n\n    return heuristics_matrix\n\n[Reflection]\nThe better code normalizes demand, uses absolute angle differences, and applies dynamic sparsification for improved performance.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}