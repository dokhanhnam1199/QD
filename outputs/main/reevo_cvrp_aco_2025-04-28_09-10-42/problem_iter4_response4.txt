```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version incorporates a combination of distance, demand, depot proximity, and customer clustering,
    with normalization and tunable parameters for improved performance. It sparsifies the matrix to focus
    on promising edges.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    # Tunable Parameters
    distance_importance = 1.0
    demand_importance = 0.7
    depot_proximity_importance = 0.5
    clustering_importance = 0.3
    sparsification_threshold = 0.2

    # Normalization Factors (calculated once)
    max_distance = np.max(distance_matrix)
    max_demand = np.max(demands)

    # Calculate the center of mass of all customers (excluding the depot)
    center_x = np.mean(coordinates[1:, 0])
    center_y = np.mean(coordinates[1:, 1])
    center = np.array([center_x, center_y])

    # Calculate distances to the center
    distances_to_center = np.zeros(n)
    for i in range(1, n):
        distances_to_center[i] = np.linalg.norm(coordinates[i] - center)
    max_distance_to_center = np.max(distances_to_center)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Normalized Distance Factor
                normalized_distance = distance_matrix[i, j] / (max_distance + 1e-6)  # Avoid division by zero
                distance_factor = 1 - normalized_distance

                # Normalized Demand Factor
                total_demand = demands[i] + demands[j]
                normalized_demand = total_demand / (2 * capacity + 1e-6)
                demand_factor = max(0, 1 - normalized_demand)

                # Normalized Depot Proximity Factor
                depot_distance_sum = distance_matrix[0, i] + distance_matrix[0, j]
                normalized_depot_distance = depot_distance_sum / (2 * max_distance + 1e-6)
                depot_proximity_factor = 1 - normalized_depot_distance

                # Clustering Encouragement Factor
                clustering_factor = 0.0
                if i != 0 and j != 0:
                    # Normalize distances to center and distance between customers
                    dist_i_center_norm = distances_to_center[i] / (max_distance_to_center + 1e-6)
                    dist_j_center_norm = distances_to_center[j] / (max_distance_to_center + 1e-6)
                    distance_ij_norm = distance_matrix[i, j] / (max_distance + 1e-6)

                    clustering_factor = max(0, 1 - distance_ij_norm / (dist_i_center_norm + dist_j_center_norm + 1e-6))

                # Combine Factors
                heuristics_matrix[i, j] = (
                    distance_importance * distance_factor +
                    demand_importance * demand_factor +
                    depot_proximity_importance * depot_proximity_factor +
                    clustering_importance * clustering_factor
                )

    # Sparsification
    max_heuristic = np.max(heuristics_matrix)
    if max_heuristic > 0:
        threshold = sparsification_threshold * max_heuristic
        heuristics_matrix[heuristics_matrix < threshold] = 0

    return heuristics_matrix
```
