{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    This version incorporates a combination of normalized distance, demand, and depot proximity to guide edge selection.\n    It also sparsifies the matrix by setting unpromising edges to zero and adds a customer clustering encouragement.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Vector of customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros_like(distance_matrix)\n\n    # Parameters (adjust these to fine-tune the heuristic)\n    distance_importance = 1.0\n    demand_importance = 0.5\n    depot_proximity_importance = 0.2\n    clustering_importance = 0.1\n    sparsification_threshold = 0.1  # remove edges if their value is smaller than threshold * max value\n\n    max_demand = np.max(demands)\n    max_distance = np.max(distance_matrix)\n\n    # Calculate the center of mass of all customers (excluding the depot)\n    center_x = np.mean(coordinates[1:, 0])\n    center_y = np.mean(coordinates[1:, 1])\n    center = np.array([center_x, center_y])\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Distance factor (shorter distances are preferred), normalized\n                distance_factor = 1 - (distance_matrix[i, j] / max_distance)\n\n                # Demand factor (penalize edges connecting nodes with high demands, relative to capacity)\n                demand_factor = 1 - (demands[i] + demands[j]) / (2 * capacity)\n                demand_factor = max(0, demand_factor)  # Ensure the factor is non-negative\n\n                # Proximity to depot factor, normalized\n                depot_proximity_factor = 1 - (distance_matrix[0, i] + distance_matrix[0, j]) / (2 * max_distance)\n                depot_proximity_factor = max(0, depot_proximity_factor) # Ensure the factor is non-negative\n\n                # Clustering encouragement. Encourage edges that connect customers that are geometrically close to each other\n                # relative to the distance to the overall center of mass.\n                clustering_factor = 0.0\n                if i != 0 and j != 0:\n                    dist_i_center = np.linalg.norm(coordinates[i] - center)\n                    dist_j_center = np.linalg.norm(coordinates[j] - center)\n                    clustering_factor = 1 - distance_matrix[i, j] / (dist_i_center + dist_j_center + 1e-6)  # Avoid division by zero\n                    clustering_factor = max(0,clustering_factor) #Ensure non negative\n\n                # Combine the factors\n                heuristics_matrix[i, j] = (distance_importance * distance_factor +\n                                            demand_importance * demand_factor +\n                                            depot_proximity_importance * depot_proximity_factor +\n                                            clustering_importance * clustering_factor)\n\n    # Sparsify the matrix (remove edges that are unlikely to be in the solution)\n    max_heuristic = np.max(heuristics_matrix)\n    if max_heuristic > 0:  # Avoid issues if max_heuristic is zero.\n        threshold = sparsification_threshold * max_heuristic\n        heuristics_matrix[heuristics_matrix < threshold] = 0\n\n    return heuristics_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n\n    \"\"\"\n    Heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n    This version incorporates savings, depot proximity, demand ratio, and adaptive sparsification.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate savings matrix (Clarke-Wright Savings Algorithm)\n    savings_matrix = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Normalize distance matrix (inverse)\n    normalized_distance = 1 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero\n    normalized_distance = normalized_distance / np.max(normalized_distance)\n\n    # Normalize savings matrix\n    normalized_savings = savings_matrix / np.max(savings_matrix + 1e-6)\n\n    # Demand factor: Penalize edges connecting nodes with high demands if they exceed capacity\n    demand_factor = np.ones_like(distance_matrix, dtype=float)\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                if demands[i] + demands[j] > capacity:\n                    demand_factor[i, j] = 0.1  # Significantly penalize\n\n    # Angle factor\n    angle_matrix = np.ones_like(distance_matrix)\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                vector_i_depot = coordinates[0] - coordinates[i]\n                vector_i_j = coordinates[j] - coordinates[i]\n                norm_i_depot = np.linalg.norm(vector_i_depot)\n                norm_i_j = np.linalg.norm(vector_i_j)\n                if norm_i_depot > 0 and norm_i_j > 0:\n                    cos_angle = np.dot(vector_i_depot, vector_i_j) / (norm_i_depot * norm_i_j)\n                    angle_matrix[i, j] = (1 + cos_angle) / 2  # Scale to [0, 1], higher is better (smaller angle)\n\n    # Combine distance, savings, demand, and angle\n    combined_metric = normalized_distance * normalized_savings * demand_factor * angle_matrix\n\n    # Sparsify the matrix: Keep only a certain percentage of best edges for each node\n    sparsity_threshold = 0.7  # Percentage of values to zero out, range 0 to 1\n\n    for i in range(n):\n        row = combined_metric[i, :]\n        threshold = np.percentile(row, sparsity_threshold * 100)\n        for j in range(n):\n            if combined_metric[i, j] < threshold:\n                combined_metric[i, j] = 0\n            if i == j:\n                combined_metric[i, j] = 0\n\n    heuristics_matrix = combined_metric\n    return heuristics_matrix\n\n[Reflection]\nSavings, angles, and adaptive sparsification are beneficial. Explicitly penalize over-capacity edges more.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}