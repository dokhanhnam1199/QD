```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    This version incorporates savings, depot proximity, demand ratio, and adaptive sparsification.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    # Calculate savings matrix (Clarke-Wright Savings Algorithm)
    savings_matrix = np.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Node proximity to depot
    depot_proximity = np.zeros(n)
    for i in range(1, n):
        depot_proximity[i] = np.exp(-distance_matrix[0, i] / np.mean(distance_matrix[0, 1:]))  # Exponential decay for proximity
    depot_proximity[0] = 0  # Depot has no proximity to itself

    # Demand factor
    demand_factor = demands / capacity  # Ratio of demand to capacity. Smaller is generally better
    demand_factor = np.clip(demand_factor, 0, 1)  # Ensure demand factor is between 0 and 1

    # Angle factor
    angle_matrix = np.ones_like(distance_matrix)
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                vector_i_depot = coordinates[0] - coordinates[i]
                vector_i_j = coordinates[j] - coordinates[i]
                norm_i_depot = np.linalg.norm(vector_i_depot)
                norm_i_j = np.linalg.norm(vector_i_j)
                if norm_i_depot > 0 and norm_i_j > 0:
                    cos_angle = np.dot(vector_i_depot, vector_i_j) / (norm_i_depot * norm_i_j)
                    angle_matrix[i, j] = (1 + cos_angle) / 2  # Scale to [0, 1], higher is better (smaller angle)

    # Combine factors
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = (savings_matrix[i, j] + 1e-9) / (distance_matrix[i, j] + 1e-9)  # Avoid division by zero
                if i != 0 and j != 0:
                    heuristics_matrix[i, j] *= (1 + depot_proximity[i] * depot_proximity[j])
                    heuristics_matrix[i, j] /= (1 + demand_factor[i] + demand_factor[j])
                    heuristics_matrix[i, j] *= angle_matrix[i,j]

    # Sparsify the matrix: zero out edges that are too long (less promising)
    distance_threshold = np.mean(distance_matrix) * 1.5  # Reduce paths removed, more exploration
    heuristics_matrix[distance_matrix > distance_threshold] = 0.0

    # Normalize the heuristics matrix
    max_heuristic = np.max(heuristics_matrix)
    if max_heuristic > 0:
        heuristics_matrix = heuristics_matrix / max_heuristic

    return heuristics_matrix
```
