{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    A heuristic function for the Capacitated Vehicle Routing Problem (CVRP)\n    that combines several factors to estimate the promise of each edge.\n\n    Args:\n        distance_matrix (np.ndarray): A matrix of pairwise distances between nodes.\n        coordinates (np.ndarray): The (x, y) coordinates of each node.\n        demands (np.ndarray): The demand of each customer node.\n        capacity (int): The capacity of each vehicle.\n\n    Returns:\n        np.ndarray: A matrix of the same shape as distance_matrix, where each\n                      element represents the estimated promise of including the\n                      corresponding edge in a solution.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    promise = np.zeros_like(distance_matrix)\n\n    # Calculate savings (Clarke-Wright savings heuristic)\n    savings = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings[j, i] = savings[i, j]\n\n    # Incorporate demand considerations\n    demand_factor = np.ones((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                if demands[i] + demands[j] > capacity:\n                     demand_factor[i,j] = 0.1 # make very unpromising if demands are high\n                else:\n                    demand_factor[i,j] = 1\n\n    # Combine distance, savings, and demand considerations\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                promise[i, j] = (0.5 / distance_matrix[i, j] + 0.5 * savings[i, j] / np.max(savings)) * demand_factor[i,j]\n            else:\n                promise[i,j] = 0 # do not allow self-loops\n\n    # Sparsify the matrix (set unpromising elements to zero)\n    threshold = np.percentile(promise[promise > 0], 20)  # Only keep top 80% promising edges\n    promise[promise < threshold] = 0\n\n\n    # Ensure that each node has some connections available.\n    for i in range(1,n):\n        if np.sum(promise[i, 1:]) == 0:\n          indices = np.argsort(distance_matrix[i, 1:])[:3] # connect to 3 nearest neighbors.\n          for j in indices:\n            promise[i,j+1] = 0.5/distance_matrix[i,j+1] + 0.5 * savings[i, j+1] / np.max(savings) * demand_factor[i, j+1]\n\n        if np.sum(promise[1:, i]) == 0:\n          indices = np.argsort(distance_matrix[1:, i])[:3]\n          for j in indices:\n            promise[j+1, i] = 0.5/distance_matrix[j+1, i] + 0.5 * savings[j+1, i] / np.max(savings) * demand_factor[j+1, i]\n\n    return promise\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    Args:\n        distance_matrix: A distance matrix (shape: n by n).\n        coordinates: Euclidean coordinates of nodes (shape: n by 2).\n        demands: A vector of customer demands (shape: n).\n        capacity: The vehicle capacity.\n\n    Returns:\n        A matrix of the same shape as distance_matrix, indicating how promising it is to include each edge in a solution.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Parameters for tuning the heuristics\n    alpha = 1.0  # Weight for distance\n    beta = 1.0   # Weight for demand consideration\n    gamma = 0.5 # Weight for closeness to depot\n\n    # Calculate depot distances\n    depot_distances = distance_matrix[0, :]\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Distance factor: Shorter distances are more promising\n                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Adding a small constant to avoid division by zero\n\n                # Demand factor: Avoid edges that would likely lead to capacity violations early on\n                demand_factor = 1.0\n                if i != 0 and j !=0:\n                    demand_factor =  np.exp(-demands[i]/capacity) * np.exp(-demands[j]/capacity) # Penalize edges with high demand nodes\n\n                # Closeness to depot factor:\n                depot_factor = np.exp(-gamma * (depot_distances[i] + depot_distances[j])/np.max(depot_distances))\n\n\n                heuristic_matrix[i, j] = distance_factor**alpha * demand_factor**beta * depot_factor\n\n    # Sparsify the matrix: Keep only the most promising edges for each node\n    sparsity_threshold = 0.2 # Only keep the top 20% of edges\n    for i in range(n):\n        row = heuristic_matrix[i, :]\n        threshold = np.quantile(row[row > 0], 1 - sparsity_threshold)  # Ignore zero values when finding the quantile\n\n        heuristic_matrix[i, row < threshold] = 0  # Remove edges with low promise\n\n    return heuristic_matrix\n\n[Reflection]\nBetter code uses depot proximity, tunes weights, and sparsifies rows individually with a quantile threshold.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}