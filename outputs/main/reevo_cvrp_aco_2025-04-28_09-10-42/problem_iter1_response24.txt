```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristic function for the Capacitated Vehicle Routing Problem (CVRP)
    that combines several factors to estimate the promise of each edge.

    Args:
        distance_matrix (np.ndarray): A matrix of pairwise distances between nodes.
        coordinates (np.ndarray): The (x, y) coordinates of each node.
        demands (np.ndarray): The demand of each customer node.
        capacity (int): The capacity of each vehicle.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each
                      element represents the estimated promise of including the
                      corresponding edge in a solution.
    """
    n = distance_matrix.shape[0]
    promise = np.zeros_like(distance_matrix)

    # Calculate savings (Clarke-Wright savings heuristic)
    savings = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings[j, i] = savings[i, j]

    # Incorporate demand considerations
    demand_factor = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                if demands[i] + demands[j] > capacity:
                     demand_factor[i,j] = 0.1 # make very unpromising if demands are high
                else:
                    demand_factor[i,j] = 1

    # Combine distance, savings, and demand considerations
    for i in range(n):
        for j in range(n):
            if i != j:
                promise[i, j] = (0.5 / distance_matrix[i, j] + 0.5 * savings[i, j] / np.max(savings)) * demand_factor[i,j]
            else:
                promise[i,j] = 0 # do not allow self-loops

    # Sparsify the matrix (set unpromising elements to zero)
    threshold = np.percentile(promise[promise > 0], 20)  # Only keep top 80% promising edges
    promise[promise < threshold] = 0


    # Ensure that each node has some connections available.
    for i in range(1,n):
        if np.sum(promise[i, 1:]) == 0:
          indices = np.argsort(distance_matrix[i, 1:])[:3] # connect to 3 nearest neighbors.
          for j in indices:
            promise[i,j+1] = 0.5/distance_matrix[i,j+1] + 0.5 * savings[i, j+1] / np.max(savings) * demand_factor[i, j+1]

        if np.sum(promise[1:, i]) == 0:
          indices = np.argsort(distance_matrix[1:, i])[:3]
          for j in indices:
            promise[j+1, i] = 0.5/distance_matrix[j+1, i] + 0.5 * savings[j+1, i] / np.max(savings) * demand_factor[j+1, i]

    return promise
```
