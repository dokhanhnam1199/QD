```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:

    """
    Heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    This version incorporates savings, depot proximity, demand ratio, and adaptive sparsification.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate savings matrix (Clarke-Wright Savings Algorithm)
    savings_matrix = np.zeros_like(distance_matrix, dtype=float)
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Normalize distance matrix (inverse)
    normalized_distance = 1 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero
    normalized_distance = normalized_distance / np.max(normalized_distance)

    # Normalize savings matrix
    normalized_savings = savings_matrix / np.max(savings_matrix + 1e-6)

    # Demand factor: Penalize edges connecting nodes with high demands if they exceed capacity
    demand_factor = np.ones_like(distance_matrix, dtype=float)
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                if demands[i] + demands[j] > capacity:
                    demand_factor[i, j] = 0.1  # Significantly penalize

    # Angle factor
    angle_matrix = np.ones_like(distance_matrix)
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                vector_i_depot = coordinates[0] - coordinates[i]
                vector_i_j = coordinates[j] - coordinates[i]
                norm_i_depot = np.linalg.norm(vector_i_depot)
                norm_i_j = np.linalg.norm(vector_i_j)
                if norm_i_depot > 0 and norm_i_j > 0:
                    cos_angle = np.dot(vector_i_depot, vector_i_j) / (norm_i_depot * norm_i_j)
                    angle_matrix[i, j] = (1 + cos_angle) / 2  # Scale to [0, 1], higher is better (smaller angle)

    # Combine distance, savings, demand, and angle
    combined_metric = normalized_distance * normalized_savings * demand_factor * angle_matrix

    # Sparsify the matrix: Keep only a certain percentage of best edges for each node
    sparsity_threshold = 0.7  # Percentage of values to zero out, range 0 to 1

    for i in range(n):
        row = combined_metric[i, :]
        threshold = np.percentile(row, sparsity_threshold * 100)
        for j in range(n):
            if combined_metric[i, j] < threshold:
                combined_metric[i, j] = 0
            if i == j:
                combined_metric[i, j] = 0

    heuristics_matrix = combined_metric
    return heuristics_matrix
```
