{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    This version incorporates multiple factors to determine the desirability of including an edge\n    in a solution and sparsifies the matrix by setting unpromising elements to zero.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Vector of customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution\n                    (same shape as distance_matrix).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Parameters to tune the heuristic\n    alpha = 1.0   # Distance factor\n    beta = 0.5    # Demand factor\n    gamma = 0.2   # Angle factor\n    delta = 0.1   # Sparsity factor\n    epsilon = 0.01 # To avoid division by zero\n\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # No self-loops\n            else:\n                # Distance factor: inversely proportional to distance\n                distance_factor = 1 / (distance_matrix[i, j] + epsilon)\n\n                # Demand factor: considers the demands of the two nodes.  Avoids connecting two large demand nodes far from depot\n                demand_factor = np.exp(-beta * (demands[i] + demands[j]) / capacity)\n\n                # Angle factor: prefers edges that don't create sharp turns away from depot (node 0)\n                angle_factor = 1.0\n                if i != 0 and j != 0: # no penalty if connect depot to node i or connect node i to depot\n                    # vector from depot to i\n                    vec_di = coordinates[i] - coordinates[0]\n                    # vector from i to j\n                    vec_ij = coordinates[j] - coordinates[i]\n\n                    #cosine of the angle between the vectors. Dot Product and normalize\n                    dot_product = np.dot(vec_di, vec_ij)\n                    norm_di = np.linalg.norm(vec_di)\n                    norm_ij = np.linalg.norm(vec_ij)\n\n                    if norm_di > 0 and norm_ij > 0:\n                        cosine_angle = dot_product / (norm_di * norm_ij)\n                        #angle_factor = (1 + cosine_angle) / 2  # Scale cosine to [0, 1]\n                        angle_factor = np.clip(cosine_angle, 0, 1) #prefer direction away from depot\n\n\n                # Combine the factors\n                heuristic_matrix[i, j] = (alpha * distance_factor +\n                                           beta * demand_factor +\n                                           gamma * angle_factor)\n\n    # Sparsify the matrix: remove less promising edges based on a threshold\n    threshold = np.mean(heuristic_matrix) * delta  # Dynamic threshold based on mean\n    heuristic_matrix[heuristic_matrix < threshold] = 0.0\n\n\n    # Normalize heuristic values to be between 0 and 1. Not essential but can help with some sampling methods.\n    max_val = np.max(heuristic_matrix)\n    if max_val > 0:  # Avoid division by zero\n      heuristic_matrix = heuristic_matrix / max_val\n\n\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    This version incorporates several factors to assess the promise of including each edge\n    in a solution and sparsifies the matrix.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Vector of customer demands (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge (n x n).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    promise = np.zeros_like(distance_matrix, dtype=float)\n\n    # Heuristic factors:\n    # 1. Inverse Distance: Shorter distances are generally more promising.\n    inverse_distance = 1 / (distance_matrix + 1e-6)  # Add a small constant to avoid division by zero\n\n    # 2. Demand Consideration: Edges connecting nodes with high demands might be less promising\n    #    if they quickly exhaust vehicle capacity.  We penalize edges that connect to nodes\n    #    whose sum exceeds capacity by itself with other random nodes.\n\n    demand_penalty = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                demand_penalty[i, j] = 0\n                continue\n\n            # Estimate how likely exceeding the capacity if node i and j are visited sequentially.\n            # We compute the average demand and assume half the customer needs to be visited.\n\n            if demands[i] + demands[j] > capacity :\n                demand_penalty[i, j] = 0.1 # set to a small amount when demand exceeds alone\n            else:\n                demand_penalty[i, j] = 1\n\n    # 3. Angle to Depot: Edges that lead \"away\" from the depot might be less promising.\n    #    Calculate the angle between the edge (i, j) and the line connecting node i to the depot.\n\n    angle_factor = np.ones_like(distance_matrix, dtype=float)\n    depot_coord = coordinates[0]\n    for i in range(1, n):  # Skip depot\n        coord_i = coordinates[i]\n        for j in range(1, n):\n            if i == j:\n                angle_factor[i, j] = 0\n                continue\n\n            coord_j = coordinates[j]\n\n            # Calculate vectors\n            vec_i_depot = depot_coord - coord_i\n            vec_i_j = coord_j - coord_i\n\n            # Calculate dot product and magnitudes\n            dot_product = np.dot(vec_i_depot, vec_i_j)\n            magnitude_i_depot = np.linalg.norm(vec_i_depot)\n            magnitude_i_j = np.linalg.norm(vec_i_j)\n\n            # Calculate cosine of the angle\n            if magnitude_i_depot > 0 and magnitude_i_j > 0 :\n                 cos_angle = dot_product / (magnitude_i_depot * magnitude_i_j)\n                 # Angle in radians\n                 angle = np.arccos(np.clip(cos_angle, -1.0, 1.0))  # Clip to avoid NaN due to floating-point errors\n\n                 # Penalize edges with large angles (away from the depot)\n                 angle_factor[i, j] = 1 - (angle / np.pi)  # Normalize to [0, 1]\n\n            else:\n                 angle_factor[i,j] = 0 # angle not well-defined when points overlapping\n\n    # Combine the factors:\n    promise = inverse_distance * demand_penalty * angle_factor\n\n    # Sparsify the matrix:  Zero out edges that are unlikely to be in the optimal solution.\n    # Here, we keep only the top 'k' edges for each node.\n\n    k = 10  # Keep top k edges\n\n    for i in range(n):\n        row = promise[i, :].copy()  # Copy the row to avoid modifying while iterating\n        indices = np.argsort(row)[::-1]  # Indices sorted by promise in descending order\n        for j in range(n):\n            if j not in indices[:k]:\n                promise[i, j] = 0.0  # Zero out edges not in the top k\n\n    return promise\n\n[Reflection]\nPrioritize diversification, angle calculation, and demand considerations with adaptive sparsity for better CVRP heuristics.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}