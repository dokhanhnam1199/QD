{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    This version incorporates several factors to assess the promise of including each edge\n    in a solution, sparsifies the matrix, and refines demand/angle handling.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Vector of customer demands (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge (n x n).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    promise = np.zeros_like(distance_matrix, dtype=float)\n\n    # 1. Inverse Distance: Shorter distances are generally more promising.\n    inverse_distance = 1 / (distance_matrix + 1e-6)\n\n    # 2. Demand Consideration:\n    demand_penalty = np.ones_like(distance_matrix, dtype=float)\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                demand_penalty[i, j] = 0\n                continue\n\n            # A more refined estimate: Consider how much *remaining* capacity would be left\n            # after visiting i and j. If it's very low, penalize the edge.\n\n            remaining_capacity = capacity - demands[i] - demands[j]\n            if remaining_capacity < 0:\n              demand_penalty[i, j] = 0.1  # Strong penalty if immediate violation\n              continue\n            \n            # Estimate likelihood of exceeding capacity based on average demand\n            # of remaining customers. More aggressive penalty.\n            avg_demand_others = np.sum(demands[1:]) / (n - 1) if n > 1 else 0 # Exclude depot for average calculation\n\n            if remaining_capacity < avg_demand_others:\n                demand_penalty[i, j] = max(0.2, remaining_capacity / avg_demand_others)  # Scale penalty\n\n    # 3. Angle to Depot:\n    angle_factor = np.ones_like(distance_matrix, dtype=float)\n    depot_coord = coordinates[0]\n    for i in range(1, n):  # Skip depot\n        coord_i = coordinates[i]\n        for j in range(1, n):\n            if i == j:\n                angle_factor[i, j] = 0\n                continue\n\n            coord_j = coordinates[j]\n\n            # Vectors\n            vec_i_depot = depot_coord - coord_i\n            vec_i_j = coord_j - coord_i\n\n            # Dot product and magnitudes\n            dot_product = np.dot(vec_i_depot, vec_i_j)\n            magnitude_i_depot = np.linalg.norm(vec_i_depot)\n            magnitude_i_j = np.linalg.norm(vec_i_j)\n\n            if magnitude_i_depot > 0 and magnitude_i_j > 0:\n                cos_angle = dot_product / (magnitude_i_depot * magnitude_i_j)\n                angle = np.arccos(np.clip(cos_angle, -1.0, 1.0))\n\n                # More aggressive angle penalty.  Angles close to 90 degrees get less penalization.\n                angle_factor[i, j] = 1 - (angle / (np.pi/2)) if angle < (np.pi/2) else 0\n            else:\n                angle_factor[i, j] = 0  # Handle overlapping points\n\n    # Combine the factors:\n    promise = inverse_distance * demand_penalty * angle_factor\n\n    # Sparsify:\n    k = 10\n\n    for i in range(n):\n        row = promise[i, :].copy()\n        indices = np.argsort(row)[::-1]\n        for j in range(n):\n            if j not in indices[:k]:\n                promise[i, j] = 0.0\n\n    return promise\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n\n    \"\"\"\n    Heuristics for CVRP based on distance, demand, and angle considerations.\n\n    Args:\n        distance_matrix: Distance matrix between nodes.\n        coordinates: Coordinates of the nodes.\n        demands: Demand of each node.\n        capacity: Vehicle capacity.\n\n    Returns:\n        A matrix indicating the desirability of each edge.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros((n, n))\n\n    # Parameters to control the influence of each factor\n    alpha = 1.0   # Weight for distance\n    beta = 0.5    # Weight for demand\n    gamma = 0.2   # Weight for angle\n\n    # Normalize demand to [0, 1]\n    normalized_demands = demands / capacity\n\n    # Calculate angles between nodes relative to the depot\n    depot_x, depot_y = coordinates[0]\n    angles = np.zeros(n)\n    for i in range(1, n):\n        x, y = coordinates[i]\n        angles[i] = np.arctan2(y - depot_y, x - depot_x)\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Distance factor: shorter distance is better\n                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Adding a small constant to avoid division by zero\n\n                # Demand factor: Prefer edges connecting nodes with high demand (scaled down)\n                demand_factor = (normalized_demands[i] + normalized_demands[j])\n\n                # Angle factor: Penalize sharp turns relative to the depot.  Smaller angle difference is better\n                angle_diff = np.abs(angles[i] - angles[j])\n                angle_factor = np.exp(-angle_diff)  # Use exponential decay for angle difference\n\n\n                # Combine the factors\n                heuristics_matrix[i, j] = (alpha * distance_factor +\n                                           beta * demand_factor +\n                                           gamma * angle_factor)\n\n    # Sparsify the matrix: Keep only top k connections per node\n    k = int(np.sqrt(n))  # Number of connections to keep.  Dynamically scale based on the size of the graph\n\n    for i in range(n):\n        row = heuristics_matrix[i, :]\n        indices = np.argsort(row)[-k:]  # Indices of the top k values\n        mask = np.ones(n, dtype=bool)\n        mask[indices] = False\n        heuristics_matrix[i, mask] = 0  # Set non-top-k elements to zero\n\n    return heuristics_matrix\n\n[Reflection]\nPrioritize normalization, weighted combination of factors, and dynamic sparsification for better heuristics.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}