{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n    This version prioritizes depot proximity and demand, sparsifies based on distance, and fine-tunes weights.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros_like(distance_matrix)\n\n    # Calculate savings matrix (Clarke-Wright Savings Algorithm)\n    savings_matrix = np.zeros_like(distance_matrix)\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Depot proximity: closer is better\n    depot_proximity = np.zeros(n)\n    for i in range(1, n):\n        depot_proximity[i] = 1 / (distance_matrix[0, i] + 1e-9)  # Avoid division by zero\n\n    depot_proximity /= np.max(depot_proximity)\n\n    # Demand factor: smaller is better\n    demand_factor = demands / capacity  # Ratio of demand to capacity\n    demand_factor = np.clip(demand_factor, 0, 1)  # Cap at 1\n\n    # Combine factors\n    alpha = 0.6  # Weight for savings\n    beta = 0.3  # Weight for depot proximity and demand\n    gamma = 0.1 # Weight for inverse distance\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                inverse_distance = 1 / (distance_matrix[i, j] + 1e-9)\n                # Primary factor: savings\n                heuristics_matrix[i, j] = alpha * savings_matrix[i, j]\n\n                # Secondary factors: depot proximity and demand. Only apply to customers (not depot).\n                if i != 0 and j != 0:\n                    heuristics_matrix[i, j] += beta * (depot_proximity[i] + depot_proximity[j]) / (1 + demand_factor[i] + demand_factor[j])\n\n                heuristics_matrix[i,j] += gamma * inverse_distance\n\n\n    # Sparsify based on distance: zero out edges that are too long (less promising)\n    distance_threshold = np.mean(distance_matrix) * 1.2  # Adjusted threshold\n    heuristics_matrix[distance_matrix > distance_threshold] = 0.0\n\n    # Normalize the heuristics matrix to [0, 1]\n    max_heuristic = np.max(heuristics_matrix)\n    if max_heuristic > 0:\n        heuristics_matrix = heuristics_matrix / max_heuristic\n\n    return heuristics_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n\n    \"\"\"\n    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n    This version incorporates depot proximity, demand ratio, targeted sparsification, and a more refined edge scoring mechanism.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Vector of customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate savings matrix (Clarke-Wright Savings Algorithm)\n    savings_matrix = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Depot proximity: Closer is better.  Invert distance and normalize\n    depot_proximity = np.zeros(n)\n    for i in range(1, n):\n        depot_proximity[i] = 1 / (distance_matrix[0, i] + 1e-9)\n    depot_proximity /= np.max(depot_proximity)\n\n    # Demand ratio:  Demand relative to vehicle capacity. Smaller is better.\n    demand_ratio = demands / capacity\n\n    # Heuristic combination\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Base heuristic: savings / distance, avoid division by zero\n                heuristics_matrix[i, j] = savings_matrix[i, j] / (distance_matrix[i, j] + 1e-9) if distance_matrix[i,j] > 0 else 0\n\n                # Adjust for depot proximity and demand ratio, exclude depot itself\n                if i != 0 and j != 0:\n                    heuristics_matrix[i, j] *= (1 + depot_proximity[i] + depot_proximity[j])\n                    heuristics_matrix[i, j] /= (1 + demand_ratio[i] + demand_ratio[j])\n\n                # Add a small bonus for connecting to the depot, especially for high demand nodes\n                if i == 0 or j == 0:\n                    other_node = j if i == 0 else i\n                    heuristics_matrix[i, j] += 0.1 * (1 - demand_ratio[other_node])  # Encourages depot connections for nodes with lower relative demand\n\n    # Sparsification based on distance: Remove long edges\n    distance_threshold = np.mean(distance_matrix) * 1.2\n    heuristics_matrix[distance_matrix > distance_threshold] = 0.0\n\n    # Sparsification based on heuristics score: Keep top edges per node\n    sparsity_level = 0.15\n    for i in range(n):\n        row = heuristics_matrix[i, :].copy()\n        indices = np.argsort(row)[::-1]\n        threshold_index = int(n * sparsity_level)\n        mask = np.ones(n, dtype=bool)\n        mask[indices[:threshold_index]] = False  # Only keep top edges\n        heuristics_matrix[i, mask] = 0.0\n\n    # Normalize the heuristics matrix\n    max_heuristic = np.max(heuristics_matrix)\n    if max_heuristic > 0:\n        heuristics_matrix = heuristics_matrix / max_heuristic\n\n    return heuristics_matrix\n\n[Reflection]\nCombine savings/distance, depot proximity, and demand ratio. Sparsify by distance and top edges per node.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}