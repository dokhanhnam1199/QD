{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n    This version prioritizes diversification and angle calculations, and avoids normalization.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros_like(distance_matrix)\n\n    # Savings calculation (Clarke-Wright Savings Algorithm)\n    savings_matrix = np.zeros_like(distance_matrix)\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Depot proximity (inverse distance)\n    depot_proximity = np.zeros(n)\n    for i in range(1, n):\n        depot_proximity[i] = 1 / (distance_matrix[0, i] + 1e-6)  # Add small constant to avoid division by zero\n\n    # Demand ratio (demand / capacity)\n    demand_ratio = demands / capacity\n\n    # Angle calculation (between node i, depot, and node j)\n    angle_matrix = np.zeros_like(distance_matrix)\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            # Vectors from depot to nodes i and j\n            vector_i = coordinates[i] - coordinates[0]\n            vector_j = coordinates[j] - coordinates[0]\n\n            # Calculate dot product and magnitudes\n            dot_product = np.dot(vector_i, vector_j)\n            magnitude_i = np.linalg.norm(vector_i)\n            magnitude_j = np.linalg.norm(vector_j)\n\n            # Calculate angle (in radians)\n            if magnitude_i > 0 and magnitude_j > 0:\n                angle = np.arccos(dot_product / (magnitude_i * magnitude_j + 1e-6)) #prevent zero division\n                angle_matrix[i, j] = angle\n                angle_matrix[j, i] = angle\n            else:\n                angle_matrix[i, j] = 0\n                angle_matrix[j, i] = 0\n\n    # Combine factors (additively)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristics_matrix[i, j] = (\n                    savings_matrix[i, j]\n                    - distance_matrix[i, j]\n                    + 0.5 * (depot_proximity[i] + depot_proximity[j])\n                    - 0.5 * (demand_ratio[i] + demand_ratio[j])\n                    - 0.1 * angle_matrix[i, j] # Penalize larger angles for diversification\n                )\n\n    # Adaptive Sparsification (based on distance)\n    distance_threshold = np.quantile(distance_matrix[distance_matrix > 0], 0.75) # Keep only 75% shortest edges\n\n    heuristics_matrix[distance_matrix > distance_threshold] = -1e9 #very negative values\n\n    return heuristics_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n    Improved version with sparsification and combined factors.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Savings calculation\n    savings_matrix = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Depot proximity (inverse distance)\n    depot_proximity = np.zeros(n, dtype=float)\n    for i in range(1, n):\n        depot_proximity[i] = 1.0 / distance_matrix[0, i]\n\n    # Demand ratio\n    demand_ratio = demands / capacity\n\n    # Angle calculation (diversification)\n    angle_matrix = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            vector_i = coordinates[i] - coordinates[0]\n            vector_j = coordinates[j] - coordinates[0]\n            norm_i = np.linalg.norm(vector_i)\n            norm_j = np.linalg.norm(vector_j)\n            if norm_i > 0 and norm_j > 0:\n                dot_product = np.dot(vector_i, vector_j)\n                cosine_angle = dot_product / (norm_i * norm_j)\n                angle = np.arccos(np.clip(cosine_angle, -1.0, 1.0))\n                angle_matrix[i, j] = angle\n                angle_matrix[j, i] = angle\n\n    # Combine factors (additive combination)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristics_matrix[i, j] = (\n                    savings_matrix[i, j]\n                    - distance_matrix[i, j]  # Subtract distance directly\n                    + 0.5 * depot_proximity[i] + 0.5 * depot_proximity[j] #Favoring edges closer to depot\n                    - 2* demand_ratio[i] - 2* demand_ratio[j] # penalize large demand\n                    + 0.1 * (np.pi - angle_matrix[i, j]) # Favor larger angles\n                )\n\n    # Sparsification (adaptive based on quantile)\n    quantile_threshold = np.quantile(heuristics_matrix[heuristics_matrix > 0], 0.25)  # 25th quantile\n    heuristics_matrix[heuristics_matrix < quantile_threshold] = 0.0\n    heuristics_matrix[distance_matrix > np.mean(distance_matrix) * 2] = 0.0  # remove paths too long\n\n    return heuristics_matrix\n\n[Reflection]\nBetter code: Normalization, harsher demand penalty, angle favoring, adaptive sparsification based on heuristic values.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}