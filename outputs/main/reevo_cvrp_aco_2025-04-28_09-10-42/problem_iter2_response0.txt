```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version incorporates several factors to assess the promise of including each edge
    in a solution, sparsifies the matrix, and refines demand/angle handling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Vector of customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge (n x n).
    """

    n = distance_matrix.shape[0]
    promise = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance: Shorter distances are generally more promising.
    inverse_distance = 1 / (distance_matrix + 1e-6)

    # 2. Demand Consideration:
    demand_penalty = np.ones_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_penalty[i, j] = 0
                continue

            # A more refined estimate: Consider how much *remaining* capacity would be left
            # after visiting i and j. If it's very low, penalize the edge.

            remaining_capacity = capacity - demands[i] - demands[j]
            if remaining_capacity < 0:
              demand_penalty[i, j] = 0.1  # Strong penalty if immediate violation
              continue
            
            # Estimate likelihood of exceeding capacity based on average demand
            # of remaining customers. More aggressive penalty.
            avg_demand_others = np.sum(demands[1:]) / (n - 1) if n > 1 else 0 # Exclude depot for average calculation

            if remaining_capacity < avg_demand_others:
                demand_penalty[i, j] = max(0.2, remaining_capacity / avg_demand_others)  # Scale penalty

    # 3. Angle to Depot:
    angle_factor = np.ones_like(distance_matrix, dtype=float)
    depot_coord = coordinates[0]
    for i in range(1, n):  # Skip depot
        coord_i = coordinates[i]
        for j in range(1, n):
            if i == j:
                angle_factor[i, j] = 0
                continue

            coord_j = coordinates[j]

            # Vectors
            vec_i_depot = depot_coord - coord_i
            vec_i_j = coord_j - coord_i

            # Dot product and magnitudes
            dot_product = np.dot(vec_i_depot, vec_i_j)
            magnitude_i_depot = np.linalg.norm(vec_i_depot)
            magnitude_i_j = np.linalg.norm(vec_i_j)

            if magnitude_i_depot > 0 and magnitude_i_j > 0:
                cos_angle = dot_product / (magnitude_i_depot * magnitude_i_j)
                angle = np.arccos(np.clip(cos_angle, -1.0, 1.0))

                # More aggressive angle penalty.  Angles close to 90 degrees get less penalization.
                angle_factor[i, j] = 1 - (angle / (np.pi/2)) if angle < (np.pi/2) else 0
            else:
                angle_factor[i, j] = 0  # Handle overlapping points

    # Combine the factors:
    promise = inverse_distance * demand_penalty * angle_factor

    # Sparsify:
    k = 10

    for i in range(n):
        row = promise[i, :].copy()
        indices = np.argsort(row)[::-1]
        for j in range(n):
            if j not in indices[:k]:
                promise[i, j] = 0.0

    return promise
```
