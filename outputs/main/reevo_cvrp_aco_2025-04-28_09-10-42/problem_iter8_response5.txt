```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    This version incorporates savings, depot proximity, demand ratios, and adaptive distance thresholds for better edge prioritization.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    # Calculate savings matrix (Clarke-Wright Savings Algorithm)
    savings_matrix = np.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Depot proximity - inverse distance to depot, normalized
    depot_proximity = np.zeros(n)
    for i in range(1, n):
        depot_proximity[i] = 1 / (distance_matrix[0, i] + 1e-9)  # Closer is better; avoid division by zero
    depot_proximity = depot_proximity / np.max(depot_proximity) # Normalize proximity

    # Demand factor - ratio of demand to capacity
    demand_factor = demands / capacity  # Ratio of demand to capacity. Smaller is generally better
    demand_factor = np.clip(demand_factor, 0, 1)

    # Edge demand: combined demand of both nodes
    edge_demand = np.zeros_like(distance_matrix)
    for i in range(1,n):
      for j in range(1,n):
        if i != j:
          edge_demand[i,j] = demand_factor[i] + demand_factor[j]


    # Combine factors to create the heuristics matrix
    for i in range(n):
        for j in range(n):
            if i != j:
                # Primary factor: savings
                heuristics_matrix[i, j] = savings_matrix[i, j]

                # Secondary factors: depot proximity and demand. Do not consider depot proximity for depot itself.
                proximity_factor = 1.0
                if i != 0 and j != 0:
                    proximity_factor = (0.5 + depot_proximity[i] * depot_proximity[j])

                demand_penalty = 1.0
                if i != 0 and j != 0:
                    demand_penalty = (1 + edge_demand[i,j])  # Use the edge demand directly

                # Distance penalty. Further distances are less attractive
                distance_penalty = (distance_matrix[i, j] + 1e-9)

                heuristics_matrix[i, j] = heuristics_matrix[i, j] * proximity_factor / (demand_penalty * distance_penalty)

    # Sparsify the matrix: zero out edges that are too long (less promising)
    # Adaptive distance threshold based on demand
    mean_distance = np.mean(distance_matrix)
    distance_threshold = mean_distance * (1.5 + np.mean(edge_demand)) # Increased influence of edge_demand
    heuristics_matrix[distance_matrix > distance_threshold] = 0.0

    # Normalize the heuristics matrix
    max_heuristic = np.max(heuristics_matrix)
    if max_heuristic > 0:
        heuristics_matrix = heuristics_matrix / max_heuristic

    return heuristics_matrix
```
