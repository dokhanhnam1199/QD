```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP)
    via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge
                  in a solution (same shape as distance_matrix).
    """

    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Calculate savings for each pair of nodes
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Calculate normalized demand
    normalized_demands = demands / np.sum(demands)

    # Combine factors to determine the promise of each edge
    for i in range(n):
        for j in range(n):
            if i != j:
                # Factor 1: Inverse distance
                factor_distance = 1 / (distance_matrix[i, j] + 1e-6)  # Adding a small constant to avoid division by zero

                # Factor 2: Savings
                factor_savings = savings_matrix[i, j]

                # Factor 3: Demand consideration
                factor_demand = 1 - (normalized_demands[i] + normalized_demands[j])  # Edges connecting large demand nodes penalized
                factor_demand = max(0, factor_demand)

                # Factor 4: Closeness to depot (helps early diversification from the depot)
                factor_depot_proximity = 1/(min(distance_matrix[0,i],distance_matrix[0,j])+1e-6)


                heuristics_matrix[i, j] = factor_distance * (0.5 * factor_savings + 0.3 * factor_demand + 0.2 * factor_depot_proximity)  # Weighted combination


    # Sparsify the matrix (keep only top K edges for each node)

    K = int(np.sqrt(n))  # Number of edges to keep per node, dynamically adjusted based on problem size

    for i in range(n):
        row = heuristics_matrix[i, :].copy()
        indices = np.argsort(row)[::-1]  # Indices sorted by heuristic value in descending order
        
        # Zero out all but the top K edges
        heuristics_matrix[i, :] = 0
        heuristics_matrix[i, indices[:K]] = row[indices[:K]]  # Restore the values for the top K indices

    return heuristics_matrix
```
