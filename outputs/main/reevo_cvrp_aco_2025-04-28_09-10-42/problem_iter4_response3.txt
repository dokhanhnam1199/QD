```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    Prioritizes proximity and demand jointly. Sparsifies adaptively using percentiles for better edge selection.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """

    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Proximity factor based on Euclidean distance
    proximity_matrix = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                euclidean_distance = np.linalg.norm(coordinates[i] - coordinates[j])
                proximity_matrix[i, j] = 1 / (euclidean_distance + 1e-6)  # Avoid division by zero

    # Demand factor
    demand_matrix = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                demand_cost = demands[i] + demands[j]
                if i == 0 or j == 0: #depot
                    demand_cost = max(demands[i], demands[j]) #Only consider outgoing/incoming demand. Set to zero if depot.

                demand_matrix[i, j] = 1 / (demand_cost + 1e-6) if demand_cost <= 2*capacity else 0 #Ensure that demand costs does not exceed vehicle capacity.

    # Combine proximity and demand factors
    heuristics_matrix = proximity_matrix * demand_matrix

    # Sparsify the matrix adaptively
    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 50)  #adaptive threshold
    heuristics_matrix[heuristics_matrix < threshold] = 0


    return heuristics_matrix
```
