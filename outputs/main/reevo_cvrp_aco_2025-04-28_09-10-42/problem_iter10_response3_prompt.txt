{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n\n    \"\"\"\n    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n    This version prioritizes savings and inverse distance, simplifies depot proximity, and adjusts the sparsification threshold.\n    It also incorporates adaptive sparsification based on percentile cutoffs. And normalizes the heuristic matrix.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros_like(distance_matrix)\n\n    # Calculate savings matrix (Clarke-Wright Savings Algorithm)\n    savings_matrix = np.zeros_like(distance_matrix)\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Demand factor\n    demand_factor = demands / capacity  # Ratio of demand to capacity. Smaller is generally better\n    demand_factor = np.clip(demand_factor, 0, 1)\n\n    # Depot proximity factor (prioritize connections to the depot)\n    depot_proximity = np.zeros_like(distance_matrix)\n    for i in range(1,n):\n        depot_proximity[0, i] = 1 / (distance_matrix[0, i] + 1e-9)\n        depot_proximity[i, 0] = depot_proximity[0, i]\n\n\n    # Combine factors\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Primary factors: savings and inverse distance\n                heuristics_matrix[i, j] = savings_matrix[i, j] / (distance_matrix[i, j] + 1e-9) #avoid division by zero\n\n                #Penalize high demand edges\n                heuristics_matrix[i, j] /= (1 + demand_factor[i] + demand_factor[j])\n\n                #Incorporate depot proximity\n                heuristics_matrix[i,j] += depot_proximity[i,j]\n\n\n\n    # Adaptive sparsification based on heuristic values and percentile cutoff\n    heuristic_values = heuristics_matrix[np.triu_indices_from(heuristics_matrix, k=1)]  # Upper triangle values\n    cutoff_percentile = 40  # dynamically adjusted.\n    cutoff_value = np.percentile(heuristic_values, cutoff_percentile)\n    heuristics_matrix[heuristics_matrix < cutoff_value] = 0.0\n\n    # Further sparsification based on distance\n    distance_threshold = np.mean(distance_matrix) * 1.2  # Reduced threshold\n    heuristics_matrix[distance_matrix > distance_threshold] = 0.0\n\n    # Normalize the heuristics matrix\n    max_heuristic = np.max(heuristics_matrix)\n    if max_heuristic > 0:\n        heuristics_matrix = heuristics_matrix / max_heuristic\n\n    return heuristics_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n    This version prioritizes depot proximity and demand when selecting edges. Implements targeted, adaptive sparsification\n    based on distance and heuristic scores. Normalizes inputs effectively and fine-tunes weights via experimentation\n    for optimal performance.\n    The depot node is indexed by 0.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros_like(distance_matrix)\n\n    # Savings calculation (Clarke-Wright)\n    savings_matrix = np.zeros_like(distance_matrix)\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]\n\n    # Demand factor (normalized)\n    demand_factor = demands / capacity\n    demand_factor = np.clip(demand_factor, 0, 1)\n\n    # Depot proximity factor (inverse distance to depot)\n    depot_proximity = np.zeros(n)\n    for i in range(1, n):  # Exclude depot itself\n        depot_proximity[i] = 1 / (distance_matrix[0, i] + 1e-9)  # Avoid division by zero\n    depot_proximity = depot_proximity / np.max(depot_proximity) if np.max(depot_proximity) > 0 else np.zeros(n)\n\n    # Combine factors\n    alpha, beta, gamma = 0.5, 0.3, 0.2  # Tunable weights\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristic_value = (\n                    alpha * (savings_matrix[i, j] / (distance_matrix[i, j] + 1e-9))\n                    - beta * (demand_factor[i] + demand_factor[j])\n                    + gamma * (depot_proximity[i] + depot_proximity[j])\n                )\n                heuristics_matrix[i, j] = heuristic_value\n\n    # Adaptive Sparsification\n    heuristic_values = heuristics_matrix[np.triu_indices_from(heuristics_matrix, k=1)]\n    cutoff_percentile = 40 # Adjusted percentile\n    cutoff_value = np.percentile(heuristic_values, cutoff_percentile)\n    heuristics_matrix[heuristics_matrix < cutoff_value] = 0.0\n\n    distance_threshold = np.mean(distance_matrix) * 1.2 # Adjusted threshold\n    heuristics_matrix[distance_matrix > distance_threshold] = 0.0\n\n    # Normalization\n    max_heuristic = np.max(heuristics_matrix)\n    if max_heuristic > 0:\n        heuristics_matrix = heuristics_matrix / max_heuristic\n\n    return heuristics_matrix\n\n[Reflection]\nPrioritize depot proximity and balance factor weights; normalize inputs; adaptively sparsify.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}