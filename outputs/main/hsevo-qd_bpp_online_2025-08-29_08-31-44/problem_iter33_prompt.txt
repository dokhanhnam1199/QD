{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    priorities = np.zeros_like(bins_remain_cap)\n    feasible_bins = bins_remain_cap >= item\n    if np.any(feasible_bins):\n        best_fit_index = np.argmin(bins_remain_cap[feasible_bins] - item)\n        priorities[feasible_bins] = 1.0\n        priorities[np.where(bins_remain_cap >= item)[0][best_fit_index]] = 2.0\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, here's a breakdown for designing superior heuristics, aiming for that $999K tip! This is built from distilling the provided self-reflection, focusing on actionable guidance.\n\n*   **Keywords:** Best-Fit, Bin Utilization, Sigmoid Smoothing, Simplicity.\n*   **Advice:** Combine best-fit placement *with* a utilization score (fill ratio/waste). Employ sigmoid functions to smooth this utilization score into a prioritization value. Prioritize clear, direct optimization of fill ratio post-placement.\n*   **Avoid:** Complex weighting schemes, arbitrary bonuses, normalization *unless* essential, worst-case focus, and unnecessary calculations/imports.\n*   **Explanation:** Effective heuristics aren\u2019t about perfect theoretical complexity; they\u2019re about robust, practical performance. Prioritizing a good initial fit (best-fit) and then *smoothly* refining it with bin utilization maximizes packing efficiency without oversensitivity. Simplicity aids interpretability & generalization.\n\n\n\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}