```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    priorities = np.zeros_like(bins_remain_cap)
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return priorities

    sorted_indices = np.argsort(bins_remain_cap[feasible_bins])
    best_fit_index = sorted_indices[0]
    best_fit_bin_index = np.where(feasible_bins)[0][best_fit_index]

    priorities[feasible_bins] = 1.0
    priorities[best_fit_bin_index] = 2.0

    second_best_index = sorted_indices[1] if len(sorted_indices) > 1 else None
    if second_best_index is not None:
        second_best_bin_index = np.where(feasible_bins)[0][second_best_index]
        priorities[second_best_bin_index] = 1.5

    remaining_capacity_diff = bins_remain_cap[feasible_bins] - item
    
    random_factor = np.random.rand(len(remaining_capacity_diff))
    priorities[feasible_bins] += 0.1 * random_factor

    return priorities
```
