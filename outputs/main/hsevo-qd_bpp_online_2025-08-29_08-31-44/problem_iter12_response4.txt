```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return priorities
    
    fit_score = 1.0 / (bins_remain_cap[feasible_bins] - item + 1e-6)
    
    utilization_score = bins_remain_cap[feasible_bins] / np.max(bins_remain_cap)
    
    waste_score = (bins_remain_cap[feasible_bins] - item) / np.max(bins_remain_cap)

    
    
    combined_score = (0.5 * fit_score) + (0.3 * utilization_score) + (0.2 * waste_score)
    
    priorities[feasible_bins] = combined_score
    
    best_bin_index = np.argmax(priorities)
    
    if best_bin_index < n_bins:
        priorities[best_bin_index] += 0.5
        
    return priorities
```
