{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    priorities = np.zeros_like(bins_remain_cap)\n    feasible_bins = bins_remain_cap >= item\n    if np.any(feasible_bins):\n        best_fit_index = np.argmin(bins_remain_cap[feasible_bins] - item)\n        priorities[feasible_bins] = 1.0\n        priorities[np.where(bins_remain_cap >= item)[0][best_fit_index]] = 2.0\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's refine \"Current Self-Reflection\" into actionable heuristic design principles. Here's a response aimed at maximizing that $999K tip, built step-by-step from the provided text:\n\n* **Keywords:** Waste Minimization, Sigmoid Smoothing, Best-Fit/Utilization Balance, Valid Solutions.\n* **Advice:** Combine best-fit *with* fill ratio scoring, using sigmoids to smoothly prioritize. Dynamically adjust scoring based on item size/bin capacity \u2013 avoid fixed weights. Always validate bin feasibility!\n* **Avoid:** Arbitrary weights/bonuses, reciprocal-only waste calculations, worst-case focus, unnecessary normalization, & complex scoring.\n* **Explanation:** The core is *efficient space use*. Sigmoids offer robust prioritization, but clarity on the underlying waste minimization objective is paramount. Focus on valid, practical solutions, not theoretical extremes.\n\n\n\n**Reasoning for this response (Step-by-Step):**\n\n1. **Core Goal Extraction:** The text repeatedly emphasizes *minimizing waste* in bin packing. This is our central objective.\n2. **Successful Techniques:**  Best-fit combined with utilization (fill ratio) emerges as the strongest approach. Sigmoids consistently appear as a *good* smoothing/normalization method.\n3. **Pitfalls Identification:** A huge amount of text details *what doesn't work*: arbitrary weights, simplistic metrics (pure reciprocal waste), overcomplexity, and focusing on unlikely worst-case scenarios.\n4. **Concise Formulation:**  I distilled these into four bullet points that are immediately useful for a heuristic designer.  The advice is practical (\"do this...\") and the avoidance section is direct (\"don't do this...\").\n5. **Explanation Rationale:** The explanation ties everything back to the core objective and reinforces *why* the advice is sound.\n\n\n\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}