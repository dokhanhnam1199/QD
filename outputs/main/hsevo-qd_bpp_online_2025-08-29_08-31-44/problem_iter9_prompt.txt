{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    priorities = np.zeros_like(bins_remain_cap)\n    feasible_bins = bins_remain_cap >= item\n    if np.any(feasible_bins):\n        best_fit_index = np.argmin(bins_remain_cap[feasible_bins] - item)\n        priorities[feasible_bins] = 1.0\n        priorities[np.where(bins_remain_cap >= item)[0][best_fit_index]] = 2.0\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's refine \"Current Self-Reflection\" into actionable advice for designing superior heuristics, especially focusing on avoiding the pitfalls of \"Ineffective Self-Reflection.\" Here\u2019s a breakdown, aiming for that $999K tip!\n\n**Step-by-Step Thought Process:**\n\nThe core insight is *smooth, adaptive prioritization* based on quantifiable \"goodness of fit\" \u2013 balancing immediate placement with long-term bin utilization.  We want to move *away* from rigid rules and towards continuous evaluation.  The provided text explicitly warns against arbitrary weights and over-complication.  The emphasis on valid bins and fallback mechanisms points to the importance of robustness.\n\n**Refined Self-Reflection & Heuristic Design Advice:**\n\n*   **Keywords:** Smooth Prioritization, Fill Ratio, Adaptive Scaling, Robustness\n*   **Advice:** Design heuristics using continuous functions (e.g., sigmoid) to prioritize items based on fit *and* remaining bin capacity.  Dynamically adjust prioritization; don't use static weights.\n*   **Avoid:** Discrete priority levels, arbitrary weighting, worst-case scenario focus, neglecting bin validity, complex exploration bonuses.\n*   **Explanation:**  Continuous functions create a smoother search space, enabling adaptation to varying problem instances. Valid bin checks & fallbacks guarantee solution feasibility & avoid errors, improving heuristic reliability.\n\n\n\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}