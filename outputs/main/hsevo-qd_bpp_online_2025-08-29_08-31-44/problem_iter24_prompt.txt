{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    priorities = np.zeros_like(bins_remain_cap)\n    feasible_bins = bins_remain_cap >= item\n    if np.any(feasible_bins):\n        best_fit_index = np.argmin(bins_remain_cap[feasible_bins] - item)\n        priorities[feasible_bins] = 1.0\n        priorities[np.where(bins_remain_cap >= item)[0][best_fit_index]] = 2.0\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, here's a breakdown to redefine \"Current Self-Reflection\" for superior heuristic design, aiming for that $999K tip!\n\n* **Keywords:** Simplicity, Smoothness, Utilization, Best-Fit.\n* **Advice:** Focus on combining best-fit *with* a utilization score (bin fill ratio). Use sigmoid functions to *smooth* the resulting priorities\u2014this avoids harsh jumps. Prioritize clear, explainable weighting.\n* **Avoid:** Complex calculations, arbitrary weights, reciprocal calculations (unless *very* carefully considered), and normalization if avoidable. Don\u2019t chase worst-case performance.\n* **Explanation:** Effective heuristics aren\u2019t about perfect solutions, but *consistently good* ones. Smooth prioritization via sigmoids, built on a solid best-fit/utilization foundation, delivers robust, understandable results.\n\n\n\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}