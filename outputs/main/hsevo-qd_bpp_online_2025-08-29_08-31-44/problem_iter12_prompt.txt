{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    priorities = np.zeros_like(bins_remain_cap)\n    feasible_bins = bins_remain_cap >= item\n    if np.any(feasible_bins):\n        best_fit_index = np.argmin(bins_remain_cap[feasible_bins] - item)\n        priorities[feasible_bins] = 1.0\n        priorities[np.where(bins_remain_cap >= item)[0][best_fit_index]] = 2.0\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's refine \"Current Self-Reflection\" into actionable advice for heuristic design, targeting that $999K! Here's a breakdown, focusing on *why* things work (or don't) in optimization, and geared towards building genuinely superior heuristics:\n\n*   **Keywords:** Dynamic Prioritization, Multi-objective Optimization, Smooth Functions, Constraint Validation.\n*   **Advice:** Design heuristics with *adaptable* scoring. Combine metrics (fit, utilization, waste) using smooth, normalizing functions (sigmoids are excellent) allowing relative importance to shift based on problem state.\n*   **Avoid:** Static weights, reciprocal-only approaches, and focusing solely on worst-case performance. Also, bypass overly complex 'exploration' terms; simplicity often wins.\n*   **Explanation:** Effective heuristics aren\u2019t about finding *the* best immediate solution, but *consistently good* solutions. Smooth prioritization prevents getting stuck in local optima while ensuring feasible placements. Validate constraints *always*.\n\n\n\n**Step-by-step thought process behind this:**\n\n1.  **Distilled Core Idea:** Both texts emphasize balancing immediate fit with long-term efficiency (bin utilization/waste). This is a classic exploitation-exploration trade-off.\n2.  **Smoothness is Key:**  The repeated emphasis on sigmoids isn't arbitrary. Discontinuous functions create abrupt shifts in behavior, hindering exploration. Smoothness = gradual adaptation.\n3.  **Multi-Objective is Necessary:** Bin packing *is* inherently multi-objective. Focusing on a single metric (like just waste) is almost guaranteed to fail.\n4.  **Constraint Handling:**  A heuristic that generates invalid solutions is worse than a simple one. Constraint validation is non-negotiable.\n5. **Dynamic Prioritization:** The ideal balance between different metrics (fit, waste, utilization) changes as the problem evolves. The weights/priorities should adapt.\n\n\n\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}