```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit with a smoothed prioritization based on bin utilization."""
    priorities = np.zeros_like(bins_remain_cap)
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return priorities

    bin_utilizations = bins_remain_cap[feasible_bins] / bins_remain_cap.max()
    scores = 1.0 / (1.0 + np.exp(-5 * (bin_utilizations - 0.5)))
    priorities[feasible_bins] = scores

    best_fit_index = np.argmin(bins_remain_cap[feasible_bins] - item)
    priorities[feasible_bins][best_fit_index] += 1.5
    return priorities
```
