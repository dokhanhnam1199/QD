```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit with smoothed utilization, prioritizing bins nearing full."""
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return np.zeros_like(bins_remain_cap)
    
    fill_ratios = bins_remain_cap[feasible_bins] / np.full_like(bins_remain_cap[feasible_bins], bins_remain_cap[feasible_bins].max())
    best_fit_diff = bins_remain_cap[feasible_bins] - item
    best_fit_index = np.argmin(best_fit_diff)
    
    sigmoid_scale = 5.0
    utilization_scores = np.exp(-sigmoid_scale * (1 - fill_ratios))
    
    priorities = np.zeros_like(bins_remain_cap)
    priorities[feasible_bins] = utilization_scores
    priorities[np.where(feasible_bins)[0][best_fit_index]] += 1.0
    
    return priorities
```
