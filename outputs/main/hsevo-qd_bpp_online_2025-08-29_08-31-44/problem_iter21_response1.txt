```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    priorities = np.zeros_like(bins_remain_cap)
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return priorities
    
    fill_ratios = bins_remain_cap[feasible_bins] / bins_remain_cap[feasible_bins].max()
    
    best_fit_diff = np.min(bins_remain_cap[feasible_bins] - item)
    best_fit_indices = np.where(bins_remain_cap[feasible_bins] - item == best_fit_diff)[0]
    
    
    for i in best_fit_indices:
        bin_index = np.where(feasible_bins)[0][i]
        priorities[bin_index] = 1.0 + 2.0 * (1 / (1 + np.exp(-5 * (fill_ratios[i] - 0.5))))

    
    remaining_feasible_bins_indices = np.where(feasible_bins)[0]
    for i in remaining_feasible_bins_indices:
      if i not in best_fit_indices:
        priorities[i] = 1.0 + (1 / (1 + np.exp(-5 * (fill_ratios[np.where(feasible_bins)[0] == i][0] - 0.5))))

    return priorities
```
