```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines fill ratio and best-fit boost with smoothing for robust bin selection."""
    priorities = np.zeros_like(bins_remain_cap)
    possible_bins = bins_remain_cap[bins_remain_cap >= item]
    if len(possible_bins) == 0:
        return priorities

    for i in range(len(bins_remain_cap)):
        if bins_remain_cap[i] >= item:
            fill_ratio = (bins_remain_cap[i] - item) / bins_remain_cap[i]
            priority = fill_ratio
            if fill_ratio <= 0.5:
                priority += (1.0 - fill_ratio) * 0.5
            elif fill_ratio <= 0.9:
                priority += (1.0 - fill_ratio) * 0.2
            else:
                priority += (1.0 - fill_ratio) * 0.1
            priorities[i] = priority

    return priorities
```
