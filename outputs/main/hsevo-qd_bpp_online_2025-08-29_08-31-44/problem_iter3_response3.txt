```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    priorities = np.zeros_like(bins_remain_cap)
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return priorities
    
    bin_utilizations = bins_remain_cap[feasible_bins] / bins_remain_cap[feasible_bins]
    
    scores = np.zeros_like(bins_remain_cap[feasible_bins])
    
    for i, cap in enumerate(bins_remain_cap[feasible_bins]):
        
        fit = item / cap
        
        if fit <= 0.5:
            scores[i] = 1.0 + (1.0 - fit) * 0.5
        elif fit <= 0.9:
            scores[i] = 0.5 + (1.0 - fit) * 0.2
        else:
            scores[i] = 0.1
            
    best_bin_index = np.argmax(scores)
    
    priorities[feasible_bins] = scores
    priorities[np.where(feasible_bins)[0][best_bin_index]] = scores[best_bin_index] + 1.0

    return priorities
```
