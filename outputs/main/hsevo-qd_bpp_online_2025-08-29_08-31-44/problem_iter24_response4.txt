```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return np.zeros_like(bins_remain_cap)

    best_fit_index = np.argmin(bins_remain_cap[feasible_bins] - item)
    
    priorities = np.zeros_like(bins_remain_cap)
    
    fill_ratios = bins_remain_cap / np.full_like(bins_remain_cap, np.max(bins_remain_cap))
    
    utilization_scores = 1.0 - (bins_remain_cap - item) / np.max(bins_remain_cap)
    utilization_scores[~feasible_bins] = 0.0

    
    best_fit_score = np.zeros_like(bins_remain_cap)
    best_fit_score[feasible_bins] = 1.0
    best_fit_score[np.where(feasible_bins)[0][best_fit_index]] = 2.0

    
    priorities = 0.6 * best_fit_score + 0.4 * utilization_scores

    return priorities
```
