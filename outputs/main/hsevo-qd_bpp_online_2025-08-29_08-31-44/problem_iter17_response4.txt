```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit (waste minimization) with bin utilization, smoothed by sigmoids."""
    num_bins = len(bins_remain_cap)
    priorities = np.zeros(num_bins)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    fit_scores = 1.0 / (bins_remain_cap[feasible_bins] - item + 1e-6)
    utilization_scores = bins_remain_cap[feasible_bins] / np.max(bins_remain_cap)

    smooth_fit = 1.0 / (1.0 + np.exp(-fit_scores * 5.0))
    smooth_util = 1.0 / (1.0 + np.exp(-utilization_scores * 5.0))

    combined_scores = 0.6 * smooth_fit + 0.4 * smooth_util
    priorities[feasible_bins] = combined_scores
    best_bin_index = np.argmax(priorities[feasible_bins])
    priorities[np.where(feasible_bins)[0][best_bin_index]] += 1.0

    return priorities
```
