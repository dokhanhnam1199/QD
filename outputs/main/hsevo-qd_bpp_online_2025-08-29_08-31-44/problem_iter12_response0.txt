```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    fit_score = 1 / (bins_remain_cap[feasible_bins] - item + 1e-6)
    utilization_score = bins_remain_cap[feasible_bins] / np.max(bins_remain_cap)
    
    smooth_fit = 1 / (1 + np.exp(-fit_score))
    smooth_utilization = 1 / (1 + np.exp(-utilization_score))
    
    combined_score = 0.6 * smooth_fit + 0.4 * smooth_utilization
    
    priorities[feasible_bins] = combined_score
    
    best_bin_index = np.argmax(priorities[feasible_bins])
    
    best_bin_idx = np.where(feasible_bins)[0][best_bin_index]
    priorities[best_bin_idx] += 0.5

    return priorities
```
