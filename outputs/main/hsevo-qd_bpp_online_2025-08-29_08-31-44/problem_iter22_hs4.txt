import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 1.629756157422077e-06) -> np.ndarray:
    """
    Calculates priorities based on item value and remaining capacity of bins.

    Args:
        item (float): The value of the item.
        bins_remain_cap (np.ndarray): The remaining capacity of the bins.
        epsilon (float): A small value to prevent division by zero in the sigmoid calculation.

    Returns:
        np.ndarray: The calculated priorities for each bin.
    """
    possible_bins = bins_remain_cap[bins_remain_cap >= item]
    if len(possible_bins) == 0:
        return np.zeros_like(bins_remain_cap)
    sigmoid_scores = 1 / (1 + np.exp(-(possible_bins - item) / (np.std(bins_remain_cap) + epsilon)))
    priorities = np.zeros_like(bins_remain_cap)
    sorted_indices = np.argsort(bins_remain_cap)
    count = 0
    for i in sorted_indices:
        if bins_remain_cap[i] >= item:
            priorities[i] = sigmoid_scores[count]
            count += 1
    return priorities
