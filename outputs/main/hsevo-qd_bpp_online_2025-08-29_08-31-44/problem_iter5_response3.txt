```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit and waste minimization with a sigmoid scaling."""
    priorities = np.zeros_like(bins_remain_cap)
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return priorities

    waste = bins_remain_cap[feasible_bins] - item
    reciprocal_waste = 1.0 / (waste + 1e-6)
    fit_scores = item / bins_remain_cap[feasible_bins]
    sigmoid_scores = 1.0 / (1.0 + np.exp(-5 * (1.0 - fit_scores)))
    scores = 0.6 * reciprocal_waste + 0.4 * sigmoid_scores
    best_bin_index = np.argmax(scores)
    priorities[feasible_bins] = scores
    priorities[np.where(feasible_bins)[0][best_bin_index]] = scores[best_bin_index] + 1.0
    return priorities
```
