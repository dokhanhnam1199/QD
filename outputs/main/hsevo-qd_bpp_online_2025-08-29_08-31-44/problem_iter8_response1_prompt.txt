{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines best-fit with a sigmoid function to prioritize bins.\"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n    remaining_capacities = bins_remain_cap[possible_bins]\n    fit_scores = 1.0 / (1.0 + np.exp(-5 * (remaining_capacities - item)))\n    bin_utilizations = bins_remain_cap[possible_bins] / bins_remain_cap[possible_bins].max()\n    sigmoid_scores = 1 / (1 + np.exp(-5 * (bin_utilizations - 0.5)))\n    combined_scores = fit_scores * sigmoid_scores\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[possible_bins] = combined_scores\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines best-fit with a sigmoid function based on bin fill ratio.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return priorities\n\n    distances = bins_remain_cap[valid_bins] - item\n    fit_scores = (bins_remain_cap[valid_bins] - item) / item\n    bin_utilizations = bins_remain_cap[valid_bins] / bins_remain_cap[valid_bins]\n    sigmoid_scores = 1 / (1 + np.exp(-5 * (bin_utilizations - 0.5)))\n    combined_scores = 0.7 * sigmoid_scores + 0.3 * fit_scores\n    priorities[valid_bins] = combined_scores\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (2nd), both utilize best-fit with a priority boost for the best bin, but the 1st uses a sigmoid to smooth prioritization across *all* feasible bins based on fill ratio, providing a more nuanced selection than the 2nd's simple 1/2 priority scheme. (3rd) and (4th) are identical to (2nd). Comparing (1st) vs (5th), (1st)\u2019s sigmoid application is cleaner, while (5th) introduces an exploration bonus based on average remaining capacity that feels less grounded in immediate fit. (6th) is a simplified best-fit. (7th), (9th) and (10th) are identical - a more complex version of best-fit with sigmoid and bin utilization. (8th) and (11th) have a very basic best-fit and are significantly worse. (12th) adds a moderate boost to the best-fit. (13th) is similar to (7th), (9th), (10th) but simpler. (14th) introduces a complex, piecewise scoring function that seems arbitrarily tuned and the best bin prioritization is not as robust. (15th), (16th) and (17th) are identical. (18th) uses an exponential function for prioritization, which can lead to a few bins dominating, and lacks a clear rationale. (19th) and (20th) just return remaining capacity (or -1 if it doesn\u2019t fit), fundamentally failing to prioritize. Overall, the best heuristics combine best-fit with a smoothing function (sigmoid) and consider bin utilization. Randomization (like in 2nd) is less effective without careful tuning. Simpler heuristics (6th, 8th, 11th) are outperformed by those that consider fill ratio.\n- \nOkay, let's refine \"Current Self-Reflection\" into actionable advice for designing superior heuristics, especially focusing on avoiding the pitfalls of \"Ineffective Self-Reflection.\" Here\u2019s a breakdown, aiming for that $999K tip!\n\n**Step-by-Step Thought Process:**\n\nThe core insight is *smooth, adaptive prioritization* based on quantifiable \"goodness of fit\" \u2013 balancing immediate placement with long-term bin utilization.  We want to move *away* from rigid rules and towards continuous evaluation.  The provided text explicitly warns against arbitrary weights and over-complication.  The emphasis on valid bins and fallback mechanisms points to the importance of robustness.\n\n**Refined Self-Reflection & Heuristic Design Advice:**\n\n*   **Keywords:** Smooth Prioritization, Fill Ratio, Adaptive Scaling, Robustness\n*   **Advice:** Design heuristics using continuous functions (e.g., sigmoid) to prioritize items based on fit *and* remaining bin capacity.  Dynamically adjust prioritization; don't use static weights.\n*   **Avoid:** Discrete priority levels, arbitrary weighting, worst-case scenario focus, neglecting bin validity, complex exploration bonuses.\n*   **Explanation:**  Continuous functions create a smoother search space, enabling adaptation to varying problem instances. Valid bin checks & fallbacks guarantee solution feasibility & avoid errors, improving heuristic reliability.\n\n\n\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}