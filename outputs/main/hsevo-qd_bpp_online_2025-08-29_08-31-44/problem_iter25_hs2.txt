import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, weight_1: float = 8.857972596572147, weight_2: float = 8.413577987986582) -> np.ndarray:
    """
    Calculates priorities for items based on bin remaining capacity.

    Args:
        item (float): The size of the item.
        bins_remain_cap (np.ndarray): Remaining capacity of each bin.
        weight_1 (float, optional): Weight assigned to feasible bins. Defaults to 1.0.
        weight_2 (float, optional): Weight assigned to the best-fit bin. Defaults to 2.0.

    Returns:
        np.ndarray: Priorities for each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    feasible_bins = bins_remain_cap >= item
    if np.any(feasible_bins):
        best_fit_index = np.argmin(bins_remain_cap[feasible_bins] - item)
        priorities[feasible_bins] = weight_1
        priorities[np.where(bins_remain_cap >= item)[0][best_fit_index]] = weight_2
    return priorities
