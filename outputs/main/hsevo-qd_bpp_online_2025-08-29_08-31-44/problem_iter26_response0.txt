```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit with normalized utilization and smooths with sigmoid."""
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return np.zeros_like(bins_remain_cap)

    possible_bins = np.where(feasible_bins)[0]
    fit_score = 1.0 / (bins_remain_cap[possible_bins] - item + 1e-6)
    utilization_score = bins_remain_cap[possible_bins] / bins_remain_cap.max()
    combined_score = 0.6 * fit_score + 0.4 * utilization_score

    def sigmoid(x):
        return 1 / (1 + np.exp(-x))

    priorities = np.zeros_like(bins_remain_cap)
    if np.any(feasible_bins):
        smoothed_scores = sigmoid(combined_score)
        priorities[possible_bins] = smoothed_scores

        best_bin_index = np.argmax(smoothed_scores)
        priorities[possible_bins[best_bin_index]] += 0.2
    return priorities
```
