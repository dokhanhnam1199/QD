```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    priorities = np.zeros_like(bins_remain_cap)
    feasible_bins = bins_remain_cap >= item
    if np.any(feasible_bins):
        best_fit_score = bins_remain_cap[feasible_bins] - item
        best_fit_index = np.argmin(best_fit_score)
        
        utilization = bins_remain_cap[feasible_bins] / (bins_remain_cap[feasible_bins] + item)
        
        smooth_utilization = 1 / (1 + np.exp(-5 * (utilization - 0.5)))
        
        combined_score = best_fit_score * 0.6 + (1 - smooth_utilization) * 0.4
        
        priorities[feasible_bins] = 1.0
        priorities[np.where(feasible_bins)[0][best_fit_index]] = 2.0
        
    return priorities
```
