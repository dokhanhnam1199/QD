```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    priorities = np.zeros_like(bins_remain_cap)
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return priorities
    
    fill_ratios = bins_remain_cap[feasible_bins] / (np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1)
    
    fit_scores = (bins_remain_cap[feasible_bins] - item) / item
    
    combined_scores = fill_ratios * fit_scores
    
    normalized_scores = (combined_scores - np.min(combined_scores)) / (np.max(combined_scores) - np.min(combined_scores)) if np.max(combined_scores) > np.min(combined_scores) else np.ones_like(combined_scores)
    
    priorities[feasible_bins] = normalized_scores
    
    best_bin_index = np.argmax(priorities[feasible_bins])
    
    
    priorities[feasible_bins] = 0.0
    priorities[np.where(feasible_bins)[0][best_bin_index]] = 1.0

    return priorities
```
