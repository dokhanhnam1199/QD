```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    best_fit_score = np.zeros(n_bins)
    utilization_score = np.zeros(n_bins)

    best_fit_score[feasible_bins] = 1.0 / (bins_remain_cap[feasible_bins] - item + 1e-6)
    utilization_score[feasible_bins] = (bins_remain_cap[feasible_bins] - item) / bins_remain_cap[feasible_bins]

    def sigmoid(x):
        return 1 / (1 + np.exp(-x))

    combined_score = 0.6 * best_fit_score + 0.4 * utilization_score
    priorities[feasible_bins] = sigmoid(combined_score[feasible_bins])

    if np.any(priorities > 0):
        best_bin_index = np.argmax(priorities)
        priorities[best_bin_index] += 0.5
    
    return priorities
```
