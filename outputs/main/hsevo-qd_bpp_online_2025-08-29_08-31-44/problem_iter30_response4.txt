```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    priorities = np.zeros_like(bins_remain_cap)
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return priorities

    best_fit_index = np.argmin(bins_remain_cap[feasible_bins] - item)
    best_fit_bin_index = np.where(feasible_bins)[0][best_fit_index]
    
    priorities[feasible_bins] = 1.0
    priorities[best_fit_bin_index] = 2.0

    utilizations = bins_remain_cap / np.max(bins_remain_cap)
    waste = 1 - utilizations
    sigmoid_values = 1 / (1 + np.exp(-10 * (waste - 0.5)))
    
    priorities[feasible_bins] += 0.5 * sigmoid_values[feasible_bins]

    return priorities
```
