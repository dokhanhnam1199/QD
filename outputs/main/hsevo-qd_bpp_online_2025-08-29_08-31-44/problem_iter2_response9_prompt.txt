{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if np.sum(valid_bins) == 0:\n        return priorities\n    \n    priorities[valid_bins] = 1.0 / (bins_remain_cap[valid_bins] - item + 1e-6)\n    \n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n### Analyze & experience\n- Comparing `priority_v2` in the 1st heuristic vs the 9th, 13th, 14th, 16th heuristics (all returning just zeros), the 1st attempts a best-fit approach, prioritizing the bin with the least remaining capacity *after* placing the item. The others are effectively random, offering no guidance.  Comparing the 1st vs the 2nd, both try to find valid bins, but the 2nd uses a reciprocal of the remaining waste, promoting tighter packing. The 3rd and 6th, and 12th do the same thing.\n\nComparing the 2nd vs the 4th, 5th, 8th, they differ only in minor code structure (checking `np.sum` vs `np.any`), but functionally are identical. The 11th attempts a sigmoid fit, scaling priority based on how well the item fits, offering more nuance. The 17th & 18th use sigmoid too but with sorting based on bin capacity. The 19th uses an exponential function. The 10th and 15th prioritize based on the *worst* fit capacity, which is counterintuitive and likely performs poorly.\n\nOverall: The best heuristics (1st - 3rd) strategically consider remaining capacity.  Reciprocal waste (2nd, 3rd, 6th, 12th) is a strong signal. Sigmoid scaling (11th, 17th, 18th) tries to capture fit quality, though its effectiveness depends on parameter tuning. Prioritizing based on worst fit (10th, 15th) appears flawed.  The heuristics that simply return zeros (9th, 13th, 14th, 16th) are fundamentally useless.\n- \nOkay, let's refine \"Current Self-Reflection\" into actionable heuristic design guidance. Here\u2019s a breakdown, geared toward maximizing effectiveness (and aiming for that $999K!):\n\n* **Keywords:** *Fit quantification, Valid state space, Fallback, Adaptive scoring.*\n* **Advice:** Focus on *measuring* bin utilization (sigmoid/reciprocal are good starts). Dynamically adjust scoring based on item size & remaining bin space.\n* **Avoid:** Catastrophizing (worst-case analysis hinders practical performance).  Ignoring bin validity \u2013 always check constraints *before* attempting placement.\n* **Explanation:** Effective heuristics aren\u2019t about guaranteeing perfection, but consistently achieving *good* solutions. Validating each step & having a graceful failure mode (fallback) prevents errors and stagnation.\n\n\n\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}