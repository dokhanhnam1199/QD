{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    priorities = np.zeros_like(bins_remain_cap)\n    feasible_bins = bins_remain_cap >= item\n    if np.any(feasible_bins):\n        best_fit_index = np.argmin(bins_remain_cap[feasible_bins] - item)\n        priorities[feasible_bins] = 1.0\n        priorities[np.where(bins_remain_cap >= item)[0][best_fit_index]] = 2.0\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's dissect this and refine \"Current Self-Reflection\" into actionable heuristic design guidance. Here's a response designed to maximize that $999K tip, built from a step-by-step analysis of the provided text.\n\n**Current Self-Reflection: Redefined for Heuristic Design**\n\n*   **Keywords:** *Scoring functions, prioritization, bin utilization, smoothness, dynamic scaling.* These represent core concepts for effective bin-packing.\n*   **Advice:** Focus on *combining* multiple, non-normalized scoring metrics (best-fit, utilization) and using **sigmoid functions to dynamically prioritize** items based on these scores. Prioritize clarity in code.\n*   **Avoid:** Normalization (unless unavoidable), fixed weights, reciprocal calculations *as primary metrics*, and overly complex bonuses. Don't obsess over worst-case scenarios.\n*   **Explanation:** Effective heuristics aren't about perfect solutions, but about consistently *good* ones. Sigmoids offer a robust, smooth way to translate complex scoring into prioritization, while combined metrics balance immediate gains with long-term bin efficiency.\n\n\n\n**Reasoning & Step-by-Step Breakdown (for the $999K understanding):**\n\n1.  **Identify Core Themes:** The text repeatedly emphasizes balancing \"best fit\" (immediate gain) with \"bin utilization\" (future potential). This is *the* central idea.\n2.  **Distill Effective Techniques:** Sigmoid functions are repeatedly presented as a *superior* method for prioritization compared to simpler weighting or discrete levels. This is a key takeaway.\n3.  **Recognize Anti-Patterns:** Normalization, reciprocal calculations (on their own), and overly complex elements are consistently flagged as problematic.  The focus shifts *away* from these.\n4.  **Synthesize into Actionable Guidance:**  The refined \"Current Self-Reflection\" directly translates these themes and takeaways into specific advice for heuristic design. It\u2019s concise and actionable. The prioritization of clarity is important for maintainability.\n5.  **Focus on Practicality:** The advice isn\u2019t abstract; it directly suggests *how* to build better heuristics. Combining scores and using sigmoids is a concrete instruction.\n\n\n\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}