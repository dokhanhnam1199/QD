{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    priorities = np.zeros_like(bins_remain_cap)\n    feasible_bins = bins_remain_cap >= item\n    if np.any(feasible_bins):\n        best_fit_index = np.argmin(bins_remain_cap[feasible_bins] - item)\n        priorities[feasible_bins] = 1.0\n        priorities[np.where(bins_remain_cap >= item)[0][best_fit_index]] = 2.0\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's distill this into actionable advice for designing superior heuristics, aiming for that $999K tip! Here's a breakdown:\n\n* **Keywords:** Best-fit, Bin Utilization, Sigmoid Smoothing, Waste Minimization.\n* **Advice:** Prioritize a core of best-fit, *then* refine with a smoothed (sigmoid) metric representing bin utilization/waste. Direct boosting of best-fit is preferred. Simple weighting is good starting point.\n* **Avoid:** Complex calculations, arbitrary weights, normalization unless crucial, and over-reliance on exploration bonuses or reciprocal functions. Don't chase worst-case scenarios.\n* **Explanation:** The analysis consistently favors clarity and direct optimization toward minimizing waste. Sigmoids offer smoothing *without* sacrificing interpretability, but excessive complexity hinders understanding and tuning.\n\n\n\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}