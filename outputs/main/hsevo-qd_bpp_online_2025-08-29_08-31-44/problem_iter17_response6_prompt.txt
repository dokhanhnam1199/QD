{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines best-fit (v0) with reciprocal waste (v1) for improved bin packing.\n    Prioritizes tightest fit among valid bins.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    feasible_bins = bins_remain_cap >= item\n    if not np.any(feasible_bins):\n        return priorities\n\n    waste = bins_remain_cap[feasible_bins] - item\n    priorities[feasible_bins] = 1.0 / (waste + 1e-6)\n\n    best_fit_index = np.argmin(bins_remain_cap[feasible_bins] - item)\n    priorities[np.where(feasible_bins)[0][best_fit_index]] = 2.0\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return priorities\n    \n    waste = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = 1.0 / (waste + 1e-9)\n    return priorities\n\n### Analyze & experience\n- Comparing `priority_v2` (1st) vs `priority_v2` (2nd), the key difference is the application of the sigmoid function *after* calculating reciprocal waste in the first version, while the second applies it to a fit score derived from fill ratio *before* multiplying by the reciprocal waste. The first approach allows the reciprocal waste to heavily influence the priority, with the sigmoid smoothing merely adjusting the magnitude. The second has the sigmoid shaping the fit score *before* combining, potentially limiting the impact of extreme waste scenarios.\n\nComparing `priority_v2` (1st) vs `priority_v2` (3rd), the first uses waste directly, while the third uses fill ratio. The fill ratio approach in the 3rd heuristic is less sensitive to the absolute size of the item relative to the bin, focusing more on the proportion of the bin used.  The first, being more directly tied to waste, is likely better at minimizing fragmentation.\n\nComparing `priority_v2` (4th) vs `priority_v2` (5th), the 4th attempts a weighted combination of fit and utilization scores, both smoothed with sigmoid functions. The 5th is extremely basic, essentially best-fit only. The 4th is far more sophisticated and likely to produce better results.\n\nComparing `priority_v2` (6th) vs `priority_v2` (7th), both combine reciprocal waste and a fit score, but the 7th introduces an \"exploration bonus\" based on comparing bin capacity to the average. This bonus adds some randomness, which *could* help escape local optima but also introduces instability. The 6th is likely more consistent.\n\nComparing `priority_v2` (8th) vs `priority_v2` (9th), the 8th combines reciprocal waste and a sigmoid-based fit score, while the 9th offers a very basic reciprocal waste calculation. The 8th adds a layer of smoothing and is clearly superior.\n\nComparing `priority_v2` (10th) vs `priority_v2` (11th), both use sigmoid scaling. The 10th includes a fill ratio, while the 11th uses bin utilization. The 11th integrates the fit and utilization within the sigmoid more directly.\n\nThe heuristics 12th, 13th, and 14th have some imports like torch and scipy, and very short docstrings, likely indicating incomplete or experimental designs.\n\nHeuristics 15th, 16th, 17th, 18th, 19th and 20th all try to combine multiple scoring mechanisms (fit, utilization, waste) and frequently use sigmoid functions for smoothing. However, the weighting schemes are often arbitrary, and the logic to identify the best bin (e.g., `np.argmax`) is applied *after* some combination of scores, potentially masking the influence of individual components. They feel less principled than the top-ranked heuristics.  The late introduction of a bias (e.g., adding 0.5 to the best bin) is also a sign of ad-hoc adjustments.\n\nOverall: The most successful heuristics (1st-3rd) prioritize minimizing waste and using a tightest-fit approach, potentially with a smoothing factor. Later heuristics become more complex but often lose focus on the core optimization goal. The use of sigmoid functions is common, but it\u2019s most effective when applied to refine a clear primary scoring function (e.g., waste). Randomness/exploration (as in heuristic 7th) should be used cautiously.\n- \nOkay, let's refine \"Current Self-Reflection\" into actionable heuristic design principles. Here's a response aimed at maximizing that $999K tip, built step-by-step from the provided text:\n\n* **Keywords:** Waste Minimization, Sigmoid Smoothing, Best-Fit/Utilization Balance, Valid Solutions.\n* **Advice:** Combine best-fit *with* fill ratio scoring, using sigmoids to smoothly prioritize. Dynamically adjust scoring based on item size/bin capacity \u2013 avoid fixed weights. Always validate bin feasibility!\n* **Avoid:** Arbitrary weights/bonuses, reciprocal-only waste calculations, worst-case focus, unnecessary normalization, & complex scoring.\n* **Explanation:** The core is *efficient space use*. Sigmoids offer robust prioritization, but clarity on the underlying waste minimization objective is paramount. Focus on valid, practical solutions, not theoretical extremes.\n\n\n\n**Reasoning for this response (Step-by-Step):**\n\n1. **Core Goal Extraction:** The text repeatedly emphasizes *minimizing waste* in bin packing. This is our central objective.\n2. **Successful Techniques:**  Best-fit combined with utilization (fill ratio) emerges as the strongest approach. Sigmoids consistently appear as a *good* smoothing/normalization method.\n3. **Pitfalls Identification:** A huge amount of text details *what doesn't work*: arbitrary weights, simplistic metrics (pure reciprocal waste), overcomplexity, and focusing on unlikely worst-case scenarios.\n4. **Concise Formulation:**  I distilled these into four bullet points that are immediately useful for a heuristic designer.  The advice is practical (\"do this...\") and the avoidance section is direct (\"don't do this...\").\n5. **Explanation Rationale:** The explanation ties everything back to the core objective and reinforces *why* the advice is sound.\n\n\n\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}