```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return np.zeros_like(bins_remain_cap)

    best_fit_score = 1.0 / (bins_remain_cap[feasible_bins] - item + 1e-6)
    utilization_score = bins_remain_cap[feasible_bins] / bins_remain_cap[feasible_bins].max()

    combined_score = best_fit_score + utilization_score

    def sigmoid(x):
        return 1 / (1 + np.exp(-x))

    priorities = np.zeros_like(bins_remain_cap)
    
    if np.any(feasible_bins):
        
        smoothed_scores = sigmoid(combined_score)
        
        best_bin_index = np.argmax(smoothed_scores)
        
        priorities[feasible_bins] = smoothed_scores
        priorities[np.where(feasible_bins)[0][best_bin_index]] = smoothed_scores[best_bin_index] + 0.5
    
    return priorities
```
