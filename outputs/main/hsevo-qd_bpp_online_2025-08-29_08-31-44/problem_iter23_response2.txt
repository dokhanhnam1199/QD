```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit with smoothed utilization and exploration."""
    priorities = np.zeros_like(bins_remain_cap)
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return priorities

    waste = bins_remain_cap[feasible_bins] - item
    fit = item / bins_remain_cap[feasible_bins]
    sigmoid_score = 1.0 / (1.0 + np.exp(-5 * (fit - 0.5)))
    priorities[feasible_bins] = 1.0 / (waste + 1e-6) + sigmoid_score * 0.5

    avg_remaining = np.mean(bins_remain_cap[feasible_bins])
    exploration_bonus = np.where(bins_remain_cap[feasible_bins] > avg_remaining, 0.2, 0.0)
    priorities[feasible_bins] += exploration_bonus

    best_fit_index = np.argmin(bins_remain_cap[feasible_bins] - item)
    priorities[np.where(feasible_bins)[0][best_fit_index]] = 2.0
    return priorities
```
