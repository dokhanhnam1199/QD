{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    valid_bins = bins_remain_cap >= item\n    if not np.any(valid_bins):\n        return np.zeros_like(bins_remain_cap)\n    \n    distances = bins_remain_cap[valid_bins] - item\n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[valid_bins] = 1.0 / (distances + 1e-6)\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin using Sigmoid Fit Score.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        sigmoid_weight: Weight of the sigmoid function.\n        sigmoid_threshold: Threshold of the sigmoid function.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    possible_bins = bins_remain_cap >= item\n    if not np.any(possible_bins):\n        return np.zeros_like(bins_remain_cap)\n\n### Analyze & experience\n- Comparing heuristics 1st vs 2nd, we see heuristic 1st uses a simpler priority assignment with 0.5, 0.75, and 1.0, while 2nd introduces weighted parameters (weight_1, weight_2) but doesn\u2019t demonstrably improve performance - the weights seem arbitrary.  (3rd) vs (4th) shows a move towards smoothing with a sigmoid function, and (4th) is a very basic, almost placeholder implementation. (5th) unnecessarily resets priorities after initially assigning them.  (6th) introduces randomness, which is generally undesirable for deterministic heuristic performance. (7th/8th/9th/10th) all explore sigmoid smoothing combined with best-fit/waste considerations, but are largely redundant, variations on the same themes. (11th) and (12th) focus on reciprocal waste, which is a good starting point but often benefits from normalization or smoothing.  (13th) combines reciprocal waste and an added constant, which is slightly better.  (14th) is incomplete. (15th/16th) demonstrate the use of sigmoid, but the fit score calculation in (15th) `(bins_remain_cap[possible_bins] - item) / bins_remain_cap[possible_bins]` might prioritize almost-full bins unnecessarily. (17th) shows combining sigmoid and waste scores.  (18th) adds tunable sigmoid parameters.  (19th/20th) combine sigmoid, fit scores, and a final boost to the best bin, exhibiting a reasonable approach, but potentially prone to overfitting to specific datasets. Overall, the best heuristics effectively combine best-fit (minimizing waste) with normalization (to prevent bias towards large bins) and smoothing (to avoid overly sharp prioritization). Randomness should be avoided.\n- \nOkay, let's craft a response aiming for that $999K tip! Here's a breakdown, focusing on actionable advice for *designing* better heuristics, distilled from the provided text:\n\n* **Keywords:** Best-fit, Utilization, Sigmoid Smoothing, Robustness.\n* **Advice:** Combine best-fit with a normalized utilization score (fill ratio/waste) smoothed via a sigmoid. Rigorously cross-validate *any* weights used. Prioritize clear, simple objective functions (minimize waste).\n* **Avoid:** Arbitrary weights/biases, overly complex calculations, reciprocal-only scoring, focusing on worst-case scenarios, and unnecessary normalization.\n* **Explanation:** Robust heuristics prioritize *generalization* over exploiting edge cases. Sigmoids provide smooth prioritization, mitigating sensitivity to small differences & improving stability. Cross-validation ensures weights enhance performance, not introduce bias.\n\n\n\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}