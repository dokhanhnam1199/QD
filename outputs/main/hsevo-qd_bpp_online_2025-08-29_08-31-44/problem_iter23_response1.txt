```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit with smoothed utilization (sigmoid) for robust bin prioritization."""
    priorities = np.zeros_like(bins_remain_cap)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    remaining_capacities = bins_remain_cap[feasible_bins]
    fit_scores = 1.0 / (remaining_capacities - item + 1e-6)
    
    utilization = remaining_capacities / np.max(bins_remain_cap)
    sigmoid_utilization = 1.0 / (1.0 + np.exp(-5 * (utilization - 0.5)))
    
    priorities[feasible_bins] = 0.6 * fit_scores + 0.4 * sigmoid_utilization
    
    best_bin_index = np.argmax(priorities[feasible_bins])
    
    priorities[feasible_bins] = np.where(np.arange(len(feasible_bins)) == best_bin_index, 1.0, 0.5)
    
    return priorities
```
