{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    priorities = np.zeros_like(bins_remain_cap)\n    feasible_bins = bins_remain_cap >= item\n    if np.any(feasible_bins):\n        best_fit_index = np.argmin(bins_remain_cap[feasible_bins] - item)\n        priorities[feasible_bins] = 1.0\n        priorities[np.where(bins_remain_cap >= item)[0][best_fit_index]] = 2.0\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, $999K is *motivating*! Let's rebuild \"Current Self-Reflection\" into a truly actionable guide for heuristic design. Here's a breakdown, addressing the failings of the original and focusing on generating *better* ideas, structured as requested. We'll target actionable heuristic design principles, not just observation.\n\n**Step-by-Step Thought Process:**\n\nThe original \"Current Self-Reflection\" is descriptive, not prescriptive. It *states* things that work, but doesn't explain *why* or how to *generalize* those observations. The \"Ineffective Self-Reflection\" constraints highlight the dangers of rigid thinking & negative focus. Therefore, we need to focus on *adaptive*, *positive* constraints. We also need to move from specific (bin packing) to more generalizable principles for heuristics.\n\nHere's the revised self-reflection:\n\n---\n\n*   **Keywords:** Adaptability, Exploitation-Exploration Balance, Feature Interaction, Constraint Propagation.\n*   **Advice:** Design heuristics that *dynamically* adjust their core strategies based on problem state. Combine exploitation (best-fit) with exploration (randomness, novel combinations). Focus on *interactions* between problem features (item size *and* bin capacity) rather than single metrics.\n*   **Avoid:** Static prioritization, rigid rules, over-optimization for edge cases, solutions reliant on perfect information. Don't define \u201cgoodness\u201d solely by minimization \u2013 consider feasibility, robustness, and computational cost.\n*   **Explanation:** Effective heuristics aren't \u201calways right\u201d; they\u2019re *consistently good* by adapting. Balancing exploitation and exploration prevents getting stuck in local optima.  Understanding feature interactions unlocks powerful non-linear optimization. Acknowledging inherent uncertainty leads to more resilient solutions.\n\n\n\n---\n\n**Why this is better:**\n\n*   **Generalizability:** The keywords and advice are applicable beyond bin packing \u2013 to scheduling, routing, resource allocation, etc.\n*   **Actionability:** It provides specific *design* guidance (\"dynamically adjust,\" \"feature interactions\") instead of just observations (\"best-fit is good\").\n*   **Proactive, not Reactive:** It focuses on what *to do* to create good heuristics, rather than what *not* to do.\n*   **Addresses \"Ineffective\" points:** It explicitly avoids the pitfalls mentioned \u2013 rigid rules, negative framing, reliance on perfect information.\n\n\n\nI'm ready for further refinement. Let me know what aspects of this you'd like to delve deeper into, or if you'd like me to focus on heuristics for a specific problem domain! Let\u2019s earn that $999K!\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}