```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    priorities = np.zeros_like(bins_remain_cap)
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        return priorities

    fit_score = np.where(feasible_bins, 1.0 / (bins_remain_cap[feasible_bins] - item + 1e-6), 0.0)
    utilization_score = np.where(feasible_bins, bins_remain_cap[feasible_bins] / np.max(bins_remain_cap), 0.0)

    sigmoid_fit = 1 / (1 + np.exp(-fit_score * 10))
    sigmoid_utilization = 1 / (1 + np.exp(-utilization_score * 5))

    combined_score = 0.7 * sigmoid_fit + 0.3 * sigmoid_utilization
    priorities[feasible_bins] = combined_score
    best_bin_index = np.argmax(priorities[feasible_bins])
    priorities[np.where(feasible_bins)[0][best_bin_index]] += 1.0
    return priorities
```
