```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    n_bins = len(bins_remain_cap)
    priorities = np.zeros(n_bins)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    fit_score = np.where(feasible_bins, (bins_remain_cap - item), np.inf)
    waste_score = np.where(feasible_bins, item, np.inf)
    utilization_score = np.where(feasible_bins, (bins_remain_cap - item) / bins_remain_cap, 0)

    def sigmoid(x):
        return 1 / (1 + np.exp(-x))

    fit_priority = sigmoid(1 / fit_score)
    waste_priority = sigmoid(1 / waste_score)
    utilization_priority = sigmoid(utilization_score * 5)

    priorities = 0.4 * fit_priority + 0.3 * waste_priority + 0.3 * utilization_priority
    best_bin_index = np.argmax(priorities[feasible_bins])
    priorities[feasible_bins] = 0.0
    priorities[np.where(feasible_bins)[0][best_bin_index]] = 1.0
    return priorities
```
