import numpy as np

def priority_v2(item: float = 0.274027882013571, bins_remain_cap: np.ndarray = None) -> np.ndarray:
    """
    Calculates priorities for items based on remaining capacity of bins.

    Args:
        item (float, optional): The item size. Defaults to 0.0.
        bins_remain_cap (np.ndarray, optional): Remaining capacity of bins. Defaults to None.

    Returns:
        np.ndarray: Priorities for each bin.
    """
    if bins_remain_cap is None:
        return np.array([])

    possible_bins = bins_remain_cap[bins_remain_cap >= item]
    if len(possible_bins) == 0:
        return np.zeros_like(bins_remain_cap)
    priorities = np.zeros_like(bins_remain_cap)
    for i in range(len(bins_remain_cap)):
        if bins_remain_cap[i] >= item:
            priorities[i] = (bins_remain_cap[i] - item) / bins_remain_cap[i]
    return priorities
