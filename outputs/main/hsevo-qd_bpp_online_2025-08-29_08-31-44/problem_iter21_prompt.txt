{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    priorities = np.zeros_like(bins_remain_cap)\n    return priorities\n\n    priorities = np.zeros_like(bins_remain_cap)\n    feasible_bins = bins_remain_cap >= item\n    if np.any(feasible_bins):\n        best_fit_index = np.argmin(bins_remain_cap[feasible_bins] - item)\n        priorities[feasible_bins] = 1.0\n        priorities[np.where(bins_remain_cap >= item)[0][best_fit_index]] = 2.0\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, here\u2019s a refined self-reflection framework aimed at designing superior heuristics, geared toward earning that $999K tip!\n\n* **Keywords:** Smooth prioritization, utilization, balance (exploitation/exploration), robustness.\n* **Advice:** Prioritize *smooth*, sigmoid-scaled combinations of best-fit *and* bin utilization (fill ratio). Focus on minimizing waste as the core objective, dynamically adjusting prioritization based on item/bin characteristics.\n* **Avoid:** Complex weighting, arbitrary bonuses, normalization (unless demonstrably beneficial), focusing solely on worst-case scenarios, and rigid, discrete priority schemes.\n* **Explanation:** Heuristics thrive on balance. Sigmoids prevent overreaction to minor differences, creating robust prioritization. Combining fit *with* utilization guides towards globally efficient packing, not just locally optimal choices.\n\n\n\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}