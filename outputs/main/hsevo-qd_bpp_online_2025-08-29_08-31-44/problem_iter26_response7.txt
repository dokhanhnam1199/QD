```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit waste minimization with sigmoid smoothing for robust bin selection."""
    priorities = np.zeros_like(bins_remain_cap)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities

    waste = bins_remain_cap[feasible_bins] - item
    fit_score = 1.0 / (waste + 1e-6)
    
    smoothed_score = 1.0 / (1.0 + np.exp(-5 * (fit_score - np.mean(fit_score))))
    
    priorities[feasible_bins] = smoothed_score
    
    best_bin_index = np.argmax(priorities[feasible_bins])
    priorities[feasible_bins] = 0.0
    priorities[np.where(feasible_bins)[0][best_bin_index]] = 1.0
    
    return priorities
```
