import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple TSP solutions using a greedy heuristic with randomized starting nodes, and then uses a pheromone update rule inspired by Ant Colony Optimization (ACO) to reinforce edges present in good solutions.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.ones_like(distance_matrix, dtype=float)  # Initialize with ones to avoid division by zero

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        unvisited_nodes = set(range(n))
        current_node = start_node
        unvisited_nodes.remove(current_node)
        path = [current_node]
        total_distance = 0

        while unvisited_nodes:
            nearest_neighbor = None
            min_distance = float('inf')

            for neighbor in unvisited_nodes:
                distance = distance_matrix[current_node, neighbor]
                if distance < min_distance:
                    min_distance = distance
                    nearest_neighbor = neighbor

            path.append(nearest_neighbor)
            total_distance += distance_matrix[current_node, nearest_neighbor]
            current_node = nearest_neighbor
            unvisited_nodes.remove(current_node)

        total_distance += distance_matrix[current_node, start_node]
        path.append(start_node)

        # Pheromone update: reward edges in shorter paths
        for i in range(n):
            node1 = path[i]
            node2 = path[i+1]
            heuristics_matrix[node1, node2] += (1 / total_distance)
            heuristics_matrix[node2, node1] += (1 / total_distance)

    return heuristics_matrix
