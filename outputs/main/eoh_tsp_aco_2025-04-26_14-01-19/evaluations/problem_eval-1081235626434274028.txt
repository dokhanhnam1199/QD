import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples many random paths, and for each path, assigns a score to each edge based on its presence in the path and the path's total length, then averages these scores over all sampled paths to produce a heuristic matrix.}
    """
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a random path
        path = np.random.permutation(n)
        path = np.append(path, path[0]) # Return to starting node

        # Calculate path length
        path_length = 0
        for i in range(n):
            path_length += distance_matrix[path[i], path[i+1]]

        # Update heuristics matrix
        for i in range(n):
            u = path[i]
            v = path[i+1]
            heuristics_matrix[u, v] += 1.0 / path_length
            heuristics_matrix[v, u] = heuristics_matrix[u, v] # TSP is symmetric

    # Normalize the matrix
    heuristics_matrix /= num_samples

    return heuristics_matrix
