import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm estimates edge probabilities by iteratively constructing tours using a weighted combination of nearest neighbor and random selection, updating edge weights based on their frequency in sampled tours and their contribution to tour length.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    edge_weights = np.ones_like(distance_matrix, dtype=float)
    num_samples = 100

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        tour = [current_node]
        tour_length = 0

        while unvisited_nodes:
            # Weighted probability: combination of distance and edge weight
            probabilities = np.array([edge_weights[current_node, i] / distance_matrix[current_node, i] if i in unvisited_nodes else 0 for i in range(n)])
            probabilities = probabilities / np.sum(probabilities)
            
            next_node = np.random.choice(n, p=probabilities)
            
            if next_node not in unvisited_nodes:
                available_nodes = list(unvisited_nodes)
                if available_nodes:
                    next_node = min(available_nodes, key=lambda x: distance_matrix[current_node, x])
                else:
                    break

            tour_length += distance_matrix[current_node, next_node]
            tour.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

        tour_length += distance_matrix[current_node, start_node]
        tour.append(start_node)
        
        # Update edge weights based on tour inclusion and length
        for i in range(len(tour) - 1):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += 1 / tour_length
            heuristics_matrix[node2, node1] += 1 / tour_length
            edge_weights[node1, node2] += 1
            edge_weights[node2, node1] += 1

    heuristics_matrix = heuristics_matrix / num_samples
    return heuristics_matrix
