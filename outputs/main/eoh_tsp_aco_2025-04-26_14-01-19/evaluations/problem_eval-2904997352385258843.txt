import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs multiple tours using a greedy approach, biased by both distance and a pheromone-inspired edge desirability, averaging edge occurrences across the generated tours to form a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.ones_like(distance_matrix, dtype=float) * 0.001 # Initialize with small values to avoid division by zero
    pheromone_matrix = np.ones_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        tour = [start_node]
        unvisited = set(range(n))
        unvisited.remove(start_node)

        current_node = start_node
        while unvisited:
            probabilities = np.zeros(n)
            for i in unvisited:
                probabilities[i] = pheromone_matrix[current_node, i] / distance_matrix[current_node, i]
            probabilities /= np.sum(probabilities)
            
            next_node = np.random.choice(list(unvisited), p=probabilities)
            tour.append(next_node)
            
            heuristics_matrix[current_node, next_node] += 1
            heuristics_matrix[next_node, current_node] += 1
            
            unvisited.remove(next_node)
            current_node = next_node

        tour.append(start_node)
        
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            pheromone_matrix[node1, node2] = (1-0.1) * pheromone_matrix[node1, node2] + 0.1
            pheromone_matrix[node2, node1] = pheromone_matrix[node1, node2]

    heuristics_matrix /= num_samples
    return heuristics_matrix
