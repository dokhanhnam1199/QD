import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses simulated annealing to explore the solution space by iteratively making small changes to a random tour and accepting or rejecting these changes based on a probability function that depends on the temperature and the change in tour length.}"""
    n = distance_matrix.shape[0]
    num_iterations = 1000
    temperature = 100.0
    cooling_rate = 0.99
    
    # Initialize a random tour
    tour = np.random.permutation(n)
    best_tour = tour.copy()

    def calculate_tour_length(tour):
        length = 0
        for i in range(n - 1):
            length += distance_matrix[tour[i], tour[i+1]]
        length += distance_matrix[tour[-1], tour[0]]
        return length

    current_length = calculate_tour_length(tour)
    best_length = current_length

    for _ in range(num_iterations):
        # Generate a neighbor by swapping two random cities
        i, j = np.random.choice(n, 2, replace=False)
        new_tour = tour.copy()
        new_tour[i], new_tour[j] = new_tour[j], new_tour[i]
        new_length = calculate_tour_length(new_tour)

        # Acceptance probability based on simulated annealing
        if new_length < current_length:
            acceptance_probability = 1.0
        else:
            acceptance_probability = np.exp((current_length - new_length) / temperature)

        # Accept the new tour with a certain probability
        if np.random.rand() < acceptance_probability:
            tour = new_tour
            current_length = new_length

            if current_length < best_length:
                best_length = current_length
                best_tour = tour.copy()

        # Cool the temperature
        temperature *= cooling_rate

    # Create a heuristics matrix based on the best tour
    heuristics_matrix = np.zeros((n, n))
    for i in range(n - 1):
        heuristics_matrix[best_tour[i], best_tour[i+1]] = 1
        heuristics_matrix[best_tour[i+1], best_tour[i]] = 1
    heuristics_matrix[best_tour[-1], best_tour[0]] = 1
    heuristics_matrix[best_tour[0], best_tour[-1]] = 1

    return heuristics_matrix
