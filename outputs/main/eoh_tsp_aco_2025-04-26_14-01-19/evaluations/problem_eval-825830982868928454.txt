import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm generates a heuristic matrix by iteratively constructing tours using a nearest neighbor approach with stochastic edge selection based on distance and a dynamically adjusted exploration factor.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 100
    exploration_factor = 0.5

    for _ in range(num_iterations):
        start_node = np.random.randint(n)
        current_node = start_node
        tour = [current_node]
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)

        while unvisited_nodes:
            distances = distance_matrix[current_node, :]
            probabilities = np.zeros(n)

            for node in unvisited_nodes:
                probabilities[node] = np.exp(-distances[node] / exploration_factor)

            if np.sum(probabilities) > 0:
                probabilities /= np.sum(probabilities)
                next_node = np.random.choice(n, p=probabilities)
            else:
                next_node = np.random.choice(list(unvisited_nodes))

            tour.append(next_node)
            unvisited_nodes.remove(next_node)

            heuristics_matrix[current_node, next_node] += 1
            heuristics_matrix[next_node, current_node] += 1

            current_node = next_node
        
        heuristics_matrix[current_node, start_node] += 1
        heuristics_matrix[start_node, current_node] += 1

        exploration_factor *= 0.99

    return heuristics_matrix
