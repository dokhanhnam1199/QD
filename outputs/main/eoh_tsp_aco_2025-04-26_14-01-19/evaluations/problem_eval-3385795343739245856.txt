import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples random tours and updates a heuristic matrix based on the frequency of edges appearing in short tours.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000
    best_tour_length = float('inf')

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        
        # Calculate the tour length
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[n-1], tour[0]]
        
        # Update heuristics based on tour quality
        if tour_length < best_tour_length:
            for i in range(n - 1):
                heuristics_matrix[tour[i], tour[i+1]] += 1/tour_length
                heuristics_matrix[tour[i+1], tour[i]] += 1/tour_length
            heuristics_matrix[tour[n-1], tour[0]] += 1/tour_length
            heuristics_matrix[tour[0], tour[n-1]] += 1/tour_length
            best_tour_length = tour_length
            
    return heuristics_matrix
