import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs multiple tours using a nearest neighbor approach from random starting nodes, then averages the edge occurrences across these tours to estimate edge importance.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Choose a random starting node
        nodes = list(range(n))
        start_node = np.random.choice(nodes)
        tour = [start_node]
        nodes_left = [node for node in nodes if node != start_node]

        # Build the tour using nearest neighbor
        while nodes_left:
            last_node = tour[-1]
            nearest_node = None
            min_distance = float('inf')

            for node in nodes_left:
                distance = distance_matrix[last_node, node]
                if distance < min_distance:
                    min_distance = distance
                    nearest_node = node

            tour.append(nearest_node)
            nodes_left.remove(nearest_node)
        
        tour.append(tour[0])

        # Update heuristics matrix
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
