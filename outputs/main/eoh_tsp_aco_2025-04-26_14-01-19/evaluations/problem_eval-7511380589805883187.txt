import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple TSP solutions using a random insertion heuristic, weighting edge occurrences by the inverse of the total tour length to prioritize shorter tours, and averaging across samples.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        nodes = list(range(n))
        start_node = np.random.choice(nodes)
        tour = [start_node]
        nodes.remove(start_node)

        while nodes:
            best_node_to_insert = -1
            best_insertion_index = -1
            min_increase = float('inf')
            
            for node_to_insert in nodes:
                for i in range(len(tour)):
                    insertion_index = i
                    increase = distance_matrix[tour[i-1], node_to_insert] + distance_matrix[node_to_insert, tour[i]] - distance_matrix[tour[i-1], tour[i]]
                    if increase < min_increase:
                        min_increase = increase
                        best_node_to_insert = node_to_insert
                        best_insertion_index = insertion_index
            
            tour.insert(best_insertion_index, best_node_to_insert)
            nodes.remove(best_node_to_insert)

        tour_length = 0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[(i + 1) % n]]

        weight = 1.0 / tour_length

        for i in range(n):
            node1 = tour[i]
            node2 = tour[(i + 1) % n]
            heuristics_matrix[node1, node2] += weight
            heuristics_matrix[node2, node1] += weight

    heuristics_matrix /= num_samples
    return heuristics_matrix
