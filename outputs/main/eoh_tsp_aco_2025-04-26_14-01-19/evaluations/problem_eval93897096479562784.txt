import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm refines TSP solutions using a combination of pheromone trails and a refined greedy approach with adaptive parameter tuning for exploration and exploitation.}"""
    n = distance_matrix.shape[0]
    pheromone = np.ones((n, n))
    heuristics_matrix = np.zeros((n, n))
    alpha = 0.8  # Reduced alpha for less pheromone influence
    beta = 2.5  # Increased beta for more distance influence
    evaporation_rate = 0.3  # Higher evaporation rate to encourage exploration
    iterations = 75 # Reduced iterations for faster convergence
    Q = 100 # Pheromone deposit constant
    
    for iteration in range(iterations):
        paths = []
        path_lengths = []

        for ant in range(n):
            current_node = ant
            visited = [False] * n
            visited[current_node] = True
            path = [current_node]
            path_length = 0

            while len(path) < n:
                probabilities = np.zeros(n)
                for next_node in range(n):
                    if not visited[next_node]:
                        probabilities[next_node] = (pheromone[current_node, next_node]**alpha) / (distance_matrix[current_node, next_node]**beta)
                
                # Normalize probabilities
                probabilities = probabilities / np.sum(probabilities[probabilities > 0])
                
                unvisited_nodes = [i for i in range(n) if not visited[i]]
                
                if not unvisited_nodes:
                    break
                    
                # Choose next node based on probabilities
                next_node = np.random.choice(range(n), p=probabilities) if np.sum(probabilities[probabilities > 0]) > 0 else np.random.choice(unvisited_nodes) 

                if not visited[next_node]:
                    path.append(next_node)
                    path_length += distance_matrix[current_node, next_node]
                    visited[next_node] = True
                    current_node = next_node
                else:
                    
                    unvisited_nodes = [i for i in range(n) if not visited[i]]
                    if unvisited_nodes:
                        next_node = np.random.choice(unvisited_nodes)
                        path.append(next_node)
                        path_length += distance_matrix[current_node, next_node]
                        visited[next_node] = True
                        current_node = next_node
                    else:
                        break

            path_length += distance_matrix[path[-1], path[0]]
            paths.append(path)
            path_lengths.append(path_length)

        pheromone *= (1 - evaporation_rate)

        best_path_index = np.argmin(path_lengths)
        best_path = paths[best_path_index]
        best_path_length = path_lengths[best_path_index]

        for i in range(n):
            pheromone[best_path[i], best_path[(i + 1) % n]] += Q / best_path_length
            pheromone[best_path[(i + 1) % n], best_path[i]] += Q / best_path_length

        for i in range(n):
            for j in range(n):
                heuristics_matrix[i, j] = pheromone[i, j] / distance_matrix[i, j]

    return heuristics_matrix
