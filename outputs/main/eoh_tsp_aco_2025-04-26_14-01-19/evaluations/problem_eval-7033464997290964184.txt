import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple random tours, and then calculates the frequency that each edge appears in the sampled tours, using these frequencies to define a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)

        # Update heuristics matrix
        for i in range(n):
            node1 = tour[i]
            node2 = tour[(i + 1) % n]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    # Normalize the heuristics matrix
    heuristics_matrix /= num_samples

    return heuristics_matrix
