import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm iteratively samples random tours, and updates a heuristic matrix favoring edges that appear frequently in shorter tours.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 1000
    
    for _ in range(num_iterations):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour = np.append(tour, tour[0])  # Return to starting node
        
        # Calculate the total distance of the tour
        tour_distance = 0
        for i in range(n):
            tour_distance += distance_matrix[tour[i], tour[i+1]]
        
        # Update the heuristics matrix based on the tour distance
        for i in range(n):
            u = tour[i]
            v = tour[i+1]
            heuristics_matrix[u, v] += 1 / (tour_distance + 1e-6) # Avoid division by zero
            heuristics_matrix[v, u] += 1 / (tour_distance + 1e-6)  # Assume symmetric distance matrix
            
    return heuristics_matrix
