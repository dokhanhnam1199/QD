import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm generates multiple random tours, calculates their lengths, and assigns higher probabilities to edges frequently used in shorter tours.}"""
    num_nodes = distance_matrix.shape[0]
    num_samples = 100  # Number of random tours to generate
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    tour_lengths = []

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(num_nodes)
        tour_length = 0
        for i in range(num_nodes - 1):
            tour_length += distance_matrix[tour[i], tour[i + 1]]
        tour_length += distance_matrix[tour[-1], tour[0]]  # Return to starting node
        tour_lengths.append(tour_length)

        # Update heuristics matrix based on tour length
        
    #Normalize tour length so edges in shorter tours have stronger weights
    normalized_tour_lengths = np.array(tour_lengths)
    normalized_tour_lengths = 1.0/(normalized_tour_lengths - np.min(tour_lengths) + 1e-6)

    for sample_idx in range(num_samples):
        tour = np.random.permutation(num_nodes)
        tour_length = 0
        for i in range(num_nodes - 1):
            tour_length += distance_matrix[tour[i], tour[i + 1]]
        tour_length += distance_matrix[tour[-1], tour[0]]
        
        tour = np.random.permutation(num_nodes)
        for i in range(num_nodes - 1):
            u, v = tour[i], tour[i + 1]
            heuristics_matrix[u, v] += normalized_tour_lengths[sample_idx]
            heuristics_matrix[v, u] += normalized_tour_lengths[sample_idx]
        u, v = tour[-1], tour[0]
        heuristics_matrix[u, v] += normalized_tour_lengths[sample_idx]
        heuristics_matrix[v, u] += normalized_tour_lengths[sample_idx]
        
    return heuristics_matrix
