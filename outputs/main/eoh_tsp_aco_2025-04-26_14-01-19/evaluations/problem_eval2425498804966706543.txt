import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple solutions using a stochastic nearest neighbor approach, weighting the edge frequencies based on the overall tour length to prioritize edges from shorter tours in the heuristic matrix.}"""
    n = distance_matrix.shape[0]
    num_samples = n * 3  # Sample multiple solutions
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        tour = [current_node]
        tour_length = 0

        while unvisited_nodes:
            #Stochastic nearest neighbor selection
            probabilities = np.array([1 / distance_matrix[current_node, neighbor] if distance_matrix[current_node, neighbor] > 0 else 0 for neighbor in unvisited_nodes])
            probabilities /= np.sum(probabilities)

            nearest_node = np.random.choice(list(unvisited_nodes), p=probabilities)

            tour_length += distance_matrix[current_node, nearest_node]
            current_node = nearest_node
            tour.append(current_node)
            unvisited_nodes.remove(current_node)

        tour_length += distance_matrix[current_node, start_node]

        # Weight the edge frequencies based on the tour length. Shorter tours have higher weights.
        weight = 1 / tour_length

        # Update heuristics matrix based on the tour
        for i in range(len(tour) - 1):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += weight
            heuristics_matrix[node2, node1] += weight

        heuristics_matrix[current_node, start_node] += weight
        heuristics_matrix[start_node, current_node] += weight

    return heuristics_matrix
