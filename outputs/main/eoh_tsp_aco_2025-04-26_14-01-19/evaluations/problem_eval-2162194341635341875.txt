import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm refines solutions using a combination of ant colony optimization and local search by iteratively constructing paths, updating pheromones, and applying a 2-opt swap to improve path quality.}"""
    
    n = distance_matrix.shape[0]
    pheromone = np.ones((n, n))  # Initialize pheromone trails
    heuristics_matrix = np.zeros((n, n))
    temperature = 1.0  # Initial temperature
    cooling_rate = 0.95
    alpha = 1.0  # Pheromone influence
    beta = 2.0  # Distance influence
    evaporation_rate = 0.1

    def two_opt_swap(path, i, k):
        """Reverses a section of the path from i+1 to k (inclusive)."""
        new_path = path[:i+1] + path[i+1:k+1][::-1] + path[k+1:]
        return new_path

    def two_opt(path):
        """Applies the 2-opt swap to improve the given path."""
        best_path = path
        improved = True
        while improved:
            improved = False
            for i in range(1, len(path) - 2):
                for k in range(i + 1, len(path) - 1):
                    new_path = two_opt_swap(path, i - 1, k)
                    new_path_length = 0
                    for j in range(len(new_path) - 1):
                        new_path_length += distance_matrix[new_path[j], new_path[j + 1]]
                    new_path_length += distance_matrix[new_path[-1], new_path[0]]

                    path_length = 0
                    for j in range(len(path) - 1):
                        path_length += distance_matrix[path[j], path[j + 1]]
                    path_length += distance_matrix[path[-1], path[0]]

                    if new_path_length < path_length:
                        best_path = new_path
                        improved = True
                        path = new_path
        return best_path


    for iteration in range(100):  # Number of iterations
        paths = []
        path_lengths = []
        for ant in range(n):  # Number of ants equals number of nodes
            current_node = ant
            visited = [False] * n
            visited[current_node] = True
            path = [current_node]
            path_length = 0

            while len(path) < n:
                probabilities = np.zeros(n)
                for i in range(n):
                    if not visited[i]:
                        probabilities[i] = (pheromone[current_node, i]**alpha) / (distance_matrix[current_node, i]**beta)
                
                if np.sum(probabilities) == 0:
                    # Handle the case where all probabilities are zero (e.g., all nodes visited or infinite distance)
                    # This could happen if the distance matrix has np.inf values.
                    # A simple workaround is to randomly choose an unvisited node.
                    unvisited_nodes = [i for i in range(n) if not visited[i]]
                    next_node = np.random.choice(unvisited_nodes)
                else:
                    probabilities /= np.sum(probabilities)
                    next_node = np.random.choice(n, p=probabilities)
                
                path.append(next_node)
                path_length += distance_matrix[current_node, next_node]
                visited[next_node] = True
                current_node = next_node

            path.append(path[0]) # Return to start node
            path_length += distance_matrix[path[-1], path[0]]
            
            #Apply 2-opt swap to improve the path
            path = two_opt(path)
            path_length = 0
            for j in range(len(path) - 1):
                path_length += distance_matrix[path[j], path[j + 1]]

            paths.append(path)
            path_lengths.append(path_length)

        # Update pheromone trails
        pheromone *= (1 - evaporation_rate)  # Evaporation

        best_path_index = np.argmin(path_lengths)
        best_path = paths[best_path_index]
        best_path_length = path_lengths[best_path_index]

        for i in range(n):
            pheromone[best_path[i], best_path[(i + 1) % n]] += 1.0 / best_path_length
            pheromone[best_path[(i + 1) % n], best_path[i]] += 1.0 / best_path_length
        
        # Update heuristics matrix
        for i in range(n):
            for j in range(n):
                heuristics_matrix[i, j] += pheromone[i, j] / distance_matrix[i, j]  # Combine pheromone and distance
        
        temperature *= cooling_rate  # Cool the temperature

    return heuristics_matrix
