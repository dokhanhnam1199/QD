import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples multiple random tours, then uses the inverse of the number of times each edge appears in those tours as a heuristic for edge importance.}
    """
    n = distance_matrix.shape[0]
    num_samples = 1000
    edge_counts = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        permutation = np.random.permutation(n)
        for i in range(n):
            u = permutation[i]
            v = permutation[(i + 1) % n]
            edge_counts[u, v] += 1
            edge_counts[v, u] += 1

    heuristics_matrix = np.where(edge_counts > 0, 1 / edge_counts, 0)
    return heuristics_matrix
