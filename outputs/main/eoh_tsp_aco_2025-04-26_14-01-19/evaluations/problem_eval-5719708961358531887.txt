import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple TSP solutions using a greedy heuristic based on shortest edge selection, and then averages the edge occurrences across these solutions to estimate edge importance.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        unvisited_edges = set()
        for i in range(n):
            for j in range(i + 1, n):
                unvisited_edges.add((i, j))

        path = []
        total_nodes_visited = set()
        
        while len(total_nodes_visited) < n and unvisited_edges:
            
            best_edge = None
            min_distance = float('inf')
            for edge in unvisited_edges:
                i, j = edge
                if distance_matrix[i, j] < min_distance:
                    min_distance = distance_matrix[i, j]
                    best_edge = edge
            
            u, v = best_edge
            unvisited_edges.remove(best_edge)

            if u not in total_nodes_visited or v not in total_nodes_visited:
                path.append((u, v))
                total_nodes_visited.add(u)
                total_nodes_visited.add(v)
                heuristics_matrix[u, v] += 1
                heuristics_matrix[v, u] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
