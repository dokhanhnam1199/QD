import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple solutions using a randomized nearest neighbor approach, weighting edge selection by a combination of distance and global path diversity, then averages the edge frequencies to generate a heuristic matrix.}"""
    num_nodes = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = num_nodes * 5

    for _ in range(num_samples):
        start_node = np.random.randint(num_nodes)
        current_node = start_node
        unvisited_nodes = set(range(num_nodes))
        unvisited_nodes.remove(start_node)
        path = [start_node]

        while unvisited_nodes:
            probabilities = np.zeros(len(unvisited_nodes))
            nodes = list(unvisited_nodes)
            for i, neighbor in enumerate(nodes):
                distance = distance_matrix[current_node, neighbor]
                # Encourage diversity by penalizing edges already frequently used
                diversity_factor = 1.0 / (1.0 + heuristics_matrix[current_node, neighbor])
                probabilities[i] = diversity_factor / distance # Weight by inverse distance and diversity

            probabilities /= np.sum(probabilities)
            
            next_node = np.random.choice(nodes, p=probabilities)
            path.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

        path.append(start_node)

        for i in range(len(path) - 1):
            node1 = path[i]
            node2 = path[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
