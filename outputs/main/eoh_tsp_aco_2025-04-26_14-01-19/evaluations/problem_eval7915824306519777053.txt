import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines shortest path computations with edge-based pheromone updates inspired by Ant Colony Optimization to estimate edge importance.}"""
    num_nodes = distance_matrix.shape[0]
    pheromone_matrix = np.ones_like(distance_matrix)  # Initialize pheromone levels
    num_ants = num_nodes
    alpha = 1.0  # Pheromone importance
    beta = 2.0  # Distance importance
    evaporation_rate = 0.5
    Q = 100.0 # Pheromone deposit constant
    
    for ant in range(num_ants):
        start_node = ant % num_nodes
        unvisited = set(range(num_nodes))
        unvisited.remove(start_node)
        current_node = start_node
        tour = [start_node]
        tour_length = 0

        while unvisited:
            probabilities = np.zeros(num_nodes)
            for next_node in range(num_nodes):
                if next_node in unvisited:
                    probabilities[next_node] = (pheromone_matrix[current_node, next_node]**alpha) * ((1.0 / distance_matrix[current_node, next_node])**beta)
            
            if np.sum(probabilities) == 0:
                next_node = min(unvisited, key=lambda x: distance_matrix[current_node, x])
            else:
                probabilities /= np.sum(probabilities)
                next_node = np.random.choice(num_nodes, p=probabilities)

            tour.append(next_node)
            tour_length += distance_matrix[current_node, next_node]
            unvisited.remove(next_node)
            current_node = next_node
        
        tour.append(start_node)
        tour_length += distance_matrix[current_node, start_node]
        
        #Pheromone update
        for i in range(num_nodes):
            node1 = tour[i]
            node2 = tour[i+1]
            pheromone_matrix[node1, node2] += Q / tour_length
            pheromone_matrix[node2, node1] += Q / tour_length

        #Pheromone evaporation
        pheromone_matrix *= (1 - evaporation_rate)

    # Normalize pheromone matrix
    max_pheromone = np.max(pheromone_matrix)
    if max_pheromone > 0:
        heuristics_matrix = pheromone_matrix / max_pheromone
    else:
        heuristics_matrix = pheromone_matrix

    return heuristics_matrix
