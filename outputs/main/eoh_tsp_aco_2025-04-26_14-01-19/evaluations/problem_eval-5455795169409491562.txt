import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by combining a greedy nearest neighbor approach with random perturbations to encourage exploration of diverse solutions.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    for start_node in range(n):
        for _ in range(5): 
            current_node = start_node
            unvisited = set(range(n))
            unvisited.remove(current_node)
            tour = [current_node]

            while unvisited:
                nearest_neighbor = -1
                min_distance = np.inf
                for neighbor in unvisited:
                    dist = distance_matrix[current_node, neighbor]
                    if dist < min_distance:
                        min_distance = dist
                        nearest_neighbor = neighbor

                if np.random.rand() < 0.1:
                    if len(unvisited) > 0:
                        next_node = np.random.choice(list(unvisited))
                    else:
                        next_node = None
                else:
                    next_node = nearest_neighbor

                if next_node is not None:
                    tour.append(next_node)
                    unvisited.remove(next_node)
                    current_node = next_node

            tour.append(start_node)

            for i in range(n):
                node1 = tour[i % n]
                node2 = tour[(i + 1) % n]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1

    return heuristics_matrix
