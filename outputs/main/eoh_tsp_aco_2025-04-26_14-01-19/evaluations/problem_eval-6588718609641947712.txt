import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses simulated annealing to iteratively improve tours and updates the heuristic matrix based on edge usage in accepted solutions.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    # Simulated Annealing parameters
    T = 1.0
    T_min = 0.00001
    alpha = 0.9
    
    # Initialize with a random tour
    current_tour = np.random.permutation(n)
    
    def calculate_tour_length(tour):
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[n-1], tour[0]]
        return tour_length
    
    current_cost = calculate_tour_length(current_tour)
    
    while T > T_min:
        # Generate a neighbor by swapping two cities
        i, j = np.random.choice(n, 2, replace=False)
        new_tour = current_tour.copy()
        new_tour[i], new_tour[j] = new_tour[j], new_tour[i]
        
        new_cost = calculate_tour_length(new_tour)
        
        # Acceptance probability
        ap = np.exp((current_cost - new_cost) / T)
        
        # Accept the new solution with probability ap
        if ap > np.random.random() or new_cost < current_cost:
            current_tour = new_tour
            current_cost = new_cost
            
            # Update heuristics matrix
            for k in range(n - 1):
                heuristics_matrix[current_tour[k], current_tour[k+1]] += 1
                heuristics_matrix[current_tour[k+1], current_tour[k]] += 1
            heuristics_matrix[current_tour[n-1], current_tour[0]] += 1
            heuristics_matrix[current_tour[0], current_tour[n-1]] += 1
            
        # Cool the temperature
        T = T * alpha
    
    # Normalize the heuristics matrix
    max_val = np.max(heuristics_matrix)
    if max_val > 0:
        heuristics_matrix = heuristics_matrix / max_val
    
    return heuristics_matrix
