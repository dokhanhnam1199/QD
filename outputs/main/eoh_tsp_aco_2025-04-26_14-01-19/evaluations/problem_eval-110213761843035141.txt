import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm learns edge importance by iteratively constructing TSP tours through biased random walks guided by edge attractiveness scores, which are updated based on tour quality and edge frequency.}"""
    n = distance_matrix.shape[0]
    attractiveness = np.ones_like(distance_matrix)  # Initialize attractiveness scores
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    for iteration in range(100):
        tour = []
        unvisited = set(range(n))
        start_node = np.random.choice(list(unvisited))
        current_node = start_node
        tour.append(current_node)
        unvisited.remove(current_node)
        
        while unvisited:
            probabilities = np.array([attractiveness[current_node, neighbor] for neighbor in range(n)])
            probabilities[list(unvisited)] = probabilities[list(unvisited)] / distance_matrix[current_node, list(unvisited)]
            probabilities[[i for i in range(n) if i not in unvisited]] = 0 #avoid visiting visited nodes
            if np.sum(probabilities) > 0:
                probabilities /= np.sum(probabilities)
                next_node = np.random.choice(n, p=probabilities)
            else:
                next_node = np.random.choice(list(unvisited))

            tour.append(next_node)
            unvisited.remove(next_node)
            current_node = next_node
        
        tour.append(start_node)
        
        tour_length = 0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[i+1]]
            
        # Update attractiveness based on tour quality and frequency
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            
            if tour_length > 0:
                attractiveness[node1, node2] += 1.0 / tour_length
                attractiveness[node2, node1] += 1.0 / tour_length
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1
                
    return heuristics_matrix
