import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines random path generation with pheromone-inspired reinforcement to build a heuristic matrix, favoring edges frequently found in shorter random paths.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_iterations = 100
    path_length_scaling = 1.0

    for _ in range(num_iterations):
        # Generate a random path
        path = np.random.permutation(n)
        path = np.append(path, path[0])  # Close the cycle

        # Calculate path length
        path_length = 0
        for i in range(n):
            path_length += distance_matrix[path[i], path[i + 1]]

        # Reinforce edges based on path length (pheromone-inspired)
        for i in range(n):
            node1 = path[i]
            node2 = path[i + 1]
            heuristics_matrix[node1, node2] += path_length_scaling / (path_length + 1e-6) # Add small constant to avoid division by zero
            heuristics_matrix[node2, node1] += path_length_scaling / (path_length + 1e-6)

    return heuristics_matrix
