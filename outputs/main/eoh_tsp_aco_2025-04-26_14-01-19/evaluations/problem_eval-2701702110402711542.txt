import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm generates multiple random tours using a nearest neighbor heuristic with stochasticity, and then averages the frequency each edge appears across these tours to create a heuristic matrix.}
    """
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        tour = [start_node]
        unvisited = set(range(n))
        unvisited.remove(start_node)

        current_node = start_node
        while unvisited:
            distances = distance_matrix[current_node, :]
            
            # Stochastic nearest neighbor: adds some randomness to the selection.
            probabilities = np.zeros(n)
            for i in unvisited:
                probabilities[i] = np.exp(-distances[i] / np.std(distances))
            probabilities /= np.sum(probabilities)
            
            next_node = np.random.choice(n, p=probabilities)

            if next_node not in unvisited:
                unvisited_probs = [probabilities[i] for i in unvisited]
                unvisited_probs /= np.sum(unvisited_probs)
                next_node = np.random.choice(list(unvisited), p=unvisited_probs)

            tour.append(next_node)
            unvisited.remove(next_node)
            current_node = next_node

        tour.append(start_node)  # Return to the starting node

        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
