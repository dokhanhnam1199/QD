import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses a nearest neighbor approach with probabilistic edge selection based on edge length and pheromone update inspired by Ant Colony Optimization to construct the heuristic matrix.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_iterations = 50
    alpha = 1  # Influence of pheromone
    beta = 2  # Influence of distance
    rho = 0.5  # Evaporation rate
    Q = 100  # Pheromone deposit constant

    # Initialize pheromone matrix
    pheromone_matrix = np.ones((n, n))

    for iteration in range(num_iterations):
        for start_node in range(n):
            tour = [start_node]
            unvisited = set(range(n))
            unvisited.remove(start_node)
            current_node = start_node

            while unvisited:
                probabilities = np.zeros(n)
                for neighbor in unvisited:
                    probabilities[neighbor] = (pheromone_matrix[current_node, neighbor]**alpha) / (distance_matrix[current_node, neighbor]**beta)
                probabilities /= np.sum(probabilities)

                next_node = np.random.choice(n, p=probabilities)

                if next_node not in unvisited:
                   candidates = list(unvisited)
                   next_node = min(candidates, key=lambda x: distance_matrix[current_node, x])
                tour.append(next_node)
                unvisited.remove(next_node)
                current_node = next_node

            tour.append(start_node)
            tour_length = sum(distance_matrix[tour[i], tour[i+1]] for i in range(n))

            # Update pheromone matrix
            for i in range(n):
                node1 = tour[i]
                node2 = tour[(i + 1) % n]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1
                pheromone_matrix[node1, node2] = (1 - rho) * pheromone_matrix[node1, node2] + rho * (Q / tour_length)
                pheromone_matrix[node2, node1] = pheromone_matrix[node1, node2]

    heuristics_matrix /= (num_iterations * n)
    return heuristics_matrix
