import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs multiple tours using a greedy insertion approach starting from a random cycle, then averages the edge occurrences across these tours to estimate edge importance.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Initialize a random cycle of 3 nodes
        nodes = list(range(n))
        start_nodes = np.random.choice(nodes, 3, replace=False)
        tour = list(start_nodes)
        nodes_left = [node for node in nodes if node not in start_nodes]
        tour.append(tour[0]) 

        # Iteratively insert nodes into the tour until all nodes are included
        while nodes_left:
            best_node_to_insert = None
            best_insertion_index = None
            min_insertion_cost = float('inf')

            for node_to_insert in nodes_left:
                for i in range(len(tour) - 1):
                    insertion_cost = distance_matrix[tour[i], node_to_insert] + distance_matrix[node_to_insert, tour[i+1]] - distance_matrix[tour[i], tour[i+1]]
                    if insertion_cost < min_insertion_cost:
                        min_insertion_cost = insertion_cost
                        best_node_to_insert = node_to_insert
                        best_insertion_index = i + 1

            tour.insert(best_insertion_index, best_node_to_insert)
            nodes_left.remove(best_node_to_insert)
        
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
