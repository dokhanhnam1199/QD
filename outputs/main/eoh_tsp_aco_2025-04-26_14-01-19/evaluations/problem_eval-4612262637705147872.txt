import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm generates multiple random tours, scores each edge based on how often it appears in good tours, and returns a matrix of these scores.}
    """
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)

        # Calculate tour length
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]

        # Normalize tour length (lower is better)
        normalized_length = 1 / (tour_length + 1e-6)  # Add a small constant to avoid division by zero

        # Update edge scores based on normalized tour length
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += normalized_length
            heuristics_matrix[tour[i+1], tour[i]] += normalized_length  # Symmetric
        heuristics_matrix[tour[-1], tour[0]] += normalized_length
        heuristics_matrix[tour[0], tour[-1]] += normalized_length

    # Normalize the heuristics matrix
    heuristics_matrix = heuristics_matrix / num_samples

    return heuristics_matrix
