import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm refines the solution by iteratively constructing paths, applying a local search to improve them, and updating pheromone trails based on the improved path lengths, using a simulated annealing-inspired temperature schedule to control exploration.}"""
    
    n = distance_matrix.shape[0]
    pheromone = np.ones((n, n))  # Initialize pheromone trails
    heuristics_matrix = np.zeros((n, n))
    temperature = 1.0  # Initial temperature
    cooling_rate = 0.95
    alpha = 1.0  # Pheromone influence
    beta = 2.0  # Distance influence
    evaporation_rate = 0.1

    def calculate_path_length(path):
        length = 0
        for i in range(len(path) - 1):
            length += distance_matrix[path[i], path[i+1]]
        length += distance_matrix[path[-1], path[0]]
        return length

    def local_search(path):
        best_path = path[:]
        best_length = calculate_path_length(path)
        for i in range(n):
            for j in range(i + 1, n):
                new_path = path[:]
                new_path[i], new_path[j] = new_path[j], new_path[i]
                new_length = calculate_path_length(new_path)
                if new_length < best_length:
                    best_length = new_length
                    best_path = new_path[:]
        return best_path, best_length

    for iteration in range(100):  # Number of iterations
        paths = []
        path_lengths = []
        for ant in range(n):  # Number of ants equals number of nodes
            current_node = ant
            visited = [False] * n
            visited[current_node] = True
            path = [current_node]
            
            while len(path) < n:
                probabilities = np.zeros(n)
                for i in range(n):
                    if not visited[i]:
                        probabilities[i] = (pheromone[current_node, i]**alpha) / (distance_matrix[current_node, i]**beta)
                
                if np.sum(probabilities) == 0:
                    unvisited_nodes = [i for i in range(n) if not visited[i]]
                    next_node = np.random.choice(unvisited_nodes)
                else:
                    probabilities /= np.sum(probabilities)
                    next_node = np.random.choice(n, p=probabilities)
                
                path.append(next_node)
                visited[next_node] = True
                current_node = next_node

            # Local Search
            path, path_length = local_search(path)
            paths.append(path)
            path_lengths.append(path_length)

        # Update pheromone trails
        pheromone *= (1 - evaporation_rate)  # Evaporation

        best_path_index = np.argmin(path_lengths)
        best_path = paths[best_path_index]
        best_path_length = path_lengths[best_path_index]

        for i in range(n):
            pheromone[best_path[i], best_path[(i + 1) % n]] += 1.0 / best_path_length
            pheromone[best_path[(i + 1) % n], best_path[i]] += 1.0 / best_path_length
        
        # Update heuristics matrix
        for i in range(n):
            for j in range(n):
                heuristics_matrix[i, j] += pheromone[i, j] / distance_matrix[i, j]  # Combine pheromone and distance
        
        temperature *= cooling_rate  # Cool the temperature

    return heuristics_matrix
