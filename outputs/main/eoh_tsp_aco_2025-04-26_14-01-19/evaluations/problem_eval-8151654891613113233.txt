import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm generates multiple random tours, applies a local search to improve them, and then averages the frequency with which each edge appears in the improved tours to produce a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix)

    def calculate_tour_length(tour):
        length = 0
        for i in range(n - 1):
            length += distance_matrix[tour[i], tour[i+1]]
        length += distance_matrix[tour[-1], tour[0]]
        return length
    
    def local_search(tour):
        improved = True
        while improved:
            improved = False
            for i in range(n):
                for j in range(i + 2, n):
                    new_tour = tour[:i] + tour[i:j+1][::-1] + tour[j+1:]
                    if calculate_tour_length(new_tour) < calculate_tour_length(tour):
                        tour = new_tour
                        improved = True
        return tour
    
    for _ in range(num_samples):
        tour = np.random.permutation(n)
        tour = local_search(tour)
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += 1
            heuristics_matrix[tour[i+1], tour[i]] += 1
        heuristics_matrix[tour[-1], tour[0]] += 1
        heuristics_matrix[tour[0], tour[-1]] += 1

    heuristics_matrix = heuristics_matrix / num_samples
    return heuristics_matrix
