import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by combining shortest path information with edge frequency from iteratively improved random tours.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 100

    # Initialize heuristics with inverse of shortest path distances
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = 1 / distance_matrix[i, j]
            else:
                heuristics_matrix[i, j] = 0

    # Iteratively improve random tours and update heuristics
    for _ in range(num_iterations):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[n-1], tour[0]]

        # Improve the tour using 2-opt swaps
        improved_tour = True
        while improved_tour:
            improved_tour = False
            for i in range(n):
                for j in range(i + 2, n):
                    new_tour_length = tour_length - distance_matrix[tour[i-1], tour[i]] - distance_matrix[tour[j-1], tour[j]] + distance_matrix[tour[i-1], tour[j-1]] + distance_matrix[tour[i], tour[j]]
                    if new_tour_length < tour_length:
                        # Perform 2-opt swap
                        new_tour = tour[:i] + tour[i:j][::-1] + tour[j:]
                        tour = new_tour
                        tour_length = new_tour_length
                        improved_tour = True

        # Update heuristics based on the improved tour
        for i in range(n):
            node1 = tour[i]
            node2 = tour[(i + 1) % n]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    return heuristics_matrix
