import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines ant colony optimization with a more aggressive pheromone update strategy and a simplified acceptance criterion in local search, emphasizing exploration.}"""
    n = distance_matrix.shape[0]
    pheromone = np.ones((n, n))  # Initialize pheromone trails
    heuristics_matrix = np.zeros((n, n))
    temperature = 0.75  # Initial temperature (reduced)
    cooling_rate = 0.97 # slower cooling
    alpha = 0.7  # Pheromone influence
    beta = 3.0  # Distance influence
    evaporation_rate = 0.3 # higher evaporation
    local_search_iterations = 3 # fewer iterations

    for iteration in range(60):  # Reduced number of iterations
        paths = []
        path_lengths = []
        for ant in range(n):  # Number of ants equals number of nodes
            current_node = ant
            visited = [False] * n
            visited[current_node] = True
            path = [current_node]
            path_length = 0

            while len(path) < n:
                probabilities = np.zeros(n)
                for i in range(n):
                    if not visited[i]:
                        probabilities[i] = (pheromone[current_node, i]**alpha) / (distance_matrix[current_node, i]**beta)

                if np.sum(probabilities) == 0:
                    unvisited_nodes = [i for i in range(n) if not visited[i]]
                    next_node = np.random.choice(unvisited_nodes)
                else:
                    probabilities /= np.sum(probabilities)
                    next_node = np.random.choice(n, p=probabilities)

                path.append(next_node)
                path_length += distance_matrix[current_node, next_node]
                visited[next_node] = True
                current_node = next_node

            path_length += distance_matrix[path[-1], path[0]]  # Return to starting node
            paths.append(path)
            path_lengths.append(path_length)

        # Local search (2-opt swap) with simplified acceptance
        for ant in range(n):
            path = paths[ant]
            path_length = path_lengths[ant]

            for _ in range(local_search_iterations):
                i, j = np.random.choice(n, 2, replace=False)
                if i > j:
                    i, j = j, i

                new_path = path[:i] + path[i:j+1][::-1] + path[j+1:]
                new_path_length = 0
                for k in range(n - 1):
                    new_path_length += distance_matrix[new_path[k], new_path[k+1]]
                new_path_length += distance_matrix[new_path[-1], new_path[0]]

                if new_path_length < path_length or np.random.rand() < 0.1: #always accept slightly worse solutions
                    paths[ant] = new_path
                    path_lengths[ant] = new_path_length
                    path = new_path
                    path_length = new_path_length


        # Update pheromone trails - more aggressive update
        pheromone *= (1 - evaporation_rate)  # Evaporation

        best_path_index = np.argmin(path_lengths)
        best_path = paths[best_path_index]
        best_path_length = path_lengths[best_path_index]

        for i in range(n):
            pheromone[best_path[i], best_path[(i + 1) % n]] += 3.0 / best_path_length # increased intensity
            pheromone[best_path[(i + 1) % n], best_path[i]] += 3.0 / best_path_length

        # Update heuristics matrix
        for i in range(n):
            for j in range(n):
                heuristics_matrix[i, j] += pheromone[i, j] / distance_matrix[i, j]  # Combine pheromone and distance

        temperature *= cooling_rate  # Cool the temperature

    return heuristics_matrix
