import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm iteratively samples random tours, calculates the total distance of each tour, and updates a heuristic matrix to favor edges frequently present in shorter tours.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000
    temperature = 1.0
    cooling_rate = 0.99

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour_distance = 0
        for i in range(n - 1):
            tour_distance += distance_matrix[tour[i], tour[i+1]]
        tour_distance += distance_matrix[tour[-1], tour[0]]

        # Update heuristics matrix based on tour distance
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += np.exp(-tour_distance / temperature)
            heuristics_matrix[tour[i+1], tour[i]] += np.exp(-tour_distance / temperature)
        heuristics_matrix[tour[-1], tour[0]] += np.exp(-tour_distance / temperature)
        heuristics_matrix[tour[0], tour[-1]] += np.exp(-tour_distance / temperature)
        
        temperature *= cooling_rate

    return heuristics_matrix
