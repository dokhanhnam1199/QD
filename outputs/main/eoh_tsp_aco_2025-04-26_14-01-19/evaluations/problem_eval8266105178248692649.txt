import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples random tours, calculates their lengths, and assigns higher probabilities to edges that appear more frequently in shorter tours.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]  # Return to start

        # Update heuristics based on tour length
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += 1 / tour_length
            heuristics_matrix[tour[i+1], tour[i]] += 1 / tour_length #symmetric

        heuristics_matrix[tour[-1], tour[0]] += 1 / tour_length
        heuristics_matrix[tour[0], tour[-1]] += 1 / tour_length #symmetric


    return heuristics_matrix
