import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses stochastic sampling of near-optimal tours by iteratively building tours using a nearest neighbor approach with probabilistic edge selection based on edge cost and a temperature parameter, and then aggregates edge usage frequencies to produce a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 100

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        tour = [current_node]

        while unvisited_nodes:
            distances = np.array([distance_matrix[current_node, i] if i in unvisited_nodes else np.inf for i in range(n)])
            
            # Use softmax to convert distances to probabilities
            temperature = 1.0  # Adjust for exploration vs. exploitation
            probabilities = np.exp(-distances / temperature)
            probabilities[np.isinf(probabilities)] = 0 # remove infinities generated during softmax operation
            probabilities = probabilities / np.sum(probabilities)

            next_node = np.random.choice(n, p=probabilities)
            
            if next_node not in unvisited_nodes:
                available_nodes = list(unvisited_nodes)
                if available_nodes:
                    next_node = min(available_nodes, key=lambda x: distance_matrix[current_node, x])
                else:
                    break 
                
            tour.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node
        
        tour.append(start_node)
        
        for i in range(len(tour) - 1):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix = heuristics_matrix / num_samples
    return heuristics_matrix
