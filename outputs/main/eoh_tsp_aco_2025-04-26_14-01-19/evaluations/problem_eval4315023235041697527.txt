import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm refines TSP solutions through iterative construction using a greedy approach guided by pheromone trails and edge costs, followed by pheromone reinforcement based on tour quality.}"""
    n = distance_matrix.shape[0]
    pheromone = np.ones((n, n))
    heuristics_matrix = np.zeros((n, n))
    alpha = 1.0
    beta = 2.0
    evaporation_rate = 0.1
    iterations = 100

    for iteration in range(iterations):
        paths = []
        path_lengths = []

        for ant in range(n):
            current_node = ant
            visited = [False] * n
            visited[current_node] = True
            path = [current_node]
            path_length = 0

            while len(path) < n:
                best_next_node = -1
                best_heuristic_value = -1

                for next_node in range(n):
                    if not visited[next_node]:
                        heuristic_value = (pheromone[current_node, next_node]**alpha) / (distance_matrix[current_node, next_node]**beta)
                        if heuristic_value > best_heuristic_value:
                            best_heuristic_value = heuristic_value
                            best_next_node = next_node

                if best_next_node == -1:
                    unvisited_nodes = [i for i in range(n) if not visited[i]]
                    best_next_node = np.random.choice(unvisited_nodes)

                path.append(best_next_node)
                path_length += distance_matrix[current_node, best_next_node]
                visited[best_next_node] = True
                current_node = best_next_node

            path_length += distance_matrix[path[-1], path[0]]
            paths.append(path)
            path_lengths.append(path_length)

        pheromone *= (1 - evaporation_rate)

        best_path_index = np.argmin(path_lengths)
        best_path = paths[best_path_index]
        best_path_length = path_lengths[best_path_index]

        for i in range(n):
            pheromone[best_path[i], best_path[(i + 1) % n]] += 1.0 / best_path_length
            pheromone[best_path[(i + 1) % n], best_path[i]] += 1.0 / best_path_length

        for i in range(n):
            for j in range(n):
                heuristics_matrix[i, j] = pheromone[i, j] / distance_matrix[i, j]

    return heuristics_matrix
