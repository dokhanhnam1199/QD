import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristics matrix by prioritizing edges that connect nodes with high degree in a minimum spanning tree and short distances.}"""
    n = distance_matrix.shape[0]
    mst = minimum_spanning_tree(distance_matrix)
    degree = np.sum(mst, axis=0)
    heuristics_matrix = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = (degree[i] + degree[j]) / (distance_matrix[i, j] + 1e-9)
    return heuristics_matrix

def minimum_spanning_tree(distance_matrix):
    n = distance_matrix.shape[0]
    mst = np.zeros((n, n))
    visited = [False] * n
    edges = []
    visited[0] = True
    for _ in range(n - 1):
        min_edge = None
        min_dist = float('inf')
        for i in range(n):
            if visited[i]:
                for j in range(n):
                    if not visited[j] and distance_matrix[i, j] < min_dist:
                        min_dist = distance_matrix[i, j]
                        min_edge = (i, j)
        if min_edge:
            u, v = min_edge
            mst[u, v] = mst[v, u] = 1
            visited[v] = True
    return heuristics_matrix
