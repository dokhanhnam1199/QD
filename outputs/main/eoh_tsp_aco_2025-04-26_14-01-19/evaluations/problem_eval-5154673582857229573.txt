import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple random tours, progressively biases the sampling towards shorter tours, and returns a matrix indicating how frequently each edge appears in the shorter tours.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    temperature = 1.0
    cooling_rate = 0.99
    
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    for _ in range(num_samples):
        # Generate a random tour
        nodes = list(range(n))
        np.random.shuffle(nodes)
        tour = nodes + [nodes[0]]  # Return to starting node
        
        # Calculate tour length
        tour_length = 0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        
        # Bias the sampling towards shorter tours
        probability = np.exp(-tour_length / temperature)
        
        # Update the heuristics matrix based on the tour
        for i in range(n):
            heuristics_matrix[tour[i], tour[i+1]] += probability
            heuristics_matrix[tour[i+1], tour[i]] += probability
        
        # Cool the temperature
        temperature *= cooling_rate
    
    # Normalize the heuristics matrix
    heuristics_matrix = heuristics_matrix / np.max(heuristics_matrix)
    
    return heuristics_matrix
