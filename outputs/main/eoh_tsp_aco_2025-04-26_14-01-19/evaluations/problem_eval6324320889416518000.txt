import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses a greedy approach combined with random restarts, path smoothing, and weighted heuristic updates based on tour length to create a heuristic matrix reflecting edge usage in good-quality tours.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_restarts = 50
    smoothing_iterations = 5

    for restart in range(num_restarts):
        # Greedy tour construction with random start
        start_node = np.random.randint(n)
        tour = [start_node]
        unvisited = set(range(n))
        unvisited.remove(start_node)
        current_node = start_node

        while unvisited:
            nearest_neighbor = min(unvisited, key=lambda x: distance_matrix[current_node, x])
            tour.append(nearest_neighbor)
            unvisited.remove(nearest_neighbor)
            current_node = nearest_neighbor
        tour.append(start_node)

        # Path smoothing (2-opt swaps)
        for _ in range(smoothing_iterations):
            improved = False
            for i in range(1, n):
                for j in range(i + 1, n + 1):
                    if j - i == 1:
                        continue

                    current_cost = distance_matrix[tour[i - 1], tour[i]] + distance_matrix[tour[j - 1], tour[j % n]]
                    new_cost = distance_matrix[tour[i - 1], tour[j - 1]] + distance_matrix[tour[i], tour[j % n]]

                    if new_cost < current_cost:
                        tour[i:j] = reversed(tour[i:j])
                        improved = True
            if not improved:
                break

        # Calculate tour length
        tour_length = 0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[(i + 1) % n]]

        # Update heuristic matrix with weight based on tour length (shorter tours have higher weight)
        weight = 1.0 / (tour_length + 1e-6)  # Add a small constant to avoid division by zero
        for i in range(n):
            node1 = tour[i]
            node2 = tour[(i + 1) % n]
            heuristics_matrix[node1, node2] += weight
            heuristics_matrix[node2, node1] += weight

    heuristics_matrix /= num_restarts
    return heuristics_matrix
