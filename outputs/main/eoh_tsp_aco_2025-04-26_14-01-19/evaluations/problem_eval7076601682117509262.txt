import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by using a weighted combination of nearest neighbor distances and random edge selection probabilities.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for start_node in range(n):
        for _ in range(5):
            current_node = start_node
            unvisited = set(range(n))
            unvisited.remove(current_node)
            tour = [current_node]

            while unvisited:
                nearest_neighbors = []
                distances = []
                for neighbor in unvisited:
                    dist = distance_matrix[current_node, neighbor]
                    nearest_neighbors.append(neighbor)
                    distances.append(dist)
                
                probabilities = np.exp(-np.array(distances) / np.mean(distances))
                probabilities /= np.sum(probabilities)
                
                if np.random.rand() < 0.1:
                    next_node = np.random.choice(list(unvisited))
                else:
                    next_node = np.random.choice(nearest_neighbors, p=probabilities)
                
                tour.append(next_node)
                unvisited.remove(next_node)
                current_node = next_node
                
            tour.append(start_node)

            for i in range(n):
                node1 = tour[i % n]
                node2 = tour[(i + 1) % n]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1

    return heuristics_matrix
