import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple random TSP solutions using a nearest neighbor heuristic, weighting edge frequencies by the inverse of the tour length to favor shorter tours.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        tour = [current_node]
        tour_length = 0

        while unvisited_nodes:
            nearest_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node, node])
            tour_length += distance_matrix[current_node, nearest_node]
            current_node = nearest_node
            tour.append(current_node)
            unvisited_nodes.remove(current_node)

        tour_length += distance_matrix[current_node, start_node]
        
        # Weight the edge frequencies by the inverse of the tour length
        weight = 1.0 / tour_length if tour_length > 0 else 0.0 # avoid zero division

        start_node = tour[0]
        for i in range(len(tour) -1):
          heuristics_matrix[tour[i], tour[i+1]] += weight
          heuristics_matrix[tour[i+1], tour[i]] += weight
          
        heuristics_matrix[tour[-1], start_node] += weight
        heuristics_matrix[start_node, tour[-1]] += weight

    return heuristics_matrix
