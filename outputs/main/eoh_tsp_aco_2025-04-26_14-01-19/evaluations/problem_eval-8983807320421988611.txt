import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by iteratively generating tours using a nearest neighbor approach with probabilistic edge selection based on distance and pheromone-like reinforcement.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 100
    pheromone_matrix = np.ones_like(distance_matrix)  # Initialize pheromone trails

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        tour = [current_node]

        while unvisited_nodes:
            # Calculate probabilities based on distance and pheromone
            probabilities = (pheromone_matrix[current_node, :] ** 1) / (distance_matrix[current_node, :] ** 2)  # Adjust exponents as needed
            probabilities = np.where(np.isin(range(n), list(unvisited_nodes)), probabilities, 0)
            probabilities /= np.sum(probabilities)
            
            #Probabilistic Selection
            try:
                nearest_node = np.random.choice(n, p=probabilities)
            except ValueError:
                # Handle case where probabilities sum to zero (all unvisited nodes have probability 0)
                available_nodes = list(unvisited_nodes)
                if available_nodes:
                    nearest_node = min(available_nodes, key=lambda x: distance_matrix[current_node, x]) #fallback to nearest
                else:
                    break  # No more unvisited nodes

            if nearest_node not in unvisited_nodes:
                available_nodes = list(unvisited_nodes)
                if available_nodes:
                    nearest_node = min(available_nodes, key=lambda x: distance_matrix[current_node, x])
                else:
                    break
            
            tour.append(nearest_node)
            unvisited_nodes.remove(nearest_node)

            heuristics_matrix[current_node, nearest_node] += 1
            heuristics_matrix[nearest_node, current_node] += 1

            # Pheromone update (reinforce the chosen edge)
            pheromone_matrix[current_node, nearest_node] += 0.1  # Adjust reinforcement factor as needed
            pheromone_matrix[nearest_node, current_node] += 0.1

            current_node = nearest_node

        tour.append(start_node)

        heuristics_matrix[current_node, start_node] += 1
        heuristics_matrix[start_node, current_node] += 1

        # Evaporate pheromones (optional, but often improves performance)
        pheromone_matrix *= 0.99  # Adjust evaporation rate as needed
        pheromone_matrix = np.clip(pheromone_matrix, 0.01, 10)

    return heuristics_matrix
