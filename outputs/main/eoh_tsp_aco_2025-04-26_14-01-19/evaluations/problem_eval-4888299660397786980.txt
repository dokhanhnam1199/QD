import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses a genetic algorithm approach to evolve a population of TSP solutions, using edge frequency in the best solutions to guide heuristic matrix generation.}"""
    n = distance_matrix.shape[0]
    population_size = 50
    num_generations = 20
    mutation_rate = 0.1

    # Initialize population
    population = []
    for _ in range(population_size):
        tour = np.random.permutation(n)
        population.append(tour)

    def calculate_fitness(tour):
        total_distance = 0
        for i in range(n - 1):
            total_distance += distance_matrix[tour[i], tour[i+1]]
        total_distance += distance_matrix[tour[n-1], tour[0]]
        return 1 / total_distance  # Higher fitness for shorter tours

    def crossover(parent1, parent2):
        start = np.random.randint(n)
        length = np.random.randint(1, n // 2)
        child = np.zeros(n, dtype=int) - 1
        
        for i in range(length):
            child[(start + i) % n] = parent1[(start + i) % n]
        
        ptr = 0
        for i in range(n):
            if parent2[i] not in child:
                while child[ptr] != -1:
                    ptr += 1
                child[ptr] = parent2[i]

        return child

    def mutate(tour):
        if np.random.rand() < mutation_rate:
            i, j = np.random.choice(n, 2, replace=False)
            tour[i], tour[j] = tour[j], tour[i]
        return tour

    # Evolve population
    for _ in range(num_generations):
        # Calculate fitness for each tour
        fitness_scores = [calculate_fitness(tour) for tour in population]

        # Select parents based on fitness (roulette wheel selection)
        probabilities = np.array(fitness_scores) / np.sum(fitness_scores)
        
        new_population = []
        for _ in range(population_size):
            parent1_idx = np.random.choice(population_size, p=probabilities)
            parent2_idx = np.random.choice(population_size, p=probabilities)
            
            parent1 = population[parent1_idx]
            parent2 = population[parent2_idx]

            # Crossover and mutation
            child = crossover(parent1, parent2)
            child = mutate(child)
            new_population.append(child)
            
        population = new_population

    # Select best tours and create heuristic matrix
    fitness_scores = [calculate_fitness(tour) for tour in population]
    best_tour_indices = np.argsort(fitness_scores)[-population_size // 5:]  # Select top 20%
    best_tours = [population[i] for i in best_tour_indices]

    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    for tour in best_tours:
        for i in range(n):
            node1 = tour[i]
            node2 = tour[(i + 1) % n]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= len(best_tours)
    return heuristics_matrix
