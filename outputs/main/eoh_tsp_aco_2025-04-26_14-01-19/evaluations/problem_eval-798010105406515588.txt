import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple greedy solutions with a probability-based neighbor selection biased by both distance and edge frequency, and averages the frequency each edge appears in these solutions to generate a heuristic matrix.}"""
    num_nodes = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    edge_frequency = np.zeros_like(distance_matrix, dtype=float)
    num_samples = num_nodes * 5

    for _ in range(num_samples):
        start_node = np.random.randint(num_nodes)
        current_node = start_node
        unvisited_nodes = set(range(num_nodes))
        unvisited_nodes.remove(start_node)
        path = [start_node]

        while unvisited_nodes:
            probabilities = np.zeros(num_nodes)
            for neighbor in unvisited_nodes:
                distance = distance_matrix[current_node, neighbor]
                # Bias probability by both distance and edge frequency
                probabilities[neighbor] = (1 / distance) * (1 + edge_frequency[current_node, neighbor])
            
            # Normalize probabilities for unvisited nodes
            probabilities[list(unvisited_nodes)] /= np.sum(probabilities[list(unvisited_nodes)])
            
            # Choose the next node based on probabilities
            nearest_node = np.random.choice(num_nodes, p=probabilities)

            path.append(nearest_node)
            unvisited_nodes.remove(nearest_node)
            current_node = nearest_node

        path.append(start_node)

        for i in range(len(path) - 1):
            node1 = path[i]
            node2 = path[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1
            edge_frequency[node1, node2] += 1
            edge_frequency[node2, node1] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
