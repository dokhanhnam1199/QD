import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs solutions by iteratively adding the "best" edge according to a weighted combination of its distance and an evolving edge importance score, promoting diversification through occasional random edge selections.}"""
    n = distance_matrix.shape[0]
    importance_matrix = np.zeros_like(distance_matrix, dtype=float)
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    alpha = 0.7
    beta = 0.3
    num_iterations = 50
    random_selection_prob = 0.1

    for _ in range(num_iterations):
        unvisited = set(range(n))
        current_node = np.random.choice(list(unvisited))
        unvisited.remove(current_node)
        path = [current_node]

        while unvisited:
            best_neighbor = None
            best_score = -1

            if np.random.rand() < random_selection_prob:
                # Random edge selection for diversification
                possible_neighbors = list(unvisited)
                next_node = np.random.choice(possible_neighbors)
            else:
                # Heuristic-based edge selection
                for neighbor in unvisited:
                    score = alpha * (1 / distance_matrix[current_node, neighbor]) + beta * importance_matrix[current_node, neighbor]
                    if score > best_score:
                        best_score = score
                        best_neighbor = neighbor

                next_node = best_neighbor

            path.append(next_node)
            unvisited.remove(next_node)
            importance_matrix[current_node, next_node] += 1
            importance_matrix[next_node, current_node] += 1
            current_node = next_node

        path.append(path[0])

        for i in range(n):
            node1 = path[i]
            node2 = path[i + 1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1
            
    heuristics_matrix /= num_iterations
    return heuristics_matrix
