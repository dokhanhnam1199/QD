import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm constructs tours by iteratively selecting the nearest unvisited neighbor with a probability biased by pheromone levels and a fixed desirability, updating pheromones based on tour length and edge usage, and returns a matrix representing edge frequencies across multiple tours.}
    """
    n = distance_matrix.shape[0]
    pheromone_matrix = np.ones_like(distance_matrix)
    alpha = 0.5
    beta = 1.5
    desirability = 0.1
    num_ants = 15
    num_iterations = 40
    evaporation_rate = 0.3
    Q = 10

    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for iteration in range(num_iterations):
        ant_tours = []
        for ant in range(num_ants):
            start_node = np.random.randint(n)
            tour = [start_node]
            unvisited = set(range(n))
            unvisited.remove(start_node)

            current_node = start_node
            while unvisited:
                probabilities = np.zeros(n)
                for i in unvisited:
                    probabilities[i] = (pheromone_matrix[current_node, i]**alpha) * ((1/(distance_matrix[current_node, i]+1e-9))**beta) + desirability # adding 1e-9 to avoid division by zero
                probabilities /= np.sum(probabilities)

                next_node = np.random.choice(list(range(n)), p=probabilities)
                if next_node not in unvisited:
                  continue

                tour.append(next_node)
                unvisited.remove(next_node)
                current_node = next_node

            tour.append(start_node)
            ant_tours.append(tour)

        # Update pheromones
        pheromone_matrix *= (1 - evaporation_rate)

        for tour in ant_tours:
            tour_length = 0
            for i in range(n):
                tour_length += distance_matrix[tour[i], tour[i+1]]

            for i in range(n):
                node1 = tour[i]
                node2 = tour[i+1]
                pheromone_matrix[node1, node2] += Q / (tour_length + 1e-9)
                pheromone_matrix[node2, node1] += Q / (tour_length + 1e-9)

        # Aggregate edge frequencies for heuristic matrix
        for tour in ant_tours:
            for i in range(n):
                node1 = tour[i]
                node2 = tour[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= (num_ants * num_iterations)
    return heuristics_matrix
