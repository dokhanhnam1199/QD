import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm employs a modified ant colony optimization approach with a dynamic pheromone update and balanced exploration to identify promising edges for the TSP solution.}"""
    
    n = distance_matrix.shape[0]
    pheromone = np.ones((n, n)) * 0.1  # Initialize pheromone trails
    heuristics_matrix = np.zeros((n, n))
    alpha = 1.0  # Pheromone influence
    beta = 2.0  # Distance influence
    evaporation_rate = 0.1
    num_ants = n  # Increased number of ants
    Q = 1.0  # Pheromone deposit constant

    for iteration in range(100):  # More iterations
        paths = []
        path_lengths = []
        for ant in range(num_ants):
            current_node = np.random.randint(n)
            visited = [False] * n
            visited[current_node] = True
            path = [current_node]
            path_length = 0

            while len(path) < n:
                probabilities = np.zeros(n)
                for i in range(n):
                    if not visited[i]:
                        probabilities[i] = (pheromone[current_node, i]**alpha) / (distance_matrix[current_node, i]**beta)
                
                if np.sum(probabilities) == 0:
                    unvisited_nodes = [i for i in range(n) if not visited[i]]
                    next_node = np.random.choice(unvisited_nodes)
                else:
                    probabilities /= np.sum(probabilities)
                    next_node = np.random.choice(n, p=probabilities)
                
                path.append(next_node)
                path_length += distance_matrix[current_node, next_node]
                visited[next_node] = True
                current_node = next_node

            path_length += distance_matrix[path[-1], path[0]]
            paths.append(path)
            path_lengths.append(path_length)

        # Update pheromone trails
        pheromone *= (1 - evaporation_rate)

        for path, length in zip(paths, path_lengths):
            for i in range(n):
                pheromone[path[i], path[(i + 1) % n]] += Q / length
                pheromone[path[(i + 1) % n], path[i]] += Q / length

        # Update heuristics matrix
        for i in range(n):
            for j in range(n):
                heuristics_matrix[i, j] += pheromone[i, j] / distance_matrix[i, j]

    return heuristics_matrix
