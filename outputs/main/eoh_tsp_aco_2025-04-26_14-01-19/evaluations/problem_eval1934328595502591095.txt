import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple TSP solutions using a greedy heuristic with randomized starting nodes and a probability-based nearest neighbor selection, then averages the edge occurrences across these solutions to estimate edge importance.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        unvisited_nodes = set(range(n))
        current_node = start_node
        unvisited_nodes.remove(current_node)
        path = [current_node]

        while unvisited_nodes:
            distances = np.array([distance_matrix[current_node, neighbor] for neighbor in unvisited_nodes])
            probabilities = np.exp(-distances) / np.sum(np.exp(-distances))
            nearest_neighbor = np.random.choice(list(unvisited_nodes), p=probabilities)

            path.append(nearest_neighbor)
            current_node = nearest_neighbor
            unvisited_nodes.remove(current_node)

        path.append(start_node)

        for i in range(n):
            node1 = path[i]
            node2 = path[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
