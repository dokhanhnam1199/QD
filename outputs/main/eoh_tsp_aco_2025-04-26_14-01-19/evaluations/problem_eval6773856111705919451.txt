import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses a nearest neighbor approach with probabilistic edge selection and path smoothing to generate a heuristic matrix, but with adjusted parameters for exploration and exploitation.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_iterations = 25
    smoothing_iterations = 3
    temperature = 5
    alpha = 0.5  # Probability scaling factor

    for iteration in range(num_iterations):
        # Nearest neighbor tour construction with probabilistic edge selection
        start_node = np.random.randint(n)
        tour = [start_node]
        unvisited = set(range(n))
        unvisited.remove(start_node)
        current_node = start_node

        while unvisited:
            distances = np.array([distance_matrix[current_node, neighbor] for neighbor in unvisited])
            probabilities = np.power(1.0 / (distances + 1e-9), alpha)  # Inverse distance scaling
            probabilities /= np.sum(probabilities)
            nearest_neighbor = np.random.choice(list(unvisited), p=probabilities)
            tour.append(nearest_neighbor)
            unvisited.remove(nearest_neighbor)
            current_node = nearest_neighbor
        tour.append(start_node)

        # Path smoothing (2-opt swaps)
        for _ in range(smoothing_iterations):
            improved = False
            for i in range(1, n):
                for j in range(i + 1, n + 1):
                    if j - i == 1:
                        continue

                    current_cost = distance_matrix[tour[i - 1], tour[i]] + distance_matrix[tour[j - 1], tour[j % n]]
                    new_cost = distance_matrix[tour[i - 1], tour[j - 1]] + distance_matrix[tour[i], tour[j % n]]

                    if new_cost < current_cost:
                        tour[i:j] = reversed(tour[i:j])
                        improved = True
            if not improved:
                break

        # Update heuristic matrix
        for i in range(n):
            node1 = tour[i]
            node2 = tour[(i + 1) % n]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_iterations
    return heuristics_matrix
