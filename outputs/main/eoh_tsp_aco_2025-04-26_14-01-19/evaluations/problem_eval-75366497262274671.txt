import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple random TSP solutions using a nearest neighbor heuristic, then aggregates the edge frequencies across these solutions to generate a heuristic matrix indicating the likelihood of each edge being part of a good TSP tour.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        tour = [current_node]

        while unvisited_nodes:
            nearest_node = min(unvisited_nodes, key=lambda node: distance_matrix[current_node, node])
            heuristics_matrix[current_node, nearest_node] += 1
            heuristics_matrix[nearest_node, current_node] += 1
            current_node = nearest_node
            tour.append(current_node)
            unvisited_nodes.remove(current_node)

        heuristics_matrix[current_node, start_node] += 1
        heuristics_matrix[start_node, current_node] += 1

    return heuristics_matrix
