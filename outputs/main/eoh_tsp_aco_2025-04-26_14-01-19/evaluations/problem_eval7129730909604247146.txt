import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm generates multiple random tours, selects the best few, and then averages the edge occurrences across those best tours to produce a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    num_tours = 100
    num_best = 10
    tours = []
    tour_lengths = []

    for _ in range(num_tours):
        tour = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]
        tours.append(tour)
        tour_lengths.append(tour_length)

    # Sort tours by length
    sorted_indices = np.argsort(tour_lengths)
    best_tours = [tours[i] for i in sorted_indices[:num_best]]

    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for tour in best_tours:
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += 1
            heuristics_matrix[tour[i+1], tour[i]] += 1
        heuristics_matrix[tour[-1], tour[0]] += 1
        heuristics_matrix[tour[0], tour[-1]] += 1

    heuristics_matrix = heuristics_matrix / num_best  # Average the edge counts

    return heuristics_matrix
