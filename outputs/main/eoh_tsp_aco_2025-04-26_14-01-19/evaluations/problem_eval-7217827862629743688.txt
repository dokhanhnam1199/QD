import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs solutions by iteratively adding the nearest unvisited neighbor, biased by an evolving pheromone matrix and occasionally perturbed by a simulated annealing acceptance probability, encouraging exploration of diverse routes.}"""
    n = distance_matrix.shape[0]
    pheromone_matrix = np.ones_like(distance_matrix, dtype=float)
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    alpha = 1.0
    beta = 2.0
    rho = 0.5
    q = 100.0
    num_iterations = 50
    temperature = 100.0
    cooling_rate = 0.95

    for _ in range(num_iterations):
        unvisited = set(range(n))
        current_node = np.random.choice(list(unvisited))
        unvisited.remove(current_node)
        path = [current_node]
        path_length = 0

        while unvisited:
            probabilities = np.zeros(n)
            for neighbor in range(n):
                if neighbor in unvisited:
                    probabilities[neighbor] = (pheromone_matrix[current_node, neighbor]**alpha) * ((1.0 / distance_matrix[current_node, neighbor])**beta)
            
            if np.sum(probabilities) > 0:
                probabilities = probabilities / np.sum(probabilities)
                next_node = np.random.choice(range(n), p=probabilities)
            else:
                possible_neighbors = list(unvisited)
                next_node = np.random.choice(possible_neighbors)

            if next_node not in unvisited:
                possible_neighbors = list(unvisited)
                next_node = np.random.choice(possible_neighbors)

            delta_distance = distance_matrix[current_node, next_node]
            acceptance_probability = np.exp(-delta_distance / temperature)
            if np.random.rand() > acceptance_probability and len(unvisited) > 1 :
                 possible_neighbors = list(unvisited)
                 temp_next_node = np.random.choice(possible_neighbors)
                 if temp_next_node != next_node:
                     next_node = temp_next_node


            path.append(next_node)
            path_length += distance_matrix[current_node, next_node]
            unvisited.remove(next_node)
            current_node = next_node

        path.append(path[0])
        path_length += distance_matrix[path[-2], path[0]]

        for i in range(n):
            node1 = path[i]
            node2 = path[i + 1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1
            pheromone_matrix[node1, node2] = (1 - rho) * pheromone_matrix[node1, node2] + rho * (q / path_length)
            pheromone_matrix[node2, node1] = (1 - rho) * pheromone_matrix[node2, node1] + rho * (q / path_length)

        temperature *= cooling_rate

    heuristics_matrix /= num_iterations
    return heuristics_matrix
