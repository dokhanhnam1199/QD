import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple greedy solutions by starting from different random nodes, and averages the frequency each edge appears in these solutions to generate a heuristic matrix.}"""
    num_nodes = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = num_nodes * 5  # Sample multiple greedy solutions

    for _ in range(num_samples):
        start_node = np.random.randint(num_nodes)
        current_node = start_node
        unvisited_nodes = set(range(num_nodes))
        unvisited_nodes.remove(start_node)
        path = [start_node]

        while unvisited_nodes:
            nearest_node = -1
            min_distance = np.inf
            for neighbor in unvisited_nodes:
                distance = distance_matrix[current_node, neighbor]
                if distance < min_distance:
                    min_distance = distance
                    nearest_node = neighbor

            path.append(nearest_node)
            unvisited_nodes.remove(nearest_node)
            current_node = nearest_node

        path.append(start_node)  # Return to the start node

        # Update heuristics matrix based on the path
        for i in range(len(path) - 1):
            node1 = path[i]
            node2 = path[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    # Normalize the heuristics matrix
    heuristics_matrix /= num_samples
    return heuristics_matrix
