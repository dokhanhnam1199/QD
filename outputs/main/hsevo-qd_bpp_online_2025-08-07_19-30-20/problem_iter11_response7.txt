```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best‑fit priority with inverse residual weighting and tiny random tie‑breakers."""
    # Initialize priorities with -inf for infeasible bins
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify bins that can accommodate the item
    available = bins_remain_cap >= item
    if not np.any(available):
        return priorities

    # Compute residual capacities for feasible bins
    residual = bins_remain_cap[available] - item
    eps = 1e-9

    # Inverse‑capacity weight from the second heuristic
    weight = 1.0 / (residual + eps)

    # Deterministic best‑fit component (from the first heuristic)
    base = -residual + weight * 1e-6

    # Tiny random jitter to break ties (from the second heuristic)
    jitter = (np.random.rand(len(residual)) - 0.5) * 1e-9

    # Final priorities for feasible bins
    priorities[available] = base + jitter
    return priorities
```
