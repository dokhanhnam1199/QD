```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    eps = 1e-12
    mask = bins_remain_cap >= item
    if not np.any(mask):
        return np.zeros_like(bins_remain_cap, dtype=float)
    alpha = 1.5
    residual = bins_remain_cap - item
    weight = np.zeros_like(bins_remain_cap, dtype=float)
    weight[mask] = 1.0 / (residual[mask] + eps) ** alpha
    jitter = weight * (1e-9 * np.random.rand(weight.size))
    weight += jitter
    total = weight.sum()
    if total == 0.0:
        return np.zeros_like(bins_remain_cap, dtype=float)
    return weight / total
```
