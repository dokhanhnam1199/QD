```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Inverse-remaining + exponential bias with small random jitter."""
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    fit = bins_remain_cap >= item
    if not np.any(fit):
        return priorities
    remaining = bins_remain_cap[fit] - item
    eps = 1e-9
    temp = 0.5
    weight = np.exp(-remaining / temp) / (remaining + eps)
    jitter_scale = 0.01
    jitter = 1 + np.random.rand(weight.size) * jitter_scale
    priorities[fit] = weight * jitter
    return priorities
```
