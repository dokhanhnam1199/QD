```python
import numpy as np

# priority_v2: improved heuristic for online bin packing.
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines inverse residual weighting, capacity bias, stochastic tie-breaking, and normalizes scores."""
    mask = bins_remain_cap >= item
    if not np.any(mask):
        return np.zeros_like(bins_remain_cap, dtype=float)

    residual = bins_remain_cap - item
    eps = 1e-12
    inv_res = 1.0 / (residual + eps)

    bias_factor = 0.05
    max_cap = bins_remain_cap.max()
    bias = bias_factor * bins_remain_cap / (max_cap + eps)

    weight = inv_res + bias
    weight *= 1.0 + 0.5 * np.random.rand(weight.size)          # stochastic multiplier
    weight += 1e-3 * weight * np.random.rand(weight.size)       # small jitter

    weight[~mask] = 0.0
    total = weight.sum()
    if total == 0.0:
        return np.zeros_like(bins_remain_cap, dtype=float)
    return weight / total
```
