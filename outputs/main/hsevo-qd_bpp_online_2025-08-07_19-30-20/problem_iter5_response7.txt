```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Computes priority as inverse remaining capacity (favoring tight fits), adds a small bias toward larger bins,
    and introduces a tiny random jitter to break ties. Non‑fitting bins receive zero priority.
    """
    # bins that can accommodate the item
    mask = bins_remain_cap >= item
    if not np.any(mask):
        return np.zeros_like(bins_remain_cap, dtype=float)

    remaining = bins_remain_cap[mask] - item
    inv = 1.0 / (remaining + 1e-12)
    bias = 0.1 * bins_remain_cap[mask] / (bins_remain_cap.max() + 1e-12)
    base = inv * (1.0 + bias)

    # tiny random jitter for tie‑breaking
    jitter = 1.0 + 0.1 * (np.random.rand(base.size) - 0.5)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    priorities[mask] = base * jitter
    return priorities
```
