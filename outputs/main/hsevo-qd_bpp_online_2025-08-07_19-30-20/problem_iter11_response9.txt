```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Return priority scores: higher for tighter fit, random tieâ€‘breaker, infeasible bins marked -inf."""
    residual = bins_remain_cap - item
    mask = residual >= 0
    if not np.any(mask):
        return np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    weight = np.where(residual > 0, 1.0 / residual, 1e12)
    beta = 0.05
    rand_factor = 1.0 + beta * (np.random.rand(np.sum(mask)) - 0.5)
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    priorities[mask] = weight[mask] * rand_factor
    return priorities
```
