```python
import numpy as np
# Priority function combining best-fit, integer inverse-residual weighting, and random tie-breaking.
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritize bins with smallest residual (best‑fit). Uses integer inverse‑residual weight scaled and random tie‑breaker; infeasible bins get low sentinel."""
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    scale = 10**6
    weight = np.zeros_like(bins_remain_cap, dtype=np.int64)
    weight[feasible] = scale // (remaining[feasible] + 1)
    weight[~feasible] = -1
    factor = bins_remain_cap.size + 1
    rand = np.random.randint(0, factor, size=bins_remain_cap.shape)
    return weight * factor + rand
```
