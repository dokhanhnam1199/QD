```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines inverse remaining capacity weighting, random jitter, and deterministic residual bias for tighter packing.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    fit = bins_remain_cap >= item
    if np.any(fit):
        remaining = bins_remain_cap[fit] - item
        eps = 1e-6
        inv_weight = 1.0 / (remaining + eps)
        random_vals = np.random.rand(np.count_nonzero(fit))
        bias = -remaining
        priorities[fit] = inv_weight * random_vals + 0.1 * bias
    return priorities
```
