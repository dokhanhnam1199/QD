```python
import numpy as np

# Inverse remaining capacity weighting with variance‑scaled jitter for online bin packing.
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Compute priority: tight‑fit weight 1/(remaining+eps) plus jitter scaled by capacity variance."""
    eps = 1e-9
    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=np.float64)
    fit = bins_remain_cap >= item
    if not np.any(fit):
        return priorities
    remaining = bins_remain_cap[fit] - item
    tight_weight = 1.0 / (remaining + eps)
    var_factor = np.std(bins_remain_cap) / (np.mean(bins_remain_cap) + eps)
    jitter_scale = np.clip(var_factor, 0.0, 0.5)
    jitter = np.random.rand(remaining.size) * jitter_scale
    priorities[fit] = tight_weight * (1.0 + jitter)
    return priorities
```
