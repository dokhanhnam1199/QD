```python
import numpy as np

# Best‑fit weighting with random tie‑breaking via inverse residual.
def priority_v2(item: np.ndarray) -> np.ndarray:
    """Inverse remaining capacity weight times uniform random.
    Feasible bins: priority = 1/(remaining+1) * U(0,1); infeasible: 0."""
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priorities = np.zeros_like(bins_remain_cap, dtype=np.float64)
    if np.any(feasible):
        inv = 1.0 / (remaining[feasible] + 1.0)
        rand_vals = np.random.rand(np.count_nonzero(feasible))
        priorities[feasible] = inv * rand_vals
    return priorities
```
