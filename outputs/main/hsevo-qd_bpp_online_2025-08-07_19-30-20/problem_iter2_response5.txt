```python
import numpy as np

# Combine tight‑fit softmax with a slight worst‑fit bias
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Softmax over negative residual with a small bias toward larger bins."""
    mask = bins_remain_cap >= item
    if not np.any(mask):
        return np.zeros_like(bins_remain_cap, dtype=float)
    residual = bins_remain_cap - item
    temperature = 0.5
    bias_factor = 0.1
    epsilon = 1e-12
    raw = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    raw[mask] = -residual[mask] / temperature
    raw[mask] += bias_factor * bins_remain_cap[mask] / (bins_remain_cap.max() + epsilon)
    max_raw = raw[mask].max()
    exp_raw = np.exp(raw - max_raw)
    exp_raw[~mask] = 0.0
    sum_exp = exp_raw.sum()
    if sum_exp == 0:
        return np.zeros_like(bins_remain_cap, dtype=float)
    priorities = exp_raw / sum_exp
    return priorities
```
