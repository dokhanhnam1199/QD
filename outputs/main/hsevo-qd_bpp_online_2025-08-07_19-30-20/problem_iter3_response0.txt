```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    eps = 1e-12
    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=np.float64)
    fit = bins_remain_cap >= item
    if not np.any(fit):
        return priorities
    remaining = bins_remain_cap[fit] - item
    tight_weight = 1.0 / (remaining + eps)
    max_cap = np.max(bins_remain_cap) if bins_remain_cap.size > 0 else 1.0
    fill_level = 1.0 - np.mean(bins_remain_cap) / (max_cap + eps)
    temp = np.clip(1.0 - fill_level, eps, 1.0)
    scaled = np.log(tight_weight + eps) / temp
    max_scaled = np.max(scaled)
    exp_scaled = np.exp(scaled - max_scaled)
    soft_weights = exp_scaled
    rnd = np.random.rand(remaining.shape[0])
    var_factor = np.std(remaining) / (np.mean(remaining) + eps)
    alpha = np.clip(var_factor, 0.0, 1.0)
    scores = (1 - alpha) * soft_weights + alpha * rnd
    priorities[fit] = scores
    return priorities
```
