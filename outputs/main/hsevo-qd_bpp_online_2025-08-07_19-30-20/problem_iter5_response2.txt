```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritize tight fits using inverse remaining capacity with a tiny random jitter for tie-breaking."""
    remaining = bins_remain_cap - item
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    feasible = remaining >= 0
    if not feasible.any():
        return priorities
    inv = 1.0 / (remaining[feasible] + 1e-12)
    beta = 0.02
    rng = np.random.default_rng()
    jitter = 1.0 + beta * (rng.random(inv.shape) - 0.5) * 2
    priorities[feasible] = inv * jitter
    return priorities
```
