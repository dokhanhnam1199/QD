{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combine inverse residual, linear bias, variance\u2011scaled jitter and uniform randomness for online BPP.\"\"\"\n    if bins_remain_cap.size == 0:\n        return np.empty(0, dtype=np.float64)\n    eps = 1e-12\n    fit = bins_remain_cap >= item\n    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=np.float64)\n    if not np.any(fit):\n        return priorities\n    remaining = bins_remain_cap[fit] - item\n    inv_weight = 1.0 / (remaining + eps)\n    max_rem = bins_remain_cap.max()\n    bias = 1.0 - remaining / (max_rem + eps)  # bias towards larger bins\n    var_factor = np.clip(np.std(remaining) / (np.mean(remaining) + eps), 0.0, 1.0)\n    jitter = var_factor * (np.random.rand(remaining.size) - 0.5)\n    rand_factor = np.random.rand(remaining.size)\n    priorities[fit] = inv_weight * bias * (1.0 + jitter) * rand_factor\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}