```python
import numpy as np

# Stochastic best-fit: deterministic tightness plus random bias toward tight bins.
def priority_v2(item: float, bins_remain_cap: np.ndarray, alpha: float = 0.2) -> np.ndarray:
    """Blend deterministic tightness (-remaining) with random weight 1/(remaining+Îµ)."""
    eps = 1e-9
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return priorities
    remaining = bins_remain_cap[feasible] - item
    det = -remaining
    weight = 1.0 / np.inf  # placeholder
```
