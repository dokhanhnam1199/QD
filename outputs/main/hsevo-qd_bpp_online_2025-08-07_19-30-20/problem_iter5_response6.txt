```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    if bins_remain_cap.size == 0:
        return np.array([], dtype=np.float64)
    fit = bins_remain_cap >= item
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64) if bins_remain_cap.dtype != np.float64 else np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    if not np.any(fit):
        return priorities
    remaining = bins_remain_cap[fit] - item
    eps = 1e-9
    inv_weight = 1.0 / (remaining + eps)
    cap = bins_remain_cap.max()
    norm_rem = remaining / cap if cap > 0 else remaining
    k = 10.0
    offset = 0.1
    exp_term = np.exp(np.clip(k * (norm_rem - offset), -50, 50))
    sigmoid = 1.0 / (1.0 + exp_term)
    rand = np.random.rand(remaining.shape[0])
    priorities[fit] = inv_weight * sigmoid * rand
    return priorities
```
