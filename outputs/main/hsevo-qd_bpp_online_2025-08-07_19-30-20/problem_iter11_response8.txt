```python
# Combine inverse residual, sigmoid scaling, and a small random factor for tie‑breaking.
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Multiplicative priority: inverse residual weight, sigmoid scaling toward tight fit, and slight random factor for tie‑breaking."""
    if bins_remain_cap.size == 0:
        return np.empty(0, dtype=float)
    fit = bins_remain_cap >= item
    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)
    if not np.any(fit):
        return priorities
    remaining = bins_remain_cap[fit] - item
    eps = 1e-12
    inv_weight = 1.0 / (remaining + eps)
    max_rem = bins_remain_cap.max()
    norm_left = remaining / (max_rem + eps)
    thresh = 0.3
    scale = 0.1
    sigmoid = 1.0 / (1.0 + np.exp((norm_left - thresh) / scale))
    rand_factor = 1.0 + (np.random.rand(remaining.size) - 0.5) * 0.02
    priorities[fit] = inv_weight * sigmoid * rand_factor
    return priorities
```
