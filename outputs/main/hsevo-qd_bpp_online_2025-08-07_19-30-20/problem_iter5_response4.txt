```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combine inverse‑remaining and exponential weighting with tiny random jitter to favor tight fits."""
    # Identify bins that can accommodate the item.
    mask = bins_remain_cap >= item
    if not np.any(mask):
        return np.zeros_like(bins_remain_cap, dtype=float)
    residual = bins_remain_cap[mask] - item
    eps = 1e-12
    temperature = 1.0
    # Inverse remaining weight times softmax‑like exponential decay.
    weight = (1.0 / (residual + eps)) * np.exp(-residual / temperature)
    # Small random perturbation to break ties.
    jitter = 0.1
    random_factor = 1.0 + jitter * (np.random.rand(weight.shape[0]) - 0.5)
    weighted = weight * random_factor
    total = weighted.sum()
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    if total > 0:
        priorities[mask] = weighted / total
    return priorities
```
