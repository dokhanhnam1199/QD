```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes tight fits with inverse remaining capacity, a twoâ€‘step sigmoid bias toward bins with small residuals, and modest random jitter."""
    eps = 1e-9
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    fit = bins_remain_cap >= item
    if not np.any(fit):
        return priorities
    remaining = bins_remain_cap[fit] - item
    inv_weight = 1.0 / (remaining + eps)
    max_rem = bins_remain_cap.max() + eps
    norm_rem = remaining / max_rem
    k1 = 20.0
    exp_term1 = np.exp(np.clip(k1 * (norm_rem - 0.1), -50, 50))
    weight1 = 1.0 / (1.0 + exp_term1)
    k2 = 8.0
    exp_term2 = np.exp(np.clip(k2 * (norm_rem - 0.1), -50, 50))
    weight2 = 1.0 / (1.0 + exp_term2)
    combined_weight = weight1 * weight2
    rand = np.random.rand(remaining.shape[0])
    combined = inv_weight * combined_weight * (1 + 0.1 * rand)
    priorities[fit] = combined
    return priorities
```
