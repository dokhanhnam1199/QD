```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines inverse residual, sigmoid suppression, bias for larger bins, and random jitter to prioritize tight fits and resolve ties."""
    eps = 1e-9
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    fit = bins_remain_cap >= item
    if not np.any(fit):
        return priorities
    remaining = bins_remain_cap[fit] - item
    weight1 = 1.0 / (remaining + eps)
    max_cap = bins_remain_cap.max() + eps
    norm_left = remaining / max_cap
    thresh = 0.2
    scale = 0.05
    weight2 = 1.0 / (1.0 + np.exp((norm_left - thresh) / scale))
    bias_factor = 0.01
    bias = 1.0 + bias_factor * (bins_remain_cap[fit] / max_cap)
    random_vals = np.random.rand(np.count_nonzero(fit))
    priorities[fit] = weight1 * weight2 * bias * (1.0 + 0.1 * random_vals)
    return priorities
```
