```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best‑fit with stochastic inverse‑capacity bias for online bin packing."""
    eps = 1e-12
    available = bins_remain_cap >= item
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    if not available.any():
        return scores
    # deterministic best‑fit: higher (closer to zero) for tighter fit
    best_fit = -(bins_remain_cap[available] - item)
    # stochastic term: random weight inversely proportional to remaining capacity
    stochastic = np.random.rand(np.count_nonzero(available)) / (bins_remain_cap[available] + eps)
    scores[available] = best_fit + stochastic
    return scores
```
