```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score bins by inverse residual, bias larger bins, add tiny jitter."""
    feasible = bins_remain_cap >= item
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    if not np.any(feasible):
        return priorities
    remaining = bins_remain_cap[feasible] - item
    eps = 1e-9
    inv_weight = 1.0 / (remaining + eps)                     # tighter fit = higher weight
    max_cap = bins_remain_cap.max()
    bias = 1.0 + 0.1 * (bins_remain_cap[feasible] / (max_cap + eps))  # favor larger bins
    jitter = 0.01 * (np.random.rand(inv_weight.size) - 0.5) # tiny random tieâ€‘breaker
    scores = inv_weight * bias * (1.0 + jitter)
    priorities[feasible] = scores
    return priorities
```
