```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Uses inverse remaining capacity, a bias for larger bins, and jitter."""
    eps = 1e-12
    min_priority = -np.inf
    priorities = np.full_like(bins_remain_cap, min_priority, dtype=np.float64)
    fit = bins_remain_cap >= item
    if not np.any(fit):
        return priorities
    remaining = bins_remain_cap[fit] - item
    weight1 = 1.0 / (remaining + eps)
    bias_factor = 0.02
    bias = bias_factor * bins_remain_cap[fit] / (np.max(bins_remain_cap) + eps)
    thresh = 0.3
    scale = 0.1
    norm_left = remaining / (np.max(remaining) + eps)
    weight2 = 1.0 / (1.0 + np.exp((norm_left - thresh) / scale))
    random_vals = np.random.rand(fit.sum())
    combined = weight1 * (1 + bias) * weight2 * (1 + 0.1 * random_vals)
    priorities[fit] = combined
    return priorities
```
