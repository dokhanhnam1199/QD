```python
import numpy as np

# Combined inverseâ€‘residual weighting, small capacity bonus, and jitter.
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score bins using inverse residual, a tiny largerâ€‘bin bonus, and jitter."""
    feasible = bins_remain_cap >= item
    remaining = bins_remain_cap - item
    weight = np.where(
        feasible,
        np.where(remaining > 0, 1.0 / remaining, 1e9),
        0.0,
    )
    bias = np.where(feasible, 0.001 * bins_remain_cap, 0.0)
    jitter = weight * np.random.rand(*bins_remain_cap.shape) * 0.005
    return weight + bias + jitter
```
