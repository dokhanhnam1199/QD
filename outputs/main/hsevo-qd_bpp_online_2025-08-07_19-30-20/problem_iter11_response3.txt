```python
import numpy as np

def priority_v2(item, bins_remain_cap):
    feasible = bins_remain_cap >= item
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    if not np.any(feasible):
        return priorities
    remaining = bins_remain_cap[feasible] - item
    weight = np.where(remaining == 0, 1e9, 1.0 / remaining)
    max_cap = bins_remain_cap.max()
    bias_factor = 0.001 * bins_remain_cap[feasible] / (max_cap if max_cap > 0 else 1)
    jitter = 0.005 * (np.random.rand(remaining.shape[0]) - 0.5)
    priorities[feasible] = weight * (1 + bias_factor) * (1 + jitter)
    return priorities
```
