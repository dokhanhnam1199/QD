```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combine inverse residual, linear bias, varianceâ€‘scaled jitter and uniform randomness for online BPP."""
    if bins_remain_cap.size == 0:
        return np.empty(0, dtype=np.float64)
    eps = 1e-12
    fit = bins_remain_cap >= item
    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=np.float64)
    if not np.any(fit):
        return priorities
    remaining = bins_remain_cap[fit] - item
    inv_weight = 1.0 / (remaining + eps)
    max_rem = bins_remain_cap.max()
    bias = 1.0 - remaining / (max_rem + eps)  # bias towards larger bins
    var_factor = np.clip(np.std(remaining) / (np.mean(remaining) + eps), 0.0, 1.0)
    jitter = var_factor * (np.random.rand(remaining.size) - 0.5)
    rand_factor = np.random.rand(remaining.size)
    priorities[fit] = inv_weight * bias * (1.0 + jitter) * rand_factor
    return priorities
```
