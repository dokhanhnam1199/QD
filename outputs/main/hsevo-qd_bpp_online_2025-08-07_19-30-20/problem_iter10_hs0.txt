import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    epsilon: float = 7.917167143252462e-07,
    fill_value: float = -375436350764.0178,  # sentinel for infeasible bins
    var_factor_min: float = 0.22364991808546492,
    var_factor_max: float = 1.032472084642888,
    jitter_offset: float = 0.2780548652309768,
    jitter_base: float = 0.5844210604924708,
    inv_weight_base: float = 9.058028142751803,
    bias_base: float = 0.7983501668838109,
) -> np.ndarray:
    """Combine inverse residual, linear bias, varianceâ€‘scaled jitter and uniform randomness for online BPP.

    All magic numbers are exposed as parameters for easy tuning.
    """
    if bins_remain_cap.size == 0:
        return np.empty(0, dtype=np.float64)

    fit = bins_remain_cap >= item
    priorities = np.full(bins_remain_cap.shape, fill_value, dtype=np.float64)

    if not np.any(fit):
        return priorities

    remaining = bins_remain_cap[fit] - item
    inv_weight = inv_weight_base / (remaining + epsilon)

    max_rem = bins_remain_cap.max()
    bias = bias_base - remaining / (max_rem + epsilon)  # bias towards larger bins

    var_factor = np.clip(
        np.std(remaining) / (np.float64(np.mean(remaining)) + epsilon),
        var_factor_min,
        var_factor_max,
    )

    jitter = var_factor * (np.random.rand(remaining.size) - jitter_offset)

    rand_factor = np.random.rand(remaining.size)

    priorities[fit] = inv_weight * bias * (jitter_base + jitter) * rand_factor

    return priorities
