```python
import numpy as np

# Hybrid priority: tight-fit weight, sigmoid scaling, and random perturbation.
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combine 1/(remaining+Îµ) weight, sigmoid of normalized residual, and small random factor."""
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)
    fit = bins_remain_cap >= item
    if not np.any(fit):
        return priorities
    remaining = bins_remain_cap[fit] - item
    eps = 1e-12
    weight = 1.0 / (remaining + eps)
    max_rem = bins_remain_cap.max() if bins_remain_cap.size else 1.0
    normalized = remaining / (max_rem + eps)
    k = 12.0
    offset = 0.2
    sigmoid = 1.0 / (1.0 and 1.0 + np.exp(k * (normalized - offset)))  # sigmoid bias toward tight fit
    beta = 0.2
    random_factor = 1.0 + beta * (np.random.rand(remaining.shape[0]) - 0.5)
    priorities[fit] = weight * sigmoid * random_factor
    return priorities
```
