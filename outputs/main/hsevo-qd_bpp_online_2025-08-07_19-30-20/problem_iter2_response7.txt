```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, temperature: float = 1.0, epsilon: float = 1e-12) -> np.ndarray:
    """Softmax over tightâ€‘fit score: -residual/temperature - log(capacity)."""
    # Identify bins that can accommodate the item.
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return np.zeros_like(bins_remain_cap, dtype=float)
    residual = bins_remain_cap - item
    # Combine exponential leftover penalty and inverse capacity bias.
    raw = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    raw[feasible] = -residual[feasible] / temperature - np.log(bins_remain_cap[feasible] + epsilon)
    max_raw = np.max(raw[feasible])
    exp_raw = np.exp(raw - max_raw)
    sum_exp = np.sum(exp_raw[feasible])
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    priorities[feasible] = exp_raw[feasible] / sum_exp
    return priorities
```
