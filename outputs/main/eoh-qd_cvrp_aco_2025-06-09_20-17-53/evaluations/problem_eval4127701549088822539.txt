import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm generates random routes, evaluates them based on cost and feasibility, and constructs a heuristic matrix by weighting edge frequencies with a score reflecting the route's quality.}
    """
    n = len(demands)
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix)
    
    for _ in range(num_samples):
        # Generate a random route
        unvisited = list(range(1, n))
        current_route = [0]
        current_capacity = capacity
        route = []
        while unvisited:
            next_node = random.choice(unvisited)
            if demands[next_node] <= current_capacity:
                current_route.append(next_node)
                current_capacity -= demands[next_node]
                unvisited.remove(next_node)
            else:
                current_route.append(0)
                route.append(current_route)
                current_route = [0, next_node]
                current_capacity = capacity - demands[next_node]
                unvisited.remove(next_node)
        current_route.append(0)
        route.append(current_route)

        # Calculate the cost and feasibility of the route
        cost = 0
        feasible = True
        for r in route:
            current_demand = 0
            for i in range(len(r) - 1):
                cost += distance_matrix[r[i]][r[i+1]]
            for i in range(1, len(r)):
                if r[i] != 0:
                    current_demand += demands[r[i]]
            if current_demand > capacity and len(r) > 2:
                feasible = False
                break
        
        # Calculate a score based on cost and feasibility
        if feasible:
            score = np.exp(-cost / 1000)  # Example scoring function
        else:
            score = 0  # Penalize infeasible routes

        # Update heuristics matrix based on the route and its score
        if score > 0:
            for r in route:
                for i in range(len(r) - 1):
                    heuristics_matrix[r[i]][r[i+1]] += score
                    heuristics_matrix[r[i+1]][r[i]] += score  # Symmetry

    # Normalize the heuristic matrix
    total_score = np.sum(heuristics_matrix)
    if total_score > 0:
        heuristics_matrix = heuristics_matrix / total_score

    return heuristics_matrix
