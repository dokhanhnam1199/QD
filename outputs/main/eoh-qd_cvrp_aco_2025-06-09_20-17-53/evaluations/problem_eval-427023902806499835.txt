import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm constructs solutions by iteratively adding the nearest feasible node to the current route, using stochasticity to explore different routes and updating edge scores based on route quality.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000

    for _ in range(num_samples):
        unvisited = set(range(1, n))
        routes = []
        current_route = [0]
        current_demand = 0
        
        while unvisited:
            #Find nearest feasible neighbors
            feasible_neighbors = {node: distance_matrix[current_route[-1], node] for node in unvisited if demands[node] + current_demand <= capacity}
            
            if not feasible_neighbors:
                routes.append(current_route + [0])
                current_route = [0]
                current_demand = 0
                feasible_neighbors = {node: distance_matrix[current_route[-1], node] for node in unvisited if demands[node] + current_demand <= capacity}

                if not feasible_neighbors:
                    break
            
            #Probabilistically select the next node to add based on inverse distance
            probabilities = np.array([1.0/dist for dist in feasible_neighbors.values()])
            probabilities /= np.sum(probabilities)
            next_node = random.choices(list(feasible_neighbors.keys()), weights=probabilities)[0]
            
            current_route.append(next_node)
            current_demand += demands[next_node]
            unvisited.remove(next_node)

        routes.append(current_route + [0])

        #Update heuristics matrix based on the route constructed
        for route in routes:
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                heuristics_matrix[u, v] += 1
                heuristics_matrix[v, u] += 1
                
    return heuristics_matrix
