import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm estimates edge importance by sampling random route segments, evaluating their contribution to reducing route length relative to demand, and updating edge scores based on this contribution.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000

    for _ in range(num_samples):
        # Select two random customers
        customer1 = random.randint(1, n - 1)
        customer2 = random.randint(1, n - 1)
        while customer2 == customer1:
            customer2 = random.randint(1, n - 1)
        
        # Create a segment: depot -> customer1 -> customer2 -> depot
        segment = [0, customer1, customer2, 0]
        
        # Calculate the segment's total demand
        segment_demand = demands[customer1] + demands[customer2]
        
        #Calculate the segments's total distance
        segment_distance = distance_matrix[0, customer1] + distance_matrix[customer1, customer2] + distance_matrix[customer2, 0]

        # Calculate a score based on distance reduction relative to demand
        if segment_demand > 0:
            score = segment_distance / segment_demand
        else:
            score = 0

        # Update heuristics matrix
        heuristics_matrix[0, customer1] += 1/score if score != 0 else 0
        heuristics_matrix[customer1, 0] += 1/score if score != 0 else 0
        heuristics_matrix[customer1, customer2] += 1/score if score != 0 else 0
        heuristics_matrix[customer2, customer1] += 1/score if score != 0 else 0
        heuristics_matrix[customer2, 0] += 1/score if score != 0 else 0
        heuristics_matrix[0, customer2] += 1/score if score != 0 else 0

    return heuristics_matrix
