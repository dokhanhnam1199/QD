import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples a large number of random routes, evaluates their feasibility with respect to capacity constraints, and then constructs a heuristic matrix based on the frequency with which each edge appears in feasible routes.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding depot)
        customer_indices = np.random.permutation(range(1, n))
        
        # Construct routes based on capacity
        routes = []
        current_route = [0]
        current_load = 0
        
        for customer in customer_indices:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, customer]
                current_load = demands[customer]
        
        current_route.append(0)
        routes.append(current_route)

        # Update heuristics matrix based on the edges in feasible routes
        for route in routes:
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                heuristics_matrix[u, v] += 1
                heuristics_matrix[v, u] += 1

    # Normalize the matrix
    heuristics_matrix = heuristics_matrix / num_samples

    return heuristics_matrix
