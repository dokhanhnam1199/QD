import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm uses stochastic solution sampling to estimate edge importance, giving preference to shorter edges when constructing random routes and weighting edge frequencies by the inverse of the corresponding distance.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000

    for _ in range(num_samples):
        unvisited = set(range(1, n))
        routes = []
        while unvisited:
            current_route = []
            current_capacity = 0
            current_node = 0 
            
            while unvisited:
                feasible_nodes = [node for node in unvisited if current_capacity + demands[node] <= capacity]

                if not feasible_nodes:
                    break
                
                # Prioritize closer nodes
                distances = [distance_matrix[current_node, node] for node in feasible_nodes]
                probabilities = [1/d if d > 0 else 1 for d in distances]  # Inverse distance
                probabilities = [p/sum(probabilities) for p in probabilities] # Normalize to probabilities
                
                next_node = random.choices(feasible_nodes, weights=probabilities, k=1)[0]
                current_route.append(next_node)
                current_capacity += demands[next_node]
                unvisited.remove(next_node)
            
            routes.append(current_route)
        
        for route in routes:
            current_node = 0
            for next_node in route:
                weight = 1 / distance_matrix[current_node, next_node] if distance_matrix[current_node, next_node] > 0 else 1
                heuristics_matrix[current_node, next_node] += weight
                heuristics_matrix[next_node, current_node] += weight
                current_node = next_node
            weight = 1 / distance_matrix[current_node, 0] if distance_matrix[current_node, 0] > 0 else 1
            heuristics_matrix[current_node, 0] += weight
            heuristics_matrix[0, current_node] += weight

    return heuristics_matrix
