import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm iteratively constructs routes by inserting the most cost-effective unvisited node into the best possible position within the current route, then uses edge frequencies from these routes to build a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_routes = 1000

    for _ in range(num_routes):
        current_route = [0]
        current_load = 0
        unvisited = list(range(1, n))
        
        while unvisited:
            best_node = -1
            best_insertion_cost = float('inf')
            best_insertion_index = -1

            for node in unvisited:
                if current_load + demands[node] <= capacity:
                    for i in range(1, len(current_route)):
                        insertion_cost = distance_matrix[current_route[i-1]][node] + distance_matrix[node][current_route[i]] - distance_matrix[current_route[i-1]][current_route[i]]
                        if insertion_cost < best_insertion_cost:
                            best_insertion_cost = insertion_cost
                            best_node = node
                            best_insertion_index = i
            
            if best_node == -1:
                current_route.append(0)
                current_load = 0
                continue

            current_route.insert(best_insertion_index, best_node)
            current_load += demands[best_node]
            unvisited.remove(best_node)

        current_route.append(0)

        for i in range(len(current_route) - 1):
            u = current_route[i]
            v = current_route[i+1]
            heuristics_matrix[u, v] += 1
            heuristics_matrix[v, u] += 1

    heuristics_matrix /= num_routes
    
    return heuristics_matrix
