import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples routes, biases selection towards shorter edges based on distance, checks for feasibility, and updates a heuristic matrix favoring frequently used, feasible edges.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        # Create a probability matrix biased towards shorter edges
        probability_matrix = 1 / (distance_matrix + 1e-6)  # Add small value to avoid division by zero
        for i in range(n):
            probability_matrix[i, i] = 0  # Set diagonal to zero
        row_sums = probability_matrix.sum(axis=1, keepdims=True)
        probability_matrix = probability_matrix / row_sums

        current_node = 0
        route = [0]
        current_demand = 0
        feasible = True
        all_routes = []
        current_route = [0]

        unvisited = list(range(1, n))

        while unvisited:
          probabilities = probability_matrix[current_node, unvisited]
          probabilities = probabilities / np.sum(probabilities)
          next_node = np.random.choice(unvisited, p=probabilities)

          if current_demand + demands[next_node] <= capacity:
            current_route.append(next_node)
            current_demand += demands[next_node]
            current_node = next_node
            unvisited.remove(next_node)
          else:
            current_route.append(0)
            all_routes.append(current_route)
            current_route = [0]
            current_demand = 0
            current_node = 0
        current_route.append(0)
        all_routes.append(current_route)
        

        if feasible:
            for route in all_routes:
                for i in range(len(route) - 1):
                    heuristics_matrix[route[i], route[i+1]] += 1
                    heuristics_matrix[route[i+1], route[i]] += 1
    
    heuristics_matrix = heuristics_matrix / num_samples
    return heuristics_matrix
