import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm iteratively constructs routes by greedily adding the nearest feasible node to the current route until the vehicle capacity is reached, and then aggregates edge frequencies across these routes to create a heuristic matrix.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_iterations = 1000

    for _ in range(num_iterations):
        current_node = 0  # Start at the depot
        current_route = [0]
        current_capacity = 0
        unvisited_nodes = set(range(1, n))

        while unvisited_nodes:
            # Find the nearest feasible node
            nearest_node = None
            min_distance = float('inf')

            for node in unvisited_nodes:
                if demands[node] + current_capacity <= capacity and distance_matrix[current_node, node] < min_distance:
                    nearest_node = node
                    min_distance = distance_matrix[current_node, node]

            if nearest_node is not None:
                current_route.append(nearest_node)
                current_capacity += demands[nearest_node]
                unvisited_nodes.remove(nearest_node)
                current_node = nearest_node
            else:
                # If no feasible nodes, return to depot and start a new route
                current_route.append(0)
                current_node = 0
                current_capacity = 0

        # Add final return to depot
        if current_route[-1] != 0:
            current_route.append(0)
        
        # Update heuristic matrix
        for i in range(len(current_route) - 1):
            node1 = current_route[i]
            node2 = current_route[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    return heuristics_matrix
