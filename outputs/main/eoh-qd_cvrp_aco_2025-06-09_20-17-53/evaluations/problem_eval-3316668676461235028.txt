import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples a large number of random feasible routes, then weights edge frequencies by the inverse of the route length.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000  # Adjust the number of samples
    
    for _ in range(num_samples):
        # Randomly shuffle customers (excluding depot)
        customer_indices = np.arange(1, n)
        np.random.shuffle(customer_indices)
        
        # Construct route(s)
        routes = []
        current_route = [0]
        current_capacity = 0
        
        for customer in customer_indices:
            if current_capacity + demands[customer] <= capacity:
                current_route.append(customer)
                current_capacity += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]
                current_capacity = demands[customer]
        
        current_route.append(0)  # Return to depot
        routes.append(current_route)
        
        # Update heuristics matrix, weighted by route length
        for route in routes:
            route_length = len(route) -1
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                heuristics_matrix[u, v] += 1 / route_length
                heuristics_matrix[v, u] += 1 / route_length #Symmetric matrix
    
    return heuristics_matrix
