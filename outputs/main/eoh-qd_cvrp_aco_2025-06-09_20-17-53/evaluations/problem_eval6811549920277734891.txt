import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm prioritizes assigning nodes closer to the depot to vehicles, then applies a similar sampling approach to evaluate edge attractiveness.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000

    # Calculate distances to the depot
    depot_distances = distance_matrix[0, :]

    for _ in range(num_samples):
        # Sort customers based on their distance to the depot (excluding the depot itself)
        customer_indices = np.argsort(depot_distances[1:]) + 1 # Add 1 to account for depot exclusion

        # Construct routes based on vehicle capacity
        routes = []
        current_route = [0]  # Start at the depot
        current_load = 0
        for customer in customer_indices:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]  # Start new route from depot
                current_load = demands[customer]
        current_route.append(0)
        routes.append(current_route)

        # Update heuristics matrix based on edges in the routes
        for route in routes:
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                heuristics_matrix[u, v] += 1
                heuristics_matrix[v, u] += 1  # Assuming symmetric distance matrix

    return heuristics_matrix
