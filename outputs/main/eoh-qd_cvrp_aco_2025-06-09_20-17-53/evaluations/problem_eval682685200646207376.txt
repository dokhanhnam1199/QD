import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm uses a Monte Carlo approach to estimate edge probabilities in optimal CVRP solutions by averaging edge occurrences across a diverse set of sampled routes weighted by their estimated optimality.}
    """
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros((n, n))
    temperature = 1.0  # Initial temperature for simulated annealing-like weighting
    cooling_rate = 0.995  # Cooling rate for temperature

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        customer_indices = np.arange(1, n)
        np.random.shuffle(customer_indices)

        # Construct routes based on the permutation
        routes = []
        current_route = [0]  # Start at the depot
        current_demand = 0

        for customer in customer_indices:
            if current_demand + demands[customer] <= capacity:
                current_route.append(customer)
                current_demand += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]  # Start a new route
                current_demand = demands[customer]

        current_route.append(0)  # Return to depot
        routes.append(current_route)

        # Calculate the total distance of the routes
        total_distance = 0
        for route in routes:
            for i in range(len(route) - 1):
                total_distance += distance_matrix[route[i], route[i+1]]

        # Weight the route based on its distance using a simulated annealing-like approach
        weight = np.exp(-total_distance / temperature)

        # Update the heuristics matrix based on the weighted routes
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += weight
                heuristics_matrix[node2, node1] += weight # Account for undirected edges

        # Cool the temperature
        temperature *= cooling_rate

    return heuristics_matrix
