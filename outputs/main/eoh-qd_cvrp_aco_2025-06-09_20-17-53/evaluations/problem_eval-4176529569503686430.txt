import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples many random routes, evaluates their feasibility based on capacity constraints, and scores each edge based on a combination of its frequency in feasible routes and its length, favoring shorter, frequent edges.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000
    alpha = 0.5  # Weighting factor for frequency vs. distance

    for _ in range(num_samples):
        route = list(range(1, n))  # Exclude depot (node 0)
        random.shuffle(route)

        feasible_route = []
        current_capacity = 0
        current_route = [0] # Start at depot

        for node in route:
            if current_capacity + demands[node] <= capacity:
                current_route.append(node)
                current_capacity += demands[node]
            else:
                current_route.append(0) # Return to depot
                feasible_route.append(current_route)
                current_capacity = demands[node]
                current_route = [0, node]
        
        if current_route != [0]:
            current_route.append(0)  # Return to depot
            feasible_route.append(current_route)
        
        
        for sub_route in feasible_route:
            for i in range(len(sub_route) - 1):
                node1 = sub_route[i]
                node2 = sub_route[i+1]
                
                # Score based on frequency and distance
                frequency_score = 1
                distance_score = 1 / (distance_matrix[node1, node2] + 1e-6)  # Avoid division by zero
                combined_score = (alpha * frequency_score) + ((1 - alpha) * distance_score)
                
                heuristics_matrix[node1, node2] += combined_score
                heuristics_matrix[node2, node1] += combined_score  # Symmetry

    return heuristics_matrix
