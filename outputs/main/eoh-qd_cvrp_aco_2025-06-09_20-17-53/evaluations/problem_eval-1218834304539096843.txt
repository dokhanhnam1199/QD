import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm iteratively builds routes by adding the nearest feasible node based on a combination of distance and demand, biasing towards nodes that have not yet been visited, and penalizing routes that are nearing capacity.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_iterations = 100

    for _ in range(num_iterations):
        unvisited = set(range(1, n))
        current_route = [0]
        current_load = 0
        all_routes = []

        while unvisited:
            current_node = current_route[-1]
            best_node = None
            best_score = float('inf')

            for neighbor in unvisited:
                if current_load + demands[neighbor] <= capacity:
                    distance = distance_matrix[current_node, neighbor]
                    
                    # Heuristic score: combination of distance, demand, and route load
                    score = distance + demands[neighbor] * 0.1 + (current_load / capacity) * 10  # Adjust weights as needed

                    if score < best_score:
                        best_score = score
                        best_node = neighbor

            if best_node is not None:
                current_route.append(best_node)
                current_load += demands[best_node]
                unvisited.remove(best_node)
            else:
                current_route.append(0)
                all_routes.append(current_route)
                current_route = [0]
                current_load = 0
        
        current_route.append(0)
        all_routes.append(current_route)

        # Update heuristics matrix
        for route in all_routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1

    return heuristics_matrix
