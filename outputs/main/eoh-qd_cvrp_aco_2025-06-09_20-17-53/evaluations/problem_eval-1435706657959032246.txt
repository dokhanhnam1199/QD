import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples multiple random routes, evaluates their feasibility with respect to capacity constraints, and assigns scores to edges based on the inverse of their distance, adjusted by a factor that penalizes edges appearing in routes exceeding a certain length.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000
    route_length_penalty = 0.1

    for _ in range(num_samples):
        route = list(range(1, n))
        np.random.shuffle(route)
        
        current_route = [0]
        current_demand = 0
        all_routes = []
        
        for node in route:
            if current_demand + demands[node] <= capacity:
                current_route.append(node)
                current_demand += demands[node]
            else:
                current_route.append(0)
                all_routes.append(current_route)
                current_route = [0, node]
                current_demand = demands[node]
        current_route.append(0)
        all_routes.append(current_route)
        
        for current_route in all_routes:
            route_length = len(current_route)
            for i in range(len(current_route) - 1):
                node1 = current_route[i]
                node2 = current_route[i+1]
                edge_distance = distance_matrix[node1, node2]
                
                if edge_distance > 0:
                    score = (1 / edge_distance) * (1 - route_length_penalty * (route_length-2))  # Penalize longer routes.
                    heuristics_matrix[node1, node2] += score
                    heuristics_matrix[node2, node1] += score

    return heuristics_matrix
