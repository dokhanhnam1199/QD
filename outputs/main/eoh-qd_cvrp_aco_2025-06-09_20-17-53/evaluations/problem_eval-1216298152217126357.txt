import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm iteratively constructs routes by inserting nodes based on a combination of distance, demand, and a greedy factor, updating a heuristic matrix based on edge frequencies.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000
    greedy_factor = 0.7

    for _ in range(num_samples):
        current_route = [0]
        current_load = 0
        visited = {0}
        
        while len(visited) < n:
            
            feasible_neighbors = []
            for i in range(1, n):
                if i not in visited and current_load + demands[i] <= capacity:
                    feasible_neighbors.append((i))
            
            if not feasible_neighbors:
                current_route.append(0)
                current_load = 0
                continue
            
            best_insertion_node = None
            best_insertion_cost = float('inf')

            for neighbor in feasible_neighbors:
                insertion_cost = distance_matrix[current_route[-1]][neighbor]
                
                if insertion_cost < best_insertion_cost:
                    best_insertion_cost = insertion_cost
                    best_insertion_node = neighbor

            if random.random() < greedy_factor and best_insertion_node is not None:
                next_node = best_insertion_node
            else:
                distances = [distance_matrix[current_route[-1]][i] for i in feasible_neighbors]
                probabilities = [1 / d if d > 0 else 1 for d in distances]  # Inverse distance
                total_prob = sum(probabilities)
                probabilities = [p / total_prob for p in probabilities]
                next_node = random.choices(feasible_neighbors, weights=probabilities, k=1)[0]
                

            current_route.append(next_node)
            current_load += demands[next_node]
            visited.add(next_node)

        current_route.append(0)

        for i in range(len(current_route) - 1):
            u = current_route[i]
            v = current_route[i+1]
            heuristics_matrix[u, v] += 1
            heuristics_matrix[v, u] += 1

    heuristics_matrix /= num_samples
    
    return heuristics_matrix
