import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm iteratively refines routes by probabilistically selecting edges based on their appearance in previously sampled and improved solutions, encouraging exploration while exploiting promising connections.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_iterations = 50
    num_samples_per_iteration = 20
    top_k = 5
    alpha = 0.1

    current_routes = []
    for _ in range(num_samples_per_iteration):
        route = list(range(1, n))
        random.shuffle(route)

        vehicle_routes = []
        current_route = [0]
        current_load = 0
        for node in route:
            if current_load + demands[node] <= capacity:
                current_route.append(node)
                current_load += demands[node]
            else:
                current_route.append(0)
                vehicle_routes.append(current_route)
                current_route = [0, node]
                current_load = demands[node]

        current_route.append(0)
        vehicle_routes.append(current_route)

        total_distance = 0
        for vehicle_route in vehicle_routes:
            for i in range(len(vehicle_route) - 1):
                total_distance += distance_matrix[vehicle_route[i], vehicle_route[i+1]]
        current_routes.append((vehicle_routes, total_distance))
    
    for iteration in range(num_iterations):
        feasible_routes = []
        for _ in range(num_samples_per_iteration):
            # Generate a route based on current heuristics
            route = []
            remaining_nodes = list(range(1,n))
            current_node = 0
            while remaining_nodes:
                probabilities = []
                for neighbor in remaining_nodes:
                    probabilities.append(heuristics_matrix[current_node, neighbor] + alpha)

                probabilities = np.array(probabilities)
                probabilities /= np.sum(probabilities)
                
                next_node = random.choices(remaining_nodes, weights=probabilities, k=1)[0]
                route.append(next_node)
                remaining_nodes.remove(next_node)
        
            vehicle_routes = []
            current_route = [0]
            current_load = 0
            for node in route:
                if current_load + demands[node] <= capacity:
                    current_route.append(node)
                    current_load += demands[node]
                else:
                    current_route.append(0)
                    vehicle_routes.append(current_route)
                    current_route = [0, node]
                    current_load = demands[node]
            
            current_route.append(0)
            vehicle_routes.append(current_route)

            total_distance = 0
            for vehicle_route in vehicle_routes:
                for i in range(len(vehicle_route) - 1):
                    total_distance += distance_matrix[vehicle_route[i], vehicle_route[i+1]]

            feasible_routes.append((vehicle_routes, total_distance))
        
        feasible_routes.extend(current_routes)

        feasible_routes.sort(key=lambda x: x[1])
        current_routes = feasible_routes[:num_samples_per_iteration]

        heuristics_matrix = np.zeros_like(distance_matrix)
        for k in range(min(top_k, len(feasible_routes))):
            vehicle_routes, _ = feasible_routes[k]
            for vehicle_route in vehicle_routes:
                for i in range(len(vehicle_route) - 1):
                    node1 = vehicle_route[i]
                    node2 = vehicle_route[i+1]
                    heuristics_matrix[node1, node2] += 1
                    heuristics_matrix[node2, node1] += 1
    return heuristics_matrix
