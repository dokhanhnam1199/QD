import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm estimates edge probabilities by repeatedly sampling random routes, evaluating their feasibility with respect to capacity constraints, and updating edge scores based on their inclusion in feasible routes.}"""
    n = len(demands)
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        customer_indices = list(range(1, n))
        random.shuffle(customer_indices)

        routes = []
        current_route = [0]  # Start at the depot
        current_demand = 0

        for customer in customer_indices:
            if current_demand + demands[customer] <= capacity:
                current_route.append(customer)
                current_demand += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]
                current_demand = demands[customer]

        current_route.append(0) #Final return to depot
        routes.append(current_route)

        # Check feasibility of each route and update heuristics_matrix
        for route in routes:
            total_demand = 0
            for customer in route[1:-1]:
                total_demand += demands[customer]

            if total_demand <= capacity:
                for i in range(len(route) - 1):
                    u = route[i]
                    v = route[i+1]
                    heuristics_matrix[u, v] += 1
                    heuristics_matrix[v, u] += 1 #Symmetric
    return heuristics_matrix
