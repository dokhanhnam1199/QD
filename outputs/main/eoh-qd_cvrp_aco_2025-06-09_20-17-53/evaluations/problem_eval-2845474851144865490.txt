import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm iteratively constructs routes by selecting the nearest feasible customer until all customers are served, then updates a heuristic matrix based on the edges used in the constructed routes, weighting each edge's contribution by the inverse of the total route distance.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 1000

    for _ in range(num_iterations):
        unvisited_customers = set(range(1, n))
        routes = []
        while unvisited_customers:
            current_route = [0]
            current_demand = 0
            current_node = 0

            while True:
                # Find the nearest feasible customer
                nearest_customer = None
                min_distance = float('inf')
                
                for customer in unvisited_customers:
                    if current_demand + demands[customer] <= capacity:
                        distance = distance_matrix[current_node, customer]
                        if distance < min_distance:
                            min_distance = distance
                            nearest_customer = customer

                if nearest_customer is None:
                    current_route.append(0)
                    routes.append(current_route)
                    break

                current_route.append(nearest_customer)
                current_demand += demands[nearest_customer]
                unvisited_customers.remove(nearest_customer)
                current_node = nearest_customer

            
            if current_route[-1] != 0:
                 current_route.append(0)
            
            #Calculate route distance
            total_distance = 0
            for route in routes:
                route_distance = 0
                for i in range(len(route) - 1):
                     route_distance += distance_matrix[route[i], route[i+1]]

                total_distance += route_distance
            
            # Update heuristic matrix, weighting by inverse of total distance.
            if total_distance > 0:
                weight = 1.0 / total_distance
            else:
                weight = 0 # Should not happen as long as distance matrix is valid.

            for route in routes:
                for i in range(len(route) - 1):
                    heuristics_matrix[route[i], route[i+1]] += weight
                    heuristics_matrix[route[i+1], route[i]] += weight
    
    #Normalize the heuristic matrix
    total_counts = np.sum(heuristics_matrix)
    if total_counts > 0:
        heuristics_matrix = heuristics_matrix / total_counts
    
    return heuristics_matrix
