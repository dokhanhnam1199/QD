import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples a large number of random routes satisfying capacity constraints, then calculates a weighted frequency of each edge appearing in these routes, giving higher weights to edges appearing in shorter routes.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000

    for _ in range(num_samples):
        remaining_nodes = list(range(1, n))
        routes = []
        current_route = [0]
        current_capacity = capacity

        while remaining_nodes:
            
            possible_nodes = []
            for node in remaining_nodes:
                if demands[node] <= current_capacity:
                    possible_nodes.append(node)
            
            if not possible_nodes:
                routes.append(current_route + [0])
                current_route = [0]
                current_capacity = capacity
                continue
                
            next_node = random.choice(possible_nodes)
            

            current_route.append(next_node)
            current_capacity -= demands[next_node]
            remaining_nodes.remove(next_node)

        routes.append(current_route + [0])

        total_route_length = 0
        for route in routes:
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                total_route_length += distance_matrix[u, v]

        route_weight = 1.0 / (total_route_length + 1e-6)  # Avoid division by zero

        for route in routes:
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                heuristics_matrix[u, v] += route_weight
                heuristics_matrix[v, u] += route_weight  # Assuming symmetric distance matrix

    heuristics_matrix = heuristics_matrix / num_samples
    return heuristics_matrix
