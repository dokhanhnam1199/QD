import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples a set of random routes, evaluates their feasibility based on capacity constraints, and then calculates a heuristic matrix that reflects how frequently each edge appears in feasible routes.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        route = list(range(1, n))
        np.random.shuffle(route)
        
        current_route = [0]
        current_demand = 0
        feasible = True
        all_routes = []

        for node in route:
            if current_demand + demands[node] <= capacity:
                current_route.append(node)
                current_demand += demands[node]
            else:
                current_route.append(0)
                all_routes.append(current_route)
                current_route = [0, node]
                current_demand = demands[node]
                if demands[node] > capacity:
                    feasible = False
                    break
        current_route.append(0)
        all_routes.append(current_route)
            
        if feasible:
            for route in all_routes:
                for i in range(len(route) - 1):
                    heuristics_matrix[route[i], route[i+1]] += 1
                    heuristics_matrix[route[i+1], route[i]] += 1
    
    heuristics_matrix = heuristics_matrix / num_samples
    return heuristics_matrix
