import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm prioritizes edges connecting nodes with shorter distances and lower combined demand relative to the vehicle capacity, while also incorporating a penalty for edges that would lead to routes exceeding capacity.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    
    for i in range(n):
        for j in range(i + 1, n):
            # Prioritize shorter distances and lower combined demand
            distance_score = 1 / (distance_matrix[i, j] + 1e-6)  # Avoid division by zero
            demand_score = 1 - min(1, (demands[i] + demands[j]) / capacity)  # Penalize high demand
            
            heuristics_matrix[i, j] = distance_score * demand_score
            heuristics_matrix[j, i] = distance_score * demand_score  # Symmetric matrix
            
    return heuristics_matrix
