import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm iteratively constructs solutions by greedily adding the nearest feasible node to the current route or starting a new route when capacity is exceeded, then averages the edge usage across multiple such solutions to form a heuristic.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_iterations = 1000

    for _ in range(num_iterations):
        unvisited = set(range(1, n))
        routes = []
        while unvisited:
            current_route = [0]
            current_capacity = 0
            current_node = 0  # Start at depot
            
            while True:
                # Find nearest feasible neighbor
                nearest_neighbor = None
                min_distance = float('inf')
                
                for neighbor in unvisited:
                    if current_capacity + demands[neighbor] <= capacity:
                        dist = distance_matrix[current_node, neighbor]
                        if dist < min_distance:
                            min_distance = dist
                            nearest_neighbor = neighbor
                
                if nearest_neighbor is None:
                    # No feasible neighbor, close route and start a new one
                    current_route.append(0)
                    routes.append(current_route)
                    break
                else:
                    # Add neighbor to route
                    current_route.append(nearest_neighbor)
                    current_capacity += demands[nearest_neighbor]
                    unvisited.remove(nearest_neighbor)
                    current_node = nearest_neighbor
            
            if current_route[-1] != 0:
                 current_route.append(0)
            if len(current_route) > 1 and current_route not in routes:    
                routes.append(current_route)
        
        # Update edge frequencies
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1

    heuristics_matrix = heuristics_matrix / num_iterations
    return heuristics_matrix
