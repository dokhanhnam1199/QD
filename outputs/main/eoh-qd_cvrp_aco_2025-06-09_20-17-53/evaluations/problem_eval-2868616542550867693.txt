import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm uses a genetic algorithm approach, evolving a population of route permutations and using their fitness (based on distance and feasibility) to guide the construction of a heuristic matrix.}
    """
    n = distance_matrix.shape[0]
    population_size = 50
    num_generations = 100
    mutation_rate = 0.1
    heuristics_matrix = np.zeros((n, n))

    def create_individual():
        customer_indices = list(range(1, n))
        random.shuffle(customer_indices)
        return customer_indices

    def evaluate_individual(individual):
        routes = []
        current_route = [0]
        current_demand = 0
        for customer in individual:
            if current_demand + demands[customer] <= capacity:
                current_route.append(customer)
                current_demand += demands[customer]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, customer]
                current_demand = demands[customer]
        current_route.append(0)
        routes.append(current_route)

        total_distance = 0
        for route in routes:
            for i in range(len(route) - 1):
                total_distance += distance_matrix[route[i], route[i+1]]

        return routes, total_distance

    def crossover(parent1, parent2):
        start = random.randint(0, n - 2)
        end = random.randint(start + 1, n - 1)
        child = parent1[start:end]
        
        remaining = [node for node in parent2 if node not in child]
        child = child + remaining
        return child

    def mutate(individual):
        for i in range(len(individual)):
            if random.random() < mutation_rate:
                j = random.randint(0, len(individual) - 1)
                individual[i], individual[j] = individual[j], individual[i]
        return individual

    population = [create_individual() for _ in range(population_size)]

    for _ in range(num_generations):
        evaluated_population = [(evaluate_individual(individual), individual) for individual in population]
        evaluated_population.sort(key=lambda x: x[0][1])

        best_individuals = [individual for _, individual in evaluated_population[:population_size // 2]]

        new_population = best_individuals[:]
        while len(new_population) < population_size:
            parent1 = random.choice(best_individuals)
            parent2 = random.choice(best_individuals)
            child = crossover(parent1, parent2)
            child = mutate(child)
            new_population.append(child)

        population = new_population

    best_routes, _ = evaluate_individual(evaluated_population[0][1])

    for route in best_routes:
        for i in range(len(route) - 1):
            node1 = route[i]
            node2 = route[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    return heuristics_matrix
