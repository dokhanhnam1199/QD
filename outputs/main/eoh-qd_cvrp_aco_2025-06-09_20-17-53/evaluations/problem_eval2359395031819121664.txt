import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm iteratively constructs routes by probabilistically adding edges based on distance and demand, favoring shorter distances and lower demand utilization, and then updates a heuristic matrix based on the selected edges.}"""
    n = len(demands)
    heuristics_matrix = np.zeros((n, n))
    num_iterations = 1000

    for _ in range(num_iterations):
        current_node = 0  # Start at the depot
        current_load = 0
        route = [0]
        remaining_nodes = set(range(1, n))

        while remaining_nodes:
            # Calculate probabilities for each remaining node
            probabilities = {}
            total_probability = 0

            for next_node in remaining_nodes:
                if current_load + demands[next_node] <= capacity:
                    distance = distance_matrix[current_node, next_node]
                    #Heuristic: favor short distances and lower load increases
                    probability = (1 / distance) * (1 - (current_load + demands[next_node]) / capacity)
                    probabilities[next_node] = probability
                    total_probability += probability

            # If no node can be added due to capacity, return to depot
            if not probabilities:
                route.append(0)
                current_node = 0
                current_load = 0
                continue

            # Normalize probabilities
            for node in probabilities:
                probabilities[node] /= total_probability

            # Choose next node probabilistically
            next_node = random.choices(list(probabilities.keys()), weights=list(probabilities.values()), k=1)[0]
            route.append(next_node)
            current_load += demands[next_node]
            current_node = next_node
            remaining_nodes.remove(next_node)

        route.append(0)

        # Update heuristics matrix
        for i in range(len(route) - 1):
            node1 = route[i]
            node2 = route[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    #Normalize
    total_edges = np.sum(heuristics_matrix)
    if total_edges > 0:
        heuristics_matrix = heuristics_matrix / total_edges
    return heuristics_matrix
