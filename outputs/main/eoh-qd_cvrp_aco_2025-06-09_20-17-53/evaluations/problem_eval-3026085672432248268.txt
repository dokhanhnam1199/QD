import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples routes based on a weighted probability, where the weight is determined by the inverse of the distance between nodes and whether capacity constraints are met.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000

    for _ in range(num_samples):
        remaining_nodes = list(range(1, n))
        routes = []
        current_route = [0]
        current_capacity = capacity

        while remaining_nodes:
            possible_nodes = []
            weights = []
            for node in remaining_nodes:
                if demands[node] <= current_capacity:
                    possible_nodes.append(node)
                    weights.append(1 / distance_matrix[current_route[-1], node])
            
            if not possible_nodes:
                routes.append(current_route + [0])
                current_route = [0]
                current_capacity = capacity
                continue
            
            total_weight = sum(weights)
            probabilities = [w / total_weight for w in weights]

            next_node = random.choices(possible_nodes, probabilities)[0]

            current_route.append(next_node)
            current_capacity -= demands[next_node]
            remaining_nodes.remove(next_node)

        routes.append(current_route + [0])

        for route in routes:
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                heuristics_matrix[u, v] += 1
                heuristics_matrix[v, u] += 1  # Assuming symmetric distance matrix

    heuristics_matrix = heuristics_matrix / num_samples
    return heuristics_matrix
