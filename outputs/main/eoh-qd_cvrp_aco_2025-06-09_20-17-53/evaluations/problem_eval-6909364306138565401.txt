import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm uses an Ant Colony Optimization (ACO) approach to build routes probabilistically, updating pheromone levels on edges based on route feasibility and length.}"""
    n = len(demands)
    pheromone_matrix = np.ones((n, n))  # Initialize pheromone levels
    heuristics_matrix = np.zeros((n, n))
    alpha = 1  # Pheromone influence
    beta = 2  # Distance influence
    rho = 0.1  # Evaporation rate
    q = 100  # Pheromone deposit amount
    num_ants = 20
    num_iterations = 100

    for iteration in range(num_iterations):
        all_routes = []
        for ant in range(num_ants):
            unvisited = set(range(1, n))
            current_node = 0
            current_route = [0]
            current_load = 0
            routes = []

            while unvisited:
                probabilities = []
                nodes = []
                for node in unvisited:
                    if current_load + demands[node] <= capacity:
                        nodes.append(node)
                        probabilities.append((pheromone_matrix[current_node, node]**alpha) / (distance_matrix[current_node, node]**beta))
                    else:
                        pass

                if not nodes:
                    current_route.append(0)
                    routes.append(current_route)
                    current_route = [0]
                    current_load = 0
                    continue
                probabilities = np.array(probabilities) / np.sum(probabilities)

                next_node = np.random.choice(nodes, p=probabilities)
                current_route.append(next_node)
                current_load += demands[next_node]
                unvisited.remove(next_node)
                current_node = next_node
            current_route.append(0)
            routes.append(current_route)
            all_routes.append(routes)

        # Update pheromone levels
        for i in range(n):
            for j in range(n):
                pheromone_matrix[i, j] *= (1 - rho)

        for routes in all_routes:
            total_distance = 0
            is_feasible = True
            for route in routes:
                route_demand = 0
                for node in route[1:-1]:
                    route_demand += demands[node]
                if route_demand > capacity:
                    is_feasible = False
                    break
                for i in range(len(route) - 1):
                    total_distance += distance_matrix[route[i], route[i+1]]
            if is_feasible:
                for route in routes:
                    for i in range(len(route) - 1):
                        pheromone_matrix[route[i], route[i+1]] += q / total_distance
                        pheromone_matrix[route[i+1], route[i]] += q / total_distance

    # Create heuristics matrix from pheromone matrix
    for i in range(n):
        for j in range(n):
            heuristics_matrix[i, j] = pheromone_matrix[i, j]
    return heuristics_matrix
