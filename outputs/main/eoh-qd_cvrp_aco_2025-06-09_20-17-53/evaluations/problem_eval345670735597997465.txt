import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm uses a genetic algorithm approach to evolve a population of routes, evaluates their fitness based on feasibility and distance, and uses the edge frequencies in the best-performing routes to build the heuristic matrix.}"""
    n = len(demands)
    heuristics_matrix = np.zeros((n, n))
    population_size = 50
    num_generations = 100
    mutation_rate = 0.1
    tournament_size = 5

    def create_individual():
        customer_indices = list(range(1, n))
        random.shuffle(customer_indices)
        return customer_indices

    def evaluate_individual(individual):
        routes = []
        current_route = [0]
        current_demand = 0
        for customer in individual:
            if current_demand + demands[customer] <= capacity:
                current_route.append(customer)
                current_demand += demands[customer]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, customer]
                current_demand = demands[customer]
        current_route.append(0)
        routes.append(current_route)

        total_distance = 0
        for route in routes:
            for i in range(len(route) - 1):
                total_distance += distance_matrix[route[i], route[i+1]]
        return total_distance, routes

    def selection(population_fitnesses):
        selected_indices = random.sample(range(len(population_fitnesses)), tournament_size)
        winner_index = min(selected_indices, key=lambda index: population_fitnesses[index][0])
        return winner_index

    def crossover(parent1, parent2):
        start = random.randint(0, n - 2)
        length = random.randint(1, n - 1 - start)
        child = [-1] * (n - 1)
        child[start:start + length] = parent1[start:start + length]
        
        current_index = 0
        for gene in parent2:
            if gene not in child:
                while child[current_index] != -1:
                    current_index = (current_index + 1) % (n - 1)
                child[current_index] = gene
        return [c for c in child if c != -1]

    def mutate(individual):
        if random.random() < mutation_rate:
            i = random.randint(0, n - 2)
            j = random.randint(0, n - 2)
            individual[i], individual[j] = individual[j], individual[i]
        return individual

    # Initialize population
    population = [create_individual() for _ in range(population_size)]

    # Evolve population
    for _ in range(num_generations):
        population_fitnesses = [evaluate_individual(individual) for individual in population]
        new_population = []
        for _ in range(population_size):
            parent1_index = selection(population_fitnesses)
            parent2_index = selection(population_fitnesses)
            child = crossover(population[parent1_index], population[parent2_index])
            child = mutate(child)
            new_population.append(child)
        population = new_population

    # Evaluate final population and choose best route
    population_fitnesses = [evaluate_individual(individual) for individual in population]
    best_individual_index = min(range(len(population_fitnesses)), key=lambda index: population_fitnesses[index][0])
    best_routes = population_fitnesses[best_individual_index][1]

    # Update heuristic matrix based on best route
    for route in best_routes:
        for i in range(len(route) - 1):
            u = route[i]
            v = route[i+1]
            heuristics_matrix[u, v] += 1
            heuristics_matrix[v, u] += 1

    return heuristics_matrix
