import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm samples routes using a nearest neighbor approach with stochastic restarts, evaluates them, and updates a heuristic matrix favoring edges from better routes.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros((n, n))

    for _ in range(num_samples):
        start_node = np.random.randint(1, n) # Random restart node
        unvisited = set(range(1, n))
        current_node = start_node
        routes = []
        current_route = [0, start_node]  # Start at the depot then restart node
        current_demand = demands[start_node]
        unvisited.remove(start_node)
        

        while unvisited:
            # Find the nearest unvisited neighbor
            nearest_neighbor = None
            min_distance = float('inf')
            for neighbor in unvisited:
                distance = distance_matrix[current_node, neighbor]
                if distance < min_distance:
                    min_distance = distance
                    nearest_neighbor = neighbor

            if current_demand + demands[nearest_neighbor] <= capacity:
                current_route.append(nearest_neighbor)
                current_demand += demands[nearest_neighbor]
                current_node = nearest_neighbor
                unvisited.remove(nearest_neighbor)
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, nearest_neighbor]
                current_demand = demands[nearest_neighbor]
                current_node = nearest_neighbor
                if nearest_neighbor in unvisited:
                    unvisited.remove(nearest_neighbor)

        current_route.append(0)
        routes.append(current_route)

        total_distance = 0
        for route in routes:
            for i in range(len(route) - 1):
                total_distance += distance_matrix[route[i], route[i+1]]
        
        if total_distance > 0:
            for route in routes:
                for i in range(len(route) - 1):
                    node1 = route[i]
                    node2 = route[i+1]
                    heuristics_matrix[node1, node2] += 1 / total_distance
                    heuristics_matrix[node2, node1] += 1 / total_distance

    return heuristics_matrix
