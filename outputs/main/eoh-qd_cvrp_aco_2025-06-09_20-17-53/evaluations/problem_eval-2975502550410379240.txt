import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples a set of random routes, evaluates their feasibility and cost, and uses a score function based on route length and number of vehicles to construct a heuristic matrix.}
    """
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros((n, n))

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        customer_indices = np.arange(1, n)
        np.random.shuffle(customer_indices)

        # Construct routes based on the permutation
        routes = []
        current_route = [0]  # Start at the depot
        current_demand = 0

        for customer in customer_indices:
            if current_demand + demands[customer] <= capacity:
                current_route.append(customer)
                current_demand += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]  # Start a new route
                current_demand = demands[customer]

        current_route.append(0)  # Return to depot
        routes.append(current_route)

        # Calculate the total distance of the routes
        total_distance = 0
        for route in routes:
            for i in range(len(route) - 1):
                total_distance += distance_matrix[route[i], route[i+1]]

        # Score function: Combine distance and number of vehicles
        num_vehicles = len(routes)
        score = (1 / total_distance) * (1 / num_vehicles) if total_distance > 0 else 0  # Avoid division by zero

        # Update the heuristics matrix based on the quality of the routes
        if score > 0:
            for route in routes:
                for i in range(len(route) - 1):
                    node1 = route[i]
                    node2 = route[i+1]
                    heuristics_matrix[node1, node2] += score
                    heuristics_matrix[node2, node1] += score # Account for undirected edges

    return heuristics_matrix
