import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm iteratively samples feasible routes by randomly adding nodes based on distance and demand, then aggregates edge frequencies across multiple samples to create a heuristic matrix.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        # Initialize a route
        current_route = [0]
        current_load = 0
        visited = {0}
        
        while len(visited) < n:
            # Find feasible and unvisited neighbors
            feasible_neighbors = []
            for i in range(1, n):
                if i not in visited and current_load + demands[i] <= capacity:
                    feasible_neighbors.append(i)
            
            # If no feasible neighbors, return to depot
            if not feasible_neighbors:
                current_route.append(0)
                current_load = 0
                continue

            # Choose a neighbor randomly based on distance
            distances = [distance_matrix[current_route[-1]][i] for i in feasible_neighbors]
            probabilities = [1 / d if d > 0 else 1 for d in distances]  # Inverse distance
            total_prob = sum(probabilities)
            probabilities = [p / total_prob for p in probabilities]

            next_node = random.choices(feasible_neighbors, weights=probabilities, k=1)[0]
            current_route.append(next_node)
            current_load += demands[next_node]
            visited.add(next_node)
        
        current_route.append(0)  # Return to depot

        # Update heuristics matrix
        for i in range(len(current_route) - 1):
            u = current_route[i]
            v = current_route[i+1]
            heuristics_matrix[u, v] += 1
            heuristics_matrix[v, u] += 1

    # Normalize the heuristics matrix
    heuristics_matrix /= num_samples
    
    return heuristics_matrix
