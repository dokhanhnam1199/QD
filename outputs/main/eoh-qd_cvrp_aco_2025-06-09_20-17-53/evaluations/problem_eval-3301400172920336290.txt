import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm estimates edge attractiveness for CVRP by sampling routes using a nearest neighbor approach within capacity constraints and updates edge occurrence counts.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000

    for _ in range(num_samples):
        # Start at the depot
        current_node = 0
        unvisited_customers = set(range(1, n))
        routes = []
        current_route = [0]
        current_load = 0

        while unvisited_customers:
            # Find the nearest unvisited customer within capacity
            nearest_customer = None
            min_distance = float('inf')
            for customer in unvisited_customers:
                if current_load + demands[customer] <= capacity:
                    distance = distance_matrix[current_node, customer]
                    if distance < min_distance:
                        min_distance = distance
                        nearest_customer = customer

            # If a suitable customer is found, add it to the route
            if nearest_customer:
                current_route.append(nearest_customer)
                current_load += demands[nearest_customer]
                unvisited_customers.remove(nearest_customer)
                current_node = nearest_customer
            else:
                # Return to depot and start a new route
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_load = 0
                current_node = 0

        # Add the last route and return to depot
        current_route.append(0)
        routes.append(current_route)

        # Update heuristics matrix based on edges in the routes
        for route in routes:
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                heuristics_matrix[u, v] += 1
                heuristics_matrix[v, u] += 1  # Assuming symmetric distance matrix

    return heuristics_matrix
