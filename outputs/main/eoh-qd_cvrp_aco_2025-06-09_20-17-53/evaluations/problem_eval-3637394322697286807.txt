import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm constructs routes by iteratively adding the nearest feasible node to the current route, then uses the frequency of edges in low-cost routes to build a heuristic matrix.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_routes = 500
    top_k = 10

    feasible_routes = []

    for _ in range(num_routes):
        vehicle_routes = []
        unvisited = set(range(1, n))
        current_route = [0]
        current_load = 0

        while unvisited:
            nearest_node = None
            min_distance = float('inf')

            for node in unvisited:
                if current_load + demands[node] <= capacity:
                    distance = distance_matrix[current_route[-1], node]
                    if distance < min_distance:
                        min_distance = distance
                        nearest_node = node

            if nearest_node is None:
                current_route.append(0)
                vehicle_routes.append(current_route)
                current_route = [0]
                current_load = 0

                nearest_node = None
                min_distance = float('inf')

                for node in unvisited:
                    if demands[node] <= capacity:
                        distance = distance_matrix[current_route[-1], node]
                        if distance < min_distance:
                            min_distance = distance
                            nearest_node = node
                if nearest_node is None:
                    break

            if current_load + demands[nearest_node] <= capacity:
                current_route.append(nearest_node)
                current_load += demands[nearest_node]
                unvisited.remove(nearest_node)
            else:
                current_route.append(0)
                vehicle_routes.append(current_route)
                current_route = [0]
                current_load = 0
                

        current_route.append(0)
        vehicle_routes.append(current_route)

        total_distance = 0
        for vehicle_route in vehicle_routes:
            for i in range(len(vehicle_route) - 1):
                total_distance += distance_matrix[vehicle_route[i], vehicle_route[i+1]]

        feasible_routes.append((vehicle_routes, total_distance))

    feasible_routes.sort(key=lambda x: x[1])

    for k in range(min(top_k, len(feasible_routes))):
        vehicle_routes, _ = feasible_routes[k]
        for vehicle_route in vehicle_routes:
            for i in range(len(vehicle_route) - 1):
                node1 = vehicle_route[i]
                node2 = vehicle_route[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1

    return heuristics_matrix
