import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples multiple routes using a savings-based approach with added randomness and evaluates their feasibility, aggregating edge frequencies across feasible routes.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        savings = {}
        for i in range(1, n):
            for j in range(i + 1, n):
                savings[(i, j)] = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j]

        sorted_savings = sorted(savings.items(), key=lambda item: item[1], reverse=True)
        
        routes = []
        node_route_map = {}
        
        for (i, j), _ in sorted_savings:
            route_i = node_route_map.get(i)
            route_j = node_route_map.get(j)
            
            if route_i is None and route_j is None:
                if demands[i] + demands[j] <= capacity:
                    routes.append([0, i, j, 0])
                    node_route_map[i] = routes[-1]
                    node_route_map[j] = routes[-1]

            elif route_i is not None and route_j is None:
                route = route_i
                if route[-2] == i and sum(demands[node] for node in route[1:-1]) + demands[j] <= capacity:
                    route[-1] = j
                    route.append(0)
                    node_route_map[j] = route
                elif route[1] == i and sum(demands[node] for node in route[1:-1]) + demands[j] <= capacity:
                    route[0] = j
                    route.insert(0,0)
                    node_route_map[j] = route
            elif route_i is None and route_j is not None:
                route = route_j
                if route[-2] == j and sum(demands[node] for node in route[1:-1]) + demands[i] <= capacity:
                    route[-1] = i
                    route.append(0)
                    node_route_map[i] = route
                elif route[1] == j and sum(demands[node] for node in route[1:-1]) + demands[i] <= capacity:
                    route[0] = i
                    route.insert(0,0)
                    node_route_map[i] = route
            elif route_i is not None and route_j is not None and route_i != route_j:
                if route_i[-2] == i and route_j[1] == j and sum(demands[node] for node in route_i[1:-1]) + sum(demands[node] for node in route_j[1:-1]) <= capacity:
                  route = route_i[:-1] + route_j[1:]
                  for node in route[1:-1]:
                    node_route_map[node] = route
                elif route_i[1] == i and route_j[-2] == j and sum(demands[node] for node in route_i[1:-1]) + sum(demands[node] for node in route_j[1:-1]) <= capacity:
                  route = route_j[:-1] + route_i[1:]
                  for node in route[1:-1]:
                    node_route_map[node] = route

        
        for route in routes:
          for i in range(len(route) - 1):
              node1 = route[i]
              node2 = route[i+1]
              heuristics_matrix[node1, node2] += 1
              heuristics_matrix[node2, node1] += 1

    heuristics_matrix = heuristics_matrix / num_samples

    return heuristics_matrix
