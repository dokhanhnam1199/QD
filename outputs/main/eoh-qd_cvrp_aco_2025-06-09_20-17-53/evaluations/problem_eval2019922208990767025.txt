import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm uses an ant colony optimization (ACO) approach to iteratively build routes based on pheromone levels and heuristic information, updating pheromones based on route quality.}
    """
    n = distance_matrix.shape[0]
    pheromone_matrix = np.ones((n, n))  # Initialize pheromone matrix
    heuristic_matrix = 1 / (distance_matrix + np.eye(n)) #Heuristic Information
    alpha = 1  # Pheromone influence
    beta = 2  # Heuristic influence
    rho = 0.5  # Evaporation rate
    Q = 100  # Pheromone deposit constant
    num_ants = 50
    num_iterations = 100

    for iteration in range(num_iterations):
        ant_routes = []
        ant_costs = []

        for ant in range(num_ants):
            route = []
            unvisited = list(range(1, n))
            current_node = 0
            current_capacity = 0
            current_route = [0]

            while unvisited:
                probabilities = np.zeros(len(unvisited))
                for i, node in enumerate(unvisited):
                    if current_capacity + demands[node] <= capacity:
                        probabilities[i] = (pheromone_matrix[current_node, node]**alpha) * (heuristic_matrix[current_node, node]**beta)
                    else:
                        probabilities[i] = 0
                
                if np.sum(probabilities) == 0:
                    current_route.append(0)
                    route.append(current_route)
                    current_route = [0]
                    current_capacity = 0
                    probabilities = np.zeros(len(unvisited))
                    for i, node in enumerate(unvisited):
                        if current_capacity + demands[node] <= capacity:
                            probabilities[i] = (pheromone_matrix[current_node, node]**alpha) * (heuristic_matrix[current_node, node]**beta)
                        else:
                            probabilities[i] = 0
                
                if np.sum(probabilities) > 0:
                    probabilities /= np.sum(probabilities)
                    next_node = random.choices(unvisited, probabilities)[0]
                else:
                    next_node = random.choice(unvisited)
                    
                if current_capacity + demands[next_node] <= capacity:
                    current_route.append(next_node)
                    current_capacity += demands[next_node]
                    current_node = next_node
                    unvisited.remove(next_node)
                else:
                    current_route.append(0)
                    route.append(current_route)
                    current_route = [0, next_node]
                    current_capacity = demands[next_node]
                    current_node = next_node
                    unvisited.remove(next_node)

            current_route.append(0)
            route.append(current_route)
            
            ant_routes.append(route)

            # Calculate cost of route
            total_distance = 0
            for sub_route in route:
                for i in range(len(sub_route) - 1):
                    total_distance += distance_matrix[sub_route[i], sub_route[i+1]]
            ant_costs.append(total_distance)

        # Update pheromone matrix
        pheromone_matrix *= (1 - rho)  # Evaporation

        for ant in range(num_ants):
            cost = ant_costs[ant]
            for sub_route in ant_routes[ant]:
                for i in range(len(sub_route) - 1):
                    pheromone_matrix[sub_route[i], sub_route[i+1]] += Q / cost
                    pheromone_matrix[sub_route[i+1], sub_route[i]] += Q / cost

    return heuristics_matrix
