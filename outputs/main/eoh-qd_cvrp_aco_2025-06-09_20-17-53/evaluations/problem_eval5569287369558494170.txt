import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples many random routes, evaluates their feasibility and cost, and uses a score function based on both the frequency of edges in feasible routes and the inverse of the route cost to construct a heuristic matrix.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        customer_indices = np.random.permutation(np.arange(1, n))
        
        # Construct routes based on the permutation and capacity constraints
        routes = []
        current_route = [0]  # Start at the depot
        current_demand = 0
        
        for customer in customer_indices:
            if current_demand + demands[customer] <= capacity:
                current_route.append(customer)
                current_demand += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]  # Start a new route from depot
                current_demand = demands[customer]
        
        current_route.append(0) # Return to depot at the end of all deliveries
        routes.append(current_route)

        # Calculate the total distance of the routes
        total_distance = 0
        feasible = True
        for route in routes:
            route_distance = 0
            current_demand = 0
            for i in range(len(route) - 1):
                route_distance += distance_matrix[route[i], route[i+1]]
                if route[i+1] != 0:
                    current_demand += demands[route[i+1]]

            if current_demand > capacity:
                feasible = False
                break

            total_distance += route_distance
        
        # Update the heuristic matrix if the solution is feasible
        if feasible:
            score = 1.0 / (total_distance + 1e-6)  # Score based on inverse distance
            for route in routes:
                for i in range(len(route) - 1):
                    heuristics_matrix[route[i], route[i+1]] += score
                    heuristics_matrix[route[i+1], route[i]] += score  # Symmetric

    # Normalize the heuristic matrix
    total_counts = np.sum(heuristics_matrix)
    if total_counts > 0:
        heuristics_matrix = heuristics_matrix / total_counts

    return heuristics_matrix
