import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm uses an Ant Colony Optimization (ACO) approach with stochastic sampling to construct a pheromone matrix representing edge attractiveness based on route feasibility and length.}"""
    n = distance_matrix.shape[0]
    pheromone_matrix = np.ones((n, n))  # Initialize pheromone matrix
    evaporation_rate = 0.1
    alpha = 1
    beta = 2
    num_ants = 50
    num_iterations = 100

    for iteration in range(num_iterations):
        ant_routes = []
        for ant in range(num_ants):
            unvisited = set(range(1, n))
            current_node = 0
            route = [0]
            current_capacity = 0
            while unvisited:
                probabilities = []
                nodes = []
                for neighbor in unvisited:
                    if current_capacity + demands[neighbor] <= capacity:
                        nodes.append(neighbor)
                        pheromone_level = pheromone_matrix[current_node, neighbor] ** alpha
                        distance_heuristic = (1.0 / distance_matrix[current_node, neighbor]) ** beta
                        probabilities.append(pheromone_level * distance_heuristic)

                if not nodes: # Vehicle must return to depot before visiting other nodes
                    route.append(0)
                    ant_routes.append(route)
                    route = [0]
                    current_capacity = 0
                    continue
                
                probabilities = np.array(probabilities)
                probabilities /= probabilities.sum() # Normalize to create probability distribution
                
                next_node = np.random.choice(nodes, p=probabilities)
                
                route.append(next_node)
                current_capacity += demands[next_node]
                unvisited.remove(next_node)
                current_node = next_node
            
            route.append(0)
            ant_routes.append(route)

        # Calculate route lengths
        route_lengths = []
        for route in ant_routes:
            length = 0
            for i in range(len(route) - 1):
                length += distance_matrix[route[i], route[i+1]]
            route_lengths.append(length)

        # Update pheromones
        pheromone_matrix *= (1 - evaporation_rate)  # Evaporation

        for route, length in zip(ant_routes, route_lengths):
            if length > 0:
                deposit = 1.0 / length  # Higher quality routes deposit more pheromone
                for i in range(len(route) - 1):
                    pheromone_matrix[route[i], route[i+1]] += deposit
                    pheromone_matrix[route[i+1], route[i]] += deposit #symmetric

    return heuristics_matrix
