import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples random routes, evaluates their cost, and biases edge selection probability based on a combination of distance and demand considerations.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        customer_indices = np.random.permutation(np.arange(1, n))
        
        routes = []
        current_route = [0]
        current_demand = 0
        
        for customer in customer_indices:
            if current_demand + demands[customer] <= capacity:
                current_route.append(customer)
                current_demand += demands[customer]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, customer]
                current_demand = demands[customer]
        
        current_route.append(0)
        routes.append(current_route)

        total_distance = 0
        for route in routes:
            for i in range(len(route) - 1):
                total_distance += distance_matrix[route[i], route[i+1]]
        
        if total_distance > 0:
            route_probability = 1.0 / total_distance
        else:
            route_probability = 0.0

        for route in routes:
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                edge_weight = route_probability / (distance_matrix[u, v] + 1e-6)
                heuristics_matrix[u, v] += edge_weight
                heuristics_matrix[v, u] += edge_weight

    total_weight = np.sum(heuristics_matrix)
    if total_weight > 0:
        heuristics_matrix = heuristics_matrix / total_weight

    return heuristics_matrix
