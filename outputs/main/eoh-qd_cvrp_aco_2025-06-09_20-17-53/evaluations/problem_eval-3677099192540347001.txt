import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm constructs a heuristic matrix by iteratively building routes, prioritizing edges that connect nodes with high demand-to-distance ratios while respecting vehicle capacity, and penalizing repeated revisits to the same node within a single route.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_iterations = 1000
    penalty_factor = 0.1

    for _ in range(num_iterations):
        current_node = 0
        current_load = 0
        route = [0]
        visited = {0}

        while len(visited) < n:
            # Calculate demand-to-distance ratio for unvisited nodes
            ratios = np.zeros(n)
            for i in range(1, n):
                if i not in visited and current_load + demands[i] <= capacity:
                    ratios[i] = demands[i] / distance_matrix[current_node, i]
                else:
                    ratios[i] = -1  # Invalid option

            # Select next node based on ratio, with some randomness
            eligible_nodes = np.where(ratios > 0)[0]
            if len(eligible_nodes) > 0:
                probabilities = ratios[eligible_nodes] / np.sum(ratios[eligible_nodes])
                next_node = np.random.choice(eligible_nodes, p=probabilities)

                heuristics_matrix[current_node, next_node] += 1
                heuristics_matrix[next_node, current_node] += 1

                current_load += demands[next_node]
                current_node = next_node
                route.append(next_node)
                visited.add(next_node)
            else:
                # Return to depot if no feasible nodes are available
                heuristics_matrix[current_node, 0] += 1
                heuristics_matrix[0, current_node] += 1
                current_node = 0
                current_load = 0
                route.append(0)
                visited.add(0)


        # Penalize repeated revisits to the same customer in one tour
        for i in range(len(route) - 1):
            if route[i+1] in route[:i+1]:
                heuristics_matrix[route[i], route[i+1]] -= penalty_factor
                heuristics_matrix[route[i+1], route[i]] -= penalty_factor
    return heuristics_matrix
