import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm samples a diverse set of random routes, evaluates their feasibility based on capacity constraints, and then uses a score function combining edge frequency and distance to create a heuristic matrix.}"""

    n = len(demands)
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000  # Number of random route samples
    distance_weight = 0.5 # Weight for distance in the score function

    for _ in range(num_samples):
        # Generate a random permutation of customer nodes (excluding the depot)
        customer_nodes = list(range(1, n))
        random.shuffle(customer_nodes)

        # Build routes based on capacity constraints
        routes = []
        current_route = [0]  # Start at the depot
        current_load = 0

        for node in customer_nodes:
            if current_load + demands[node] <= capacity:
                current_route.append(node)
                current_load += demands[node]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, node]  # Start a new route from depot
                current_load = demands[node]

        current_route.append(0) # Return to depot from the last node
        routes.append(current_route)

        # Update heuristics matrix based on edges in the routes
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                # Score function: (1 - distance_weight) * frequency - distance_weight * distance
                heuristics_matrix[node1, node2] += (1 - distance_weight) - distance_weight * distance_matrix[node1, node2]
                heuristics_matrix[node2, node1] += (1 - distance_weight) - distance_weight * distance_matrix[node2, node1]  # Assuming symmetric distance matrix

    # Normalize the heuristics matrix (optional, but can be helpful)
    total_route_edges = np.sum(heuristics_matrix)
    if total_route_edges > 0:
      heuristics_matrix = heuristics_matrix / total_route_edges

    return heuristics_matrix
