import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples a large number of random routes, evaluates their feasibility with respect to capacity constraints, and constructs a heuristic matrix that favors shorter edges and penalizes routes exceeding capacity.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding depot)
        customer_indices = np.random.permutation(range(1, n))
        
        # Construct routes based on capacity
        routes = []
        current_route = [0]
        current_load = 0
        
        for customer in customer_indices:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, customer]
                current_load = demands[customer]
        
        current_route.append(0)
        routes.append(current_route)

        # Update heuristics matrix based on the edges in feasible routes,
        # giving higher scores to shorter edges and penalizing routes that
        # exceed capacity.
        route_load = 0
        for route in routes:
            route_load = sum([demands[i] for i in route if i != 0])

            # Penalize infeasible routes based on excess capacity
            if route_load > capacity:
              penalty_factor = 1 - (route_load - capacity) / capacity
            else:
              penalty_factor = 1
                
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                edge_distance = distance_matrix[u, v]
                heuristics_matrix[u, v] += penalty_factor / (edge_distance + 1e-6)
                heuristics_matrix[v, u] += penalty_factor / (edge_distance + 1e-6)

    # Normalize the matrix
    heuristics_matrix = heuristics_matrix / num_samples

    return heuristics_matrix
