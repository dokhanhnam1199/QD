import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm iteratively refines a heuristic matrix by generating candidate routes, evaluating their cost and feasibility using a simulated annealing-inspired approach, and updating the matrix based on the acceptance probability of each route.}"""

    n = len(demands)
    heuristics_matrix = np.ones((n, n))  # Initialize with ones to avoid zero probabilities
    temperature = 100.0  # Initial temperature for simulated annealing
    cooling_rate = 0.95  # Cooling rate for simulated annealing
    num_iterations = 1000

    for _ in range(num_iterations):
        # Generate a candidate route by randomly swapping two customers
        customer_nodes = list(range(1, n))
        route = customer_nodes[:]
        
        idx1, idx2 = random.sample(range(len(route)), 2)
        route[idx1], route[idx2] = route[idx2], route[idx1]

        # Build routes based on capacity constraints
        routes = []
        current_route = [0]
        current_load = 0

        for node in route:
            if current_load + demands[node] <= capacity:
                current_route.append(node)
                current_load += demands[node]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, node]
                current_load = demands[node]

        current_route.append(0)
        routes.append(current_route)

        # Calculate the total distance of the routes
        total_distance = 0
        for r in routes:
            for i in range(len(r) - 1):
                total_distance += distance_matrix[r[i], r[i+1]]
                
        #Evaluate feasibility
        is_feasible = True
        for r in routes:
            load = 0
            for node in r:
                load += demands[node]
            if load > capacity and node != 0:
                is_feasible = False
                break

        # Calculate the change in cost (delta)
        if is_feasible:
          delta = total_distance
        else:
          delta = float('inf') #Penalty for infeasible solutions

        #Acceptance probability using simulated annealing
        if delta < 0 : # where delta is always positive in this example
            acceptance_probability = 1.0
        else:
            acceptance_probability = np.exp(-delta / temperature)

        #Update heuristics matrix based on acceptance probability
        if random.random() < acceptance_probability and is_feasible:
            for r in routes:
                for i in range(len(r) - 1):
                    node1 = r[i]
                    node2 = r[i+1]
                    heuristics_matrix[node1, node2] += 1
                    heuristics_matrix[node2, node1] += 1

        #Cooling
        temperature *= cooling_rate

    return heuristics_matrix
