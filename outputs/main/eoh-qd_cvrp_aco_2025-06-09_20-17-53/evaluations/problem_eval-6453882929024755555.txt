import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm combines random route sampling with a cost-benefit analysis, favoring edges that appear frequently in low-cost routes while penalizing those in high-cost, feasible routes.}"""

    n = len(demands)
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customer nodes (excluding the depot)
        customer_nodes = list(range(1, n))
        random.shuffle(customer_nodes)

        # Build routes based on capacity constraints
        routes = []
        current_route = [0]  # Start at the depot
        current_load = 0

        for node in customer_nodes:
            if current_load + demands[node] <= capacity:
                current_route.append(node)
                current_load += demands[node]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, node]  # Start a new route from depot
                current_load = demands[node]

        current_route.append(0) # Return to depot from the last node
        routes.append(current_route)
        
        # Calculate the total distance of the routes
        total_distance = 0
        for route in routes:
            for i in range(len(route) - 1):
                total_distance += distance_matrix[route[i], route[i+1]]

        # Update heuristics matrix based on edges in the routes, weighted by cost
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                # Reward edges in low-cost routes, penalize edges in high-cost routes
                heuristics_matrix[node1, node2] += 1.0 / (1.0 + total_distance)
                heuristics_matrix[node2, node1] += 1.0 / (1.0 + total_distance) # Assuming symmetric distance matrix

    # Normalize the heuristics matrix
    total_score = np.sum(heuristics_matrix)
    if total_score > 0:
        heuristics_matrix = heuristics_matrix / total_score

    return heuristics_matrix
