import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm iteratively builds routes by prioritizing nodes closer to the current node and with smaller demands, sampling multiple routes and recording edge frequencies to estimate edge desirability.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000

    for _ in range(num_samples):
        remaining_nodes = list(range(1, n))
        routes = []
        current_route = [0]
        current_capacity = capacity
        current_node = 0

        while remaining_nodes:
            # Prioritize nodes based on distance and demand
            node_scores = {}
            for node in remaining_nodes:
                if demands[node] <= current_capacity:
                    distance_score = distance_matrix[current_node, node]
                    demand_score = demands[node]
                    node_scores[node] = 1 / (distance_score + 0.0001) + 1 / (demand_score + 0.0001) # Avoid division by zero

            if not node_scores:
                routes.append(current_route + [0])
                current_route = [0]
                current_capacity = capacity
                current_node = 0
                continue

            # Select node based on probability proportional to the score
            nodes = list(node_scores.keys())
            probabilities = np.array(list(node_scores.values()))
            probabilities /= probabilities.sum()

            next_node = np.random.choice(nodes, p=probabilities)

            current_route.append(next_node)
            current_capacity -= demands[next_node]
            remaining_nodes.remove(next_node)
            current_node = next_node

        routes.append(current_route + [0])

        for route in routes:
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                heuristics_matrix[u, v] += 1
                heuristics_matrix[v, u] += 1  # Assuming symmetric distance matrix

    heuristics_matrix = heuristics_matrix / num_samples
    return heuristics_matrix
