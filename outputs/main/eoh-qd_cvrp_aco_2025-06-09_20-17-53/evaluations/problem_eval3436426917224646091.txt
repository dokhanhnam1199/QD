import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm iteratively constructs routes by adding the nearest feasible node with a probability inversely proportional to its distance, and updates a heuristic matrix based on edge frequencies across multiple route constructions.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        current_route = [0]
        current_load = 0
        visited = {0}

        while len(visited) < n:
            feasible_neighbors = []
            for i in range(1, n):
                if i not in visited and current_load + demands[i] <= capacity:
                    feasible_neighbors.append(i)

            if not feasible_neighbors:
                current_route.append(0)
                current_load = 0
                continue
            
            # Choose the nearest feasible neighbor with a probability
            distances = [distance_matrix[current_route[-1]][i] for i in feasible_neighbors]
            
            # Convert distances to probabilities (inverse proportion)
            probabilities = [1.0 / d if d > 0 else 1.0 for d in distances]  # Avoid division by zero
            total_probability = sum(probabilities)

            if total_probability > 0:
                probabilities = [p / total_probability for p in probabilities]
            else:
                # If all distances are zero, assign equal probability
                probabilities = [1.0 / len(feasible_neighbors)] * len(feasible_neighbors)

            next_node = random.choices(feasible_neighbors, weights=probabilities, k=1)[0]

            current_route.append(next_node)
            current_load += demands[next_node]
            visited.add(next_node)
        
        current_route.append(0)

        for i in range(len(current_route) - 1):
            u = current_route[i]
            v = current_route[i+1]
            heuristics_matrix[u, v] += 1
            heuristics_matrix[v, u] += 1

    heuristics_matrix /= num_samples
    
    return heuristics_matrix
