import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm iteratively refines routes by swapping nodes between routes based on cost reduction and feasibility, updating edge frequencies to reflect improved solutions.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_iterations = 100
    num_routes = 5

    all_routes = []
    for _ in range(num_routes):
        route = list(range(1, n))
        np.random.shuffle(route)
        
        current_route = [0]
        current_demand = 0
        routes = []
        
        for node in route:
            if current_demand + demands[node] <= capacity:
                current_route.append(node)
                current_demand += demands[node]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, node]
                current_demand = demands[node]
        current_route.append(0)
        routes.append(current_route)
        all_routes.append(routes)

    for _ in range(num_iterations):
        for routes in all_routes:
            for i in range(len(routes)):
                for j in range(len(routes)):
                    if i == j:
                        continue

                    route1 = routes[i]
                    route2 = routes[j]

                    for idx1 in range(1, len(route1) - 1):
                        for idx2 in range(1, len(route2) - 1):
                            node1 = route1[idx1]
                            node2 = route2[idx2]

                            # Calculate change in demand
                            demand_change1 = demands[node2] - demands[node1]
                            demand_change2 = demands[node1] - demands[node2]

                            # Check feasibility of swap
                            if sum(demands[node] for node in route1 if node != 0) + demand_change1 <= capacity and \
                               sum(demands[node] for node in route2 if node != 0) + demand_change2 <= capacity:
                                
                                # Calculate change in distance
                                cost_reduction = distance_matrix[route1[idx1-1], node2] + distance_matrix[node2, route1[idx1+1]] - \
                                                 distance_matrix[route1[idx1-1], node1] - distance_matrix[node1, route1[idx1+1]] + \
                                                 distance_matrix[route2[idx2-1], node1] + distance_matrix[node1, route2[idx2+1]] - \
                                                 distance_matrix[route2[idx2-1], node2] - distance_matrix[node2, route2[idx2+1]]

                                # Swap if cost is reduced
                                if cost_reduction < 0:
                                    route1[idx1], route2[idx2] = route2[idx2], route1[idx1]

    # Update heuristics matrix based on final routes
    for routes in all_routes:
        for current_route in routes:
            for i in range(len(current_route) - 1):
                node1 = current_route[i]
                node2 = current_route[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1

    heuristics_matrix = heuristics_matrix / (num_routes * num_iterations)

    return heuristics_matrix
