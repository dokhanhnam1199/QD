import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm iteratively builds routes by probabilistically selecting the next customer based on distance and demand, then updates a heuristic matrix based on the edges used in feasible routes.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_iterations = 1000

    for _ in range(num_iterations):
        routes = []
        unvisited = set(range(1, n))
        current_route = [0]
        current_load = 0

        while unvisited:
            next_customer = None
            best_prob = -1

            # Probability distribution based on distance and demand
            probabilities = []
            customer_indices = []
            
            for customer in unvisited:
                if current_load + demands[customer] <= capacity:
                    distance_factor = 1 / distance_matrix[current_route[-1], customer]
                    demand_factor = 1 / demands[customer]
                    probability = distance_factor * demand_factor
                    probabilities.append(probability)
                    customer_indices.append(customer)
            
            if not probabilities:
                routes.append(current_route + [0])
                current_route = [0]
                current_load = 0
                continue
            
            probabilities = np.array(probabilities) / np.sum(probabilities)
            
            next_customer = np.random.choice(customer_indices, p=probabilities)
            
            current_route.append(next_customer)
            current_load += demands[next_customer]
            unvisited.remove(next_customer)

        routes.append(current_route + [0])

        # Update heuristics matrix
        for route in routes:
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                heuristics_matrix[u, v] += 1

    return heuristics_matrix
