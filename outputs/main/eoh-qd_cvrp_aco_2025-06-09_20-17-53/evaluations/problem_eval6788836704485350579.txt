import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm iteratively constructs routes using a savings-based approach, favoring merges that minimize distance increase while respecting capacity constraints, and aggregates edge frequencies across multiple iterations to create a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 1000

    for _ in range(num_iterations):
        routes = {i: [i] for i in range(1, n)}  # Initial routes: each customer served individually
        loads = {i: demands[i] for i in range(1, n)}  # Initial loads

        merged = True
        while merged:
            merged = False
            best_savings = -np.inf
            best_route1 = None
            best_route2 = None

            for route1_id in list(routes.keys()):
                for route2_id in list(routes.keys()):
                    if route1_id == route2_id:
                        continue

                    if loads[route1_id] + loads[route2_id] <= capacity:
                        route1 = routes[route1_id]
                        route2 = routes[route2_id]

                        # Savings calculation: Distance saved by merging routes
                        savings = distance_matrix[route1[-1]][route2[0]] - distance_matrix[0][route1[-1]] - distance_matrix[0][route2[0]]

                        if savings > best_savings:
                            best_savings = savings
                            best_route1 = route1_id
                            best_route2 = route2_id

            if best_route1 is not None:
                # Merge routes
                routes[best_route1].extend(routes[best_route2])
                loads[best_route1] += loads[best_route2]
                del routes[best_route2]
                del loads[best_route2]
                merged = True

        # Add depot to the beginning and end of each route
        final_routes = [[0] + route + [0] for route in routes.values()]

        # Update heuristics matrix
        for route in final_routes:
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                heuristics_matrix[u, v] += 1
                heuristics_matrix[v, u] += 1

    # Normalize the heuristics matrix
    heuristics_matrix /= num_iterations

    return heuristics_matrix
