import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples many random routes, evaluates their feasibility based on capacity constraints, 
    and then aggregates the edge frequencies across feasible routes to create a heuristic matrix favoring edges 
    that appear more often in good solutions.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000  # Number of random routes to sample

    for _ in range(num_samples):
        route = list(range(1, n))
        random.shuffle(route)  # Randomly shuffle customer nodes
        
        # Split route into feasible sub-routes
        sub_routes = []
        current_route = [0]  # Start with the depot
        current_capacity = 0
        
        for node in route:
            if current_capacity + demands[node] <= capacity:
                current_route.append(node)
                current_capacity += demands[node]
            else:
                current_route.append(0)  # Return to depot
                sub_routes.append(current_route)
                current_route = [0, node]  # Start new route from depot
                current_capacity = demands[node]
        
        current_route.append(0)  # Final return to depot
        sub_routes.append(current_route)
        
        # Update heuristic matrix for edges in feasible sub-routes
        for sub_route in sub_routes:
            for i in range(len(sub_route) - 1):
                node1 = sub_route[i]
                node2 = sub_route[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1  # Ensure symmetry
    
    return heuristics_matrix
