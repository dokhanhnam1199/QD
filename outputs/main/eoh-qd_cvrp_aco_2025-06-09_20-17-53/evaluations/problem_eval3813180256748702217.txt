import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm constructs routes by iteratively adding the nearest feasible node to the current route, using a stochastic selection process biased towards shorter distances and feasibility, and creating a heuristic matrix based on edge usage in generated routes.}"""

    n = len(demands)
    heuristics_matrix = np.zeros((n, n))
    num_routes = 500

    for _ in range(num_routes):
        routes = []
        unvisited = set(range(1, n))
        current_route = [0]
        current_load = 0

        while unvisited:
            possible_nodes = []
            for node in unvisited:
                if current_load + demands[node] <= capacity:
                    possible_nodes.append(node)

            if not possible_nodes:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_load = 0
                continue
            
            #Stochastic selection based on distance
            distances = [distance_matrix[current_route[-1], node] for node in possible_nodes]
            probabilities = [1/(d+0.0001) for d in distances] #Avoid division by zero
            probabilities = probabilities / np.sum(probabilities)
            
            chosen_node = random.choices(possible_nodes, probabilities)[0]
            current_route.append(chosen_node)
            current_load += demands[chosen_node]
            unvisited.remove(chosen_node)

        current_route.append(0)
        routes.append(current_route)

        for route in routes:
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                heuristics_matrix[u, v] += 1
                heuristics_matrix[v, u] += 1

    return heuristics_matrix
