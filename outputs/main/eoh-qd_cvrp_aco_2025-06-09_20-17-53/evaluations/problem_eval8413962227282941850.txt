import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm samples a set of random routes, evaluates their feasibility based on capacity constraints, calculates the cost of each route, and updates the heuristic matrix by rewarding edges in lower-cost feasible routes.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000  # Number of random routes to sample
    
    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        customer_indices = list(range(1, n))
        random.shuffle(customer_indices)
        
        routes = []
        current_route = [0]  # Start at the depot
        current_capacity = 0
        
        for customer in customer_indices:
            if current_capacity + demands[customer] <= capacity:
                current_route.append(customer)
                current_capacity += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]  # Start a new route from depot
                current_capacity = demands[customer]
        
        current_route.append(0)
        routes.append(current_route)
        
        # Calculate the cost of the routes
        route_cost = 0
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                route_cost += distance_matrix[node1, node2]
        
        # Update the heuristic matrix based on edges in lower-cost feasible routes
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += 1.0 / (1 + route_cost)  # Reward edges in lower-cost routes
                heuristics_matrix[node2, node1] += 1.0 / (1 + route_cost)  # Assuming symmetric matrix

    return heuristics_matrix
