import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm samples a large number of random routes, evaluates their feasibility and cost, and uses the inverse of the route cost as a weight to update the heuristics matrix, favoring edges from lower-cost feasible routes.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        permutation = np.random.permutation(range(1, n))
        
        # Construct routes
        routes = []
        current_route = [0]  # Start at the depot
        current_load = 0
        
        for customer in permutation:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]  # Start new route from depot
                current_load = demands[customer]
                
        current_route.append(0)
        routes.append(current_route)

        # Check feasibility and update heuristics matrix
        total_cost = 0
        feasible = True

        for route in routes:
            route_cost = 0
            route_load = 0
            
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                route_cost += distance_matrix[u, v]
            
                if u != 0 and u != route[-1]:
                    route_load += demands[u]
        
            if route_load > capacity:
                feasible = False
                break
        
            total_cost += route_cost

        if feasible:
            #Weight the heuristic matrix by the inverse of the route cost
            weight = 1 / (total_cost + 1e-9)  # Add a small constant to avoid division by zero

            for route in routes:            
                for i in range(len(route) - 1):
                    u = route[i]
                    v = route[i+1]
                    heuristics_matrix[u, v] += weight


    return heuristics_matrix
