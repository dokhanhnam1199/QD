import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples multiple random routes, evaluates their feasibility and cost, and then uses the frequency with which each edge appears in feasible, low-cost routes to construct a heuristic matrix.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000  # Number of random routes to sample
    top_k = 10  # Consider top k best routes

    feasible_routes = []

    for _ in range(num_samples):
        # Generate a random route
        route = list(range(1, n))
        random.shuffle(route)
        
        # Split route into feasible vehicle routes
        vehicle_routes = []
        current_route = [0]
        current_load = 0
        for node in route:
            if current_load + demands[node] <= capacity:
                current_route.append(node)
                current_load += demands[node]
            else:
                current_route.append(0)
                vehicle_routes.append(current_route)
                current_route = [0, node]
                current_load = demands[node]
        
        current_route.append(0)
        vehicle_routes.append(current_route)

        # Calculate total distance of route
        total_distance = 0
        for vehicle_route in vehicle_routes:
            for i in range(len(vehicle_route) - 1):
                total_distance += distance_matrix[vehicle_route[i], vehicle_route[i+1]]
        
        feasible_routes.append((vehicle_routes, total_distance))

    # Sort feasible routes by distance
    feasible_routes.sort(key=lambda x: x[1])

    # Update heuristic matrix based on top k routes
    for k in range(min(top_k, len(feasible_routes))):
        vehicle_routes, _ = feasible_routes[k]
        for vehicle_route in vehicle_routes:
            for i in range(len(vehicle_route) - 1):
                node1 = vehicle_route[i]
                node2 = vehicle_route[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1

    return heuristics_matrix
