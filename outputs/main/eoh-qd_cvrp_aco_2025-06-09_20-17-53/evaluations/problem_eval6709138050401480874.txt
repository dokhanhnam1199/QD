import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm uses Monte Carlo simulation to iteratively build routes, probabilistically selecting nodes based on a combination of distance and demand, and updates a heuristic matrix reflecting the frequency of edge usage in feasible solutions.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000
    alpha = 1.0  # Weight for distance
    beta = 1.0   # Weight for demand

    for _ in range(num_samples):
        current_node = 0
        current_route = [0]
        current_demand = 0
        remaining_nodes = set(range(1, n))
        all_routes = []

        while remaining_nodes:
            # Calculate probabilities for each remaining node
            probabilities = []
            for node in remaining_nodes:
                distance = distance_matrix[current_node, node]
                demand = demands[node]
                # Probability based on distance and demand
                probability = np.exp(-alpha * distance - beta * demand)
                probabilities.append(probability)

            # Normalize probabilities
            probabilities = np.array(probabilities)
            probabilities /= np.sum(probabilities)

            # Select the next node probabilistically
            next_node = np.random.choice(list(remaining_nodes), p=probabilities)

            if current_demand + demands[next_node] <= capacity:
                current_route.append(next_node)
                current_demand += demands[next_node]
                current_node = next_node
                remaining_nodes.remove(next_node)
            else:
                current_route.append(0)
                all_routes.append(current_route)
                current_route = [0]
                current_demand = 0
                current_node = 0
        
        current_route.append(0)
        all_routes.append(current_route)

        # Update heuristics matrix
        for current_route in all_routes:
          for i in range(len(current_route) - 1):
            node1 = current_route[i]
            node2 = current_route[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
