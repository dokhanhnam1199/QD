import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm iteratively refines a heuristic matrix by sampling routes, evaluating their cost and feasibility, and updating the matrix to favor edges from better routes, guided by a decaying learning rate.}"""
    n = len(demands)
    heuristics_matrix = np.ones((n, n))  # Initialize with ones to avoid division by zero
    learning_rate = 0.1
    decay_rate = 0.99
    num_iterations = 100

    for iteration in range(num_iterations):
        # Sample a route
        customer_nodes = list(range(1, n))
        random.shuffle(customer_nodes)

        routes = []
        current_route = [0]
        current_load = 0

        for node in customer_nodes:
            if current_load + demands[node] <= capacity:
                current_route.append(node)
                current_load += demands[node]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, node]
                current_load = demands[node]

        current_route.append(0)
        routes.append(current_route)

        # Calculate route cost and feasibility
        total_distance = 0
        feasible = True
        for route in routes:
            route_distance = 0
            current_demand = 0
            for i in range(len(route) - 1):
                route_distance += distance_matrix[route[i], route[i+1]]
                if route[i+1] != 0:
                    current_demand += demands[route[i+1]]
            
            if current_demand > capacity:
                feasible = False
                break

            total_distance += route_distance
            
        # Update the heuristic matrix
        if feasible:
            for route in routes:
                for i in range(len(route) - 1):
                    node1 = route[i]
                    node2 = route[i+1]
                    heuristics_matrix[node1, node2] += learning_rate
                    heuristics_matrix[node2, node1] += learning_rate
        else:
            for i in range(n):
                for j in range(n):
                     heuristics_matrix[i,j] -= learning_rate*0.01 #Dampen probabilities of all edges if infeasible

        learning_rate *= decay_rate  # Decay learning rate

    # Normalize the heuristics matrix
    row_sums = heuristics_matrix.sum(axis=1, keepdims=True)
    heuristics_matrix = heuristics_matrix / row_sums

    return heuristics_matrix
