{
     "algorithm": "This algorithm iteratively samples feasible routes by randomly adding nodes based on distance and demand, then aggregates edge frequencies across multiple samples to create a heuristic matrix.}\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)\n    num_samples = 1000\n\n    for _ in range(num_samples):\n        # Initialize a route\n        current_route = [0]\n        current_load = 0\n        visited = {0",
     "code": "import numpy as np\nimport random\n\ndef heuristics_v2(distance_matrix, coordinates, demands, capacity):\n    \"\"\"\n    {This algorithm iteratively samples feasible routes by randomly adding nodes based on distance and demand, then aggregates edge frequencies across multiple samples to create a heuristic matrix.}\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)\n    num_samples = 1000\n\n    for _ in range(num_samples):\n        # Initialize a route\n        current_route = [0]\n        current_load = 0\n        visited = {0}\n        \n        while len(visited) < n:\n            # Find feasible and unvisited neighbors\n            feasible_neighbors = []\n            for i in range(1, n):\n                if i not in visited and current_load + demands[i] <= capacity:\n                    feasible_neighbors.append(i)\n            \n            # If no feasible neighbors, return to depot\n            if not feasible_neighbors:\n                current_route.append(0)\n                current_load = 0\n                continue\n\n            # Choose a neighbor randomly based on distance\n            distances = [distance_matrix[current_route[-1]][i] for i in feasible_neighbors]\n            probabilities = [1 / d if d > 0 else 1 for d in distances]  # Inverse distance\n            total_prob = sum(probabilities)\n            probabilities = [p / total_prob for p in probabilities]\n\n            next_node = random.choices(feasible_neighbors, weights=probabilities, k=1)[0]\n            current_route.append(next_node)\n            current_load += demands[next_node]\n            visited.add(next_node)\n        \n        current_route.append(0)  # Return to depot\n\n        # Update heuristics matrix\n        for i in range(len(current_route) - 1):\n            u = current_route[i]\n            v = current_route[i+1]\n            heuristics_matrix[u, v] += 1\n            heuristics_matrix[v, u] += 1\n\n    # Normalize the heuristics matrix\n    heuristics_matrix /= num_samples\n    \n    return heuristics_matrix",
     "objective": 26.07631,
     "other_inf": null,
     "SLOC": 33.0,
     "cyclomatic_complexity": 12.0,
     "halstead": 230.0
}