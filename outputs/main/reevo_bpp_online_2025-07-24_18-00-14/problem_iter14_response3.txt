```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Mask for bins that can accommodate the item
    valid_bins_mask = bins_remain_cap >= item
    
    # Assign priority based on remaining capacity after packing
    priorities = np.where(valid_bins_mask, bins_remain_cap - item, -np.inf)
    
    # Normalize priorities for valid bins to be between 0 and 1
    valid_priorities = priorities[valid_bins_mask]
    if len(valid_priorities) > 0:
        priorities[valid_bins_mask] = (valid_priorities - np.min(valid_priorities)) / (np.max(valid_priorities) - np.min(valid_priorities) + 1e-8)
    
    return priorities
```
