```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacity: The maximum capacity of a bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot accommodate the item
    priorities = np.where(remaining_capacities >= 0, 
                          -(remaining_capacities / bin_capacity),  # Encourage filling bins to capacity
                          -1e6)
    
    # Introduce a nuanced tie-breaking mechanism that considers both the remaining capacity and the bin's fill level
    fill_levels = 1 - (bins_remain_cap / bin_capacity)
    priorities += np.where(remaining_capacities >= 0, 
                           -1e-3 * fill_levels + 1e-6 * np.random.uniform(size=len(bins_remain_cap)),  # Add a small random noise
                           0)
    
    return priorities
```
