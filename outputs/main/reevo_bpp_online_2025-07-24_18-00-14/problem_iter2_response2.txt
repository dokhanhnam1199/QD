```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacities: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacities: Array of total capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that can fit the item get a higher priority
    can_fit = remaining_after_addition >= 0
    
    # Prioritize bins that have just enough capacity for the item
    priorities = np.where(can_fit, -np.abs(remaining_after_addition), -np.inf)
    
    # To avoid division by zero, we add a small value to bins_remain_cap before calculating the ratio
    epsilon = 1e-6
    utilization_ratios = (bin_capacities - bins_remain_cap + item) / bin_capacities
    
    # Combine the two factors: the ability to fit the item and the utilization ratio after adding the item
    priorities = np.where(can_fit, priorities + np.log(1 + utilization_ratios), priorities)
    
    # Add a slight edge to bins with more remaining capacity to avoid overly packed bins
    priorities = np.where(can_fit, priorities + np.log(1 + bins_remain_cap / bin_capacities), priorities)
    
    return priorities
```
