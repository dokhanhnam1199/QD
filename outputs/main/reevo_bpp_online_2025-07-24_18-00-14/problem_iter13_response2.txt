```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the ratio of item size to the remaining capacity
    ratio = item / bins_remain_cap
    
    # Mask for bins that can accommodate the item
    valid_bins_mask = bins_remain_cap >= item
    
    # Apply a non-linear transformation (exponential decay) to the ratio for valid bins
    priorities = np.where(valid_bins_mask, np.exp(-ratio), -np.inf)
    
    # Normalize priorities for valid bins
    min_ratio = np.min(ratio[valid_bins_mask])
    max_ratio = np.max(ratio[valid_bins_mask])
    
    if max_ratio != min_ratio:
        normalized_priorities = (ratio - min_ratio) / (max_ratio - min_ratio)
        priorities = np.where(valid_bins_mask, 1 - normalized_priorities, priorities)
    
    return priorities
```
