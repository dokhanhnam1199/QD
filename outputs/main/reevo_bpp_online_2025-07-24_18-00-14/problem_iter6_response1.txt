```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the relative remaining capacity after adding the item
    relative_remaining_cap = (bins_remain_cap - item) / bins_remain_cap
    
    # Mask for bins that can accommodate the item
    valid_bins_mask = relative_remaining_cap >= 0
    
    # Assign high priority to valid bins and low priority to invalid bins
    priorities = np.where(valid_bins_mask, relative_remaining_cap, -np.inf)
    
    # Apply non-linear transformation to encourage tighter packing
    priorities = np.where(valid_bins_mask, np.exp(-5 * priorities), priorities)
    
    return priorities
```
