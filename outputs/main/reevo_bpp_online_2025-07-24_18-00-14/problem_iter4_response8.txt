```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_full_cap: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_full_cap: The full capacity of a bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Mask for bins that can accommodate the item
    valid_bins_mask = remaining_cap_after_addition >= 0
    
    # Assign high priority to valid bins and low priority to invalid bins
    priorities = np.where(valid_bins_mask, 0.0, -np.inf)
    
    # Calculate nuanced scores considering both remaining capacity and item-to-bin size ratio
    if np.any(valid_bins_mask):
        item_to_bin_ratio = item / bins_remain_cap[valid_bins_mask]
        remaining_cap_ratio = remaining_cap_after_addition[valid_bins_mask] / bin_full_cap
        scores = np.exp(-(remaining_cap_ratio)) * item_to_bin_ratio
        priorities[valid_bins_mask] = scores
    
    return priorities
```
