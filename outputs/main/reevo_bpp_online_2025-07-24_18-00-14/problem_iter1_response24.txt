```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that can fit the item should have higher priority
    can_fit = remaining_after_addition >= 0
    
    # Priority is higher if the bin's remaining capacity is closer to the item size (First-Fit Decreasing inspiration)
    # and also higher if the bin has a larger remaining capacity (to avoid nearly full bins)
    priorities = np.where(can_fit, 1 / (1 + np.abs(remaining_after_addition)), -np.inf)
    
    # To further differentiate between bins that can fit the item, we give a slight edge to bins with more remaining capacity after addition
    priorities = np.where(can_fit, priorities + remaining_after_addition / bins_remain_cap, priorities)
    
    return priorities
```
