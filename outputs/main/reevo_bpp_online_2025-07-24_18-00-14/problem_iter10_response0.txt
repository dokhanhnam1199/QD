```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        bin_capacity: Capacity of each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Mask for bins that can accommodate the item
    valid_bins_mask = remaining_cap_after_addition >= 0
    
    # Assign high priority to valid bins and low priority to invalid bins
    priorities = np.where(valid_bins_mask, -remaining_cap_after_addition / bin_capacity, -np.inf)
    
    # Normalize and apply non-linear transformation to priorities for valid bins
    if np.any(valid_bins_mask):
        priorities_valid = priorities[valid_bins_mask]
        max_priority_valid = np.max(priorities_valid)
        min_priority_valid = np.min(priorities_valid)
        
        if max_priority_valid != min_priority_valid:
            normalized_priorities = (priorities_valid - min_priority_valid) / (max_priority_valid - min_priority_valid)
            transformed_priorities = np.exp(5 * normalized_priorities)  # Amplifying the difference
            priorities = np.where(valid_bins_mask, transformed_priorities, priorities)
        else:
            priorities = np.where(valid_bins_mask, 1.0, priorities)
    
    return priorities
```
