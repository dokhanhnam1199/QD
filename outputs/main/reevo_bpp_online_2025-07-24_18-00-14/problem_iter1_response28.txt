```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that can fit the item should have higher priority
    can_fit = remaining_after_addition >= 0
    
    # Prioritize bins that have just enough capacity for the item (best fit)
    priorities = np.where(can_fit, -np.abs(remaining_after_addition), -np.inf)
    
    # To avoid assigning the same priority to all bins that can fit the item,
    # we add a small random noise to the priorities
    noise = np.random.uniform(0, 1e-6, size=len(bins_remain_cap))
    priorities += noise
    
    return priorities
```
