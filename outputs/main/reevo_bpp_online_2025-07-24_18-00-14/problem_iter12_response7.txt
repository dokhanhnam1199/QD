```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacity: The capacity of each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Identify bins that can accommodate the item
    valid_bins_mask = bins_remain_cap >= item
    
    # Calculate the fill level of bins after adding the item
    fill_level_after_addition = (bin_capacity - (bins_remain_cap - item)) / bin_capacity
    
    # Assign a priority score based on the fill level
    priorities = np.where(valid_bins_mask, fill_level_after_addition, -np.inf)
    
    # Normalize priorities for valid bins to be within [0, 1]
    min_fill_level = np.min(fill_level_after_addition[valid_bins_mask])
    max_fill_level = np.max(fill_level_after_addition[valid_bins_mask])
    
    if max_fill_level != min_fill_level:
        normalized_priorities = (fill_level_after_addition - min_fill_level) / (max_fill_level - min_fill_level)
        priorities = np.where(valid_bins_mask, normalized_priorities, priorities)
    
    return priorities
```
