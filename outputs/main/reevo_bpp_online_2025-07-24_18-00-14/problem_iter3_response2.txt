```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Mask for bins that can accommodate the item
    valid_bins_mask = remaining_cap_after_addition >= 0
    
    # Assign high priority to valid bins and low priority to invalid bins
    priorities = np.where(valid_bins_mask, -remaining_cap_after_addition, -np.inf)
    
    # Normalize priorities for valid bins to encourage packing items tightly
    # and use non-linear transformation to differentiate between similar packing solutions
    min_remaining_cap = np.min(remaining_cap_after_addition[valid_bins_mask])
    max_remaining_cap = np.max(remaining_cap_after_addition[valid_bins_mask])
    
    if max_remaining_cap != min_remaining_cap:
        normalized_priorities = (remaining_cap_after_addition - min_remaining_cap) / (max_remaining_cap - min_remaining_cap)
        # Apply a non-linear transformation to the normalized priorities
        non_linear_priorities = 1 - np.power(normalized_priorities, 2)
        priorities = np.where(valid_bins_mask, non_linear_priorities, priorities)
    else:
        # If all valid bins have the same remaining capacity, assign the same priority
        priorities = np.where(valid_bins_mask, 1.0, priorities)
    
    return priorities
```
