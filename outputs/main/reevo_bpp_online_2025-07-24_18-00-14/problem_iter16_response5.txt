```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacity: The total capacity of each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Mask for bins that can accommodate the item
    valid_bins_mask = bins_remain_cap >= item
    
    # Calculate the utilization of each bin after adding the item
    utilization_after_addition = (bin_capacity - (bins_remain_cap - item)) / bin_capacity
    
    # Assign high priority to valid bins with higher utilization and low priority to invalid bins
    priorities = np.where(valid_bins_mask, utilization_after_addition, -np.inf)
    
    # Normalize priorities for valid bins to be between 0 and 1
    valid_priorities = priorities[valid_bins_mask]
    if len(valid_priorities) > 0:
        min_valid_priority = np.min(valid_priorities)
        max_valid_priority = np.max(valid_priorities)
        if max_valid_priority != min_valid_priority:
            priorities[valid_bins_mask] = (valid_priorities - min_valid_priority) / (max_valid_priority - min_valid_priority)
    
    return priorities
```
