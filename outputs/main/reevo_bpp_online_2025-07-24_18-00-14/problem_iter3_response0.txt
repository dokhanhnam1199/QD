```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Mask for bins that can accommodate the item
    valid_bins_mask = remaining_cap_after_addition >= 0
    
    # Assign high priority to valid bins and low priority to invalid bins
    priorities = np.where(valid_bins_mask, -remaining_cap_after_addition, -np.inf)
    
    # Calculate a nuanced score that considers both remaining capacity and item-to-bin size ratio
    valid_priorities = np.exp(-(remaining_cap_after_addition[valid_bins_mask] / bins_remain_cap[valid_bins_mask])) * (item / bins_remain_cap[valid_bins_mask])
    
    # Normalize the nuanced scores
    if len(valid_priorities) > 0:
        min_score = np.min(valid_priorities)
        max_score = np.max(valid_priorities)
        if max_score != min_score:
            normalized_scores = (valid_priorities - min_score) / (max_score - min_score)
        else:
            normalized_scores = np.ones_like(valid_priorities)
        priorities = np.where(valid_bins_mask, normalized_scores, priorities)
    
    return priorities
```
