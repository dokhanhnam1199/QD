```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Create a mask to handle bins that have enough capacity
    mask = remaining_capacities >= 0
    
    # Assign high priority to bins with enough capacity and low priority to bins without enough capacity
    priorities = np.where(mask, bins_remain_cap - item, -np.inf)
    
    # Normalize the priorities for bins with enough capacity
    max_remaining_capacity = np.max(bins_remain_cap)
    priorities = np.where(mask, priorities / max_remaining_capacity, priorities)
    
    # Add a small random noise to break ties
    priorities = priorities + np.random.uniform(0, 1e-6, size=len(priorities))
    
    return priorities
```
