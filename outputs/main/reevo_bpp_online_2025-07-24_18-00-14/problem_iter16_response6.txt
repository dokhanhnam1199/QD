```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_cap: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_cap: The capacity of the bins.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Mask for bins that can accommodate the item
    valid_bins_mask = bins_remain_cap >= item
    
    # Calculate the relative fill level before and after adding the item for valid bins
    relative_fill_before = 1 - bins_remain_cap / bin_cap
    relative_fill_after = 1 - (bins_remain_cap - item) / bin_cap
    
    # Calculate the change in relative fill level
    delta_relative_fill = np.where(valid_bins_mask, relative_fill_after - relative_fill_before, np.inf)
    
    # Assign high priority to valid bins based on the change in relative fill level
    priorities = np.exp(-delta_relative_fill)
    
    # Normalize priorities for valid bins to be between 0 and 1
    valid_priorities = priorities[valid_bins_mask]
    if len(valid_priorities) > 0:
        min_priority = np.min(valid_priorities)
        max_priority = np.max(valid_priorities)
        if max_priority != min_priority:
            normalized_priorities = (valid_priorities - min_priority) / (max_priority - min_priority)
            priorities = np.where(valid_bins_mask, normalized_priorities, 0)
    
    return priorities
```
