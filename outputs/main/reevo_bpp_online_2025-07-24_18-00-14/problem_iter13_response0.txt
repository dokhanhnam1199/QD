```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the relative remaining capacity after adding the item
    relative_remain_cap = (bins_remain_cap - item) / bins_remain_cap
    
    # Mask for bins that can accommodate the item
    valid_bins_mask = bins_remain_cap >= item
    
    # Assign high priority to valid bins based on relative remaining capacity
    priorities = np.where(valid_bins_mask, np.exp(-relative_remain_cap), -np.inf)
    
    # Normalize priorities for valid bins
    valid_priorities = priorities[valid_bins_mask]
    if len(valid_priorities) > 0:
        min_priority = np.min(valid_priorities)
        max_priority = np.max(valid_priorities)
        if max_priority != min_priority:
            normalized_priorities = (valid_priorities - min_priority) / (max_priority - min_priority)
            priorities = np.where(valid_bins_mask, normalized_priorities, priorities)
    
    return priorities
```
