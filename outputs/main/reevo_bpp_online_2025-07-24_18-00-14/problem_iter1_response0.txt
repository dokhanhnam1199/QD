```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after placing the item in each bin
    remain_cap_after_item = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot accommodate the item
    priorities = np.where(remain_cap_after_item >= 0, remain_cap_after_item, -1e6)
    
    # Add a small noise to break ties
    noise = np.random.uniform(0, 1e-6, size=len(bins_remain_cap))
    priorities += noise
    
    return priorities
```
