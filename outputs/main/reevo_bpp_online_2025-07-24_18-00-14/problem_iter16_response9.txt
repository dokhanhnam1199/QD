```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacity: The capacity of each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Mask for bins that can accommodate the item
    valid_bins_mask = remaining_cap_after_addition >= 0
    
    # Assign priority based on the relative remaining capacity after adding the item
    priorities = np.where(valid_bins_mask, remaining_cap_after_addition / bin_capacity, -np.inf)
    
    # Normalize priorities for valid bins to be between 0 and 1
    valid_priorities = priorities[valid_bins_mask]
    if len(valid_priorities) > 0:
        priorities = np.where(valid_bins_mask, 1 - (valid_priorities - np.min(valid_priorities)) / (np.max(valid_priorities) - np.min(valid_priorities) + 1e-9), priorities)
    
    return priorities
```
