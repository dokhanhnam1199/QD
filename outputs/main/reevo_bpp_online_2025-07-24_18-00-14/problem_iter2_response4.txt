```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacity: Capacity of each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that can fit the item should have higher priority
    can_fit = remaining_after_addition >= 0
    
    # Prioritize bins that have enough capacity and are most full
    priorities = np.where(can_fit, 1 - (bins_remain_cap / bin_capacity), -np.inf)
    
    # Add a small noise to break ties
    noise = np.random.uniform(0, 1e-6, size=len(bins_remain_cap))
    priorities = np.where(can_fit, priorities + noise, -np.inf)
    
    return priorities
```
