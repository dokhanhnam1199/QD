```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_full_cap: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_full_cap: Full capacity of a bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Mask for bins that can accommodate the item
    valid_bins_mask = bins_remain_cap >= item
    
    # Calculate the relative remaining capacity after adding the item for valid bins
    relative_remain_cap = np.where(valid_bins_mask, (bins_remain_cap - item) / bin_full_cap, np.inf)
    
    # Assign high priority to valid bins based on relative remaining capacity using a non-linear transformation
    priorities = np.exp(-5 * relative_remain_cap)
    
    # Set priorities of invalid bins to 0
    priorities = np.where(valid_bins_mask, priorities, 0)
    
    return priorities
```
