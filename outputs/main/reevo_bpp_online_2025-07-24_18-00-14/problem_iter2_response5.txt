```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacity: The total capacity of each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that can fit the item get a higher priority
    can_fit = remaining_after_addition >= 0
    
    # Prioritize bins that have just enough capacity for the item, using a non-linear transformation
    priorities = np.where(can_fit, -np.abs(remaining_after_addition)**0.5, -np.inf)
    
    # Calculate the ratio of item size to bin remaining capacity, avoiding division by zero
    epsilon = 1e-6
    ratios = item / (bins_remain_cap + epsilon)
    
    # Calculate the fill level of each bin
    fill_levels = 1 - bins_remain_cap / bin_capacity
    
    # Combine multiple factors: the ability to fit the item, the ratio of item size to bin capacity, and the fill level
    priorities = np.where(can_fit, priorities + np.log(1 + ratios) + np.log(1 + fill_levels), priorities)
    
    return priorities
```
