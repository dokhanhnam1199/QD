```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Mask for bins that can accommodate the item
    valid_bins_mask = remaining_cap_after_addition >= 0
    
    # Assign high priority to valid bins and low priority to invalid bins
    priorities = np.where(valid_bins_mask, -remaining_cap_after_addition / bins_remain_cap, -np.inf)
    
    # Normalize priorities for valid bins to encourage packing items tightly
    if np.any(valid_bins_mask):
        priorities_valid = priorities[valid_bins_mask]
        min_priority = np.min(priorities_valid)
        max_priority = np.max(priorities_valid)
        
        if max_priority != min_priority:
            normalized_priorities = (priorities_valid - min_priority) / (max_priority - min_priority)
            priorities = np.where(valid_bins_mask, -normalized_priorities, priorities)
    
    return priorities
```
