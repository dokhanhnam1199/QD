```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacities: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacities: The capacity of each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Mask for bins that can accommodate the item
    valid_bins_mask = remaining_cap_after_addition >= 0
    
    # Component 1: Encourage packing items tightly
    tightness_component = np.where(valid_bins_mask, -remaining_cap_after_addition / bin_capacities, -np.inf)
    
    # Component 2: Consider the item-to-bin size ratio
    item_to_bin_ratio_component = np.where(valid_bins_mask, item / bins_remain_cap, 0)
    
    # Component 3: Penalize bins that are nearly empty
    bin_utilization_component = np.where(valid_bins_mask, (bin_capacities - bins_remain_cap) / bin_capacities, 0)
    
    # Combine the components non-linearly
    priorities = tightness_component + 0.1 * (item_to_bin_ratio_component ** 0.5) + 0.2 * np.tanh(bin_utilization_component)
    
    return priorities
```
