```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacity: The total capacity of each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Mask for bins that can accommodate the item
    valid_bins_mask = remaining_cap_after_addition >= 0
    
    # Assign priority based on the ratio of remaining capacity to total capacity
    priorities = np.where(valid_bins_mask, remaining_cap_after_addition / bin_capacity, -np.inf)
    
    # Apply a non-linear scaling to prioritize bins that are filled to a high percentage
    valid_priorities = priorities[valid_bins_mask]
    if len(valid_priorities) > 0:
        priorities = np.where(valid_bins_mask, -np.exp(-(1 - valid_priorities) * 10), priorities)
    
    return priorities
```
