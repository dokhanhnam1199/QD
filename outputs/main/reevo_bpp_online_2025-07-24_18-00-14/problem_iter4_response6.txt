```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        bin_capacity: Capacity of the bins.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Mask for bins that can accommodate the item
    valid_bins_mask = remaining_cap_after_addition >= 0
    
    # Component 1: Prioritize bins that leave less remaining capacity after adding the item
    remaining_cap_priority = np.where(valid_bins_mask, -remaining_cap_after_addition ** 2, -np.inf)
    
    # Component 2: Consider the item-to-bin size ratio
    item_to_bin_ratio = item / bins_remain_cap
    ratio_priority = np.where(valid_bins_mask, item_to_bin_ratio ** 0.5, 0)
    
    # Component 3: Encourage using newer bins (lower index) when possible
    bin_usage_priority = -np.arange(len(bins_remain_cap)) / len(bins_remain_cap)
    bin_usage_priority = np.where(valid_bins_mask, bin_usage_priority, 0)
    
    # Combine the priority components
    priorities = remaining_cap_priority + 0.1 * ratio_priority + 0.05 * bin_usage_priority
    
    return priorities
```
