```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        bin_capacity: The capacity of each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity ratio after adding the item
    remaining_cap_ratio = (bins_remain_cap - item) / bin_capacity
    
    # Mask for bins that can accommodate the item
    valid_bins_mask = bins_remain_cap >= item
    
    # Assign high priority to valid bins and low priority to invalid bins
    priorities = np.where(valid_bins_mask, remaining_cap_ratio, -np.inf)
    
    # Apply non-linear transformation to amplify differences
    priorities = np.where(valid_bins_mask, 1 - np.power(remaining_cap_ratio, 0.5), priorities)
    
    # Normalize priorities for valid bins to ensure comparability
    valid_priorities = priorities[valid_bins_mask]
    if len(valid_priorities) > 0:
        min_priority = np.min(valid_priorities)
        max_priority = np.max(valid_priorities)
        if max_priority != min_priority:
            priorities = np.where(valid_bins_mask, (priorities - min_priority) / (max_priority - min_priority), priorities)
    
    return priorities
```
