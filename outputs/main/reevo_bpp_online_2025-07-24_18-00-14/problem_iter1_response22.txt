```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Initialize priority scores with negative infinity for bins that cannot fit the item
    priorities = np.where(remaining_capacities >= 0, bins_remain_cap - item, -np.inf)
    
    # Normalize the priority scores to be between 0 and 1
    max_priority = np.max(priorities)
    min_priority = np.min(priorities)
    if max_priority != -np.inf:  # Check if there are bins that can fit the item
        priorities = (priorities - min_priority) / (max_priority - min_priority)
    else:
        priorities = np.zeros_like(priorities)
    
    return priorities
```
