```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacity: The capacity of each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Mask for bins that can accommodate the item
    valid_bins_mask = bins_remain_cap >= item
    
    # Calculate the relative remaining capacity after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # Assign high priority to valid bins based on the relative remaining capacity
    priorities = np.where(valid_bins_mask, 1 - remaining_cap_after_addition / bin_capacity, -np.inf)
    
    # Introduce a slight modification to prioritize bins that are less full before adding the item
    priorities = np.where(valid_bins_mask, priorities * (1 - (bin_capacity - bins_remain_cap) / bin_capacity), priorities)
    
    # Normalize priorities for valid bins
    priorities_valid = priorities[valid_bins_mask]
    min_priority, max_priority = np.min(priorities_valid), np.max(priorities_valid)
    
    if max_priority != min_priority:
        priorities_valid = (priorities_valid - min_priority) / (max_priority - min_priority)
        priorities = np.where(valid_bins_mask, priorities_valid, priorities)
    
    return priorities
```
