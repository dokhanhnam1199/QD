```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: assign -inf to bins that can't fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Prioritize snug fits and penalize waste
    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins):
        slack = bins_remain_cap[feasible_bins] - item
        # Higher priority for smaller slack (snug fit)
        priorities[feasible_bins] = 1.0 / (slack + 1e-6)

        # Normalize remaining capacity after placing item, scaled to between 0 and 1
        remaining_capacity_after = bins_remain_cap[feasible_bins] - item
        max_capacity = np.max(bins_remain_cap)
        if max_capacity > 0:
            normalized_remaining = remaining_capacity_after / max_capacity
        else:
            normalized_remaining = remaining_capacity_after # Avoid division by zero if max_capacity is 0

        # Reward balance: prioritize bins where the normalized remaining capacity is around 0.5. Increased weight.
        balance_bonus = 2.0 * (1.0 - np.abs(normalized_remaining - 0.5))
        priorities[feasible_bins] += balance_bonus

        # Perfect fit bonus: Big bonus for perfect fit. Increased weight.
        perfect_fit = np.isclose(bins_remain_cap[feasible_bins], item)
        priorities[feasible_bins][perfect_fit] += 5.0  # Significant bonus for perfect fit

        # Small item bonus: If the item is very small, prioritize bins that are almost full.

        small_item = item < 0.1 * max_capacity if max_capacity > 0 else item < 0.1 * np.max(bins_remain_cap)

        if small_item:
            almost_full = normalized_remaining < 0.2
            priorities[feasible_bins][almost_full] += 1.0


    return priorities
```
