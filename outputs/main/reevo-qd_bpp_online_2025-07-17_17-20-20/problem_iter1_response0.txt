```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing heuristic inspired priority: prefer bins where item fits best
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        priorities[fit_mask] = bins_remain_cap[fit_mask] - item  # Smaller difference is better

        # Break ties using the Fill Rate idea to penalize bins that would have low fill-rate with the item
        fill_rates = item / bins_remain_cap[fit_mask]
        priorities[fit_mask] -= fill_rates # Higher fill rates (closer to 1.0) are preferred, subtract a small negative number.

    else:
        # If item doesn't fit into any bin, give all very small negative priorities.
        priorities[:] = -1e9  # Very low priority for bins where it doesn't fit

    return priorities
```
