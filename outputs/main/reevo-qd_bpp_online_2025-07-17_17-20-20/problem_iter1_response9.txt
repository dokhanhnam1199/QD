```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Prioritize bins that can accommodate the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1

    # If the item can fit, prioritize bins with less remaining capacity (First-Fit Decreasing heuristic influence)
    priorities[can_fit] += (1 / (bins_remain_cap[can_fit] + 1e-9))  # Add a small constant to avoid division by zero
    
    #If bin has enough space and it has minimum wasted space, then prioritize it (Best-Fit heuristic influence)
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Mark bins that cannot fit as infinite waste

    min_waste_bins = waste == np.min(waste)
    priorities[min_waste_bins & can_fit] += 2 # Higher priority for Best-Fit that can actually accommodate the item.
        
    return priorities
```
