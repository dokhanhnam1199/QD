```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Calculate the wasted space if the item is placed in this bin.
            wasted_space = cap - item
            # Give higher priority to bins where the item fits with less wasted space.
            # Also, give higher priority to bins that are nearly full.
            priorities[i] = (1 / (wasted_space + 1e-6)) + (cap / np.sum(bins_remain_cap) if np.sum(bins_remain_cap) > 0 else 0)
            
            # Add a bonus for bins where the item fits perfectly
            if wasted_space < 1e-6: #consider very small wastes as perfect fits.
              priorities[i] += 1

        else:
            priorities[i] = -np.inf  # Cannot fit, so give lowest priority.
    return priorities
```
