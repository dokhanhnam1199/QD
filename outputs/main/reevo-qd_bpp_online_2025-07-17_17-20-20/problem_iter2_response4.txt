```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize bins that can fit the item
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        # Calculate slack: the remaining space after placing the item
        slack = bins_remain_cap[fit_mask] - item

        # Inverse slack: prioritize bins with smaller slack (snug fit)
        priorities[fit_mask] += 1.0 / (slack + 1e-9)  # Adding a small constant to avoid division by zero

        # Normalized remaining capacity after placing the item
        remaining_capacity_after_fit = bins_remain_cap[fit_mask] - item
        normalized_remaining = remaining_capacity_after_fit / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else remaining_capacity_after_fit

        # Give a bonus to bins with normalized remaining capacity close to a target value (e.g., 0.25 to 0.5)
        target_remaining = 0.35 # Tuneable parameter - target fill level
        proximity_bonus = 1.0 - np.abs(normalized_remaining - target_remaining)
        priorities[fit_mask] += proximity_bonus


    # Penalize bins that can't fit the item
    no_fit_mask = bins_remain_cap < item
    priorities[no_fit_mask] = -np.inf  # Mark bins that cannot fit with negative infinity

    return priorities
```
