```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            waste = cap - item
            # Prioritize bins where the item fits and minimizes waste. A small waste is better.
            priorities[i] = 1 / (waste + 0.0001)  # Add a small constant to avoid division by zero.

            # Bonus for bins that are close to being filled completely (but not overfilled)
            if waste < 0.1:  #tune the threshold
                priorities[i] += 5  #tune the bonus amount

        else:
            priorities[i] = -1000 #Very negative priority, so that item can never be added to bin
    return priorities
```
