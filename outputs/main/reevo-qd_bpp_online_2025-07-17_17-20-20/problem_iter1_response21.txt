```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give a very low priority to bins that cannot fit the item
    priorities[bins_remain_cap < item] = -np.inf
    
    # Calculate the waste if the item is placed in the bin
    waste = bins_remain_cap - item
    
    # Prioritize bins with smaller waste (First-Fit Decreasing heuristic inspired)
    priorities[bins_remain_cap >= item] = -waste[bins_remain_cap >= item]
    
    # Add a small bonus for bins that are nearly full after adding the item to discourage creating very empty bins (balance between best fit and almost full)
    nearly_full_threshold = 0.1  # e.g., if remaining capacity after placing the item is less than 10% of the bin size
    is_nearly_full = (waste > 0) & (waste <= nearly_full_threshold)  # waste must be positive and smaller than nearly_full_threshold
    priorities[is_nearly_full] += 10 # added bonus to make it higher priority if it almost fills the bin. Adjust this value
    
    # Handle the case where the item perfectly fits (highest priority)
    perfect_fit = waste == 0
    priorities[perfect_fit] = np.inf
    
    return priorities
```
