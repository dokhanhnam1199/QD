```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        remaining_space = bins_remain_cap[valid_bins] - item
        
        # Fullness component: Prioritize bins that become fuller after packing
        fullness = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]
        priorities[valid_bins] += fullness

        # Waste minimization component: Penalize bins with large remaining space
        large_waste_threshold = 0.5  # Threshold for considering waste as "large"
        waste_penalty = np.where(remaining_space > large_waste_threshold, -remaining_space, 0)
        priorities[valid_bins] += waste_penalty

        # Combine fullness and waste components:  Balance the two
        priorities[valid_bins] = fullness - np.abs(remaining_space - large_waste_threshold)

        # Another approach to combine the two
        priorities[valid_bins] = fullness / (remaining_space + 1e-9)
    else:
        priorities[:] = -np.inf

    return priorities
```
