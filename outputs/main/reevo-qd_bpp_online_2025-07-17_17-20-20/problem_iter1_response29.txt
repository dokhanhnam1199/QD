```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining space after placing the item in each bin
    remaining_space = bins_remain_cap - item

    # Give high priority to bins where the item fits
    fit_mask = remaining_space >= 0
    priorities[fit_mask] = 1  # Base priority for bins that fit

    # Prioritize bins with less wasted space when item fits
    priorities[fit_mask] += (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask]  # Ratio of wasted space

    # Penalize bins where the item doesn't fit heavily
    priorities[~fit_mask] = -10 * (item - bins_remain_cap[~fit_mask])  # Penalty increases with excess

    return priorities
```
