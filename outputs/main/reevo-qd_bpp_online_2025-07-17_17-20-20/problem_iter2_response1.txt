```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)  # Ensure float type for calculations

    # Calculate waste if the item is placed in the bin. Use large number if item does not fit.
    waste = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)

    # Prioritize bins where the item fits best (smallest waste). Avoid fragmentation.
    priorities = -waste

    # Add a significant bonus for bins that are almost full after adding the item. Try to fill bins up.
    almost_full_threshold = 0.1  # Define "almost full" (e.g., within 10% of capacity)
    is_almost_full = (bins_remain_cap >= item) & (waste <= almost_full_threshold)
    priorities[is_almost_full] += 100  # Substantial boost to bins that are almost full

    # Penalize bins where the item doesn't fit severely (to discourage invalid placements).
    priorities[bins_remain_cap < item] = -np.inf

    # Small random number to break ties and encourage exploration. Scale it down further.
    priorities += np.random.rand(len(bins_remain_cap)) * 0.0001

    return priorities
```
