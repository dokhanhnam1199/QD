```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: assign -inf to bins that can't fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Prioritize snug fits and penalize waste
    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins):
        slack = bins_remain_cap[feasible_bins] - item
        # Higher priority for smaller slack (snug fit)
        priorities[feasible_bins] = 1.0 / (slack + 1e-6)

        # Reward balance: prioritize bins where the remaining capacity is moderate
        moderate_capacity = (bins_remain_cap[feasible_bins] - item) > (0.2 * np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0.2)
        priorities[feasible_bins][moderate_capacity] += 0.5

        # Perfect fit bonus
        perfect_fit = np.isclose(bins_remain_cap[feasible_bins], item)
        priorities[feasible_bins][perfect_fit] += 3.0  # Significant bonus for perfect fit

        # Randomness for exploration
        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.1

    return priorities
```
