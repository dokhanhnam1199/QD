```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Assign zero priority to bins that can't fit the item.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf  # Mark as infeasible
    
    # 2. Best Fit Criterion: Prioritize bins with smallest remaining capacity AFTER adding the item.
    feasible_mask = ~infeasible_mask
    remaining_after_fit = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -np.abs(remaining_after_fit) # Prioritize smaller remaining

    # 3. Avoid Fragmentation: Penalize bins that will have a small remainder
    small_remainder_threshold = 0.1 #adjust threshold if necessary
    small_remainder_mask = (remaining_after_fit > 0) & (remaining_after_fit < small_remainder_threshold)
    priorities[feasible_mask][small_remainder_mask] -= 0.5 # Reduce the priority for small remainders. Tune this value.
    
    # 4. Bonus for Perfect Fit: If a bin has a perfect fit, give it the highest priority.
    perfect_fit_mask = (bins_remain_cap == item)
    priorities[perfect_fit_mask] = np.inf
    
    return priorities
```
