```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Big enough to fit heuristic: Prioritize bins that can accommodate the item.
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1

    # Remaining capacity heuristic: Prioritize bins with smallest remaining capacity after adding the item (minimize waste).
    remaining_capacity_after_fit = bins_remain_cap - item
    remaining_capacity_after_fit[~can_fit] = np.inf # Set to infinity if it doesn't fit to avoid it being picked
    priorities[can_fit] += (1 / (remaining_capacity_after_fit[can_fit] + 1e-9)) # Add inverse of remaining capacity to priority

    # Filling percentage heuristic: Prioritize bins that will be filled closest to 100%
    filling_percentage = (item / bins_remain_cap) * can_fit # zero if it doesn't fit.
    priorities[can_fit] += filling_percentage[can_fit]

    return priorities
```
