```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: assign -inf to bins that can't fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Prioritize feasible bins
    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins):
        slack = bins_remain_cap[feasible_bins] - item
        # Snug fit reward (inversely proportional to slack)
        priorities[feasible_bins] += 1.0 / (slack + 0.001)

        # Moderate capacity reward (avoiding near-empty or near-full bins after placement)
        remaining_ratio = (bins_remain_cap[feasible_bins] - item) / bins_remain_cap[feasible_bins]
        priorities[feasible_bins] += np.exp(-((remaining_ratio - 0.5)**2) / 0.05)
        
        # Perfect Fit Bonus
        perfect_fit = np.isclose(bins_remain_cap[feasible_bins], item)
        priorities[feasible_bins][perfect_fit] += 2.5

        # Slight randomness to explore options
        priorities[feasible_bins] += np.random.normal(0, 0.05, size=np.sum(feasible_bins))

    return priorities
```
