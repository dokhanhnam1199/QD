```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First Fit Decreasing (FFD) inspired: Prefer bins that can fit the item snugly
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1 / (slack + 1e-6) # avoid division by zero

        # Boost bins with minimal waste (near-full bins)
        remaining_capacity_after_fit = bins_remain_cap[fit_mask] - item
        normalized_remaining = remaining_capacity_after_fit / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else remaining_capacity_after_fit #Handle cases when np.max is zero.
        priorities[fit_mask] += 2 * (1 - normalized_remaining) # Give high priority to almost full bins


    # Penalize bins that can't fit the item
    no_fit_mask = bins_remain_cap < item
    priorities[no_fit_mask] = -1e9  # Significantly harsh penalty

    # Add some randomness to encourage exploration
    priorities += np.random.rand(len(bins_remain_cap)) * 0.01

    return priorities
```
