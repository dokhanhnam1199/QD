{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First-Fit Decreasing inspired priority: Prefer bins that can fit the item.\n    can_fit = bins_remain_cap >= item\n    priorities[can_fit] += 1.0\n\n    # Give higher priority to bins with smaller remaining capacity among those that can fit.\n    # This tries to fill bins more completely.\n    small_cap_bonus = np.where(can_fit, 1.0 / (bins_remain_cap + 1e-6), 0.0)\n    priorities += small_cap_bonus\n    \n    # Penalize bins that are significantly larger than the item\n    waste_penalty = np.where(can_fit, np.exp(-bins_remain_cap + item), 0.0)\n    priorities -= waste_penalty\n\n    #Extreme penalty if the bins does not fit the item\n    cannot_fit = bins_remain_cap < item\n    priorities[cannot_fit] -= 1000 #Large negative penalty so item can never get placed\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            waste = cap - item\n            # Prioritize bins where the item fits and minimizes waste. A small waste is better.\n            priorities[i] = 1 / (waste + 0.0001)  # Add a small constant to avoid division by zero.\n\n            # Bonus for bins that are close to being filled completely (but not overfilled)\n            if waste < 0.1:  #tune the threshold\n                priorities[i] += 5  #tune the bonus amount\n\n        else:\n            priorities[i] = -1000 #Very negative priority, so that item can never be added to bin\n    return priorities\n\n[Reflection]\nExplicitly minimizing waste and rewarding near-full bins, instead of implicit penalties/bonuses, improves performance.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}