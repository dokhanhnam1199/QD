```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Snug Fit Priority (FFD Inspired)
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1 / (slack + 1e-9)  # Higher priority for smaller slack

        # Normalized Remaining Capacity: Prioritize bins with remaining capacity around half after the fit
        remaining_capacity_after_fit = bins_remain_cap[fit_mask] - item
        max_bin_capacity = np.max(bins_remain_cap)
        normalized_remaining = remaining_capacity_after_fit / (max_bin_capacity + 1e-9) if max_bin_capacity > 0 else remaining_capacity_after_fit
        priorities[fit_mask] += 2 * np.exp(-((normalized_remaining - 0.5)**2) / 0.08) # Gaussian boost around 0.5

    # Harshly Penalize Bins that Cannot Fit
    no_fit_mask = bins_remain_cap < item
    priorities[no_fit_mask] = -np.inf  # Cannot fit

    return priorities
```
