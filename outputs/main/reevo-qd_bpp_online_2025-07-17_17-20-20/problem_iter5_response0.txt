```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: assign -inf to bins that can't fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Prioritize feasible bins
    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins):
        slack = bins_remain_cap[feasible_bins] - item

        # Snug fit reward
        snug_fit_reward = 1.0 / (slack + 0.001)  # Avoid division by zero, make it impactful
        priorities[feasible_bins] += snug_fit_reward

        # Moderate remaining capacity reward
        total_capacity = np.max(bins_remain_cap)  # Get Total capacity by finding the maximum value
        if total_capacity > 0:
          normalized_remaining = (bins_remain_cap[feasible_bins] - item) / total_capacity
          moderate_capacity_reward = np.exp(-((normalized_remaining - 0.5) ** 2) / 0.04) # Bias towards 0.5
          priorities[feasible_bins] += 0.5 * moderate_capacity_reward

        # Perfect fit bonus
        perfect_fit = np.isclose(bins_remain_cap[feasible_bins], item)
        priorities[feasible_bins][perfect_fit] += 2.0

        # Small random reward
        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.1

    return priorities
```
