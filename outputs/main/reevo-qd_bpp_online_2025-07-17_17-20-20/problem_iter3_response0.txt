```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Fit check
    fit_mask = bins_remain_cap >= item

    if np.any(fit_mask):
        # Slack-based priority (minimize waste)
        slack = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1 / (slack + 1e-6)  # Inverse slack

        # Reward near-full bins
        remaining_capacity_after_fit = bins_remain_cap[fit_mask] - item
        normalized_remaining = remaining_capacity_after_fit / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else remaining_capacity_after_fit
        near_full_bonus = np.exp(-((normalized_remaining - 0.1)**2) / (2 * 0.05**2)) # Gaussian around 0.1
        priorities[fit_mask] += 2 * near_full_bonus # Scale the bonus for impact

        #Random exploration.
        priorities[fit_mask] += np.random.rand(np.sum(fit_mask)) * 0.1
        
    # Penalize infeasible bins harshly
    no_fit_mask = bins_remain_cap < item
    priorities[no_fit_mask] = -1e9  # Very high penalty

    return priorities
```
