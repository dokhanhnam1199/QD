```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Prioritize bins that can fit the item
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = 1  # Basic priority for fitting

    # Adjust priority based on remaining capacity after fitting
    remaining_after_fit = bins_remain_cap[fit_mask] - item
    
    # Give higher priority to bins with smaller remaining capacity (First Fit Decreasing like)
    # But avoid bins that would become too empty (to avoid fragmentation)
    
    
    # Small capacity = high priority if large than threshold, to avoid large fragementation
    threshold = 0.1
    priorities[fit_mask] += np.where(remaining_after_fit > bins_remain_cap[fit_mask] * threshold, remaining_after_fit,0) # If the remaining capacity is very small after putting the item, than add larger priorities
    
    
    return priorities
```
