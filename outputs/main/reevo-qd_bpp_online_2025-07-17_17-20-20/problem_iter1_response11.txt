```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Disqualify bins that can't fit the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf  # Or a very large negative number

    # 2. Best Fit Criterion: Prefer bins with the smallest remaining space after placement, but only if feasible
    feasible_mask = ~infeasible_mask
    remaining_space = bins_remain_cap[feasible_mask] - item

    # Apply a non-linear transformation to remaining_space to emphasize near-perfect fits
    # Small remaining space gets a high priority; larger spaces get progressively lower priority
    # Adding a small constant to avoid division by zero, and clipping to avoid extremely high values.

    priorities[feasible_mask] = -np.clip(remaining_space / (bins_remain_cap[feasible_mask] + 0.001), -1, 1)

    # 3. Smallest Bin Preference (Tie-breaker): if there are multiple bins that are close, choose smallest.
    # To make this relative, divide remaining space by bin capacity and exponentiate
    # Sort of exponential decay based on free space and original bin sizes
    # Add only to feasible bins, avoiding creating negative values.
    # Normalize between 0 and 1.
    normalized_capacities = bins_remain_cap[feasible_mask] / np.max(bins_remain_cap)
    priorities[feasible_mask] += np.exp(-normalized_capacities*10) /10
    return priorities
```
