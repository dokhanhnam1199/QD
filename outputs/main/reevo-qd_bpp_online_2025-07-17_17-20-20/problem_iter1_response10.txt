```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First Fit Decreasing heuristic inspiration: Prefer bins with least wasted space
            waste = cap - item
            priorities[i] = 1 / (waste + 1e-6)  # Avoid division by zero

            # Additionally prefer bins that are already relatively full
            priorities[i] += (1 - (cap / np.max(bins_remain_cap))) * 0.5 # Scale factor to give lesser importance

            # A small bonus to use bins that are already have some items
            if cap < np.max(bins_remain_cap):  #Assuming completely empty bin would be equal to max cap.
               priorities[i] += 0.1 # small constant bonus
        else:
            priorities[i] = -1e9  # Very low priority if item doesn't fit

    return priorities
```
