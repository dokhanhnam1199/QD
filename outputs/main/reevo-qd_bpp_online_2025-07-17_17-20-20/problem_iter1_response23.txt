```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Initialize with a low priority for bins that can't fit the item.
    priorities[bins_remain_cap < item] = -np.inf
    
    # For bins that can fit, prioritize based on the remaining capacity after placing the item.
    # Smaller remaining capacity gets higher priority (First Fit Decreasing heuristic principle)
    
    remaining_capacities = bins_remain_cap - item
    
    # Avoid zero division
    remaining_capacities[remaining_capacities <= 0] = 1e-6  # Set very small positive value for zero remaining capacities
    
    priorities[bins_remain_cap >= item] = 1 / remaining_capacities[bins_remain_cap >= item]  # Inverse of remaining capacity

    # Further incentivize bins that are close to being full after packing, without overflowing
    # This also penalizes bins where the remaining capacity will be large, resulting in fragmentation
    
    capacities_fit = bins_remain_cap[bins_remain_cap >= item]
    item_fit = item

    priorities[bins_remain_cap >= item] = (1 / remaining_capacities[bins_remain_cap >= item]) * (item_fit / capacities_fit) 

    # A slightly higher score for bins that are almost full without exceeding capacity.
    almost_full = (bins_remain_cap >= item) & (remaining_capacities <= 0.1 * bins_remain_cap)
    priorities[almost_full] *= 2 # Give bins almost full a slightly bigger nudge to the top.

    return priorities
```
