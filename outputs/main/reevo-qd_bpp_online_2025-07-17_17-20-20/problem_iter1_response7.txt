```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility check: assign -inf to bins that can't fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf
    
    # Prioritize bins with smallest remaining capacity *greater* than item.
    # This tends to fill bins as much as possible before opening new ones.
    # Use a large negative number to ensure feasible bins with small remaining
    # capacity are preferred to almost-full bins.

    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins):
      priorities[feasible_bins] = -bins_remain_cap[feasible_bins]
    
    # Add a bonus to bins where the item would fill it perfectly. This helps
    # minimize fragmentation.
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] += 10  # A large positive bonus.
    
    # Add a small bonus based on how much the bin is already filled.
    # Encourages using partially filled bins
    priorities += (1 - (bins_remain_cap / np.max(bins_remain_cap))) * 0.1 # Small bonus
    
    return priorities
```
