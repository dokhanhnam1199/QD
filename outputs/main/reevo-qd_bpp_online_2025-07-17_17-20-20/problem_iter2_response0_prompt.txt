{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Immediate Fit: High priority if item fits perfectly\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    priorities[perfect_fit] = 1000  # Very high priority\n    \n    # First Fit Decreasing Intuition\n    can_fit = bins_remain_cap >= item\n    priorities[~can_fit] = -1000 # Penalize if it cannot fit.\n    \n    # Maximize space utilization, but avoid fragmentation\n    # Penalize small remainders. sqrt to scale down the effect\n    remainders = bins_remain_cap - item\n    remainders[remainders < 0] = 0\n    \n    priorities[can_fit] += bins_remain_cap[can_fit] - 10*np.sqrt(remainders[can_fit])\n\n    # Prioritize bins that are not too full or too empty (middle ground). Avoids the extreme cases early on.\n\n    bin_fullness = 1 - bins_remain_cap / np.max(bins_remain_cap) # Scale fullness between 0 and 1\n    priorities[can_fit] += -np.abs(bin_fullness[can_fit] - 0.5) * 10 # Moderate penalty\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility: Only consider bins that can fit the item.\n    feasible_bins = bins_remain_cap >= item\n    \n    if not np.any(feasible_bins):\n        #If no bin can fit, return the remaining capacities as negative values.\n        #This will prioritize the largest capacity bin if splitting becomes unavoidable later\n        priorities = bins_remain_cap - np.max(bins_remain_cap) -1 # ensure a bin is always selected (most empty)\n        return priorities\n\n    \n    # 2. Remaining Capacity: Prioritize bins with smaller remaining capacity\n    #    after placing the item (First Fit Decreasing idea). This encourages filling up bins.\n    remaining_capacities_after_fit = bins_remain_cap[feasible_bins] - item\n    priorities[feasible_bins] = -remaining_capacities_after_fit # smaller remain capacity gives higher priority. Negative since we want the biggest negative number (smallest remain capacity after fit).\n\n    \n    # 3. Percentage Full: Penalize bins that become too full after adding the item. Avoids creating bins that are almost full.\n    fill_ratios = (bins_remain_cap[feasible_bins] - remaining_capacities_after_fit) / (bins_remain_cap[feasible_bins] + item) #ratio between bin_remain_cap and new_bin_cap\n    overfill_penalty = np.zeros_like(fill_ratios, dtype=float)\n\n    overfill_penalty[fill_ratios > 0.95] = -1000 * (fill_ratios[fill_ratios > 0.95] - 0.95)  # Heavily penalize bins that will be over 95% full after adding item\n\n    priorities[feasible_bins] += overfill_penalty\n\n    \n    # 4. Balance factor to prioritize partially filled bins\n    average_bin_level = np.mean(bins_remain_cap)\n    balance_factor = 0.0\n\n    if average_bin_level > 0: # prevents ZeroDivisionError.\n\n      balance_bonus = np.zeros_like(bins_remain_cap, dtype=float)\n      balance_bonus[feasible_bins] = (item) / (bins_remain_cap[feasible_bins] + item) * balance_factor\n\n      priorities[feasible_bins] += balance_bonus\n\n    return priorities\n\n[Reflection]\nFocus on feasibility first, then prioritize smaller remainders, avoid overfilling, and balance fullness.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}