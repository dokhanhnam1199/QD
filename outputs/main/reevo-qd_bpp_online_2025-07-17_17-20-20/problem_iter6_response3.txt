```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get punished harshly
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Feasible bins get prioritized
    feasible_mask = bins_remain_cap >= item
    if np.any(feasible_mask):
        slack = bins_remain_cap[feasible_mask] - item
        
        # Prioritize tighter fits based on inverse slack
        priorities[feasible_mask] += 1 / (slack + 1e-6)

        # Encourage bin utilization by considering remaining capacity
        remaining_capacity_after_fit = bins_remain_cap[feasible_mask] - item
        max_capacity = np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1 # Avoid division by zero and handle edge case.
        normalized_remaining = remaining_capacity_after_fit / max_capacity

        # Reward bins that will be moderately full after the item is added.
        # This balances between tight fits and good overall bin utilization.
        priorities[feasible_mask] += np.exp(-((normalized_remaining - 0.3)**2) / 0.05)

        # Add a small amount of randomness to encourage exploration
        priorities[feasible_mask] += np.random.rand(np.sum(feasible_mask)) * 0.001

    return priorities
```
