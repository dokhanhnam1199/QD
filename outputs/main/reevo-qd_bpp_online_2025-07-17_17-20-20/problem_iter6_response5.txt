```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get a very negative priority
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Calculate slack for feasible bins
    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins):
        slack = bins_remain_cap[feasible_bins] - item

        # Snug fit priority: Higher priority for smaller slack.  Use reciprocal.
        priorities[feasible_bins] += 1.0 / (slack + 1e-6)

        # Calculate normalized remaining capacity
        remaining_capacity_after = bins_remain_cap[feasible_bins] - item
        max_capacity = np.max(bins_remain_cap)
        if max_capacity > 0:
            normalized_remaining = remaining_capacity_after / max_capacity
        else:
            normalized_remaining = 0.0  # Handle the case where max_capacity is zero

        # Balanced fill bonus: Prioritize bins where the normalized remaining capacity is around 0.5
        balance_bonus = np.exp(-np.abs(normalized_remaining - 0.5)**2 / 0.08)
        priorities[feasible_bins] += balance_bonus

        # Perfect fit bonus: Significant bonus for a perfect fit.
        perfect_fit = np.isclose(bins_remain_cap[feasible_bins], item)
        priorities[feasible_bins][perfect_fit] += 3.0

        # Almost full bonus: Small bonus for bins that are almost full after adding the item.
        almost_full = (slack < (0.1 * max_capacity if max_capacity > 0 else 0.1))
        priorities[feasible_bins][almost_full] += 0.5

        # First-fit modifier: Slightly prefer bins encountered earlier
        priorities[feasible_bins] += np.linspace(0.01, 0, np.sum(feasible_bins))
        
    return priorities
```
