{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Immediate Fit: High priority if item fits perfectly\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    priorities[perfect_fit] = 1000  # Very high priority\n    \n    # First Fit Decreasing Intuition\n    can_fit = bins_remain_cap >= item\n    priorities[~can_fit] = -1000 # Penalize if it cannot fit.\n    \n    # Maximize space utilization, but avoid fragmentation\n    # Penalize small remainders. sqrt to scale down the effect\n    remainders = bins_remain_cap - item\n    remainders[remainders < 0] = 0\n    \n    priorities[can_fit] += bins_remain_cap[can_fit] - 10*np.sqrt(remainders[can_fit])\n\n    # Prioritize bins that are not too full or too empty (middle ground). Avoids the extreme cases early on.\n\n    bin_fullness = 1 - bins_remain_cap / np.max(bins_remain_cap) # Scale fullness between 0 and 1\n    priorities[can_fit] += -np.abs(bin_fullness[can_fit] - 0.5) * 10 # Moderate penalty\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Calculate waste if the item is placed in the bin.  Use large number if item does not fit.\n    waste = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)\n\n    # Prioritize bins where the item fits best (smallest waste). Avoid fragmentation.\n    priorities = -waste\n\n    # Add a bonus for bins that are almost full after adding the item. Try to fill bins up.\n    almost_full_threshold = 0.1  # Define \"almost full\" (e.g., within 10% of capacity)\n    is_almost_full = (bins_remain_cap >= item) & (waste <= almost_full_threshold)\n    priorities[is_almost_full] += 10 # subatantial boost to bins that are almost full after the add.\n\n    # Penalize bins where the item doesn't fit (to a very low score.)\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Small random number to break ties (helps exploration)\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.001\n    \n    return priorities\n\n[Reflection]\nWaste minimization, almost-full bonuses, infeasibility penalties, and tie-breaking randomness are key improvements.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}