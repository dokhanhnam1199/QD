```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get -inf priority
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins):
        # Snug fit priority
        slack = bins_remain_cap[feasible_bins] - item
        priorities[feasible_bins] = 1.0 / (slack + 1e-6)

        # Normalize remaining capacity
        max_capacity = np.max(bins_remain_cap)
        if max_capacity > 0:
            normalized_remaining = slack / max_capacity
        else:
            normalized_remaining = 0

        # Balanced fill bonus (Gaussian-like)
        balance_bonus = np.exp(-np.abs(normalized_remaining - 0.5)**2 / 0.08)
        priorities[feasible_bins] += balance_bonus

        # Perfect fit bonus
        perfect_fit = np.isclose(bins_remain_cap[feasible_bins], item)
        priorities[feasible_bins][perfect_fit] += 5.0  # Increased perfect fit bonus

        # Near-full bin bonuses (prioritized)
        almost_full = slack < (0.1 * max_capacity if max_capacity > 0 else 0.1)
        priorities[feasible_bins][almost_full] += 1.0

        very_almost_full = slack < (0.05 * max_capacity if max_capacity > 0 else 0.05)
        priorities[feasible_bins][very_almost_full] += 2.0  # Further increased bonus

        extremely_almost_full = slack < (0.02 * max_capacity if max_capacity > 0 else 0.02)
        priorities[feasible_bins][extremely_almost_full] += 3.0 #Highest bonus, fill it!

    return priorities
```
