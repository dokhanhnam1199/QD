```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give very low priority to bins that cannot fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Assign lowest priority to infeasible bins

    # For feasible bins, calculate priority based on remaining capacity after adding the item.
    feasible_bins = ~infeasible_bins
    remaining_capacity_after_fit = bins_remain_cap[feasible_bins] - item

    # Prioritize bins where the remaining capacity is close to 0 (First Fit Decreasing principle).
    # Avoids creating bins with very little space left, which is hard to fill later.
    priorities[feasible_bins] = np.exp(-remaining_capacity_after_fit)

    # Add a small bonus to bins that are already somewhat full.
    # Encourages filling existing bins instead of opening new ones if there's a close choice
    fullness_bonus = (1 - bins_remain_cap / bins_remain_cap.max()) # scale to [0,1]
    priorities += 0.1*fullness_bonus

    #Add another term favoring small remaining capacity bins, but scaling inverse with remaining capacity
    priorities[feasible_bins] += 0.5/(0.01 + remaining_capacity_after_fit)

    return priorities
```
