```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Encourage filling bins that are close to full after placing the item.
            fill_ratio_after = item / cap
            priorities[i] = 1 - fill_ratio_after

            # Give higher priority to bins that are closer to the item size
            priorities[i] += np.exp(-np.abs(cap - item))

            # Penalize bins with very large capacities (avoid very empty bins).
            priorities[i] -= (cap / np.max(bins_remain_cap)) * 0.1 if bins_remain_cap.size > 0 else 0
        else:
            priorities[i] = -np.inf  # Cannot fit

    return priorities
```
