```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Prioritize feasible bins
    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins):
        slack = bins_remain_cap[feasible_bins] - item

        # Snug fit reward
        priorities[feasible_bins] += 1.0 / (slack + 0.01)  # Add small value to avoid division by zero

        # Reward bins with remaining capacity around 0.3-0.7. This helps avoid bins becoming too full or remaining almost empty.
        max_capacity = np.max(bins_remain_cap)
        if max_capacity > 0:
            normalized_remaining = (bins_remain_cap[feasible_bins] - item) / max_capacity
            # Using a gaussian-like function to reward bins with normalized capacity around 0.5
            balance_reward = np.exp(-((normalized_remaining - 0.5)**2) / 0.08)
            priorities[feasible_bins] += 0.5 * balance_reward

        # Perfect fit bonus
        perfect_fit = np.isclose(bins_remain_cap[feasible_bins], item)
        priorities[feasible_bins][perfect_fit] += 2.0

        # Penalize large waste (remaining capacity)
        waste_penalty = np.maximum(0.0, (bins_remain_cap[feasible_bins] - item) - 0.5 * max_capacity if max_capacity>0 else 0)
        priorities[feasible_bins] -= 0.1 * waste_penalty
    return priorities
```
