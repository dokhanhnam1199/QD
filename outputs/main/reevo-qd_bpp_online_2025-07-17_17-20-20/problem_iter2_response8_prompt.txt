{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First-Fit Decreasing heuristic inspired priority: prefer bins where item fits best\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):\n        priorities[fit_mask] = bins_remain_cap[fit_mask] - item  # Smaller difference is better\n\n        # Break ties using the Fill Rate idea to penalize bins that would have low fill-rate with the item\n        fill_rates = item / bins_remain_cap[fit_mask]\n        priorities[fit_mask] -= fill_rates # Higher fill rates (closer to 1.0) are preferred, subtract a small negative number.\n\n    else:\n        # If item doesn't fit into any bin, give all very small negative priorities.\n        priorities[:] = -1e9  # Very low priority for bins where it doesn't fit\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # First-Fit Decreasing heuristic: prefer bins that can accommodate the item with minimal waste.\n    # Give high priority to bins where the remaining capacity after adding the item is small.\n    \n    valid_bins = bins_remain_cap >= item\n    \n    if np.any(valid_bins):\n        remaining_space = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] = -remaining_space  # Smaller remaining space -> higher priority. Use negative sign\n        \n        # Modify to prioritize bins close to fully filling. Prioritize bins whose post-packing fullness is high, but don't OVERFILL.\n\n        fullness = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins] #Post-packing\n        priorities[valid_bins] = fullness\n\n        #Bins that make close to 1 when added to existing size should have top priority.\n        priorities[valid_bins] = 1 / (remaining_space + 1e-9)\n        \n        #Adjust to strongly discourage wasting large space in nearly full bins, otherwise, use residual space as proxy of the quality\n        \n        large_waste_threshold = 0.5 #Define what counts as significantly wasted capacity for residual space penalty\n        priorities[valid_bins] = -np.abs((bins_remain_cap[valid_bins]-item) -large_waste_threshold)\n            \n    else:\n        # If no bin can accommodate the item, assign the same low priority to all bins.\n        priorities[:] = -np.inf\n        \n    return priorities\n\n[Reflection]\nPrioritize fullness *and* minimize waste. Dynamically adjust priorities based on remaining capacity and waste thresholds.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}