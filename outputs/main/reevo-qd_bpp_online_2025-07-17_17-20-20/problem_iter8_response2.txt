```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: assign -inf to bins that can't fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Prioritize snug fits and penalize waste
    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins):
        slack = bins_remain_cap[feasible_bins] - item
        # Higher priority for smaller slack (snug fit)
        priorities[feasible_bins] = 1.0 / (slack + 1e-6)

        # Normalize remaining capacity after placing item
        max_capacity = np.max(bins_remain_cap)
        if max_capacity > 0:
            normalized_remaining = slack / max_capacity
        else:
            normalized_remaining = 0

        # Reward balance: prioritize bins where the normalized remaining capacity is around 0.5
        balance_bonus = np.exp(-np.abs(normalized_remaining - 0.5)**2 / 0.08)
        priorities[feasible_bins] += balance_bonus

        # Perfect fit bonus
        perfect_fit = np.isclose(bins_remain_cap[feasible_bins], item)
        priorities[feasible_bins][perfect_fit] += 5.0  # Increased perfect fit bonus

        # Add a bonus for using almost full bins
        almost_full = (slack >= 0) & (slack < (0.1 * max_capacity if max_capacity > 0 else 0.1))
        priorities[feasible_bins][almost_full] += 2.0

        # Further incentivize using almost full bins without making them completely full
        very_almost_full = (slack >= 0) & (slack < (0.05 * max_capacity if max_capacity > 0 else 0.05))
        priorities[feasible_bins][very_almost_full] += 4.0  # Even higher bonus

        # Penalize large remaining capacity (waste)
        waste_penalty = np.clip(normalized_remaining - 0.75, 0, None)  # Only penalize if remaining > 0.75
        priorities[feasible_bins] -= 2 * waste_penalty**2  # Quadratic penalty

    return priorities
```
