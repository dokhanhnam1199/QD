```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get punished harshly
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Feasible bins get prioritized
    feasible_mask = bins_remain_cap >= item
    if np.any(feasible_mask):
        # Prioritize bins with tighter fits (smaller slack)
        slack = bins_remain_cap[feasible_mask] - item
        priorities[feasible_mask] = 1 / (slack + 1e-6)  # Avoid division by zero

        # Slightly penalize large remaining capacity to avoid creating very empty bins.
        bin_capacity = np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1 #Prevent ZeroDivisionError
        normalized_remaining = slack / bin_capacity
        priorities[feasible_mask] -= normalized_remaining * 0.1 # Scale down the penalty

    return priorities
```
