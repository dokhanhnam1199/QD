```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: assign -inf to bins that can't fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Prioritize snug fits, balance remaining capacity, and reward perfect fits
    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins):
        slack = bins_remain_cap[feasible_bins] - item
        
        # Snug fit reward: Higher priority for smaller slack
        priorities[feasible_bins] += 1.0 / (slack + 1e-6)

        # Balance remaining capacity after placing item
        remaining_capacity_after = bins_remain_cap[feasible_bins] - item
        max_capacity = np.max(bins_remain_cap)
        if max_capacity > 0:
            normalized_remaining = remaining_capacity_after / max_capacity
        else:
            normalized_remaining = np.zeros_like(remaining_capacity_after) #Avoid division by zero

        # Reward balance: prioritize bins where the normalized remaining capacity is around 0.5
        balance_bonus = np.exp(-((normalized_remaining - 0.5) ** 2) / 0.08)  # Adjusted std for broader peak
        priorities[feasible_bins] += 0.75 * balance_bonus # Reduced magnitude of balance bonus

        # Perfect fit bonus
        perfect_fit = np.isclose(bins_remain_cap[feasible_bins], item)
        priorities[feasible_bins][perfect_fit] += 3.0  # Significant bonus for perfect fit


        # Penalize very small remaining capacity (fragmentation) after placing item
        small_remaining = remaining_capacity_after / max_capacity < 0.1
        priorities[feasible_bins][small_remaining] -= 1.0  # Slight penalty

    return priorities
```
