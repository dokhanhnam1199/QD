```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit-Decreasing heuristic component: Prefer bins that can fit the item.
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1  # Give a base priority if it can fit.

    # Best-Fit heuristic component: Prefer bins with smallest remaining capacity after placing item, if it fits.
    remaining_space = bins_remain_cap - item
    remaining_space[~can_fit] = np.inf  # Penalize bins that cannot fit
    priorities[can_fit] += 1.0 / (remaining_space[can_fit] + 1e-6) # Avoid division by zero

    # Avoid fragmentation: try to fill up near empty bins or nearly full bins
    near_empty = (bins_remain_cap > 0) & (bins_remain_cap < 0.1)  # Bins almost empty 
    priorities[near_empty] += 0.5

    near_full = can_fit & (remaining_space >= 0) & (remaining_space < 0.1)
    priorities[near_full] += 1 # Higher priority for bins that will be filled close to max cap.

    # Penalize bins where the item would cause the bin to be nearly full
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap < item + 0.1)
    priorities[almost_full] -= 0.2  # Slightly less preferable to avoid excessive near-full bins

    # Soft penalty for bins which we can place our item with room > 0.5
    roomy_fit = can_fit & (bins_remain_cap > item + 0.5)
    priorities[roomy_fit] -= 0.05 # avoid this when possible

    return priorities
```
