```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit Decreasing-like heuristic: Prioritize bins that can fit the item closely.
    # Avoid bins that are too full or too empty after packing.
    
    # Give high priority to bins where the remaining capacity after packing
    # is a small fraction of the bin size.
    
    fit_indices = bins_remain_cap >= item
    
    if np.any(fit_indices):
        remaining_after_fit = bins_remain_cap[fit_indices] - item
        
        # Normalize remaining capacity to [0, 1] by dividing by bins' full capacity
        normalized_remaining = remaining_after_fit / (bins_remain_cap[fit_indices] + item - remaining_after_fit)  #Assuming initial_capcity is approximately bins_remain_cap[fit_indices] + item - remaining_after_fit (corrected equation)
        
        # Use inverse of remaining fraction as priority: closer to full -> higher priority
        priorities[fit_indices] = 1.0 - normalized_remaining # Prioritize smaller remaining space
    
        # Add bonus priority to almost full bins

        almost_full = (bins_remain_cap[fit_indices] - item) < 0.1 # if remaining space is less than 0.1 after packing.
        priorities[fit_indices][almost_full] += 0.5 # Boosts priority

    
    
    # Penalize bins that can't fit the item heavily
    priorities[bins_remain_cap < item] = -1e9
    

    return priorities
```
