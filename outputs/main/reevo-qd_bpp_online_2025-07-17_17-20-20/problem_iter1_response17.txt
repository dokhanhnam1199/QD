```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing inspired priority: Prefer bins that can fit the item.
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1.0

    # Give higher priority to bins with smaller remaining capacity among those that can fit.
    # This tries to fill bins more completely.
    small_cap_bonus = np.where(can_fit, 1.0 / (bins_remain_cap + 1e-6), 0.0)
    priorities += small_cap_bonus
    
    # Penalize bins that are significantly larger than the item
    waste_penalty = np.where(can_fit, np.exp(-bins_remain_cap + item), 0.0)
    priorities -= waste_penalty

    #Extreme penalty if the bins does not fit the item
    cannot_fit = bins_remain_cap < item
    priorities[cannot_fit] -= 1000 #Large negative penalty so item can never get placed

    return priorities
```
