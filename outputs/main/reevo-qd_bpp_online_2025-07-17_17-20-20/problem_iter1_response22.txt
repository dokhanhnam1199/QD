```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Immediate Fit: High priority if item fits perfectly
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = 1000  # Very high priority
    
    # First Fit Decreasing Intuition
    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -1000 # Penalize if it cannot fit.
    
    # Maximize space utilization, but avoid fragmentation
    # Penalize small remainders. sqrt to scale down the effect
    remainders = bins_remain_cap - item
    remainders[remainders < 0] = 0
    
    priorities[can_fit] += bins_remain_cap[can_fit] - 10*np.sqrt(remainders[can_fit])

    # Prioritize bins that are not too full or too empty (middle ground). Avoids the extreme cases early on.

    bin_fullness = 1 - bins_remain_cap / np.max(bins_remain_cap) # Scale fullness between 0 and 1
    priorities[can_fit] += -np.abs(bin_fullness[can_fit] - 0.5) * 10 # Moderate penalty

    return priorities
```
