```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give a high priority to bins that can fit the item.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1.0

    # Prioritize bins where the item fits relatively well.  Avoid bins that are only *just* big enough.
    relative_fit = (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask]  # smaller value better fit.
    priorities[fit_mask] += np.exp(-10*relative_fit) # Decay quickly if the bin is too big for the item relative to its size
    
    # Penalize bins that would become too full after adding the item (leave some safety margin, say 10%).
    almost_full_mask = (bins_remain_cap - item) < 0.1
    priorities[almost_full_mask] -= 0.5

    #If no bins fit, try to use the bin that can fit the largest chunk of the item.
    if np.all(bins_remain_cap < item):
      priorities = bins_remain_cap

    return priorities
```
