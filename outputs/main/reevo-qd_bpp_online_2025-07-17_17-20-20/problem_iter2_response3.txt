```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        remaining_space = bins_remain_cap[valid_bins] - item
        
        # Prioritize fullness: Higher fullness after packing is better.
        fullness = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins]
        priorities[valid_bins] = fullness

        # Discourage large waste: Penalize bins where a significant amount of space is wasted.
        large_waste_threshold = 0.5  # Threshold for considering waste as "large"
        waste_penalty = np.where(remaining_space > large_waste_threshold, -1.0, 0.0)  # High penalty for large waste
        priorities[valid_bins] += waste_penalty
        
        # Refine using remaining space: Give slight preference to bins with less remaining space, but only if waste isn't large.
        priorities[valid_bins] += np.where(remaining_space <= large_waste_threshold, -remaining_space * 0.1, 0.0)

    else:
        # If no bin can accommodate the item, strongly penalize all bins.
        priorities[:] = -np.inf

    return priorities
```
