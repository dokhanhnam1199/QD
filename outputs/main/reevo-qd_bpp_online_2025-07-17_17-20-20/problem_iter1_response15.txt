```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First-Fit-Decreasing inspired approach: prioritize bins that can fit the item
    # and have relatively low remaining capacity after fitting the item.
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        remaining_after_fit = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] = 1 / (remaining_after_fit + 1e-9)  # Avoid division by zero

        # Bonus for bins that are almost full after packing
        almost_full = (remaining_after_fit / item) < 0.1
        priorities[valid_bins][almost_full] *= 2  # Double priority for bins that are almost full
    else:
        # If no bins can fit, penalize all bins heavily. It encourages opening a new bin.
        priorities[:] = -1e9  # Large negative value

    return priorities
```
