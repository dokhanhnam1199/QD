{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap) #assumed bins have equal capacity equal to max of bins_remain_cap\n\n    # Infeasible bins get punished harshly\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n\n    # Feasible bins get prioritized\n    feasible_mask = bins_remain_cap >= item\n    if np.any(feasible_mask):\n        remaining_capacity_after_fit = bins_remain_cap[feasible_mask] - item\n\n        # Normalize the remaining capacity\n        normalized_remaining = remaining_capacity_after_fit / bin_capacity\n\n        # Reward near-full bins (small remaining capacity) strongly. The closer to 0 normalized_remaining is, the higher the score.\n        priorities[feasible_mask] += (1 - normalized_remaining)**2 # Quadratic to emphasize small remaining capacity\n\n        # Penalize excessive waste (large remaining capacity). Penalty increases with normalized_remaining.\n        priorities[feasible_mask] -= normalized_remaining\n\n        # Inverse slack for nuanced bin prioritization: Favors bins with tighter fits.\n        slack = bins_remain_cap[feasible_mask] - item\n        priorities[feasible_mask] += 1 / (slack + 1e-6) # Avoid division by zero\n\n        #Add randomness for exploration of different solutions.\n        priorities[feasible_mask] += np.random.rand(np.sum(feasible_mask)) * 0.01\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First Fit Decreasing (FFD) inspired: Prefer bins that can fit the item snugly\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):\n        slack = bins_remain_cap[fit_mask] - item\n        priorities[fit_mask] = 1 / (slack + 1e-6) # avoid division by zero\n\n        # Boost bins with minimal remaining capacity after adding the item, but also penalize nearly full bins\n        remaining_capacity_after_fit = bins_remain_cap[fit_mask] - item\n        normalized_remaining = remaining_capacity_after_fit / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else remaining_capacity_after_fit #Handle cases when np.max is zero.\n        priorities[fit_mask] += 1 - np.abs(normalized_remaining - 0.5) # give boost around 0.5.\n    \n    # Penalize bins that can't fit the item\n    no_fit_mask = bins_remain_cap < item\n    priorities[no_fit_mask] = -np.inf # Mark bins that cannot fit with negative infinity\n\n    return priorities\n\n[Reflection]\nFocus on tight fits and balanced bin utilization. Avoid excessive penalties and normalizations that obscure true fit.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}