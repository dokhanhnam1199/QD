```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)
    
    #Minimizing waste directly: reward bins where the item fits with minimal waste
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        slack = bins_remain_cap[fit_mask] - item
        normalized_slack = slack / bin_capacity if bin_capacity > 0 else slack
        priorities[fit_mask] = 1 - normalized_slack #Higher priority for lower waste

        # Reward near-full bins strongly: Give substantial bonus if adding the item makes the bin close to full.
        remaining_after_fit = bins_remain_cap[fit_mask] - item
        normalized_remaining = remaining_after_fit / bin_capacity if bin_capacity > 0 else remaining_after_fit
        near_full_bonus = np.exp(-5 * normalized_remaining) # Exponential decay for remaining capacity
        priorities[fit_mask] += near_full_bonus

    # Penalize infeasibility harshly
    no_fit_mask = bins_remain_cap < item
    priorities[no_fit_mask] = -1e9  # Very large negative number to discourage infeasible placements

    # Add randomness for exploration (optional)
    priorities += np.random.normal(0, 0.01, size=priorities.shape)
    
    return priorities
```
