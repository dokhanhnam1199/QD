```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: assign -inf to bins that can't fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Prioritize snug fits, balance remaining capacity, and reward perfect fits. Waste minimization is key.
    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins):
        slack = bins_remain_cap[feasible_bins] - item

        # Snug fit reward: Higher priority for smaller slack (inverse relationship)
        priorities[feasible_bins] += 1.0 / (slack + 1e-9)  # Adding a small constant to avoid division by zero

        # Remaining capacity balance reward: Aim for bins to be around half full after placing the item.
        remaining_capacity_after = bins_remain_cap[feasible_bins] - item
        max_capacity = np.max(bins_remain_cap) if np.any(bins_remain_cap > 0) else 1.0 # Avoid division by zero. if all bins have zero capacity, set max_capacity to 1
        normalized_remaining = remaining_capacity_after / max_capacity
        balance_reward = np.exp(-((normalized_remaining - 0.5)**2) / 0.08)  # Gaussian centered at 0.5, wider spread.
        priorities[feasible_bins] += balance_reward * 0.75 # Reduced magnitude

        # Perfect fit bonus: Strong preference for perfect fits.
        perfect_fit = np.isclose(bins_remain_cap[feasible_bins], item)
        priorities[feasible_bins][perfect_fit] += 3.0  # Significant bonus

        # Waste Penalization: Penalize bins that leave a large amount of wasted space.
        waste_penalty = (slack / max_capacity)**2 #Quadratic penalty
        priorities[feasible_bins] -= waste_penalty * 0.5 # Moderate waste penalty

    return priorities
```
