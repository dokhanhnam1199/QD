```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get punished harshly
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Feasible bins get prioritized
    feasible_mask = bins_remain_cap >= item
    if np.any(feasible_mask):
        # Slack-based prioritization
        slack = bins_remain_cap[feasible_mask] - item
        priorities[feasible_mask] = 1 / (slack + 1e-6)

        # Target bins near half-full after adding the item
        remaining_capacity_after_fit = bins_remain_cap[feasible_mask] - item
        bin_capacity = np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1  # Avoid division by zero
        normalized_remaining = remaining_capacity_after_fit / bin_capacity
        
        # Prioritize bins with normalized remaining close to 0.5
        priorities[feasible_mask] += np.exp(-((normalized_remaining - 0.5)**2) / (2 * 0.1**2)) #Gaussian function, std dev = 0.1

    return priorities
```
