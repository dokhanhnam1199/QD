{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # First-Fit-Decreasing inspired approach: prioritize bins that can fit the item\n    # and have relatively low remaining capacity after fitting the item.\n    valid_bins = bins_remain_cap >= item\n    if np.any(valid_bins):\n        remaining_after_fit = bins_remain_cap[valid_bins] - item\n        priorities[valid_bins] = 1 / (remaining_after_fit + 1e-9)  # Avoid division by zero\n\n        # Bonus for bins that are almost full after packing\n        almost_full = (remaining_after_fit / item) < 0.1\n        priorities[valid_bins][almost_full] *= 2  # Double priority for bins that are almost full\n    else:\n        # If no bins can fit, penalize all bins heavily. It encourages opening a new bin.\n        priorities[:] = -1e9  # Large negative value\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n\n    # Calculate waste if the item is placed in the bin.  Use large number if item does not fit.\n    waste = np.where(bins_remain_cap >= item, bins_remain_cap - item, np.inf)\n\n    # Prioritize bins where the item fits best (smallest waste). Avoid fragmentation.\n    priorities = -waste\n\n    # Add a bonus for bins that are almost full after adding the item. Try to fill bins up.\n    almost_full_threshold = 0.1  # Define \"almost full\" (e.g., within 10% of capacity)\n    is_almost_full = (bins_remain_cap >= item) & (waste <= almost_full_threshold)\n    priorities[is_almost_full] += 10 # subatantial boost to bins that are almost full after the add.\n\n    # Penalize bins where the item doesn't fit (to a very low score.)\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Small random number to break ties (helps exploration)\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.001\n    \n    return priorities\n\n[Reflection]\nExplicitly minimize waste, strongly prioritize near-full bins, and penalize infeasibility. Add randomness for exploration.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}