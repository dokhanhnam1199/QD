```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit Decreasing heuristic: prefer bins that can accommodate the item with minimal waste.
    # Give high priority to bins where the remaining capacity after adding the item is small.
    
    valid_bins = bins_remain_cap >= item
    
    if np.any(valid_bins):
        remaining_space = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] = -remaining_space  # Smaller remaining space -> higher priority. Use negative sign
        
        # Modify to prioritize bins close to fully filling. Prioritize bins whose post-packing fullness is high, but don't OVERFILL.

        fullness = (bins_remain_cap[valid_bins] - remaining_space) / bins_remain_cap[valid_bins] #Post-packing
        priorities[valid_bins] = fullness

        #Bins that make close to 1 when added to existing size should have top priority.
        priorities[valid_bins] = 1 / (remaining_space + 1e-9)
        
        #Adjust to strongly discourage wasting large space in nearly full bins, otherwise, use residual space as proxy of the quality
        
        large_waste_threshold = 0.5 #Define what counts as significantly wasted capacity for residual space penalty
        priorities[valid_bins] = -np.abs((bins_remain_cap[valid_bins]-item) -large_waste_threshold)
            
    else:
        # If no bin can accommodate the item, assign the same low priority to all bins.
        priorities[:] = -np.inf
        
    return priorities
```
