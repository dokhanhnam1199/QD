```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Very high priority for bins that can fit the item almost perfectly
    fit_almost_perfectly = (bins_remain_cap - item) >= 0
    almost_perfect_fit_indices = np.where(fit_almost_perfectly)[0]
    
    for i in almost_perfect_fit_indices:
        priorities[i] = 100 - np.abs(bins_remain_cap[i] - item) # Prioritize closer fit

    # Medium priority for bins that can fit the item but not perfectly
    fit_indices = np.where(bins_remain_cap >= item)[0]

    for i in fit_indices:
        if i not in almost_perfect_fit_indices:
             priorities[i] = 50 - (bins_remain_cap[i] - item)

    # Low priority (negative) to avoid fragmentation. This discourages use of bins that are already very empty.
    empty_bins_indices = np.where(bins_remain_cap > 2*item)[0]

    for i in empty_bins_indices:
      if priorities[i] == 0:
        priorities[i] = -1 * (bins_remain_cap[i] / np.max(bins_remain_cap)) 
    
    return priorities
```
