```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap) #assumed bins have equal capacity equal to max of bins_remain_cap

    # Infeasible bins get punished harshly
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Feasible bins get prioritized
    feasible_mask = bins_remain_cap >= item
    if np.any(feasible_mask):
        remaining_capacity_after_fit = bins_remain_cap[feasible_mask] - item

        # Normalize the remaining capacity
        normalized_remaining = remaining_capacity_after_fit / bin_capacity

        # Reward near-full bins (small remaining capacity) strongly. The closer to 0 normalized_remaining is, the higher the score.
        priorities[feasible_mask] += (1 - normalized_remaining)**3 # Cubic to emphasize small remaining capacity even more.

        # Penalize excessive waste (large remaining capacity). Penalty increases with normalized_remaining.
        priorities[feasible_mask] -= normalized_remaining**2 # Quadratic penalty

        # Inverse slack for nuanced bin prioritization: Favors bins with tighter fits.
        slack = bins_remain_cap[feasible_mask] - item
        priorities[feasible_mask] += 2 / (slack + 1e-6) # Avoid division by zero, increased weight

        # Add randomness for exploration of different solutions. Reduce randomness
        priorities[feasible_mask] += np.random.rand(np.sum(feasible_mask)) * 0.005
    return priorities
```
