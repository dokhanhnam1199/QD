{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes near-perfect fits, adds stochasticity, and penalizes fragmentation.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n\n    if np.any(feasible_bins):\n        waste = bins_remain_cap[feasible_bins] - item\n        \n        # Prioritize based on inverse waste (best fit)\n        priorities[feasible_bins] = 1 / (waste + 0.0001)\n        \n        # Add stochasticity (exploration)\n        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.1\n\n        #Penalize almost full bins to prevent fragmentation\n        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]\n        almost_full = wasted_space_ratio < 0.1\n        priorities[feasible_bins][almost_full] *= 0.5 # Reduce priority of almost full bins\n        \n\n    else:\n        priorities[:] = -np.inf\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version incorporates non-linearity, stochasticity, fragmentation penalty,\n    relative waste, and array operations to enhance performance.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Fit Assessment & Relative Waste (Non-linear)\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):  # only apply calculation if some bins can fit\n        waste = bins_remain_cap[fit_mask] - item\n        relative_waste = waste / item #waste relative to the item size\n        priorities[fit_mask] += np.exp(-5 * relative_waste)  # Exponentially decaying priority based on waste\n\n    # 2. Fragmentation Penalty (Non-linear)\n    # Penalize bins that will have remaining capacity within a specific range,\n    # as this leads to fragmentation.\n    fragment_threshold_low = 0.1\n    fragment_threshold_high = 0.25\n    fragment_mask = (bins_remain_cap - item > fragment_threshold_low) & (bins_remain_cap - item < fragment_threshold_high)\n\n    priorities[fragment_mask] -= 0.5  # Apply a penalty for fragmentation\n\n    # 3. Stochastic Exploration (Stochasticity)\n    # Add a small random value to each bin's priority to encourage exploration.\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.01\n\n    # 4. Bin Utilization Encouragement\n    # Incentivize bins that are already partially full.  Use a sigmoid function\n    # to provide a non-linear increase in priority as the bin fills up.\n    utilization = (1 - bins_remain_cap / np.max(bins_remain_cap)) #utilization relative to the biggest bin capacity.\n    priorities += 1.0 / (1 + np.exp(-10 * (utilization - 0.5))) #sigmod function that incentivizes partially filled bins.\n\n    # 5. Small Capacity Penalty (As before, but refined)\n    small_cap_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n    priorities += small_cap_penalty\n\n    # 6. Large Capacity Reward (As before)\n    large_cap_reward = np.where(bins_remain_cap > item * 2, 0.2, 0) #reduced reward amount\n    priorities += large_cap_reward\n\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the top heuristics aren't penalized for number of bins but do implement fragmentation and waste penalties. (2nd) vs (19th) are identical. (3rd) vs (18th) are identical. Comparing (1st) vs (2nd), we see no difference. Comparing (3rd) vs (4th), we see no difference. Comparing (second worst) vs (worst), we see no difference. Overall: The initial heuristics (1st-5th) are identical, and the later heuristics introduce a range of penalty and reward mechanisms, including fragmentation penalties, stochastic elements, and incentives for filling larger spaces, number of bins penalty. The functions incorporate diverse strategies, such as non-linear scaling and exploration factors to optimize bin usage.\n- \nOkay, let's redefine \"Current self-reflection\" to be more effective in guiding heuristic design.\n\nHere's a breakdown:\n\n*   **Keywords:** Incremental improvement, base heuristic, parameter tuning, empirical validation.\n*   **Advice:** Begin with a solid, easily understood core heuristic. Introduce enhancements (e.g., fragmentation handling, specialized rules) one at a time. Meticulously adjust parameters using thorough testing.\n*   **Avoid:** Unnecessary complexity from the outset, premature optimization, reliance on intuition without data.\n*   **Explanation:** Focus on controlled experimentation and data-driven adjustments. Add complexity gradually, verifying each addition's benefit through rigorous empirical validation. This prevents over-engineering and ensures each component contributes meaningfully.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}