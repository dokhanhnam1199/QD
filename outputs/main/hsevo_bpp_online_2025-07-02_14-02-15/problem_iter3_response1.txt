```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version incorporates non-linearity, stochasticity, fragmentation penalty,
    relative waste, and array operations to enhance performance.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Fit Assessment & Relative Waste (Non-linear)
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):  # only apply calculation if some bins can fit
        waste = bins_remain_cap[fit_mask] - item
        relative_waste = waste / item #waste relative to the item size
        priorities[fit_mask] += np.exp(-5 * relative_waste)  # Exponentially decaying priority based on waste

    # 2. Fragmentation Penalty (Non-linear)
    # Penalize bins that will have remaining capacity within a specific range,
    # as this leads to fragmentation.
    fragment_threshold_low = 0.1
    fragment_threshold_high = 0.25
    fragment_mask = (bins_remain_cap - item > fragment_threshold_low) & (bins_remain_cap - item < fragment_threshold_high)

    priorities[fragment_mask] -= 0.5  # Apply a penalty for fragmentation

    # 3. Stochastic Exploration (Stochasticity)
    # Add a small random value to each bin's priority to encourage exploration.
    priorities += np.random.rand(len(bins_remain_cap)) * 0.01

    # 4. Bin Utilization Encouragement
    # Incentivize bins that are already partially full.  Use a sigmoid function
    # to provide a non-linear increase in priority as the bin fills up.
    utilization = (1 - bins_remain_cap / np.max(bins_remain_cap)) #utilization relative to the biggest bin capacity.
    priorities += 1.0 / (1 + np.exp(-10 * (utilization - 0.5))) #sigmod function that incentivizes partially filled bins.

    # 5. Small Capacity Penalty (As before, but refined)
    small_cap_penalty = np.where(bins_remain_cap < item, -np.inf, 0)
    priorities += small_cap_penalty

    # 6. Large Capacity Reward (As before)
    large_cap_reward = np.where(bins_remain_cap > item * 2, 0.2, 0) #reduced reward amount
    priorities += large_cap_reward

    return priorities
```
