```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    n_bins = len(bins_remain_cap)

    # Fit Score: Prioritize bins that can fit the item
    fit_mask = bins_remain_cap >= item
    fit_score = np.where(fit_mask, 1, 0)
    priorities += fit_score

    # Waste Ratio: Penalize high waste relative to item size, but non-linearly
    waste = bins_remain_cap - item
    relative_waste = np.where(fit_mask, waste / item, np.inf)  #Waste relative to item size
    waste_penalty = np.where(fit_mask, -np.power(relative_waste, 2), 0) # Square it for non-linearity. Higher relative waste will have bigger penalty
    priorities += waste_penalty

    # Capacity Utilization: Encourage filling bins closer to full non-linearly
    utilization = bins_remain_cap / np.sum(bins_remain_cap + 0.0001)
    utilization_score = np.power(utilization, 0.5) #Non Linear - sqrt root to give diminishing returns
    priorities += utilization_score

    # Fragmentation Penalty: Penalize bins with very small remaining capacity after placement (creating fragmentation)
    remaining_after_placement = bins_remain_cap - item
    fragmentation_threshold = item * 0.2  # Adjust as needed
    fragmentation_penalty = np.where((remaining_after_placement > 0) & (remaining_after_placement < fragmentation_threshold), -1, 0)
    priorities += fragmentation_penalty

    # Stochastic Element: Introduce some randomness to explore different options, scaling by number of bins
    random_noise = np.random.rand(n_bins) * 0.01 #Scale random noise
    priorities += random_noise

    # Bonus for large item placement if space exists
    large_cap_bonus = np.where(bins_remain_cap > item * 1.5, 0.5, 0) #incentivise larger bins if enough capacity exists.
    priorities += large_cap_bonus

    # Scale Priorities
    if np.max(priorities) > 0:
        priorities = priorities / np.max(priorities)

    return priorities
```
