```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes best-fit, adds stochasticity, penalizes fragmentation,
    and considers bin fill ratio with dynamic scaling."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item
        
        # Prioritize based on inverse waste (best fit) - stronger preference
        priorities[feasible_bins] = 10 / (waste + 0.0001)
        
        # Add stochasticity (exploration) - reduced amplitude
        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.05

        # Penalize almost full bins to prevent fragmentation - adaptive penalty
        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]
        almost_full = wasted_space_ratio < 0.1
        priorities[feasible_bins][almost_full] *= 0.3 # Reduce priority more aggressively

        # Reward larger bins if enough capacity exists - tweaked reward size
        large_cap_reward = np.where(bins_remain_cap[feasible_bins] > item*1.5, 0.2, 0) #Reduced threshold for large cap, decreased magnitude
        priorities[feasible_bins] += large_cap_reward

        # Dynamic scaling based on bin fill ratio
        fill_ratio = (bins_remain_cap[feasible_bins] - waste) / bins_remain_cap[feasible_bins]
        priorities[feasible_bins] *= (1 + fill_ratio * 0.5)  # Boost priority for bins that will be well-filled

        # Further penalty for bins that, after placing the item, would have capacity less than a threshold.
        small_remaining = bins_remain_cap[feasible_bins] - item < 0.1
        priorities[feasible_bins][small_remaining] = -np.inf #Make unfeasible

    else:
        priorities[:] = -np.inf

    return priorities
```
