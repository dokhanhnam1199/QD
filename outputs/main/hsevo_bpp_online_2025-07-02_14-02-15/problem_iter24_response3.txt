```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes best-fit with adaptive penalties and dynamic exploration.
    Emphasizes a balance between bin utilization and preventing extreme fragmentation,
    adjusting strategies based on item size and bin availability. Includes bin history.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item
        
        # Core: Prioritize best fit (minimize waste).  Weight it slightly less
        priorities[feasible_bins] = 0.8 / (waste + 1e-5)  # Tiny constant to avoid division by zero

        # Adaptive Stochasticity: Exploration based on feasibility and item size. Reduce exploration
        num_feasible = np.sum(feasible_bins)
        exploration_factor = min(0.1, 0.02 * num_feasible * item)  # Capped exploration
        priorities[feasible_bins] += np.random.rand(num_feasible) * exploration_factor

        # Fragmentation Penalty: Target almost-full bins. Aggressive penalty for small waste.
        waste_ratio = waste / bins_remain_cap[feasible_bins]
        almost_full = waste_ratio < 0.05 # Smaller waste threshold
        priorities[feasible_bins][almost_full] -= 0.2  # Stronger penalty

        # Reward for filling bins to a good level, based on item size
        fill_ratio = (bins_remain_cap[feasible_bins] - waste) / 1.0
        sweet_spot_lower = 0.7 - (item * 0.15) #Adaptive sweet spot
        sweet_spot_upper = 0.9 - (item * 0.05)

        sweet_spot = (fill_ratio > sweet_spot_lower) & (fill_ratio < sweet_spot_upper)
        priorities[feasible_bins][sweet_spot] += 0.4  #Reward sweet spot more

        # Bin History: Penalize recently used bins.  Only consider if it exists
        try:
            bin_usage_history  # Check if it exists
            normalized_usage = bin_usage_history[feasible_bins] / (np.max(bin_usage_history) + 1e-9) #Normalize
            priorities[feasible_bins] -= 0.1 * normalized_usage #Moderate penalty

        except NameError:
            pass # ignore if it does not exist

        # Bonus for larger bins that can fit the item comfortably
        large_bin_bonus = np.where(bins_remain_cap[feasible_bins] > (1.5 * item), 0.3, 0) #Add bonus for significantly larger bins.
        priorities[feasible_bins] += large_bin_bonus

    else:
        priorities[:] = -np.inf  # No feasible bins

    return priorities
```
