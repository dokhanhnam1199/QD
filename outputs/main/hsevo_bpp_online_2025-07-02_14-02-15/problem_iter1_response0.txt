```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give high priority to bins where item fits reasonably well
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask]  # Remaining capacity ratio after fit. Prefer bins where there is little wastage
    priorities[fit_mask] = 1 - priorities[fit_mask] # The smaller the waste, the higher the priority
    # For bins that cannot fit the item, assign a very low priority (negative) to discourage placement
    non_fit_mask = ~fit_mask
    priorities[non_fit_mask] = -1.0  # Discourage adding to bins where item doesn't fit
    
    return priorities
```
