```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit-Decreasing inspired component
    # Prioritize bins that can fit the item without too much waste.

    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1.0 / (bins_remain_cap[fit_mask] - item + 0.0001)  # Avoid division by zero. Smaller waste, higher priority

    # Next-Fit inspired component - incentivize bins close to full to finish them
    priorities += bins_remain_cap / np.sum(bins_remain_cap + 0.0001) #Added small value to prevent zero division.
    # Penalize bins with small amount of capacity for a small item - try to use bins with plenty of space first.
    small_cap_penalty = np.where(bins_remain_cap < item, -np.inf, 0)
    priorities += small_cap_penalty
    #Large item high reward - filling up space and avoiding future placement issues.
    large_cap_reward = np.where(bins_remain_cap > item*2,1,0) #incentivise large bins if enough capacity exists.
    priorities += large_cap_reward
    return priorities
```
