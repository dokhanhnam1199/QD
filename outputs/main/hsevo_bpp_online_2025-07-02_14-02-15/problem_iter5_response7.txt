```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculate bin priorities using waste, fullness, and fragmentation."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    n_bins = len(bins_remain_cap)

    # 1. Waste-based priority (FFD inspired)
    fit_mask = bins_remain_cap >= item
    waste = bins_remain_cap[fit_mask] - item
    relative_waste = waste / (item + 0.0001)
    priorities[fit_mask] += np.exp(-5 * relative_waste)

    # 2. Fullness priority (Next-Fit inspired)
    bin_fullness = bins_remain_cap / (np.max(bins_remain_cap) + 0.0001)
    priorities += np.power(1 - bin_fullness, 3)

    # 3. Fragmentation penalty
    fragmentation_penalty = np.where(bins_remain_cap < item, -1000, 0)
    priorities += fragmentation_penalty

    return priorities
```
