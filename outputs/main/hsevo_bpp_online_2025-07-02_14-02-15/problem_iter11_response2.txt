```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best-fit, adaptive stochasticity, dynamic fragmentation penalty, adaptive large item reward."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item
        
        # Best-fit prioritization
        priorities[feasible_bins] = 10 / (waste + 0.0001)
        
        # Adaptive stochasticity
        exploration_factor = max(0.01, 0.1 * np.mean(bins_remain_cap))
        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * exploration_factor
        
        # Dynamic fragmentation penalty
        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]
        almost_full = wasted_space_ratio < 0.1
        priorities[feasible_bins][almost_full] *= 0.2 # Stronger penalty
        
        # Adaptive large item reward
        large_cap_threshold = item * 1.25
        large_cap_reward = np.where(bins_remain_cap[feasible_bins] > large_cap_threshold, 0.5, 0)
        priorities[feasible_bins] += large_cap_reward
    else:
        priorities[:] = -np.inf

    return priorities
```
