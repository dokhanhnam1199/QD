```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Reward bins where the item fits.  Favor tighter fits,
            # and bins that are already somewhat full.
            slack = cap - item
            priorities[i] = 1.0 / (slack + 0.0001) + (1 - cap)  # Avoid div by zero and encourages partially full bins
            # If there is an exact fit prioritize more, if the cap equals item
            if abs(item - cap) < 1e-6:  # Use a small tolerance for float comparison
                priorities[i] += 10  # Very high priority for an exact match

        else:
            # Assign a negative priority if it doesn't fit
            priorities[i] = -1000  # Extremely low priority

    return priorities
```
