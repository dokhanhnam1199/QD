```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Inspired by the concept of spacetime curvature in General Relativity,
    we consider both the remaining capacity and the relative size of the item
    to the remaining capacity, but with a non-linear, gravity-inspired approach.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero by adding a small epsilon
    epsilon = 1e-9
    
    # Calculate the "gravitational potential" based on remaining capacity.
    # Larger capacity means weaker "gravity", thus lower potential.
    potential = -bins_remain_cap

    # Calculate the "gravitational force" exerted by the item on each bin.
    # A larger item exerts a stronger "force", especially on smaller bins.
    # Using the inverse square law (approximated) with exponential scaling
    # to create a highly non-linear relationship and emphasize bins
    # that are a slightly better fit. We scale by the bin capacity to give a smaller
    # penalty to large bins.
    
    force = (item / (bins_remain_cap + epsilon)**2) * np.exp(-(item-bins_remain_cap)/item)

    # Combine potential and force to get the priority. Bins with a
    # higher combined potential (lower absolute negative value) and a stronger force
    # (item fits well) are prioritized. Subtract force from the potential.
    # Clipping to avoid any numerical issues due to small remaining cap.
    bins_remain_cap_clipped = np.clip(bins_remain_cap, a_min=epsilon, a_max=None)
    
    
    priority = (bins_remain_cap_clipped - item)* np.exp(-np.abs(bins_remain_cap_clipped-item)/(item+epsilon)) 
    #We try prioritizing the bins, where residual_cap is closer to the item size
    # and the remaining capacity is close to the item size. This encourages bins to not have
    # extremely small or extremely large residual capacities.
    #Another term to slightly discourage bins that don't fit.
    #force = force - (item - bins_remain_cap)*(item > bins_remain_cap)

    return priority
```
