```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins where the item fits (remaining capacity >= item size).
    Among those bins, it prefers bins with remaining capacity closest to the item size (best fit).
    Bins where the item does not fit are given a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Identify bins where the item fits
    feasible_bins = bins_remain_cap >= item
    
    if np.any(feasible_bins):
        # Calculate the waste (remaining capacity after adding the item) for feasible bins
        waste = bins_remain_cap[feasible_bins] - item
        
        # Assign priorities based on the inverse of the waste (smaller waste -> higher priority)
        # We use 1 / (waste + small_constant) to avoid division by zero and to ensure smaller waste gets higher priority
        small_constant = 0.0001  # Small constant to avoid division by zero
        priorities[feasible_bins] = 1 / (waste + small_constant)

    #Give zero priority if no bin fits the item
    
    return priorities
```
