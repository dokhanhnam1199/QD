```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, fragmentation penalty, and fill ratio reward."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fit_mask = bins_remain_cap >= item
    
    if not np.any(fit_mask):
        return priorities - np.inf
    
    waste = bins_remain_cap[fit_mask] - item
    
    # Best-fit prioritization
    priorities[fit_mask] = 1.0 / (waste + 0.0001)
    
    # Fragmentation penalty
    wasted_space_ratio = waste / bins_remain_cap[fit_mask]
    nearly_full = wasted_space_ratio < 0.1
    priorities[fit_mask][nearly_full] -= 0.5
    
    # Fill ratio reward
    fill_ratio = item / bins_remain_cap[fit_mask]
    good_fill = (fill_ratio > 0.7) & (fill_ratio <= 1.0)
    priorities[fit_mask][good_fill] += 0.5
    
    return priorities
```
