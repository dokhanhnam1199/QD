```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_usage_history: np.ndarray = None) -> np.ndarray:
    """Prioritizes best-fit with adaptive penalties and dynamic exploration.
    Emphasizes a balance between bin utilization and preventing extreme fragmentation,
    adjusting strategies based on item size and bin availability. Includes bin history.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item
        
        # Core: Prioritize best fit (minimize waste).
        priorities[feasible_bins] = 1 / (waste + 1e-6)  # Tiny constant to avoid division by zero

        # Adaptive Stochasticity: Exploration based on feasibility and item size.  Reduced scale to avoid over-exploration.
        num_feasible = np.sum(feasible_bins)
        exploration_factor = 0.02 * min(1, num_feasible * item) # Clamped exploration and scaled by both item and num_feasible
        priorities[feasible_bins] += np.random.rand(num_feasible) * exploration_factor

        # Fragmentation Penalty: Targetting bins which are close to full AND small
        almost_full_threshold = 0.1
        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]
        almost_full = (wasted_space_ratio < almost_full_threshold) & (bins_remain_cap[feasible_bins] < 0.5)  # More targeted. small and almost full
        priorities[feasible_bins][almost_full] *= 0.2 # Significant penalty for using almost-full bins.

        # Sweet Spot Incentive: Encourage utilization around 70-90%. Simplified and more robust.
        utilization_lower = 0.7
        utilization_upper = 0.9
        utilization = (bins_remain_cap[feasible_bins] - waste)  # No need to divide by bin size if bin size == 1
        sweet_spot = (utilization > utilization_lower) & (utilization < utilization_upper)
        priorities[feasible_bins][sweet_spot] += 0.4  # Flat reward

        # Bin History: Penalize bins that have been filled recently.
        if bin_usage_history is not None:
            usage_penalty = bin_usage_history[feasible_bins] * 0.05 #Scaling factor can be tuned.
            priorities[feasible_bins] -= usage_penalty #Penalize using this bin more.
        
    else:
        priorities[:] = -np.inf  # No feasible bins

    return priorities
```
