```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Aims to balance bin usage, prioritizing bins that can fit the item
    with minimal wasted space, but also penalizing bins that are almost full
    to avoid creating too many nearly-full bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    for i, capacity in enumerate(bins_remain_cap):
        if capacity >= item:
            # Base priority: how much of the bin the item will fill
            fill_ratio = item / capacity
            priorities[i] = fill_ratio

            # Reward bins with less wasted space AFTER packing the item. Higher wasted_space_ratio -> lower priority.
            wasted_space_ratio = (capacity - item) / capacity
            priorities[i] += (1 - wasted_space_ratio) * 0.5

            # Slight penalty to almost full bins to avoid excessive fragmentation
            if wasted_space_ratio < 0.1:
               priorities[i] -= 0.2  # Penalize heavily if only a little wasted space is left to discourage "nearly full" bins
            elif wasted_space_ratio < 0.3:
               priorities[i] -= 0.1
    
        else:
            priorities[i] = -np.inf  # Cannot fit, so lowest priority

    return priorities
```
