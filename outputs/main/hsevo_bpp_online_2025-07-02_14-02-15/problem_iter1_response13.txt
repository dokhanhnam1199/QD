```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can accommodate the item with minimal wasted space
    while also discouraging placements that would leave a very small amount of space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Identify bins that can accommodate the item
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # If no bin can accommodate the item, prioritize the fullest bin based on remaining capacity,
        # to potentially trigger creating new bins quickly instead of fragmentation.
        priorities = bins_remain_cap
        return priorities

    # Calculate wasted space if the item were added to each bin
    wasted_space = bins_remain_cap - item

    # Reward bins with smaller wasted space (larger negative value after transformation)
    # Only consider eligible bins
    priorities[eligible_bins] = -wasted_space[eligible_bins]

    # Discourage placements that leave very little space
    # If remaining space is less than 10% of bin capacity, penalize it more. Empirically chosen 10%.
    small_space_penalty = (wasted_space[eligible_bins] < 0.1 * np.max(bins_remain_cap))
    priorities[eligible_bins][small_space_penalty] -= 10 # A relatively large penalty.


    # If there are still ties or all priorities are negative,
    # favor bins with larger remaining capacity (modified original heuristic, but adapted)
    if np.all(priorities <= 0) or np.all(priorities[eligible_bins] == priorities[eligible_bins][0]):

      priorities[eligible_bins] += bins_remain_cap[eligible_bins] * 0.0001 # tiny nudge based on capacity. Prevents edge cases.


    return priorities
```
