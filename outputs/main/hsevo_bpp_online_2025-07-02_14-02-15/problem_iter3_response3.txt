```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-6 # Small value to avoid division by zero and for numerical stability

    # 1. Feasibility Mask: Disqualify bins that can't fit the item.
    fit_mask = bins_remain_cap >= item

    # If no bin can fit the item, return equal priorities to select one randomly (avoid errors).
    if not np.any(fit_mask):
        return np.ones_like(bins_remain_cap)

    # 2. Relative Waste Penalty (if it fits):  Waste relative to item size. Larger item, larger penalty for the same absolute waste.
    waste = bins_remain_cap[fit_mask] - item
    relative_waste = waste / (item + epsilon) #Waste relative to item size

    # Non-linear Penalty:  Apply a non-linear transformation to the relative waste.
    waste_penalty = -np.power(relative_waste, 2) #Quadratic penalty, penalizes larger waste more
    priorities[fit_mask] += waste_penalty

    # 3. Remaining Capacity Reward: Encourage filling bins that are already relatively full.
    # Sigmoid function to scale the reward. Bins nearly full get a high reward.
    fullness = (bins_remain_cap[fit_mask] / (np.max(bins_remain_cap)+epsilon))
    fullness_reward = 1.0 / (1.0 + np.exp(-10 * (fullness - 0.7)))  # Sigmoid centered at 0.7, steepness controlled by 10
    priorities[fit_mask] += fullness_reward

    # 4. Fragmentation Penalty: Penalize bins that, after placing the item, would leave a small remaining capacity.
    # This encourages using bins that will be reasonably full.
    remaining_capacity = bins_remain_cap[fit_mask] - item
    fragmentation_threshold = item / 2.0 # Penalize if remaining capacity is less than half the item size
    fragmentation_penalty = np.where(remaining_capacity < fragmentation_threshold, -1, 0) #High penalty for fragmentation

    priorities[fit_mask] += fragmentation_penalty

    # 5. Stochasticity (Exploration): Add some noise to the priorities to explore different options.
    # Only apply noise to bins that can fit the item
    noise = np.random.normal(0, 0.01, size=np.sum(fit_mask))  # Small Gaussian noise
    priorities[fit_mask] += noise
    # 6. Large Capacity Incentive: if there are very large bins give them a bonus to encourage their use.
    large_bin_threshold = 2*item #Only if more than double capacity
    large_bin_bonus = np.where(bins_remain_cap[fit_mask] > large_bin_threshold, 0.5, 0)

    priorities[fit_mask] += large_bin_bonus

    return priorities
```
