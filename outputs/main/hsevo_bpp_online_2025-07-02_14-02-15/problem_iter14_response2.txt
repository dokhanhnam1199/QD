```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes best-fit with adaptive penalties, dynamic exploration based on item size."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item
        
        # Core: Prioritize best fit
        priorities[feasible_bins] = 10 / (waste + 0.00001)

        # Adaptive Stochasticity: Exploration decreases with item size
        num_feasible = np.sum(feasible_bins)
        exploration_factor = min(0.1, 0.01 * num_feasible * (1 - item))
        priorities[feasible_bins] += np.random.rand(num_feasible) * exploration_factor

        # Fragmentation Penalty: Dynamically scaled.
        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]
        almost_full = wasted_space_ratio < (0.05 + 0.02 * item)
        priorities[feasible_bins][almost_full] *= 0.1

    else:
        priorities[:] = -np.inf

    return priorities
```
