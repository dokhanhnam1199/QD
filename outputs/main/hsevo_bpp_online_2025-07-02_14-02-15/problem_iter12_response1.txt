```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes best-fit with adaptive penalties and dynamic exploration,
    enhanced with bin-aware and item-aware adjustments. Aims for a more robust
    and efficient bin packing strategy."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item
        
        # Core: Prioritize best fit (minimize waste).  More aggressive
        priorities[feasible_bins] = 1 / (waste + 0.00001)  # Tiny constant to avoid division by zero

        # Adaptive Stochasticity: Less stochasticity if bins are scarce.
        num_feasible = np.sum(feasible_bins)
        exploration_factor = min(0.1, 0.01 * num_feasible)  # Reduced exploration, caps at 0.1
        priorities[feasible_bins] += np.random.rand(num_feasible) * exploration_factor

        # Fragmentation Penalty:  Stronger and more targeted.
        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]
        almost_full = wasted_space_ratio < 0.05 #More aggressive
        priorities[feasible_bins][almost_full] *= 0.1  # Significant penalty for using almost-full bins. Stronger penalty

        # Rewarding larger bins for smaller items - Less aggressive
        small_item_large_bin_reward = np.where(bins_remain_cap[feasible_bins] > 1.5 * item, 0.2, 0) #Reduced the reward.
        priorities[feasible_bins] += small_item_large_bin_reward

        # Dynamic "Sweet Spot" Incentive: Adapt the range based on item size.
        # Aim is to encourage utilization in a range that avoids both extreme fragmentation
        # and under-utilization.  Smaller items should aim for higher utilization.
        sweet_spot_lower = 0.6 - (item * 0.15) #Dynamic Lower Bound - decreased the impact of item size
        sweet_spot_upper = 0.8 - (item * 0.05) #Dynamic Upper Bound - decreased the impact of item size, less aggressively.

        utilization = (bins_remain_cap[feasible_bins] - waste) / 1.0  # Assuming bin size is 1
        sweet_spot = (utilization > sweet_spot_lower) & (utilization < sweet_spot_upper)
        priorities[feasible_bins][sweet_spot] += 0.3 #Reduced the reward

        # Bin-Aware Capacity Reward: Give a slight preference to bins with larger remaining capacity if best-fit difference isn't large
        capacity_advantage = bins_remain_cap[feasible_bins] / np.max(bins_remain_cap[feasible_bins])
        priorities[feasible_bins] += 0.05 * capacity_advantage # Reduced to 0.05.

    else:
        priorities[:] = -np.inf  # No feasible bins

    return priorities
```
