```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by the dance of the planets and the striving for balance,
    this function prioritizes bins that are neither too full nor too empty
    after the item is added. A delicate equilibrium is sought, favoring
    bins where the remaining capacity is a moderate fraction of the total.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    remaining_after_fit = bins_remain_cap - item
    valid_bins = remaining_after_fit >= 0

    priorities = np.zeros_like(bins_remain_cap)

    # Assign a base priority based on how well the item fits,
    # relative to the bin's initial capacity. A value close to 0.5 is ideal.
    fit_ratios = (bins_remain_cap - item) / bins_remain_cap
    priorities[valid_bins] = np.exp(-((fit_ratios[valid_bins] - 0.5) ** 2) / 0.08)  # Gaussian-like function

    # Penalize near-empty bins strongly.
    near_empty = remaining_after_fit < 0.1 * bins_remain_cap.max()
    priorities[near_empty & valid_bins] *= 0.5  # Reduce priority, but don't eliminate

    # Bins that cannot fit at all get zero priority, of course.
    priorities[~valid_bins] = 0

    return priorities
```
