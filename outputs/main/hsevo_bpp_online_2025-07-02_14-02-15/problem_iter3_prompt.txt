{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First-Fit-Decreasing inspired component\n    # Prioritize bins that can fit the item without too much waste.\n\n    fit_mask = bins_remain_cap >= item\n    priorities[fit_mask] += 1.0 / (bins_remain_cap[fit_mask] - item + 0.0001)  # Avoid division by zero. Smaller waste, higher priority\n\n    # Next-Fit inspired component - incentivize bins close to full to finish them\n    priorities += bins_remain_cap / np.sum(bins_remain_cap + 0.0001) #Added small value to prevent zero division.\n    # Penalize bins with small amount of capacity for a small item - try to use bins with plenty of space first.\n    small_cap_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n    priorities += small_cap_penalty\n    #Large item high reward - filling up space and avoiding future placement issues.\n    large_cap_reward = np.where(bins_remain_cap > item*2,1,0) #incentivise large bins if enough capacity exists.\n    priorities += large_cap_reward\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's refine \"Current self-reflection\" to design better heuristics, keeping in mind that we want to create a useful guide and avoid ineffective points.\n\nHere's a structured redefinition:\n\n*   **Keywords:** Non-linearity, stochasticity, fragmentation penalty, relative waste, array operations, multi-factor integration.\n\n*   **Advice:** Design heuristics that integrate diverse factors through non-linear functions. Use stochastic elements for exploration while penalizing fragmented solutions. Evaluate waste relative to item size. Utilize efficient array operations for speed.\n\n*   **Avoid:** Generic statements without concrete implementation strategies; vague descriptions of \"exploration\" without specifying the stochastic method.\n\n*   **Explanation:** Effective heuristics require a blend of diverse optimization techniques. Integrating non-linear functions allows to model complex relationships. Stochasticity balances exploration and exploitation. Relative waste is a more accurate measure than absolute waste. Utilizing array operations provides for efficient computation.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}