{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes best-fit with adaptive penalties and dynamic exploration.\n    Emphasizes a balance between bin utilization and preventing extreme fragmentation,\n    adjusting strategies based on item size and bin availability. Includes bin history.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n\n    if np.any(feasible_bins):\n        waste = bins_remain_cap[feasible_bins] - item\n        \n        # Core: Prioritize best fit (minimize waste).  Weight it slightly less\n        priorities[feasible_bins] = 0.8 / (waste + 1e-5)  # Tiny constant to avoid division by zero\n\n        # Adaptive Stochasticity: Exploration based on feasibility and item size. Reduce exploration\n        num_feasible = np.sum(feasible_bins)\n        exploration_factor = min(0.1, 0.02 * num_feasible * item)  # Capped exploration\n        priorities[feasible_bins] += np.random.rand(num_feasible) * exploration_factor\n\n        # Fragmentation Penalty: Target almost-full bins. Aggressive penalty for small waste.\n        waste_ratio = waste / bins_remain_cap[feasible_bins]\n        almost_full = waste_ratio < 0.05 # Smaller waste threshold\n        priorities[feasible_bins][almost_full] -= 0.2  # Stronger penalty\n\n        # Reward for filling bins to a good level, based on item size\n        fill_ratio = (bins_remain_cap[feasible_bins] - waste) / 1.0\n        sweet_spot_lower = 0.7 - (item * 0.15) #Adaptive sweet spot\n        sweet_spot_upper = 0.9 - (item * 0.05)\n\n        sweet_spot = (fill_ratio > sweet_spot_lower) & (fill_ratio < sweet_spot_upper)\n        priorities[feasible_bins][sweet_spot] += 0.4  #Reward sweet spot more\n\n        # Bin History: Penalize recently used bins.  Only consider if it exists\n        try:\n            bin_usage_history  # Check if it exists\n            normalized_usage = bin_usage_history[feasible_bins] / (np.max(bin_usage_history) + 1e-9) #Normalize\n            priorities[feasible_bins] -= 0.1 * normalized_usage #Moderate penalty\n\n        except NameError:\n            pass # ignore if it does not exist\n\n        # Bonus for larger bins that can fit the item comfortably\n        large_bin_bonus = np.where(bins_remain_cap[feasible_bins] > (1.5 * item), 0.3, 0) #Add bonus for significantly larger bins.\n        priorities[feasible_bins] += large_bin_bonus\n\n    else:\n        priorities[:] = -np.inf  # No feasible bins\n\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}