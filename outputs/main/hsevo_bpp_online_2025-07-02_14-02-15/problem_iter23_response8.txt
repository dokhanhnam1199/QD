```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best-fit, adaptive exploration, item-aware fragmentation,
    and sweet spot incentive. Balance exploration and exploitation.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item

        # Best-fit prioritization
        priorities[feasible_bins] = 1 / (waste + 1e-5)

        # Adaptive Exploration: Item-dependent scale.
        num_feasible = np.sum(feasible_bins)
        exploration_scale = min(0.2, 0.05 * item * num_feasible)
        priorities[feasible_bins] += np.random.rand(num_feasible) * exploration_scale

        # Sweet Spot Incentive: Dynamic, item-related range.
        sweet_spot_lower = 0.6 - (item * 0.2)
        sweet_spot_upper = 0.9 - (item * 0.1)
        utilization = (bins_remain_cap[feasible_bins] - waste) / 1.0
        sweet_spot = (utilization > sweet_spot_lower) & (utilization < sweet_spot_upper)
        priorities[feasible_bins][sweet_spot] += 0.4

        # Item-aware Fragmentation Penalty: Adaptive scaling.
        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]
        almost_full = wasted_space_ratio < 0.08
        penalty_factor = 0.3 + 0.2 * item # Item aware
        priorities[feasible_bins][almost_full] *= max(0, 1 - penalty_factor)

    else:
        priorities[:] = -np.inf

    return priorities
```
