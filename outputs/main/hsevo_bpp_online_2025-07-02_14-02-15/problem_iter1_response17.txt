```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Utilizes a heuristic inspired by potential energy wells, favoring bins
    that can almost perfectly fit the item while also penalizing near misses
    that would lead to significant wasted space.  Also includes a 'quantum tunneling'
    element - a small probability of placing an item in a nearly-full bin,
    to encourage exploration and escape local optima.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Near Fit (Potential Well): Prioritize bins where the remaining capacity
    # is slightly larger than the item.  The closer the fit, the higher the priority.
    fit_difference = bins_remain_cap - item
    near_fit_mask = fit_difference >= 0
    priorities[near_fit_mask] = np.exp(-np.abs(fit_difference[near_fit_mask]) / (item + 1e-6)) # Add small epsilon to avoid division by zero. exp handles negative values.

    # 2. Penalize Large Waste: Discourage placements that leave a significant
    # portion of the bin unused.  This prevents premature filling and improves
    # overall bin utilization.

    waste_penalty = np.where(fit_difference > 0, np.exp(-(fit_difference / np.max(bins_remain_cap))), 0)  #penalty related to relative waste size

    priorities = priorities - waste_penalty # Subtract the penalty. Avoid negative scores using the correct scale.


    # 3. "Quantum Tunneling":  Occasionally place an item in a bin that is *almost*
    # full. This adds a stochastic element to help the algorithm escape local optima.
    # The chance of "tunneling" should decrease as the total available space increases.
    tunneling_potential = np.exp( - (bins_remain_cap / (item + 1e-6))**2 ) # Avoid division by zero
    priorities = priorities + 0.01 * tunneling_potential * np.random.rand(len(bins_remain_cap))
    # The random component ensures different results even if the tunneling potential is the same across bins.

    return priorities
```
