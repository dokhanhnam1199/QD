```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_usage_history: np.ndarray = None) -> np.ndarray:
    """Prioritizes best-fit with adaptive penalties and dynamic exploration.
    Emphasizes a balance between bin utilization and preventing extreme fragmentation,
    adjusting strategies based on item size and bin availability. Includes bin history.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item
        
        # Core: Prioritize best fit (minimize waste).  Slightly more aggressive
        priorities[feasible_bins] = 1 / (waste + 1e-6)**0.7 # Reduced exponent

        # Adaptive Stochasticity: Exploration based on feasibility and item size. More targeted
        num_feasible = np.sum(feasible_bins)
        exploration_factor = 0.02 * min(0.5, item * num_feasible**0.5) # Reduced base exploration
        priorities[feasible_bins] += np.random.rand(num_feasible) * exploration_factor

        # Fragmentation Penalty: Stronger and more nuanced. Target almost-full bins.
        almost_full_threshold = 0.05  # Slightly tighter
        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]
        almost_full = wasted_space_ratio < almost_full_threshold
        priorities[feasible_bins][almost_full] *= 0.2  # Significant penalty

        # Dynamic "Sweet Spot" Incentive: Adapt the range based on item size.
        sweet_spot_lower = 0.6 - (item * 0.1)
        sweet_spot_upper = 0.9 - (item * 0.05)

        utilization = (bins_remain_cap[feasible_bins] - waste) / 1.0  # Assuming bin size is 1
        sweet_spot = (utilization > sweet_spot_lower) & (utilization < sweet_spot_upper)
        priorities[feasible_bins][sweet_spot] += 0.4

        # Bin History: Penalize bins that have been filled recently more aggressively.
        if bin_usage_history is not None: # Require the argument to be passed in
            usage_penalty = bin_usage_history[feasible_bins] * 0.1  # Adjust scaling
            priorities[feasible_bins] -= usage_penalty #Penalize using this bin more.

    else:
        priorities[:] = -np.inf  # No feasible bins

    return priorities
```
