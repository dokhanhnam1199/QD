```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins, balancing waste, fill level, and stochasticity."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        return priorities

    waste = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] = np.where(waste > 0, 1.0 / (waste + 1e-8), 1e8)

    fill_ratios = (1 - bins_remain_cap[valid_bins] / bins_remain_cap[valid_bins].max())
    priorities[valid_bins] += fill_ratios

    #Stochastic Exploration: adds a scaled random number to valid bins.
    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.1

    # Fragmentation Penalty: Reduce priority if bin is nearly full.
    wasted_space_ratio = waste / bins_remain_cap[valid_bins]
    nearly_full = wasted_space_ratio < 0.1
    priorities[valid_bins][nearly_full] -= 0.5  # Penalize nearly full bins

    return priorities
```
