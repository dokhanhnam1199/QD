```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes best-fit, adaptive exploration and dynamic sweet spot."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item
        priorities[feasible_bins] = 1 / (waste + 0.0001)

        exploration_factor = 0.1 * (1 - item)
        num_feasible = np.sum(feasible_bins)
        priorities[feasible_bins] += np.random.rand(num_feasible) * exploration_factor

        remaining_capacity_ratio = waste / 1.0
        almost_full = remaining_capacity_ratio < 0.1
        priorities[feasible_bins][almost_full] *= 0.5

        sweet_spot_lower = 0.6 - (item * 0.15)
        sweet_spot_upper = 0.85 - (item * 0.05)
        utilization = (bins_remain_cap[feasible_bins] - waste) / 1.0
        sweet_spot = (utilization > sweet_spot_lower) & (utilization < sweet_spot_upper)
        priorities[feasible_bins][sweet_spot] += 0.3

    else:
        priorities[:] = -np.inf

    return priorities
```
