```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Avoid division by zero and prioritize feasible bins
    feasible_bins = bins_remain_cap >= item
    if not np.any(feasible_bins):
        # If no bin can accommodate the item, assign uniform low priority
        return priorities - 1e9 # Assign lowest priority to all bins

    # Prioritize bins that can fit the item, others gets lowest score.
    priorities[~feasible_bins] = -1e9  # Very low priority for infeasible bins
    
    # Heuristic: Prioritize bins with remaining capacity closest to item size (First Fit Decreasing principle).
    # Avoids creating extremely fragmented bins while still efficiently packing.

    capacity_difference = bins_remain_cap[feasible_bins] - item
    priorities[feasible_bins] = -np.abs(capacity_difference) # Negative absolute difference, so smaller difference yields higher priority

    #Boost score to encourage near full packing and prevent under packing.
    near_full = (bins_remain_cap[feasible_bins] - item) < 0.1
    priorities[feasible_bins][near_full] += 10 #Significant boost.

    # Apply a slight penalty for bins with very large remaining capacity. Helps to avoid over-allocating to already large bins if other options are good.
    large_bins = bins_remain_cap[feasible_bins] > 0.75
    priorities[feasible_bins][large_bins] -= 0.5
    
    return priorities
```
