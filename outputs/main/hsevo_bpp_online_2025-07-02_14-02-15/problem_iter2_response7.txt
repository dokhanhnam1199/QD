```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fit, waste, and fragmentation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        # Base priority: inverse of remaining capacity (smaller is better)
        priorities[valid_bins] = 1 / bins_remain_cap[valid_bins]

        # Perfect fit bonus with exponential decay
        capacity_diff = bins_remain_cap[valid_bins] - item
        perfect_fit_bonus = np.exp(-10 * capacity_diff)
        priorities[valid_bins] += perfect_fit_bonus

        # Fragmentation penalty: penalize bins that become nearly full
        wasted_space = bins_remain_cap[valid_bins] - item
        almost_full = wasted_space < 0.1 * item
        priorities[valid_bins][almost_full] -= 0.5  # Significant penalty
    else:
        priorities = np.full_like(bins_remain_cap, -1e9) # Very low priority

    return priorities
```
