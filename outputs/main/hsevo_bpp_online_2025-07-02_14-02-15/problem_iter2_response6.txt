```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes near-perfect fits, adds stochasticity, and penalizes fragmentation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item
        
        # Prioritize based on inverse waste (best fit)
        priorities[feasible_bins] = 1 / (waste + 0.0001)
        
        # Add stochasticity (exploration)
        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.1

        #Penalize almost full bins to prevent fragmentation
        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]
        almost_full = wasted_space_ratio < 0.1
        priorities[feasible_bins][almost_full] *= 0.5 # Reduce priority of almost full bins
        

    else:
        priorities[:] = -np.inf

    return priorities
```
