```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes best-fit with adaptive elements, focusing on simplicity and efficiency.
    Emphasizes a balance between bin utilization and preventing fragmentation.
    Includes bin history and adaptive exploration.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item
        
        # Core: Prioritize best fit (minimize waste).
        priorities[feasible_bins] = 1 / (waste + 1e-6)  # Tiny constant to avoid division by zero

        # Adaptive Exploration: Reduced complexity, focusing on item size and number of feasible bins.
        num_feasible = np.sum(feasible_bins)
        exploration_factor = 0.1 * item * np.sqrt(num_feasible) #Simplified exploration
        priorities[feasible_bins] += np.random.rand(num_feasible) * exploration_factor

        # Fragmentation Penalty: Simplified, focusing on bins that are very close to full.
        almost_full_threshold = 0.1 #Tuneable parameter for what is considered almost full.
        wasted_space_ratio = waste / item #Compare waste to item size
        almost_full = wasted_space_ratio < almost_full_threshold
        priorities[feasible_bins][almost_full] *= 0.5 #Reduce priority of almost full bins

        #Sweet Spot Reward: Incentive for bins filled between 70-95% after insertion
        sweet_spot_lower = 0.7
        sweet_spot_upper = 0.95
        new_fill = (bins_remain_cap[feasible_bins] - waste)
        sweet_spot_bin = (new_fill >= sweet_spot_lower) & (new_fill <= sweet_spot_upper)
        priorities[feasible_bins][sweet_spot_bin] += 0.3

        #Bin usage history penalty. Requires external bin_usage_history.
        try:
            bin_usage_history
            usage_penalty = bin_usage_history[feasible_bins] * 0.02 #Simple penalty
            priorities[feasible_bins] -= usage_penalty
        except NameError:
            pass

    else:
        priorities[:] = -np.inf  # No feasible bins

    return priorities
```
