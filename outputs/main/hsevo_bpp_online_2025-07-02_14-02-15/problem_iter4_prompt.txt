{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines perfect fit bonus, relative waste, and exploration.\n    Penalizes infeasible bins.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get -inf priority\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf\n\n    # Compute remaining space for feasible bins\n    feasible_bins = bins_remain_cap >= item\n    remaining_space = bins_remain_cap[feasible_bins] - item\n\n    # Perfect fit bonus using exponential function\n    perfect_fit_bonus = np.exp(-10 * remaining_space) if remaining_space.size > 0 else np.array([])\n    priorities[feasible_bins] += perfect_fit_bonus\n\n    # Relative waste penalty\n    if feasible_bins.any():\n        waste_ratio = remaining_space / bins_remain_cap[feasible_bins]\n        priorities[feasible_bins] -= waste_ratio\n\n    # Exploration bonus\n    exploration_bonus = np.random.rand(len(bins_remain_cap)) * 0.01\n    priorities += exploration_bonus\n\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}