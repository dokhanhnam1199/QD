```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, adaptive exploration, and dynamic sweet spot."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item
        priorities[feasible_bins] = 1 / (waste + 1e-6)

        num_feasible = np.sum(feasible_bins)
        exploration_factor = 0.02 * min(1, num_feasible * item)
        priorities[feasible_bins] += np.random.rand(num_feasible) * exploration_factor

        utilization_lower = 0.7 - (0.1 * item)
        utilization_upper = 0.9 - (0.05 * item)
        utilization = bins_remain_cap[feasible_bins] - waste
        sweet_spot = (utilization > utilization_lower) & (utilization < utilization_upper)
        priorities[feasible_bins][sweet_spot] += 0.4

        try:
            bin_usage_history
            usage_penalty = bin_usage_history[feasible_bins] * 0.05
            priorities[feasible_bins] -= usage_penalty
        except NameError:
            pass
    else:
        priorities[:] = -np.inf

    return priorities
```
