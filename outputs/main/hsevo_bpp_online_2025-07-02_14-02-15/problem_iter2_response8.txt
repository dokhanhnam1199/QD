```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines fill ratio and waste minimization with a snug fit reward.
    Uses array operations for efficiency.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Infeasible bins get -inf priority
    feasible = bins_remain_cap >= item
    priorities[~feasible] = -np.inf
    
    # Fill ratio for feasible bins
    fill_ratio = item / bins_remain_cap[feasible]
    priorities[feasible] += fill_ratio

    # Waste penalty: penalize bins with small remaining capacity
    remaining_cap = bins_remain_cap[feasible] - item
    waste_penalty = np.exp(-5 * remaining_cap) # Smaller remainders get large penalty
    priorities[feasible] -= waste_penalty

    # Snug fit reward
    snug_fit_reward = np.exp(-2 * np.abs(remaining_cap - item*0.2)) # Peak around 20% of item size
    priorities[feasible] += snug_fit_reward

    # Additional bonus for perfect fits.
    perfect_fit = np.abs(remaining_cap) < 1e-6
    priorities[feasible][perfect_fit] += 5 # Boost exact fits
    
    return priorities
```
