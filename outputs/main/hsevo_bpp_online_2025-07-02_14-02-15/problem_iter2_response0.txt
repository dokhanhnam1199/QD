```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid priority: Gaussian fit + waste, penalize near-full."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item
    
    # Gaussian-like fit priority
    ideal_ratio = 0.8
    scale = 0.2
    ratios = np.where(can_fit, item / bins_remain_cap, 0)
    gaussian_priorities = np.exp(-((ratios - ideal_ratio)**2) / (2 * scale**2))
    priorities = np.where(can_fit, gaussian_priorities, -np.inf)
    
    # Waste penalty and near-full penalty
    wasted_space_ratio = (bins_remain_cap - item) / bins_remain_cap
    priorities = np.where(can_fit, priorities - wasted_space_ratio * 0.3, priorities)

    near_full = (wasted_space_ratio > 0) & (wasted_space_ratio < 0.1)
    priorities = np.where(near_full & can_fit, priorities - 0.5, priorities) #stronger penalty than v0
    
    return priorities
```
