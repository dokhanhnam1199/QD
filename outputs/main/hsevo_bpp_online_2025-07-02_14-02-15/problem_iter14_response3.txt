```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes best-fit with adaptive stochasticity & dynamic fragmentation control."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item

        # Best-fit prioritization
        priorities[feasible_bins] = 1 / (waste + 0.00001)

        # Adaptive Stochasticity
        num_feasible = np.sum(feasible_bins)
        exploration_factor = min(0.2, 0.02 * num_feasible)
        priorities[feasible_bins] += np.random.rand(num_feasible) * exploration_factor

        # Fragmentation penalty (stronger for larger items)
        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]
        almost_full = wasted_space_ratio < 0.05
        penalty_factor = 0.2 + item * 0.1 #item size adjusts the penalty dynamically.
        priorities[feasible_bins][almost_full] *= penalty_factor
        priorities[feasible_bins][almost_full] = np.clip(priorities[feasible_bins][almost_full], 0, 1) #prevent overflow

        # Rewarding larger bins for smaller items
        if item < 0.3: #Only triggers when dealing with small items
          large_bin_reward = bins_remain_cap[feasible_bins] > (1.0 - item) #is it approaching full bin?
          priorities[feasible_bins][large_bin_reward] += 0.3

        # Dynamic "Sweet Spot" Incentive:  Simplified, based on item size.
        sweet_spot_lower = 0.6 - (item * 0.15)  #Dynamic Lower Bound - adjusted scale
        sweet_spot_upper = 0.9 - (item * 0.1) #Dynamic Upper Bound - decreased upper bound

        utilization = (bins_remain_cap[feasible_bins] - waste) / 1.0  # Assuming bin size is 1
        sweet_spot = (utilization > sweet_spot_lower) & (utilization < sweet_spot_upper)
        priorities[feasible_bins][sweet_spot] += 0.3

    else:
        priorities[:] = -np.inf

    return priorities
```
