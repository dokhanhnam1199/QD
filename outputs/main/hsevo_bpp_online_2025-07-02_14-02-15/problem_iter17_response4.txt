```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, adaptive stochasticity, item-aware fragmentation penalty, and large bin reward."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item

        # Best-fit prioritization with small constant to avoid division by zero
        priorities[feasible_bins] = 1 / (waste + 1e-6)

        # Adaptive stochasticity: scaled by remaining capacity
        stochasticity_scale = 0.1 * (1 - np.mean(bins_remain_cap[feasible_bins]) if len(bins_remain_cap[feasible_bins]) > 0 else 0)
        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * stochasticity_scale

        # Item-aware fragmentation penalty
        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]
        almost_full = wasted_space_ratio < 0.1
        penalty = 0.3 + 0.2 * item  # Larger items, higher penalty
        priorities[feasible_bins][almost_full] *= max(0, 1 - penalty)  # Ensure not negative

        # Reward for large bins relative to the item size
        large_cap_reward = np.where(bins_remain_cap[feasible_bins] > item * 2, 0.25, 0)
        priorities[feasible_bins] += large_cap_reward
    else:
        priorities[:] = -np.inf

    return priorities
```
