```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Inspired by gravitational force and potential energy principles. Bins with remaining capacity closer to item size will have higher priority,
    but we also penalize bins that are too small. We also add a small bonus for bins which are closer to half the size of the incoming object.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Ensure we're working with a numpy array to leverage vectorization
    bins_remain_cap = np.array(bins_remain_cap)

    # Initialize priorities to a base level (e.g., 0)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Penalize bins that are smaller than the item
    too_small_mask = bins_remain_cap < item
    priorities[too_small_mask] = -np.inf  # Strongly discourage placement

    # Calculate the "gravitational force" component:  closer the sizes, higher the force.  In this context
    # 'force' means higher priority. Apply only where the item can fit.
    can_fit_mask = ~too_small_mask
    size_diff = np.abs(bins_remain_cap[can_fit_mask] - item)  # Difference in remaining capacity
    priorities[can_fit_mask] = np.exp(-size_diff)  # Exponential decay, giving higher priority to closer sizes

    #Bonus for capacity nearing 2*item
    half_item = 2 * item
    close_to_half_item_mask = np.logical_and(bins_remain_cap > item, bins_remain_cap < half_item)
    close_diff = np.abs(bins_remain_cap[close_to_half_item_mask] - half_item/2)
    priorities[close_to_half_item_mask] += 0.5 * np.exp(-close_diff)
    return priorities
```
