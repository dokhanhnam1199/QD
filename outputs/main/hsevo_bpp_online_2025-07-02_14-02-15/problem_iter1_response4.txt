```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    My ingenious method, inspired by alternating currents, prioritizes near-perfect fits and discourages significant capacity wastage, while also pushing bins closer to full when near their maximum capacity, a subtle dance of balance and efficiency.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after adding the item to each bin
    new_remain_cap = bins_remain_cap - item

    # Initialize priorities
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give very negative priority to bins where the item doesn't fit
    priorities[new_remain_cap < 0] = -np.inf

    # Higher priority to bins with smaller remaining capacity after adding item, prioritizing near-perfect fits
    valid_bins_idx = new_remain_cap >= 0
    if np.any(valid_bins_idx):
        priorities[valid_bins_idx] += -np.abs(new_remain_cap[valid_bins_idx])  # Avoid tiny differences by negating
    # Penalize larger waste.

    # Apply a boost when bins have smaller remaining capacity, incentivizing filling bins. The smaller the remaining the higher the boost.
    bin_fullness_ratio = (1 - bins_remain_cap / bins_remain_cap.max())
    priorities = priorities + bin_fullness_ratio * 10  # amplify boost a bit.


    return priorities
```
