```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Employs a more nuanced approach inspired by celestial mechanics - favoring near-perfect fits but discouraging near-misses, with a healthy dose of exploration to avoid local minima.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # High priority for bins that can fit the item
    fit_indices = bins_remain_cap >= item
    priorities[fit_indices] = 1.0  # Base priority for fitting

    # Refine priority based on how well the item fills the bin
    remaining_space = bins_remain_cap[fit_indices] - item
    fill_ratios = item / bins_remain_cap[fit_indices]
    
    # Reward near-perfect fits (avoiding tiny slivers of wasted space - akin to avoiding epicycles!)
    perfect_fit_bonus = np.exp(-10 * remaining_space[remaining_space >= 0]) #sharply penalizes very small space remaining
    priorities[fit_indices] += perfect_fit_bonus

    # Discourage near-misses - prevent fragmentation. (A slight gravitational perturbation!)
    near_miss_indices = (bins_remain_cap > 0) & (bins_remain_cap < item) # bins that can almost fit the item
    priorities[near_miss_indices] = -np.inf # completely disincentivize

    # Exploration factor to prevent premature convergence (akin to stellar drift!) - particularly at start.
    exploration_bonus = np.random.rand(len(bins_remain_cap)) * 0.01

    priorities += exploration_bonus # Ensure there is a nonzero amount of exploration

    return priorities
```
