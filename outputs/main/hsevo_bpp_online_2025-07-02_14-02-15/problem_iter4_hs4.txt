import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, perfect_fit_decay: float = 9.36374630697213, exploration_weight: float = 0.010027525953937395) -> np.ndarray:
    """Combines perfect fit bonus, relative waste, and exploration.
    Penalizes infeasible bins.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get -inf priority
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Compute remaining space for feasible bins
    feasible_bins = bins_remain_cap >= item
    remaining_space = bins_remain_cap[feasible_bins] - item

    # Perfect fit bonus using exponential function
    perfect_fit_bonus = np.exp(-perfect_fit_decay * remaining_space) if remaining_space.size > 0 else np.array([])
    priorities[feasible_bins] += perfect_fit_bonus

    # Relative waste penalty
    if feasible_bins.any():
        waste_ratio = remaining_space / bins_remain_cap[feasible_bins]
        priorities[feasible_bins] -= waste_ratio

    # Exploration bonus
    exploration_bonus = np.random.rand(len(bins_remain_cap)) * exploration_weight
    priorities += exploration_bonus

    return priorities
