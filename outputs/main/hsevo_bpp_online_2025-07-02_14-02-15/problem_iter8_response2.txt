```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes best-fit, adds stochasticity, penalizes fragmentation, and rewards large items."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item
        
        # Prioritize based on inverse waste (best fit)
        priorities[feasible_bins] = 1 / (waste + 0.0001)
        
        # Add stochasticity (exploration) - scale with item size
        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.1 * item

        # Penalize almost full bins to prevent fragmentation
        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]
        almost_full = wasted_space_ratio < 0.1
        priorities[feasible_bins][almost_full] *= 0.5 # Reduce priority of almost full bins

        # Reward filling bins significantly but not completely
        significant_fill = (item / bins_remain_cap[feasible_bins]) > 0.7
        priorities[feasible_bins][significant_fill] += 0.2

        #Large item high reward - filling up space and avoiding future placement issues.
        large_cap_reward = np.where(bins_remain_cap[feasible_bins] > item*2,0.25,0) #incentivise large bins if enough capacity exists.
        priorities[feasible_bins] += large_cap_reward

    else:
        priorities[:] = -np.inf

    return priorities
```
