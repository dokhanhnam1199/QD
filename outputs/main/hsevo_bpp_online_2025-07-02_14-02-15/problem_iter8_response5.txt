```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins: best-fit, stochasticity, fragmentation penalty, utilization sweet spot."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fit_mask = bins_remain_cap >= item

    if not np.any(fit_mask):
        return priorities - np.inf

    waste = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] = 1.0 / (waste + 0.0001)

    wasted_space_ratio = waste / bins_remain_cap[fit_mask]
    nearly_full = wasted_space_ratio < 0.1
    priorities[fit_mask][nearly_full] += 0.5 # reward near full bins

    # Stochasticity
    exploration_factor = 0.01
    priorities[fit_mask] += np.random.rand(np.sum(fit_mask)) * exploration_factor

    # Fragmentation Penalty
    fragmentation_threshold = item * 0.2
    fragmentation_penalty = np.where(waste < fragmentation_threshold, -0.3, 0) # reduce penalty
    priorities[fit_mask] += fragmentation_penalty
    return priorities
```
