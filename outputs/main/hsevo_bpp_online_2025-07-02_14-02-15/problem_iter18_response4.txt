```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes best-fit with adaptive penalties and dynamic exploration.
    Emphasizes a balance between bin utilization and preventing extreme fragmentation,
    adjusting strategies based on item size and bin availability.

    This version focuses on simplicity and problem-aware enhancements over excessive parameters.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item

        # Core: Prioritize best fit (minimize waste).  Simpler, more direct.
        priorities[feasible_bins] = 1.0 / (waste + 1e-9)  # Avoid division by zero, smaller constant

        # Adaptive Exploration:  Scale exploration *down* as bins get tighter.
        # This encourages exploration when there's more choice, and exploitation when bins are scarce.
        exploration_factor = 0.1 * (1.0 - (item / bins_remain_cap[feasible_bins]))
        exploration_factor = np.clip(exploration_factor, 0, 0.1)  # Ensure it's not negative or too large
        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * exploration_factor

        # Fragmentation Penalty:  Only penalize if the resulting fill level is VERY high.  More targeted.
        remaining_capacity_ratio = waste / bins_remain_cap[feasible_bins]
        almost_full_penalty = 0.5  # Reduced penalty
        almost_full = remaining_capacity_ratio < 0.1 # More restrictive "almost full"
        priorities[feasible_bins][almost_full] *= (1 - almost_full_penalty)  #Apply Penalty

        #Reward Larger Bins for small items only if the bin isn't almost full already.
        small_item_reward = 0.3
        small_item_threshold = 0.25 #Item must be < 25% of bin size for reward
        if item < small_item_threshold:
            large_bin = bins_remain_cap[feasible_bins] > item*2 #Must be at least twice the size.
            priorities[feasible_bins][large_bin] += small_item_reward

    else:
        priorities[:] = -np.inf  # No feasible bins

    return priorities
```
