```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can fit the item snugly, minimizing wasted space.
    It also penalizes bins that cannot fit the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item
    
    # Give high priority to bins that can fit the item with minimal wasted space
    # and negative priority if the bin cannot fit
    for i in range(len(bins_remain_cap)):
        if wasted_space[i] >= 0:
            # Prioritize bins where wasted space is small
            priorities[i] = 1.0 / (1e-9 + wasted_space[i])  # Add a small value to avoid division by zero. Inverse relationship
        else:
            # Give a very low (negative) priority to bins that cannot fit the item
            priorities[i] = -1000.0 # Or -np.inf

    return priorities
```
