[
  {
    "stdout_filepath": "problem_iter2_response0.txt_stdout.txt",
    "code_path": "problem_iter2_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Hybrid priority: Gaussian fit + waste, penalize near-full.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n    \n    # Gaussian-like fit priority\n    ideal_ratio = 0.8\n    scale = 0.2\n    ratios = np.where(can_fit, item / bins_remain_cap, 0)\n    gaussian_priorities = np.exp(-((ratios - ideal_ratio)**2) / (2 * scale**2))\n    priorities = np.where(can_fit, gaussian_priorities, -np.inf)\n    \n    # Waste penalty and near-full penalty\n    wasted_space_ratio = (bins_remain_cap - item) / bins_remain_cap\n    priorities = np.where(can_fit, priorities - wasted_space_ratio * 0.3, priorities)\n\n    near_full = (wasted_space_ratio > 0) & (wasted_space_ratio < 0.1)\n    priorities = np.where(near_full & can_fit, priorities - 0.5, priorities) #stronger penalty than v0\n    \n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 6.771041084962115,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response1.txt_stdout.txt",
    "code_path": "problem_iter2_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines perfect fit bonus, relative waste, and exploration.\n    Penalizes infeasible bins.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get -inf priority\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf\n\n    # Compute remaining space for feasible bins\n    feasible_bins = bins_remain_cap >= item\n    remaining_space = bins_remain_cap[feasible_bins] - item\n\n    # Perfect fit bonus using exponential function\n    perfect_fit_bonus = np.exp(-10 * remaining_space) if remaining_space.size > 0 else np.array([])\n    priorities[feasible_bins] += perfect_fit_bonus\n\n    # Relative waste penalty\n    if feasible_bins.any():\n        waste_ratio = remaining_space / bins_remain_cap[feasible_bins]\n        priorities[feasible_bins] -= waste_ratio\n\n    # Exploration bonus\n    exploration_bonus = np.random.rand(len(bins_remain_cap)) * 0.01\n    priorities += exploration_bonus\n\n    return priorities",
    "response_id": 1,
    "tryHS": true,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response2.txt_stdout.txt",
    "code_path": "problem_iter2_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins, balancing waste, fill level, and stochasticity.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        return priorities\n\n    waste = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = np.where(waste > 0, 1.0 / (waste + 1e-8), 1e8)\n\n    fill_ratios = (1 - bins_remain_cap[valid_bins] / bins_remain_cap[valid_bins].max())\n    priorities[valid_bins] += fill_ratios\n\n    #Stochastic Exploration: adds a scaled random number to valid bins.\n    priorities[valid_bins] += np.random.rand(np.sum(valid_bins)) * 0.1\n\n    # Fragmentation Penalty: Reduce priority if bin is nearly full.\n    wasted_space_ratio = waste / bins_remain_cap[valid_bins]\n    nearly_full = wasted_space_ratio < 0.1\n    priorities[valid_bins][nearly_full] -= 0.5  # Penalize nearly full bins\n\n    return priorities",
    "response_id": 2,
    "tryHS": true,
    "obj": 4.038691663342641,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response3.txt_stdout.txt",
    "code_path": "problem_iter2_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines waste minimization, fragmentation penalty, and stochastic exploration.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if not np.any(eligible_bins):\n        return priorities\n\n    wasted_space = bins_remain_cap - item\n    priorities[eligible_bins] += 1.0 / (1e-9 + wasted_space[eligible_bins] / item) # Relative waste\n\n    almost_full = (wasted_space < 0.1 * item) & eligible_bins\n    priorities[almost_full] -= 0.5\n\n    # Stochastic element: Prefer bins with smaller remaining capacity, but add noise.\n    if np.any(eligible_bins):\n        noise = np.random.normal(0, 0.01, size=bins_remain_cap.shape)  # Small noise\n        priorities[eligible_bins] += (1 - bins_remain_cap[eligible_bins]) + noise[eligible_bins]\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response4.txt_stdout.txt",
    "code_path": "problem_iter2_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Hybrid heuristic: potential well + relative waste + stochasticity.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    eligible_bins = bins_remain_cap >= item\n\n    if not np.any(eligible_bins):\n        return priorities\n\n    # Potential well around near-perfect fits.\n    fit_difference = bins_remain_cap - item\n    near_fit_mask = fit_difference >= 0\n    priorities[near_fit_mask] = np.exp(-np.abs(fit_difference[near_fit_mask]) / (item + 1e-6))\n\n    # Relative wasted space penalty.\n    wasted_space = bins_remain_cap - item\n    priorities[eligible_bins] -= 0.5 * (wasted_space[eligible_bins] / (bins_remain_cap[eligible_bins] + 1e-6))\n\n    # Stochastic exploration: favor fuller bins with small probability.\n    fill_level = 1 - (bins_remain_cap / np.max(bins_remain_cap))\n    priorities += 0.01 * np.random.rand(len(bins_remain_cap)) * fill_level**2\n\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response5.txt_stdout.txt",
    "code_path": "problem_iter2_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on tightness, utilization, and a small stochastic element.\n    Combines tightness and utilization scores with added noise.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n    \n    if not np.any(valid_bins):\n        return np.full_like(bins_remain_cap, -1.0)\n\n    remaining_space = bins_remain_cap - item\n    utilization = 1 - remaining_space\n\n    tightness_score = np.exp(-5 * remaining_space)\n    tightness_score = np.clip(tightness_score, a_min = 0, a_max = 1e5)\n    utilization_score = np.exp(-2 * (utilization - 0.75)**2)\n\n    priorities[valid_bins] = tightness_score[valid_bins] * utilization_score[valid_bins]\n\n    # Add small stochastic noise for exploration\n    noise = np.random.normal(0, 0.01, size=bins_remain_cap.shape)\n    priorities[valid_bins] += noise[valid_bins]\n\n    return priorities",
    "response_id": 5,
    "tryHS": false,
    "obj": 36.34822497008376,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response6.txt_stdout.txt",
    "code_path": "problem_iter2_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes near-perfect fits, adds stochasticity, and penalizes fragmentation.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n\n    if np.any(feasible_bins):\n        waste = bins_remain_cap[feasible_bins] - item\n        \n        # Prioritize based on inverse waste (best fit)\n        priorities[feasible_bins] = 1 / (waste + 0.0001)\n        \n        # Add stochasticity (exploration)\n        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.1\n\n        #Penalize almost full bins to prevent fragmentation\n        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]\n        almost_full = wasted_space_ratio < 0.1\n        priorities[feasible_bins][almost_full] *= 0.5 # Reduce priority of almost full bins\n        \n\n    else:\n        priorities[:] = -np.inf\n\n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.2181890706023095,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response7.txt_stdout.txt",
    "code_path": "problem_iter2_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on fit, waste, and fragmentation.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    valid_bins = bins_remain_cap >= item\n\n    if np.any(valid_bins):\n        # Base priority: inverse of remaining capacity (smaller is better)\n        priorities[valid_bins] = 1 / bins_remain_cap[valid_bins]\n\n        # Perfect fit bonus with exponential decay\n        capacity_diff = bins_remain_cap[valid_bins] - item\n        perfect_fit_bonus = np.exp(-10 * capacity_diff)\n        priorities[valid_bins] += perfect_fit_bonus\n\n        # Fragmentation penalty: penalize bins that become nearly full\n        wasted_space = bins_remain_cap[valid_bins] - item\n        almost_full = wasted_space < 0.1 * item\n        priorities[valid_bins][almost_full] -= 0.5  # Significant penalty\n    else:\n        priorities = np.full_like(bins_remain_cap, -1e9) # Very low priority\n\n    return priorities",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response8.txt_stdout.txt",
    "code_path": "problem_iter2_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines fill ratio and waste minimization with a snug fit reward.\n    Uses array operations for efficiency.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Infeasible bins get -inf priority\n    feasible = bins_remain_cap >= item\n    priorities[~feasible] = -np.inf\n    \n    # Fill ratio for feasible bins\n    fill_ratio = item / bins_remain_cap[feasible]\n    priorities[feasible] += fill_ratio\n\n    # Waste penalty: penalize bins with small remaining capacity\n    remaining_cap = bins_remain_cap[feasible] - item\n    waste_penalty = np.exp(-5 * remaining_cap) # Smaller remainders get large penalty\n    priorities[feasible] -= waste_penalty\n\n    # Snug fit reward\n    snug_fit_reward = np.exp(-2 * np.abs(remaining_cap - item*0.2)) # Peak around 20% of item size\n    priorities[feasible] += snug_fit_reward\n\n    # Additional bonus for perfect fits.\n    perfect_fit = np.abs(remaining_cap) < 1e-6\n    priorities[feasible][perfect_fit] += 5 # Boost exact fits\n    \n    return priorities",
    "response_id": 8,
    "tryHS": false,
    "obj": 6.082967690466694,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response9.txt_stdout.txt",
    "code_path": "problem_iter2_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on waste, fill level, and a perfect fit bonus.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap)\n    valid_bins = bins_remain_cap >= item\n\n    if not np.any(valid_bins):\n        # If no bin can fit, give extremely low priority to fuller bins.\n        priorities = -bins_remain_cap  # Prioritize bins with smaller remain_cap\n        return priorities\n\n    slack = bins_remain_cap[valid_bins] - item\n    priorities[valid_bins] = 1 / (bins_remain_cap[valid_bins] + 0.0001) + (1 - bins_remain_cap[valid_bins])\n    \n    perfect_fit = np.abs(slack) < 1e-6\n    priorities[valid_bins][perfect_fit] += 10\n\n    priorities[~valid_bins] = -np.inf\n\n    return priorities",
    "response_id": 9,
    "tryHS": false,
    "exec_success": false,
    "obj": Infinity,
    "traceback_msg": "Traceback (most recent call last):\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 112, in <module>\n    avg_num_bins = -evaluate(dataset)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 55, in evaluate\n    _, bins_packed = online_binpack(items.astype(float), bins)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 28, in online_binpack\n    priorities = priority(item, bins[valid_bin_indices])\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/gpt.py\", line 20, in priority_v2\n    priorities[~valid_bins] = -np.inf\nOverflowError: cannot convert float infinity to integer\n"
  },
  {
    "stdout_filepath": "problem_iter3_response0.txt_stdout.txt",
    "code_path": "problem_iter3_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    n_bins = len(bins_remain_cap)\n\n    # 1. First-Fit-Decreasing inspired (Relative Waste)\n    fit_mask = bins_remain_cap >= item\n    waste = bins_remain_cap[fit_mask] - item\n    relative_waste = waste / (item + 0.0001)  # Relative to item size\n    priorities[fit_mask] += np.exp(-5 * relative_waste)  # Exponential decay of priority as waste increases\n\n    # 2. Next-Fit inspired (Bin fullness - Non-linear)\n    bin_fullness = bins_remain_cap / (np.max(bins_remain_cap) + 0.0001)  # Normalize\n    priorities += np.power(1 - bin_fullness, 3) # Prioritize fuller bins, cubic function\n\n    # 3. Fragmentation Penalty (Aggressive)\n    fragmentation_penalty = np.where(bins_remain_cap < item, -1000, 0) #Extreme penalty for bins that cannot fit the item\n    priorities += fragmentation_penalty\n    \n    # 4. Stochastic element (exploration)\n    # Add some noise to the priorities to encourage exploration of different bins\n    noise = np.random.normal(0, 0.1, size=n_bins)\n    priorities += noise\n\n    # 5. Large item incentive (fill space)\n    large_space = np.where(bins_remain_cap > item * 1.5, np.tanh(bins_remain_cap - item), 0) #If there is sufficient space fill it up.\n    priorities += large_space\n\n    #6. Number of available bins penalty if there are lots of bins, use the fullest.\n    if n_bins > 10:\n        priorities += (1-bin_fullness)*0.1\n\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 10.360989230155573,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter3_response1.txt_stdout.txt",
    "code_path": "problem_iter3_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version incorporates non-linearity, stochasticity, fragmentation penalty,\n    relative waste, and array operations to enhance performance.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Fit Assessment & Relative Waste (Non-linear)\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):  # only apply calculation if some bins can fit\n        waste = bins_remain_cap[fit_mask] - item\n        relative_waste = waste / item #waste relative to the item size\n        priorities[fit_mask] += np.exp(-5 * relative_waste)  # Exponentially decaying priority based on waste\n\n    # 2. Fragmentation Penalty (Non-linear)\n    # Penalize bins that will have remaining capacity within a specific range,\n    # as this leads to fragmentation.\n    fragment_threshold_low = 0.1\n    fragment_threshold_high = 0.25\n    fragment_mask = (bins_remain_cap - item > fragment_threshold_low) & (bins_remain_cap - item < fragment_threshold_high)\n\n    priorities[fragment_mask] -= 0.5  # Apply a penalty for fragmentation\n\n    # 3. Stochastic Exploration (Stochasticity)\n    # Add a small random value to each bin's priority to encourage exploration.\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.01\n\n    # 4. Bin Utilization Encouragement\n    # Incentivize bins that are already partially full.  Use a sigmoid function\n    # to provide a non-linear increase in priority as the bin fills up.\n    utilization = (1 - bins_remain_cap / np.max(bins_remain_cap)) #utilization relative to the biggest bin capacity.\n    priorities += 1.0 / (1 + np.exp(-10 * (utilization - 0.5))) #sigmod function that incentivizes partially filled bins.\n\n    # 5. Small Capacity Penalty (As before, but refined)\n    small_cap_penalty = np.where(bins_remain_cap < item, -np.inf, 0)\n    priorities += small_cap_penalty\n\n    # 6. Large Capacity Reward (As before)\n    large_cap_reward = np.where(bins_remain_cap > item * 2, 0.2, 0) #reduced reward amount\n    priorities += large_cap_reward\n\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.2580773833266905,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter3_response2.txt_stdout.txt",
    "code_path": "problem_iter3_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    n_bins = len(bins_remain_cap)\n\n    # Fit Score: Prioritize bins that can fit the item\n    fit_mask = bins_remain_cap >= item\n    fit_score = np.where(fit_mask, 1, 0)\n    priorities += fit_score\n\n    # Waste Ratio: Penalize high waste relative to item size, but non-linearly\n    waste = bins_remain_cap - item\n    relative_waste = np.where(fit_mask, waste / item, np.inf)  #Waste relative to item size\n    waste_penalty = np.where(fit_mask, -np.power(relative_waste, 2), 0) # Square it for non-linearity. Higher relative waste will have bigger penalty\n    priorities += waste_penalty\n\n    # Capacity Utilization: Encourage filling bins closer to full non-linearly\n    utilization = bins_remain_cap / np.sum(bins_remain_cap + 0.0001)\n    utilization_score = np.power(utilization, 0.5) #Non Linear - sqrt root to give diminishing returns\n    priorities += utilization_score\n\n    # Fragmentation Penalty: Penalize bins with very small remaining capacity after placement (creating fragmentation)\n    remaining_after_placement = bins_remain_cap - item\n    fragmentation_threshold = item * 0.2  # Adjust as needed\n    fragmentation_penalty = np.where((remaining_after_placement > 0) & (remaining_after_placement < fragmentation_threshold), -1, 0)\n    priorities += fragmentation_penalty\n\n    # Stochastic Element: Introduce some randomness to explore different options, scaling by number of bins\n    random_noise = np.random.rand(n_bins) * 0.01 #Scale random noise\n    priorities += random_noise\n\n    # Bonus for large item placement if space exists\n    large_cap_bonus = np.where(bins_remain_cap > item * 1.5, 0.5, 0) #incentivise larger bins if enough capacity exists.\n    priorities += large_cap_bonus\n\n    # Scale Priorities\n    if np.max(priorities) > 0:\n        priorities = priorities / np.max(priorities)\n\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 8.047467092142007,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter3_response3.txt_stdout.txt",
    "code_path": "problem_iter3_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    epsilon = 1e-6 # Small value to avoid division by zero and for numerical stability\n\n    # 1. Feasibility Mask: Disqualify bins that can't fit the item.\n    fit_mask = bins_remain_cap >= item\n\n    # If no bin can fit the item, return equal priorities to select one randomly (avoid errors).\n    if not np.any(fit_mask):\n        return np.ones_like(bins_remain_cap)\n\n    # 2. Relative Waste Penalty (if it fits):  Waste relative to item size. Larger item, larger penalty for the same absolute waste.\n    waste = bins_remain_cap[fit_mask] - item\n    relative_waste = waste / (item + epsilon) #Waste relative to item size\n\n    # Non-linear Penalty:  Apply a non-linear transformation to the relative waste.\n    waste_penalty = -np.power(relative_waste, 2) #Quadratic penalty, penalizes larger waste more\n    priorities[fit_mask] += waste_penalty\n\n    # 3. Remaining Capacity Reward: Encourage filling bins that are already relatively full.\n    # Sigmoid function to scale the reward. Bins nearly full get a high reward.\n    fullness = (bins_remain_cap[fit_mask] / (np.max(bins_remain_cap)+epsilon))\n    fullness_reward = 1.0 / (1.0 + np.exp(-10 * (fullness - 0.7)))  # Sigmoid centered at 0.7, steepness controlled by 10\n    priorities[fit_mask] += fullness_reward\n\n    # 4. Fragmentation Penalty: Penalize bins that, after placing the item, would leave a small remaining capacity.\n    # This encourages using bins that will be reasonably full.\n    remaining_capacity = bins_remain_cap[fit_mask] - item\n    fragmentation_threshold = item / 2.0 # Penalize if remaining capacity is less than half the item size\n    fragmentation_penalty = np.where(remaining_capacity < fragmentation_threshold, -1, 0) #High penalty for fragmentation\n\n    priorities[fit_mask] += fragmentation_penalty\n\n    # 5. Stochasticity (Exploration): Add some noise to the priorities to explore different options.\n    # Only apply noise to bins that can fit the item\n    noise = np.random.normal(0, 0.01, size=np.sum(fit_mask))  # Small Gaussian noise\n    priorities[fit_mask] += noise\n    # 6. Large Capacity Incentive: if there are very large bins give them a bonus to encourage their use.\n    large_bin_threshold = 2*item #Only if more than double capacity\n    large_bin_bonus = np.where(bins_remain_cap[fit_mask] > large_bin_threshold, 0.5, 0)\n\n    priorities[fit_mask] += large_bin_bonus\n\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 23.982848025528522,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter3_response4.txt_stdout.txt",
    "code_path": "problem_iter3_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Fit Score: Prioritize bins that can fit the item. Non-linear scaling.\n    fit_mask = bins_remain_cap >= item\n    waste = bins_remain_cap - item\n    relative_waste = waste / item\n    priorities[fit_mask] += np.exp(-relative_waste[fit_mask])  # Exponential decay of priority as waste increases\n\n    # Capacity Utilization: Encourage filling bins close to full.\n    utilization = (bins_remain_cap - item) / bins_remain_cap\n    utilization = np.clip(utilization, 0, 1)  # Ensure utilization is between 0 and 1\n    priorities[fit_mask] += (1-utilization[fit_mask])**2\n\n    # Fragmentation Penalty: Discourage leaving small gaps.  Larger gaps penalized more.\n    fragmentation_threshold = item * 0.2 #Define threshold relative to item size\n    fragmentation_penalty = np.where((waste > 0) & (waste < fragmentation_threshold), -0.5, 0)\n    priorities += fragmentation_penalty\n\n    # Stochastic Element: Introduce randomness for exploration.\n    exploration_factor = 0.01  # Low value to limit randomness\n    priorities += np.random.rand(len(bins_remain_cap)) * exploration_factor\n\n\n    # Large item Reward\n    large_cap_reward = np.where(bins_remain_cap > item * 1.5, np.tanh(bins_remain_cap / item), 0)  # tanh to bound reward\n    priorities += large_cap_reward\n\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.2979656960510715,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter4_response0.txt_stdout.txt",
    "code_path": "problem_iter4_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, perfect_fit_decay: float = 14.569453346445458, exploration_weight: float = 0.006469321373039828) -> np.ndarray:\n    \"\"\"Combines perfect fit bonus, relative waste, and exploration.\n    Penalizes infeasible bins.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasible bins get -inf priority\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf\n\n    # Compute remaining space for feasible bins\n    feasible_bins = bins_remain_cap >= item\n    remaining_space = bins_remain_cap[feasible_bins] - item\n\n    # Perfect fit bonus using exponential function\n    perfect_fit_bonus = np.exp(-perfect_fit_decay * remaining_space) if remaining_space.size > 0 else np.array([])\n    priorities[feasible_bins] += perfect_fit_bonus\n\n    # Relative waste penalty\n    if feasible_bins.any():\n        waste_ratio = remaining_space / bins_remain_cap[feasible_bins]\n        priorities[feasible_bins] -= waste_ratio\n\n    # Exploration bonus\n    exploration_bonus = np.random.rand(len(bins_remain_cap)) * exploration_weight\n    priorities += exploration_bonus\n\n    return priorities",
    "response_id": 0,
    "tryHS": true,
    "obj": 4.048663741523748,
    "exec_success": true
  }
]