```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Aims to balance bin utilization and avoid fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give high priority to bins that can fit the item well without excessive space left.
    fit_indices = bins_remain_cap >= item
    if np.any(fit_indices):
        remaining_space = bins_remain_cap[fit_indices] - item
        # Prioritize bins where the remaining space is small, but not too small
        priorities[fit_indices] = np.exp(-np.abs(remaining_space - np.mean(remaining_space)) / (np.std(remaining_space) + 1e-6)) # exp decaying based on closeness to mean remain

        # A different heuristic: prioritize bins where the item fills a substantial portion of the bin
        # fill_ratios = item / bins_remain_cap[fit_indices]
        # priorities[fit_indices] = fill_ratios # linear
        # another approach: penalize if remaining space is very small
        small_space_indices = remaining_space < 0.1
        priorities[fit_indices][small_space_indices] = 0.0 # significantly demote bins with very small space left after packing
        large_space_indices = remaining_space > 0.5 # adjust 0.5 threshold
        priorities[fit_indices][large_space_indices] *= 0.5 # slightly demote bins with significant empty space remaining

    else:
        # if item can't fit in any bin give negative prioity based on how much over capacity they are to indicate inability to fit
        priorities = - (item - bins_remain_cap) # lower means less negative

    return priorities
```
