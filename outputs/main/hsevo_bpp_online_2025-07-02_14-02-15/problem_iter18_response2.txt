```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes best-fit with adaptive exploration and bin utilization awareness.

    This version focuses on simplicity and problem-aware adjustments.
    It prioritizes bins with sufficient space, introduces adaptive exploration,
    and penalizes bins with low utilization *after* placement.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item
        
        # Core: Prioritize best fit (minimize waste).
        priorities[feasible_bins] = 1 / (waste + 1e-9)  # Adding a small constant to avoid division by zero

        # Adaptive Exploration: Reduce exploration as the bin gets fuller
        exploration_factor = np.clip(1.0 - bins_remain_cap[feasible_bins], 0.0, 0.2) #Explore less as bins are empty
        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * exploration_factor

        # Encourage filling bins to a reasonable level, but only *after* placing the item
        # Target utilization between 70% and 95% after placing item.
        future_utilization = (bins_remain_cap[feasible_bins] - item)
        sweet_spot = (future_utilization > 0.05) & (future_utilization < 0.30)

        priorities[feasible_bins][sweet_spot] *= 2.0 #give a significant boost to bins that will be within the utilization range

    else:
        priorities[:] = -np.inf  # No feasible bins

    return priorities
```
