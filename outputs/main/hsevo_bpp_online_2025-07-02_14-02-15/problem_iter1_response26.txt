```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version incorporates several heuristics to improve bin packing:
    1.  Avoids bins that are too full or too empty for the current item.
    2.  Favors bins where the item fits relatively snugly (minimize wasted space).
    3.  Introduces a small amount of randomness to avoid getting stuck in local optima.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Penalize bins that are too small or too large
    small_threshold = 0.1  # Avoid bins with capacity < 10% more than the item
    large_threshold = 0.9  # Avoid bins with capacity > 90% more than the item. This prevents large items blocking too much space.

    for i, cap in enumerate(bins_remain_cap):
        if cap < item:
            priorities[i] = -np.inf  # Cannot fit
        elif cap < item * (1 + small_threshold):
            priorities[i] -= 1000  # Somewhat Penalize almost full bins, but still potentially allow

        if cap > item * (1 + large_threshold):
             priorities[i] -= 50  # Penalize bins with significantly more capacity, avoid spreading the items too thinly.

        # Calculate wasted space if item is placed in the bin
        wasted_space = cap - item

        # Give a higher priority to bins that minimize wasted space. An exponential penalty
        # creates a higher pressure to fill nearly full bins.
        priorities[i] += np.exp(-wasted_space)


    # Add small random number to break ties and escape local minima
    priorities += np.random.rand(len(bins_remain_cap)) * 0.01

    return priorities
```
