```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using best-fit, adaptive stochasticity, and sweet spot."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item

        # Best-fit prioritization.
        priorities[feasible_bins] = 1 / (waste + 0.00001)

        # Adaptive stochasticity: smaller items, more exploration.
        exploration_factor = max(0, 0.1 - (item * 0.05))
        num_feasible = np.sum(feasible_bins)
        priorities[feasible_bins] += np.random.rand(num_feasible) * exploration_factor

        # Sweet Spot Incentive
        sweet_spot_lower = 0.7 - (item * 0.1)
        sweet_spot_upper = 0.9 - (item * 0.05)
        utilization = (bins_remain_cap[feasible_bins] - waste) / 1.0
        sweet_spot = (utilization >= sweet_spot_lower) & (utilization <= sweet_spot_upper)
        priorities[feasible_bins][sweet_spot] += 0.4
        
        # Fragmentation penalty: Apply a moderate penalty for small waste, only if other bins exist
        small_waste = (waste < 0.1)
        if np.sum(feasible_bins) > 1:
            priorities[feasible_bins][small_waste] *= 0.5 #reduce priority

        # Reward Larger Bins for Smaller Items - from version 0
        small_item_threshold = 0.3
        large_bin_threshold = 1.5 * item
        if item < small_item_threshold:
            large_bin = bins_remain_cap[feasible_bins] > large_bin_threshold
            priorities[feasible_bins][large_bin] += 0.5

    else:
        priorities[:] = -np.inf

    return priorities
```
