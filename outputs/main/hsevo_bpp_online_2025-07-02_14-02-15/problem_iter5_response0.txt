```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines relative waste, fragmentation penalty, and stochasticity for bin packing."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Relative Waste (First-Fit Decreasing Inspired)
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        waste = bins_remain_cap[fit_mask] - item
        relative_waste = waste / (item + 0.0001)
        priorities[fit_mask] += np.exp(-5 * relative_waste)

    # 2. Fragmentation Penalty
    fragment_threshold_low = 0.1
    fragment_threshold_high = 0.25
    fragment_mask = (bins_remain_cap - item > fragment_threshold_low) & (bins_remain_cap - item < fragment_threshold_high)
    priorities[fragment_mask] -= 0.5

    # 3. Stochastic Exploration
    priorities += np.random.rand(len(bins_remain_cap)) * 0.01

    return priorities
```
