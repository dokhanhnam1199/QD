```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes best-fit, adds stochasticity, and penalizes fragmentation, with capacity-aware adjustments."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item
        
        # Prioritize based on inverse waste (best fit) - stronger best-fit emphasis
        priorities[feasible_bins] = 10 / (waste + 0.0001)  # Increased magnitude

        # Stochasticity (exploration) - reduced exploration
        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.05 # Reduced exploration

        # Penalize almost full bins to prevent fragmentation - tuned threshold and penalty
        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]
        almost_full = wasted_space_ratio < 0.15 # Slightly relaxed threshold
        priorities[feasible_bins][almost_full] *= 0.3  # Stronger penalty

        #Reward larger capacity bins, more aggressive
        large_cap_reward = np.where(bins_remain_cap[feasible_bins] > item*1.5, 0.5, 0)  #Reduced threshold, higher reward
        priorities[feasible_bins] += large_cap_reward
        
        #Prioritize bins with capacity close to the item size
        close_fit = np.abs(waste - item*0.5) / item < 0.2 #check is close to item/2
        priorities[feasible_bins][close_fit] += 0.4 #slight encouragement if near half full after placement

    else:
        priorities[:] = -np.inf

    return priorities
```
