```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes best-fit, adds stochasticity, and penalizes fragmentation.
       Also, considers bin fill ratio and dynamically adjusts stochasticity.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item
        
        # Prioritize based on inverse waste (best fit)
        priorities[feasible_bins] = 1 / (waste + 0.0001)
        
        # Dynamically adjust stochasticity based on the number of feasible bins
        num_feasible = np.sum(feasible_bins)
        stochasticity_factor = 0.1 / (num_feasible + 1e-6)  # Reduce stochasticity when many bins are feasible
        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * stochasticity_factor
        

        # Penalize almost full bins to prevent fragmentation (more aggressive)
        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]
        almost_full = wasted_space_ratio < 0.05  # More sensitive to almost full
        priorities[feasible_bins][almost_full] *= 0.3  # Reduce priority more aggressively

        # Reward bins that are already significantly filled
        fill_ratio = (bins_remain_cap[feasible_bins] - waste) / bins_remain_cap[feasible_bins]
        significantly_filled = fill_ratio > 0.5 # Adjust threshold as needed
        priorities[feasible_bins][significantly_filled] += 0.2  # Add a small reward for filled bins

        #Large item high reward - filling up space and avoiding future placement issues.
        large_cap_reward = np.where(bins_remain_cap[feasible_bins] > item*2,0.25,0) #incentivise large bins if enough capacity exists.
        priorities[feasible_bins] += large_cap_reward

    else:
        priorities[:] = -np.inf

    return priorities
```
