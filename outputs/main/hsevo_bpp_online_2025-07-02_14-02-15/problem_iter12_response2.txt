```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes best-fit with adaptive penalties and dynamic exploration.
    Emphasizes a balance between bin utilization and preventing extreme fragmentation,
    adjusting strategies based on item size and bin availability. This version
    focuses on simplified adaptive components and a more robust handling of edge cases.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item
        
        # Core: Prioritize best fit (minimize waste).
        priorities[feasible_bins] = 1 / (waste + 0.00001)  # Tiny constant to avoid division by zero

        # Adaptive Stochasticity:  Exploration proportional to available capacity, capped.
        total_capacity = np.sum(bins_remain_cap)
        exploration_factor = min(0.1, total_capacity * 0.001) # Proportional to total remaining capacity
        num_feasible = np.sum(feasible_bins)        
        priorities[feasible_bins] += np.random.rand(num_feasible) * exploration_factor

        # Fragmentation Penalty:  Focus on *relative* wasted space. Less aggressive, more stable.
        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]
        almost_full = wasted_space_ratio < 0.1 # Less aggressive threshold
        priorities[feasible_bins][almost_full] *= 0.5  # Reduced penalty

        # Reward larger bins for small items, but only if it's a *significant* size difference.
        if item < 0.3: #Only triggers when dealing with small items
          large_bin_reward = bins_remain_cap[feasible_bins] > (1.0 - item) #is it approaching full bin?
          priorities[feasible_bins][large_bin_reward] += 0.3
        

        # Dynamic "Sweet Spot" Incentive:  Simplified, based on item size.
        sweet_spot_lower = 0.6 - (item * 0.15)  #Dynamic Lower Bound - adjusted scale
        sweet_spot_upper = 0.9 - (item * 0.1) #Dynamic Upper Bound - decreased upper bound

        utilization = (bins_remain_cap[feasible_bins] - waste) / 1.0  # Assuming bin size is 1
        sweet_spot = (utilization > sweet_spot_lower) & (utilization < sweet_spot_upper)
        priorities[feasible_bins][sweet_spot] += 0.3

    else:
        priorities[:] = -np.inf  # No feasible bins

    return priorities
```
