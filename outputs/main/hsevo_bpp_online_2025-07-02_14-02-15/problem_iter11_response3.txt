```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes best-fit, adaptive stochasticity, dynamic fragmentation penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item
        priorities[feasible_bins] = 1 / (waste + 0.001)

        # Adaptive stochasticity: smaller items, more exploration.
        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * (0.05 / (item + 0.1))

        # Dynamic fragmentation penalty, relative to item size.
        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]
        almost_full = wasted_space_ratio < (0.1 + 0.05*item)
        priorities[feasible_bins][almost_full] *= 0.2

        # Incentivize bins towards a target utilization range
        target_utilization_low = 0.6 - 0.1 * item
        target_utilization_high = 0.8 - 0.05*item
        
        utilization = (bins_remain_cap[feasible_bins] - waste) 
        utilization /= 1.0 
        sweet_spot = (utilization >= target_utilization_low) & (utilization <= target_utilization_high)
        priorities[feasible_bins][sweet_spot] += 0.3

    else:
        priorities[:] = -np.inf

    return priorities
```
