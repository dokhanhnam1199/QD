```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes best-fit, adds stochasticity, and penalizes fragmentation.
    Also considers bin utilization and provides incentives for specific capacity ranges.
    This version focuses on simplicity, clear parameters, and problem-adaptive behavior.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item

        # Prioritize based on inverse waste (best fit), adding a small constant for stability
        priorities[feasible_bins] = 1 / (waste + 0.0001)

        # Add stochasticity (exploration) - but less aggressively and only when needed
        if np.random.rand() < 0.2:  #Reduced stochasticity
            priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.05

        # Penalize almost full bins to prevent fragmentation, more controlled penalty
        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]
        almost_full = wasted_space_ratio < 0.1
        priorities[feasible_bins][almost_full] *= 0.7  # Reduced penalty

        # Reward for placing large items in bins with sufficient capacity, tweaked threshold
        large_cap_reward = np.where(bins_remain_cap[feasible_bins] > item * 1.5, 0.2, 0)
        priorities[feasible_bins] += large_cap_reward

        # Incentivize bins in a "sweet spot" of utilization. Adjusted range and incentive
        utilization = (bins_remain_cap[feasible_bins] - waste) / 1.0 #Assuming bin size is 1
        sweet_spot = (utilization > 0.6) & (utilization < 0.8)
        priorities[feasible_bins][sweet_spot] += 0.2  # Reduced sweet spot bonus

        # Dynamically adjust best-fit priority based on item size
        # Larger items get a slightly stronger preference for best fit.
        priorities[feasible_bins] *= (1 + 0.1 * item) #Up to 10% best fit increase based on item size

    else:
        priorities[:] = -np.inf

    return priorities
```
