```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes best-fit, adds stochasticity, and penalizes fragmentation.
    Also considers bin utilization and provides incentives for specific capacity ranges.
    This version focuses on a more robust best-fit, dynamic penalty for almost full bins,
    and adaptive incentives for larger bins.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item
        
        # Prioritize based on inverse waste (best fit) - stronger emphasis
        priorities[feasible_bins] = 10 / (waste + 0.0001)  # Scale up the impact of best-fit

        # Add stochasticity (exploration) - reduced and adaptive
        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.05 #reduce exploration to exploit near best-fit solutions

        # Penalize almost full bins dynamically based on item size - stronger penalty for larger items
        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]
        almost_full = wasted_space_ratio < 0.1
        
        # Adaptive penalty. Larger items increase the need for efficient bin usage.
        penalty_factor = 0.2 + item * 0.6  # Increased magnitude
        priorities[feasible_bins][almost_full] *= (1 - penalty_factor)  # Stronger penalty for almost full bins

        # Dynamically incentivize larger bins, especially if item is large
        large_cap_threshold = item * (1.2 + item * 0.4) #The more space taken, the more important
        large_cap_reward = np.where(bins_remain_cap[feasible_bins] > large_cap_threshold, 0.4 + item * 0.3, 0) # Adjust reward dynamically
        priorities[feasible_bins] += large_cap_reward
        
        # Incentivize bins in a "sweet spot" of utilization to encourage more full bins - Adjust range
        utilization = (bins_remain_cap[feasible_bins] - waste) / (1 - waste) # Assuming bin size is 1
        sweet_spot = (utilization > 0.6) & (utilization < 0.85) # narrower range
        priorities[feasible_bins][sweet_spot] += 0.2 # Reduce sweet spot influence

    else:
        priorities[:] = -np.inf

    return priorities
```
