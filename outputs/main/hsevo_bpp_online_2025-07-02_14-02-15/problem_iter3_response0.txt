```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    n_bins = len(bins_remain_cap)

    # 1. First-Fit-Decreasing inspired (Relative Waste)
    fit_mask = bins_remain_cap >= item
    waste = bins_remain_cap[fit_mask] - item
    relative_waste = waste / (item + 0.0001)  # Relative to item size
    priorities[fit_mask] += np.exp(-5 * relative_waste)  # Exponential decay of priority as waste increases

    # 2. Next-Fit inspired (Bin fullness - Non-linear)
    bin_fullness = bins_remain_cap / (np.max(bins_remain_cap) + 0.0001)  # Normalize
    priorities += np.power(1 - bin_fullness, 3) # Prioritize fuller bins, cubic function

    # 3. Fragmentation Penalty (Aggressive)
    fragmentation_penalty = np.where(bins_remain_cap < item, -1000, 0) #Extreme penalty for bins that cannot fit the item
    priorities += fragmentation_penalty
    
    # 4. Stochastic element (exploration)
    # Add some noise to the priorities to encourage exploration of different bins
    noise = np.random.normal(0, 0.1, size=n_bins)
    priorities += noise

    # 5. Large item incentive (fill space)
    large_space = np.where(bins_remain_cap > item * 1.5, np.tanh(bins_remain_cap - item), 0) #If there is sufficient space fill it up.
    priorities += large_space

    #6. Number of available bins penalty if there are lots of bins, use the fullest.
    if n_bins > 10:
        priorities += (1-bin_fullness)*0.1

    return priorities
```
