```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fit, waste, and stochasticity."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return priorities

    # Fit Score: Prioritize bins that can fit the item. Exponential decay.
    fit_mask = bins_remain_cap >= item
    waste = bins_remain_cap - item
    relative_waste = waste / (item + 1e-6)
    priorities[fit_mask] += np.exp(-relative_waste[fit_mask])

    # Stochastic Element: Introduce randomness for exploration.
    exploration_factor = 0.01
    priorities += np.random.rand(len(bins_remain_cap)) * exploration_factor

    # Fragmentation Penalty: Penalize small gaps.
    fragmentation_threshold = item * 0.2
    fragmentation_penalty = np.where((waste > 0) & (waste < fragmentation_threshold), -0.5, 0)
    priorities += fragmentation_penalty

    return priorities
```
