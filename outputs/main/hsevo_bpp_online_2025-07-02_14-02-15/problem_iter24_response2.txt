```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes best-fit with adaptive penalties and dynamic exploration.
    Emphasizes a balance between bin utilization and preventing extreme fragmentation,
    adjusting strategies based on item size and bin availability. Includes bin history.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item
        
        # Core: Prioritize best fit (minimize waste).  Slightly adjusted to favor smaller waste more strongly.
        priorities[feasible_bins] = 1 / (waste**0.75 + 1e-6)  # Tiny constant to avoid division by zero.  Waste to a fractional power

        # Exploration: Adaptive exploration based on the relative number of feasible bins.
        num_feasible = np.sum(feasible_bins)
        exploration_factor = 0.1 / (1 + num_feasible) # Exploration decreases as more bins are available.
        priorities[feasible_bins] += np.random.rand(num_feasible) * exploration_factor

        # Fragmentation Penalty: Target almost-full bins more intelligently.
        remaining_capacity_ratio = bins_remain_cap[feasible_bins] / 1.0  # Assuming bin size is 1
        almost_full = remaining_capacity_ratio < item * 1.25  # Dynamically adjust threshold based on item size
        priorities[feasible_bins][almost_full] *= 0.5 #Significant penalty for using almost-full bins.

        # Reward for filling bins significantly
        fill_ratio = item / bins_remain_cap[feasible_bins]
        significant_fill = fill_ratio > 0.75
        priorities[feasible_bins][significant_fill] += 0.25

        # Bin History: Penalize bins that have been filled recently.
        try:
            bin_usage_history #Test if the variable exists, exception otherwise
            usage_penalty = bin_usage_history[feasible_bins] * 0.03
            priorities[feasible_bins] -= usage_penalty
        except NameError:
            pass

    else:
        priorities[:] = -np.inf  # No feasible bins

    return priorities
```
