```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes best-fit with adaptive exploration and sweet spot incentive."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item

        # Best-fit prioritization.
        priorities[feasible_bins] = 1 / (waste + 0.00001)

        # Adaptive stochasticity
        exploration_factor = max(0, 0.1 - (item * 0.05))
        num_feasible = np.sum(feasible_bins)
        priorities[feasible_bins] += np.random.rand(num_feasible) * exploration_factor

        # Sweet Spot Incentive, adjust range based on item size.
        sweet_spot_lower = 0.6 - (item * 0.3)
        sweet_spot_upper = 0.9 - (item * 0.2)
        utilization = (bins_remain_cap[feasible_bins] - waste) / 1.0
        sweet_spot = (utilization > sweet_spot_lower) & (utilization < sweet_spot_upper)
        priorities[feasible_bins][sweet_spot] += 0.6

        # Bonus for filling a bin completely.
        almost_full_bin = waste < 0.05
        priorities[feasible_bins][almost_full_bin] += 0.8

    else:
        priorities[:] = -np.inf

    return priorities
```
