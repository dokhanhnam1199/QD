```python
import numpy as np

bin_usage_history = None # Initialize bin_usage_history outside the function

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes best-fit, adaptive exploration, sweet spot, & bin history."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item
        
        # Best-fit prioritization
        priorities[feasible_bins] = 1 / (waste + 1e-6)

        # Adaptive exploration
        num_feasible = np.sum(feasible_bins)
        exploration_factor = 0.02 * min(1, num_feasible * item)
        priorities[feasible_bins] += np.random.rand(num_feasible) * exploration_factor

        # Sweet spot incentive
        utilization_lower = 0.7 - (item * 0.05)  # Adaptive sweet spot
        utilization_upper = 0.9 - (item * 0.025)
        utilization = bins_remain_cap[feasible_bins] - waste
        sweet_spot = (utilization > utilization_lower) & (utilization < utilization_upper)
        priorities[feasible_bins][sweet_spot] += 0.4

        # Bin history penalty
        global bin_usage_history
        if bin_usage_history is not None:
            usage_penalty = bin_usage_history[feasible_bins] * 0.05
            priorities[feasible_bins] -= usage_penalty

    else:
        priorities[:] = -np.inf

    return priorities
```
