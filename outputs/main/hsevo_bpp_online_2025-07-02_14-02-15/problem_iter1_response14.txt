```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Utilizes a combination of best-fit, almost-full, and avoid-waste strategies.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Best-fit component: Higher priority for bins with just enough space
    space_diff = bins_remain_cap - item
    best_fit_priority = np.where(space_diff >= 0, 1 / (space_diff + 0.001), -np.inf) # Adding a small constant to avoid division by zero and prioritize feasible bins
    priorities += 0.6 * best_fit_priority # Weight best-fit more strongly

    # Almost-full component: Give high priority to almost-full bins to finish them off.
    almost_full_threshold = 0.1  # Define "almost full" (remaining capacity is less than this fraction of the bin size, assuming bin size is normalized to 1)
    almost_full_priority = np.where(bins_remain_cap <= almost_full_threshold, 2.0, 0.0)  #High priority for almost full bins
    priorities += 0.3 * almost_full_priority

    # Avoid-waste component: Penalize bins that would leave significant unused space
    waste_threshold = 0.3  # Define what constitutes significant waste
    waste_penalty = np.where((space_diff > waste_threshold) & (space_diff >= 0), -0.5, 0.0)  # negative priority to penalized bins
    priorities += 0.1 * waste_penalty
    return priorities
```
