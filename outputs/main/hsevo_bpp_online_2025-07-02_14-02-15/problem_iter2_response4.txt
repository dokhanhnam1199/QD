```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid heuristic: potential well + relative waste + stochasticity."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return priorities

    # Potential well around near-perfect fits.
    fit_difference = bins_remain_cap - item
    near_fit_mask = fit_difference >= 0
    priorities[near_fit_mask] = np.exp(-np.abs(fit_difference[near_fit_mask]) / (item + 1e-6))

    # Relative wasted space penalty.
    wasted_space = bins_remain_cap - item
    priorities[eligible_bins] -= 0.5 * (wasted_space[eligible_bins] / (bins_remain_cap[eligible_bins] + 1e-6))

    # Stochastic exploration: favor fuller bins with small probability.
    fill_level = 1 - (bins_remain_cap / np.max(bins_remain_cap))
    priorities += 0.01 * np.random.rand(len(bins_remain_cap)) * fill_level**2

    return priorities
```
