```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.zeros_like(bins_remain_cap) - np.inf  # No valid bins

    ratios = np.where(valid_bins, item / bins_remain_cap, np.inf)
    
    # Prioritize bins that can fit the item well, but not too perfectly. Avoid fragmentation.
    # Use a Gaussian-like function centered around the "ideal" fill ratio (e.g., 0.8).

    ideal_ratio = 0.8
    scale = 0.2  # Adjust the sensitivity of the Gaussian

    gaussian_priorities = np.exp(-((ratios - ideal_ratio)**2) / (2 * scale**2))

    # Add a small bonus to bins that are already somewhat full
    occupancy_ratio = 1 - bins_remain_cap / np.max(bins_remain_cap) #normalize by max capacity of all bins, could also normalise by fixed bin capacity
    fullness_bonus = occupancy_ratio * 0.1

    #Give the best bin that can fit item high priority
    can_fit = (bins_remain_cap >= item)

    fit_priority = np.where(can_fit,1,0)
    

    #Combine Gaussian priority, bonus, and large fit penalty
    priorities = gaussian_priorities + fullness_bonus+fit_priority*10

    #if a bin cannot fit the item, its priority should be very small (effectively should not be chosen if possible)
    priorities = np.where(can_fit, priorities, -np.inf)
    

    return priorities
```
