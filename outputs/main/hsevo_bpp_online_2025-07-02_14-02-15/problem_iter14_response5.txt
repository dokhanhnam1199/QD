```python
import numpy as np

best_fit_epsilon = 1e-9

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit, adaptive stochasticity, and dynamic fragmentation penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item

        # Best-fit prioritization with regularization.
        priorities[feasible_bins] = 1 / (waste + best_fit_epsilon)

        # Adaptive stochasticity based on number of feasible bins
        num_feasible = np.sum(feasible_bins)
        stochasticity_factor = 0.1 / (num_feasible + 1e-6)
        priorities[feasible_bins] += np.random.rand(num_feasible) * stochasticity_factor

        # Dynamic fragmentation penalty: Item-aware.
        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]
        almost_full = wasted_space_ratio < 0.05
        penalty_factor = 0.3 + 0.2 * item  # Larger items, stronger penalty
        priorities[feasible_bins][almost_full] *= (1 - min(penalty_factor, 0.5))

        # "Sweet spot" reward: target bins near full capacity.
        fill_ratio = (bins_remain_cap[feasible_bins] - waste) / bins_remain_cap[feasible_bins]
        significantly_filled = fill_ratio > 0.5
        priorities[feasible_bins][significantly_filled] += 0.2

        # Reward for placing into larger bins, threshold adapts to item size.
        large_cap_reward = np.where(bins_remain_cap[feasible_bins] > item * (1.5 + 0.5 * item), 0.25, 0)
        priorities[feasible_bins] += large_cap_reward

    else:
        priorities[:] = -np.inf

    return priorities
```
