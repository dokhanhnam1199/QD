```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Big enough to fit, prioritize bins with smallest remaining capacity but still big enough
    valid_bins = bins_remain_cap >= item
    
    if np.any(valid_bins):
        priorities[valid_bins] = 1 / bins_remain_cap[valid_bins]  # Smaller remain cap gets higher priority
        
        # Further boost bins that fit almost perfectly (avoid fragmentation)
        capacity_diff = bins_remain_cap[valid_bins] - item
        perfect_fit_bonus = np.exp(-10 * capacity_diff) # Exponential decay from 0. Diff around 0 gets highest reward
        
        priorities[valid_bins] += perfect_fit_bonus

    else:
        # If no bin can fit, penalize the fuller bins less severely (hope next item is smaller). In production code, this
	    # could/should never happen assuming proper constraints or a provision to open a new bin when all others are full.
	    # Here we return a very negative value to signal that no bins can take the item for testing completeness
        priorities = np.full_like(bins_remain_cap, -1e9) # Extremely low prio

    return priorities
```
