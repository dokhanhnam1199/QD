```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version considers several factors:
    1.  Remaining capacity of the bin after adding the item (avoiding overfilling).
    2.  Waste introduced by placing the item in the bin.  We want to minimize waste.
    3.  A slight preference for bins that are already somewhat filled (a "first fit decreasing" flavour).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            # Calculate remaining capacity *after* adding the item
            new_remaining_capacity = remaining_capacity - item

            # Waste: Smaller is better (higher priority).  Use reciprocal to convert to priority. Add small constant to avoid division by zero.
            waste_priority = 1 / (new_remaining_capacity + 0.001)  # Small waste --> High Priority

            # Bin Fill Level Preference: Encourage filling bins more completely
            fill_level_priority = (1 - (new_remaining_capacity / 1.0)) ** 2 # assuming bin capacity = 1. Higher the fill level higher priority.

            # Combine priorities:  Weighting can be tuned
            priorities[i] = waste_priority + fill_level_priority
        else:
            priorities[i] = -np.inf  # Impossible to fit, make it the lowest priority

    return priorities
```
