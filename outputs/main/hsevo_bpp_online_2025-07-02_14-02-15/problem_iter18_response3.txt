```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes best-fit with adaptive elements, focusing on simplicity and effectiveness.
    Emphasizes a balance between bin utilization and preventing fragmentation,
    adjusting strategies based on item size and bin availability.  Removes most parameters
    and focuses on core heuristics. Aims for a more robust and interpretable solution.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item
        
        # Core: Prioritize best fit (minimize waste).  Avoid division by zero more robustly.
        priorities[feasible_bins] = 1.0 / (waste + 1e-9)

        # Exploration:  Simpler adaptive exploration based on the number of feasible bins.
        num_feasible = np.sum(feasible_bins)
        exploration_factor = 0.1 / (1 + num_feasible)  # Inverse relationship: less exploration when many options
        priorities[feasible_bins] += np.random.rand(num_feasible) * exploration_factor

        # Fragmentation Penalty: Discourage filling bins that are already very full.
        almost_full_threshold = 0.1  # 10% remaining capacity
        almost_full = waste / bins_remain_cap[feasible_bins] < almost_full_threshold
        priorities[feasible_bins][almost_full] *= 0.5  # Reduce priority by half

        # Sweet spot reward: Incentivize utilization in a reasonable range.
        sweet_spot_lower = 0.5
        sweet_spot_upper = 0.9
        utilization = (bins_remain_cap[feasible_bins] - waste) / 1.0  # Assuming bin size is 1
        sweet_spot = (utilization > sweet_spot_lower) & (utilization < sweet_spot_upper)
        priorities[feasible_bins][sweet_spot] += 0.3 #Slightly increase reward

        # Bin Usage History (Optional): Penalize recently used bins.  Keep it simple.
        try:
            bin_usage_history  # Check if it exists
            usage_penalty = bin_usage_history[feasible_bins] * 0.05 # Reduce the usage penalty
            priorities[feasible_bins] -= usage_penalty
        except NameError:
            pass  # If bin_usage_history doesn't exist, skip this penalty.


    else:
        priorities[:] = -np.inf  # No feasible bins

    return priorities
```
