```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Higher value means higher priority.

    This version prioritizes bins that can accommodate the item
    with minimal remaining space, but also penalizes bins that are
    too full (close to full capacity after placing the item) as well
    as nearly empty bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Filter out bins that cannot accommodate the item
    valid_bins = bins_remain_cap >= item
    
    if not np.any(valid_bins):
        # If no bin can accommodate the item, assign a small, negative priority
        # to all bins to represent that none of them are suitable. This forces the creation
        # of a new bin by a higher level strategy
        return np.full_like(bins_remain_cap, -1.0)

    # Calculate remaining space after placing the item
    remaining_space = bins_remain_cap - item

    # Calculate utilization after placing the item (relative to original capacity, assumed to be 1)
    utilization = 1 - remaining_space
    
    # Calculate score for the valid bins. 
    # A higher score suggests a better fit

    # Score based on how tightly the item fits. Bins with low remaining space get a boost.
    tightness_score = np.exp(-5 * remaining_space) #Exponentially favors small remaining spaces
    #Avoid division by zero. When remaining_space is zero it becomes Inf so clip the max.
    tightness_score = np.clip(tightness_score, a_min = 0, a_max = 1e5)
        
    # Score based on the utilization. Slightly prefer not filling the bin too much.
    utilization_score = np.exp(-2 * (utilization - 0.75)**2) # prefer near 0.75 fill

    #Combine both scores
    priorities[valid_bins] = tightness_score[valid_bins] * utilization_score[valid_bins]
    
    return priorities
```
