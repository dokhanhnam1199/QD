```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes best-fit with adaptive penalties and dynamic exploration,
    with improvements on fragmentation handling and bin selection based on item size.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item
        
        # Core: Prioritize best fit (minimize waste). Adding a small constant to avoid division by zero
        priorities[feasible_bins] = 1 / (waste + 0.00001)

        # Adaptive Stochasticity: Exploration based on number of feasible bins and item size.
        num_feasible = np.sum(feasible_bins)
        exploration_factor = min(0.3, 0.05 * num_feasible * (1 - item))  # Scale exploration by item size
        priorities[feasible_bins] += np.random.rand(num_feasible) * exploration_factor

        # Fragmentation Penalty: More aggressive penalty for bins nearing full capacity.
        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]
        almost_full = wasted_space_ratio < 0.1 #Slightly relaxed to encourage use.
        priorities[feasible_bins][almost_full] *= 0.3  # Increased penalty to discourage further fragmentation.

        # Rewarding larger bins for smaller items
        small_item_large_bin_reward = np.where(bins_remain_cap[feasible_bins] > 1.2 * item + 0.2, 0.5, 0) #Adjusted condition to favor larger bins even more.
        priorities[feasible_bins] += small_item_large_bin_reward

        # Dynamic "Sweet Spot" Incentive: Adapt the range based on item size.
        sweet_spot_lower = 0.6 - (item * 0.3)  #Adjusted parameters for larger impact of item size
        sweet_spot_upper = 0.9 - (item * 0.2)  #Also adjusted to accommodate possible waste.

        utilization = (bins_remain_cap[feasible_bins] - waste) / 1.0  # Assuming bin size is 1
        sweet_spot = (utilization > sweet_spot_lower) & (utilization < sweet_spot_upper)
        priorities[feasible_bins][sweet_spot] += 0.6 #Increased incentive to maximize utilization of bins.

        # Bonus for filling a bin completely (or near-completely)
        almost_full_bin = waste < 0.05
        priorities[feasible_bins][almost_full_bin] += 0.8  #Major reward for filling a bin.

    else:
        priorities[:] = -np.inf  # No feasible bins

    return priorities
```
