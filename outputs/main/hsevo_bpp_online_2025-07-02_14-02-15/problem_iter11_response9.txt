```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes best-fit with adaptive stochasticity and fragmentation handling."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item

        # Best-fit prioritization.
        priorities[feasible_bins] = np.minimum(10 / (waste + 0.0001), 50)

        # Adaptive stochasticity: Less exploration with more feasible bins.
        num_feasible = np.sum(feasible_bins)
        stochasticity_factor = 0.1 / (num_feasible + 0.1)
        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * stochasticity_factor

        # Fragmentation penalty: Apply a moderate penalty for almost-full bins.
        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]
        almost_full = wasted_space_ratio < 0.1
        priorities[feasible_bins][almost_full] *= 0.4

        # Reward filling bins well.
        fill_ratio = item / bins_remain_cap[feasible_bins]
        good_fill = (fill_ratio > 0.7) & (fill_ratio <= 1.0)
        priorities[feasible_bins][good_fill] += 0.5

        # Large item reward.
        large_cap_reward = np.where(bins_remain_cap[feasible_bins] > item * 1.25, 0.25, 0)
        priorities[feasible_bins] += large_cap_reward

        # Overfill penalty.
        overfill_penalty = np.where(fill_ratio > 1, -1, 0)
        priorities[feasible_bins] += overfill_penalty
    else:
        priorities[:] = -np.inf

    return priorities
```
