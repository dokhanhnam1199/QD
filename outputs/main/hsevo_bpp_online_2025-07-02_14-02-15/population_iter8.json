[
  {
    "stdout_filepath": "problem_iter8_response0.txt_stdout.txt",
    "code_path": "problem_iter8_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes best-fit, stochasticity, fragmentation penalty, and bin fill.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n\n    if np.any(feasible_bins):\n        waste = bins_remain_cap[feasible_bins] - item\n\n        # Best-fit prioritization\n        priorities[feasible_bins] = 1 / (waste + 0.0001)\n\n        # Stochasticity (reduced with more feasible bins)\n        num_feasible = np.sum(feasible_bins)\n        stochasticity_factor = 0.1 / (num_feasible + 1e-6)\n        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * stochasticity_factor\n\n        # Fragmentation penalty\n        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]\n        almost_full = wasted_space_ratio < 0.05\n        priorities[feasible_bins][almost_full] *= 0.3\n\n        # Reward significantly filled bins\n        fill_ratio = (bins_remain_cap[feasible_bins] - waste) / bins_remain_cap[feasible_bins]\n        significantly_filled = fill_ratio > 0.5\n        priorities[feasible_bins][significantly_filled] += 0.2\n\n        # Large item reward if sufficient capacity exists\n        large_cap_reward = np.where(bins_remain_cap[feasible_bins] > item * 2, 0.25, 0)\n        priorities[feasible_bins] += large_cap_reward\n\n    else:\n        priorities[:] = -np.inf\n\n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "obj": 2.3534104507379476,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response1.txt_stdout.txt",
    "code_path": "problem_iter8_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes best-fit, stochasticity, sweet spot utilization, large item reward.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n\n    if np.any(feasible_bins):\n        waste = bins_remain_cap[feasible_bins] - item\n        \n        # Prioritize based on inverse waste (best fit)\n        priorities[feasible_bins] = 1 / (waste + 0.0001)\n        \n        # Add stochasticity, scaled by remaining capacity\n        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.1 * (bins_remain_cap[feasible_bins]/np.max(bins_remain_cap))\n\n        # Penalize almost full bins to prevent fragmentation\n        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]\n        almost_full = wasted_space_ratio < 0.1\n        priorities[feasible_bins][almost_full] *= 0.5\n\n        # Large item high reward\n        large_cap_reward = np.where(bins_remain_cap[feasible_bins] > item*2,0.5,0)\n        priorities[feasible_bins] += large_cap_reward\n        \n        # Incentivize bins in a \"sweet spot\" of utilization\n        utilization = (bins_remain_cap[feasible_bins] - waste) / 1  # Assuming bin size is 1\n        sweet_spot = (utilization > 0.5) & (utilization < 0.75)\n        priorities[feasible_bins][sweet_spot] += 0.3\n\n    else:\n        priorities[:] = -np.inf\n\n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 83.45632229756681,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response2.txt_stdout.txt",
    "code_path": "problem_iter8_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes best-fit, adds stochasticity, penalizes fragmentation, and rewards large items.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n\n    if np.any(feasible_bins):\n        waste = bins_remain_cap[feasible_bins] - item\n        \n        # Prioritize based on inverse waste (best fit)\n        priorities[feasible_bins] = 1 / (waste + 0.0001)\n        \n        # Add stochasticity (exploration) - scale with item size\n        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.1 * item\n\n        # Penalize almost full bins to prevent fragmentation\n        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]\n        almost_full = wasted_space_ratio < 0.1\n        priorities[feasible_bins][almost_full] *= 0.5 # Reduce priority of almost full bins\n\n        # Reward filling bins significantly but not completely\n        significant_fill = (item / bins_remain_cap[feasible_bins]) > 0.7\n        priorities[feasible_bins][significant_fill] += 0.2\n\n        #Large item high reward - filling up space and avoiding future placement issues.\n        large_cap_reward = np.where(bins_remain_cap[feasible_bins] > item*2,0.25,0) #incentivise large bins if enough capacity exists.\n        priorities[feasible_bins] += large_cap_reward\n\n    else:\n        priorities[:] = -np.inf\n\n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 7.728360590347029,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response3.txt_stdout.txt",
    "code_path": "problem_iter8_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes best fit, reduces fragmentation, adds exploration, utilization bonus.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n\n    if np.any(feasible_bins):\n        waste = bins_remain_cap[feasible_bins] - item\n        priorities[feasible_bins] = np.exp(-5 * (waste / item))  # Prioritize smaller waste\n\n        # Fragmentation penalty\n        fragment_threshold_low = 0.1\n        fragment_threshold_high = 0.25\n        fragment_mask = (bins_remain_cap[feasible_bins] - item > fragment_threshold_low) & (bins_remain_cap[feasible_bins] - item < fragment_threshold_high)\n        priorities[feasible_bins][fragment_mask] -= 0.5\n\n        # Utilization bonus: Reward bins that become nearly full after packing\n        post_fill_ratio = (bins_remain_cap[feasible_bins] - item) / bins_remain_cap[feasible_bins]\n        nearly_full_mask = post_fill_ratio < 0.1\n        priorities[feasible_bins][nearly_full_mask] += 0.3  # Give a utilization bonus\n\n        # Stochasticity, scaled to remaining capacity\n        priorities += np.random.rand(len(bins_remain_cap)) * 0.01 * (bins_remain_cap.mean() / (bins_remain_cap.std()+1e-6)) #scale by mean/std\n\n    else:\n        priorities[:] = -np.inf\n\n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.168328679696844,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response4.txt_stdout.txt",
    "code_path": "problem_iter8_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes best-fit, adds stochasticity, and dynamic fragmentation penalty.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n\n    if np.any(feasible_bins):\n        waste = bins_remain_cap[feasible_bins] - item\n\n        # Best-fit prioritization\n        priorities[feasible_bins] = 10 / (waste + 0.0001)\n\n        # Stochasticity for exploration\n        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.05\n\n        # Dynamic fragmentation penalty\n        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]\n        almost_full = wasted_space_ratio < 0.1\n        priorities[feasible_bins][almost_full] *= 0.5  # Aggressive penalty\n\n        # Reward for bins that will be well-filled\n        fill_ratio = (bins_remain_cap[feasible_bins] - waste) / bins_remain_cap[feasible_bins]\n        priorities[feasible_bins] *= (1 + fill_ratio * 0.2)\n\n        small_remaining = bins_remain_cap[feasible_bins] - item < 0.1\n        priorities[feasible_bins][small_remaining] = -np.inf\n\n    else:\n        priorities[:] = -np.inf\n\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.01874750698045,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response5.txt_stdout.txt",
    "code_path": "problem_iter8_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins: best-fit, stochasticity, fragmentation penalty, utilization sweet spot.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    fit_mask = bins_remain_cap >= item\n\n    if not np.any(fit_mask):\n        return priorities - np.inf\n\n    waste = bins_remain_cap[fit_mask] - item\n    priorities[fit_mask] = 1.0 / (waste + 0.0001)\n\n    wasted_space_ratio = waste / bins_remain_cap[fit_mask]\n    nearly_full = wasted_space_ratio < 0.1\n    priorities[fit_mask][nearly_full] += 0.5 # reward near full bins\n\n    # Stochasticity\n    exploration_factor = 0.01\n    priorities[fit_mask] += np.random.rand(np.sum(fit_mask)) * exploration_factor\n\n    # Fragmentation Penalty\n    fragmentation_threshold = item * 0.2\n    fragmentation_penalty = np.where(waste < fragmentation_threshold, -0.3, 0) # reduce penalty\n    priorities[fit_mask] += fragmentation_penalty\n    return priorities",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.527323494216204,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response6.txt_stdout.txt",
    "code_path": "problem_iter8_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes best-fit, adaptive stochasticity, fragmentation penalty, bin fill, and large item reward.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n\n    if np.any(feasible_bins):\n        waste = bins_remain_cap[feasible_bins] - item\n        \n        # Best-fit: Stronger, but capped.\n        priorities[feasible_bins] = np.minimum(10 / (waste + 0.0001), 50) # Capped inverse waste\n\n        # Adaptive stochasticity: Fewer feasible bins, more exploration.\n        num_feasible = np.sum(feasible_bins)\n        stochasticity_factor = 0.1 / (num_feasible + 0.1)  #Smoother and better bounds.\n        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * stochasticity_factor\n\n        # Fragmentation penalty: Moderate, based on waste ratio.\n        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]\n        almost_full = wasted_space_ratio < 0.1\n        priorities[feasible_bins][almost_full] *= 0.4  # Moderate fragmentation penalty\n\n        # Filling bins well: Reward optimal fill.\n        fill_ratio = item / bins_remain_cap[feasible_bins]\n        good_fill = (fill_ratio > 0.7) & (fill_ratio <= 1.0)\n        priorities[feasible_bins][good_fill] += 0.5 # Moderate reward\n\n        # Large item reward if bin has sufficient capacity.\n        large_cap_reward = np.where(bins_remain_cap[feasible_bins] > item * 1.25, 0.25, 0) #Slightly less restrictive\n        priorities[feasible_bins] += large_cap_reward\n\n         #Moderate penalty if item fills bin above a certain threshold.\n        overfill_penalty = np.where(fill_ratio>1, -1,0)\n        priorities[feasible_bins]+= overfill_penalty\n\n    else:\n        priorities[:] = -np.inf\n\n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.058635819704831,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response7.txt_stdout.txt",
    "code_path": "problem_iter8_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes best-fit, encourages fullness, and penalizes fragmentation.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Best-Fit Prioritization (Minimize Waste)\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):\n        waste = bins_remain_cap[fit_mask] - item\n        relative_waste = waste / (item + 0.0001)\n        priorities[fit_mask] += np.exp(-5 * relative_waste)\n\n    # 2. Encourage Fuller Bins\n    bin_fullness = bins_remain_cap / (np.max(bins_remain_cap) + 0.0001)\n    priorities += np.power(1 - bin_fullness, 3)\n\n    # 3. Fragmentation Penalty\n    fragment_threshold_low = 0.1\n    fragment_threshold_high = 0.25\n    fragment_mask = (bins_remain_cap - item > fragment_threshold_low) & (bins_remain_cap - item < fragment_threshold_high)\n    priorities[fragment_mask] -= 0.5\n\n    # 4. Stochastic Exploration\n    priorities += np.random.rand(len(bins_remain_cap)) * 0.01\n\n    return priorities",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response8.txt_stdout.txt",
    "code_path": "problem_iter8_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines best-fit, fragmentation penalty, and fill ratio reward.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    fit_mask = bins_remain_cap >= item\n    \n    if not np.any(fit_mask):\n        return priorities - np.inf\n    \n    waste = bins_remain_cap[fit_mask] - item\n    \n    # Best-fit prioritization\n    priorities[fit_mask] = 1.0 / (waste + 0.0001)\n    \n    # Fragmentation penalty\n    wasted_space_ratio = waste / bins_remain_cap[fit_mask]\n    nearly_full = wasted_space_ratio < 0.1\n    priorities[fit_mask][nearly_full] -= 0.5\n    \n    # Fill ratio reward\n    fill_ratio = item / bins_remain_cap[fit_mask]\n    good_fill = (fill_ratio > 0.7) & (fill_ratio <= 1.0)\n    priorities[fit_mask][good_fill] += 0.5\n    \n    return priorities",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.048663741523748,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response9.txt_stdout.txt",
    "code_path": "problem_iter8_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Hybrid heuristic: Best-fit, stochasticity, fragmentation penalty, utilization sweet spot, and adaptive rewards.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n\n    if np.any(feasible_bins):\n        waste = bins_remain_cap[feasible_bins] - item\n        \n        # Best-fit prioritization (stronger)\n        priorities[feasible_bins] = 10 / (waste + 0.0001)\n\n        # Adaptive stochasticity (reduce exploration as bins fill)\n        exploration_factor = max(0.01, 0.1 * np.mean(bins_remain_cap)) # Dynamic range\n        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * exploration_factor\n\n        # Fragmentation penalty (tuned threshold and penalty)\n        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]\n        almost_full = wasted_space_ratio < 0.1\n        priorities[feasible_bins][almost_full] *= 0.2 # Strong penalty\n\n        # Large capacity reward (adaptive threshold)\n        large_cap_threshold = item * 1.25 # Adjusted threshold\n        large_cap_reward = np.where(bins_remain_cap[feasible_bins] > large_cap_threshold, 0.5, 0)\n        priorities[feasible_bins] += large_cap_reward\n        \n        # Sweet spot utilization (encourage fuller bins)\n        utilization = (bins_remain_cap[feasible_bins] - waste) # Estimate utilization after placement.\n        utilization /= 1 # Assuming bin size is 1\n        sweet_spot = (utilization > 0.6) & (utilization < 0.8)\n        priorities[feasible_bins][sweet_spot] += 0.3\n\n    else:\n        priorities[:] = -np.inf\n\n    return priorities",
    "response_id": 9,
    "tryHS": false,
    "obj": 2.253689668927018,
    "exec_success": true
  }
]