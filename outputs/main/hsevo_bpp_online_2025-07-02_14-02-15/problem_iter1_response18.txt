```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First priority: Can the item even fit? If not, lowest priority
    fit_mask = bins_remain_cap >= item
    priorities[~fit_mask] = -np.inf  # Ensures bins that can't fit have minimal priority

    # Second priority: How full will the bin be if we add the item? Prefer to fill bins
    remaining_after_fit = bins_remain_cap[fit_mask] - item
    fill_ratio = 1 - (remaining_after_fit / bins_remain_cap[fit_mask])  # Ratio of bin filled

    # Third priority: Penalize fragmentation - higher priority to bins with smaller remaining capacity after placement
    fragmentation_penalty = -remaining_after_fit
    
    #Combine the above to create an informed heuristic
    priorities[fit_mask] = fill_ratio + 0.5 * fragmentation_penalty

    return priorities
```
