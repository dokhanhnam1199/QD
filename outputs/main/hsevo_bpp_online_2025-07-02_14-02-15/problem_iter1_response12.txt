```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This heuristic favors bins that are nearly full after placing the item,
    while also discouraging bins that would be overfilled. A penalty is applied
    for bins that cannot accommodate the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item to each bin.
    new_remain_cap = bins_remain_cap - item

    # Initialize priorities with a small value.
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item (remaining capacity >= 0).
    valid_bins = new_remain_cap >= 0

    # For valid bins, calculate a score based on the inverse of the new remaining capacity.
    # This encourages filling bins as much as possible.  Add a small epsilon
    # to avoid division by zero if the item perfectly fills the bin.
    epsilon = 1e-9
    priorities[valid_bins] = 1.0 / (new_remain_cap[valid_bins] + epsilon)

    # Further refine by considering how close the item's size is to perfect filling.
    # Prioritize bins where adding the item brings capacity closer to zero.
    # Larger negative values of new_remain_cap indicate bins nearly perfectly filled.

    # Add a small bonus to valid bins with large items
    item_size_normalized = item #no normalization because item is the only parameter here
    priorities[valid_bins] = priorities[valid_bins] + item_size_normalized

    return priorities
```
