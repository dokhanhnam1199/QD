```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Electrify the selection!
    # Heuristic 1: Fill nearly full bins first (but avoid overflowing).
    # Heuristic 2: Prioritize bins that can accommodate the item perfectly,
    #             to minimize fragmentation. If there's a perfect fit, it dominates.
    # Heuristic 3: If no perfect fit, prefer bins that can fit the item, giving higher
    #             priority to those with smaller remaining space *after* the item is placed.
    # Heuristic 4: Heavily penalize bins that cannot accommodate the item.
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate the remaining capacity after placing the item
    remaining_after_placement = bins_remain_cap - item

    # Penalize bins that cannot accommodate the item
    infeasible = remaining_after_placement < 0
    priorities[infeasible] = -np.inf  # A cosmic force repels the impossible!

    # Perfect fit: Infinite priority!
    perfect_fit = np.isclose(remaining_after_placement, 0)
    if np.any(perfect_fit):
        priorities[perfect_fit] = np.inf # The hum of resonance compels selection!
        return priorities # The perfect match dominates.

    # Bins that can fit, prioritize by how full they become *after* the item is placed
    # Higher is better: closer to full, lower fragmentation. We want to minimize waste.
    feasible = remaining_after_placement >= 0

    if np.any(feasible):
      priorities[feasible] = 1.0 / (remaining_after_placement[feasible] + 1e-9) # Avoid division by zero. Make the bin most full
      priorities[feasible] = priorities[feasible]  + (bins_remain_cap[feasible]/ np.sum(bins_remain_cap[feasible])) #Prioritize lower index bin
      #Normalize
      priorities[feasible] = priorities[feasible]/np.max(priorities[feasible])
    return priorities
```
