```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes best-fit, adds stochasticity, and dynamic fragmentation penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item

        # Best-fit prioritization
        priorities[feasible_bins] = 10 / (waste + 0.0001)

        # Stochasticity for exploration
        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * 0.05

        # Dynamic fragmentation penalty
        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]
        almost_full = wasted_space_ratio < 0.1
        priorities[feasible_bins][almost_full] *= 0.5  # Aggressive penalty

        # Reward for bins that will be well-filled
        fill_ratio = (bins_remain_cap[feasible_bins] - waste) / bins_remain_cap[feasible_bins]
        priorities[feasible_bins] *= (1 + fill_ratio * 0.2)

        small_remaining = bins_remain_cap[feasible_bins] - item < 0.1
        priorities[feasible_bins][small_remaining] = -np.inf

    else:
        priorities[:] = -np.inf

    return priorities
```
