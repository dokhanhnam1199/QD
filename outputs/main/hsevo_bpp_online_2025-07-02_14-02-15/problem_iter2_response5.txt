```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on tightness, utilization, and a small stochastic element.
    Combines tightness and utilization scores with added noise.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins = bins_remain_cap >= item
    
    if not np.any(valid_bins):
        return np.full_like(bins_remain_cap, -1.0)

    remaining_space = bins_remain_cap - item
    utilization = 1 - remaining_space

    tightness_score = np.exp(-5 * remaining_space)
    tightness_score = np.clip(tightness_score, a_min = 0, a_max = 1e5)
    utilization_score = np.exp(-2 * (utilization - 0.75)**2)

    priorities[valid_bins] = tightness_score[valid_bins] * utilization_score[valid_bins]

    # Add small stochastic noise for exploration
    noise = np.random.normal(0, 0.01, size=bins_remain_cap.shape)
    priorities[valid_bins] += noise[valid_bins]

    return priorities
```
