```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes best-fit with adaptive exploration, dynamic sweet spot, and item-aware penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item
        priorities[feasible_bins] = 1 / (waste + 0.00001)

        num_feasible = np.sum(feasible_bins)
        capacity_std = np.std(bins_remain_cap[feasible_bins])
        exploration_factor = min(0.3, 0.05 * num_feasible + 0.1 * capacity_std)
        priorities[feasible_bins] += np.random.rand(num_feasible) * exploration_factor

        wasted_space_ratio = waste / bins_remain_cap[feasible_bins]
        almost_full = wasted_space_ratio < 0.1
        penalty = 0.5 + 0.2 * item  # Larger items, higher penalty
        priorities[feasible_bins][almost_full] *= max(0, 1 - penalty)

        sweet_spot_lower = 0.6 - (item * 0.2) - (capacity_std * 0.02)
        sweet_spot_upper = 0.8 - (item * 0.1) + (capacity_std * 0.02)
        utilization = (bins_remain_cap[feasible_bins] - waste) / 1.0
        sweet_spot = (utilization > sweet_spot_lower) & (utilization < sweet_spot_upper)
        priorities[feasible_bins][sweet_spot] += 0.5

    else:
        priorities[:] = -np.inf

    return priorities
```
