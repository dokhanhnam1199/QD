```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes best fit, reduces fragmentation, adds exploration, utilization bonus."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item
        priorities[feasible_bins] = np.exp(-5 * (waste / item))  # Prioritize smaller waste

        # Fragmentation penalty
        fragment_threshold_low = 0.1
        fragment_threshold_high = 0.25
        fragment_mask = (bins_remain_cap[feasible_bins] - item > fragment_threshold_low) & (bins_remain_cap[feasible_bins] - item < fragment_threshold_high)
        priorities[feasible_bins][fragment_mask] -= 0.5

        # Utilization bonus: Reward bins that become nearly full after packing
        post_fill_ratio = (bins_remain_cap[feasible_bins] - item) / bins_remain_cap[feasible_bins]
        nearly_full_mask = post_fill_ratio < 0.1
        priorities[feasible_bins][nearly_full_mask] += 0.3  # Give a utilization bonus

        # Stochasticity, scaled to remaining capacity
        priorities += np.random.rand(len(bins_remain_cap)) * 0.01 * (bins_remain_cap.mean() / (bins_remain_cap.std()+1e-6)) #scale by mean/std

    else:
        priorities[:] = -np.inf

    return priorities
```
