```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes best-fit with adaptive exploration and capacity-aware adjustments.
    Focuses on balancing bin utilization and preventing fragmentation, adjusting exploration
    based on the relative item size to the available bin capacities.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item
        
        # Core: Prioritize best fit (minimize waste).  Slightly stronger preference for tighter fits.
        priorities[feasible_bins] = 1 / (waste + 1e-9) #Avoid division by zero

        # Adaptive Exploration: Scale exploration based on item size relative to bin capacities.
        # Smaller items in larger bins trigger more exploration, and vice versa.
        relative_item_size = item / bins_remain_cap[feasible_bins]
        exploration_factor = 0.1 * (1 - relative_item_size)  # Higher exploration for smaller items relative to bin size
        exploration_factor = np.clip(exploration_factor, 0.01, 0.2) #Clamp exploration factor
        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * exploration_factor

        # Capacity-Aware Fragmentation Penalty: Penalize bins that, after packing,
        # will have a remaining capacity close to common item sizes.
        # Idea: avoid leaving bins with just enough space for frequently occurring items.

        # Example: Assume common item sizes are around 0.2, 0.3, 0.4 (can be dynamically adjusted)
        common_item_sizes = np.array([0.2, 0.3, 0.4])
        remaining_capacity_after_packing = waste
        
        fragmentation_penalty = np.zeros_like(remaining_capacity_after_packing)
        for size in common_item_sizes:
            fragmentation_penalty += np.exp(-np.abs(remaining_capacity_after_packing - size) / 0.05)  # Gaussian-like penalty
            
        priorities[feasible_bins] -= 0.05 * fragmentation_penalty # Apply penalty

        # Small Item Placement Boost: Give a small bonus to bins that are significantly larger than the item.
        # Helps distribute smaller items more evenly.
        large_bin_bonus = np.where(bins_remain_cap[feasible_bins] > 2 * item, 0.05, 0.0)  # Increased threshold
        priorities[feasible_bins] += large_bin_bonus
    else:
        priorities[:] = -np.inf  # No feasible bins

    return priorities
```
