```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # 1. Feasibility check: Disqualify bins that are too small.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf  # Strongly discourage infeasible bins

    # Consider only feasible bins now.

    # 2. First Fit Decreasing (FFD) inspired:
    # Prefer bins that are filled more (less remaining capacity) amongst feasible ones.
    # But give it a boost if it almost perfectly fits, or discourage if wastes too much.
    feasible_mask = ~infeasible_mask
    if np.any(feasible_mask):
        remaining_capacity_feasible = bins_remain_cap[feasible_mask]
        
        # Encourage near perfect fits
        near_perfect_fit = np.exp(-np.abs(remaining_capacity_feasible - item) / (0.1 * item + 1e-6)) # gaussian around item

        #Discourage bins that has item+0.2* item less capacity.
        waste_penalty = -np.exp( (remaining_capacity_feasible-item)/(0.2 * item + 1e-6))

        # base priority on the inverse capacity * near perfect fit ( or waste)
        priorities[feasible_mask] = (near_perfect_fit + waste_penalty)/ remaining_capacity_feasible
       # Scale priorities to avoid large numbers which may cause errors
        priorities[feasible_mask] = priorities[feasible_mask] / (np.max(np.abs(priorities[feasible_mask])) + 1e-6)
    
    return priorities
```
