```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes best-fit with adaptive stochasticity and dynamic sweet spot."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item

        # Best-fit prioritization
        priorities[feasible_bins] = 10 / (waste + 0.0001)
        priorities[feasible_bins] = np.minimum(priorities[feasible_bins], 50)

        # Adaptive stochasticity
        num_feasible = np.sum(feasible_bins)
        stochasticity_factor = 0.1 * (1 - item) / (num_feasible + 0.1)
        priorities[feasible_bins] += np.random.rand(num_feasible) * stochasticity_factor

        # Dynamic sweet spot incentive
        sweet_spot_lower = 0.6 - (item * 0.1)
        sweet_spot_upper = 0.8 - (item * 0.05)

        utilization = (bins_remain_cap[feasible_bins] - waste) / 1.0 # binsize fixed at 1
        sweet_spot = (utilization > sweet_spot_lower) & (utilization < sweet_spot_upper)
        priorities[feasible_bins][sweet_spot] += 0.5

    else:
        priorities[:] = -np.inf

    return priorities
```
