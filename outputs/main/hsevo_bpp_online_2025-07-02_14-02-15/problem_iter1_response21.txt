```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins with sufficient capacity and a closer fit to the item size,
    while also penalizing bins that are too full or would become nearly full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that have sufficient remaining capacity.
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # If no bin has sufficient capacity, return lowest priority.
        return priorities

    # Calculate wasted space if the item were added to each bin.
    wasted_space = bins_remain_cap - item

    # Priority 1: Prefer bins with minimal wasted space *relative* to the item size.
    # A small amount of wasted space for a large item is better than the same
    # amount of wasted space for a small item.
    priorities[eligible_bins] += 1.0 / (1e-9 + wasted_space[eligible_bins] / item)

    # Priority 2: Bins that are almost full after placing the item are undesirable (stability penalty)
    almost_full = (wasted_space < 0.1 * item) & eligible_bins # adjust 0.1
    priorities[almost_full] -= 0.5 # Significant penalty to deter nearly-full bins

    # Priority 3: Heavily Penalize already full/nearly-full bins
    small_bins = (bins_remain_cap < item*1.1)
    priorities[small_bins] -= 10

    return priorities
```
