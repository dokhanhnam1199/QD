```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes best-fit with adaptive penalties and dynamic exploration.
    Emphasizes a balance between bin utilization and preventing extreme fragmentation,
    adjusting strategies based on item size and bin availability. Includes bin history.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        waste = bins_remain_cap[feasible_bins] - item
        
        # Core: Prioritize best fit (minimize waste).  Higher score for better fit
        priorities[feasible_bins] = 1.0 / (waste + 1e-9)  # Tiny constant to avoid division by zero

        # Exploration:  Reduce exploration as bin fullness increases.
        bin_fullness = 1.0 - bins_remain_cap[feasible_bins]  # assuming bin capacity is 1.0
        exploration_factor = 0.1 * (1.0 - bin_fullness) * item # Reduced overall exploration
        priorities[feasible_bins] += np.random.rand(np.sum(feasible_bins)) * exploration_factor

        # Fragmentation Penalty: Focus on bins nearing full capacity.
        almost_full_threshold = 0.9 # Increased threshold for almost full
        almost_full = bins_remain_cap[feasible_bins] < (1 - almost_full_threshold)
        priorities[feasible_bins][almost_full] *= 0.5  # Significant penalty, avoid filling nearly full bins

        # Reward filling "sweet spot" to encourage efficient bin use.
        sweet_spot_lower = 0.2 + 0.1*item # Item-dependent sweet spot
        sweet_spot_upper = 0.7 - 0.1*item
        bin_utilization = 1.0 - bins_remain_cap[feasible_bins]
        sweet_spot = (bin_utilization > sweet_spot_lower) & (bin_utilization < sweet_spot_upper)
        priorities[feasible_bins][sweet_spot] += 0.3  # Add reward for sweet spot.

        # Small item bonus for bins with relatively large remaining capacity
        small_item_threshold = 0.2
        if item < small_item_threshold:
            large_bin_bonus = bins_remain_cap[feasible_bins] > 0.5 #Give bonus only when remain cap is large
            priorities[feasible_bins][large_bin_bonus] += 0.2

        # Usage history penalty (if available).
        try:
            bin_usage_history  # Check if bin_usage_history exists
            usage_penalty = bin_usage_history[feasible_bins] * 0.05  # Further reduced penalty
            priorities[feasible_bins] -= usage_penalty
        except NameError:
            pass  # If bin_usage_history is not available, continue without it

    else:
        priorities[:] = -np.inf  # No feasible bins

    return priorities
```
