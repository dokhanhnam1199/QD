```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid heuristic: FFD-inspired + waste penalty + perfect fit bonus."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # FFD-inspired: Prioritize bins that can fit the item with less waste
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        priorities[fit_mask] += 1.0 / (bins_remain_cap[fit_mask] - item + 0.0001)

    # Waste penalty: Penalize bins if item fits but creates high relative waste
    if np.any(fit_mask):
        remaining_space = bins_remain_cap[fit_mask] - item
        waste_ratio = remaining_space / bins_remain_cap[fit_mask]
        priorities[fit_mask] -= waste_ratio * 0.5  # Scale to avoid overpowering other components

    # Perfect fit bonus: Reward bins where the item fits almost perfectly
    if np.any(fit_mask):
        remaining_space = bins_remain_cap[fit_mask] - item
        perfect_fit_bonus = np.exp(-5 * remaining_space)  # Adjusted exponent
        priorities[fit_mask] += perfect_fit_bonus * 0.2 #scale the bonus

    # Infeasible penalty
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    return priorities
```
