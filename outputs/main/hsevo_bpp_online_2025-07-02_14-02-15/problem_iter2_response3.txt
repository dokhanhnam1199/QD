```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines waste minimization, fragmentation penalty, and stochastic exploration."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        return priorities

    wasted_space = bins_remain_cap - item
    priorities[eligible_bins] += 1.0 / (1e-9 + wasted_space[eligible_bins] / item) # Relative waste

    almost_full = (wasted_space < 0.1 * item) & eligible_bins
    priorities[almost_full] -= 0.5

    # Stochastic element: Prefer bins with smaller remaining capacity, but add noise.
    if np.any(eligible_bins):
        noise = np.random.normal(0, 0.01, size=bins_remain_cap.shape)  # Small noise
        priorities[eligible_bins] += (1 - bins_remain_cap[eligible_bins]) + noise[eligible_bins]
    return priorities
```
