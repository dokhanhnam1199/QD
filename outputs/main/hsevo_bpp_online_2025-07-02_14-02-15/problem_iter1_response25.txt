```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    A new perspective! Bins closer in capacity to the item are favored, but with
    a penalty for near-overflow. Larger remaining capacities are also favored to
    ensure we don't fill all bins with small items prematurely.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero. Assign a very low priority in this case.
    valid_bins = bins_remain_cap > 0
    if not np.any(valid_bins):
        return np.full_like(bins_remain_cap, -np.inf)

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate the difference between remaining capacity and item size.
    capacity_diff = bins_remain_cap - item

    # Favor bins where the item fits well. Penalize negative differences severely.
    fit_score = np.exp(-np.abs(capacity_diff) / item)
    fit_score[capacity_diff < 0] = -np.inf # Item does not fit

    # Favor bins that are not too full.  Apply a moderate remaining capacity score.
    capacity_score = bins_remain_cap / np.sum(bins_remain_cap) if np.sum(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap) # Normalize for consistent impact. Avoid division by zero when all bins are empty

    #Combine to create total Priority
    priorities = fit_score + capacity_score

    # Mask bins with remaining capacity equal to 0 with -inf
    priorities[bins_remain_cap <= 0] = -np.inf

    return priorities
```
