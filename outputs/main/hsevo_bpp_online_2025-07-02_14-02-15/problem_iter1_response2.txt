```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Initialize priorities to a low default value.
    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf

    # Identify bins that can actually hold the item.
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        #If no bins can fit the item, return the array of -inf priority values
        return priorities

    # Calculate the waste if the item is placed in each valid bin.
    waste = bins_remain_cap[valid_bins] - item

    # Prioritize bins based on minimizing waste (smaller waste is better).  Avoid zero division error using np.where.
    priorities[valid_bins] = np.where(waste > 0, 1.0 / (waste + 0.00000001), 100000000)  # Use inverse of waste

    # Add a bonus for bins that are already relatively full to encourage completing them.
    fill_ratios = (1 - bins_remain_cap[valid_bins] / bins_remain_cap[valid_bins].max())
    priorities[valid_bins] += fill_ratios  # adding a small fill ratio helps filling bins faster.
    return priorities
```
