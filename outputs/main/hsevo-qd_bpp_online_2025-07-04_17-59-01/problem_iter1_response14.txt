```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Eliminate bins that cannot fit the item
    eligible_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if np.any(eligible_bins):
        remaining_capacity = bins_remain_cap[eligible_bins]
        # Calculate wasted space if item is placed in bin
        wasted_space = remaining_capacity - item
        # Prioritize bins with smallest wasted space (First-Fit Decreasing like)
        priorities[eligible_bins] = 1.0 / (wasted_space + 1e-6)  # Adding a small constant to avoid division by zero
        # Further prioritize bins close to being full *after* placement. This encourages bin completion.
        post_fill_level = (item + (bins_remain_cap[eligible_bins] - wasted_space) - wasted_space)
        priorities[eligible_bins] += (1.0 - wasted_space / (item + wasted_space + 1e-6))**2

    # Penalize bins that cannot fit the item
    else:
        priorities = -np.ones_like(bins_remain_cap, dtype=float) * 1e9  # Very low priority

    return priorities
```
