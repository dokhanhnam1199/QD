import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                  ratio_priority_invalid_value: float = -6837293909.394718,
                  gap_priority_invalid_value: float = -9210795515.048298,
                  almost_full_penalty_factor: float = 90.7315417575374,
                  gap_addition: float = 0.00010047219444553995,
                  ratio_weight: float = 0.7652594842749099,
                  min_bins_remain_cap: float = 8.49384518167824e-09) -> np.ndarray:
    """
    Combines ratio-based and gap-based approaches with penalty.
    """
    # Avoid division by zero
    bins_remain_cap = np.where(bins_remain_cap == 0, min_bins_remain_cap, bins_remain_cap)

    # Calculate gap, handling infeasible bins
    gap = bins_remain_cap - item
    gap = np.where(gap < 0, -1, gap)

    # Ratio-based priority (normalized item size relative to bin capacity)
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(gap >= 0, ratio_priority, ratio_priority_invalid_value)

    # Gap-based priority + Almost full penalty
    almost_full_penalty = np.exp(-almost_full_penalty_factor * gap)
    almost_full_penalty = np.where(gap >= 0, almost_full_penalty, 0)
    gap_priority = np.where(gap >= 0, (bins_remain_cap / (gap + gap_addition)) - almost_full_penalty, gap_priority_invalid_value)


    # Combine ratio and gap based priorities
    priorities = ratio_weight * ratio_priority + (1 - ratio_weight) * gap_priority

    return priorities
