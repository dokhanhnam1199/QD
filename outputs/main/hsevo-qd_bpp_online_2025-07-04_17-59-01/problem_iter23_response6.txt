```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines ratio, gap, capacity, fill level, and dynamic penalty with adaptive weights.
    """
    epsilon = 1e-9
    feasible = bins_remain_cap >= item
    num_feasible = np.sum(feasible)

    if num_feasible == 0:
        return -bins_remain_cap

    ratios = item / np.where(bins_remain_cap <= 0, epsilon, bins_remain_cap)
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)

    gap = bins_remain_cap - item
    gap = np.where(feasible, gap, -1)
    avg_cap = np.mean(bins_remain_cap[feasible]) if num_feasible > 0 else np.mean(bins_remain_cap)
    almost_full_penalty = np.exp(-50 * gap / (avg_cap + epsilon))
    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)
    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)

    max_cap = np.max(bins_remain_cap[feasible]) if num_feasible > 0 else np.max(bins_remain_cap)
    capacity_priority = bins_remain_cap / (max_cap + epsilon)
    capacity_priority = np.where(feasible, capacity_priority, -1e9)

    fill_level = 1.0 - (bins_remain_cap / (np.max(bins_remain_cap) + epsilon))
    fill_level_priority = -fill_level
    fill_level_priority = np.where(feasible, fill_level_priority, -1e9)

    # Best Fit Priority
    best_fit_priority = np.where(feasible, -gap, -1e9)
    if np.any(feasible):  # Check if any feasible bin exists before calculating
        min_gap = np.min(best_fit_priority[feasible])
        max_gap = np.max(best_fit_priority[feasible])
        if max_gap > min_gap:  # Avoid division by zero if max_gap == min_gap
            best_fit_priority = np.where(feasible, (best_fit_priority - min_gap) / (max_gap - min_gap + epsilon), -1e9)
        else:
             best_fit_priority = np.where(feasible, 0.5, -1e9) # all bins are same, set to 0.5 to not impact


    bin_diversity = np.std(bins_remain_cap)
    diversity_factor = min(1.0, bin_diversity)

    # Adaptive Weights
    avg_fill = np.mean(fill_level[feasible]) if num_feasible > 0 else np.mean(fill_level)

    best_fit_weight = min(0.5, avg_fill)
    ratio_weight = 0.2 * (1 - best_fit_weight)
    gap_weight = 0.4 * (1 - best_fit_weight)
    capacity_weight = 0.2 * (1 - best_fit_weight)
    fill_level_weight = 0.1 * (1 - best_fit_weight)  # Reduced fill level influence

    combined_priority = (
        ratio_weight * ratio_priority +
        gap_weight * gap_priority +
        capacity_weight * capacity_priority +
        fill_level_weight * fill_level_priority +
        best_fit_weight * best_fit_priority
    )

    return combined_priority
```
