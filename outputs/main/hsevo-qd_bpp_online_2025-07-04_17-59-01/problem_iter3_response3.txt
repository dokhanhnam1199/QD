```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       This version considers a combination of factors, including:
       - Remaining capacity
       - Gap after placing the item (prioritizing smaller gaps)
       - A bonus for bins that are already partially filled.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Ensure no division by zero
    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap)

    # Calculate gap (remaining capacity after placing the item)
    gap = bins_remain_cap - item
    # bins where gap < 0 are not feasible: assign a very small priority.
    feasible_bins = gap >= 0
    gap = np.where(gap < 0, np.inf, gap)  # Set infeasible gaps to infinity for calculations
    
    # Priority based on gap (smaller gap = higher priority)
    gap_priority = 1 / (gap + 0.0001) # Avoid division by zero

    # Priority based on remaining capacity (larger capacity = higher priority, but less important than gap)
    capacity_priority = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)
    # Bonus for partially filled bins (encourage filling existing bins)
    #This is calculated by how full they are currently
    fill_ratio = (1 - bins_remain_cap / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)
    fill_bonus = fill_ratio**2  # Square the ratio to give a more significant bonus to bins that are already quite full

    # Combine priorities and bonus
    priorities = gap_priority + 0.5 * capacity_priority + fill_bonus
    #Large penality to ensure those bins are not considered
    priorities = np.where(feasible_bins, priorities, -1e9)
    
    return priorities
```
