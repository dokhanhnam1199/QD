```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Avoid Overfill (High Penalty)
    overfill_penalty = -1e9  # Very large negative number
    priorities[bins_remain_cap < item] = overfill_penalty

    # 2. First-Fit Decreasing (FFD) inspired component.
    #    Preferentially fill bins that are already somewhat full to avoid fragmentation
    #    and create more space to pack larger items in the future.
    #    Apply it only for the bins where the item can fit.
    fitting_bins = bins_remain_cap >= item
    if np.any(fitting_bins):
        remaining_space_ratio = (bins_remain_cap[fitting_bins] - item) / bins_remain_cap[fitting_bins]

        # Use inverse of remaining space ratio, so smaller space after putting gets bigger priority.
        priorities[fitting_bins] += 1.0 - remaining_space_ratio  # Gives higher score to bins with less remaining space

    # 3. A small amount of randomness to explore the space.
    randomness = np.random.rand(len(bins_remain_cap)) * 0.01
    priorities += randomness

    return priorities
```
