```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio, gap, capacity, best-fit, and dynamic weights with improved normalization."""

    # Handle zero capacities
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate gap, mark infeasible bins
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)

    # Ratio-based priority
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)

    # Gap-based priority + dynamic almost full penalty
    avg_cap = np.mean(bins_remain_cap)
    almost_full_penalty = np.exp(-50 * gap / (avg_cap + 1e-9))
    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)
    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)

    # Capacity-based priority
    max_cap = np.max(bins_remain_cap)
    capacity_priority = bins_remain_cap / (max_cap + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority, -1e9)

    # Best-fit priority
    best_fit_priority = np.where(feasible, -gap, -1e9)
    if np.any(feasible): # avoids errors when no bins are feasible
      best_fit_priority = np.where(feasible, (best_fit_priority - np.min(best_fit_priority[feasible])) / (np.max(best_fit_priority[feasible]) - np.min(best_fit_priority[feasible]) + 1e-9), -1e9)
    else:
      best_fit_priority = np.full_like(bins_remain_cap, -1e9)

    # Dynamic Weighting based on fill level.
    bin_fill_level = 1 - (bins_remain_cap / max_cap)
    avg_fill = np.mean(bin_fill_level)

    best_fit_weight = min(0.5, avg_fill)
    ratio_weight = 0.3 * (1 - best_fit_weight)
    gap_weight = 0.4 * (1 - best_fit_weight)
    capacity_weight = 0.3 * (1 - best_fit_weight)


    # Combined priority with adaptive weights
    combined_priority = (
        ratio_weight * ratio_priority +
        gap_weight * gap_priority +
        capacity_weight * capacity_priority +
        best_fit_weight * best_fit_priority
    )

    return combined_priority
```
