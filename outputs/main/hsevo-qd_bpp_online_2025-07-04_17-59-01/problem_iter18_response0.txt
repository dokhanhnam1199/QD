```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio, gap, capacity, and variance with dynamic penalty and normalization."""

    # Ensure no division by zero
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate gap; penalize infeasible bins
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)

    # Ratio priority (item size / bin capacity)
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)

    # Dynamic almost-full penalty based on remaining capacity
    avg_cap = np.mean(bins_remain_cap)
    almost_full_penalty = np.exp(-50 * gap / (avg_cap + 1e-9))
    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)
    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)

    # Capacity priority (normalized)
    capacity_priority = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority, -1e9)

    # Variance priority (prioritize bins closer to the average fill level).
    # This encourages balancing the fill levels across all bins
    variance = np.var(bins_remain_cap)
    variance_priority = -np.abs(bins_remain_cap - avg_cap) / (variance + 1e-9) if variance > 0 else np.zeros_like(bins_remain_cap)
    variance_priority = np.where(feasible, variance_priority, -1e9)

    # Adaptive weights based on item size and remaining capacity std.
    item_size_factor = min(1.0, item)
    cap_std = np.std(bins_remain_cap)

    # Adapt weights based on item size and cap_std
    weight_ratio = 0.2 + 0.1 * item_size_factor
    weight_gap = 0.3 + 0.1 * (1 - item_size_factor)
    weight_capacity = 0.25 + 0.05 * (cap_std / (avg_cap + 1e-9)) if avg_cap > 0 else 0.25 # Adjust weight based on capacity variation
    weight_variance = 0.25 - 0.05 * (cap_std / (avg_cap + 1e-9)) if avg_cap > 0 else 0.25 #Inverse relationship

    # Combined priority with adaptive weights
    #Normalize weights
    total_weight = weight_ratio + weight_gap + weight_capacity + weight_variance
    weight_ratio /= total_weight
    weight_gap /= total_weight
    weight_capacity /= total_weight
    weight_variance /= total_weight

    combined_priority = (
        weight_ratio * ratio_priority +
        weight_gap * gap_priority +
        weight_capacity * capacity_priority +
        weight_variance * variance_priority
    )

    return combined_priority
```
