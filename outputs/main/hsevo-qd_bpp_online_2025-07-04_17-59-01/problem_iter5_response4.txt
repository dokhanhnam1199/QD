```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio and gravitational attraction for bin priority."""
    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap)
    gap = bins_remain_cap - item
    gap = np.where(gap < 0, -1, gap)

    # Gravitational attraction
    attraction = np.where(gap >= 0, bins_remain_cap / (gap**2 + 0.0001), -1e9)

    # Ratio-based priority
    ratios = item / bins_remain_cap
    ratios = np.where(gap < 0, 1e9, ratios)  # Penalize infeasible bins with high ratio
    
    # Combine both, normalize attraction to have similar magnitude as ratio
    max_attraction = np.max(attraction[attraction < 1e9])
    max_attraction = np.where(max_attraction == -np.inf, 1, max_attraction)
    normalized_attraction = attraction / max_attraction if max_attraction != 0 else attraction
    
    priorities = normalized_attraction - ratios

    # Penalize almost full bins
    almost_full = (gap > 0) & (gap < 0.1)
    priorities = np.where(almost_full, priorities - 1, priorities)

    return priorities
```
