```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio, gap, capacity, dynamic penalty, and adaptive weights with adjustments."""

    # Handle zero capacities to prevent division by zero
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate gap, penalize infeasible bins
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)

    # Ratio priority (item size / bin capacity)
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)

    # Gap priority with dynamic almost-full penalty and scaled gap
    avg_cap = np.mean(bins_remain_cap)
    almost_full_penalty = np.exp(-50 * gap / (avg_cap + 1e-9))
    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)
    
    # Scale the gap by item size to prioritize smaller gaps for smaller items
    scaled_gap = gap / (item + 1e-9)  # Avoid division by zero
    gap_priority = np.where(feasible, (bins_remain_cap / (scaled_gap + 0.0001)) - almost_full_penalty, -1e9)

    # Capacity priority (normalized remaining capacity)
    max_cap = np.max(bins_remain_cap)
    capacity_priority = bins_remain_cap / (max_cap + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority, -1e9)
    
    # Introduce a tightness priority: prioritize bins that will be relatively full *after* placing the item.
    remaining_percentage = (bins_remain_cap - item) / (max_cap + 1e-9) #what percentage of max capacity will remain
    tightness_priority = 1 - remaining_percentage #the closer to one (1), the tighter it will be. 
    tightness_priority = np.where(feasible, tightness_priority, -1e9)

    # Adaptive weights based on item size, with increased emphasis on gap for smaller items
    item_size_factor = min(1.0, item)
    
    # More aggressive weight adjustment. Smaller items rely more on Gap
    ratio_weight = 0.2 * (1 - item_size_factor) + 0.1
    gap_weight = 0.6 * item_size_factor + 0.3
    capacity_weight = 0.1 * (1 - item_size_factor) + 0.05
    tightness_weight = 0.1 * item_size_factor + 0.05

    # Combined priority calculation
    combined_priority = (
        ratio_weight * ratio_priority +
        gap_weight * gap_priority +
        capacity_weight * capacity_priority +
        tightness_weight * tightness_priority
    )

    return combined_priority
```
