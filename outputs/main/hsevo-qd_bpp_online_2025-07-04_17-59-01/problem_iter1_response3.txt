```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Uses a combination of remaining capacity and waste to determine priority.
    A bin is penalized if it is too full after insertion, leading to high waste.
    Bins that cannot accommodate the item are heavily penalized.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    waste = bins_remain_cap - item
    
    # Prioritize bins where item fits
    can_fit = bins_remain_cap >= item
    
    # Calculate a capacity-based priority
    priorities[can_fit] = bins_remain_cap[can_fit]
    
    # Introduce waste penalty. Higher penalty when waste is high.
    priorities[can_fit] -= np.abs(waste[can_fit])
    
    # Add an inverse factor. If it almost fits, then it has good priority
    inverse_capacity = bins_remain_cap / item
    priorities[can_fit] += inverse_capacity[can_fit]
    
    # Heavily penalize bins where item cannot fit.
    priorities[~can_fit] = -np.inf
    
    # Normalize priorities, though unnecessary, makes debugging easier.
    # Avoid dividing by zero. Add a small epsilon to each element before dividing by sum.
    # This normalization helps ensure that no value is too extremely negative, which helps during debugging and experimentation
    # eps = 1e-8
    # priorities = (priorities + eps) / np.sum(priorities + eps)
    

    return priorities
```
