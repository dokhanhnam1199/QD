```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Heuristic 1:  Favor bins that can *almost* perfectly fit the item.  A bin only slightly larger gets high priority.
    # This encourages efficient packing.

    diff = bins_remain_cap - item  # Difference between bin capacity and item size
    priority = np.zeros_like(bins_remain_cap, dtype=float) #Initialize priorities

    #Prioritize bins with sufficient capacity
    valid_bins = diff >= 0
    if np.any(valid_bins):
        priority[valid_bins] = np.exp(-10 * diff[valid_bins] / item)  # Exponential decay favoring closer fits
        # Small diff => larger priority score (approaches 1)
        # Large diff => priority score close to 0

        #Heuristic 2: Bins with very high remaining capacity should get reduced priority, avoid fragmentation

        large_capacity_bins = bins_remain_cap > 2 * item #Arbitrary threshold - double item size considered large.

        priority[large_capacity_bins] *= 0.5 #Reduce priority if remaining capacity is too large
    else:
         priority[:] = -np.inf #No available bin, set to lowest priority. Effectively ignores this bin
        # but we might want to deal with this case differently (e.g., open a new bin?)

    #Heuristic 3: Very close fits are given higher bonus
    close_fit_threshold = 0.05 * item  # within 5% item size

    close_fit_bins = (diff >=0) & (diff <= close_fit_threshold)
    priority[close_fit_bins] += 0.2 #Add bonus, better to fill

    return priority
```
