```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version attempts to balance space utilization and avoid creating
    bins that are nearly full or nearly empty. It prioritizes bins where
    the item fits reasonably well and leaves a moderate amount of remaining space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give a small negative priority to bins that cannot fit the item. This
    # allows for the possibility of opening a new bin if no bin can fit.
    priorities[bins_remain_cap < item] = -1e9

    # Calculate how full the bin will be if the item is placed in it.
    future_remain_cap = bins_remain_cap - item
    future_fill_ratio = (bins_remain_cap - future_remain_cap) / bins_remain_cap # how full will be
    # Prioritize bins that will be reasonably full but not overflowing (close to 1).
    # This is the key part of the heuristic. We want to select bins such that the "filled" space is maximized but penalized as it approach 1.
    # It will also be penalized as it approach 0
    priorities[bins_remain_cap >= item] = np.exp(-np.abs(future_fill_ratio - 0.7)) * (bins_remain_cap[bins_remain_cap >= item]) # try to keep at around 70%
    
    return priorities
```
