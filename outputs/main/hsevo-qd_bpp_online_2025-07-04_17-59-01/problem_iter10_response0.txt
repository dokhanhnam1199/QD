import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                division_epsilon: float = 8.41613007074527e-09, 
                gravity_epsilon: float = 9.764304781528209e-05,
                ratio_weight: float = 0.4759852357838289, 
                gravity_weight: float = 0.1773067754705847,
                negative_gap_penalty: float = -0.30291238428480005,
                negative_gravity_penalty: float = -9196992900.133415) -> np.ndarray:
    """Combines ratio-based and gravity-inspired approaches for bin selection."""
    # Ensure no division by zero
    bins_remain_cap = np.where(bins_remain_cap == 0, division_epsilon, bins_remain_cap)

    # Calculate gap
    gap = bins_remain_cap - item
    gap = np.where(gap < 0, negative_gap_penalty, gap)

    # Ratio-based priority (normalized)
    ratios = np.where(bins_remain_cap > 0, item / bins_remain_cap, 0)
    normalized_ratios = ratios / np.max(ratios) if np.max(ratios) > 0 else np.zeros_like(ratios)

    # "Gravitational" attraction with added constant
    gravity = np.where(gap >= 0, bins_remain_cap / (gap**2 + gravity_epsilon), negative_gravity_penalty)

    # Combine the two priorities
    priorities = ratio_weight * normalized_ratios + gravity_weight * (gravity / np.max(gravity) if np.max(gravity) > 0 else np.zeros_like(gravity))

    return priorities
