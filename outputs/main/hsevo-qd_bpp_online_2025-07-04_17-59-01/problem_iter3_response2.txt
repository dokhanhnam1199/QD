```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       This version considers a combination of factors:
       - Remaining capacity after placing the item (gap).
       - Bin capacity.
       - A penalty for bins that are almost full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Ensure no division by zero
    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap)

    # Calculate gap (remaining capacity after placing the item)
    gap = bins_remain_cap - item
    # bins where gap < 0 are not feasible: assign a very small priority.
    gap = np.where(gap < 0, -1, gap)
    
    # Calculate a penalty for bins that will be almost full after placing the item
    almost_full_penalty = np.exp(-50 * gap)  # Exponential penalty, sharp drop-off as gap -> 0
    almost_full_penalty = np.where(gap >= 0, almost_full_penalty, 0) # only applies to feasible bins

    # Calculate priority score.  Combine bin capacity, gap, and the almost full penalty.
    priorities = np.where(gap >= 0, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9) # Added constant to prevent possible 0 division.

    return priorities
```
