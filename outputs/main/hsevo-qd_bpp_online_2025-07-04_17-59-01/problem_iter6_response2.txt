```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines ratio-based, gap-based, and bin-utilization approaches with adaptive penalty and normalization.
    """
    # Avoid division by zero
    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap)
    bin_capacity = bins_remain_cap + item #estimate for bin capacity, will be inf for invalid cases
    # Calculate gap, handling infeasible bins
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)  # Mark infeasible bins with -1
    
    # Ratio-based priority (normalized item size relative to bin capacity)
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9) #Penalize infeasible

    # Gap-based priority + Almost full penalty (adaptive)
    almost_full_penalty = np.exp(-50 * gap)
    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)
    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9) #Penalize infeasible

    #Bin Utilization Priority

    bin_utilization = item / bin_capacity # what fraction of new bin cap will item fill.
    bin_utilization = np.where(feasible, bin_utilization, 0) # only valid for feasible solutions.
    bin_utilization_priority = bin_utilization # higher utilization is better

    #Adaptive weighting based on item size
    item_scale = np.clip(item, 0.1, 1) #scaling factor between 0.1 to 1
    ratio_weight = 0.4 * item_scale
    gap_weight = 0.4 * (1-item_scale)
    utilization_weight = 0.2

    # Combine ratio and gap based priorities
    priorities = ratio_weight * ratio_priority + gap_weight * gap_priority + utilization_weight * bin_utilization_priority

    return priorities
```
