{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines ratio-based and gravity-inspired approaches for bin selection.\"\"\"\n    # Ensure no division by zero\n    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap)\n\n    # Calculate gap\n    gap = bins_remain_cap - item\n    gap = np.where(gap < 0, -1, gap)\n\n    # Ratio-based priority (normalized)\n    ratios = np.where(bins_remain_cap > 0, item / bins_remain_cap, 0)\n    normalized_ratios = ratios / np.max(ratios) if np.max(ratios) > 0 else np.zeros_like(ratios)\n\n    # \"Gravitational\" attraction with added constant\n    gravity = np.where(gap >= 0, bins_remain_cap / (gap**2 + 0.0001), -1e9)\n\n    # Combine the two priorities\n    priorities = 0.5 * normalized_ratios + 0.5 * (gravity / np.max(gravity) if np.max(gravity) > 0 else np.zeros_like(gravity))\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the top heuristics combine ratio-based and \"gravitational\" attraction approaches, including normalization and handling of infeasible bins; while the worst uses a simple log ratio. (2nd best) vs (second worst) shows the same contrast. Comparing (1st) vs (2nd), they are identical. (3rd) vs (4th), the 4th introduces an \"almost_full_penalty,\" while the 3rd does not. Comparing (second worst) vs (worst), they're identical. Overall: The best heuristics consider multiple factors (remaining capacity, bin capacity, fullness penalty, ratios) and use more sophisticated calculations, including normalization and avoiding division by zero. Simpler heuristics focusing solely on ratios perform poorly. The exponential penalty for almost full bins is a valuable refinement.\n- \nOkay, let's refine \"Current self-reflection\" to focus on actionable insights for heuristic design, avoiding the pitfalls of the \"Ineffective self-reflection.\" Here's a breakdown to help you design better heuristics:\n\n*   **Keywords:** Factor combination, normalization, penalization, edge-case handling, complexity.\n\n*   **Advice:** Prioritize complex formulas leveraging multiple normalized, relevant factors. Explicitly penalize undesirable intermediate states. Ensure robust handling of edge cases and infeasibility.\n\n*   **Avoid:** Vague domain-specific analogies. Simple ratios or single-factor decisions. Ignoring intermediate state quality.\n\n*   **Explanation:** Combining multiple normalized factors allows for a more nuanced evaluation of potential moves. Penalizing near-misses (e.g., almost full bins) guides the search towards better overall solutions. Robust edge-case handling prevents failures.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}