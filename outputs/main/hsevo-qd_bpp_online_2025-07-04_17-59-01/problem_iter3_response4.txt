```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       This version prioritizes bins that are a "good fit" for the item,
       while also considering the overall remaining capacity.  It incorporates
       multiple factors to balance different objectives.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Ensure no division by zero
    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap)

    # Calculate gap
    gap = bins_remain_cap - item
    feasible_bins = gap >= 0
    
    # Initialize priorities to a very low value for infeasible bins
    priorities = np.full(bins_remain_cap.shape, -1e9)
    
    # Only calculate priorities for feasible bins
    if np.any(feasible_bins):
        # 1. Gap-based priority: Smaller gap is better (good fit)
        gap_priority = np.where(feasible_bins, 1 / (gap[feasible_bins] + 0.0001), 0)  # Avoid division by zero

        # 2. Capacity-based priority: Larger remaining capacity is generally better
        capacity_priority = bins_remain_cap[feasible_bins]

        # 3. "Wasted space" penalty:  If the gap is too large relative to the item size, it's wasteful.
        #    This encourages filling bins more completely.
        waste_penalty = np.where(feasible_bins & (gap[feasible_bins] > item), 0.5, 1) #Reduce priority if waste > item size
        waste_priority = waste_penalty

        # Combine the priorities:  Weight each factor to tune the heuristic
        combined_priority = (gap_priority + capacity_priority) * waste_priority
        
        priorities[feasible_bins] = combined_priority

    return priorities
```
