```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines ratio, gap, capacity, dynamic penalty, adaptive weights,
    bin utilization, and a small-item preference for partially filled bins.
    """

    # Handle zero or negative capacities to prevent division by zero and errors
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate gap, penalize infeasible bins heavily
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)
    infeasible_penalty = -1e9  # Increased penalty for infeasibility

    # Ratio priority (item size / bin capacity)
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, infeasible_penalty)

    # Gap priority with dynamic almost-full penalty and increased sensitivity
    avg_cap = np.mean(bins_remain_cap)
    almost_full_penalty = np.exp(-100 * gap / (avg_cap + 1e-9))  # Increased sensitivity
    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)
    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, infeasible_penalty)

    # Capacity priority (normalized remaining capacity)
    max_cap = np.max(bins_remain_cap)
    capacity_priority = bins_remain_cap / (max_cap + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority, infeasible_penalty)

    # Bin utilization priority (encourage filling bins)
    bin_utilization = 1 - (bins_remain_cap / (max_cap + 1e-9))
    bin_utilization_priority = np.where(feasible, bin_utilization, infeasible_penalty)

    # Small-item preference for partially filled bins
    small_item_bonus = np.where((item < 0.25) & feasible, bin_utilization, 0)
    # Adaptive weights based on item size
    item_size_factor = min(1.0, item)

    # Combined priority calculation with adjusted weights and bonus
    combined_priority = (
        0.25 * ratio_priority +
        0.45 * gap_priority +
        0.15 * capacity_priority +
        0.1 * bin_utilization_priority +
        0.05 * small_item_bonus
    )

    return combined_priority
```
