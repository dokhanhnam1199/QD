```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # 1. Check if the item can fit into the bin. If not, assign a very low priority.
    fit_mask = bins_remain_cap >= item
    priorities = np.where(fit_mask, 0.0, -np.inf) # Ensure it cannot be added

    # 2. If the item can fit, compute a priority score based on several heuristics:

    # (a) Remaining capacity after placing the item. The smaller the remaining capacity, the better.
    remaining_capacity = bins_remain_cap - item
    # Add a small constant to avoid division by zero. This also subtly favours larger remaining capacities if very similar
    priority_remaining_cap = -np.abs(remaining_capacity)

    # (b) Percentage of the bin filled by the item. Higher percentage means the bin is being utilized better.
    fill_percentage = item / bins_remain_cap
    priority_fill_percentage = fill_percentage


    # (c) Avoidance of excessive fragmentation (more costly term if more fragmenation.)
    # Prefer bins where the item fills most of the remaining capacity but does not overflow (already covered by initial masking.)
    priority_fragmentation = np.exp(-5*np.abs(remaining_capacity)) # Exp decays very rapidly, so highly penalise bins where there is excessive space leftover



    # 3. Combine the heuristics into a single priority score.
    # Weight different metrics based on their perceived importance
    priorities[fit_mask] = (0.5 * priority_fill_percentage[fit_mask] +
                            0.3 * priority_remaining_cap[fit_mask] +
                            0.2 * priority_fragmentation[fit_mask]) # Mix up the heuristic
    return priorities
```
