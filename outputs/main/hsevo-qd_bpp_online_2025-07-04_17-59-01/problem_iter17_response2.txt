```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio, gap, and capacity with adaptive weighting."""

    # Avoid division by zero
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate gap, mark infeasible bins
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)

    # Ratio-based priority
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)

    # Gap-based priority with dynamic penalty
    almost_full_penalty_scale = np.mean(bins_remain_cap)
    almost_full_penalty = np.exp(-50 * gap / (almost_full_penalty_scale + 1e-9))
    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)
    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)
    
    # Capacity-based priority
    capacity_priority = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority, -1e9)

    # Adaptive weights based on fill level
    fill_level = 1 - np.mean(bins_remain_cap) / np.max(bins_remain_cap)
    weight_ratio = 0.4 + fill_level * 0.2  # Adjust ratio weight based on fill
    weight_gap = 0.4 - fill_level * 0.2   # Adjust gap weight based on fill
    weight_capacity = 0.2

    # Combined priority with adaptive weights
    combined_priority = (
        weight_ratio * ratio_priority +
        weight_gap * gap_priority +
        weight_capacity * capacity_priority
    )

    return combined_priority
```
