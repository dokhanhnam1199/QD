import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, 
                  epsilon: float = 8.156932050709063e-09, 
                  gravity_constant: float = 0.00017111816861642385,
                  ratio_weight: float = 0.23879825218267325,
                  gravity_weight: float = 0.7169333719628935,
                  negative_gap_penalty: float = -1.6110992574714489,
                  negative_gravity_penalty: float = -7042999625.74185) -> np.ndarray:
    """Combines ratio-based and gravity-inspired approaches for bin selection."""
    # Ensure no division by zero
    bins_remain_cap = np.where(bins_remain_cap == 0, epsilon, bins_remain_cap)

    # Calculate gap
    gap = bins_remain_cap - item
    gap = np.where(gap < 0, negative_gap_penalty, gap)

    # Ratio-based priority (normalized)
    ratios = np.where(bins_remain_cap > 0, item / bins_remain_cap, 0)
    normalized_ratios = ratios / np.max(ratios) if np.max(ratios) > 0 else np.zeros_like(ratios)

    # "Gravitational" attraction with added constant
    gravity = np.where(gap >= 0, bins_remain_cap / (gap**2 + gravity_constant), negative_gravity_penalty)

    # Combine the two priorities
    priorities = ratio_weight * normalized_ratios + gravity_weight * (gravity / np.max(gravity) if np.max(gravity) > 0 else np.zeros_like(gravity))

    return priorities
