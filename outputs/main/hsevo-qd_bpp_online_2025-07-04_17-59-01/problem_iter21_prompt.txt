{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines ratio, gap, capacity with dynamic penalty and normalization.\"\"\"\n\n    # Ensure no division by zero\n    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)\n\n    # Calculate gap; penalize infeasible bins\n    gap = bins_remain_cap - item\n    feasible = gap >= 0\n    gap = np.where(feasible, gap, -1)\n\n    # Ratio priority (item size / bin capacity)\n    ratios = item / bins_remain_cap\n    ratio_priority = -np.log(ratios)\n    ratio_priority = np.where(feasible, ratio_priority, -1e9)\n\n    # Dynamic almost-full penalty based on remaining capacity\n    avg_cap = np.mean(bins_remain_cap)\n    almost_full_penalty = np.exp(-50 * gap / (avg_cap + 1e-9))\n    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)\n    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)\n\n    # Capacity priority (normalized)\n    capacity_priority = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)\n    capacity_priority = np.where(feasible, capacity_priority, -1e9)\n    \n    # Adaptive weights based on item size.\n    item_size_factor = min(1.0, item)\n\n    # Combined priority with adaptive weights\n    combined_priority = (\n        0.3 * ratio_priority +\n        0.4 * gap_priority +\n        0.3 * capacity_priority\n    )\n\n    return combined_priority\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's redefine \"Current self-reflection\" to guide the design of better heuristics, focusing on actionable advice and avoiding common pitfalls highlighted in the \"Ineffective self-reflection.\"\n\nHere's a refined perspective:\n\n*   **Keywords:** Multi-factor, Normalization, Dynamic penalties, Adaptive weighting, State-aware.\n\n*   **Advice:** Design heuristics that synthesize several relevant factors, normalized to a common scale. Use dynamic penalties to discourage undesirable states, adapting to the problem's current state via adaptive weights. Incorporate state-aware components to make decisions based on current state.\n\n*   **Avoid:** Single-factor metrics, relying on domain-specific analogies without rigorous justification, ignoring edge cases or infeasible solutions, and failing to normalize values.\n\n*   **Explanation:** Combining normalized factors provides a more nuanced view than single metrics. Adaptive strategies allow the heuristic to adjust its behavior based on the current problem state, leading to more robust and effective solutions.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}