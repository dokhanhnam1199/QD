```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item

    # Give high priority to bins where item fits and wasted space is minimized
    # and where item does not fit give zero priority

    fit_indices = wasted_space >= 0

    if np.any(fit_indices):
      wasted_space_normalized = wasted_space[fit_indices] / np.max(bins_remain_cap) # Normalize wasted space so larger bins are preferred
      priorities[fit_indices] = 1 - wasted_space_normalized

      # Adding bonus for bins that are close to full after adding the item to avoid fragmentation

      post_fill_ratios = (bins_remain_cap[fit_indices] - item) / bins_remain_cap[fit_indices]
      fullness_bonus = np.exp(-10 * post_fill_ratios) # Higher bonus when close to full

      priorities[fit_indices] += fullness_bonus

    else:
      #Item doesn't fit in any bin, return zeros
      priorities = np.zeros_like(bins_remain_cap)


    return priorities
```
