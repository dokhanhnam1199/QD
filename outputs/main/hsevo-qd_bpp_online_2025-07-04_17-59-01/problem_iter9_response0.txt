```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio, gap, capacity, dynamic penalty, and adaptive weights with modifications."""

    # Handle zero capacities to prevent division by zero
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate gap, penalize infeasible bins
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)

    # Ratio priority (item size / bin capacity)
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)

    # Gap priority with dynamic almost-full penalty.  Modified penalty calculation.
    avg_cap = np.mean(bins_remain_cap)
    # Use a more aggressive penalty for bins close to full, and also scale by item size
    almost_full_penalty = np.exp(-100 * gap / (avg_cap + 1e-9) * item)
    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)
    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)

    # Capacity priority (normalized remaining capacity)
    max_cap = np.max(bins_remain_cap)
    capacity_priority = bins_remain_cap / (max_cap + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority, -1e9)

    # Introduce a bin-level diversity component. Prefer bins with capacities
    # dissimilar to others. Standard deviation as a measure of dissimilarity.
    std_dev_cap = np.std(bins_remain_cap)
    diversity_priority = (bins_remain_cap - avg_cap) / (std_dev_cap + 1e-9)  # Normalize
    diversity_priority = np.where(feasible, diversity_priority, -1e9)
    
    # Adaptive weights based on item size and remaining bin variability.
    item_size_factor = min(1.0, item)
    capacity_variation_factor = std_dev_cap / (max_cap + 1e-9)  # Normalized variation

    # Adjust weights dynamically. Bins get penalized if the item is bigger than avg capacity
    if item > avg_cap:
       weight_ratio = 0.1
       weight_gap = 0.7
       weight_capacity = 0.2
       weight_diversity = 0.0
    else:
       weight_ratio = 0.3
       weight_gap = 0.4
       weight_capacity = 0.1
       weight_diversity = 0.2


    # Combined priority calculation
    combined_priority = (
        weight_ratio * ratio_priority +
        weight_gap * gap_priority +
        weight_capacity * capacity_priority +
        weight_diversity * diversity_priority
    )

    return combined_priority
```
