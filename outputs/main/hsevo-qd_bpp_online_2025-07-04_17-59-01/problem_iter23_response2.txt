```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines gap, ratio, capacity, and adaptive weighting for bin selection."""

    # Handle edge case: empty bins_remain_cap array
    if bins_remain_cap.size == 0:
        return np.array([])

    # Ensure no division by zero
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate gap and handle infeasible bins
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)

    # Ratio priority (item size / bin capacity)
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)

    # Capacity priority (normalized)
    max_cap = np.max(bins_remain_cap)
    capacity_priority = bins_remain_cap / (max_cap + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority, -1e9)

    # Gap priority
    gap_priority = np.where(feasible, bins_remain_cap / (gap + 0.0001), -1e9)

    # Adaptive weights based on item size and remaining capacity variance.
    item_size_factor = min(1.0, item)
    capacity_variance = np.var(bins_remain_cap)

    # Adjust weights based on item size and remaining capacity variance.
    weight_ratio = 0.2 + 0.2 * item_size_factor # Range: [0.2, 0.4]
    weight_gap = 0.4 - 0.1 * item_size_factor + 0.1 * min(1.0, capacity_variance) #Range: [0.3, 0.5]
    weight_capacity = 0.4 - 0.1 * capacity_variance #Ensure sum to 1. Range: [0.3, 0.4]

    # Combined priority with adaptive weights
    combined_priority = (
        weight_ratio * ratio_priority +
        weight_gap * gap_priority +
        weight_capacity * capacity_priority
    )

    # Encourage better distribution by penalizing close-to-full bins.
    close_to_full = (gap > 0) & (gap < 0.1)
    combined_priority = np.where(close_to_full, combined_priority - 0.05, combined_priority)

    return combined_priority
```
