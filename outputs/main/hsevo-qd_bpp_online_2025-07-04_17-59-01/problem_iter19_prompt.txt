{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines ratio-based, gap-based, and capacity-based approaches with dynamic penalty and normalization.\n    \"\"\"\n    # Avoid division by zero\n    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)\n\n    # Calculate gap, handling infeasible bins\n    gap = bins_remain_cap - item\n    feasible = gap >= 0\n    gap = np.where(feasible, gap, -1)\n\n    # Ratio-based priority (normalized item size relative to bin capacity)\n    ratios = item / bins_remain_cap\n    ratio_priority = -np.log(ratios)\n    ratio_priority = np.where(feasible, ratio_priority, -1e9)\n\n    # Gap-based priority + Almost full penalty (dynamically adjusted)\n    almost_full_penalty_scale = np.mean(bins_remain_cap)  # Dynamic scaling\n    almost_full_penalty = np.exp(-50 * gap / (almost_full_penalty_scale + 1e-9))  # Scale gap for penalty\n    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)\n    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)\n    \n    # Capacity-based priority (normalized remaining capacity)\n    capacity_priority = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)  # Normalize capacity\n    capacity_priority = np.where(feasible, capacity_priority, -1e9)\n    \n    # Combined priority with adaptive weights based on item size\n    item_size_factor = min(1.0, item)  # Scale weights based on item size\n    \n    combined_priority = (\n        0.4 * ratio_priority +\n        0.4 * gap_priority +\n        0.2 * capacity_priority\n    )\n\n    return combined_priority\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}