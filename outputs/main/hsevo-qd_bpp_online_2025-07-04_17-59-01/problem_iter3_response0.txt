```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       This version combines several factors:
       1. Gap-based priority (smaller gap, higher priority if feasible).
       2. Capacity-based priority (larger capacity, higher priority).
       3. A "best fit" incentive to prioritize bins where the item fills a significant portion of the bin.
       4. Considers a penalty for bins that are almost full to avoid creating very small fragments.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Ensure no division by zero
    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap)

    # Calculate gap (remaining capacity after placing the item)
    gap = bins_remain_cap - item
    
    # Identify feasible bins (gap >= 0)
    feasible_bins = gap >= 0
    
    # Initialize priorities with a very low value for infeasible bins
    priorities = np.full(bins_remain_cap.shape, -1e9)
    
    # Calculate priorities for feasible bins
    if np.any(feasible_bins):
        feasible_capacities = bins_remain_cap[feasible_bins]
        feasible_gap = gap[feasible_bins]

        # Gap-based priority (smaller gap, higher priority)
        gap_priority = 1 / (feasible_gap + 0.0001)

        # Capacity-based priority (larger capacity, higher priority)
        capacity_priority = feasible_capacities

        # Best fit incentive (prioritize bins where the item fills a significant portion)
        best_fit_priority = item / feasible_capacities #item / bin_size

        # Penalty for almost full bins to avoid small fragments.  Apply only if item fits.
        almost_full_penalty = np.where(feasible_gap < 0.1, -10, 0)  # Reduce priority if gap is very small
        

        # Combine priorities (weighted sum)
        combined_priority = gap_priority + capacity_priority + best_fit_priority + almost_full_penalty

        # Assign combined priority to feasible bins
        priorities[feasible_bins] = combined_priority
        
    return priorities
```
