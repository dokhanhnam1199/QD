```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines ratio, gap, capacity, and item-size awareness with dynamic penalty and normalization.
    Includes a bin-diversity component and state-aware adjustment of weights.
    """

    # Ensure no division by zero
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate gap; penalize infeasible bins
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)

    # Ratio priority (item size / bin capacity)
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)

    # Dynamic almost-full penalty based on remaining capacity
    avg_cap = np.mean(bins_remain_cap)
    almost_full_penalty = np.exp(-50 * gap / (avg_cap + 1e-9))
    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)
    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)

    # Capacity priority (normalized)
    capacity_priority = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority, -1e9)

    # Item size awareness (normalized item size)
    item_size_factor = min(1.0, item)
    item_size_priority = item_size_factor #Directly use the normalized size

    # Bin Diversity Priority (favor bins with different fill levels to avoid clustering)
    std_cap = np.std(bins_remain_cap)
    diversity_priority = std_cap / (avg_cap + 1e-9)  # Normalize by average capacity
    diversity_priority = np.where(feasible, diversity_priority, -1e9)

    # State-aware adjustment of weights based on average remaining capacity
    # When bins are generally full (low avg_cap), prioritize ratio and gap.
    # When bins are generally empty (high avg_cap), prioritize capacity and diversity.
    if avg_cap > 0.7:
        weight_ratio = 0.2
        weight_gap = 0.2
        weight_capacity = 0.3
        weight_diversity = 0.3
    elif avg_cap < 0.3:
        weight_ratio = 0.4
        weight_gap = 0.4
        weight_capacity = 0.1
        weight_diversity = 0.1
    else:
        weight_ratio = 0.3
        weight_gap = 0.3
        weight_capacity = 0.2
        weight_diversity = 0.2


    # Combined priority with adaptive weights
    combined_priority = (
        weight_ratio * ratio_priority +
        weight_gap * gap_priority +
        weight_capacity * capacity_priority +
        weight_diversity * diversity_priority
    )

    return combined_priority
```
