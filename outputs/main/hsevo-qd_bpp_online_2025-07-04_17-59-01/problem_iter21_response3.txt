```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A refined priority function for online bin packing, combining ratio, gap, and capacity 
    with dynamic penalties and adaptive weights based on item size and bin fill levels. 
    It also considers bin diversity to encourage exploration of different bin utilization levels.
    """

    # Safe division: Avoid division by zero
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate the gap and identify feasible bins
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)  # Mark infeasible bins with -1

    # Ratio priority (item size / bin capacity)
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)  # Penalize infeasible bins

    # Dynamic almost-full penalty (more aggressive)
    avg_cap = np.mean(bins_remain_cap)
    almost_full_penalty = np.exp(-100 * gap / (avg_cap + 1e-9))  # Increased sensitivity
    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)
    
    # Gap priority with stronger penalty on small gaps
    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)

    # Capacity priority (normalized)
    max_cap = np.max(bins_remain_cap)
    capacity_priority = bins_remain_cap / (max_cap + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority, -1e9)
    
    # Bin Diversity component: Penalize bins close to the mean fill level. Encourages bins to be either very full or very empty.
    fill_levels = 1 - (bins_remain_cap / (max_cap + 1e-9))
    mean_fill = np.mean(fill_levels)
    diversity_penalty = -np.abs(fill_levels - mean_fill)  # Penalize fill levels close to the mean
    diversity_penalty = np.where(feasible, diversity_penalty, -1e9)
    
    # Adaptive weights based on item size and the level of bins almost full.
    item_size_factor = min(1.0, item)
    almost_full_proportion = np.sum(almost_full_penalty) / len(bins_remain_cap)

    # Combined priority with adaptive weights
    combined_priority = (
        0.25 * ratio_priority +
        0.35 * gap_priority +
        0.25 * capacity_priority +
        0.15 * diversity_penalty # bin diversity
    )

    return combined_priority
```
