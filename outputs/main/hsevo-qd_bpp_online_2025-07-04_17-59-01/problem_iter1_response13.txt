```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Give very low priority to bins that cannot accommodate the item.
    infeasible = bins_remain_cap < item
    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf
    priorities[~infeasible] = 0  # Initialize feasible bins with zero priority
    
    # First-Fit Decreasing heuristic inspired priority: favor bins with smallest *remaining* capacity after packing. This prioritizes full utilization.
    remaining_after_pack = bins_remain_cap[~infeasible] - item
    priorities[~infeasible] = -remaining_after_pack # Smaller remainder -> higher priority.

    #Adjust to break ties and avoid concentrating load onto bins of same capacity. Add a small amount to those with larger relative space to the item.
    ratios = item / bins_remain_cap[~infeasible]
    priorities[~infeasible] += ratios * 0.001

    return priorities
```
