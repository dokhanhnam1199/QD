{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines ratio, gap, capacity, dynamic penalty, and adaptive weights.\"\"\"\n\n    # Handle zero capacities to prevent division by zero\n    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)\n\n    # Calculate gap, penalize infeasible bins\n    gap = bins_remain_cap - item\n    feasible = gap >= 0\n    gap = np.where(feasible, gap, -1)\n\n    # Ratio priority (item size / bin capacity)\n    ratios = item / bins_remain_cap\n    ratio_priority = -np.log(ratios)\n    ratio_priority = np.where(feasible, ratio_priority, -1e9)\n\n    # Gap priority with dynamic almost-full penalty\n    avg_cap = np.mean(bins_remain_cap)\n    almost_full_penalty = np.exp(-50 * gap / (avg_cap + 1e-9))\n    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)\n    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)\n\n    # Capacity priority (normalized remaining capacity)\n    capacity_priority = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)\n    capacity_priority = np.where(feasible, capacity_priority, -1e9)\n\n    # Adaptive weights based on item size\n    item_size_factor = min(1.0, item)\n    \n    # Combined priority calculation\n    combined_priority = (\n        0.3 * ratio_priority +\n        0.5 * gap_priority +\n        0.2 * capacity_priority\n    )\n\n    return combined_priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines ratio, gap, and capacity with dynamic penalty.\"\"\"\n\n    # Handle zero capacities\n    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)\n\n    # Calculate gap, mark infeasible bins\n    gap = bins_remain_cap - item\n    feasible = gap >= 0\n    gap = np.where(feasible, gap, -1)\n\n    # Ratio-based priority\n    ratios = item / bins_remain_cap\n    ratio_priority = -np.log(ratios)\n    ratio_priority = np.where(feasible, ratio_priority, -1e9)\n\n    # Gap-based priority + dynamic almost full penalty\n    almost_full_penalty_scale = np.mean(bins_remain_cap)\n    almost_full_penalty = np.exp(-50 * gap / (almost_full_penalty_scale + 1e-9))\n    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)\n    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)\n    \n    # Capacity-based priority\n    capacity_priority = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)\n    capacity_priority = np.where(feasible, capacity_priority, -1e9)\n\n    # Combined priority\n    combined_priority = (\n        0.4 * ratio_priority +\n        0.4 * gap_priority +\n        0.2 * capacity_priority\n    )\n\n    return combined_priority\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the best heuristic combines ratio, gap, and capacity with dynamic penalty and normalization, while the worst only considers the ratio of item size to bin capacity. (2nd best) vs (second worst) reveals that the (2nd best) incorporates best-fit and adjusts weights based on bin fill level, features absent in (second worst). Comparing (1st) vs (2nd), we see the second best heuristics incorporates Best-fit priority and adjusts weights based on bin fill level. Comparing (3rd) vs (4th), show that the 3rd heuristics also incorporates Best-fit priority and adjusts weights based on bin fill level. Comparing (second worst) vs (worst), we see that the second worst calculates \"Gravitational\" attraction with added constant. Overall: The better heuristics consider multiple factors (ratio, gap, capacity, fill level) and use adaptive weights to dynamically adjust the importance of each factor. Handling of edge cases (division by zero, infeasible bins) with `np.where` is crucial. Normalization is also important.\n- \nHere's a redefinition of \"Current Self-Reflection\" tailored for designing effective heuristics, avoiding the pitfalls of \"Ineffective Self-Reflection\":\n\n*   **Keywords:** Multi-factor, normalization, adaptive weights, state-awareness, edge-case handling, robustness, dynamic penalties.\n\n*   **Advice:** Prioritize heuristics that combine multiple normalized, relevant factors with adaptive weights determined by the current problem state. Explicitly address edge cases and infeasible solution handling.\n\n*   **Avoid:** Relying on single-factor metrics, solely domain-specific analogies without quantitative justification.\n\n*   **Explanation:** Combines multiple relevant factors, normalizes inputs, and uses dynamic penalties to handle edge cases. Adaptive weighting can further improve performance by emphasizing different factors based on the problem's state. Edge case handling and normalization are essential for numerical stability and performance.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}