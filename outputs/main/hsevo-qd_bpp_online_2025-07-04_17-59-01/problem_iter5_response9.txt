```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines ratio-based and gap-based approaches with penalty.
    """
    # Avoid division by zero
    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap)

    # Calculate gap, handling infeasible bins
    gap = bins_remain_cap - item
    gap = np.where(gap < 0, -1, gap)

    # Ratio-based priority (normalized item size relative to bin capacity)
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(gap >= 0, ratio_priority, -1e9)

    # Gap-based priority + Almost full penalty
    almost_full_penalty = np.exp(-50 * gap)
    almost_full_penalty = np.where(gap >= 0, almost_full_penalty, 0)
    gap_priority = np.where(gap >= 0, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)


    # Combine ratio and gap based priorities
    priorities = 0.5 * ratio_priority + 0.5 * gap_priority

    return priorities
```
