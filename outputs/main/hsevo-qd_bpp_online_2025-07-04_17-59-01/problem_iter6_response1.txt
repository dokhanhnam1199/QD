```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A more sophisticated priority function that combines normalized factors,
    penalties, and robust edge-case handling for the online bin packing problem.
    """
    # Avoid division by zero
    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap)

    # Calculate gap, handling infeasible bins
    gap = bins_remain_cap - item
    infeasible = gap < 0
    gap = np.where(infeasible, -1, gap)

    # 1. Capacity Ratio: How much of the bin's capacity is used by the item?
    capacity_ratio = item / bins_remain_cap
    capacity_ratio = np.where(infeasible, 0, capacity_ratio) # Zero out ratio for infeasible bins

    # 2. Remaining Capacity Ratio: How much space is left after packing?
    remaining_ratio = gap / bins_remain_cap
    remaining_ratio = np.where(infeasible, 0, remaining_ratio) # Zero out ratio for infeasible bins

    # 3. Bin Utilization Score: Favor bins that are already somewhat full
    utilization_score = 1 - remaining_ratio
    utilization_score = np.where(infeasible, -1e9, utilization_score) # large negative value for infeasible

    # 4.  Gap Penalty: Heavily penalize small gaps (almost full but not quite)
    gap_penalty = np.exp(-100 * gap)  # Sharper penalty
    gap_penalty = np.where(gap > 0.01, 0, gap_penalty)  # Only penalize very small gaps
    gap_penalty = np.where(infeasible, 0, gap_penalty) # zero out penalty for infeasible bins

    # 5. Feasibility Score: Large penalty for infeasible bins
    feasibility_score = np.where(infeasible, -1e9, 0)

    # Combine the factors with weights. Experiment with these weights.
    priorities = (
        1.0 * utilization_score
        - 0.75 * gap_penalty # Lowered the weight to not over-penalize.
        + 0.25 * capacity_ratio # Give a slight preference to packing in larger bins
        + feasibility_score  # Ensure infeasible bins are heavily penalized
    )

    return priorities
```
