```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a small negative value to discourage infeasible solutions.
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify bins that can accommodate the item
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):  # Proceed only if there are feasible bins
        # Calculate wasted space for feasible bins
        wasted_space = bins_remain_cap[feasible_bins] - item

        # Encourage near-full bins while penalizing very small wasted space (to avoid fragmentation)
        # Use an exponential function to prioritize bins with smaller wasted space
        priorities[feasible_bins] = np.exp(-wasted_space)
        
        # Introduce a small bonus for bins with remaining capacity close to half of the bin size.
        #This encourages filling bins to a reasonable capacity without overcommitting early.
        half_capacity = bins_remain_cap[feasible_bins] / 2
        bonus = np.exp(-np.abs(wasted_space - half_capacity)) * 0.1
        priorities[feasible_bins] += bonus

    return priorities
```
