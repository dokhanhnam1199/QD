```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version considers both the remaining capacity and the amount of wasted space.
    Bins with capacity closer to the item size are prioritized, but very small remaining
    capacities (leading to significant waste) are penalized. We use a modified "energy" concept.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give priority to bins that can fit the item
    can_fit = bins_remain_cap >= item

    if not np.any(can_fit):
       return np.full_like(bins_remain_cap, -np.inf) #If item cannot fit into any bin give -inf score

    # The "energy" (inverse of the priority): deviation from the item size
    energy = np.abs(bins_remain_cap - item)

    # Penalize waste. Higher waste gives higher energy. Sigmoid function to moderate effect
    waste = bins_remain_cap - item
    waste_penalty = np.zeros_like(bins_remain_cap, dtype=float)
    waste_penalty[can_fit] = 1 / (1 + np.exp(-10*(waste[can_fit] - np.mean(waste[can_fit]))))  # Sigmoid around the mean waste, scaling by factor 10 to make effect of waste higher


    # Small energies are good, but we also need to take into account waste.
    # Energy is high if bin doesnt fit.
    energy[~can_fit] = np.inf # set infinite value to energy
    priorities = -energy + 0.5 * (1 - waste_penalty) #Add back scaling factor

    return priorities
```
