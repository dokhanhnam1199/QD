```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Avoid division by zero by adding a small epsilon value.
    epsilon = 1e-9
    valid_bins = bins_remain_cap >= item + epsilon
    priorities = np.zeros_like(bins_remain_cap)

    # Apply priorities only to valid bins
    if np.any(valid_bins):
        # Normalize remaining capacities to a range [0, 1].
        normalized_capacities = bins_remain_cap[valid_bins] / np.max(bins_remain_cap[valid_bins])

        # Calculate the waste if the item is placed in each valid bin.
        waste = bins_remain_cap[valid_bins] - item

        # Penalize waste by applying a power law. Higher power amplifies the penalty.
        waste_penalty = (waste / np.max(bins_remain_cap[valid_bins])) ** 2

        # Reward bins that are nearly full after packing the item.
        fullness_reward = (1 - waste / bins_remain_cap[valid_bins])

        # Combine fullness and waste metrics to derive a priority.

        priorities[valid_bins] = fullness_reward - waste_penalty

    # Make invalid bins extremely undesirable (lowest priority).
    priorities[~valid_bins] = -np.inf
    return priorities
```
