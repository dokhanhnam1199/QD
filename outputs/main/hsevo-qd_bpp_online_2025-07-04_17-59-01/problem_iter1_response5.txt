```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    My hypothesis is that we want to prioritize bins that have enough space to accommodate
    the item without leaving too much wasted space. This prevents fragmentation and
    potentially allows for better packing of future items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give a very negative priority to bins that cannot fit the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Calculate wasted space if the item is placed in each feasible bin
    wasted_space = bins_remain_cap - item

    # Define an ideal waste threshold. We want bins where the wasted space is around this value.
    ideal_waste = 0.1  #Adjust as needed

    # Calculate a penalty based on how far the wasted space is from the ideal waste.
    waste_penalty = -np.abs(wasted_space - ideal_waste)  # Negative because we want to maximize

    # Scale the wasted space penalty by the bin capacity.  Preferentially fill bins that have lower wasted_space in comparison to capacity.
    waste_penalty = waste_penalty / bins_remain_cap

    # Add a small bonus for bins that are nearly full after adding the item.
    almost_full_bonus = np.where(wasted_space < 0.05, 1, 0) #tune value

    # Combine the penalty and bonus to form the priority score
    priorities[~infeasible_mask] = waste_penalty[~infeasible_mask] + almost_full_bonus[~infeasible_mask]

    #Further prioritise the more empty bins with more weights based on available cap.
    priorities[~infeasible_mask] = priorities[~infeasible_mask] + (bins_remain_cap[~infeasible_mask]/ np.max(bins_remain_cap)) *0.1
    return priorities
```
