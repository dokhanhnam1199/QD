```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines ratio, gap, capacity with dynamic penalty, normalization, and adaptive weights.
    Also incorporates bin usage and item-specific adjustments.
    """

    # Ensure no division by zero
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate gap; penalize infeasible bins
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)

    # Ratio priority (item size / bin capacity)
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)

    # Dynamic almost-full penalty based on remaining capacity
    avg_cap = np.mean(bins_remain_cap)
    almost_full_penalty = np.exp(-50 * gap / (avg_cap + 1e-9))
    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)
    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)

    # Capacity priority (normalized)
    capacity_priority = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority, -1e9)

    # Bin Usage Priority: Favor bins that are neither too empty nor too full.
    bin_usage = 1 - (bins_remain_cap / (np.max(bins_remain_cap) + 1e-9))  # Fraction of bin used
    bin_usage_priority = np.exp(-((bin_usage - 0.75)**2) / 0.1) # Gaussian centered around 0.75
    bin_usage_priority = np.where(feasible, bin_usage_priority, -1e9)

    # Item-Specific Adjustment:  If the item is large, prioritize bins with larger remaining capacity.
    large_item_boost = np.where(item > 0.5, bins_remain_cap / (np.max(bins_remain_cap) + 1e-9), 0)
    large_item_boost = np.where(feasible, large_item_boost, -1e9)

    # Adaptive weights based on item size.
    item_size_factor = min(1.0, item)

    # Combined priority with adaptive weights
    combined_priority = (
        0.25 * ratio_priority +
        0.3 * gap_priority +
        0.25 * capacity_priority +
        0.1 * bin_usage_priority +
        0.1 * large_item_boost
    )

    return combined_priority
```
