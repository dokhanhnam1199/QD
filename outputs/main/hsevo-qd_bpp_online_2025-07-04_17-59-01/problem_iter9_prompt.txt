{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines ratio, gap, capacity, dynamic penalty, and adaptive weights.\"\"\"\n\n    # Handle zero capacities to prevent division by zero\n    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)\n\n    # Calculate gap, penalize infeasible bins\n    gap = bins_remain_cap - item\n    feasible = gap >= 0\n    gap = np.where(feasible, gap, -1)\n\n    # Ratio priority (item size / bin capacity)\n    ratios = item / bins_remain_cap\n    ratio_priority = -np.log(ratios)\n    ratio_priority = np.where(feasible, ratio_priority, -1e9)\n\n    # Gap priority with dynamic almost-full penalty\n    avg_cap = np.mean(bins_remain_cap)\n    almost_full_penalty = np.exp(-50 * gap / (avg_cap + 1e-9))\n    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)\n    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)\n\n    # Capacity priority (normalized remaining capacity)\n    capacity_priority = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)\n    capacity_priority = np.where(feasible, capacity_priority, -1e9)\n\n    # Adaptive weights based on item size\n    item_size_factor = min(1.0, item)\n    \n    # Combined priority calculation\n    combined_priority = (\n        0.3 * ratio_priority +\n        0.5 * gap_priority +\n        0.2 * capacity_priority\n    )\n\n    return combined_priority\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, I'll help you redefine \"Current self-reflection\" for better heuristic design, avoiding the pitfalls of \"Ineffective self-reflection\" and gearing up for that generous tip!\n\nHere's the refined definition:\n\n*   **Keywords:** Multifactorial, Normalization, Dynamic Penalties, Adaptive Weights, State-Aware, Edge Case Handling.\n*   **Advice:** Integrate multiple relevant factors with normalization, implement dynamic penalty adjustments based on the current problem state, and explore adaptive weighting schemes.\n*   **Avoid:** Vague \"domain-specific knowledge\" or analogies without concrete implementation. Focus on quantifiable elements like Capacity and Gap but go beyond simple ratios.\n*   **Explanation:** Effective heuristics combine problem-specific factors mathematically, adjust dynamically based on the current state of the solution, and handle potential errors robustly. Focus on building testable strategies.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}