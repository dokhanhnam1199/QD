```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio and gap, dynamically adjusting weights based on item size."""
    division_epsilon: float = 1e-9
    gravity_epsilon: float = 1e-5
    item_scale = min(1.0, item)

    # Ensure no division by zero
    bins_remain_cap = np.where(bins_remain_cap == 0, division_epsilon, bins_remain_cap)

    # Calculate gap
    gap = bins_remain_cap - item
    negative_gap_penalty: float = -0.3
    gap = np.where(gap < 0, negative_gap_penalty, gap)

    # Ratio-based priority (normalized)
    ratios = np.where(bins_remain_cap > 0, item / bins_remain_cap, 0)
    max_ratio = np.max(ratios)
    normalized_ratios = ratios / max_ratio if max_ratio > 0 else np.zeros_like(ratios)

    # "Gravitational" attraction with added constant
    negative_gravity_penalty = -1e9
    gravity = np.where(gap >= 0, bins_remain_cap / (gap**2 + gravity_epsilon), negative_gravity_penalty)
    max_gravity = np.max(gravity)
    normalized_gravity = gravity / max_gravity if max_gravity > 0 else np.zeros_like(gravity)

    # Adaptive weights
    ratio_weight = 0.4 + 0.2 * item_scale
    gravity_weight = 0.6 - 0.2 * item_scale

    # Combine the two priorities
    priorities = ratio_weight * normalized_ratios + gravity_weight * normalized_gravity

    return priorities
```
