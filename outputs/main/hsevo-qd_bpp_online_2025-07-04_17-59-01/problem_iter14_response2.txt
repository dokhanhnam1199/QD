```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio, gap, capacity, and adaptive weights based on bin utilization."""

    # Handle zero capacities to prevent division by zero
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate gap, penalize infeasible bins
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)

    # Ratio priority (item size / bin capacity)
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)

    # Gap priority with relative gap
    relative_gap = gap / (bins_remain_cap + 1e-9)  # Normalize gap by bin capacity
    gap_priority = np.where(feasible, relative_gap, -1e9)

    # Capacity priority (normalized remaining capacity)
    max_cap = np.max(bins_remain_cap)
    capacity_priority = bins_remain_cap / (max_cap + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority, -1e9)

    # Adaptive weights based on average bin capacity
    avg_cap = np.mean(bins_remain_cap)
    capacity_factor = min(1.0, avg_cap / (max_cap + 1e-9))  # Adjust sensitivity based on bin utilization

    # Combined priority calculation with dynamic weights
    combined_priority = (
        0.3 * ratio_priority +
        0.4 * gap_priority +
        0.3 * capacity_priority
    )

    return combined_priority
```
