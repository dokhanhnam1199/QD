```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Initialize priorities with a base value (e.g., 0.0)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins where the item fits
    can_fit = bins_remain_cap >= item

    # Give very low priority to bins where the item DOES NOT fit
    priorities[~can_fit] = -np.inf  # or a very large negative number

    # Calculate remaining capacity AFTER placing the item (for bins that can fit)
    remaining_after_fit = bins_remain_cap[can_fit] - item

    # First heuristic: Favor bins that will be filled nearly completely.
    # We use an exponential function here to emphasize near-perfect fits.
    fill_ratio = item / bins_remain_cap[can_fit]
    priorities[can_fit] += np.exp(5 * fill_ratio)  # Adjust the scaling factor (5) as needed. Higher = more emphasis.

    # Second heuristic: Consider the 'waste' or remaining capacity after fitting
    # Try to minimize waste, but don't overemphasize it if the bin is almost full.
    priorities[can_fit] -= remaining_after_fit # Directly reduce priority for greater waste.

    # Third heuristic: Give a bonus to bins if the waste would be in a specific range (e.g. ideal sizes for future items)
    # Example: Prefer to leave waste around 0.2 - 0.3
    ideal_waste_lower = 0.2
    ideal_waste_upper = 0.3

    ideal_waste_bonus = np.logical_and(remaining_after_fit >= ideal_waste_lower, remaining_after_fit <= ideal_waste_upper)
    priorities[can_fit][ideal_waste_bonus] += 2.0  # Higher bonus if closer to ideal waste. Adjust as needed

    #Fourth Heuristic: Bins close to full get a slight disadvantage. Less versatility
    priorities[can_fit] -= (1 - remaining_after_fit/bins_remain_cap[can_fit])

    return priorities
```
