{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Enhanced priority function for online bin packing, combining ratio, gap,\n    capacity, and fullness considerations with adaptive weighting and normalization.\n    \"\"\"\n\n    # Ensure no division by zero and handle bins with zero remaining capacity gracefully\n    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)\n\n    # Feasibility mask\n    feasible = bins_remain_cap >= item\n\n    # Gap calculation; penalize infeasible bins harshly\n    gap = bins_remain_cap - item\n    gap = np.where(feasible, gap, -1)\n\n    # Ratio priority (item size / bin capacity); emphasize efficient usage\n    ratios = item / bins_remain_cap\n    ratio_priority = -np.log(ratios)\n    ratio_priority = np.where(feasible, ratio_priority, -1e9)  # Very low priority for infeasible bins\n\n    # Gap priority: Favor bins with smaller gaps, but penalize almost-full bins.\n    # Use a more sensitive 'almost full' penalty.\n    avg_cap = np.mean(bins_remain_cap)\n    almost_full_threshold = 0.1 * avg_cap  # Dynamically adjust threshold\n    almost_full = (gap >= 0) & (gap <= almost_full_threshold)\n    almost_full_penalty = np.where(almost_full, np.exp(5 * (gap - almost_full_threshold) / (almost_full_threshold + 1e-9)), 0) # Exponential penalty\n    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)\n\n    # Capacity priority: Favor bins with larger remaining capacity, normalized\n    capacity_priority = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)\n    capacity_priority = np.where(feasible, capacity_priority, -1e9)\n\n\n    # Fullness priority:  Encourage filling up bins that are already somewhat full\n    # This is designed to avoid leaving many almost-empty bins.\n    fullness_level = bins_remain_cap / (avg_cap + 1e-9)\n    fullness_priority = np.where(feasible, 1 - np.exp(-3*fullness_level),-1e9)\n\n\n    # Adaptive weights based on item size and average capacity.\n    item_size_factor = min(1.0, item)\n    capacity_factor = min(1.0, avg_cap / (np.max(bins_remain_cap)+1e-9)) if np.max(bins_remain_cap) > 0 else 0.5\n\n\n    # State aware priority to give high preference if this item can fill this bin completely.\n    perfect_fit = np.isclose(item, bins_remain_cap)\n    perfect_fit_bonus = np.where(perfect_fit & feasible, 1e9, 0)\n\n    # Combined priority with adaptive weights, including fullness consideration.\n    combined_priority = (\n        0.2 * ratio_priority +\n        0.3 * gap_priority +\n        0.2 * capacity_priority +\n        0.2 * fullness_priority +\n        0.1 * perfect_fit_bonus # Encourage finding a perfect fit\n    )\n\n    return combined_priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines ratio, gap, capacity, best-fit, and dynamic weights.\"\"\"\n\n    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)\n\n    gap = bins_remain_cap - item\n    feasible = gap >= 0\n    gap = np.where(feasible, gap, -1)\n\n    ratios = item / bins_remain_cap\n    ratio_priority = -np.log(ratios)\n    ratio_priority = np.where(feasible, ratio_priority, -1e9)\n\n    max_cap = np.max(bins_remain_cap)\n    capacity_priority = bins_remain_cap / (max_cap + 1e-9)\n    capacity_priority = np.where(feasible, capacity_priority, -1e9)\n\n    best_fit_priority = np.where(feasible, -gap, -1e9)\n    best_fit_priority = np.where(feasible, (best_fit_priority - np.min(best_fit_priority[feasible])) / (np.max(best_fit_priority[feasible]) - np.min(best_fit_priority[feasible]) + 1e-9), -1e9)\n\n    avg_cap = np.mean(bins_remain_cap)\n    almost_full_penalty = np.exp(-50 * gap / (avg_cap + 1e-9))\n    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)\n    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)\n\n\n    bin_fill_level = 1 - (bins_remain_cap / max_cap)\n    avg_fill = np.mean(bin_fill_level)\n\n    best_fit_weight = min(0.5, avg_fill)\n    ratio_weight = 0.3 * (1 - best_fit_weight)\n    gap_weight = 0.4 * (1 - best_fit_weight)\n    capacity_weight = 0.3 * (1 - best_fit_weight)\n\n    combined_priority = (\n        ratio_weight * ratio_priority +\n        gap_weight * gap_priority +\n        capacity_weight * capacity_priority +\n        best_fit_weight * best_fit_priority\n    )\n\n    return combined_priority\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the first heuristic combines several factors (ratio, gap, capacity, fullness, perfect fit) with adaptive weights, while the last only considers the ratio of item size to bin capacity. (2nd) vs (19th) shows that the second heuristic combines ratio, gap, capacity, best-fit, and dynamic weights, while the 19th focuses on ratio and a \"gravitational\" attraction with some added constants. Comparing (1st) vs (2nd), we see the first one explicitly favors bins that can be perfectly filled, and includes dynamic adjustment to handle almost-full bins using an exponential penalty, it also uses adaptive weights based on item size and average capacity. In contrast, the second version lacks perfect fit consideration, uses different method to dynamically weigh best fit and introduces bin fill level concept. (3rd) vs (4th) show that the 4th one explicitly normalizes the best-fit priority and uses bin fill level to adjust weights for best-fit, ratio, gap and capacity. Heuristic 3rd lacks this normalization of best fit priority. Comparing (second worst) vs (worst), we see the second worst `priority_v2` function considers gap and ratio, and applies penalty, the worst function only considers ratio of item size to bin capacity. Overall: The better heuristics incorporate more factors, use adaptive weighting, include normalization, handle edge cases carefully (division by zero, empty input), and demonstrate state awareness (e.g., considering how full bins already are). They penalize nearly full bins more effectively.\n- \nOkay, let's refine \"Current Self-Reflection\" for better heuristic design, avoiding the pitfalls of \"Ineffective Self-Reflection.\" Here's a revised approach:\n\n*   **Keywords:** Multi-factor heuristics, adaptive weighting, normalization, state-awareness, penalty functions, edge case handling, exploration-exploitation balance.\n\n*   **Advice:** Design heuristics that intelligently combine multiple problem-relevant factors. Prioritize adaptive weighting mechanisms driven by the current problem state to dynamically adjust the influence of each factor.\n\n*   **Avoid:** Relying on single-factor metrics or analogies without strong problem relevance. Don't neglect normalization or robust edge case handling, as these are fundamental.\n\n*   **Explanation:** Effective heuristics need to be flexible and responsive to the changing problem landscape. By combining multiple normalized factors and adaptively weighting them based on the state, you create a more nuanced and powerful decision-making process. Penalties discourage undesirable outcomes, and careful edge case handling ensures robustness.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}