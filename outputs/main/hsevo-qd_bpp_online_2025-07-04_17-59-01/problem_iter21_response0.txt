```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A more sophisticated priority function for online bin packing.

    Combines ratio, gap, capacity, item_size, and bin utilization
    with adaptive weights and dynamic penalties.
    """

    # Avoid division by zero by adding a small constant
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate gap; penalize infeasible bins heavily
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)  # Set infeasible gaps to -1

    # Ratio priority (item size / bin capacity)
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)  # Use log to dampen the effect of large ratios
    ratio_priority = np.where(feasible, ratio_priority, -1e9)

    # Gap priority: Favor bins with small gaps, penalize almost-full bins heavily
    avg_cap = np.mean(bins_remain_cap)
    almost_full_penalty = np.exp(-100 * gap / (avg_cap + 1e-9))  # Stronger penalty
    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)

    # Capacity priority (normalized)
    max_cap = np.max(bins_remain_cap)
    capacity_priority = bins_remain_cap / (max_cap + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority, -1e9)

    # Bin utilization priority: Favor bins that are already somewhat full
    bin_utilization = (max_cap - bins_remain_cap) / (max_cap + 1e-9)
    utilization_priority = np.where(feasible, bin_utilization, -1e9)

    # Item size priority: Adapt priority based on item size
    item_size_factor = min(1.0, item)
    item_size_priority = item_size_factor * capacity_priority

    # Adaptive weights based on item size and average remaining capacity
    weight_ratio = 0.2 + 0.1 * item_size_factor # Prefer ratio for smaller items
    weight_gap = 0.3 - 0.1 * item_size_factor # Prefer gap for larger items
    weight_capacity = 0.2 + 0.1 * (1 - item_size_factor) # Prefer capacity for larger items
    weight_utilization = 0.2 - 0.1 * (1 - item_size_factor) # Prefer utilization for smaller items
    weight_itemsize = 0.1

    # Combined priority with adaptive weights
    combined_priority = (
        weight_ratio * ratio_priority +
        weight_gap * gap_priority +
        weight_capacity * capacity_priority +
        weight_utilization * utilization_priority +
        weight_itemsize * item_size_priority
    )

    return combined_priority
```
