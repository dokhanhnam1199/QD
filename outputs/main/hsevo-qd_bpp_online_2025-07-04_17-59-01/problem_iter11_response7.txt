```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio and gap with dynamic penalty and normalizations."""

    # Handle zero capacities to prevent division by zero
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate gap, penalize infeasible bins
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)

    # Ratio priority (item size / bin capacity), avoid log of small number
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(np.clip(ratios, 1e-9, None))
    ratio_priority = np.where(feasible, ratio_priority, -1e9)

    # Gap priority with dynamic almost-full penalty
    avg_cap = np.mean(bins_remain_cap)
    almost_full_penalty = np.exp(-50 * gap / (avg_cap + 1e-9))
    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)
    gap_priority = np.where(feasible, bins_remain_cap / (gap + 0.0001) - almost_full_penalty, -1e9)
    
    # Normalize
    gap_priority = gap_priority / (np.max(gap_priority) + 1e-9)
    ratio_priority = ratio_priority / (np.max(ratio_priority) + 1e-9)

    # Combined priority calculation
    combined_priority = 0.5 * ratio_priority + 0.5 * gap_priority

    return combined_priority
```
