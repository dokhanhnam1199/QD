```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio-based and gap-based priorities for bin selection."""
    # Calculate ratios and handle potential division by zero
    ratios = np.where(bins_remain_cap > 0, item / bins_remain_cap, np.inf)
    log_ratios = np.log(ratios)
    ratio_priority = -log_ratios

    # Calculate gap and handle infeasible bins
    gap = bins_remain_cap - item
    gap = np.where(gap < 0, -1, gap)

    # Combine ratio and gap considerations - enhanced gravitational attraction.
    gap_priority = np.where(gap >= 0, bins_remain_cap / (gap**2 + 0.0001), -1e9)

    # Combine the two priorities. Use a weighted sum.
    priorities = 0.3 * ratio_priority + 0.7 * gap_priority
    return priorities
```
