```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio, gap, and capacity with adaptive weights."""

    # Avoid division by zero
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate gap, handling infeasible bins
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)

    # Ratio priority
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)

    # Gap priority with almost-full penalty
    avg_cap = np.mean(bins_remain_cap)
    almost_full_penalty = np.exp(-50 * gap / (avg_cap + 1e-9))
    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)
    gap_priority = np.where(feasible, bins_remain_cap / (gap + 0.0001) - almost_full_penalty, -1e9)

    # Capacity priority
    capacity_priority = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority, -1e9)

    # Adaptive weights based on item size
    item_size_factor = min(1.0, item)

    # Combined priority with adaptive weights
    combined_priority = (
        0.3 * ratio_priority +
        0.4 * gap_priority +
        0.3 * capacity_priority
    )
    
    # Gravitational component
    gravity_epsilon = 9.764304781528209e-05
    negative_gravity_penalty = -1e9
    gravity = np.where(gap >= 0, bins_remain_cap / (gap**2 + gravity_epsilon), negative_gravity_penalty)
    gravity = gravity / (np.max(gravity) + 1e-9)

    combined_priority = 0.9 * combined_priority + 0.1 * gravity # Combining gravity
    return combined_priority
```
