```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Advanced priority function for online bin packing, incorporating volume utilization,
    fragmentation awareness, and reinforcement learning-inspired adaptive adjustments.
    """

    # Safe division and handling of empty bins
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Feasibility mask
    feasible = bins_remain_cap >= item

    # Volume Utilization Priority: Favor bins nearing fullness after packing
    future_capacity = np.clip(bins_remain_cap - item, 0, np.inf)
    volume_utilization = (1 - (future_capacity / np.max(bins_remain_cap))) if np.max(bins_remain_cap) > 0 else 0
    volume_utilization_priority = np.where(feasible, volume_utilization**2, -1e9)  # Higher power to emphasize near-full bins

    # Fragmentation Penalty: Discourage creating small residual gaps.
    avg_cap = np.mean(bins_remain_cap)
    small_gap_threshold = 0.2 * avg_cap
    small_gap = (future_capacity > 0) & (future_capacity <= small_gap_threshold)
    fragmentation_penalty = np.where(small_gap, -np.exp(5 * (small_gap_threshold - future_capacity) / (small_gap_threshold + 1e-9)), 0)
    fragmentation_priority = np.where(feasible, -fragmentation_penalty, -1e9)

    # Capacity Balance Priority: Encourage balancing the bin capacities.
    capacity_std = np.std(bins_remain_cap)
    capacity_balance_priority = -np.abs(future_capacity - avg_cap) / (capacity_std + 1e-9)
    capacity_balance_priority = np.where(feasible, capacity_balance_priority, -1e9)

    # Perfect Fit Bonus
    perfect_fit = np.isclose(item, bins_remain_cap)
    perfect_fit_bonus = np.where(perfect_fit & feasible, 1e9, 0)

    # Large Item Consideration
    large_item = item > 0.75 * np.max(bins_remain_cap)
    large_item_bonus = np.where(large_item & feasible, 0.2*volume_utilization_priority,0)

    # Adaptive Weights (Reinforcement Learning Inspired)
    item_size_factor = min(1.0, item)
    bin_variance_factor = min(1.0, capacity_std / (avg_cap + 1e-9)) if avg_cap > 0 else 0

    # Adjusted Combined Priority with Dynamic Balancing
    combined_priority = (
        0.4 * volume_utilization_priority +
        0.3 * fragmentation_priority +
        0.15 * capacity_balance_priority +
        0.1 * perfect_fit_bonus+
        0.05 * large_item_bonus
    )

    return combined_priority
```
