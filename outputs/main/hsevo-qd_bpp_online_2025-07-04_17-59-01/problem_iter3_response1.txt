```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       This version attempts to improve on v1 by considering a combination of factors:
       - Remaining capacity: Bins with larger remaining capacity are generally preferred (less fragmentation).
       - Gap after placement:  Minimize the gap, but avoid very small gaps which lead to further fragmentation.
       - A penalty for bins that are 'almost full' but can't fit the current item.
       - Item size relative to bin capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Avoid division by zero.  Using a tiny value.
    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap)

    gap = bins_remain_cap - item
    
    # Infeasible bins get a very low priority.
    priorities = np.where(gap < 0, -1e9, 0.0)  # Initialize all other priorities to zero

    # Feasible bins:
    feasible_bins = gap >= 0

    if np.any(feasible_bins):  # Proceed only if there are any feasible bins
      
      remaining_cap_normalized = bins_remain_cap[feasible_bins] / np.max(bins_remain_cap[feasible_bins])
      gap_normalized = gap[feasible_bins] / bins_remain_cap[feasible_bins]

      # Score based on:
      # 1. Remaining capacity (higher is better)
      # 2. Gap size (smaller gaps are better, up to a point)
      # 3. Avoiding very small gaps
      # 4. Item size relative to the bin.  Prefer bins that would become relatively full.

      priorities[feasible_bins] = (
          remaining_cap_normalized
          - np.abs(gap_normalized - 0.2) # try to get gap around 20%
          - np.where(gap_normalized < 0.05, 0.5, 0.0)  # Avoid tiny gaps
          + (item / bins_remain_cap[feasible_bins])
      )
      

      #If there are no feasible bins, the -1e9 should handle it.
    return priorities
```
