```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio, gap, capacity with dynamic penalty, normalization, and adaptive weights based on item size and bin fill levels."""

    # Ensure no division by zero and handle empty bins gracefully
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate gap; strongly penalize infeasible bins
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)
    infeasible_penalty = -1e9  # Increased penalty for infeasibility

    # Ratio priority (item size / bin capacity) - favor bins that will be well-utilized
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, infeasible_penalty)

    # Dynamic almost-full penalty and large gap penalty
    avg_cap = np.mean(bins_remain_cap)
    almost_full_penalty = np.exp(-50 * gap / (avg_cap + 1e-9))  # Sharper penalty
    large_gap_penalty = np.exp(-0.1 * gap) # smaller gaps are favored by this penalty
    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty -large_gap_penalty, infeasible_penalty) # Added large gap penalty

    # Capacity priority (normalized) - balance utilization and fragmentation
    capacity_priority = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority, infeasible_penalty)

    # Adaptive weights based on item size and bin fill levels
    item_size_factor = min(1.0, item)
    # Adjust weights based on how full bins are on average.  More full, prioritize more compact fits.
    fill_level = 1 - avg_cap / np.max(bins_remain_cap) # closer to 1 means more filled
    ratio_weight = 0.2 + 0.3 * fill_level # weight on ratio increases when bins are filled.
    gap_weight = 0.5 - 0.2 * fill_level
    capacity_weight = 0.3 - 0.1 * fill_level # Weight on capacity decreases when bins are filled

    # Combined priority with adaptive weights
    combined_priority = (
        ratio_weight * ratio_priority +
        gap_weight * gap_priority +
        capacity_weight * capacity_priority
    )

    return combined_priority
```
