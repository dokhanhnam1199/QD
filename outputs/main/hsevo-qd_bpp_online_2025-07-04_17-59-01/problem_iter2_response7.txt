```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio and gravitational attraction for priority.
    Avoids zero division and penalizes infeasible bins.
    """
    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap)
    gap = bins_remain_cap - item
    gap = np.where(gap < 0, -1, gap)
    
    # Gravitational component
    gravitational_priority = np.where(gap >= 0, bins_remain_cap / (gap**2 + 0.0001), -1e9)
    
    # Ratio component
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)

    # Combine the two components
    priorities = 0.7 * gravitational_priority + 0.3 * ratio_priority  # Weighted average

    return priorities
```
