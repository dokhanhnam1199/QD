```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio, gap, capacity, dynamic penalty, and adaptive weights."""

    # Handle zero capacities to prevent division by zero
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate gap, penalize infeasible bins
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)

    # Ratio priority (item size / bin capacity)
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)

    # Gap priority with dynamic almost-full penalty
    avg_cap = np.mean(bins_remain_cap)
    almost_full_penalty = np.exp(-50 * gap / (avg_cap + 1e-9))
    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)
    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)

    # Capacity priority (normalized remaining capacity)
    capacity_priority = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority, -1e9)
    
    # Introduce a "tight fit" bonus.  Bins that have just enough room get a boost.
    tight_fit_threshold = item * 0.1  # Within 10% of item size is considered tight fit
    tight_fit_bonus = np.where((gap >= 0) & (gap <= tight_fit_threshold), 1.0, 0.0)
    
    #Introduce a "high capacity" bonus. Bins with high capacity get boosted
    high_capacity_threshold = avg_cap
    high_capacity_bonus = np.where((bins_remain_cap > high_capacity_threshold) & (feasible), 0.5, 0.0)

    # Adaptive weights based on item size
    item_size_factor = min(1.0, item)

    #Combined priority calculation with more emphasis on gap and capacity
    combined_priority = (
        0.2 * ratio_priority +
        0.5 * gap_priority +
        0.2 * capacity_priority +
        0.05 * tight_fit_bonus +
        0.05 * high_capacity_bonus
    )

    return combined_priority
```
