```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines capacity ratio with an almost-full penalty for bin selection."""
    # Avoid division by zero.
    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap)

    gap = bins_remain_cap - item
    gap = np.where(gap < 0, -1, gap)

    # Exponential penalty for almost full bins.
    almost_full_penalty = np.exp(-50 * gap)
    almost_full_penalty = np.where(gap >= 0, almost_full_penalty, 0)

    # Capacity ratio + penalty.  Prioritizes bins that are not too full.
    priorities = np.where(gap >= 0, (bins_remain_cap / (item + 0.0001)) - almost_full_penalty, -1e9)
    return priorities
```
