```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio, gap, capacity, usage, and dynamic weighting."""

    # Avoid division by zero
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate gap and mark infeasible bins
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)

    # Ratio priority
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)

    # Gap priority with almost-full penalty and relative gap
    avg_cap = np.mean(bins_remain_cap)
    almost_full_penalty = np.exp(-50 * gap / (avg_cap + 1e-9))
    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)
    relative_gap = gap / (bins_remain_cap + 1e-9)
    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty + relative_gap, -1e9)

    # Capacity priority
    max_cap = np.max(bins_remain_cap)
    capacity_priority = bins_remain_cap / (max_cap + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority, -1e9)

    # Bin usage priority
    bin_usage_priority = (max_cap - bins_remain_cap) / (max_cap + 1e-9)
    bin_usage_priority = np.where(feasible, bin_usage_priority, -1e9)

    # Adaptive weights based on item size and capacity
    item_size_factor = min(1.0, item)
    capacity_factor = min(1.0, avg_cap / (max_cap + 1e-9))

    # Combined priority
    combined_priority = (
        0.25 * ratio_priority +
        0.45 * gap_priority +
        0.15 * capacity_priority +
        0.15 * bin_usage_priority
    )

    return combined_priority
```
