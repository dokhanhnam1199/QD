```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio, gap with dynamic penalty & normalization."""

    # Avoid division by zero.
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate gap and identify feasible bins.
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)

    # Ratio priority (item size / bin capacity).
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)

    # Gap priority (remaining capacity)
    gap_priority = np.where(feasible, bins_remain_cap, -1e9)

    # Dynamic almost-full penalty, scaled with remaining capacity.
    avg_cap = np.mean(bins_remain_cap)
    almost_full_penalty = np.exp(-50 * gap / (avg_cap + 1e-9))
    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)

    # Increase importance of gap when bins are almost full.
    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)

    # Combined priority with weights.
    priorities = 0.5 * ratio_priority + 0.5 * gap_priority

    return priorities
```
