```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Newton's insightful heuristic considers gravitational attraction - smaller gap and larger bin capacity means higher attraction.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Ensure no division by zero
    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap) # a very small number to avoid division by zero

    # Calculate gap (remaining capacity after placing the item)
    gap = bins_remain_cap - item
    # bins where gap < 0 are not feasible: assign a very small priority.
    gap = np.where(gap < 0, -1, gap)
    
    # "Gravitational" attraction: inversely proportional to a power of the distance (gap) and directly propotional to bin capacity

    priorities = np.where(gap >= 0, bins_remain_cap / (gap**2 + 0.0001), -1e9) # Added small constant to prevent possible 0 division. High Penalty for the non feasible ones
    return priorities
```
