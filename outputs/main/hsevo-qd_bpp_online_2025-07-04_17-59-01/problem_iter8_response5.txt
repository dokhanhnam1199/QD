```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio, gap, and capacity with dynamic scaling & penalty."""

    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)

    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)

    almost_full_penalty_scale = np.mean(bins_remain_cap)
    almost_full_penalty = np.exp(-50 * gap / (almost_full_penalty_scale + 1e-9))
    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)
    
    # Combined "gravitational" and gap-based priority.  Avoids zero division.
    gap_priority = np.where(feasible, (bins_remain_cap / (gap**2 + 0.0001)), -1e9) - almost_full_penalty

    capacity_priority = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority, -1e9)

    item_size_factor = min(1.0, item)

    combined_priority = (
        0.4 * ratio_priority +
        0.4 * gap_priority +
        0.2 * capacity_priority
    )

    return combined_priority
```
