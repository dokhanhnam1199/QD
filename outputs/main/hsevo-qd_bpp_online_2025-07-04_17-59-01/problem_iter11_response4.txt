```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines capacity ratio and gap with a penalty for near-full bins.
    """

    # Ensure no division by zero
    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap)

    # Calculate gap
    gap = bins_remain_cap - item
    gap = np.where(gap < 0, -1, gap)

    # Calculate ratio
    ratios = item / bins_remain_cap
    
    # Penalty for almost full
    almost_full_penalty = np.exp(-50 * gap)
    almost_full_penalty = np.where(gap >= 0, almost_full_penalty, 0)
    
    # Combine the factors
    priorities = np.where(gap >= 0, (1 - ratios) * bins_remain_cap - almost_full_penalty, -1e9) # Modified combination
    
    return priorities
```
