```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Enhanced priority function for online bin packing, combining ratio, gap,
    capacity, and fullness considerations with adaptive weighting and normalization.
    """

    # Ensure no division by zero and handle bins with zero remaining capacity gracefully
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Feasibility mask
    feasible = bins_remain_cap >= item

    # Gap calculation; penalize infeasible bins harshly
    gap = bins_remain_cap - item
    gap = np.where(feasible, gap, -1)

    # Ratio priority (item size / bin capacity); emphasize efficient usage
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)  # Very low priority for infeasible bins

    # Gap priority: Favor bins with smaller gaps, but penalize almost-full bins.
    # Use a more sensitive 'almost full' penalty.
    avg_cap = np.mean(bins_remain_cap)
    almost_full_threshold = 0.1 * avg_cap  # Dynamically adjust threshold
    almost_full = (gap >= 0) & (gap <= almost_full_threshold)
    almost_full_penalty = np.where(almost_full, np.exp(5 * (gap - almost_full_threshold) / (almost_full_threshold + 1e-9)), 0) # Exponential penalty
    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)

    # Capacity priority: Favor bins with larger remaining capacity, normalized
    capacity_priority = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority, -1e9)


    # Fullness priority:  Encourage filling up bins that are already somewhat full
    # This is designed to avoid leaving many almost-empty bins.
    fullness_level = bins_remain_cap / (avg_cap + 1e-9)
    fullness_priority = np.where(feasible, 1 - np.exp(-3*fullness_level),-1e9)


    # Adaptive weights based on item size and average capacity.
    item_size_factor = min(1.0, item)
    capacity_factor = min(1.0, avg_cap / (np.max(bins_remain_cap)+1e-9)) if np.max(bins_remain_cap) > 0 else 0.5


    # State aware priority to give high preference if this item can fill this bin completely.
    perfect_fit = np.isclose(item, bins_remain_cap)
    perfect_fit_bonus = np.where(perfect_fit & feasible, 1e9, 0)

    # Combined priority with adaptive weights, including fullness consideration.
    combined_priority = (
        0.2 * ratio_priority +
        0.3 * gap_priority +
        0.2 * capacity_priority +
        0.2 * fullness_priority +
        0.1 * perfect_fit_bonus # Encourage finding a perfect fit
    )

    return combined_priority
```
