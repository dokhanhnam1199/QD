```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Heuristic inspired by the principle of minimizing wasted space,
    but also incorporating a 'desire' to fill bins as much as possible,
    preventing excessive fragmentation. Accounts for edge cases.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap < item:
            priorities[i] = -np.inf  # Cannot fit - lowest priority

        elif cap == item:
            priorities[i] = np.inf # Perfect fit - highest priority

        else:
            # Base priority: smaller waste is better, but avoid too small remainder
            waste = cap - item
            priority = 1.0 / (waste + 0.00001)  # Adding a small constant to avoid division by zero

            # Add a bonus for approaching capacity but not filling completely, encourages filling larger bins
            #A sigmoid centered near to item size will add priority when its near to the bin capacity.
            sigmoid_scale = 5.0 #Tuning parameters. Could be determined by gridsearch
            sigmoid_translation = (item + cap) / 2.0

            priority += 1.0 / (1 + np.exp(sigmoid_scale * (item - sigmoid_translation))) #Higher capacity

            priorities[i] = priority

    return priorities
```
