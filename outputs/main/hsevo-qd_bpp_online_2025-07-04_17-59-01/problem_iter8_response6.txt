```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio, gap, capacity, and dynamic penalty for bin selection."""

    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap)
    gap = bins_remain_cap - item
    gap = np.where(gap < 0, -1, gap)

    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(gap >= 0, ratio_priority, -1e9)

    almost_full_penalty = np.exp(-50 * gap)
    almost_full_penalty = np.where(gap >= 0, almost_full_penalty, 0)
    gap_priority = np.where(gap >= 0, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)

    capacity_priority = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)
    capacity_priority = np.where(gap >= 0, capacity_priority, -1e9)

    priorities = 0.4 * ratio_priority + 0.4 * gap_priority + 0.2 * capacity_priority
    return priorities
```
