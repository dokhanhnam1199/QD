{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n       Newton's insightful heuristic considers gravitational attraction - smaller gap and larger bin capacity means higher attraction.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure no division by zero\n    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap) # a very small number to avoid division by zero\n\n    # Calculate gap (remaining capacity after placing the item)\n    gap = bins_remain_cap - item\n    # bins where gap < 0 are not feasible: assign a very small priority.\n    gap = np.where(gap < 0, -1, gap)\n    \n    # \"Gravitational\" attraction: inversely proportional to a power of the distance (gap) and directly propotional to bin capacity\n\n    priorities = np.where(gap >= 0, bins_remain_cap / (gap**2 + 0.0001), -1e9) # Added small constant to prevent possible 0 division. High Penalty for the non feasible ones\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the primary difference lies in the priority calculation. The better heuristic uses a physics-inspired approach (gravitational attraction), considering both the remaining capacity of the bin and the gap after placing the item. The worse heuristic simply uses the negative log of the ratio between item size and remaining capacity.\nComparing (11th) vs (20th), there are no differences, and all heuristics from 11th to 20th share same source code.\nComparing (1st) vs (11th), the key differences is that the 1st heuristics accounts for both bin capacity and gap while the 11th heuristics (and below) only accounts for ratios. The 1st heuristic also has a robust mechanism for dealing with infeasible bins (bins with negative gap) by assigning a very small priority. Finally 1st heuristic has a constant 0.0001 to prevent zero division, where the others does not.\nOverall: The \"gravitational attraction\" approach appears to be more effective for priority calculation in this bin packing context. The gap, penalizing infeasible options, and considering both bin size and gap provide more robust performance.\n- \nOkay, here's a redefinition of \"Current Self-Reflection\" geared towards designing better heuristics, avoiding common pitfalls of ineffective reflection, and designed for bin packing:\n\n*   **Keywords:** Heuristic Adaptation, Performance Metrics, Exploration/Exploitation, Solution Landscape.\n*   **Advice:** Evaluate heuristics using diverse datasets and performance metrics (packing density, runtime). Systematically analyze heuristic failures, identifying patterns and potential adaptations. Balance exploration (trying new placement strategies) with exploitation (refining existing ones).\n*   **Avoid:** Focusing solely on average-case performance; Ignoring worst-case scenarios; Premature convergence.\n*   **Explanation:** Effective self-reflection involves iterative improvement based on *data-driven* analysis of heuristic *performance*. This requires rigorous testing, failure analysis, and a willingness to adapt the heuristic's strategy.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}