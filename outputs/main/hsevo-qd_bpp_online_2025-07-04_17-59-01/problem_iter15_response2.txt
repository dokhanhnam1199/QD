```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio, gap, capacity with dynamic penalty and normalization."""

    # Ensure no division by zero
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate gap; penalize infeasible bins
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)

    # Ratio priority (item size / bin capacity)
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)

    # Dynamic almost-full penalty based on remaining capacity
    avg_cap = np.mean(bins_remain_cap)
    almost_full_penalty = np.exp(-50 * gap / (avg_cap + 1e-9))
    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)
    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)

    # Capacity priority (normalized) and squared
    capacity_priority = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority**2, -1e9)


    # Adaptive weights based on item size.  Larger items favor tighter fits
    item_size_factor = min(1.0, item)
    tight_fit_preference = np.exp(-10 * gap / (item + 1e-9))  # Prefer tighter fits for larger items
    tight_fit_preference = np.where(feasible, tight_fit_preference, 0)

    # More complex combined priority with adaptive weights and tighter fit preference
    combined_priority = (
        0.2 * ratio_priority +
        0.3 * gap_priority +
        0.3 * capacity_priority +
        0.2 * tight_fit_preference * item_size_factor # Add tight fit term
    )

    # Introduce a bin diversity component.  Penalize using bins that are very similar to others, particularly when space is plentiful.
    std_cap = np.std(bins_remain_cap)
    diversity_penalty = np.exp(-((bins_remain_cap - avg_cap)**2) / (2 * (std_cap**2 + 1e-9)))

    # Ensure diversity is only applied to feasible bins, and dampen its effect.
    diversity_penalty = np.where(feasible, diversity_penalty * 0.1, 0)
    combined_priority -= diversity_penalty

    return combined_priority
```
