```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines normalized gap, capacity, and fill level."""

    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)

    max_cap = np.max(bins_remain_cap)
    capacity_priority = bins_remain_cap / (max_cap + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority, -1e9)

    best_fit_priority = np.where(feasible, -gap, -1e9)
    best_fit_priority = np.where(feasible, (best_fit_priority - np.min(best_fit_priority[feasible])) / (np.max(best_fit_priority[feasible]) - np.min(best_fit_priority[feasible]) + 1e-9), -1e9)
   
    bin_fill_level = 1 - (bins_remain_cap / max_cap)
    avg_fill = np.mean(bin_fill_level)

    best_fit_weight = min(0.5, avg_fill)
    capacity_weight = 1- best_fit_weight

    combined_priority = (
        capacity_weight * capacity_priority +
        best_fit_weight * best_fit_priority
    )

    return combined_priority
```
