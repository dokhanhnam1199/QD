```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Newton's attraction and ratio-based approaches."""
    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap)
    gap = bins_remain_cap - item
    gap = np.where(gap < 0, -1, gap)

    # Combine "gravitational" attraction with ratio.
    attraction = np.where(gap >= 0, bins_remain_cap / (gap**2 + 0.0001), -1e9)
    ratios = item / bins_remain_cap
    log_ratios = np.log(ratios)
    ratio_priority = -log_ratios
    # Weighted combination - more weight to attraction if gap is small, else ratio.
    weights = np.clip(1 - gap / bins_remain_cap, 0.1, 0.9)  # Scale 0->1, clip to avoid extreme weights
    priorities = weights * attraction + (1 - weights) * ratio_priority
    return priorities
```
