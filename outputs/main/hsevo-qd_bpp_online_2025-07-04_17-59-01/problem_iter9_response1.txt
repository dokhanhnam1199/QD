```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Multifactorial priority with normalization, dynamic penalties, and adaptive weights."""

    # Avoid division by zero
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate gap, penalize infeasible bins
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)

    # Ratio priority (item size / bin capacity) - Normalized
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)
    ratio_priority = (ratio_priority - np.min(ratio_priority[ratio_priority > -1e9])) / (np.max(ratio_priority[ratio_priority < 1e9]) - np.min(ratio_priority[ratio_priority > -1e9]) + 1e-9)
    ratio_priority = np.where(feasible, ratio_priority, 0)


    # Gap priority with dynamic almost-full penalty - Adjusted Penalty
    avg_cap = np.mean(bins_remain_cap)
    # Adjusted penalty based on item size relative to average capacity
    penalty_strength = min(50.0, 100 * item / (avg_cap + 1e-9))  # Stronger penalty for larger items
    almost_full_penalty = np.exp(-penalty_strength * gap / (avg_cap + 1e-9))
    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)
    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)
    gap_priority = (gap_priority - np.min(gap_priority[gap_priority > -1e9])) / (np.max(gap_priority[gap_priority < 1e9]) - np.min(gap_priority[gap_priority > -1e9]) + 1e-9)
    gap_priority = np.where(feasible, gap_priority, 0)

    # Capacity priority (normalized remaining capacity) - Adjusted Normalization
    max_cap = np.max(bins_remain_cap)
    capacity_priority = bins_remain_cap / (max_cap + 1e-9) #Prevent zero division if max_cap = 0
    capacity_priority = np.where(feasible, capacity_priority, -1e9)
    capacity_priority = (capacity_priority - np.min(capacity_priority[capacity_priority > -1e9])) / (np.max(capacity_priority[capacity_priority < 1e9]) - np.min(capacity_priority[capacity_priority > -1e9]) + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority, 0)


    # State-Aware Priority: Empty Bins - Encourages bin utilization
    empty_bin_bonus = np.where(bins_remain_cap == max_cap, 0.1, 0) # Small bonus to empty bin
    empty_bin_priority = np.where(feasible,empty_bin_bonus, 0)


    # Adaptive weights based on item size and remaining capacity
    item_size_factor = min(1.0, item) # Scale between 0 and 1
    capacity_ratio = avg_cap / (max_cap + 1e-9) # Scale between 0 and 1


    # Combined priority calculation - Dynamic weight adjustment
    weight_ratio = 0.2 + 0.3 * item_size_factor
    weight_gap = 0.5 - 0.2 * capacity_ratio
    weight_capacity = 0.3 - 0.1 * item_size_factor
    weight_empty = 0.0


    combined_priority = (
        weight_ratio * ratio_priority +
        weight_gap * gap_priority +
        weight_capacity * capacity_priority +
        weight_empty * empty_bin_priority
    )

    return combined_priority
```
