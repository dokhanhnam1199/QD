```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio, gap, capacity, and bin utilization with adaptive weights and penalties."""

    # Ensure no division by zero
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate gap; penalize infeasible bins
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)

    # Ratio priority (item size / bin capacity)
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)
    ratio_priority = (ratio_priority - np.min(ratio_priority)) / (np.max(ratio_priority) - np.min(ratio_priority) + 1e-9) if np.any(feasible) else np.zeros_like(ratio_priority) # Normalized

    # Gap priority
    gap_priority = np.where(feasible, bins_remain_cap / (gap + 0.0001), -1e9) # Favor small gaps
    gap_priority = (gap_priority - np.min(gap_priority)) / (np.max(gap_priority) - np.min(gap_priority) + 1e-9) if np.any(feasible) else np.zeros_like(gap_priority) # Normalized


    # Capacity priority (normalized)
    capacity_priority = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority, -1e9)

    # Bin Utilization Priority.  Prioritize bins with moderate utilization
    utilization = 1 - (bins_remain_cap / (np.max(bins_remain_cap) + 1e-9))
    utilization_priority = np.exp(-((utilization - 0.75)**2) / 0.1) # Gaussian around 0.75
    utilization_priority = np.where(feasible, utilization_priority, -1e9)
    utilization_priority = (utilization_priority - np.min(utilization_priority)) / (np.max(utilization_priority) - np.min(utilization_priority) + 1e-9) if np.any(feasible) else np.zeros_like(utilization_priority)  # Normalized


    # Adaptive weights based on item size and remaining capacities
    item_size_factor = min(1.0, item)
    avg_cap = np.mean(bins_remain_cap)

    # Adjust weights dynamically.
    if item_size_factor > 0.7 and avg_cap < 0.3: # Large item, bins mostly full
        weight_ratio = 0.1
        weight_gap = 0.6
        weight_capacity = 0.1
        weight_utilization = 0.2
    elif item_size_factor < 0.3: # Small item
        weight_ratio = 0.5
        weight_gap = 0.2
        weight_capacity = 0.1
        weight_utilization = 0.2

    else:
        weight_ratio = 0.3
        weight_gap = 0.4
        weight_capacity = 0.1
        weight_utilization = 0.2


    # Combined priority with adaptive weights
    combined_priority = (
        weight_ratio * ratio_priority +
        weight_gap * gap_priority +
        weight_capacity * capacity_priority +
        weight_utilization * utilization_priority
    )

    return combined_priority
```
