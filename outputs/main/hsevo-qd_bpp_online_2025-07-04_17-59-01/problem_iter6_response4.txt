```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines ratio-based and gap-based approaches with dynamic penalty and capacity-aware scaling.
    """
    # Avoid division by zero
    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap)

    # Calculate gap, handling infeasible bins
    gap = bins_remain_cap - item
    infeasible_mask = gap < 0
    gap = np.where(infeasible_mask, -1, gap)

    # Ratio-based priority (normalized item size relative to bin capacity)
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(gap >= 0, ratio_priority, -1e9) # penalize infeasible

    # Capacity-aware scaling factor
    capacity_scale = np.sqrt(bins_remain_cap)  # Scale based on remaining capacity
    capacity_scale = np.where(gap >=0, capacity_scale, 0)


    # Dynamic almost full penalty based on item size
    almost_full_sensitivity = 50 + 20 * item # larger items need more sensitivity
    almost_full_penalty = np.exp(-almost_full_sensitivity * gap)
    almost_full_penalty = np.where(gap >= 0, almost_full_penalty, 0)



    # Gap-based priority with capacity aware scaling and penalty
    gap_priority = np.where(gap >= 0, (capacity_scale * bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9) #penalize infeasible

    # Combine ratio and gap based priorities with adaptive weights
    # Adapt weight based on item size relative to average bin capacity
    average_bin_capacity = np.mean(bins_remain_cap)
    ratio_weight = min(1.0, item / (average_bin_capacity + 1e-9))
    gap_weight = 1 - ratio_weight


    priorities = ratio_weight * ratio_priority + gap_weight * gap_priority

    return priorities
```
