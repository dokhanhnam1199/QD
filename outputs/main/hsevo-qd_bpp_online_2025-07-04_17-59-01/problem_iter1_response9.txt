```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function prioritizes bins that can accommodate the item with minimal wasted space,
    but also considers partially full bins to avoid excessive fragmentation.  It combines
    a 'best fit' approach with a bias against leaving too much empty space, using a
    logarithmic penalty.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, capacity in enumerate(bins_remain_cap):
        if capacity >= item:
            # Prioritize bins that can fit the item. The closer the fit, the higher the initial priority.
            priorities[i] = capacity - item  # Smaller remaining space gets higher priority
            priorities[i] = -priorities[i]  # make higher priority means larger number
            # Penalize excessive remaining capacity to avoid creating overly empty bins and fragmentations
            priorities[i] -= np.log1p(capacity - item)  # Log penalty makes the penality softer for very empty bin

        else:
            priorities[i] = -np.inf  # Bin cannot accommodate, assign lowest priority

    return priorities
```
