```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines normalized ratio and gravity with near-full bin penalty."""

    # Avoid division by zero
    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap)

    # Calculate gap
    gap = bins_remain_cap - item
    gap = np.where(gap < 0, -1, gap)

    # Ratio-based priority (normalized)
    ratios = np.where(bins_remain_cap > 0, item / bins_remain_cap, 0)
    normalized_ratios = ratios / np.max(ratios) if np.max(ratios) > 0 else np.zeros_like(ratios)

    # "Gravitational" attraction
    gravity = np.where(gap >= 0, bins_remain_cap / (gap**2 + 0.0001), -1e9)
    normalized_gravity = gravity / np.max(gravity) if np.max(gravity) > 0 else np.zeros_like(gravity)

    # Almost full penalty. Higher penalty for smaller remaining capacity.
    almost_full_penalty = np.where((gap > 0) & (gap < 0.1), -10 * (0.1 - gap), 0) # adjust parameters by your self

    # Combine priorities
    priorities = 0.4 * normalized_ratios + 0.4 * normalized_gravity + 0.2 * almost_full_penalty

    return priorities
```
