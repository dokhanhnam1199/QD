```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """
    Advanced priority function for online bin packing, integrating multiple factors
    with adaptive weighting, normalization, and state awareness.
    """

    # Avoid division by zero and handle non-positive bin capacities gracefully.
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Feasibility mask: identify bins that can accommodate the item.
    feasible = bins_remain_cap >= item

    # Calculate the remaining gap after placing the item in each bin.
    gap = bins_remain_cap - item
    gap = np.where(feasible, gap, -1)  # Infeasible bins get a large negative gap.

    # Ratio priority: ratio of item size to bin capacity.
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)  # Very low priority for infeasible bins

    # Gap priority: Penalize bins that are almost full after placing the item.
    avg_cap = np.mean(bins_remain_cap)
    almost_full_threshold = 0.15 * avg_cap  # Adaptive threshold based on average capacity
    almost_full = (gap >= 0) & (gap <= almost_full_threshold)
    almost_full_penalty = np.where(almost_full, np.exp(6 * (gap - almost_full_threshold) / (almost_full_threshold + 1e-9)), 0) # Stronger penalty
    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)

    # Capacity priority: Favor bins with larger remaining capacity, but not too large
    capacity_priority = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority, -1e9)
    # Penalize bins that are significantly larger than the item. Prevents leaving very empty bins.
    oversized_threshold = 2.0 * item # Bins more than 2x larger than the item.
    oversized = bins_remain_cap > oversized_threshold
    oversized_penalty = np.where(oversized & feasible, -0.5 * (bins_remain_cap - oversized_threshold) / (np.max(bins_remain_cap) + 1e-9), 0) # Linear penalty
    capacity_priority = capacity_priority + oversized_penalty


    # Fullness priority: Encourage filling bins that are already reasonably full.
    fullness_level = (avg_cap - bins_remain_cap) / (avg_cap + 1e-9) #How full the bin already is.
    fullness_priority = np.where(feasible, 1 - np.exp(-4 * fullness_level), -1e9)

    # State-aware priority: Reward perfect fits and near-perfect fits.
    perfect_fit = np.isclose(item, bins_remain_cap)
    perfect_fit_bonus = np.where(perfect_fit & feasible, 1e9, 0)
    near_perfect_fit = (bins_remain_cap > item) & (bins_remain_cap < (item * 1.1)) # up to 10% bigger than item.
    near_perfect_fit_bonus = np.where(near_perfect_fit & feasible, 0.5e9, 0)

    # Adaptive weights based on item size and average capacity.
    item_size_factor = min(1.0, item)
    capacity_factor = min(1.0, avg_cap / (np.max(bins_remain_cap)+1e-9)) if np.max(bins_remain_cap) > 0 else 0.5

    # Exploration-Exploitation: Add some randomness
    randomness = np.random.rand(len(bins_remain_cap)) * 0.01  # Small random factor

    # Combined priority with adaptive weights, including fullness and perfect fit consideration.
    combined_priority = (
        0.22 * ratio_priority +
        0.33 * gap_priority +
        0.18 * capacity_priority +
        0.17 * fullness_priority +
        0.08 * perfect_fit_bonus +
        0.02 * near_perfect_fit_bonus +
        randomness
    )

    return combined_priority
```
