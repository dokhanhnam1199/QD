```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # 1. Immediate fit: Prioritize bins where the item fits immediately.
    immediate_fit = (bins_remain_cap >= item)
    priorities[immediate_fit] += 1  # Give a base priority if it fits.

    # 2. Remaining Capacity Consideration: Prefer bins with smaller remaining capacity AFTER the item is placed
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[remaining_after_fit < 0] = np.inf # Give penalty if item cannot fit.
    priorities[immediate_fit] += 1.0 / (1e-9 + remaining_after_fit[immediate_fit])  # Smaller remaining capacity preferred, preventing fragmentation

    # 3. Relative Fullness: Prefer bins that are already relatively full (avoid spreading items too thin).
    priorities[immediate_fit] += bins_remain_cap[immediate_fit] / np.sum(bins_remain_cap)

    # 4. If no bin can fit item set priority to -inf
    priorities[bins_remain_cap < item] = -np.inf
    return priorities
```
