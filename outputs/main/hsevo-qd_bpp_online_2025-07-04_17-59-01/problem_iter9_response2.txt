```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio, gap, capacity, dynamic penalty, and adaptive weights with improved logic."""

    # Handle zero capacities to prevent division by zero
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate gap, penalize infeasible bins
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)

    # Ratio priority (item size / bin capacity)
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)

    # Gap priority with dynamic almost-full penalty and consideration for small gaps
    avg_cap = np.mean(bins_remain_cap)
    # Softer penalty for slightly full bins, stronger for almost full.
    almost_full_penalty = np.exp(-10 * gap / (avg_cap + 1e-9)) # Adjusted exponent
    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)

    # Prioritize bins with very small gaps but not if there's a significant unused capacity elsewhere
    small_gap_bonus = np.where((gap > 0) & (gap < 0.1 * avg_cap), 10, 0) # Small gap bonus
    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty + small_gap_bonus, -1e9)


    # Capacity priority (normalized remaining capacity) with added scaling
    max_cap = np.max(bins_remain_cap)
    capacity_priority = bins_remain_cap / (max_cap + 1e-9)
    # Scale capacity priority based on how full the "fullest" bin is.  If the fullest bin is mostly empty,
    # then having a lot of capacity is not that useful
    capacity_scaling = min(1.0, max_cap / (avg_cap + 1e-9))
    capacity_priority = capacity_priority * capacity_scaling
    capacity_priority = np.where(feasible, capacity_priority, -1e9)

    # Adaptive weights based on item size and bin state
    item_size_factor = min(1.0, item)

    # Dynamically adjust weights based on the average remaining capacity.
    # When bins are mostly full, prioritize gap; when mostly empty, prioritize capacity and ratio
    if avg_cap > 0.75: # Bins are relatively empty
        ratio_weight = 0.4
        gap_weight = 0.3
        capacity_weight = 0.3
    elif avg_cap < 0.25: # Bins are relatively full
        ratio_weight = 0.2
        gap_weight = 0.6
        capacity_weight = 0.2
    else: # Mixed state
        ratio_weight = 0.3
        gap_weight = 0.5
        capacity_weight = 0.2

    # Combined priority calculation
    combined_priority = (
        ratio_weight * ratio_priority +
        gap_weight * gap_priority +
        capacity_weight * capacity_priority
    )

    return combined_priority
```
