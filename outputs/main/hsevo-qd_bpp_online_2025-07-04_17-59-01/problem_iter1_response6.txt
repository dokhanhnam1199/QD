```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Ensure remaining capacities are non-negative to avoid errors
    bins_remain_cap = np.maximum(bins_remain_cap, 0)

    # Calculate the remaining capacity after placing the item (can be negative).
    remaining_after_placement = bins_remain_cap - item

    # Give high priority to bins where the item *almost* fills them, 
    # but avoid bins where item doesn't fit. Use a quadratic penalty.
    # Prioritize bins where placing the item leads to smallest remaining capacity,
    # But only if it fits (remaining capacity is >=0)

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fits = remaining_after_placement >= 0

    # Heuristic: prefer near-full bins and avoid small fragments and wasted space.
    priorities[fits] = (bins_remain_cap[fits]**2)/(remaining_after_placement[fits] + 1e-9) # penalize the wasted space and use square on bin size to encourage using the larger bins early
    
    #Give additional bonus if it fills perfectly.
    perfect_fit = remaining_after_placement == 0
    priorities[perfect_fit] += np.max(bins_remain_cap)*10 #Huge bonus for perfect fill, use remaining capacities scale so its relative to size

    return priorities
```
