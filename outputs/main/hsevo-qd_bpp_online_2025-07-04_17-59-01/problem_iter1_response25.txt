```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Employing a heuristic inspired by celestial mechanics:  Prioritize bins
    that offer a 'stable orbit' for the item.  This means a good fit,
    not too tight (risk of 'collision') and not too loose (waste of space).
    Furthermore, heavily penalize bins that cannot accommodate the item at all,
    simulating a complete gravitational ejection.  Introduce a small random factor
    to prevent getting stuck in local minima, akin to Brownian motion in the
    cosmos.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Identify bins that can accommodate the item.  Incompatible bins get heavily penalized.
    compatible_bins = bins_remain_cap >= item
    priorities[~compatible_bins] = -np.inf  # Massive penalty for incompatible bins.  Ejection!

    # 2. For compatible bins, calculate the 'fit' score.  Ideal fit is when the remaining capacity after placement is neither too small nor too large.
    remaining_after_placement = bins_remain_cap[compatible_bins] - item
    fit_score = np.exp(-((remaining_after_placement - item/2)**2) / (2 * (item/4)**2)) # Gaussian-like, centered at item/2

    # 3. Prioritize less full bins, but not if it compromises the 'fit'. Inverse of bin fill percentage.
    bin_fill_percentage = item / bins_remain_cap[compatible_bins]
    fill_priority = 1.0 / (bin_fill_percentage + 0.01) # Small additive to prevent division by zero

    # 4. Combine the fit score and fill priority. Give more weight to the fit.
    priorities[compatible_bins] = 0.8 * fit_score + 0.2 * fill_priority

    # 5. Add a touch of random variation (Brownian motion) to avoid getting stuck in local optima.
    priorities += np.random.normal(0, 0.01, size=priorities.shape)  # Small random noise

    return priorities
```
