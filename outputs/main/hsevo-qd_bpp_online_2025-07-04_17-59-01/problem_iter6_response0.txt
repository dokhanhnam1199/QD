```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines ratio-based, gap-based, and capacity-based approaches with dynamic penalty and normalization.
    """
    # Avoid division by zero
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate gap, handling infeasible bins
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)

    # Ratio-based priority (normalized item size relative to bin capacity)
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)

    # Gap-based priority + Almost full penalty (dynamically adjusted)
    almost_full_penalty_scale = np.mean(bins_remain_cap)  # Dynamic scaling
    almost_full_penalty = np.exp(-50 * gap / (almost_full_penalty_scale + 1e-9))  # Scale gap for penalty
    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)
    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)
    
    # Capacity-based priority (normalized remaining capacity)
    capacity_priority = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)  # Normalize capacity
    capacity_priority = np.where(feasible, capacity_priority, -1e9)
    
    # Combined priority with adaptive weights based on item size
    item_size_factor = min(1.0, item)  # Scale weights based on item size
    
    combined_priority = (
        0.4 * ratio_priority +
        0.4 * gap_priority +
        0.2 * capacity_priority
    )

    return combined_priority
```
