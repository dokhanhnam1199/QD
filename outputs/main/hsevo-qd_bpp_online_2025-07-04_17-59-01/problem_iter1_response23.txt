```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Prioritize bins where the item fits. Aim for close fit but also avoid leaving very small gaps
            fill_ratio = item / cap
            # High priority for close fits, but penalize very small gaps. Quadratic penalty for wasted space.
            priorities[i] = fill_ratio - (cap - item)**2 if cap - item > 0 else fill_ratio # Quadratic waste penalty
            #Boost priority a bit when almost filling the bin
            if (cap - item) < 0.1:
                 priorities[i] += 0.5

            #If there is a full fit, let's favor to fill this bin
            if (cap - item) == 0.0:
                priorities[i] = 2.0  #Even more priority

        else:
            # Negative priority if the item doesn't fit
            priorities[i] = -1e9  #very bad idea

    return priorities
```
