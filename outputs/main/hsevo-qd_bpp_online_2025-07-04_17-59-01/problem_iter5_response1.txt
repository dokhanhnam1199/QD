```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio and remaining capacity for bin selection. Penalizes almost full bins."""

    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap)

    # Calculate gap
    gap = bins_remain_cap - item
    gap = np.where(gap < 0, -1, gap)

    # Ratio-based priority (normalized)
    ratios = np.where(bins_remain_cap > 0, item / bins_remain_cap, 0)
    normalized_ratios = ratios / np.max(ratios) if np.max(ratios) > 0 else np.zeros_like(ratios)

    # Remaining Capacity Priority
    cap_priority = bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)


    # Almost full penalty.
    almost_full_penalty = np.where((gap > 0) & (gap < 0.1), -10, 0)


    priorities = 0.4 * normalized_ratios + 0.6 * cap_priority + almost_full_penalty

    return priorities
```
