```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio, gap, capacity, and fill level with adaptive weights."""

    epsilon = 1e-9
    feasible = bins_remain_cap >= item
    num_feasible = np.sum(feasible)

    if num_feasible == 0:
        return -bins_remain_cap

    ratios = item / np.where(bins_remain_cap <= 0, epsilon, bins_remain_cap)
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)

    gap = bins_remain_cap - item
    gap = np.where(feasible, gap, -1)
    avg_cap = np.mean(bins_remain_cap[feasible]) if num_feasible > 0 else np.mean(bins_remain_cap)
    almost_full_penalty = np.exp(-50 * gap / (avg_cap + epsilon))
    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)
    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)

    max_cap = np.max(bins_remain_cap[feasible]) if num_feasible > 0 else np.max(bins_remain_cap)
    capacity_priority = bins_remain_cap / (max_cap + epsilon)
    capacity_priority = np.where(feasible, capacity_priority, -1e9)

    fill_level = 1.0 - (bins_remain_cap / (np.max(bins_remain_cap) + epsilon))
    fill_level_priority = -fill_level
    fill_level_priority = np.where(feasible, fill_level_priority, -1e9)

    item_size_factor = min(1.0, item)
    bin_diversity = np.std(bins_remain_cap)
    diversity_factor = min(1.0, bin_diversity)

    # Adaptive weights based on item size
    if item_size_factor > 0.5:
        weight_gap = 0.6
        weight_capacity = 0.1
        weight_ratio = 0.15
        weight_fill = 0.15
    else:
        weight_gap = 0.5
        weight_capacity = 0.15
        weight_ratio = 0.2
        weight_fill = 0.15

    combined_priority = (
        weight_ratio * ratio_priority +
        weight_gap * gap_priority +
        weight_capacity * capacity_priority +
        weight_fill * fill_level_priority
    )

    return combined_priority
```
