{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines ratio-based and gap-based approaches with penalty.\n    \"\"\"\n    # Avoid division by zero\n    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap)\n\n    # Calculate gap, handling infeasible bins\n    gap = bins_remain_cap - item\n    gap = np.where(gap < 0, -1, gap)\n\n    # Ratio-based priority (normalized item size relative to bin capacity)\n    ratios = item / bins_remain_cap\n    ratio_priority = -np.log(ratios)\n    ratio_priority = np.where(gap >= 0, ratio_priority, -1e9)\n\n    # Gap-based priority + Almost full penalty\n    almost_full_penalty = np.exp(-50 * gap)\n    almost_full_penalty = np.where(gap >= 0, almost_full_penalty, 0)\n    gap_priority = np.where(gap >= 0, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)\n\n\n    # Combine ratio and gap based priorities\n    priorities = 0.5 * ratio_priority + 0.5 * gap_priority\n\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's refine \"Current self-reflection\" to focus on actionable insights for heuristic design, avoiding the pitfalls of the \"Ineffective self-reflection.\" Here's a breakdown to help you design better heuristics:\n\n*   **Keywords:** Factor combination, normalization, penalization, edge-case handling, complexity.\n\n*   **Advice:** Prioritize complex formulas leveraging multiple normalized, relevant factors. Explicitly penalize undesirable intermediate states. Ensure robust handling of edge cases and infeasibility.\n\n*   **Avoid:** Vague domain-specific analogies. Simple ratios or single-factor decisions. Ignoring intermediate state quality.\n\n*   **Explanation:** Combining multiple normalized factors allows for a more nuanced evaluation of potential moves. Penalizing near-misses (e.g., almost full bins) guides the search towards better overall solutions. Robust edge-case handling prevents failures.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}