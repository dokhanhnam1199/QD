```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Advanced priority function for online bin packing, incorporating dynamic
    weighting, robust normalization, and state-aware adjustments. Aims for a
    better balance between exploration and exploitation.
    """

    # Handle zero or negative remaining capacities with a small value
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Feasibility check: Can the item fit in the bin?
    feasible = bins_remain_cap >= item

    # Calculate the gap (unused space if item is placed in the bin)
    gap = bins_remain_cap - item
    gap = np.where(feasible, gap, np.inf)  # Mark infeasible bins with infinite gap

    # Ratio priority:  How efficiently the item fills the bin
    ratios = item / bins_remain_cap
    ratio_priority = np.where(feasible, ratios, 0.0) # feasible ones are given values, others are zero.

    # Gap priority: Prioritize smaller gaps, but penalize almost-full bins
    avg_cap = np.mean(bins_remain_cap)
    almost_full_threshold = 0.2 * avg_cap  # Adaptive threshold
    almost_full = (gap >= 0) & (gap <= almost_full_threshold)
    almost_full_penalty = np.where(almost_full, np.exp(4 * (gap - almost_full_threshold) / (almost_full_threshold + 1e-9)), 0) # exponential penalty
    gap_priority = np.where(feasible, 1 - (gap / (avg_cap + 1e-9)) - almost_full_penalty, -np.inf)  # Normalize gap and penalize

    # Capacity priority: Favor bins with more remaining capacity
    max_cap = np.max(bins_remain_cap)
    capacity_priority = np.where(feasible, bins_remain_cap / (max_cap + 1e-9), -np.inf)

    # Fullness priority: Encourage filling bins that are already somewhat full
    fullness_level = 1 - (bins_remain_cap / (avg_cap + 1e-9)) # invert to have high values to full bins
    fullness_priority = np.where(feasible, np.exp(2*fullness_level) - 1, -np.inf) # exponential, so that bins somewhat full will have higher scores

    # Perfect fit bonus
    perfect_fit = np.isclose(item, bins_remain_cap)
    perfect_fit_bonus = np.where(perfect_fit & feasible, 1e6, 0) # large value if it's feasible and there's perfect fit

    # Near-perfect fit bonus: reward near perfect fill.
    near_perfect_threshold = 0.05 * item  # Adjust threshold as needed
    near_perfect = (gap >= 0) & (gap <= near_perfect_threshold)
    near_perfect_bonus = np.where(near_perfect & feasible, 1e5 * (1 - gap / (near_perfect_threshold + 1e-9)), 0) # scaled based on gap

    # Adaptive Weighting based on item size and remaining capacities
    item_size_factor = min(1.0, item)
    capacity_ratio = avg_cap / (max_cap + 1e-9) if max_cap > 0 else 0.5
    capacity_factor = min(1.0, capacity_ratio)

    # Dynamic Adjustment of Weights: key modification

    weight_ratio = 0.2 + 0.1*item_size_factor
    weight_gap = 0.3 - 0.1 * capacity_factor
    weight_capacity = 0.2 + 0.1*capacity_factor
    weight_fullness = 0.2 - 0.05*item_size_factor
    weight_perfect_fit = 0.05 + 0.05*(item_size_factor + capacity_factor)
    weight_near_perfect = 0.05


    # Combine priorities with adaptive weights
    combined_priority = (
        weight_ratio * ratio_priority +
        weight_gap * gap_priority +
        weight_capacity * capacity_priority +
        weight_fullness * fullness_priority +
        weight_perfect_fit * perfect_fit_bonus +
        weight_near_perfect * near_perfect_bonus
    )
    return combined_priority
```
