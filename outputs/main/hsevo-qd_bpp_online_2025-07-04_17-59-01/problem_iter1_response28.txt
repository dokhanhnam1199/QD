```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority scores with a base value (e.g., 0).
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Assign a high priority if the item fits perfectly.
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = 1000  # Arbitrarily large value

    # Prefer bins where the remaining capacity after adding the item is small but non-negative.
    # The smaller the remaining capacity, the higher the priority.
    remaining_capacities = bins_remain_cap - item
    valid_bins = remaining_capacities >= 0
    
    if np.any(valid_bins): # Ensure that at least one bin can accomodate the item
      priorities[valid_bins] = 1.0 / (remaining_capacities[valid_bins] + 1e-6)  # Add a small constant to avoid division by zero
      # Scale the priorities based on bin utilization
      utilization = item / bins_remain_cap[valid_bins]
      priorities[valid_bins] = priorities[valid_bins] * (1 + utilization)


    # Penalize bins that cannot accommodate the item by giving them a very negative score if no bins are available
    if not np.any(valid_bins):
      priorities = np.full_like(bins_remain_cap, -10000) # Ensure that non-fitting bins get a very low priority when all other bins are also non-fitting. This avoids errors

    return priorities
```
