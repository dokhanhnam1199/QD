{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines ratio-based, gap-based, and capacity-based approaches with dynamic penalty and normalization.\n    \"\"\"\n    # Avoid division by zero\n    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)\n\n    # Calculate gap, handling infeasible bins\n    gap = bins_remain_cap - item\n    feasible = gap >= 0\n    gap = np.where(feasible, gap, -1)\n\n    # Ratio-based priority (normalized item size relative to bin capacity)\n    ratios = item / bins_remain_cap\n    ratio_priority = -np.log(ratios)\n    ratio_priority = np.where(feasible, ratio_priority, -1e9)\n\n    # Gap-based priority + Almost full penalty (dynamically adjusted)\n    almost_full_penalty_scale = np.mean(bins_remain_cap)  # Dynamic scaling\n    almost_full_penalty = np.exp(-50 * gap / (almost_full_penalty_scale + 1e-9))  # Scale gap for penalty\n    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)\n    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)\n    \n    # Capacity-based priority (normalized remaining capacity)\n    capacity_priority = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)  # Normalize capacity\n    capacity_priority = np.where(feasible, capacity_priority, -1e9)\n    \n    # Combined priority with adaptive weights based on item size\n    item_size_factor = min(1.0, item)  # Scale weights based on item size\n    \n    combined_priority = (\n        0.4 * ratio_priority +\n        0.4 * gap_priority +\n        0.2 * capacity_priority\n    )\n\n    return combined_priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n       Newton's insightful heuristic considers gravitational attraction - smaller gap and larger bin capacity means higher attraction.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure no division by zero\n    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap) # a very small number to avoid division by zero\n\n    # Calculate gap (remaining capacity after placing the item)\n    gap = bins_remain_cap - item\n    # bins where gap < 0 are not feasible: assign a very small priority.\n    gap = np.where(gap < 0, -1, gap)\n    \n    # \"Gravitational\" attraction: inversely proportional to a power of the distance (gap) and directly propotional to bin capacity\n\n    priorities = np.where(gap >= 0, bins_remain_cap / (gap**2 + 0.0001), -1e9) # Added small constant to prevent possible 0 division. High Penalty for the non feasible ones\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic considers a combination of ratio, gap, and capacity, along with a dynamic penalty for almost full bins, while the worst only considers the log of the ratio of item size to bin capacity. (2nd) to (19th) are similarly worse as 20th. Comparing (1st) vs (11th), the 1st heuristic considers ratio and gap in a different mathematical form than \"gravitational attraction\" which also includes the capacity. Comparing (6th) vs (11th), 6th uses a simpler form for the gap penalty compared to the gravitational attraction. Comparing (1st) vs (6th), the 1st incorporates capacity-based priority, dynamic scaling of the almost-full penalty, and adaptive weights based on item size, whereas the 6th uses a simpler penalty and combines only ratio and gap priorities. Comparing (16th) vs (18th), the 16th includes constants as tuned parameters in ratio, gravity, and penalty, while the 18th only consider ratios. Comparing (1st) vs (16th), the 1st heuristic combines ratio, gap, and capacity with dynamic penalty, normalization, and item size-based weights. The 16th combines ratio and gravity, also utilizing normalization and tuned parameters. Overall: The better heuristics combine multiple factors, normalize values, dynamically scale penalties, and adapt weights, while the worse heuristics rely on fewer factors and simpler calculations. The best heuristics use carefully chosen combinations of ratio, gap, and capacity, along with penalties to guide the item placement in a bin\n- \nOkay, I'll help you redefine \"Current self-reflection\" for better heuristic design, avoiding the pitfalls of \"Ineffective self-reflection\" and gearing up for that generous tip!\n\nHere's the refined definition:\n\n*   **Keywords:** Multifactorial, Normalization, Dynamic Penalties, Adaptive Weights, State-Aware, Edge Case Handling.\n*   **Advice:** Integrate multiple relevant factors with normalization, implement dynamic penalty adjustments based on the current problem state, and explore adaptive weighting schemes.\n*   **Avoid:** Vague \"domain-specific knowledge\" or analogies without concrete implementation. Focus on quantifiable elements like Capacity and Gap but go beyond simple ratios.\n*   **Explanation:** Effective heuristics combine problem-specific factors mathematically, adjust dynamically based on the current state of the solution, and handle potential errors robustly. Focus on building testable strategies.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}