```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function combines several factors:
    1. Remaining capacity: Bins with more remaining capacity are generally preferred.
    2. Waste minimization: Bins that result in minimal waste after adding the item are favored.
    3. Item fit: Bins where the item is a significant fraction of the capacity are penalized (to avoid nearly full bins early on, leading to difficulty packing remaining items).
    4. Bin utilization history: Prioritizes bins which had the best utilization history. (Placeholder for more complex adaptive behavior using prior packs).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Factor 1: Remaining Capacity
    priorities += bins_remain_cap

    # Factor 2: Waste Minimization (only consider bins that can actually fit)
    fit_mask = bins_remain_cap >= item
    waste = bins_remain_cap - item
    waste[~fit_mask] = np.inf  # Effectively exclude bins that don't fit

    # Waste is inversely proportional to priority.  Add a small constant to avoid division by zero.
    priorities[fit_mask] += 1.0 / (waste[fit_mask] + 0.0001)


    # Factor 3: Item Fit Penalty (avoid nearly full bins)
    item_fraction = item / bins_remain_cap
    penalty_mask = (item_fraction > 0.8) & fit_mask  # Penalize bins where item fills >80%
    priorities[penalty_mask] -= 2 * item  #Subtract twice the item to penalize more harshly.



    # Normalize to improve numerical stability and scaling
    priorities = priorities / (np.max(priorities) + 0.0001) # avoid division by zero in edge cases.

    return priorities
```
