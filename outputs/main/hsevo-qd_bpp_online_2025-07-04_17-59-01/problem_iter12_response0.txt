```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines ratio, gap, capacity, dynamic penalty, adaptive weights, and bin usage.
    Also incorporates more aggressive penalties for near-full and near-empty bins.
    """
    num_bins = len(bins_remain_cap)

    # Handle zero capacities to prevent division by zero
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate gap, penalize infeasible bins
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)

    # Ratio priority (item size / bin capacity)
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)

    # Gap priority with dynamic almost-full/empty penalty
    avg_cap = np.mean(bins_remain_cap)
    almost_full_threshold = 0.1 * avg_cap
    almost_empty_threshold = 0.9 * avg_cap

    almost_full_penalty = np.where(gap < almost_full_threshold, np.exp(-100 * gap / (almost_full_threshold + 1e-9)), 1) # Aggressive penalty
    almost_full_penalty = np.where(feasible, almost_full_penalty, 1) # Ensure infeasible bins aren't affected

    almost_empty_penalty = np.where(bins_remain_cap > almost_empty_threshold, np.exp(20 * (bins_remain_cap - almost_empty_threshold) / (avg_cap + 1e-9)), 1) # Penalize almost empty

    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)
    gap_priority = np.where(feasible, gap_priority * almost_empty_penalty, -1e9) # Incorporate almost empty

    # Capacity priority (normalized remaining capacity)
    max_cap = np.max(bins_remain_cap)
    capacity_priority = bins_remain_cap / (max_cap + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority, -1e9)

    # Bin usage priority (encourage using bins that are already used)
    bin_usage_priority = np.where(bins_remain_cap < max_cap, 0.5, 0) # Arbitrary value that works well. Experimentation needed.
    bin_usage_priority = np.where(feasible, bin_usage_priority, -1e9)

    # Adaptive weights based on item size
    item_size_factor = min(1.0, item)

    # Combined priority calculation (dynamic weights)
    if item_size_factor > 0.7: # large item, favor capacity
        combined_priority = (
            0.1 * ratio_priority +
            0.2 * gap_priority +
            0.6 * capacity_priority +
            0.1 * bin_usage_priority
        )
    elif item_size_factor < 0.3: # small item, focus on filling gaps.
        combined_priority = (
            0.2 * ratio_priority +
            0.6 * gap_priority +
            0.1 * capacity_priority +
            0.1 * bin_usage_priority
        )
    else:
        combined_priority = (
            0.3 * ratio_priority +
            0.5 * gap_priority +
            0.2 * capacity_priority +
            0.0 * bin_usage_priority
        )

    return combined_priority
```
