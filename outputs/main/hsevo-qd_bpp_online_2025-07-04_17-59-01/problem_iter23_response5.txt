```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines ratio, gap, capacity, fullness, perfect fit considerations with adaptive weights and normalization.
    """

    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)
    feasible = bins_remain_cap >= item
    gap = bins_remain_cap - item
    gap = np.where(feasible, gap, -1)

    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)

    max_cap = np.max(bins_remain_cap)
    capacity_priority = bins_remain_cap / (max_cap + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority, -1e9)

    avg_cap = np.mean(bins_remain_cap)
    almost_full_threshold = 0.1 * avg_cap
    almost_full = (gap >= 0) & (gap <= almost_full_threshold)
    almost_full_penalty = np.where(almost_full, np.exp(5 * (gap - almost_full_threshold) / (almost_full_threshold + 1e-9)), 0)
    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)

    bin_fill_level = 1 - (bins_remain_cap / max_cap)
    avg_fill = np.mean(bin_fill_level)

    fullness_level = bins_remain_cap / (avg_cap + 1e-9)
    fullness_priority = np.where(feasible, 1 - np.exp(-3 * fullness_level), -1e9)

    perfect_fit = np.isclose(item, bins_remain_cap)
    perfect_fit_bonus = np.where(perfect_fit & feasible, 1e9, 0)

    best_fit_priority = np.where(feasible, -gap, -1e9)
    best_fit_priority = np.where(feasible, (best_fit_priority - np.min(best_fit_priority[feasible])) / (np.max(best_fit_priority[feasible]) - np.min(best_fit_priority[feasible]) + 1e-9), -1e9)

    best_fit_weight = min(0.5, avg_fill)
    ratio_weight = 0.3 * (1 - best_fit_weight)
    gap_weight = 0.4 * (1 - best_fit_weight)
    capacity_weight = 0.3 * (1 - best_fit_weight)

    combined_priority = (
        ratio_weight * ratio_priority +
        gap_weight * gap_priority +
        capacity_weight * capacity_priority +
        best_fit_weight * best_fit_priority +
        0.2 * fullness_priority +  # Adding fullness priority
        0.1 * perfect_fit_bonus    # Adding perfect fit bonus
    )

    return combined_priority
```
