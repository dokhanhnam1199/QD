```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a very low value
    priorities = np.full_like(bins_remain_cap, -np.inf)

    # Identify bins that can accommodate the item
    feasible_bins = bins_remain_cap >= item

    if np.any(feasible_bins):
        # Calculate the wasted space if the item is placed in each feasible bin.
        wasted_space = bins_remain_cap[feasible_bins] - item

        # Calculate the utilization ratio for each feasible bin.
        utilization_ratio = item / bins_remain_cap[feasible_bins]

        # Combine wasted space and utilization ratio to create a priority score.
        # Prefer bins with lower wasted space and higher utilization ratio.
        priorities[feasible_bins] = utilization_ratio - 0.5 * (wasted_space / np.max(bins_remain_cap)) # Normalize wasted_space

        # Add a small bonus for bins with remaining capacity closest to item size
        # This encourages filling bins more completely.
        optimal_bins = np.abs(bins_remain_cap[feasible_bins] - 1.1 * item) < 0.2  # check the optimality around a tolerance 20% of item size, giving item size a leverage
        priorities[feasible_bins][optimal_bins] += 0.1

        # Give a higher priority for bins closest to full (but able to hold the item), to avoid fragmentation
        priorities[feasible_bins] += 0.05 * (bins_remain_cap[feasible_bins] / np.max(bins_remain_cap)) # normalize capacity



    # If no bins can accommodate the item, return the initialized array of -inf

    return priorities
```
