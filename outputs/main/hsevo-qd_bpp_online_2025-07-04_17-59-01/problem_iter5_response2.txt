```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines normalized ratio and gravity, penalizing almost full bins."""
    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap)
    gap = bins_remain_cap - item
    gap = np.where(gap < 0, -1, gap)
    ratios = np.where(bins_remain_cap > 0, item / bins_remain_cap, 0)
    normalized_ratios = ratios / np.max(ratios) if np.max(ratios) > 0 else np.zeros_like(ratios)
    gravity = np.where(gap >= 0, bins_remain_cap / (gap**2 + 0.0001), -1e9)

    almost_full_penalty = np.where((gap > 0) & (gap < 0.1 * bins_remain_cap), -0.5, 0)  # Penalize almost full bins

    priorities = 0.5 * normalized_ratios + 0.5 * (gravity / np.max(gravity) if np.max(gravity) > 0 else np.zeros_like(gravity)) + almost_full_penalty

    return priorities
```
