```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio, gap, capacity with dynamic penalty and adaptive weights, focusing on problem state."""

    # Avoid division by zero
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate gap, penalize infeasible bins severely
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)
    infeasible_penalty = -1e9  # Significant penalty

    # Ratio priority (item size / bin capacity)
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, infeasible_penalty)

    # Gap priority with dynamic penalty
    max_cap = np.max(bins_remain_cap)
    gap_norm = gap / (max_cap + 1e-9)  # Normalized gap
    almost_full_threshold = 0.1  # Threshold for "almost full" (e.g., 10% of max capacity)
    almost_full_penalty = np.where(gap_norm < almost_full_threshold, np.exp(-20 * (almost_full_threshold - gap_norm)), 0)  # Strong penalty near full
    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, infeasible_penalty)


    # Capacity priority (normalized to 0-1)
    capacity_priority = bins_remain_cap / (max_cap + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority, infeasible_penalty)
    
    # Dynamic weights based on item size and bin availability.
    item_size_factor = min(1.0, item)
    bin_availability_factor = np.mean(feasible)  # Proportion of feasible bins

    # Adapt the weights to the problem state.  If few bins are feasible, favor capacity.
    if bin_availability_factor < 0.2:  # Only a few bins available
        weight_ratio = 0.1
        weight_gap = 0.2
        weight_capacity = 0.7 # Emphasize capacity if few options
    else:
        weight_ratio = 0.3
        weight_gap = 0.4
        weight_capacity = 0.3

    # Combined priority with adaptive weights
    combined_priority = (
        weight_ratio * ratio_priority +
        weight_gap * gap_priority +
        weight_capacity * capacity_priority
    )

    return combined_priority
```
