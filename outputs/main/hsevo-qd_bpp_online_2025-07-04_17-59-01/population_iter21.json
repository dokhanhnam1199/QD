[
  {
    "stdout_filepath": "problem_iter0_stdout0.txt",
    "code_path": "problem_iter0_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities",
    "response_id": 0,
    "obj": 149.30195452732352,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 11.60964047443681,
    "mi": 94.04446327225541,
    "token_count": 47.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response2.txt_stdout.txt",
    "code_path": "problem_iter1_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n       Newton's insightful heuristic considers gravitational attraction - smaller gap and larger bin capacity means higher attraction.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure no division by zero\n    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap) # a very small number to avoid division by zero\n\n    # Calculate gap (remaining capacity after placing the item)\n    gap = bins_remain_cap - item\n    # bins where gap < 0 are not feasible: assign a very small priority.\n    gap = np.where(gap < 0, -1, gap)\n    \n    # \"Gravitational\" attraction: inversely proportional to a power of the distance (gap) and directly propotional to bin capacity\n\n    priorities = np.where(gap >= 0, bins_remain_cap / (gap**2 + 0.0001), -1e9) # Added small constant to prevent possible 0 division. High Penalty for the non feasible ones\n    return priorities",
    "response_id": 2,
    "tryHS": true,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 129.26767504471167,
    "mi": 80.85726802050495,
    "token_count": 123.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response2.txt_stdout.txt",
    "code_path": "problem_iter2_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines ratio-based and gravity-inspired approaches for bin selection.\"\"\"\n    # Ensure no division by zero\n    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap)\n\n    # Calculate gap\n    gap = bins_remain_cap - item\n    gap = np.where(gap < 0, -1, gap)\n\n    # Ratio-based priority (normalized)\n    ratios = np.where(bins_remain_cap > 0, item / bins_remain_cap, 0)\n    normalized_ratios = ratios / np.max(ratios) if np.max(ratios) > 0 else np.zeros_like(ratios)\n\n    # \"Gravitational\" attraction with added constant\n    gravity = np.where(gap >= 0, bins_remain_cap / (gap**2 + 0.0001), -1e9)\n\n    # Combine the two priorities\n    priorities = 0.5 * normalized_ratios + 0.5 * (gravity / np.max(gravity) if np.max(gravity) > 0 else np.zeros_like(gravity))\n\n    return priorities",
    "response_id": 2,
    "tryHS": true,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 183.31714900750262,
    "mi": 90.92137937484476,
    "token_count": 127.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter3_response2.txt_stdout.txt",
    "code_path": "problem_iter3_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n       This version considers a combination of factors:\n       - Remaining capacity after placing the item (gap).\n       - Bin capacity.\n       - A penalty for bins that are almost full.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure no division by zero\n    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap)\n\n    # Calculate gap (remaining capacity after placing the item)\n    gap = bins_remain_cap - item\n    # bins where gap < 0 are not feasible: assign a very small priority.\n    gap = np.where(gap < 0, -1, gap)\n    \n    # Calculate a penalty for bins that will be almost full after placing the item\n    almost_full_penalty = np.exp(-50 * gap)  # Exponential penalty, sharp drop-off as gap -> 0\n    almost_full_penalty = np.where(gap >= 0, almost_full_penalty, 0) # only applies to feasible bins\n\n    # Calculate priority score.  Combine bin capacity, gap, and the almost full penalty.\n    priorities = np.where(gap >= 0, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9) # Added constant to prevent possible 0 division.\n\n    return priorities",
    "response_id": 2,
    "tryHS": true,
    "obj": 4.048663741523748,
    "SLOC": 13.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 134.671829503467,
    "mi": 74.04397746614389,
    "token_count": 180.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response9.txt_stdout.txt",
    "code_path": "problem_iter5_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines ratio-based and gap-based approaches with penalty.\n    \"\"\"\n    # Avoid division by zero\n    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap)\n\n    # Calculate gap, handling infeasible bins\n    gap = bins_remain_cap - item\n    gap = np.where(gap < 0, -1, gap)\n\n    # Ratio-based priority (normalized item size relative to bin capacity)\n    ratios = item / bins_remain_cap\n    ratio_priority = -np.log(ratios)\n    ratio_priority = np.where(gap >= 0, ratio_priority, -1e9)\n\n    # Gap-based priority + Almost full penalty\n    almost_full_penalty = np.exp(-50 * gap)\n    almost_full_penalty = np.where(gap >= 0, almost_full_penalty, 0)\n    gap_priority = np.where(gap >= 0, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)\n\n\n    # Combine ratio and gap based priorities\n    priorities = 0.5 * ratio_priority + 0.5 * gap_priority\n\n    return priorities",
    "response_id": 9,
    "tryHS": true,
    "obj": 3.9888312724371757,
    "SLOC": 12.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 244.4228653433368,
    "mi": 87.86998144177493,
    "token_count": 175.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response0.txt_stdout.txt",
    "code_path": "problem_iter6_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines ratio-based, gap-based, and capacity-based approaches with dynamic penalty and normalization.\n    \"\"\"\n    # Avoid division by zero\n    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)\n\n    # Calculate gap, handling infeasible bins\n    gap = bins_remain_cap - item\n    feasible = gap >= 0\n    gap = np.where(feasible, gap, -1)\n\n    # Ratio-based priority (normalized item size relative to bin capacity)\n    ratios = item / bins_remain_cap\n    ratio_priority = -np.log(ratios)\n    ratio_priority = np.where(feasible, ratio_priority, -1e9)\n\n    # Gap-based priority + Almost full penalty (dynamically adjusted)\n    almost_full_penalty_scale = np.mean(bins_remain_cap)  # Dynamic scaling\n    almost_full_penalty = np.exp(-50 * gap / (almost_full_penalty_scale + 1e-9))  # Scale gap for penalty\n    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)\n    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)\n    \n    # Capacity-based priority (normalized remaining capacity)\n    capacity_priority = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)  # Normalize capacity\n    capacity_priority = np.where(feasible, capacity_priority, -1e9)\n    \n    # Combined priority with adaptive weights based on item size\n    item_size_factor = min(1.0, item)  # Scale weights based on item size\n    \n    combined_priority = (\n        0.4 * ratio_priority +\n        0.4 * gap_priority +\n        0.2 * capacity_priority\n    )\n\n    return combined_priority",
    "response_id": 0,
    "tryHS": true,
    "obj": 3.9788591942560925,
    "SLOC": 19.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 374.43766023698254,
    "mi": 81.64418066326655,
    "token_count": 259.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter10_response0.txt_stdout.txt",
    "code_path": "problem_iter10_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, \n                division_epsilon: float = 8.41613007074527e-09, \n                gravity_epsilon: float = 9.764304781528209e-05,\n                ratio_weight: float = 0.4759852357838289, \n                gravity_weight: float = 0.1773067754705847,\n                negative_gap_penalty: float = -0.30291238428480005,\n                negative_gravity_penalty: float = -9196992900.133415) -> np.ndarray:\n    \"\"\"Combines ratio-based and gravity-inspired approaches for bin selection.\"\"\"\n    # Ensure no division by zero\n    bins_remain_cap = np.where(bins_remain_cap == 0, division_epsilon, bins_remain_cap)\n\n    # Calculate gap\n    gap = bins_remain_cap - item\n    gap = np.where(gap < 0, negative_gap_penalty, gap)\n\n    # Ratio-based priority (normalized)\n    ratios = np.where(bins_remain_cap > 0, item / bins_remain_cap, 0)\n    normalized_ratios = ratios / np.max(ratios) if np.max(ratios) > 0 else np.zeros_like(ratios)\n\n    # \"Gravitational\" attraction with added constant\n    gravity = np.where(gap >= 0, bins_remain_cap / (gap**2 + gravity_epsilon), negative_gravity_penalty)\n\n    # Combine the two priorities\n    priorities = ratio_weight * normalized_ratios + gravity_weight * (gravity / np.max(gravity) if np.max(gravity) > 0 else np.zeros_like(gravity))\n\n    return priorities",
    "response_id": 0,
    "tryHS": true,
    "obj": 4.048663741523748,
    "SLOC": 15.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 233.1830877661235,
    "mi": 88.41725953171465,
    "token_count": 224.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response8.txt_stdout.txt",
    "code_path": "problem_iter8_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines ratio, gap, capacity, dynamic penalty, and adaptive weights.\"\"\"\n\n    # Handle zero capacities to prevent division by zero\n    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)\n\n    # Calculate gap, penalize infeasible bins\n    gap = bins_remain_cap - item\n    feasible = gap >= 0\n    gap = np.where(feasible, gap, -1)\n\n    # Ratio priority (item size / bin capacity)\n    ratios = item / bins_remain_cap\n    ratio_priority = -np.log(ratios)\n    ratio_priority = np.where(feasible, ratio_priority, -1e9)\n\n    # Gap priority with dynamic almost-full penalty\n    avg_cap = np.mean(bins_remain_cap)\n    almost_full_penalty = np.exp(-50 * gap / (avg_cap + 1e-9))\n    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)\n    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)\n\n    # Capacity priority (normalized remaining capacity)\n    capacity_priority = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)\n    capacity_priority = np.where(feasible, capacity_priority, -1e9)\n\n    # Adaptive weights based on item size\n    item_size_factor = min(1.0, item)\n    \n    # Combined priority calculation\n    combined_priority = (\n        0.3 * ratio_priority +\n        0.5 * gap_priority +\n        0.2 * capacity_priority\n    )\n\n    return combined_priority",
    "response_id": 8,
    "tryHS": false,
    "obj": 3.9589150378939015,
    "SLOC": 14.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 302.2059749335994,
    "mi": 56.84317010083941,
    "token_count": 184.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter9_response4.txt_stdout.txt",
    "code_path": "problem_iter9_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    A priority function for the online bin packing problem that combines ratio,\n    gap, capacity, dynamic penalty, and adaptive weights, with improved\n    handling of edge cases and state awareness.\n    \"\"\"\n\n    # Small constant to avoid division by zero and other numerical issues\n    epsilon = 1e-9\n\n    # 1. Feasibility check and basic preprocessing\n    feasible = bins_remain_cap >= item\n    num_feasible = np.sum(feasible)\n    \n    # If no bin is feasible, return a low priority for all bins, prioritizing the least full one\n    if num_feasible == 0:\n        return -bins_remain_cap  # Prioritize bins with more remaining capacity\n\n    # 2. Ratio priority (item size / bin capacity), only for feasible bins\n    ratios = item / np.where(bins_remain_cap <= 0, epsilon, bins_remain_cap)\n    ratio_priority = -np.log(ratios)\n    ratio_priority = np.where(feasible, ratio_priority, -1e9)\n\n    # 3. Gap priority with dynamic almost-full penalty and scaled gap\n    gap = bins_remain_cap - item\n    gap = np.where(feasible, gap, -1)\n\n    # Dynamic almost-full penalty, scaled by the item size and the number of feasible bins\n    avg_cap = np.mean(bins_remain_cap[feasible]) if num_feasible > 0 else np.mean(bins_remain_cap) # Only consider feasible bins for average cap\n    almost_full_penalty = np.exp(-50 * gap / (avg_cap + epsilon))\n    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)\n    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)\n\n    # 4. Capacity priority (normalized remaining capacity), only for feasible bins\n    max_cap = np.max(bins_remain_cap[feasible]) if num_feasible > 0 else np.max(bins_remain_cap) # Max capacity only among feasible bins\n    capacity_priority = bins_remain_cap / (max_cap + epsilon)\n    capacity_priority = np.where(feasible, capacity_priority, -1e9)\n\n    # 5. Introduce a \"balancing\" term to encourage more even bin utilization\n    #   This is a state-aware component to avoid filling one bin completely\n    #   before others have had a chance to be used.\n    fill_level = 1.0 - (bins_remain_cap / (np.max(bins_remain_cap) + epsilon))  # Fill level of each bin (0 to 1)\n    fill_level_priority = -fill_level # Prefer bins with lower fill levels\n\n    fill_level_priority = np.where(feasible, fill_level_priority, -1e9)\n\n    # 6. Adaptive weights based on item size and bin diversity\n    item_size_factor = min(1.0, item)\n    \n    # Standard deviation of remaining capacities. Higher std means more diverse bins\n    bin_diversity = np.std(bins_remain_cap)\n    diversity_factor = min(1.0, bin_diversity) # Normalize std\n\n    # 7. Combined priority calculation with more emphasis on gap\n    combined_priority = (\n        0.15 * ratio_priority +\n        0.55 * gap_priority +\n        0.15 * capacity_priority +\n        0.15 * fill_level_priority\n    )\n    \n    return combined_priority",
    "response_id": 4,
    "tryHS": false,
    "obj": 3.9888312724371757,
    "SLOC": 31.0,
    "cyclomatic_complexity": 4.0,
    "halstead": 513.6912619133022,
    "mi": 77.57130200312942,
    "token_count": 379.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response1.txt_stdout.txt",
    "code_path": "problem_iter11_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines ratio, gap, and capacity with dynamic penalty.\"\"\"\n\n    # Handle zero capacities\n    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)\n\n    # Calculate gap, mark infeasible bins\n    gap = bins_remain_cap - item\n    feasible = gap >= 0\n    gap = np.where(feasible, gap, -1)\n\n    # Ratio-based priority\n    ratios = item / bins_remain_cap\n    ratio_priority = -np.log(ratios)\n    ratio_priority = np.where(feasible, ratio_priority, -1e9)\n\n    # Gap-based priority + dynamic almost full penalty\n    almost_full_penalty_scale = np.mean(bins_remain_cap)\n    almost_full_penalty = np.exp(-50 * gap / (almost_full_penalty_scale + 1e-9))\n    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)\n    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)\n    \n    # Capacity-based priority\n    capacity_priority = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)\n    capacity_priority = np.where(feasible, capacity_priority, -1e9)\n\n    # Combined priority\n    combined_priority = (\n        0.4 * ratio_priority +\n        0.4 * gap_priority +\n        0.2 * capacity_priority\n    )\n\n    return combined_priority",
    "response_id": 1,
    "tryHS": false,
    "obj": 3.9788591942560925,
    "SLOC": 7.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 114.6940428629768,
    "mi": 94.0464924326695,
    "token_count": 122.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter21_response1.txt_stdout.txt",
    "code_path": "problem_iter21_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Enhanced priority function for online bin packing, combining ratio, gap,\n    capacity, and fullness considerations with adaptive weighting and normalization.\n    \"\"\"\n\n    # Ensure no division by zero and handle bins with zero remaining capacity gracefully\n    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)\n\n    # Feasibility mask\n    feasible = bins_remain_cap >= item\n\n    # Gap calculation; penalize infeasible bins harshly\n    gap = bins_remain_cap - item\n    gap = np.where(feasible, gap, -1)\n\n    # Ratio priority (item size / bin capacity); emphasize efficient usage\n    ratios = item / bins_remain_cap\n    ratio_priority = -np.log(ratios)\n    ratio_priority = np.where(feasible, ratio_priority, -1e9)  # Very low priority for infeasible bins\n\n    # Gap priority: Favor bins with smaller gaps, but penalize almost-full bins.\n    # Use a more sensitive 'almost full' penalty.\n    avg_cap = np.mean(bins_remain_cap)\n    almost_full_threshold = 0.1 * avg_cap  # Dynamically adjust threshold\n    almost_full = (gap >= 0) & (gap <= almost_full_threshold)\n    almost_full_penalty = np.where(almost_full, np.exp(5 * (gap - almost_full_threshold) / (almost_full_threshold + 1e-9)), 0) # Exponential penalty\n    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)\n\n    # Capacity priority: Favor bins with larger remaining capacity, normalized\n    capacity_priority = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)\n    capacity_priority = np.where(feasible, capacity_priority, -1e9)\n\n\n    # Fullness priority:  Encourage filling up bins that are already somewhat full\n    # This is designed to avoid leaving many almost-empty bins.\n    fullness_level = bins_remain_cap / (avg_cap + 1e-9)\n    fullness_priority = np.where(feasible, 1 - np.exp(-3*fullness_level),-1e9)\n\n\n    # Adaptive weights based on item size and average capacity.\n    item_size_factor = min(1.0, item)\n    capacity_factor = min(1.0, avg_cap / (np.max(bins_remain_cap)+1e-9)) if np.max(bins_remain_cap) > 0 else 0.5\n\n\n    # State aware priority to give high preference if this item can fill this bin completely.\n    perfect_fit = np.isclose(item, bins_remain_cap)\n    perfect_fit_bonus = np.where(perfect_fit & feasible, 1e9, 0)\n\n    # Combined priority with adaptive weights, including fullness consideration.\n    combined_priority = (\n        0.2 * ratio_priority +\n        0.3 * gap_priority +\n        0.2 * capacity_priority +\n        0.2 * fullness_priority +\n        0.1 * perfect_fit_bonus # Encourage finding a perfect fit\n    )\n\n    return combined_priority",
    "response_id": 1,
    "tryHS": false,
    "obj": 3.8990825688073536,
    "SLOC": 30.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 676.61524164311,
    "mi": 78.03422939340471,
    "token_count": 357.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response4.txt_stdout.txt",
    "code_path": "problem_iter14_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines ratio, gap, capacity with dynamic penalty and normalization.\"\"\"\n\n    # Ensure no division by zero\n    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)\n\n    # Calculate gap; penalize infeasible bins\n    gap = bins_remain_cap - item\n    feasible = gap >= 0\n    gap = np.where(feasible, gap, -1)\n\n    # Ratio priority (item size / bin capacity)\n    ratios = item / bins_remain_cap\n    ratio_priority = -np.log(ratios)\n    ratio_priority = np.where(feasible, ratio_priority, -1e9)\n\n    # Dynamic almost-full penalty based on remaining capacity\n    avg_cap = np.mean(bins_remain_cap)\n    almost_full_penalty = np.exp(-50 * gap / (avg_cap + 1e-9))\n    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)\n    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)\n\n    # Capacity priority (normalized)\n    capacity_priority = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)\n    capacity_priority = np.where(feasible, capacity_priority, -1e9)\n    \n    # Adaptive weights based on item size.\n    item_size_factor = min(1.0, item)\n\n    # Combined priority with adaptive weights\n    combined_priority = (\n        0.3 * ratio_priority +\n        0.4 * gap_priority +\n        0.3 * capacity_priority\n    )\n\n    return combined_priority",
    "response_id": 4,
    "tryHS": false,
    "obj": 3.9090546469884373,
    "SLOC": 27.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 521.7260441513191,
    "mi": 51.13324679733074,
    "token_count": 291.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter15_response1.txt_stdout.txt",
    "code_path": "problem_iter15_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines ratio, gap, capacity with dynamic penalty, adaptive weights, and normalization.\n    Also incorporates a best-fit component and adjusts weights based on bin fill level.\n    \"\"\"\n\n    # Avoid division by zero\n    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)\n\n    # Calculate gap and identify feasible bins\n    gap = bins_remain_cap - item\n    feasible = gap >= 0\n    gap = np.where(feasible, gap, -1)\n\n    # Ratio priority (item size / bin capacity)\n    ratios = item / bins_remain_cap\n    ratio_priority = -np.log(ratios)\n    ratio_priority = np.where(feasible, ratio_priority, -1e9)\n\n    # Gap priority (remaining capacity)\n    gap_priority = np.where(feasible, bins_remain_cap, -1e9)\n\n    # Capacity priority (normalized)\n    max_cap = np.max(bins_remain_cap)\n    capacity_priority = bins_remain_cap / (max_cap + 1e-9)\n    capacity_priority = np.where(feasible, capacity_priority, -1e9)\n\n    # Best-fit priority (smaller gaps are preferred)\n    best_fit_priority = np.where(feasible, -gap, -1e9)\n    # Normalize best-fit priority to be between 0 and 1 when feasible\n    best_fit_priority = np.where(feasible, (best_fit_priority - np.min(best_fit_priority[feasible])) / (np.max(best_fit_priority[feasible]) - np.min(best_fit_priority[feasible]) + 1e-9), -1e9)\n\n\n    # Dynamic almost-full penalty, scaled with remaining capacity\n    avg_cap = np.mean(bins_remain_cap)\n    almost_full_penalty = np.exp(-50 * gap / (avg_cap + 1e-9))\n    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)\n\n    # Increase importance of gap when bins are almost full\n    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)\n\n\n    # Adaptive weights based on item size and bin fill level\n    item_size_factor = min(1.0, item)\n    bin_fill_level = 1 - (bins_remain_cap / max_cap)  # Fraction of bin that is full\n    avg_fill = np.mean(bin_fill_level)\n\n    # Adjust weights based on fill level.  Higher fill gives more weight to Best-fit.\n    best_fit_weight = min(0.5, avg_fill) # cap at 0.5 to avoid over dominance\n    ratio_weight = 0.3 * (1-best_fit_weight)\n    gap_weight = 0.4 * (1-best_fit_weight)\n    capacity_weight = 0.3 * (1-best_fit_weight)\n\n    # Combined priority with adaptive weights\n    combined_priority = (\n        ratio_weight * ratio_priority +\n        gap_weight * gap_priority +\n        capacity_weight * capacity_priority +\n        best_fit_weight * best_fit_priority\n    )\n\n    return combined_priority",
    "response_id": 1,
    "tryHS": false,
    "obj": 3.9090546469884373,
    "SLOC": 45.0,
    "cyclomatic_complexity": 4.0,
    "halstead": 869.959425203366,
    "mi": 70.4554418713671,
    "token_count": 485.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response6.txt_stdout.txt",
    "code_path": "problem_iter17_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines ratio, gap, capacity, best-fit, and dynamic weights.\"\"\"\n\n    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)\n\n    gap = bins_remain_cap - item\n    feasible = gap >= 0\n    gap = np.where(feasible, gap, -1)\n\n    ratios = item / bins_remain_cap\n    ratio_priority = -np.log(ratios)\n    ratio_priority = np.where(feasible, ratio_priority, -1e9)\n\n    max_cap = np.max(bins_remain_cap)\n    capacity_priority = bins_remain_cap / (max_cap + 1e-9)\n    capacity_priority = np.where(feasible, capacity_priority, -1e9)\n\n    best_fit_priority = np.where(feasible, -gap, -1e9)\n    best_fit_priority = np.where(feasible, (best_fit_priority - np.min(best_fit_priority[feasible])) / (np.max(best_fit_priority[feasible]) - np.min(best_fit_priority[feasible]) + 1e-9), -1e9)\n\n    avg_cap = np.mean(bins_remain_cap)\n    almost_full_penalty = np.exp(-50 * gap / (avg_cap + 1e-9))\n    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)\n    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)\n\n\n    bin_fill_level = 1 - (bins_remain_cap / max_cap)\n    avg_fill = np.mean(bin_fill_level)\n\n    best_fit_weight = min(0.5, avg_fill)\n    ratio_weight = 0.3 * (1 - best_fit_weight)\n    gap_weight = 0.4 * (1 - best_fit_weight)\n    capacity_weight = 0.3 * (1 - best_fit_weight)\n\n    combined_priority = (\n        ratio_weight * ratio_priority +\n        gap_weight * gap_priority +\n        capacity_weight * capacity_priority +\n        best_fit_weight * best_fit_priority\n    )\n\n    return combined_priority",
    "response_id": 6,
    "tryHS": false,
    "obj": 3.9090546469884373,
    "SLOC": 21.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 346.3632158872766,
    "mi": 81.91457120333502,
    "token_count": 243.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter18_response4.txt_stdout.txt",
    "code_path": "problem_iter18_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Enhanced priority function with adaptive weighting, state-awareness, and robust normalization.\"\"\"\n\n    # Handle edge case: empty bins_remain_cap array\n    if bins_remain_cap.size == 0:\n        return np.array([])\n\n    # Ensure no division by zero\n    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)\n\n    # Calculate gap; penalize infeasible bins\n    gap = bins_remain_cap - item\n    feasible = gap >= 0\n    gap = np.where(feasible, gap, -1)\n\n    # Ratio priority (item size / bin capacity)\n    ratios = item / bins_remain_cap\n    ratio_priority = -np.log(ratios)\n    ratio_priority = np.where(feasible, ratio_priority, -1e9)\n\n    # Dynamic almost-full penalty based on remaining capacity\n    avg_cap = np.mean(bins_remain_cap)\n    almost_full_penalty = np.exp(-50 * gap / (avg_cap + 1e-9))\n    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)\n    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)\n\n    # Capacity priority (normalized)\n    max_cap = np.max(bins_remain_cap)\n    capacity_priority = bins_remain_cap / (max_cap + 1e-9)\n    capacity_priority = np.where(feasible, capacity_priority, -1e9)\n    \n    # Adaptive weights based on item size and remaining capacity variance.\n    item_size_factor = min(1.0, item)\n    capacity_variance = np.var(bins_remain_cap)\n\n    # Adjust weights based on item size and remaining capacity variance.\n    weight_ratio = 0.2 + 0.2 * item_size_factor # Range: [0.2, 0.4]\n    weight_gap = 0.5 - 0.1 * item_size_factor + 0.1 * min(1.0, capacity_variance) #Range: [0.4, 0.6]\n    weight_capacity = 0.3 - 0.1 * capacity_variance #Ensure sum to 1. Range: [0.1, 0.3]\n\n    # Combined priority with adaptive weights\n    combined_priority = (\n        weight_ratio * ratio_priority +\n        weight_gap * gap_priority +\n        weight_capacity * capacity_priority\n    )\n\n    # Apply a small penalty to bins close to full to encourage better distribution.\n    close_to_full = (gap > 0) & (gap < 0.1)\n    combined_priority = np.where(close_to_full, combined_priority - 0.05, combined_priority)\n\n    return combined_priority",
    "response_id": 4,
    "tryHS": false,
    "obj": 3.9389708815317115,
    "SLOC": 30.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 594.9547814448038,
    "mi": 77.6971340801257,
    "token_count": 348.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response0.txt_stdout.txt",
    "code_path": "problem_iter20_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines ratio, gap, capacity, best-fit, and dynamic weights with improved normalization.\"\"\"\n\n    # Handle zero capacities\n    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)\n\n    # Calculate gap, mark infeasible bins\n    gap = bins_remain_cap - item\n    feasible = gap >= 0\n    gap = np.where(feasible, gap, -1)\n\n    # Ratio-based priority\n    ratios = item / bins_remain_cap\n    ratio_priority = -np.log(ratios)\n    ratio_priority = np.where(feasible, ratio_priority, -1e9)\n\n    # Gap-based priority + dynamic almost full penalty\n    avg_cap = np.mean(bins_remain_cap)\n    almost_full_penalty = np.exp(-50 * gap / (avg_cap + 1e-9))\n    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)\n    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)\n\n    # Capacity-based priority\n    max_cap = np.max(bins_remain_cap)\n    capacity_priority = bins_remain_cap / (max_cap + 1e-9)\n    capacity_priority = np.where(feasible, capacity_priority, -1e9)\n\n    # Best-fit priority\n    best_fit_priority = np.where(feasible, -gap, -1e9)\n    if np.any(feasible): # avoids errors when no bins are feasible\n      best_fit_priority = np.where(feasible, (best_fit_priority - np.min(best_fit_priority[feasible])) / (np.max(best_fit_priority[feasible]) - np.min(best_fit_priority[feasible]) + 1e-9), -1e9)\n    else:\n      best_fit_priority = np.full_like(bins_remain_cap, -1e9)\n\n    # Dynamic Weighting based on fill level.\n    bin_fill_level = 1 - (bins_remain_cap / max_cap)\n    avg_fill = np.mean(bin_fill_level)\n\n    best_fit_weight = min(0.5, avg_fill)\n    ratio_weight = 0.3 * (1 - best_fit_weight)\n    gap_weight = 0.4 * (1 - best_fit_weight)\n    capacity_weight = 0.3 * (1 - best_fit_weight)\n\n\n    # Combined priority with adaptive weights\n    combined_priority = (\n        ratio_weight * ratio_priority +\n        gap_weight * gap_priority +\n        capacity_weight * capacity_priority +\n        best_fit_weight * best_fit_priority\n    )\n\n    return combined_priority",
    "response_id": 0,
    "tryHS": false,
    "obj": 3.9090546469884373,
    "SLOC": 20.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 323.1448300675329,
    "mi": 55.45369627985096,
    "token_count": 218.0,
    "exec_success": true
  }
]