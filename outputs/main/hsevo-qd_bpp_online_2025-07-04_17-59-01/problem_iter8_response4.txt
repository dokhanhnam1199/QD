```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio, gap, capacity, and dynamic penalty."""

    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap)
    gap = bins_remain_cap - item
    gap = np.where(gap < 0, -1, gap)

    ratio_priority = -np.log(item / bins_remain_cap)
    ratio_priority = np.where(gap >= 0, ratio_priority, -1e9)

    capacity_priority = bins_remain_cap / (gap**2 + 0.0001)
    capacity_priority = np.where(gap >= 0, capacity_priority, -1e9)

    almost_full_penalty = np.exp(-50 * gap)
    almost_full_penalty = np.where(gap >= 0, almost_full_penalty, 0)

    combined_priority = 0.4 * ratio_priority + 0.6 * (capacity_priority - almost_full_penalty)


    return combined_priority
```
