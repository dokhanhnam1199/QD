```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Initialize priorities with a small value to avoid division by zero issues later on
    priorities = np.zeros_like(bins_remain_cap, dtype=float) - 1e-9

    # Heuristic 1: Available Capacity Ratio (More full -> better unless overfull)
    capacity_ratio = bins_remain_cap / np.sum(bins_remain_cap)  # Normalize to get the capacity ratio

    # Heuristic 2: Fill Efficiency (Closer fill to bin capacity -> better)
    fill_efficiency = np.where(bins_remain_cap >= item, (item / bins_remain_cap), -1e9)

    # Heuristic 3: Avoid Overfill (Huge negative penalty for overfill)
    overfill_penalty = np.where(bins_remain_cap < item, -1e10, 0) # very big negative value to penalise illegal placement

    # Newton's Law of Cooling Analog: Favor bins that are closest to item size, but avoid overfill at all cost.
    priorities = 0.4 * fill_efficiency + 0.3 * capacity_ratio + 0.3*np.exp(-np.abs(bins_remain_cap-item)) + overfill_penalty

    return priorities
```
