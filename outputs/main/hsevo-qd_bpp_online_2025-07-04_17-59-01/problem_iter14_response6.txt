```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio, gap, and capacity with dynamic weighting."""

    # Handle zero capacities
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate gap, feasible bins
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)

    # Ratio priority
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)

    # Gap priority with relative gap normalization
    relative_gap = gap / (bins_remain_cap + 1e-9)
    gap_priority = np.where(feasible, relative_gap, -1e9)

    # Capacity priority (normalized)
    max_cap = np.max(bins_remain_cap)
    capacity_priority = bins_remain_cap / (max_cap + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority, -1e9)
    
    # Adaptive Weight
    item_size_factor = min(1.0, item)
    
    combined_priority = (
        0.5 * ratio_priority +
        0.3 * gap_priority +
        0.2 * capacity_priority
    )

    return combined_priority
```
