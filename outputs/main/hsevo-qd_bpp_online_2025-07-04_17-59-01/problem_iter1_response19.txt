```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Aims to balance bin usage by:
        1. Preferring bins that can accommodate the item.
        2. Among suitable bins, prioritizing those with tighter fit (less remaining space after packing).
        3. Discouraging bins that are already very full, even if they can technically fit the item
           (to avoid creating bins with very little remaining capacity).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Find bins that can accommodate the item
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):
        # No suitable bins, prioritize almost full bins? Could use some penalty related to fullness, rather than this simple reciprocal.
        priorities = 1.0 / (bins_remain_cap + 0.0001)  # Avoid division by zero
        return priorities

    # Calculate the remaining capacity after adding the item to suitable bins.
    remaining_capacity_after_fit = bins_remain_cap[valid_bins] - item

    # Prioritize bins with tighter fit (smaller remaining capacity) within feasible bins.
    # Using a transformation that ensures smaller values lead to higher priorities
    fit_priorities = 1.0 / (remaining_capacity_after_fit + 0.0001) # small number prevents division by zero errors, high precision needed.

    priorities[valid_bins] = fit_priorities

    # Add a bonus to encourage utilization of less-filled bins, even if viable bins exists.

    # Add a penalty to very full bins

    return priorities
```
