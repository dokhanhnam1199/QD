```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Einstein's insight: Space-time curvature dictates gravity; here, 'curvature' of remaining space dictates item's 'gravitational pull' to the bin.
    # More precisely, introduce non-linearity to encourage fuller bins.
    # 1. Immediate fit gets highest priority (very important for online).
    immediate_fit = (bins_remain_cap >= item) & (bins_remain_cap < (item + 1e-6)) # adding small tolerance
    priorities[immediate_fit] = 1000  # high priority

    # 2. Heuristic: Prioritize bins where item leaves remaining space closest to a 'harmonic fraction' of original bin size, promoting regular use of space.
    # (Inspired by wave mechanics, fitting frequencies nicely.) But applied to bin size
    # This creates density waves through your bin sizes and avoid accumulation in some regions.
    harmonic_bin_sizes = np.array([1/2, 1/3, 1/4, 1/5]) # Consider these for the moment
    harmonic_residuals = np.abs( (bins_remain_cap - item)[:, None] - harmonic_bin_sizes)
    best_harmonic_match = np.min(harmonic_residuals, axis=1) # Pick the closest to any fraction above
    priorities += np.exp(-10 * best_harmonic_match)  # Boost based on how close the fill is

    # 3. The 'least wasted space' principle. Prioritize bins closest to item size (minimize wastage).
    # Introduce relativistic effect: small changes at low occupancy mean a lot, so emphasize them.
    # This promotes bins filled by similar objects together.

    potential_bins = bins_remain_cap >= item
    if np.any(potential_bins): # if item fit in any bin then work with those and penalize all the others
        residuals = bins_remain_cap[potential_bins] - item
        #Small value indicates how tight the fit is
        priorities[potential_bins] += np.exp(-residuals)

    return priorities
```
