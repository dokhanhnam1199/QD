```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A priority function for the online bin packing problem that combines ratio,
    gap, capacity, dynamic penalty, and adaptive weights, with improved
    handling of edge cases and state awareness.
    """

    # Small constant to avoid division by zero and other numerical issues
    epsilon = 1e-9

    # 1. Feasibility check and basic preprocessing
    feasible = bins_remain_cap >= item
    num_feasible = np.sum(feasible)
    
    # If no bin is feasible, return a low priority for all bins, prioritizing the least full one
    if num_feasible == 0:
        return -bins_remain_cap  # Prioritize bins with more remaining capacity

    # 2. Ratio priority (item size / bin capacity), only for feasible bins
    ratios = item / np.where(bins_remain_cap <= 0, epsilon, bins_remain_cap)
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)

    # 3. Gap priority with dynamic almost-full penalty and scaled gap
    gap = bins_remain_cap - item
    gap = np.where(feasible, gap, -1)

    # Dynamic almost-full penalty, scaled by the item size and the number of feasible bins
    avg_cap = np.mean(bins_remain_cap[feasible]) if num_feasible > 0 else np.mean(bins_remain_cap) # Only consider feasible bins for average cap
    almost_full_penalty = np.exp(-50 * gap / (avg_cap + epsilon))
    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)
    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)

    # 4. Capacity priority (normalized remaining capacity), only for feasible bins
    max_cap = np.max(bins_remain_cap[feasible]) if num_feasible > 0 else np.max(bins_remain_cap) # Max capacity only among feasible bins
    capacity_priority = bins_remain_cap / (max_cap + epsilon)
    capacity_priority = np.where(feasible, capacity_priority, -1e9)

    # 5. Introduce a "balancing" term to encourage more even bin utilization
    #   This is a state-aware component to avoid filling one bin completely
    #   before others have had a chance to be used.
    fill_level = 1.0 - (bins_remain_cap / (np.max(bins_remain_cap) + epsilon))  # Fill level of each bin (0 to 1)
    fill_level_priority = -fill_level # Prefer bins with lower fill levels

    fill_level_priority = np.where(feasible, fill_level_priority, -1e9)

    # 6. Adaptive weights based on item size and bin diversity
    item_size_factor = min(1.0, item)
    
    # Standard deviation of remaining capacities. Higher std means more diverse bins
    bin_diversity = np.std(bins_remain_cap)
    diversity_factor = min(1.0, bin_diversity) # Normalize std

    # 7. Combined priority calculation with more emphasis on gap
    combined_priority = (
        0.15 * ratio_priority +
        0.55 * gap_priority +
        0.15 * capacity_priority +
        0.15 * fill_level_priority
    )
    
    return combined_priority
```
