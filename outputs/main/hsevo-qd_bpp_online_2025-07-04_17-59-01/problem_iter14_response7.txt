```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio and gap, with dynamic weights based on item size."""
    division_epsilon: float = 1e-9
    ratio_weight_base: float = 0.5
    gap_weight_base: float = 0.5
    negative_gap_penalty: float = -1e9

    bins_remain_cap = np.where(bins_remain_cap == 0, division_epsilon, bins_remain_cap)
    gap = bins_remain_cap - item
    gap = np.where(gap < 0, negative_gap_penalty, gap)

    ratios = item / bins_remain_cap
    normalized_ratios = ratios / np.max(ratios) if np.max(ratios) > 0 else np.zeros_like(ratios)

    normalized_gap = gap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else np.zeros_like(gap)
    
    # Dynamic weight adjustment
    weight_adjust = item  # Make weights adaptive to item size
    ratio_weight = ratio_weight_base * (1 - weight_adjust)
    gap_weight = gap_weight_base * weight_adjust
    
    priorities = ratio_weight * normalized_ratios + gap_weight * normalized_gap
    return priorities
```
