```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio, gap, and capacity with adaptive weights and penalties."""
    # Avoid zero division
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)

    # Ratio priority
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)

    # Gap priority + dynamic almost full penalty
    almost_full_penalty_scale = np.mean(bins_remain_cap)
    almost_full_penalty = np.exp(-50 * gap / (almost_full_penalty_scale + 1e-9))
    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)
    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)
    
    # Capacity priority
    capacity_priority = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority, -1e9)

    # Best-fit priority
    best_fit_priority = np.where(feasible & (gap == np.min(gap[feasible])), 1.0, 0.0)
    best_fit_priority = np.where(feasible, best_fit_priority, -1e9)

    # Adaptive weights based on item size
    item_scale = min(1.0, item)
    weight_ratio = 0.3 * item_scale
    weight_gap = 0.3 * item_scale
    weight_capacity = 0.2 * (1 - item_scale)
    weight_bestfit = 0.2 * (1 - item_scale)
    
    # Combined priority
    combined_priority = (
        weight_ratio * ratio_priority +
        weight_gap * gap_priority +
        weight_capacity * capacity_priority +
        weight_bestfit * best_fit_priority
    )
    return combined_priority
```
