```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Key idea: Encourage packing into bins that can ALMOST perfectly fit.
            # Avoid fragmentation.  Higher priority for bins with remaining capacity
            # just a little larger than the item.  Introduce a 'fudge' factor.
            fudge_factor = 0.05  # Adjust for experimentation. Relates to fraction of bin
            if item <= cap <= item * (1 + fudge_factor):  # Prefer 'almost perfect' fits.
                priorities[i] = 100  # Very high priority for near-perfect fit
            else:
                priorities[i] = (cap - item) / cap  # Higher priority for lower wasted space. linear priority based on how full the bin gets with item

            # Adding a small bonus for bins with high remaining capacity, 
            # to encourage filling partially full bins first.  This is weighted 
            # relative to the space it takes from bin in relation to bin total
            priorities[i] += 0.1*cap / np.max(bins_remain_cap) if np.max(bins_remain_cap)>0 else 0 # a little bias, might help explore

            # Avoid almost full: slightly penalize nearly full bins, reducing likelyhood of very high fragmentation and future bin uses
            if cap / np.max(bins_remain_cap) < 0.1 :
                priorities[i] -= 0.2
        else:
            priorities[i] = -np.inf  # Cannot fit, so lowest priority

    return priorities
```
