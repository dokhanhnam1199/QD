```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio-based and gravitational attraction with fullness penalty."""

    # Avoid division by zero
    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap)

    # Calculate gap
    gap = bins_remain_cap - item
    gap = np.where(gap < 0, -1, gap)  # Mark infeasible bins

    # Gravitational attraction
    attraction = np.where(gap >= 0, bins_remain_cap / (gap**2 + 0.0001), -1e9)

    # Ratio-based priority
    ratios = item / bins_remain_cap
    log_ratios = np.log(ratios)
    ratio_priority = -log_ratios

    # Fullness penalty: reduce priority if bin is almost full
    almost_full_threshold = 0.9  #tuneable parameter
    fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap)) # normalized
    almost_full_penalty = np.where(fullness > almost_full_threshold, -10 * (fullness - almost_full_threshold), 0) #tuneable parameter

    # Combine priorities: weighted sum
    priorities = 0.6 * attraction + 0.3 * ratio_priority + 0.1 * almost_full_penalty #tuneable parameters

    return priorities
```
