```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio, gap, and capacity for priority. Dynamic scaling of penalty."""
    # Avoid division by zero
    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap)

    # Calculate gap
    gap = bins_remain_cap - item
    gap = np.where(gap < 0, -1, gap)
    
    # Ratio of item size to remaining capacity
    ratios = item / bins_remain_cap

    # Prioritize based on a combination of factors
    priorities = np.where(gap >= 0, (bins_remain_cap / (gap**2 + 0.0001)) + (1 - ratios), -1e9)
    
    return priorities
```
