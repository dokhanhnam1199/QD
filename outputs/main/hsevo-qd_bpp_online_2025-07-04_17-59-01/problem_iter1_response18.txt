```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that can fit the item snugly but not too snugly,
    aiming for a balanced fill. It also considers bins that can't fit the item
    for potentially packing a larger item later (using remaining space effectively).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Define parameters for the "sweet spot" of remaining capacity after packing
    sweet_spot_lower = 0.1  # Aim to leave at least 10% capacity remaining
    sweet_spot_upper = 0.3  # Aim to leave at most 30% capacity remaining

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            remaining_after_pack = cap - item
            remaining_ratio = remaining_after_pack / cap

            if sweet_spot_lower <= remaining_ratio <= sweet_spot_upper:
                # Ideal: Fits within the desired remaining capacity range
                priorities[i] = 10  # High priority

            elif remaining_ratio < sweet_spot_lower:
                # Fits, but almost full (avoid unless necessary)
                priorities[i] = 5 * (remaining_ratio / sweet_spot_lower) # Linear scaling: closer to sweet spot, higher priority

            else:
                # Fits, but leaves a lot of space (could be useful later)
                priorities[i] = 2 + (1 - remaining_ratio) # Scales with the amount filled

        else:
            # Doesn't fit - low priority, but potentially useful later
            priorities[i] = -1  # Negative priority indicates unsuitable

    return priorities
```
