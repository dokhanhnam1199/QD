```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines ratio-based, gap-based, and occupancy-based approaches with adaptive penalties.
    """
    # Avoid division by zero
    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap)

    # Calculate gap, handling infeasible bins
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)

    # Ratio-based priority (normalized item size relative to bin capacity)
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)

    # Gap-based priority with enhanced resolution and handling of very small gaps
    gap_priority = np.where(feasible, bins_remain_cap / (np.sqrt(gap) + 0.0001), -1e9)  # sqrt dampens small gaps

    # Occupancy-based priority (Encourage filling partially empty bins)
    occupancy = 1 - (bins_remain_cap / bins_remain_cap.max()) # Normalized remaining capacity

    occupancy_priority = np.where(feasible, occupancy, -1e9)
    # Almost full penalty, now adaptive based on item size
    almost_full_threshold = 0.1 * item  # More aggressive penalty if item is large
    almost_full_penalty = np.where(feasible & (gap <= almost_full_threshold), np.exp(-100 * gap / (almost_full_threshold + 1e-9)), 0) # Scale exponent by item size
    gap_priority = gap_priority - almost_full_penalty


    # Very empty bin penalty
    very_empty_threshold = bins_remain_cap.max() * 0.8  # Dynamic threshold
    very_empty_penalty = np.where(bins_remain_cap > very_empty_threshold, -10, 0)  # Flat penalty for very empty bins
    occupancy_priority = occupancy_priority + very_empty_penalty


    # Combine ratio, gap, and occupancy based priorities with adaptive weights
    combined_priority = 0.4 * ratio_priority + 0.4 * gap_priority + 0.2 * occupancy_priority

    # If no bins are feasible, prioritize the least infeasible
    if not np.any(feasible):
        combined_priority = -bins_remain_cap + item
        
    return combined_priority
```
