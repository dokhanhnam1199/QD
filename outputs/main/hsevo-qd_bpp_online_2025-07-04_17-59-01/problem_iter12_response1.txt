```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio, gap, capacity, dynamic penalty, adaptive weights, and bin usage."""

    # Handle zero capacities to prevent division by zero
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate gap, penalize infeasible bins
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)

    # Ratio priority (item size / bin capacity)
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)

    # Gap priority with dynamic almost-full penalty
    avg_cap = np.mean(bins_remain_cap)
    almost_full_penalty = np.exp(-50 * gap / (avg_cap + 1e-9))
    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)
    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)

    # Capacity priority (normalized remaining capacity)
    max_cap = np.max(bins_remain_cap)
    capacity_priority = bins_remain_cap / (max_cap + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority, -1e9)

    # Bin usage priority: prefer bins that are already partially used
    bin_usage_priority = np.where(bins_remain_cap < max_cap, 1.0, 0.0)  #Give preference to bins that have been used
    bin_usage_priority = np.where(feasible, bin_usage_priority, -1e9)

    #Adaptive weight. Give more importance to gap when item size is big.
    item_size_factor = min(1.0, item)

    #Adjust weights based on remaining bin capacity
    capacity_factor = np.mean(bins_remain_cap) / (max_cap + 1e-9)
    
    # Combined priority calculation with adaptive weights
    combined_priority = (
        0.2 * ratio_priority +
        (0.4 + 0.2 * item_size_factor) * gap_priority + #Gap priority has more weight when item_size is big
        (0.2 - 0.1 * item_size_factor) * capacity_priority + #Capacity priority has less weight when item_size is big
        0.2 * bin_usage_priority # Bin usage has fixed weight
    )

    return combined_priority
```
