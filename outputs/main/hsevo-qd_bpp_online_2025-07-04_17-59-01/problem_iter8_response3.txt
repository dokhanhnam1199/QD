```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio and gap, adds dynamic penalty, normalizes."""

    bins_remain_cap = np.where(bins_remain_cap == 0, 1e-9, bins_remain_cap)

    ratio = item / bins_remain_cap
    gap = bins_remain_cap - item
    gap = np.where(gap < 0, -1, gap)

    # Dynamic penalty for bins that are almost full
    almost_full_penalty = np.where(gap < 0.1 * bins_remain_cap, -100, 0)

    # Gravitational attraction with capacity
    gravity = np.where(gap >= 0, bins_remain_cap / (gap**2 + 0.0001), -1e9)

    # Combine ratio, gravity, and penalty
    priorities = gravity - 0.1*ratio + almost_full_penalty

    # Normalize
    max_priority = np.max(priorities)
    min_priority = np.min(priorities)

    if max_priority == min_priority:
        return np.zeros_like(priorities)

    priorities = (priorities - min_priority) / (max_priority - min_priority)

    return priorities
```
