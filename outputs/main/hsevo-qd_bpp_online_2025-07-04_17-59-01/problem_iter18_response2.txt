```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio, gap, capacity with adaptive weights, dynamic penalty, and normalization, plus bin diversity consideration."""

    # Ensure no division by zero
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Calculate gap; penalize infeasible bins
    gap = bins_remain_cap - item
    feasible = gap >= 0
    gap = np.where(feasible, gap, -1)

    # Ratio priority (item size / bin capacity)
    ratios = item / bins_remain_cap
    ratio_priority = -np.log(ratios)
    ratio_priority = np.where(feasible, ratio_priority, -1e9)

    # Dynamic almost-full penalty based on remaining capacity and item size
    avg_cap = np.mean(bins_remain_cap)
    almost_full_penalty = np.exp(-25 * gap / (avg_cap + 1e-9)) * (item + 0.1)  # item size influence
    almost_full_penalty = np.where(feasible, almost_full_penalty, 0)
    gap_priority = np.where(feasible, (bins_remain_cap / (gap + 0.0001)) - almost_full_penalty, -1e9)

    # Capacity priority (normalized)
    capacity_priority = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9)
    capacity_priority = np.where(feasible, capacity_priority, -1e9)

    # Bin Diversity Priority: Favor bins with capacity closer to the mean
    capacity_std = np.std(bins_remain_cap)
    diversity_priority = -np.abs(bins_remain_cap - avg_cap) / (capacity_std + 1e-9) # Normalize by std
    diversity_priority = np.where(feasible, diversity_priority, -1e9)

    # Adaptive weights based on item size and remaining capacities.
    item_size_factor = min(1.0, item)
    capacity_range = np.max(bins_remain_cap) - np.min(bins_remain_cap)
    capacity_factor = min(1.0, capacity_range / (avg_cap + 1e-9))

    # Adaptive weights based on remaining capacities.
    if avg_cap > 0.75:
        ratio_weight = 0.2
        gap_weight = 0.5
        capacity_weight = 0.2
        diversity_weight = 0.1
    elif avg_cap < 0.25:
        ratio_weight = 0.5
        gap_weight = 0.2
        capacity_weight = 0.2
        diversity_weight = 0.1
    else:
        ratio_weight = 0.3
        gap_weight = 0.4
        capacity_weight = 0.2
        diversity_weight = 0.1
        
    # Combined priority with adaptive weights
    combined_priority = (
        ratio_weight * ratio_priority +
        gap_weight * gap_priority +
        capacity_weight * capacity_priority +
        diversity_weight * diversity_priority
    )

    return combined_priority
```
