import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple near-optimal TSP solutions using a combination of nearest neighbor and random swaps, then uses a modified score function based on the inverse of edge length scaled by appearance frequency as an indicator of edge likelihood.}"""
    num_nodes = distance_matrix.shape[0]
    num_samples = 100

    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    edge_counts = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Nearest Neighbor initialization
        current_node = np.random.randint(num_nodes)
        unvisited_nodes = set(range(num_nodes))
        unvisited_nodes.remove(current_node)
        path = [current_node]

        while unvisited_nodes:
            nearest_neighbor = min(unvisited_nodes, key=lambda node: distance_matrix[current_node, node])
            path.append(nearest_neighbor)
            unvisited_nodes.remove(nearest_neighbor)
            current_node = nearest_neighbor

        path.append(path[0])  # Return to starting node

        # Random swaps to improve the solution
        for _ in range(num_nodes):
            i, j = np.random.choice(range(1, len(path) - 1), 2, replace=False)
            path[i], path[j] = path[j], path[i]

        # Update edge counts matrix
        for i in range(len(path) - 1):
            node1 = path[i]
            node2 = path[i+1]
            edge_counts[node1, node2] += 1
            edge_counts[node2, node1] += 1  # Symmetric

    # Normalize edge counts to frequency
    edge_frequency = edge_counts / num_samples

    # Calculate heuristics matrix based on inverse distance and frequency
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                if distance_matrix[i, j] > 0:
                    heuristics_matrix[i, j] = edge_frequency[i, j] / distance_matrix[i, j]
                else:
                    heuristics_matrix[i,j] = 0
    return heuristics_matrix
