import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristics matrix by iteratively sampling random tours, and incrementing the corresponding entry in the matrix for each edge present in a sampled short tour.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000
    best_tour_length = float('inf')
    
    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour = np.append(tour, tour[0]) # return to starting node

        # Calculate the length of the tour
        tour_length = 0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        
        # If this tour is shorter than the best tour found so far, update the best tour
        if tour_length < best_tour_length:
           
            # Increment the heuristics matrix for each edge in the current sampled tour
            for i in range(n):
                heuristics_matrix[tour[i], tour[i+1]] += 1
                heuristics_matrix[tour[i+1], tour[i]] += 1

    return heuristics_matrix
