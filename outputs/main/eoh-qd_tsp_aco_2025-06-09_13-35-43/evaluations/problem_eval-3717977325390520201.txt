import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm estimates edge importance for TSP by sampling random paths and assigning higher scores to edges frequently appearing in shorter paths.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        path = np.random.permutation(n)
        path_length = 0
        for i in range(n - 1):
            path_length += distance_matrix[path[i], path[i+1]]
        path_length += distance_matrix[path[-1], path[0]]

        # Award edges on shorter paths more weight.  Normalize the length.
        normalized_length = 1 / (path_length + 1e-9)  # Avoid division by zero

        for i in range(n - 1):
            heuristics_matrix[path[i], path[i+1]] += normalized_length
            heuristics_matrix[path[i+1], path[i]] += normalized_length
        heuristics_matrix[path[-1], path[0]] += normalized_length
        heuristics_matrix[path[0], path[-1]] += normalized_length

    return heuristics_matrix
