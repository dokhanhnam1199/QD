import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs tours using a greedy nearest neighbor approach from multiple random starting nodes, prioritizing shorter edges with added stochasticity and averaging the resulting edge frequencies to form a heuristic matrix.}"""
    num_nodes = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(num_nodes)
        current_node = start_node
        unvisited_nodes = set(range(num_nodes))
        unvisited_nodes.remove(current_node)
        tour = [current_node]

        while unvisited_nodes:
            distances = [distance_matrix[current_node, neighbor] for neighbor in unvisited_nodes]
            min_dist = min(distances)
            
            # Favor shorter distances, but introduce stochasticity
            probabilities = [(1 / (distance_matrix[current_node, neighbor] + 1e-6) + np.random.rand()*0.1) for neighbor in unvisited_nodes]
            probabilities = np.array(probabilities)
            probabilities /= np.sum(probabilities)
            
            next_node = list(unvisited_nodes)[np.random.choice(len(unvisited_nodes), p=probabilities)]

            tour.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

        tour.append(start_node)  # Return to the starting node
        
        for i in range(len(tour) - 1):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
