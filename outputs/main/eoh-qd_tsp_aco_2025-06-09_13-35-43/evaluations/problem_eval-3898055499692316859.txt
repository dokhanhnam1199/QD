import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm constructs a heuristic matrix by iteratively sampling solutions using a biased nearest neighbor approach with stochastic perturbations and then aggregating the edge frequencies across sampled solutions, prioritizing shorter distances more strongly.}
    """
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        unvisited = set(range(n))
        unvisited.remove(start_node)
        current_node = start_node
        path = [start_node]
        
        while unvisited:
            distances = distance_matrix[current_node, :]
            
            # Find nearest neighbors from unvisited nodes
            nearest_neighbors = []
            for neighbor in unvisited:
                nearest_neighbors.append((neighbor, distances[neighbor]))
            nearest_neighbors.sort(key=lambda x: x[1])  # Sort by distance

            # Apply stochastic perturbation: select from top k nearest neighbors
            k = min(5, len(nearest_neighbors))  # Limit the choice
            
            selected_neighbors = nearest_neighbors[:k]

            # Choose a neighbor randomly from the selected ones, biased towards closer nodes
            probabilities = [1 / (distance + 1e-9) for _, distance in selected_neighbors]
            probabilities /= np.sum(probabilities)  # Normalize to create a probability distribution
            
            next_node = np.random.choice([neighbor for neighbor, _ in selected_neighbors], p=probabilities)
            

            path.append(next_node)
            unvisited.remove(next_node)
            
            heuristics_matrix[current_node, next_node] += 1
            heuristics_matrix[next_node, current_node] += 1

            current_node = next_node
        
        heuristics_matrix[current_node, start_node] += 1
        heuristics_matrix[start_node, current_node] += 1


    heuristics_matrix = heuristics_matrix / num_samples
    return heuristics_matrix
