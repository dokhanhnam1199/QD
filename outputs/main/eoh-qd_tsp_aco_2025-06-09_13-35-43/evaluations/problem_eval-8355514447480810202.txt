import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples random tours, and assigns higher probabilities to edges that frequently connect nodes with short distances to each other within those tours.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        tour = np.random.permutation(n)
        for i in range(n):
            u, v = tour[i], tour[(i + 1) % n]
            min_dist_u = np.min(distance_matrix[u, :])
            min_dist_v = np.min(distance_matrix[v, :])
            heuristics_matrix[u, v] += (min_dist_u + min_dist_v) / num_samples
            heuristics_matrix[v, u] += (min_dist_u + min_dist_v) / num_samples

    return heuristics_matrix
