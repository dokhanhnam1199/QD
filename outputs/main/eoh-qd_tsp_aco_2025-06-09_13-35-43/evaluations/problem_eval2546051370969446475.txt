import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristics matrix by iteratively sampling random tours, and weighting the edge increments based on the tour length relative to the best tour found so far.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000
    best_tour_length = float('inf')
    
    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour = np.append(tour, tour[0]) # return to starting node

        # Calculate the length of the tour
        tour_length = 0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        
        # Update best tour length
        best_tour_length = min(best_tour_length, tour_length)

        # Weight the increment based on tour length
        weight = max(0, 1 - (tour_length / best_tour_length - 1) * 0.5)

        # Increment the heuristics matrix for each edge in the current sampled tour
        for i in range(n):
            heuristics_matrix[tour[i], tour[i+1]] += weight
            heuristics_matrix[tour[i+1], tour[i]] += weight

    return heuristics_matrix
