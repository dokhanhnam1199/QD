import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm generates a large number of random tours, evaluates their lengths, and then assigns higher probabilities to edges that appear frequently in shorter tours, returning a matrix representing the likelihood of each edge's inclusion in an optimal tour.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    tour_lengths = []
    tours = []

    for _ in range(num_samples):
        tour = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]
        tour_lengths.append(tour_length)
        tours.append(tour)

    # Normalize tour lengths to represent "fitness"
    max_length = max(tour_lengths)
    fitness = [(max_length - length) for length in tour_lengths]
    total_fitness = sum(fitness)
    if total_fitness == 0:
        weights = [1/num_samples] * num_samples # Assign equal weights if all tours have the same length
    else:
        weights = [f / total_fitness for f in fitness]
    
    for i, tour in enumerate(tours):
        weight = weights[i]
        for j in range(n - 1):
            u = tour[j]
            v = tour[j+1]
            heuristics_matrix[u, v] += weight
            heuristics_matrix[v, u] += weight  # Ensure symmetry
        heuristics_matrix[tour[-1], tour[0]] += weight
        heuristics_matrix[tour[0], tour[-1]] += weight # Ensure symmetry

    return heuristics_matrix
