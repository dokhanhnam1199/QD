import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm refines edge importance by iteratively constructing paths using a probabilistic selection based on current heuristic values and rewarding edges within these paths.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.ones_like(distance_matrix, dtype=float)  # Initialize with ones to avoid zero probabilities
    num_iterations = 1000
    alpha = 0.1  # Learning rate

    for _ in range(num_iterations):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        path = [current_node]
        path_length = 0

        while unvisited_nodes:
            probabilities = []
            for neighbor in range(n):
                if neighbor in unvisited_nodes:
                    probabilities.append(heuristics_matrix[current_node, neighbor])
                else:
                    probabilities.append(0)
            
            probabilities = np.array(probabilities)
            if np.sum(probabilities) == 0:
                next_node = np.random.choice(list(unvisited_nodes))  # Fallback: Choose randomly from unvisited
            else:
                probabilities /= np.sum(probabilities)  # Normalize
                next_node = np.random.choice(n, p=probabilities)
                while next_node not in unvisited_nodes:
                  probabilities[next_node] = 0
                  if np.sum(probabilities) == 0:
                    next_node = np.random.choice(list(unvisited_nodes))
                    break
                  probabilities /= np.sum(probabilities)
                  next_node = np.random.choice(n, p=probabilities)


            path_length += distance_matrix[current_node, next_node]
            path.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

        # Complete the cycle
        path_length += distance_matrix[current_node, start_node]
        path.append(start_node)

        # Update heuristics - reward edges in the path
        reward = 1.0 / (path_length + 1e-6)
        for i in range(n):
            heuristics_matrix[path[i], path[i+1]] += alpha * reward
            heuristics_matrix[path[i+1], path[i]] += alpha * reward

    return heuristics_matrix
