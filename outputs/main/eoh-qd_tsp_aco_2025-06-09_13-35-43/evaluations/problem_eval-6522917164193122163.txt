import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines edge frequency in sampled tours with a penalty for long edges to guide the search towards shorter, more promising paths.}"""
    n = distance_matrix.shape[0]
    num_samples = 500
    heuristics_matrix = np.zeros((n, n))

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i + 1]]
        tour_length += distance_matrix[tour[-1], tour[0]]
        
        # Update heuristics based on tour and length
        for i in range(n - 1):
            u, v = tour[i], tour[i + 1]
            heuristics_matrix[u, v] += 1 / (distance_matrix[u, v] * tour_length)
            heuristics_matrix[v, u] += 1 / (distance_matrix[v, u] * tour_length)
        u, v = tour[-1], tour[0]
        heuristics_matrix[u, v] += 1 / (distance_matrix[u, v] * tour_length)
        heuristics_matrix[v, u] += 1 / (distance_matrix[v, u] * tour_length)
    
    return heuristics_matrix
