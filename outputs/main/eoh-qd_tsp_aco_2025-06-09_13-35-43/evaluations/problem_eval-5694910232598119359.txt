import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines edge frequency from short random tours with a penalty for edges connecting distant nodes, creating a heuristic matrix favoring frequent, short-distance connections.}"""
    n = distance_matrix.shape[0]
    num_samples = 500
    top_k = 50

    edge_counts = np.zeros_like(distance_matrix, dtype=int)

    for _ in range(num_samples):
        permutation = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[permutation[i], permutation[i+1]]
        tour_length += distance_matrix[permutation[-1], permutation[0]]

        if _ == 0:
            top_tours = [(permutation, tour_length)]
        else:
            if tour_length < max([t[1] for t in top_tours]):
                top_tours.append((permutation, tour_length))
                top_tours = sorted(top_tours, key=lambda x: x[1])
                if len(top_tours) > top_k:
                    top_tours = top_tours[:top_k]

    for permutation, _ in top_tours:
        for i in range(n - 1):
            u, v = permutation[i], permutation[i+1]
            edge_counts[u, v] += 1
            edge_counts[v, u] += 1
        u, v = permutation[-1], permutation[0]
        edge_counts[u, v] += 1
        edge_counts[v, u] += 1

    heuristics_matrix = edge_counts.astype(float)
    
    max_edge_count = np.max(edge_counts)
    if max_edge_count > 0:
        heuristics_matrix /= max_edge_count
    
    # Incorporate distance penalty
    max_distance = np.max(distance_matrix)
    if max_distance > 0:
      distance_penalty = distance_matrix / max_distance
      heuristics_matrix = heuristics_matrix - 0.5 * distance_penalty  # Subtract a fraction of the normalized distance

    heuristics_matrix = np.clip(heuristics_matrix, 0, 1) # Ensure values are between 0 and 1

    return heuristics_matrix
