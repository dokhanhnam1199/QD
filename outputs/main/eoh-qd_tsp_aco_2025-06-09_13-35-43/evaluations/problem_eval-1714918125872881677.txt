import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples tours using a probability distribution biased by tour length and updates a heuristic matrix favoring edges from better tours more strongly.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 1000
    
    for _ in range(num_iterations):
        # Generate a random tour, biased towards shorter tours
        probabilities = np.exp(-distance_matrix / distance_matrix.mean())
        tour = np.random.choice(n, size=n, replace=False) # Generate random tour

        # Calculate the tour length
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[n-1], tour[0]]
        
        # Update the heuristics matrix, weighting by tour length
        weight = np.exp(-tour_length / (distance_matrix.mean() * n)) #Weighting factor
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += weight
            heuristics_matrix[tour[i+1], tour[i]] += weight # Symmetric
        heuristics_matrix[tour[n-1], tour[0]] += weight
        heuristics_matrix[tour[0], tour[n-1]] += weight

    return heuristics_matrix
