import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm generates multiple random tours using a nearest neighbor heuristic with stochasticity, and calculates a heuristic matrix based on the inverse of the average edge rank in sampled tours.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros((n, n))

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        tour = [start_node]
        unvisited = set(range(n))
        unvisited.remove(start_node)

        current_node = start_node
        while unvisited:
            distances = distance_matrix[current_node, :]
            
            # Add stochasticity: choose from the k-nearest neighbors
            k = min(5, len(unvisited))  # Consider top k nearest neighbors (max 5)
            
            nearest_neighbors = np.argsort(distances)[1:] # Exclude self-loop
            
            
            candidates = []
            count = 0
            for neighbor in nearest_neighbors:
                if neighbor in unvisited:
                    candidates.append(neighbor)
                    count +=1
                if count == k:
                    break

            
            next_node = np.random.choice(candidates)

            tour.append(next_node)
            unvisited.remove(next_node)
            current_node = next_node

        tour.append(start_node)  # Return to starting node

        # Update heuristic matrix based on tour
        for i in range(n):
            node1 = tour[i]
            node2 = tour[(i + 1) % n]
            rank = np.argsort(distance_matrix[node1, :])[1:].tolist().index(node2) + 1
            heuristics_matrix[node1, node2] += 1.0 / rank
            rank = np.argsort(distance_matrix[node2, :])[1:].tolist().index(node1) + 1
            heuristics_matrix[node2, node1] += 1.0 / rank

    return heuristics_matrix
