import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm biases random tour generation towards shorter tours by using a Metropolis-Hastings-like acceptance criterion, and updates edge probabilities based on accepted tours.}"""
    n = distance_matrix.shape[0]
    num_iterations = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    current_tour = np.random.permutation(n)
    current_tour_length = sum(distance_matrix[current_tour[i], current_tour[(i + 1) % n]] for i in range(n))
    
    temperature = 1.0
    cooling_rate = 0.995

    for _ in range(num_iterations):
        # Generate a neighbor tour by swapping two random cities
        i, j = np.random.choice(n, 2, replace=False)
        neighbor_tour = current_tour.copy()
        neighbor_tour[i], neighbor_tour[j] = neighbor_tour[j], neighbor_tour[i]
        neighbor_tour_length = sum(distance_matrix[neighbor_tour[k], neighbor_tour[(k + 1) % n]] for k in range(n))
        
        # Metropolis-Hastings acceptance criterion
        if neighbor_tour_length < current_tour_length or np.random.rand() < np.exp((current_tour_length - neighbor_tour_length) / temperature):
            current_tour = neighbor_tour
            current_tour_length = neighbor_tour_length
            
        # Update heuristics matrix based on the current (accepted) tour
        for k in range(n):
            u = current_tour[k]
            v = current_tour[(k + 1) % n]
            heuristics_matrix[u, v] += 1
            heuristics_matrix[v, u] += 1

        temperature *= cooling_rate

    # Normalize the heuristics matrix
    total_counts = np.sum(heuristics_matrix)
    if total_counts > 0:
        heuristics_matrix = heuristics_matrix / total_counts

    return heuristics_matrix
