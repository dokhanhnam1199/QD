import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm builds a heuristic matrix by adaptively biasing tour sampling towards shorter paths, focusing on edges that consistently contribute to tour length reduction.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000
    alpha = 0.1  # Learning rate

    # Initialize with random probabilities
    edge_probabilities = np.random.rand(n, n)
    edge_probabilities = (edge_probabilities + edge_probabilities.T) / 2
    np.fill_diagonal(edge_probabilities, 0)
    edge_probabilities /= np.sum(edge_probabilities)

    for _ in range(num_samples):
        # Sample a tour based on edge probabilities
        tour = [np.random.choice(n, p=edge_probabilities[0])]
        for _ in range(n - 1):
            current_node = tour[-1]
            next_node = np.random.choice(n, p=edge_probabilities[current_node])
            while next_node in tour:
                next_node = np.random.choice(n, p=edge_probabilities[current_node])
            tour.append(next_node)
        tour.append(tour[0])
        tour = np.array(tour)

        # Calculate the tour length
        tour_length = 0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[i+1]]

        # Update edge probabilities based on tour length and edge presence
        for i in range(n):
            u, v = tour[i], tour[i+1]
            if distance_matrix[u, v] > 0:
                delta = alpha * (1 - distance_matrix[u,v] / (tour_length + 1e-9))
            else:
                 delta = alpha
            edge_probabilities[u, v] += delta * edge_probabilities[u, v]
            edge_probabilities[v, u] += delta * edge_probabilities[v, u]

        # Normalize probabilities
        edge_probabilities /= np.sum(edge_probabilities)
        np.fill_diagonal(edge_probabilities, 0)

        # Accumulate heuristics based on updated probabilities
        heuristics_matrix += edge_probabilities

    return heuristics_matrix
