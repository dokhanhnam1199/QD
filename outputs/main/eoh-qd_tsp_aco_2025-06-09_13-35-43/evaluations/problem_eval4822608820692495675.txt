import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs heuristic by iteratively building tours using a greedy approach guided by edge distance and adaptive exploration rates, then averages edge frequencies across generated tours.}"""
    n = len(distance_matrix)
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        tour = [current_node]
        exploration_rate = 0.1  # Initial exploration rate

        while unvisited_nodes:
            if np.random.rand() < exploration_rate:
                # Explore: Choose a random unvisited node
                next_node = np.random.choice(list(unvisited_nodes))
            else:
                # Exploit: Choose the nearest unvisited node
                nearest_node = -1
                min_distance = np.inf
                for neighbor in unvisited_nodes:
                    dist = distance_matrix[current_node, neighbor]
                    if dist < min_distance:
                        min_distance = dist
                        nearest_node = neighbor
                next_node = nearest_node

            tour.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

            # Adaptive exploration rate: Reduce exploration over time
            exploration_rate *= 0.99

        tour.append(start_node)  # Return to start

        for i in range(len(tour) - 1):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
