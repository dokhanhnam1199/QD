import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples TSP solutions using an ant colony optimization approach with pheromone updates and probabilistic edge selection based on distance and pheromone levels, combined with a local search improvement step.}"""
    n = len(distance_matrix)
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000
    pheromone = np.ones((n, n))
    alpha = 1
    beta = 2
    rho = 0.1
    Q = 100

    def calculate_path_length(path):
        length = 0
        for i in range(len(path) - 1):
            length += distance_matrix[path[i], path[i+1]]
        return length

    def improve_path(path):
        best_path = path[:]
        best_length = calculate_path_length(path)

        for i in range(1, len(path) - 2):
            for j in range(i + 1, len(path) - 1):
                new_path = path[:i] + path[i:j+1][::-1] + path[j+1:]
                new_length = calculate_path_length(new_path)
                if new_length < best_length:
                    best_length = new_length
                    best_path = new_path[:]
        return best_path

    for _ in range(num_samples):
        current_node = np.random.randint(n)
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        path = [current_node]

        while unvisited_nodes:
            probabilities = np.zeros(n)
            for neighbor in unvisited_nodes:
                probabilities[neighbor] = (pheromone[current_node, neighbor]**alpha) / (distance_matrix[current_node, neighbor]**beta)

            probabilities = probabilities / np.sum(probabilities)
            
            next_node = np.random.choice(n, p=probabilities)
            
            if next_node not in unvisited_nodes:
                available_nodes = list(unvisited_nodes)
                if len(available_nodes) > 0:
                    next_node = available_nodes[np.argmin([distance_matrix[current_node, node] for node in available_nodes])]
                else:
                    next_node = current_node # Back to start

            path.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node
            
        path.append(path[0])
        path = improve_path(path)
        
        path_length = calculate_path_length(path)

        for i in range(len(path) - 1):
            heuristics_matrix[path[i], path[i+1]] += 1
            heuristics_matrix[path[i+1], path[i]] += 1
            
        # Pheromone update
        delta_pheromone = Q / path_length
        for i in range(n):
            for j in range(n):
                pheromone[i, j] *= (1 - rho)

        for i in range(len(path) - 1):
            pheromone[path[i], path[i+1]] += delta_pheromone
            pheromone[path[i+1], path[i]] += delta_pheromone

    return heuristics_matrix
