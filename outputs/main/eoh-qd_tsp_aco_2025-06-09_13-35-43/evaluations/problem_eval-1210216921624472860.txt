import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by iteratively improving tours using a greedy approach based on edge exchange, favoring edges that lead to shorter overall tour lengths.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 100

    for _ in range(num_iterations):
        # Initialize a random tour
        tour = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]

        # Improve the tour using 2-opt swaps
        improved = True
        while improved:
            improved = False
            for i in range(n):
                for j in range(i + 2, n):
                    # Calculate the gain from swapping edges (i, i+1) and (j, j+1) with (i, j) and (i+1, j+1)
                    current_cost = distance_matrix[tour[i - 1], tour[i]] + distance_matrix[tour[j], tour[(j + 1) % n]]
                    new_cost = distance_matrix[tour[i - 1], tour[j]] + distance_matrix[tour[i], tour[(j + 1) % n]]
                    if current_cost > new_cost:
                        # Perform the swap
                        tour[i:j+1] = tour[i:j+1][::-1]
                        tour_length = 0
                        for k in range(n - 1):
                            tour_length += distance_matrix[tour[k], tour[k+1]]
                        tour_length += distance_matrix[tour[-1], tour[0]]
                        improved = True

        # Update heuristics based on the improved tour
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += 1
            heuristics_matrix[tour[i+1], tour[i]] += 1
        heuristics_matrix[tour[-1], tour[0]] += 1
        heuristics_matrix[tour[0], tour[-1]] += 1

    # Normalize the heuristics matrix
    max_val = np.max(heuristics_matrix)
    if max_val > 0:
        heuristics_matrix /= max_val

    return heuristics_matrix
