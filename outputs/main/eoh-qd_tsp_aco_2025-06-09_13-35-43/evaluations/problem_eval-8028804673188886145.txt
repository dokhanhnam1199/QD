import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines random tour sampling with local search improvements, biasing the heuristic matrix towards edges present in locally optimized tours.}"""
    n = distance_matrix.shape[0]
    num_samples = 500
    iterations_local_search = 5
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    def tour_length(tour):
        length = 0
        for i in range(n - 1):
            length += distance_matrix[tour[i], tour[i+1]]
        length += distance_matrix[tour[-1], tour[0]]
        return length

    def swap_2opt(tour, i, k):
        new_tour = tour[:i] + tour[i:k+1][::-1] + tour[k+1:]
        return new_tour
    
    def local_search(tour):
        best_tour = tour
        best_length = tour_length(tour)
        improved = True

        while improved and iterations_local_search > 0:
            improved = False
            for i in range(1, n - 1):
                for k in range(i + 1, n):
                    new_tour = swap_2opt(best_tour, i, k)
                    new_length = tour_length(new_tour)
                    if new_length < best_length:
                        best_tour = new_tour
                        best_length = new_length
                        improved = True
            iterations_local_search -= 1

        return best_tour


    for _ in range(num_samples):
        # Generate a random tour
        permutation = np.random.permutation(n)
        
        # Apply local search to improve the tour
        optimized_tour = local_search(list(permutation))
        
        # Update the heuristic matrix based on the optimized tour
        for i in range(n - 1):
            u, v = optimized_tour[i], optimized_tour[i+1]
            heuristics_matrix[u, v] += 1
            heuristics_matrix[v, u] += 1
        u, v = optimized_tour[-1], optimized_tour[0]
        heuristics_matrix[u, v] += 1
        heuristics_matrix[v, u] += 1

    # Normalize the heuristic matrix
    max_count = np.max(heuristics_matrix)
    if max_count > 0:
        heuristics_matrix /= max_count
    return heuristics_matrix
