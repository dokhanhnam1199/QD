import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses simulated annealing to iteratively improve a random initial tour, accumulating edge frequencies based on the quality of the tours visited during the annealing process.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 1000
    initial_temperature = 100
    cooling_rate = 0.95

    # Initialize a random tour
    tour = np.random.permutation(n)
    current_cost = calculate_tour_cost(distance_matrix, tour)

    temperature = initial_temperature

    for _ in range(num_iterations):
        # Generate a neighbor tour by swapping two random cities
        neighbor_tour = tour.copy()
        i, j = np.random.choice(n, 2, replace=False)
        neighbor_tour[i], neighbor_tour[j] = neighbor_tour[j], neighbor_tour[i]
        neighbor_cost = calculate_tour_cost(distance_matrix, neighbor_tour)

        # Acceptance probability based on simulated annealing
        delta_cost = neighbor_cost - current_cost
        if delta_cost < 0 or np.random.rand() < np.exp(-delta_cost / temperature):
            tour = neighbor_tour
            current_cost = neighbor_cost

        # Accumulate edge frequencies for the current tour
        for i in range(n):
            node1 = tour[i]
            node2 = tour[(i + 1) % n]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

        # Cool down the temperature
        temperature *= cooling_rate

    # Normalize the heuristics matrix
    heuristics_matrix /= num_iterations

    return heuristics_matrix

def calculate_tour_cost(distance_matrix, tour):
    """Calculates the total cost of a given tour."""
    cost = 0
    n = len(tour)
    for i in range(n):
        cost += distance_matrix[tour[i], tour[(i + 1) % n]]
    return heuristics_matrix
