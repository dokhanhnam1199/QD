import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple tours using a nearest neighbor heuristic with random starting nodes and edge selection probabilities inversely proportional to edge distances, then averages the frequency of each edge appearing in the sampled tours to create a heuristic matrix.}"""
    num_nodes = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(num_nodes)
        current_node = start_node
        unvisited_nodes = set(range(num_nodes))
        unvisited_nodes.remove(current_node)
        tour = [current_node]

        while unvisited_nodes:
            probabilities = np.zeros(num_nodes)
            for neighbor in unvisited_nodes:
                probabilities[neighbor] = 1 / (distance_matrix[current_node, neighbor] + 1e-6)  # Avoid division by zero
            
            probabilities /= np.sum(probabilities)
            
            next_node = np.random.choice(num_nodes, p=probabilities)
            if next_node not in unvisited_nodes:
                possible_next_nodes = list(unvisited_nodes)
                if not possible_next_nodes:
                    break
                next_node = possible_next_nodes[0]  # Fallback: pick the first if sampled node is not in unvisited anymore.
                
            
            tour.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node
        
        tour.append(start_node)  # Return to the starting node
        
        for i in range(len(tour) - 1):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
