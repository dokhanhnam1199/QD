import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples diverse TSP solutions by iteratively constructing paths with a mix of greedy and random edge selections, and uses the inverse of average edge rank as heuristic.}"""
    n = len(distance_matrix)
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        current_node = np.random.randint(n)
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        path = [current_node]

        while unvisited_nodes:
            distances = distance_matrix[current_node, :]
            ranked_nodes = np.argsort(distances)
            
            probabilities = np.zeros(n)
            for i, node in enumerate(ranked_nodes):
                if node in unvisited_nodes:
                    probabilities[node] = 1 / (i + 1)  # Inverse rank

            probabilities = probabilities / np.sum(probabilities) # Normalize

            next_node = np.random.choice(n, p=probabilities)

            path.append(next_node)
            unvisited_nodes.remove(next_node)
            heuristics_matrix[current_node, next_node] += 1
            heuristics_matrix[next_node, current_node] += 1

            current_node = next_node

        heuristics_matrix[current_node, path[0]] += 1
        heuristics_matrix[path[0], current_node] += 1
            
    # Normalize by number of samples
    heuristics_matrix = heuristics_matrix / num_samples

    return heuristics_matrix
