import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses ant colony optimization principles to probabilistically construct tours and updates pheromone values based on tour lengths to create a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    pheromone_matrix = np.ones_like(distance_matrix)
    alpha = 1
    beta = 2
    rho = 0.5
    num_ants = n
    num_iterations = 100

    for _ in range(num_iterations):
        all_paths = []
        all_path_lengths = []

        for ant in range(num_ants):
            start_node = ant % n
            unvisited = set(range(n))
            unvisited.remove(start_node)
            current_node = start_node
            path = [start_node]
            path_length = 0

            while unvisited:
                probabilities = np.zeros(n)
                for neighbor in unvisited:
                    probabilities[neighbor] = (pheromone_matrix[current_node, neighbor]**alpha) * ((1 / distance_matrix[current_node, neighbor])**beta)
                
                probabilities = probabilities / np.sum(probabilities)
                
                next_node = np.random.choice(n, p=probabilities)
                
                if next_node not in unvisited:
                   
                   available_nodes = list(unvisited)
                   if not available_nodes:
                       next_node = path[0] 
                   else:
                       next_node = available_nodes[0]
                       for node in available_nodes:
                           if distance_matrix[current_node,node] < distance_matrix[current_node,next_node]:
                               next_node = node



                path_length += distance_matrix[current_node, next_node]
                path.append(next_node)
                unvisited.remove(next_node)
                current_node = next_node

            path_length += distance_matrix[current_node, start_node]
            path.append(start_node)

            all_paths.append(path)
            all_path_lengths.append(path_length)

        # Update pheromone matrix
        pheromone_matrix = pheromone_matrix * (1 - rho)

        for k in range(num_ants):
            path = all_paths[k]
            path_length = all_path_lengths[k]
            for i in range(n):
                u, v = path[i], path[(i + 1) % n]
                pheromone_matrix[u, v] += 1 / path_length
                pheromone_matrix[v, u] += 1 / path_length

    heuristics_matrix = pheromone_matrix
    return heuristics_matrix
