import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm iteratively refines an initial set of random tours by applying 2-opt swaps and updates a heuristic matrix based on the frequency of edges in the refined tours, weighted by the tour length improvement after the swaps.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros((n, n))
    
    def calculate_tour_length(tour):
        length = 0
        for i in range(n):
            length += distance_matrix[tour[i], tour[(i + 1) % n]]
        return length

    def two_opt_swap(tour):
        best_tour = tour
        best_length = calculate_tour_length(tour)
        
        for i in range(1, n - 1):
            for j in range(i + 1, n):
                new_tour = tour[:i] + tour[i:j+1][::-1] + tour[j+1:]
                new_length = calculate_tour_length(new_tour)
                
                if new_length < best_length:
                    best_length = new_length
                    best_tour = new_tour
        return best_tour, best_length
    
    for _ in range(num_samples):
        tour = np.random.permutation(n).tolist()
        initial_length = calculate_tour_length(tour)

        refined_tour, refined_length = two_opt_swap(tour)
        
        improvement = initial_length - refined_length
        
        if improvement > 0:
            weight = improvement 
        else:
            weight = 0.01 # avoid zero weights and give slightly preference to non-improving tours
    

        for i in range(n):
            u = refined_tour[i]
            v = refined_tour[(i + 1) % n]
            heuristics_matrix[u, v] += weight
            heuristics_matrix[v, u] += weight

    return heuristics_matrix
