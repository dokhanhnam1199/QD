import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines edge frequency sampling with iterative improvement via local search to refine the heuristic matrix based on progressively better tours.}"""
    n = distance_matrix.shape[0]
    num_samples = 50
    num_iterations = 10
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Initial sampling phase
    for _ in range(num_samples):
        permutation = np.random.permutation(n)
        tour_length = sum(distance_matrix[permutation[i], permutation[(i + 1) % n]] for i in range(n))

        # Edge counting
        for i in range(n):
            u, v = permutation[i], permutation[(i + 1) % n]
            heuristics_matrix[u, v] += 1
            heuristics_matrix[v, u] += 1

    heuristics_matrix = heuristics_matrix / num_samples

    # Iterative improvement phase
    for _ in range(num_iterations):
        for i in range(n):
            for j in range(i + 1, n):
                # Consider swapping nodes i and j in the current tour
                delta = -distance_matrix[i - 1, i] - distance_matrix[i, (i + 1) % n] - distance_matrix[j - 1, j] - distance_matrix[j, (j + 1) % n] + distance_matrix[i - 1, j] + distance_matrix[j, (i + 1) % n] + distance_matrix[j - 1, i] + distance_matrix[i, (j + 1) % n]

                # If the swap improves the tour length, update the heuristic matrix
                if delta < 0:
                    heuristics_matrix[i, j] += 0.1
                    heuristics_matrix[j, i] += 0.1

    # Normalize the heuristic matrix
    max_val = np.max(heuristics_matrix)
    if max_val > 0:
        heuristics_matrix = heuristics_matrix / max_val
    return heuristics_matrix
