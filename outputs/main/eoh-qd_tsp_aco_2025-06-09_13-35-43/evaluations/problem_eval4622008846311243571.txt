import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by combining shortest path information with node centrality measures to favor edges connecting central nodes along short routes.}"""
    num_nodes = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate shortest path matrix using Floyd-Warshall algorithm
    shortest_paths = np.copy(distance_matrix)
    for k in range(num_nodes):
        for i in range(num_nodes):
            for j in range(num_nodes):
                shortest_paths[i, j] = min(shortest_paths[i, j], shortest_paths[i, k] + shortest_paths[k, j])

    # Calculate node centrality (degree centrality approximation using inverse distance)
    node_centrality = np.sum(1.0 / (distance_matrix + np.eye(num_nodes)), axis=1)

    # Combine shortest path and centrality information
    for i in range(num_nodes):
        for j in range(num_nodes):
            if i != j:
                heuristics_matrix[i, j] = (node_centrality[i] + node_centrality[j]) / (shortest_paths[i, j] + 1e-6)

    return heuristics_matrix
