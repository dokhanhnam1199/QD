import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm estimates edge inclusion probabilities for TSP by sampling solutions based on a greedy approach that iteratively adds the shortest available edge, avoiding cycles, and accumulating edge frequencies.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 100

    for _ in range(num_samples):
        edges = []
        for i in range(n):
            for j in range(i + 1, n):
                edges.append((i, j, distance_matrix[i, j]))
        
        edges.sort(key=lambda x: x[2])  # Sort edges by distance

        path = []
        path_length = 0
        parent = list(range(n)) # Initialize parent for cycle detection

        def find(i):
            if parent[i] == i:
                return i
            parent[i] = find(parent[i])
            return parent[i]

        def union(i, j):
            root_i = find(i)
            root_j = find(j)
            parent[root_i] = root_j

        
        included_nodes = set()
        
        for edge in edges:
            u, v, dist = edge
            
            if find(u) != find(v):
                
                if len(included_nodes) < n:
                    if u not in included_nodes:
                        included_nodes.add(u)
                    if v not in included_nodes:
                        included_nodes.add(v)
                
                path.append((u, v))
                path_length += dist
                union(u, v)
        
        #Check to see if all nodes were visited and if not, restart
        if len(included_nodes) != n:
           continue
        
        # Accumulate edge frequencies for this sample
        for u, v in path:
            heuristics_matrix[u, v] += 1
            heuristics_matrix[v, u] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
