import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm estimates edge importance for TSP by sampling random paths, weighting edges by the inverse exponential of the path length to emphasize significantly shorter paths.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        path = np.random.permutation(n)
        path_length = 0
        for i in range(n - 1):
            path_length += distance_matrix[path[i], path[i+1]]
        path_length += distance_matrix[path[-1], path[0]]

        # Award edges on shorter paths more weight, using an exponential decay.
        weight = np.exp(-path_length / 10)  # Adjust the divisor (10) to control sensitivity

        for i in range(n - 1):
            heuristics_matrix[path[i], path[i+1]] += weight
            heuristics_matrix[path[i+1], path[i]] += weight
        heuristics_matrix[path[-1], path[0]] += weight
        heuristics_matrix[path[0], path[-1]] += weight

    return heuristics_matrix
