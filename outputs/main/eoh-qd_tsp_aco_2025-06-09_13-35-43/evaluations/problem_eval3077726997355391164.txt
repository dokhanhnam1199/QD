import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm estimates edge inclusion probabilities for TSP by sampling near-optimal solutions using a greedy heuristic with random edge selection and accumulating edge frequencies.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 100

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited = set(range(n))
        unvisited.remove(current_node)
        path = [current_node]
        path_length = 0

        while unvisited:
            # Create a probability distribution based on inverse distance
            probabilities = np.zeros(n)
            for neighbor in unvisited:
                probabilities[neighbor] = 1 / (distance_matrix[current_node, neighbor] + 1e-9)  # Adding a small value to avoid division by zero

            # Normalize probabilities
            probabilities /= np.sum(probabilities)

            # Choose the next node randomly based on the probability distribution
            next_node = np.random.choice(list(unvisited), p=probabilities[list(unvisited)])
            
            path.append(next_node)
            path_length += distance_matrix[current_node, next_node]
            unvisited.remove(next_node)
            current_node = next_node

        path.append(start_node)
        path_length += distance_matrix[current_node, start_node]

        # Accumulate edge frequencies for this sample
        for i in range(n):
            node1 = path[i]
            node2 = path[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples

    return heuristics_matrix
