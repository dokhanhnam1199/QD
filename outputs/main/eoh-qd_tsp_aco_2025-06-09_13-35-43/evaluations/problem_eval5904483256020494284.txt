import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines random tour generation with biased sampling based on edge costs to create a heuristic matrix that favors edges with low costs and high frequencies.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 1000

    for _ in range(num_iterations):
        # Generate a random tour with a bias towards shorter edges
        current_node = np.random.randint(n)
        unvisited = set(range(n))
        unvisited.remove(current_node)
        tour = [current_node]

        while unvisited:
            probabilities = np.zeros(n)
            for neighbor in unvisited:
                probabilities[neighbor] = 1.0 / (distance_matrix[current_node, neighbor] + 1e-6)  # Avoid division by zero

            probabilities /= np.sum(probabilities)
            
            next_node = np.random.choice(n, p=probabilities)
            while next_node not in unvisited:
              next_node = np.random.choice(n, p=probabilities)

            tour.append(next_node)
            unvisited.remove(next_node)
            current_node = next_node

        tour.append(tour[0])  # Return to start

        # Update the heuristics matrix
        for i in range(n):
            heuristics_matrix[tour[i], tour[i+1]] += 1.0 / num_iterations
            heuristics_matrix[tour[i+1], tour[i]] += 1.0 / num_iterations

    return heuristics_matrix
