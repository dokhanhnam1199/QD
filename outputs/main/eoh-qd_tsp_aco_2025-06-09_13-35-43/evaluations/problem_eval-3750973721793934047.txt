import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs tours greedily from multiple random starting nodes, biasing edge selection by the reciprocal of the distance and penalizing revisits to already-visited nodes, then averages the number of times each edge appears in these tours to derive a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    num_starts = 10
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for start_node in range(num_starts):
        
        for _ in range(n): # Repeat to gather multiple tours for one single start node
            current_node = np.random.randint(0,n)
            tour = [current_node]
            unvisited_nodes = set(range(n))
            unvisited_nodes.remove(current_node)

            while unvisited_nodes:
                probabilities = np.zeros(n)
                for neighbor in unvisited_nodes:
                    probabilities[neighbor] = 1.0 / (distance_matrix[current_node, neighbor] + 1e-9)  # Avoid division by zero
                
                probabilities /= np.sum(probabilities) # Normalize
                
                next_node = np.random.choice(n, p=probabilities)

                if next_node not in unvisited_nodes:
                    
                    possible_nodes = list(unvisited_nodes)
                    if not possible_nodes:
                        break  # No more unvisited nodes
                    else:
                        next_node_index = np.random.randint(0, len(possible_nodes))
                        next_node = possible_nodes[next_node_index]
                        
                
                tour.append(next_node)
                unvisited_nodes.remove(next_node)
                current_node = next_node

            tour.append(tour[0])  # Return to start
            
            for i in range(len(tour) - 1):
                u, v = tour[i], tour[i+1]
                heuristics_matrix[u, v] += 1
                heuristics_matrix[v, u] += 1

    heuristics_matrix /= (num_starts*n)  # Average over all tours and start nodes
    return heuristics_matrix
