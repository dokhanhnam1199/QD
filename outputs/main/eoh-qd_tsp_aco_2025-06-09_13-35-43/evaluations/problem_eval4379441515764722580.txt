import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples tours biased by a pheromone matrix, updates the pheromone matrix based on tour length, and gradually intensifies pheromone trails of shorter tours through evaporation and reinforcement.}
    """
    n = distance_matrix.shape[0]
    pheromone_matrix = np.ones_like(distance_matrix, dtype=float)
    alpha = 1.0  # Pheromone influence
    beta = 2.0  # Distance influence
    evaporation_rate = 0.1
    num_samples = 100

    for _ in range(num_samples):
        tour = []
        unvisited = list(range(n))
        current_node = np.random.choice(unvisited)
        tour.append(current_node)
        unvisited.remove(current_node)

        while unvisited:
            probabilities = []
            for next_node in unvisited:
                pheromone_level = pheromone_matrix[current_node, next_node]
                distance = distance_matrix[current_node, next_node]
                attractiveness = (pheromone_level**alpha) / (distance**beta + 1e-6)
                probabilities.append(attractiveness)

            probabilities = np.array(probabilities) / np.sum(probabilities)
            next_node = np.random.choice(unvisited, p=probabilities)
            tour.append(next_node)
            unvisited.remove(next_node)
            current_node = next_node

        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]

        # Pheromone update
        delta_pheromone = 1.0 / (tour_length + 1e-6)
        for i in range(n - 1):
            pheromone_matrix[tour[i], tour[i+1]] = (1 - evaporation_rate) * pheromone_matrix[tour[i], tour[i+1]] + delta_pheromone
            pheromone_matrix[tour[i+1], tour[i]] = (1 - evaporation_rate) * pheromone_matrix[tour[i+1], tour[i]] + delta_pheromone
        pheromone_matrix[tour[-1], tour[0]] = (1 - evaporation_rate) * pheromone_matrix[tour[-1], tour[0]] + delta_pheromone
        pheromone_matrix[tour[0], tour[-1]] = (1 - evaporation_rate) * pheromone_matrix[tour[0], tour[-1]] + delta_pheromone
    
    return heuristics_matrix
