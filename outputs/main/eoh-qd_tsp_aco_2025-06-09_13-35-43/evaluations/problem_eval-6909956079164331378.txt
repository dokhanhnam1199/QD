import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples many random tours, and for each edge, records how often it appears in the best tours found; edges appearing more frequently in short tours are given higher heuristic scores.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    top_k = 100

    edge_counts = np.zeros_like(distance_matrix, dtype=int)

    for _ in range(num_samples):
        permutation = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[permutation[i], permutation[i+1]]
        tour_length += distance_matrix[permutation[-1], permutation[0]]

        # Store the tour and its length
        if _ == 0:
            top_tours = [(permutation, tour_length)]
        else:
            # Insert the current tour if it's better than the worst in top_tours
            if tour_length < max([t[1] for t in top_tours]):
                top_tours.append((permutation, tour_length))
                top_tours = sorted(top_tours, key=lambda x: x[1])
                if len(top_tours) > top_k:
                    top_tours = top_tours[:top_k]

    # Count edge occurrences in the top tours
    for permutation, _ in top_tours:
        for i in range(n - 1):
            u, v = permutation[i], permutation[i+1]
            edge_counts[u, v] += 1
            edge_counts[v, u] += 1
        u, v = permutation[-1], permutation[0]
        edge_counts[u, v] += 1
        edge_counts[v, u] += 1
    
    # Normalize the edge counts to create the heuristics matrix
    heuristics_matrix = edge_counts / np.max(edge_counts) if np.max(edge_counts) > 0 else edge_counts
    
    return heuristics_matrix
