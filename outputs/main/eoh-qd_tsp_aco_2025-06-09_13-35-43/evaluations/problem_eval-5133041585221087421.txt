import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs TSP solutions by iteratively inserting unvisited nodes into the existing path at the position that minimizes the path length increase, using the frequency of edge usage as heuristics.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 100

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        path = [start_node]
        unvisited = set(range(n))
        unvisited.remove(start_node)

        while unvisited:
            best_node = None
            best_insertion_point = None
            min_increase = float('inf')

            for node_to_insert in unvisited:
                for i in range(len(path)):
                    # Calculate insertion cost
                    insertion_point = i
                    node_before = path[i-1] if i > 0 else path[-1]
                    node_after = path[i]

                    increase = distance_matrix[node_before, node_to_insert] + distance_matrix[node_to_insert, node_after] - distance_matrix[node_before, node_after]

                    if increase < min_increase:
                        min_increase = increase
                        best_node = node_to_insert
                        best_insertion_point = insertion_point
            
            path.insert(best_insertion_point, best_node)
            unvisited.remove(best_node)

        # Update heuristics matrix based on the constructed path
        for i in range(len(path) - 1):
            heuristics_matrix[path[i], path[i+1]] += 1
            heuristics_matrix[path[i+1], path[i]] += 1
        
        heuristics_matrix[path[-1], path[0]] += 1
        heuristics_matrix[path[0], path[-1]] += 1

    return heuristics_matrix
