import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses ant colony optimization principles to probabilistically construct tours and update pheromone levels based on tour quality.}"""
    n = distance_matrix.shape[0]
    pheromone = np.ones_like(distance_matrix)
    alpha = 1
    beta = 2
    rho = 0.5
    num_ants = 20
    num_iterations = 100
    
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for iteration in range(num_iterations):
        all_paths = []
        all_costs = []

        for ant in range(num_ants):
            start_node = np.random.randint(n)
            unvisited = set(range(n))
            unvisited.remove(start_node)
            current_node = start_node
            path = [start_node]
            cost = 0

            while unvisited:
                probabilities = np.zeros(n)
                for next_node in unvisited:
                    probabilities[next_node] = (pheromone[current_node, next_node]**alpha) * ((1 / distance_matrix[current_node, next_node])**beta)
                
                probabilities = probabilities / np.sum(probabilities)
                
                next_node = np.random.choice(n, p=probabilities)
                
                if next_node not in unvisited:
                    available_nodes = list(unvisited)
                    if not available_nodes:
                        next_node = path[0]
                    else:
                        next_node = available_nodes[0]
                        
                
                path.append(next_node)
                cost += distance_matrix[current_node, next_node]
                unvisited.remove(next_node)
                current_node = next_node
            
            cost += distance_matrix[current_node, start_node]
            path.append(start_node)

            all_paths.append(path)
            all_costs.append(cost)
            
        best_ant = np.argmin(all_costs)
        best_path = all_paths[best_ant]
        best_cost = all_costs[best_ant]
        
        # Pheromone update
        pheromone *= (1 - rho)
        for i in range(n):
            pheromone[best_path[i], best_path[(i+1) % n]] += rho * (1 / best_cost)
            pheromone[best_path[(i+1) % n], best_path[i]] += rho * (1 / best_cost)
        
        for i in range(n):
            heuristics_matrix[best_path[i], best_path[(i+1) % n]] += 1
            heuristics_matrix[best_path[(i+1) % n], best_path[i]] += 1
    
    return heuristics_matrix
