import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples many random tours, and for each edge, calculates a heuristic score based on the edge's frequency in short tours.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros((n, n))
    edge_counts = np.zeros((n, n))
    tour_lengths = []
    tours = []

    for _ in range(num_samples):
        tour = np.random.permutation(n)
        tours.append(tour)
        tour_length = 0
        for i in range(n):
            j = (i + 1) % n
            u, v = tour[i], tour[j]
            tour_length += distance_matrix[u, v]
        tour_lengths.append(tour_length)
    
    # Identify top tours (e.g., shortest 10%)
    cutoff = np.percentile(tour_lengths, 10)  # Or adjust percentile
    
    for idx, tour_length in enumerate(tour_lengths):
        if tour_length <= cutoff:
            tour = tours[idx]
            for i in range(n):
                j = (i + 1) % n
                u, v = tour[i], tour[j]
                edge_counts[u, v] += 1
                edge_counts[v, u] += 1

    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = edge_counts[i, j]
            else:
                heuristics_matrix[i, j] = 0

    return heuristics_matrix
