import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by iteratively improving random tours and prioritizing edges used in these improved tours, weighted inversely by tour length.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 500

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]

        # Improve the tour using 2-opt swaps
        improved = True
        while improved:
            improved = False
            for i in range(n):
                for j in range(i + 2, n):
                    new_length = tour_length - distance_matrix[tour[i-1], tour[i]] - distance_matrix[tour[j], tour[(j+1)%n]] + distance_matrix[tour[i-1], tour[j]] + distance_matrix[tour[i], tour[(j+1)%n]]
                    if new_length < tour_length:
                        tour = np.concatenate((tour[:i], tour[i:j+1][::-1], tour[j+1:]))
                        tour_length = new_length
                        improved = True

        # Update the heuristics matrix, giving higher weight to shorter tours after improvement
        weight = np.exp(-tour_length / np.mean(distance_matrix))

        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += weight
            heuristics_matrix[tour[i+1], tour[i]] += weight  # Symmetric
        heuristics_matrix[tour[-1], tour[0]] += weight
        heuristics_matrix[tour[0], tour[-1]] += weight

    return heuristics_matrix
