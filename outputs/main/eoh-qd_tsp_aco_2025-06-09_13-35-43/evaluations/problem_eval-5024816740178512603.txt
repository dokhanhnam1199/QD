import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple random tours, and for each edge, it counts how often it appears in the shorter tours among the samples, using the exponential of the negative rank of tour lengths as probabilities.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    sampled_tours = []
    tour_lengths = []

    for _ in range(num_samples):
        tour = np.random.permutation(n)
        tour_length = 0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[(i + 1) % n]]
        sampled_tours.append(tour)
        tour_lengths.append(tour_length)

    ranked_indices = np.argsort(tour_lengths)
    heuristics_matrix = np.zeros((n, n))
    
    for rank, index in enumerate(ranked_indices):
        tour = sampled_tours[index]
        probability = np.exp(-rank * 0.1) # Exponential decay of rank as probability
        for i in range(n):
            u = tour[i]
            v = tour[(i + 1) % n]
            heuristics_matrix[u, v] += probability
            heuristics_matrix[v, u] += probability # Symmetric

    return heuristics_matrix
