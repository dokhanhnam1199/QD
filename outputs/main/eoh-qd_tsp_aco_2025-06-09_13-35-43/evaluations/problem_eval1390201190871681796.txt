import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by iteratively improving random tours using 2-opt swaps and recording edge frequencies in improved solutions.}"""
    n = distance_matrix.shape[0]
    num_samples = 50
    num_iterations = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a random initial tour
        tour = np.random.permutation(n)
        
        # Improve the tour using 2-opt swaps
        for _ in range(num_iterations):
            best_change = 0
            best_i = -1
            best_j = -1

            for i in range(n):
                for j in range(i + 2, n):
                    current_cost = distance_matrix[tour[i - 1], tour[i]] + distance_matrix[tour[j - 1], tour[j]] if i > 0 and j < n else distance_matrix[tour[i-1], tour[i]] + distance_matrix[tour[j-1], tour[j % n]] if i > 0 else distance_matrix[tour[n-1], tour[0]] + distance_matrix[tour[j-1], tour[j]] if i == 0 and j < n else distance_matrix[tour[n-1], tour[0]] + distance_matrix[tour[j-1], tour[j % n]]
                    
                    new_cost = distance_matrix[tour[i - 1], tour[j - 1]] + distance_matrix[tour[i], tour[j]] if i > 0 and j < n else distance_matrix[tour[i-1], tour[j-1]] + distance_matrix[tour[i], tour[j % n]] if i > 0 else distance_matrix[tour[n-1], tour[j-1]] + distance_matrix[tour[i], tour[j]] if i == 0 and j < n else distance_matrix[tour[n-1], tour[j-1]] + distance_matrix[tour[i], tour[j % n]]
                    
                    change = current_cost - new_cost

                    if change > best_change:
                        best_change = change
                        best_i = i
                        best_j = j

            if best_change > 0:
                tour[best_i:best_j] = tour[best_i:best_j][::-1]

        # Update the heuristics matrix with the improved tour
        for i in range(n):
            u = tour[i]
            v = tour[(i + 1) % n]
            heuristics_matrix[u, v] += 1
            heuristics_matrix[v, u] += 1

    heuristics_matrix = heuristics_matrix / num_samples
    return heuristics_matrix
