import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses ant colony optimization (ACO) principles to construct a pheromone matrix, guiding solution construction based on edge desirability and evaporation.}"""
    n = len(distance_matrix)
    pheromone_matrix = np.ones((n, n))  # Initialize pheromone levels
    alpha = 1  # Pheromone influence
    beta = 2  # Heuristic influence (distance)
    rho = 0.5  # Evaporation rate
    Q = 100  # Pheromone deposit constant
    num_ants = n
    iterations = 50

    for iteration in range(iterations):
        ant_solutions = []
        ant_costs = []

        for ant in range(num_ants):
            current_node = np.random.randint(n)
            tour = [current_node]
            unvisited = set(range(n))
            unvisited.remove(current_node)

            while unvisited:
                probabilities = np.zeros(n)
                for next_node in range(n):
                    if next_node in unvisited:
                        probabilities[next_node] = (pheromone_matrix[current_node, next_node]**alpha) * \
                                                    ((1 / (distance_matrix[current_node, next_node] + 1e-9))**beta)
                
                if np.sum(probabilities) == 0:
                    next_node = min(unvisited, key=lambda x: distance_matrix[current_node, x])
                else:
                    probabilities /= np.sum(probabilities)
                    next_node = np.random.choice(n, p=probabilities)
                tour.append(next_node)
                unvisited.remove(next_node)
                current_node = next_node

            tour.append(tour[0])  # Return to start

            cost = 0
            for i in range(n):
                cost += distance_matrix[tour[i], tour[i+1]]
            
            ant_solutions.append(tour)
            ant_costs.append(cost)

        # Update pheromones
        pheromone_matrix *= (1 - rho)  # Evaporation

        for ant in range(num_ants):
            tour = ant_solutions[ant]
            cost = ant_costs[ant]
            for i in range(n):
                node1 = tour[i]
                node2 = tour[i+1]
                pheromone_matrix[node1, node2] += Q / cost
                pheromone_matrix[node2, node1] += Q / cost
    
    heuristics_matrix = pheromone_matrix
    return heuristics_matrix
