import numpy as np

def heuristics_v3(distance_matrix):
    """{This algorithm estimates edge importance by sampling random tours and updating the heuristic value for edges based on an inverse power of the tour length.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]

        # Give higher weight to shorter tours (Inverse power)
        weight = 1.0 / (tour_length + 1e-9)  # Adding a small constant to avoid division by zero

        # Update the heuristics matrix
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += weight
            heuristics_matrix[tour[i+1], tour[i]] += weight  # Symmetric matrix
        heuristics_matrix[tour[-1], tour[0]] += weight
        heuristics_matrix[tour[0], tour[-1]] += weight

    return heuristics_matrix
