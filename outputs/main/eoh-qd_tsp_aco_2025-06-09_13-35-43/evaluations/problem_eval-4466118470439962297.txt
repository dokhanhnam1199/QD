import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples random tours, biases the sampling based on edge frequencies in shorter tours, and returns a heuristic matrix reflecting edge importance.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    edge_counts = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 1000
    
    for _ in range(num_iterations):
        # Generate a biased random tour
        if np.sum(heuristics_matrix) == 0:
            probabilities = np.ones_like(distance_matrix)
        else:
            probabilities = np.clip(heuristics_matrix, a_min = 0.0001, a_max = None) #Ensure no division by zero
        
        current_node = np.random.randint(n)
        tour = [current_node]
        unvisited = set(range(n))
        unvisited.remove(current_node)

        while unvisited:
            next_node_probabilities = np.zeros(n)
            for node in unvisited:
                next_node_probabilities[node] = probabilities[current_node, node]

            next_node_probabilities /= np.sum(next_node_probabilities)
            next_node = np.random.choice(n, p=next_node_probabilities)
            tour.append(next_node)
            unvisited.remove(next_node)
            current_node = next_node

        tour = np.append(tour, tour[0]) # Return to start

        # Calculate the tour length
        tour_length = 0.0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[i+1]]

        # Update the heuristics matrix if the tour is "good" and edge counts
        if tour_length < np.mean(distance_matrix) * n * 1.5 : # Consider tours shorter than some multiple of average distance
          for i in range(n):
              edge_counts[tour[i], tour[i+1]] += 1
              edge_counts[tour[i+1], tour[i]] += 1

    # Normalize edge counts to create the heuristic matrix
    total_edge_visits = np.sum(edge_counts)
    if total_edge_visits > 0:
        heuristics_matrix = edge_counts / total_edge_visits
    else:
        heuristics_matrix = np.ones_like(distance_matrix) / (n * n)
        
    return heuristics_matrix
