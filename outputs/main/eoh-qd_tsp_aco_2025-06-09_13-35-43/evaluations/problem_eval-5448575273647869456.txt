import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm constructs a heuristic matrix by iteratively sampling solutions using a nearest neighbor approach with stochastic perturbations and a weighted scoring function based on edge length, then aggregating the edge scores across sampled solutions.}
    """
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        unvisited = set(range(n))
        unvisited.remove(start_node)
        current_node = start_node
        path = [start_node]
        
        while unvisited:
            distances = distance_matrix[current_node, :]
            
            # Find nearest neighbors from unvisited nodes
            nearest_neighbors = []
            for neighbor in unvisited:
                nearest_neighbors.append((neighbor, distances[neighbor]))
            nearest_neighbors.sort(key=lambda x: x[1])  # Sort by distance

            # Apply stochastic perturbation: select from top k nearest neighbors
            k = min(5, len(nearest_neighbors))  # Limit the choice
            
            selected_neighbors = nearest_neighbors[:k]

            # Choose a neighbor randomly from the selected ones
            
            neighbor_idx = np.random.randint(len(selected_neighbors))
            next_node = selected_neighbors[neighbor_idx][0]
            edge_length = selected_neighbors[neighbor_idx][1]

            path.append(next_node)
            unvisited.remove(next_node)
            
            # Weighted scoring based on edge length
            score = 1.0 / (edge_length + 1e-6)  # Avoid division by zero
            heuristics_matrix[current_node, next_node] += score
            heuristics_matrix[next_node, current_node] += score

            current_node = next_node
        
        # Weighted scoring for the return edge
        return_edge_length = distance_matrix[current_node, start_node]
        return_score = 1.0 / (return_edge_length + 1e-6)
        heuristics_matrix[current_node, start_node] += return_score
        heuristics_matrix[start_node, current_node] += return_score


    heuristics_matrix = heuristics_matrix / num_samples
    return heuristics_matrix
