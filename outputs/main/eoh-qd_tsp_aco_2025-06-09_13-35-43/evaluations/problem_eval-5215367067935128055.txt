import numpy as np

def heuristics_v3(distance_matrix):
    """{This algorithm samples potential TSP solutions using a nearest neighbor heuristic with probabilistic selection based on edge distances, iteratively refining edge importance scores, and employs a modified probability calculation based on the exponential of the negative distance scaled by a temperature parameter.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 100
    temperature = 1.0

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited = set(range(n))
        unvisited.remove(current_node)
        path = [current_node]

        while unvisited:
            distances = distance_matrix[current_node, :]
            probabilities = np.exp(-distances / temperature)
            probabilities[current_node] = 0
            probabilities = probabilities / np.sum(probabilities)

            next_node = np.random.choice(n, p=probabilities)
            while next_node not in unvisited:
              probabilities[next_node] = 0
              if np.sum(probabilities) == 0:
                next_node = np.random.choice(list(unvisited))
                break
              probabilities = probabilities / np.sum(probabilities)
              next_node = np.random.choice(n, p=probabilities)

            if next_node in unvisited:
                heuristics_matrix[current_node, next_node] += 1
                heuristics_matrix[next_node, current_node] += 1
                current_node = next_node
                path.append(current_node)
                unvisited.remove(current_node)

        heuristics_matrix[current_node, start_node] += 1
        heuristics_matrix[start_node, current_node] += 1

    return heuristics_matrix
