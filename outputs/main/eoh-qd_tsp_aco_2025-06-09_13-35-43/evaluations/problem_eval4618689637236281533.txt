import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses reinforcement learning (Q-learning) to iteratively update a heuristic matrix based on the quality of sampled tours, rewarding edges present in shorter tours.}"""
    num_nodes = distance_matrix.shape[0]
    q_table = np.zeros_like(distance_matrix, dtype=float)
    learning_rate = 0.1
    discount_factor = 0.9
    num_episodes = 500

    for _ in range(num_episodes):
        start_node = np.random.randint(num_nodes)
        current_node = start_node
        unvisited_nodes = set(range(num_nodes))
        unvisited_nodes.remove(current_node)
        tour = [current_node]
        total_distance = 0

        while unvisited_nodes:
            next_node = min(unvisited_nodes, key=lambda x: distance_matrix[current_node, x] + q_table[current_node, x])
            
            tour.append(next_node)
            total_distance += distance_matrix[current_node, next_node]
            unvisited_nodes.remove(next_node)
            
            current_node = next_node

        tour.append(start_node)
        total_distance += distance_matrix[current_node, start_node]
        
        reward = -total_distance

        for i in range(len(tour) - 1):
            node1 = tour[i]
            node2 = tour[i+1]
            
            q_table[node1, node2] = (1 - learning_rate) * q_table[node1, node2] + \
                                    learning_rate * (reward + discount_factor * np.max(q_table[node2, :]))
            q_table[node2, node1] = q_table[node1, node2]

    return heuristics_matrix
