import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs tours using a greedy approach combined with stochastic edge selection, updating edge importance scores based on tour quality and edge diversity.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 500
    alpha = 0.1  # Learning rate for heuristic updates
    beta = 0.2  # Diversity factor

    for _ in range(num_iterations):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited = set(range(n))
        unvisited.remove(current_node)
        tour = [current_node]
        tour_length = 0.0

        while unvisited:
            # Create a probability distribution based on distance and heuristic values
            probabilities = np.zeros(n)
            for neighbor in unvisited:
                probabilities[neighbor] = (1 / (distance_matrix[current_node, neighbor] + 1e-6)) * (1 + beta * heuristics_matrix[current_node, neighbor])

            # Normalize probabilities
            if np.sum(probabilities) > 0:
                probabilities = probabilities / np.sum(probabilities)
            else:
                # If all probabilities are zero, choose a random unvisited node
                probabilities = np.zeros(n)
                for neighbor in unvisited:
                  probabilities[neighbor] = 1
                probabilities = probabilities / np.sum(probabilities)


            # Stochastic Sampling
            next_node = np.random.choice(n, p=probabilities)
            
            if next_node not in unvisited:
                candidates = list(unvisited)
                next_node = candidates[0]
            
            tour_length += distance_matrix[current_node, next_node]
            tour.append(next_node)
            unvisited.remove(next_node)
            current_node = next_node

        tour_length += distance_matrix[current_node, start_node]
        tour.append(start_node)

        # Update heuristics based on tour quality
        if tour_length < np.mean(distance_matrix) * n * 1.5:
            for i in range(n):
                node1 = tour[i]
                node2 = tour[i+1]
                heuristics_matrix[node1, node2] += alpha * (1 - heuristics_matrix[node1, node2])
                heuristics_matrix[node2, node1] += alpha * (1 - heuristics_matrix[node2, node1])
        else:
             for i in range(n):
                node1 = tour[i]
                node2 = tour[i+1]
                heuristics_matrix[node1, node2] -= alpha * heuristics_matrix[node1, node2]
                heuristics_matrix[node2, node1] -= alpha * heuristics_matrix[node2, node1]


    return heuristics_matrix
