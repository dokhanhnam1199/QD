import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm creates a heuristic matrix by probabilistically building tours using a softmax-weighted nearest neighbor approach, and aggregating edge frequencies across multiple samples.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros((n, n))

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        tour = [start_node]
        unvisited = set(range(n))
        unvisited.remove(start_node)

        current_node = start_node
        while unvisited:
            distances = distance_matrix[current_node, :]
            
            # Calculate softmax probabilities for unvisited neighbors
            unvisited_distances = np.array([distances[node] for node in unvisited])
            probabilities = np.exp(-unvisited_distances) / np.sum(np.exp(-unvisited_distances))
            
            # Select next node probabilistically
            next_node = np.random.choice(list(unvisited), p=probabilities)

            tour.append(next_node)
            unvisited.remove(next_node)
            current_node = next_node

        tour.append(start_node)  # Return to starting node

        # Update heuristic matrix based on tour
        for i in range(n):
            heuristics_matrix[tour[i], tour[(i + 1) % n]] += 1
            heuristics_matrix[tour[(i + 1) % n], tour[i]] += 1

    return heuristics_matrix
