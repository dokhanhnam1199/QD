import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples TSP solutions by repeatedly selecting edges with probabilities biased by edge distance and a pheromone-like reinforcement, and uses the observed edge frequency as heuristics.}"""
    n = len(distance_matrix)
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000
    pheromone = np.ones((n, n))  # Initialize pheromone trails

    for _ in range(num_samples):
        current_node = np.random.randint(n)
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        path = [current_node]

        while unvisited_nodes:
            probabilities = np.zeros(n)
            for neighbor in unvisited_nodes:
                probabilities[neighbor] = (pheromone[current_node, neighbor] / distance_matrix[current_node, neighbor])

            probabilities = probabilities / np.sum(probabilities)

            next_node = np.random.choice(n, p=probabilities)

            if next_node not in unvisited_nodes:
                available_nodes = list(unvisited_nodes)
                if len(available_nodes) > 0:
                    next_node = available_nodes[np.argmin([distance_matrix[current_node, node] for node in available_nodes])]
                else:
                    next_node = current_node # Back to start
                
            path.append(next_node)
            unvisited_nodes.remove(next_node)
            heuristics_matrix[current_node, next_node] += 1
            heuristics_matrix[next_node, current_node] += 1

            current_node = next_node
        
        # Return to the starting node
        heuristics_matrix[current_node, path[0]] += 1
        heuristics_matrix[path[0], current_node] += 1
        path.append(path[0])

        # Pheromone update
        path_length = 0
        for i in range(len(path) - 1):
            path_length += distance_matrix[path[i], path[i+1]]
        
        for i in range(len(path) - 1):
            pheromone[path[i], path[i+1]] = (1 - 0.1) * pheromone[path[i], path[i+1]] + 0.1 * (1 / path_length)
            pheromone[path[i+1], path[i]] = pheromone[path[i], path[i+1]]


    return heuristics_matrix
