import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses simulated annealing to explore the solution space and assigns higher scores to edges that are consistently present in low-energy (short) paths during the annealing process.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 100
    initial_temperature = 100
    cooling_rate = 0.95

    for _ in range(num_iterations):
        temperature = initial_temperature
        path = np.random.permutation(n)
        current_cost = sum(distance_matrix[path[i], path[(i + 1) % n]] for i in range(n))

        for _ in range(100):
            i, j = np.random.choice(n, 2, replace=False)
            new_path = path.copy()
            new_path[i], new_path[j] = new_path[j], new_path[i]
            new_cost = sum(distance_matrix[new_path[i], new_path[(i + 1) % n]] for i in range(n))

            cost_difference = new_cost - current_cost
            if cost_difference < 0 or np.random.rand() < np.exp(-cost_difference / temperature):
                path = new_path
                current_cost = new_cost

            temperature *= cooling_rate

        for i in range(n):
            heuristics_matrix[path[i], path[(i + 1) % n]] += 1
            heuristics_matrix[path[(i + 1) % n], path[i]] += 1

    heuristics_matrix /= num_iterations * 100  # Normalize to frequency
    return heuristics_matrix
