import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm iteratively samples random tours, and updates a heuristic matrix based on the inverse of the tour length, giving higher scores to shorter tours.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 1000
    
    for _ in range(num_iterations):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour = np.append(tour, tour[0]) # Return to start

        # Calculate the tour length
        tour_length = 0.0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[i+1]]

        # Update the heuristics matrix based on inverse tour length
        if tour_length > 0:
            score = 1.0 / tour_length
            for i in range(n):
                heuristics_matrix[tour[i], tour[i+1]] += score/num_iterations
                heuristics_matrix[tour[i+1], tour[i]] += score/num_iterations

    return heuristics_matrix
