import numpy as np

def heuristics_v3(distance_matrix):
    """{This algorithm iteratively samples random tours, evaluates their lengths, and updates a heuristic matrix using an exponential score function based on tour length.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 1000
    
    for _ in range(num_iterations):
        # Generate a random tour
        tour = np.random.permutation(n)
        
        # Calculate the tour length
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[n-1], tour[0]]
        
        # Update the heuristics matrix using an exponential score
        score = np.exp(-tour_length / 100)  # Exponential score function
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += score
            heuristics_matrix[tour[i+1], tour[i]] += score  # Symmetric
        heuristics_matrix[tour[n-1], tour[0]] += score
        heuristics_matrix[tour[0], tour[n-1]] += score

    return heuristics_matrix
