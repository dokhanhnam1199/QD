import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm constructs a heuristic matrix by iteratively sampling solutions using a biased random walk approach with adaptive temperature scaling and then aggregating the edge frequencies across sampled solutions.}
    """
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        unvisited = set(range(n))
        unvisited.remove(start_node)
        current_node = start_node
        path = [start_node]
        temperature = 1.0  # Initial temperature
        decay_rate = 0.95  # Temperature decay rate

        while unvisited:
            distances = distance_matrix[current_node, :]
            
            # Calculate probabilities based on distance and temperature
            probabilities = np.zeros(n)
            for neighbor in unvisited:
                probabilities[neighbor] = np.exp(-distances[neighbor] / temperature)
            
            # Normalize probabilities to sum to 1
            if np.sum(probabilities) > 0: # if there are any unvisited nodes.
                probabilities = probabilities / np.sum(probabilities)
            else:
                # If all probabilities are zero, assign equal probability to unvisited nodes.
                for neighbor in unvisited:
                    probabilities[neighbor] = 1.0 / len(unvisited)

            # Choose the next node based on the probabilities
            next_node = np.random.choice(n, p=probabilities)
            if next_node not in unvisited: # Pick another node if we somehow selected one that is no longer unvisited. This can happen given float-point errors.
                possible_nodes = list(unvisited)
                next_node = possible_nodes[0]

            path.append(next_node)
            unvisited.remove(next_node)
            
            heuristics_matrix[current_node, next_node] += 1
            heuristics_matrix[next_node, current_node] += 1

            current_node = next_node
            temperature *= decay_rate  # Decrease the temperature
        
        heuristics_matrix[current_node, start_node] += 1
        heuristics_matrix[start_node, current_node] += 1


    heuristics_matrix = heuristics_matrix / num_samples
    return heuristics_matrix
