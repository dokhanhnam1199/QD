import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm constructs a heuristic matrix by iteratively sampling solutions using a greedy approach with stochastic acceptance of worse solutions based on a simulated annealing schedule, aggregating edge frequencies across samples.}
    """
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    temperature = 1.0
    cooling_rate = 0.99
    
    for _ in range(num_samples):
        start_node = np.random.randint(n)
        unvisited = set(range(n))
        unvisited.remove(start_node)
        current_node = start_node
        path = [start_node]
        
        while unvisited:
            distances = distance_matrix[current_node, :]
            
            # Find nearest neighbors from unvisited nodes
            nearest_neighbors = []
            for neighbor in unvisited:
                nearest_neighbors.append((neighbor, distances[neighbor]))
            nearest_neighbors.sort(key=lambda x: x[1])  # Sort by distance
            
            # Apply simulated annealing-like acceptance
            best_neighbor = nearest_neighbors[0][0]
            best_distance = nearest_neighbors[0][1]
            
            
            
            if len(nearest_neighbors) > 1:
                neighbor_idx = 1
                next_node = nearest_neighbors[neighbor_idx][0]
                next_distance = nearest_neighbors[neighbor_idx][1]
                
                #Accept worse solution with some probability
                delta = next_distance - best_distance
                acceptance_probability = np.exp(-delta / temperature)
                
                if np.random.rand() < acceptance_probability:
                    best_neighbor = next_node
            
            next_node = best_neighbor

            path.append(next_node)
            unvisited.remove(next_node)
            
            heuristics_matrix[current_node, next_node] += 1
            heuristics_matrix[next_node, current_node] += 1
            
            current_node = next_node
        
        heuristics_matrix[current_node, start_node] += 1
        heuristics_matrix[start_node, current_node] += 1
        
        temperature *= cooling_rate
        

    heuristics_matrix = heuristics_matrix / num_samples
    return heuristics_matrix
