import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples tours using a biased random walk, where the probability of choosing the next city is inversely proportional to its distance, and then uses the frequency of edges in the best tours to create a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    top_k = 100
    alpha = 1.0  # Controls the influence of distance on the probability

    edge_counts = np.zeros_like(distance_matrix, dtype=int)

    for _ in range(num_samples):
        current_city = np.random.randint(n)
        unvisited_cities = set(range(n))
        unvisited_cities.remove(current_city)
        permutation = [current_city]
        tour_length = 0

        while unvisited_cities:
            distances = np.array([distance_matrix[current_city, city] for city in unvisited_cities])
            probabilities = (1.0 / (distances + 1e-9)) ** alpha  # Add a small value to avoid division by zero
            probabilities /= np.sum(probabilities)
            
            next_city = np.random.choice(list(unvisited_cities), p=probabilities)
            
            tour_length += distance_matrix[current_city, next_city]
            permutation.append(next_city)
            unvisited_cities.remove(next_city)
            current_city = next_city

        tour_length += distance_matrix[permutation[-1], permutation[0]]

        if _ == 0:
            top_tours = [(permutation, tour_length)]
        else:
            if tour_length < max([t[1] for t in top_tours]):
                top_tours.append((permutation, tour_length))
                top_tours = sorted(top_tours, key=lambda x: x[1])
                if len(top_tours) > top_k:
                    top_tours = top_tours[:top_k]

    for permutation, _ in top_tours:
        for i in range(n - 1):
            u, v = permutation[i], permutation[i+1]
            edge_counts[u, v] += 1
            edge_counts[v, u] += 1
        u, v = permutation[-1], permutation[0]
        edge_counts[u, v] += 1
        edge_counts[v, u] += 1

    heuristics_matrix = edge_counts / np.max(edge_counts) if np.max(edge_counts) > 0 else edge_counts
    return heuristics_matrix
