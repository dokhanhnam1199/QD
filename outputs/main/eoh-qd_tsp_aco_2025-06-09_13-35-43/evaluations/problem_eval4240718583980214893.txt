import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm estimates edge inclusion probabilities for TSP by sampling near-optimal solutions using a nearest neighbor heuristic with restarts, accumulating edge frequencies, and weighting edges based on the tour length.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 100

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited = set(range(n))
        unvisited.remove(current_node)
        path = [current_node]
        path_length = 0

        while unvisited:
            nearest_neighbor = -1
            min_distance = np.inf
            for neighbor in unvisited:
                distance = distance_matrix[current_node, neighbor]
                if distance < min_distance:
                    min_distance = distance
                    nearest_neighbor = neighbor

            path.append(nearest_neighbor)
            path_length += min_distance
            unvisited.remove(nearest_neighbor)
            current_node = nearest_neighbor

        path.append(start_node)
        path_length += distance_matrix[current_node, start_node]

        # Accumulate edge frequencies for this sample, weighted by inverse tour length
        weight = 1.0 / path_length if path_length > 0 else 0.0
        for i in range(n):
            node1 = path[i]
            node2 = path[i+1]
            heuristics_matrix[node1, node2] += weight
            heuristics_matrix[node2, node1] += weight

    heuristics_matrix /= num_samples

    return heuristics_matrix
