import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by sampling paths using a biased random walk, where the bias is towards shorter distances, and aggregates the inverse of path lengths as edge weights across sampled solutions.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited = set(range(n))
        unvisited.remove(start_node)
        path = [start_node]
        path_length = 0

        while unvisited:
            probabilities = np.zeros(n)
            for neighbor in unvisited:
                probabilities[neighbor] = 1 / (distance_matrix[current_node, neighbor] + 1e-9)

            probabilities = probabilities / np.sum(probabilities)
            
            next_node = np.random.choice(n, p=probabilities)
            
            if next_node not in unvisited:
                
                valid_neighbors = list(unvisited)
                if len(valid_neighbors) > 0:
                    next_node = valid_neighbors[0]
                    distances = distance_matrix[current_node, valid_neighbors[0]]
                    for neighbor in valid_neighbors:
                        if distance_matrix[current_node, neighbor] < distances:
                            distances = distance_matrix[current_node, neighbor]
                            next_node = neighbor
                else:
                    
                    break
            
            path_length += distance_matrix[current_node, next_node]
            path.append(next_node)
            unvisited.remove(next_node)
            current_node = next_node

        path_length += distance_matrix[current_node, start_node]
        normalized_length = 1 / (path_length + 1e-9)

        for i in range(n - 1):
            heuristics_matrix[path[i], path[i+1]] += normalized_length
            heuristics_matrix[path[i+1], path[i]] += normalized_length
        heuristics_matrix[path[-1], path[0]] += normalized_length
        heuristics_matrix[path[0], path[-1]] += normalized_length

    return heuristics_matrix
