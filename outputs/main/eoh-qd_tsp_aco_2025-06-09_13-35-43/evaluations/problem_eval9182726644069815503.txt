import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples tours, applies a local search (2-opt) to improve them, and averages the improved tour qualities to construct a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    
    def two_opt(tour):
        best_tour = tour.copy()
        best_cost = tour_cost(tour)
        for i in range(1, n - 1):
            for k in range(i + 1, n):
                new_tour = tour.copy()
                new_tour[i:k+1] = tour[i:k+1][::-1]
                new_cost = tour_cost(new_tour)
                if new_cost < best_cost:
                    best_cost = new_cost
                    best_tour = new_tour.copy()
        return best_tour

    def tour_cost(tour):
        cost = 0
        for i in range(n):
            cost += distance_matrix[tour[i], tour[(i + 1) % n]]
        return cost
    
    quality_matrix = np.zeros((n, n))

    for _ in range(num_samples):
        tour = np.random.permutation(n)
        improved_tour = two_opt(tour)
        tour_length = tour_cost(improved_tour)
        
        for i in range(n):
            u = improved_tour[i]
            v = improved_tour[(i + 1) % n]
            quality_matrix[u, v] += 1.0 / tour_length
            quality_matrix[v, u] += 1.0 / tour_length

    heuristics_matrix = quality_matrix
    return heuristics_matrix
