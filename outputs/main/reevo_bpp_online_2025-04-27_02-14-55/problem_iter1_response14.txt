```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Immediate fit gets highest priority
    immediate_fit = (bins_remain_cap == item)
    priorities[immediate_fit] = 1000.0
    
    # First Fit Decreasing heuristic idea
    almost_fit = (bins_remain_cap >= item) & (bins_remain_cap < (1.1 * item)) # within 10% of the item
    priorities[almost_fit] = 500.0
    
    # Give some priority to bins that can accommodate the item
    can_accommodate = (bins_remain_cap >= item)
    priorities[can_accommodate] += (bins_remain_cap[can_accommodate] - item) / np.sum(bins_remain_cap) * 100  # Normalize remaining capacity difference
    
    # Penalize bins that are nearly full, but can't fit
    near_full = (bins_remain_cap < item) & (bins_remain_cap > 0.9 * item)
    priorities[near_full] = -100.0 #discourage nearly full.

    # Prioritize bins that are not empty.
    non_empty = bins_remain_cap < np.max(bins_remain_cap)
    priorities[non_empty] += 1 # a small boost for bins that already has content.

    # For bins that can fit the item, calculate the wasted space and use the inverse as priority.  Encourage better packing.
    fit_waste = bins_remain_cap[can_accommodate] - item
    if len(fit_waste) > 0:
      waste_priority = 1.0 / (1.0 + fit_waste)  # add 1 to prevent zero division
      priorities[can_accommodate] += waste_priority * 50 #scale the priority.

    return priorities
```
