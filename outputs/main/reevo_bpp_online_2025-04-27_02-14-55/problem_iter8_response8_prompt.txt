{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Highest priority: Exact fit\n    exact_fit = (bins_remain_cap == item)\n    priorities[exact_fit] = 1000.0\n\n    # High priority: Almost fit (small remaining space)\n    almost_fit = (bins_remain_cap >= item) & (bins_remain_cap <= (1.1 * item))  # tighter almost fit\n    priorities[almost_fit] = 750.0\n\n    # Feasibility check and heavy penalty for infeasible bins, scale by item size\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -1e9 * item  # Very strong penalty, scaled\n\n    # Medium priority: Fits well, minimize wasted space using dynamic fill ratio\n    can_accommodate = (bins_remain_cap >= item)\n    if np.any(can_accommodate):\n        capacity_ratio = item / bins_remain_cap[can_accommodate]\n\n        # Dynamic fill ratio preference, closer to 1 is better\n        gaussian_reward = np.exp(-0.5 * ((capacity_ratio - 1.0) / 0.15) ** 2)  # Adjust std for sensitivity\n        priorities[can_accommodate] += gaussian_reward * 500.0\n\n        # Adjust priority based on item size\n        item_size_ratio = item / np.max(bins_remain_cap) # relative size of the item.\n        priorities[can_accommodate] += item_size_ratio * 100\n\n    # Reward matching similar items (assuming a \"similarity\" can be inferred somehow). Using remaining cap as proxy.\n    if np.any(can_accommodate):\n      cap_diff = np.abs(bins_remain_cap[can_accommodate] - item)\n      similarity_reward = np.exp(-0.5 * (cap_diff / 0.2) ** 2) * 150 # Higher when remaining cap is close to item size\n      priorities[can_accommodate] += similarity_reward\n\n    # Small boost for using non-empty bins (encourage filling existing bins)\n    non_empty = bins_remain_cap < np.max(bins_remain_cap)\n    priorities[non_empty] += 50.0\n\n    # Discourage bins with significantly more capacity than the item size. Penalize based on item size ratio\n    large_capacity = (bins_remain_cap >= item) & (bins_remain_cap > 1.5 * item)\n    priorities[large_capacity] -= 50 * item_size_ratio # Reduced penalty, scaled\n\n    # Heavier penalty for fragmentation: if the remaining capacity is too small to be useful. Scale by item size.\n    fragmented = (bins_remain_cap >= item) & (bins_remain_cap - item < 0.1) # small remaining cap after adding item\n    priorities[fragmented] -= 200 * item\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Infeasibility check (highest priority)\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -1e9\n\n    # Exact Fit (highest positive priority)\n    exact_fit = bins_remain_cap == item\n    priorities[exact_fit] = 1000.0\n\n    # Almost Fit (high priority) - minimize wasted space\n    almost_fit = (bins_remain_cap >= item) & (bins_remain_cap <= 1.1 * item)\n    priorities[almost_fit] = 750.0\n\n    # Reward bins that can accommodate the item\n    can_accommodate = bins_remain_cap >= item\n    if np.any(can_accommodate):\n        # Capacity Ratio Reward (Gaussian centered around 1, penalize large waste)\n        capacity_ratio = item / bins_remain_cap[can_accommodate]\n        gaussian_reward = np.exp(-0.5 * ((capacity_ratio - 1.0) / 0.2) ** 2)\n        priorities[can_accommodate] += gaussian_reward * 500\n\n        # Item Size Consideration (prefer placing smaller items in fuller bins)\n        item_size_ratio = item / np.max(bins_remain_cap)\n        priorities[can_accommodate] += item_size_ratio * 100\n\n        # Potential Items Bonus (consider future item placements)\n        remaining_capacity = bins_remain_cap[can_accommodate] - item\n        potential_items = np.floor(remaining_capacity / item)\n        priorities[can_accommodate] += potential_items * 50\n\n    # Encourage filling existing bins (small boost)\n    non_empty = bins_remain_cap < np.max(bins_remain_cap)\n    priorities[non_empty] += 25\n\n    # Discourage bins with much larger capacity\n    large_capacity = (bins_remain_cap >= item) & (bins_remain_cap > 2 * item)\n    priorities[large_capacity] -= 25\n\n    return priorities\n\n[Reflection]\nPrioritize feasibility, exact/almost fits. Consider potential future placements and reduce fragmentation. Scale rewards appropriately.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}