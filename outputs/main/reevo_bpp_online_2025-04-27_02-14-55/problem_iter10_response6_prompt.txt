{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n\n    if np.any(can_fit):\n        remaining_after_fit = bins_remain_cap[can_fit] - item\n\n        # Primary Priority: Fill Ratio (relative to item size)\n        fill_ratio = item / bins_remain_cap[can_fit]\n        priorities[can_fit] = fill_ratio\n\n        # Reward bins that become very full after placement\n        almost_full = remaining_after_fit < 0.05 * item\n        priorities[can_fit][almost_full] += 2.0\n\n        # Penalty for fragmentation, scaled relative to item size\n        fragmentation_penalty = remaining_after_fit / item\n        priorities[can_fit] -= 0.75 * fragmentation_penalty # Increased penalty weight\n\n        # Encourage use of partially filled bins\n        already_used = bins_remain_cap < np.max(bins_remain_cap)\n        priorities[can_fit & already_used] += 0.3 # Slightly increased reward\n\n        # Discourage very large remaining capacity, relative to item\n        large_capacity = remaining_after_fit > item\n        priorities[can_fit][large_capacity] -= 0.25 # Small discouragement\n    else:\n        # Strong penalty if no bin can fit\n        priorities = np.full_like(bins_remain_cap, -1e9)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Highest priority: Exact fit\n    exact_fit = (bins_remain_cap == item)\n    priorities[exact_fit] = 1000.0\n\n    # High priority: Near fit (very small remaining space)\n    near_fit = (bins_remain_cap >= item) & (bins_remain_cap <= (1.05 * item))\n    priorities[near_fit] = 750.0\n\n    # Medium priority: Fits well, minimize wasted space, but avoid tiny remaining space\n    can_accommodate = (bins_remain_cap >= item) & (bins_remain_cap > (1.05 * item))\n    if np.any(can_accommodate):\n        wasted_space = bins_remain_cap[can_accommodate] - item\n        # Prioritize bins where wasted space is minimal. Invert and scale.\n        space_efficiency = 1.0 / (1.0 + wasted_space)\n        priorities[can_accommodate] += space_efficiency * 500.0\n\n    # Penalize bins that are nearly full but can't fit the item\n    nearly_full_cant_fit = (bins_remain_cap < item) & (bins_remain_cap > 0.9 * item)\n    priorities[nearly_full_cant_fit] = -500.0\n\n    # Discourage bins with significantly more capacity than the item size, especially relative to item size.\n    large_capacity = (bins_remain_cap >= item) & (bins_remain_cap > 2 * item)\n    if np.any(large_capacity):\n        priorities[large_capacity] -= 200.0 * (item / bins_remain_cap[large_capacity])\n\n    # Small boost for using non-empty bins\n    non_empty = bins_remain_cap < np.max(bins_remain_cap)\n    priorities[non_empty] += 50.0\n\n    # Heavily penalize bins that will become almost full after the item is placed.\n    almost_full = (bins_remain_cap >= item) & ((bins_remain_cap - item) <= (0.1 * np.max(bins_remain_cap)))\n    priorities[almost_full] -= 300.0\n\n    # Slightly prioritize bins that are already somewhat full\n    partially_full = (bins_remain_cap < np.max(bins_remain_cap)) & (bins_remain_cap >= (0.5 * np.max(bins_remain_cap))) & (bins_remain_cap >= item)\n    if np.any(partially_full):\n        fill_level = 1 - (bins_remain_cap[partially_full] / np.max(bins_remain_cap))\n        priorities[partially_full] += fill_level * 100.0\n\n    # Further penalize very small remaining spaces after placing the item\n    very_small_remaining = (bins_remain_cap >= item) & ((bins_remain_cap - item) > 0) & ((bins_remain_cap - item) <= (0.2 * item))\n    priorities[very_small_remaining] -= 150.0\n\n    return priorities\n\n[Reflection]\nPrioritize exact/near fits. Discourage fragmentation and large capacity. Use explicit, larger priority scores.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}