```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasibility check (highest priority)
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -1e9

    # Exact Fit (highest positive priority)
    exact_fit = bins_remain_cap == item
    priorities[exact_fit] = 1000.0

    # Almost Fit (high priority) - minimize wasted space
    almost_fit = (bins_remain_cap >= item) & (bins_remain_cap <= 1.1 * item)
    priorities[almost_fit] = 750.0

    # Reward bins that can accommodate the item
    can_accommodate = bins_remain_cap >= item
    if np.any(can_accommodate):
        # Capacity Ratio Reward (Gaussian centered around 1, penalize large waste)
        capacity_ratio = item / bins_remain_cap[can_accommodate]
        gaussian_reward = np.exp(-0.5 * ((capacity_ratio - 1.0) / 0.2) ** 2)
        priorities[can_accommodate] += gaussian_reward * 500

        # Item Size Consideration (prefer placing smaller items in fuller bins)
        item_size_ratio = item / np.max(bins_remain_cap)
        priorities[can_accommodate] += item_size_ratio * 100

        # Potential Items Bonus (consider future item placements)
        remaining_capacity = bins_remain_cap[can_accommodate] - item
        potential_items = np.floor(remaining_capacity / item)
        priorities[can_accommodate] += potential_items * 50

    # Encourage filling existing bins (small boost)
    non_empty = bins_remain_cap < np.max(bins_remain_cap)
    priorities[non_empty] += 25

    # Discourage bins with much larger capacity
    large_capacity = (bins_remain_cap >= item) & (bins_remain_cap > 2 * item)
    priorities[large_capacity] -= 25

    return priorities
```
