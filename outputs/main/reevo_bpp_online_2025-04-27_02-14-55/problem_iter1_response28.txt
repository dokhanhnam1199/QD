```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Heuristic 1: Prefer bins that can accommodate the item
    eligible_bins = bins_remain_cap >= item
    priorities[eligible_bins] += 1

    # Heuristic 2: Prioritize bins with smallest remaining capacity among eligible bins.
    #                This implements a "best-fit" strategy. This aims to leave less free space in the bins.
    #                This can be achieved by inverting the remaining capacity if eligible
    priorities[eligible_bins] += (bins_remain_cap[eligible_bins].max() - bins_remain_cap[eligible_bins]) / (bins_remain_cap[eligible_bins].max() - bins_remain_cap[eligible_bins].min() + 1e-9)  # Normalize for stability

    # Heuristic 3: Add a small bonus if the item fills the bin perfectly, this can help with problem ending with empty bins
    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6  # Using tolerance to avoid floating-point issues.
    priorities[perfect_fit] += 2

    # Heuristic 4: Give large penalty to bins that cannot accomodate item.
    ineligible_bins = ~eligible_bins
    priorities[ineligible_bins] = -np.inf  # Never choose these bins

    return priorities
```
