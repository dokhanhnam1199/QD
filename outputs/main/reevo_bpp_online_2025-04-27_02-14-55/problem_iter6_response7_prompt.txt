{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_count = bins_remain_cap.size\n\n    # 1. Infeasibility penalty: Huge negative value if bin cannot accommodate item.\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -1e9\n\n    # 2. Exact Fit: Extremely high priority.\n    exact_fit = (bins_remain_cap == item)\n    priorities[exact_fit] = 1e9\n\n    # 3. Near Fit: High priority, with a score based on closeness.\n    near_fit = (bins_remain_cap >= item) & (bins_remain_cap <= 1.05 * item) #tolerate up to 5% waste\n    priorities[near_fit] = 1e8 * (1 - (bins_remain_cap[near_fit] - item) / item)  # Higher if closer to exact\n\n    # 4. Gaussian Reward for utilization: Reward bins with capacity close to item size\n    can_accommodate = bins_remain_cap >= item\n    if np.any(can_accommodate):\n        utilization = item / bins_remain_cap[can_accommodate]\n        # Gaussian centered around ideal utilization (close to 1), scaled by item size.\n        gaussian_reward = 1e7 * np.exp(-0.5 * ((utilization - 0.95) / 0.1) ** 2) * item #aiming 95% capacity\n        priorities[can_accommodate] += gaussian_reward\n\n\n    # 5. Penalty for large empty space if the item is small relative to the bin size\n    small_item_large_bin = (bins_remain_cap >= item) & (item < 0.5 * np.max(bins_remain_cap))\n    if np.any(small_item_large_bin):\n      empty_space_ratio = (bins_remain_cap[small_item_large_bin] - item) / bins_remain_cap[small_item_large_bin]\n      priorities[small_item_large_bin] -= 1e6 * empty_space_ratio  # Penalize more if more space wasted\n\n    #6. Prioritize using existing bins: small additive constant.\n    non_empty = bins_remain_cap < np.max(bins_remain_cap)\n    priorities[non_empty] += 1000\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First-Fit-Decreasing inspired heuristic: Prefer bins that can accommodate the item\n    # and have the least remaining capacity AFTER placing the item.\n\n    can_fit = bins_remain_cap >= item\n\n    if np.any(can_fit):\n        remaining_after_fit = bins_remain_cap[can_fit] - item\n\n        # Prioritize tight fits: High fill ratio is good. Use item size as the denominator to avoid division by potentially small bin capacities.\n        fill_ratio = item / (bins_remain_cap[can_fit] + 1e-6) # adding a small epsilon to avoid division by zero\n        priorities[can_fit] = fill_ratio\n\n        # Bonus for bins that are nearly full after placing the item. Adaptive threshold.\n        nearly_full = remaining_after_fit < 0.1 * item  # Relative to the item size\n        priorities[can_fit][nearly_full] += 2.0  # Significant bonus for nearly full bins.\n\n        # Small penalty for fragmentation (remaining capacity)\n        priorities[can_fit] -= 0.1 * remaining_after_fit\n\n    else:\n        # If no bins can fit, assign a very low priority so a new bin gets created, ideally\n        priorities = np.full_like(bins_remain_cap, -1e9)  # Very low priority\n\n    return priorities\n\n[Reflection]\nPrioritize tight fits, adaptive thresholds, and fill ratios. Penalize fragmentation.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}