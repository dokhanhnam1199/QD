```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Prioritize bins that can fit the item
    fit_mask = bins_remain_cap >= item
    
    if np.any(fit_mask):
        remaining_after_fit = bins_remain_cap[fit_mask] - item
        
        # Normalize remaining capacity to bin size (assuming all bins have the same max capacity)
        normalized_remaining = remaining_after_fit / np.max(bins_remain_cap)
        
        # Prioritize smaller remainders after fitting
        priorities[fit_mask] = 1 - normalized_remaining
        
        # Bonus for fitting (important to ensure fitting bins are always preferred)
        priorities[fit_mask] += 1.0
        
        # Near-perfect fit bonus (encouraging filling the bin close to full)
        near_perfect_fit = (bins_remain_cap[fit_mask] < 2 * item) & (item > 0)
        priorities[fit_mask][near_perfect_fit] += 0.5 * (1 - normalized_remaining[near_perfect_fit])  #Scale the bonus
        
        # Perfect fit bonus: substantially rewarded
        perfect_fit = (bins_remain_cap[fit_mask] == item)
        priorities[fit_mask][perfect_fit] += 2.0
    
    else:
        # If no bin fits, strongly penalize putting it in a bin, scaled to bin capacity
        #Minimizing the waste in each bin.
        priorities = -1 - (item - bins_remain_cap) / np.max(bins_remain_cap) 
        
    return priorities
```
