```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        remaining_after_fit = bins_remain_cap[can_fit] - item

        # Primary Priority: Fill Ratio (relative to item size), amplified.
        fill_ratio = item / bins_remain_cap[can_fit]
        priorities[can_fit] = fill_ratio * 2.0  # Increased impact of fill ratio

        # Reward bins that become very full after placement, significantly more.
        almost_full = remaining_after_fit < 0.1 * item  # Slightly relaxed threshold
        priorities[can_fit][almost_full] += 3.0  # Increased reward

        # Penalty for fragmentation, scaled relative to item size, stronger penalty.
        fragmentation_penalty = remaining_after_fit / item
        priorities[can_fit] -= 1.0 * fragmentation_penalty  # Increased penalty weight

        # Encourage use of partially filled bins, moderately increased.
        already_used = bins_remain_cap < np.max(bins_remain_cap)
        priorities[can_fit & already_used] += 0.5  # Increased reward for using existing bins

        # Discourage very large remaining capacity, relative to item, moderate discouragement.
        large_capacity = remaining_after_fit > 1.5 * item  # Reduced the threshold somewhat.
        priorities[can_fit][large_capacity] -= 0.3  # Slightly stronger discouragement

        # Slight bonus for bins that are close to the item size.
        close_to_item = np.abs(bins_remain_cap[can_fit] - item) < 0.2 * item
        priorities[can_fit][close_to_item] += 0.1
    else:
        # Strong penalty if no bin can fit
        priorities = np.full_like(bins_remain_cap, -1e9)

    return priorities
```
