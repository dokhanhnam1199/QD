```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Feasibility check: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities # No feasible bins, all priorities remain zero

    # Priority 1: Bins where the item fills a significant portion
    fill_ratio = item / bins_remain_cap
    priorities[feasible_bins] = fill_ratio[feasible_bins]

    # Priority 2: Remaining capacity after placing item (favor smaller remainders)
    remaining_capacity = bins_remain_cap - item
    priorities[feasible_bins] += 1.0 / (remaining_capacity[feasible_bins] + 1e-6)  # Adding small value to avoid division by zero

    # Priority 3: Avoid bins close to full after placement (fragmantation reduction). Reduce Priority if remaining capcity is too small
    too_small = (remaining_capacity < (0.1 * np.max(bins_remain_cap))) & feasible_bins
    priorities[too_small] *= 0.5  # Reduce priority

    # Normalize priorities to ensure no single factor dominates
    priorities = priorities / np.max(priorities)

    return priorities
```
