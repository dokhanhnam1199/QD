{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\nPrioritize tight fits using capacity ratios and reward near-full bins with a Gaussian-like distribution. Strongly penalize infeasible placements and avoid opening new bins unless necessary. Mask for efficiency.\n\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Prioritize bins where the item fits\n    fit_indices = bins_remain_cap >= item\n    priorities[fit_indices] = 1\n\n    # For bins where the item doesn't fit, assign a negative priority\n    # related to how close the item is to fitting (avoid these bins)\n    no_fit_indices = ~fit_indices\n    priorities[no_fit_indices] = - (item - bins_remain_cap[no_fit_indices])  # Negative distance to fit\n    priorities[no_fit_indices] = np.clip(priorities[no_fit_indices], -item*2 , 0)\n\n\n    # Among bins that fit, prioritize bins that would result in a higher utilization\n    # without exceeding capacity\n    utilization = item / bins_remain_cap[fit_indices]\n\n    # Give preference to bins that have lowest remaining capacity, but can fit item.\n    priorities[fit_indices] += (1 - bins_remain_cap[fit_indices] / np.max(bins_remain_cap)) \n\n\n    return priorities\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}