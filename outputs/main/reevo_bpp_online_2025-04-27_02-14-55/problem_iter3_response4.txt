```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap) #Assumes all bins have same capacity
    
    # Infeasible placements get strongly penalized
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Compute capacity ratios for feasible bins
    feasible_mask = ~infeasible_mask
    capacity_ratios = np.zeros_like(bins_remain_cap, dtype=float)
    capacity_ratios[feasible_mask] = item / bin_capacity # item size / bin capacity

    # Reward near-full bins with Gaussian-like distribution.
    remaining_ratio = bins_remain_cap[feasible_mask] / bin_capacity
    mu = item / bin_capacity # Mean of gaussian will be item/bin capacity
    sigma = 0.1  # Standard deviation of the Gaussian distribution
    gaussian_priority = np.exp(-0.5 * ((remaining_ratio - (1 - mu)) / sigma)**2)
    priorities[feasible_mask] += gaussian_priority

    # Prioritize tight fits using capacity ratios
    priorities[feasible_mask] += (1- bins_remain_cap[feasible_mask]/bin_capacity) # use relative remaning

    return priorities
```
