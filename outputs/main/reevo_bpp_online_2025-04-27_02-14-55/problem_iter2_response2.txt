```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Highest priority: Exact fit
    immediate_fit = (bins_remain_cap == item)
    priorities[immediate_fit] = 1000.0

    # High priority: Almost fit (small remaining space)
    almost_fit = (bins_remain_cap >= item) & (bins_remain_cap <= (1.1 * item))
    priorities[almost_fit] = 750.0

    # Medium priority: Fits well, minimize wasted space
    can_accommodate = (bins_remain_cap >= item)
    if np.any(can_accommodate):  # Avoid division by zero if no bin can accommodate
        wasted_space = bins_remain_cap[can_accommodate] - item
        # Prioritize bins where wasted space is minimal.  Invert and scale.
        space_efficiency = 1.0 / (1.0 + wasted_space)  # Avoid division by zero
        priorities[can_accommodate] += space_efficiency * 500.0  # Scale and add

    # Penalize bins that are nearly full but can't fit the item
    near_full = (bins_remain_cap < item) & (bins_remain_cap > 0.9 * item)
    priorities[near_full] = -500.0

    # Small boost for using non-empty bins (encourage filling existing bins)
    non_empty = bins_remain_cap < np.max(bins_remain_cap)
    priorities[non_empty] += 50.0
    
    # Discourage bins with significantly more capacity than the item size.
    large_capacity = (bins_remain_cap >= item) & (bins_remain_cap > 2 * item)
    priorities[large_capacity] -= 100

    return priorities
```
