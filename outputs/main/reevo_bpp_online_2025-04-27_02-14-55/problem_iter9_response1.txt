```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Highest priority: Exact fit
    exact_fit = (bins_remain_cap == item)
    priorities[exact_fit] = 1000.0

    # High priority: Near perfect fit, scaled by item size
    near_perfect_fit_threshold = 0.05  # Increased threshold for "near perfect"
    near_perfect_fit = (bins_remain_cap >= item) & (bins_remain_cap <= item * (1 + near_perfect_fit_threshold))
    priorities[near_perfect_fit] = 900.0 - (bins_remain_cap[near_perfect_fit] - item) / item * 300  # Increased scaling factor

    # Feasibility check and HUGE penalty for infeasible bins
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -1e10

    # Dynamic Fill Ratio Reward: Gaussian around optimal fill, scaled heavily
    can_accommodate = (bins_remain_cap >= item)
    if np.any(can_accommodate):
        fill_ratio = item / bins_remain_cap[can_accommodate]
        gaussian_std = 0.1  # Adjusted std for broader curve
        gaussian_reward = np.exp(-0.5 * ((fill_ratio - 1.0) / gaussian_std) ** 2)
        priorities[can_accommodate] += gaussian_reward * 700.0

    # Fragmentation Penalty: Penalize creating small remaining spaces, scaled by item size
    small_space_threshold = 0.2  # Increased small space threshold
    fragmented_bins = (bins_remain_cap >= item) & ((bins_remain_cap - item) <= small_space_threshold * np.max(bins_remain_cap))
    if np.any(fragmented_bins):
        waste = bins_remain_cap[fragmented_bins] - item
        penalty = (waste / (small_space_threshold * np.max(bins_remain_cap))) * 500 * (item + 0.5)  # Increased penalty scaling, scaled by item
        priorities[fragmented_bins] -= penalty

    # Encourage using existing bins, more heavily
    non_empty = bins_remain_cap < np.max(bins_remain_cap)
    priorities[non_empty] += 85.0

    # Similarity Bonus: Reward bins with similar-sized items.
    similar_size = np.abs(bins_remain_cap - item) <= 0.3 * item  # Increased tolerance
    priorities[similar_size & can_accommodate] += 70.0

    # Discourage bins with way more capacity than the item size, even more aggressive penalty
    large_capacity = (bins_remain_cap >= item) & (bins_remain_cap > 2.5 * item)  # Further increase factor
    priorities[large_capacity] -= 90.0  # Increased penalty

    return priorities
```
