```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Highest priority: Exact fit
    exact_fit = (bins_remain_cap == item)
    priorities[exact_fit] = 1000.0

    # High priority: Almost fit (small remaining space)
    almost_fit = (bins_remain_cap >= item) & (bins_remain_cap <= (1.1 * item))  # tighter almost fit
    priorities[almost_fit] = 750.0

    # Feasibility check and heavy penalty for infeasible bins, scale by item size
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -1e9 * item  # Very strong penalty, scaled

    # Medium priority: Fits well, minimize wasted space using dynamic fill ratio
    can_accommodate = (bins_remain_cap >= item)
    if np.any(can_accommodate):
        capacity_ratio = item / bins_remain_cap[can_accommodate]

        # Dynamic fill ratio preference, closer to 1 is better
        gaussian_reward = np.exp(-0.5 * ((capacity_ratio - 1.0) / 0.15) ** 2)  # Adjust std for sensitivity
        priorities[can_accommodate] += gaussian_reward * 500.0

        # Adjust priority based on item size
        item_size_ratio = item / np.max(bins_remain_cap) # relative size of the item.
        priorities[can_accommodate] += item_size_ratio * 100

    # Reward matching similar items (assuming a "similarity" can be inferred somehow). Using remaining cap as proxy.
    if np.any(can_accommodate):
      cap_diff = np.abs(bins_remain_cap[can_accommodate] - item)
      similarity_reward = np.exp(-0.5 * (cap_diff / 0.2) ** 2) * 150 # Higher when remaining cap is close to item size
      priorities[can_accommodate] += similarity_reward

    # Small boost for using non-empty bins (encourage filling existing bins)
    non_empty = bins_remain_cap < np.max(bins_remain_cap)
    priorities[non_empty] += 50.0

    # Discourage bins with significantly more capacity than the item size. Penalize based on item size ratio
    large_capacity = (bins_remain_cap >= item) & (bins_remain_cap > 1.5 * item)
    priorities[large_capacity] -= 50 * item_size_ratio # Reduced penalty, scaled

    # Heavier penalty for fragmentation: if the remaining capacity is too small to be useful. Scale by item size.
    fragmented = (bins_remain_cap >= item) & (bins_remain_cap - item < 0.1) # small remaining cap after adding item
    priorities[fragmented] -= 200 * item

    return priorities
```
