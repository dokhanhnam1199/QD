```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Infeasibility: Huge negative penalty if bin cannot accommodate item.
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -1e10

    # 2. Exact Fit: Extremely high priority.
    exact_fit = (bins_remain_cap == item)
    priorities[exact_fit] = 1e6

    # 3. Near Fit: High priority, scaled based on waste relative to item size.
    near_fit_threshold = 0.1  # Allowable waste as a fraction of item size
    near_fit = (bins_remain_cap >= item) & (bins_remain_cap <= item * (1 + near_fit_threshold))
    if np.any(near_fit):
        waste = bins_remain_cap[near_fit] - item
        # Scale the priority inversely with the waste percentage. Higher waste, lower priority.
        priority_scale = 1 - (waste / item)  # Ranges from 0 (high waste) to 1 (no waste)
        priorities[near_fit] = 800000 * priority_scale  # Base priority scaled down

    # 4. Encourage using non-empty bins, but less aggressively than exact/near fits.
    non_empty = bins_remain_cap < np.max(bins_remain_cap)
    priorities[non_empty] += 1000 # Increased reward

    # 5. Dynamic Fragmentation Penalty: Penalize creating small remaining spaces, scaled by item size.
    small_space_threshold = 0.2  # Threshold as fraction of item size
    fragmented_bins = (bins_remain_cap >= item) & ((bins_remain_cap - item) <= small_space_threshold * item)
    if np.any(fragmented_bins):
        waste = bins_remain_cap[fragmented_bins] - item
        # Scale penalty by how close the remaining space is to the threshold relative to item size.
        penalty_scale = waste / (small_space_threshold * item)
        priorities[fragmented_bins] -= 50000 * penalty_scale  # Penalty scaled up

    # 6. Discourage bins with significantly more capacity than the item, relative to item size.
    large_capacity_factor = 2.0  # Bin must be at least this many times larger than the item
    large_capacity = (bins_remain_cap >= item) & (bins_remain_cap > large_capacity_factor * item)
    priorities[large_capacity] -= 10000

    # 7. Reward bins that are nearly full after adding the item
    nearly_full_threshold = 0.2  # Remaining capacity should be less than this fraction of item
    nearly_full_after = (bins_remain_cap >= item) & ((bins_remain_cap - item) < nearly_full_threshold * item)
    priorities[nearly_full_after] += 20000

    return priorities
```
