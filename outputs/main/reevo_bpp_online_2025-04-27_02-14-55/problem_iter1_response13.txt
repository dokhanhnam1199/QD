```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit-Decreasing inspired: prioritize bins with enough capacity
    # higher than bins that cannot fit the item.

    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1.0

    # Try to fill bins as much as possible without overflowing.
    # Bins with capacities close to the item size receive higher priority.
    # This encourages using partially filled bins before opening new ones.
    remaining_space = bins_remain_cap - item
    fit_space_available = remaining_space[can_fit]

    priorities[can_fit] += np.exp(-np.abs(fit_space_available) / item)

    # Avoid bins that are almost full after adding the item.
    too_full = (bins_remain_cap >= item) & (remaining_space <= 0.1 * item) # Avoid very tight fits
    priorities[too_full] -= 0.5  # Slightly de-prioritize

    return priorities
```
