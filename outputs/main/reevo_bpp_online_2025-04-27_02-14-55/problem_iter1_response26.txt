```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Reward bins where item fits
            fill_ratio = item / cap
            remaining_ratio = (cap - item) / cap
            priorities[i] = 100 * fill_ratio + 50 * (1 - remaining_ratio)  # Higher fill, lower remaining

            # Penalize nearly full bins to avoid tiny slivers.
            if (cap - item) < 0.1: # if remaining capacity is less than 0.1 of bin size
               priorities[i] -= 20
        else:
            # Large negative priority if item doesn't fit
            priorities[i] = -1000
    return priorities
```
