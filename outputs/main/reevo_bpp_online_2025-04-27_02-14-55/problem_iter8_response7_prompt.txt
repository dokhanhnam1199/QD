{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Highest priority: Exact fit\n    exact_fit = (bins_remain_cap == item)\n    priorities[exact_fit] = 1000.0\n\n    # High priority: Almost fit (small remaining space)\n    almost_fit = (bins_remain_cap >= item) & (bins_remain_cap <= (1.1 * item))  # looser almost fit\n    priorities[almost_fit] = 750.0\n\n    # Feasibility check and heavy penalty for infeasible bins, scaled by item size\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -1e9 * (item + 0.1)  # Very strong penalty, scaled by item size\n\n    # Medium priority: Fits well, minimize wasted space using dynamic fill ratio\n    can_accommodate = (bins_remain_cap >= item)\n    if np.any(can_accommodate):\n        fill_ratio = item / bins_remain_cap[can_accommodate]\n        ideal_fill = 0.95 # tuneable param\n        gaussian_reward = np.exp(-0.5 * ((fill_ratio - ideal_fill) / 0.2) ** 2)\n        priorities[can_accommodate] += gaussian_reward * 500.0\n\n        # Adjust priority based on item size\n        item_size_ratio = item / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0\n        priorities[can_accommodate] += item_size_ratio * 100\n\n    # Small boost for using non-empty bins (encourage filling existing bins)\n    non_empty = bins_remain_cap < np.max(bins_remain_cap)\n    priorities[non_empty] += 50.0\n\n    # Discourage fragmentation (small remaining space after placing item), scaled by item size.\n    fragmentation = (bins_remain_cap >= item) & (bins_remain_cap - item < 0.1)\n    priorities[fragmentation] -= 100 * item\n\n    # Bonus for bins that can accommodate multiple items of similar size after fitting\n    if np.any(can_accommodate):\n        remaining_capacity_after_fit = bins_remain_cap[can_accommodate] - item\n        potential_items = np.floor(remaining_capacity_after_fit / item)\n        priorities[can_accommodate] += potential_items * 25\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Highest priority: Exact fit\n    exact_fit = (bins_remain_cap == item)\n    priorities[exact_fit] = 1000.0\n\n    # High priority: Near fit (very small remaining space)\n    near_fit = (bins_remain_cap >= item) & (bins_remain_cap <= (1.05 * item))\n    priorities[near_fit] = 750.0\n\n    # Medium priority: Fits well, minimize wasted space, but avoid tiny remaining space\n    can_accommodate = (bins_remain_cap >= item) & (bins_remain_cap > (1.05 * item))\n    if np.any(can_accommodate):\n        wasted_space = bins_remain_cap[can_accommodate] - item\n        # Prioritize bins where wasted space is minimal. Invert and scale.\n        space_efficiency = 1.0 / (1.0 + wasted_space)\n        priorities[can_accommodate] += space_efficiency * 500.0\n\n    # Penalize bins that are nearly full but can't fit the item\n    nearly_full_cant_fit = (bins_remain_cap < item) & (bins_remain_cap > 0.9 * item)\n    priorities[nearly_full_cant_fit] = -500.0\n\n    # Discourage bins with significantly more capacity than the item size, especially relative to item size.\n    large_capacity = (bins_remain_cap >= item) & (bins_remain_cap > 2 * item)\n    priorities[large_capacity] -= 200.0 * (item / bins_remain_cap[large_capacity]) #scale down penalty if item is small compared to bin\n\n    # Small boost for using non-empty bins\n    non_empty = bins_remain_cap < np.max(bins_remain_cap)\n    priorities[non_empty] += 50.0\n    \n    # Heavily penalize bins that will become almost full after the item is placed.\n    almost_full = (bins_remain_cap >= item) & ((bins_remain_cap - item) <= (0.1 * np.max(bins_remain_cap)))\n    priorities[almost_full] -= 300\n\n    # Slightly prioritize bins that are already somewhat full\n    partially_full = (bins_remain_cap < np.max(bins_remain_cap)) & (bins_remain_cap > item)\n    fill_level = 1 - (bins_remain_cap[partially_full] / np.max(bins_remain_cap))\n    priorities[partially_full] += fill_level * 100\n    \n    return priorities\n\n[Reflection]\nFocus on minimizing wasted space, penalizing near misses, and balancing bin fill levels.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}