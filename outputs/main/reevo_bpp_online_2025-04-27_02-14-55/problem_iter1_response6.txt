```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing variant: Prioritize bins where the item fits well.
    # Avoid bins that are almost full, or that would waste too much space.

    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # A bin must be able to contain the item
            waste = cap - item  # the waste after placing the item
            
            # Give bins with less waste a higher score, but not if nearly full.
            if cap > item and waste / cap < 0.3:
                 priorities[i] = 1.0 - (waste / cap)  # Prioritize less waste
            
            # Slightly favor bins with larger remaining capacities, 
            # to leave flexibility for future, possibly larger items.
            priorities[i] += (cap / np.max(bins_remain_cap)) * 0.1 if np.max(bins_remain_cap) > 0 else 0 #Add a small bonus

            
            # Penalize bins that are close to the item size (but larger), avoiding almost-full bins
            if waste / item < 0.1 and waste > 0 :
                priorities[i] -= 0.5 #small capacity penalty
        else:
            priorities[i] = -1e9  # Very low priority for bins that cannot fit the item

    return priorities
```
