```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Reward bins that can fit the item
            priorities[i] = cap - item  # Smaller remaining capacity is better (First Fit Decreasing-like)
            # Give bonus for bins with near-perfect fit
            if item > 0 and cap < 2*item:  #encouraging near perfect fits
               priorities[i] += item / cap # encourage closing gaps.
            if cap == item:  # perfect fits should be heavily rewarded.
                priorities[i] += item  #arbitrary large bonus.

        else:
            # Penalize bins that cannot fit the item
            priorities[i] = -np.inf

    return priorities
```
