```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility check: high penalty for bins that cannot fit the item.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf
    
    # 2. Remaining Capacity Utilization: Prefer bins where the item fills a significant portion.
    #   - Avoid almost-empty bins.
    #   - But don't completely fill bins (leave some space for potentially smaller items later).
    
    feasible_mask = ~infeasible_mask
    remaining_cap_after_packing = bins_remain_cap[feasible_mask] - item
    
    # Prioritize bins that can fit the item but leave some space.
    priority_scores = np.zeros_like(remaining_cap_after_packing, dtype=float)
    
    #Give large priority to bins that after placing the item, the remaining capacity 
    #is between 10% to 50% of the bin capacity
    
    bin_capacity = np.max(bins_remain_cap) #assume bins are same size

    condition1 = (remaining_cap_after_packing >= 0.1 * bin_capacity) & (remaining_cap_after_packing <= 0.5 * bin_capacity)
    priority_scores[condition1] += 10

    #give moderate priority to bins that after placing the item, the remaining capacity is between 50% to 90%
    condition2 = (remaining_cap_after_packing > 0.5 * bin_capacity) & (remaining_cap_after_packing <= 0.9 * bin_capacity)

    priority_scores[condition2] += 5

    
    priorities[feasible_mask] += priority_scores
    
    # 3. Prefer partially filled bins: Gives a bonus to bins that are not empty
    non_empty_mask = bins_remain_cap < np.max(bins_remain_cap)
    priorities[non_empty_mask] += 1
    
    return priorities
```
