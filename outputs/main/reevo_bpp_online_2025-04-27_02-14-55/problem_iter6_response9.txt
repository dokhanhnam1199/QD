```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Infeasible bin mask
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Feasible bin mask
    feasible_mask = ~infeasible_mask

    if np.any(feasible_mask):  # Only calculate priorities if there are feasible bins

        # Capacity ratio: prioritize bins with tighter fits
        capacity_ratio = item / bins_remain_cap[feasible_mask]
        priorities[feasible_mask] += 2*capacity_ratio # Increased weight

        # Gaussian-like distribution: reward near-full bins
        remaining_capacity = bins_remain_cap[feasible_mask] - item
        mu = 0  # Mean at 0 remaining capacity
        sigma = 0.1 * np.max(bins_remain_cap)  # Adjust sigma to control the spread (higher = wider, lower = narrower) - scaled with bin size
        gaussian_priority = np.exp(-0.5 * ((remaining_capacity - mu) / sigma)**2)
        priorities[feasible_mask] += 5*gaussian_priority #Increased weight
        
        #Smallest remaining capacity: Tie breaker
        priorities[feasible_mask] += -0.01*remaining_capacity
    else:
        # No feasible bins, heavily penalize opening a new bin if possible
        priorities[:] = -np.inf 
        

    return priorities
```
