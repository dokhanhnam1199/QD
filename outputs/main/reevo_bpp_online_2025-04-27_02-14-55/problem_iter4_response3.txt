```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasibility Mask: Strongly penalize bins where the item doesn't fit
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Capacity Ratio: Prioritize bins based on how well the item fills the bin
    feasible_mask = ~infeasible_mask
    capacity_ratio = item / bins_remain_cap[feasible_mask]
    priorities[feasible_mask] += capacity_ratio

    # Near-Full Reward (Gaussian-like distribution): Reward bins that are close to being full after adding the item.
    remaining_space = bins_remain_cap[feasible_mask] - item
    bin_size = np.max(bins_remain_cap) if bins_remain_cap.size > 0 else 1.0 # Avoid error if bins_remain_cap is empty
    mu = 0  # Mean at 0 remaining space
    sigma = bin_size / 5 # Standard deviation scaled to bin size.  Adjust as needed.
    gaussian_reward = np.exp(-((remaining_space - mu) ** 2) / (2 * sigma ** 2))
    priorities[feasible_mask] += gaussian_reward

    # Introduce a small bias towards bins with smaller index
    priorities[feasible_mask] += np.linspace(0, -0.01, num=np.sum(feasible_mask))

    return priorities
```
