```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit Decreasing inspired priority: prefer bins where the item fits well
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = bins_remain_cap[fit_mask] - item  # Smaller remaining space is better

    # Penalize bins where item doesn't fit
    priorities[~fit_mask] = -np.inf  # Never choose these bins directly
    
    # Add small random noise to break ties and encourage exploration
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-6
    
    return priorities
```
