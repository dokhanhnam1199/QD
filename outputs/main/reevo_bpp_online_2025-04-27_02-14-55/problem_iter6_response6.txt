```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        # Fill ratio priority
        fill_ratio = item / bins_remain_cap[can_fit]
        priorities[can_fit] = fill_ratio

        # Bonus for tight fits (small remaining space)
        remaining_after_fit = bins_remain_cap[can_fit] - item
        tight_fit = remaining_after_fit <= 0.1 * item
        priorities[can_fit][tight_fit] += 1.0

        # Discourage large gaps
        large_gap = bins_remain_cap[can_fit] > 2 * item
        priorities[can_fit][large_gap] *= 0.7  # Reduce priority for large gaps

        # Bonus to bins that are not empty (encourage using existing bins)
        non_empty = bins_remain_cap < np.max(bins_remain_cap)
        priorities[non_empty] += 0.1 # small bonus to encourage using existing bins.

    else:
        # Penalize infeasibility strongly: very low priority
        priorities = np.full_like(bins_remain_cap, -1e9)

    return priorities
```
