```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Highest priority: Exact fit
    exact_fit = (bins_remain_cap == item)
    priorities[exact_fit] = 1000.0

    # High priority: Almost fit (small remaining space)
    almost_fit = (bins_remain_cap >= item) & (bins_remain_cap <= (1.1 * item))  # relaxed almost fit
    priorities[almost_fit] = 750.0

    # Feasibility check and heavy penalty for infeasible bins
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -1e9  # Very strong penalty

    # Dynamic Fill Ratio reward with gaussian curve
    can_accommodate = (bins_remain_cap >= item)
    if np.any(can_accommodate):
        fill_ratio = item / bins_remain_cap[can_accommodate]
        optimal_fill_ratio = 0.9 # Target a near-perfect fill
        gaussian_reward = np.exp(-0.5 * ((fill_ratio - optimal_fill_ratio) / 0.1) ** 2)
        priorities[can_accommodate] += gaussian_reward * 500.0

        # Fragmentation Penalty - Scaled by item size, larger items incur larger penalty for wasting space.
        waste = bins_remain_cap[can_accommodate] - item
        fragmentation_penalty = -100 * (waste / np.max(bins_remain_cap)) * (item / np.max(bins_remain_cap))
        priorities[can_accommodate] += fragmentation_penalty

        # Matching Similar Item Reward
        # Check the existing usage of each bin
        existing_item_sizes = np.max(bins_remain_cap) - bins_remain_cap[can_accommodate]  # Assuming max capacity is a known const
        if np.any(existing_item_sizes > 0):
            similarity = np.exp(-0.5 * ((item - existing_item_sizes) / (0.2 * np.max(bins_remain_cap)))**2)
            priorities[can_accommodate] += similarity * 150 # Matching reward

    # Small boost for using non-empty bins (encourage filling existing bins)
    non_empty = bins_remain_cap < np.max(bins_remain_cap)
    priorities[non_empty] += 50.0

    # Discourage bins with significantly more capacity than the item size. less strict.
    large_capacity = (bins_remain_cap >= item) & (bins_remain_cap > 1.5 * item)
    priorities[large_capacity] -= 50 # Reduced penalty
    return priorities
```
