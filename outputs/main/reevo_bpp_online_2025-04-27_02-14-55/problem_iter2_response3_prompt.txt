{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            # Reward bins that can fit the item\n            priorities[i] = cap - item  # Smaller remaining capacity is better (First Fit Decreasing-like)\n            # Give bonus for bins with near-perfect fit\n            if item > 0 and cap < 2*item:  #encouraging near perfect fits\n               priorities[i] += item / cap # encourage closing gaps.\n            if cap == item:  # perfect fits should be heavily rewarded.\n                priorities[i] += item  #arbitrary large bonus.\n\n        else:\n            # Penalize bins that cannot fit the item\n            priorities[i] = -np.inf\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First-Fit-Decreasing inspired: Prefer bins that can fit the item, and are most full after packing.\n    fit_mask = bins_remain_cap >= item\n    if np.any(fit_mask):\n        remaining_after_fit = bins_remain_cap[fit_mask] - item\n        priorities[fit_mask] = 1 - (remaining_after_fit / np.max(bins_remain_cap)) # Prioritize smaller remainders\n        priorities[fit_mask] += 0.5 # Boost priority for bins that can fit\n\n    # If no bin fits, try to put it in the emptiest bin, and penalize a lot\n    else:\n        min_cap = np.max(bins_remain_cap)\n        priorities = (bins_remain_cap/ min_cap) * (-1)  # Significant negative penalty for not fitting\n        \n\n    return priorities\n\n[Reflection]\nPrioritize fitting bins, normalize remainders, and penalize infeasible placements more heavily.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}