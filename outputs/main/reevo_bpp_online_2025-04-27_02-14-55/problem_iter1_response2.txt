```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins that can accommodate the item.
    feasible_bins = bins_remain_cap >= item

    # If no bins can accommodate the item, assign all priorities to 0 and return
    if not np.any(feasible_bins):
        return priorities

    # 2. Remaining Capacity: Prioritize bins with tighter fit, but penalize bins that are almost full after placing the item.

    remaining_after_placement = bins_remain_cap - item
    
    # Higher remaining capacity is generally bad, unless we have very few large gaps
    # Bins which cannot fit will have remainders which are negative. We only care about the ones that fit.
    
    
    priorities[feasible_bins] = 1 / (remaining_after_placement[feasible_bins] + 0.0001) #avoid division by zero
    
    #Bins that are near full have highest priority because they cause external fragmentation less.

    # 3. Bonus for bins that would become exactly full

    is_exact_fit = np.abs(remaining_after_placement) < 1e-6
    priorities[is_exact_fit] += 10 # Large bonus if exactly fit

    return priorities
```
