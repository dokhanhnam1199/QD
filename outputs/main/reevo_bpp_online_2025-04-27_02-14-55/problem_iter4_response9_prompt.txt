{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First Fit Decreasing variant - prioritize bins that can fit the item reasonably well\n    # without leaving too much or too little space.\n    fit_mask = bins_remain_cap >= item\n\n    if np.any(fit_mask):\n      remaining_after_fit = bins_remain_cap[fit_mask] - item\n      # Prioritize bins where the remaining space is relatively small, but not too small\n      # to avoid creating bins with extremely small utilization.\n      \n      # Handle the case where the standard deviation is zero to avoid division by zero.\n      std_dev = np.std(remaining_after_fit)\n      if std_dev == 0:\n          priorities[fit_mask] = np.ones_like(remaining_after_fit)  # All bins are equally good\n      else:\n          priorities[fit_mask] = np.exp(-0.5 * ((remaining_after_fit - np.mean(remaining_after_fit)) / std_dev)**2) # Gaussian-like priority.\n\n      #Prioritize almost full bins even more if there are multiple candidates to fit\n      almost_full_threshold = 0.1 # 10% of bin size remaining, can be tuned\n      almost_full_mask = remaining_after_fit <= almost_full_threshold * bins_remain_cap[fit_mask]\n      priorities[fit_mask][almost_full_mask] *= 2 #Higher boost if almost full\n\n    #If no bins can fit the item, de-prioritize all of them heavily\n    else:\n      priorities = -np.ones_like(bins_remain_cap) * 1000  # Large negative value\n      #Prioritize emptiest bin slightly to delay opening a new bin\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_size = 1.0  # Assuming bin size is 1.0, adjust if different\n\n    # Infeasible bins get a very low priority\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -1e9\n\n    # Feasible bins\n    feasible_mask = ~infeasible_mask\n\n    if np.any(feasible_mask): #Only calcualte if we have a feasible bin\n\n        # Capacity ratio: reward tighter fits\n        capacity_ratio = item / bin_size\n        priorities[feasible_mask] += capacity_ratio\n\n        # Reward near-full bins using a Gaussian-like distribution\n        remaining_after_fit = bins_remain_cap[feasible_mask] - item\n        mu = 0  # Mean at 0 remaining\n        sigma = 0.2 * bin_size # Standard deviation scaled to bin size\n        gaussian_priority = np.exp(-((remaining_after_fit - mu) ** 2) / (2 * sigma ** 2))\n        priorities[feasible_mask] += gaussian_priority\n        \n        # Normalize priorities to make sure no bin is selected with very high magnitude if not needed\n        priorities[feasible_mask] /= np.max(priorities[feasible_mask])\n        \n\n    return priorities\n\n[Reflection]\nThe better code prioritizes tighter fits, uses a normalized Gaussian, and directly penalizes infeasible bins for better performance.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}