```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item
    
    # 2. Remaining Capacity: Prefer bins with less remaining capacity *after* adding the item, but only for feasible bins.
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[remaining_after_fit < 0] = np.inf # Penalize infeasible bins here as well.

    priorities[feasible_bins] = -remaining_after_fit[feasible_bins]
    
    # 3. Avoidance of Fragmentation: Give a bonus if the remaining space after placing the item falls within a reasonable range. This is to prevent creating very small gaps.
    reasonable_gap_min = 0.1  # Smallest acceptable remaining space
    reasonable_gap_max = 0.3  # Largest acceptable remaining space. Adapt as needed.
    
    reasonable_gap = (remaining_after_fit >= reasonable_gap_min) & (remaining_after_fit <= reasonable_gap_max) & feasible_bins
    priorities[reasonable_gap] += 1.0 # Boost the priority of such bins.

    # 4. Prioritize almost full bins to avoid using new bins.
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap < item + 0.2) #Check that bin is feasible and almost full
    priorities[almost_full] += 2.0 # Boost priority of almost full bins more.
    
    return priorities
```
