{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Highest priority: Exact fit\n    exact_fit = (bins_remain_cap == item)\n    priorities[exact_fit] = 1000.0\n\n    # High priority: Near fit (small remaining space)\n    near_fit_threshold = 0.05  # Define near fit as within 5%\n    near_fit = (bins_remain_cap >= item) & (bins_remain_cap <= (item * (1 + near_fit_threshold)))\n    priorities[near_fit] = 750.0\n\n    # Penalize infeasibility strongly\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -10000.0\n\n    # Gaussian reward for filling bins well, centered around optimal fill\n    can_accommodate = bins_remain_cap >= item\n    if np.any(can_accommodate):\n        remaining_capacity = bins_remain_cap[can_accommodate]\n        fill_ratio = item / remaining_capacity  # Calculate fill ratio\n        optimal_fill_ratio = 0.9  # Target fill ratio (e.g., 90%)\n        gaussian_reward = 500 * np.exp(-((fill_ratio - optimal_fill_ratio)**2) / (2 * 0.1**2))  # Gaussian with std dev 0.1\n        priorities[can_accommodate] += gaussian_reward\n\n    # Consider item size when choosing bins\n    relative_item_size = item / np.max(bins_remain_cap) # Item size relative to largest capacity\n    priorities[can_accommodate] += relative_item_size * 100 # Give slight bonus for larger items\n\n    # Encourage using existing bins (small bonus)\n    non_empty = bins_remain_cap < np.max(bins_remain_cap)\n    priorities[non_empty] += 25.0\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First-Fit-Decreasing inspired heuristic: Prefer bins that can accommodate the item\n    # and have the least remaining capacity AFTER placing the item.\n\n    can_fit = bins_remain_cap >= item\n\n    if np.any(can_fit):\n        remaining_after_fit = bins_remain_cap[can_fit] - item\n\n        # Prioritize tight fits: High fill ratio is good\n        fill_ratio = item / bins_remain_cap[can_fit]\n        priorities[can_fit] = fill_ratio\n\n        # Bonus for bins that are nearly full after placing the item\n        nearly_full = remaining_after_fit <= 0.1 * item  # Arbitrary threshold, using item size instead of capacity.\n        priorities[can_fit][nearly_full] += 1  # Significant bonus for nearly full bins.\n\n        # Slight penalty for bins that are significantly larger than the item\n        # This encourages filling smaller bins first. Prevents one or two bins\n        # becoming significantly emptier than the others.\n        much_larger = bins_remain_cap[can_fit] > 2 * item\n        priorities[can_fit][much_larger] *= 0.8 # Slightly reduce priority\n\n\n    else:\n        # If no bins can fit, assign a very low priority so a new bin gets created, ideally\n        priorities = np.full_like(bins_remain_cap, -1e9)  # Very low priority\n\n    return priorities\n\n[Reflection]\nPrioritize tight fits, discourage large gaps, and penalize infeasibility strongly for online bin packing.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}