```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Infeasibility: Strong negative penalty if bin cannot accommodate item.
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -1e7

    # 2. Exact Fit: Extremely high priority.
    exact_fit = (bins_remain_cap == item)
    priorities[exact_fit] = 1e6

    # 3. Very Close Fit: High priority, minimal waste.
    very_close_fit = (bins_remain_cap >= item) & (bins_remain_cap <= item + 0.001)
    priorities[very_close_fit] = 1e5

    # 4. Close Fit: Good priority, but less than very close.
    close_fit = (bins_remain_cap >= item) & (bins_remain_cap <= 1.02 * item)
    priorities[close_fit] = 1e4

    # 5. Moderate Priority: Fits, but directly penalize wasted space.
    can_accommodate = bins_remain_cap >= item
    if np.any(can_accommodate):
        wasted_space = bins_remain_cap[can_accommodate] - item
        # Directly penalize wasted space, scaling down the penalty.
        priorities[can_accommodate] -= wasted_space * 1000  # Higher penalty factor

    # 6. Penalize near-full but infeasible bins.  More aggressive penalty.
    near_full_infeasible = (bins_remain_cap < item) & (bins_remain_cap > 0.9 * item)
    priorities[near_full_infeasible] = -5e6

    # 7. Encourage using non-empty bins (if it fits).
    non_empty_and_fits = (bins_remain_cap < np.max(bins_remain_cap)) & can_accommodate
    priorities[non_empty_and_fits] += 500

    # 8. Discourage large empty space relative to item size.
    large_empty_space = (bins_remain_cap >= item) & ((bins_remain_cap - item) > 2 * item)
    priorities[large_empty_space] -= 1000

    # 9. Slight penalty for bins with *significantly* more capacity than the item.
    significantly_larger = (bins_remain_cap >= item) & (bins_remain_cap > 4 * item)
    priorities[significantly_larger] -= 200

    return priorities
```
