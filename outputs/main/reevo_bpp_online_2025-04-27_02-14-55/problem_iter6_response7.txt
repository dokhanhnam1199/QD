```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        remaining_after_fit = bins_remain_cap[can_fit] - item

        # Prioritize tight fits: High fill ratio is good.
        fill_ratio = item / (bins_remain_cap[can_fit] + 1e-6)
        priorities[can_fit] = fill_ratio

        # Adaptive bonus for nearly full bins (relative to item size).
        nearly_full = remaining_after_fit < 0.1 * item
        priorities[can_fit][nearly_full] += 2.0

        # Penalty for fragmentation, scaled by item size.
        priorities[can_fit] -= 0.1 * remaining_after_fit / (item + 1e-6)

        # Bonus for bins that were already partially filled.
        already_filled = bins_remain_cap < np.max(bins_remain_cap)
        priorities[already_filled] += 0.5

        # Further boost to nearly full bins proportional to the fill ratio
        priorities[can_fit][nearly_full] += 1.0 * fill_ratio[nearly_full]

        # Additional reward to bins with smallest remaining capacity
        min_remaining = np.min(remaining_after_fit)
        closest_to_min = np.isclose(remaining_after_fit, min_remaining) # accounts for floating point errors
        priorities[can_fit][closest_to_min] += 0.75

    else:
        # If no bins can fit, assign a very low priority
        priorities = np.full_like(bins_remain_cap, -1e9)

    return priorities
```
