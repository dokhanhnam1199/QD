```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Highest priority: Exact fit
    exact_fit = (bins_remain_cap == item)
    priorities[exact_fit] = 1000.0

    # High priority: Near fit (very small remaining space)
    near_fit = (bins_remain_cap >= item) & (bins_remain_cap <= (1.1 * item))
    priorities[near_fit] = 750.0

    # Medium priority: Fits well, minimize wasted space
    can_accommodate = (bins_remain_cap >= item) & (bins_remain_cap > (1.1 * item))
    if np.any(can_accommodate):
        wasted_space = bins_remain_cap[can_accommodate] - item
        space_efficiency = 1.0 / (1.0 + wasted_space)
        priorities[can_accommodate] += space_efficiency * 500.0

    # Penalize near-full bins that can't fit
    nearly_full_cant_fit = (bins_remain_cap < item) & (bins_remain_cap > 0.9 * np.max(bins_remain_cap))
    priorities[nearly_full_cant_fit] = -500.0

    # Discourage bins with much more capacity than the item size
    large_capacity = (bins_remain_cap >= item) & (bins_remain_cap > 2 * item)
    if np.any(large_capacity):
        priorities[large_capacity] -= 200.0 * (item / bins_remain_cap[large_capacity])

    # Small boost for using non-empty bins
    non_empty = bins_remain_cap < np.max(bins_remain_cap)
    priorities[non_empty] += 50.0

    # Heavily penalize bins that will become almost full after the item is placed
    almost_full = (bins_remain_cap >= item) & ((bins_remain_cap - item) <= (0.1 * np.max(bins_remain_cap)))
    priorities[almost_full] -= 300.0

   # Slightly prioritize bins that are already somewhat full
    partially_full = (bins_remain_cap < np.max(bins_remain_cap)) & (bins_remain_cap >= (0.5 * np.max(bins_remain_cap))) & (bins_remain_cap >= item)
    if np.any(partially_full):
        fill_level = 1 - (bins_remain_cap[partially_full] / np.max(bins_remain_cap))
        priorities[partially_full] += fill_level * 100.0

    # Further penalize very small remaining spaces after placing the item, but not zero
    very_small_remaining = (bins_remain_cap >= item) & ((bins_remain_cap - item) > 0) & ((bins_remain_cap - item) <= (0.15 * item))
    priorities[very_small_remaining] -= 150.0
    
    return priorities
```
