```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Highest priority: Exact fit
    exact_fit = (bins_remain_cap == item)
    priorities[exact_fit] = 1000.0

    # High priority: Almost fit (small remaining space)
    almost_fit = (bins_remain_cap >= item) & (bins_remain_cap <= (1.1 * item))  # looser almost fit
    priorities[almost_fit] = 750.0

    # Feasibility check and heavy penalty for infeasible bins, scaled by item size
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -1e9 * (item + 0.1)  # Very strong penalty, scaled by item size

    # Medium priority: Fits well, minimize wasted space using dynamic fill ratio
    can_accommodate = (bins_remain_cap >= item)
    if np.any(can_accommodate):
        fill_ratio = item / bins_remain_cap[can_accommodate]
        ideal_fill = 0.95 # tuneable param
        gaussian_reward = np.exp(-0.5 * ((fill_ratio - ideal_fill) / 0.2) ** 2)
        priorities[can_accommodate] += gaussian_reward * 500.0

        # Adjust priority based on item size
        item_size_ratio = item / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0
        priorities[can_accommodate] += item_size_ratio * 100

    # Small boost for using non-empty bins (encourage filling existing bins)
    non_empty = bins_remain_cap < np.max(bins_remain_cap)
    priorities[non_empty] += 50.0

    # Discourage fragmentation (small remaining space after placing item), scaled by item size.
    fragmentation = (bins_remain_cap >= item) & (bins_remain_cap - item < 0.1)
    priorities[fragmentation] -= 100 * item

    # Bonus for bins that can accommodate multiple items of similar size after fitting
    if np.any(can_accommodate):
        remaining_capacity_after_fit = bins_remain_cap[can_accommodate] - item
        potential_items = np.floor(remaining_capacity_after_fit / item)
        priorities[can_accommodate] += potential_items * 25

    return priorities
```
