```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        remaining_after_fit = bins_remain_cap[can_fit] - item

        # Prioritize tight fits (high fill ratio). Use item size for relative comparison.
        fill_ratio = item / (bins_remain_cap[can_fit] + 1e-9) # avoid division by zero
        priorities[can_fit] = fill_ratio

        # Substantially reward bins that are almost full
        almost_full = remaining_after_fit < 0.1 * item
        priorities[can_fit][almost_full] += 5.0  # Increased reward for almost full

        # Dynamically penalize fragmentation, scaled by item size.
        priorities[can_fit] -= 0.5 * (remaining_after_fit / item)

        # Give a slight preference to bins that are already partially filled.
        already_used = bins_remain_cap < np.max(bins_remain_cap)
        priorities[can_fit & already_used] += 0.2
    else:
        # If no bin can fit the item, penalize heavily to force a new bin.
        priorities = np.full_like(bins_remain_cap, -1e9)

    return priorities
```
