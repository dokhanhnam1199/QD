```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Highest priority: Exact fit
    exact_fit = (bins_remain_cap == item)
    priorities[exact_fit] = 1500.0

    # High priority: Near perfect fit, scaled by item size
    near_perfect_fit_threshold = 0.07  # Define a threshold for "near perfect"
    near_perfect_fit = (bins_remain_cap >= item) & (bins_remain_cap <= item * (1 + near_perfect_fit_threshold))
    priorities[near_perfect_fit] = 1200.0 - (bins_remain_cap[near_perfect_fit] - item) / item * 200  # Scale based on waste, increased scaling factor and base

    # Feasibility check and HUGE penalty for infeasible bins
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -1e12  # Even stronger penalty

    # Dynamic Fill Ratio Reward: Gaussian around optimal fill, scaled heavily
    can_accommodate = (bins_remain_cap >= item)
    if np.any(can_accommodate):
        fill_ratio = item / bins_remain_cap[can_accommodate]
        gaussian_std = 0.12  # Adjust std for the gaussian curve, widened more
        gaussian_reward = np.exp(-0.5 * ((fill_ratio - 1.0) / gaussian_std) ** 2)
        priorities[can_accommodate] += gaussian_reward * 900.0  # Scale Gaussian reward aggressively, increased scaling

    # Fragmentation Penalty: Penalize creating small remaining spaces
    small_space_threshold = 0.25  # Increased threshold
    fragmented_bins = (bins_remain_cap >= item) & ((bins_remain_cap - item) <= small_space_threshold * np.max(bins_remain_cap))
    if np.any(fragmented_bins):
        waste = bins_remain_cap[fragmented_bins] - item
        penalty = (waste / (small_space_threshold * np.max(bins_remain_cap))) * 400  # Scale penalty, increased scaling
        priorities[fragmented_bins] -= penalty

    # Encourage using existing bins, more heavily
    non_empty = bins_remain_cap < np.max(bins_remain_cap)
    priorities[non_empty] += 150.0  # Increased reward

    # Similarity Bonus: Reward bins with similar-sized items. This is a basic approach and can be further improved.
    # This version doesn't track items already in bins, so it uses remaining capacity as a proxy.
    similarity_threshold = 0.35
    similar_size = np.abs(bins_remain_cap - item) <= similarity_threshold * item  # Tolerance for similarity
    priorities[similar_size & can_accommodate] += 120.0  # Increased reward

    # Discourage bins with way more capacity than the item size, more aggressive penalty
    large_capacity = (bins_remain_cap >= item) & (bins_remain_cap > 2.5 * item)  # Increased factor
    priorities[large_capacity] -= 130  # Increase the penalty

    # Further incentivize filling nearly full bins
    nearly_full = (bins_remain_cap > item) & (bins_remain_cap < item * 1.2)
    priorities[nearly_full] += 80

    # Slightly penalize empty bins to encourage filling existing ones first.
    empty_bins = bins_remain_cap == np.max(bins_remain_cap)
    priorities[empty_bins] -= 10

    return priorities
```
