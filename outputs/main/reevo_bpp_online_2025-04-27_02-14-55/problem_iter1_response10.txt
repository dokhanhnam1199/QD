```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Prefer bins where the item fits (First Fit Decreasing inspired)
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1

    # Heuristic 2: Minimize wasted space (Best Fit inspired)
    wasted_space = bins_remain_cap - item
    wasted_space[wasted_space < 0] = np.inf  # Ignore bins where item doesn't fit
    priorities[fit_mask] += 1 / (wasted_space[fit_mask] + 0.00001)  # Avoid division by zero
    
    # Heuristic 3: Normalize priority values by bin remaining capacity (Utilize space as much as possible)
    priorities = priorities * (bins_remain_cap / np.sum(bins_remain_cap)) # Bins with greater remaining cap get priority

    # Heuristic 4: Apply a small penalty for bins that are almost full to prevent creating tiny, almost-empty bins at the end.
    almost_full = (bins_remain_cap > 0) & (bins_remain_cap < 2*item) #Try avoid filling the smalles amount when possible.
    priorities[almost_full] *= 0.9

    return priorities
```
