```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize minimizing wasted space after packing, if the item fits.
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        remaining_after_fit = bins_remain_cap[fit_mask] - item
        # Prioritize smaller remainders (more full after packing)
        priorities[fit_mask] = 1.0 - (remaining_after_fit / np.max(bins_remain_cap)) 
        # Add a significant boost to prioritize fitting at all.
        priorities[fit_mask] += 1.0

        # Further boost for nearly-full bins after packing
        nearly_full_mask = remaining_after_fit <= 0.1 * np.max(bins_remain_cap)  # Adjust 0.1 as needed
        priorities[fit_mask][nearly_full_mask] += 0.5  # Even higher priority for nearly full bins

    # If no bin fits, strongly penalize using a bin, but prefer bins with more space.
    else:
        # Significant negative penalty for not fitting.  Scale by remaining capacity.
        priorities = (bins_remain_cap / np.max(bins_remain_cap)) - 2.0 # Large negative number
        
    return priorities
```
