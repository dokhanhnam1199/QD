```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Infeasibility:  Strong negative penalty if bin cannot accommodate item.
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -1e6

    # 2. Exact Fit: Extremely high priority.
    exact_fit = (bins_remain_cap == item)
    priorities[exact_fit] = 1e5

    # 3. Very Close Fit: High priority, minimal waste.
    very_close_fit = (bins_remain_cap >= item) & (bins_remain_cap <= item + 0.01)
    priorities[very_close_fit] = 1e4

    # 4. Close Fit: Good priority, but less than very close.
    close_fit = (bins_remain_cap >= item) & (bins_remain_cap <= 1.05 * item)
    priorities[close_fit] = 1e3

    # 5. Moderate Priority: Fits, but consider wasted space.
    can_accommodate = bins_remain_cap >= item
    if np.any(can_accommodate):
        wasted_space = bins_remain_cap[can_accommodate] - item
        # Prioritize bins where wasted space is minimal, scaling down the reward.
        space_efficiency = np.clip(1.0 - (wasted_space / np.max(bins_remain_cap)), 0, 1)  # Ensure between 0 and 1
        priorities[can_accommodate] += space_efficiency * 500

    # 6. Penalize near-full but infeasible bins.
    near_full_infeasible = (bins_remain_cap < item) & (bins_remain_cap > 0.8 * item)
    priorities[near_full_infeasible] = -1e4

    # 7. Encourage using non-empty bins (if it fits).
    non_empty_and_fits = (bins_remain_cap < np.max(bins_remain_cap)) & can_accommodate
    priorities[non_empty_and_fits] += 100

    # 8. Discourage large empty space relative to item size.
    large_empty_space = (bins_remain_cap >= item) & ((bins_remain_cap - item) > item)
    priorities[large_empty_space] -= 200

    # 9. Slight penalty for bins with *significantly* more capacity than the item.
    significantly_larger = (bins_remain_cap >= item) & (bins_remain_cap > 3 * item)
    priorities[significantly_larger] -= 50

    return priorities
```
