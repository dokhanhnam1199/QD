```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = 1.0 # Assume bin size is 1 for capacity ratio calculation.

    # Infeasible placements get a very negative priority
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -1e9  # Very low priority

    # Feasible placements:
    feasible_mask = ~infeasible_mask

    if np.any(feasible_mask): #Avoid errors when all placements are infeasible
        # Capacity ratio: prioritize tighter fits
        capacity_ratio = item / bin_size
        priorities[feasible_mask] += capacity_ratio

        # Reward near-full bins with a Gaussian-like distribution
        remaining_capacity_ratio = bins_remain_cap[feasible_mask] / bin_size
        mu = 0.0  # Center the Gaussian around full bins (remaining capacity = 0)
        sigma = 0.2 # Adjust sigma to control the spread
        gaussian_priority = np.exp(-0.5 * ((remaining_capacity_ratio - mu) / sigma)**2)
        priorities[feasible_mask] += gaussian_priority

        # Prioritize lower indexes to avoid opening new bins (this helps when scores are close)
        priorities[feasible_mask] += np.linspace(0, -0.1, num=np.sum(feasible_mask))

    return priorities
```
