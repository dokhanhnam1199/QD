```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit-Decreasing-like prioritization: prioritize bins that can accommodate the item
    # and are relatively full already
    
    valid_bins = bins_remain_cap >= item
    
    if np.any(valid_bins):
        priorities[valid_bins] = bins_remain_cap[valid_bins] # Larger the remain cap, higher priority. Try to fill bigger bins

        #priorities[valid_bins] = 1/(bins_remain_cap[valid_bins] - item + 1e-9)  # Higher priority to bins with minimal waste.

        # Prioritize bins which are closer to full with a boost. The idea here is
        # that partially-filled bins should be reserved for later objects with appropriate sizes.
        
        #priorities[valid_bins] = 1.0/(bins_remain_cap[valid_bins]/bins_remain_cap[valid_bins].max()) # try normalizing, higher priority given to bins that are almost full

        #priorities[valid_bins] = (1 - (bins_remain_cap[valid_bins]/bins_remain_cap.max())) # Fill bigger bins as they appear.

        #priorities[valid_bins] = (1-item/bins_remain_cap[valid_bins])# Try to pack bins closer to be filled.

    else:
        # No suitable bin found
        priorities = np.zeros_like(bins_remain_cap, dtype=float)
        # Give a negative priority so that a new bin is always created.
        priorities[:] = -1.0 # or -np.inf if np.inf does not hurt.
        # or just the lowest remaining cap bin is prioritized.
        # priorities[np.argmin(bins_remain_cap)] = 1.0

    return priorities
```
