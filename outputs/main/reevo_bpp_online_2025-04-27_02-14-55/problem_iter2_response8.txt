```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: If bin can't fit the item, priority is -inf.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf
    
    # 2. If bin can fit perfectly, give highest priority
    perfect_fit_mask = bins_remain_cap == item
    priorities[perfect_fit_mask] = np.inf

    # 3. Otherwise, prioritize bins with smaller remaining capacity after placing the item, but only consider if the bin can accommodate item.
    feasible_mask = ~infeasible_mask & ~perfect_fit_mask
    remaining_capacities_after_placement = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_capacities_after_placement  # Prefer smaller remaining space
    
    # 4. Add a small bonus for bins that are not empty initially. Avoid opening new bins if possible
    non_empty_bins = bins_remain_cap < 1.0  # Assuming bin size is 1.0
    priorities[non_empty_bins & ~infeasible_mask] += 0.001
    
    # 5. Further prioritize bins with capacity close to the item size
    close_fit_mask = (bins_remain_cap >= item) & (bins_remain_cap <= item + 0.2)  # Within 0.2 of item size
    priorities[close_fit_mask] += 0.002 # slightly higher priority if close fit.

    return priorities
```
