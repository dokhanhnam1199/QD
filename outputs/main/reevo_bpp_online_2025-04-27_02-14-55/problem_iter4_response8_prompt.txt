{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Calculate remaining capacity after adding the item\n    remaining_capacities = bins_remain_cap - item\n    \n    # Assign high priority to bins where the item fits, and low to those where it doesn't.\n    fit_mask = remaining_capacities >= 0\n    \n    # For fitting bins, prioritize those with tighter fit (smaller remaining capacity)\n    priorities[fit_mask] = 1 / (remaining_capacities[fit_mask] + 1e-6) # Add a small constant to avoid division by zero\n\n    # Introduce a bonus for bins that become nearly full (e.g., >90% full) after adding the item.\n    nearly_full_mask = (bins_remain_cap - item) / bins_remain_cap < 0.1\n    priorities[nearly_full_mask & fit_mask] *= 2  # Double the priority if it is nearly full.\n\n    # Penalize bins that have very high remaining capacity, even if the item fits\n    # This encourages filling bins more uniformly and avoids bins with very low utilization\n    large_capacity_mask = bins_remain_cap > 2 * item\n    priorities[large_capacity_mask & fit_mask] *= 0.5 # Halve the priority if it has a lot of capacity\n    \n    # Further discourages bins that will become almost full after the item is placed.\n    almost_full_mask = (remaining_capacities > 0) & (remaining_capacities <= 0.2 * bins_remain_cap)\n    priorities[almost_full_mask] *= 0.75  # Reduce priority for almost full bins.\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # First-Fit-Decreasing inspired heuristic: Prefer bins that can accommodate the item\n    # and have the least remaining capacity AFTER placing the item.\n\n    can_fit = bins_remain_cap >= item\n    \n    if np.any(can_fit):\n        remaining_after_fit = bins_remain_cap[can_fit] - item\n        \n        # Prioritize tight fits: High fill ratio is good\n        fill_ratio = item / bins_remain_cap[can_fit]\n        priorities[can_fit] = fill_ratio \n\n        # Bonus for bins that are nearly full after placing the item\n        nearly_full = remaining_after_fit < 0.1 * item  #Arbitrary threshold.\n        priorities[can_fit][nearly_full] += 1  # Significant bonus for nearly full bins.\n\n    else:\n        # If no bins can fit, assign a very low priority so a new bin gets created, ideally\n        priorities = np.full_like(bins_remain_cap, -1e9) # Very low priority\n    \n    return priorities\n\n[Reflection]\nPrioritize tight fits using fill ratio, and strongly incentivize nearly-full bins. If no bins fit, create new one.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}