{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First-Fit-Decreasing inspired: prioritize bins with enough capacity\n    # higher than bins that cannot fit the item.\n\n    can_fit = bins_remain_cap >= item\n    priorities[can_fit] += 1.0\n\n    # Try to fill bins as much as possible without overflowing.\n    # Bins with capacities close to the item size receive higher priority.\n    # This encourages using partially filled bins before opening new ones.\n    remaining_space = bins_remain_cap - item\n    fit_space_available = remaining_space[can_fit]\n\n    priorities[can_fit] += np.exp(-np.abs(fit_space_available) / item)\n\n    # Avoid bins that are almost full after adding the item.\n    too_full = (bins_remain_cap >= item) & (remaining_space <= 0.1 * item) # Avoid very tight fits\n    priorities[too_full] -= 0.5  # Slightly de-prioritize\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility: If bin can't fit the item, priority is -inf.\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n    \n    # 2. If bin can fit perfectly, give highest priority\n    perfect_fit_mask = bins_remain_cap == item\n    priorities[perfect_fit_mask] = np.inf\n\n    # 3. Otherwise, prioritize bins with smaller remaining capacity after placing the item, but only consider if the bin can accommodate item.\n    feasible_mask = ~infeasible_mask & ~perfect_fit_mask\n    remaining_capacities_after_placement = bins_remain_cap[feasible_mask] - item\n    priorities[feasible_mask] = -remaining_capacities_after_placement  # Prefer smaller remaining space\n    \n    # 4. Add a small bonus for bins that are not empty initially. Avoid opening new bins if possible\n    non_empty_bins = bins_remain_cap < 1.0  # Assuming bin size is 1\n    priorities[non_empty_bins & ~infeasible_mask] += 0.001\n    \n    return priorities\n\n[Reflection]\nPrioritize feasibility and perfect fits. Directly optimize remaining capacity and incentivize reusing bins.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}