{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Highest priority: Exact fit\n    exact_fit = (bins_remain_cap == item)\n    priorities[exact_fit] = 1000.0\n\n    # High priority: Near fit (very small remaining space)\n    near_fit = (bins_remain_cap >= item) & (bins_remain_cap <= (1.05 * item))\n    priorities[near_fit] = 750.0\n\n    # Medium priority: Fits well, minimize wasted space\n    can_accommodate = (bins_remain_cap >= item)\n    if np.any(can_accommodate):\n        wasted_space = bins_remain_cap[can_accommodate] - item\n        # Prioritize bins where wasted space is minimal. Invert and scale.\n        space_efficiency = np.exp(-wasted_space/item)  # Exponential decay for wasted space\n        priorities[can_accommodate] += space_efficiency * 500.0\n\n    # Penalize bins that are nearly full but can't fit the item\n    nearly_full_cant_fit = (bins_remain_cap < item) & (bins_remain_cap > 0.9 * item)\n    priorities[nearly_full_cant_fit] = -500.0\n\n    # Discourage bins with significantly more capacity than the item size, less aggressively\n    large_capacity = (bins_remain_cap >= item) & (bins_remain_cap > 1.5 * item)\n    priorities[large_capacity] -= 100.0\n\n    # Small boost for using non-empty bins\n    non_empty = bins_remain_cap < np.max(bins_remain_cap)\n    priorities[non_empty] += 50.0\n    \n    # Penalize bins that will become almost full after the item is placed. Stronger penalty if almost full\n    almost_full = (bins_remain_cap >= item) & ((bins_remain_cap - item) <= (0.1 * np.max(bins_remain_cap)))\n    priorities[almost_full] -= 200\n\n    # Add a very small incentive to bins that are already quite full\n    quite_full = (bins_remain_cap < np.max(bins_remain_cap)) & (bins_remain_cap <= 0.2 * np.max(bins_remain_cap))\n    priorities[quite_full] += 25\n    \n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    can_fit = bins_remain_cap >= item\n\n    if np.any(can_fit):\n        remaining_after_fit = bins_remain_cap[can_fit] - item\n\n        # Prioritize tight fits (high fill ratio). Use item size for relative comparison.\n        fill_ratio = item / (bins_remain_cap[can_fit] + 1e-9) # avoid division by zero\n        priorities[can_fit] = fill_ratio\n\n        # Substantially reward bins that are almost full\n        almost_full = remaining_after_fit < 0.1 * item\n        priorities[can_fit][almost_full] += 5.0  # Increased reward for almost full\n\n        # Dynamically penalize fragmentation, scaled by item size.\n        priorities[can_fit] -= 0.5 * (remaining_after_fit / item)\n\n        # Give a slight preference to bins that are already partially filled.\n        already_used = bins_remain_cap < np.max(bins_remain_cap)\n        priorities[can_fit & already_used] += 0.2\n    else:\n        # If no bin can fit the item, penalize heavily to force a new bin.\n        priorities = np.full_like(bins_remain_cap, -1e9)\n\n    return priorities\n\n[Reflection]\nPrioritize fill ratio, reward almost-full bins, penalize fragmentation dynamically, and heavily penalize infeasibility.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}