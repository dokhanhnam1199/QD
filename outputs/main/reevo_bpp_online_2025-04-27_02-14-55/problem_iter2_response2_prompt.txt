{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            # Base priority: higher remaining capacity is better (encourage filling emptier bins, but only if it fits)\n            priorities[i] = cap\n\n            # Small adjustments for item size relative to bin size\n            fill_ratio = item / cap\n            if fill_ratio > 0.75: #If it occupies a lot of the bin give a boost.\n                priorities[i] *= 1.2 #A good fit.\n            elif fill_ratio < 0.25: # discourage bins that barely get filled by this item.\n                 priorities[i] *= 0.9\n\n            #Penalize nearly full bins: prioritize using bins with substantial space\n            if cap - item < 0.1: #avoids placing item if bin is almost full.\n                priorities[i] = -1  # Very low priority because this will overfill, or get very close.\n\n        else:\n            priorities[i] = -np.inf  # Cannot fit; lowest priority\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Immediate fit gets highest priority\n    immediate_fit = (bins_remain_cap == item)\n    priorities[immediate_fit] = 1000.0\n    \n    # First Fit Decreasing heuristic idea\n    almost_fit = (bins_remain_cap >= item) & (bins_remain_cap < (1.1 * item)) # within 10% of the item\n    priorities[almost_fit] = 500.0\n    \n    # Give some priority to bins that can accommodate the item\n    can_accommodate = (bins_remain_cap >= item)\n    priorities[can_accommodate] += (bins_remain_cap[can_accommodate] - item) / np.sum(bins_remain_cap) * 100  # Normalize remaining capacity difference\n    \n    # Penalize bins that are nearly full, but can't fit\n    near_full = (bins_remain_cap < item) & (bins_remain_cap > 0.9 * item)\n    priorities[near_full] = -100.0 #discourage nearly full.\n\n    # Prioritize bins that are not empty.\n    non_empty = bins_remain_cap < np.max(bins_remain_cap)\n    priorities[non_empty] += 1 # a small boost for bins that already has content.\n\n    # For bins that can fit the item, calculate the wasted space and use the inverse as priority.  Encourage better packing.\n    fit_waste = bins_remain_cap[can_accommodate] - item\n    if len(fit_waste) > 0:\n      waste_priority = 1.0 / (1.0 + fit_waste)  # add 1 to prevent zero division\n      priorities[can_accommodate] += waste_priority * 50 #scale the priority.\n\n    return priorities\n\n[Reflection]\nThe better code uses explicit, prioritized rules and considers wasted space, leading to improved packing.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}