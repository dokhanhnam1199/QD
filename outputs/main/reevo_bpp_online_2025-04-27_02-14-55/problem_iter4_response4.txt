```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate the remaining capacity after adding the item
    remaining_capacity = bins_remain_cap - item

    # Give a high priority to bins that can accommodate the item
    # but would have low *relative* remaining capacity afterward.
    mask = remaining_capacity >= 0
    priorities[mask] = 1.0 - (remaining_capacity[mask] / bins_remain_cap[mask])  # Higher priority given to bins where remaining capacity is low relative to its original cap

    # For bins that cannot accommodate, give negative priority
    priorities[~mask] = -np.inf

    # Introduce a bonus for bins that fit almost perfectly
    almost_full = (remaining_capacity >= 0) & (remaining_capacity <= 0.1 * bins_remain_cap)
    priorities[almost_full] += 1.5  # Add a constant bonus. Increased magnitude.

    #Bonus for bins with high fill ratio, to encourage full utilization
    high_fill = (remaining_capacity >= 0) & (1.0 - (remaining_capacity / bins_remain_cap) > 0.75)
    priorities[high_fill] += 0.5

    return priorities
```
