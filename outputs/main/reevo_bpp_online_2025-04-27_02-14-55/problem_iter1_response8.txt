```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate the remaining capacity after adding the item
    remaining_capacity = bins_remain_cap - item
    
    # Give a high priority to bins that can accommodate the item
    # but would have low remaining capacity afterward.
    mask = remaining_capacity >= 0
    priorities[mask] = bins_remain_cap[mask] / (item + 1e-9) #Avoid division by zero. Higher cap / item ratio means higher priority
    
    #For bins that cannot accommodate, give negative priority
    priorities[~mask] = -np.inf
    
    
    # Introduce a bonus for bins that fit almost perfectly
    almost_full = (remaining_capacity >= 0) & (remaining_capacity <= 0.1 * bins_remain_cap) 
    priorities[almost_full] += 1.0  # Add a constant bonus
    
    
    return priorities
```
