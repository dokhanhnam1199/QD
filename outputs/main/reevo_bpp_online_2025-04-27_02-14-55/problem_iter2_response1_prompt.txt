{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # First-Fit-Decreasing-like prioritization: prioritize bins that can accommodate the item\n    # and are relatively full already\n    \n    valid_bins = bins_remain_cap >= item\n    \n    if np.any(valid_bins):\n        priorities[valid_bins] = bins_remain_cap[valid_bins] # Larger the remain cap, higher priority. Try to fill bigger bins\n\n        #priorities[valid_bins] = 1/(bins_remain_cap[valid_bins] - item + 1e-9)  # Higher priority to bins with minimal waste.\n\n        # Prioritize bins which are closer to full with a boost. The idea here is\n        # that partially-filled bins should be reserved for later objects with appropriate sizes.\n        \n        #priorities[valid_bins] = 1.0/(bins_remain_cap[valid_bins]/bins_remain_cap[valid_bins].max()) # try normalizing, higher priority given to bins that are almost full\n\n        #priorities[valid_bins] = (1 - (bins_remain_cap[valid_bins]/bins_remain_cap.max())) # Fill bigger bins as they appear.\n\n        #priorities[valid_bins] = (1-item/bins_remain_cap[valid_bins])# Try to pack bins closer to be filled.\n\n    else:\n        # No suitable bin found\n        priorities = np.zeros_like(bins_remain_cap, dtype=float)\n        # Give a negative priority so that a new bin is always created.\n        priorities[:] = -1.0 # or -np.inf if np.inf does not hurt.\n        # or just the lowest remaining cap bin is prioritized.\n        # priorities[np.argmin(bins_remain_cap)] = 1.0\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Calculate the remaining capacity after adding the item\n    remaining_capacity = bins_remain_cap - item\n    \n    # Give a high priority to bins that can accommodate the item\n    # but would have low remaining capacity afterward.\n    mask = remaining_capacity >= 0\n    priorities[mask] = bins_remain_cap[mask] / (item + 1e-9) #Avoid division by zero. Higher cap / item ratio means higher priority\n    \n    #For bins that cannot accommodate, give negative priority\n    priorities[~mask] = -np.inf\n    \n    \n    # Introduce a bonus for bins that fit almost perfectly\n    almost_full = (remaining_capacity >= 0) & (remaining_capacity <= 0.1 * bins_remain_cap) \n    priorities[almost_full] += 1.0  # Add a constant bonus\n    \n    \n    return priorities\n\n[Reflection]\nThe better code prioritizes bins with low *relative* remaining capacity after packing and rewards almost-full bins.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}