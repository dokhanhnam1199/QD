```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit-Decreasing inspired: Prefer bins that can fit the item, and are most full after packing.
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        remaining_after_fit = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1 - (remaining_after_fit / np.max(bins_remain_cap)) # Prioritize smaller remainders
        priorities[fit_mask] += 0.5 # Boost priority for bins that can fit

    # If no bin fits, try to put it in the emptiest bin, and penalize a lot
    else:
        min_cap = np.max(bins_remain_cap)
        priorities = (bins_remain_cap/ min_cap) * (-1)  # Significant negative penalty for not fitting
        

    return priorities
```
