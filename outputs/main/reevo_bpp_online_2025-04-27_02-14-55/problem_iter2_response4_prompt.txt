{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heuristic 1: Prefer bins where the item fits (First Fit Decreasing inspired)\n    fit_mask = bins_remain_cap >= item\n    priorities[fit_mask] += 1\n\n    # Heuristic 2: Minimize wasted space (Best Fit inspired)\n    wasted_space = bins_remain_cap - item\n    wasted_space[wasted_space < 0] = np.inf  # Ignore bins where item doesn't fit\n    priorities[fit_mask] += 1 / (wasted_space[fit_mask] + 0.00001)  # Avoid division by zero\n    \n    # Heuristic 3: Normalize priority values by bin remaining capacity (Utilize space as much as possible)\n    priorities = priorities * (bins_remain_cap / np.sum(bins_remain_cap)) # Bins with greater remaining cap get priority\n\n    # Heuristic 4: Apply a small penalty for bins that are almost full to prevent creating tiny, almost-empty bins at the end.\n    almost_full = (bins_remain_cap > 0) & (bins_remain_cap < 2*item) #Try avoid filling the smalles amount when possible.\n    priorities[almost_full] *= 0.9\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Calculate remaining capacity after adding the item\n    remaining_capacities = bins_remain_cap - item\n    \n    # Assign high priority to bins where the item fits, and low to those where it doesn't.\n    fit_mask = remaining_capacities >= 0\n    \n    # For fitting bins, prioritize those with tighter fit (smaller remaining capacity)\n    priorities[fit_mask] = 1 / (remaining_capacities[fit_mask] + 1e-6) # Add a small constant to avoid division by zero\n\n    # Introduce a bonus for bins that become nearly full (e.g., >90% full) after adding the item.\n    nearly_full_mask = (bins_remain_cap - item) / bins_remain_cap < 0.1\n    priorities[nearly_full_mask & fit_mask] *= 2  # Double the priority if it is nearly full.\n\n    # Penalize bins that have very high remaining capacity, even if the item fits\n    # This encourages filling bins more uniformly and avoids bins with very low utilization\n    large_capacity_mask = bins_remain_cap > 2 * item\n    priorities[large_capacity_mask & fit_mask] *= 0.5 # Halve the priority if it has a lot of capacity\n\n    return priorities\n\n[Reflection]\nPrioritize tight fits and near-full bins. Discourage underutilized and almost-full bins directly using thresholds.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}