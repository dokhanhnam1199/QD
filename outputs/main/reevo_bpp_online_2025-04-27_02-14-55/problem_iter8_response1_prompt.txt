{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Highest priority: Exact fit\n    exact_fit = (bins_remain_cap == item)\n    priorities[exact_fit] = 1000.0\n\n    # High priority: Almost fit (small remaining space)\n    almost_fit = (bins_remain_cap >= item) & (bins_remain_cap <= (1.1 * item))  # relaxed almost fit\n    priorities[almost_fit] = 750.0\n\n    # Feasibility check and heavy penalty for infeasible bins\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -1e9  # Very strong penalty\n\n    # Dynamic Fill Ratio reward with gaussian curve\n    can_accommodate = (bins_remain_cap >= item)\n    if np.any(can_accommodate):\n        fill_ratio = item / bins_remain_cap[can_accommodate]\n        optimal_fill_ratio = 0.9 # Target a near-perfect fill\n        gaussian_reward = np.exp(-0.5 * ((fill_ratio - optimal_fill_ratio) / 0.1) ** 2)\n        priorities[can_accommodate] += gaussian_reward * 500.0\n\n        # Fragmentation Penalty - Scaled by item size, larger items incur larger penalty for wasting space.\n        waste = bins_remain_cap[can_accommodate] - item\n        fragmentation_penalty = -100 * (waste / np.max(bins_remain_cap)) * (item / np.max(bins_remain_cap))\n        priorities[can_accommodate] += fragmentation_penalty\n\n        # Matching Similar Item Reward\n        # Check the existing usage of each bin\n        existing_item_sizes = np.max(bins_remain_cap) - bins_remain_cap[can_accommodate]  # Assuming max capacity is a known const\n        if np.any(existing_item_sizes > 0):\n            similarity = np.exp(-0.5 * ((item - existing_item_sizes) / (0.2 * np.max(bins_remain_cap)))**2)\n            priorities[can_accommodate] += similarity * 150 # Matching reward\n\n    # Small boost for using non-empty bins (encourage filling existing bins)\n    non_empty = bins_remain_cap < np.max(bins_remain_cap)\n    priorities[non_empty] += 50.0\n\n    # Discourage bins with significantly more capacity than the item size. less strict.\n    large_capacity = (bins_remain_cap >= item) & (bins_remain_cap > 1.5 * item)\n    priorities[large_capacity] -= 50 # Reduced penalty\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    can_fit = bins_remain_cap >= item\n\n    if np.any(can_fit):\n        remaining_after_fit = bins_remain_cap[can_fit] - item\n\n        # Prioritize tight fits (high fill ratio). Use item size for relative comparison.\n        fill_ratio = item / (bins_remain_cap[can_fit] + 1e-9) # avoid division by zero\n        priorities[can_fit] = fill_ratio\n\n        # Substantially reward bins that are almost full\n        almost_full = remaining_after_fit < 0.1 * item\n        priorities[can_fit][almost_full] += 5.0  # Increased reward for almost full\n\n        # Dynamically penalize fragmentation, scaled by item size.\n        priorities[can_fit] -= 0.5 * (remaining_after_fit / item)\n\n        # Give a slight preference to bins that are already partially filled.\n        already_used = bins_remain_cap < np.max(bins_remain_cap)\n        priorities[can_fit & already_used] += 0.2\n    else:\n        # If no bin can fit the item, penalize heavily to force a new bin.\n        priorities = np.full_like(bins_remain_cap, -1e9)\n\n    return priorities\n\n[Reflection]\nSimpler, relative metrics (fill ratio, scaled fragmentation) and direct rewards/penalties outperform complex rules and fixed constants.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}