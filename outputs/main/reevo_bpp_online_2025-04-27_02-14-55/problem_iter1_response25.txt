```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Very high priority for bins that can fit the item almost perfectly (First-Fit Decreasing style)
    fit_threshold = 0.95
    perfect_fit = (bins_remain_cap >= item) & (bins_remain_cap <= item / fit_threshold)
    priorities[perfect_fit] = 1000

    # Bins that can fit the item, but are not the "perfect fit", get a medium priority score based on remaining space
    can_fit = bins_remain_cap >= item
    priorities[can_fit] = 100 / (bins_remain_cap[can_fit] - item + 0.001) # Avoid division by zero

    # Bins that cannot fit the item get the lowest priority (0).

    return priorities
```
