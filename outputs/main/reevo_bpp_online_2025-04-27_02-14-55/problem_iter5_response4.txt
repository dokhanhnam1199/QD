```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Infeasible bins get a very low priority
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -1e9  # Large negative number

    # Exact fit: highest priority
    exact_fit = bins_remain_cap == item
    priorities[exact_fit] = 1e9

    # Near fit: high priority
    near_fit = (bins_remain_cap >= item) & (bins_remain_cap <= item * 1.05)
    priorities[near_fit] = 1e8

    # Gaussian reward based on remaining capacity ratio
    capacity_ratio = np.where(bins_remain_cap >= item, item / bins_remain_cap, 0)
    gaussian_reward = np.exp(-0.5 * ((capacity_ratio - 1) / 0.1) ** 2) * 1e7 #Adjust params
    priorities[bins_remain_cap >= item] += gaussian_reward[bins_remain_cap >= item]

    # Penalize wasted space based on item size
    wasted_space = np.where(bins_remain_cap >= item, bins_remain_cap - item, 0)
    space_penalty = wasted_space / item * 1e6
    priorities[bins_remain_cap >= item] -= space_penalty[bins_remain_cap >= item]

    # Bonus for bins close to full before adding the item, encourages use
    nearly_full = (bins_remain_cap > item) & (bins_remain_cap <= 1.5 * item)
    priorities[nearly_full] += 1e5

    # Prioritize smaller available capacity when possible
    priorities[bins_remain_cap >= item] -= bins_remain_cap[bins_remain_cap >= item] * 10

    return priorities
```
