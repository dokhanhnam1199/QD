```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # Assign high priority to bins where the item fits, and low to those where it doesn't.
    fit_mask = remaining_capacities >= 0
    
    # For fitting bins, prioritize those with tighter fit (smaller remaining capacity)
    priorities[fit_mask] = 1 / (remaining_capacities[fit_mask] + 1e-6) # Add a small constant to avoid division by zero

    # Introduce a bonus for bins that become nearly full (e.g., >90% full) after adding the item.
    nearly_full_mask = (bins_remain_cap - item) / bins_remain_cap < 0.1
    priorities[nearly_full_mask & fit_mask] *= 2  # Double the priority if it is nearly full.

    # Penalize bins that have very high remaining capacity, even if the item fits
    # This encourages filling bins more uniformly and avoids bins with very low utilization
    large_capacity_mask = bins_remain_cap > 2 * item
    priorities[large_capacity_mask & fit_mask] *= 0.5 # Halve the priority if it has a lot of capacity

    return priorities
```
