```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Very large negative number to ensure bins that can't fit are avoided
    infeasible_penalty = -1e9

    for i, cap in enumerate(bins_remain_cap):
        if item > cap:
            priorities[i] = infeasible_penalty  # Heavily penalize infeasible bins
        else:
            # First-Fit Decreasing Inspired: Prefer bins with capacity close to item size
            # but also penalize bins with too little space remaining *after* placement
            remaining_space_after_placement = cap - item
            
            # High priority to bins that fit the item closely but not too closely.
            # Quadratic penalty based on space remaining after placement to discourage fragmentation
            # Also favor bins close to the item size *before* placement.
            priorities[i] =  (1 / (0.01 + np.abs(cap - item))) - (remaining_space_after_placement**2)  # Penalize wastage and bins far from item size


    return priorities
```
