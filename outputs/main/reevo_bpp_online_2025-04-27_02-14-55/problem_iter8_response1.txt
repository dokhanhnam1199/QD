```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        remaining_after_fit = bins_remain_cap[can_fit] - item

        # Primary Priority: Fill Ratio (relative to item size)
        fill_ratio = item / bins_remain_cap[can_fit]
        priorities[can_fit] = fill_ratio

        # Reward bins that become very full after placement
        almost_full = remaining_after_fit < 0.05 * item
        priorities[can_fit][almost_full] += 2.0

        # Penalty for fragmentation, scaled relative to item size
        fragmentation_penalty = remaining_after_fit / item
        priorities[can_fit] -= 0.75 * fragmentation_penalty # Increased penalty weight

        # Encourage use of partially filled bins
        already_used = bins_remain_cap < np.max(bins_remain_cap)
        priorities[can_fit & already_used] += 0.3 # Slightly increased reward

        # Discourage very large remaining capacity, relative to item
        large_capacity = remaining_after_fit > item
        priorities[can_fit][large_capacity] -= 0.25 # Small discouragement
    else:
        # Strong penalty if no bin can fit
        priorities = np.full_like(bins_remain_cap, -1e9)

    return priorities
```
