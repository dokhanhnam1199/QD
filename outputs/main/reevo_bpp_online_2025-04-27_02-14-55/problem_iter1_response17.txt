```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit-Decreasing heuristic inspired
    # Prefer bins that can fit the item
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1  # Give a base priority to bins that can fit

    # Try to fill bins as much as possible but not overfill
    fill_ratio = item / bins_remain_cap
    
    # Higher fill ratio is better, but only for fitting bins. If it does not fit then make fill ratio negative.
    priorities[fit_mask] += fill_ratio[fit_mask]
    priorities[~fit_mask] -= fill_ratio[~fit_mask]

    # Bonus for bins that are almost full after packing
    remaining_after_pack = bins_remain_cap - item
    almost_full_mask = (remaining_after_pack >= 0) & (remaining_after_pack <= 0.1)  # Adjust threshold as needed
    priorities[almost_full_mask] += 2

    return priorities
```
