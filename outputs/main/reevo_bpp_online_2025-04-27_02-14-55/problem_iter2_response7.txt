```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First Fit Decreasing variant - prioritize bins that can fit the item reasonably well
    # without leaving too much or too little space.
    fit_mask = bins_remain_cap >= item

    if np.any(fit_mask):
        remaining_after_fit = bins_remain_cap[fit_mask] - item
        # Prioritize bins where the remaining space is relatively small, but not too small
        # to avoid creating bins with extremely small utilization.

        # Calculate mean and stddev only if there are at least two valid bins
        if len(remaining_after_fit) > 1:
            mean_remaining = np.mean(remaining_after_fit)
            std_remaining = np.std(remaining_after_fit)
            priorities[fit_mask] = np.exp(-np.abs(remaining_after_fit - mean_remaining) / (std_remaining + 1e-9))  # Gaussian-like priority
        else:
            priorities[fit_mask] = 1.0  # If only one bin fits, prioritize it.

        #Prioritize almost full bins even more if there are multiple candidates to fit
        almost_full_threshold = 0.1 # 10% of bin size remaining, can be tuned
        almost_full_mask = remaining_after_fit <= almost_full_threshold * bins_remain_cap[fit_mask] #Avoid zero division
        priorities[fit_mask][almost_full_mask] *= 2 #Higher boost if almost full

    #If no bins can fit the item, de-prioritize all of them heavily (or slightly prioritize the emptiest) to postpone opening a new bin
    else:
        #This version de-prioritizes all current bins instead of slightly prioritizing the emptiest one.
        priorities = -np.ones_like(bins_remain_cap) * 1000

        #Uncomment for a slight prioritization of the emptiest
        #max_remaining_capacity = np.max(bins_remain_cap)
        #priorities = bins_remain_cap / max_remaining_capacity - 10 # small value

    return priorities
```
