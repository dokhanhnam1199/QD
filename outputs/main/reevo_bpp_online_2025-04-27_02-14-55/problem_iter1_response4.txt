```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give higher priority to bins that can accommodate the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1

    # Prioritize bins where the item fills a large portion of the remaining capacity,
    # but not too much (to avoid creating many almost-empty bins)
    fill_ratio = item / bins_remain_cap
    priorities[can_fit] += np.clip(fill_ratio[can_fit], 0, 0.9) # only considering those where item can fit
    
    # Penalize bins that have very little remaining capacity even if the item fits
    small_capacity = bins_remain_cap < (item * 1.1) # checking for edge case where item fits just barely
    priorities[small_capacity & can_fit] -= 0.2 # reduce its score if the remaining space is very tight.
    
    # For bins that cannot fit the item, assign a very low priority
    priorities[~can_fit] = -1000
    
    return priorities
```
