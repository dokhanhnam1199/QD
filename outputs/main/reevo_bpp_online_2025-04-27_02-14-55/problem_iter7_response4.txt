```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Highest priority: Exact fit
    exact_fit = (bins_remain_cap == item)
    priorities[exact_fit] = 1000.0

    # High priority: Almost fit (small remaining space)
    almost_fit = (bins_remain_cap >= item) & (bins_remain_cap <= (1.1 * item))  # Slightly relaxed almost fit
    priorities[almost_fit] = 750.0

    # Feasibility check and heavy penalty for infeasible bins
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -1e9  # Very strong penalty

    # Medium priority: Fits well, minimize wasted space using capacity ratio
    can_accommodate = (bins_remain_cap >= item)
    if np.any(can_accommodate):
        capacity_ratio = item / bins_remain_cap[can_accommodate]
        # Gaussian reward centered around ideal capacity ratio, tighter std
        gaussian_reward = np.exp(-0.5 * ((capacity_ratio - 1.0) / 0.05) ** 2)  # Adjust std for sensitivity, tighter
        priorities[can_accommodate] += gaussian_reward * 500.0

        # Adjust priority based on item size
        item_size_ratio = item / np.max(bins_remain_cap)  # relative size of the item.
        priorities[can_accommodate] += item_size_ratio * 100

    # Small boost for using non-empty bins (encourage filling existing bins)
    non_empty = bins_remain_cap < np.max(bins_remain_cap)
    priorities[non_empty] += 50.0

    # Discourage bins with significantly more capacity than the item size.  Stronger penalty.
    large_capacity = (bins_remain_cap >= item) & (bins_remain_cap > 1.5 * item)
    priorities[large_capacity] -= item * 50  # Scale penalty by item size

    # Bonus for bins that can accommodate multiple items of similar size after fitting, more accurate
    if np.any(can_accommodate):
        remaining_capacity_after_fit = bins_remain_cap[can_accommodate] - item
        potential_items = np.floor(remaining_capacity_after_fit / item)  # Number of items potentially fit
        priorities[can_accommodate] += potential_items * item * 25  # Scale bonus by item size and potential items

    # Penalty for fragmentation - scale penalty by wasted space and item size.
    fragmentation = (bins_remain_cap >= item)
    if np.any(fragmentation):
        wasted_space = bins_remain_cap[fragmentation] - item
        priorities[fragmentation] -= wasted_space * item * 10 # scale penalty by wasted space and item.

    return priorities
```
