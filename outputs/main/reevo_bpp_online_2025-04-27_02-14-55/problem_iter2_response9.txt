```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit-Decreasing inspired heuristic: Prefer bins that can accommodate the item
    # and have the least remaining capacity AFTER placing the item.

    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        remaining_after_fit = bins_remain_cap[can_fit] - item
        
        # Prioritize tight fits: High fill ratio is good
        fill_ratio = item / bins_remain_cap[can_fit]
        priorities[can_fit] = fill_ratio 

        # Bonus for bins that are nearly full after placing the item
        nearly_full = remaining_after_fit < 0.1 * item  #Arbitrary threshold.
        priorities[can_fit][nearly_full] += 1  # Significant bonus for nearly full bins.

    else:
        # If no bins can fit, assign a very low priority so a new bin gets created, ideally
        priorities = np.full_like(bins_remain_cap, -1e9) # Very low priority
    
    return priorities
```
