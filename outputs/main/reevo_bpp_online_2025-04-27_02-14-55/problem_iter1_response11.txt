```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Base priority: higher remaining capacity is better (encourage filling emptier bins, but only if it fits)
            priorities[i] = cap

            # Small adjustments for item size relative to bin size
            fill_ratio = item / cap
            if fill_ratio > 0.75: #If it occupies a lot of the bin give a boost.
                priorities[i] *= 1.2 #A good fit.
            elif fill_ratio < 0.25: # discourage bins that barely get filled by this item.
                 priorities[i] *= 0.9

            #Penalize nearly full bins: prioritize using bins with substantial space
            if cap - item < 0.1: #avoids placing item if bin is almost full.
                priorities[i] = -1  # Very low priority because this will overfill, or get very close.

        else:
            priorities[i] = -np.inf  # Cannot fit; lowest priority
    return priorities
```
