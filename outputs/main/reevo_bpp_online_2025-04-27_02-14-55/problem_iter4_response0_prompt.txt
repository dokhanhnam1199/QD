{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_size = 1.0  # Assuming bin size is 1.0, adjust if different\n\n    # Infeasible bins get a very low priority\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -1e9\n\n    # Feasible bins\n    feasible_mask = ~infeasible_mask\n\n    if np.any(feasible_mask): #Only calcualte if we have a feasible bin\n\n        # Capacity ratio: reward tighter fits\n        capacity_ratio = item / bin_size\n        priorities[feasible_mask] += capacity_ratio\n\n        # Reward near-full bins using a Gaussian-like distribution\n        remaining_after_fit = bins_remain_cap[feasible_mask] - item\n        mu = 0  # Mean at 0 remaining\n        sigma = 0.2 * bin_size # Standard deviation scaled to bin size\n        gaussian_priority = np.exp(-((remaining_after_fit - mu) ** 2) / (2 * sigma ** 2))\n        priorities[feasible_mask] += gaussian_priority\n        \n        # Normalize priorities to make sure no bin is selected with very high magnitude if not needed\n        priorities[feasible_mask] /= np.max(priorities[feasible_mask])\n        \n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Highest priority: Exact fit\n    immediate_fit = (bins_remain_cap == item)\n    priorities[immediate_fit] = 1000.0\n\n    # High priority: Almost fit (small remaining space)\n    almost_fit = (bins_remain_cap >= item) & (bins_remain_cap <= (1.1 * item))\n    priorities[almost_fit] = 750.0\n\n    # Medium priority: Fits well, minimize wasted space\n    can_accommodate = (bins_remain_cap >= item)\n    if np.any(can_accommodate):  # Avoid division by zero if no bin can accommodate\n        wasted_space = bins_remain_cap[can_accommodate] - item\n        # Prioritize bins where wasted space is minimal.  Invert and scale.\n        space_efficiency = 1.0 / (1.0 + wasted_space)  # Avoid division by zero\n        priorities[can_accommodate] += space_efficiency * 500.0  # Scale and add\n\n    # Penalize bins that are nearly full but can't fit the item\n    near_full = (bins_remain_cap < item) & (bins_remain_cap > 0.9 * item)\n    priorities[near_full] = -500.0\n\n    # Small boost for using non-empty bins (encourage filling existing bins)\n    non_empty = bins_remain_cap < np.max(bins_remain_cap)\n    priorities[non_empty] += 50.0\n    \n    # Discourage bins with significantly more capacity than the item size.\n    large_capacity = (bins_remain_cap >= item) & (bins_remain_cap > 2 * item)\n    priorities[large_capacity] -= 100\n\n    return priorities\n\n[Reflection]\nExplicitly reward exact/almost fits, penalize near-misses, and consider wasted space for better packing.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}