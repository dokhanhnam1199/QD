```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = 1.0  # Assuming bin size is 1.0, adjust if different

    # Infeasible bins get a very low priority
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -1e9

    # Feasible bins
    feasible_mask = ~infeasible_mask

    if np.any(feasible_mask): #Only calculate if we have a feasible bin

        # Capacity ratio: reward tighter fits
        capacity_ratio = item / bins_remain_cap[feasible_mask] #Divide by remaining cap
        priorities[feasible_mask] += capacity_ratio

        # Reward near-full bins using a Gaussian-like distribution
        remaining_after_fit = bins_remain_cap[feasible_mask] - item
        mu = 0  # Mean at 0 remaining
        sigma = 0.2 * bin_size  # Standard deviation scaled to bin size
        gaussian_priority = np.exp(-((remaining_after_fit - mu) ** 2) / (2 * sigma ** 2))
        priorities[feasible_mask] += gaussian_priority

        # Normalize priorities to avoid extreme values and biases
        max_priority = np.max(priorities[feasible_mask])
        if max_priority > 0:
            priorities[feasible_mask] /= max_priority

    return priorities
```
