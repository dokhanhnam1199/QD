{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Infeasibility: Strong negative penalty if bin cannot accommodate item.\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -1e7\n\n    # 2. Exact Fit: Extremely high priority.\n    exact_fit = (bins_remain_cap == item)\n    priorities[exact_fit] = 1e6\n\n    # 3. Very Close Fit: High priority, minimal waste.\n    very_close_fit = (bins_remain_cap >= item) & (bins_remain_cap <= item + 0.001)\n    priorities[very_close_fit] = 1e5\n\n    # 4. Close Fit: Good priority, but less than very close.\n    close_fit = (bins_remain_cap >= item) & (bins_remain_cap <= 1.02 * item)\n    priorities[close_fit] = 1e4\n\n    # 5. Moderate Priority: Fits, but directly penalize wasted space.\n    can_accommodate = bins_remain_cap >= item\n    if np.any(can_accommodate):\n        wasted_space = bins_remain_cap[can_accommodate] - item\n        # Directly penalize wasted space, scaling down the penalty.\n        priorities[can_accommodate] -= wasted_space * 1000  # Higher penalty factor\n\n    # 6. Penalize near-full but infeasible bins.  More aggressive penalty.\n    near_full_infeasible = (bins_remain_cap < item) & (bins_remain_cap > 0.9 * item)\n    priorities[near_full_infeasible] = -5e6\n\n    # 7. Encourage using non-empty bins (if it fits).\n    non_empty_and_fits = (bins_remain_cap < np.max(bins_remain_cap)) & can_accommodate\n    priorities[non_empty_and_fits] += 500\n\n    # 8. Discourage large empty space relative to item size.\n    large_empty_space = (bins_remain_cap >= item) & ((bins_remain_cap - item) > 2 * item)\n    priorities[large_empty_space] -= 1000\n\n    # 9. Slight penalty for bins with *significantly* more capacity than the item.\n    significantly_larger = (bins_remain_cap >= item) & (bins_remain_cap > 4 * item)\n    priorities[significantly_larger] -= 200\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Highest priority: Exact fit\n    exact_fit = (bins_remain_cap == item)\n    priorities[exact_fit] = 1000.0\n\n    # High priority: Near perfect fit, scaled by item size\n    near_perfect_fit_threshold = 0.05  # Define a threshold for \"near perfect\"\n    near_perfect_fit = (bins_remain_cap >= item) & (bins_remain_cap <= item * (1 + near_perfect_fit_threshold))\n    priorities[near_perfect_fit] = 900.0 - (bins_remain_cap[near_perfect_fit] - item) / item * 150  # Scale based on waste, reduced scaling factor\n\n    # Feasibility check and HUGE penalty for infeasible bins\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -1e10  # Even stronger penalty\n\n    # Dynamic Fill Ratio Reward: Gaussian around optimal fill, scaled heavily\n    can_accommodate = (bins_remain_cap >= item)\n    if np.any(can_accommodate):\n        fill_ratio = item / bins_remain_cap[can_accommodate]\n        gaussian_std = 0.1 # Adjust std for the gaussian curve, widened\n        gaussian_reward = np.exp(-0.5 * ((fill_ratio - 1.0) / gaussian_std) ** 2)\n        priorities[can_accommodate] += gaussian_reward * 700.0 # Scale Gaussian reward aggressively, reduced scaling\n\n    # Fragmentation Penalty: Penalize creating small remaining spaces\n    small_space_threshold = 0.2 # Increased threshold\n    fragmented_bins = (bins_remain_cap >= item) & ((bins_remain_cap - item) <= small_space_threshold * np.max(bins_remain_cap))\n    if np.any(fragmented_bins):\n        waste = bins_remain_cap[fragmented_bins] - item\n        penalty = (waste / (small_space_threshold * np.max(bins_remain_cap))) * 300  # Scale penalty, reduced scaling\n        priorities[fragmented_bins] -= penalty\n\n    # Encourage using existing bins, more heavily\n    non_empty = bins_remain_cap < np.max(bins_remain_cap)\n    priorities[non_empty] += 100.0 # Increased reward\n\n    # Similarity Bonus: Reward bins with similar-sized items. This is a basic approach and can be further improved.\n    # This version doesn't track items already in bins, so it uses remaining capacity as a proxy.\n    similarity_threshold = 0.3\n    similar_size = np.abs(bins_remain_cap - item) <= similarity_threshold * item  # Tolerance for similarity\n    priorities[similar_size & can_accommodate] += 80.0 # Increased reward\n\n    # Discourage bins with way more capacity than the item size, more aggressive penalty\n    large_capacity = (bins_remain_cap >= item) & (bins_remain_cap > 2.5 * item) # Increased factor\n    priorities[large_capacity] -= 90 # Increase the penalty\n\n    # Further incentivize filling nearly full bins\n    nearly_full = (bins_remain_cap > item) & (bins_remain_cap < item * 1.2)\n    priorities[nearly_full] += 50\n\n    return priorities\n\n[Reflection]\nPrioritize exact/near fits with scaled rewards/penalties. Dynamically adjust penalties based on item/bin sizes.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}