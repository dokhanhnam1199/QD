```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Highest priority: Exact fit
    exact_fit = (bins_remain_cap == item)
    priorities[exact_fit] = 1000.0

    # High priority: Near fit (small remaining space)
    near_fit = (bins_remain_cap >= item) & (bins_remain_cap <= (1.2 * item))
    priorities[near_fit] = 750.0

    # Medium priority: Fits well, minimize wasted space.  Also avoid creating excessive small spaces.
    can_accommodate = (bins_remain_cap >= item)
    if np.any(can_accommodate):
        wasted_space = bins_remain_cap[can_accommodate] - item
        # Prioritize bins where wasted space is minimal, but penalize very small wastes.
        space_efficiency = 1.0 / (1.0 + wasted_space)
        priorities[can_accommodate] += space_efficiency * 500.0

        #Penalty for very small space
        very_small_space = wasted_space < 0.1 * item
        priorities[can_accommodate[very_small_space]] -= 200 #Reduced penalty

    # Penalize bins that are nearly full but can't fit the item
    near_full = (bins_remain_cap < item) & (bins_remain_cap > 0.8 * item)
    priorities[near_full] = -500.0

    # Small boost for using non-empty bins (encourage filling existing bins)
    non_empty = bins_remain_cap < np.max(bins_remain_cap)
    priorities[non_empty] += 50.0

    # Discourage bins with significantly more capacity than the item size.
    large_capacity = (bins_remain_cap >= item) & (bins_remain_cap > 2.5 * item)
    priorities[large_capacity] -= 150

    # Bonus for bins that can accommodate multiple items of similar size after fitting
    if np.any(can_accommodate):
        remaining_capacity_after_fit = bins_remain_cap[can_accommodate] - item
        potential_items = np.floor(remaining_capacity_after_fit / item)
        priorities[can_accommodate] += potential_items * 35  # Increased Bonus

    #Very small penalty to bins with larger indices to reduce fragmentation
    priorities -= np.linspace(0, 10, num=len(bins_remain_cap))


    return priorities
```
