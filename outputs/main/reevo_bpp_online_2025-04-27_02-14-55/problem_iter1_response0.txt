```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Prioritize bins where the item fits
    fit_indices = bins_remain_cap >= item
    priorities[fit_indices] = 1

    # For bins where the item doesn't fit, assign a negative priority
    # related to how close the item is to fitting (avoid these bins)
    no_fit_indices = ~fit_indices
    priorities[no_fit_indices] = - (item - bins_remain_cap[no_fit_indices])  # Negative distance to fit
    priorities[no_fit_indices] = np.clip(priorities[no_fit_indices], -item*2 , 0)


    # Among bins that fit, prioritize bins that would result in a higher utilization
    # without exceeding capacity
    utilization = item / bins_remain_cap[fit_indices]

    # Give preference to bins that have lowest remaining capacity, but can fit item.
    priorities[fit_indices] += (1 - bins_remain_cap[fit_indices] / np.max(bins_remain_cap)) 


    return priorities
```
