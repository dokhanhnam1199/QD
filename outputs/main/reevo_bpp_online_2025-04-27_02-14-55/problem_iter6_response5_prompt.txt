{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_count = bins_remain_cap.size\n\n    # 1. Infeasibility penalty: Huge negative value if bin cannot accommodate item.\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -1e9\n\n    # 2. Exact Fit: Extremely high priority.\n    exact_fit = (bins_remain_cap == item)\n    priorities[exact_fit] = 1e9\n\n    # 3. Near Fit: High priority, with a score based on closeness.\n    near_fit = (bins_remain_cap >= item) & (bins_remain_cap <= 1.05 * item) #tolerate up to 5% waste\n    priorities[near_fit] = 1e8 * (1 - (bins_remain_cap[near_fit] - item) / item)  # Higher if closer to exact\n\n    # 4. Gaussian Reward for utilization: Reward bins with capacity close to item size\n    can_accommodate = bins_remain_cap >= item\n    if np.any(can_accommodate):\n        utilization = item / bins_remain_cap[can_accommodate]\n        # Gaussian centered around ideal utilization (close to 1), scaled by item size.\n        gaussian_reward = 1e7 * np.exp(-0.5 * ((utilization - 0.95) / 0.1) ** 2) * item #aiming 95% capacity\n        priorities[can_accommodate] += gaussian_reward\n\n\n    # 5. Penalty for large empty space if the item is small relative to the bin size\n    small_item_large_bin = (bins_remain_cap >= item) & (item < 0.5 * np.max(bins_remain_cap))\n    if np.any(small_item_large_bin):\n      empty_space_ratio = (bins_remain_cap[small_item_large_bin] - item) / bins_remain_cap[small_item_large_bin]\n      priorities[small_item_large_bin] -= 1e6 * empty_space_ratio  # Penalize more if more space wasted\n\n    #6. Prioritize using existing bins: small additive constant.\n    non_empty = bins_remain_cap < np.max(bins_remain_cap)\n    priorities[non_empty] += 1000\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Highest priority: Exact fit\n    exact_fit = (bins_remain_cap == item)\n    priorities[exact_fit] = 1000.0\n\n    # High priority: Very close fit (minimal waste)\n    very_close_fit = (bins_remain_cap >= item) & (bins_remain_cap <= item + 0.05) #tolerance of 0.05\n    priorities[very_close_fit] = 800.0\n\n    # High priority: Almost fit (small remaining space)\n    almost_fit = (bins_remain_cap >= item) & (bins_remain_cap <= (1.1 * item))\n    priorities[almost_fit] = 750.0\n\n    # Medium priority: Fits well, minimize wasted space\n    can_accommodate = (bins_remain_cap >= item)\n    if np.any(can_accommodate):  # Avoid division by zero if no bin can accommodate\n        wasted_space = bins_remain_cap[can_accommodate] - item\n        # Prioritize bins where wasted space is minimal.  Invert and scale.\n        space_efficiency = 1.0 / (1.0 + wasted_space)  # Avoid division by zero\n        priorities[can_accommodate] += space_efficiency * 500.0  # Scale and add\n\n    # Penalize bins that are nearly full but can't fit the item\n    near_full = (bins_remain_cap < item) & (bins_remain_cap > 0.9 * item)\n    priorities[near_full] = -500.0\n\n     # Strong penalty for bins that are too small.\n    too_small = bins_remain_cap < item\n    priorities[too_small] = -1000.0\n   \n    # Small boost for using non-empty bins (encourage filling existing bins), but only if it fits.\n    non_empty_and_fits = (bins_remain_cap < np.max(bins_remain_cap)) & can_accommodate\n    priorities[non_empty_and_fits] += 50.0\n    \n    # Discourage bins with significantly more capacity than the item size.\n    large_capacity = (bins_remain_cap >= item) & (bins_remain_cap > 2 * item)\n    priorities[large_capacity] -= 100\n\n    # Slightly discourage bins that will be very empty after adding the item\n    very_empty_after = (bins_remain_cap - item) > 0.75 * np.max(bins_remain_cap) # Check if remaining capacity is high relative to max capacity\n    priorities[can_accommodate & very_empty_after] -= 25\n\n    return priorities\n\n[Reflection]\nPrioritize exact/close fits with fixed rewards; penalize waste and infeasibility more consistently.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}