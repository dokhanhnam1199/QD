```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit-Decreasing inspired: Prefer bins that can fit the item.
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1

    # Reward bins with capacity close to item size (minimize waste).
    waste = bins_remain_cap - item
    waste[waste < 0] = np.inf  # Ignore bins that can't fit.
    priorities[can_fit] += np.exp(-waste[can_fit]) # Exponential decay penalizes waste.
    
    # Penalize bins close to full even if the item fits (avoid making them unusable).
    almost_full = (bins_remain_cap <= 1.2 * item) & (bins_remain_cap >= item) #tune parameter
    priorities[almost_full] -= 0.5  # Small penalty, can be tuned

    #Prioritize bins that have more space, but only when the item actually fits

    priorities[can_fit] += bins_remain_cap[can_fit]/np.max(bins_remain_cap) * 0.1 #normalize remaining cap and scale down

    #Give small reward to completely empty bins when possible (restart strategy)
    empty = bins_remain_cap == np.max(bins_remain_cap)

    priorities[empty & can_fit] += 0.2

    return priorities
```
