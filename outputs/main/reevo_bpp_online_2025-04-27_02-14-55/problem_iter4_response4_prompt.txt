{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First Fit Decreasing variant - prioritize bins that can fit the item reasonably well\n    # without leaving too much or too little space.\n    fit_mask = bins_remain_cap >= item\n\n    if np.any(fit_mask):\n        remaining_after_fit = bins_remain_cap[fit_mask] - item\n        # Prioritize bins where the remaining space is relatively small, but not too small\n        # to avoid creating bins with extremely small utilization.\n\n        # Calculate mean and stddev only if there are at least two valid bins\n        if len(remaining_after_fit) > 1:\n            mean_remaining = np.mean(remaining_after_fit)\n            std_remaining = np.std(remaining_after_fit)\n            priorities[fit_mask] = np.exp(-np.abs(remaining_after_fit - mean_remaining) / (std_remaining + 1e-9))  # Gaussian-like priority\n        else:\n            priorities[fit_mask] = 1.0  # If only one bin fits, prioritize it.\n\n        #Prioritize almost full bins even more if there are multiple candidates to fit\n        almost_full_threshold = 0.1 # 10% of bin size remaining, can be tuned\n        almost_full_mask = remaining_after_fit <= almost_full_threshold * bins_remain_cap[fit_mask] #Avoid zero division\n        priorities[fit_mask][almost_full_mask] *= 2 #Higher boost if almost full\n\n    #If no bins can fit the item, de-prioritize all of them heavily (or slightly prioritize the emptiest) to postpone opening a new bin\n    else:\n        #This version de-prioritizes all current bins instead of slightly prioritizing the emptiest one.\n        priorities = -np.ones_like(bins_remain_cap) * 1000\n\n        #Uncomment for a slight prioritization of the emptiest\n        #max_remaining_capacity = np.max(bins_remain_cap)\n        #priorities = bins_remain_cap / max_remaining_capacity - 10 # small value\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate the remaining capacity after adding the item\n    remaining_capacity = bins_remain_cap - item\n\n    # Give a high priority to bins that can accommodate the item\n    # but would have low *relative* remaining capacity afterward.\n    mask = remaining_capacity >= 0\n    priorities[mask] = 1.0 - (remaining_capacity[mask] / bins_remain_cap[mask]) # Higher priority given to bins where remaining capacity is low relative to its original cap\n    \n    #For bins that cannot accommodate, give negative priority\n    priorities[~mask] = -np.inf\n\n    # Introduce a bonus for bins that fit almost perfectly\n    almost_full = (remaining_capacity >= 0) & (remaining_capacity <= 0.1 * bins_remain_cap)\n    priorities[almost_full] += 1.0  # Add a constant bonus\n\n    return priorities\n\n[Reflection]\nPrioritize relative remaining capacity. Heavily penalize bins that cannot fit. Add bonuses for near-perfect fits.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}