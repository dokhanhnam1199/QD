{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Highest priority: Exact fit\n    exact_fit = (bins_remain_cap == item)\n    priorities[exact_fit] = 1000.0\n\n    # High priority: Almost fit (small remaining space)\n    almost_fit = (bins_remain_cap >= item) & (bins_remain_cap <= (1.1 * item))  # Slightly relaxed almost fit\n    priorities[almost_fit] = 750.0\n\n    # Feasibility check and heavy penalty for infeasible bins\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -1e9  # Very strong penalty\n\n    # Medium priority: Fits well, minimize wasted space using capacity ratio\n    can_accommodate = (bins_remain_cap >= item)\n    if np.any(can_accommodate):\n        capacity_ratio = item / bins_remain_cap[can_accommodate]\n        # Gaussian reward centered around ideal capacity ratio, tighter std\n        gaussian_reward = np.exp(-0.5 * ((capacity_ratio - 1.0) / 0.05) ** 2)  # Adjust std for sensitivity, tighter\n        priorities[can_accommodate] += gaussian_reward * 500.0\n\n        # Adjust priority based on item size\n        item_size_ratio = item / np.max(bins_remain_cap)  # relative size of the item.\n        priorities[can_accommodate] += item_size_ratio * 100\n\n    # Small boost for using non-empty bins (encourage filling existing bins)\n    non_empty = bins_remain_cap < np.max(bins_remain_cap)\n    priorities[non_empty] += 50.0\n\n    # Discourage bins with significantly more capacity than the item size.  Stronger penalty.\n    large_capacity = (bins_remain_cap >= item) & (bins_remain_cap > 1.5 * item)\n    priorities[large_capacity] -= item * 50  # Scale penalty by item size\n\n    # Bonus for bins that can accommodate multiple items of similar size after fitting, more accurate\n    if np.any(can_accommodate):\n        remaining_capacity_after_fit = bins_remain_cap[can_accommodate] - item\n        potential_items = np.floor(remaining_capacity_after_fit / item)  # Number of items potentially fit\n        priorities[can_accommodate] += potential_items * item * 25  # Scale bonus by item size and potential items\n\n    # Penalty for fragmentation - scale penalty by wasted space and item size.\n    fragmentation = (bins_remain_cap >= item)\n    if np.any(fragmentation):\n        wasted_space = bins_remain_cap[fragmentation] - item\n        priorities[fragmentation] -= wasted_space * item * 10 # scale penalty by wasted space and item.\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Infeasibility:  Strong negative penalty if bin cannot accommodate item.\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -1e6\n\n    # 2. Exact Fit: Extremely high priority.\n    exact_fit = (bins_remain_cap == item)\n    priorities[exact_fit] = 1e5\n\n    # 3. Very Close Fit: High priority, minimal waste.\n    very_close_fit = (bins_remain_cap >= item) & (bins_remain_cap <= item + 0.01)\n    priorities[very_close_fit] = 1e4\n\n    # 4. Close Fit: Good priority, but less than very close.\n    close_fit = (bins_remain_cap >= item) & (bins_remain_cap <= 1.05 * item)\n    priorities[close_fit] = 1e3\n\n    # 5. Moderate Priority: Fits, but consider wasted space.\n    can_accommodate = bins_remain_cap >= item\n    if np.any(can_accommodate):\n        wasted_space = bins_remain_cap[can_accommodate] - item\n        # Prioritize bins where wasted space is minimal, scaling down the reward.\n        space_efficiency = np.clip(1.0 - (wasted_space / np.max(bins_remain_cap)), 0, 1)  # Ensure between 0 and 1\n        priorities[can_accommodate] += space_efficiency * 500\n\n    # 6. Penalize near-full but infeasible bins.\n    near_full_infeasible = (bins_remain_cap < item) & (bins_remain_cap > 0.8 * item)\n    priorities[near_full_infeasible] = -1e4\n\n    # 7. Encourage using non-empty bins (if it fits).\n    non_empty_and_fits = (bins_remain_cap < np.max(bins_remain_cap)) & can_accommodate\n    priorities[non_empty_and_fits] += 100\n\n    # 8. Discourage large empty space relative to item size.\n    large_empty_space = (bins_remain_cap >= item) & ((bins_remain_cap - item) > item)\n    priorities[large_empty_space] -= 200\n\n    # 9. Slight penalty for bins with *significantly* more capacity than the item.\n    significantly_larger = (bins_remain_cap >= item) & (bins_remain_cap > 3 * item)\n    priorities[significantly_larger] -= 50\n\n    return priorities\n\n[Reflection]\nPrioritize exact/close fits with large rewards/penalties. Directly penalize wasted space and near-full infeasibility.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}