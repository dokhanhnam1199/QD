{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_size = 1.0 # Assume bin size is 1 for capacity ratio calculation.\n\n    # Infeasible placements get a very negative priority\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -1e9  # Very low priority\n\n    # Feasible placements:\n    feasible_mask = ~infeasible_mask\n\n    if np.any(feasible_mask): #Avoid errors when all placements are infeasible\n        # Capacity ratio: prioritize tighter fits\n        capacity_ratio = item / bin_size\n        priorities[feasible_mask] += capacity_ratio\n\n        # Reward near-full bins with a Gaussian-like distribution\n        remaining_capacity_ratio = bins_remain_cap[feasible_mask] / bin_size\n        mu = 0.0  # Center the Gaussian around full bins (remaining capacity = 0)\n        sigma = 0.2 # Adjust sigma to control the spread\n        gaussian_priority = np.exp(-0.5 * ((remaining_capacity_ratio - mu) / sigma)**2)\n        priorities[feasible_mask] += gaussian_priority\n\n        # Prioritize lower indexes to avoid opening new bins (this helps when scores are close)\n        priorities[feasible_mask] += np.linspace(0, -0.1, num=np.sum(feasible_mask))\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Infeasible bin mask\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n\n    # Feasible bin mask\n    feasible_mask = ~infeasible_mask\n\n    if np.any(feasible_mask):  # Only calculate priorities if there are feasible bins\n\n        # Capacity ratio: prioritize bins with tighter fits\n        capacity_ratio = item / bins_remain_cap[feasible_mask]\n        priorities[feasible_mask] += capacity_ratio\n\n        # Gaussian-like distribution: reward near-full bins\n        remaining_capacity = bins_remain_cap[feasible_mask] - item\n        mu = 0  # Mean at 0 remaining capacity\n        sigma = 0.2  # Adjust sigma to control the spread (higher = wider, lower = narrower)\n        gaussian_priority = np.exp(-0.5 * ((remaining_capacity - mu) / sigma)**2)\n        priorities[feasible_mask] += gaussian_priority\n        \n    else:\n        # No feasible bins, heavily penalize opening a new bin if possible\n        priorities[:] = -np.inf \n        \n\n    return priorities\n\n[Reflection]\nPrioritize tight fits using remaining capacity, penalize infeasibility strongly, and refine Gaussian parameters.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}