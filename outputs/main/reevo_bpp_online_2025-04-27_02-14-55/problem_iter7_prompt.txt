{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\nFavor near-perfect bin fills using dynamic fill ratios. Heavily penalize infeasibility and fragmentation, scaling penalties by item size. Reward matching similar items and prioritize utilizing existing bins.\n\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Highest priority: Exact fit\n    exact_fit = (bins_remain_cap == item)\n    priorities[exact_fit] = 1000.0\n\n    # High priority: Almost fit (small remaining space)\n    almost_fit = (bins_remain_cap >= item) & (bins_remain_cap <= (1.05 * item))  # tighter almost fit\n    priorities[almost_fit] = 750.0\n\n    # Feasibility check and heavy penalty for infeasible bins\n    infeasible = bins_remain_cap < item\n    priorities[infeasible] = -1e9  # Very strong penalty\n\n    # Medium priority: Fits well, minimize wasted space using capacity ratio\n    can_accommodate = (bins_remain_cap >= item)\n    if np.any(can_accommodate):\n        capacity_ratio = item / bins_remain_cap[can_accommodate]\n        # Gaussian reward centered around ideal capacity ratio\n        gaussian_reward = np.exp(-0.5 * ((capacity_ratio - 1.0) / 0.1) ** 2)  # Adjust std for sensitivity\n        priorities[can_accommodate] += gaussian_reward * 500.0\n\n        # Adjust priority based on item size\n        item_size_ratio = item / np.max(bins_remain_cap) # relative size of the item.\n        priorities[can_accommodate] += item_size_ratio * 100\n\n    # Small boost for using non-empty bins (encourage filling existing bins)\n    non_empty = bins_remain_cap < np.max(bins_remain_cap)\n    priorities[non_empty] += 50.0\n\n    # Discourage bins with significantly more capacity than the item size. less strict.\n    large_capacity = (bins_remain_cap >= item) & (bins_remain_cap > 1.5 * item)\n    priorities[large_capacity] -= 50 # Reduce penalty\n\n    # Bonus for bins that can accommodate multiple items of similar size after fitting\n    if np.any(can_accommodate):\n        remaining_capacity_after_fit = bins_remain_cap[can_accommodate] - item\n        potential_items = np.floor(remaining_capacity_after_fit / item) # Number of items potentially fit\n        priorities[can_accommodate] += potential_items * 25  # Scale bonus\n\n    return priorities\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}