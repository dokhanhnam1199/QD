```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First Fit Decreasing variant - prioritize bins that can fit the item reasonably well
    # without leaving too much or too little space.
    fit_mask = bins_remain_cap >= item

    if np.any(fit_mask):
      remaining_after_fit = bins_remain_cap[fit_mask] - item
      # Prioritize bins where the remaining space is relatively small, but not too small
      # to avoid creating bins with extremely small utilization.
      priorities[fit_mask] = np.exp(-np.abs(remaining_after_fit - np.mean(remaining_after_fit))/ np.std(remaining_after_fit)) # Gaussian like priority. Can change to other distributions

      #Prioritize almost full bins even more if there are multiple candidates to fit
      almost_full_threshold = 0.1 # 10% of bin size remaining, can be tuned
      almost_full_mask = remaining_after_fit <= almost_full_threshold * bins_remain_cap[fit_mask] #Avoid zero division
      priorities[fit_mask][almost_full_mask] *= 2 #Higher boost if almost full

    #If no bins can fit the item, de-prioritize all of them heavily (or slightly prioritize the emptiest) to postpone opening a new bin
    else:
      #This version de-prioritizes all current bins instead of slightly prioritizing the emptiest one.
      priorities = -np.ones_like(bins_remain_cap) * 1000

      #Uncomment for a slight prioritization of the emptiest
      #max_remaining_capacity = np.max(bins_remain_cap)
      #priorities = bins_remain_cap / max_remaining_capacity - 10 # small value

    return priorities
```
