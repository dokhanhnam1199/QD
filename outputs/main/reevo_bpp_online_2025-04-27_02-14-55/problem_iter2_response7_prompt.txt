{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # First-Fit-Decreasing-like prioritization: prioritize bins that can accommodate the item\n    # and are relatively full already\n    \n    valid_bins = bins_remain_cap >= item\n    \n    if np.any(valid_bins):\n        priorities[valid_bins] = bins_remain_cap[valid_bins] # Larger the remain cap, higher priority. Try to fill bigger bins\n\n        #priorities[valid_bins] = 1/(bins_remain_cap[valid_bins] - item + 1e-9)  # Higher priority to bins with minimal waste.\n\n        # Prioritize bins which are closer to full with a boost. The idea here is\n        # that partially-filled bins should be reserved for later objects with appropriate sizes.\n        \n        #priorities[valid_bins] = 1.0/(bins_remain_cap[valid_bins]/bins_remain_cap[valid_bins].max()) # try normalizing, higher priority given to bins that are almost full\n\n        #priorities[valid_bins] = (1 - (bins_remain_cap[valid_bins]/bins_remain_cap.max())) # Fill bigger bins as they appear.\n\n        #priorities[valid_bins] = (1-item/bins_remain_cap[valid_bins])# Try to pack bins closer to be filled.\n\n    else:\n        # No suitable bin found\n        priorities = np.zeros_like(bins_remain_cap, dtype=float)\n        # Give a negative priority so that a new bin is always created.\n        priorities[:] = -1.0 # or -np.inf if np.inf does not hurt.\n        # or just the lowest remaining cap bin is prioritized.\n        # priorities[np.argmin(bins_remain_cap)] = 1.0\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First Fit Decreasing variant - prioritize bins that can fit the item reasonably well\n    # without leaving too much or too little space.\n    fit_mask = bins_remain_cap >= item\n\n    if np.any(fit_mask):\n      remaining_after_fit = bins_remain_cap[fit_mask] - item\n      # Prioritize bins where the remaining space is relatively small, but not too small\n      # to avoid creating bins with extremely small utilization.\n      priorities[fit_mask] = np.exp(-np.abs(remaining_after_fit - np.mean(remaining_after_fit))/ np.std(remaining_after_fit)) # Gaussian like priority. Can change to other distributions\n\n      #Prioritize almost full bins even more if there are multiple candidates to fit\n      almost_full_threshold = 0.1 # 10% of bin size remaining, can be tuned\n      almost_full_mask = remaining_after_fit <= almost_full_threshold * bins_remain_cap[fit_mask] #Avoid zero division\n      priorities[fit_mask][almost_full_mask] *= 2 #Higher boost if almost full\n\n    #If no bins can fit the item, de-prioritize all of them heavily (or slightly prioritize the emptiest) to postpone opening a new bin\n    else:\n      #This version de-prioritizes all current bins instead of slightly prioritizing the emptiest one.\n      priorities = -np.ones_like(bins_remain_cap) * 1000\n\n      #Uncomment for a slight prioritization of the emptiest\n      #max_remaining_capacity = np.max(bins_remain_cap)\n      #priorities = bins_remain_cap / max_remaining_capacity - 10 # small value\n\n    return priorities\n\n[Reflection]\nThe better code uses a Gaussian-like priority based on remaining space and boosts almost-full bins, improving bin utilization.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}