```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority function implementing the *Almost Full Fit* heuristic for online
    Bin Packing. It prefers bins that become the most filled after placing the
    item (i.e., leaves the smallest leftover capacity).

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1â€‘D array of the remaining capacities of the existing bins.

    Returns
    -------
    np.ndarray
        Array of the same shape as ``bins_remain_cap`` containing a priority
        score for each bin. The bin with the maximal score is selected.
    """
    # Ensure we work with floats (required for -inf and division).
    caps = np.asarray(bins_remain_cap, dtype=float)

    # Small epsilon to avoid division by zero on a perfect fit.
    eps = 1e-12

    # Compute the residual capacity if we were to place the item.
    residual = caps - item

    # Determine which bins can actually accommodate the item.
    fit_mask = residual >= 0

    # Initialise priorities to -inf (worst possible) for bins that don't fit.
    priorities = np.full_like(caps, -np.inf, dtype=float)

    # For fitting bins, give a higher score to those with smaller residual.
    # Inverse residual is used: the smaller the leftover, the larger the score.
    priorities[fit_mask] = 1.0 / (residual[fit_mask] + eps)

    return priorities
```
