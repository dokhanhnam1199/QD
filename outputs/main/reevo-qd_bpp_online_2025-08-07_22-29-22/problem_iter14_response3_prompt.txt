{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global random generator to avoid reseeding on every call\n_rng = np.random.default_rng()\n\n    \"\"\"Random\u2011Fit priority for online Bin Packing.\n\n    For each bin that can accommodate the incoming `item` (i.e. its remaining\n    capacity \u2265 item size), we assign an independent random number drawn from a\n    uniform distribution on (0, 1). Bins that cannot accommodate the item receive\n    a priority of -inf, ensuring they are never selected. The bin with the\n    maximum priority (the highest random draw) will be chosen, which implements\n    the classic Random Fit strategy.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array with the remaining capacity of each existing bin.\n\n    Returns:\n        A NumPy array of the same shape as `bins_remain_cap` containing priority\n        scores for each bin.\n    \"\"\"\n    # Initialise all priorities to -inf (infeasible by default)\n    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n\n    # Identify bins that can fit the item\n    feasible_mask = bins_remain_cap >= item\n    num_feasible = np.count_nonzero(feasible_mask)\n\n    # Assign random priorities only to feasible bins\n    if num_feasible:\n        priorities[feasible_mask] = _rng.random(num_feasible)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global random generator and running statistics\n_rng = np.random.default_rng()\n_item_count = 0\n_item_sum = 0.0\n\n\n                bins_remain_cap: np.ndarray,\n                temperature: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Compute priority scores for online bin packing.\n\n    The function blends a temperature\u2011scaled best\u2011fit softmax with:\n      \u2022 per\u2011bin adaptive random noise (larger for small items & diverse slacks)\n      \u2022 a look\u2011ahead boost using the running average item size\n      \u2022 a slight penalty for brand\u2011new bins (still at full capacity)\n      \u2022 a deterministic tie\u2011breaker that favours lower\u2011index bins\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the current bins.\n    temperature : float, optional (default=0.1)\n        Softmax temperature (>0). Smaller values make the decision more\n        greedy (closer to deterministic best\u2011fit).\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (same shape as ``bins_remain_cap``).\n        Scores sum to 1 over feasible bins; infeasible bins receive 0.\n    \"\"\"\n    global _item_count, _item_sum\n\n    if temperature <= 0:\n        raise ValueError(\"temperature must be positive\")\n\n    # Ensure a float64 array for numerical stability\n    bins = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    # Edge case: no bins yet\n    if bins.size == 0:\n        _item_count += 1\n        _item_sum += item\n        return np.empty_like(bins, dtype=np.float64)\n\n    eps = 1e-12\n    feasible = bins + eps >= item   # allow tiny tolerance for floating errors\n\n    # Output vector initialised with zeros (infeasible bins stay zero)\n    priorities = np.zeros_like(bins, dtype=np.float64)\n\n    # Nothing fits \u2192 return zero scores (caller may open a new bin)\n    if not np.any(feasible):\n        _item_count += 1\n        _item_sum += item\n        return priorities\n\n    # Slack after placing the item (>=0 for feasible bins)\n    slack = bins[feasible] - item\n\n    # -------------------------------------------------------------\n    # 1. Base logits \u2013 best\u2011fit prefers smaller slack\n    # -------------------------------------------------------------\n    base_logits = -slack / temperature\n\n    # -------------------------------------------------------------\n    # 2. Adaptive random noise\n    # -------------------------------------------------------------\n    full_capacity = bins.max()                     # treat max remaining as original capacity\n    item_ratio = min(item / full_capacity, 1.0)    # \u2208 [0,1]\n\n    if slack.size > 1:\n        slack_range = slack.max() - slack.min()\n    else:\n        slack_range = 0.0\n\n    # Noise scale grows for small items and when slack spread is large\n    noise_scale = slack_range * 0.05 * (1.0 - item_ratio)\n    if noise_scale > 0:\n        noise = _rng.normal(loc=0.0, scale=noise_scale, size=slack.shape[0])\n    else:\n        noise = np.zeros_like(slack)\n\n    # -------------------------------------------------------------\n    # 3. Look\u20111head boost using running average item size\n    # -------------------------------------------------------------\n    if _item_count > 0:\n        avg_item = _item_sum / _item_count\n    else:\n        avg_item = item\n    future_weight = 0.02\n    future_adjust = (slack - avg_item) * future_weight\n\n    # -------------------------------------------------------------\n    # 4. Deterministic tie\u2011breaker (lower index gets tiny boost)\n    # -------------------------------------------------------------\n    tie_eps = 1e-12\n    tie_breaker = -np.arange(bins.shape[0], dtype=np.float64)[feasible] * tie_eps\n\n    # -------------------------------------------------------------\n    # 5. Combine components into logits\n    # -------------------------------------------------------------\n    logits = base_logits + noise + future_adjust + tie_breaker\n\n    # -------------------------------------------------------------\n    # 6. Penalty for brand\u2011new bins (still at full capacity)\n    # -------------------------------------------------------------\n    new_bin_mask = feasible & np.isclose(bins, full_capacity, atol=1e-12)\n    if np.any(new_bin_mask):\n        penalty = 0.001                     # 0.1\u202f% reduction\n        logits[new_bin_mask] += np.log(1.0 - penalty)   # reduces softmax weight\n\n    # -------------------------------------------------------------\n    # 7. Softmax over feasible bins (numerically stable)\n    # -------------------------------------------------------------\n    max_logit = np.max(logits)\n    exp_logits = np.exp(logits - max_logit)\n    probs = exp_logits / np.sum(exp_logits)\n\n    # Fill the full priority vector\n    priorities[feasible] = probs\n\n    # -------------------------------------------------------------\n    # 8. Update running statistics\n    # -------------------------------------------------------------\n    _item_count += 1\n    _item_sum += item\n\n    return priorities\n\n[Reflection]\nBlend slack\u2011based logits, adaptive noise, running\u2011average look\u2011ahead, tie\u2011breakers, and new\u2011bin penalties; tune temperature for greedy\u2011random balance.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}