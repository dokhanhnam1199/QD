{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global random generator reused across calls\n_rng = np.random.default_rng()\n\n# Running statistics of observed item sizes (simple sum/count)\n_item_count = 0\n_item_sum = 0.0\n\n\n    \"\"\"\n    Priority function for the online Bin Packing Problem.\n\n    Higher scores indicate more desirable bins. The scoring combines:\n      \u2022 Best\u2011fit (smaller leftover \u2192 higher score)\n      \u2022 Controlled random perturbation (more for small items)\n      \u2022 A look\u2011ahead boost based on the running average item size\n      \u2022 A deterministic tie\u2011breaker favouring lower\u2011index bins\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the existing bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (same shape as ``bins_remain_cap``).\n        Infeasible bins receive ``-np.inf``.\n    \"\"\"\n    global _item_count, _item_sum\n\n    # Ensure we are working with a NumPy array of floats\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # No bins yet \u2013 just record statistics and return empty array\n    if bins_remain_cap.size == 0:\n        _item_count += 1\n        _item_sum += item\n        return np.array([], dtype=float)\n\n    # Compute leftover capacity if the item were placed in each bin\n    leftover = bins_remain_cap - item\n\n    # Small epsilon to guard against floating\u2011point round\u2011off\n    eps = 1e-12\n    feasible = leftover >= -eps\n\n    # Initialise priority vector with -inf for infeasible bins\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # If nothing fits, update stats and return\n    if not np.any(feasible):\n        _item_count += 1\n        _item_sum += item\n        return priorities\n\n    # ------------------------------------------------------------------\n    # 1. Base best\u2011fit score (smaller leftover \u2192 larger score)\n    # ------------------------------------------------------------------\n    base_score = -leftover[feasible]\n\n    # ------------------------------------------------------------------\n    # 2. Controlled randomness (more for small items)\n    # ------------------------------------------------------------------\n    # Approximate bin capacity (max remaining + current item) \u2013 fallback 1.0\n    approx_capacity = max(bins_remain_cap.max() + item, 1.0)\n    item_ratio = item / approx_capacity                     # \u2208 [0, 1]\n\n    # Spread of leftover among feasible bins\n    leftover_feas = leftover[feasible]\n    if leftover_feas.size > 1:\n        leftover_range = leftover_feas.max() - leftover_feas.min()\n    else:\n        leftover_range = 0.0\n\n    # Noise scale grows when the item is small (item_ratio low) and when\n    # there is a larger spread of leftover capacities.\n    noise_scale = leftover_range * 0.05 * (1.0 - item_ratio)\n    noise_scale = max(noise_scale, 0.0)\n    random_noise = _rng.random(leftover_feas.shape) * noise_scale\n\n    # ------------------------------------------------------------------\n    # 3. Look\u2011ahead boost using running average item size\n    # ------------------------------------------------------------------\n    if _item_count > 0:\n        avg_item = _item_sum / _item_count\n    else:\n        avg_item = item  # first item fallback\n\n    # Small positive boost if the bin would still have room for a typical\n    # future item; slight penalty otherwise.\n    future_weight = 0.02\n    future_adjust = (leftover_feas - avg_item) * future_weight\n\n    # ------------------------------------------------------------------\n    # 4. Deterministic tie\u2011breaker (prefer lower index bins)\n    # ------------------------------------------------------------------\n    tie_breaker = -np.arange(bins_remain_cap.size, dtype=float) * 1e-12\n\n    # ------------------------------------------------------------------\n    # 5. Combine components\n    # ------------------------------------------------------------------\n    combined = base_score + random_noise + future_adjust + tie_breaker[feasible]\n    priorities[feasible] = combined\n\n    # ------------------------------------------------------------------\n    # 6. Update global statistics\n    # ------------------------------------------------------------------\n    _item_count += 1\n    _item_sum += item\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Adaptive priority function for online Bin Packing.\n\n    Scores feasible bins (those with enough remaining capacity) using a\n    temperature\u2011controlled softmax over the negative slack (i.e., the space\n    that would remain after placing the item).  A tiny penalty is applied to\n    brand\u2011new bins (still at full capacity) to encourage reuse of older bins,\n    and a minuscule index\u2011based offset breaks ties deterministically\n    (lower index = older bin).\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority score for each bin.  Higher values indicate a more preferred\n        bin; infeasible bins receive ``-np.inf``.\n    \"\"\"\n    # Compute remaining slack after placing the item\n    slack = bins_remain_cap - item\n\n    # Feasible bins have non\u2011negative slack\n    feasible_mask = slack >= 0\n\n    # Initialise priority array with -inf for infeasible bins\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # If no bin can accommodate the item, return early (caller may open a new bin)\n    if not np.any(feasible_mask):\n        return priorities\n\n    # Base score: negative slack (smaller slack \u2192 larger score)\n    base_score = -slack[feasible_mask]\n\n    # Adaptive temperature \u03bb: median slack among feasible bins (avoid zero)\n    median_slack = np.median(slack[feasible_mask])\n    temperature = max(median_slack, 1e-6)\n\n    # Softmax\u2011like transformation: larger for smaller slack\n    soft_scores = np.exp(base_score / temperature)\n\n    # Assign soft scores to the priority vector\n    priorities[feasible_mask] = soft_scores\n\n    # Estimate full bin capacity (maximum remaining capacity corresponds to an empty bin)\n    bin_capacity_est = np.max(bins_remain_cap)\n\n    # Identify brand\u2011new bins (still at full capacity) among feasible bins\n    new_bin_mask = np.isclose(bins_remain_cap, bin_capacity_est) & feasible_mask\n\n    # Apply a tiny penalty to new bins to encourage reuse of older bins\n    new_bin_penalty = 1e-3  # 0.1\u202f% reduction for new bins\n    priorities[new_bin_mask] *= (1.0 - new_bin_penalty)\n\n    # Deterministic tie\u2011\n    # breaker: older bins (lower index) get a minuscule boost\n    epsilon = 1e-9\n    indices = np.arange(bins_remain_cap.shape[0], dtype=float)\n    priorities[feasible_mask] -= epsilon * indices[feasible_mask]\n\n    return priorities\n\n[Reflection]\nSoftmax with adaptive temperature; penalize fresh bins; minimal index bias; avoid per\u2011item global noise and stats.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}