{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global random generator (single instance to avoid reseeding)\n_rng = np.random.default_rng()\n\n\n    \"\"\"\n    Hybrid random\u2011softmax priority for online Bin Packing.\n\n    This heuristic blends an exponential decay on the post\u2011placement waste\n    (tight\u2011fit preference) with a random perturbation and an item\u2011size weight.\n    The decay rate \u03bb adapts to the average waste of feasible bins, and the\n    score is further scaled by the fraction of the bin that the item will occupy.\n    Infeasible bins receive a priority of 0.  Scores are normalised to sum to 1\n    over feasible bins.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of each currently open bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (same shape as ``bins_remain_cap``).\n        The bin with the highest score should be selected for the item.\n    \"\"\"\n    # Ensure a NumPy float array for vectorised operations\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Edge case: no bins exist\n    if caps.size == 0:\n        return np.empty_like(caps)\n\n    # ---------- 1. Feasibility ----------\n    feasible = caps >= item\n    if not np.any(feasible):\n        # No open bin can host the item \u2013 caller may open a new bin.\n        return np.zeros_like(caps)\n\n    # ---------- 2. Waste computation ----------\n    waste = caps - item  # waste >= 0 for feasible bins\n\n    # ---------- 3. Adaptive \u03bb (based on mean waste) ----------\n    eps = 1e-12\n    mean_waste = waste[feasible].mean()\n    lam = 1.0 / (mean_waste + eps)\n\n    # ---------- 4. Base exponential decay (tight\u2011fit bias) ----------\n    raw = np.zeros_like(caps)\n    raw[feasible] = np.exp(-lam * waste[feasible])\n\n    # ---------- 5. Item\u2011size weighting ----------\n    # Prefer bins where the item occupies a larger fraction of the remaining capacity.\n    size_weight = np.zeros_like(caps)\n    size_weight[feasible] = item / caps[feasible]\n\n    # ---------- 6. Random perturbation ----------\n    # \u03b1 controls the strength of randomness (0 \u2192 deterministic, 1 \u2192 highly stochastic).\n    alpha = 0.3\n    rand_factor = np.ones_like(caps)\n    num_feasible = feasible.sum()\n    if num_feasible:\n        rand_factor[feasible] = 1.0 + alpha * _rng.random(num_feasible)\n\n    # ---------- 7. Combine components ----------\n    scores = raw * size_weight * rand_factor\n    scores[~feasible] = 0.0  # enforce zero for infeasible bins\n\n    # ---------- 8. Normalisation ----------\n    total = scores.sum()\n    if total > 0.0:\n        priorities = scores / total\n    else:\n        # Fallback: uniform distribution over feasible bins\n        priorities = np.where(feasible, 1.0 / num_feasible, 0.0)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global RNG for tie\u2011breaking jitter (initialized once)\n_rng = np.random.default_rng()\n\n    \"\"\"\n    Adaptive sigmoid priority for online bin packing.\n\n    This function scores each existing bin based on the slack that would\n    remain after placing the incoming item. Bins with smaller slack (i.e.\n    tighter fit) receive higher scores. The scoring uses a logistic (sigmoid)\n    function whose inflection point is the median slack of all feasible bins\n    and whose slope adapts to the observed slack range. Infeasible bins\n    (remaining capacity < item) receive ``-np.inf`` to guarantee they are never\n    selected.\n\n    A tiny random jitter is added to break ties in a deterministic way.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the currently open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (higher is better). The caller should\n        select the bin with the maximum priority.\n    \"\"\"\n    # Ensure input is a NumPy float array\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # Slack after placing the item (negative = infeasible)\n    slack = bins_remain_cap - item\n\n    # Feasibility mask: bins that can accommodate the item\n    feasible = slack >= 0.0\n\n    # Initialise priorities to -inf (infeasible by default)\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # If no bin can accommodate the item, return early\n    if not feasible.any():\n        return priorities\n\n    # Slack values for feasible bins only (non\u2011negative)\n    slack_feas = slack[feasible]\n\n    # Adaptive sigmoid parameters\n    median_slack = np.median(slack_feas)\n\n    # Slack range; avoid division by zero for near\u2011identical slacks\n    slack_range = slack_feas.max() - slack_feas.min()\n    if slack_range < 1e-12:\n        # All feasible bins have (almost) identical slack \u2192 flat sigmoid\n        alpha = 1.0\n    else:\n        # Scale alpha so the sigmoid transition spans roughly 8 slack units\n        alpha = 8.0 / slack_range\n\n    # Logistic function decreasing with slack; clamp exponent for stability\n    exp_arg = np.clip(alpha * (slack_feas - median_slack), -50.0, 50.0)\n    sigmoid_scores = 1.0 / (1.0 + np.exp(exp_arg))\n\n    # Add a tiny random jitter (\u22641e\u20119) for deterministic tie\u2011breaking\n    jitter = _rng.random(sigmoid_scores.shape) * 1e-9\n    sigmoid_scores = sigmoid_scores + jitter\n\n    # Populate the full priority vector\n    priorities[feasible] = sigmoid_scores\n\n    return priorities\n\n[Reflection]\nBlend sigmoid slack scoring with size\u2011ratio weighting, add jitter for ties, normalise, then pick the bin with highest score.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}