```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Worst‑Fit priority for online Bin Packing.

    For each bin we compute a score that is high for bins with a lot of free
    space and low (or -inf) for bins that cannot accommodate the item.
    The online algorithm then picks the bin with the highest score,
    i.e. the bin with the *largest* remaining capacity that fits the item.

    Args:
        item: Size of the incoming item.
        bins_remain_cap: 1‑D array of remaining capacities of the current bins.

    Returns:
        An array of the same shape as ``bins_remain_cap`` containing a priority
        score for each bin. Bins that cannot hold the item receive ``-inf``.
    """
    # Ensure we are working with a float array
    caps = np.asarray(bins_remain_cap, dtype=float)

    # Initialise all priorities to the lowest possible value.
    # Using -inf guarantees they will never be selected.
    priorities = np.full_like(caps, -np.inf, dtype=float)

    # Identify bins that have enough free space for the item.
    feasible = caps >= item

    # For feasible bins, the priority is simply the remaining capacity.
    # Larger capacity => larger priority => worst‑fit choice.
    priorities[feasible] = caps[feasible]

    return priorities
```
