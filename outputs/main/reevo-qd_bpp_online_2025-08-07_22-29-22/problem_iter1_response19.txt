```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                temperature: float = 0.1) -> np.ndarray:
    """
    Softmax‑Based Fit priority for online Bin Packing.

    The idea is to assign a high priority to bins where the item fits tightly
    (i.e., leaves little remaining capacity).  For each feasible bin we compute
    a “logit” proportional to the negative slack (remaining capacity after
    placement).  These logits are transformed with a softmax so that the best
    fit gets the largest probability while still keeping a smooth preference
    distribution.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of the current bins.
    temperature : float, optional (default=0.1)
        Smoothing parameter > 0.  Lower values make the priority more
        deterministic (closer to a greedy best‑fit), while higher values spread
        the priority more uniformly.

    Returns
    # --------
    np.ndarray
        Priority scores for each bin.  The vector sums to 1 across all feasible
        bins (infeasible bins receive a priority of 0).  The bin with the
        highest priority should be selected for the item.
    """
    if temperature <= 0:
        raise ValueError("temperature must be positive")
    # Ensure float dtype for calculations
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=np.float64)

    # Feasibility mask: item can only go into bins with enough remaining capacity
    feasible = bins_remain_cap >= item

    # Initialise priorities with zeros
    priorities = np.zeros_like(bins_remain_cap, dtype=np.float64)

    # If no bin can accommodate the item, return all zeros (the caller may open a new bin)
    if not np.any(feasible):
        return priorities

    # Compute slack (unused capacity after placing the item) for feasible bins
    slack = np.empty_like(bins_remain_cap, dtype=np.float64)
    slack.fill(np.inf)                      # non‑feasible bins get infinite slack
    slack[feasible] = bins_remain_cap[feasible] - item

    # Logits: higher when slack is smaller (tighter fit)
    #   logits = -slack / temperature   (more negative for larger slack)
    logits = -slack / temperature

    # Stabilize the softmax: subtract the maximum logit (ignoring -inf)
    max_logit = np.max(logits[feasible])   # safe because we have at least one feasible bin
    exp_logits = np.exp(logits - max_logit)  # infeasible entries become exp(-inf)=0

    # Normalise to obtain a probability‑like priority vector
    sum_exp = np.sum(exp_logits[feasible])
    if sum_exp > 0:
        priorities[feasible] = exp_logits[feasible] / sum_exp
    # Infeasible bins already have priority 0

    return priorities
```
