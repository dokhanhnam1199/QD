{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global random generator to avoid reseeding on every call\n_rng = np.random.default_rng()\n\n    \"\"\"Random\u2011Fit priority for online Bin Packing.\n\n    For each bin that can accommodate the incoming `item` (i.e. its remaining\n    capacity \u2265 item size), we assign an independent random number drawn from a\n    uniform distribution on (0, 1). Bins that cannot accommodate the item receive\n    a priority of -inf, ensuring they are never selected. The bin with the\n    maximum priority (the highest random draw) will be chosen, which implements\n    the classic Random Fit strategy.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array with the remaining capacity of each existing bin.\n\n    Returns:\n        A NumPy array of the same shape as `bins_remain_cap` containing priority\n        scores for each bin.\n    \"\"\"\n    # Initialise all priorities to -inf (infeasible by default)\n    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n\n    # Identify bins that can fit the item\n    feasible_mask = bins_remain_cap >= item\n    num_feasible = np.count_nonzero(feasible_mask)\n\n    # Assign random priorities only to feasible bins\n    if num_feasible:\n        priorities[feasible_mask] = _rng.random(num_feasible)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n                temperature: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Softmax\u2011Based Fit priority for online Bin Packing.\n\n    The idea is to assign a high priority to bins where the item fits tightly\n    (i.e., leaves little remaining capacity).  For each feasible bin we compute\n    a \u201clogit\u201d proportional to the negative slack (remaining capacity after\n    placement).  These logits are transformed with a softmax so that the best\n    fit gets the largest probability while still keeping a smooth preference\n    distribution.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the current bins.\n    temperature : float, optional (default=0.1)\n        Smoothing parameter > 0.  Lower values make the priority more\n        deterministic (closer to a greedy best\u2011fit), while higher values spread\n        the priority more uniformly.\n\n    Returns\n    # --------\n    np.ndarray\n        Priority scores for each bin.  The vector sums to 1 across all feasible\n        bins (infeasible bins receive a priority of 0).  The bin with the\n        highest priority should be selected for the item.\n    \"\"\"\n    if temperature <= 0:\n        raise ValueError(\"temperature must be positive\")\n    # Ensure float dtype for calculations\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    # Feasibility mask: item can only go into bins with enough remaining capacity\n    feasible = bins_remain_cap >= item\n\n    # Initialise priorities with zeros\n    priorities = np.zeros_like(bins_remain_cap, dtype=np.float64)\n\n    # If no bin can accommodate the item, return all zeros (the caller may open a new bin)\n    if not np.any(feasible):\n        return priorities\n\n    # Compute slack (unused capacity after placing the item) for feasible bins\n    slack = np.empty_like(bins_remain_cap, dtype=np.float64)\n    slack.fill(np.inf)                      # non\u2011feasible bins get infinite slack\n    slack[feasible] = bins_remain_cap[feasible] - item\n\n    # Logits: higher when slack is smaller (tighter fit)\n    #   logits = -slack / temperature   (more negative for larger slack)\n    logits = -slack / temperature\n\n    # Stabilize the softmax: subtract the maximum logit (ignoring -inf)\n    max_logit = np.max(logits[feasible])   # safe because we have at least one feasible bin\n    exp_logits = np.exp(logits - max_logit)  # infeasible entries become exp(-inf)=0\n\n    # Normalise to obtain a probability\u2011like priority vector\n    sum_exp = np.sum(exp_logits[feasible])\n    if sum_exp > 0:\n        priorities[feasible] = exp_logits[feasible] / sum_exp\n    # Infeasible bins already have priority 0\n\n    return priorities\n\n[Reflection]\nUse slack\u2011based scores, smooth with softmax, penalize infeasibility, and tune temperature for exploration\u2011exploitation balance.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}