```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Deterministic exact‑fit priority for the online Bin Packing Problem.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of existing bins.

    Returns
    -------
    np.ndarray
        Priority scores for each bin (same shape as ``bins_remain_cap``). 
        Infeasible bins receive ``-np.inf``. Bins where the item fits exactly 
        (within tolerance) receive the highest finite score (0). For all other 
        feasible bins the score is the negative leftover capacity, so that 
        bins leaving less waste obtain a higher (less negative) score.
    """
    # Convert input to a float NumPy array
    caps = np.asarray(bins_remain_cap, dtype=float)

    # Handle the case of no bins gracefully
    if caps.size == 0:
        return np.empty(0, dtype=float)

    # Compute leftover capacity if the item were placed in each bin
    leftover = caps - item

    # Tolerance for floating‑point comparisons
    eps = 1e-12

    # Identify infeasible bins (item does not fit)
    infeasible = leftover < -eps

    # Identify exact‑fit bins (within tolerance)
    exact_fit = np.abs(leftover) <= eps

    # Initialize priorities: -inf for infeasible bins, will be overwritten otherwise
    priorities = np.full_like(caps, -np.inf, dtype=float)

    # Exact‑fit bins get the highest finite priority (0)
    priorities[exact_fit] = 0.0

    # Feasible but non‑exact bins: score = -leftover (less waste → higher score)
    feasible_non_exact = (~infeasible) & (~exact_fit)
    priorities[feasible_non_exact] = -leftover[feasible_non_exact]

    return priorities
```
