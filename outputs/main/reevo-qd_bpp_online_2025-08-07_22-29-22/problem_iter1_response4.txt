```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority function implementing the *Exact Fit First* strategy for online Bin Packing.

    Each bin receives a score; the bin with the highest score is chosen for the item.
    - Bins that cannot accommodate the item receive `-inf` (lowest possible priority).
    - Among feasible bins, the priority is the negative remaining slack
      (`-(remaining_capacity - item)`).  Thus a smaller slack → a larger priority,
      with a perfect (exact) fit yielding the highest possible score (zero).

    A tiny random perturbation is added to break ties deterministically without
    affecting the ordering of distinct slack values.

    Args:
        item: Size of the incoming item.
        bins_remain_cap: 1‑D array of remaining capacities of existing bins.

    Returns:
        A 1‑D `np.ndarray` of priority scores, same shape as `bins_remain_cap`.
    """
    # Compute how much free space would remain after placing the item in each bin.
    slack = bins_remain_cap - item

    # Initialise all priorities to -inf (i.e., bins that cannot host the item).
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify feasible bins (enough remaining capacity).
    feasible = slack >= 0

    # For feasible bins, priority = -slack (higher for tighter fits).
    priorities[feasible] = -slack[feasible]

    # Optional tie‑breaker: add infinitesimal random noise to differentiate exact ties.
    if feasible.any():
        # Noise magnitude is far below any meaningful slack difference.
        noise = np.random.rand(feasible.sum()) * 1e-9
        priorities[feasible] += noise

    return priorities
```
