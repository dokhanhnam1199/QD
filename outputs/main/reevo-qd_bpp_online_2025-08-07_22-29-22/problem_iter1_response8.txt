```python
import numpy as np

# epsilon parameter controls the probability of exploration
EPSILON = 0.1

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Compute a priority for each bin in an online bin‑packing setting
    using an ε‑greedy strategy.  The strategy operates as follows:

    * **Exploitation** (probability 1‑ε):
      * For every bin that can accommodate the item, compute the slack
        `slack = remaining_capacity - item_size`.
      * The bin with the *smallest* slack receives the highest score
        (best‑fit heuristic).
      * Unfeasible bins receive a very low priority.

    * **Exploration** (probability ε):
      * Feasible bins are assigned random priorities drawn from a
        uniform distribution on [0, 1].
      * Unfeasible bins again receive a very low priority.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        Remaining capacity of each bin.

    Returns
    -------
    np.ndarray
        Priority score for every bin – the higher the value, the
        more likely that bin will be selected.
    """
    # Remaining slack after adding the item
    slack = bins_remain_cap - item
    feasible = slack >= 0

    # Base exploitation priority: best fit (smallest slack)
    exploit = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    exploit[feasible] = -slack[feasible]

    # Exploration: random uniform priorities for feasible bins
    if np.random.rand() < EPSILON:
        explore = np.full_like(bins_remain_cap, -np.inf, dtype=float)
        random_values = np.random.rand(len(bins_remain_cap))
        explore[feasible] = random_values[feasible]
        return explore

    return exploit
```
