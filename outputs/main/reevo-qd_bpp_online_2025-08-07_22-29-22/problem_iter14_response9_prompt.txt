{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# ----------------------------------------------------------------------\n# Global state (shared across calls)\n# ----------------------------------------------------------------------\n_rng = np.random.default_rng()               # RNG for optional tiny noise\n_alpha_ema = 0.1                               # EMA smoothing factor\n_epsilon_factor = 0.05                         # Fraction of std used as exact\u2011fit tolerance\n_exact_fit_offset = 1e9                        # Large offset to guarantee exact fits win\n\n# EMA statistics for item sizes\n_ema_mean = 0.0\n_ema_sq = 0.0\n_item_count = 0\n\n    \"\"\"Update exponential moving averages of the item size.\"\"\"\n    global _ema_mean, _ema_sq, _item_count\n    _item_count += 1\n    _ema_mean = (1 - _alpha_ema) * _ema_mean + _alpha_ema * item\n    _ema_sq   = (1 - _alpha_ema) * _ema_sq   + _alpha_ema * (item * item)\n\n    \"\"\"Return the current estimated standard deviation of seen items.\"\"\"\n    var = _ema_sq - _ema_mean * _ema_mean\n    # Numerical safety\n    if var < 0.0:\n        var = 0.0\n    return np.sqrt(var)\n\n# ----------------------------------------------------------------------\n    \"\"\"\n    Adaptive priority for online bin packing.\n\n    Scoring principles\n    ------------------\n    1. Exact fits (within a tolerance derived from EMA std) receive a huge\n       offset, ensuring they are always preferred.\n    2. Among feasible non\u2011exact bins, a softmax over the negative slack\n       (remaining capacity after placement) is used.  The temperature is the\n       median slack of all feasible bins, making the scoring adaptive to the\n       current distribution of free space.\n    3. Brand\u2011new bins (still at full capacity) are penalised slightly to\n       encourage reuse of older bins.\n    4. Deterministic tie\u2011breaking: lower\u2011index bins receive a minuscule\n       boost (by subtracting a tiny epsilon * index).\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of each bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority values (same shape as ``bins_remain_cap``).  Infeasible bins\n        receive ``-np.inf``.\n    \"\"\"\n    # ------------------------------------------------------------------\n    # 1. Update EMA statistics for the current item\n    # ------------------------------------------------------------------\n    _update_item_stats(item)\n\n    # Tolerance for exact\u2011fit detection (based on EMA std)\n    std = _current_std()\n    eps = max(1e-9, _epsilon_factor * std)\n\n    # ------------------------------------------------------------------\n    # 2. Compute slack (remaining capacity after placement)\n    # ------------------------------------------------------------------\n    slack = bins_remain_cap - item                     # may be negative\n    feasible = slack >= -eps                           # allow tiny negative due to eps\n\n    # Initialise all priorities to -inf (infeasible bins)\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        # No bin can accommodate the item \u2013 caller may open a new bin\n        return priorities\n\n    # ------------------------------------------------------------------\n    # 3. Exact\u2011fit handling\n    # ------------------------------------------------------------------\n    exact_fit = feasible & (np.abs(slack) <= eps)\n\n    if np.any(exact_fit):\n        # Deterministic tie\u2011breaker: lower index gets a tiny boost\n        idx_exact = np.nonzero(exact_fit)[0].astype(float)\n        tiny_eps = 1e-12\n        priorities[exact_fit] = _exact_fit_offset - tiny_eps * idx_exact\n\n    # ------------------------------------------------------------------\n    # 4. Scoring of non\u2011exact feasible bins\n    # ------------------------------------------------------------------\n    non_exact = feasible & ~exact_fit\n    if np.any(non_exact):\n        # Base score: negative slack (smaller slack \u2192 larger score)\n        base_score = -slack[non_exact]\n\n        # Adaptive temperature: median slack among all feasible bins\n        median_slack = np.median(slack[feasible])\n        temperature = max(median_slack, 1e-6)        # avoid division by zero\n\n        # Softmax\u2011like transformation (larger for smaller slack)\n        soft_scores = np.exp(base_score / temperature)\n\n        # Assign soft scores\n        priorities[non_exact] = soft_scores\n\n        # --------------------------------------------------------------\n        # 4a. Penalise brand\u2011new bins (still at full capacity)\n        # --------------------------------------------------------------\n        # Estimate bin capacity as the maximum remaining capacity observed.\n        # All bins are assumed to have identical capacity.\n        bin_capacity_est = np.max(bins_remain_cap)\n        new_bin_mask = np.isclose(bins_remain_cap, bin_capacity_est) & non_exact\n        if np.any(new_bin_mask):\n            new_bin_penalty = 0.001   # 0.1\u202f% reduction\n            priorities[new_bin_mask] *= (1.0 - new_bin_penalty)\n\n        # --------------------------------------------------------------\n        # 4b. Deterministic tie\u2011breaker (lower index gets a tiny boost)\n        # --------------------------------------------------------------\n        idx_non_exact = np.nonzero(non_exact)[0].astype(float)\n        tie_eps = 1e-12\n        priorities[non_exact] -= tie_eps * idx_non_exact\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Constant parameters\nEMA_ALPHA = 0.1\nEPSILON_FACTOR = 0.05\nSWAP_WEIGHT = 0.05\nPENALTY_BRAND_NEW = 0.01\nTIE_BREAK_INDEX_EPS = 1e-9\nRANDOM_JITTER_SCALE = 1e-10\nEXACT_FIT_OFFSET = 1e9\n\n    \"\"\"\n    Compute a priority score for each bin for the incoming item.\n\n    The priority favors exact fits, then bins with smaller slack, applies a\n    swap\u2011improvement boost when the slack is close to the mean item size,\n    penalises brand\u2011new bins, breaks ties deterministically by bin index,\n    and adds a small random jitter to avoid degenerate cases.\n    \"\"\"\n    # Initialise static state on first call\n    if not hasattr(priority_v2, \"_ema_slack\"):\n        priority_v2._ema_slack = 0.0\n        priority_v2._ema_item_size = 0.0\n        priority_v2._ema_item_sq = 0.0\n        priority_v2._item_count = 0\n        priority_v2._rng = np.random.default_rng()\n\n    # Update item\u2011size statistics\n    priority_v2._item_count += 1\n    priority_v2._ema_item_size = (1 - EMA_ALPHA) * priority_v2._ema_item_size + EMA_ALPHA * item\n    priority_v2._ema_item_sq = (1 - EMA_ALPHA) * priority_v2._ema_item_sq + EMA_ALPHA * (item * item)\n\n    # Current standard deviation of item sizes\n    var = priority_v2._ema_item_sq - priority_v2._ema_item_size ** 2\n    var = max(var, 0.0)\n    std = np.sqrt(var)\n\n    # Tolerance for exact fit (adapted to observed variance)\n    eps = max(1e-9, EPSILON_FACTOR * std)\n\n    # Compute slack for each bin\n    slack = bins_remain_cap - item\n\n    # Feasibility and exact\u2011fit masks\n    feasible = slack >= -eps\n    exact_fit = (np.abs(slack) <= eps) & feasible\n\n    # Prepare priority array\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Exact fits get huge priority\n    if np.any(exact_fit):\n        tie_noise = priority_v2._rng.uniform(0.0, 1e-6, size=exact_fit.sum())\n        priorities[exact_fit] = EXACT_FIT_OFFSET + tie_noise\n\n    # Non\u2011exact but feasible bins\n    non_exact = feasible & ~exact_fit\n    if np.any(non_exact):\n        # Update EMA of slack with median of current slack values\n        median_slack = np.median(slack[non_exact])\n        priority_v2._ema_slack = (1 - EMA_ALPHA) * priority_v2._ema_slack + EMA_ALPHA * median_slack\n        lam = priority_v2._ema_slack + 1e-9  # avoid division by zero\n\n        # Primary component: decreases with increasing slack\n        primary = np.exp(-slack[non_exact] / lam)\n\n        # Swap\u2011improvement boost: slack close to mean item size\n        mean_item_size = priority_v2._ema_item_size if priority_v2._item_count > 0 else item\n        distance_to_mean = np.abs(slack[non_exact] - mean_item_size)\n        boost = SWAP_WEIGHT / (distance_to_mean + eps)\n        combined = primary + boost\n\n        # Penalty for brand\u2011new bins (those with maximum remaining capacity)\n        max_remaining = np.max(bins_remain_cap)\n        brand_new_mask = bins_remain_cap == max_remaining\n        penalty_array = np.zeros_like(bins_remain_cap, dtype=float)\n        penalty_array[brand_new_mask] = -PENALTY_BRAND_NEW\n        combined += penalty_array[non_exact]\n\n        # Deterministic tie\u2011breaker: older bins get slightly higher priority\n        indices = np.arange(len(bins_remain_cap))\n        combined -= indices[non_exact] * TIE_BREAK_INDEX_EPS\n\n        # Small random jitter\n        jitter = priority_v2._rng.normal(scale=RANDOM_JITTER_SCALE, size=combined.shape)\n        combined += jitter\n\n        priorities[non_exact] = combined\n\n    return priorities\n\n[Reflection]\nEMA slack, adaptive temperature, random jitter, penalize brand\u2011new bins, boost near\u2011mean slack, prioritize exact fits.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}