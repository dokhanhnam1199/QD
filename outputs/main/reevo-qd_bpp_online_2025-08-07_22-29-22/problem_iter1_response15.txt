```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Inverse Distance (Proximity Fit) priority for online Bin Packing.

    A bin that would be left with the smallest remaining capacity after
    placing the item receives the highest priority. For infeasible bins
    (capacity < item) a very low score (-inf) is assigned.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        Remaining capacities of the currently open bins.

    Returns
    -------
    np.ndarray
        Priority scores for each bin (same shape as `bins_remain_cap`).
    """
    # Small epsilon avoids division by zero for a perfect fit.
    eps = 1e-9

    # Compute leftover capacity if the item were placed in each bin.
    leftover = bins_remain_cap - item

    # Feasibility mask: only bins that can accommodate the item.
    feasible = leftover >= 0

    # Initialise priorities with a very low value for infeasible bins.
    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)

    # Inverse distance: larger priority for smaller leftover.
    # Using 1/(leftover + eps) makes a perfect fit (leftover â‰ˆ 0) get
    # a huge score, encouraging tight packing.
    priorities[feasible] = 1.0 / (leftover[feasible] + eps)

    # Optional tweak: boost perfect fits even more (commented out).
    # perfect_fit = feasible & np.isclose(leftover, 0.0, atol=eps)
    # priorities[perfect_fit] += 1e6

    return priorities
```
