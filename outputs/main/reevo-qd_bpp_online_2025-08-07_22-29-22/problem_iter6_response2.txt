```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Deterministic best‑fit priority for the online Bin Packing Problem.

    For each existing bin we compute the leftover capacity after (hypothetically)
    placing the incoming `item`.  Feasible bins (leftover ≥ 0) receive a priority
    equal to the negative leftover; the larger the priority, the tighter the fit.
    Infeasible bins receive ``-np.inf`` so they are never chosen.

    Ties (identical leftover) are broken deterministically by preferring bins with
    smaller indices (earlier bins) via a tiny decreasing offset.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of the remaining capacity of each bin.

    Returns
    -------
    np.ndarray
        Priority values for each bin (same shape as ``bins_remain_cap``).
    """
    # Ensure a float array for arithmetic
    caps = np.asarray(bins_remain_cap, dtype=float)

    # Hypothetical leftover after placing the item
    leftover = caps - item

    # Feasibility mask: only bins with non‑negative leftover can host the item
    feasible = leftover >= 0.0

    # Initialise priorities with -inf (worst possible score)
    priorities = np.full_like(caps, -np.inf, dtype=float)

    # Deterministic tie‑breaker: tiny decreasing term based on bin index
    # This is far smaller than any realistic leftover magnitude.
    tie_breaker = -np.arange(caps.size, dtype=float) * 1e-12

    # Assign priority to feasible bins: higher priority ↔ smaller leftover
    priorities[feasible] = -leftover[feasible] + tie_breaker[feasible]

    return priorities
```
