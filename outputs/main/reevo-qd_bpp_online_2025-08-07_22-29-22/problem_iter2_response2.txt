```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority function for the online Bin Packing Problem.

    Implements an exact‑fit‑first policy with deterministic tie‑breaking
    and waste penalisation. The bin with the highest returned score should be
    selected for the incoming `item` (e.g. via ``np.argmax``).

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array containing the remaining capacity of each existing bin.

    Returns
    -------
    np.ndarray
        Array of the same shape as ``bins_remain_cap`` with priority scores.
        Higher scores are preferred; infeasible bins receive ``-np.inf``.
    """
    # Ensure we are working with a NumPy array of floats
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)

    # Remaining capacity after (theoretically) placing the item in each bin
    leftover = bins_remain_cap - item

    # Tolerance for floating‑point comparisons (treat near‑zero leftovers as exact fits)
    eps = 1e-9

    # Initialise all priorities to -inf (infeasible by default)
    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)

    # Masks for different cases
    feasible_mask = leftover >= -eps                 # can accommodate (including exact fits)
    exact_fit_mask = np.abs(leftover) <= eps         # exact fits within tolerance
    non_exact_mask = feasible_mask & ~exact_fit_mask # feasible but not exact

    # Deterministic tie‑breaker: a tiny decreasing value based on bin index.
    # Lower index → slightly higher priority (more likely to be chosen on ties).
    tie_breaker = -1e-12 * np.arange(bins_remain_cap.shape[0])

    # Exact fits receive the highest base priority (0) plus the tie‑breaker.
    priorities[exact_fit_mask] = 0.0 + tie_breaker[exact_fit_mask]

    # Non‑exact feasible bins receive a score proportional to the negative leftover.
    # Smaller leftover (less waste) yields a larger (less negative) priority.
    priorities[non_exact_mask] = -leftover[non_exact_mask] + tie_breaker[non_exact_mask]

    return priorities
```
