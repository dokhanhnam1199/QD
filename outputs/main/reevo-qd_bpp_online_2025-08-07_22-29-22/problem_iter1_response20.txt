```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Priority function implementing the First‑Fit rule for online bin packing.
    
    The function yields a high score for the earliest bin that can accommodate
    the item, while bins that are too full receive a very low (negative infinite)
    priority so they are never selected.
    
    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array with the remaining capacity of each bin.
    
    Returns
    -------
    np.ndarray
        Priority scores – same shape as ``bins_remain_cap``.
    """
    # Ensure we work with a flat 1‑D view.
    caps = np.asarray(bins_remain_cap).ravel()
    n_bins = caps.size

    # 1. Feasibility mask: True if the item fits in the bin.
    feasible = caps >= item

    # 2. Base priority that strictly decreases with bin index.
    #    First bin gets n_bins, second n_bins‑1, … last gets 1.
    base_priority = (n_bins - np.arange(n_bins)).astype(caps.dtype)

    # 3. Tiny penalty proportional to leftover space (optional, but does not
    #    overturn index ordering).  The epsilon is chosen so that the penalty
    #    never exceeds 0.5, preserving the strict index order.
    eps = np.finfo(caps.dtype).eps * 10
    leftover_penalty = eps * (caps - item)

    # 4. Combine feasibility, base priority, and penalty.
    #    Infeasible bins get -inf so they are never chosen.
    priorities = np.where(feasible,
                          base_priority - leftover_penalty,
                          -np.inf)

    return priorities
```
