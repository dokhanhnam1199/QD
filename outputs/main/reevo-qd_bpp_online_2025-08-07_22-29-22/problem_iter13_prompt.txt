{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\n- Prioritize exact fits, then best\u2011fit by negative slack.  \n- Tie\u2011break deterministically (oldest or index).  \n- Skip EMA/softmax; keep scoring simple.  \n- Avoid penalizing new bins.  \n- Early empty\u2011bin check and tiny deterministic jitter help.  \n- Optionally weight by item\u2011to\u2011capacity ratio or add lookahead.  \n- Keep state minimal, vectorized.\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Almost Full Fit priority function.\n\n    Picks the bin that will be *almost* full after placing the item\n    (i.e. the smallest positive slack).  Bins that cannot accommodate\n    the item receive a very low priority of -\u221e.\n\n    Parameters\n    ----------\n    item : float\n        Size of the item to place.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of each bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority score for each bin; higher scores are preferred.\n    \"\"\"\n    # Compute the remaining slack after inserting the item.\n    slack = bins_remain_cap - item\n\n    # Bins that cannot fit the item are assigned -\u221e priority.\n    invalid_mask = slack < 0\n    priorities = np.where(invalid_mask, -np.inf, -slack)  # smaller slack \u21d2 larger priority\n\n    return priorities\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}