{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global random generator (single instance to avoid reseeding)\n_rng = np.random.default_rng()\n\n\n    \"\"\"\n    Hybrid random\u2011softmax priority for online Bin Packing.\n\n    This heuristic blends an exponential decay on the post\u2011placement waste\n    (tight\u2011fit preference) with a random perturbation and an item\u2011size weight.\n    The decay rate \u03bb adapts to the average waste of feasible bins, and the\n    score is further scaled by the fraction of the bin that the item will occupy.\n    Infeasible bins receive a priority of 0.  Scores are normalised to sum to 1\n    over feasible bins.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of each currently open bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (same shape as ``bins_remain_cap``).\n        The bin with the highest score should be selected for the item.\n    \"\"\"\n    # Ensure a NumPy float array for vectorised operations\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Edge case: no bins exist\n    if caps.size == 0:\n        return np.empty_like(caps)\n\n    # ---------- 1. Feasibility ----------\n    feasible = caps >= item\n    if not np.any(feasible):\n        # No open bin can host the item \u2013 caller may open a new bin.\n        return np.zeros_like(caps)\n\n    # ---------- 2. Waste computation ----------\n    waste = caps - item  # waste >= 0 for feasible bins\n\n    # ---------- 3. Adaptive \u03bb (based on mean waste) ----------\n    eps = 1e-12\n    mean_waste = waste[feasible].mean()\n    lam = 1.0 / (mean_waste + eps)\n\n    # ---------- 4. Base exponential decay (tight\u2011fit bias) ----------\n    raw = np.zeros_like(caps)\n    raw[feasible] = np.exp(-lam * waste[feasible])\n\n    # ---------- 5. Item\u2011size weighting ----------\n    # Prefer bins where the item occupies a larger fraction of the remaining capacity.\n    size_weight = np.zeros_like(caps)\n    size_weight[feasible] = item / caps[feasible]\n\n    # ---------- 6. Random perturbation ----------\n    # \u03b1 controls the strength of randomness (0 \u2192 deterministic, 1 \u2192 highly stochastic).\n    alpha = 0.3\n    rand_factor = np.ones_like(caps)\n    num_feasible = feasible.sum()\n    if num_feasible:\n        rand_factor[feasible] = 1.0 + alpha * _rng.random(num_feasible)\n\n    # ---------- 7. Combine components ----------\n    scores = raw * size_weight * rand_factor\n    scores[~feasible] = 0.0  # enforce zero for infeasible bins\n\n    # ---------- 8. Normalisation ----------\n    total = scores.sum()\n    if total > 0.0:\n        priorities = scores / total\n    else:\n        # Fallback: uniform distribution over feasible bins\n        priorities = np.where(feasible, 1.0 / num_feasible, 0.0)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute a sigmoid\u2011based priority score for placing ``item`` into each bin.\n\n    The score favours bins that will have a small residual capacity after\n    packing the item (tight fit).  The relationship between residual capacity\n    and priority is shaped by a logistic (sigmoid) function:\n\n        score = 1 / (1 + exp(-k * (\u03c4 - r\u0302)))\n\n    where:\n        r\u0302 = (remaining_capacity - item) / C\u0302  is the normalized residual,\n        C\u0302 = max(bins_remain_cap) + item         an estimate of the true bin\n                                                   capacity,\n        \u03c4  = tolerance (fraction of capacity we consider \u201ctight\u201d),\n        k  = steepness controlling how sharply the score drops when\n             residual exceeds the tolerance.\n\n    Infeasible bins (where the item does not fit) receive a very low priority\n    (\u2011inf) so they are never selected.\n\n    Parameters\n    ----------\n    item : float\n        Size of the item to be placed.\n    bins_remain_cap : np.ndarray\n        1\u2011D array containing the remaining free capacity of each bin.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores of the same shape as ``bins_remain_cap``.\n    \"\"\"\n    # Ensure proper dtype for vectorised arithmetic.\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # Compute remaining capacity after the candidate placement.\n    residual = bins_remain_cap - item\n\n    # Feasibility mask \u2013 bins where the item fits.\n    feasible = residual >= 0.0\n\n    # Estimate the original bin capacity.\n    # Adding ``item`` guarantees that an empty bin (full capacity) yields C\u0302 \u2248 bin_capacity.\n    est_capacity = np.max(bins_remain_cap) + item\n\n    # Normalised residual (fraction of estimated capacity left after placement).\n    # Clip to [0, 1] for numerical stability.\n    norm_residual = np.clip(residual / est_capacity, 0.0, 1.0)\n\n    # Sigmoid hyper\u2011parameters.\n    steepness = 12.0   # Controls the sharpness of the transition.\n    tolerance = 0.10   # Desired maximal leftover fraction (10\u202f% of capacity).\n\n    # Compute sigmoid\u2011based scores.\n    # High score when normalized residual \u2264 tolerance, low otherwise.\n    scores = np.full_like(bins_remain_cap, fill_value=-np.inf, dtype=float)\n    scores[feasible] = 1.0 / (1.0 + np.exp(-steepness * (tolerance - norm_residual[feasible])))\n\n    return scores\n\n[Reflection]\nUse sigmoid instead of exponential, adjust \u03bb, clamp random factor, normalize, consider item\u2011size weight.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}