```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority function for the Best-Fit strategy in the online Bin Packing Problem.

    For each bin, a higher priority means the bin is more desirable for placing the item.
    The function favours bins where the item fits most tightly (i.e., leaves the smallest
    leftover capacity). Bins that cannot accommodate the item receive a priority of -inf.

    A tiny epsilon term is subtracted based on the bin index to break ties in favour of
    lower-index bins.

    Args:
        item: Size of the incoming item.
        bins_remain_cap: 1‑D array with the remaining capacity of each bin.

    Returns:
        A NumPy array of the same shape as `bins_remain_cap` containing priority scores.
    """
    # Boolean mask indicating which bins can fit the item.
    feasible = bins_remain_cap >= item

    # Compute leftover capacity if the item were placed.
    leftover = bins_remain_cap - item

    # For feasible bins, priority = -leftover (smaller leftover => higher priority).
    # Infeasible bins get -inf so they are never chosen.
    priorities = np.where(feasible, -leftover, -np.inf)

    # Tie‑breaking: favor lower-index bins by a negligible penalty proportional to the index.
    epsilon = 1e-9
    priorities = priorities - epsilon * np.arange(bins_remain_cap.shape[0])

    return priorities
```
