{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global random generator to avoid reseeding on every call\n_rng = np.random.default_rng()\n\n    \"\"\"Random\u2011Fit priority for online Bin Packing.\n\n    For each bin that can accommodate the incoming `item` (i.e. its remaining\n    capacity \u2265 item size), we assign an independent random number drawn from a\n    uniform distribution on (0, 1). Bins that cannot accommodate the item receive\n    a priority of -inf, ensuring they are never selected. The bin with the\n    maximum priority (the highest random draw) will be chosen, which implements\n    the classic Random Fit strategy.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array with the remaining capacity of each existing bin.\n\n    Returns:\n        A NumPy array of the same shape as `bins_remain_cap` containing priority\n        scores for each bin.\n    \"\"\"\n    # Initialise all priorities to -inf (infeasible by default)\n    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n\n    # Identify bins that can fit the item\n    feasible_mask = bins_remain_cap >= item\n    num_feasible = np.count_nonzero(feasible_mask)\n\n    # Assign random priorities only to feasible bins\n    if num_feasible:\n        priorities[feasible_mask] = _rng.random(num_feasible)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n_rng = np.random.default_rng()\n\n    \"\"\"\n    Priority function for online Bin Packing that prioritizes exact fits,\n    then bins that leave the least leftover space, and breaks ties with\n    a tiny random perturbation.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array with the remaining capacity of each existing bin.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores for each bin.  The bin with the largest\n        score should be selected for packing the item.\n    \"\"\"\n    eps = 1e-9          # tolerance for floating\u2011point comparisons\n    eps_noise = 1e-6    # magnitude of random tie\u2011breaker\n\n    # Remaining capacity after hypothetically placing the item\n    leftover = bins_remain_cap - item\n\n    # Base priority: 0 for exact fit, otherwise negative leftover\n    base = np.where(\n        leftover < -eps,           # cannot fit\n        -np.inf,\n        np.where(\n            np.abs(leftover) <= eps,\n            0.0,\n            -leftover\n        )\n    )\n\n    # Small random noise to break ties\n    noise = _rng.uniform(-eps_noise, eps_noise, size=base.shape)\n\n    # Final priority\n    priority = base + noise\n\n    return priority.astype(float)\n\n[Reflection]\nPrioritize exact fits, then minimal leftover; add tiny random tie\u2011breaker; avoid per\u2011call reseeding; mark infeasible bins with -inf.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}