{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global random generator to avoid reseeding on every call\n_rng = np.random.default_rng()\n\n    \"\"\"Random\u2011Fit priority for online Bin Packing.\n\n    For each bin that can accommodate the incoming `item` (i.e. its remaining\n    capacity \u2265 item size), we assign an independent random number drawn from a\n    uniform distribution on (0, 1). Bins that cannot accommodate the item receive\n    a priority of -inf, ensuring they are never selected. The bin with the\n    maximum priority (the highest random draw) will be chosen, which implements\n    the classic Random Fit strategy.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array with the remaining capacity of each existing bin.\n\n    Returns:\n        A NumPy array of the same shape as `bins_remain_cap` containing priority\n        scores for each bin.\n    \"\"\"\n    # Initialise all priorities to -inf (infeasible by default)\n    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n\n    # Identify bins that can fit the item\n    feasible_mask = bins_remain_cap >= item\n    num_feasible = np.count_nonzero(feasible_mask)\n\n    # Assign random priorities only to feasible bins\n    if num_feasible:\n        priorities[feasible_mask] = _rng.random(num_feasible)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Softmax\u2011Based Fit priority function for online Bin Packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of each currently open bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin. Scores sum to 1 across bins that can host the\n        item (softmax probabilities). Infeasible bins receive a score of 0.\n    \n    Strategy\n    --------\n    1. Determine which bins can accommodate the item.\n    2. Compute the *waste* that would remain after inserting the item:\n          waste_i = bins_remain_cap[i] - item.\n    3. Transform waste into a fitness score with exponential decay:\n          score_i = exp(-\u03bb * waste_i)\n       where \u03bb controls the steepness of the softmax. \u03bb is set adaptively as\n       the inverse of the average waste among feasible bins.\n    4. Apply a softmax normalisation so tighter fits (smaller waste) obtain\n       higher priority.\n    \"\"\"\n    # Ensure a NumPy array of float for vectorised operations\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # ---------- 1. Feasibility ----------\n    feasible = caps >= item\n    if not np.any(feasible):\n        # No open bin can host the item \u2192 caller should open a new bin.\n        return np.zeros_like(caps)\n\n    # ---------- 2. Compute waste ----------\n    # waste for feasible bins, np.inf for infeasible (will be ignored later)\n    waste = np.where(feasible, caps - item, np.inf)\n\n    # ---------- 3. Adaptive \u03bb (softmax temperature) ----------\n    # Small epsilon avoids division by zero if waste is exactly zero.\n    eps = 1e-12\n    mean_waste = waste[feasible].mean()\n    lam = 1.0 / (mean_waste + eps)\n\n    # ---------- 4. Raw scores via exponential decay ----------\n    raw = np.exp(-lam * waste)\n    raw[~feasible] = 0.0  # enforce zero for infeasible bins\n\n    # ---------- 5. Softmax normalisation ----------\n    total = raw.sum()\n    if total > 0:\n        priorities = raw / total\n    else:\n        # Numerically unlikely fallback: uniform over feasible bins\n        priorities = np.where(feasible, 1.0 / feasible.sum(), 0.0)\n\n    return priorities\n\n[Reflection]\nBlend waste\u2011decay softmax with controlled randomness; adapt \u03bb per item, test temperature schedules, monitor waste variance.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}