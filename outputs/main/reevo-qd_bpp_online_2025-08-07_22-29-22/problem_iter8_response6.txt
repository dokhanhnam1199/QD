```python
import numpy as np

# Global random generator for optional tie‑breaking noise
_rng = np.random.default_rng()

# ---------- Minimal EMA for item‑size statistics ----------
_alpha_ema = 0.1          # smoothing factor
_ema_item_size = 0.0      # exponential moving average of item size
_ema_item_sq = 0.0        # exponential moving average of squared size
_item_count = 0           # number of observed items


def _update_item_stats(item: float) -> None:
    """Update EMA statistics with a newly observed item."""
    global _ema_item_size, _ema_item_sq, _item_count
    _item_count += 1
    _ema_item_size = (1 - _alpha_ema) * _ema_item_size + _alpha_ema * item
    _ema_item_sq = (1 - _alpha_ema) * _ema_item_sq + _alpha_ema * (item * item)


def _current_std() -> float:
    """Return the current estimated standard deviation of item sizes."""
    var = _ema_item_sq - _ema_item_size ** 2
    var = max(var, 0.0)          # guard against tiny negative due to rounding
    return np.sqrt(var)


def _tolerance() -> float:
    """
    Compute a small tolerance for feasibility checks.
    The tolerance grows with the observed variability of item sizes.
    """
    std = _current_std()
    # 1 % of the standard deviation (or a tiny absolute floor) is used as epsilon
    return max(1e-9, 0.01 * std)


def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    *,
    temperature: float = 0.1,
    random_noise: bool = False,
    noise_scale: float = 1e-12,
) -> np.ndarray:
    """
    Softmax‑based priority for online Bin Packing.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of the currently open bins.
    temperature : float, optional (default=0.1)
        Controls the sharpness of the softmax.  Lower values make the decision
        more deterministic (approaching a greedy Best‑Fit), while higher values
        spread the probability mass more uniformly.
    random_noise : bool, optional (default=False)
        If True, a tiny uniform noise (±``noise_scale``) is added to the logits
        of feasible bins to break ties stochastically.
    noise_scale : float, optional (default=1e-12)
        Amplitude of the optional tie‑breaking noise.

    Returns
    -------
    np.ndarray
        Priority scores for each bin (same shape as ``bins_remain_cap``).  Infeasible
        bins receive a priority of 0, and the scores of feasible bins sum to 1.
    """
    if temperature <= 0.0:
        raise ValueError("temperature must be a positive float")

    # Update EMA statistics (used only for a tiny feasibility tolerance)
    _update_item_stats(item)

    # Convert input to a float64 NumPy array for stable arithmetic
    caps = np.asarray(bins_remain_cap, dtype=np.float64)

    # Feasibility mask with a small tolerance to guard against floating‑point errors
    eps = _tolerance()
    feasible = caps >= item - eps

    # Initialise priority vector (zeros for infeasible bins)
    priorities = np.zeros_like(caps, dtype=np.float64)

    if not np.any(feasible):
        # No bin can accommodate the item – return the zero vector
        return priorities

    # Slack (unused capacity) after placing the item in each feasible bin
    slack = caps[feasible] - item  # non‑negative by construction

    # Logits: tighter fit (smaller slack) yields a larger logit
    logits = np.full_like(caps, -np.inf, dtype=np.float64)
    logits[feasible] = -slack / temperature

    # Optional tiny noise for stochastic tie‑breaking
    if random_noise:
        noise = _rng.uniform(-noise_scale, noise_scale, size=slack.shape)
        logits[feasible] += noise

    # Numerically stable softmax
    max_logit = np.max(logits[feasible])          # safe: feasible is non‑empty
    shifted = logits - max_logit                  # -inf stays -inf for infeasible bins
    exp_shifted = np.exp(shifted)                 # exp(-inf) = 0
    sum_exp = np.sum(exp_shifted)                # >0 because at least one entry is 1
    priorities = exp_shifted / sum_exp

    return priorities
```
