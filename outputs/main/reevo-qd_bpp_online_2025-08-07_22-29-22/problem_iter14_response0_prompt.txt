{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global random generator to avoid reseeding on every call\n_rng = np.random.default_rng()\n\n    \"\"\"Random\u2011Fit priority for online Bin Packing.\n\n    For each bin that can accommodate the incoming `item` (i.e. its remaining\n    capacity \u2265 item size), we assign an independent random number drawn from a\n    uniform distribution on (0, 1). Bins that cannot accommodate the item receive\n    a priority of -inf, ensuring they are never selected. The bin with the\n    maximum priority (the highest random draw) will be chosen, which implements\n    the classic Random Fit strategy.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array with the remaining capacity of each existing bin.\n\n    Returns:\n        A NumPy array of the same shape as `bins_remain_cap` containing priority\n        scores for each bin.\n    \"\"\"\n    # Initialise all priorities to -inf (infeasible by default)\n    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n\n    # Identify bins that can fit the item\n    feasible_mask = bins_remain_cap >= item\n    num_feasible = np.count_nonzero(feasible_mask)\n\n    # Assign random priorities only to feasible bins\n    if num_feasible:\n        priorities[feasible_mask] = _rng.random(num_feasible)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global random generator for reproducibility (used only for optional tie\u2011breaking noise)\n_rng = np.random.default_rng()\n\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    base_temperature: float = 0.1,\n    min_temperature: float = 1e-4,\n    eps: float = 1e-12,\n) -> np.ndarray:\n    \"\"\"\n    Adaptive Softmax\u2011Based priority for online Bin Packing.\n\n    The function scores each existing bin by how tightly the incoming ``item``\n    would fit (negative slack).  These scores are transformed by a softmax\n    whose temperature is *adaptively* tuned based on the spread of the slack\n    values:\n\n    * When the slack distribution is highly variable, the temperature stays\n      close to ``base_temperature`` \u2192 the algorithm behaves almost greedily,\n      favouring the tightest fit.\n    * When the slacks are similar (low variability), the temperature is raised\n      (up to roughly ``2 * base_temperature``) \u2192 the selection becomes more\n      stochastic, helping to avoid deterministic tie\u2011breaking.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the current bins.\n    base_temperature : float, optional\n        Base temperature for the softmax (must be > 0). Default = 0.1.\n    min_temperature : float, optional\n        Lower bound for the adaptive temperature to avoid division by zero.\n        Default = 1e\u20114.\n    eps : float, optional\n        Small constant to avoid division by zero in coefficient\u2011of\u2011variation\n        calculation. Default = 1e\u201112.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin.  Infeasible bins receive a priority of 0.\n        The vector sums to 1 across all feasible bins (or to 0 if none are\n        feasible).\n    \"\"\"\n    if base_temperature <= 0:\n        raise ValueError(\"base_temperature must be positive\")\n\n    # Ensure input is a NumPy array of float64 for safe arithmetic\n    caps = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    # No bins at all \u2192 return empty array\n    if caps.size == 0:\n        return caps\n\n    # Feasibility mask: bins that can accommodate the item\n    feasible = caps >= item\n\n    # Initialise priorities (0 for infeasible bins)\n    priorities = np.zeros_like(caps, dtype=np.float64)\n\n    # If nothing fits, simply return the zero vector (caller may open a new bin)\n    if not np.any(feasible):\n        return priorities\n\n    # Slack = unused capacity after placing the item (only for feasible bins)\n    slack = caps[feasible] - item  # shape = (num_feasible,)\n\n    # --- Adaptive temperature -------------------------------------------------\n    # Coefficient of variation (std / mean) measures spread of slack values\n    slack_mean = np.mean(slack)\n    slack_std = np.std(slack)\n\n    # Prevent division by zero when mean slack is (near) zero\n    cv = slack_std / (slack_mean + eps)\n\n    # Scale temperature: larger when CV is small (slacks similar),\n    # smaller when CV is large (slacks diverse).  Clamp cv to [0, 1] for stability.\n    cv_clamped = min(cv, 1.0)\n    # Scaling factor lies in [1, 2]; temperature in [base, 2*base]\n    scaling = 2.0 - cv_clamped\n    temperature = max(min_temperature, base_temperature * scaling)\n\n    # --- Softmax computation --------------------------------------------------\n    # Logits are higher for tighter fits (smaller slack)\n    logits = -slack / temperature  # shape = (num_feasible,)\n\n    # Optional tiny random perturbation to break exact ties without adding\n    # noticeable randomness (especially when slacks are identical)\n    if np.any(logits == logits.max()):\n        # Add uniform noise in a very small range to the maximal logits only\n        tie_mask = logits == logits.max()\n        logits[tie_mask] += _rng.uniform(-eps, eps, size=tie_mask.sum())\n\n    # Stabilize softmax by subtracting max logit (numerical stability)\n    max_logit = np.max(logits)\n    exp_logits = np.exp(logits - max_logit)\n\n    # Normalise to obtain a probability\u2011like priority distribution\n    sum_exp = np.sum(exp_logits)\n    if sum_exp > 0:\n        probs = exp_logits / sum_exp\n    else:\n        # Degenerate case (should not happen), fall back to uniform distribution\n        probs = np.full_like(exp_logits, 1.0 / exp_logits.size)\n\n    # Fill the priority vector for feasible bins\n    priorities[feasible] = probs\n\n    return priorities\n\n[Reflection]\nScale softmax temperature by slack variance, use slack as negative logits, add tiny random tie\u2011breaker, zero infeasible bins.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}