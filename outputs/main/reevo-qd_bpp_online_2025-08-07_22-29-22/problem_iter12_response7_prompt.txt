{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global random generator reused across calls\n_rng = np.random.default_rng()\n\n# Running statistics of observed item sizes (simple sum/count)\n_item_count = 0\n_item_sum = 0.0\n\n\n    \"\"\"\n    Priority function for the online Bin Packing Problem.\n\n    Higher scores indicate more desirable bins. The scoring combines:\n      \u2022 Best\u2011fit (smaller leftover \u2192 higher score)\n      \u2022 Controlled random perturbation (more for small items)\n      \u2022 A look\u2011ahead boost based on the running average item size\n      \u2022 A deterministic tie\u2011breaker favouring lower\u2011index bins\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the existing bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (same shape as ``bins_remain_cap``).\n        Infeasible bins receive ``-np.inf``.\n    \"\"\"\n    global _item_count, _item_sum\n\n    # Ensure we are working with a NumPy array of floats\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # No bins yet \u2013 just record statistics and return empty array\n    if bins_remain_cap.size == 0:\n        _item_count += 1\n        _item_sum += item\n        return np.array([], dtype=float)\n\n    # Compute leftover capacity if the item were placed in each bin\n    leftover = bins_remain_cap - item\n\n    # Small epsilon to guard against floating\u2011point round\u2011off\n    eps = 1e-12\n    feasible = leftover >= -eps\n\n    # Initialise priority vector with -inf for infeasible bins\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # If nothing fits, update stats and return\n    if not np.any(feasible):\n        _item_count += 1\n        _item_sum += item\n        return priorities\n\n    # ------------------------------------------------------------------\n    # 1. Base best\u2011fit score (smaller leftover \u2192 larger score)\n    # ------------------------------------------------------------------\n    base_score = -leftover[feasible]\n\n    # ------------------------------------------------------------------\n    # 2. Controlled randomness (more for small items)\n    # ------------------------------------------------------------------\n    # Approximate bin capacity (max remaining + current item) \u2013 fallback 1.0\n    approx_capacity = max(bins_remain_cap.max() + item, 1.0)\n    item_ratio = item / approx_capacity                     # \u2208 [0, 1]\n\n    # Spread of leftover among feasible bins\n    leftover_feas = leftover[feasible]\n    if leftover_feas.size > 1:\n        leftover_range = leftover_feas.max() - leftover_feas.min()\n    else:\n        leftover_range = 0.0\n\n    # Noise scale grows when the item is small (item_ratio low) and when\n    # there is a larger spread of leftover capacities.\n    noise_scale = leftover_range * 0.05 * (1.0 - item_ratio)\n    noise_scale = max(noise_scale, 0.0)\n    random_noise = _rng.random(leftover_feas.shape) * noise_scale\n\n    # ------------------------------------------------------------------\n    # 3. Look\u2011ahead boost using running average item size\n    # ------------------------------------------------------------------\n    if _item_count > 0:\n        avg_item = _item_sum / _item_count\n    else:\n        avg_item = item  # first item fallback\n\n    # Small positive boost if the bin would still have room for a typical\n    # future item; slight penalty otherwise.\n    future_weight = 0.02\n    future_adjust = (leftover_feas - avg_item) * future_weight\n\n    # ------------------------------------------------------------------\n    # 4. Deterministic tie\u2011breaker (prefer lower index bins)\n    # ------------------------------------------------------------------\n    tie_breaker = -np.arange(bins_remain_cap.size, dtype=float) * 1e-12\n\n    # ------------------------------------------------------------------\n    # 5. Combine components\n    # ------------------------------------------------------------------\n    combined = base_score + random_noise + future_adjust + tie_breaker[feasible]\n    priorities[feasible] = combined\n\n    # ------------------------------------------------------------------\n    # 6. Update global statistics\n    # ------------------------------------------------------------------\n    _item_count += 1\n    _item_sum += item\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global random generator for optional tie\u2011breaking noise\n_rng = np.random.default_rng()\n\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    *,\n    temperature: float = 0.1,\n    random_noise: bool = False,\n    noise_scale: float = 1e-12,\n) -> np.ndarray:\n    \"\"\"\n    Compute a softmax\u2011based priority vector for an online Bin Packing item.\n\n    The function prefers bins where the item fits tightly (small slack).\n    For each feasible bin we compute a logit proportional to the negative slack,\n    scaled by ``temperature``.  The logits are turned into a probability\u2011like\n    priority distribution via a numerically\u2011stable softmax.  Infeasible bins\n    receive a priority of 0.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the currently open bins.\n    temperature : float, optional (default=0.1)\n        Controls the sharpness of the softmax.  Lower values make the decision\n        more deterministic (closer to a greedy Best\u2011Fit), while higher values\n        spread the probability mass more uniformly.\n    random_noise : bool, optional (default=False)\n        If True, a tiny uniform noise (\u00b1``noise_scale``) is added to the logits\n        of feasible bins to break ties in a reproducible stochastic way.\n    noise_scale : float, optional (default=1e-12)\n        Magnitude of the optional tie\u2011breaking noise.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (same shape as ``bins_remain_cap``).  The\n        scores sum to 1 across all feasible bins; infeasible bins have a score\n        of 0.  The bin with the highest priority should be selected for the item.\n    \"\"\"\n    if temperature <= 0.0:\n        raise ValueError(\"temperature must be a positive float\")\n\n    # Ensure we work with a NumPy array of float64 for numerical stability\n    caps = np.asarray(bins_remain_cap, dtype=np.float64)\n\n    # Feasibility mask: only bins with enough remaining capacity can hold the item\n    feasible = caps >= item\n\n    # Initialise priority vector with zeros (infeasible bins stay zero)\n    priorities = np.zeros_like(caps, dtype=np.float64)\n\n    # If no bin can accommodate the item, return the zero vector\n    if not np.any(feasible):\n        return priorities\n\n    # Compute slack (unused capacity after placing the item) for feasible bins\n    slack = caps[feasible] - item  # non\u2011negative by construction\n\n    # Logits: tighter fit (smaller slack) gets larger logit\n    logits = np.full_like(caps, -np.inf, dtype=np.float64)\n    logits[feasible] = -slack / temperature\n\n    # Optional tiny noise for stochastic tie\u2011breaking (deterministic otherwise)\n    if random_noise:\n        noise = _rng.uniform(-noise_scale, noise_scale, size=logits.shape)\n        logits[feasible] += noise[feasible]\n\n    # Numerically stable softmax\n    max_logit = np.max(logits[feasible])          # safe because feasible is non\u2011empty\n    exp_shifted = np.exp(logits - max_logit)     # exp(-inf) = 0 for infeasible bins\n    sum_exp = np.sum(exp_shifted)                # >0 because at least one entry is 1\n\n    # Normalise to obtain a probability\u2011like priority distribution\n    priorities = exp_shifted / sum_exp\n\n    return priorities\n\n[Reflection]\nSoftmax with temperature, tiny tie\u2011breaking noise, no global state, enforce feasibility mask, prioritize minimal slack.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}