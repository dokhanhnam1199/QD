{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global random generator (single instance to avoid reseeding)\n_rng = np.random.default_rng()\n\n\n    \"\"\"\n    Hybrid random\u2011softmax priority for online Bin Packing.\n\n    This heuristic blends an exponential decay on the post\u2011placement waste\n    (tight\u2011fit preference) with a random perturbation and an item\u2011size weight.\n    The decay rate \u03bb adapts to the average waste of feasible bins, and the\n    score is further scaled by the fraction of the bin that the item will occupy.\n    Infeasible bins receive a priority of 0.  Scores are normalised to sum to 1\n    over feasible bins.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of each currently open bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (same shape as ``bins_remain_cap``).\n        The bin with the highest score should be selected for the item.\n    \"\"\"\n    # Ensure a NumPy float array for vectorised operations\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Edge case: no bins exist\n    if caps.size == 0:\n        return np.empty_like(caps)\n\n    # ---------- 1. Feasibility ----------\n    feasible = caps >= item\n    if not np.any(feasible):\n        # No open bin can host the item \u2013 caller may open a new bin.\n        return np.zeros_like(caps)\n\n    # ---------- 2. Waste computation ----------\n    waste = caps - item  # waste >= 0 for feasible bins\n\n    # ---------- 3. Adaptive \u03bb (based on mean waste) ----------\n    eps = 1e-12\n    mean_waste = waste[feasible].mean()\n    lam = 1.0 / (mean_waste + eps)\n\n    # ---------- 4. Base exponential decay (tight\u2011fit bias) ----------\n    raw = np.zeros_like(caps)\n    raw[feasible] = np.exp(-lam * waste[feasible])\n\n    # ---------- 5. Item\u2011size weighting ----------\n    # Prefer bins where the item occupies a larger fraction of the remaining capacity.\n    size_weight = np.zeros_like(caps)\n    size_weight[feasible] = item / caps[feasible]\n\n    # ---------- 6. Random perturbation ----------\n    # \u03b1 controls the strength of randomness (0 \u2192 deterministic, 1 \u2192 highly stochastic).\n    alpha = 0.3\n    rand_factor = np.ones_like(caps)\n    num_feasible = feasible.sum()\n    if num_feasible:\n        rand_factor[feasible] = 1.0 + alpha * _rng.random(num_feasible)\n\n    # ---------- 7. Combine components ----------\n    scores = raw * size_weight * rand_factor\n    scores[~feasible] = 0.0  # enforce zero for infeasible bins\n\n    # ---------- 8. Normalisation ----------\n    total = scores.sum()\n    if total > 0.0:\n        priorities = scores / total\n    else:\n        # Fallback: uniform distribution over feasible bins\n        priorities = np.where(feasible, 1.0 / num_feasible, 0.0)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Softmax\u2011Based Fit priority function for online Bin Packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of each currently open bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin. Scores sum to 1 across bins that can host the\n        item (softmax probabilities). Infeasible bins receive a score of 0.\n    \n    Strategy\n    --------\n    1. Determine which bins can accommodate the item.\n    2. Compute the *waste* that would remain after inserting the item:\n          waste_i = bins_remain_cap[i] - item.\n    3. Transform waste into a fitness score with exponential decay:\n          score_i = exp(-\u03bb * waste_i)\n       where \u03bb controls the steepness of the softmax. \u03bb is set adaptively as\n       the inverse of the average waste among feasible bins.\n    4. Apply a softmax normalisation so tighter fits (smaller waste) obtain\n       higher priority.\n    \"\"\"\n    # Ensure a NumPy array of float for vectorised operations\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # ---------- 1. Feasibility ----------\n    feasible = caps >= item\n    if not np.any(feasible):\n        # No open bin can host the item \u2192 caller should open a new bin.\n        return np.zeros_like(caps)\n\n    # ---------- 2. Compute waste ----------\n    # waste for feasible bins, np.inf for infeasible (will be ignored later)\n    waste = np.where(feasible, caps - item, np.inf)\n\n    # ---------- 3. Adaptive \u03bb (softmax temperature) ----------\n    # Small epsilon avoids division by zero if waste is exactly zero.\n    eps = 1e-12\n    mean_waste = waste[feasible].mean()\n    lam = 1.0 / (mean_waste + eps)\n\n    # ---------- 4. Raw scores via exponential decay ----------\n    raw = np.exp(-lam * waste)\n    raw[~feasible] = 0.0  # enforce zero for infeasible bins\n\n    # ---------- 5. Softmax normalisation ----------\n    total = raw.sum()\n    if total > 0:\n        priorities = raw / total\n    else:\n        # Numerically unlikely fallback: uniform over feasible bins\n        priorities = np.where(feasible, 1.0 / feasible.sum(), 0.0)\n\n    return priorities\n\n[Reflection]\nAdaptive \u03bb, pure exponential decay, no random/size weighting; normalize to probabilities; keep computation simple.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}