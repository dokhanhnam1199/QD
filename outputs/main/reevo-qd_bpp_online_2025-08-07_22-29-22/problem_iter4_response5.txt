```python
import numpy as np

_rng = np.random.default_rng()

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Adaptive Sigmoid Fit Score for online bin packing.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        Remaining capacities of the currently open bins.

    Returns
    -------
    np.ndarray
        Priority scores with the same shape as ``bins_remain_cap``.  Bins that
        cannot accommodate the item receive a score of ``-inf`` so they are
        never selected.  Feasible bins are scored by a sigmoid function that
        favours bins leaving the smallest slack after placement.  A tiny
        random perturbation is added to break ties in a deterministic but
        stable way.
    """
    # Ensure we work with a float array
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)

    # Slack after placing the item in each bin (negative => infeasible)
    slack = bins_remain_cap - item

    # Feasibility mask
    feasible = slack >= 0.0

    # Default priority for infeasible bins: -inf
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # If no bin can accommodate the item, return the vector of -inf
    if not feasible.any():
        return priorities

    # Slack values for feasible bins only
    slack_feas = slack[feasible]

    # Adaptive sigmoid parameters:
    #   beta (median slack) sets the inflection point
    #   alpha (slope) is chosen so that the sigmoid spans roughly 8 units
    #   across the observed slack range
    beta = np.median(slack_feas)

    slack_range = slack_feas.max() - slack_feas.min() + 1e-12
    alpha = 8.0 / slack_range

    # Logistic decreasing in slack: smaller slack â†’ higher score
    scores = 1.0 / (1.0 + np.exp(alpha * (slack_feas - beta)))

    # Tiny random noise to break ties (scaled by 1e-6)
    noise = _rng.random(len(slack_feas)) * 1e-6
    scores += noise

    # Assign the scores back to the full priority array
    priorities[feasible] = scores

    return priorities
```
