{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global random generator reused across calls\n_rng = np.random.default_rng()\n\n# Running statistics of observed item sizes (simple sum/count)\n_item_count = 0\n_item_sum = 0.0\n\n\n    \"\"\"\n    Priority function for the online Bin Packing Problem.\n\n    Higher scores indicate more desirable bins. The scoring combines:\n      \u2022 Best\u2011fit (smaller leftover \u2192 higher score)\n      \u2022 Controlled random perturbation (more for small items)\n      \u2022 A look\u2011ahead boost based on the running average item size\n      \u2022 A deterministic tie\u2011breaker favouring lower\u2011index bins\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the existing bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (same shape as ``bins_remain_cap``).\n        Infeasible bins receive ``-np.inf``.\n    \"\"\"\n    global _item_count, _item_sum\n\n    # Ensure we are working with a NumPy array of floats\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # No bins yet \u2013 just record statistics and return empty array\n    if bins_remain_cap.size == 0:\n        _item_count += 1\n        _item_sum += item\n        return np.array([], dtype=float)\n\n    # Compute leftover capacity if the item were placed in each bin\n    leftover = bins_remain_cap - item\n\n    # Small epsilon to guard against floating\u2011point round\u2011off\n    eps = 1e-12\n    feasible = leftover >= -eps\n\n    # Initialise priority vector with -inf for infeasible bins\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # If nothing fits, update stats and return\n    if not np.any(feasible):\n        _item_count += 1\n        _item_sum += item\n        return priorities\n\n    # ------------------------------------------------------------------\n    # 1. Base best\u2011fit score (smaller leftover \u2192 larger score)\n    # ------------------------------------------------------------------\n    base_score = -leftover[feasible]\n\n    # ------------------------------------------------------------------\n    # 2. Controlled randomness (more for small items)\n    # ------------------------------------------------------------------\n    # Approximate bin capacity (max remaining + current item) \u2013 fallback 1.0\n    approx_capacity = max(bins_remain_cap.max() + item, 1.0)\n    item_ratio = item / approx_capacity                     # \u2208 [0, 1]\n\n    # Spread of leftover among feasible bins\n    leftover_feas = leftover[feasible]\n    if leftover_feas.size > 1:\n        leftover_range = leftover_feas.max() - leftover_feas.min()\n    else:\n        leftover_range = 0.0\n\n    # Noise scale grows when the item is small (item_ratio low) and when\n    # there is a larger spread of leftover capacities.\n    noise_scale = leftover_range * 0.05 * (1.0 - item_ratio)\n    noise_scale = max(noise_scale, 0.0)\n    random_noise = _rng.random(leftover_feas.shape) * noise_scale\n\n    # ------------------------------------------------------------------\n    # 3. Look\u2011ahead boost using running average item size\n    # ------------------------------------------------------------------\n    if _item_count > 0:\n        avg_item = _item_sum / _item_count\n    else:\n        avg_item = item  # first item fallback\n\n    # Small positive boost if the bin would still have room for a typical\n    # future item; slight penalty otherwise.\n    future_weight = 0.02\n    future_adjust = (leftover_feas - avg_item) * future_weight\n\n    # ------------------------------------------------------------------\n    # 4. Deterministic tie\u2011breaker (prefer lower index bins)\n    # ------------------------------------------------------------------\n    tie_breaker = -np.arange(bins_remain_cap.size, dtype=float) * 1e-12\n\n    # ------------------------------------------------------------------\n    # 5. Combine components\n    # ------------------------------------------------------------------\n    combined = base_score + random_noise + future_adjust + tie_breaker[feasible]\n    priorities[feasible] = combined\n\n    # ------------------------------------------------------------------\n    # 6. Update global statistics\n    # ------------------------------------------------------------------\n    _item_count += 1\n    _item_sum += item\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Return priority scores for bin placement using a Best\u2011Fit rule.\n\n    The strategy gives higher priority to bins that will have the smallest\n    remaining capacity after the item is inserted.  Bins that cannot\n    accommodate the item receive a very low score.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array holding the remaining capacity of each open bin.\n\n    Returns\n    -------\n    priorities : np.ndarray\n        An array of the same shape as ``bins_remain_cap`` with a numeric\n        priority for each bin.  The bin with the maximum priority will\n        be chosen by the caller.  Bins that cannot take the item will\n        get a score of ``-np.inf``.\n    \"\"\"\n    # Ensure the input is a float array (in case the caller passes ints)\n    bins = np.asarray(bins_remain_cap, dtype=float)\n    n = bins.size\n\n    # Fast path for an empty bin list \u2013 typical for the very first item.\n    if n == 0:\n        return np.empty(0, dtype=float)\n\n    # Initialise all priorities to a very low value.\n    priorities = np.full(n, -np.inf, dtype=float)\n\n    # Identify bins that can accommodate the item\n    can_place = bins >= item\n    if not np.any(can_place):\n        return priorities  # nothing can take the item\n\n    # Remaining capacity after the item would be inserted\n    leftover = bins[can_place] - item\n\n    # Small deterministic bias \u2013 earlier bins get slightly higher priority\n    # for bins with exactly the same leftover.  This keeps the behaviour\n    # reproducible across runs.\n    indices = np.arange(n)[can_place]\n    priorities[can_place] = -leftover - 1e-7 * indices\n\n    return priorities\n\n[Reflection]\nUse pure best\u2011fit, deterministic bias, early empty\u2011bin check, avoid stateful randomness, keep vectorized, simple, fast.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}