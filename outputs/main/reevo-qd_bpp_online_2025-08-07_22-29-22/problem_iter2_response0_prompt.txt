{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global random generator to avoid reseeding on every call\n_rng = np.random.default_rng()\n\n    \"\"\"Random\u2011Fit priority for online Bin Packing.\n\n    For each bin that can accommodate the incoming `item` (i.e. its remaining\n    capacity \u2265 item size), we assign an independent random number drawn from a\n    uniform distribution on (0, 1). Bins that cannot accommodate the item receive\n    a priority of -inf, ensuring they are never selected. The bin with the\n    maximum priority (the highest random draw) will be chosen, which implements\n    the classic Random Fit strategy.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array with the remaining capacity of each existing bin.\n\n    Returns:\n        A NumPy array of the same shape as `bins_remain_cap` containing priority\n        scores for each bin.\n    \"\"\"\n    # Initialise all priorities to -inf (infeasible by default)\n    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n\n    # Identify bins that can fit the item\n    feasible_mask = bins_remain_cap >= item\n    num_feasible = np.count_nonzero(feasible_mask)\n\n    # Assign random priorities only to feasible bins\n    if num_feasible:\n        priorities[feasible_mask] = _rng.random(num_feasible)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Best\u2011Fit priority for the online Bin Packing Problem.\n\n    For each bin we compute the remaining capacity after (hypothetically)\n    placing the current `item`.  A feasible bin (remaining capacity \u2265 0)\n    receives a priority equal to the negative of that leftover space.\n    Since the caller selects the bin with the *highest* priority, the\n    smallest leftover (i.e., the best\u2011fit) ends up with the largest value.\n\n    Infeasible bins are given a very large negative score so they will never\n    be chosen.  A tiny index\u2011based offset is added to break ties deterministically\n    (prefer earlier bins when leftovers are equal).\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array of the remaining capacity of each bin.\n\n    Returns:\n        A float array of the same shape as ``bins_remain_cap`` containing the\n        priority for each bin.\n    \"\"\"\n    # Ensure we are dealing with a float array for arithmetic\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # Compute the capacity that would remain after placing the item\n    leftover = bins_remain_cap - item\n\n    # Feasibility mask: only bins with non\u2011negative leftover can host the item\n    feasible = leftover >= 0\n\n    # Initialise priorities with -inf (worst possible score)\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # For feasible bins, priority = -leftover (higher is better, i.e., smaller leftover)\n    # Adding a tiny decreasing term based on index to break ties in favour of lower indices\n    tie_breaker = -np.arange(bins_remain_cap.size) * 1e-12\n    priorities[feasible] = -leftover[feasible] + tie_breaker[feasible]\n\n    return priorities\n\n[Reflection]\nBlend best\u2011fit scoring with controlled randomness; add deterministic tie\u2011breakers; incorporate lookahead; adapt thresholds to item distribution.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}