{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\nPrioritize exact fits, then best\u2011fit by negative slack; apply softmax with temperature \u221d slack variance; add tiny deterministic jitter for tie\u2011breaks; penalize opening fresh bins; use EMA of slack for adaptive temperature; weight by item\u2011to\u2011capacity ratio; early empty\u2011bin check; keep state minimal, vectorized.\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global random generator and running statistics\n_rng = np.random.default_rng()\n_item_count = 0\n_item_sum = 0.0\n\n\n                bins_remain_cap: np.ndarray,\n                temperature: float = 0.1) -> np.ndarray:\n    \"\"\"\n    Compute a probability\u2011like priority for each bin in an online bin\u2011packing\n    setting.\n\n    The priority blends several heuristics:\n    * **Best\u2011fit** \u2013 prefers bins with smallest slack after placing the item.\n    * **Adaptive noise** \u2013 injects Gaussian noise whose scale grows for small\n      items and when the slack spread among feasible bins is large.\n    * **Look\u2011ahead** \u2013 uses a running average of item sizes to slightly bias\n      bins whose slack is close to the expected future item size.\n    * **Tie\u2011breaker** \u2013 a tiny deterministic term that favours lower\u2011index bins.\n    * **New\u2011bin penalty** \u2013 discourages opening a completely empty bin unless\n      necessary.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item (0 < item \u2264 bin capacity).\n    bins_remain_cap : np.ndarray\n        1\u2011D array of the remaining capacity of each existing bin.\n    temperature : float, optional\n        Softmax temperature (>0). Lower values make the decision more greedy\n        (closer to deterministic best\u2011fit). Default is 0.1.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (same shape as ``bins_remain_cap``). The\n        scores sum to 1 over feasible bins; infeasible bins receive a score of\n        0.\n    \"\"\"\n    global _item_count, _item_sum\n\n    if temperature <= 0:\n        raise ValueError(\"temperature must be positive\")\n\n    # Ensure a 1\u2011D float64 array for numerical stability\n    bins = np.asarray(bins_remain_cap, dtype=np.float64).ravel()\n    n_bins = bins.size\n\n    # Edge case: no bins exist yet\n    if n_bins == 0:\n        _item_count += 1\n        _item_sum += item\n        return np.empty_like(bins)\n\n    # Feasibility mask (allow tiny tolerance for floating\u2011point noise)\n    eps = 1e-12\n    feasible = bins + eps >= item\n\n    # Initialise priorities with zeros (infeasible bins stay zero)\n    priorities = np.zeros_like(bins, dtype=np.float64)\n\n    # If nothing fits, return zero priorities (caller may open a new bin)\n    if not np.any(feasible):\n        _item_count += 1\n        _item_sum += item\n        return priorities\n\n    # Slack after placing the item in each feasible bin\n    slack = bins[feasible] - item  # non\u2011negative\n\n    # -------------------------------------------------\n    # 1. Base logits: best\u2011fit (smaller slack \u2192 larger logit)\n    # -------------------------------------------------\n    base_logits = -slack / temperature\n\n    # -------------------------------------------------\n    # 2. Adaptive random noise\n    # -------------------------------------------------\n    # Estimate original bin capacity as the maximum remaining capacity observed.\n    full_capacity = bins.max()\n    # Ratio of the current item size to the (approximate) capacity\n    item_ratio = min(item / full_capacity, 1.0)  # in [0, 1]\n\n    # Slack spread among feasible bins (0 if all equal)\n    slack_range = slack.max() - slack.min() if slack.size > 1 else 0.0\n\n    # Noise scale: larger for small items and when slack spread is large\n    noise_factor = 0.05\n    noise_scale = noise_factor * slack_range * (1.0 - item_ratio)\n\n    if noise_scale > 0:\n        noise = _rng.normal(loc=0.0, scale=noise_scale, size=slack.shape[0])\n    else:\n        noise = np.zeros_like(slack)\n\n    # -------------------------------------------------\n    # 3. Look\u2011ahead boost using running average item size\n    # -------------------------------------------------\n    if _item_count > 0:\n        avg_item = _item_sum / _item_count\n    else:\n        avg_item = item\n\n    lookahead_weight = 0.02\n    lookahead_adjust = (slack - avg_item) * lookahead_weight\n\n    # -------------------------------------------------\n    # 4. Deterministic tie\u2011breaker (lower index gets tiny boost)\n    # -------------------------------------------------\n    tie_eps = 1e-12\n    tie_breaker = -np.arange(n_bins, dtype=np.float64)[feasible] * tie_eps\n\n    # -------------------------------------------------\n    # 5. Combine components into logits\n    # -------------------------------------------------\n    logits = base_logits + noise + lookahead_adjust + tie_breaker\n\n    # -------------------------------------------------\n    # 6. Penalty for brand\u2011new bins (still at full capacity)\n    # -------------------------------------------------\n    new_bin_mask = feasible & np.isclose(bins, full_capacity, atol=1e-12)\n    if np.any(new_bin_mask):\n        penalty = 0.001  # 0.1\u202f% penalty\n        logits[new_bin_mask] += np.log(1.0 - penalty)\n\n    # -------------------------------------------------\n    # 7. Softmax over feasible bins (numerically stable)\n    # -------------------------------------------------\n    max_logit = np.max(logits)\n    exp_shifted = np.exp(logits - max_logit)\n    probs = exp_shifted / np.sum(exp_shifted)\n\n    # Fill the full priority vector\n    priorities[feasible] = probs\n\n    # -------------------------------------------------\n    # 8. Update running statistics\n    # -------------------------------------------------\n    _item_count += 1\n    _item_sum += item\n\n    return priorities\n\n\n__all__ = [\"priority_v2\"]\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}