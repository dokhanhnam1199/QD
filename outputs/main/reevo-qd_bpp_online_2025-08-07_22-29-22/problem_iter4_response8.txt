```python
import numpy as np

# Global random generator for tie‑breaking noise (created once)
_rng = np.random.default_rng()

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority function for online bin packing (Exact‑Fit‑First with tie‑breaking).

    Each bin receives a score; the bin with the highest score is selected for
    the incoming ``item``.  The scoring follows these rules:

    * Bins that cannot accommodate the item receive ``-np.inf``.
    * For feasible bins, the priority is ``-(remaining_capacity - item)``.
      Hence tighter fits obtain larger scores; an exact fit yields a score of
      ``0`` (the maximum possible without noise).
    * An infinitesimal random perturbation (≈1e‑12) is added to break ties
      without altering the ordering of distinct slack values.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of the remaining capacity of each existing bin.

    Returns
    -------
    np.ndarray
        1‑D array of priority scores, same shape as ``bins_remain_cap``.
    """
    # Ensure input is a NumPy array of floats
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)

    # Compute slack (remaining space after placing the item)
    slack = bins_remain_cap - item

    # Initialise all priorities to -inf (infeasible bins)
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Identify feasible bins (slack >= 0)
    feasible_mask = slack >= 0
    if not np.any(feasible_mask):
        # No bin can host the item
        return priorities

    # For feasible bins, higher priority for tighter fits (negative slack)
    priorities[feasible_mask] = -slack[feasible_mask]

    # Add infinitesimal random noise to break ties deterministically
    num_feasible = feasible_mask.sum()
    noise = _rng.random(num_feasible) * 1e-12
    priorities[feasible_mask] += noise

    return priorities
```
