```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority function for online Bin Packing based on Inverse Distance (Proximity Fit).

    The idea is to favor bins whose remaining capacity is as close as possible to the
    incoming item's size, i.e., the smallest positive “gap” after placing the item.
    The priority is defined as the inverse of that gap (plus a small epsilon for
    numerical stability). Infeasible bins (remaining capacity < item) receive a
    priority of -inf so that they are never selected.

    Args:
        item: Size of the incoming item.
        bins_remain_cap: Array containing remaining capacity of each open bin.

    Returns:
        An ndarray of the same shape as `bins_remain_cap` with a priority score
        for each bin. Higher scores indicate a more preferred bin.
    """
    # Small epsilon to avoid division by zero for an exact fit.
    eps = 1e-9

    # Initialise all priorities with a very low value (infeasible bins).
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Determine which bins can accommodate the item.
    feasible = bins_remain_cap >= item

    # Compute the positive gap (remaining capacity after placing the item).
    # For feasible bins this is non‑negative.
    gap = bins_remain_cap[feasible] - item

    # Inverse distance: the smaller the gap, the larger the priority.
    # Exact fits get an extremely large priority (≈ 1/eps).
    priorities[feasible] = 1.0 / (gap + eps)

    return priorities
```
