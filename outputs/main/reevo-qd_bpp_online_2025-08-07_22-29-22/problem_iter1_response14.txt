```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Exact Fit First priority for the online Bin Packing Problem.

    The function assigns:
      * A very low score (negative infinity) to bins that cannot accommodate the item.
      * A neutral/highest score (zero) to bins where the item fits *exactly* (within a tiny tolerance).
      * For all other feasible bins, a score proportional to the *negative* leftover capacity,
        i.e., the less space that will be wasted, the higher (less negative) the score.

    By returning the array of scores, the caller can simply select the bin with the
    maximum priority, which yields the "Exact‑Fit‑First" behaviour: any exact fit
    beats any non‑exact fit, and among non‑exact fits the one leaving the smallest
    waste is chosen.

    Args:
        item: Size of the incoming item.
        bins_remain_cap: 1‑D array with the remaining capacity of each existing bin.

    Returns:
        np.ndarray of the same shape as ``bins_remain_cap`` containing priority scores.
    """
    # Remaining capacity after (theoretically) placing the item in each bin
    leftover = bins_remain_cap - item

    # Tolerance for floating‑point comparisons (treat very small leftovers as exact fits)
    eps = 1e-9

    # If the item does not fit, assign -inf (worst possible priority)
    # If it fits exactly (|leftover| <= eps), assign 0 (highest finite priority)
    # Otherwise assign -leftover (larger leftover -> lower (more negative) priority)
    priorities = np.where(
        leftover < -eps,
        -np.inf,
        np.where(
            np.abs(leftover) <= eps,
            0.0,
            -leftover
        )
    )

    # Ensure floating‑point dtype
    return priorities.astype(float)
```
