{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global random generator to avoid reseeding on every call\n_rng = np.random.default_rng()\n\n    \"\"\"Random\u2011Fit priority for online Bin Packing.\n\n    For each bin that can accommodate the incoming `item` (i.e. its remaining\n    capacity \u2265 item size), we assign an independent random number drawn from a\n    uniform distribution on (0, 1). Bins that cannot accommodate the item receive\n    a priority of -inf, ensuring they are never selected. The bin with the\n    maximum priority (the highest random draw) will be chosen, which implements\n    the classic Random Fit strategy.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array with the remaining capacity of each existing bin.\n\n    Returns:\n        A NumPy array of the same shape as `bins_remain_cap` containing priority\n        scores for each bin.\n    \"\"\"\n    # Initialise all priorities to -inf (infeasible by default)\n    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n\n    # Identify bins that can fit the item\n    feasible_mask = bins_remain_cap >= item\n    num_feasible = np.count_nonzero(feasible_mask)\n\n    # Assign random priorities only to feasible bins\n    if num_feasible:\n        priorities[feasible_mask] = _rng.random(num_feasible)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global random generator (currently unused, kept for potential extensions)\n_rng = np.random.default_rng()\n\n# Hyperparameter controlling the influence of the item/remaining\u2011capacity ratio.\n# It can be tuned by an external reinforcement learning loop if desired.\n_alpha = 0.5\n\n    \"\"\"\n    Update the global weight `_alpha` that balances waste minimisation against\n    efficient utilisation of the remaining bin capacity.\n\n    Parameters\n    ----------\n    alpha : float\n        New value for `_alpha`. 0\u202f\u2264\u202falpha\u202f\u2264\u202f1, where 0 relies only on waste\n        and 1 relies only on the item-to-remaining-capacity ratio.\n    \"\"\"\n    global _alpha\n    _alpha = float(alpha)\n\n\n    \"\"\"\n    Adaptive\u2011\u03bb softmax priority with item\u2011size ratio weighting for online\n    bin packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of each currently open bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (probabilities) for each bin.  Bins that cannot\n        accommodate the item receive a score of -inf, which signals that a\n        new bin must be opened by the caller.  The global variable `_alpha`\n        controls the trade\u2011off between waste minimisation (softmax of waste)\n        and efficient utilisation (item\u2011to\u2011capacity ratio).  It can be tuned\n        externally, e.g. via a reinforcement learning loop.\n    \"\"\"\n    # Ensure a float array for vectorised operations\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Feasibility mask\n    feasible = caps >= item\n    if not np.any(feasible):\n        # No open bin can fit the item\n        return np.full_like(caps, -np.inf, dtype=float)\n\n    # Waste after placing the item\n    waste = caps - item\n    eps = 1e-12\n\n    # Adaptive \u03bb (inverse of mean waste)\n    mean_waste = waste[feasible].mean()\n    lam = 1.0 / (mean_waste + eps)\n\n    # Raw exponential decay based on waste\n    raw = np.exp(-lam * waste)\n    raw[~feasible] = 0.0\n\n    # Ratio of item size to remaining capacity\n    ratio = np.where(feasible, item / caps, 0.0)\n\n    # Combine raw waste\u2011based score with ratio weighting\n    combined = raw * (ratio ** _alpha)\n\n    # Softmax normalisation over feasible bins\n    max_val = combined[feasible].max()\n    exp_scores = np.exp(combined - max_val)\n    exp_scores[~feasible] = 0.0\n\n    total = exp_scores.sum()\n    if total > 0:\n        priorities = exp_scores / total\n    else:\n        # Fallback: uniform distribution over feasible bins\n        priorities = np.where(feasible, 1.0 / feasible.sum(), -np.inf)\n\n    return priorities\n\n[Reflection]\nBlend waste minimization with item\u2011to\u2011bin ratios; tune \u03b1 and \u03bb; experiment with lookahead and adaptive weights.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}