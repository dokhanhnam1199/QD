{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global random generator to avoid reseeding on every call\n_rng = np.random.default_rng()\n\n    \"\"\"Random\u2011Fit priority for online Bin Packing.\n\n    For each bin that can accommodate the incoming `item` (i.e. its remaining\n    capacity \u2265 item size), we assign an independent random number drawn from a\n    uniform distribution on (0, 1). Bins that cannot accommodate the item receive\n    a priority of -inf, ensuring they are never selected. The bin with the\n    maximum priority (the highest random draw) will be chosen, which implements\n    the classic Random Fit strategy.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array with the remaining capacity of each existing bin.\n\n    Returns:\n        A NumPy array of the same shape as `bins_remain_cap` containing priority\n        scores for each bin.\n    \"\"\"\n    # Initialise all priorities to -inf (infeasible by default)\n    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n\n    # Identify bins that can fit the item\n    feasible_mask = bins_remain_cap >= item\n    num_feasible = np.count_nonzero(feasible_mask)\n\n    # Assign random priorities only to feasible bins\n    if num_feasible:\n        priorities[feasible_mask] = _rng.random(num_feasible)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Exact Fit First priority for the online Bin Packing Problem.\n\n    The function assigns:\n      * A very low score (negative infinity) to bins that cannot accommodate the item.\n      * A neutral/highest score (zero) to bins where the item fits *exactly* (within a tiny tolerance).\n      * For all other feasible bins, a score proportional to the *negative* leftover capacity,\n        i.e., the less space that will be wasted, the higher (less negative) the score.\n\n    By returning the array of scores, the caller can simply select the bin with the\n    maximum priority, which yields the \"Exact\u2011Fit\u2011First\" behaviour: any exact fit\n    beats any non\u2011exact fit, and among non\u2011exact fits the one leaving the smallest\n    waste is chosen.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array with the remaining capacity of each existing bin.\n\n    Returns:\n        np.ndarray of the same shape as ``bins_remain_cap`` containing priority scores.\n    \"\"\"\n    # Remaining capacity after (theoretically) placing the item in each bin\n    leftover = bins_remain_cap - item\n\n    # Tolerance for floating\u2011point comparisons (treat very small leftovers as exact fits)\n    eps = 1e-9\n\n    # If the item does not fit, assign -inf (worst possible priority)\n    # If it fits exactly (|leftover| <= eps), assign 0 (highest finite priority)\n    # Otherwise assign -leftover (larger leftover -> lower (more negative) priority)\n    priorities = np.where(\n        leftover < -eps,\n        -np.inf,\n        np.where(\n            np.abs(leftover) <= eps,\n            0.0,\n            -leftover\n        )\n    )\n\n    # Ensure floating\u2011point dtype\n    return priorities.astype(float)\n\n[Reflection]\nExact\u2011fit first, then smallest leftover; deterministic scores; penalize waste; add tie\u2011breakers or predictive lookahead.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}