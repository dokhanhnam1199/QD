```python
import numpy as np

# Global random generator (seeded only once)
_rng = np.random.default_rng()


def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority function for the online Bin Packing Problem.

    The function assigns a priority score to each bin based on:
      * Exact fits (remaining capacity after placing the item is within a
        tolerance) receive the highest base priority (0).
      * For feasible bins that are not exact fits, the priority is the negative
        leftover capacity (‑(remaining – item)). This makes bins with the smallest
        leftover have larger (less negative) scores.
      * Infeasible bins receive -inf so they are never selected.
      * A tiny random perturbation is added to break ties without affecting the
        ordering substantially.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of the existing bins.

    Returns
    -------
    np.ndarray
        Array of priority scores for each bin; the bin with the highest score
        should be chosen for packing the item.
    """
    # Tolerance for floating‑point comparisons
    eps = 1e-9
    # Magnitude of random noise for tie‑breaking
    eps_noise = 1e-6

    # Compute leftover capacity if the item were placed in each bin
    leftover = bins_remain_cap - item

    # Feasibility mask (allow a tiny negative due to rounding)
    feasible = leftover >= -eps

    # Exact‑fit mask (leftover essentially zero)
    exact_fit = np.abs(leftover) <= eps

    # Base priority:
    #   exact fit  -> 0
    #   otherwise  -> -leftover (higher for smaller leftover)
    base_priority = np.where(exact_fit, 0.0, -leftover)

    # Infeasible bins get -inf
    base_priority = np.where(feasible, base_priority, -np.inf)

    # Add tiny random noise for tie‑breaking
    noise = _rng.uniform(-eps_noise, eps_noise, size=bins_remain_cap.shape)
    priority = base_priority + noise

    return priority
```
