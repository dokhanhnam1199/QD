```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Return a priority score for each bin using epsilon‑greedy.

    Uses a fixed epsilon of 0.2: with probability epsilon a random bin is
    favored; otherwise the bin with the smallest leftover capacity after
    adding the item receives the highest priority.

    Items that cannot fit in a bin are assigned a priority of -np.inf
    so they will never be selected.

    Args:
        item: Size of the item to place.
        bins_remain_cap: 1‑D array of remaining capacities for each bin.

    Returns:
        Array of priority scores, one for each bin.
    """
    eps = 0.2
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # Boolean mask of bins that can accommodate the item
    fits = bins_remain_cap >= item
    if not np.any(fits):
        return priorities

    if np.random.rand() < eps:
        # Random exploration: assign a random priority to every feasible bin
        random_vals = np.random.rand(np.sum(fits))
        priorities[fits] = random_vals
    else:
        # Exploitation: best‑fit strategy (smallest leftover after placement)
        leftovers = bins_remain_cap[fits] - item
        # Smaller leftover → higher priority
        priorities[fits] = 1.0 / (leftovers + 1e-9)

    return priorities
```
