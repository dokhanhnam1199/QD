{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global random generator to avoid reseeding on every call\n_rng = np.random.default_rng()\n\n    \"\"\"Random\u2011Fit priority for online Bin Packing.\n\n    For each bin that can accommodate the incoming `item` (i.e. its remaining\n    capacity \u2265 item size), we assign an independent random number drawn from a\n    uniform distribution on (0, 1). Bins that cannot accommodate the item receive\n    a priority of -inf, ensuring they are never selected. The bin with the\n    maximum priority (the highest random draw) will be chosen, which implements\n    the classic Random Fit strategy.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array with the remaining capacity of each existing bin.\n\n    Returns:\n        A NumPy array of the same shape as `bins_remain_cap` containing priority\n        scores for each bin.\n    \"\"\"\n    # Initialise all priorities to -inf (infeasible by default)\n    priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n\n    # Identify bins that can fit the item\n    feasible_mask = bins_remain_cap >= item\n    num_feasible = np.count_nonzero(feasible_mask)\n\n    # Assign random priorities only to feasible bins\n    if num_feasible:\n        priorities[feasible_mask] = _rng.random(num_feasible)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Sigmoid Fit Score priority for online bin packing.\n\n    The score favours bins where the item leaves *little* slack after insertion.\n    For each feasible bin (remaining capacity \u2265 item) we compute the slack:\n        slack = remaining_capacity - item\n    A logistic (sigmoid) function is applied to the slack values:\n        \u2022 Small slack \u2192 high priority (close to 1)\n        \u2022 Large slack \u2192 low priority (close to 0)\n    The inflection point of the sigmoid is placed at the median slack of the\n    feasible bins, making the scoring adaptive to the current distribution of\n    free space. Infeasible bins receive a priority of 0.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of the currently open bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores with the same shape as ``bins_remain_cap``. The bin\n        with the highest score should be chosen for the item.\n    \"\"\"\n    # Ensure we work with a float NumPy array\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # Slack after placing the item in every bin (negative = infeasible)\n    slack = bins_remain_cap - item\n\n    # Feasibility mask (only bins that can actually accommodate the item)\n    feasible = slack >= 0.0\n\n    # Initialise all priorities to 0 (infeasible bins stay at 0)\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # If nothing fits, simply return the zero vector\n    if not feasible.any():\n        return priorities\n\n    # Slack values for feasible bins only\n    slack_feas = slack[feasible]   # \u2265 0\n\n    # Adaptive sigmoid parameters:\n    #   \u03b2 (beta)  \u2013 median slack (inflection point of the logistic)\n    #   \u03b1 (alpha) \u2013 slope, scaled so the curve spans roughly 8 units in the\n    #               normalized slack range.\n    beta = np.median(slack_feas)\n\n    # Prevent division by zero when all feasible slacks are identical\n    slack_range = slack_feas.max() - slack_feas.min() + 1e-12\n    alpha = 8.0 / slack_range\n\n    # Logistic (sigmoid) decreasing in slack:\n    #   score = 1 / (1 + exp(\u03b1 * (slack \u2013 \u03b2)))\n    #   \u2192 slack < \u03b2  \u21d2 exponent negative \u21d2 score > 0.5 (high priority)\n    #   \u2192 slack > \u03b2  \u21d2 exponent positive \u21d2 score < 0.5 (low priority)\n    sigmoid_scores = 1.0 / (1.0 + np.exp(alpha * (slack_feas - beta)))\n\n    # Fill the scores back into the full priority vector\n    priorities[feasible] = sigmoid_scores\n\n    return priorities\n\n[Reflection]\nScore bins by slack using adaptive sigmoid; avoid pure randomness; calibrate with median and range.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}