```python
import numpy as np

# Global state for adaptive behaviour
_rng = np.random.default_rng()
_alpha = 0.2  # EMA smoothing factor
_ema_slack = 0.0
_ema_sq_slack = 0.0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Compute a priority score for each existing bin when packing an item
    in an online bin‑packing setting.

    The priority favours exact fits, then best‑fit (minimum slack),
    uses a softmax whose temperature adapts to the variance of slack
    (smoothed by an EMA), adds a tiny deterministic tie‑breaker,
    and penalises opening a fresh empty bin unless required.

    Parameters
    ----------
    item : float
        Size of the incoming item (0 < item ≤ bin capacity).
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of the current bins.

    Returns
    -------
    np.ndarray
        Priority scores for each bin (same shape as ``bins_remain_cap``).
        Scores sum to 1 over feasible bins; infeasible bins receive 0.
    """
    global _ema_slack, _ema_sq_slack

    # ---- Input handling -------------------------------------------------
    bins = np.asarray(bins_remain_cap, dtype=np.float64).ravel()
    n_bins = bins.size

    # No bins yet → caller will open a new one
    if n_bins == 0:
        return np.empty_like(bins)

    eps = 1e-12
    feasible = bins + eps >= item
    priorities = np.zeros_like(bins, dtype=np.float64)

    if not np.any(feasible):
        # Nothing fits – caller may open a new bin
        return priorities

    # Slack after hypothetically placing the item in each feasible bin
    slack = bins[feasible] - item  # non‑negative

    # ---- Estimate full bin capacity (assumed constant) -------------------
    full_capacity = bins.max()  # best guess for the bin size
    item_ratio = min(item / full_capacity, 1.0)  # in [0, 1]

    # ---- Base logits: best‑fit (smaller slack → larger logit) ------------
    base_logits = -slack * (1.0 + item_ratio)

    # Exact fits get a large positive boost
    exact_fit = slack <= eps
    if np.any(exact_fit):
        exact_boost = 10.0  # ~ e^10 ≈ 2e4 times more likely
        base_logits[exact_fit] += exact_boost

    # ---- Adaptive temperature from EMA of slack variance -----------------
    # Update EMA with current slack statistics
    slack_mean = slack.mean()
    slack_sq_mean = np.mean(slack ** 2)
    _ema_slack = (1 - _alpha) * _ema_slack + _alpha * slack_mean
    _ema_sq_slack = (1 - _alpha) * _ema_sq_slack + _alpha * slack_sq_mean

    # Smoothed variance (ensure non‑negative)
    var_est = max(0.0, _ema_sq_slack - _ema_slack ** 2)

    # Temperature proportional to variance; enforce a floor
    temp_factor = 0.5
    temperature = max(1e-4, var_est * temp_factor)

    # ---- Adaptive random noise -------------------------------------------
    # Scale noise with temperature and inversely with item size ratio
    noise_scale = temperature * (1.0 - item_ratio) * 0.1
    if noise_scale > 0:
        noise = _rng.normal(loc=0.0, scale=noise_scale, size=slack.shape)
    else:
        noise = np.zeros_like(slack)

    # ---- Deterministic tie‑breaker (lower index favoured) -----------------
    tie_eps = 1e-12
    tie_breaker = -np.arange(n_bins, dtype=np.float64)[feasible] * tie_eps

    # ---- Penalty for opening a fresh (empty) bin -------------------------
    new_bin_mask = feasible & np.isclose(bins, full_capacity, atol=1e-12)
    penalty = 0.01  # 1 % penalty
    penalty_adjust = -np.log(1.0 + penalty)  # subtract a small constant
    # Apply penalty only to the logits of fresh bins
    base_logits[new_bin_mask] += penalty_adjust

    # ---- Combine all components into logits --------------------------------
    logits = base_logits + noise + tie_breaker

    # ---- Softmax over feasible bins (numerically stable) ------------------
    max_logit = np.max(logits)
    exp_shifted = np.exp(logits - max_logit)
    probs = exp_shifted / np.sum(exp_shifted)

    # Fill the full priority vector
    priorities[feasible] = probs

    return priorities


__all__ = ["priority_v2"]
```
