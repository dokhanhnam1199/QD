```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Compute priority scores for placing an item into existing bins using a pure best‑fit rule.
    
    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of open bins.
    
    Returns
    -------
    np.ndarray
        Priority scores for each bin.  The bin with the maximum score will be selected.
        Bins that cannot accommodate the item receive a score of -np.inf.
    """
    bins = np.asarray(bins_remain_cap, dtype=float)
    n = bins.size
    if n == 0:
        return np.empty(0, dtype=float)

    # Initialise all priorities to -inf (unusable bins)
    priorities = np.full(n, -np.inf, dtype=float)

    # Identify bins that can accommodate the item
    feasible = bins >= item
    if not np.any(feasible):
        return priorities

    # Remaining capacity after placing the item
    leftover = bins[feasible] - item

    # Deterministic tie‑breaker: prefer lower index when leftover is identical
    idx = np.arange(n)[feasible]
    priorities[feasible] = -leftover - 1e-9 * idx

    return priorities
```
