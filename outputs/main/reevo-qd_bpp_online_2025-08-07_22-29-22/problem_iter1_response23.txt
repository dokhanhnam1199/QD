```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Priority function implementing the Almost Full Fit strategy.

    For each bin we compute the remaining capacity after (hypothetically) placing
    the current item. Bins that would become *almost* full (i.e., the leftover
    capacity is smaller than a tiny epsilon) receive the highest possible
    priority. All other feasible bins receive a priority that decays
    exponentially with the amount of leftover space – the smaller the leftover,
    the larger the priority. Bins that cannot accommodate the item receive a
    very low priority so they are never chosen.

    Args:
        item: Size of the incoming item.
        bins_remain_cap: 1‑D array with the current remaining capacity of each bin.

    Returns:
        A NumPy array of the same shape as ``bins_remain_cap`` containing the
        priority for each bin. The bin with the highest priority should be
        selected for the item.
    """
    # Compute the hypothetical leftover capacity after adding the item.
    leftover = bins_remain_cap - item

    # Feasibility mask: only bins where the item fits (non‑negative leftover) are considered.
    fits = leftover >= 0

    # Parameters for the Almost Full Fit heuristic.
    epsilon = 1e-6        # Threshold to treat a bin as "perfectly" full.
    k = 12.0              # Exponential decay rate – larger => sharper distinction.
    high_priority = 1e9  # Large finite value used for “almost full” bins.
    low_priority = -1e9  # Very low value for infeasible bins.

    # Initialise all priorities with the low value (infeasible).
    priorities = np.full_like(bins_remain_cap, low_priority, dtype=float)

    # Identify bins that would become almost perfectly full.
    almost_full = fits & (leftover <= epsilon)
    priorities[almost_full] = high_priority

    # For the remaining feasible bins, assign an exponentially decreasing priority
    # with respect to the leftover space. Smaller leftover → higher priority.
    feasible = fits & ~almost_full
    priorities[feasible] = np.exp(-k * leftover[feasible])

    return priorities
```
