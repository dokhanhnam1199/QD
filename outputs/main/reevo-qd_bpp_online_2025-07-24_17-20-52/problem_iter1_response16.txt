```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remain_cap_after_add = bins_remain_cap - item
    
    # Create a mask to identify bins that have enough capacity for the item
    valid_bins = remain_cap_after_add >= 0
    
    # For bins with enough capacity, the priority is the negative of the remaining capacity after adding the item
    # This encourages packing into bins that are filled as much as possible
    priorities = np.where(valid_bins, -remain_cap_after_add, -np.inf)
    
    # For bins without enough capacity, the priority is negative infinity, so they will not be selected
    return priorities
```
