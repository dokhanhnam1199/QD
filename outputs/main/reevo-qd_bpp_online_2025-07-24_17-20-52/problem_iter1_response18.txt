```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot accommodate the item
    priorities = np.where(remaining_after_addition >= 0, 
                          -np.abs(remaining_after_addition - np.mean(remaining_after_addition[remaining_after_addition >= 0])), 
                          -1e6)
    
    # Normalize the priorities to be between 0 and 1
    min_priority = np.min(priorities)
    max_priority = np.max(priorities)
    priorities = (priorities - min_priority) / (max_priority - min_priority)
    
    return priorities
```
