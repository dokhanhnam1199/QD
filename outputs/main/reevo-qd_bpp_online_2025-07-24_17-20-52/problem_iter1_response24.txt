```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using a more sophisticated heuristic.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity ratio after placing the item in each bin
    remaining_ratios = (bins_remain_cap - item) / bins_remain_cap
    
    # Apply a penalty for bins that cannot accommodate the item
    penalties = np.where(bins_remain_cap >= item, 0, -np.inf)
    
    # Prioritize bins that have a remaining capacity ratio closer to 0 (i.e., are more full after adding the item)
    priorities = np.where(bins_remain_cap >= item, -np.abs(remaining_ratios - 0), penalties)
    
    # Add a small random noise to break ties
    priorities += np.random.uniform(0, 1e-6, size=len(bins_remain_cap))
    
    return priorities
```
