```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Mask for bins that have enough capacity for the item
    valid_bins = remaining_after_addition >= 0
    
    # For bins with enough capacity, priority is the remaining capacity after addition
    # For bins without enough capacity, priority is a large negative value
    priorities = np.where(valid_bins, remaining_after_addition, -1e6)
    
    # Add a small random noise to break ties
    priorities += np.random.uniform(0, 1e-6, size=len(priorities))
    
    return priorities
```
