```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_cap_after_addition = bins_remain_cap - item
    
    # For bins that have enough capacity, prioritize the one with the least remaining capacity
    enough_capacity = bins_remain_cap >= item
    priorities_enough = np.where(enough_capacity, -remaining_cap_after_addition, -np.inf)
    
    # For bins without enough capacity, assign a very low priority
    priorities_not_enough = np.where(~enough_capacity, -np.abs(remaining_cap_after_addition), -np.inf)
    
    # Combine the two priorities, use the one for bins with enough capacity if available
    priorities = np.maximum(priorities_enough, priorities_not_enough)
    
    return priorities
```
