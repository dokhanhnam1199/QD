```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Set the priority to negative infinity for bins that cannot hold the item
    priorities = np.where(remaining_after_addition < 0, -np.inf, remaining_after_addition)
    
    # Normalize the priorities to emphasize the bins with more remaining capacity
    max_remaining = np.max(bins_remain_cap)
    normalized_priorities = priorities / max_remaining
    
    # Add a small random noise to break ties
    noise = np.random.uniform(0, 1e-6, size=len(bins_remain_cap))
    priorities = normalized_priorities + noise
    
    return priorities
```
