```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that can fit the item will have a non-negative remaining capacity
    can_fit = remaining_after_addition >= 0
    
    # For bins that can fit the item, the priority is inversely proportional to the remaining capacity
    # This encourages packing items tightly
    priorities = np.where(can_fit, 1 / (1 + remaining_after_addition), -np.inf)
    
    # To avoid division by zero and make the priority score more robust
    priorities = np.where(remaining_after_addition == 0, np.inf, priorities)
    
    return priorities
```
