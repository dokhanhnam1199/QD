```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.
    
    This function calculates the priority score based on the remaining capacity 
    of each bin and the size of the item. The priority score is a combination 
    of the 'First-Fit Decreasing' and 'Best-Fit Decreasing' heuristics.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Mask for bins that have enough capacity for the item
    valid_bins = remaining_after_addition >= 0
    
    # Initialize priorities with a very low value for bins that cannot fit the item
    priorities = np.where(valid_bins, remaining_after_addition, -1e10)
    
    # For bins that can fit the item, higher priority is given to those with less remaining capacity
    priorities = np.where(valid_bins, -remaining_after_addition, priorities)
    
    # Add a small random noise to the priorities to avoid tie-breaks
    priorities += np.random.uniform(0, 1e-6, size=len(bins_remain_cap))
    
    return priorities
```
