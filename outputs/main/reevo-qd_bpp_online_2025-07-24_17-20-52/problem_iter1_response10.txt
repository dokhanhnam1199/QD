```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Bins that can fit the item get a higher priority
    valid_bins = remaining_after_addition >= 0
    
    # Calculate the priority score
    # A bin with more remaining capacity after adding the item gets lower priority
    priorities = np.where(valid_bins, -remaining_after_addition, -np.inf)
    
    # Normalize the priorities to avoid extremely large or small values
    priorities = priorities - np.max(priorities)
    priorities = np.exp(priorities)
    
    return priorities
```
