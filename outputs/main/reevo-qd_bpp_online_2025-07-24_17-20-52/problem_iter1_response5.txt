```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Compute the remaining capacity after adding the item
    remaining_after_addition = bins_remain_cap - item
    
    # Assign a very low priority to bins that cannot accommodate the item
    priorities = np.where(remaining_after_addition >= 0, 
                          bins_remain_cap - item,  # Higher remaining capacity is better
                          -np.inf)  # Cannot accommodate the item
    
    # Normalize the priorities to ensure they are on the same scale
    max_remaining = np.max(bins_remain_cap)
    priorities = np.where(remaining_after_addition >= 0, 
                          remaining_after_addition / max_remaining, 
                          -np.inf)
    
    return priorities
```
