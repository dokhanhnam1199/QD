```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    
    # For bins that can accommodate the item, the priority is inversely proportional to the remaining capacity
    # This encourages packing items into bins that are almost full
    valid_bins = remaining_capacities >= 0
    priorities = np.zeros_like(bins_remain_cap)
    priorities[valid_bins] = 1 / (1 + remaining_capacities[valid_bins])
    
    # For bins that cannot accommodate the item, the priority is negative and proportional to the item size
    # relative to the bin's remaining capacity. This discourages using bins that are too small for the item
    invalid_bins = ~valid_bins
    priorities[invalid_bins] = -np.abs(item / remaining_capacities[invalid_bins])
    
    return priorities
```
