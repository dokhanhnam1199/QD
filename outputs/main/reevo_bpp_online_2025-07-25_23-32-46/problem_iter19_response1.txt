```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on a weighted strategy that considers normalized
    remaining capacities, exponentially penalizes unused bins, heavily penalizes bins
    where the item cannot fit, boosts bins where the item fits well with consideration
    of gaps, and ensures a balance by normalizing scores by the item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate normalized remaining capacity
    total_capacity = np.sum(bins_remain_cap)
    if total_capacity == 0:
        remain_cap_normalized = np.zeros_like(bins_remain_cap)
    else:
        remain_cap_normalized = bins_remain_cap / total_capacity
    
    # Penalize unused bins exponentially (higher penalty for bins with less remaining capacity)
    max_cap = np.max(bins_remain_cap)
    unused_bin_penalty = np.where(max_cap > 0, np.exp(-bins_remain_cap / max_cap), 0)
    
    # Assign zero priority to bins where the item cannot fit
    non_fit_penalty = np.where(bins_remain_cap < item, -np.inf, 0)
    
    # Boost bins where the item fits well and penalize if not fitting perfectly
    fit_boost = np.where(bins_remain_cap >= item, bins_remain_cap - item, 0)
    
    # Consider gaps for good fits
    gap_factor = np.where(bins_remain_cap >= item, 1 / (1 + bins_remain_cap - item), 0)
    
    # Weighted strategy: prioritize bins with larger gaps and better fits
    gap_weight = 0.3
    fit_weight = 0.4
    weighted_score = gap_factor * gap_weight + fit_boost * fit_weight
    
    # Combine scores: normalize by item size, consider fit boost and fit gaps, apply penalties
    priority_scores = remain_cap_normalized * 0.3 + weighted_score
    priority_scores *= unused_bin_penalty
    priority_scores += non_fit_penalty
    
    # Final normalization by item size for balance
    priority_scores /= (item if item > 0 else 1)
    
    # Prevent negative scores that might lead to selection of invalid bins
    priority_scores[priority_scores < 0] = 0
    
    return priority_scores
```
