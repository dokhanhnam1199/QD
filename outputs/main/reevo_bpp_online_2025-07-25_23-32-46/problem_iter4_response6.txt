```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation considers the remaining capacity, penalizes deviations from
    perfect fits, applies order penalties to distribute load, and ensures that items
    are only placed in bins where they can fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize for number of bins used (smaller the index, the more penalty)
    order_penalties = np.exp(-np.arange(len(bins_remain_cap)) / len(bins_remain_cap))
    
    # Calculate available capacity after placing the item
    available_cap_after = bins_remain_cap - item
    
    # Assign zero priority to bins where the item cannot fit
    can_fit = available_cap_after >= 0
    priority_scores = np.where(can_fit, available_cap_after, 0)
    
    # Penalize bins inversely with how much remains if the item is too large to fit perfectly
    deviation_from_perfect_fit = np.abs(available_cap_after / bins_remain_cap)
    priority_scores -= (bins_remain_cap != 0) * deviation_from_perfect_fit
    
    # Normalize remaining capacity
    max_remaining_capacity = np.max(bins_remain_cap)
    if max_remaining_capacity > 0:
        priority_scores /= max_remaining_capacity
    
    # Apply order penalties
    priority_scores *= order_penalties
    
    return priority_scores
```
