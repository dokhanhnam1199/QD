```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used penalties to encourage efficient packing while distributing load.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate normalized remaining capacity
    remaining_capacity = bins_remain_cap - item
    normalized_capacity = remaining_capacity / np.max(bins_remain_cap, initial=1)
    
    # Penalize bins that cannot fit the item
    penalized_capacity = np.where(normalized_capacity < 0, -np.inf, normalized_capacity)
    
    # Calculate the frequency of each bin being used heuristic
    usage_heuristic = 1 / (np.sum(bins_remain_cap != np.max(bins_remain_cap), axis=0) + 1)
    
    # Final priority score
    priority_scores = penalized_capacity * usage_heuristic
    return priority_scores
```
