```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used penalties to encourage efficient packing while distributing load.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate normalized remaining capacity
    remain_cap_normalized = bins_remain_cap / np.max(bins_remain_cap)
    
    # Penalize for number of bins used (smaller the index, the more penalty)
    order_penalties = np.exp(-np.arange(len(bins_remain_cap)))
    
    # Calculate available capacity after placing the item
    available_cap_after = bins_remain_cap - item
    
    # Assign zero priority to bins where the item cannot fit
    np.place(available_cap_after, available_cap_after < 0, 0)
    
    # Higher scores for higher available capacity and negative penalty
    priority_scores = remain_cap_normalized * order_penalties
    
    # Penalize binschema적으로 pero inversely with how much remains if the item is too large to fit perfectly
    deviation_from_perfect_fit = np.abs(available_cap_after / bins_remain_cap)
    priority_scores -= (bins_remain_cap == 0) * deviation_from_perfect_fit
    
    return priority_scores
```
