```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on normalized capacities, penalizes unused bins,
    and boosts bins where the item fits well with large gaps. It simplifies the
    boosting logic and ensures all scores are non-negative.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate normalized remaining capacity
    max_cap = np.max(bins_remain_cap)
    remain_cap_normalized = bins_remain_cap / max_cap if max_cap > 0 else np.zeros_like(bins_remain_cap)
    
    # Penalize unused bins based on their index (smaller index, higher penalty)
    order_penalties = np.exp(-np.arange(len(bins_remain_cap)) * 0.1)
    
    # Calculate available capacity after placing the item
    available_cap_after = bins_remain_cap - item
    
    # Assign zero priority to bins where the item cannot fit
    non_fit_penalty = np.where(available_cap_after < 0, -np.inf, 0)
    
    # Boost bins where the item fits well with large gaps
    fit_boost = np.where(available_cap_after >= 0, available_cap_after / item, 0) if item > 0 else np.zeros_like(bins_remain_cap)
    
    # Combine scores: normalize by item size, consider fit boost, and apply penalties
    priority_scores = (remain_cap_normalized + fit_boost) * order_penalties + non_fit_penalty
    
    # Ensure all scores are non-negative
    priority_scores[priority_scores < 0] = 0
    
    return priority_scores
```
