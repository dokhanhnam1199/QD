```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins with larger gaps, penalizes bins that cannot fit the item,
    and subtly boosts the second smallest gaps to minimize fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after adding the item
    remaining_after_item = bins_remain_cap - item
    
    # Initialize priority scores with a baseline of remaining capacity
    priority_scores = remaining_after_item
    
    # Penalize bins that cannot fit the item
    can_fit_item_mask = bins_remain_cap >= item
    priority_scores[~can_fit_item_mask] -= 2 * np.max(bins_remain_cap, initial=1)
    
    # Find the second smallest gap for boosting
    if np.any(can_fit_item_mask):
        # Get remaining capacities of bins that can fit the item
        valid_remaining_caps = remaining_after_item[can_fit_item_mask]
        
        # Partition and find the two smallest values
        sorted_valid_caps = np.partition(valid_remaining_caps, 1)[:2]
        
        # Check if there are at least two valid capacities
        if len(sorted_valid_caps) > 1:
            second_smallest_gap = sorted_valid_caps[1]
            
            # Boost the priority of bins with the second smallest gap
            second_smallest_indices = np.where(np.isclose(valid_remaining_caps, second_smallest_gap))[0]
            for idx in second_smallest_indices:
                priority_scores[can_fit_item_mask][idx] += 0.1  # Boost slightly

    return priority_scores
```
