```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation focuses on normalized capacities, penalizes unused bins,
    avoids negative priority scores, and boosts bins with enough space for the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate normalized remaining capacity
    remain_cap_normalized = bins_remain_cap / np.max(bins_remain_cap, initial=1.0)
    
    # Penalize for each unused bin to encourage filling existing bins
    used_bins_count = np.count_nonzero(bins_remain_cap < np.inf)
    num_bins_penalty = 1 / (used_bins_count + 1e-6) if used_bins_count > 0 else 0
    
    # Calculate base priority as normalized remaining capacity plus penalty
    priority_scores = remain_cap_normalized + num_bins_penalty
    
    # Avoid negative priority scores (e.g., if item is larger than a bin)
    priority_scores[priority_scores < 0] = 0
    
    # Boost bins that have enough space for the item
    priority_scores[bins_remain_cap >= item] += 1
    
    return priority_scores
```
