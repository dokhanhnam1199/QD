```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on normalized capacities, penalizes unused bins,
    and boosts bins where the item fits well, considering large gaps and penalizing
    non-fits. It normalizes priorities by item size and reduces complexity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate normalized remaining capacity
    max_cap = np.max(bins_remain_cap)
    if max_cap == 0:
        remain_cap_normalized = np.zeros_like(bins_remain_cap)
    else:
        remain_cap_normalized = bins_remain_cap / max_cap
    
    # Penalize unused bins (smaller the index, the higher the penalty)
    order_penalties = np.exp(-np.arange(len(bins_remain_cap)) * 0.5)
    
    # Calculate available capacity after placing the item
    available_cap_after = bins_remain_cap - item
    
    # Assign zero priority to bins where the item cannot fit
    non_fit_penalty = np.where(available_cap_after < 0, -np.inf, 0)
    
    # Boost bins where the item fits well and penalize if not fitting perfectly
    fit_boost = np.where(available_cap_after >= 0, available_cap_after / item, 0)
    fit_boost = np.nan_to_num(fit_boost, posinf=0, neginf=0)
    
    # Combine scores: normalize by item size, consider fit boost, and apply penalties
    priority_scores = (remain_cap_normalized + fit_boost) * order_penalties + non_fit_penalty
    
    # Normalize fit boosting by item size to avoid bias towards larger items
    fit_boost = np.where(available_cap_after >= 0, available_cap_after / bins_remain_cap, 0)
    fit_boost = np.nan_to_num(fit_boost, posinf=0, neginf=0)
    fit_boost_normalized = fit_boost / (item if item > 0 else 1)
    
    # Combine normalized scores
    priority_scores = (remain_cap_normalized + fit_boost_normalized) * order_penalties + non_fit_penalty
    
    # Prevent negative scores that might lead to selection of invalid bins
    priority_scores[priority_scores < 0] = 0
    
    return priority_scores
```
