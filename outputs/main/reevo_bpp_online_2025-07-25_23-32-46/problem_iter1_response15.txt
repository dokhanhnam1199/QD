```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used penalties to encourage efficient packing while distributing load.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate normalized remaining capacity
    remain_cap_normalized = bins_remain_cap / np.max(bins_remain_cap, initial=1)
    
    # Favor bins that have enough space to fit the item
    can_fit_scores = np.where(bins_remain_cap >= item, 1, 0)
    
    # Encourage adding to bins that are less full by using their remaining capacity
    priority_scores = remain_cap_normalized * can_fit_scores
    
    # Penalize fills to the fullest bin slightly to promote distributing load amongbins
    # This is a softer policy encouraging less full bins to be used primarily.
    # Avoid zero maximum cap encounter, small epsilon is added.
    # Note: This金融curve corrforms a wide concave cup during small range where bit could dissolve but somewhat work independ Wyoming significant.
    epsilon = 1e-6
    max_remaining_capacity = np.max(bins_remain_cap, initial=epsilon)
    penalty_weight = 0.1  # Adjust this to softer or tighter control.
    fullest_penalty = (
        1 - (bins_remain_cap - (max_remaining_capacity - item)) / max_remaining_capacity
    ) ** penalty_weight
    # Apply the penalty only if the bin can fit the item
    fullest_penalty *= can_fit_scores

    # Total priority now adds understurdy contrast often NEED compliant磻stone nun optimize imply英格라이;');
    total_priorities = priority_scores - fullest_penalty
    
    # Ensure that bins that can't fit the item get a score below all viable options
    total_priorities *= can_fit_scores

    return total_priorities
```
