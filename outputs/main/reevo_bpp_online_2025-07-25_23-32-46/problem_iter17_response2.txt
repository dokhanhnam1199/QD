```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on a weighted strategy that considers normalized
    remaining capacities, penalizes unused bins, and penalizes bins where the item
    cannot fit. It balances fit and gap considerations without complex transformations.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate normalized remaining capacity
    total_capacity = np.sum(bins_remain_cap)
    if total_capacity == 0:
        remain_cap_normalized = np.zeros_like(bins_remain_cap)
    else:
        remain_cap_normalized = bins_remain_cap / total_capacity
    
    # Penalize unused bins with exponential decay
    unused_bin_penalty = np.exp(-bins_remain_cap / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else np.ones_like(bins_remain_cap)
    
    # Calculate available capacity after placing the item
    available_cap_after = bins_remain_cap - item
    
    # Assign zero score to bins where the item cannot fit
    non_fit_penalty = np.where(available_cap_after < 0, -np.inf, 0)
    
    # Calculate fit score
    fit_score = np.where(available_cap_after >= 0, 1 - (available_cap_after / bins_remain_cap), 0)
    fit_score = np.nan_to_num(fit_score, posinf=0, neginf=0)
    
    # Calculate gap score
    gap_score = np.where(available_cap_after >= 0, available_cap_after / bins_remain_cap, 0)
    gap_score = np.nan_to_num(gap_score, posinf=0, neginf=0)
    
    # Weighted strategy: balance fit and gap scores
    gap_weight = 0.3
    fit_weight = 0.7
    weighted_score = gap_weight * gap_score + fit_weight * fit_score
    
    # Combine scores and apply penalties
    priority_scores = remain_cap_normalized * weighted_score * unused_bin_penalty
    priority_scores += non_fit_penalty
    
    # Final normalization by item size for balance
    priority_scores /= (item if item > 0 else 1)
    
    # Prevent negative scores that might lead to selection of invalid bins
    priority_scores[priority_scores < 0] = 0
    
    return priority_scores
```
