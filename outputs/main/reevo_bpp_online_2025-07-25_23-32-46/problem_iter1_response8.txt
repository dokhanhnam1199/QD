```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher priority,
    but the priority is reduced for bins that would cause additional bins to be used.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate a base score based on how much of the bin would be filled with the item added.
    base_score = (bins_remain_cap - item) / bins_remain_cap
    
    # We want bins that are nearly full (high occupancy) but do not exceed max capacity.
    occupancy_score = 1 - base_score
    
    # Discourage adding to a new bin if current ones can suffice; penalize each new bin.
    penalties = np.zeros_like(bins_remain_cap)
    # Penalty: maximize score = min(value) -> penalty = 1 - value
    penalty_term = 1 - (bins_remain_cap > item)  # Penalize new bin starting
    penalties += penalty_term
    
    # Combine the occupancy score with penalties for potential new bin usage
    combined_score = occupancy_score - penalties * 10  # High penalty for new bins

    return combined_score
```
