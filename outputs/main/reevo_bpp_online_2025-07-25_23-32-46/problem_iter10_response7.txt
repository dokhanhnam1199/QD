```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation normalizes the remaining capacities, penalizes unused bins,
    boosts bins where the item fits well, considers gaps for good fits,
    and normalizes by item size. It also penalizes bins where the item cannot fit.
    Additionally, it uses a weighted strategy and considers order penalties.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate normalized remaining capacity
    total_capacity = np.sum(bins_remain_cap)
    if total_capacity == 0:
        remain_cap_normalized = np.zeros_like(bins_remain_cap)
    else:
        remain_cap_normalized = bins_remain_cap / total_capacity
    
    # Penalize unused bins (higher penalty for bins with less remaining capacity)
    max_cap = np.max(bins_remain_cap)
    unused_bin_penalty = np.exp(-bins_remain_cap / (max_cap if max_cap > 0 else 1))

    # Assign zero priority to bins where the item cannot fit
    can_fit = bins_remain_cap >= item
    non_fit_penalty = np.where(~can_fit, -np.inf, 0)

    # Boost bins where the item fits well
    fit_boost = np.where(can_fit, bins_remain_cap - item, 0)

    # Consider gaps for good fits
    gap_factor = np.where(can_fit, 1 / (1 + (bins_remain_cap - item)), 0)

    # Weighted strategy: prioritize bins with larger gaps and better fits
    gap_weight = 0.6
    fit_weight = 0.4
    weighted_fit_score = fit_boost * fit_weight + gap_factor * gap_weight

    # Combine scores: normalize by item size, consider fit boost and fit gaps, apply penalties
    priority_scores = (remain_cap_normalized + weighted_fit_score) * unused_bin_penalty + non_fit_penalty

    return priority_scores
```
