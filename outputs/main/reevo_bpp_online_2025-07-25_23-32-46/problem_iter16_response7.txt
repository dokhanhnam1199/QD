```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation uses a simple strategy that penalizes bins where the item
    cannot fit and boosts bins based on the remaining capacity after placing the item.
    It ensures a balance by normalizing scores by the item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate available capacity after placing the item
    available_cap_after = bins_remain_cap - item
    
    # Assign zero priority to bins where the item cannot fit
    non_fit_penalty = np.where(available_cap_after < 0, -np.inf, 0)
    
    # Boost bins where the item fits well
    fit_boost = np.where(available_cap_after >= 0, available_cap_after, 0)
    
    # Normalize fit_boost by item size
    normalized_fit_boost = fit_boost / (item if item > 0 else 1)
    
    # Combine scores: consider fit boost and fit gaps, apply penalties
    priority_scores = normalized_fit_boost
    priority_scores += non_fit_penalty
    
    # Prevent negative scores that might lead to selection of invalid bins
    priority_scores[priority_scores < 0] = 0
    
    return priority_scores
```
