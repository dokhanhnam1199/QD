```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority score for adding an item to each bin in the online bin packing problem.

    This version simplifies the logic, focuses on clear weighting, normalizes scores, and
    sharply penalizes bins where the item cannot fit.

    Args:
        item: Size of the item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of the same size as bins_remain_cap with priority score for each bin.
    """
    # Assign zero priority to bins where the item cannot fit
    can_fit = bins_remain_cap >= item
    non_fit_penalty = np.where(can_fit, 0, -np.inf)
    
    # Calculate remaining capacity after placing the item
    available_cap_after = bins_remain_cap - item
    
    # Boost bins where the item fits well, penalize gaps
    fit_boost = np.where(can_fit, available_cap_after / bins_remain_cap, 0)
    gap_penalty = np.where(can_fit, 1 / (1 + available_cap_after), 0)
    
    # Weighted strategy: prioritize bins with better fits and smaller gaps
    fit_weight = 0.7
    gap_weight = 0.3
    weighted_score = fit_boost * fit_weight - gap_penalty * gap_weight
    
    # Combine scores and apply penalties
    priority_scores = weighted_score
    
    # Add penalties for non-fitting bins
    priority_scores += non_fit_penalty
    
    # Normalize scores by item size
    priority_scores /= (item if item > 0 else 1)
    
    # Ensure scores are non-negative
    priority_scores = np.maximum(priority_scores, 0)
    
    return priority_scores
```
