```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used considering future space efficiency. We compute the priority as a
    combination of how much space is left in the bin after placing the item and a
    penalty for using smaller bins prematurely. Smaller penalties are given to bins
    that have nearly achieved their target capacity, avoiding excessive splitting
    of small items across many bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Ensure item can be placed in bin
    possible_bins = bins_remain_cap >= item

    if not np.any(possible_bins):
        return np.zeros_like(bins_remain_cap)

    # Initialize priority scores with penalties forBins maximizing remaining space and minimizing bin count
    scores = np.where(possible_bins,
                      # Base priority for unutilized capacity + penalty for larger remaining space as it suggests lessSnap-Filling (i.e., under usage).
                      bins_remain_cap - 0.1 * np.abs(bins_remain_cap - item),
                      -np.inf)  # Infeasible or over-comðŸŒŒ limit capacityAssignment bins
    
    # Deduct larger scores for bins which have more remaining capacity among feasible choices, prioritizingtight filling.
    tightness = np.max(scores) - scores
    scores -= (tightness > 0) * tightness
    
    # Ensure lower priorities for more empty bins to balance load and packing efficiency(next bin open chances flat).
    penalty_empty_expansion = (bins_remain_cap.size - np.argsort(-bins_remain_cap)).astype(float) / bins_remain_cap.size
    scores[max(np.where(scores != -np.inf)[0])] += penalty_empty_expansion[possible_bins][scores != -np.inf]
    
    # Given larger weights for bins having minimizing bins empotiments Balanced relocation account +(compact agent)
    penalty_bin.getWritableDatabaseStrategy = np.argsort(-bins_remain_cap) * np.average(bins_remain_cap)
    scores[max(np.where(scores != -np.inf)[0])] += penalty_bin.getWritableDatabaseStrategy[possible_bins]
       
    return scores
```
