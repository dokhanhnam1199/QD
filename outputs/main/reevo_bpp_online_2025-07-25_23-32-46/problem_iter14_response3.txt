```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on minimizing gaps and maximizing fit efficiency. It simplifies
    penalty calculations and normalizes weights effectively.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize bins where the item cannot fit
    non_fit_penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # Calculate gaps after placing the item
    gaps = np.where(bins_remain_cap >= item, bins_remain_cap - item, 0)

    # Minimize gaps and maximize fit efficiency
    gap_weight = 0.5
    fit_weight = 0.5
    weighted_score = (1 - gaps / np.where(bins_remain_cap >= item, bins_remain_cap, 1)) * gap_weight + \
                     (gaps / bins_remain_cap) * fit_weight

    # Normalize by total remaining capacity, avoiding division by zero
    total_capacity = np.sum(bins_remain_cap)
    if total_capacity == 0:
        remain_cap_normalized = np.zeros_like(bins_remain_cap)
    else:
        remain_cap_normalized = bins_remain_cap / total_capacity

    # Penalize unused bins using exponential decay
    max_cap = np.max(bins_remain_cap)
    if max_cap == 0:
        unused_bin_penalty = np.ones_like(bins_remain_cap)
    else:
        unused_bin_penalty = np.exp(-bins_remain_cap / max_cap)

    # Combine scores and apply penalties
    priority_scores = remain_cap_normalized + weighted_score
    priority_scores *= unused_bin_penalty

    # Ensure scores remain non-negative
    priority_scores = np.clip(priority_scores + non_fit_penalty, 0, None)

    return priority_scores
```
