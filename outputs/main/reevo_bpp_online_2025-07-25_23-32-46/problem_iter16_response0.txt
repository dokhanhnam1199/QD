```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on simplicity, consistent normalization, and balanced weighting.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate normalized remaining capacity
    remain_cap_normalized = bins_remain_cap / np.sum(bins_remain_cap) if np.sum(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)
    
    # Assign zero priority to bins where the item cannot fit
    non_fit_penalty = np.where(bins_remain_cap - item < 0, -np.inf, 0)
    
    # Simplified boost for bins where the item fits well
    fit_boost = np.where(bins_remain_cap - item >= 0, bins_remain_cap - item, 0) / bins_remain_cap
    fit_boost = np.nan_to_num(fit_boost, posinf=0, neginf=0)
    
    # Consider gaps for good fits
    gaps = bins_remain_cap - item
    gap_factor = np.where(gaps >= 0, gaps / bins_remain_cap, 0)
    gap_factor = np.nan_to_num(gap_factor, posinf=0, neginf=0)

    # Balanced weighted strategy: prioritize bins with better fits
    gap_weight = 0.5
    fit_weight = 0.5
    weighted_score = fit_boost * fit_weight + gap_factor * gap_weight

    # Combine scores: normalize by item size, consider fit boost and fit gaps, apply penalties
    priority_scores = remain_cap_normalized + weighted_score

    # Final normalized score by item size
    priority_scores /= item if item > 0 else 1

    # Add non-fit penalty
    priority_scores += non_fit_penalty

    # Prevent negative scores that might lead to selection of invalid bins
    priority_scores[priority_scores < 0] = 0

    return priority_scores
```
