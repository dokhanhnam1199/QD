```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation normalizes the remaining capacities, penalizes unused bins,
    boosts bins where the item fits well, considers gaps for good fits,
    and normalizes by item size. It also penalizes bins where the item cannot fit.
    Additionally, it uses a weighted strategy and ensures robustness to edge cases.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    import numpy as np

    # Calculate total capacity for normalization
    total_capacity = np.sum(bins_remain_cap)
    if total_capacity == 0:
        remain_cap_normalized = np.zeros_like(bins_remain_cap)
    else:
        remain_cap_normalized = bins_remain_cap / total_capacity
    
    # Penalize unused bins (higher penalty for bins with less remaining capacity)
    max_cap = np.max(bins_remain_cap)
    if max_cap == 0:
        unused_bin_penalty = np.ones_like(bins_remain_cap)
    else:
        unused_bin_penalty = np.exp(-bins_remain_cap / max_cap)
    
    # Calculate available capacity after placing the item
    available_cap_after = bins_remain_cap - item
    
    # Assign zero priority to bins where the item cannot fit
    non_fit_penalty = np.where(available_cap_after < 0, -np.inf, 0)
    
    # Boost bins where the item fits well
    fit_boost = np.where(available_cap_after >= 0, available_cap_after / bins_remain_cap, 0)
    fit_boost = np.nan_to_num(fit_boost, posinf=0, neginf=0)
    
    # Consider gaps for good fits
    gap_factor = np.where(available_cap_after >= 0, 1 / (1 + available_cap_after), 0)
    
    # Weighted strategy: prioritize bins with larger gaps and better fits
    gap_weight = 0.6
    fit_weight = 0.4
    weighted_score = gap_factor * gap_weight + fit_boost * fit_weight
    
    # Combine scores
    priority_scores = remain_cap_normalized + weighted_score
    priority_scores *= unused_bin_penalty
    priority_scores += non_fit_penalty
    
    # Final normalization by item size for balance
    priority_scores /= (item if item > 0 else 1)
    
    # Prevent negative scores that might lead to selection of invalid bins
    priority_scores[priority_scores < 0] = 0
    
    return priority_scores
```
