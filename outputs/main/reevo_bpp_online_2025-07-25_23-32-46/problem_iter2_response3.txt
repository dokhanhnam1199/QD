```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation prefers bins that can fit the item, penalizes incapacity heavily,
    and prioritizes filling larger gaps slightly.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority with remaining capacity divided by item size
    priority = bins_remain_cap / item
    
    # Penalize bins that cannot fit the item heavily
    priority[bins_remain_cap < item] -= 10
    
    # Prefer filling larger gaps slightly by boosting bins with higher remaining capacity
    priority[bins_remain_cap >= item] += (bins_remain_cap[bins_remain_cap >= item] - item) / item
    
    return priority
```
