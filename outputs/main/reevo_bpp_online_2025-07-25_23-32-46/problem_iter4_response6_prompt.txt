{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation normalizes the remaining capacity, penalizes unused bins,\n    ensures non-negative priority scores, and favors bins that can fit the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate normalized remaining capacity\n    max_cap = np.max(bins_remain_cap)\n    if max_cap == 0:\n        remain_cap_normalized = np.zeros_like(bins_remain_cap)\n    else:\n        remain_cap_normalized = bins_remain_cap / max_cap\n    \n    # Penalize for each unused bin to encourage filling existing bins\n    num_bins_penalty = 1 / (np.count_nonzero(bins_remain_cap) + 1e-6)\n    \n    # Initialize priority scores\n    priority_scores = remain_cap_normalized - num_bins_penalty\n    \n    # Avoid negative priority scores\n    priority_scores = np.maximum(priority_scores, 0)\n    \n    # Encourage using bins with large enough space for the item\n    priority_scores[bins_remain_cap >= item] += 1\n    \n    return priority_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used penalties to encourage efficient packing while distributing load.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Penalize for number of bins used (smaller the index, the more penalty)\n    order_penalties = np.exp(-np.arange(len(bins_remain_cap)))\n    \n    # Calculate available capacity after placing the item\n    available_cap_after = bins_remain_cap - item\n    \n    # Assign zero priority to bins where the item cannot fit\n    can_fit = available_cap_after >= 0\n    priority_scores = np.where(can_fit, available_cap_after / bins_remain_cap, 0)\n    \n    # Penalize bins inversely with how much remains if the item is too large to fit perfectly\n    deviation_from_perfect_fit = np.abs(available_cap_after / bins_remain_cap)\n    priority_scores -= (bins_remain_cap != 0) * deviation_from_perfect_fit\n    \n    # Normalize remaining capacity\n    max_remaining_capacity = np.max(bins_remain_cap)\n    if max_remaining_capacity > 0:\n        priority_scores /= max_remaining_capacity\n    \n    # Apply order penalties\n    priority_scores *= order_penalties\n    \n    return priority_scores\n\n[Reflection]\nConsider order penalties, normalize capacities, penalize deviations from perfect fits, and prioritize bins where items can fit.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}