```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation focuses on prioritizing bins with higher remaining capacity,
    penalizing gaps, preventing unused bins, and penalizing single small fragment bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority scores
    priority = np.zeros_like(bins_remain_cap)
    
    # Bins that can fit the item
    can_fit_item_mask = bins_remain_cap >= item
    
    # Prioritize bins with higher remaining capacity that can fit the item
    priority[can_fit_item_mask] = bins_remain_cap[can_fit_item_mask] / item
    
    # Penalize bins that cannot fit the item
    priority[~can_fit_item_mask] -= 2
    
    # Encourage filling bigger gaps to prevent fragmentation
    if np.any(can_fit_item_mask):
        gaps = bins_remain_cap[can_fit_item_mask] - item
        sorted_gaps_indices = np.argsort(gaps)
        second_smallest_gap_index = sorted_gaps_indices[1] if len(sorted_gaps_indices) > 1 else None
        
        if second_smallest_gap_index is not None:
            second_smallest_gap = gaps[second_smallest_gap_index]
            priority[can_fit_item_mask][second_smallest_gap_index] += 1
    
    # Penalize single small fragment bins
    very_small_fragment_threshold = item * 0.1  # Define a threshold for very small fragments
    very_small_fragments_mask = (bins_remain_cap - item) < very_small_fragment_threshold
    priority[very_small_fragments_mask] -= 1
    
    return priority
```
