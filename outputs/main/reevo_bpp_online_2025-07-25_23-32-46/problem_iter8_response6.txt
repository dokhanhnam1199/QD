```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation normalizes the remaining capacities, penalizes gaps,
    boosts bins where the item fits perfectly, and applies weighted penalties.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    import numpy as np
    
    # Normalize remaining capacities
    total_capacity = np.sum(bins_remain_cap)
    if total_capacity == 0:
        remain_cap_normalized = np.zeros_like(bins_remain_cap)
    else:
        remain_cap_normalized = bins_remain_cap / total_capacity

    # Calculate available capacity after placing the item
    available_cap_after = bins_remain_cap - item

    # Penalize gaps: higher penalty for larger gaps
    gap_penalty = np.where(available_cap_after >= 0, available_cap_after / bins_remain_cap, 0)
    gap_penalty = np.nan_to_num(gap_penalty, posinf=0, neginf=0)
    
    # Boost bins where the item fits perfectly
    fit_boost = np.where(available_cap_after == 0, 1, 0)
    
    # Assign zero priority to bins where the item cannot fit
    non_fit_penalty = np.where(available_cap_after < 0, -np.inf, 0)
    
    # Weighted strategy: prioritize bins with better fits and penalize gaps
    gap_weight = 0.2
    fit_weight = 0.8
    weighted_score = fit_weight * fit_boost - gap_weight * gap_penalty
    
    # Penalize unused bins (smaller the index, the higher the penalty)
   order_penalties = np.exp(-np.arange(len(bins_remain_cap)) * 0.5)
    
    # Combine scores: normalize by item size, consider fit boost and fit gaps, apply penalties
    priority_scores = (remain_cap_normalized + weighted_score + non_fit_penalty) * order_penalties
    
    # Prevent negative scores that might lead to selection of invalid bins
    priority_scores[priority_scores < 0] = 0
    
    return priority_scores
```
