```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation normalizes the remaining capacity, penalizes unused bins,
    ensures non-negative priority scores, and favors bins that can fit the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate normalized remaining capacity
    max_cap = np.max(bins_remain_cap)
    if max_cap == 0:
        remain_cap_normalized = np.zeros_like(bins_remain_cap)
    else:
        remain_cap_normalized = bins_remain_cap / max_cap
    
    # Penalize for each unused bin to encourage filling existing bins
    num_bins_penalty = 1 / (np.count_nonzero(bins_remain_cap) + 1e-6)
    
    # Initialize priority scores
    priority_scores = remain_cap_normalized - num_bins_penalty
    
    # Avoid negative priority scores
    priority_scores = np.maximum(priority_scores, 0)
    
    # Encourage using bins with large enough space for the item
    priority_scores[bins_remain_cap >= item] += 1
    
    return priority_scores
```
