```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. It normalizes the priority by the item size,
    penalizes bins that cannot fit the item, and boosts bins with the second smallest gaps
    to encourage less fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority as zero
    priority = np.zeros_like(bins_remain_cap)

    # Calculate base priority for bins that can fit the item
    can_fit_item_mask = bins_remain_cap >= item
    priority[can_fit_item_mask] = (bins_remain_cap[can_fit_item_mask] - item) / item

    # Penalize bins that cannot fit the item
    priority[~can_fit_item_mask] = -2

    # Boost bins with the second smallest gaps (excluding the largest gap)
    if np.any(can_fit_item_mask):
        # Get the gaps for bins that can fit the item
        gaps = bins_remain_cap[can_fit_item_mask] - item
        
        # Sort the gaps and get the second smallest
        sorted_indices = np.argsort(gaps)
        
        # Boost the second smallest gap if it exists
        if len(sorted_indices) > 1:
            second_smallest_index = sorted_indices[1]
            priority[can_fit_item_mask][second_smallest_index] += 1

    return priority
```
