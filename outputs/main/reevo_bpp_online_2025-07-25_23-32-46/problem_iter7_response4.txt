```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This improved implementation normalizes the remaining capacities, penalizes unused bins,
    boosts bins where the item fits perfectly, considers gaps for good fits,
    and normalizes by item size. It also penalizes bins where the item cannot fit.
    Additionally, it uses a weighted strategy and focuses on larger gaps for efficient and balanced bin packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate normalized remaining capacity
    total_capacity = np.sum(bins_remain_cap)
    if total_capacity == 0:
        remain_cap_normalized = np.zeros_like(bins_remain_cap)
    else:
        remain_cap_normalized = bins_remain_cap / total_capacity
    
    # Penalize unused bins (higher penalty for bins with less remaining capacity)
    unused_bin_penalty = np.exp(-bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0)
    
    # Calculate available capacity after placing the item
    available_cap_after = bins_remain_cap - item
    
    # Assign zero priority to bins where the item cannot fit
    non_fit_penalty = np.where(available_cap_after < 0, -np.inf, 0)
    
    # Boost bins where the item fits perfectly
    perfect_fit_boost = np.where(available_cap_after == 0, 1, 0)
    
    # Consider gaps for good fits
    gap_factor = np.where(available_cap_after > 0, available_cap_after, 0)
    
    # Weighted strategy: significantly prioritize bins with larger gaps
    gap_weight = 0.9
    fit_weight = 0.1
    weighted_score = gap_factor * gap_weight + perfect_fit_boost * fit_weight
    
    # Combine scores: normalize by item size, consider fit gaps, apply penalties
    priority_scores = (remain_cap_normalized + weighted_score) * unused_bin_penalty + non_fit_penalty
    
    return priority_scores
```
