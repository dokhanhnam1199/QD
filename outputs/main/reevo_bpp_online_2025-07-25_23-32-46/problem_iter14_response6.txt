```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation focuses on a balanced strategy that considers normalized
    remaining capacities, penalizes gaps, encourages bins with better fits,
    and penalizes unused bins. It ensures normalization by item size and avoids
    negative scores.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of the same size as bins_remain_cap with priority score for each bin.
    """
    # Calculate normalized remaining capacity
    total_capacity = np.sum(bins_remain_cap)
    remain_cap_normalized = bins_remain_cap / total_capacity if total_capacity > 0 else np.zeros_like(bins_remain_cap)
    
    # Penalize gaps: higher penalty for larger gaps
    gap_penalty_factor = 1 / (1 + bins_remain_cap - item)
    gap_penalty = np.where(gap_penalty_factor < 0, 0, gap_penalty_factor)  # Avoid negative penalties
    
    # Boost bins where the item fits well
    fit_boost = np.where(bins_remain_cap >= item, bins_remain_cap - item, 0)
    fit_boost_normalized = fit_boost / total_capacity if total_capacity > 0 else fit_boost  # Normalize fit boost
    
    # Penalize unused bins: exponentially higher penalty for bins with less remaining capacity
    unused_bin_penalty = np.exp(-bins_remain_cap / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else 0
    
    # Assign zero priority to bins where the item cannot fit
    non_fit_penalty = np.where(bins_remain_cap < item, -np.inf, 0)
    
    # Weighted strategy: balance between normalized remaining capacity,
    # gap penalties, fit boosts, and penalties for unused bins
    gap_weight = 0.3
    fit_weight = 0.4
    capacity_weight = 0.2
    penalty_weight = 0.1
    
    weighted_score = (
        capacity_weight * remain_cap_normalized -
        gap_weight * gap_penalty +
        fit_weight * fit_boost_normalized +
        penalty_weight * unused_bin_penalty
    )
    
    # Combine scores
    priority_scores = weighted_score
    
    # Apply penalties for non-fitting bins
    priority_scores += non_fit_penalty
    
    # Normalize scores by item size
    priority_scores /= item if item > 0 else 1
    
    # Ensure scores are non-negative
    priority_scores = np.maximum(priority_scores, 0)
    
    return priority_scores
```
