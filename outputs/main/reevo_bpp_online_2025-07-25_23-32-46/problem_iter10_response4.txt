```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation normalizes the remaining capacities, penalizes unused bins,
    boosts bins where the item fits well, considers gaps for good fits,
    and normalizes by item size. It also penalizes bins where the item cannot fit.
    Additionally, it uses a weighted strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate available capacity after placing the item
    available_cap_after = bins_remain_cap - item
    
    # Assign zero priority to bins where the item cannot fit
    non_fit_penalty = np.where(available_cap_after < 0, -np.inf, 0)
    
    # Boost bins where the item fits well
    fit_boost = np.where(available_cap_after >= 0, available_cap_after / bins_remain_cap, 0)
    fit_boost = np.nan_to_num(fit_boost, posinf=0, neginf=0)
    
    # Simplified gap factor
    gap_factor = np.where(available_cap_after >= 0, 1 / (1 + available_cap_after), 0)
    
    # Weighted strategy: balance fits and gaps
    gap_weight = 0.5
    fit_weight = 0.5
    weighted_score = gap_factor * gap_weight + fit_boost * fit_weight
    
    # Final priority score with item size normalization
    priority_scores = weighted_score / (item if item > 0 else 1)
    
    # Apply penalties for bins that cannot fit the item
    priority_scores += non_fit_penalty
    
    # Enforce non-negative priority scores
    priority_scores = np.maximum(priority_scores, 0)
    
    return priority_scores
```
