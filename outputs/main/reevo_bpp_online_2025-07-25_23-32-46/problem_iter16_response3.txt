```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation simplifies penalties, boosts, and weights, focusing on
    normalized remaining capacities, penalized unused bins, and boosting bins
    where the item fits well with a consideration of gaps. It normalizes scores
    regularly and avoids excessive transformations.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate normalized remaining capacity
    total_capacity = np.sum(bins_remain_cap)
    if total_capacity == 0:
        remain_cap_normalized = np.zeros_like(bins_remain_cap)
    else:
        remain_cap_normalized = bins_remain_cap / total_capacity
    
    # Penalize unused bins using an exponential decay
    max_cap = np.max(bins_remain_cap)
    unused_bin_penalty = np.exp(-bins_remain_cap / (max_cap if max_cap > 0 else 1))
    
    # Calculate available capacity after placing the item
    available_cap_after = bins_remain_cap - item
    
    # Assign zero priority to bins where the item cannot fit
    non_fit_penalty = np.where(available_cap_after < 0, -np.inf, 0)
    
    # Calculate fit boost (how well the item fits in the bin)
    fit_boost = np.where(available_cap_after >= 0, item / (bins_remain_cap + 1e-6), 0)
    
    # Calculate gap factor (how small the gap is after placing the item)
    gap_factor = np.where(available_cap_after >= 0, available_cap_after / (bins_remain_cap + 1e-6), 1)
    
    # Weights for fit boost and gap factor
    fit_weight = 0.6
    gap_weight = 0.4
    
    # Weighted score combining fit boost and gap factor
    weighted_score = fit_weight * fit_boost + gap_weight * gap_factor
    
    # Combine scores including penalties
    priority_scores = remain_cap_normalized * unused_bin_penalty + weighted_score
    
    # Apply non-fit penalty
    priority_scores += non_fit_penalty
    
    # Normalize by item size if greater than zero
    priority_scores = np.where(item > 0, priority_scores / item, priority_scores)
    
    # Ensure no negative scores
    priority_scores = np.maximum(priority_scores, 0)
    
    return priority_scores
```
