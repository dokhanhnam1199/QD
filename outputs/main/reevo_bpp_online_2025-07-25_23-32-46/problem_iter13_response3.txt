```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on a weighted strategy that considers normalized
    remaining capacities, slightly penalizes unused bins, penalizes bins where the item
    cannot fit, and boosts bins where the item fits well with consideration of gaps.
    It ensures a balance by normalizing scores by the item size and avoids negative scores.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate normalized remaining capacity
    total_capacity = np.sum(bins_remain_cap)
    if total_capacity == 0:
        remain_cap_normalized = np.zeros_like(bins_remain_cap)
    else:
        remain_cap_normalized = bins_remain_cap / total_capacity
    
    # Mild penalty for unused bins (higher penalty for bins with more remaining capacity)
    unused_bin_penalty = np.exp(-bins_remain_cap / total_capacity) if total_capacity > 0 else np.ones_like(bins_remain_cap)
    
    # Assign zero priority to bins where the item cannot fit
    can_fit_mask = bins_remain_cap >= item
    non_fit_penalty = np.where(can_fit_mask, 0, -np.inf)
    
    # Boost bins where the item fits well and penalize if not fitting perfectly
    fit_boost = np.where(can_fit_mask, bins_remain_cap - item, 0) / bins_remain_cap
    fit_boost = np.nan_to_num(fit_boost, posinf=0, neginf=0)
    
    # Consider gaps for good fits
    gap_factor = np.where(can_fit_mask, 1 / (1 + (bins_remain_cap - item)), 0)
    
    # Weighted strategy: prioritize bins with larger gaps and better fits
    gap_weight = 0.5
    fit_weight = 0.5
    weighted_score = gap_factor * gap_weight + fit_boost * fit_weight
    
    # Combine scores: prioritize bins with larger gaps and better fits
    priority_scores = remain_cap_normalized + weighted_score
    
    # Apply unused bin penalty
    priority_scores *= unused_bin_penalty
    
    # Add non fit penalties
    priority_scores += non_fit_penalty
    
    # Final normalization by item size for balance
    priority_scores /= (item if item > 0 else 1)
    
    # Prevent negative scores that might lead to selection of invalid bins
    priority_scores[priority_scores < 0] = 0
    
    return priority_scores
```
