```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation refines fit and gap calculations, balances penalties,
    ensures non-fit exclusion, normalizes scores, and leverages exponential penalties for emptier bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate normalized remaining capacity
    total_capacity = np.sum(bins_remain_cap)
    if total_capacity == 0:
        remain_cap_normalized = np.zeros_like(bins_remain_cap)
    else:
        remain_cap_normalized = bins_remain_cap / total_capacity
    
    # Penalize unused bins with exponential decay for emptier bins
    max_cap = np.max(bins_remain_cap)
    unused_bin_penalty = np.exp(-bins_remain_cap / (max_cap if max_cap > 0 else 1))
    
    # Calculate available capacity after placing the item
    available_cap_after = bins_remain_cap - item
    
    # Assign zero priority to bins where the item cannot fit
    non_fit_penalty = np.where(available_cap_after < 0, -np.inf, 0)
    
    # Calculate fit boost (ratio of item to bin capacity when item fits)
    fit_boost = np.where(available_cap_after >= 0, item / bins_remain_cap, 0)
    fit_boost = np.nan_to_num(fit_boost, posinf=0, neginf=0)
    
    # Calculate gap factor (smaller gap is better, thus larger score)
    gap_factor = np.where(available_cap_after >= 0, 1 / (1 + available_cap_after), 0)
    
    # Dual weighted score considering both fit and gap
    weight_fit = 0.6
    weight_gap = 0.4
    weighted_score = fit_boost * weight_fit + gap_factor * weight_gap
    
    # Combine scores: normalize remaining capacity, apply unused bin penalties, fit and gap boosts
    priority_scores = remain_cap_normalized + weighted_score * unused_bin_penalty
    
    # Apply non-fit exclusion
    priority_scores += non_fit_penalty
    
    # Final normalization by item size to balance scores
    priority_scores /= (item if item > 0 else 1)
    
    # Ensure no negative scores to prevent selecting invalid bins
    priority_scores = np.maximum(priority_scores, 0)
    
    return priority_scores
```
