```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation normalizes the remaining capacities, penalizes bins where the item cannot fit,
    boosts bins where the item fits well, considers gaps for good fits, and uses a weighted strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate normalized remaining capacity
    total_capacity = np.sum(bins_remain_cap)
    if total_capacity == 0:
        remain_cap_normalized = np.zeros_like(bins_remain_cap)
    else:
        remain_cap_normalized = bins_remain_cap / total_capacity
    
    # Calculate available capacity after placing the item
    available_cap_after = bins_remain_cap - item
    
    # Assign zero priority to bins where the item cannot fit
    non_fit_penalty = np.where(available_cap_after < 0, -np.inf, 0)
    
    # Boost bins where the item fits well using a linear fit boost
    fit_boost = np.where(available_cap_after >= 0, 1 - available_cap_after / bins_remain_cap, 0)
    fit_boost = np.nan_to_num(fit_boost, posinf=0, neginf=0)
    
    # Penalize gaps for good fits using a linear gap penalty
    gap_penalty = np.where(available_cap_after >= 0, available_cap_after / bins_remain_cap, 0)
    gap_penalty = np.nan_to_num(gap_penalty, posinf=0, neginf=0)

    # Weighted strategy: prioritize bins with less gaps and better fits
    gap_weight = 0.3
    fit_weight = 0.7
    weighted_score = fit_boost * fit_weight - gap_penalty * gap_weight

    # Combine scores: consider fit boost and fit gaps, apply penalties
    priority_scores = remain_cap_normalized + weighted_score + non_fit_penalty
    
    # Prevent negative scores that might lead to selection of invalid bins
    priority_scores[priority_scores < 0] = 0
    
    return priority_scores
```
