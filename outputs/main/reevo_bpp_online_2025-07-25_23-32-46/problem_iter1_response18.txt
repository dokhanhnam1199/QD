```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is slightly reduced for bins that have less remaining
    capacity than the item to prevent unused bin scenarios.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Linear decreasing priority based on remaining capacity
    # Use a max function to avoid negative priorities if item is larger than remaining capacity
    base_priority = np.maximum(bins_remain_cap - item, 0)

    # Penalize bins that do not have enough remaining capacity to fit the item
    penalty = np.where(bins_remain_cap < item, -np.abs(bins_remain_cap - item), 0)

    # Integrated priority calculation
    priority = base_priority + penalty

    return priority
```
