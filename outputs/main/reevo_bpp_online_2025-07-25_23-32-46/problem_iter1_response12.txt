```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero for empty bins
    bins_remain_cap_safe = bins_remain_cap.copy()
    bins_remain_cap_safe[bins_remain_cap_safe == 0] = np.inf
    
    # Priority is higher for bins that have a larger remaining capacity after placing the item
    priority_scores = bins_remain_cap - item
    
    # Pack the item into the bin that will leave the bin with the least fragmentation
    # This can be achieved by minimizing the remaining capacity
    priority_scores[bins_remain_cap <= item] = -np.inf  # Prevent placing item in bins that cannot hold it
    
    return priority_scores
```
