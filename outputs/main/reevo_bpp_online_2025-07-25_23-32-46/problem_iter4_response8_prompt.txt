{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on normalized capacities, penalizes unused bins,\n    avoids negative priority scores, and boosts bins with enough space for the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate normalized remaining capacity\n    remain_cap_normalized = bins_remain_cap / np.max(bins_remain_cap, initial=1.0)\n    \n    # Penalize for each unused bin to encourage filling existing bins\n    used_bins_count = np.count_nonzero(bins_remain_cap < np.inf)\n    num_bins_penalty = 1 / (used_bins_count + 1e-6) if used_bins_count > 0 else 0\n    \n    # Calculate base priority as normalized remaining capacity plus penalty\n    priority_scores = remain_cap_normalized + num_bins_penalty\n    \n    # Avoid negative priority scores (e.g., if item is larger than a bin)\n    priority_scores[priority_scores < 0] = 0\n    \n    # Boost bins that have enough space for the item\n    priority_scores[bins_remain_cap >= item] += 1\n    \n    return priority_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used using a weighted score. It normalizes the priority by the item size,\n    penalizes bins that cannot fit the item, and boosts bins with the second smallest gaps\n    to encourage less fragmentation.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Initialize priority as zero\n    priority = np.zeros_like(bins_remain_cap)\n\n    # Calculate base priority for bins that can fit the item\n    can_fit_item_mask = bins_remain_cap >= item\n    priority[can_fit_item_mask] = (bins_remain_cap[can_fit_item_mask] - item) / item\n\n    # Penalize bins that cannot fit the item\n    priority[~can_fit_item_mask] -= 2\n\n    # Boost bins with the second smallest gaps (excluding the largest gap)\n    if np.any(can_fit_item_mask):\n        # Sort the remaining capacities of bins that can fit the item\n        priority_after_check = bins_remain_cap[can_fit_item_mask] - item\n        sorted_indices = np.argsort(priority_after_check)\n        \n        # Boost the second smallest gap if it exists\n        if len(sorted_indices) > 1:\n            second_smallest_index = sorted_indices[1]\n            priority[can_fit_item_mask][second_smallest_index] += 1\n\n    return priority\n\n[Reflection]\nPrioritize bins with second smallest gaps, normalize by item size, penalize non-fitting bins for less fragmentation.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}