```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation further refines the prioritization strategy by emphasizing
    gaps and unused bin penalties, and normalized capacities.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize bins where the item cannot fit
    non_fit_penalty = np.where(bins_remain_cap - item < 0, -np.inf, 0)
    
    # Calculate normalized remaining capacity
    total_capacity = np.sum(bins_remain_cap)
    remain_cap_normalized = bins_remain_cap / total_capacity if total_capacity > 0 else np.zeros_like(bins_remain_cap)
    
    # Penalize unused bins using exponential decay
    max_cap = np.max(bins_remain_cap)
    unused_bin_penalty = np.exp(-bins_remain_cap / max_cap) if max_cap > 0 else 1
    
    # Simplified fit calculation
    fit_factor = np.where(bins_remain_cap - item >= 0, 1, 0)
    
    # Simplified gap calculation, emphasizing gaps
    gap_factor = np.where(bins_remain_cap - item >= 0, (bins_remain_cap - item) / bins_remain_cap, 0)
    
    # Weighted score combining fit and gap, prioritizing gaps
    weighted_score = 0.3 * fit_factor + 0.7 * gap_factor
    
    # Combine scores considering normalized capacity, gaps, and fit
    priority_scores = remain_cap_normalized + weighted_score
    priority_scores *= unused_bin_penalty
    priority_scores += non_fit_penalty
    
    # Normalize scores
    priority_scores /= (item if item > 0 else 1)
    
    # Ensure no negative scores
    priority_scores = np.maximum(priority_scores, 0)
    
    return priority_scores
```
