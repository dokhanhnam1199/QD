```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on a weighted strategy that considers normalized
    remaining capacities, penalizes unused bins, penalizes bins where the item
    cannot fit, and boosts bins where the item fits well with consideration of gaps.
    It also ensures a balance by normalizing scores and simplifying logic.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate normalized remaining capacity
    total_capacity = np.sum(bins_remain_cap)
    if total_capacity == 0:
        remain_cap_normalized = np.zeros_like(bins_remain_cap)
    else:
        remain_cap_normalized = bins_remain_cap / total_capacity
    
    # Penalize unused bins
    unused_bin_penalty = np.where(bins_remain_cap == np.max(bins_remain_cap), 1, 0.5)
    
    # Assign zero priority to bins where the item cannot fit
    non_fit_penalty = -np.inf * (bins_remain_cap < item)
    
    # Calculate the gap after placing the item
    gap = bins_remain_cap - item
    
    # Boost bins where the item fits perfectly or almost perfectly
    fit_boost = np.where(gap >= 0, 1 / (1 + gap), 0)
    
    # Final priority score calculation
    priority_scores = remain_cap_normalized + fit_boost * unused_bin_penalty + non_fit_penalty
    
    # Ensure scores are non-negative
    priority_scores = np.maximum(priority_scores, 0)
    
    # Normalize scores to ensure consistency
    max_score = np.max(priority_scores)
    if max_score > 0:
        priority_scores /= max_score

    return priority_scores
```
