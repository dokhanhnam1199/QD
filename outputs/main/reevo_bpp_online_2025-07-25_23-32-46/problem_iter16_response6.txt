```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation further simplifies the unused bin penalty, removes unnecessary normalizations,
    and focuses on balancing fits and gaps.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate available capacity after placing the item
    available_cap_after = bins_remain_cap - item
    
    # Assign zero priority to bins where the item cannot fit
    non_fit_penalty = np.where(available_cap_after < 0, -np.inf, 0)
    
    # Simplified boost for bins where the item fits well
    fit_boost = np.where(available_cap_after >= 0, item / bins_remain_cap, 0)
    fit_boost = np.nan_to_num(fit_boost, posinf=0, neginf=0)
    
    # Consider gaps for good fits
    gap_factor = np.where(available_cap_after >= 0, available_cap_after / bins_remain_cap, 0)

    # Balanced weighted strategy: prioritize bins with larger gaps and better fits
    gap_weight = 0.5
    fit_weight = 0.5
    weighted_score = gap_factor * gap_weight + fit_boost * fit_weight

    # Combine scores: consider fit boost and fit gaps, apply penalties
    priority_scores = weighted_score + bins_remain_cap / np.sum(bins_remain_cap)

    # Add a small penalty for bins that are almost full but not quite
    almost_full_penalty = np.where((available_cap_after > 0) & (available_cap_after < 0.1), -0.1, 0)
    priority_scores += almost_full_penalty
    
    # Apply fit penalty
    priority_scores += non_fit_penalty

    # Prevent negative scores that might lead to selection of invalid bins
    priority_scores[priority_scores < 0] = 0

    return priority_scores
```
