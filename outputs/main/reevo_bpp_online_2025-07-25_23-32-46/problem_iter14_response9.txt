```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation normalizes the remaining capacities, penalizes unused bins,
    boosts bins where the item fits well, considers gaps for good fits,
    and normalizes by item size. It also penalizes bins where the item cannot fit.
    Additionally, it uses a weighted strategy to balance fit boosting and gap penalties.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate normalized remaining capacity
    total_capacity = np.sum(bins_remain_cap)
    if total_capacity == 0:
        remain_cap_normalized = np.zeros_like(bins_remain_cap)
    else:
        remain_cap_normalized = bins_remain_cap / total_capacity
    
    # Penalize unused bins using a quadratic decay for remaining capacity
    unused_bin_penalty = np.power(bins_remain_cap / (np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1), 2)
    
    # Assign zero priority to bins where the item cannot fit
    non_fit_penalty = np.where(bins_remain_cap - item < 0, -np.inf, 0)
    
    # Calculate available capacity after placing the item
    available_cap_after = bins_remain_cap - item
    
    # Boost bins where the item fits well (using a negative exponential decay of the gap)
    fit_boost = np.where(available_cap_after >= 0, np.exp(-available_cap_after / bins_remain_cap), 0)
    fit_boost = np.nan_to_num(fit_boost, posinf=0, neginf=0)
    
    # Penalize gaps for good fits using a quadratic function of the gap
    gap_penalty = np.where(available_cap_after >= 0, np.power(available_cap_after / bins_remain_cap, 2), 0)
    gap_penalty = np.nan_to_num(gap_penalty, posinf=0, neginf=0)

    # Weighted strategy: prioritize bins with less gaps and better fits
    gap_weight = 0.3
    fit_weight = 0.7
    weighted_score = fit_boost * fit_weight - gap_penalty * gap_weight

    # Combine scores considering fit boost and fit gaps, apply penalties and unused bin penalty
    priority_scores = remain_cap_normalized + weighted_score * unused_bin_penalty + non_fit_penalty
    
    # Normalize scores by item size to balance weights
    priority_scores /= (item if item > 0 else 1)
    
    # Ensure no negative scores
    priority_scores = np.maximum(priority_scores, 0)
    
    return priority_scores
```
