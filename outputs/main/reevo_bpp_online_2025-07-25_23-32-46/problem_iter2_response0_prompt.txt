{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used using a weighted score. Bins that are closer to being full get higher\n    priority, but the priority is slightly reduced for bins that have less remaining\n    capacity than the item to prevent unused bin scenarios.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Linear decreasing priority based on remaining capacity\n    # Use a max function to avoid negative priorities if item is larger than remaining capacity\n    base_priority = np.maximum(bins_remain_cap - item, 0)\n\n    # Penalize bins that do not have enough remaining capacity to fit the item\n    penalty = np.where(bins_remain_cap < item, -np.abs(bins_remain_cap - item), 0)\n\n    # Integrated priority calculation\n    priority = base_priority + penalty\n\n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used penalties to encourage efficient packing while distributing load.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate normalized remaining capacity\n    remain_cap_normalized = bins_remain_cap / np.max(bins_remain_cap)\n    \n    # Penalize for each unused bin to encourage filling existing bins\n    num_bins_penalty = np.nan_to_num(1 / (np.count_nonzero(bins_remain_cap) + 1e-6), posinf=0)\n    \n    # Avoid negative priority scores (e.g., if item is larger than a bin)\n    priority_scores = (remain_cap_normalized - item) + num_bins_penalty\n    priority_scores[priority_scores < 0] = 0\n    \n    # Encourage using bins with large enough space for the item\n    priority_scores[bins_remain_cap >= item] += 1\n    \n    return priority_scores\n\n[Reflection]\nNormalize capacities, penalize unused bins, ensure non-negative scores, favor bins fitting the item.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}