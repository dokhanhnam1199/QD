```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used penalties to encourage efficient packing while distributing load.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate normalized remaining capacity
    remain_cap_normalized = bins_remain_cap / np.max(bins_remain_cap)
    
    # Penalize for each unused bin to encourage filling existing bins
    num_bins_penalty = np.nan_to_num(1 / (np.count_nonzero(bins_remain_cap) + 1e-6), posinf=0)
    
    # Avoid negative priority scores (e.g., if item is larger than a bin)
    priority_scores = (remain_cap_normalized - item) + num_bins_penalty
    priority_scores[priority_scores < 0] = 0
    
    # Encourage using bins with large enough space for the item
    priority_scores[bins_remain_cap >= item] += 1
    
    return priority_scores
```
