```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation normalizes the remaining capacities, penalizes unused bins,
    boosts bins where the item fits perfectly, considers gaps for good fits,
    and normalizes by item size. It also penalizes bins where the item cannot fit.
    Additionally, it uses a weighted strategy and considers order penalties.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate normalized remaining capacity
    total_capacity = np.sum(bins_remain_cap)
    if total_capacity == 0:
        remain_cap_normalized = np.zeros_like(bins_remain_cap)
    else:
        remain_cap_normalized = bins_remain_cap / total_capacity
    
    # Penalize unused bins (higher penalty for bins with less remaining capacity)
    unused_bin_penalty = np.exp(-bins_remain_cap / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0)
    
    # Calculate available capacity after placing the item
    available_cap_after = bins_remain_cap - item
    
    # Assign zero priority to bins where the item cannot fit
    non_fit_penalty = np.where(available_cap_after < 0, -np.inf, 0)
    
    # Boost bins where the item fits well and penalize if not fitting perfectly
    fit_boost = np.where(available_cap_after >= 0, available_cap_after / bins_remain_cap, 0)
    fit_boost = np.nan_to_num(fit_boost, posinf=0, neginf=0)
    
    # Consider gaps for good fits
    gap_factor = np.where(available_cap_after >= 0, 1 / (1 + available_cap_after), 0)
    
    # Weighted strategy: prioritize bins with larger gaps and normalize by item size
    weighted_gap_factor = gap_factor * (1 - remain_cap_normalized)
    
    # Combine scores: consider fit boost, fit gaps, apply penalties, and normalize by item size
    priority_scores = (remain_cap_normalized * weighted_gap_factor + fit_boost) * unused_bin_penalty + non_fit_penalty
    
    return priority_scores
```
