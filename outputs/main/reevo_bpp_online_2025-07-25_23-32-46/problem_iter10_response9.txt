```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on normalized capacities, penalizes gaps,
    boosts bins where the item fits well, ensures positive priorities,
    and uses a weighted strategy to balance fits and gaps.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate normalized remaining capacity
    total_capacity = np.sum(bins_remain_cap)
    if total_capacity == 0:
        remain_cap_normalized = np.zeros_like(bins_remain_cap)
    else:
        remain_cap_normalized = bins_remain_cap / total_capacity
    
    # Calculate available capacity after placing the item
    available_cap_after = bins_remain_cap - item
    
    # Assign zero priority to bins where the item cannot fit
    non_fit_penalty = np.where(available_cap_after < 0, -np.inf, 0)
    
    # Boost bins where the item fits well and penalize gaps
    fit_boost = np.where(available_cap_after >= 0, (bins_remain_cap - available_cap_after) / bins_remain_cap, 0)
    fit_boost = np.nan_to_num(fit_boost, posinf=0, neginf=0)
    
    gap_penalty = np.where(available_cap_after >= 0, available_cap_after / bins_remain_cap, 0)
    gap_penalty = np.nan_to_num(gap_penalty, posinf=0, neginf=0)

    # Weighted strategy: prioritize bins with less gaps and better fits
    gap_weight = 0.4
    fit_weight = 0.6
    weighted_score = fit_boost * fit_weight - gap_penalty * gap_weight

    # Combine scores
    priority_scores = remain_cap_normalized + weighted_score + non_fit_penalty
    
    # Ensure positive priorities
    priority_scores = np.maximum(priority_scores, 0)
    
    return priority_scores
```
