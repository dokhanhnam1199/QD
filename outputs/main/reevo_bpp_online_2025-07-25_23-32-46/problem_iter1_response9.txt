```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is lower if that bin choice increases the number of
    bins used.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Discount factor for using a new bin
    discount_factor = 0.9
    num_bins = len(bins_remain_cap)
    
    # Create an array indicating which bins are already full (0 capacity left)
    is_full = (bins_remain_cap == 0).astype(int)
    
    # Calculate the reduction of remaining capacity if item is added
    capacity_reduction = bins_remain_cap - item
    
    # Handle cases where the item is too big to fit in the remaining space
    # Negative capacity reduction is set to zero as those bins Items won't fit
    capacity_reduction[capacity_reduction < 0] = 0
    
    # Calculate the number of new bins that would be used if this item were placed
    # among the new finish (bins_capacity == item)
    newly_used_bins = (capacity_reduction == 0).astype(int) - is_full
    
    # Decision matrix: Calculate the priority score
    priority_score = capacity_reduction.copy()
    # Penalize bins that would need new bins due to not fitting
    priority_score[newly_used_bins > 0] *= discount_factor ** (np.sum(newly_used_bins) + 1)
    
    # Applyまして, apply discounts if would be needing a new optimized additional bins 
    # This discount further reduces allocation to bins leading to high fragmentation 
    n_items_in_bin_except_large_fit = (bins_remain_cap - bins_remain_cap[newly_used_bins==0]!=0) .sum()
    additional_penalties = (bins_remain_cap - bins_remain_cap[newly_used_bins==0]) ** 0.5   
    priority_score[newly_used_bins == 0]  *=  0.99 ** sum.addITIONAL_penalties
    
    return priority_score
```
