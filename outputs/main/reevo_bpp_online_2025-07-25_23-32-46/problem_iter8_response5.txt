```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation normalizes the remaining capacities, penalizes gaps,
    boosts bins where the item fits perfectly, and applies weighted penalties.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize remaining capacities
    total_capacity = np.sum(bins_remain_cap)
    if total_capacity == 0:
        remain_cap_normalized = np.zeros_like(bins_remain_cap)
    else:
        remain_cap_normalized = bins_remain_cap / total_capacity

    # Calculate available capacity after placing the item
    available_cap_after = bins_remain_cap - item

    # Penalize gaps: smaller gaps receive higher scores
    gap_penalties = np.where(available_cap_after > 0, 1 / (1 + available_cap_after), -np.inf)

    # Boost perfect fits
    perfect_fit_boosts = np.where(available_cap_after == 0, 1, 0)

    # Gap and perfect fit weights
    gap_weight = 0.4
    perfect_fit_weight = 0.6

    # Calculate weighted score
    weighted_scores = gap_penalties * gap_weight + perfect_fit_boosts * perfect_fit_weight

    # Combine scores: normalize by item size, consider fit boosts and gap penalties
    priority_scores = remain_cap_normalized + weighted_scores

    return priority_scores
```
