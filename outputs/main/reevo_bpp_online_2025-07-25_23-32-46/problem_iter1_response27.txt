```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is slightly reduced for bins that have less remaining
    capacity than the item itself (setting them to a very low priority), and further
    reduced if they are too small relative to the item's size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with remaining capacity
    priorities = bins_remain_cap.copy()
    
    # Penalize bins that cannot even fit the item
    priorities[bins_remain_cap < item] = -float('inf')
    
    # Prioritize bins where remaining capacity is more than the item size (regular use case)
    # But low if significantly smaller than bin capacity
    priority_bonus = np.where(bins_remain_cap >= item + item*0.2, bins_remain_cap, 0.1)
    
    # Multiply a factor to make sure the bonus has a fair impact on larger bins
    factor = 2.0 # arbitrary factor; can be tuned
    priorities = priorities + factor * priority_bonus
    
    # Penalize bins that are extremely full (Objective to avoid half-empty bins)
    extreme_full_threshold = 0.1
    priorities[bins_remain_cap <= item * extreme_full_threshold] -= item * 10
    
    return priorities
```
