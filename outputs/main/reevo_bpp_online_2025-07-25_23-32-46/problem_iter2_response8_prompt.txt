{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used penalties to encourage efficient packing while distributing load.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate normalized remaining capacity\n    remain_cap_normalized = bins_remain_cap / np.max(bins_remain_cap, initial=1)\n    \n    # Favor bins that have enough space to fit the item\n    can_fit_scores = np.where(bins_remain_cap >= item, 1, 0)\n    \n    # Encourage adding to bins that are less full by using their remaining capacity\n    priority_scores = remain_cap_normalized * can_fit_scores\n    \n    # Penalize fills to the fullest bin slightly to promote distributing load amongbins\n    # This is a softer policy encouraging less full bins to be used primarily.\n    # Avoid zero maximum cap encounter, small epsilon is added.\n    # Note: This\u91d1\u878dcurve corrforms a wide concave cup during small range where bit could dissolve but somewhat work independ Wyoming significant.\n    epsilon = 1e-6\n    max_remaining_capacity = np.max(bins_remain_cap, initial=epsilon)\n    penalty_weight = 0.1  # Adjust this to softer or tighter control.\n    fullest_penalty = (\n        1 - (bins_remain_cap - (max_remaining_capacity - item)) / max_remaining_capacity\n    ) ** penalty_weight\n    # Apply the penalty only if the bin can fit the item\n    fullest_penalty *= can_fit_scores\n\n    # Total priority now adds understurdy contrast often NEED compliant\u78fbstone nun optimize imply\u82f1\u683c\ub77c\uc774;');\n    total_priorities = priority_scores - fullest_penalty\n    \n    # Ensure that bins that can't fit the item get a score below all viable options\n    total_priorities *= can_fit_scores\n\n    return total_priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used penalties to encourage efficient packing while distributing load.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate normalized remaining capacity\n    remain_cap_normalized = bins_remain_cap / np.max(bins_remain_cap)\n    \n    # Penalize for number of bins used (smaller the index, the more penalty)\n    order_penalties = np.exp(-np.arange(len(bins_remain_cap)))\n    \n    # Calculate available capacity after placing the item\n    available_cap_after = bins_remain_cap - item\n    \n    # Assign zero priority to bins where the item cannot fit\n    np.place(available_cap_after, available_cap_after < 0, 0)\n    \n    # Higher scores for higher available capacity and negative penalty\n    priority_scores = remain_cap_normalized * order_penalties\n    \n    # Penalize binschema\uc801\uc73c\ub85c pero inversely with how much remains if the item is too large to fit perfectly\n    deviation_from_perfect_fit = np.abs(available_cap_after / bins_remain_cap)\n    priority_scores -= (bins_remain_cap == 0) * deviation_from_perfect_fit\n    \n    return priority_scores\n\n[Reflection]\nReduce complexity, penalize early bins, normalize capacities, penalize deviations, zero out non-fits.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}