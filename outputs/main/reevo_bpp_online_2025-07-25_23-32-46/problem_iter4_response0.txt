```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation penalizes bins that cannot fit the item, boosts bins with smaller gaps,
    and uses weighted strategies to encourage less fragmentation and more efficient bin usage.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority as zero
    priority = np.zeros_like(bins_remain_cap)

    # Penalize bins that cannot fit the item
    priority[bins_remain_cap < item] -= 5  # Heavily penalize incapacity

    # Calculate base priority for bins that can fit the item
    can_fit_item_mask = bins_remain_cap >= item
    priority[can_fit_item_mask] = bins_remain_cap[can_fit_item_mask] - item

    # Boost bins with the second smallest gaps (excluding the largest gap)
    if np.any(can_fit_item_mask):
        # Sort the gaps for bins that can fit the item
        gaps = bins_remain_cap[can_fit_item_mask] - item
        sorted_indices = np.argsort(gaps)

        # Boost the second smallest gap if it exists
        if len(sorted_indices) > 1:
            second_smallest_index = sorted_indices[1]
            priority[can_fit_item_mask][second_smallest_index] += 2

        # Consider the smallest gap as the highest priority
        smallest_index = sorted_indices[0]
        priority[can_fit_item_mask][smallest_index] += 3

    return priority
```
