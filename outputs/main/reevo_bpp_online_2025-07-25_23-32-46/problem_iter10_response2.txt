```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation uses normalized total capacity, applies weighted fit and gap penalties,
    and includes ordered unused bin penalties to determine the priority scores.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate normalized remaining capacity based on total capacity
    total_capacity = np.sum(bins_remain_cap)
    if total_capacity == 0:
        remain_cap_normalized = np.zeros_like(bins_remain_cap)
    else:
        remain_cap_normalized = bins_remain_cap / total_capacity
    
    # Penalize unused bins (higher penalty for bins with less remaining capacity)
    max_cap = np.max(bins_remain_cap)
    unused_bin_penalty = np.exp(-bins_remain_cap / (max_cap if max_cap > 0 else 1))

    # Calculate available capacity after placing the item
    available_cap_after = bins_remain_cap - item
    
    # Assign zero priority to bins where the item cannot fit
    non_fit_penalty = np.where(available_cap_after < 0, -np.inf, 0)
    
    # Boost bins where the item fits well and penalize if not fitting perfectly
    fit_ratio = np.where(available_cap_after >= 0, (bins_remain_cap - available_cap_after) / bins_remain_cap, 0)
    fit_ratio = np.nan_to_num(fit_ratio, posinf=0, neginf=0)
    
    # Penalize gaps for good fits
    gap_ratio = np.where(available_cap_after >= 0, available_cap_after / bins_remain_cap, 0)
    gap_ratio = np.nan_to_num(gap_ratio, posinf=0, neginf=0)

    # Weighted strategy: prioritize bins with better fits and less gaps
    gap_weight = 0.3
    fit_weight = 0.7
    weighted_score = fit_ratio * fit_weight - gap_ratio * gap_weight

    # Combine scores: normalize by item size, consider fit boost and fit gaps, apply penalties
    priority_scores = (remain_cap_normalized + weighted_score) * unused_bin_penalty + non_fit_penalty
    
    # Ensure scores remain non-negative
    priority_scores = np.maximum(priority_scores, 0)
    
    return priority_scores
```
