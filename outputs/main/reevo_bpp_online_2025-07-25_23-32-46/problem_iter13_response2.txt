```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on a weighted strategy that considers normalized
    remaining capacities, uses exponential decay for unused bins, and balances fit
    boosts with gap penalties. It ensures a balance by normalizing scores by the
    item size and avoids negative scores.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate normalized remaining capacity
    total_capacity = np.sum(bins_remain_cap)
    if total_capacity == 0:
        remain_cap_normalized = np.zeros_like(bins_remain_cap)
    else:
        remain_cap_normalized = bins_remain_cap / total_capacity
    
    # Penalize unused bins using exponential decay
    max_cap = np.max(bins_remain_cap)
    unused_bin_penalty = np.exp(-bins_remain_cap / max_cap) if max_cap > 0 else 1
    
    # Assign zero priority to bins where the item cannot fit
    non_fit_penalty = np.where(bins_remain_cap - item < 0, -np.inf, 0)
    
    # Boost bins where the item fits well
    fit_boost = np.where(bins_remain_cap - item >= 0, 1 - (bins_remain_cap - item) / bins_remain_cap, 0)
    
    # Calculate gap factor
    gap_factor = np.where(bins_remain_cap - item >= 0, 1 / (1 + bins_remain_cap - item), 0)
    
    # Weighted score combining fit boost and gap factor
    weighted_score = 0.5 * fit_boost + 0.5 * gap_factor
    
    # Combine scores considering normalized capacity, gaps, and fit
    priority_scores = remain_cap_normalized + weighted_score
    priority_scores *= unused_bin_penalty
    priority_scores += non_fit_penalty
    
    # Normalize scores by item size to balance weights
    priority_scores /= (item if item > 0 else 1)
    
    # Ensure no negative scores
    priority_scores = np.maximum(priority_scores, 0)
    
    return priority_scores
```
