```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero, especially when the bin is already full
    # Ideal fit or nearly ideal fit should get high priority
    priority_scores = np.zeros_like(bins_remain_cap)
    for i, cap in enumerate(bins_remain_cap):
        if cap < item:
            priority_scores[i] = -np.inf  # Trash items that can't fit
        else:
            # Encourage fits that use up more space
            # Penalize less for items that still leave room
            priority_scores[i] = -(cap - item) + 1 / (cap + 1)
    return priority_scores
```
