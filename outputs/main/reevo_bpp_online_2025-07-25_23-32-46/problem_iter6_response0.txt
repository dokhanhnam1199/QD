```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation penalizes bins that cannot fit the item, and boosts bins
    with the second smallest gap to encourage less fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority as zero
    priority = np.zeros_like(bins_remain_cap)

    # Penalize bins that cannot fit the item
    priority[bins_remain_cap < item] = -np.inf

    # Calculate gaps for bins that can fit the item
    gaps = bins_remain_cap[bins_remain_cap >= item] - item

    # Sort the gaps to find the second smallest
    sorted_indices = np.argsort(gaps)

    # Boost the second smallest gap if it exists
    if len(sorted_indices) > 1:
        second_smallest_index = np.where(bins_remain_cap == bins_remain_cap[bins_remain_cap >= item][sorted_indices[1]])[0][0]
        priority[second_smallest_index] += 1

    return priority
```
