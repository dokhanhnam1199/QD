```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Improved heuristic function for the Traveling Salesman Problem (TSP).

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance
            matrix between cities.  distance_matrix[i][j] is the distance
            between city i and city j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
            where each element represents the prior probability or desirability
            of including the corresponding edge in a TSP tour.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Heuristic 1: Inverse distance (shorter distances are more desirable)
    inverse_distance = 1.0 / (distance_matrix + 1e-9)

    # Heuristic 2: Nearest neighbor desirability
    nearest_neighbors = np.argsort(distance_matrix, axis=1)
    nearest_neighbor_bonus = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(1, min(5, n)):  # Give a bonus to the first 4 nearest neighbors
            neighbor_index = nearest_neighbors[i, j]
            nearest_neighbor_bonus[i, neighbor_index] = 1.0 / j

    # Heuristic 3: Avoidance of edges that are part of very long distances (penalty)
    farthest_neighbors = np.argsort(distance_matrix, axis=1)[:, ::-1]
    farthest_neighbor_penalty = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(min(4, n)):
            neighbor_index = farthest_neighbors[i, j]
            farthest_neighbor_penalty[i, neighbor_index] = -0.3  # Slightly reduced penalty

    # Adaptive Weight Tuning based on problem size
    if n <= 10:
        w_distance = 0.7
        w_neighbor = 0.2
        w_penalty = 0.1
    elif n <= 50:
        w_distance = 0.6
        w_neighbor = 0.3
        w_penalty = 0.1
    else:
        w_distance = 0.5
        w_neighbor = 0.4
        w_penalty = 0.1

    # Combine heuristics with adaptive weights
    heuristic_matrix = w_distance * inverse_distance + w_neighbor * nearest_neighbor_bonus + w_penalty * farthest_neighbor_penalty

    # Sparsify the matrix (keep only top k edges for each node)
    k = min(6, n - 1)
    for i in range(n):
        row = heuristic_matrix[i, :]
        threshold = np.sort(row)[-k]
        heuristic_matrix[i, row < threshold] = 0.0

    # Normalize to 0-1 range
    max_val = np.max(heuristic_matrix)
    min_val = np.min(heuristic_matrix)

    if max_val > min_val:
        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    else:
        heuristic_matrix[:] = 1.0

    return heuristic_matrix
```
