```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) that combines
    multiple factors to determine the likelihood of including an edge in a solution.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance
            matrix between cities.  distance_matrix[i][j] is the distance
            between city i and city j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
            where each element represents the prior probability or desirability
            of including the corresponding edge in a TSP tour.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Heuristic 1: Inverse distance (shorter distances are more desirable)
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero

    # Heuristic 2: Nearest neighbor desirability
    nearest_neighbors = np.argsort(distance_matrix, axis=1)
    nearest_neighbor_bonus = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(1, min(5, n)):  # Give a bonus to the first 4 nearest neighbors
            neighbor_index = nearest_neighbors[i, j]
            nearest_neighbor_bonus[i, neighbor_index] = 1.0 / j # closer neighbors get higher bonus

    # Heuristic 3: Avoidance of edges that are part of very long distances for the current city (penalty)
    farthest_neighbors = np.argsort(distance_matrix, axis=1)[:, ::-1]
    farthest_neighbor_penalty = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(min(4, n)):
             neighbor_index = farthest_neighbors[i, j]
             farthest_neighbor_penalty[i, neighbor_index] = -0.5 * (j + 1) # stronger penalty for farther

    # Combine heuristics
    heuristic_matrix = inverse_distance + nearest_neighbor_bonus + farthest_neighbor_penalty

    # Sparsify the matrix: Keep only edges whose heuristic value is above the mean for that row
    for i in range(n):
        row = heuristic_matrix[i, :]
        mean_val = np.mean(row)
        heuristic_matrix[i, row < mean_val] = 0.0

    # Normalize using softmax function row-wise to emphasize differences
    for i in range(n):
        row = heuristic_matrix[i, :]
        row_exp = np.exp(row - np.max(row))  # Subtract max for numerical stability
        row_sum = np.sum(row_exp)
        if row_sum > 0:
            heuristic_matrix[i, :] = row_exp / row_sum
        else:
            heuristic_matrix[i, :] = 1.0 / n  # if all values are -inf

    return heuristic_matrix
```
