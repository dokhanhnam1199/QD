```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) that combines
    multiple factors to determine the likelihood of including an edge in a solution.
    This version prioritizes stronger, direct neighbor bonuses/penalties, simpler
    combinations, and aggressive sparsification with robust normalization.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance
            matrix between cities.  distance_matrix[i][j] is the distance
            between city i and city j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
            where each element represents the prior probability or desirability
            of including the corresponding edge in a TSP tour.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Heuristic 1: Inverse distance (shorter distances are more desirable)
    inverse_distance = 1.0 / (distance_matrix + 1e-9)

    # Heuristic 2: Nearest neighbor bonus (stronger bonus for very close neighbors)
    nearest_neighbors = np.argsort(distance_matrix, axis=1)
    nearest_neighbor_bonus = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        # Graded bonus: nearest neighbor gets higher bonus
        nearest_neighbor_bonus[i, nearest_neighbors[i, 1]] = 0.75
        if n > 2:
             nearest_neighbor_bonus[i, nearest_neighbors[i, 2]] = 0.25 #second nearset neighbor

    # Heuristic 3: Farthest neighbor penalty (avoid long edges)
    farthest_neighbors = np.argsort(distance_matrix, axis=1)[:, -1]
    farthest_neighbor_penalty = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        neighbor_index = farthest_neighbors[i]
        farthest_neighbor_penalty[i, neighbor_index] = -0.5

    # Combined Heuristic (equal weights for simplicity)
    heuristic_matrix = inverse_distance + nearest_neighbor_bonus + farthest_neighbor_penalty

    # Adaptive Sparsification:  Dynamic threshold based on row characteristics
    for i in range(n):
        row = heuristic_matrix[i, :]
        # Threshold is the median of positive values in the row
        positive_values = row[row > 0]
        if len(positive_values) > 0:
            threshold = np.median(positive_values)
            heuristic_matrix[i, row < threshold] = 0.0
        else:
            #if no postive value just set to zero except for k smallest value
            k = min(3, n-1)
            indices = np.argpartition(distance_matrix[i,:], k)[:k]
            heuristic_matrix[i,:] = 0
            heuristic_matrix[i,indices] = 0.1


    # Robust Normalization (row-wise softmax with clipping)
    for i in range(n):
        row = heuristic_matrix[i, :]
        row_exp = np.exp(np.clip(row, -10, 10) - np.max(np.clip(row, -10, 10)))  # Clip for stability
        row_sum = np.sum(row_exp)
        if row_sum > 0:
            heuristic_matrix[i, :] = row_exp / row_sum
        else:
            heuristic_matrix[i, :] = 1.0 / n  # Handle the case where all values are -inf

    return heuristic_matrix
```
