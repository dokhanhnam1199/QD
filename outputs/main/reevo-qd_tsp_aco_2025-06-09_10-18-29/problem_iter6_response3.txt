```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) that combines
    multiple factors to determine the likelihood of including an edge in a solution.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance
            matrix between cities.  distance_matrix[i][j] is the distance
            between city i and city j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
            where each element represents the prior probability or desirability
            of including the corresponding edge in a TSP tour.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Heuristic 1: Inverse distance (shorter distances are more desirable)
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero

    # Heuristic 2: Nearest neighbor bonus (strongest for the single nearest)
    nearest_neighbors = np.argsort(distance_matrix, axis=1)
    nearest_neighbor_bonus = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        nearest_neighbor_bonus[i, nearest_neighbors[i, 1]] = 1.0 # Strongest bonus: single nearest

    # Heuristic 3: Farthest neighbor penalty (strongest for the single farthest)
    farthest_neighbor = np.argsort(distance_matrix, axis=1)[:, -1]
    farthest_neighbor_penalty = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        farthest_neighbor_penalty[i, farthest_neighbor[i]] = -1.0 # Strongest penalty: single farthest

    # Combine heuristics (simple summation)
    heuristic_matrix = inverse_distance + nearest_neighbor_bonus + farthest_neighbor_penalty

    # Sparsify the matrix (keep only top k edges for each node)
    k = min(3, n - 1)  # More aggressive sparsification
    for i in range(n):
        row = heuristic_matrix[i, :]
        threshold = np.sort(row)[-k]
        heuristic_matrix[i, row < threshold] = 0.0

    # Robust normalization
    if np.any(heuristic_matrix > 0):
        max_val = np.max(heuristic_matrix)
        min_val = np.min(heuristic_matrix[heuristic_matrix > 0])
        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    elif np.any(heuristic_matrix < 0):  # Handles the case where all values are zero or negative
        max_val = np.max(heuristic_matrix)
        min_val = np.min(heuristic_matrix)
        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)

    return heuristic_matrix
```
