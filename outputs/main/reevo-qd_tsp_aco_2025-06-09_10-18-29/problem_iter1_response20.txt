```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) based on distance, node degree, and randomness.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances between cities.
                                        distance_matrix[i, j] is the distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, representing the heuristic values
                      for each edge. Higher values indicate more promising edges.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate node degree desirability (favor lower degree nodes initially)
    degree_desirability = np.zeros(n)
    for i in range(n):
        degree_desirability[i] = 1.0 # Initialize with 1.0 to avoid division by zero when normalizing.


    # Normalize node degree desirability
    degree_desirability /= np.sum(degree_desirability)

    # Combine distance, node degree desirability, and randomness to generate heuristic values
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] = (
                    (1 / (distance_matrix[i, j] + 1e-9)) # Avoid division by zero
                    + (degree_desirability[i] + degree_desirability[j])
                    + np.random.rand() * 0.1 # Add a bit of noise for exploration
                )

    # Sparsify the heuristic matrix by setting small values to zero
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.2) # Drop 20% least promising edges.

    heuristic_matrix[heuristic_matrix < threshold] = 0
    # Ensure symmetry, important for some TSP solvers

    return heuristic_matrix
```
