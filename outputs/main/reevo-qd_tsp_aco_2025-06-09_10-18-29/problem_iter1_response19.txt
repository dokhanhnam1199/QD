```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors and sparsification.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the distances between nodes.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution.
                    The matrix has the same shape as the input distance_matrix.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate nearest neighbors for each node
    nearest_neighbors = np.argsort(distance_matrix, axis=1)[:, 1:6]  # Top 5 nearest neighbors

    # Calculate inverse distance (close nodes are more promising)
    inverse_distance = 1 / (distance_matrix + 1e-6)  # Add a small value to avoid division by zero

    # Factor 1: Inverse Distance
    heuristic_matrix = inverse_distance

    # Factor 2: Nearest Neighbor Bonus
    for i in range(n):
        for j in nearest_neighbors[i]:
            heuristic_matrix[i, j] += 0.5 * inverse_distance[i,j] # Boost promising neighbor

    # Factor 3: Average distance of node to others
    avg_distances = np.mean(distance_matrix, axis=1)
    for i in range(n):
      for j in range(n):
        heuristic_matrix[i,j] /= (avg_distances[i] + avg_distances[j] + 1e-6) # nodes which tend to have high distance values may be penalised

    # Sparsification: Zero out unpromising edges
    threshold = np.quantile(heuristic_matrix[np.triu_indices_from(heuristic_matrix, k=1)], 0.2) # Keep top 80% of edges

    heuristic_matrix[heuristic_matrix < threshold] = 0


    # Ensure symmetry (TSP is undirected)
    heuristic_matrix = np.triu(heuristic_matrix, k=1)
    heuristic_matrix = heuristic_matrix + heuristic_matrix.T

    return heuristic_matrix
```
