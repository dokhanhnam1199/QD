```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) based on stochastic
    solution sampling principles. This version incorporates multiple factors and
    sparsification to guide the search process.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance
                                        matrix between cities.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    containing heuristic values (probabilities) for each edge.
    """

    n = distance_matrix.shape[0]  # Number of cities

    # 1. Inverse Distance: Closer cities are more likely to be connected.
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # 2. Nearest Neighbor Consideration: Prefer edges connecting to nearby cities.
    nearest_neighbors = np.zeros_like(distance_matrix)
    for i in range(n):
        # Find the k nearest neighbors for each city i
        distances = distance_matrix[i, :]
        nearest_neighbor_indices = np.argsort(distances)[1:min(4,n)] # k=3 nearest neighbors (excluding itself)
        nearest_neighbors[i, nearest_neighbor_indices] = 1
        nearest_neighbors[nearest_neighbor_indices, i] = 1 # ensure symmetry, as TSP is often undirected
    
    #3. Edge Centrality: Edges in the center of graph should be considered. Compute "betweenness" centrality using estimated average graph distance

    avg_distance = np.mean(distance_matrix[distance_matrix != 0])
    edge_centrality = np.exp(-distance_matrix / (2*avg_distance))

    # 4. Combine the Factors:  Combine all aspects to determine which edges are important.
    heuristic_matrix = inverse_distance * (1 + nearest_neighbors) * (1 + edge_centrality)

    # 5. Sparsification: Setting low-probability edges to zero to focus search
    #    Adjust the threshold as needed. Here the sparsification drops half the edges with lowest heuristic value

    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.50)  # Adjust quantile as needed (eg. 0.75 for more sparsity)
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Normalize heuristic values to represent probabilities (optional, but can be useful)
    heuristic_matrix = heuristic_matrix / np.sum(heuristic_matrix)

    return heuristic_matrix
```
