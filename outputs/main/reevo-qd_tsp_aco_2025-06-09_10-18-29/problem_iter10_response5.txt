```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    """
    Heuristic function for the Traveling Salesman Problem (TSP) that combines
    multiple factors to determine the likelihood of including an edge in a solution.
    This version prioritizes stronger, direct neighbor bonuses/penalties, simpler
    combinations, and aggressive sparsification with robust normalization.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance
            matrix between cities.  distance_matrix[i][j] is the distance
            between city i and city j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
            where each element represents the prior probability or desirability
            of including the corresponding edge in a TSP tour.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Heuristic 1: Inverse distance (shorter distances are more desirable)
    inverse_distance = 1.0 / (distance_matrix + 1e-9)

    # Heuristic 2: Nearest neighbor bonus (focus on immediate neighbors)
    nearest_neighbors = np.argsort(distance_matrix, axis=1)
    nearest_neighbor_bonus = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        # Graded bonus for top 5 nearest neighbors
        for j in range(1, min(6, n)):  # Check only top 5
            neighbor_index = nearest_neighbors[i, j]
            nearest_neighbor_bonus[i, neighbor_index] = (6 - j) / 6.0  # Bonus decreases with rank

    # Heuristic 3: Farthest neighbor penalty (avoid long edges) - stronger penalty
    farthest_neighbors = np.argsort(distance_matrix, axis=1)[:, -1]
    farthest_neighbor_penalty = np.zeros_like(distance_matrix, dtype=float)

    for i in range(n):
        neighbor_index = farthest_neighbors[i]
        farthest_neighbor_penalty[i, neighbor_index] = -0.75  # Increased penalty

    # Combined Heuristic (dynamically tuned weights)
    alpha = 0.6  # Weight for inverse distance
    beta = 0.3  # Weight for nearest neighbor bonus
    gamma = 0.1  # Weight for farthest neighbor penalty
    heuristic_matrix = alpha * inverse_distance + beta * nearest_neighbor_bonus + gamma * farthest_neighbor_penalty

    # Adaptive Sparsification: Keep only edges above a threshold
    # The threshold is the median value of all non-zero elements, but consider a higher percentile for more aggressive sparsification.
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 50)
    heuristic_matrix[heuristic_matrix < threshold] = 0.0

    # Robust Normalization (row-wise softmax)
    for i in range(n):
        row = heuristic_matrix[i, :]
        row_exp = np.exp(row - np.max(row))  # for numerical stability
        row_sum = np.sum(row_exp)
        if row_sum > 0:
            heuristic_matrix[i, :] = row_exp / row_sum
        else:
            heuristic_matrix[i, :] = 1.0 / n  # Handle the case where all values are -inf

    return heuristic_matrix
```
