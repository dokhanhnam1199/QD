```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) that combines
    multiple factors to determine the likelihood of including an edge in a solution.
    It incorporates adaptive weights and a new heuristic based on triangle inequality.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance
            matrix between cities.  distance_matrix[i][j] is the distance
            between city i and city j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
            where each element represents the prior probability or desirability
            of including the corresponding edge in a TSP tour.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Heuristic 1: Inverse distance (shorter distances are more desirable)
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero

    # Heuristic 2: Nearest neighbor desirability
    nearest_neighbors = np.argsort(distance_matrix, axis=1)
    nearest_neighbor_bonus = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(1, min(4, n)):  # Give a bonus to the first 3 nearest neighbors
            neighbor_index = nearest_neighbors[i, j]
            nearest_neighbor_bonus[i, neighbor_index] = 1.0 / j  # closer neighbors get higher bonus

    # Heuristic 3: Avoidance of edges that are part of very long distances for the current city (penalty)
    farthest_neighbors = np.argsort(distance_matrix, axis=1)[:, ::-1]
    farthest_neighbor_penalty = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(min(3, n)):
            neighbor_index = farthest_neighbors[i, j]
            farthest_neighbor_penalty[i, neighbor_index] = -0.5  # Negative penalty

    # Heuristic 4: Triangle inequality heuristic (discourage edges that bypass close neighbors)
    triangle_inequality_penalty = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                # Find the nearest neighbor of i (excluding j)
                nearest_neighbor_i = None
                nearest_neighbor_dist = np.inf
                for k in range(n):
                    if k != i and k != j and distance_matrix[i, k] < nearest_neighbor_dist:
                        nearest_neighbor_dist = distance_matrix[i, k]
                        nearest_neighbor_i = k

                if nearest_neighbor_i is not None:
                    # Penalize the edge (i, j) if the distance i->nearest_neighbor_i + nearest_neighbor_i ->j is significantly smaller than i->j
                    if distance_matrix[i, nearest_neighbor_i] + distance_matrix[nearest_neighbor_i, j] < distance_matrix[i, j] * 1.2:
                        triangle_inequality_penalty[i, j] = -0.3


    # Adaptive weights (based on the range of each heuristic)
    range_inverse_distance = np.max(inverse_distance) - np.min(inverse_distance)
    range_nearest_neighbor = np.max(nearest_neighbor_bonus) - np.min(nearest_neighbor_bonus)
    range_farthest_neighbor = np.max(farthest_neighbor_penalty) - np.min(farthest_neighbor_penalty)
    range_triangle_inequality = np.max(triangle_inequality_penalty) - np.min(triangle_inequality_penalty)

    # Avoid division by zero by adding a small constant
    total_range = range_inverse_distance + range_nearest_neighbor + range_farthest_neighbor + range_triangle_inequality + 1e-9

    weight_inverse_distance = range_inverse_distance / total_range
    weight_nearest_neighbor = range_nearest_neighbor / total_range
    weight_farthest_neighbor = range_farthest_neighbor / total_range
    weight_triangle_inequality = range_triangle_inequality / total_range


    # Combine heuristics with adaptive weights
    heuristic_matrix = (weight_inverse_distance * inverse_distance +
                        weight_nearest_neighbor * nearest_neighbor_bonus +
                        weight_farthest_neighbor * farthest_neighbor_penalty +
                        weight_triangle_inequality * triangle_inequality_penalty)

    # Sparsify the matrix (optional: keep only top k edges for each node)
    k = min(5, n - 1)  # keep at least 1 edge
    for i in range(n):
        row = heuristic_matrix[i, :]
        threshold = np.sort(row)[-k]  # Find the kth largest value
        heuristic_matrix[i, row < threshold] = 0.0  # set the value below k to zero.

    # Normalize to 0-1 range (optional)
    max_val = np.max(heuristic_matrix)
    min_val = np.min(heuristic_matrix)

    if max_val > min_val:
        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    else:
        heuristic_matrix[:] = 1.0  # if all heuristics are equal

    return heuristic_matrix
```
