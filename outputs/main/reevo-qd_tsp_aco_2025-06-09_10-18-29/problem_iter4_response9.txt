```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) that combines
    multiple factors to determine the likelihood of including an edge in a solution.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance
            matrix between cities.  distance_matrix[i][j] is the distance
            between city i and city j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
            where each element represents the prior probability or desirability
            of including the corresponding edge in a TSP tour.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Heuristic 1: Inverse distance (shorter distances are more desirable)
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero

    # Heuristic 2: Nearest neighbor desirability
    nearest_neighbors = np.argsort(distance_matrix, axis=1)
    nearest_neighbor_bonus = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(1, min(5, n)):  # Give a bonus to the first 4 nearest neighbors
            neighbor_index = nearest_neighbors[i, j]
            nearest_neighbor_bonus[i, neighbor_index] = 1.0 / j # closer neighbors get higher bonus

    # Heuristic 3: Avoidance of edges that are part of very long distances for the current city (penalty)
    farthest_neighbors = np.argsort(distance_matrix, axis=1)[:, ::-1]
    farthest_neighbor_penalty = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(min(4, n)):
             neighbor_index = farthest_neighbors[i, j]
             farthest_neighbor_penalty[i, neighbor_index] = -0.3 / (j+1) # smaller penalty for nodes closer to the i

    # Heuristic 4: Node Degree Penalty (discourage high degree nodes early on)
    degree_penalty = np.zeros_like(distance_matrix, dtype=float)
    avg_distance = np.mean(distance_matrix) # Characteristic scale for "long" edges.

    for i in range(n):
        for j in range(n):
            if distance_matrix[i, j] > avg_distance:
                degree_penalty[i,j] = -0.1


    # Combine heuristics with adaptive weights (adjust based on problem size)
    if n < 50:
        alpha = 0.6
        beta = 0.3
        gamma = 0.1
        delta = 0.05
    elif n < 200:
        alpha = 0.5
        beta = 0.3
        gamma = 0.15
        delta = 0.05
    else:
        alpha = 0.4
        beta = 0.3
        gamma = 0.2
        delta = 0.1 # slight increase in degree penalty for larger problems


    heuristic_matrix = alpha * inverse_distance + beta * nearest_neighbor_bonus + gamma * farthest_neighbor_penalty + delta * degree_penalty


    # Sparsify the matrix (optional: keep only top k edges for each node)
    k = min(int(np.sqrt(n)), n - 1) # Dynamic k based on problem size, reducing k for larger problems.
    for i in range(n):
      row = heuristic_matrix[i, :]
      threshold = np.sort(row)[-k]  # Find the kth largest value
      heuristic_matrix[i, row < threshold] = 0.0 #set the value below k to zero.

    # Normalize to 0-1 range (optional)
    max_val = np.max(heuristic_matrix)
    min_val = np.min(heuristic_matrix)

    if max_val > min_val:
       heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    else:
        heuristic_matrix[:] = 1.0  # if all heuristics are equal
    return heuristic_matrix
```
