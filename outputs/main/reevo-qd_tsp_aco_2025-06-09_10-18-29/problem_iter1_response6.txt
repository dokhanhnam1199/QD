```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP).

    This version combines several factors to determine the promise of an edge:
    1. Inverse distance: Shorter edges are generally more promising.
    2. Nearest neighbor information: Edges connecting a node to its nearest
       neighbors are prioritized.
    3. Sparsification: Edges with distances significantly above the mean are
       disregarded.

    Args:
        distance_matrix (np.ndarray): A square matrix where entry (i, j)
                                       represents the distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each
                    entry (i, j) indicates the promise of including the edge
                    between city i and city j in the TSP tour. Higher values
                    indicate a more promising edge.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero

    # 2. Nearest neighbor information
    nearest_neighbors = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        # Get the indices of the nearest neighbors for node i (excluding itself)
        neighbors = np.argsort(distance_matrix[i, :])[1:4]  #top 3 nearest neighbours
        for j in neighbors:
            nearest_neighbors[i, j] = 1
            nearest_neighbors[j, i] = 1


    # 3. Sparsification (based on distance)
    mean_distance = np.mean(distance_matrix[distance_matrix != 0])
    sparse_matrix = np.where(distance_matrix > 2 * mean_distance, 0, 1) #remove edges with distance much larger than average

    # Combine the factors:
    heuristics = inverse_distance * (0.6 + 0.4*nearest_neighbors) * sparse_matrix
    # Prioritize nearest neighbors and then sparsify to avoid long paths

    #Set diagonal entries to zero as they are not meaningful in TSP context
    for i in range(n):
        heuristics[i, i] = 0

    return heuristics
```
