```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) using stochastic solution sampling principles.

    This version combines several factors to estimate the desirability of including each edge in a solution,
    and sparsifies the matrix by setting unpromising elements to zero.

    Args:
        distance_matrix (np.ndarray): A square matrix where entry (i, j) represents the distance between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each entry represents a prior indicator
                      of how promising it is to include the corresponding edge in a solution.  Higher values indicate
                      more promising edges.
    """
    n = distance_matrix.shape[0]

    # Initialize the heuristic matrix with inverse distances (basic desirability)
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Factor 1: Incorporate information about nearest neighbors.  Nodes close to each other are generally better
    nearest_neighbors = np.argsort(distance_matrix, axis=1)[:, 1:4]  # Get the 3 nearest neighbors for each node (excluding itself)
    for i in range(n):
        for j in nearest_neighbors[i]:
            heuristic_matrix[i, j] *= 1.5 # Boost the desirability of connecting to nearest neighbors
            heuristic_matrix[j, i] *= 1.5 # Make symmetric


    # Factor 2: Penalize edges connecting to nodes with already many close neighbors (avoid over-connecting)
    neighbor_counts = np.sum(heuristic_matrix > 0, axis=1)  # Count edges with a positive heuristic value (considered a neighbor)

    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] /= (neighbor_counts[i] + neighbor_counts[j])**0.5 # Reduce desirability if neighbors are dense


    # Factor 3: Introduce a "randomness" element to explore different solution spaces and escape local optima
    randomness = np.random.rand(n, n) * 0.1 # Generate random values between 0 and 0.1
    heuristic_matrix += randomness

    # Factor 4: Sparsify the matrix by setting low-promise edges to zero.
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.2)  # Keep top 80% non-zero edges
    heuristic_matrix[heuristic_matrix < threshold] = 0


    # Factor 5: Make the heuristic matrix symmetric if it isn't already (important for some solvers)
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2

    # Ensure diagonal elements are 0
    for i in range(n):
        heuristic_matrix[i, i] = 0

    return heuristic_matrix
```
