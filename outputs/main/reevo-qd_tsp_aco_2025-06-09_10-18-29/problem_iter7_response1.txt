```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) that combines
    multiple factors to determine the likelihood of including an edge in a solution.
    This version prioritizes simpler combinations and aggressive sparsification.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance
            matrix between cities.  distance_matrix[i][j] is the distance
            between city i and city j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
            where each element represents the prior probability or desirability
            of including the corresponding edge in a TSP tour.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Heuristic 1: Inverse distance (shorter distances are more desirable)
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero

    # Heuristic 2: Nearest neighbor bonus (only immediate neighbors)
    nearest_neighbors = np.argsort(distance_matrix, axis=1)
    nearest_neighbor_bonus = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        neighbor_index = nearest_neighbors[i, 1]  # Only immediate neighbor
        nearest_neighbor_bonus[i, neighbor_index] = 0.5

    # Heuristic 3: Farthest neighbor penalty (only furthest neighbor)
    farthest_neighbors = np.argsort(distance_matrix, axis=1)[:, -1]
    farthest_neighbor_penalty = np.zeros(n)
    for i in range(n):
        farthest_neighbor_penalty[i] = farthest_neighbors[i]

    for i in range(n):
        heuristic_matrix[i, farthest_neighbor_penalty[i]] = -0.3

    # Combine heuristics with equal weights
    heuristic_matrix = inverse_distance + nearest_neighbor_bonus
    for i in range(n):
        heuristic_matrix[i, farthest_neighbor_penalty[i]] += farthest_neighbor_penalty[i]/np.max(distance_matrix) * (-0.5)


    # Aggressive sparsification: Keep only top 2 edges per row
    for i in range(n):
        row = heuristic_matrix[i, :]
        top_indices = np.argsort(row)[-2:]  # Indices of the two largest values
        mask = np.ones(n, dtype=bool)
        mask[top_indices] = False
        heuristic_matrix[i, mask] = 0.0


    # Robust normalization: Softmax row-wise
    for i in range(n):
        row = heuristic_matrix[i, :]
        row_exp = np.exp(row - np.max(row))  # Subtract max for numerical stability
        row_sum = np.sum(row_exp)
        if row_sum > 0:
            heuristic_matrix[i, :] = row_exp / row_sum
        else:
            heuristic_matrix[i, :] = 1.0 / n  # if all values are -inf


    return heuristic_matrix
```
