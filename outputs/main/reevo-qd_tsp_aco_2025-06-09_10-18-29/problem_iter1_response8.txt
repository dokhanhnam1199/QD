```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using stochastic solution sampling principles.
    Combines inverse distance with node degree consideration.  Sparsifies the
    heuristic matrix by zeroing out edges that are deemed less promising.

    Args:
        distance_matrix: A numpy array representing the distance matrix between nodes.

    Returns:
        A numpy array of the same shape as distance_matrix, representing the
        heuristic values for each edge. Higher values indicate more promising edges.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance: Shorter distances are more promising
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Node degree consideration: Penalize edges that would lead to high-degree nodes early
    # A simple approach: penalize edges connected to nodes with small sum of inverse distances to other nodes
    node_importance = np.sum(inverse_distance, axis=0)
    degree_penalty = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            degree_penalty[i, j] = node_importance[i] + node_importance[j]

    # Combine factors
    heuristic_matrix = inverse_distance * degree_penalty #try simple multiplication
    heuristic_matrix = np.nan_to_num(heuristic_matrix, nan=0.0, posinf=0.0, neginf=0.0)

    # Sparsify the matrix
    threshold = np.mean(heuristic_matrix[np.triu_indices_from(heuristic_matrix, k=1)]) * 0.1  #Dynamic Threshold
    heuristic_matrix[heuristic_matrix < threshold] = 0.0

    #Set Diagonals to zero.
    np.fill_diagonal(heuristic_matrix, 0)


    return heuristic_matrix
```
