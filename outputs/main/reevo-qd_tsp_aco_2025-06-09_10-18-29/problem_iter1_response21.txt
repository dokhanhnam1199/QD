```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP based on distance, node degree, and sparsification.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix between cities.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    representing the prior probabilities (indicators) of including each edge.
    """
    n = distance_matrix.shape[0]

    # 1. Inverse Distance: Shorter distances are generally better.
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero.

    # 2. Node Degree: Penalize edges connected to nodes with already high degrees.
    #    Initially, all nodes have degree 0.  As we iteratively improve a solution
    #    (not implemented here), this factor becomes more relevant.  We approximate this effect now.
    degree_penalty = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            # Penalize based on potential degree increase if this edge is included.
            degree_penalty[i, j] = 1  # Set a base value of 1
            # Adjust based on the number of neighbors that each node currently has, approximately.
            # This is a weak proxy since we aren't iteratively building a solution.

    heuristic_matrix = heuristic_matrix / (degree_penalty + 1e-9)

    # 3. Sparsification: Remove edges that are extremely long compared to others.
    #   This helps to focus the search on more promising regions of the solution space.
    median_distance = np.median(distance_matrix[distance_matrix > 0])  # Avoids 0 distances along diagonal
    threshold = 3 * median_distance  # Adjust factor for different distance distributions.
    heuristic_matrix[distance_matrix > threshold] = 0

    # 4. Normalization to Create Probabilities: Scale to [0, 1]. Important if using as a probability.
    heuristic_matrix = heuristic_matrix / np.max(heuristic_matrix) # ensures all values are between 0 and 1.

    #Ensure zero diagonal. Important for proper functioning of other algorithms.
    np.fill_diagonal(heuristic_matrix, 0)
    return heuristic_matrix
```
