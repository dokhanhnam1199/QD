```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors:
    - Inverse distance
    - Node degree penalty
    - Sparsification based on distance percentile

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes.

    Returns:
        np.ndarray: Heuristic matrix indicating the desirability of each edge.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Inverse distance
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Add small value to avoid division by zero

    # Node degree penalty
    degree_penalty = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                degree_penalty[i, j] = 1.0
    
    # Sparsification
    distance_percentile = np.percentile(distance_matrix[distance_matrix > 0], 50) # Consider non-zero distances for percentile. Prevents sparsifying based on padding 0's

    for i in range(n):
        for j in range(n):
            if i != j and distance_matrix[i, j] <= distance_percentile:
                heuristic_matrix[i, j] = inverse_distance[i, j] * degree_penalty[i, j]
            else:
                heuristic_matrix[i, j] = 0  # Sparsify: set unpromising edges to zero

    return heuristic_matrix
```
