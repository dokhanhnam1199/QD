```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Improved heuristic function for the Traveling Salesman Problem (TSP) that combines
    multiple factors to determine the likelihood of including an edge in a solution.
    This version includes adaptive weights and a refined sparsification strategy.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance
            matrix between cities.  distance_matrix[i][j] is the distance
            between city i and city j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
            where each element represents the prior probability or desirability
            of including the corresponding edge in a TSP tour.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Heuristic 1: Inverse distance (shorter distances are more desirable)
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero
    inverse_distance_weight = 0.6

    # Heuristic 2: Nearest neighbor desirability
    nearest_neighbors = np.argsort(distance_matrix, axis=1)
    nearest_neighbor_bonus = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(1, min(4, n)):  # Give a bonus to the first 3 nearest neighbors
            neighbor_index = nearest_neighbors[i, j]
            nearest_neighbor_bonus[i, neighbor_index] = 1.0 / j # closer neighbors get higher bonus
    nearest_neighbor_weight = 0.3

    # Heuristic 3: Avoidance of edges that are part of very long distances for the current city (penalty)
    farthest_neighbors = np.argsort(distance_matrix, axis=1)[:, ::-1]
    farthest_neighbor_penalty = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(min(3, n)):
             neighbor_index = farthest_neighbors[i, j]
             farthest_neighbor_penalty[i, neighbor_index] = -0.5  # Negative penalty
    farthest_neighbor_weight = 0.1


    # Combine heuristics with adaptive weights
    heuristic_matrix = (inverse_distance_weight * inverse_distance +
                        nearest_neighbor_weight * nearest_neighbor_bonus +
                        farthest_neighbor_weight * farthest_neighbor_penalty)


    # Sparsify the matrix (optional: keep only top k edges for each node), adaptively based on the mean heuristic value
    k = min(5, n - 1)
    for i in range(n):
        row = heuristic_matrix[i, :]
        mean_heuristic = np.mean(row)
        threshold = np.sort(row)[-k] if k < n else -np.inf #ensure at least one edge exist
        adaptive_threshold = max(threshold, mean_heuristic * 0.5) #ensure a minimum level of connectivity
        heuristic_matrix[i, row < adaptive_threshold] = 0.0


    # Normalize to 0-1 range (optional)
    max_val = np.max(heuristic_matrix)
    min_val = np.min(heuristic_matrix)

    if max_val > min_val:
        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    else:
        heuristic_matrix[:] = 1.0

    return heuristic_matrix
```
