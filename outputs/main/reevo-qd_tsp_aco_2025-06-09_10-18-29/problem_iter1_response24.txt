```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics function for the Traveling Salesman Problem (TSP) using a combination of factors.

    This version combines inverse distance, node degree desirability, and sparsification.
    It aims to provide a more informed estimate of edge desirability compared to simple
    inverse distance.  Sparsification helps focus sampling on promising edges.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix
                                         where distance_matrix[i, j] is the distance between
                                         node i and node j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix, where each
                      element represents the desirability of including the corresponding edge
                      in the TSP solution.  Higher values indicate more desirable edges.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance:  Shorter distances are generally more desirable.
    inverse_distance = 1 / (distance_matrix + 1e-6)  # Add a small constant to avoid division by zero

    # 2. Node Degree Desirability:  Prioritize connecting to nodes with fewer close neighbors
    #    to avoid creating overly dense or disconnected subgraphs early on.
    node_degree_desirability = np.zeros((n, n))
    for i in range(n):
        # Calculate the sum of inverse distances for each node, serving as degree.
        total_inverse_distance_i = np.sum(inverse_distance[i, :])

        for j in range(n):
            if i != j:
                total_inverse_distance_j = np.sum(inverse_distance[j, :])
                node_degree_desirability[i, j] = 1 / (total_inverse_distance_i * total_inverse_distance_j + 1e-6)


    # 3. Combine Factors:  Weighted sum of inverse distance and node degree desirability.
    # Experiment with the weights to find what works best for your problem instance.
    weight_distance = 0.7
    weight_degree = 0.3
    heuristics = weight_distance * inverse_distance + weight_degree * node_degree_desirability


    # 4. Sparsification:  Set unpromising edges to zero to reduce the search space.
    #    This is based on a threshold relative to the mean heuristic value.
    mean_heuristic = np.mean(heuristics)
    threshold = 0.1 * mean_heuristic  # Adjust the threshold as needed
    heuristics[heuristics < threshold] = 0

    # Ensure diagonal elements are zero to prevent self-loops.
    for i in range(n):
        heuristics[i, i] = 0

    return heuristics
```
