```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) based on stochastic solution sampling.

    This version combines several factors to estimate the promise of including each edge in a solution:
    - Inverse distance: Shorter edges are preferred.
    - Node degree: Nodes with fewer connections should be connected earlier to prevent them from being isolated at the end.
    - Sparsification: Edges with low promise are set to zero to reduce the search space.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix between cities.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as the distance matrix, representing the promise of each edge.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance (initial promise)
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # 2. Node degree adjustment
    degree_factor = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                degree_factor[i, j] = (np.sum(distance_matrix[i, :] > 0) + np.sum(distance_matrix[:, j] > 0)) / (2 * n)
    heuristic_matrix *= (1 - degree_factor)

    # 3. Sparsification (remove unpromising edges)

    # Method 1: Keep top-k edges per row

    k = int(np.ceil(n / 3))  # Keep roughly n/3 best edges per row
    for i in range(n):
        row = heuristic_matrix[i, :].copy()
        indices = np.argpartition(row, -k)[-k:]  # Get indices of k largest values
        mask = np.ones(n, dtype=bool)
        mask[indices] = False
        heuristic_matrix[i, mask] = 0  # Set other elements to zero
        heuristic_matrix[i,i] = 0

    # Method 2: Thresholding

    # threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.25) # remove the bottom 25 percentile non-zero elements
    # heuristic_matrix[heuristic_matrix < threshold] = 0

    # Ensure symmetry, zero diagonal and NaN/inf removal after sparsification
    heuristic_matrix = np.triu(heuristic_matrix, 1)
    heuristic_matrix = heuristic_matrix + heuristic_matrix.T
    np.fill_diagonal(heuristic_matrix, 0)
    heuristic_matrix[np.isnan(heuristic_matrix)] = 0
    heuristic_matrix[np.isinf(heuristic_matrix)] = 0


    return heuristic_matrix
```
