```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) that combines
    multiple factors to determine the likelihood of including an edge in a solution.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance
            matrix between cities.  distance_matrix[i][j] is the distance
            between city i and city j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
            where each element represents the prior probability or desirability
            of including the corresponding edge in a TSP tour.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Heuristic 1: Inverse distance (shorter distances are more desirable)
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero

    # Heuristic 2: Nearest neighbor bonus (stronger penalty for non-neighbors)
    nearest_neighbors = np.argsort(distance_matrix, axis=1)
    nearest_neighbor_bonus = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        neighbor_index = nearest_neighbors[i, 1]  # Only consider the very nearest neighbor
        nearest_neighbor_bonus[i, neighbor_index] = 1.0  # Strong bonus for the nearest neighbor

    # Heuristic 3: Farthest neighbor penalty (direct penalty)
    farthest_neighbors = np.argsort(distance_matrix, axis=1)[:, -1] #only penalize the farthest neighbor.
    farthest_neighbor_penalty = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        farthest_neighbor_penalty[i, farthest_neighbors[i]] = -1.0

    # Combine heuristics (direct summation, simpler)
    heuristic_matrix = inverse_distance + nearest_neighbor_bonus + farthest_neighbor_penalty

    # Sparsify the matrix (keep only top k edges for each node)
    k = min(4, n - 1) # Reduced k for more sparsification, but keep at least one
    for i in range(n):
        row = heuristic_matrix[i, :]
        threshold = np.sort(row)[-k]  # Find the kth largest value
        heuristic_matrix[i, row < threshold] = 0.0  # Set values below k to zero

    # Normalize to 0-1 range (more robust normalization)
    if np.any(heuristic_matrix != 0): #Check if there is any non-zero value
      max_val = np.max(heuristic_matrix)
      min_val = np.min(heuristic_matrix[heuristic_matrix > 0]) if np.any(heuristic_matrix > 0) else max_val # Avoid zero division in normalization

      if max_val > min_val:
          heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
      else:
          heuristic_matrix[heuristic_matrix > 0] = 1.0 # Handles the case when min and max are equal
    else:
        heuristic_matrix[:] = 0.0  #Handle the all zero case

    return heuristic_matrix
```
