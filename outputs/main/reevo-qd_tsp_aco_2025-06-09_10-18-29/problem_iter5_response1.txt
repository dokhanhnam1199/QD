```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) that combines
    multiple factors to determine the likelihood of including an edge in a solution.
    This version emphasizes simplicity, stronger penalties, and dynamic weight adaptation.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance
            matrix between cities.  distance_matrix[i][j] is the distance
            between city i and city j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
            where each element represents the prior probability or desirability
            of including the corresponding edge in a TSP tour.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Heuristic 1: Inverse distance (shorter distances are more desirable)
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero

    # Heuristic 2: Nearest neighbor desirability (stronger bonus for immediate neighbors)
    nearest_neighbors = np.argsort(distance_matrix, axis=1)
    nearest_neighbor_bonus = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        neighbor_index = nearest_neighbors[i, 1]  # Only consider the absolute nearest neighbor
        nearest_neighbor_bonus[i, neighbor_index] = 2.0  # Strong bonus

    # Heuristic 3: Penalty for long edges (stronger penalty)
    max_distance = np.max(distance_matrix)
    long_edge_penalty = -(distance_matrix / max_distance) # Normalize distance to -1 to 0 range
    long_edge_penalty = np.clip(long_edge_penalty, -1.0, 0.0) #ensure it is negative

    # Combine heuristics (with adjusted weights)
    heuristic_matrix = inverse_distance + nearest_neighbor_bonus + long_edge_penalty * 0.5 #reduce the influence of long edge penalty

    # Sparsify the matrix (keep only top k edges for each node)
    k = min(4, n - 1)
    for i in range(n):
        row = heuristic_matrix[i, :]
        threshold = np.sort(row)[-k]
        heuristic_matrix[i, row < threshold] = 0.0

    # Normalize to 0-1 range
    max_val = np.max(heuristic_matrix)
    min_val = np.min(heuristic_matrix)

    if max_val > min_val:
        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    else:
        heuristic_matrix[:] = 1.0
    return heuristic_matrix
```
