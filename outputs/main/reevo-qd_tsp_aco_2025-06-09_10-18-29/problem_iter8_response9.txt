```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    """
    Heuristic function for the Traveling Salesman Problem (TSP) that combines
    multiple factors to determine the likelihood of including an edge in a solution.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance
            matrix between cities.  distance_matrix[i][j] is the distance
            between city i and city j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
            where each element represents the prior probability or desirability
            of including the corresponding edge in a TSP tour.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Heuristic 1: Inverse distance (shorter distances are more desirable) - Strong Incentive
    inverse_distance = 1.0 / (distance_matrix + 1e-9)

    # Heuristic 2: Nearest neighbor bonus (very strong incentive)
    nearest_neighbors = np.argsort(distance_matrix, axis=1)
    nearest_neighbor_bonus = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        nearest_neighbor_index = nearest_neighbors[i, 1]  # The immediate nearest neighbor
        nearest_neighbor_bonus[i, nearest_neighbor_index] = 2.0 # Very strong bonus

    # Heuristic 3: Farthest neighbor penalty (strong direct penalty)
    farthest_neighbors = np.argsort(distance_matrix, axis=1)[:, -1] #only penalize the farthest neighbor.
    farthest_neighbor_penalty = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        farthest_neighbor_penalty[i, farthest_neighbors[i]] = -2.0 # Strong penalty

    # Combine heuristics (simple summation)
    heuristic_matrix = inverse_distance + nearest_neighbor_bonus + farthest_neighbor_penalty

    # Sparsify the matrix (aggressively - keep only top k edges for each node)
    k = min(3, n - 1)  # More aggressive sparsification
    for i in range(n):
        row = heuristic_matrix[i, :]
        threshold = np.sort(row)[-k]
        heuristic_matrix[i, row < threshold] = 0.0

    # Robust normalization to 0-1 range
    if np.any(heuristic_matrix > 0):  # Check for positive values (important for normalization)
        max_val = np.max(heuristic_matrix)
        min_val = np.min(heuristic_matrix[heuristic_matrix > 0]) if np.any(heuristic_matrix > 0) else max_val

        if max_val > min_val:
            heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
        else:
            heuristic_matrix[heuristic_matrix > 0] = 1.0 # if min and max values are the same, set to 1
    else:
        heuristic_matrix[:] = 0.0 # if all are non-positive, set to zero

    return heuristic_matrix
```
