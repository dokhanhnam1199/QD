```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) that estimates
    the desirability of including each edge in an optimal tour.

    This version incorporates several factors:
        1. Inverse distance: Shorter edges are generally more desirable.
        2. Nearest neighbor: Edges connecting a node to its nearest neighbors
           are considered more important.
        3. Sparsification:  Edges with very low desirability scores are set to 0 to
           focus the search on promising connections.
        4. Randomness: Add a small amount of noise to the heuristic values to introduce some stochasticity.
    Args:
        distance_matrix (np.ndarray): A square matrix where entry (i, j) represents
            the distance between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each
            entry represents the desirability of including the corresponding edge
            in a TSP tour. Higher values indicate more desirable edges.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # 2. Nearest neighbor heuristic
    for i in range(n):
        # Find the nearest neighbors of node i
        distances = distance_matrix[i, :]
        nearest_neighbor_indices = np.argsort(distances)[1:4]  # Exclude itself, take the next three nearest neighbors

        # Boost the desirability of edges to nearest neighbors
        for j in nearest_neighbor_indices:
             heuristic_matrix[i, j] *= 2.0  # Increase the desirability for these edges
             heuristic_matrix[j, i] *= 2.0

    # 3. Sparsification
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 30) # Set to zero those which are below 30th percentile
    heuristic_matrix[heuristic_matrix < threshold] = 0

    #4. Add small random noise
    heuristic_matrix += np.random.rand(n, n) * 0.01 # Add random noise to explore different path

    return heuristic_matrix
```
