```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) that combines
    multiple factors to determine the likelihood of including an edge in a solution.
    This version prioritizes simplicity and dynamic weight adjustment.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance
            matrix between cities.  distance_matrix[i][j] is the distance
            between city i and city j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
            where each element represents the prior probability or desirability
            of including the corresponding edge in a TSP tour.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Heuristic 1: Inverse distance (shorter distances are more desirable)
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero

    # Heuristic 2: Nearest neighbor bonus (only immediate neighbor)
    nearest_neighbors = np.argsort(distance_matrix, axis=1)
    nearest_neighbor_bonus = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        neighbor_index = nearest_neighbors[i, 1]  # immediate neighbor
        nearest_neighbor_bonus[i, neighbor_index] = 1.0

    # Heuristic 3: Farthest neighbor penalty (stronger penalty)
    farthest_neighbors = np.argsort(distance_matrix, axis=1)[:, -1]
    farthest_neighbor_penalty = np.zeros(n)
    for i in range(n):
        farthest_neighbor_penalty[i] = distance_matrix[i, farthest_neighbors[i]]

    # Dynamic weight adjustment based on distance range
    max_distance = np.max(distance_matrix)
    min_distance = np.min(distance_matrix)
    distance_range = max_distance - min_distance

    if distance_range > 0:
        nearest_neighbor_weight = 0.5 + 0.5 * (max_distance - np.mean(distance_matrix)) / distance_range
        farthest_neighbor_weight = 0.5 + 0.5 * (np.mean(distance_matrix)- min_distance) / distance_range
    else:
        nearest_neighbor_weight = 0.5
        farthest_neighbor_weight = 0.5

    # Combine heuristics with adjusted weights.  Direct summation.
    for i in range(n):
        heuristic_matrix[i, :] = inverse_distance[i, :] + nearest_neighbor_weight * nearest_neighbor_bonus[i, :] - farthest_neighbor_weight * (distance_matrix[i,:]/max_distance)**2  #Penalize more for bigger distances


    # Sparsify the matrix (keep only top k edges for each node)
    k = min(4, n - 1)  # Reduced to top 3-4
    for i in range(n):
        row = heuristic_matrix[i, :]
        threshold = np.sort(row)[-k]  # Find the kth largest value
        heuristic_matrix[i, row < threshold] = 0.0  # Set values below k to zero.


    # Normalization (scaled by mean for stability)
    mean_val = np.mean(heuristic_matrix)
    std_val = np.std(heuristic_matrix)

    if std_val > 0:
        heuristic_matrix = (heuristic_matrix - mean_val) / std_val  #Z score
    else:
        heuristic_matrix[:] = 0.0

    heuristic_matrix = (heuristic_matrix - np.min(heuristic_matrix))/(np.max(heuristic_matrix) - np.min(heuristic_matrix) + 1e-9)

    return heuristic_matrix
```
