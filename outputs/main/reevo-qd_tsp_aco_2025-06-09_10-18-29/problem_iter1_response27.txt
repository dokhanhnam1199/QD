```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors and sparsification.

    Args:
        distance_matrix: A numpy array representing the distance matrix between cities.

    Returns:
        A numpy array of the same shape as the distance matrix, representing
        the prior indicators (heuristic values) for each edge. Higher values
        indicate a more promising edge.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance (as in v1, but normalized)
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero.
    inverse_distance = inverse_distance / np.max(inverse_distance)

    # 2. Nearest Neighbor heuristic
    nearest_neighbors = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        sorted_indices = np.argsort(distance_matrix[i, :])
        # Assign high values to k nearest neighbors, excluding itself
        k = min(5, n - 1) #Consider only top k neighbors for efficiency, exclude self-loop

        count = 0
        for j in sorted_indices:
            if i != j:
                nearest_neighbors[i, j] = 1
                count += 1
                if count >= k:
                    break
    nearest_neighbors = nearest_neighbors / np.max(nearest_neighbors)
    
    # 3. Regret heuristic (Difference between best and second-best edges)
    regret = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        sorted_distances = np.sort(distance_matrix[i, :])
        for j in range(n):
          if i != j: # exclude self loops
            regret[i,j] = sorted_distances[1] - sorted_distances[0] # difference between closest and second closest
          else:
            regret[i,j] = 0

    regret = regret / np.max(regret)  # Normalize
    regret = 1 - regret  # Smaller difference is more desirable, reverse the regret, now bigger score means more promising.

    # Combine the heuristics
    heuristic_matrix = 0.5 * inverse_distance + 0.3 * nearest_neighbors + 0.2 * regret

    # Sparsify: Set unpromising elements to zero (optional, but helpful)
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 40)  # Keep top 60% edges
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
