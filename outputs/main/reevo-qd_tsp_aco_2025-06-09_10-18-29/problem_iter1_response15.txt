```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP).

    This function combines several factors to estimate the desirability of including each edge
    in the final TSP tour.  It considers distance, node degree (implicitly), and
    connectivity.  It also sparsifies the resulting matrix by setting the least promising
    edges to zero.

    Args:
        distance_matrix (np.ndarray): A square matrix where `distance_matrix[i, j]`
            represents the distance between city `i` and city `j`.

    Returns:
        np.ndarray: A matrix of the same shape as `distance_matrix` containing heuristic
            values indicating the desirability of including each edge. Higher values
            indicate more promising edges.
    """

    n = distance_matrix.shape[0]

    # 1. Inverse Distance: Shorter edges are generally more desirable.
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero.

    # 2. Node "Centrality" / Connectivity Heuristic: Nodes that are "centrally" located
    #    or highly connected to other nodes might be good candidates for inclusion.
    #    We approximate centrality via the sum of inverse distances.
    node_centrality = np.sum(inverse_distance, axis=0)
    centrality_matrix = np.outer(node_centrality, node_centrality)

    # 3. Combined Heuristic: Combine distance and centrality. Experimenting with
    #    different weights might be beneficial.
    heuristic_matrix = inverse_distance * np.sqrt(centrality_matrix)


    # 4. Sparsification:  Set a fraction of the least promising edges to zero.
    #    This encourages exploration and prevents the algorithm from getting stuck
    #    with initially chosen poor connections.
    threshold = np.quantile(heuristic_matrix[np.triu_indices_from(heuristic_matrix, k=1)], 0.25) # remove weakest 75% for faster running
    heuristic_matrix[heuristic_matrix < threshold] = 0
    np.fill_diagonal(heuristic_matrix, 0) # Remove self loops that might have been selected.

    return heuristic_matrix
```
