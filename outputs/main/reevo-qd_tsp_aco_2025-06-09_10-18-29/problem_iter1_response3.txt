```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) using stochastic solution sampling ideas.
    Combines several factors to estimate the promise of including each edge in the optimal solution.

    Args:
        distance_matrix (np.ndarray): A square matrix where distance_matrix[i, j] represents the distance between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, representing the prior indicator for each edge.
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance: Shorter distances are generally more promising.
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero.

    # 2. Node Degree Penalty:  Penalize edges connected to nodes with many nearby neighbors.  This encourages connecting isolated nodes.
    degree_penalty = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        # Number of neighbors within a certain radius (e.g., average distance)
        avg_dist = np.mean(distance_matrix[i, :])
        nearby_neighbors = np.sum(distance_matrix[i, :] < avg_dist)

        for j in range(n):
            if i != j:
                degree_penalty[i, j] = 1.0 / (nearby_neighbors + 1e-9)

    # 3. Sparsification: Set a threshold and zero out very long edges
    distance_threshold = np.mean(distance_matrix) + np.std(distance_matrix)  # Example threshold
    sparsification_mask = distance_matrix <= distance_threshold

    # 4. Combine Factors (Weighted Sum)
    heuristics = 0.6 * inverse_distance + 0.4 * degree_penalty

    # Apply Sparsification Mask
    heuristics = heuristics * sparsification_mask

    # Ensure symmetry (TSP is usually undirected)
    heuristics = (heuristics + heuristics.T) / 2.0

    return heuristics
```
