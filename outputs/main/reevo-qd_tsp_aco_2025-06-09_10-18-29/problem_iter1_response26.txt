```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP).

    This version combines several factors to estimate the promise of each edge:
    - Inverse distance: Shorter distances are generally more promising.
    - Node degree: Nodes with few close neighbors might require longer edges.
    - Global average distance: Edges significantly shorter than the average are favored.

    The matrix is also sparsified by setting very unpromising edges to zero.

    Args:
        distance_matrix (np.ndarray): A square matrix where distance_matrix[i, j]
            represents the distance between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each
            element indicates the promise of including the corresponding edge
            in the TSP solution. Higher values indicate more promising edges.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Node degree component: Penalize high degree by using the average of the k-nearest neighbors
    k = min(5, n - 1)  # Consider top 5 nearest neighbors (excluding self) or fewer for small n
    node_degree_component = np.zeros_like(distance_matrix)
    for i in range(n):
        distances = distance_matrix[i, :]
        neighbor_indices = np.argsort(distances)[1:k+1]  # Exclude self (distance 0)
        avg_neighbor_distance = np.mean(distances[neighbor_indices])
        for j in range(n):
            if i != j:
                node_degree_component[i, j] = 1 / (avg_neighbor_distance + 1e-9) # Avoid division by zero

    # Global average distance
    avg_distance = np.mean(distance_matrix)
    global_average_component = avg_distance / (distance_matrix + 1e-9)


    # Combine factors (weighted sum)
    heuristics = 0.6 * inverse_distance + 0.2 * node_degree_component + 0.2 * global_average_component

    # Sparsify the matrix: zero out values below threshold relative to max values
    threshold = 0.05 * np.max(heuristics) #remove values < 5% of the maximum heuristic score

    heuristics[heuristics < threshold] = 0

    return heuristics
```
