```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors:
    - Inverse distance
    - Savings heuristic
    - Nearest neighbor consideration

    It also sparsifies the matrix by setting unpromising elements to zero.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance component
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small value to avoid division by zero

    # Savings heuristic component
    savings = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                savings[i, j] = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j]

    # Nearest Neighbor component
    nearest_neighbors = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        distances = distance_matrix[i, :].copy()
        distances[i] = np.inf # Prevent self-loop
        nearest_neighbor_indices = np.argsort(distances)
        for k in nearest_neighbor_indices[:3]: # Consider top 3 nearest neighbors
            nearest_neighbors[i, k] = 1.0

    # Combine the components
    heuristics = inverse_distance + 0.5 * savings + 0.7 * nearest_neighbors

    # Sparsify the matrix (set low values to zero)
    threshold = np.quantile(heuristics[heuristics > 0], 0.3)  #dynamic threshold

    heuristics[heuristics < threshold] = 0

    # Mask diagonal elements to prevent self-loops, they might become non-zero
    for i in range(n):
        heuristics[i, i] = 0

    return heuristics
```
