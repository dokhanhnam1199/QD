```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) that combines
    several factors to estimate the desirability of including each edge in a solution.

    This version incorporates:
    1. Inverse distance: Shorter edges are generally more desirable.
    2. Node degree preference:  Edges connected to nodes with fewer connections
       (lower degree) are preferred, encouraging exploration of less visited areas.
    3. Sparsification: Sets edges with distances above a threshold to zero,
       reducing the search space.
    4. Random perturbations: add some randomness to escape local optima.

    Args:
        distance_matrix (np.ndarray): A square matrix where distance_matrix[i][j]
            represents the distance between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each
            element represents the desirability of including the corresponding edge
            in a TSP tour. Higher values indicate greater desirability.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance
    inverse_distance = 1 / (distance_matrix + 1e-6)  # Adding a small value to avoid division by zero

    # 2. Node Degree Preference
    # Calculate the 'degree' of each node based on inverse distances.  Higher distance -> lower weight
    node_degrees = np.sum(inverse_distance, axis=0) # sum across columns (or rows) will give the degree for each node
    degree_matrix = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            degree_matrix[i, j] = (node_degrees[i] + node_degrees[j])

    # Scale degree matrix so that the highest degree becomes 1 and lower degrees become fractional values
    max_degree = np.max(degree_matrix)
    degree_factor = degree_matrix / max_degree

    # Edges connected to nodes with lower degrees are more preferable,
    # so take the inverse (edges between nodes of large degrees are less desirable.)
    degree_factor = 1.0 / (degree_factor + 1e-6)

    # 3. Sparsification based on distance
    distance_threshold = np.percentile(distance_matrix[distance_matrix > 0], 75) #consider top 75 percentile of the distance
    sparse_matrix = np.where(distance_matrix <= distance_threshold, 1.0, 0.0) #sparse matrix set 1 to desirable elements

    # 4. Random pertubations (scaled to be small so that does not throw off the calculation too much)
    random_matrix = np.random.rand(n, n) * 0.1


    # Combine the factors (weighted combination)
    heuristic_matrix = (0.6 * inverse_distance + 0.3 * degree_factor + 0.1 * random_matrix) * sparse_matrix #we only consider sparce matrix elements

    return heuristic_matrix
```
