import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines edge frequency analysis from multiple randomized greedy constructions with a pheromone-inspired reinforcement learning approach to iteratively refine edge desirability.}"""
    n = distance_matrix.shape[0]
    num_samples = 50
    pheromone_matrix = np.ones_like(distance_matrix, dtype=float)
    edge_counts = np.zeros_like(distance_matrix, dtype=int)
    alpha = 0.8
    rho = 0.05

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(start_node)
        path = [start_node]

        while unvisited_nodes:
            probabilities = np.zeros(n)
            for neighbor in range(n):
                if neighbor in unvisited_nodes:
                     probabilities[neighbor] = pheromone_matrix[current_node, neighbor] * (1 / (distance_matrix[current_node, neighbor] + 1e-9))

            if np.sum(probabilities) == 0:
                next_node = np.random.choice(list(unvisited_nodes))
            else:
                probabilities /= np.sum(probabilities)
                next_node = np.random.choice(range(n), p=probabilities)

            path.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

        path.append(start_node)

        for i in range(n):
            node1 = path[i]
            node2 = path[i+1]
            edge_counts[node1, node2] += 1
            edge_counts[node2, node1] += 1
            
    #Pheromone update based on edge frequency:
    for i in range(n):
        for j in range(n):
            pheromone_matrix[i,j] = (1-rho) * pheromone_matrix[i,j] + alpha * (edge_counts[i,j] / num_samples)
            
    heuristics_matrix = pheromone_matrix / (distance_matrix + 1e-9)
    return heuristics_matrix
