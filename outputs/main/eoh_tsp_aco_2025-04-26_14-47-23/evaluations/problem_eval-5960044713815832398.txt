import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by penalizing longer direct distances and favoring connections to nodes with shorter average distances to all other nodes.}"""
    n = distance_matrix.shape[0]
    
    # Calculate average distance from each node to all other nodes
    avg_distances = np.mean(distance_matrix, axis=1)
    
    # Heuristic matrix: inverse of distance, adjusted by average distances
    heuristics_matrix = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = 1 / (distance_matrix[i, j] + 1e-9) + (1 / (avg_distances[i] + avg_distances[j] + 1e-9))
            else:
                heuristics_matrix[i, j] = 0

    return heuristics_matrix
