import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples tours, selects the best 'k' tours, and updates a heuristic matrix by weighting edge frequencies in those tours based on their rank and inverse distance.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000
    k = 50

    tours = []
    distances = []

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour_distance = 0
        for i in range(n - 1):
            tour_distance += distance_matrix[tour[i], tour[i + 1]]
        tour_distance += distance_matrix[tour[-1], tour[0]]

        tours.append(tour)
        distances.append(tour_distance)

    # Select the best k tours
    ranked_tours = sorted(zip(tours, distances), key=lambda x: x[1])
    best_tours = [tour for tour, distance in ranked_tours[:k]]

    # Update heuristics matrix
    for rank, tour in enumerate(best_tours):
        weight = (k - rank) / k  # Weight based on rank (better tours have higher weights)
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i + 1]] += weight / distance_matrix[tour[i], tour[i + 1]]
            heuristics_matrix[tour[i + 1], tour[i]] += weight / distance_matrix[tour[i + 1], tour[i]]
        heuristics_matrix[tour[-1], tour[0]] += weight / distance_matrix[tour[-1], tour[0]]
        heuristics_matrix[tour[0], tour[-1]] += weight / distance_matrix[tour[0], tour[-1]]

    return heuristics_matrix
