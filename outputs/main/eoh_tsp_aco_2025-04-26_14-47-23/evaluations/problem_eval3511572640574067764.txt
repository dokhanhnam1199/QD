import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristics matrix by iteratively improving random tours using 2-opt swaps and weighting edges based on their frequency and the tour length in which they appear, favoring edges in shorter tours.}"""
    n = distance_matrix.shape[0]
    num_iterations = 500
    num_tours = 50
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_tours):
        # Generate a random tour
        nodes = list(range(n))
        np.random.shuffle(nodes)
        tour = nodes + [nodes[0]]  # Close the tour

        # Improve the tour using 2-opt swaps
        for _ in range(num_iterations):
            i = np.random.randint(1, n - 1)
            j = np.random.randint(i + 1, n)

            if j - i == 1:
                continue

            old_distance = distance_matrix[tour[i - 1], tour[i]] + distance_matrix[tour[j], tour[j + 1]]
            new_distance = distance_matrix[tour[i - 1], tour[j]] + distance_matrix[tour[i], tour[j + 1]]

            if new_distance < old_distance:
                tour[i:j+1] = tour[i:j+1][::-1]

        # Calculate tour length
        tour_length = 0
        for i in range(n):
            tour_length += distance_matrix[tour[i], tour[i + 1]]

        # Update heuristics matrix based on edge frequencies and tour length
        weight = 1.0 / (tour_length + 1e-9)  # Weight inversely proportional to tour length

        for i in range(n):
            node1 = tour[i]
            node2 = tour[i + 1]
            heuristics_matrix[node1, node2] += weight
            heuristics_matrix[node2, node1] += weight

    return heuristics_matrix
