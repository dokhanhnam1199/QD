import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines edge-frequency sampling from multiple shortest-path trees rooted at different nodes with an edge desirability measure based on distance.}"""
    n = distance_matrix.shape[0]
    num_samples = 10
    edge_counts = np.zeros_like(distance_matrix, dtype=float)

    for start_node in range(num_samples):
        # Compute shortest path tree from start_node
        distances = np.full(n, np.inf)
        distances[start_node] = 0
        predecessors = np.full(n, -1, dtype=int)
        unvisited = set(range(n))

        while unvisited:
            current_node = min(unvisited, key=distances.__getitem__)
            unvisited.remove(current_node)

            for neighbor in range(n):
                if distance_matrix[current_node, neighbor] > 0:  #Valid Edge
                    new_dist = distances[current_node] + distance_matrix[current_node, neighbor]
                    if new_dist < distances[neighbor]:
                        distances[neighbor] = new_dist
                        predecessors[neighbor] = current_node

        # Trace shortest paths from start_node to all other nodes
        for end_node in range(n):
            if end_node != start_node:
                path = []
                current = end_node
                while current != -1:
                    path.insert(0, current)
                    current = predecessors[current]

                # Count edges in the shortest path
                for i in range(len(path) - 1):
                    u = path[i]
                    v = path[i + 1]
                    edge_counts[u, v] += 1
                    edge_counts[v, u] += 1
                    
    # Normalize edge counts
    edge_frequencies = edge_counts / (num_samples * (n-1))  # Correct Normalization

    # Heuristic values: combine frequency with inverse of distance
    heuristics_matrix = edge_frequencies / (distance_matrix + 1e-9)  # Avoid division by zero

    return heuristics_matrix
