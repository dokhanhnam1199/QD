import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses a modified ant colony optimization approach with dynamic pheromone update and adaptive exploration rate.}"""
    n = distance_matrix.shape[0]
    pheromone_matrix = np.ones_like(distance_matrix, dtype=float)
    alpha = 0.7  # Pheromone influence
    beta = 1.5  # Distance influence
    rho = 0.3  # Evaporation rate
    Q = 100    # Pheromone deposit constant
    num_ants = 10
    num_iterations = 100
    exploration_rate = 0.1

    for iteration in range(num_iterations):
        ant_tours = []
        ant_tour_lengths = []

        for ant in range(num_ants):
            current_node = np.random.randint(n)
            tour = [current_node]
            unvisited_nodes = set(range(n))
            unvisited_nodes.remove(current_node)

            while unvisited_nodes:
                if np.random.rand() < exploration_rate:
                    next_node = np.random.choice(list(unvisited_nodes))
                else:
                    probabilities = np.zeros(n)
                    for neighbor in range(n):
                        if neighbor in unvisited_nodes:
                            probabilities[neighbor] = (pheromone_matrix[current_node, neighbor]**alpha) * ((1 / (distance_matrix[current_node, neighbor] + 1e-9))**beta)

                    if np.sum(probabilities) == 0:
                        next_node = np.random.choice(list(unvisited_nodes))
                    else:
                        probabilities /= np.sum(probabilities)
                        next_node = np.random.choice(range(n), p=probabilities)

                tour.append(next_node)
                unvisited_nodes.remove(next_node)
                current_node = next_node

            tour_length = 0
            for i in range(n - 1):
                tour_length += distance_matrix[tour[i], tour[i + 1]]
            tour_length += distance_matrix[tour[-1], tour[0]]

            ant_tours.append(tour)
            ant_tour_lengths.append(tour_length)

        best_tour_length = min(ant_tour_lengths)
        for i in range(n):
            for j in range(n):
                pheromone_matrix[i, j] *= (1 - rho)

        for ant in range(num_ants):
            tour = ant_tours[ant]
            tour_length = ant_tour_lengths[ant]
            delta_pheromone = Q / (tour_length + 1e-9)
            if tour_length == best_tour_length:
                delta_pheromone *= 2 # Boost pheromone for best tour
            for i in range(n - 1):
                pheromone_matrix[tour[i], tour[i + 1]] += delta_pheromone
                pheromone_matrix[tour[i + 1], tour[i]] += delta_pheromone
            pheromone_matrix[tour[-1], tour[0]] += delta_pheromone
            pheromone_matrix[tour[0], tour[-1]] += delta_pheromone
        exploration_rate = max(0.01, exploration_rate * 0.95)

    heuristics_matrix = pheromone_matrix / (distance_matrix + 1e-9)
    return heuristics_matrix
