import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm constructs a heuristics matrix by iteratively sampling random tours and updating the matrix based on the frequency of each edge's appearance in short tours.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour_distance = 0
        for i in range(n - 1):
            tour_distance += distance_matrix[tour[i], tour[i+1]]
        tour_distance += distance_matrix[tour[-1], tour[0]]

        # Calculate a score based on tour length, best tours get higher scores
        score = np.exp(-tour_distance / (np.mean(distance_matrix) * n)) # Exponential decay makes it more sensitive to good tours

        # Update the heuristics matrix based on edges in the tour
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += score
            heuristics_matrix[tour[i+1], tour[i]] += score
        heuristics_matrix[tour[-1], tour[0]] += score
        heuristics_matrix[tour[0], tour[-1]] += score
    
    # Normalize
    heuristics_matrix = heuristics_matrix / num_samples
    
    return heuristics_matrix
