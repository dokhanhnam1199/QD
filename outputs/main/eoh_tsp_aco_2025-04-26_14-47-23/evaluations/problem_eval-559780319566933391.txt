import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines a greedy construction with random swaps and simulated annealing to find good TSP solutions, using edge presence in accepted solutions to build a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 100
    
    for _ in range(num_iterations):
        # Greedy construction
        start_node = np.random.randint(n)
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(start_node)
        tour = [start_node]
        current_node = start_node
        
        while unvisited_nodes:
            nearest_neighbor = None
            min_distance = np.inf
            for neighbor in unvisited_nodes:
                dist = distance_matrix[current_node, neighbor]
                if dist < min_distance:
                    min_distance = dist
                    nearest_neighbor = neighbor
            tour.append(nearest_neighbor)
            unvisited_nodes.remove(nearest_neighbor)
            current_node = nearest_neighbor
        
        # Simulated annealing with random swaps
        temperature = 1.0
        cooling_rate = 0.95
        
        best_tour = tour[:]
        best_tour_cost = calculate_tour_cost(tour, distance_matrix)
        
        for _ in range(1000):
            i, j = np.random.choice(n, 2, replace=False)
            new_tour = tour[:]
            new_tour[i], new_tour[j] = new_tour[j], new_tour[i]
            new_tour_cost = calculate_tour_cost(new_tour, distance_matrix)
            
            cost_difference = new_tour_cost - calculate_tour_cost(tour, distance_matrix)
            
            if cost_difference < 0 or np.random.rand() < np.exp(-cost_difference / temperature):
                tour = new_tour[:]
                
                if new_tour_cost < best_tour_cost:
                    best_tour = new_tour[:]
                    best_tour_cost = new_tour_cost
            
            temperature *= cooling_rate
            
        # Update heuristics matrix based on the best tour
        for i in range(n):
            node1 = best_tour[i]
            node2 = best_tour[(i + 1) % n]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1
            
    return heuristics_matrix / num_iterations

def calculate_tour_cost(tour, distance_matrix):
    cost = 0
    n = len(tour)
    for i in range(n - 1):
        cost += distance_matrix[tour[i], tour[i+1]]
    cost += distance_matrix[tour[-1], tour[0]]
    return heuristics_matrix
