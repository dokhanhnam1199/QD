import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples near-optimal TSP solutions using a stochastic nearest neighbor approach with a probability-based selection of neighbors weighted by inverse distance and applies a local search to improve each sampled solution, accumulating edge frequencies weighted by inverse distance to estimate edge desirability.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    def improve_path(path):
        improved = True
        while improved:
            improved = False
            for i in range(1, len(path) - 2):
                for j in range(i + 2, len(path)):
                    if j == len(path) -1 and i == 1:
                        continue
                    if j == len(path) - 1:
                      continue

                    if distance_matrix[path[i-1], path[i]] + distance_matrix[path[j-1], path[j]] > \
                       distance_matrix[path[i-1], path[j-1]] + distance_matrix[path[i], path[j]]:
                        path[i:j] = path[i:j][::-1]
                        improved = True
        return path

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(start_node)
        path = [start_node]

        while unvisited_nodes:
            probabilities = []
            neighbors = []
            total_weight = 0.0
            for neighbor in unvisited_nodes:
                dist = distance_matrix[current_node, neighbor]
                weight = 1.0 / (dist) if dist > 0 else 1.0
                probabilities.append(weight)
                neighbors.append(neighbor)
                total_weight += weight

            probabilities = [p / total_weight for p in probabilities]
            
            nearest_neighbor = np.random.choice(neighbors, p=probabilities)
            
            path.append(nearest_neighbor)
            unvisited_nodes.remove(nearest_neighbor)
            current_node = nearest_neighbor
        
        path.append(start_node)
        path = improve_path(path)


        for i in range(n):
            node1 = path[i]
            node2 = path[i+1]
            distance = distance_matrix[node1, node2]
            if distance > 0:
                weight = 1.0 / (distance)
            else:
                weight = 1.0  # Avoid division by zero

            heuristics_matrix[node1, node2] += weight
            heuristics_matrix[node2, node1] += weight

    heuristics_matrix /= num_samples
    return heuristics_matrix
