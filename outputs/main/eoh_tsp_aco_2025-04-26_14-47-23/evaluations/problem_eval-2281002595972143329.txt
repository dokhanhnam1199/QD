import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristic matrix by iteratively refining edge weights based on a combination of shortest path computations and edge betweenness centrality estimation within a limited exploration radius.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.ones_like(distance_matrix, dtype=float)

    num_iterations = 5
    exploration_radius = 3  # Limit the scope of shortest path calculations

    for _ in range(num_iterations):
        for i in range(n):
            for j in range(n):
                if i != j:
                    # Shortest path heuristic within exploration radius
                    neighbors_i = np.argsort(distance_matrix[i, :])[:exploration_radius + 1]
                    neighbors_j = np.argsort(distance_matrix[j, :])[:exploration_radius + 1]
                    
                    shortest_path_weight = float('inf')
                    for neighbor_i in neighbors_i:
                        for neighbor_j in neighbors_j:
                            if neighbor_i != i and neighbor_j != j:
                                path_weight = distance_matrix[i, neighbor_i] + distance_matrix[neighbor_i, neighbor_j] + distance_matrix[neighbor_j, j]
                                shortest_path_weight = min(shortest_path_weight, path_weight)
                    
                    if shortest_path_weight != float('inf'):
                         heuristics_matrix[i, j] +=  1.0 / (shortest_path_weight + 1e-9)
                
                    #Edge betweenness heuristic (simplified)
                    betweenness_estimate = 0
                    for k in range(n):
                        if k != i and k != j:
                            if distance_matrix[i,k] + distance_matrix[k,j] < distance_matrix[i,j]:
                                betweenness_estimate += 1
                    heuristics_matrix[i,j] += betweenness_estimate * 0.1
                            
                    
    return heuristics_matrix
