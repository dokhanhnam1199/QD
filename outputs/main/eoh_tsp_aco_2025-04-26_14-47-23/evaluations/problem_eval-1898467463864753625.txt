import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm iteratively samples random tours, keeps track of edge frequencies, and combines edge frequencies with inverse distance to guide the search towards promising edges.}
    """
    n = distance_matrix.shape[0]
    num_samples = 1000
    edge_counts = np.zeros_like(distance_matrix)
    
    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        
        # Update edge counts
        for i in range(n - 1):
            edge_counts[tour[i], tour[i+1]] += 1
            edge_counts[tour[i+1], tour[i]] += 1  # Since the graph is undirected
        edge_counts[tour[-1], tour[0]] += 1
        edge_counts[tour[0], tour[-1]] += 1
    
    # Combine edge counts with inverse distance
    heuristics_matrix = (edge_counts / num_samples) / (distance_matrix + 1e-9) # Add a small value to avoid division by zero

    return heuristics_matrix
