import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm uses a stochastic sampling approach, where it generates multiple random tours, calculates their lengths, and uses the frequency with which each edge appears in the shortest tours as a heuristic indicator.}
    """
    n = distance_matrix.shape[0]
    num_samples = 1000
    tour_lengths = []
    tours = []
    for _ in range(num_samples):
        tour = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i + 1]]
        tour_length += distance_matrix[tour[-1], tour[0]]
        tour_lengths.append(tour_length)
        tours.append(tour)

    # Select the top 10% shortest tours
    cutoff = np.percentile(tour_lengths, 10)
    selected_tours = [tours[i] for i in range(num_samples) if tour_lengths[i] <= cutoff]

    # Initialize the heuristics matrix
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Count the frequency of each edge in the selected tours
    for tour in selected_tours:
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i + 1]] += 1
            heuristics_matrix[tour[i + 1], tour[i]] += 1
        heuristics_matrix[tour[-1], tour[0]] += 1
        heuristics_matrix[tour[0], tour[-1]] += 1

    # Normalize the frequencies
    heuristics_matrix = heuristics_matrix / len(selected_tours)

    return heuristics_matrix
