import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm adaptively combines nearest neighbor selection with edge-based pheromone reinforcement to guide the construction of TSP solutions and estimate edge importance.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    pheromone_matrix = np.ones_like(distance_matrix, dtype=float) # Initialize pheromones

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(start_node)
        path = [start_node]

        while unvisited_nodes:
            # Calculate edge probabilities based on distance and pheromones
            probabilities = np.zeros(n)
            for neighbor in unvisited_nodes:
                probabilities[neighbor] = pheromone_matrix[current_node, neighbor] / (distance_matrix[current_node, neighbor] + 1e-9)  # Avoid division by zero
            probabilities /= np.sum(probabilities)  # Normalize to probabilities
            
            next_node = np.random.choice(list(range(n)), p=probabilities) #Probabilistic selection
            while next_node not in unvisited_nodes:
                next_node = np.random.choice(list(range(n)), p=probabilities)

            path.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

        path.append(start_node)

        # Update heuristics matrix and pheromone matrix based on edge usage.
        path_length = 0
        for i in range(n):
            node1 = path[i]
            node2 = path[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1
            path_length += distance_matrix[node1,node2]

        #Pheromone update: Reinforce edges in the path
        for i in range(n):
            node1 = path[i]
            node2 = path[i+1]
            pheromone_matrix[node1, node2] += 1.0/path_length #Deposit pheromone inversely proportional to path length
            pheromone_matrix[node2, node1] += 1.0/path_length


    heuristics_matrix /= num_samples
    return heuristics_matrix
