import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses a combination of edge frequency in good solutions and a modified nearest neighbor approach to build a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    num_iterations = 75
    num_ants = 15
    alpha = 0.7
    beta = 1.3
    rho = 0.1
    Q = 50
    pheromone_matrix = np.ones_like(distance_matrix, dtype=float)

    for iteration in range(num_iterations):
        ant_tours = []
        ant_tour_lengths = []

        for ant in range(num_ants):
            current_node = np.random.randint(n)
            tour = [current_node]
            unvisited_nodes = set(range(n))
            unvisited_nodes.remove(current_node)

            while unvisited_nodes:
                probabilities = np.zeros(n)
                for neighbor in range(n):
                    if neighbor in unvisited_nodes:
                        probabilities[neighbor] = (pheromone_matrix[current_node, neighbor]**alpha) * ((1 / (distance_matrix[current_node, neighbor] + 1e-9))**beta)

                if np.sum(probabilities) == 0:
                    nearest_neighbor = None
                    min_distance = np.inf
                    for neighbor in unvisited_nodes:
                        dist = distance_matrix[current_node, neighbor]
                        if dist < min_distance:
                            min_distance = dist
                            nearest_neighbor = neighbor
                    next_node = nearest_neighbor
                else:
                    probabilities /= np.sum(probabilities)
                    next_node = np.random.choice(range(n), p=probabilities)
                    

                tour.append(next_node)
                unvisited_nodes.remove(next_node)
                current_node = next_node

            tour_length = 0
            for i in range(n - 1):
                tour_length += distance_matrix[tour[i], tour[i + 1]]
            tour_length += distance_matrix[tour[-1], tour[0]]

            ant_tours.append(tour)
            ant_tour_lengths.append(tour_length)

        # Update pheromones
        for i in range(n):
            for j in range(n):
                pheromone_matrix[i, j] *= (1 - rho)

        for ant in range(num_ants):
            tour = ant_tours[ant]
            tour_length = ant_tour_lengths[ant]
            for i in range(n - 1):
                pheromone_matrix[tour[i], tour[i + 1]] += Q / tour_length
                pheromone_matrix[tour[i + 1], tour[i]] += Q / tour_length
            pheromone_matrix[tour[-1], tour[0]] += Q / tour_length
            pheromone_matrix[tour[0], tour[-1]] += Q / tour_length

    heuristics_matrix = pheromone_matrix / (distance_matrix + 1e-9)
    return heuristics_matrix
