import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm iteratively samples random tours, calculates the average frequency of each edge appearing in these tours, and returns a matrix representing these frequencies as heuristics.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a random tour
        nodes = list(range(n))
        np.random.shuffle(nodes)
        tour = nodes + [nodes[0]]  # Return to starting node

        # Update heuristics matrix
        for i in range(n):
            u = tour[i]
            v = tour[i+1]
            heuristics_matrix[u, v] += 1
            heuristics_matrix[v, u] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
