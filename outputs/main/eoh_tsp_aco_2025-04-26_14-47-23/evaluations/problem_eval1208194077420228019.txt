import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples random tours, improves them with 2-opt, and aggregates edge frequencies to estimate edge importance.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    def calculate_tour_length(tour):
        length = 0
        for i in range(n):
            length += distance_matrix[tour[i]][tour[(i + 1) % n]]
        return length

    def two_opt_swap(tour, i, k):
        new_tour = tour[:i] + tour[i:k+1][::-1] + tour[k+1:]
        return new_tour

    def two_opt(tour):
        best_tour = tour
        best_length = calculate_tour_length(tour)
        improved = True
        while improved:
            improved = False
            for i in range(n):
                for k in range(i + 2, n):
                    new_tour = two_opt_swap(best_tour, i, k)
                    new_length = calculate_tour_length(new_tour)
                    if new_length < best_length:
                        best_tour = new_tour
                        best_length = new_length
                        improved = True
                        
        return best_tour
    
    for _ in range(num_samples):
        tour = np.random.permutation(n)
        tour = two_opt(tour)
        for i in range(n):
            heuristics_matrix[tour[i]][tour[(i + 1) % n]] += 1
            heuristics_matrix[tour[(i + 1) % n]][tour[i]] += 1
    
    return heuristics_matrix
