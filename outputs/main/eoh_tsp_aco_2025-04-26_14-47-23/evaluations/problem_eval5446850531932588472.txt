import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines edge frequency from a greedy search with edge desirability based on a normalized inverse distance, biasing towards shorter, more centrally located edges.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 50

    # Calculate normalized inverse distances
    inverse_distances = 1 / (distance_matrix + 1e-9)
    normalized_distances = inverse_distances / np.sum(inverse_distances)

    #Greedy search for edge frequency
    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(start_node)
        path = [start_node]

        while unvisited_nodes:
            nearest_neighbor = None
            min_distance = float('inf')

            # Nearest Neighbor selection
            for neighbor in unvisited_nodes:
                distance = distance_matrix[current_node, neighbor]
                if distance < min_distance:
                    min_distance = distance
                    nearest_neighbor = neighbor

            next_node = nearest_neighbor
            path.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

        path.append(start_node)

        for i in range(n):
            node1 = path[i]
            node2 = path[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples

    # Combine edge frequency with normalized distances
    heuristics_matrix = 0.7 * heuristics_matrix + 0.3 * normalized_distances

    return heuristics_matrix
