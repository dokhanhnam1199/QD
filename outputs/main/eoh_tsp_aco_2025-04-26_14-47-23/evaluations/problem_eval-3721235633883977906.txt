import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm uses a combination of shortest edge selection and guided random sampling to generate TSP solutions, then aggregates the inverse of the average edge lengths across these solutions to estimate edge importance.}
    """
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(start_node)
        path = [start_node]

        while unvisited_nodes:
            shortest_edge_neighbor = None
            min_distance = float('inf')

            # Shortest Edge selection
            for neighbor in unvisited_nodes:
                distance = distance_matrix[current_node, neighbor]
                if distance < min_distance:
                    min_distance = distance
                    shortest_edge_neighbor = neighbor

            #Guided Randomness: Prefer shorter edges, but allow longer ones with decreasing probability.
            probabilities = np.zeros(n)
            for neighbor in unvisited_nodes:
                distance = distance_matrix[current_node, neighbor]
                probabilities[neighbor] = np.exp(-distance) #Higher probability for shorter edges
            
            probabilities = probabilities / np.sum(probabilities) #Normalize to create a probability distribution

            next_node = np.random.choice(range(n), p=probabilities)
            while next_node not in unvisited_nodes: #Ensuring only unvisited nodes are selected via random sampling.
                next_node = np.random.choice(range(n), p=probabilities)
            

            path.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

        path.append(start_node)  # Return to starting node

        # Update heuristics matrix based on edge usage
        for i in range(n):
            node1 = path[i]
            node2 = path[i+1]
            heuristics_matrix[node1, node2] += 1/distance_matrix[node1, node2] #Use inverse distance as an indicator
            heuristics_matrix[node2, node1] += 1/distance_matrix[node2, node1]

    heuristics_matrix /= num_samples
    return heuristics_matrix
