import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples multiple TSP solutions using a biased random walk, where the bias is towards shorter edges, and then scores edges based on their frequency in these sampled solutions, normalized by the expected edge length.}
    """
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(start_node)
        path = [start_node]

        while unvisited_nodes:
            probabilities = np.array([1 / (distance_matrix[current_node, neighbor] + 1e-9) for neighbor in unvisited_nodes])
            probabilities /= np.sum(probabilities)
            next_node = np.random.choice(list(unvisited_nodes), p=probabilities)

            path.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

        path.append(start_node)

        for i in range(n):
            node1 = path[i]
            node2 = path[i+1]
            distance = distance_matrix[node1, node2]
            heuristics_matrix[node1, node2] += 1 / distance
            heuristics_matrix[node2, node1] += 1 / distance

    heuristics_matrix /= num_samples
    return heuristics_matrix
