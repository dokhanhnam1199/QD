import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples tours, selects a subset of the best tours, and updates a heuristic matrix based on the rank of each edge within the selected tours.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000
    tours = []

    for _ in range(num_samples):
        tour = np.random.permutation(n)
        tour_distance = sum(distance_matrix[tour[i], tour[(i + 1) % n]] for i in range(n))
        tours.append((tour, tour_distance))

    # Select top tours
    top_tours = sorted(tours, key=lambda x: x[1])[:num_samples // 10]  # Select top 10%

    for tour, tour_distance in top_tours:
        for i in range(n):
            heuristics_matrix[tour[i], tour[(i + 1) % n]] += 1
            heuristics_matrix[tour[(i + 1) % n], tour[i]] += 1

    return heuristics_matrix
