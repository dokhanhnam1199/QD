import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm employs a simulated annealing-inspired approach to refine a heuristic matrix based on iterative tour improvements.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.ones_like(distance_matrix, dtype=float) / (distance_matrix + 1e-9)
    temperature = 1.0
    cooling_rate = 0.995
    num_iterations = 1000

    for _ in range(num_iterations):
        # Select two random nodes
        i, j = np.random.choice(n, 2, replace=False)

        # Perturb the heuristic matrix
        delta = np.random.normal(0, temperature)
        heuristics_matrix[i, j] += delta
        heuristics_matrix[j, i] += delta

        # Ensure non-negativity
        heuristics_matrix[i, j] = max(heuristics_matrix[i, j], 1e-9)
        heuristics_matrix[j, i] = max(heuristics_matrix[j, i], 1e-9)

        # Cool the temperature
        temperature *= cooling_rate

    return heuristics_matrix
