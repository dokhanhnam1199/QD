import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm uses ant colony optimization principles to probabilistically build tours and updates pheromone values on edges proportional to tour quality, returning a pheromone matrix as a heuristic.}"""
    n = distance_matrix.shape[0]
    pheromone = np.ones_like(distance_matrix)
    alpha = 1
    beta = 2
    evaporation_rate = 0.1
    Q = 100

    for iteration in range(100):
        tours = []
        tour_lengths = []
        for ant in range(n):
            unvisited = list(range(n))
            unvisited.remove(ant)
            current_node = ant
            tour = [ant]

            while unvisited:
                probabilities = []
                for next_node in unvisited:
                    pheromone_level = pheromone[current_node, next_node] ** alpha
                    visibility = (1 / (distance_matrix[current_node, next_node] + 1e-9)) ** beta
                    probabilities.append(pheromone_level * visibility)

                probabilities = np.array(probabilities)
                probabilities /= np.sum(probabilities)
                
                next_node = np.random.choice(unvisited, p=probabilities)
                tour.append(next_node)
                unvisited.remove(next_node)
                current_node = next_node
            
            tour.append(ant)
            tours.append(tour)
            
            tour_length = 0
            for i in range(len(tour) - 1):
                tour_length += distance_matrix[tour[i], tour[i+1]]
            tour_lengths.append(tour_length)

        # Update pheromones
        pheromone *= (1 - evaporation_rate)

        for ant in range(n):
            tour = tours[ant]
            tour_length = tour_lengths[ant]
            for i in range(len(tour) - 1):
                u, v = tour[i], tour[i+1]
                pheromone[u, v] += Q / tour_length
                pheromone[v, u] += Q / tour_length

    return heuristics_matrix
