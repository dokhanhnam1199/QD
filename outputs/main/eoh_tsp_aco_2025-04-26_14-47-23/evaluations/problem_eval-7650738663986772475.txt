import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples multiple random tours, scores each edge based on its frequency in short tours, and returns a matrix indicating edge desirability.}
    """
    n = distance_matrix.shape[0]
    num_samples = 1000
    top_k = 100 

    edge_counts = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour_distance = 0
        for i in range(n - 1):
            tour_distance += distance_matrix[tour[i], tour[i+1]]
        tour_distance += distance_matrix[tour[-1], tour[0]]

        # Store the tour and its distance
        if _ == 0:
            tours = [(tour, tour_distance)]
        else:
            tours.append((tour, tour_distance))
        
    # Select the top k tours
    tours = sorted(tours, key=lambda x: x[1])[:top_k]
        
    # Update edge counts based on the top k tours
    for tour, _ in tours:
        for i in range(n - 1):
            edge_counts[tour[i], tour[i+1]] += 1
            edge_counts[tour[i+1], tour[i]] += 1 # Symmetric
        edge_counts[tour[-1], tour[0]] += 1
        edge_counts[tour[0], tour[-1]] += 1 # Symmetric
            
    # Normalize edge counts to get heuristics matrix
    heuristics_matrix = edge_counts / top_k
    
    return heuristics_matrix
