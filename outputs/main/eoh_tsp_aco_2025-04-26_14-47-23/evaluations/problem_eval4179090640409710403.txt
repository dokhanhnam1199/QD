import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines inverse distance with a pheromone-inspired update based on random tour construction and reinforcement of edges used in shorter tours.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.ones_like(distance_matrix, dtype=float)  # Initialize with ones to avoid division by zero

    num_iterations = 100
    alpha = 1.0  # Pheromone influence
    beta = 2.0   # Distance influence
    rho = 0.1   # Evaporation rate

    for _ in range(num_iterations):
        # Construct a random tour
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        tour = [current_node]

        while unvisited_nodes:
            probabilities = np.zeros(n)
            for node in unvisited_nodes:
                probabilities[node] = (heuristics_matrix[current_node, node]**alpha) / ((distance_matrix[current_node, node] + 1e-9)**beta)
            
            probabilities /= np.sum(probabilities)
            next_node = np.random.choice(list(range(n)), p=probabilities)
            
            if next_node not in unvisited_nodes:
                available_nodes = list(unvisited_nodes)
                if not available_nodes:
                   next_node = start_node
                else: 
                   next_node = available_nodes[0]

            if next_node in unvisited_nodes:
                tour.append(next_node)
                unvisited_nodes.remove(next_node)
                current_node = next_node
        
        tour.append(start_node)

        # Calculate tour length
        tour_length = 0.0
        for i in range(len(tour) - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]

        # Update pheromones (heuristics_matrix)
        for i in range(len(tour) - 1):
            u, v = tour[i], tour[i+1]
            heuristics_matrix[u, v] = (1 - rho) * heuristics_matrix[u, v] + (rho / tour_length)
            heuristics_matrix[v, u] = (1 - rho) * heuristics_matrix[v, u] + (rho / tour_length)

    return heuristics_matrix
