import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples near-optimal TSP solutions using a greedy insertion heuristic with stochastic restarts, where nodes are added to a partially constructed tour based on minimizing the insertion cost, and uses edge frequencies across samples as an indicator of edge desirability.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        path = [start_node]
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(start_node)

        while unvisited_nodes:
            best_node = None
            best_insertion_cost = np.inf
            best_insertion_index = None

            for node_to_insert in unvisited_nodes:
                for i in range(len(path)):
                    insertion_cost = (
                        distance_matrix[path[i - 1], node_to_insert]
                        + distance_matrix[node_to_insert, path[i]]
                        - distance_matrix[path[i - 1], path[i]]
                    )
                    if insertion_cost < best_insertion_cost:
                        best_insertion_cost = insertion_cost
                        best_node = node_to_insert
                        best_insertion_index = i
            
            path.insert(best_insertion_index, best_node)
            unvisited_nodes.remove(best_node)
        
        path.append(start_node)
        
        for i in range(n):
            node1 = path[i]
            node2 = path[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
