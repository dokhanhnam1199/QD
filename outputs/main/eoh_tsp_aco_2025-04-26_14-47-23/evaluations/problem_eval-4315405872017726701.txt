import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines a greedy nearest neighbor approach for initial tour construction with a pheromone update strategy based on tour improvement via local search (2-opt).}"""
    n = distance_matrix.shape[0]
    pheromone_matrix = np.ones_like(distance_matrix, dtype=float)
    alpha = 0.8  # Pheromone influence
    beta = 1.2  # Distance influence
    rho = 0.05  # Evaporation rate
    Q = 10  # Pheromone deposit constant
    num_ants = 15
    num_iterations = 75

    def nearest_neighbor_tour(start_node):
        tour = [start_node]
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(start_node)
        current_node = start_node

        while unvisited_nodes:
            nearest_neighbor = min(unvisited_nodes, key=lambda x: distance_matrix[current_node, x])
            tour.append(nearest_neighbor)
            unvisited_nodes.remove(nearest_neighbor)
            current_node = nearest_neighbor
        return tour

    def tour_length(tour):
        length = 0
        for i in range(n - 1):
            length += distance_matrix[tour[i], tour[i + 1]]
        length += distance_matrix[tour[-1], tour[0]]
        return length

    def two_opt_swap(tour, i, k):
        new_tour = tour[:i] + tour[i:k+1][::-1] + tour[k+1:]
        return new_tour

    def two_opt(tour):
        best_tour = tour
        best_length = tour_length(tour)
        improved = True

        while improved:
            improved = False
            for i in range(1, n - 1):
                for k in range(i + 1, n):
                    new_tour = two_opt_swap(best_tour, i, k)
                    new_length = tour_length(new_tour)
                    if new_length < best_length:
                        best_tour = new_tour
                        best_length = new_length
                        improved = True
        return best_tour, best_length


    for iteration in range(num_iterations):
        ant_tours = []
        ant_tour_lengths = []

        for ant in range(num_ants):
            start_node = np.random.randint(n)
            initial_tour = nearest_neighbor_tour(start_node)
            improved_tour, improved_length = two_opt(initial_tour)

            ant_tours.append(improved_tour)
            ant_tour_lengths.append(improved_length)

        # Update pheromones
        for i in range(n):
            for j in range(n):
                pheromone_matrix[i, j] *= (1 - rho)

        for ant in range(num_ants):
            tour = ant_tours[ant]
            tour_length = ant_tour_lengths[ant]
            for i in range(n - 1):
                pheromone_matrix[tour[i], tour[i + 1]] += Q / tour_length
                pheromone_matrix[tour[i + 1], tour[i]] += Q / tour_length
            pheromone_matrix[tour[-1], tour[0]] += Q / tour_length
            pheromone_matrix[tour[0], tour[-1]] += Q / tour_length

    heuristics_matrix = pheromone_matrix / (distance_matrix + 1e-9)
    return heuristics_matrix
