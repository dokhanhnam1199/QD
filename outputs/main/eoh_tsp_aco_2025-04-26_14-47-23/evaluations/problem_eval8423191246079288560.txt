import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm balances exploration and exploitation by adjusting pheromone and distance influence, uses a simple pheromone update based on the best ant, and employs a more focused 2-opt local search.}"""
    n = distance_matrix.shape[0]
    pheromone_matrix = np.ones_like(distance_matrix, dtype=float)
    alpha = 0.5  # Pheromone influence (reduced)
    beta = 5  # Distance influence (increased)
    rho = 0.2  # Evaporation rate
    Q = 50  # Pheromone deposit constant (reduced)
    num_ants = 10
    num_iterations = 30

    best_tour = None
    best_tour_length = float('inf')

    for iteration in range(num_iterations):
        ant_tours = []
        ant_tour_lengths = []

        for ant in range(num_ants):
            # Construct tour
            current_node = np.random.randint(n)
            tour = [current_node]
            unvisited_nodes = set(range(n))
            unvisited_nodes.remove(current_node)

            while unvisited_nodes:
                probabilities = np.zeros(n)
                for neighbor in range(n):
                    if neighbor in unvisited_nodes:
                        probabilities[neighbor] = (pheromone_matrix[current_node, neighbor]**alpha) * ((1 / (distance_matrix[current_node, neighbor] + 1e-9))**beta)
                
                if np.sum(probabilities) == 0:
                    next_node = np.random.choice(list(unvisited_nodes))
                else:
                    probabilities /= np.sum(probabilities)
                    next_node = np.random.choice(range(n), p=probabilities)

                tour.append(next_node)
                unvisited_nodes.remove(next_node)
                current_node = next_node

            tour_length = 0
            for i in range(n - 1):
                tour_length += distance_matrix[tour[i], tour[i + 1]]
            tour_length += distance_matrix[tour[-1], tour[0]]

            ant_tours.append(tour)
            ant_tour_lengths.append(tour_length)

            if tour_length < best_tour_length:
                best_tour_length = tour_length
                best_tour = tour
        
        # Pheromone update (only best ant)
        if best_tour:
            for i in range(n - 1):
                pheromone_matrix[best_tour[i], best_tour[i + 1]] += Q / best_tour_length
                pheromone_matrix[best_tour[i + 1], best_tour[i]] += Q / best_tour_length
            pheromone_matrix[best_tour[-1], best_tour[0]] += Q / best_tour_length
            pheromone_matrix[best_tour[0], best_tour[-1]] += Q / best_tour_length

        # Evaporation
        pheromone_matrix *= (1 - rho)

        # Stochastic local search (2-opt) - focused on best tour
        if best_tour:
            for _ in range(n // 2):  # Reduce local search iterations
                i = np.random.randint(n)
                j = np.random.randint(i + 2, n) if i < n - 2 else n -1 # Ensure j > i
                new_tour = best_tour[:i] + best_tour[i:j+1][::-1] + best_tour[j+1:]
                new_tour_length = 0
                for k in range(n - 1):
                    new_tour_length += distance_matrix[new_tour[k], new_tour[k + 1]]
                new_tour_length += distance_matrix[new_tour[-1], new_tour[0]]
                
                if new_tour_length < best_tour_length:
                    best_tour_length = new_tour_length
                    best_tour = new_tour

    heuristics_matrix = pheromone_matrix / (distance_matrix + 1e-9)
    return heuristics_matrix
