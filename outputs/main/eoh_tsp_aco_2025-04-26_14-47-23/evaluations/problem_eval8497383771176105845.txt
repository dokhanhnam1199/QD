import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples solutions by iteratively adding edges with probabilities biased towards shorter distances and edges that connect nodes with fewer unvisited neighbors, then returns a matrix representing the frequency with which each edge appears in the sampled solutions.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    heuristics_matrix = np.zeros_like(distance_matrix)

    for _ in range(num_samples):
        current_node = np.random.randint(n)
        unvisited = set(range(n))
        unvisited.remove(current_node)
        path = [current_node]
        
        while unvisited:
            probabilities = np.zeros(n)
            for neighbor in unvisited:
                # Bias towards shorter distances
                probabilities[neighbor] += 1 / distance_matrix[current_node, neighbor]
                
                # Bias towards connecting nodes with fewer unvisited neighbors
                neighbor_unvisited_count = 0
                for potential_next in range(n):
                    if potential_next != current_node and potential_next in unvisited and potential_next != neighbor and distance_matrix[neighbor, potential_next] < np.inf :
                        neighbor_unvisited_count+=1
                probabilities[neighbor] += 0.1 * (n - len(unvisited) - neighbor_unvisited_count) if neighbor_unvisited_count > 0 else 0.1*n
                
            probabilities /= np.sum(probabilities)
            
            next_node = np.random.choice(n, p=probabilities)
            
            if next_node in unvisited:
                heuristics_matrix[current_node, next_node] += 1
                heuristics_matrix[next_node, current_node] += 1
                
                path.append(next_node)
                unvisited.remove(next_node)
                current_node = next_node

        # Complete the cycle
        heuristics_matrix[current_node, path[0]] += 1
        heuristics_matrix[path[0], current_node] += 1
        
    return heuristics_matrix
