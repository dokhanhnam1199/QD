import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm uses a combination of random sampling and Metropolis acceptance criterion to generate multiple TSP solutions, then scores edges based on their frequency in accepted solutions.}
    """
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    def calculate_path_length(path):
        length = 0
        for i in range(len(path) - 1):
            length += distance_matrix[path[i], path[i+1]]
        return length

    for _ in range(num_samples):
        # Generate a random initial path
        path = np.random.permutation(n).tolist()
        path.append(path[0]) # Return to starting node
        current_path_length = calculate_path_length(path)
        
        # Perform local search with Metropolis acceptance
        for _ in range(100): #Number of local search steps per sample
            # Generate a neighbor by swapping two random nodes in the path (excluding start/end)
            idx1, idx2 = np.random.choice(range(1, n), 2, replace=False)
            new_path = path[:]
            new_path[idx1], new_path[idx2] = new_path[idx2], new_path[idx1]
            
            new_path_length = calculate_path_length(new_path)
            
            # Metropolis acceptance criterion
            if new_path_length < current_path_length:
                path = new_path
                current_path_length = new_path_length
            else:
                #Accept with probability exp(-(new_length - current_length) / temperature)
                temperature = current_path_length/n #Simple temperature schedule
                acceptance_probability = np.exp(-(new_path_length - current_path_length) / temperature)
                if np.random.rand() < acceptance_probability:
                    path = new_path
                    current_path_length = new_path_length

        # Update heuristics matrix based on edge usage
        for i in range(n):
            node1 = path[i]
            node2 = path[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
