import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples a set of near-optimal TSP solutions using a nearest-neighbor heuristic with stochastic restarts and uses edge frequencies across samples as an indicator of edge desirability.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(start_node)
        path = [start_node]
        
        while unvisited_nodes:
            nearest_neighbor = None
            min_distance = np.inf
            for neighbor in unvisited_nodes:
                dist = distance_matrix[current_node, neighbor]
                if dist < min_distance:
                    min_distance = dist
                    nearest_neighbor = neighbor
            
            path.append(nearest_neighbor)
            unvisited_nodes.remove(nearest_neighbor)
            current_node = nearest_neighbor
        
        path.append(start_node)

        for i in range(n):
            node1 = path[i]
            node2 = path[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    heuristics_matrix /= num_samples
    return heuristics_matrix
