import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm iteratively samples random tours, and updates a heuristic matrix based on the frequency each edge appears in the best 10% of tours relative to the squared distance.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000
    tour_distances = []
    tours = []

    for _ in range(num_samples):
        # Generate a random tour
        tour = np.random.permutation(n)
        tour_distance = 0
        for i in range(n - 1):
            tour_distance += distance_matrix[tour[i], tour[i + 1]]
        tour_distance += distance_matrix[tour[-1], tour[0]]

        tour_distances.append(tour_distance)
        tours.append(tour)

    # Select best 10% of tours
    num_best = int(num_samples * 0.1)
    best_indices = np.argsort(tour_distances)[:num_best]

    # Update heuristics matrix based on best tours
    for index in best_indices:
        tour = tours[index]
        tour_distance = tour_distances[index]

        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i + 1]] += 1 / (tour_distance * distance_matrix[tour[i], tour[i + 1]]**2)
            heuristics_matrix[tour[i + 1], tour[i]] += 1 / (tour_distance * distance_matrix[tour[i + 1], tour[i]]**2)
        heuristics_matrix[tour[-1], tour[0]] += 1 / (tour_distance * distance_matrix[tour[-1], tour[0]]**2)
        heuristics_matrix[tour[0], tour[-1]] += 1 / (tour_distance * distance_matrix[tour[0], tour[-1]]**2)

    return heuristics_matrix
