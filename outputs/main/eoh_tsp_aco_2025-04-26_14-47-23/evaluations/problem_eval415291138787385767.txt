import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples near-optimal TSP solutions using a stochastic nearest-neighbor approach with a probabilistic acceptance criterion based on distance, and accumulates edge frequencies weighted by inverse distance as an indicator of edge desirability.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(start_node)
        path = [start_node]
        
        while unvisited_nodes:
            neighbors = list(unvisited_nodes)
            distances = [distance_matrix[current_node, neighbor] for neighbor in neighbors]
            probabilities = np.exp(-np.array(distances)) / np.sum(np.exp(-np.array(distances)))
            
            next_node = np.random.choice(neighbors, p=probabilities)
            
            path.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node
        
        path.append(start_node)

        for i in range(n):
            node1 = path[i]
            node2 = path[i+1]
            distance = distance_matrix[node1, node2]
            if distance > 0:
                weight = 1.0 / distance
            else:
                weight = 1.0  # Avoid division by zero

            heuristics_matrix[node1, node2] += weight
            heuristics_matrix[node2, node1] += weight

    heuristics_matrix /= num_samples
    return heuristics_matrix
