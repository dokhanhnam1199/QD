import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm constructs a heuristics matrix by combining inverse distance with shortest-path-based proximity measures derived from random sampling of near-optimal tours.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    # Inverse distance heuristic
    heuristics_matrix = 1 / (distance_matrix + 1e-9)

    # Sample tours and update heuristics
    num_samples = 100
    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        tour = [current_node]
        
        while unvisited_nodes:
            distances = distance_matrix[current_node, list(unvisited_nodes)]
            probabilities = np.exp(-distances)  # Use inverse distance as probability
            probabilities /= np.sum(probabilities)
            
            next_node = np.random.choice(list(unvisited_nodes), p=probabilities)
            tour.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node
        
        tour.append(start_node) # Return to start
        
        tour_distance = 0.0
        for i in range(len(tour) - 1):
            tour_distance += distance_matrix[tour[i], tour[i+1]]

        # Update heuristics based on tour quality (use inverse distance for now)
        for i in range(len(tour) - 1):
            u, v = tour[i], tour[i+1]
            heuristics_matrix[u, v] += 1.0 / tour_distance
            heuristics_matrix[v, u] += 1.0 / tour_distance
    
    return heuristics_matrix
