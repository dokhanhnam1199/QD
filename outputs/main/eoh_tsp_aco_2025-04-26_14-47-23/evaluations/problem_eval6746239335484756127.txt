import numpy as np

def heuristics_v2(distance_matrix):
    """
    {This algorithm samples many random tours and calculates a matrix indicating how often each edge is included in the shortest tours found.}
    """
    n = distance_matrix.shape[0]
    num_samples = 1000
    shortest_tours = []

    for _ in range(num_samples):
        tour = np.random.permutation(n)
        tour_distance = 0
        for i in range(n - 1):
            tour_distance += distance_matrix[tour[i], tour[i+1]]
        tour_distance += distance_matrix[tour[-1], tour[0]]  # Return to start

        if not shortest_tours or tour_distance < shortest_tours[0][0]:
            shortest_tours = [(tour_distance, tour)]
        elif tour_distance == shortest_tours[0][0]:
            shortest_tours.append((tour_distance, tour))
        elif tour_distance < sorted([x[0] for x in shortest_tours])[-1] and len(shortest_tours) < 100: # keep top 100
            shortest_tours.append((tour_distance, tour))
            shortest_tours.sort()
            if len(shortest_tours) > 100:
                shortest_tours.pop()

    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    for _, tour in shortest_tours:
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += 1
            heuristics_matrix[tour[i+1], tour[i]] += 1
        heuristics_matrix[tour[-1], tour[0]] += 1
        heuristics_matrix[tour[0], tour[-1]] += 1

    # Normalize the matrix
    if len(shortest_tours) > 0:
        heuristics_matrix = heuristics_matrix / len(shortest_tours)

    return heuristics_matrix
