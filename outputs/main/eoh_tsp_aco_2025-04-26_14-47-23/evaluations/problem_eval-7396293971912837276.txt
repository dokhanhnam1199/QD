import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple near-optimal TSP solutions using a nearest-neighbor heuristic with stochastic restarts and combines the edge frequencies to generate a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    num_samples = 100
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    for _ in range(num_samples):
        start_node = np.random.randint(n)
        current_node = start_node
        unvisited_nodes = set(range(n))
        unvisited_nodes.remove(current_node)
        tour = [current_node]

        while unvisited_nodes:
            nearest_neighbors = []
            for neighbor in unvisited_nodes:
                nearest_neighbors.append((neighbor, distance_matrix[current_node, neighbor]))
            
            nearest_neighbors.sort(key=lambda x: x[1])
            
            # Stochasticity: Select from top k nearest neighbors
            k = min(5, len(nearest_neighbors))
            selected_neighbor_index = np.random.randint(k)
            next_node = nearest_neighbors[selected_neighbor_index][0]

            tour.append(next_node)
            unvisited_nodes.remove(next_node)
            current_node = next_node

        tour.append(start_node)  # Return to starting node

        # Update heuristics matrix based on edges in the tour
        for i in range(n):
            node1 = tour[i]
            node2 = tour[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    # Normalize the heuristics matrix
    heuristics_matrix = heuristics_matrix / num_samples
    return heuristics_matrix
