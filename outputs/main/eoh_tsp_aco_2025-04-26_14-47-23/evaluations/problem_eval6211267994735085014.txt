import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm combines edge frequency sampling with a shortest-edge-first construction to iteratively build a heuristic matrix representing edge desirability.}"""
    n = distance_matrix.shape[0]
    num_samples = 50
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    edge_counts = np.zeros_like(distance_matrix, dtype=int)

    for _ in range(num_samples):
        edges = []
        for i in range(n):
            for j in range(i + 1, n):
                edges.append((i, j, distance_matrix[i, j]))
        edges.sort(key=lambda x: x[2])

        tour = []
        unvisited = set(range(n))
        
        if not unvisited:
            continue

        start_node = np.random.choice(list(unvisited))

        tour.append(start_node)
        unvisited.remove(start_node)

        while unvisited:
            possible_edges = []
            for node in tour:
                for u in unvisited:
                  possible_edges.append((node, u, distance_matrix[node, u]))
            
            if not possible_edges:
                break

            possible_edges.sort(key=lambda x: x[2])

            found = False
            for edge in possible_edges:
                if edge[1] in unvisited:
                  next_node = edge[1]
                  tour.append(next_node)
                  unvisited.remove(next_node)
                  found = True
                  break
            if not found:
                break
                
        if len(tour) != n:
            continue

        tour.append(tour[0])

        for i in range(n):
            node1 = tour[i]
            node2 = tour[i + 1]
            edge_counts[node1, node2] += 1
            edge_counts[node2, node1] += 1

    max_count = np.max(edge_counts) if np.any(edge_counts) else 1
    heuristics_matrix = edge_counts / max_count
    return heuristics_matrix
