import numpy as np

def heuristics_v2(distance_matrix):
    """{This algorithm samples multiple random tours, keeps the best K tours, and averages the edge frequencies in those K tours to generate a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    num_samples = 1000
    top_k = 10
    
    all_tours = []
    all_tour_lengths = []
    
    for _ in range(num_samples):
        tour = np.random.permutation(n)
        tour_length = 0
        for i in range(n - 1):
            tour_length += distance_matrix[tour[i], tour[i+1]]
        tour_length += distance_matrix[tour[-1], tour[0]]
        
        all_tours.append(tour)
        all_tour_lengths.append(tour_length)
    
    # Find the indices of the top_k shortest tours
    top_k_indices = np.argsort(all_tour_lengths)[:top_k]
    
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    
    for index in top_k_indices:
        tour = all_tours[index]
        for i in range(n - 1):
            heuristics_matrix[tour[i], tour[i+1]] += 1
            heuristics_matrix[tour[i+1], tour[i]] += 1
        heuristics_matrix[tour[-1], tour[0]] += 1
        heuristics_matrix[tour[0], tour[-1]] += 1
    
    heuristics_matrix /= top_k
    
    return heuristics_matrix
