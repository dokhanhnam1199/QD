{
     "algorithm": "This algorithm samples near-optimal TSP solutions using a stochastic nearest neighbor approach with a probability-based selection of neighbors weighted by inverse distance and applies a local search to improve each sampled solution, accumulating edge frequencies weighted by inverse distance to estimate edge desirability.",
     "code": "import numpy as np\n\ndef heuristics_v2(distance_matrix):\n    \"\"\"{This algorithm samples near-optimal TSP solutions using a stochastic nearest neighbor approach with a probability-based selection of neighbors weighted by inverse distance and applies a local search to improve each sampled solution, accumulating edge frequencies weighted by inverse distance to estimate edge desirability.}\"\"\"\n    n = distance_matrix.shape[0]\n    num_samples = 100\n    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    def improve_path(path):\n        improved = True\n        while improved:\n            improved = False\n            for i in range(1, len(path) - 2):\n                for j in range(i + 2, len(path)):\n                    if j == len(path) -1 and i == 1:\n                        continue\n                    if j == len(path) - 1:\n                      continue\n\n                    if distance_matrix[path[i-1], path[i]] + distance_matrix[path[j-1], path[j]] > \\\n                       distance_matrix[path[i-1], path[j-1]] + distance_matrix[path[i], path[j]]:\n                        path[i:j] = path[i:j][::-1]\n                        improved = True\n        return path\n\n    for _ in range(num_samples):\n        start_node = np.random.randint(n)\n        current_node = start_node\n        unvisited_nodes = set(range(n))\n        unvisited_nodes.remove(start_node)\n        path = [start_node]\n\n        while unvisited_nodes:\n            probabilities = []\n            neighbors = []\n            total_weight = 0.0\n            for neighbor in unvisited_nodes:\n                dist = distance_matrix[current_node, neighbor]\n                weight = 1.0 / (dist) if dist > 0 else 1.0\n                probabilities.append(weight)\n                neighbors.append(neighbor)\n                total_weight += weight\n\n            probabilities = [p / total_weight for p in probabilities]\n            \n            nearest_neighbor = np.random.choice(neighbors, p=probabilities)\n            \n            path.append(nearest_neighbor)\n            unvisited_nodes.remove(nearest_neighbor)\n            current_node = nearest_neighbor\n        \n        path.append(start_node)\n        path = improve_path(path)\n\n\n        for i in range(n):\n            node1 = path[i]\n            node2 = path[i+1]\n            distance = distance_matrix[node1, node2]\n            if distance > 0:\n                weight = 1.0 / (distance)\n            else:\n                weight = 1.0  # Avoid division by zero\n\n            heuristics_matrix[node1, node2] += weight\n            heuristics_matrix[node2, node1] += weight\n\n    heuristics_matrix /= num_samples\n    return heuristics_matrix",
     "objective": 5.73294,
     "other_inf": null
}