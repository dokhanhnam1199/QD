[
     {
          "algorithm": "This algorithm samples near-optimal TSP solutions using a stochastic nearest neighbor approach with a probability-based selection of neighbors weighted by inverse distance and applies a local search to improve each sampled solution, accumulating edge frequencies weighted by inverse distance to estimate edge desirability.",
          "code": "import numpy as np\n\ndef heuristics_v2(distance_matrix):\n    \"\"\"{This algorithm samples near-optimal TSP solutions using a stochastic nearest neighbor approach with a probability-based selection of neighbors weighted by inverse distance and applies a local search to improve each sampled solution, accumulating edge frequencies weighted by inverse distance to estimate edge desirability.}\"\"\"\n    n = distance_matrix.shape[0]\n    num_samples = 100\n    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    def improve_path(path):\n        improved = True\n        while improved:\n            improved = False\n            for i in range(1, len(path) - 2):\n                for j in range(i + 2, len(path)):\n                    if j == len(path) -1 and i == 1:\n                        continue\n                    if j == len(path) - 1:\n                      continue\n\n                    if distance_matrix[path[i-1], path[i]] + distance_matrix[path[j-1], path[j]] > \\\n                       distance_matrix[path[i-1], path[j-1]] + distance_matrix[path[i], path[j]]:\n                        path[i:j] = path[i:j][::-1]\n                        improved = True\n        return path\n\n    for _ in range(num_samples):\n        start_node = np.random.randint(n)\n        current_node = start_node\n        unvisited_nodes = set(range(n))\n        unvisited_nodes.remove(start_node)\n        path = [start_node]\n\n        while unvisited_nodes:\n            probabilities = []\n            neighbors = []\n            total_weight = 0.0\n            for neighbor in unvisited_nodes:\n                dist = distance_matrix[current_node, neighbor]\n                weight = 1.0 / (dist) if dist > 0 else 1.0\n                probabilities.append(weight)\n                neighbors.append(neighbor)\n                total_weight += weight\n\n            probabilities = [p / total_weight for p in probabilities]\n            \n            nearest_neighbor = np.random.choice(neighbors, p=probabilities)\n            \n            path.append(nearest_neighbor)\n            unvisited_nodes.remove(nearest_neighbor)\n            current_node = nearest_neighbor\n        \n        path.append(start_node)\n        path = improve_path(path)\n\n\n        for i in range(n):\n            node1 = path[i]\n            node2 = path[i+1]\n            distance = distance_matrix[node1, node2]\n            if distance > 0:\n                weight = 1.0 / (distance)\n            else:\n                weight = 1.0  # Avoid division by zero\n\n            heuristics_matrix[node1, node2] += weight\n            heuristics_matrix[node2, node1] += weight\n\n    heuristics_matrix /= num_samples\n    return heuristics_matrix",
          "objective": 5.73294,
          "other_inf": null
     },
     {
          "algorithm": "This algorithm samples near-optimal TSP solutions using a stochastic nearest neighbor approach with a probability-based selection of neighbors weighted by exponential of negative distance and applies a local search to improve each sampled solution, accumulating edge frequencies weighted by exponential of negative distance to estimate edge desirability.",
          "code": "import numpy as np\n\ndef heuristics_v2(distance_matrix):\n    \"\"\"{This algorithm samples near-optimal TSP solutions using a stochastic nearest neighbor approach with a probability-based selection of neighbors weighted by exponential of negative distance and applies a local search to improve each sampled solution, accumulating edge frequencies weighted by exponential of negative distance to estimate edge desirability.}\"\"\"\n    n = distance_matrix.shape[0]\n    num_samples = 100\n    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    def improve_path(path):\n        improved = True\n        while improved:\n            improved = False\n            for i in range(1, len(path) - 2):\n                for j in range(i + 2, len(path)):\n                    if j == len(path) -1 and i == 1:\n                        continue\n                    if j == len(path) - 1:\n                      continue\n\n                    if distance_matrix[path[i-1], path[i]] + distance_matrix[path[j-1], path[j]] > \\\n                       distance_matrix[path[i-1], path[j-1]] + distance_matrix[path[i], path[j]]:\n                        path[i:j] = path[i:j][::-1]\n                        improved = True\n        return path\n\n    for _ in range(num_samples):\n        start_node = np.random.randint(n)\n        current_node = start_node\n        unvisited_nodes = set(range(n))\n        unvisited_nodes.remove(start_node)\n        path = [start_node]\n\n        while unvisited_nodes:\n            probabilities = []\n            neighbors = []\n            total_weight = 0.0\n            for neighbor in unvisited_nodes:\n                dist = distance_matrix[current_node, neighbor]\n                weight = np.exp(-dist)\n                probabilities.append(weight)\n                neighbors.append(neighbor)\n                total_weight += weight\n\n            probabilities = [p / total_weight for p in probabilities]\n            \n            nearest_neighbor = np.random.choice(neighbors, p=probabilities)\n            \n            path.append(nearest_neighbor)\n            unvisited_nodes.remove(nearest_neighbor)\n            current_node = nearest_neighbor\n        \n        path.append(start_node)\n        path = improve_path(path)\n\n\n        for i in range(n):\n            node1 = path[i]\n            node2 = path[i+1]\n            distance = distance_matrix[node1, node2]\n            weight = np.exp(-distance)\n\n            heuristics_matrix[node1, node2] += weight\n            heuristics_matrix[node2, node1] += weight\n\n    heuristics_matrix /= num_samples\n    return heuristics_matrix",
          "objective": 5.77124,
          "other_inf": null
     },
     {
          "algorithm": "This algorithm samples near-optimal TSP solutions using a stochastic nearest neighbor approach with a probability-based selection of neighbors weighted by the exponential of negative distance and applies a local search to improve each sampled solution, accumulating edge frequencies weighted by the exponential of negative distance to estimate edge desirability.",
          "code": "import numpy as np\n\ndef heuristics_v2(distance_matrix):\n    \"\"\"{This algorithm samples near-optimal TSP solutions using a stochastic nearest neighbor approach with a probability-based selection of neighbors weighted by the exponential of negative distance and applies a local search to improve each sampled solution, accumulating edge frequencies weighted by the exponential of negative distance to estimate edge desirability.}\"\"\"\n    n = distance_matrix.shape[0]\n    num_samples = 100\n    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    def improve_path(path):\n        improved = True\n        while improved:\n            improved = False\n            for i in range(1, len(path) - 2):\n                for j in range(i + 2, len(path)):\n                    if j == len(path) -1 and i == 1:\n                        continue\n                    if j == len(path) - 1:\n                      continue\n\n                    if distance_matrix[path[i-1], path[i]] + distance_matrix[path[j-1], path[j]] > \\\n                       distance_matrix[path[i-1], path[j-1]] + distance_matrix[path[i], path[j]]:\n                        path[i:j] = path[i:j][::-1]\n                        improved = True\n        return path\n\n    for _ in range(num_samples):\n        start_node = np.random.randint(n)\n        current_node = start_node\n        unvisited_nodes = set(range(n))\n        unvisited_nodes.remove(start_node)\n        path = [start_node]\n\n        while unvisited_nodes:\n            probabilities = []\n            neighbors = []\n            total_weight = 0.0\n            for neighbor in unvisited_nodes:\n                dist = distance_matrix[current_node, neighbor]\n                weight = np.exp(-dist) if dist > 0 else 1.0\n                probabilities.append(weight)\n                neighbors.append(neighbor)\n                total_weight += weight\n\n            probabilities = [p / total_weight for p in probabilities]\n            \n            nearest_neighbor = np.random.choice(neighbors, p=probabilities)\n            \n            path.append(nearest_neighbor)\n            unvisited_nodes.remove(nearest_neighbor)\n            current_node = nearest_neighbor\n        \n        path.append(start_node)\n        path = improve_path(path)\n\n\n        for i in range(n):\n            node1 = path[i]\n            node2 = path[i+1]\n            distance = distance_matrix[node1, node2]\n            weight = np.exp(-distance) if distance > 0 else 1.0\n\n            heuristics_matrix[node1, node2] += weight\n            heuristics_matrix[node2, node1] += weight\n\n    heuristics_matrix /= num_samples\n    return heuristics_matrix",
          "objective": 5.79589,
          "other_inf": null
     },
     {
          "algorithm": "This algorithm samples near-optimal TSP solutions using a stochastic nearest neighbor approach with a probability-based selection of neighbors weighted by inverse squared distance and applies a local search to improve each sampled solution, accumulating edge frequencies weighted by inverse squared distance to estimate edge desirability.",
          "code": "import numpy as np\n\ndef heuristics_v2(distance_matrix):\n    \"\"\"{This algorithm samples near-optimal TSP solutions using a stochastic nearest neighbor approach with a probability-based selection of neighbors weighted by inverse squared distance and applies a local search to improve each sampled solution, accumulating edge frequencies weighted by inverse squared distance to estimate edge desirability.}\"\"\"\n    n = distance_matrix.shape[0]\n    num_samples = 100\n    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    def improve_path(path):\n        improved = True\n        while improved:\n            improved = False\n            for i in range(1, len(path) - 2):\n                for j in range(i + 2, len(path)):\n                    if j == len(path) -1 and i == 1:\n                        continue\n                    if j == len(path) - 1:\n                      continue\n\n                    if distance_matrix[path[i-1], path[i]] + distance_matrix[path[j-1], path[j]] > \\\n                       distance_matrix[path[i-1], path[j-1]] + distance_matrix[path[i], path[j]]:\n                        path[i:j] = path[i:j][::-1]\n                        improved = True\n        return path\n\n    for _ in range(num_samples):\n        start_node = np.random.randint(n)\n        current_node = start_node\n        unvisited_nodes = set(range(n))\n        unvisited_nodes.remove(start_node)\n        path = [start_node]\n\n        while unvisited_nodes:\n            probabilities = []\n            neighbors = []\n            total_weight = 0.0\n            for neighbor in unvisited_nodes:\n                dist = distance_matrix[current_node, neighbor]\n                weight = 1.0 / (dist * dist) if dist > 0 else 1.0\n                probabilities.append(weight)\n                neighbors.append(neighbor)\n                total_weight += weight\n\n            probabilities = [p / total_weight for p in probabilities]\n            \n            nearest_neighbor = np.random.choice(neighbors, p=probabilities)\n            \n            path.append(nearest_neighbor)\n            unvisited_nodes.remove(nearest_neighbor)\n            current_node = nearest_neighbor\n        \n        path.append(start_node)\n        path = improve_path(path)\n\n\n        for i in range(n):\n            node1 = path[i]\n            node2 = path[i+1]\n            distance = distance_matrix[node1, node2]\n            if distance > 0:\n                weight = 1.0 / (distance * distance)\n            else:\n                weight = 1.0  # Avoid division by zero\n\n            heuristics_matrix[node1, node2] += weight\n            heuristics_matrix[node2, node1] += weight\n\n    heuristics_matrix /= num_samples\n    return heuristics_matrix",
          "objective": 5.82863,
          "other_inf": null
     },
     {
          "algorithm": "This algorithm combines ant colony optimization's pheromone update with nearest neighbor's edge selection to iteratively refine edge desirability based on tour quality and proximity.",
          "code": "import numpy as np\n\ndef heuristics_v2(distance_matrix):\n    \"\"\"{This algorithm combines ant colony optimization's pheromone update with nearest neighbor's edge selection to iteratively refine edge desirability based on tour quality and proximity.}\"\"\"\n    n = distance_matrix.shape[0]\n    pheromone_matrix = np.ones_like(distance_matrix, dtype=float)\n    alpha = 0.8  # Pheromone influence\n    beta = 1.2  # Distance influence\n    rho = 0.05  # Evaporation rate\n    Q = 50     # Pheromone deposit constant\n    num_ants = 15\n    num_iterations = 75\n\n    for iteration in range(num_iterations):\n        ant_tours = []\n        ant_tour_lengths = []\n\n        for ant in range(num_ants):\n            current_node = np.random.randint(n)\n            tour = [current_node]\n            unvisited_nodes = set(range(n))\n            unvisited_nodes.remove(current_node)\n\n            while unvisited_nodes:\n                probabilities = np.zeros(n)\n                for neighbor in range(n):\n                    if neighbor in unvisited_nodes:\n                        probabilities[neighbor] = (pheromone_matrix[current_node, neighbor]**alpha) * ((1 / (distance_matrix[current_node, neighbor] + 1e-9))**beta)\n\n                if np.sum(probabilities) == 0:\n                    nearest_neighbor = None\n                    min_distance = np.inf\n                    for neighbor in unvisited_nodes:\n                        dist = distance_matrix[current_node, neighbor]\n                        if dist < min_distance:\n                            min_distance = dist\n                            nearest_neighbor = neighbor\n                    next_node = nearest_neighbor\n                else:\n                    probabilities /= np.sum(probabilities)\n                    next_node = np.random.choice(range(n), p=probabilities)\n\n                tour.append(next_node)\n                unvisited_nodes.remove(next_node)\n                current_node = next_node\n\n            tour_length = 0\n            for i in range(n - 1):\n                tour_length += distance_matrix[tour[i], tour[i + 1]]\n            tour_length += distance_matrix[tour[-1], tour[0]]\n\n            ant_tours.append(tour)\n            ant_tour_lengths.append(tour_length)\n\n        # Update pheromones\n        for i in range(n):\n            for j in range(n):\n                pheromone_matrix[i, j] *= (1 - rho)\n\n        for ant in range(num_ants):\n            tour = ant_tours[ant]\n            tour_length = ant_tour_lengths[ant]\n            for i in range(n - 1):\n                pheromone_matrix[tour[i], tour[i + 1]] += Q / tour_length\n                pheromone_matrix[tour[i + 1], tour[i]] += Q / tour_length\n            pheromone_matrix[tour[-1], tour[0]] += Q / tour_length\n            pheromone_matrix[tour[0], tour[-1]] += Q / tour_length\n\n    heuristics_matrix = pheromone_matrix / (distance_matrix + 1e-9)\n    return heuristics_matrix",
          "objective": 5.85148,
          "other_inf": null
     },
     {
          "algorithm": "This algorithm combines a greedy nearest neighbor approach with stochastic perturbation to explore diverse solutions and refine edge selection based on a weighted combination of distance and visitation frequency.",
          "code": "import numpy as np\n\ndef heuristics_v2(distance_matrix):\n    \"\"\"{This algorithm combines a greedy nearest neighbor approach with stochastic perturbation to explore diverse solutions and refine edge selection based on a weighted combination of distance and visitation frequency.}\"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)\n    \n    num_samples = 50\n    perturbation_factor = 0.1\n\n    for _ in range(num_samples):\n        # Greedy Nearest Neighbor with Perturbation\n        start_node = np.random.randint(n)\n        tour = [start_node]\n        unvisited_nodes = set(range(n))\n        unvisited_nodes.remove(start_node)\n\n        current_node = start_node\n        while unvisited_nodes:\n            distances = distance_matrix[current_node, :]\n            \n            # Perturb distances stochastically\n            perturbed_distances = distances + np.random.normal(0, perturbation_factor * np.mean(distances), size=n)\n            \n            # Mask visited nodes\n            perturbed_distances[list(tour)] = np.inf\n\n            next_node = np.argmin(perturbed_distances)\n            \n            tour.append(next_node)\n            unvisited_nodes.remove(next_node)\n            current_node = next_node\n        \n        # Update heuristics matrix based on tour frequency\n        for i in range(n - 1):\n            heuristics_matrix[tour[i], tour[i+1]] += 1\n            heuristics_matrix[tour[i+1], tour[i]] += 1\n        heuristics_matrix[tour[-1], tour[0]] += 1\n        heuristics_matrix[tour[0], tour[-1]] += 1\n\n    # Combine frequency with inverse distance\n    heuristics_matrix = (heuristics_matrix + 1e-9) / (distance_matrix + 1e-9)\n\n    return heuristics_matrix",
          "objective": 5.86372,
          "other_inf": null
     },
     {
          "algorithm": "This algorithm combines pheromone and distance information, incorporates a rank-based pheromone update, and employs a stochastic 2-opt local search to enhance tour quality, but emphasizes distance more strongly and reduces pheromone influence while adjusting pheromone update and evaporation rates.",
          "code": "import numpy as np\n\ndef heuristics_v2(distance_matrix):\n    \"\"\"{This algorithm combines pheromone and distance information, incorporates a rank-based pheromone update, and employs a stochastic 2-opt local search to enhance tour quality, but emphasizes distance more strongly and reduces pheromone influence while adjusting pheromone update and evaporation rates.}\"\"\"\n    n = distance_matrix.shape[0]\n    pheromone_matrix = np.ones_like(distance_matrix, dtype=float)\n    alpha = 0.5  # Pheromone influence (reduced)\n    beta = 3  # Distance influence (increased)\n    rho = 0.2  # Evaporation rate (adjusted)\n    Q = 50  # Pheromone deposit constant (adjusted)\n    num_ants = 15  # Reduced number of ants\n    num_iterations = 40  # Reduced number of iterations\n\n    best_tour = None\n    best_tour_length = float('inf')\n\n    for iteration in range(num_iterations):\n        ant_tours = []\n        ant_tour_lengths = []\n\n        for ant in range(num_ants):\n            # Construct tour\n            current_node = np.random.randint(n)\n            tour = [current_node]\n            unvisited_nodes = set(range(n))\n            unvisited_nodes.remove(current_node)\n\n            while unvisited_nodes:\n                probabilities = np.zeros(n)\n                for neighbor in range(n):\n                    if neighbor in unvisited_nodes:\n                        probabilities[neighbor] = (pheromone_matrix[current_node, neighbor]**alpha) * ((1 / (distance_matrix[current_node, neighbor] + 1e-9))**beta)\n                \n                if np.sum(probabilities) == 0:\n                    next_node = np.random.choice(list(unvisited_nodes))\n                else:\n                    probabilities /= np.sum(probabilities)\n                    next_node = np.random.choice(range(n), p=probabilities)\n\n                tour.append(next_node)\n                unvisited_nodes.remove(next_node)\n                current_node = next_node\n\n            tour_length = 0\n            for i in range(n - 1):\n                tour_length += distance_matrix[tour[i], tour[i + 1]]\n            tour_length += distance_matrix[tour[-1], tour[0]]\n\n            ant_tours.append(tour)\n            ant_tour_lengths.append(tour_length)\n\n            if tour_length < best_tour_length:\n                best_tour_length = tour_length\n                best_tour = tour\n        \n        # Rank-based pheromone update\n        ranked_ants = sorted(range(num_ants), key=lambda i: ant_tour_lengths[i])\n        for rank, ant_index in enumerate(ranked_ants):\n            tour = ant_tours[ant_index]\n            tour_length = ant_tour_lengths[ant_index]\n            for i in range(n - 1):\n                pheromone_matrix[tour[i], tour[i + 1]] += (Q / (tour_length + 1e-9)) * (num_ants - rank) * 0.75 # Adjusted update\n                pheromone_matrix[tour[i + 1], tour[i]] += (Q / (tour_length + 1e-9)) * (num_ants - rank) * 0.75 # Adjusted update\n            pheromone_matrix[tour[-1], tour[0]] += (Q / (tour_length + 1e-9)) * (num_ants - rank) * 0.75 # Adjusted update\n            pheromone_matrix[tour[0], tour[-1]] += (Q / (tour_length + 1e-9)) * (num_ants - rank) * 0.75 # Adjusted update\n\n        # Evaporation\n        pheromone_matrix *= (1 - rho)\n\n\n        # Stochastic local search (2-opt)\n        if best_tour:\n            for _ in range(n):  # Perform multiple local searches\n                i = np.random.randint(n)\n                j = np.random.randint(i + 2, n) if i < n - 2 else n -1 # Ensure j > i\n                new_tour = best_tour[:i] + best_tour[i:j+1][::-1] + best_tour[j+1:]\n                new_tour_length = 0\n                for k in range(n - 1):\n                    new_tour_length += distance_matrix[new_tour[k], new_tour[k + 1]]\n                new_tour_length += distance_matrix[new_tour[-1], new_tour[0]]\n                \n                if new_tour_length < best_tour_length:\n                    best_tour_length = new_tour_length\n                    best_tour = new_tour\n\n    heuristics_matrix = pheromone_matrix / (distance_matrix + 1e-9)\n    return heuristics_matrix",
          "objective": 5.86386,
          "other_inf": null
     },
     {
          "algorithm": "This algorithm balances exploration and exploitation by adjusting pheromone and distance influence, uses a simple pheromone update based on the best ant, and employs a more focused 2-opt local search.",
          "code": "import numpy as np\n\ndef heuristics_v2(distance_matrix):\n    \"\"\"{This algorithm balances exploration and exploitation by adjusting pheromone and distance influence, uses a simple pheromone update based on the best ant, and employs a more focused 2-opt local search.}\"\"\"\n    n = distance_matrix.shape[0]\n    pheromone_matrix = np.ones_like(distance_matrix, dtype=float)\n    alpha = 0.5  # Pheromone influence (reduced)\n    beta = 5  # Distance influence (increased)\n    rho = 0.2  # Evaporation rate\n    Q = 50  # Pheromone deposit constant (reduced)\n    num_ants = 10\n    num_iterations = 30\n\n    best_tour = None\n    best_tour_length = float('inf')\n\n    for iteration in range(num_iterations):\n        ant_tours = []\n        ant_tour_lengths = []\n\n        for ant in range(num_ants):\n            # Construct tour\n            current_node = np.random.randint(n)\n            tour = [current_node]\n            unvisited_nodes = set(range(n))\n            unvisited_nodes.remove(current_node)\n\n            while unvisited_nodes:\n                probabilities = np.zeros(n)\n                for neighbor in range(n):\n                    if neighbor in unvisited_nodes:\n                        probabilities[neighbor] = (pheromone_matrix[current_node, neighbor]**alpha) * ((1 / (distance_matrix[current_node, neighbor] + 1e-9))**beta)\n                \n                if np.sum(probabilities) == 0:\n                    next_node = np.random.choice(list(unvisited_nodes))\n                else:\n                    probabilities /= np.sum(probabilities)\n                    next_node = np.random.choice(range(n), p=probabilities)\n\n                tour.append(next_node)\n                unvisited_nodes.remove(next_node)\n                current_node = next_node\n\n            tour_length = 0\n            for i in range(n - 1):\n                tour_length += distance_matrix[tour[i], tour[i + 1]]\n            tour_length += distance_matrix[tour[-1], tour[0]]\n\n            ant_tours.append(tour)\n            ant_tour_lengths.append(tour_length)\n\n            if tour_length < best_tour_length:\n                best_tour_length = tour_length\n                best_tour = tour\n        \n        # Pheromone update (only best ant)\n        if best_tour:\n            for i in range(n - 1):\n                pheromone_matrix[best_tour[i], best_tour[i + 1]] += Q / best_tour_length\n                pheromone_matrix[best_tour[i + 1], best_tour[i]] += Q / best_tour_length\n            pheromone_matrix[best_tour[-1], best_tour[0]] += Q / best_tour_length\n            pheromone_matrix[best_tour[0], best_tour[-1]] += Q / best_tour_length\n\n        # Evaporation\n        pheromone_matrix *= (1 - rho)\n\n        # Stochastic local search (2-opt) - focused on best tour\n        if best_tour:\n            for _ in range(n // 2):  # Reduce local search iterations\n                i = np.random.randint(n)\n                j = np.random.randint(i + 2, n) if i < n - 2 else n -1 # Ensure j > i\n                new_tour = best_tour[:i] + best_tour[i:j+1][::-1] + best_tour[j+1:]\n                new_tour_length = 0\n                for k in range(n - 1):\n                    new_tour_length += distance_matrix[new_tour[k], new_tour[k + 1]]\n                new_tour_length += distance_matrix[new_tour[-1], new_tour[0]]\n                \n                if new_tour_length < best_tour_length:\n                    best_tour_length = new_tour_length\n                    best_tour = new_tour\n\n    heuristics_matrix = pheromone_matrix / (distance_matrix + 1e-9)\n    return heuristics_matrix",
          "objective": 5.86468,
          "other_inf": null
     },
     {
          "algorithm": "This algorithm refines edge desirability using a combination of ant colony optimization's pheromone update, nearest neighbor edge selection, and a reinforcement learning-inspired reward mechanism favoring shorter tours.",
          "code": "import numpy as np\n\ndef heuristics_v3(distance_matrix):\n    \"\"\"{This algorithm refines edge desirability using a combination of ant colony optimization's pheromone update, nearest neighbor edge selection, and a reinforcement learning-inspired reward mechanism favoring shorter tours.}\"\"\"\n    n = distance_matrix.shape[0]\n    pheromone_matrix = np.ones_like(distance_matrix, dtype=float)\n    alpha = 0.7  # Pheromone influence\n    beta = 1.3  # Distance influence\n    rho = 0.1  # Evaporation rate\n    Q = 60     # Pheromone deposit constant\n    num_ants = 20\n    num_iterations = 100\n    gamma = 0.9  # Discount factor for reward\n\n    best_tour_length = np.inf\n\n    for iteration in range(num_iterations):\n        ant_tours = []\n        ant_tour_lengths = []\n\n        for ant in range(num_ants):\n            current_node = np.random.randint(n)\n            tour = [current_node]\n            unvisited_nodes = set(range(n))\n            unvisited_nodes.remove(current_node)\n\n            while unvisited_nodes:\n                probabilities = np.zeros(n)\n                for neighbor in range(n):\n                    if neighbor in unvisited_nodes:\n                        probabilities[neighbor] = (pheromone_matrix[current_node, neighbor]**alpha) * ((1 / (distance_matrix[current_node, neighbor] + 1e-9))**beta)\n\n                if np.sum(probabilities) == 0:\n                    nearest_neighbor = None\n                    min_distance = np.inf\n                    for neighbor in unvisited_nodes:\n                        dist = distance_matrix[current_node, neighbor]\n                        if dist < min_distance:\n                            min_distance = dist\n                            nearest_neighbor = neighbor\n                    next_node = nearest_neighbor\n                else:\n                    probabilities /= np.sum(probabilities)\n                    next_node = np.random.choice(range(n), p=probabilities)\n\n                tour.append(next_node)\n                unvisited_nodes.remove(next_node)\n                current_node = next_node\n\n            tour_length = 0\n            for i in range(n - 1):\n                tour_length += distance_matrix[tour[i], tour[i + 1]]\n            tour_length += distance_matrix[tour[-1], tour[0]]\n\n            ant_tours.append(tour)\n            ant_tour_lengths.append(tour_length)\n\n        # Update pheromones\n        for i in range(n):\n            for j in range(n):\n                pheromone_matrix[i, j] *= (1 - rho)\n\n        # Reinforcement Learning Reward\n        min_tour_length = min(ant_tour_lengths)\n        if min_tour_length < best_tour_length:\n            best_tour_length = min_tour_length\n\n        for ant in range(num_ants):\n            tour = ant_tours[ant]\n            tour_length = ant_tour_lengths[ant]\n\n            # Reward based on tour quality\n            reward = (best_tour_length / tour_length)**gamma  # Higher reward for shorter tours\n\n            for i in range(n - 1):\n                pheromone_matrix[tour[i], tour[i + 1]] += Q * reward / tour_length\n                pheromone_matrix[tour[i + 1], tour[i]] += Q * reward / tour_length\n            pheromone_matrix[tour[-1], tour[0]] += Q * reward / tour_length\n            pheromone_matrix[tour[0], tour[-1]] += Q * reward / tour_length\n\n\n    heuristics_matrix = pheromone_matrix / (distance_matrix + 1e-9)\n    return heuristics_matrix",
          "objective": 5.8826,
          "other_inf": null
     },
     {
          "algorithm": "This algorithm uses a simplified ant colony optimization approach with a fixed number of ants and iterations, updating pheromones based on tour length and a combined heuristic of pheromone and distance.",
          "code": "import numpy as np\n\ndef heuristics_v2(distance_matrix):\n    \"\"\"{This algorithm uses a simplified ant colony optimization approach with a fixed number of ants and iterations, updating pheromones based on tour length and a combined heuristic of pheromone and distance.}\"\"\"\n    n = distance_matrix.shape[0]\n    pheromone_matrix = np.ones_like(distance_matrix, dtype=float)\n    alpha = 0.8  # Pheromone influence\n    beta = 1.2  # Distance influence\n    rho = 0.2  # Evaporation rate\n    Q = 50    # Pheromone deposit constant\n    num_ants = 15\n    num_iterations = 75\n\n    for iteration in range(num_iterations):\n        ant_tours = []\n        ant_tour_lengths = []\n\n        for ant in range(num_ants):\n            current_node = np.random.randint(n)\n            tour = [current_node]\n            unvisited_nodes = set(range(n))\n            unvisited_nodes.remove(current_node)\n\n            while unvisited_nodes:\n                probabilities = np.zeros(n)\n                for neighbor in range(n):\n                    if neighbor in unvisited_nodes:\n                        probabilities[neighbor] = (pheromone_matrix[current_node, neighbor]**alpha) * ((1 / (distance_matrix[current_node, neighbor] + 1e-9))**beta)\n\n                if np.sum(probabilities) == 0:\n                    next_node = np.random.choice(list(unvisited_nodes))\n                else:\n                    probabilities /= np.sum(probabilities)\n                    next_node = np.random.choice(range(n), p=probabilities)\n\n                tour.append(next_node)\n                unvisited_nodes.remove(next_node)\n                current_node = next_node\n\n            tour_length = 0\n            for i in range(n - 1):\n                tour_length += distance_matrix[tour[i], tour[i + 1]]\n            tour_length += distance_matrix[tour[-1], tour[0]]\n\n            ant_tours.append(tour)\n            ant_tour_lengths.append(tour_length)\n\n        for i in range(n):\n            for j in range(n):\n                pheromone_matrix[i, j] *= (1 - rho)\n\n        for ant in range(num_ants):\n            tour = ant_tours[ant]\n            tour_length = ant_tour_lengths[ant]\n            delta_pheromone = Q / (tour_length + 1e-9)\n            for i in range(n - 1):\n                pheromone_matrix[tour[i], tour[i + 1]] += delta_pheromone\n                pheromone_matrix[tour[i + 1], tour[i]] += delta_pheromone\n            pheromone_matrix[tour[-1], tour[0]] += delta_pheromone\n            pheromone_matrix[tour[0], tour[-1]] += delta_pheromone\n\n    heuristics_matrix = pheromone_matrix / (distance_matrix + 1e-9)\n    return heuristics_matrix",
          "objective": 5.89498,
          "other_inf": null
     }
]