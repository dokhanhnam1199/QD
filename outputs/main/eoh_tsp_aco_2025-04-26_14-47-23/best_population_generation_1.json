{
     "algorithm": "This algorithm uses a simplified ant colony optimization approach with a fixed number of ants and iterations, updating pheromones based on tour length and a combined heuristic of pheromone and distance.",
     "code": "import numpy as np\n\ndef heuristics_v2(distance_matrix):\n    \"\"\"{This algorithm uses a simplified ant colony optimization approach with a fixed number of ants and iterations, updating pheromones based on tour length and a combined heuristic of pheromone and distance.}\"\"\"\n    n = distance_matrix.shape[0]\n    pheromone_matrix = np.ones_like(distance_matrix, dtype=float)\n    alpha = 0.8  # Pheromone influence\n    beta = 1.2  # Distance influence\n    rho = 0.2  # Evaporation rate\n    Q = 50    # Pheromone deposit constant\n    num_ants = 15\n    num_iterations = 75\n\n    for iteration in range(num_iterations):\n        ant_tours = []\n        ant_tour_lengths = []\n\n        for ant in range(num_ants):\n            current_node = np.random.randint(n)\n            tour = [current_node]\n            unvisited_nodes = set(range(n))\n            unvisited_nodes.remove(current_node)\n\n            while unvisited_nodes:\n                probabilities = np.zeros(n)\n                for neighbor in range(n):\n                    if neighbor in unvisited_nodes:\n                        probabilities[neighbor] = (pheromone_matrix[current_node, neighbor]**alpha) * ((1 / (distance_matrix[current_node, neighbor] + 1e-9))**beta)\n\n                if np.sum(probabilities) == 0:\n                    next_node = np.random.choice(list(unvisited_nodes))\n                else:\n                    probabilities /= np.sum(probabilities)\n                    next_node = np.random.choice(range(n), p=probabilities)\n\n                tour.append(next_node)\n                unvisited_nodes.remove(next_node)\n                current_node = next_node\n\n            tour_length = 0\n            for i in range(n - 1):\n                tour_length += distance_matrix[tour[i], tour[i + 1]]\n            tour_length += distance_matrix[tour[-1], tour[0]]\n\n            ant_tours.append(tour)\n            ant_tour_lengths.append(tour_length)\n\n        for i in range(n):\n            for j in range(n):\n                pheromone_matrix[i, j] *= (1 - rho)\n\n        for ant in range(num_ants):\n            tour = ant_tours[ant]\n            tour_length = ant_tour_lengths[ant]\n            delta_pheromone = Q / (tour_length + 1e-9)\n            for i in range(n - 1):\n                pheromone_matrix[tour[i], tour[i + 1]] += delta_pheromone\n                pheromone_matrix[tour[i + 1], tour[i]] += delta_pheromone\n            pheromone_matrix[tour[-1], tour[0]] += delta_pheromone\n            pheromone_matrix[tour[0], tour[-1]] += delta_pheromone\n\n    heuristics_matrix = pheromone_matrix / (distance_matrix + 1e-9)\n    return heuristics_matrix",
     "objective": 5.89498,
     "other_inf": null
}