```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used on a priority basis. Items will try to fit into bins with more remaining
    capacity, but also favor bins with fewer other items to maintain balance.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize the priority scores with the maximum of zero or the remaining capacity minus the item size
    priority = np.maximum(bins_remain_cap - item, 0)
    
    # Encourage using less packed bins, hence subtract a small value for every item in the bin
    # Assuming each bin has a maximum capacity equal to the first bin's original max capacity
    if bins_remain_cap.size > 0:
        max_capacity = bins_remain_cap.max() + item
        # Large bin incentive for lower sizes should scale almost linearly with remaining capacity
        size_incentive_payoff_late = np.maximum(max_capacity - bins_remain_cap - item + 1, 1)
        priority += max_capacity / size_incentive_payoff_late

    return priority
```
