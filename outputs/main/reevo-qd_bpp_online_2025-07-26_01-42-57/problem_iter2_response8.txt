```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation focuses on minimizing gaps by prioritizing bins with minimal
    remaining capacity above the item size and penalizes larger unused capacities.
    It also slightly devalues newer bins for balanced utilization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Find bins that can accommodate the item
    possible_bins = bins_remain_cap >= item
    
    # Initialize scores with negative infinity for impossible bins
    scores = np.full_like(bins_remain_cap, -np.inf)
    
    # Calculate the gap for possible bins
    gaps = bins_remain_cap[possible_bins] - item
    
    # Prioritize bins with minimal gaps
    scores[possible_bins] = 1 / (1 + gaps)  # Use 1/(1+gap) to assign higher priority to smaller gaps
    
    # Penalize larger unused capacities in possible bins
    scores[possible_bins] -= 0.5 * (bins_remain_cap[possible_bins] - item)
    
    # Slightly devalue newer bins for balanced utilization
    scores -= 0.01 * np.arange(len(bins_remain_cap))  # Assuming bins_remain_cap is in order of creation
    
    return scores
```
