```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on exact fits, uses logistic penalties for gaps, prioritizes minimal size differences,
    ensures feasibility, normalizes penalties, and maintains compactness.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the exact fit condition
    exact_fit = bins_remain_cap == item
    # Calculate absolute difference for non-exact fits
    diff = np.abs(bins_remain_cap - item)
    # Use logistic function to penalize gaps, with higher penalty for larger gaps
    gap_penalty = 1 / (1 + np.exp(diff - np.min(diff)))
    # Ensure infeasible bins have zero priority
    feasibility = bins_remain_cap >= item
    # Combine penalties and feasibility, giving highest priority to exact fits
    priority_scores = feasibility * (exact_fit + gap_penalty)
    return priority_scores
```
