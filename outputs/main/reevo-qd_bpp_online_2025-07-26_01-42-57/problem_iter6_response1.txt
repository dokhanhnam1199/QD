```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation aims to minimize the gaps between item size and bin capacity,
    penalize larger unused capacities, and only consider feasible bins (those that can fit the item).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between item size and remaining capacity in each bin
    diff = bins_remain_cap - item
    
    # Only consider feasible bins (those that can fit the item)
    feasible_bins = diff >= 0
    
    # For feasible bins, penalize larger unused capacities using a sigmoid-like function
    penalty_factor = 1 / (1 + np.exp(diff / item))  # Adjusting the scale with item size
    
    # Initialize priority scores with zeros
    priority_scores = np.zeros_like(bins_remain_cap)
    
    # Assign penalty scores to feasible bins
    priority_scores[feasible_bins] = penalty_factor[feasible_bins]
    
    return priority_scores
```
