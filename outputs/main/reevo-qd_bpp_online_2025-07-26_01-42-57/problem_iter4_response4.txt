```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation uses a logistic function to prioritize bins with minimal gaps and penalizes larger unused capacities.
    Infeasible bins (those with insufficient capacity) are given a very low priority.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between item size and remaining capacity in each bin
    diff = bins_remain_cap - item
    # Logistic function to prioritize bins that can fit the item
    feasible = (diff >= 0).astype(float)
    # Penalize larger unused capacities using a sigmoid function
    penalty_factor = 1 / (1 + np.exp(diff / item))
    # Combine feasibility and penalty to get priority scores
    priority_scores = feasible * (1 - penalty_factor)
    return priority_scores
```
