```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used penalty. The priority is given based on the remaining capacity of the
    bins, but it penalizes bins that have very small remaining capacity which might
    lead to emptying the bins. Over-stuffed bins are also penalized.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Capacity threshold to offset temptation of filling near-full bins
    capacity_threshold = 0.1

    # Capacity to avoid to avoid overstuffing
    upper_capacity_limit = 0.9

    # Compute the remaining capacity differences after adding the item
    req_cap_diff = bins_remain_cap - item

    # Initialize a score array
    priority_score = np.zeros_like(bins_remain_cap)

    # Encourage item placements under upper limit and above threshold
    threshold_mask = (_req_cap_diff >= 0) & (bins_remain_cap > upper_capacity_limit * bins_remain_cap[0])
    priority_score[threshold_mask] = 1 / (1 + (bins_remain_cap[threshold_mask] - item))

    # Less priority if remaining capacity is under threshold
    threshold_exceeded_mask = (req_cap_diff >= 0) & (bins_remain_cap <= capacity_threshold * bins_remain_cap[0])
    priority_score[threshold_exceeded_mask] = 1 / (1 + (bins_remain_cap[threshold_exceeded_mask] + item))

    # Effectively nullify bins already full (-ive or nearly so) пациfтыthem (WITH THE FAILED QUERY)
    negative_space_mask = (req_cap_diff < 0)
    priority_score[negative_space_mask] = -1000

    return priority_score

# Example usage
# bins_remain_cap = np.array([2.5, 3.0, 1.5, 0.8])
# item = 1.0
# print(priority_v2(item, bins_remain_cap))
```
