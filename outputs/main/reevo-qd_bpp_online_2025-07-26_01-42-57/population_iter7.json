[
  {
    "stdout_filepath": "problem_iter4_response0.txt_stdout.txt",
    "code_path": "problem_iter4_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on prioritizing exact fits, penalizing large gaps,\n    and considering item characteristics to efficiently manage bin space.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin, where capacity is the\n                       difference between bin size and the current total size of items inside the bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n        Higher score means higher priority to place the item in the bin.\n    \"\"\"\n    # Exact fits get the highest priority\n    exact_fit_mask = (bins_remain_cap == item).astype(int) * 1000\n    \n    # Bins that can't fit the item get a very low priority\n    cannot_fit_mask = (bins_remain_cap < item).astype(int) * -1000\n    \n    # Small penalty for remaining capacity to avoid wasting space\n    small_penalty = bins_remain_cap * -0.1\n    \n    # Larger penalty for large remaining capacity to strongly discourage leaving large gaps\n    remaining_cap_diff = bins_remain_cap - item\n    large_gap_penalty = np.where(remaining_cap_diff > 0, remaining_cap_diff ** 2 * -0.01, 0)\n    \n    # Adjust penalty based on item size\n    adjusted_penalty = large_gap_penalty * (1 + np.log(item + 1) / 5)\n    \n    # Total priority score combining various components\n    priority_score = exact_fit_mask + cannot_fit_mask + small_penalty + adjusted_penalty\n    \n    return priority_score",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response0.txt_stdout.txt",
    "code_path": "problem_iter5_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on exact fits, penalizes large gaps using a logistic function for flexible penalties,\n    and prioritizes bins nearly fitting the item size while discouraging large unused capacities.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the difference between item size and remaining capacity in each bin\n    diff = np.abs(bins_remain_cap - item)\n    # Logistic function to create penalty for large gaps\n    penalty = 1 / (1 + np.exp(0.5 * diff))\n    # Ensure only bins with enough capacity are considered\n    priority_scores = np.where(bins_remain_cap >= item, penalty, 0)\n    return priority_scores",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 4.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]