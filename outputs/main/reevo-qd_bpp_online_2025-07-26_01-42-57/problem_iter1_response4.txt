```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is slightly reduced for bins that have less remaining
    capacity than the item to prevent unused bin scenarios.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Find bins that can accommodate the item
    possible_bins = bins_remain_cap >= item
    
    # Create a score array, start with high scores for non-possible bins
    scores = np.where(possible_bins, bins_remain_cap, -np.inf)
    
    # Penalize bins with more remaining capacity than item size to prioritize use of slightly-filled bins
    scores = np.where(possible_bins, scores - (bins_remain_cap - item), scores)
    
    # Consider the number of bins as well, encouraging filling decentral binceng bins rather than just filling
    # already pretty full ones
    # Count starts from 1 to avoid division by zero (each bin implicitly has an ID as per its original index in func arg)
    scores = scores - 0.01 * np.arange(1, len(bins_remain_cap) + 1)[possible_bins]
    
    return scores
```
