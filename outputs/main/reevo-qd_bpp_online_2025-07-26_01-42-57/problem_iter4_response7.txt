```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation minimizes gaps between item size and remaining bin capacity,
    prioritizing bins that nearly fit the item while ensuring the bin can actually fit the item.
    A sigmoid function is used to create a smooth transition in priority scores.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Strong penalty for bins that cannot fit the item
    priority_scores = np.where(bins_remain_cap >= item, bins_remain_cap - item, -10000 * np.ones_like(bins_remain_cap))
    
    # Use sigmoid function to smooth the priority scores
    priority_scores = 1 / (1 + np.exp(-priority_scores / item))
    
    return priority_scores
```
