```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation uses a logistic function to give higher priority to bins
    that are closer to being full (encouraging space utilization). It heavily
    penalizes bins that cannot fit the item by setting their priority to a very low
    value. The logistic function ensures that bins with enough remaining capacity
    are favored, with a preference towards more full bins to reduce fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Set a very low priority for bins that cannot fit the item
    priority_scores = np.where(bins_remain_cap >= item, bins_remain_cap - item, -10000 * np.ones_like(bins_remain_cap))
    # Use logistic function to transform remaining capacities to priority scores
    priority_scores = 1 / (1 + np.exp(-priority_scores))
    
    return priority_scores
```
