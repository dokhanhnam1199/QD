```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation aims to minimize the gaps between item size and bin capacity,
    penalize larger unused capacities while ensuring feasibility. It uses a modified
    logistic function to achieve a balanced prioritization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between item size and remaining capacity in each bin
    diff = bins_remain_cap - item
    
    # Penalize larger unused capacities using a sigmoid-like function
    penalty_factor = 1 / (1 + np.exp(diff / item))  # Adjusting the scale with item size
    
    # Feasible bins should have a positive score, infeasible ones get zero
    feasible = (diff >= 0).astype(float)
    
    # Combine feasibility and penalty to get priority scores
    priority_scores = feasible * penalty_factor
    
    return priority_scores
```
