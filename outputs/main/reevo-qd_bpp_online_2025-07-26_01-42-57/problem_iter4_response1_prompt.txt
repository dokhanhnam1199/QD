{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation uses a logistic function to give higher priority to bins\n    that are closer to being full (encouraging space utilization). It heavily\n    penalizes bins that cannot fit the item by setting their priority to a very low\n    value. The logistic function ensures that bins with enough remaining capacity\n    are favored, with a preference towards more full bins to reduce fragmentation.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Set a very low priority for bins that cannot fit the item\n    priority_scores = np.where(bins_remain_cap >= item, bins_remain_cap - item, -10000 * np.ones_like(bins_remain_cap))\n    # Use logistic function to transform remaining capacities to priority scores\n    priority_scores = 1 / (1 + np.exp(-priority_scores))\n    \n    return priority_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation focuses on prioritizing exact fits, penalizing large gaps, and considering item characteristics to efficiently manage bin space.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin, where capacity is the difference between bin size and the current total size of items inside the bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin. Higher score means higher priority to place the item in the bin.\n    \"\"\"\n    # Exact fits get the highest priority\n    exact_fit_mask = (bins_remain_cap == item).astype(int) * 1000\n    \n    # Bins that can't fit the item get a very low priority\n    cannot_fit_mask = (bins_remain_cap < item).astype(int) * -1000\n    \n    # Small penalty for remaining capacity to avoid wasting space\n    small_penalty = bins_remain_cap * -0.1\n    \n    # Larger penalty for large remaining capacity to strongly discourage leaving large gaps\n    large_gap_penalty = np.maximum((bins_remain_cap - item) ** 2 * -0.01, -5)\n    \n    # Total priority score combining various components\n    priority_score = exact_fit_mask + cannot_fit_mask + small_penalty + large_gap_penalty\n    \n    return priority_score\n\n[Reflection]\nFocus on exact fits, penalize large gaps, adjust penalties by item size, and discourage unused capacity.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}