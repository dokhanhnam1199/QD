```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of times a bin has leftover space after an item is placed. 
    It tries to keep bins close to full to avoid wasted space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin, where capacity is the difference between bin size and the current total size of items inside the bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin. Higher score means higher priority to place the item in the bin.
    """
    # To keep track of bins that are closer to being filled
    proximity_to_full = bins_remain_cap - item
    
    # Scores for items that exactly fit inside a bin are prioritized
    exact_fit_mask = (proximity_to_full == 0).astype(int) * 100
    
    # Scores for bins with insufficient capacity are heavily penalized
    negative_score_mask = (proximity_to_full < 0).astype(int) * -1
   
    # Add a very small negative weight based on the current leftover capacity. This discourages larger unnecessary gaps.
    small_penalty = bins_remain_cap * -0.01
    
    # Implementing penalty cream again if remainder is much larger than item size for diverse items
    larger_remainder_penalty = np.clip((bins_remain_cap - item)**2 * -0.001, -1, 0)
    
    # Total priority score combining various components
    priority_score = exact_fit_mask + negative_score_mask + small_penalty + larger_remainder_penalty
    
    return priority_score
```
