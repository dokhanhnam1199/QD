```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation aims to fill bins with the minimal capacity difference to the item size,
    provided the bin has enough capacity to fit the item, promoting compact packing efficiently.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate absolute difference between item size and remaining capacity in each bin
    diff = np.abs(bins_remain_cap - item)
    # Priority is high if the difference is low and the bin has enough capacity
    priority_scores = np.where(bins_remain_cap >= item, 1 / (1 + diff), 0)
    # Normalize scores to be between 0 and 1
    priority_scores = priority_scores / (np.max(priority_scores) + 1e-6)
    return priority_scores
```
