```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation aims to minimize gaps between item size and remaining bin capacity,
    prioritizing bins that nearly fit the item while ensuring the bin can actually fit the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the remaining capacity after placing the item in each bin
    remaining_capacity_after_item = bins_remain_cap - item
    
    # Priority is high if the remaining capacity after placing the item is minimal (minimizing gaps)
    # and the bin has enough capacity to fit the item
    priority_scores = np.where(bins_remain_cap >= item, 1 / (1 + remaining_capacity_after_item), 0)
    
    return priority_scores
```
