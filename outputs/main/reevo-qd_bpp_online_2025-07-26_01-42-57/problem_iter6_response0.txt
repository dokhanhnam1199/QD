```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation focuses on prioritizing bins with minimal capacity gaps while ensuring feasibility.
    It avoids penalties on partially fitting bins and promotes compact packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between item size and remaining capacity in each bin
    diff = bins_remain_cap - item
    # Feasible bins are those that can fit the item
    feasible = (diff >= 0).astype(float)
    # Prioritize bins that are closest in size to the item, avoiding penalties on partial fits
    priority_scores = feasible * (1 / (1 + np.abs(diff)))
    return priority_scores
```
