```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is slightly reduced for bins that have less remaining
    capacity than the item itself (setting them to a very low priority), and further
    reduced if the bin has zero remaining capacity. The reduction is achieved by
    using a negative value to make these bins less likely to be chosen.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priority_scores = np.where(bins_remain_cap >= item, bins_remain_cap, -10000 * np.ones_like(bins_remain_cap))
    # Bias towards more full bins (to use available space), but penalize too small gap or fully used bins.
    priority_scores = 1 / (1 + np.exp(-priority_scores))
    
    return priority_scores
```
