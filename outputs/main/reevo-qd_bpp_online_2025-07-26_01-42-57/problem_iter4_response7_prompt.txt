{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation prioritizes bins that are closer to being full, but strongly penalizes\n    bins that cannot fit the item. A sigmoid function is used to create a smooth transition in\n    priority scores.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Strong penalty for bins that cannot fit the item\n    priority_scores = np.where(bins_remain_cap >= item, bins_remain_cap, -10000 * np.ones_like(bins_remain_cap))\n    \n    # Use sigmoid function to smooth the priority scores\n    priority_scores = 1 / (1 + np.exp(-priority_scores / item))\n    \n    return priority_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation aims to minimize gaps between item size and remaining bin capacity,\n    prioritizing bins that nearly fit the item while ensuring the bin can actually fit the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the remaining capacity after placing the item in each bin\n    remaining_capacity_after_item = bins_remain_cap - item\n    \n    # Priority is high if the remaining capacity after placing the item is minimal (minimizing gaps)\n    # and the bin has enough capacity to fit the item\n    priority_scores = np.where(bins_remain_cap >= item, 1 / (1 + remaining_capacity_after_item), 0)\n    \n    return priority_scores\n\n[Reflection]\nMinimize gaps and penalize non-fit bins strongly. Use soft constraints with sigmoid for smooth transitions.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}