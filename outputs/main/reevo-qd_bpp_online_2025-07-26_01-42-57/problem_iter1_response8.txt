```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used minimizing fragmentation and the number of bins.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate simple fit (remaining capacity if item fits, else negative value)
    simple_fit = np.where(bins_remain_cap >= item, bins_remain_cap - item, -bins_remain_cap)
    
    # Calculate engineered features: 
    # 1. Fragmentation penalty - the lower the remaining capacity, the higher the penalty
    # 2. Difficulty of placement - heavily penalized if item doesn't fit
    fragmentation_penalty = np.where(bins_remain_cap >= item, bins_remain_cap / bins_remain_cap.size, -np.inf)
    
    # We prioritize bins with the highest simple_fit, plus some weighting
    # Negative remaining capacities are heavily penalized by np.where in fragmentation.
    scores = simple_fit + fragmentation_penalty * 0.8
    
    return scores
```
