```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero for empty bins
    bins_remain_cap_safe = bins_remain_cap.copy()
    bins_remain_cap_safe[bins_remain_cap_safe == 0] = np.inf
    
    # Priority is based on how much the bin will be filled after adding the item
    # and also takes into account the number of bins that might need to be used in the future
    priority_scores = (bins_remain_cap - item) / bins_remain_cap_safe
    
    # Penalize bins that would overflow
    priority_scores[bins_remain_cap < item] = -np.inf
    
    # Penalize bins with remaining capacity just enough for this item
    # to avoid filling up small space and leaving larger space unused
    priority_scores[bins_remain_cap - item < 0.01 * np.max(bins_remain_cap_safe)] -= 1
    
    return priority_scores
```
