```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is lower if many bins are already in use.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Weight for remaining capacity (minimize unused space)
    cap_weight = 0.7
    # Weight for the number of bins (minimize number of bins used)
    bin_weight = 0.3

    # Priority based on remaining capacity
    cap_scores = (bins_remain_cap - item) ** 2  # Favor bins where the item fits snugly
    # Normalize so smaller values (better fit) have higher priority
    cap_scores = 1.0 / (cap_scores + 1e-6)  # Avoid division by zero

    # Preference to fill less full bins and prefer bins that already contain items (fewer empty bins used)
    # This encourages a more balanced bin packing
    bin_preference = 1.0 / (1.0 + np.abs(bins_remain_cap - bins_remain_cap.mean()))

    # Combined score
    priority_scores = cap_weight * cap_scores + bin_weight * bin_preference

    return priority_scores
```
