```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on exact fits, penalizes large gaps using a logistic function for flexible penalties,
    and prioritizes bins nearly fitting the item size while discouraging large unused capacities.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between item size and remaining capacity in each bin
    diff = np.abs(bins_remain_cap - item)
    # Logistic function to create penalty for large gaps
    penalty = 1 / (1 + np.exp(0.5 * diff))
    # Ensure only bins with enough capacity are considered
    priority_scores = np.where(bins_remain_cap >= item, penalty, 0)
    return priority_scores
```
