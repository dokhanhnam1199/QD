```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins that can fit the item while also considering the remaining capacity
    after the item is added. It aims to minimize the capacity usage post-fit, while heavily penalizing bins that
    would be nearly filled by the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check if the item can fit in each bin
    can_fit = (bins_remain_cap >= item).astype(float)
    
    # Avoid division by zero by adding a small epsilon value
    epsilon = 1e-6
    
    # Calculate the remaining capacity after adding the item for bins where the item can fit
    remaining_capacity_after_fit = bins_remain_cap - item
    
    # Calculate the priority score: prioritize bins with larger remaining capacity after adding the item
    # Use a more nuanced approach to penalize bins that fill up nearly
    priority_scores = can_fit * (np.exp(-(item / (remaining_capacity_after_fit + epsilon))))
    
    return priority_scores
```
