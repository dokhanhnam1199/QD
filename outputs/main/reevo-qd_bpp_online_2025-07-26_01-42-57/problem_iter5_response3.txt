```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation focuses on exact fits, penalizes large gaps using a logistic function to flexibly penalize unused capacity, and prioritizes bins nearly fitting the item size.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the gap between item size and remaining capacity in each bin
    gap = bins_remain_cap - item
    # Logistic function to penalize large gaps
    log_penalization = 1 / (1 + np.exp(-0.5 * gap))
    # Priority is high if the bin has enough capacity and the gap is penalized
    priority_scores = np.where(bins_remain_cap >= item, 1 - log_penalization, 0)
    return priority_scores
```
