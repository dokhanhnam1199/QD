```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation focuses on whether the item can fit in each bin and minimizes the capacity usage
    in order to keep bins open for future items. It penalizes bins that would be filled too much by the item.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check if the item can fit in each bin
    can_fit = (bins_remain_cap >= item).astype(int)
    
    # Avoid division by zero by adding a small epsilon value
    epsilon = 1e-6
    
    # Calculate the remaining capacity after adding the item for bins where the item can fit
    remaining_capacity_after_fit = bins_remain_cap - item
    
    # Calculate the priority score: prioritize bins with larger remaining capacity after adding the item
    # Inverse of remaining capacity after fit + epsilon ensures that bins that fill up the item completely get low priority
    priority_scores = can_fit / (remaining_capacity_after_fit + epsilon)
    
    return priority_scores
```
