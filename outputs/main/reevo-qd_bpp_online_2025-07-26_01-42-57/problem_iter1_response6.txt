```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of times a bin has available space for the item.
    We aim to fill bins that are closest in size to the item, promoting a compact packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate absolute difference between item size and remaining capacity in each bin
    diff = np.abs(bins_remain_cap - item)
    # Priority is high if the difference is low and the bin has enough capacity
    priority_scores = np.where(bins_remain_cap >= item, 1 / (1 + diff), 0)
    return priority_scores
```
