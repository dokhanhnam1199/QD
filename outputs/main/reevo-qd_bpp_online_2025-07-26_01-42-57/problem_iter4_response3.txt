```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This implementation focuses on prioritizing exact fits, penalizing large gaps, and considering item characteristics to efficiently manage bin space.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin, where capacity is the difference between bin size and the current total size of items inside the bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin. Higher score means higher priority to place the item in the bin.
    """
    # Exact fits get the highest priority
    exact_fit_mask = (bins_remain_cap == item).astype(int) * 1000
    
    # Bins that can't fit the item get a very low priority
    cannot_fit_mask = (bins_remain_cap < item).astype(int) * -1000
    
    # Small penalty for remaining capacity to avoid wasting space
    small_penalty = bins_remain_cap * -0.1
    
    # Larger penalty for large remaining capacity to strongly discourage leaving large gaps
    large_gap_penalty = -((bins_remain_cap - item) ** 2) * 0.01
    
    # Total priority score combining various components
    priority_score = exact_fit_mask + cannot_fit_mask + small_penalty + large_gap_penalty
    
    return priority_score
```
