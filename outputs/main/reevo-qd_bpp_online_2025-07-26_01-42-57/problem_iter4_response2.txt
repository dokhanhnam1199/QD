```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation uses a logistic function to prioritize bins with minimal gaps and penalizes larger unused capacities.
    Feasible bins (those with enough capacity) are prioritized over infeasible ones. The logistic function is used to
    smoothly handle the transition between feasible and infeasible bins, while also penalizing larger gaps within feasible bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    import numpy as np

    # Calculate the difference between item size and remaining capacity in each bin
    diff = bins_remain_cap - item
    # Logistic function to prioritize bins that can fit the item with minimal gap
    feasibility_factor = 1 / (1 + np.exp(-10 * diff))
    # Logistic function to penalize larger unused capacities smoothly
    penalty_factor = 1 / (1 + np.exp(10 * (diff - 0.01 * bins_remain_cap)))  # Smaller gaps are more preferred
    # Combine feasibility and penalty to get priority scores
    priority_scores = feasibility_factor * penalty_factor
    return priority_scores
```
