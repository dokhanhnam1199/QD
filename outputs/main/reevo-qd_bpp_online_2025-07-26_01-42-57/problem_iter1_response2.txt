```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of times a bin has approached full capacity.
    We prioritize bins that have more remaining capacity but penalize bins that have been frequently close to full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the ideal bin capacity to keep bins balanced
    average_cap = np.mean(bins_remain_cap)
    
    # Calculate theoretical imbalance of each bin if the item is added
    imbalance = np.abs(bins_remain_cap - item - average_cap)
    
    # Define a decay factor for the smaller bins to avoid very small bins getting too high priority
    decay_factor = (bins_remain_cap + 1) ** -1  # Prevent division by zero
    
    # Higher score for less imbalance and smaller numbers mean fuller bins recently (historical inefficiency factor)
    priority_scores = 1 / (imbalance + 1) * decay_factor  # Avoid division by zero with +1
    
    # Penalize bins that have less remaining capacity to avoid creating inefficiencies in future
    capacity_factors = (average_cap - bins_remain_cap) / average_cap  # Normalized based on average capacity
    priority_scores -= capacity_factors  # Subtract decrease in capacity efficiency
    
    return priority_scores
```
