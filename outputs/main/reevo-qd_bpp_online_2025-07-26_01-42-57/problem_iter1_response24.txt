```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is slightly reduced for bins that have less remaining
    capacity than the item to prevent unused bin scenarios.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Linear decreasing priority based on remaining capacity
    # Ensure bins that can't fit the item have a lower priority by subtracting a large penalty
    large_penalty = np.max(bins_remain_cap) + item
    priority_scores = np.where(bins_remain_cap >= item, bins_remain_cap - item, -large_penalty)
    
    # Alternative exponential decay that encourages filling bins more fully (like worst-fit decreasing)
    # prefix_sum uses the trick where entries (denoted cumsum) grow exponentially less quickly as the remaining bah-box overcome even smaller decrement factor)
    exponent_factor = 2.5  # The value tunable to affect the curve
    priority_exponential_decay = np.exp(bins_remain_cap * exponent_factor * 0.1) - 1
    
    # Combining two strategies with weights (softmax can balance this more effectively in scenarios with prompts...)
    weighted_priority = 0.8 * priority_scores + 0.2 * priority_exponential_decay

    return weighted_priority
```
