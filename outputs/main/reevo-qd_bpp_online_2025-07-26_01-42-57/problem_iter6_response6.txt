```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation focuses on minimizing the difference between the item size and the remaining capacity
    of the bins where the item can fit, aiming for a compact packing while ensuring capacity is utilized.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Check if the item can fit in each bin
    can_fit = bins_remain_cap >= item
    
    # Calculate the absolute difference between the item size and remaining capacity for feasible bins
    diff = np.abs(bins_remain_cap - item)
    
    # Assign priority score based on the inverse of the difference for feasible bins, otherwise 0
    priority_scores = np.where(can_fit, 1 / (1 + diff), 0)
    
    return priority_scores
```
