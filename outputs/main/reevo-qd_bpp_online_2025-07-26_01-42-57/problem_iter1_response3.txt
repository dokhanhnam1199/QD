```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of times a bin has approached full capacity.
    We prioritize bins that have more remaining capacity but penalize bins that have been frequently close to full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the ratio of remaining capacity to item size
    capacity_ratios = bins_remain_cap / item
    
    # Penalty for bins nearing their full capacity in the past (can be extended with actual history)
    # Here, a mock-up implementation is provided, assuming bins with more remaining capacity are newer or empty
    # A real implementation would require additional data structures to track how bins' capacities change over time
    history_penalty = (bins_remain_cap.max() - bins_remain_cap) / bins_remain_cap.max()
    
    # Priority is based on capacity utilization with less penalty for bins with higher capacity
    priority_values = capacity_ratios - history_penalty
    
    # Set priority of bins which cannot fit the current item to a very low value
    priority_values[bins_remain_cap < item] = -np.inf
    
    return priority_values
```
