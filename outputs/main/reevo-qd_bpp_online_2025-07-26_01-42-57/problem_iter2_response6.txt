```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This function prioritizes bins based on the remaining capacity, penalizes bins
    that cannot fit the item, and boosts the bin with the second smallest gap to
    minimize fragmentation and maximize bin usage.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority scores
    priority = np.zeros_like(bins_remain_cap)
    
    # Calculate remaining capacity if item is added
    remaining_after_insertion = bins_remain_cap - item
    
    # Penalize bins that cannot fit the item
    priority[remaining_after_insertion < 0] = -np.inf
    
    # Prioritize bins with the least gaps (highest remaining capacity after insertion)
    priority[remaining_after_insertion >= 0] = remaining_after_insertion
    
    # Find the second smallest gap (excluding non-feasible bins)
    feasible_remainings = remaining_after_insertion[remaining_after_insertion >= 0]
    if len(feasible_remainings) > 1:
        # Sort unique remaining capacities to find the second smallest
        unique_remainings = np.unique(feasible_remainings)
        if len(unique_remainings) > 1:
            second_smallest_gap = unique_remainings[1]
            # Boost the bin(s) with the second smallest gap
            priority[bins_remain_cap == (second_smallest_gap + item)] += 1
    
    return priority
```
