```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This implementation considers both the remaining capacity and the number of
    bins used using a weighted score. Bins that are closer to being full get higher
    priority, but the priority is slightly reduced for bins that have less remaining
    capacity than the item to prevent unused bin scenarios.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Apply a penalty to bins where the remaining capacity is less than the item size
    penalty_mask = bins_remain_cap < item
    # Penalize those bins by giving them a very low priority score
    penalty_amount = -1000.0
    
    # Calculate the priority scores such that bins with higher remaining capacity have higher scores
    priority_scores = bins_remain_cap - bins_remain_cap.min()
    
    # Only allow placements where the bin has enough room for the item
    priority_scores[bins_remain_cap <= item] = 0
    
    # Apply the penalty
    priority_scores[penalty_mask] += penalty_amount
    
    return priority_scores
```
