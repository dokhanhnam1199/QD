```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation aims to minimize the difference between the item size and the remaining bin capacity
    while ensuring that the bin has enough capacity to hold the item. It uses a smooth penalty function to
    prioritize bins that are closest in size to the item, promoting a compact packing strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Penalize bins that cannot fit the item
    penalty = np.where(bins_remain_cap >= item, 0, -10000)
    # Calculate the absolute difference between item size and remaining capacity in each bin
    diff = np.abs(bins_remain_cap - item)
    # Priority is high if the difference is low and the bin has enough capacity, using a sigmoid-like function
    priority_scores = penalty + np.where(bins_remain_cap >= item, 1 / (1 + diff), 0)
    return priority_scores
```
