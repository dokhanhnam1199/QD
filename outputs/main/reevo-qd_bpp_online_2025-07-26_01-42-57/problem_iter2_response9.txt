```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation uses a logistic function to balance the priority of bins
    based on their remaining capacity. Infeasible bins (where the remaining capacity
    is less than the item size) are heavily penalized by assigning them a very low
    priority score.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Assign a very low score to bins that cannot fit the item
    priority_scores = np.where(bins_remain_cap >= item, bins_remain_cap, -10000)
    
    # Use logistic function to balance priorities
    priority_scores = 1 / (1 + np.exp(-priority_scores))
    
    return priority_scores
```
