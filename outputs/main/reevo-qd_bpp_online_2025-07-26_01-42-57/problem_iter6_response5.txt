```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation prioritizes bins that minimize the gap between the item size and the remaining capacity,
    using a smooth decay function and ensuring the bin has enough capacity to fit the item.
    The priority scores are normalized to ensure they are between 0 and 1.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the gap between the item size and the remaining capacity
    gap = bins_remain_cap - item
    # Apply a smooth decay function to prioritize bins with minimal gap
    priority_scores = np.where(gap >= 0, 1 / (1 + (gap / item) ** 2), 0)
    # Normalize the scores to be between 0 and 1
    max_score = np.max(priority_scores)
    priority_scores = priority_scores / (max_score + 1e-6)
    return priority_scores
```
