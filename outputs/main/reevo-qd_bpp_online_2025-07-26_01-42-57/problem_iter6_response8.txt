```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    This implementation combines feasibility checks with sigmoid penalties to balance fit and gap minimization.
    Bins that are infeasible (cannot fit the item) are given a priority score of 0.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the difference between item size and remaining capacity in each bin
    diff = bins_remain_cap - item
    
    # Identify feasible bins (those that can fit the item)
    feasible = (diff >= 0).astype(float)
    
    # Calculate a sigmoid penalty factor for the remaining capacity after adding the item
    # This prioritizes bins with smaller gaps after the item is added
    penalty_factor = 1 / (1 + np.exp(-diff / item))
    
    # Combine feasibility and penalty to get priority scores
    # The priority is high for bins that are feasible and have smaller gaps after adding the item
    priority_scores = feasible * penalty_factor
    
    return priority_scores
```
