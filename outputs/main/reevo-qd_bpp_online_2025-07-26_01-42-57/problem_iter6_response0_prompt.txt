{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation uses a logistic function to prioritize bins with minimal gaps and penalizes larger unused capacities.\n    Infeasible bins (those with insufficient capacity) are given a very low priority.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the difference between item size and remaining capacity in each bin\n    diff = bins_remain_cap - item\n    # Logistic function to prioritize bins that can fit the item\n    feasible = (diff >= 0).astype(float)\n    # Penalize larger unused capacities using a sigmoid function\n    penalty_factor = 1 / (1 + np.exp(diff / item))\n    # Combine feasibility and penalty to get priority scores\n    priority_scores = feasible * (1 - penalty_factor)\n    return priority_scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of times a bin has available space for the item.\n    We aim to fill bins that are closest in size to the item, promoting a compact packing.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate absolute difference between item size and remaining capacity in each bin\n    diff = np.abs(bins_remain_cap - item)\n    # Priority is high if the difference is low and the bin has enough capacity\n    priority_scores = np.where(bins_remain_cap >= item, 1 / (1 + diff), 0)\n    return priority_scores\n\n[Reflection]\nPrioritize bins with minimal capacity gaps and ensure feasibility first; incorporate compactness and avoid penalties on partial fits.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}