{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of times a bin has approached full capacity.\n    We prioritize bins that have more remaining capacity but penalize bins that have been frequently close to full.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the ratio of remaining capacity to item size\n    capacity_ratios = bins_remain_cap / item\n    \n    # Penalty for bins nearing their full capacity in the past (can be extended with actual history)\n    # Here, a mock-up implementation is provided, assuming bins with more remaining capacity are newer or empty\n    # A real implementation would require additional data structures to track how bins' capacities change over time\n    history_penalty = (bins_remain_cap.max() - bins_remain_cap) / bins_remain_cap.max()\n    \n    # Priority is based on capacity utilization with less penalty for bins with higher capacity\n    priority_values = capacity_ratios - history_penalty\n    \n    # Set priority of bins which cannot fit the current item to a very low value\n    priority_values[bins_remain_cap < item] = -np.inf\n    \n    return priority_values\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n[Reflection]\nFocus on packing efficiency; avoid unnecessary penalties and prioritize available space flexibly.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}