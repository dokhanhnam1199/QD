```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority scores. Give very low priority to infeasible bins.
    priorities = np.zeros_like(bins_remain_cap, dtype=float) - np.inf
    
    # Set feasible bins (those with sufficient capacity) to 0 initially
    feasible_bins_mask = bins_remain_cap >= item
    priorities[feasible_bins_mask] = 0

    # Calculate wasted space if the item is placed in a feasible bin.
    wasted_space = bins_remain_cap - item
    wasted_space[~feasible_bins_mask] = np.inf # Set wasted space of infeasible bins to infinity.

    # Give higher priority to bins with less wasted space, but non-linearly to heavily penalize near-empty placements.
    # Newton's Law of Cooling Inspired: the rate of priority increase diminishes as wasted space approaches zero.
    priorities[feasible_bins_mask] = np.exp(-wasted_space[feasible_bins_mask])
    
    # A dash of gravitational influence: heavier items prefer lower, fuller bins to minimize structural stress
    # priorities[feasible_bins_mask] *= (bins_remain_cap[feasible_bins_mask] / np.max(bins_remain_cap))

    # Enhance Discrimination: Slightly penalize almost-full bins to encourage packing moderately full bins and prevent very small scraps. This is very important in online setting.
    almost_full_mask = (bins_remain_cap >= item) & (wasted_space < (0.1 * np.mean(bins_remain_cap)))  #tune this, or depend on bin size?
    priorities[almost_full_mask] *= 0.9 # Reduce priorities for almost full bins

    return priorities
```
