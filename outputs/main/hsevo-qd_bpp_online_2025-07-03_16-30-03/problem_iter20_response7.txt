```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines remaining space, feasibility, near-fullness, and fragmentation penalty with dynamic factor prioritization."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap  # Use least-filled if no fit
        return priorities

    remaining_space = bins_remain_cap - item
    
    # Prioritize almost full bins
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 5.0  # High priority to nearly-full

    # Prioritize bins with smaller remaining space
    priorities[feasible_bins] += 1 / (remaining_space[feasible_bins] + 1e-9)
    priorities[feasible_bins] += 1.0

    # Dynamic Fragmentation Penalty
    excessive_space = np.logical_and(feasible_bins, remaining_space > 0.5)
    priorities[excessive_space] -= 1.0
    
    # Look-Ahead: Consider Next Item Size
    hypothetical_next_items = np.array([0.1, 0.2, 0.3, 0.4, 0.5])
    for next_item_size in hypothetical_next_items:
        ideal_remaining_space = next_item_size
        close_to_ideal = np.logical_and(feasible_bins, np.abs(remaining_space - ideal_remaining_space) < 0.1)
        priorities[close_to_ideal] += 0.5
        
    return priorities
```
