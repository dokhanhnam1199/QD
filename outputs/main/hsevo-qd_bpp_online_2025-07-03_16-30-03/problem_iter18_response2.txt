```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Improved version focusing on efficiency and targeted penalties/thresholds.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # Prioritize bins with largest remaining capacity even if infeasible
        # Avoids spreading items thinly across all bins.
        priorities = bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item
    remaining_space_ratio = remaining_space / bins_remain_cap
    
    # Base priority:  Favor bins with smallest resulting waste
    priorities[feasible_bins] = 1.0 / (remaining_space[feasible_bins] + 1e-9)

    # Threshold-based adjustments:
    
    # 1. Strongly prioritize bins getting filled close to full (>= 90%)
    almost_full = np.logical_and(feasible_bins, (1 - remaining_space_ratio) >= 0.9)
    priorities[almost_full] += 10.0  # Significantly boost priority
    
    # 2. Penalize bins that result in leaving a large fraction of space unused (>= 50%)
    large_waste = np.logical_and(feasible_bins, remaining_space_ratio >= 0.5)
    priorities[large_waste] -= 2.0  # Mild penalty to avoid large waste

    # 3. Slight encouragement for bins that accommodate the item nicely without excessive waste
    good_fit = np.logical_and(feasible_bins, np.logical_and(remaining_space_ratio < 0.5,remaining_space_ratio > 0.1))
    priorities[good_fit]+= 1.0

    return priorities
```
