```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a base value (e.g., all zeros)
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Iterate through bins and calculate priorities. Only consider bins where item fits
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:  # Only consider bins where item fits
            # Tesla's spark: Combination of different heuristic principles!
            # 1. Remaining Capacity Maximization:
            remaining_after_fit = cap - item
            priorities[i] += remaining_after_fit  # Higher remaining capacity, higher priority

            # 2. Item Fit Proximity:
            fit_ratio = item / cap
            priorities[i] += (1 - abs(fit_ratio - 0.7)) # Prioritize bins whose available space closely equals to item_size
            # 3. Balance: A penalty for near-full bins (to avoid fragmentation), not very crucial, but helpful.
            if remaining_after_fit <= 0.1:  # If remaining capacity is very small
                priorities[i] -= 0.05 # Slightly demote nearly full bin, prevents frag, not a lot

            # 4. Avoidance of the "too-perfect fit": This might hurt overall packing later on if small bin blocks big items
            if fit_ratio > 0.95:
               priorities[i] -= 0.01 # Discourage almost perfectly sized fits

            # 5. Avoid extremely empty Bins: A very weak signal, but helps indirectly.
            priorities[i] -= (0.0001 * cap ) # A minuscule penalty to favor partially filled bins
        else:
            priorities[i] = -np.inf  # Assign negative infinity if the item doesn't fit

    return priorities
```
