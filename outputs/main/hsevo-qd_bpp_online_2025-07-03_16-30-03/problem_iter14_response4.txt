```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines remaining space, feasibility, near-fullness for priority."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item
    
    # Prioritize almost full bins based on remaining space
    priorities[feasible_bins] = 1 / (remaining_space[feasible_bins] + 1e-9)
    # Incentivize bins that are feasible with minor constant value
    priorities[feasible_bins] += 0.2
    
    # Heavily prioritize bins that become almost full
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 5.0

    # Moderate priority boost for bins that aren't "almost full"
    # but still have relatively little space left. Prevents extreme fragmentation.
    moderately_full = np.logical_and(feasible_bins, remaining_space < 0.3)
    priorities[moderately_full] += 2.0

    # Slightly penalize bins that are too empty.
    priorities[feasible_bins] -= (bins_remain_cap[feasible_bins] > 0.7) * 0.5
    
    return priorities
```
