```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on feasibility, fill level, and fragmentation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap  # Use least-filled if no fit
        return priorities

    remaining_space = bins_remain_cap - item
    priorities[feasible_bins] = 1.0 / (remaining_space[feasible_bins] + 1e-9)
    priorities[feasible_bins] += 0.5

    almost_full = np.logical_and(feasible_bins, remaining_space < 0.2)
    priorities[almost_full] += 3.0

    too_much_space = np.logical_and(feasible_bins, remaining_space > 0.5)
    priorities[too_much_space] -= 1.0

    # Add incentive to bins with larger remaining capacity only if they not almost full
    larger_space = np.logical_and(feasible_bins, remaining_space > 0.3) #Increased threshold to 0.3
    larger_space = np.logical_and(larger_space, ~almost_full)
    priorities[larger_space] += remaining_space[larger_space] * 0.2
    
    return priorities
```
