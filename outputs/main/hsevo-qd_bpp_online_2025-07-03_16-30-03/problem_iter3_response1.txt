```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # A bin is feasible if it can accommodate the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
      # If no bin can fit, consider using the least-filled bins 
      # (though it won't actually fit).  This helps guide decision-making
      # in extreme cases. The priority is slightly negative and inversely propotional
      # to how full is the bin.
      priorities = -bins_remain_cap 
      return priorities

    # First consideration: How much empty space will be left *after* adding the item?
    remaining_space = bins_remain_cap - item
    
    #Prioritize almost full bins
    priorities[feasible_bins] = 1/(remaining_space[feasible_bins]+1e-9) #avoid division by zero. Want small values of remaining_space to yield large priorities.
    
    #Try to fill the bins
    priorities[feasible_bins] += np.where(remaining_space[feasible_bins] >= 0 , 1.0,0)
    
    # Penalize bins where item fits only by tiny amount to encourage filling them up
    # This makes a significant different (a trick from Quantum Mechanics, like a wave function collapse based on smallest energy changes)
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 5.0 # Greatly prioritize nearly-full bins

    # NEW: Introduce a moderate penalty for bins with excessive remaining space.
    # This encourages filling bins more completely and reduces fragmentation.
    excessive_space = np.logical_and(feasible_bins, remaining_space > 0.5) #tune parameter
    priorities[excessive_space] -= 1.0  # Moderate penalty

    # NEW: Give a slight bonus to bins whose remaining capacity *after* placing the
    # item is close to the size of the next smallest item seen so far.
    # This anticipates future placements and attempts to create suitable spaces.

    # In a real implementation, we'd likely have access to a history of item sizes.
    # Here, we'll simulate it by considering "hypothetical" next item sizes.
    hypothetical_next_items = np.array([0.1, 0.2, 0.3, 0.4, 0.5])  # Example sizes
    for next_item_size in hypothetical_next_items:
        ideal_remaining_space = next_item_size
        close_to_ideal = np.logical_and(feasible_bins, np.abs(remaining_space - ideal_remaining_space) < 0.1)
        priorities[close_to_ideal] += 0.5

    
    return priorities
```
