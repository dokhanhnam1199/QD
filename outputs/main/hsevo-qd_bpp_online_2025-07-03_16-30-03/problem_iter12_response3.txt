```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: crucial first step
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # If no bin can fit, prioritize bins with largest remaining capacity (least filled).
        # Helps to open new bins when necessary and avoid stranding items.
        priorities = bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item

    # Incentive-driven approach with calibrated weights:
    # 1. Encourage tighter fits (smaller remaining space gets higher priority).
    priorities[feasible_bins] += 1.0 / (remaining_space[feasible_bins] + 1e-9)

    # 2. Reward filling up bins significantly.  Stronger incentive than v1.
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.2)  # Expanded range slightly
    priorities[almost_full] += 10.0  # Increased weight

    # 3. Moderate bonus for bins that the item fits reasonably well, but are not almost full.
    reasonably_full = np.logical_and(feasible_bins, remaining_space >= 0.2)
    reasonably_full = np.logical_and(reasonably_full, remaining_space < bins_remain_cap.max()*0.7) # up to 70% full
    priorities[reasonably_full] += 2.0

    # 4. Discourage large wasted space, but less aggressively than encouraging small space
    wasted_space = np.logical_and(feasible_bins, remaining_space >= 0.7*bins_remain_cap.max()) # avoid prioritizing very empty bins, if a more reasonable choice exists
    priorities[wasted_space] -= 0.5 # mild discouragement


    return priorities
```
