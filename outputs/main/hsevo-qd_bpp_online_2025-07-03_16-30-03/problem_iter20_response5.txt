```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on remaining space, feasibility, and near-fullness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item
    priorities[feasible_bins] = 1.0 / (remaining_space[feasible_bins] + 1e-9)  # Inverse remaining space
    priorities[feasible_bins] += 0.5  # Base incentive

    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 10.0 # Higher almost full

    too_much_space = np.logical_and(feasible_bins, remaining_space > 0.5)
    priorities[too_much_space] -= 1.0
    
    return priorities
```
