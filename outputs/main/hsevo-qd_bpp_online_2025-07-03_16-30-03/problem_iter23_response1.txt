```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on remaining space, utilization, and feasibility."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item
    space_priority = 1 / (remaining_space + 1e-9)
    future_utilization = (bins_remain_cap - remaining_space) / (bins_remain_cap + item)

    utilization_priority = np.exp(-((future_utilization - 0.7)**2) / 0.05)

    priorities[feasible_bins] = space_priority[feasible_bins] + utilization_priority[feasible_bins]

    fill_threshold = np.mean(bins_remain_cap[feasible_bins])
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1 * fill_threshold)
    priorities[almost_full] += 10.0

    mean_remaining_item_size = item
    look_ahead_penalty = np.logical_and(feasible_bins, remaining_space < mean_remaining_item_size)
    priorities[look_ahead_penalty] -= 2.0
    
    #Adding small item consideration (balancing space)
    small_item_bonus = np.logical_and(feasible_bins, item < 0.2 * np.mean(bins_remain_cap))
    priorities[small_item_bonus] += 1.0

    return priorities
```
