```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # A bin is feasible if it can accommodate the item
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # If no bin can fit, consider using the least-filled bins
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item

    # Prioritize based on fill ratio *after* placing the item.
    fill_ratio = item / bins_remain_cap
    priorities[feasible_bins] = fill_ratio[feasible_bins]


    # Remaining space after adding the item. Prioritize smaller remaining space to reduce fragmentation.
    priorities[feasible_bins] += 1.0 / (remaining_space[feasible_bins] + 1e-9)


    #Adjust almost full bin
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 5.0


    # Moderate penalty for creating excessively small remaining space that might be unusable, and only if
    # other bins can accommodate.
    tiny_space = np.logical_and(feasible_bins, remaining_space < 0.05)
    if np.sum(feasible_bins) > 1:  # Only apply penalty if we have options.
        priorities[tiny_space] -= 2.0  #Small penalty so it is not always avoided


    return priorities
```
