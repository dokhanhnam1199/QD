```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines remaining space, feasibility, near-fullness, and adaptive space penalty."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item

    # Prioritize based on inverse remaining space if feasible
    priorities[feasible_bins] = 1 / (remaining_space[feasible_bins] + 1e-9)
    priorities[feasible_bins] += np.where(remaining_space[feasible_bins] >= 0, 1.0, 0)

    # Heavily prioritize bins that become almost full
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 5.0

    # Adaptive penalty for excessive space.  The penalty increases as bins fill.
    # This is based on the intuition that fragmentation becomes more important later.
    fill_ratio = 1.0 - (bins_remain_cap / np.max(bins_remain_cap))
    priorities[feasible_bins] -= (remaining_space[feasible_bins] / np.max(bins_remain_cap)) * (0.5 + fill_ratio[feasible_bins] * 0.5)

    return priorities
```
