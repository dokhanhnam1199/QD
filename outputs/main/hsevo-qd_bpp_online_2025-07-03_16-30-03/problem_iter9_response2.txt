```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item

    # Prioritize bins that fit the item best (minimize wasted space, but not too much)
    # Add a scaling factor to make the priority more significant

    fit_quality = np.exp(-0.5 * (remaining_space[feasible_bins] / np.mean(bins_remain_cap))**2)
    priorities[feasible_bins] += fit_quality

    # Encourage filling bins, but less aggressively than before, to avoid premature commitments
    priorities[feasible_bins] += 0.5 * np.where(remaining_space[feasible_bins] >= 0, 1.0, 0)

    # Prioritize almost-full bins, but with a smaller bonus.
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 2.0
    
    # Introduce penalty for creating very small remaining spaces
    too_small = np.logical_and(feasible_bins, remaining_space > 0.01)
    too_small = np.logical_and(too_small, remaining_space < 0.1)
    priorities[too_small] -=0.5

    return priorities
```
