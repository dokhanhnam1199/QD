```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # Prioritize least filled bins when no feasible bins exist
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item

    # Prioritize based on remaining space, similar to v1 but with some modifications
    priorities[feasible_bins] = 1 / (remaining_space[feasible_bins] + 1e-9)

    # Incentive for filling bins
    priorities[feasible_bins] += np.where(remaining_space[feasible_bins] >= 0, 1.0, 0)

    # Stronger emphasis on nearly-full bins
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 5.0

    # Moderate penalty for bins that become *too* empty after packing. This discourages
    # creating overly fragmented bins and helps to utilize bins more fully.
    # The penalty is applied to feasible bins that, after packing 'item', will have remaining
    # capacity greater than, say, 50% of the bin's original capacity (implicitly assumed to be 1.0 here)
    too_empty = np.logical_and(feasible_bins, remaining_space > 0.5)
    priorities[too_empty] -= 2.0  # Apply a negative penalty
    
    #Implement a penalty if the bin can fit two items. This helps avoid putting too small items first
    # making it impossible to fit larger items.
    can_fit_two = np.logical_and(feasible_bins, remaining_space >= item)
    priorities[can_fit_two] -= 1.0

    return priorities
```
