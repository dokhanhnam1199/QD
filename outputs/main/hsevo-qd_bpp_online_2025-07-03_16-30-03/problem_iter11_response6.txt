```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes feasible bins, rewards near-full, penalizes large gaps."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap  # Try to put in least-filled if no fit
        return priorities

    remaining_space = bins_remain_cap - item
    
    # Base priority: inverse of remaining space. Smaller space => higher prio
    priorities[feasible_bins] = 1 / (remaining_space[feasible_bins] + 1e-9) 

    # Give a significant boost to bins that become almost full after packing.
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 5.0  # Higher reward for almost full bins

    # Slightly penalize bins where item occupies very small portion. 
    # Avoids putting tiny item in largest bin available if better choices exist
    large_gap = np.logical_and(feasible_bins, remaining_space > item*5) # Check if remaining space greater than 5x item size.
    priorities[large_gap] -= 1.0 # Apply a small penalty if large gap.

    return priorities
```
