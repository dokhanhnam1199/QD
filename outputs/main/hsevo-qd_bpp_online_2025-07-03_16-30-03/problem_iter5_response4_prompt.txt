{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # A bin is feasible if it can accommodate the item\n    feasible_bins = bins_remain_cap >= item\n    \n    if not np.any(feasible_bins):\n      # If no bin can fit, consider using the least-filled bins \n      # (though it won't actually fit).  This helps guide decision-making\n      # in extreme cases. The priority is slightly negative and inversely propotional\n      # to how full is the bin.\n      priorities = -bins_remain_cap \n      return priorities\n\n    # First consideration: How much empty space will be left *after* adding the item?\n    remaining_space = bins_remain_cap - item\n    \n    #Prioritize almost full bins\n    priorities[feasible_bins] = 1/(remaining_space[feasible_bins]+1e-9) #avoid division by zero. Want small values of remaining_space to yield large priorities.\n    \n    #Try to fill the bins\n    priorities[feasible_bins] += np.where(remaining_space[feasible_bins] >= 0 , 1.0,0)\n    \n    # Penalize bins where item fits only by tiny amount to encourage filling them up\n    # This makes a significant different (a trick from Quantum Mechanics, like a wave function collapse based on smallest energy changes)\n    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)\n    priorities[almost_full] += 5.0 # Greatly prioritize nearly-full bins\n\n    \n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                bins_remain_cap: np.ndarray,\n                division_eps: float = 3.735088610612452e-09,\n                fill_priority: float = 1.0928996375579447,\n                almost_full_threshold: float = 0.15468682056117616,\n                almost_full_priority: float = 6.826317618599449) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        division_eps: Epsilon to avoid division by zero.\n        fill_priority: Priority increment for bins where item fits.\n        almost_full_threshold: Threshold for considering a bin \"almost full\".\n        almost_full_priority: Priority increment for almost full bins.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # A bin is feasible if it can accommodate the item\n    feasible_bins = bins_remain_cap >= item\n    \n    if not np.any(feasible_bins):\n      # If no bin can fit, consider using the least-filled bins \n      # (though it won't actually fit).  This helps guide decision-making\n      # in extreme cases. The priority is slightly negative and inversely propotional\n      # to how full is the bin.\n      priorities = -bins_remain_cap \n      return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the best heuristic considers feasibility, remaining space, and near-fullness, while the worst only uses the ratio of item size to bin capacity. (2nd best) vs (second worst) shows the same pattern. Comparing (1st) vs (2nd), we see no difference. (3rd) vs (4th) shows no difference. Comparing (second worst) vs (worst), we see no difference. Comparing (7th) vs (1st) is that, the 7th one added negative reward to bins with excessive space and consider hypothetical items. Overall: the best heuristics combine multiple factors like feasibility, remaining space (prioritizing almost full bins), and sometimes penalizing excessive space or anticipating future item sizes. Simpler heuristics that only focus on a single factor (like item-to-bin ratio) perform worse. Adding many parameters to tune doesn't improve the heuristic.\n- \nOkay, let's redefine current self-reflection to design better heuristics, focusing on actionable insights and avoiding common pitfalls.\n\n*   **Keywords:** Multi-factor integration, Bin-filling, Look-ahead, Complexity management.\n*   **Advice:** Prioritize heuristics that aggressively fill bins while intelligently integrating several relevant factors. Explore simplified look-ahead mechanisms if the added complexity is justifiable.\n*   **Avoid:** Over-parameterization, single-factor reliance, neglecting computational cost.\n*   **Explanation:** Aim for a balance. Don't just fill bins blindly, consider other constraints. Don't add look-ahead if it slows down the search drastically. Multi-factor integration should be streamlined.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}