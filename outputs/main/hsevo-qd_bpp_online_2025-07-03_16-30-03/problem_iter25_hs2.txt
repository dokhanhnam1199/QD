import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, almost_full_threshold: float = 0.06561897566994977,
                  almost_full_priority: float = 2.1057126587067114, excessive_space_threshold: float = 0.4689977141884046,
                  excessive_space_penalty: float = 0.649451070910568, feasible_bin_reward: float = 0.5744277450024077,
                  epsilon: float = 6.252835678125036e-09) -> np.ndarray:
    """Prioritizes feasible, near-full bins and penalizes excessive space."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item
    
    # Prioritize almost full bins based on remaining space
    priorities[feasible_bins] = 1 / (remaining_space[feasible_bins] + epsilon)
    
    # Heavily prioritize bins that become almost full
    almost_full = np.logical_and(feasible_bins, remaining_space < almost_full_threshold)
    priorities[almost_full] += almost_full_priority

    # Penalize bins with excessive space to encourage filling others
    excessive_space = np.logical_and(feasible_bins, remaining_space > excessive_space_threshold)
    priorities[excessive_space] -= excessive_space_penalty * remaining_space[excessive_space]
    
    # Give a base reward for feasible bins
    priorities[feasible_bins] += feasible_bin_reward

    return priorities
