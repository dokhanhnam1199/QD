```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item
    
    # Prioritize bins that fit the item reasonably well, but not too tightly.
    # This avoids leaving tiny spaces that are hard to fill later.
    fit_factor = np.clip((bins_remain_cap[feasible_bins] - item) / bins_remain_cap[feasible_bins], 0.1, 0.9)  # Normalize remaining space
    priorities[feasible_bins] = fit_factor

    # Bonus for filling bins reasonably well (e.g., >75% full after placement)
    well_filled = np.logical_and(feasible_bins, (bins_remain_cap - item) <= 0.25*bins_remain_cap)
    priorities[well_filled] += 0.5

    # Strong bonus for bins that become nearly full after placement
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 1.5

    # Moderate penalty for bins where the item barely fits
    barely_fits = np.logical_and(feasible_bins, remaining_space < 0.2)
    priorities[barely_fits] -= 0.2


    return priorities
```
