```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # A bin is feasible if it can accommodate the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
      # If no bin can fit, consider using the least-filled bins 
      # (though it won't actually fit).  This helps guide decision-making
      # in extreme cases. The priority is slightly negative and inversely propotional
      # to how full is the bin.
      priorities = -bins_remain_cap 
      return priorities

    # First consideration: How much empty space will be left *after* adding the item?
    remaining_space = bins_remain_cap - item
    
    #Prioritize almost full bins
    priorities[feasible_bins] = 1/(remaining_space[feasible_bins]+1e-9) #avoid division by zero. Want small values of remaining_space to yield large priorities.
    
    #Try to fill the bins
    priorities[feasible_bins] += np.where(remaining_space[feasible_bins] >= 0 , 1.0,0)
    
    # Penalize bins where item fits only by tiny amount to encourage filling them up
    # This makes a significant different (a trick from Quantum Mechanics, like a wave function collapse based on smallest energy changes)
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 5.0 # Greatly prioritize nearly-full bins

    # Predictive element: Slightly penalize bins that, after this item, become *too* small
    # to accommodate potentially larger items in the future (heuristic threshold 0.25)
    too_small = np.logical_and(feasible_bins, remaining_space < 0.25)
    priorities[too_small] -= 2.0  # Mild penalty to discourage leaving extremely small spaces

    # Incentive for bins with substantial remaining capacity, but not too large to waste
    # The sweet spot is between 0.25 and 0.75 (can be adjusted)
    good_fit = np.logical_and(feasible_bins, np.logical_and(remaining_space >= 0.25, remaining_space <= 0.75))
    priorities[good_fit] += 1.5 # Boost bins with a moderately good fit.

    return priorities
```
