```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        priorities = -bins_remain_cap # same as v1 if no bin can fit.
        return priorities

    remaining_space = bins_remain_cap - item
    
    # Combination of factors:
    
    # 1. Empty Space (smaller remaining space is better - First-Fit-Decreasing inspired)
    priorities[feasible_bins] = 1.0 / (remaining_space[feasible_bins] + 1e-9)
    
    # 2. Fill-up factor (encourages full bins)
    priorities[feasible_bins] += np.where(remaining_space[feasible_bins] >= 0 , 1.0, 0)
    
    # 3. Almost Full (as in v1 but more aggressive, and only if a decent fit exists)
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    
    # 4. Penalize very large remaining spaces (reduces fragmentation)
    large_space = remaining_space > item * 2 #remaining space is more than twice the size of item
    priorities[feasible_bins] -= np.where(large_space[feasible_bins], 0.5, 0)

    # 5. Prioritize bins that, even after placing the item, remain under a certain threshold.
    # This prevents the creation of bins that are nearly empty after packing this item.  This also help distribute items across bins in the long run
    under_threshold = remaining_space > 0.15 # tune it
    priorities[feasible_bins] += np.where(under_threshold[feasible_bins] , 0.25, 0)  #add a slight priority if remaining space is under the threshold.

    # Explicit Check & Adjustments
    if np.any(almost_full):
        priorities[almost_full] += 5.0

    #Robustness - check for infinities or NaNs and set to 0 to avoid crashing
    priorities = np.nan_to_num(priorities, nan=0.0, posinf=0.0, neginf=0.0) # Handles cases where division by zero occurs or overflow in some calculations

    return priorities
```
