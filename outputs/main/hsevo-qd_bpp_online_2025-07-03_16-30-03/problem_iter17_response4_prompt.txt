{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # A bin is feasible if it can accommodate the item\n    feasible_bins = bins_remain_cap >= item\n    \n    if not np.any(feasible_bins):\n      # If no bin can fit, consider using the least-filled bins \n      # (though it won't actually fit).  This helps guide decision-making\n      # in extreme cases. The priority is slightly negative and inversely proportional\n      # to how full is the bin.\n      priorities = -bins_remain_cap\n      return priorities\n\n    # First consideration: How much empty space will be left *after* adding the item?\n    remaining_space = bins_remain_cap - item\n    \n    #Prioritize almost full bins using a refined approach:\n    priorities[feasible_bins] = 1.0 / (remaining_space[feasible_bins] + 1e-9) # Inverse remaining space\n    \n    # Incentive to use bins\n    priorities[feasible_bins] += 0.5  # Base incentive\n\n    # Stronger incentive for bins that are nearly full\n    almost_full = np.logical_and(feasible_bins, remaining_space < 0.2) #Increased threshold to 0.2\n    priorities[almost_full] += 3.0\n\n    # Small penalty for leaving too much space, to avoid fragmentation.\n    # This encourages filling bins more completely.\n    too_much_space = np.logical_and(feasible_bins, remaining_space > 0.5)\n    priorities[too_much_space] -= 1.0 \n    \n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines remaining space, feasibility, and near-fullness for priority.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        priorities = -bins_remain_cap\n        return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic considers remaining space, feasibility, and near-fullness, while the worst only considers the ratio of item size to bin capacity using logarithms. (2nd best) vs (2nd worst): The second-best prioritizes near-full bins and penalizes excessive space, while the second-worst also only uses the ratio of item to bin size. Comparing (1st) vs (2nd), we see that the first gives more incentives. (3rd) vs (4th): the third gives a bonus of 1.0 for the feasible bins, while the forth is the same as the first. Comparing (second worst) vs (worst), we see that they are identical. Overall: The better heuristics incorporate several factors such as remaining space, feasibility, \"almost full\" status, and sometimes penalties for excessive space, using specific thresholds and bonus values tuned to encourage efficient packing and avoid fragmentation. The weaker heuristics often rely solely on item-to-bin ratios, lacking nuanced considerations for bin fullness and packing efficiency. Adding more hyperparameter can make the code be worse. Too many `import` in the bad heuristics.\n- \nOkay, let's refine \"Current Self-Reflection\" to design better heuristics, avoiding the pitfalls of \"Ineffective Self-Reflection.\" We want actionable advice, not vague statements.\n\nHere's a redefined self-reflection approach:\n\n*   **Keywords:** Efficiency, Penalties, Thresholds, Simplicity, Iteration.\n*   **Advice:** Focus on a few key, easily calculated metrics (e.g., remaining space ratio) and use thresholds to trigger specific packing actions (e.g., trying to fill a bin above 90% capacity).\n*   **Avoid:** Over-complicating with too many factors or complex lookahead.\n*   **Explanation:** Start with a simple, fast heuristic. Systematically analyze failure cases (e.g., bins left with excessive space) and add *targeted* improvements (penalties, thresholds) to address those specific weaknesses, keeping it iterative and measurable.\n\nThis aims for a balanced approach: acknowledging the value of multiple factors while emphasizing simplicity and iterative refinement based on observed performance.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}