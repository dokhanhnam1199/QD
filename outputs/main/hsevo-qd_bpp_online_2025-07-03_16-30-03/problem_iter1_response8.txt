```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a small value to avoid division by zero and to allow for later adjustments
    priorities = np.zeros_like(bins_remain_cap, dtype=float) - 1e9

    # Iterate through each bin's remaining capacity
    for i, cap in enumerate(bins_remain_cap):
        # Check if the item fits into the bin
        if item <= cap:
            # Calculate the wasted space if the item is placed in this bin.
            wasted_space = cap - item

            # Assign priority based on a combination of factors:
            # 1. Inverse of wasted space (favors bins with less wasted space)
            # 2. Relative fullness after placing the item (favors fuller bins)

            # Avoid division by zero by adding a small constant
            priorities[i] = (1 / (wasted_space + 1e-6)) + (item / (cap + 1e-6))
        else:
            priorities[i] = -1e9 # Assign very low priority if item doesnt fit
            

    return priorities
```
