```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item
    n_bins = len(bins_remain_cap)
    
    if not np.any(feasible_bins):
        # If no bin can fit, consider using the least-filled bins.
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item
    
    # Adaptive weight for almost-full bins, increasing as we fill more bins to avoid fragmentation
    fill_ratio = np.sum(bins_remain_cap < 1) / n_bins #Assume bin capacity is 1. Dynamically measure fragmentation of available bins.
    almost_full_weight = 5.0 + 10.0 * fill_ratio  # Increase weight as bins get fuller

    # Prioritize almost full bins more strongly
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += almost_full_weight

    # Basic priority based on remaining space (try to fill bins)
    priorities[feasible_bins] += 1 / (remaining_space[feasible_bins] + 1e-9)

    # Penalize bins where item fits only by tiny amount to encourage filling them up
    # But reduce the penality as we fill more bins.
    small_fit = np.logical_and(feasible_bins, remaining_space < 0.2) #Increased threshold from 0.1 to 0.2
    priorities[small_fit] += 2.0 # Reduced from 5 to 2 to reduce over-eagerness on bins that don't fit snuggly.
    
    # Limited Look-Ahead:  Consider impact on the *next* item (approximation)
    # Assume the *next* item is some fraction of the bin size (e.g., 20%)
    # This is a crude approximation, but better than nothing
    expected_next_item_size = 0.2 # Assuming bin capacity of 1. A small item.
    potential_next_fit = remaining_space >= expected_next_item_size

    #If the item fits in current bin, and we have enough space to accommodate a next item with assumed size, then increase priority.
    priorities[np.logical_and(feasible_bins, potential_next_fit)] += 1.0  # Give a bonus for fitting now and potentially later.
    return priorities
```
