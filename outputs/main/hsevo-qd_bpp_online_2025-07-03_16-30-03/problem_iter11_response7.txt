```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines feasibility, remaining space (inverse), and near-full incentives."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap  # Allow overflow if no feasible bin
        return priorities

    remaining_space = bins_remain_cap - item
    
    # Prioritize feasible bins based on inverse remaining space
    priorities[feasible_bins] = 1.0 / (remaining_space[feasible_bins] + 1e-9)
    
    # Incentive for almost full bins
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.2) # Tunable parameter
    priorities[almost_full] += 3.0  # Tunable parameter: Increased near-full bonus
    
    return priorities
```
