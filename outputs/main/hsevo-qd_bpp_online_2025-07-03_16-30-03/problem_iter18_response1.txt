```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
      # If no bin can fit, consider using the least-filled bins 
      priorities = -bins_remain_cap
      return priorities

    remaining_space = bins_remain_cap - item
    
    # Prioritize bins with remaining space close to a threshold (e.g., 10% of bin size)
    bin_size = 1.0 # Assumed bin size, you might want to pass it as parameter for more general cases
    almost_full_threshold = 0.1 * bin_size
    
    almost_full = np.logical_and(feasible_bins, remaining_space <= almost_full_threshold)
    priorities[almost_full] += 10.0 # Significantly prioritize nearly-full bins

    # Calculate remaining space ratio. Prioritize smaller ratios.
    remaining_space_ratio = remaining_space / bin_size
    remaining_space_ratio[~feasible_bins] = 1.0  # Assign a default value if the bin is not feasible, to avoid affecting prioritization

    priorities[feasible_bins] += 1.0 / (remaining_space_ratio[feasible_bins] + 1e-9)  # Invert the ratio, add small constant to avoid zero division.


    #Penalize bins that can fit item by large amount, try to fill them later if needed
    large_space_threshold = 0.5 * bin_size
    large_space = np.logical_and(feasible_bins, remaining_space > large_space_threshold)
    priorities[large_space] -= 2.0


    return priorities
```
