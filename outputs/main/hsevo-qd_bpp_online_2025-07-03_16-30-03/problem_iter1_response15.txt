```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # High priority if the item fits perfectly (or nearly perfectly).
    perfect_fit = np.isclose(item, bins_remain_cap)
    priorities[perfect_fit] += 100

    # Slightly less high if it is within a small threshold of fitting
    near_fit = (bins_remain_cap - item) > 0.001  # Small threshold to avoid numerical instability.
    priorities[near_fit] += 50

    # Moderate priority for bins that can fit the item, favoring fuller bins.
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit): # Check if any bins can fit before calculating ratios. Avoid nan issues
        ratios = item / bins_remain_cap
        priorities[can_fit] += (1 - ratios[can_fit]) * 20  # Fill up more, not less. Scale by 20

    # Penalize bins that cannot fit (or are very close to not fitting) the item, so a bin that
    # can't contain the item should only be the last choice. Only if item is reasonably large
    almost_full = (bins_remain_cap - item) < 0
    if item > 0.1: #Avoid prematurely excluding bins for tiny items
       priorities[almost_full] -= 100  # Major penalty

    return priorities
```
