```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # If no bin can fit, consider using the least-filled bins 
        # (though it won't actually fit).
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item
    
    # Incentive 1: Fill as much space as possible.  Larger negative remaining space is better (but only if feasible)
    priorities[feasible_bins] += -np.abs(remaining_space[feasible_bins])  # Closer to 0 is better

    # Incentive 2: Prioritize almost full bins even more strongly.  This encourages packing similar sized items together
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 10.0

    # Incentive 3: slight penalty for bins with lot of space left after adding item
    large_space = np.logical_and(feasible_bins, remaining_space > 0.5)
    priorities[large_space] -= 1.0

    # Incentive 4: bonus for fitting perfectly
    perfect_fit = np.logical_and(feasible_bins, np.abs(remaining_space) < 1e-6)
    priorities[perfect_fit] += 20.0
        
    return priorities
```
