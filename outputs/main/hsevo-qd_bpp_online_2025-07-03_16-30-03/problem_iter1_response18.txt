```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    if not np.any(valid_bins):
        # No suitable bin, prioritize bins closest to full capacity before new item
        priorities = bins_remain_cap.copy()
    else:
        # Calculate remaining capacity AFTER adding item
        remaining_capacity_after_add = bins_remain_cap - item
        # Prioritize bins that will have smaller remaining capacity AFTER adding the item, but must be greater than or equal to 0.
        priorities[valid_bins] = 1.0 / (remaining_capacity_after_add[valid_bins] + 1e-9)  # Adding small constant to avoid division by zero

        #Heuristic Improvement: Use bin utilization and punish bins that lead to high fragmentation

        bin_capacity = np.max(bins_remain_cap) + item #Assumes all bins has the same capacity which is the best practice in the BPP
        utilization = (bin_capacity - bins_remain_cap[valid_bins]) / bin_capacity
        fragmentation = (remaining_capacity_after_add[valid_bins]/ bin_capacity)**2  #Fragmenation is punish

        priorities[valid_bins] = priorities[valid_bins] - 0.1*fragmentation

    return priorities
```
