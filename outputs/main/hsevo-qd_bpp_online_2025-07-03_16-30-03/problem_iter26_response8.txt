```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes near-full bins, penalizes excessive space, and rewards feasibility."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item
    
    # Prioritize almost full bins
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 14.0 # Higher weight for almost full

    # Penalize bins with excessive space
    excessive_space = np.logical_and(feasible_bins, remaining_space > 0.5)
    priorities[excessive_space] -= 0.5 * remaining_space[excessive_space] # Penalty scaled by wasted space

    # Base reward for feasible bins
    priorities[feasible_bins] += 4.0 

    # Moderate priority for bins with relatively little space left after placing item
    moderately_full = np.logical_and(feasible_bins, np.logical_and(remaining_space >= 0.1, remaining_space <= 0.5))
    priorities[moderately_full] += 2.0

    return priorities
```
