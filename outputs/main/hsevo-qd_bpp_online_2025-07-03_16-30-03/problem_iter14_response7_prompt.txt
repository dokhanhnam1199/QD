{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines remaining space, feasibility, and near-fullness for priority.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        priorities = -bins_remain_cap\n        return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines remaining space, feasibility, and near-fullness for priority.\"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        priorities = -bins_remain_cap\n        return priorities\n\n    remaining_space = bins_remain_cap - item\n    \n    # Prioritize almost full bins based on remaining space\n    priorities[feasible_bins] = 1 / (remaining_space[feasible_bins] + 1e-9)\n    priorities[feasible_bins] += np.where(remaining_space[feasible_bins] >= 0, 1.0, 0)\n    \n    # Heavily prioritize bins that become almost full\n    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)\n    priorities[almost_full] += 5.0\n\n    # Consider ratio of item to bin size, but only when feasible and not almost full\n    other_feasible = np.logical_and(feasible_bins, ~almost_full)\n    ratios = item / bins_remain_cap\n    priorities[other_feasible] += -np.log(ratios[other_feasible]) * 0.1 # Scale down effect\n    \n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the first one includes logic for feasible bins, nearly full bins, excessive space, and anticipating future placements, while the 20th only calculates the negative log of the item/bin ratio. This suggests the importance of considering multiple factors and constraints. (2nd best) vs (second worst), we see 2nd includes incentives to fill bins. Comparing (1st) vs (2nd), we see 1st considers hypothetical next item sizes. (3rd) vs (4th), we see 3rd has a moderate priority boost for bins that aren't \"almost full.\" Comparing (second worst) vs (worst), we see 19th includes logic for Prioritize almost full bins based on remaining space. Overall: The better heuristics incorporate multiple incentives and penalties related to bin feasibility, remaining space, near-fullness, excessive space, and even anticipation of future placements, whereas the worse heuristics consider a single factor or a simplistic calculation. Adding more hyper-parameters does not improve the performance of the heuristics.\n- \nOkay, I will refine \"Current self-reflection\" to provide more actionable advice for designing better heuristics, while actively avoiding the pitfalls of \"Ineffective self-reflection\". Here's the breakdown:\n\n*   **Keywords:** Multi-faceted, Iterative refinement, Predictive modeling, Constraint handling.\n*   **Advice:** Design heuristics by considering diverse factors. Implement penalties/incentives dynamically based on observed performance. Iteratively refine by adding complexity only if justified by performance gains. Use predictive modeling to anticipate future consequences of current decisions.\n*   **Avoid:** Over-parameterization, rigid \"filling\" strategies (near-full focus), premature optimization.\n*   **Explanation:** A robust heuristic balances multiple objectives, learns from its mistakes (dynamic penalties), and incorporates future state prediction judiciously, all while avoiding unnecessary complexity that hinders adaptability and generalization.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}