```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a small negative value to avoid selection if the item doesn't fit
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    # Calculate fill ratio only for bins where the item fits
    fit_indices = np.where(bins_remain_cap >= item)[0]
    if len(fit_indices) > 0:
        fill_ratios = item / bins_remain_cap[fit_indices]

        # Calculate a score based on how well the item fills the bin.  Prefer closer to full, but not over.
        # We use a gaussian centered around 1.0, penalizing underfilling and overflowing
        fit_scores = np.exp(-((fill_ratios - 1.0)**2) / (2 * 0.2**2))  # Gaussian with mean 1, std dev 0.2

        # Add a bonus for filling the bin almost perfectly.  Encourage "perfect" fits.
        perfect_fit_indices = np.where(np.abs(item - bins_remain_cap[fit_indices]) < 1e-6)[0] # Use tolerance for floating point comparison
        fit_scores[perfect_fit_indices] += 0.5 # big bonus for perfect match

        # Update the priorities for bins where the item fits
        priorities[fit_indices] = fit_scores

    return priorities
```
