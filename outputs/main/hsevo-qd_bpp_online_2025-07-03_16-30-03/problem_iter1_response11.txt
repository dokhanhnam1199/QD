```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version considers both space utilization and fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Epsilon to prevent division by zero and log of zero
    epsilon = 1e-9

    # Calculate the remaining capacity after adding the item.  Set to -1 if the item doesn't fit.
    remaining_cap_after_add = bins_remain_cap - item
    remaining_cap_after_add[remaining_cap_after_add < -epsilon] = -1  # Mark bins that can't fit item

    # Calculate space utilization: closer to 1 is better (higher ratio)
    utilization_ratio = (bins_remain_cap - remaining_cap_after_add) / (bins_remain_cap + epsilon)  # Avoid div by 0.

    # Fragmentation penalty: penalize bins that will have small amounts of space left after adding the item.
    # Higher penalty for more remaining cap, so it makes sense to fill the almost empty bin, and to not fill almost full bin.
    fragmentation_penalty = np.where(remaining_cap_after_add > 0, np.exp(-remaining_cap_after_add), 0)


    # Combine utilization and fragmentation: higher score is better
    priorities = utilization_ratio * fragmentation_penalty

    # If item doesn't fit then severely penalize by setting to -inf, while avoiding numpy -inf
    priorities[remaining_cap_after_add == -1] = -1e9

    return priorities
```
