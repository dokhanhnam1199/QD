```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version introduces a more sophisticated heuristic that considers:
    1. Feasibility: Prioritizes bins that can actually accommodate the item.
    2. Space Utilization: Encourages filling bins as much as possible (avoiding excessive waste).
    3. Number of filled bins: discourages opening a new bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap)

    # 1. Feasibility: Give zero priority to bins that are too small.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Significantly penalize infeasible bins

    # 2. Space Utilization: Prioritize bins that fit the item snugly.
    feasible_bins = bins_remain_cap >= item
    remaining_space = bins_remain_cap[feasible_bins] - item
    
    # Calculate a score based on how well the item fits
    # We use an exponential function to heavily penalize larger remaining spaces
    # and give a higher score for near-perfect fits. Add a small const to remaining space to avoid divide by zero.
    fit_scores = np.exp(-5 * (remaining_space / np.max(bins_remain_cap)))  # Experiment with different scaling factors
    priorities[feasible_bins] = fit_scores

    # 3. Number of filled bins: Discourage opening a new bin when partially-full bins are available.
    # Penalize new bins based on how much empty space is remaining
    is_empty_bins = bins_remain_cap == np.max(bins_remain_cap) #Assuming bins all begin with the same capacity.  This detects empty bins
    priorities[is_empty_bins] -= 0.1*item/np.max(bins_remain_cap)  #Subtract an amount relative to the item size if the bin is empty. Experiment with different factors.

    return priorities
```
