```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines ratio-based prioritization with near-full bin incentives."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item
    
    # Ratio-based priority
    ratios = item / bins_remain_cap
    priorities[feasible_bins] = ratios[feasible_bins]

    # Near-full incentive
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 2.0

    # Penalize excessive space softly
    excessive_space = np.logical_and(feasible_bins, remaining_space > 0.5)
    priorities[excessive_space] -= 0.1 * remaining_space[excessive_space]

    return priorities
```
