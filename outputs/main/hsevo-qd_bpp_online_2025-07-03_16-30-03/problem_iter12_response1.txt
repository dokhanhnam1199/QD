```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # A bin is feasible if it can accommodate the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
      # If no bin can fit, consider using the least-filled bins 
      # (though it won't actually fit).
      priorities = -bins_remain_cap
      return priorities

    # First consideration: How much empty space will be left *after* adding the item?
    remaining_space = bins_remain_cap - item
    
    #Prioritize almost full bins.  Crucially, use relative remaining space
    priorities[feasible_bins] = 1/(remaining_space[feasible_bins]/bins_remain_cap[feasible_bins] + 1e-9)
    
    #Incentivize filling bins
    priorities[feasible_bins] += 1.0

    #Strongly incentivize bins close to full
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 10.0 
    
    #Slightly penalize bins with much space to avoid creating too many very empty bins.
    much_space = np.logical_and(feasible_bins, remaining_space > 0.5)
    priorities[much_space] -= 0.5

    return priorities
```
