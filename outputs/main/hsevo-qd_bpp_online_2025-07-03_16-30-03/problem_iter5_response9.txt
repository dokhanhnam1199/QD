```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on feasibility, fill level, and near-fullness."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item
    
    # Prioritize feasible bins, those with remaining space after placing the item
    priorities[feasible_bins] += 1.0

    # Heavily prioritize almost full bins.
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 5.0

    # Slightly prioritize bins with smaller remaining space
    priorities[feasible_bins] += 1.0 / (remaining_space[feasible_bins] + 1e-9)

    return priorities
```
