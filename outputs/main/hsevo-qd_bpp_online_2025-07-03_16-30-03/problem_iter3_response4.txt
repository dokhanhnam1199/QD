```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # A bin is feasible if it can accommodate the item
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # If no bin can fit, assign priorities based on how *close* they are to fitting.
        # This encourages choosing the least-insufficient bin.
        priorities = (bins_remain_cap - item)  # More negative = closer to fitting
        return priorities

    remaining_space = bins_remain_cap - item
    
    # Prioritize almost full bins (as before)
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 5.0

    # Prioritize bins that will have a specific target remaining space after placement.
    # This encourages having bins with common sizes (e.g., half full) for future items.
    target_remaining_space = 0.5  # Try to make bins half full
    is_close_to_target = np.logical_and(feasible_bins, np.abs(remaining_space - target_remaining_space) < 0.1)
    priorities[is_close_to_target] += 3.0
    
    # Prioritize fitting into the *smallest* possible bin.  This helps keep larger bins
    # open for potentially larger future items. We do this by scaling by the bin capacity
    # so that bins closer to the item size receive a larger boost.
    
    priorities[feasible_bins] += (bins_remain_cap[feasible_bins] - item)/ np.max(bins_remain_cap)+1e-9  # Smaller bins give a bigger boost
    
    # Base priority: reward bins that *can* fit the item. Make the boost slightly dependent on
    # the item size as well to allow for larger/smaller grouping depending on the size of items.
    priorities[feasible_bins] += 1.0 + (item / np.max(bins_remain_cap))

    return priorities
```
