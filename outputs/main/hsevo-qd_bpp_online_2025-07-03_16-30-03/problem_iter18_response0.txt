```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        priorities = -bins_remain_cap  # Prioritize least-filled if nothing fits
        return priorities
    
    remaining_space = bins_remain_cap - item
    
    # Calculate remaining space ratio (remaining / original capacity)
    remaining_ratio = remaining_space / (bins_remain_cap + item) # Ratio after adding item

    # Prioritize bins that will be filled above a certain threshold (e.g., 90%)
    fill_threshold = 0.90
    almost_full = np.logical_and(feasible_bins, (bins_remain_cap - remaining_space)/bins_remain_cap  > fill_threshold) #percentage full after adding the item
    priorities[almost_full] += 10.0  # Strong preference for nearly full bins

    #Prioritize the fullest feasible bin
    priorities[feasible_bins] = bins_remain_cap[feasible_bins] - remaining_space[feasible_bins]
    
    # Add a bonus for bins that will have a small remaining space
    small_space = np.logical_and(feasible_bins, remaining_space <= 0.2)
    priorities[small_space] += 5.0

    # Add a slight penalty to bins with excessive remaining space. We want to use space efficiently.
    excessive_space = np.logical_and(feasible_bins, remaining_space > 0.5)
    priorities[excessive_space] -= 1.0
    
    return priorities
```
