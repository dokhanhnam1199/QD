```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Calculates bin priorities considering remaining space, feasibility, and near-fullness.
    Prioritizes bins that fit the item well and avoids overfilling.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item
    
    # Prioritize bins with smaller remaining space after placing the item.
    priorities[feasible_bins] = 1 / (remaining_space[feasible_bins] + 1e-9)

    # Incentivize filling the bins
    priorities[feasible_bins] += np.where(remaining_space[feasible_bins] >= 0, 1.0, 0)

    # Greatly prioritize nearly-full bins
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 5.0
    
    # Penalize bins where item fits only by tiny amount
    # This encourages filling them up
    tiny_fit = np.logical_and(feasible_bins, remaining_space > bins_remain_cap * 0.9)
    priorities[tiny_fit] -= 2.0

    return priorities
```
