```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
       Inspired by the event horizon of a black hole. Bins that can 'absorb'
       the item with minimal capacity wastage are prioritised, but with a
       singularity-avoidance mechanism to prevent perfect fits (which might
       block later, potentially better, arrangements). Also introduces a
       probabilistic element based on bin fullness, mirroring Hawking radiation
       (smaller bins have a higher chance of being selected, representing
       evaporation/emission of particles from the black hole).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Step 1: Calculate Wastage (Event Horizon Proximity)
    wastage = bins_remain_cap - item
    wastage[wastage < 0] = np.inf  # Invalid bins get infinite wastage.

    # Step 2: Invert and Scale (Gravitational Pull)
    #   - A small offset prevents division by zero and creates a "singularity avoidance"
    #     effect (preventing extremely small wastages from dominating too much).
    priorities = 1.0 / (wastage + 0.01)

    # Step 3: Introduce 'Hawking Radiation' (Bin Fullness Probability)
    #   - Smaller remaining capacity means higher chance of selection (evaporation).
    #   - Normalise to ensure total probability is approximately 1.
    fullness_prob = 1.0 / (bins_remain_cap + 0.001)  # Add small value to avoid division by zero.
    fullness_prob /= np.sum(fullness_prob)  # Normalize to sum to ~1

    # Step 4: Combine Gravitational Pull and Radiation (Event Horizon Distortion)
    priorities = priorities + 0.1 * fullness_prob # Weigh Fullness probability.
    return priorities
```
