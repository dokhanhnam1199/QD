```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines remaining space, feasibility, near-fullness, and penalizes excessive space."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item
    priorities[feasible_bins] += 1.0 / (remaining_space[feasible_bins] + 1e-9)

    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 10.0

    moderately_full = np.logical_and(feasible_bins, remaining_space < 0.3)
    priorities[moderately_full] += 2.0
    
    # Penalize bins with excessive space after placing the item
    excessive_space_threshold = 0.7
    excessive_space_penalty = 0.5
    priorities[feasible_bins] -= (remaining_space[feasible_bins] > excessive_space_threshold) * excessive_space_penalty


    return priorities
```
