```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Calculates bin priorities considering remaining space,
    feasibility, and near-fullness, avoiding overfilling.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item
    priorities[feasible_bins] = 1 / (remaining_space[feasible_bins] + 1e-9)
    priorities[feasible_bins] += np.where(remaining_space[feasible_bins] >= 0, 1.0, 0)

    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 5.0

    # Introduce a small penalty for bins with excessive remaining space
    # after placing the item. This encourages using bins that are
    # already somewhat full. The penalty is only applied to feasible bins.
    excessive_space = remaining_space > 0.5 # tune parameter
    priorities[np.logical_and(feasible_bins, excessive_space)] -= 0.5 # tune parameter

    return priorities
```
