```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes near-full bins, penalizes excessive space, ensures feasibility."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item
    
    # Prioritize almost full bins
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.15)
    priorities[almost_full] += 5.0 # Higher incentive for almost full

    # Less penalty for bins that are too empty
    too_much_space = np.logical_and(feasible_bins, remaining_space > 0.6) #Increased threshold
    priorities[too_much_space] -= 0.5

    # Add a base priority based on the inverse of the remaining space
    priorities[feasible_bins] += 1.0 / (remaining_space[feasible_bins] + 1e-9)
    
    return priorities
```
