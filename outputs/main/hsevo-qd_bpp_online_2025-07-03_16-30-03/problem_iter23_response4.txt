```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on remaining space, feasibility, and near-fullness, with slight look-ahead."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item
    priorities[feasible_bins] += 1.0 / (remaining_space[feasible_bins] + 1e-9)

    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 10.0

    moderately_full = np.logical_and(feasible_bins, remaining_space < 0.3)
    priorities[moderately_full] += 2.0

    priorities[feasible_bins] -= (bins_remain_cap[feasible_bins] > 0.7) * 0.5

    # Slight look-ahead: Penalize bins if the remaining space after placing the item
    # is larger than a likely next item size (e.g., average item size).  This encourages
    # filling bins more completely.
    average_item_size = 0.25  # Assume items are, on average, size 0.25

    remaining_space_penalty = (remaining_space > average_item_size) * 0.3
    priorities[feasible_bins] -= remaining_space_penalty[feasible_bins]
    
    return priorities
```
