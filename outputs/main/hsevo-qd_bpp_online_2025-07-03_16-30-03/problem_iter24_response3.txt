```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities
    
    remaining_space = bins_remain_cap - item
    
    # Space utilization priority: Prefer bins that leave a smaller remaining space
    # but penalize if the remaining space is too small to be useful
    space_priority = 1 / (remaining_space + 1e-9)
    
    # Fine-tune space priority based on how well the item fits
    fit_ratio = item / bins_remain_cap
    space_priority = space_priority * (1 + fit_ratio)
    
    # Penalize bins where the item doesn't fit well (wasteful space utilization)
    wasteful_bins = np.logical_and(feasible_bins, remaining_space > 0.5 * bins_remain_cap)
    space_priority[wasteful_bins] *= 0.5
    
    # Prioritize bins that will be moderately full to avoid fragmentation
    future_utilization = (bins_remain_cap - remaining_space) / (bins_remain_cap + item)

    utilization_priority = np.exp(-((future_utilization - 0.7)**2) / 0.05)
    
    # Dynamic Adjustment: More aggressive for nearly full bins
    fill_threshold = np.mean(bins_remain_cap[feasible_bins])
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1 * fill_threshold)
    priorities[almost_full] += 10.0

    # Limited look-ahead with dynamic mean item size consideration.
    mean_item_size = np.mean(item) if isinstance(item, np.ndarray) else item #Account for the edge case of item being a numpy array
    look_ahead_penalty = np.logical_and(feasible_bins, remaining_space < 0.7 * mean_item_size)
    priorities[look_ahead_penalty] -= 2.0

    # Add space utilization and utilization priorities
    priorities[feasible_bins] = space_priority[feasible_bins] + utilization_priority[feasible_bins]
    
    return priorities
```
