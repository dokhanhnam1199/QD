```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins for item placement, balancing space utilization
    and future fit considerations to minimize fragmentation."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item

    # Space utilization priority
    space_priority = 1 / (remaining_space + 1e-9)
    fit_ratio = item / bins_remain_cap
    space_priority = space_priority * (1 + fit_ratio)

    # Penalize wasteful bins
    wasteful_bins = np.logical_and(feasible_bins, remaining_space > 0.5 * bins_remain_cap)
    space_priority[wasteful_bins] *= 0.5

    # Prioritize near full
    fill_threshold = np.mean(bins_remain_cap[feasible_bins])
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1 * fill_threshold)
    priorities[almost_full] += 10.0

    priorities[feasible_bins] = space_priority[feasible_bins]

    return priorities
```
