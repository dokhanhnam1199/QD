```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item
    
    # Adaptive weights based on remaining capacities - fragmentation aware.
    total_capacity = np.sum(bins_remain_cap)
    if total_capacity > 0:
      capacity_ratio = bins_remain_cap / total_capacity
    else:
      capacity_ratio = np.ones_like(bins_remain_cap) / len(bins_remain_cap)


    # Base priority: inverse of remaining space, with a small offset for stability
    priorities[feasible_bins] = 1 / (remaining_space[feasible_bins] + 1e-9)

    # Fill encouragement
    priorities[feasible_bins] += np.where(remaining_space[feasible_bins] >= 0, 1.0, 0)

    # Prioritize almost full, but adaptively
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 5.0 * capacity_ratio[almost_full]  # Boost based on capacity share

    # Limited Look-Ahead (immediate next placement impact):
    # Slightly penalize bins that, after placement, would leave a gap too small for common item sizes
    # This avoids creating useless fragments
    common_item_sizes = [0.25, 0.33, 0.5] #example common sizes
    for size in common_item_sizes:
        problematic_bins = np.logical_and(feasible_bins, (remaining_space > 0) & (remaining_space < size + 1e-9)) #check if remaining capacity is less than common sizes after filling
        priorities[problematic_bins] -= 0.75 * capacity_ratio[problematic_bins] #slight penalty to these bins
    
    # Dynamic Adjustment: Increase emphasis on filling bins more as bins get fuller (avoids spreading items thinly)
    overall_fill_level = 1.0 - np.mean(bins_remain_cap) # 1- average remaining capcity/total capacity
    priorities = priorities + overall_fill_level * capacity_ratio * 0.5
    
    return priorities
```
