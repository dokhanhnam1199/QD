```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Higher priority means we want to add the item into that bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Give a base priority inversely proportional to the wasted space
            wasted_space = cap - item
            priorities[i] = 1.0 / (wasted_space + 1e-9)  # Add small constant to avoid division by zero

            # Heuristic 1: Prefer bins that are already somewhat full
            # This aims to consolidate items into fewer bins
            priorities[i] += 0.5 * (1 - cap / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else 0 #Prevent possible nan

            # Heuristic 2: Slightly prefer bins with capacity close to the item size
            # This helps to avoid excessive fragmentation
            priorities[i] += 0.2 * np.exp(-np.abs(item - cap)) # Gaussian-like preference

        else:
            priorities[i] = -np.inf  # Impossible to place the item
    return priorities
```
