```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes feasible, nearly-full bins, penalizes excessive space."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item
    
    # Prioritize almost full bins using inverse remaining space.
    priorities[feasible_bins] = 1 / (remaining_space[feasible_bins] + 1e-9)
    
    # Add base incentive for feasible bins
    priorities[feasible_bins] += 1.0
    
    # Greatly prioritize nearly-full bins (remaining < 0.1)
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 5.0
    
    # Penalize bins with excessive remaining space (remaining > item * 2)
    excessive_space = np.logical_and(feasible_bins, remaining_space > item * 2)
    priorities[excessive_space] -= 2.0

    return priorities
```
