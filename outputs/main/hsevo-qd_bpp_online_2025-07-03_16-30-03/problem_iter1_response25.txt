```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Employs a combination of factors: remaining capacity, wasted space,
    and a small encouragement for bins that can *just barely* fit the item.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Bins that cannot fit the item get a priority of negative infinity.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # For feasible bins, calculate a score based on remaining capacity
    # and the amount of wasted space.
    feasible_bins = ~infeasible_bins
    remaining_capacity = bins_remain_cap[feasible_bins]

    # Encourage bins that have just enough space, but not too much.
    # A bin with capacity close to the item size is preferred.

    closeness_factor = np.exp(-np.abs(remaining_capacity - item) / item)

    # Penalize bins with large wasted space (higher priority to bins where the
    # remaining capacity is closer to item size).  We will favor a nearly-full bin.
    # Add small constant to the remaining_capacity to avoid division by zero.
    wasted_space_penalty = 1 / (remaining_capacity + 0.001)


    priorities[feasible_bins] = closeness_factor * wasted_space_penalty

    return priorities
```
