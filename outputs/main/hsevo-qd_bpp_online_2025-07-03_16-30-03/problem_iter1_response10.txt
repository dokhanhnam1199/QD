```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after adding the item
    remaining_after_add = bins_remain_cap - item
    
    # Give high priority to bins that can fit the item
    can_fit = remaining_after_add >= 0
    priorities[can_fit] += 1  # Basic priority boost

    # Prioritize bins where the remaining capacity is minimized after adding the item
    priorities[can_fit] += (bins_remain_cap[can_fit] - item) / np.max(bins_remain_cap) if np.any(can_fit) else 0 # Avoid division by zero

    # Penalize bins that cannot fit the item (set to -inf to avoid selecting unless necessary)
    priorities[~can_fit] = -np.inf

    # Add a small bonus for bins that are already somewhat full (avoid creating many almost-empty bins)
    priorities += (bins_remain_cap / np.max(bins_remain_cap)) * 0.1

    return priorities
```
