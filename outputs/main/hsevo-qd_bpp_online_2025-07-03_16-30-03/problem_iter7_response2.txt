import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, almost_full_threshold: float = 0.1603739961323803, almost_full_priority: float = 6.311732109340574, ratio_log_scale: float = 0.26259263521759724, small_number: float = 2.5280503729364715e-07, feasibility_weight: float = 1.7842004403567977) -> np.ndarray:
    """Combines remaining space, feasibility, and near-fullness for priority."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item
    
    # Prioritize almost full bins based on remaining space
    priorities[feasible_bins] = 1 / (remaining_space[feasible_bins] + small_number)
    priorities[feasible_bins] += np.where(remaining_space[feasible_bins] >= 0, feasibility_weight, 0)
    
    # Heavily prioritize bins that become almost full
    almost_full = np.logical_and(feasible_bins, remaining_space < almost_full_threshold)
    priorities[almost_full] += almost_full_priority

    # Consider ratio of item to bin size, but only when feasible and not almost full
    other_feasible = np.logical_and(feasible_bins, ~almost_full)
    ratios = item / bins_remain_cap
    priorities[other_feasible] += -np.log(ratios[other_feasible]) * ratio_log_scale # Scale down effect
    
    return priorities
