```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version attempts to integrate multiple factors, handle edge cases,
    and proactively minimize wasted space. It also adds a penalty for bins
    that are likely to lead to significant fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        # If no bin can fit, prioritize the least-filled bin *more* strongly.
        # Make the negative priority *more* negative to discourage this outcome unless absolutely necessary.
        priorities = -bins_remain_cap * 10  
        return priorities

    remaining_space = bins_remain_cap - item
    
    # Prioritize almost full bins, but now with a variable bonus based on how *close* it is.
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 5.0 + (0.1 - remaining_space[almost_full]) * 10  # Larger bonus if *very* close.

    # Main priority based on remaining space, but with an offset to encourage filling.
    priorities[feasible_bins] = 1 / (remaining_space[feasible_bins] + 1e-9) + 1.0 # Avoid division by zero and give a base priority
    
    # Introduce a fragmentation penalty.  Bins that leave a medium-sized gap are penalized.
    # This helps to avoid leaving gaps that are too small for larger items but too big to be negligible.
    fragmentation_risk = np.logical_and(remaining_space > 0.2, remaining_space < 0.5) # Adjust thresholds as needed
    priorities[fragmentation_risk] -= 2.0 # Penalize by reducing priority

    # Slightly boost bins that are already relatively full, even if they aren't *almost* full.
    # This encourages consolidating items in partially filled bins.
    partially_full = np.logical_and(feasible_bins, bins_remain_cap < 0.8) # Bin is less than 80% full
    priorities[partially_full] += 0.5
    
    return priorities
```
