{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        priorities = -bins_remain_cap\n        return priorities\n    \n    remaining_space = bins_remain_cap - item\n    \n    # Adaptive weight for remaining space: Emphasize smaller remaining space less as bins fill up\n    space_priority = 1 / (remaining_space + 1e-9)\n    \n    # Calculate bin utilization: how full is the bin *after* placing the item?\n    future_utilization = (bins_remain_cap - remaining_space) / (bins_remain_cap + item) #Original capacity of bin assumed to be bins_remain_cap + item before placing the item\n\n    # Prioritize bins that will be moderately full to avoid fragmentation\n    utilization_priority = np.exp(-((future_utilization - 0.7)**2) / 0.05) # Gaussian-like curve centered around 0.7\n\n    priorities[feasible_bins] = space_priority[feasible_bins] + utilization_priority[feasible_bins]\n    \n    # Dynamic adjustment: As bins fill, be more aggressive about nearly full bins\n    fill_threshold = np.mean(bins_remain_cap[feasible_bins]) # Adaptive threshold\n    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1 * fill_threshold) # Dynamic percentage of mean\n    priorities[almost_full] += 10.0  # Increased emphasis\n\n    # Limited look-ahead: Penalize bins if the remaining space will be less than the mean of items\n    # This attempts to anticipate the need for a suitable bin for an average-sized item later.\n    mean_remaining_item_size = item # Assume current item size is a good proxy.\n    look_ahead_penalty = np.logical_and(feasible_bins, remaining_space < mean_remaining_item_size)\n    priorities[look_ahead_penalty] -= 2.0\n    \n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nHere's a redefined 'Current Self-Reflection' aimed at generating better bin packing heuristics:\n\n*   **Keywords:** Dynamic prioritization, multi-factor scoring, fragmentation, feasibility, future-state awareness, iterative refinement, calibrated thresholds.\n\n*   **Advice:** Design heuristics that dynamically adjust priorities based on bin state (fill level, fragmentation). Use a weighted combination of factors (remaining space, feasibility, near-fullness) but avoid *excessive* parameter tuning. Consider future placements.\n\n*   **Avoid:** Over-parameterization, relying on single metrics, ignoring edge cases (no feasible bin), premature complexity.\n\n*   **Explanation:** Start with a simple, multi-factor heuristic focused on filling bins. Iteratively refine it by adding complexity (future-state consideration, fragmentation penalties) only if performance analysis warrants it. Calibrate thresholds carefully. Ensure feasibility checks are always the top priority.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}