```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities
    
    remaining_space = bins_remain_cap - item
    
    # Adaptive weight for remaining space: Emphasize smaller remaining space less as bins fill up
    space_priority = 1 / (remaining_space + 1e-9)
    
    # Calculate bin utilization: how full is the bin *after* placing the item?
    future_utilization = (bins_remain_cap - remaining_space) / (bins_remain_cap + item) #Original capacity of bin assumed to be bins_remain_cap + item before placing the item

    # Prioritize bins that will be moderately full to avoid fragmentation
    utilization_priority = np.exp(-((future_utilization - 0.7)**2) / 0.05) # Gaussian-like curve centered around 0.7

    priorities[feasible_bins] = space_priority[feasible_bins] + utilization_priority[feasible_bins]
    
    # Dynamic adjustment: As bins fill, be more aggressive about nearly full bins
    fill_threshold = np.mean(bins_remain_cap[feasible_bins]) # Adaptive threshold
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1 * fill_threshold) # Dynamic percentage of mean
    priorities[almost_full] += 10.0  # Increased emphasis

    # Limited look-ahead: Penalize bins if the remaining space will be less than the mean of items
    # This attempts to anticipate the need for a suitable bin for an average-sized item later.
    mean_remaining_item_size = item # Assume current item size is a good proxy.
    look_ahead_penalty = np.logical_and(feasible_bins, remaining_space < mean_remaining_item_size)
    priorities[look_ahead_penalty] -= 2.0
    
    return priorities
```
