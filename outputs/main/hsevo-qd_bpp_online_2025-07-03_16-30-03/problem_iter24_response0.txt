```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap  # Prioritize bins with smallest remaining capacity when no feasible bins
        return priorities

    remaining_space = bins_remain_cap - item

    # Space priority: Smaller remaining space is better
    space_priority = 1 / (remaining_space + 1e-9)

    # Utilization priority: Encourage bins to be around 70-90% full
    future_utilization = (bins_remain_cap - remaining_space) / (bins_remain_cap + item)
    utilization_priority = np.exp(-((future_utilization - 0.8)**2) / 0.08)  # Gaussian centered at 0.8

    # Fragmentation penalty: Penalize leaving very small spaces
    fragmentation_threshold = 0.1 * np.mean(bins_remain_cap[feasible_bins])  # Adaptive threshold
    fragmentation_penalty = np.where(np.logical_and(remaining_space > 0, remaining_space < fragmentation_threshold), -1.0, 0.0)

    # Near-full bonus: Prioritize filling bins that are almost full
    near_full_threshold = 0.2 * np.mean(bins_remain_cap[feasible_bins])
    near_full_bonus = np.where(np.logical_and(feasible_bins, remaining_space < near_full_threshold), 5.0, 0.0)

    # Combine priorities
    priorities[feasible_bins] = space_priority[feasible_bins] + utilization_priority[feasible_bins] + fragmentation_penalty[feasible_bins] + near_full_bonus[feasible_bins]

    # Desperate filling : if many bins are feasible and all have small remaining capacity
    if np.sum(feasible_bins) > len(bins_remain_cap) / 2 and np.mean(bins_remain_cap[feasible_bins]) < item * 1.5:

      priorities[feasible_bins] += 2 # increase priority of feasible bins

    # Prioritize bins with largest initial capacity, if current filling strategy leads to issues:
    initial_capacity = bins_remain_cap + item # estimate initial bin capacities (only works if this function is called once per item)
    priority_initial_capacity = initial_capacity / np.max(initial_capacity) * 0.5 #normalize initial capacity for prioritization, weight of 0.5
    priorities[feasible_bins] += priority_initial_capacity[feasible_bins]

    return priorities
```
