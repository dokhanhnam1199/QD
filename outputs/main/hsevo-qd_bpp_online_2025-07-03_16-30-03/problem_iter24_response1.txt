```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap  # Prioritize bins with less remaining capacity when no feasible bin exists
        return priorities

    remaining_space = bins_remain_cap - item

    # Bin utilization priority (Gaussian centered around a target utilization)
    target_utilization = 0.8
    utilization = (bins_remain_cap - remaining_space) / (bins_remain_cap + item)
    utilization_priority = np.exp(-((utilization - target_utilization) ** 2) / 0.02)

    # Remaining space priority (favor bins with less remaining space, but not too little)
    remaining_space_priority = 1 / (remaining_space + 0.01 * np.mean(bins_remain_cap)) # Add small number to avoid division by zero and scale by mean cap.

    # Near-full bin bonus (incentivize filling almost full bins)
    near_full_threshold = 0.15 * np.mean(bins_remain_cap[feasible_bins])
    near_full_bonus = np.where(np.logical_and(feasible_bins, remaining_space <= near_full_threshold), 5.0, 0.0) # Adjusted value

    # Large remaining space penalty (penalize bins with too much remaining space after placement)
    large_space_threshold = 0.7 * np.mean(bins_remain_cap[feasible_bins]) # Dynamic threshold
    large_space_penalty = np.where(np.logical_and(feasible_bins, remaining_space >= large_space_threshold), -2.0, 0.0)

    # Combine priorities with weights
    priorities[feasible_bins] = (
        0.5 * utilization_priority[feasible_bins] +
        0.3 * remaining_space_priority[feasible_bins] +
        0.2 * near_full_bonus[feasible_bins] +
        0.1 * large_space_penalty[feasible_bins]
    )

    # Very small remaining space penalty to avoid creating tiny fragments.
    tiny_fragment_threshold = 0.05 * np.mean(bins_remain_cap[feasible_bins])
    tiny_fragment_penalty = np.where(np.logical_and(feasible_bins, remaining_space < tiny_fragment_threshold), -3.0, 0.0)
    priorities[feasible_bins] += tiny_fragment_penalty[feasible_bins]

    return priorities
```
