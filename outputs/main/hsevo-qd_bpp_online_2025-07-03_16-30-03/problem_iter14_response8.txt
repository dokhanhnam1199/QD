```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering feasibility, near-fullness, and remaining space."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap  # Prioritize least-filled if no fit
        return priorities

    remaining_space = bins_remain_cap - item
    
    # Prioritize almost full bins but avoid div by zero
    priorities[feasible_bins] = 1 / (remaining_space[feasible_bins] + 1e-9)
    
    # Additional incentive for fitting
    priorities[feasible_bins] += 1.0 
    
    # High priority for nearly-full bins
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 5.0 

    return priorities
```
