```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First, filter bins that can actually accommodate the item
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # If no bin can accommodate the item, prioritize the fullest bin (least remaining capacity)
        priorities = -bins_remain_cap
        return priorities

    # For feasible bins, calculate a score based on how much space would be left after packing
    remaining_space = bins_remain_cap - item
    priorities[feasible_bins] = 1.0 / (remaining_space[feasible_bins] + 1e-9)  # Avoid division by zero. Smaller remain space results to higher priority
    
    #Prioritize bins where the item fills a significant portion of the bin's capacity
    fill_ratios = item / bins_remain_cap
    priorities[feasible_bins] += fill_ratios[feasible_bins] * 2

    #Potentially add a small preference for bins that are already somewhat full
    priorities[feasible_bins] += (1-bins_remain_cap[feasible_bins].mean()/bins_remain_cap[feasible_bins]) * 0.5
    
    # Scale or clip to avoid extreme values (helps with stability)
    priorities = np.clip(priorities, a_min=-100, a_max=100)

    return priorities
```
