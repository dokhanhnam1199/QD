```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Prioritize bins that can fit the item
            remaining_space = cap - item
            # Prioritize bins with smaller remaining space after packing. avoid fragmentation
            priorities[i] = 1.0 / (remaining_space + 0.00001)  # Add a small constant to avoid division by zero

            # Potentially consider a bonus for bins that are nearly full after packing:
            if remaining_space < 0.1:
                priorities[i] += 0.5 # Add bonus
        else:
            priorities[i] = -1000 # Very Low Priority.

    return priorities
```
