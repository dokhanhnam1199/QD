{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        priorities = -bins_remain_cap\n        return priorities\n    \n    remaining_space = bins_remain_cap - item\n    \n    # Space utilization priority: Prefer bins that leave a smaller remaining space\n    # but penalize if the remaining space is too small to be useful\n    space_priority = 1 / (remaining_space + 1e-9)\n    \n    # Fine-tune space priority based on how well the item fits\n    fit_ratio = item / bins_remain_cap\n    space_priority = space_priority * (1 + fit_ratio)\n    \n    # Penalize bins where the item doesn't fit well (wasteful space utilization)\n    wasteful_bins = np.logical_and(feasible_bins, remaining_space > 0.5 * bins_remain_cap)\n    space_priority[wasteful_bins] *= 0.5\n    \n    # Prioritize bins that will be moderately full to avoid fragmentation\n    future_utilization = (bins_remain_cap - remaining_space) / (bins_remain_cap + item)\n\n    utilization_priority = np.exp(-((future_utilization - 0.7)**2) / 0.05)\n    \n    # Dynamic Adjustment: More aggressive for nearly full bins\n    fill_threshold = np.mean(bins_remain_cap[feasible_bins])\n    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1 * fill_threshold)\n    priorities[almost_full] += 10.0\n\n    # Limited look-ahead with dynamic mean item size consideration.\n    mean_item_size = np.mean(item) if isinstance(item, np.ndarray) else item #Account for the edge case of item being a numpy array\n    look_ahead_penalty = np.logical_and(feasible_bins, remaining_space < 0.7 * mean_item_size)\n    priorities[look_ahead_penalty] -= 2.0\n\n    # Add space utilization and utilization priorities\n    priorities[feasible_bins] = space_priority[feasible_bins] + utilization_priority[feasible_bins]\n    \n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                bins_remain_cap: np.ndarray,\n                division_eps: float = 1.2751144605391451e-09,\n                base_priority: float = 1.0029373306865028,\n                almost_full_threshold: float = 0.05814860685353829,\n                almost_full_priority: float = 4.659312610265962) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        division_eps: Epsilon to avoid division by zero.\n        base_priority: Base priority to fill the bins.\n        almost_full_threshold: Threshold to consider a bin as almost full.\n        almost_full_priority: Priority for almost full bins.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # A bin is feasible if it can accommodate the item\n    feasible_bins = bins_remain_cap >= item\n    \n    if not np.any(feasible_bins):\n      # If no bin can fit, consider using the least-filled bins \n      # (though it won't actually fit).  This helps guide decision-making\n      # in extreme cases. The priority is slightly negative and inversely propotional\n      # to how full is the bin.\n      priorities = -bins_remain_cap \n      return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (2nd), we see they are identical; (3rd) vs (4th), the 4th one introduces the concept of `fit_ratio` to fine-tune space priority and penalizes wasteful bins and look-ahead with dynamic mean item size consideration; Comparing (1st) vs (3rd), the 1st considers future utilization; (2nd) vs (5th), the 2nd considers future utilization while the 5th penalizes excessive space and heavily prioritizes near full bins; Comparing (second worst) vs (worst), the second worst prioritizes almost full bins while the worst prioritizes feasible bins; Comparing (6th) vs (7th), the 6th considers \"hypothetical\" next item sizes; Comparing (8th) vs (9th), the 8th has moderate priority boost for bins that aren't \"almost full\" but still have relatively little space left and a penalty for bins that are too empty; Comparing (10th) vs (11th), the 10th penalizes bins with excessive space and gives a base reward for feasible bins; Comparing (12th) vs (13th), 13th has more tunable parameters; Comparing (14th) vs (15th), the 15th one combines remaining space, feasibility, and near-fullness for priority; Comparing (16th) vs (17th), the 16th introduces `excessive_space_threshold` and `excessive_space_penalty`. Overall: The better heuristics consider not only remaining space and near-fullness but also future utilization, fit ratio, and penalize excessive space to prevent fragmentation. They may also include a look-ahead strategy by considering hypothetical next item sizes or dynamically adjusting parameters. Introducing tunable parameters helps fine-tune performance.\n- \nOkay, let's refine self-reflection for designing better heuristics, focusing on actionable insights and avoiding vague statements.\n\nHere's a redefined approach focusing on *actionable* advice, incorporating analysis, and avoiding ineffective generalities:\n\n*   **Keywords:** Actionable Insights, Quantitative Analysis, Iterative Refinement, Adaptability.\n*   **Advice:** Ground heuristic design in quantitative analysis of performance bottlenecks. Instrument your existing heuristic to *measure* how frequently specific undesirable states occur (e.g., bins with >X% wasted space). Design targeted adjustments, *quantify* the expected impact of each change, and iterate based on *measured* improvements. This should include automated testing.\n*   **Avoid:** Vague notions like \"consider multiple factors\" without a clear methodology for *how* to select, weight, and validate those factors using data. Stop saying \"anticipate future states\" without concretely defining *how* this is implemented and *measured*.\n*   **Explanation:** Shift from general suggestions to a data-driven, iterative process. Start with a baseline heuristic, *measure* its weaknesses, and then implement focused improvements based on those measurements. Make sure you write tests that demonstrate your expected improvements. This reduces the risk of over-complication and ensures that added complexity translates to tangible gains.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}