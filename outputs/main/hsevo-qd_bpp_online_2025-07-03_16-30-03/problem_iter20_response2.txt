```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering feasibility, fullness, and fragmentation."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item

    # Prioritize almost full bins HIGHLY
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 10.0

    # Prioritize smaller remaining space after placement
    priorities[feasible_bins] += 1.0 / (remaining_space[feasible_bins] + 1e-9)

    # Penalize leaving bins too empty to reduce fragmentation
    priorities[feasible_bins] -= (bins_remain_cap[feasible_bins] > 0.7) * 0.5

    return priorities
```
