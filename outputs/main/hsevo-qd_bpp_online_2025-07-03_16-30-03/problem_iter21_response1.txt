```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item

    # Adaptive weight based on how full the bins are overall
    average_fill = np.mean(1 - bins_remain_cap / np.max(bins_remain_cap))  # Assuming bin size is normalized to 1.0
    
    # Fragmentation avoidance: Higher weight when bins are generally more full
    fragmentation_weight = 1.0 + 2.0 * average_fill  # Increase importance of tight packing

    # Prioritize almost full bins more aggressively, but with adaptive scaling
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 5.0 * fragmentation_weight

    # Primary priority: minimize wasted space, scaled by fragmentation concern
    priorities[feasible_bins] += fragmentation_weight / (remaining_space[feasible_bins] + 1e-9)
    priorities[feasible_bins] += np.where(remaining_space[feasible_bins] >= 0 , 1.0, 0)


    # Limited Look-Ahead: Penalize placements that leave very small gaps IF there are *other* feasible bins.
    # The goal is to avoid creating tiny fragments if we have a choice.
    if np.sum(feasible_bins) > 1:  # Only apply if we have options
        tiny_gap = np.logical_and(feasible_bins, remaining_space > 0.1, remaining_space < 0.25)  # Gaps between 0.1 and 0.25
        priorities[tiny_gap] -= 1.5 # Slightly penalize these placements, allowing others to be preferred
    
    return priorities
```
