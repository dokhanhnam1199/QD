```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Encourage filling bins that can fit the item reasonably well.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask]

    # Penalize bins that would be almost completely full. We want some wiggle room!
    almost_full_mask = (bins_remain_cap >= item) & (item / bins_remain_cap > 0.9)
    priorities[almost_full_mask] -= 0.5 # Subtract a bit for bins near full.

    # A tiny nudge to favor filling up bins that already have items (exploitation),
    # rather than starting new ones. Only if item fits in current bin.
    occupied_mask = bins_remain_cap < 1.0 # Assuming bin capacity = 1, this identifies "used" bins. Change 1.0 to bin_capacity if it is not a constant value.
    fit_occupied_mask = fit_mask & occupied_mask
    priorities[fit_occupied_mask] += 0.1

    # Strong penalty for bins that cannot fit the current item.
    no_fit_mask = bins_remain_cap < item
    priorities[no_fit_mask] = -np.inf

    return priorities
```
