```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # A bin is feasible if it can accommodate the item
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # If no bin can fit, consider using the least-filled bins
        # (though it won't actually fit). This helps guide decision-making
        # in extreme cases. The priority is slightly negative and inversely proportional
        # to how full is the bin.
        priorities = -bins_remain_cap
        return priorities

    # First consideration: How much empty space will be left *after* adding the item?
    remaining_space = bins_remain_cap - item

    # Prioritize almost full bins, but also consider fragmentation.

    # Reward bins where the item fits well (not too tight, not too loose).
    fit_score = np.exp(-0.5 * (remaining_space / np.mean(bins_remain_cap))**2)  # Gaussian-like fit score

    priorities[feasible_bins] = fit_score[feasible_bins]

    # Encourage filling the bins
    priorities[feasible_bins] += 0.5

    # Greatly prioritize nearly-full bins
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 5.0

    # Penalize bins that become nearly empty after placing the item
    nearly_empty = np.logical_and(feasible_bins, remaining_space > 0.9 * np.max(bins_remain_cap))
    priorities[nearly_empty] -= 2.0
    
    return priorities
```
