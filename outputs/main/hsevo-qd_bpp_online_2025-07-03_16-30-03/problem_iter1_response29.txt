```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize bins that can accommodate the item
    valid_bins = bins_remain_cap >= item
    priorities[valid_bins] = 1

    # Adjust priority based on remaining capacity after placing the item
    remaining_capacity = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] += (remaining_capacity / np.max(bins_remain_cap)) # Favor bins with more remaining capacity


    # Adjust priority based on the ratio of item size to bin size
    ratios = item / bins_remain_cap[valid_bins]
    priorities[valid_bins] += (1 - ratios) # Favor bins where item is a smaller fraction of capacity

    #Give small negative priority to bins that cannot accommodate the item

    priorities[~valid_bins] = -0.01 # to break ties among bins that can take items

    return priorities
```
