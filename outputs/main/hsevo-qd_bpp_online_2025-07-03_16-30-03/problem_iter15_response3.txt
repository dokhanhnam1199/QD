```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item

    # Prioritize almost full bins more strongly but avoid making bins that only fit items by tiny amounts
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    nearly_empty = bins_remain_cap > 0.9 # incentivise filling nearly empty bins

    # In addition to penalizing tiny fits, also try to prevent creation of small leftover spaces
    small_leftover = np.logical_and(feasible_bins, remaining_space > 0.01) & (remaining_space < 0.2)
    # penalize bins which will result in small left over spaces
    priorities[small_leftover] -= 2

    #Prioritize nearly empty bins as well to encourage usage
    priorities[nearly_empty] += 1
    priorities[feasible_bins] += 1 / (remaining_space[feasible_bins] + 1e-9)
    
    priorities[almost_full] += 5.0 

    #Incentivize bins to fit half or a bit more than half of their capacity
    half_full_bins = bins_remain_cap > 0.5
    priority_to_fill_half = np.logical_and(half_full_bins, feasible_bins)
    priorities[priority_to_fill_half] +=1

    return priorities
```
