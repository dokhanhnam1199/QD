```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Improved from v1 with a multi-factor approach.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # If no bin can fit, prioritize least filled, same as v1.
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item

    # Factor 1: Remaining Space (reciprocal, to favor smaller remaining space)
    priorities[feasible_bins] = 1.0 / (remaining_space[feasible_bins] + 1e-9)

    # Factor 2: Fill-up Incentive
    priorities[feasible_bins] += np.where(remaining_space[feasible_bins] >= 0, 1.0, 0)

    # Factor 3: Near-full Bin Bonus (stronger than v1)
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 10.0 # Increased bonus for almost full

    # Factor 4: Moderate Space Penalty (Discourage leaving too much space)
    moderately_full = np.logical_and(feasible_bins, remaining_space > 0.5)
    priorities[moderately_full] -= 2.0  # Slightly discourage bins with > 0.5 space

    # Factor 5: Bin Capacity Utilization (encourage use of smaller bins first)
    # Divide by original capacity to normalize
    original_capacity = bins_remain_cap + item # Approximation of original bin capacity. This assumes that item is currently feasible in the bin.
    bin_utilization = item / (original_capacity)
    priorities[feasible_bins] += bin_utilization[feasible_bins] * 2 # Favor using smaller bins. Adjust the multiplier as needed.
    
    return priorities
```
