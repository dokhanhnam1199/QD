```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on remaining space, utilization, and hypothetical next items."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item
    space_priority = 1 / (remaining_space + 1e-9)

    future_utilization = (bins_remain_cap - remaining_space) / (bins_remain_cap + item)
    utilization_priority = np.exp(-((future_utilization - 0.7)**2) / 0.05)

    priorities[feasible_bins] = space_priority[feasible_bins] + utilization_priority[feasible_bins]

    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 5.0

    excessive_space = np.logical_and(feasible_bins, remaining_space > 0.5)
    priorities[excessive_space] -= 1.0

    hypothetical_next_items = np.array([0.1, 0.2, 0.3])
    for next_item_size in hypothetical_next_items:
        ideal_remaining_space = next_item_size
        close_to_ideal = np.logical_and(feasible_bins, np.abs(remaining_space - ideal_remaining_space) < 0.1)
        priorities[close_to_ideal] += 0.5

    return priorities
```
