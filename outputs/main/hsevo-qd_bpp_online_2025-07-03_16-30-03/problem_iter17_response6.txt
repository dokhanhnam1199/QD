```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on remaining space, feasibility, and near-fullness."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item
    
    # Prioritize almost full bins
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 5.0

    # Sweet spot for good fit: medium-sized remaining space
    good_fit = np.logical_and(feasible_bins, np.logical_and(remaining_space >= 0.25, remaining_space <= 0.75))
    priorities[good_fit] += 1.5
    
    priorities[feasible_bins] += 1.0 # a bonus for feasible bins

    return priorities
```
