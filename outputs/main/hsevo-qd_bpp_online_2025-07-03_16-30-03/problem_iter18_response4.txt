```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility check
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
      # If no bin can fit, prioritize the least-filled bins to avoid extreme fragmentation.
      priorities = -bins_remain_cap
      return priorities

    # Calculate remaining space after adding the item
    remaining_space = bins_remain_cap - item
    
    # 1. Remaining Space Ratio: Prefer bins that will be filled to a high percentage.
    # This addresses the "excessive space" issue.
    fill_ratio = (bins_remain_cap[feasible_bins] - remaining_space[feasible_bins]) / bins_remain_cap[feasible_bins]
    priorities[feasible_bins] += fill_ratio * 5  # Higher multiplier for fill ratio

    # 2. Near-Full Threshold:  Strongly prioritize bins that will be nearly full.
    near_full_threshold = 0.9  # Tune this value.
    near_full_bins = np.logical_and(feasible_bins, fill_ratio >= near_full_threshold)
    priorities[near_full_bins] += 10  # Very high priority

    # 3. Avoid Tiny Space: Penalize leaving very small remaining space.
    tiny_space_threshold = 0.1 # Tune this value.
    tiny_space_bins = np.logical_and(feasible_bins, remaining_space < tiny_space_threshold)
    priorities[tiny_space_bins] -= 2 # Slight penalty - higher values leads to worse solutions

    # 4. Balance: Add a base priority proportional to the remaining capacity. This prevents
    # always favoring tiny fills and promotes distributing items across multiple bins if appropriate.
    priorities[feasible_bins] += bins_remain_cap[feasible_bins] / np.max(bins_remain_cap)
    
    return priorities
```
