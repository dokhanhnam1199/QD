```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines feasibility, near-fullness, and penalizes excessive space."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap  # slight neg priority if no fit
        return priorities

    # Prioritize feasible bins
    priorities[feasible_bins] = 1.0

    # Boost priority for almost full bins
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap - item <= 0.15) # remaining cap < 0.15 after placed
    priorities[almost_full] += 5.0

    # Penalize excessive remaining space
    priorities[feasible_bins] -= (bins_remain_cap[feasible_bins] - item) * 0.5 #rem cap * penalty factor

    return priorities
```
