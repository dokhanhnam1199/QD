```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # Prioritize bins with the least remaining capacity (try to put item into the least filled)
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item
    
    # Prioritize bins based on how well the item fills the bin.
    # The closer the item fills the bin to capacity, the higher the priority.
    fill_ratio = item / bins_remain_cap
    priorities[feasible_bins] = fill_ratio[feasible_bins]

    # Boost the priority of bins that are almost full after adding the item.
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 2.0  # Significantly prioritize nearly-full bins

    # Penalize bins that have a lot of space left over. This encourages filling bins more completely.
    large_space = np.logical_and(feasible_bins, remaining_space > 0.5)
    priorities[large_space] -= 0.5

    # Add some noise to the priorities to prevent getting stuck in local optima.
    priorities[feasible_bins] += np.random.normal(0, 0.01, size=np.sum(feasible_bins))

    return priorities
```
