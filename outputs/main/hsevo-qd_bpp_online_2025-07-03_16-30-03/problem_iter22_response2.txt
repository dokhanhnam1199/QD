import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, almost_full_threshold: float = 0.22908408264762598, moderately_full_threshold: float = 0.46572439865111903,
                empty_bin_threshold: float = 0.7905421144027185, almost_full_weight: float = 7.994136869188209, moderately_full_weight: float = 3.0255738239141707,
                empty_bin_penalty: float = 0.4734801168904309, remaining_space_weight: float = 1.119051605786031, epsilon: float = 3.560543133714761e-09) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        almost_full_threshold: Threshold for considering a bin "almost full".
        moderately_full_threshold: Threshold for considering a bin "moderately full".
        empty_bin_threshold: Threshold for considering a bin "too empty".
        almost_full_weight: Weight for almost full bins.
        moderately_full_weight: Weight for moderately full bins.
        empty_bin_penalty: Penalty for empty bins.
        remaining_space_weight: Weight for remaining space.
        epsilon: Small value to avoid division by zero.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # A bin is feasible if it can accommodate the item
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        # If no bin can fit, consider using the least-filled bins
        # (though it won't actually fit). This helps guide decision-making
        # in extreme cases. The priority is slightly negative and inversely proportional
        # to how full is the bin.
        priorities = -bins_remain_cap
        return priorities

    # First consideration: How much empty space will be left *after* adding the item?
    remaining_space = bins_remain_cap - item

    # Incentive 1: Prioritize bins with smaller remaining space (after fitting item)
    priorities[feasible_bins] += remaining_space_weight / (remaining_space[feasible_bins] + epsilon)

    # Incentive 2: Heavily prioritize almost full bins. This is crucial.
    almost_full = np.logical_and(feasible_bins, remaining_space < almost_full_threshold)
    priorities[almost_full] += almost_full_weight

    # Incentive 3: Moderate priority boost for bins that aren't "almost full"
    # but still have relatively little space left. Prevents extreme fragmentation.
    moderately_full = np.logical_and(feasible_bins, remaining_space < moderately_full_threshold)
    priorities[moderately_full] += moderately_full_weight

    # Incentive 4: Slightly penalize bins that are too empty.
    # The amount is subtracted from the priority, so it only affects feasible bins
    # but still can prioritize one bin over other.
    priorities[feasible_bins] -= (bins_remain_cap[feasible_bins] > empty_bin_threshold) * empty_bin_penalty

    return priorities
