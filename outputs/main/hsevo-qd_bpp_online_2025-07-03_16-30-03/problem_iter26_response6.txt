```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes near-full bins, penalizes excessive space, and rewards feasible bins."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item

    # Prioritize near-full bins significantly
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 5.0

    # Reward feasible bins
    priorities[feasible_bins] += 1.0

    # Penalize bins with excessive space to reduce fragmentation
    excessive_space = remaining_space > 0.6
    priorities[feasible_bins] -= np.where(excessive_space[feasible_bins], 0.5, 0)

    # Moderate priority boost for bins that aren't "almost full" but still have relatively little space left
    little_space = np.logical_and(feasible_bins, remaining_space < 0.3) & ~almost_full
    priorities[little_space] += 0.25
    
    return priorities
```
