```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # A bin is feasible if it can accommodate the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
      # If no bin can fit, consider using the least-filled bins 
      # (though it won't actually fit).  This helps guide decision-making
      # in extreme cases. The priority is slightly negative and inversely proportional
      # to how full is the bin.
      priorities = -bins_remain_cap
      return priorities

    # First consideration: How much empty space will be left *after* adding the item?
    remaining_space = bins_remain_cap - item
    
    #Prioritize almost full bins using a refined approach:
    priorities[feasible_bins] = 1.0 / (remaining_space[feasible_bins] + 1e-9) # Inverse remaining space
    
    # Incentive to use bins
    priorities[feasible_bins] += 0.5  # Base incentive

    # Stronger incentive for bins that are nearly full
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.2) #Increased threshold to 0.2
    priorities[almost_full] += 3.0

    # Small penalty for leaving too much space, to avoid fragmentation.
    # This encourages filling bins more completely.
    too_much_space = np.logical_and(feasible_bins, remaining_space > 0.5)
    priorities[too_much_space] -= 1.0 
    
    return priorities
```
