{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # A bin is feasible if it can accommodate the item\n    feasible_bins = bins_remain_cap >= item\n    \n    if not np.any(feasible_bins):\n      # If no bin can fit, consider using the least-filled bins \n      # (though it won't actually fit).  This helps guide decision-making\n      # in extreme cases. The priority is slightly negative and inversely propotional\n      # to how full is the bin.\n      priorities = -bins_remain_cap \n      return priorities\n\n    # First consideration: How much empty space will be left *after* adding the item?\n    remaining_space = bins_remain_cap - item\n    \n    #Prioritize almost full bins\n    priorities[feasible_bins] = 1/(remaining_space[feasible_bins]+1e-9) #avoid division by zero. Want small values of remaining_space to yield large priorities.\n    \n    #Try to fill the bins\n    priorities[feasible_bins] += np.where(remaining_space[feasible_bins] >= 0 , 1.0,0)\n    \n    # Penalize bins where item fits only by tiny amount to encourage filling them up\n    # This makes a significant different (a trick from Quantum Mechanics, like a wave function collapse based on smallest energy changes)\n    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)\n    priorities[almost_full] += 5.0 # Greatly prioritize nearly-full bins\n\n    \n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n                bins_remain_cap: np.ndarray,\n                division_eps: float = 5.646913103379367e-10,\n                base_priority: float = 0.5900573710882502,\n                almost_full_threshold: float = 0.07504192913180303,\n                almost_full_priority: float = 6.060481214400711) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        division_eps: Epsilon to avoid division by zero.\n        base_priority: Base priority to fill bins.\n        almost_full_threshold: Threshold for considering a bin almost full.\n        almost_full_priority: Priority boost for almost full bins.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # A bin is feasible if it can accommodate the item\n    feasible_bins = bins_remain_cap >= item\n    \n    if not np.any(feasible_bins):\n      # If no bin can fit, consider using the least-filled bins \n      # (though it won't actually fit).  This helps guide decision-making\n      # in extreme cases. The priority is slightly negative and inversely propotional\n      # to how full is the bin.\n      priorities = -bins_remain_cap \n      return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the first one includes logic for feasible bins, nearly full bins, excessive space, and anticipating future placements, while the 20th only calculates the negative log of the item/bin ratio. This suggests the importance of considering multiple factors and constraints. (2nd best) vs (second worst), we see 2nd includes incentives to fill bins. Comparing (1st) vs (2nd), we see 1st considers hypothetical next item sizes. (3rd) vs (4th), we see 3rd has a moderate priority boost for bins that aren't \"almost full.\" Comparing (second worst) vs (worst), we see 19th includes logic for Prioritize almost full bins based on remaining space. Overall: The better heuristics incorporate multiple incentives and penalties related to bin feasibility, remaining space, near-fullness, excessive space, and even anticipation of future placements, whereas the worse heuristics consider a single factor or a simplistic calculation. Adding more hyper-parameters does not improve the performance of the heuristics.\n- \nOkay, I will refine \"Current self-reflection\" to provide more actionable advice for designing better heuristics, while actively avoiding the pitfalls of \"Ineffective self-reflection\". Here's the breakdown:\n\n*   **Keywords:** Multi-faceted, Iterative refinement, Predictive modeling, Constraint handling.\n*   **Advice:** Design heuristics by considering diverse factors. Implement penalties/incentives dynamically based on observed performance. Iteratively refine by adding complexity only if justified by performance gains. Use predictive modeling to anticipate future consequences of current decisions.\n*   **Avoid:** Over-parameterization, rigid \"filling\" strategies (near-full focus), premature optimization.\n*   **Explanation:** A robust heuristic balances multiple objectives, learns from its mistakes (dynamic penalties), and incorporates future state prediction judiciously, all while avoiding unnecessary complexity that hinders adaptability and generalization.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}