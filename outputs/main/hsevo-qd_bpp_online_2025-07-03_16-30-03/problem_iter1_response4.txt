```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item

    if np.any(valid_bins):
        # Calculate waste for each bin if the item is placed
        waste = bins_remain_cap - item

        # Scale waste so that larger waste is penalized less severely
        scaled_waste = waste / bins_remain_cap # fraction of waste, smaller is better
        # Calculate the inverse waste fraction
        waste_priority = 1 - scaled_waste
        waste_priority[~valid_bins] = -np.inf # set priority to very low for bins can't fit.
        priorities = waste_priority

        # Adjust priority: higher remaining capacity yields a higher priority, but only for valid bins
        capacity_boost = bins_remain_cap / np.max(bins_remain_cap[valid_bins])
        priorities = priorities + capacity_boost * valid_bins # only valid bins are promoted.

        # A small preference to bins with a higher fill percentage
        fill_percentage = (1 - bins_remain_cap/np.max(bins_remain_cap)) #larger is better
        # Fill percentage only gives a tie breaking effect.
        fill_boost = fill_percentage * valid_bins * 0.1

        priorities = priorities + fill_boost

    else:
         priorities[:] = -np.inf # if all bins can't fit, mark them bad.
    return priorities
```
