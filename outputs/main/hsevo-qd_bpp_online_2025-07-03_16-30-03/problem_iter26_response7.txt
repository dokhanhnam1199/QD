```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on remaining space, utilization, and item size."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item
    space_priority = 1 / (remaining_space + 1e-9)
    priorities[feasible_bins] = space_priority[feasible_bins]

    # Prioritize almost full bins
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 5.0

    # Ratio of item to bin size
    other_feasible = np.logical_and(feasible_bins, ~almost_full)
    ratios = item / bins_remain_cap
    priorities[other_feasible] += -np.log(ratios[other_feasible]) * 0.1

    future_utilization = (bins_remain_cap - remaining_space) / bins_remain_cap
    utilization_priority = np.exp(-((future_utilization - 0.7)**2) / 0.05)
    priorities[feasible_bins] += utilization_priority[feasible_bins]
    return priorities
```
