```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes near-full bins, penalizes excessive space, adapts to infeasibility."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item

    # Prioritize almost full bins
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 5.0

    # Prioritize bins with smaller remaining space when feasible
    priorities[feasible_bins] += 1 / (remaining_space[feasible_bins] + 1e-9)
    priorities[feasible_bins] += 1.0 # A base reward for feasible bins

    # Penalize bins with excessive space
    excessive_space = np.logical_and(feasible_bins, remaining_space > 0.5)
    priorities[excessive_space] -= 0.5 * remaining_space[excessive_space]
    
    return priorities
```
