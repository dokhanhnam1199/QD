```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Give higher priority to bins that can fit the item,
            # prioritizing those with smaller remaining capacity after placement.
            remaining = cap - item
            priorities[i] = 1 / (remaining + 0.0001)  # Avoid division by zero

            # Optionally boost priority for bins that would be nearly full.
            if remaining < 0.1:
                priorities[i] += 1

        else:
            # Negative priority for bins that cannot fit the item.
            priorities[i] = -1000  # Or some other large negative value

    return priorities
```
