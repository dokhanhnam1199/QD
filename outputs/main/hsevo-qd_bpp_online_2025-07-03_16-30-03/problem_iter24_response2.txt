```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item

    # Space Priority: Prefer bins with smaller remaining space, but not too small.
    space_priority = 1 / (remaining_space + 1e-9)

    # Utilization Priority: Target a utilization around 70-85%
    future_utilization = (bins_remain_cap - remaining_space) / (bins_remain_cap + item)
    utilization_priority = np.exp(-((future_utilization - 0.8)**2) / 0.08)

    # Fragmentation penalty. Heavily penalize bins that leave a gap that is too small
    # to fit a significant fraction of the item's size itself.
    fragmentation_threshold = 0.2 * item # A bin should not have a small remaining capacity
    fragmentation_penalty = np.where(np.logical_and(feasible_bins, remaining_space < fragmentation_threshold), -5, 0)

    # Near-Full Bonus: Give a bonus to bins that are almost full. This is applied after the fragmentation penalty.
    near_full_threshold = 0.1 * np.mean(bins_remain_cap[feasible_bins])
    near_full_bonus = np.where(np.logical_and(feasible_bins, remaining_space < near_full_threshold), 5, 0)

    # Combination: Weighted sum of the different factors.
    priorities[feasible_bins] = (0.4 * space_priority[feasible_bins] +
                                 0.5 * utilization_priority[feasible_bins] +
                                 0.1 * (near_full_bonus[feasible_bins] + fragmentation_penalty[feasible_bins]))

    return priorities
```
