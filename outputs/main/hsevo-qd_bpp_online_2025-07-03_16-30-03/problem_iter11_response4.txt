```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid priority: feasibility, near-full incentive, space penalty."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        priorities = -bins_remain_cap
        return priorities

    remaining_space = bins_remain_cap - item

    #Prioritize almost full bins
    priorities[feasible_bins] = 1/(remaining_space[feasible_bins]+1e-9)

    #Incentive
    priorities[feasible_bins] += np.where(remaining_space[feasible_bins] >= 0 , 1.0,0)
    
    # Near-full boost.
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 5.0
    
    #Penalty for excessive space
    large_space = np.logical_and(feasible_bins, remaining_space > 0.5)
    priorities[large_space] -= 2.0

    return priorities
```
