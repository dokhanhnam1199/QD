```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes feasible, near-full bins, penalizes excessive space."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return -bins_remain_cap  # Allows overflow into emptiest

    remaining_space = bins_remain_cap - item
    
    # Strong incentive for almost full
    almost_full = np.logical_and(feasible_bins, remaining_space < 0.1)
    priorities[almost_full] += 10.0

    # Prioritize by inverse remaining space, if feasible and not almost full
    other_feasible = np.logical_and(feasible_bins, ~almost_full)
    priorities[other_feasible] = 1 / (remaining_space[other_feasible] + 1e-9)

    # Add ratio of item to bin, scaled down
    ratios = item / bins_remain_cap
    priorities[feasible_bins] += -np.log(ratios[feasible_bins]) * 0.05

    return priorities
```
