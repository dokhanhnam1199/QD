```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining capacity after placing item
    remaining_capacity_after_placement = bins_remain_cap - item

    # Assign high priority if item fits well (minimize wasted space). Higher the better fit, the more suitable.
    fit_score = np.where(remaining_capacity_after_placement >= 0, np.exp(-np.abs(remaining_capacity_after_placement - item/2) / item), -np.inf)
    priorities = fit_score

    # Penalize bins where item doesn't fit
    priorities[remaining_capacity_after_placement < 0] = -np.inf

    # Slightly prefer bins that are already somewhat full (avoid creating too many almost-empty bins).
    # This helps balance load across bins
    priorities += bins_remain_cap / np.max(bins_remain_cap) * 0.1  # Scale and add a small bias. Avoid zero division when all bins_remain_cap = 0 which shouldn't happen anyway.

    return priorities
```
