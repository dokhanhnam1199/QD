```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Disqualify bins that can't fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Mark infeasible bins with lowest priority

    # 2. Encourage tight packing: Higher priority for bins where the item fills a larger proportion.
    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins):
        fill_ratios = item / bins_remain_cap[feasible_bins]

        # Non-linear scaling of fill ratio to emphasize near-full bins.
        priorities[feasible_bins] = fill_ratios**2  # Squaring to give higher weight to larger ratios

        # 3. Penalize wasted space:  Exponential decay of wasted space.  Stronger penalty than before.
        remaining_space = bins_remain_cap[feasible_bins] - item
        priorities[feasible_bins] -= np.exp(5 * remaining_space)  # Increased exponent for stronger penalty.  Tune this parameter.

        # 4. Give a slight bonus to bins that are almost full *before* the item is added.
        almost_full_threshold = 0.9  # Tune this parameter.  Bins with > 90% utilization.
        almost_full_bins = bins_remain_cap[feasible_bins] / np.max(bins_remain_cap) > almost_full_threshold #Assumes all bins have the same capacity initially
        priorities[feasible_bins][almost_full_bins] += 0.1 # small bonus
    return priorities
```
