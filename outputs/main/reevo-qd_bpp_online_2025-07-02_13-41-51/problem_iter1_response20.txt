```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give high priority to bins that can fit the item snugly (minimize wasted space)
    fit_mask = bins_remain_cap >= item
    waste = bins_remain_cap - item
    priorities[fit_mask] = np.exp(-waste[fit_mask])

    # Penalize bins that are too full or too empty.
    # Linear scaling can be experimented with.
    priorities = priorities - np.abs(bins_remain_cap - np.mean(bins_remain_cap)) / np.std(bins_remain_cap)
    
    # Give preference to bins that are more full if no perfect fits
    if np.sum(fit_mask) == 0:
        priorities = bins_remain_cap

    # Add a small random component to break ties
    priorities += np.random.rand(len(bins_remain_cap)) * 0.001

    return priorities
```
