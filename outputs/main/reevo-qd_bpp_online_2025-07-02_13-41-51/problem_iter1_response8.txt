```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate the remaining capacity after adding the item.
    remaining_capacities = bins_remain_cap - item
    
    # Give high priority to bins where the item fits.
    fit_mask = remaining_capacities >= 0
    priorities[fit_mask] = 1  # Base priority for fitting
    
    # Prioritize bins that result in higher fullness (lower remaining capacity)
    fullness_scores = (bins_remain_cap[fit_mask] - remaining_capacities[fit_mask]) / bins_remain_cap[fit_mask]
    priorities[fit_mask] += fullness_scores # Adjust priority based on fullness
    
    # Slightly penalize almost-full bins (but still fitting) to encourage a better spread
    almost_full_mask = (remaining_capacities >= 0) & (remaining_capacities < 0.1) # remaining capacity < 0.1
    priorities[almost_full_mask] -= 0.05
        
    # For bins where the item doesn't fit, assign a very low priority
    priorities[~fit_mask] = -1e9
    
    return priorities
```
