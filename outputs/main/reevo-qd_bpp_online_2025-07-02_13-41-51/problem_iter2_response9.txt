```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Disqualify bins that can't fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Mark infeasible bins with lowest priority

    # 2. Encourage tight packing: Higher priority for bins where the item fills a larger proportion.
    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins):
        fill_ratios = item / bins_remain_cap[feasible_bins]
        priorities[feasible_bins] = fill_ratios

        # Minimize wasted space. Add a bonus based on how much space is left.
        remaining_space = bins_remain_cap[feasible_bins] - item
        priorities[feasible_bins] += np.exp(-2 * remaining_space)  # Exponential decay of wasted space, scaled for better effect

        # Further improvement: Penalize bins that are almost full, but not quite
        almost_full_threshold = 0.1  # Define "almost full" as having less than 10% capacity remaining *after* placing item
        almost_full_bins = (remaining_space > 0) & (remaining_space / bins_remain_cap[feasible_bins] < almost_full_threshold)
        priorities[feasible_bins][almost_full_bins] -= 0.5  # Mild penalty for almost full bins

    return priorities
```
