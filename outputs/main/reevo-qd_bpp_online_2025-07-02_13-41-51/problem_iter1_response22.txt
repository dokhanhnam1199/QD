```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Rule out bins that cannot accommodate the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Very low priority if infeasible

    # 2. Remaining capacity as a percentage.
    remaining_perc = bins_remain_cap / 1 # assuming bin capacity is 1.
    # 3. Prioritize bins with enough, but not excessive, remaining capacity
    # Give higher priority to bins that are a "good fit" (e.g., have between item_size and 2*item_size remaining)
    good_fit = (bins_remain_cap >= item) & (bins_remain_cap <= 2 * item)
    priorities[good_fit] += 10  # Substantial bonus for "good fit"

    # 4. Penalty for bins close to full or bins almost empty
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap <= 0.25 + item) # Fill up almost full bins more willingly
    priorities[almost_full] += 5 # Reward filling up almost full bins

    almost_empty = (bins_remain_cap >= item) & (bins_remain_cap >= 0.75)
    priorities[almost_empty] -=2  # discourage adding to almost empty bins, because that makes other placements less efficient

    #5. Items with smallest remaining capacity
    priorities = priorities - bins_remain_cap

    return priorities
```
