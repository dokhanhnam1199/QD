```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First, prioritize bins that can actually fit the item
    fit_mask = bins_remain_cap >= item
    
    if np.any(fit_mask):  # Check if any bin can accommodate the item
        # Calculate the wasted space if the item is placed in each bin. Prioritize less waste
        wasted_space = bins_remain_cap - item
        
        # Avoid tiny differences by rounding.
        wasted_space = np.round(wasted_space, decimals=5)
        
        # Give higher priority to bins with smaller wasted space.
        priorities[fit_mask] = 1 / (wasted_space[fit_mask] + 1e-9)  # Add a small constant to avoid division by zero.
        
        # Boost priority for bins with close to exact fit
        exact_fit_mask = np.isclose(wasted_space, 0) & fit_mask
        priorities[exact_fit_mask] *= 2 #or add a constant, experimenting could be useful

    # For bins that cannot fit the item, assign a very low priority
    else:
        priorities[:] = -1e9
        
    return priorities
```
