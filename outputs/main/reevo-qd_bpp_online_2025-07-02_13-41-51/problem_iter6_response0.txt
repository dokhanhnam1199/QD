```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Disqualify bins that can't fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Mark infeasible bins with lowest priority

    # 2. Encourage tight packing: Higher priority for bins where the item fills a larger proportion.
    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins):
        fill_ratios = item / bins_remain_cap[feasible_bins]
        priorities[feasible_bins] = fill_ratios  # Direct proportion

        # 3. Penalize wasted space (more aggressively for larger waste)
        remaining_space = bins_remain_cap[feasible_bins] - item
        priorities[feasible_bins] += np.exp(-5 * remaining_space)  # Exponential decay of wasted space (steeper)

        # 4. Slight preference for bins that are already somewhat full
        #    This can help consolidate items and reduce the number of bins used.
        occupancy_ratios = (1 - bins_remain_cap[feasible_bins] / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else (1 - bins_remain_cap[feasible_bins] / 1) # handles the case when bins_remain_cap is all zeros, avoiding division by zero
        priorities[feasible_bins] += 0.1 * occupancy_ratios # Small bonus for already occupied bins

        # 5. Prioritize bins that, after packing, have remaining capacity close to the size of smaller items (heuristic to enable future packing)
        if item > 0:  # Avoid division by zero
            ideal_remaining_space = item / 2.0  # Target remaining space to be around half the current item size
            space_difference = np.abs(remaining_space - ideal_remaining_space)
            priorities[feasible_bins] += np.exp(-2 * space_difference) # Boost bins with remaining space close to ideal. The `2` controls how strong the boost is.

    return priorities
```
