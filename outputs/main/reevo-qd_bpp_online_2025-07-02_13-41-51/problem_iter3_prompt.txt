{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\nPrioritize feasibility first. Then, directly reward tight packing and exponentially penalize wasted space to optimize fill ratio. Favor direct proportions and exponential decay for balancing exploitation and exploration while avoiding infeasibility.\n\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Disqualify bins that can't fit the item.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf  # Mark infeasible bins with lowest priority\n\n    # 2. Encourage tight packing: Higher priority for bins where the item fills a larger proportion.\n    #    But only if the bin can fit the item!\n    feasible_bins = ~infeasible_bins\n    if np.any(feasible_bins):\n        fill_ratios = item / bins_remain_cap[feasible_bins]\n        priorities[feasible_bins] = fill_ratios # Direct proportion\n\n        #Bonus : Reduce the amount of wasted space\n        remaining_space = bins_remain_cap[feasible_bins] - item\n        priorities[feasible_bins] += np.exp(-remaining_space) # exponential decay of wasted space\n    return priorities\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}