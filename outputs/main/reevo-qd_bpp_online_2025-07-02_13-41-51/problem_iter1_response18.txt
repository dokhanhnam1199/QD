```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit Decreasing heuristic inspired priority: prefer bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1  # Give a base priority if it can fit
    
    # Maximize bin utilization: the fuller, the better
    utilization = item / bins_remain_cap
    utilization[~can_fit] = -np.inf  # Very negative if cannot fit

    priorities += utilization

    # Avoid fragmentation, prefer bins where the remaining capacity is minimal *after* adding item
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~can_fit] = np.inf  # Infinite if cannot fit
    priorities -= remaining_after_fit / np.max(bins_remain_cap) # Normalize and substract

    # If remaining capacity is really close to item size, boost the priority a bit (avoid edge cases)
    close_to_fit = np.isclose(bins_remain_cap, item, rtol=0, atol=1e-5)
    priorities[close_to_fit] += 0.5

    # Bins that *cannot* fit have a default very low priority so that it is unlikely we will use them if we have any choices.
    priorities[~can_fit] = -1000
    
    return priorities
```
