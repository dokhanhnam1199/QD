```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            waste = cap - item
            # Prioritize bins that fit the item well, but avoid near-full bins if possible
            priorities[i] = (item / cap) * np.exp(-waste)
            # Further enhance priority if the waste is small, but not too small (avoid perfect fits unless almost necessary)
            if 0 < waste <= item/2:  #tune waste to item ratio
                priorities[i] += 0.5*(item/(waste+0.0001)) #to avoid 0 divide
        else:
            priorities[i] = -1e9  # Very low priority for bins that can't fit the item
    return priorities
```
