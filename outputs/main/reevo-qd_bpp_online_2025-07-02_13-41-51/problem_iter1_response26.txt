```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: First-Fit Decreasing-like: Favor bins with enough space, but not too much.
    # The closer the item size is to the remaining capacity, the higher the priority.

    # Heuristic 2: Avoid bins that will become almost empty (wasteful).
    # Penalize bins where (remaining_capacity - item) is very small.

    # Heuristic 3: Use empty bins if the item is large enough relative to bin size

    eligible_bins = bins_remain_cap >= item

    if not np.any(eligible_bins):
        # If no bin can fit the item, find the bin with the most remaining capacity
        # This essentially implements Worst Fit in this specific scenario
        priorities = bins_remain_cap
        return priorities

    remaining_after_fit = bins_remain_cap - item
    
    # Calculate priority based on how well the item fits
    fit_priority = np.where(eligible_bins, 1 - np.abs(item - bins_remain_cap) / bins_remain_cap, 0) # Prioritize bins close in size
    waste_penalty = np.where(eligible_bins, np.exp(-100*remaining_after_fit/bins_remain_cap), 0) # Heavily penalize small remainders
    
    #Prioritize almost full bins (Encourage filling to prevent many almost-full bins)
    almost_full_priority = np.where(eligible_bins, np.exp(-10*bins_remain_cap/item), 0)
    
    # Boost bins that become perfectly full after placement
    perfect_fit_bonus = np.where(remaining_after_fit == 0, 1, 0)
    
    priorities = fit_priority - waste_penalty + perfect_fit_bonus  + almost_full_priority
    

    return priorities
```
