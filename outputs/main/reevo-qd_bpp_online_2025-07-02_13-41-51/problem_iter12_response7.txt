```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Disqualify bins that can't fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Mark infeasible bins with lowest priority

    # 2. Encourage tight packing with exponential reward and penalize wasted space.
    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins):
        remaining_space = bins_remain_cap[feasible_bins] - item
        
        # Fill ratio reward (higher is better)
        fill_ratio = 1 - (remaining_space / bins_remain_cap[feasible_bins])
        priorities[feasible_bins] += np.exp(5 * fill_ratio)

        # Waste penalty (lower is better).  Scale penalty to bin size
        priorities[feasible_bins] -=  remaining_space / np.max(bins_remain_cap) 

        #Small bonus for using almost full bins
        almost_full = remaining_space < 0.1
        priorities[feasible_bins][almost_full] += 1

    return priorities
```
