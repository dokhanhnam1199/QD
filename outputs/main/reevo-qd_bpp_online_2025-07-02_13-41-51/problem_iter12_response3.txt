```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Disqualify bins that can't fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Mark infeasible bins with lowest priority

    # 2. Encourage tight packing: Higher priority for bins where the item fills a larger proportion.
    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins):
        remaining_space = bins_remain_cap[feasible_bins] - item
        
        # Exponential reward for tight packing. Higher exponent for tighter packing.
        priorities[feasible_bins] = np.exp(-10 * remaining_space)

        # 3. Penalize wasted space: Add a penalty based on the amount of wasted space.
        priorities[feasible_bins] -= 0.05 * remaining_space  # Linear penalty for wasted space

        # 4. Reward bins that are already somewhat full.  This helps to avoid creating many bins with very small items.
        occupancy = 1 - bins_remain_cap[feasible_bins] / 1  # Assuming bin capacity is 1
        priorities[feasible_bins] += 0.2 * occupancy

        # 5. Add a bonus for bins where the item fills at least half of the remaining capacity, and the resulting remaining space is small
        large_item_fill = item >= 0.5 * bins_remain_cap[feasible_bins]
        small_remaining = remaining_space < 0.1
        
        priorities[feasible_bins][large_item_fill & small_remaining] += 0.5
        
        
    return priorities
```
