```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit-Decreasing inspired heuristic: prioritize bins that can fit the item with minimal waste.
    # If bin can't fit the item, give it a very low priority.
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            waste = cap - item
            #Prioritize lower waste
            priorities[i] = 1 / (waste + 1e-9) #Avoid division by zero
            # Scale by remaining capacity: prioritize bins with slightly more remaining capacity
            # It can potentially lead to less fragmentation by avoiding bins that are nearly full
            priorities[i] *= cap
        else:
            priorities[i] = -1e9  # Very low priority if the item doesn't fit.

    return priorities
```
