```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Disqualify bins that can't fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Mark infeasible bins with lowest priority

    # 2. Encourage tight packing: Higher priority for bins where the item fills a larger proportion.
    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins):
        remaining_space = bins_remain_cap[feasible_bins] - item
        # Exponential reward for tight packing, and avoid negative exponent
        priorities[feasible_bins] = np.exp(-np.abs(remaining_space))

        # Favor bins with higher occupancy (lower remaining capacity). Normalize occupancy.
        max_capacity = np.max(bins_remain_cap)
        if max_capacity > 0:  # Avoid division by zero if all bins are empty
            occupancy_ratio = (max_capacity - bins_remain_cap[feasible_bins]) / max_capacity
            priorities[feasible_bins] += occupancy_ratio

        # Give a small bonus to almost full bins.
        almost_full_threshold = 0.1 * max_capacity  # Define "almost full" as within 10% of max capacity
        almost_full_bins = (bins_remain_cap[feasible_bins] < item + almost_full_threshold) & (bins_remain_cap[feasible_bins] >= item)
        priorities[feasible_bins][almost_full_bins] += 0.5  # Add a fixed bonus
    return priorities
```
