```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Large enough to fit
    can_fit = bins_remain_cap >= item
    
    # Reward bins where the item fits and doesn't leave too much wasted space.
    # Aim for bins where the utilization is high after adding the item.
    utilization = (item / bins_remain_cap) * can_fit
    
    # Give higher priority to bins which are closer to being full after adding item
    priorities[can_fit] = utilization[can_fit]
    
    # Penalize the bins where there's not enough space (a large negative number). This is already zero by default. No need to penalize explicitly
    
    # Add a small bonus to almost full bins, to prioritize filling them. Specifically the bin will be full if item placed inside.
    almost_full = np.isclose(bins_remain_cap, item)
    priorities[almost_full] += 1.0 # a boost for these nearly full bins
    
    return priorities
```
