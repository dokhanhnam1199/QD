```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Disqualify bins that can't fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Mark infeasible bins with lowest priority

    # 2. Encourage tight packing: Higher priority for bins where the item fills a larger proportion.
    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins):
        fill_ratios = item / bins_remain_cap[feasible_bins]
        priorities[feasible_bins] = fill_ratios  # Direct proportion

        # 3. Penalize wasted space (more aggressively for larger waste)
        remaining_space = bins_remain_cap[feasible_bins] - item
        priorities[feasible_bins] += np.exp(-5 * remaining_space)  # Exponential decay of wasted space (steeper)
        
        # 4. Prioritize bins close to full capacity to consolidate and reduce bins
        capacity_utilization = 1 - (bins_remain_cap[feasible_bins] / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else 0

        # Give higher priority to bins closer to full
        priorities[feasible_bins] += 0.2 * capacity_utilization

        # 5. Prefer bins with smaller remaining capacity among feasible bins
        min_remaining_capacity = np.min(bins_remain_cap[feasible_bins])
        if min_remaining_capacity > 0 :
          priority_boost = np.exp(-5 * (bins_remain_cap[feasible_bins] - min_remaining_capacity))
          priorities[feasible_bins] += priority_boost
        
    return priorities
```
