```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Prioritize bins that can fit the item
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = 1

    # For bins that can fit, prioritize those with smallest remaining capacity after adding item (best-fit heuristic)
    remaining_after_fit = bins_remain_cap[fit_mask] - item
    
    if remaining_after_fit.size > 0:
        # Give a high priority if remaining capacity is smallest. Add small constant to avoid division by zero.
        best_fit_priority = 1 / (remaining_after_fit + 0.0001) #Reciprocal for best fit
        
        # Normalize to ensure that best_fit_priority values are high, but less than inf due to zero or negative capacity

        priorities[fit_mask] += best_fit_priority # add the best fit score
        
        #Prioritze filling a bin, rather than having it mostly empty
        #Remaining is low when a bin is almost full. Reciprocal of small remaining leads to large number.

    # For bins that can't fit, assign very low priority
    priorities[~fit_mask] = -1

    return priorities
```
