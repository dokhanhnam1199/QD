```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Disqualify bins that can't fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Mark infeasible bins with lowest priority

    # 2. Encourage tight packing & penalize wasted space: Exponential reward for filling, penalty for waste.
    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins):
        remaining_space = bins_remain_cap[feasible_bins] - item
        priorities[feasible_bins] = np.exp(-remaining_space)  # Exponential decay of wasted space

        # 3. Reward Higher occupancy (Best-Fit approximation): Prioritize bins with less remaining capacity.
        priorities[feasible_bins] += bins_remain_cap[feasible_bins].max() - bins_remain_cap[feasible_bins]
    return priorities
```
