```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate waste if item is placed in each bin
    waste = bins_remain_cap - item
    
    # Assign high priority to bins where item fits
    fits = waste >= 0
    priorities[fits] = bins_remain_cap[fits] - item # Smaller the waste better is the bin to fit
    
    # Penalize bins where item doesn't fit (negative waste)
    no_fits = waste < 0
    priorities[no_fits] = -np.inf  # Never fit the item here
    
    # Normalize Priorities
    max_priority = np.max(priorities[np.isfinite(priorities)])
    if np.isfinite(max_priority) and max_priority > 0:
        priorities[np.isfinite(priorities)] /= max_priority

    #Prioritize filling more bins
    fill_ratio = item / np.mean(bins_remain_cap[bins_remain_cap>0])
    priorities[np.isfinite(priorities)] = (1-fill_ratio)*priorities[np.isfinite(priorities)]
    
    return priorities
```
