```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility check: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    # 2. Calculate remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item
    remaining_capacities[remaining_capacities < 0] = -1  #Mark infeasible bins
    
    # 3. Prioritize bins based on how full they will be *after* adding the item
    #   Higher priority to bins that will be fuller (less remaining capacity)
    #   Use a reciprocal relationship to prioritize smaller remaining capacity. Add small epsilon for numerical stability.
    priorities[feasible_bins] = 1.0 / (remaining_capacities[feasible_bins] + 0.00001)
    
    # 4. Boost priority for almost full bins to completely fill them if possible.
    almost_full = (bins_remain_cap >= item) & (bins_remain_cap <= 1.5 * item) #bins within 50% of item size.
    priorities[almost_full] *= 2 #can tune this
    
    # 5. Penalize bins which become too empty.
    too_empty = (remaining_capacities > 0.75) & (feasible_bins)
    priorities[too_empty] *= 0.5 #can tune this
    
    return priorities
```
