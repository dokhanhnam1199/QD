```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Disqualify bins that can't fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Mark infeasible bins with lowest priority

    # 2. Encourage tight packing: Higher priority for bins where the item fills a larger proportion.
    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins):
        fill_ratios = item / bins_remain_cap[feasible_bins]
        priorities[feasible_bins] = fill_ratios  # Direct proportion

        # 3. Penalize wasted space (more aggressively for larger waste)
        remaining_space = bins_remain_cap[feasible_bins] - item
        priorities[feasible_bins] -= np.exp(2 * remaining_space)  # Exponential penalty of wasted space

        # 4. Slight preference for bins that are already somewhat full
        occupancy_ratios = (1 - bins_remain_cap[feasible_bins] / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else 0
        priorities[feasible_bins] += 0.05 * occupancy_ratios

        # 5. Prioritize bins with capacity close to item size (Best-Fit approximation)
        capacity_diff = np.abs(bins_remain_cap[feasible_bins] - item)
        priorities[feasible_bins] += np.exp(-3 * capacity_diff)

        # 6. Further penalize bins with very small remaining capacity after placing the item.
        # Avoid creating excessively fragmented bins.
        small_remaining = remaining_space < 0.1
        priorities[feasible_bins][small_remaining] -= 0.5

    return priorities
```
