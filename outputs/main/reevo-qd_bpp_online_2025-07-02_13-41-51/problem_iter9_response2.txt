```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Disqualify bins that can't fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Mark infeasible bins with lowest priority

    # 2. Encourage tight packing: Higher priority for bins where the item fills a larger proportion.
    #    But only if the bin can fit the item!
    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins):
        remaining_space = bins_remain_cap[feasible_bins] - item
        fill_ratios = item / (bins_remain_cap[feasible_bins] + 1e-9)  #added a small value to avoid division by zero.

        # Exponentially reward tight packing and penalize wasted space
        priorities[feasible_bins] = np.exp(5 * fill_ratios) - np.exp(remaining_space)  # Adjusted exponent for emphasis
        
    return priorities
```
