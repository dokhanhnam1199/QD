[
  {
    "stdout_filepath": "problem_iter0_stdout0.txt",
    "code_path": "problem_iter0_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities",
    "response_id": 0,
    "obj": 149.30195452732352,
    "SLOC": 5.0,
    "cyclomatic_complexity": 1.0,
    "halstead": 11.60964047443681,
    "mi": 94.04446327225541,
    "token_count": 47.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter1_response0.txt_stdout.txt",
    "code_path": "problem_iter1_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Disqualify bins that can't fit the item.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf  # Mark infeasible bins with lowest priority\n\n    # 2. Encourage tight packing: Higher priority for bins where the item fills a larger proportion.\n    #    But only if the bin can fit the item!\n    feasible_bins = ~infeasible_bins\n    if np.any(feasible_bins):\n        fill_ratios = item / bins_remain_cap[feasible_bins]\n        priorities[feasible_bins] = fill_ratios # Direct proportion\n\n        #Bonus : Reduce the amount of wasted space\n        remaining_space = bins_remain_cap[feasible_bins] - item\n        priorities[feasible_bins] += np.exp(-remaining_space) # exponential decay of wasted space\n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 110.44611534953322,
    "mi": 81.20127912171253,
    "token_count": 119.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response0.txt_stdout.txt",
    "code_path": "problem_iter2_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Disqualify bins that can't fit the item.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf  # Mark infeasible bins with lowest priority\n\n    # 2. Encourage tight packing: Higher priority for bins where the item fills a larger proportion.\n    feasible_bins = ~infeasible_bins\n    if np.any(feasible_bins):\n        fill_ratios = item / bins_remain_cap[feasible_bins]\n        priorities[feasible_bins] = fill_ratios  # Direct proportion\n\n        # 3. Penalize wasted space (more aggressively for larger waste)\n        remaining_space = bins_remain_cap[feasible_bins] - item\n        priorities[feasible_bins] += np.exp(-5 * remaining_space)  # Exponential decay of wasted space (steeper)\n\n        # 4. Slight preference for bins that are already somewhat full\n        #    This can help consolidate items and reduce the number of bins used.\n        occupancy_ratios = (1 - bins_remain_cap[feasible_bins] / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else 0\n        priorities[feasible_bins] += 0.1 * occupancy_ratios # Small bonus for already occupied bins\n\n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 14.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 173.06477719407374,
    "mi": 82.95735051302475,
    "token_count": 162.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter3_response0.txt_stdout.txt",
    "code_path": "problem_iter3_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Disqualify bins that can't fit the item.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf  # Mark infeasible bins with lowest priority\n\n    # 2. Encourage tight packing and penalize wasted space exponentially\n    feasible_bins = ~infeasible_bins\n    if np.any(feasible_bins):\n        remaining_space = bins_remain_cap[feasible_bins] - item\n        priorities[feasible_bins] = np.exp(-5 * remaining_space) # Exponential decay of wasted space\n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 55.506595772116384,
    "mi": 85.61185280605027,
    "token_count": 107.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter4_response1.txt_stdout.txt",
    "code_path": "problem_iter4_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Disqualify bins that can't fit the item.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf  # Mark infeasible bins with lowest priority\n\n    # 2. Encourage tight packing: Higher priority for bins where the item fills a larger proportion.\n    feasible_bins = ~infeasible_bins\n    if np.any(feasible_bins):\n        fill_ratios = item / bins_remain_cap[feasible_bins]\n        priorities[feasible_bins] = fill_ratios  # Direct proportion\n\n        # 3. Penalize wasted space (more aggressively for larger waste)\n        remaining_space = bins_remain_cap[feasible_bins] - item\n        priorities[feasible_bins] += np.exp(-5 * remaining_space)  # Exponential decay of wasted space (steeper)\n\n        # 4. Slight preference for bins that are already somewhat full\n        #    This can help consolidate items and reduce the number of bins used.\n        occupancy_ratios = (1 - bins_remain_cap[feasible_bins] / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else 0\n        priorities[feasible_bins] += 0.1 * occupancy_ratios # Small bonus for already occupied bins\n\n        # 5. Prioritize bins with capacity close to item size (Best-Fit approximation)\n        capacity_diff = np.abs(bins_remain_cap[feasible_bins] - item)\n        # Scale the priority based on the difference, smaller diff -> higher priority\n        priorities[feasible_bins] += np.exp(-2 * capacity_diff)\n        \n    return priorities",
    "response_id": 1,
    "obj": 4.048663741523748,
    "SLOC": 13.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 120.40465370320703,
    "mi": 84.62666696437078,
    "token_count": 142.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response0.txt_stdout.txt",
    "code_path": "problem_iter5_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Disqualify bins that can't fit the item.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf  # Mark infeasible bins with lowest priority\n\n    # 2. Encourage tight packing: Higher priority for bins where the item fills a larger proportion.\n    feasible_bins = ~infeasible_bins\n    if np.any(feasible_bins):\n        remaining_space = bins_remain_cap[feasible_bins] - item\n        # Exponential reward for tight packing, penalty for wasted space\n        priorities[feasible_bins] = np.exp(-remaining_space)\n\n        # Favor bins with higher occupancy (lower remaining capacity)\n        occupancy_ratio = (1 - bins_remain_cap[feasible_bins] / np.max(bins_remain_cap)) #normalize occupancy\n        priorities[feasible_bins] += occupancy_ratio\n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 11.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 105.41561814669026,
    "mi": 86.26611145592787,
    "token_count": 133.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response1.txt_stdout.txt",
    "code_path": "problem_iter6_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Disqualify bins that can't fit the item.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf  # Mark infeasible bins with lowest priority\n\n    # 2. Encourage tight packing: Higher priority for bins where the item fills a larger proportion.\n    feasible_bins = ~infeasible_bins\n    if np.any(feasible_bins):\n        fill_ratios = item / bins_remain_cap[feasible_bins]\n        priorities[feasible_bins] = fill_ratios  # Direct proportion\n\n        # 3. Penalize wasted space (more aggressively for larger waste)\n        remaining_space = bins_remain_cap[feasible_bins] - item\n        priorities[feasible_bins] += np.exp(-5 * remaining_space)  # Exponential decay of wasted space (steeper)\n        \n        # 4. Prioritize bins close to full capacity to consolidate and reduce bins\n        capacity_utilization = 1 - (bins_remain_cap[feasible_bins] / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else 0\n\n        # Give higher priority to bins closer to full\n        priorities[feasible_bins] += 0.2 * capacity_utilization\n\n        # 5. Prefer bins with smaller remaining capacity among feasible bins\n        min_remaining_capacity = np.min(bins_remain_cap[feasible_bins])\n        if min_remaining_capacity > 0 :\n          priority_boost = np.exp(-5 * (bins_remain_cap[feasible_bins] - min_remaining_capacity))\n          priorities[feasible_bins] += priority_boost\n        \n    return priorities",
    "response_id": 1,
    "obj": 4.048663741523748,
    "SLOC": 13.0,
    "cyclomatic_complexity": 2.0,
    "halstead": 118.59257041502654,
    "mi": 83.39583402172747,
    "token_count": 166.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response0.txt_stdout.txt",
    "code_path": "problem_iter8_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Disqualify bins that can't fit the item.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf  # Mark infeasible bins with lowest priority\n\n    # 2. Encourage tight packing: Higher priority for bins where the item fills a larger proportion.\n    feasible_bins = ~infeasible_bins\n    if np.any(feasible_bins):\n        fill_ratios = item / bins_remain_cap[feasible_bins]\n\n        # Non-linear scaling of fill ratio to emphasize near-full bins.\n        priorities[feasible_bins] = fill_ratios**2  # Squaring to give higher weight to larger ratios\n\n        # 3. Penalize wasted space:  Exponential decay of wasted space.  Stronger penalty than before.\n        remaining_space = bins_remain_cap[feasible_bins] - item\n        priorities[feasible_bins] -= np.exp(5 * remaining_space)  # Increased exponent for stronger penalty.  Tune this parameter.\n\n        # 4. Give a slight bonus to bins that are almost full *before* the item is added.\n        almost_full_threshold = 0.9  # Tune this parameter.  Bins with > 90% utilization.\n        almost_full_bins = bins_remain_cap[feasible_bins] / np.max(bins_remain_cap) > almost_full_threshold #Assumes all bins have the same capacity initially\n        priorities[feasible_bins][almost_full_bins] += 0.1 # small bonus\n    return priorities",
    "response_id": 0,
    "obj": 4.048663741523748,
    "SLOC": 16.0,
    "cyclomatic_complexity": 3.0,
    "halstead": 280.1263175996992,
    "mi": 77.09589930147686,
    "token_count": 220.0,
    "exec_success": true
  }
]