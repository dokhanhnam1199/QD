```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Heuristic 1: Remaining capacity after placing item (higher is better, but penalize negative values)
    remaining_capacity = bins_remain_cap - item
    priorities += np.where(remaining_capacity >= 0, remaining_capacity, -np.inf) 
    
    # Heuristic 2: Fill ratio after placing item (closer to 1 is better, but only if item fits)
    fill_ratio = (bins_remain_cap - item) / 1.0 # Assumes bin capacity is 1.0.  More robust version below.
    fill_ratio = np.where(remaining_capacity >= 0, fill_ratio, -np.inf)
    priorities += np.abs(fill_ratio -0.5) * 0.5 # Prefer middle ground avoiding bins near empty/full
    priorities = -np.abs(fill_ratio)

    # Heuristic 3: Prefer bins that are already somewhat full
    priorities += (1 - bins_remain_cap)*0.3
    
    #Heuristic 4: Big items require big bins
    priorities += (bins_remain_cap)*item*0.2
    
    #Heuristic 5: Balance usage
    avg_cap = np.mean(bins_remain_cap)
    priorities += (bins_remain_cap - avg_cap) * 0.1 #penalize those that are far from avg_cap
    

    return priorities
```
