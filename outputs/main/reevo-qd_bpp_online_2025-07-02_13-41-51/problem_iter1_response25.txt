```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # 1. Feasibility: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item
    
    # 2. Remaining Capacity Consideration
    remaining_space = bins_remain_cap - item
    
    # 3. Prioritize bins with tighter fit (avoid fragmentation).  If it doesn't fit assign low negative priority.
    priorities = -np.abs(remaining_space)
    priorities[~feasible_bins] = -np.inf
    
    # 4. Give slight preference to bins that are already somewhat full to promote consolidation
    priorities += (1 - bins_remain_cap / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else 0 

    # 5. Add small noise to break ties.  This can help prevent getting stuck in local minima, as same bins will get chosen repeatedly otherwise.
    priorities += np.random.normal(0, 0.001, size=bins_remain_cap.shape)
    
    return priorities
```
