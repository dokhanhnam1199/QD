```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit Decreasing heuristic inspiration: prioritize bins with sufficient space
    # If item fits, give a base priority proportional to how much space it saves.
    # Add a bonus if it fits *exactly* (or very nearly)
    
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            priorities[i] = cap - item  # remaining space

            if np.isclose(cap, item): #prefer exact fit
                priorities[i] += 1  # Add bonus

            #Prioritize bins that are already partially filled, to reduce fragmentation.
            priorities[i] += (1 - (cap/10)) if (cap/10) < 1 else 0  # assume max bin cap = 10; if bin already at 90% of capacity give it the most bonus possible of 1

        else:
            priorities[i] = -np.inf  # Disqualify if item doesn't fit
    
    return priorities
```
