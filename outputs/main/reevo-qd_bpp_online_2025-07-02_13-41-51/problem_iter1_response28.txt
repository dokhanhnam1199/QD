```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility check: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if np.any(feasible_bins):  # Only compute priorities if there's a feasible bin
        # 1. Remaining capacity after placement: Prefer bins with smaller remaining capacity after adding item
        remaining_capacity_after_placement = bins_remain_cap - item
        priorities[feasible_bins] += -remaining_capacity_after_placement[feasible_bins]
        
        # 2. Fill ratio: Prefer bins with higher fill ratio after placing item
        fill_ratio_after_placement = (bins_remain_cap - remaining_capacity_after_placement) / np.max(bins_remain_cap)  # Assumes all bins have same original capacity, normalise to 1
        priorities[feasible_bins] += fill_ratio_after_placement[feasible_bins]
        
        # 3. Bonus for bins that are nearly full after placing item: Encourages to fill up bins
        nearly_full_threshold = 0.95 # Bin should be 95% full after placing item
        nearly_full = fill_ratio_after_placement >= nearly_full_threshold
        priorities[nearly_full] += 10  # Add a significant bonus
    
    # 4. Very Important : Assign minimum priority (-inf) to the bins which cannot accommodate the item
    priorities[~feasible_bins] = -np.inf
    
    return priorities
```
