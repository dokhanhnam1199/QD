```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Enough capacity, prioritize bins with least remaining capacity
            # after placing item, but penalize nearly full bins.
            remaining = cap - item
            priorities[i] = (1 / (remaining + 0.0001)) * (1 - (item/cap)**2) # Avoid division by zero and also prefer more filled bins

            #priorities[i] = cap - item # Prioritize bins with minimum waste. This is equivalent to First Fit Decreasing

        else:
            # Not enough capacity
            priorities[i] = -1e9 # Very low priority so bin wont be selected
    return priorities
```
