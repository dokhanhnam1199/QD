```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Heuristic 1:  Highest priority to bins where the item fits best (smallest wasted space).
    # Avoids fragmentation, aims to fill bins more completely.
    fit_indices = bins_remain_cap >= item
    if np.any(fit_indices):
        priorities[fit_indices] = bins_remain_cap[fit_indices] - item
        priorities[~fit_indices] = -np.inf # Very low priority if it doesnt fit
    else:
        priorities[:] = -np.inf # If it doesn't fit in any bin.  This avoids adding to any existing bin and should trigger a new bin if the main algorithm handles this correctly.

    #Heuristic 2: slight bonus to bins that are almost full (but will fit the item)
    almost_full = (bins_remain_cap > item) & (bins_remain_cap <= 1.5*item)
    priorities[almost_full] += 0.1 #Small bonus.
    

    #Heuristic 3: Subtract constant from nearly full bins to incentivize adding to less-full ones when possible.
    nearly_full = bins_remain_cap < 0.2 # If a bin is almost full and will get filled.
    priorities[nearly_full] -= 0.2
        
    return priorities
```
