```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining capacity after adding the item
    remaining_capacities = bins_remain_cap - item

    # Assign priorities based on different criteria
    for i, remaining_capacity in enumerate(remaining_capacities):
        if remaining_capacity < 0:
            # Item doesn't fit
            priorities[i] = -np.inf  # Very low priority (or negative infinity)
        elif remaining_capacity == 0:
            # Perfect fit
            priorities[i] = np.inf  # Very high priority (fill bin perfectly)
        else:
            # Prioritize bins with tighter fit, but not too tight
            priorities[i] = 1.0 / (remaining_capacity + 0.0001) # Avoid division by zero. Higher remaining capacity gets lower priority

            # Bonus for bins where the item fills a significant portion
            fill_ratio = item / bins_remain_cap[i]
            priorities[i] += fill_ratio * 2

    return priorities
```
