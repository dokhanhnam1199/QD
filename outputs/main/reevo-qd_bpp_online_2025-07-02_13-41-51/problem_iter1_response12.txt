```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give high priority to bins that can fit the item with minimal wasted space.
    # Avoid bins where the item doesn't fit (set to -np.inf).

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            priorities[i] = (cap - item)  # Remaining space if added (smaller is better -> higher priority). Invert later
        else:
            priorities[i] = -np.inf  # Cannot fit, so set priority to -inf
    
    priorities = -priorities # Flip so that small values are better.

    # Add a small bonus for bins that are nearly full before adding the item.  This encourages filling bins.
    # Only add the bonus if the bin *can* contain the item.
    valid_bins = bins_remain_cap >= item
    priorities[valid_bins] += 0.01*(1 - bins_remain_cap[valid_bins]/np.max(bins_remain_cap))


    return priorities
```
