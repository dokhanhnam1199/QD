```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Reward bins that can fit the item
            priorities[i] = (cap - item) / cap  # Remaining space after packing, relative to bin size. Prefer tighter fits.

            # Bonus for almost full bins
            if cap < 1.1 * item: # encourage packing items that nearly fill bins. 1.1 factor prevents overfilling.
                priorities[i] += 0.5
        else:
            # Penalize bins that cannot fit the item heavily
            priorities[i] = -1000.0
    return priorities
```
