```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Huge penalty for bins that can't fit the item
    priorities[bins_remain_cap < item] = -np.inf
    
    # Prioritize bins with remaining capacity close to the item size
    # Avoids creating lots of nearly-empty bins at the end.
    
    diff = np.abs(bins_remain_cap - item)
    priorities[bins_remain_cap >= item] = 1.0 / (diff[bins_remain_cap >= item] + 1e-9) # Adding small constant to prevent division by zero
    
    #Bonus to nearly full bins

    nearly_full = (bins_remain_cap >= item) & (bins_remain_cap <= item * 1.25)  #tune hyperparameter here.
    priorities[nearly_full] += 2.0 # Higher boost to influence its filling

    return priorities
```
