```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining space after placing the item
    remaining_space = bins_remain_cap - item

    # Assign high priority to bins that can fit the item
    fit_mask = remaining_space >= 0
    priorities[fit_mask] = bins_remain_cap[fit_mask] #prioritize bins with more remaining capacity (First Fit Decreasing inspired)

    # If no bin can fit the item, assign a very low priority (negative value) to all bins
    if not np.any(fit_mask):
        priorities[:] = -np.inf
    else:
        # Adjust priority based on wasted space (minimize wasted space)
        wasted_space = np.abs(remaining_space[fit_mask])
        priorities[fit_mask] -= wasted_space #The smaller the wasted space, the higher the priority
    return priorities
```
