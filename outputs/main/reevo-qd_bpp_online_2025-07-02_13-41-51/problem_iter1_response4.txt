```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit-Decreasing Inspired: Prefer bins that can accommodate the item with least waste.
    waste = bins_remain_cap - item
    
    # Penalize bins that cannot fit the item.
    infeasible_mask = waste < 0
    waste[infeasible_mask] = np.inf 
    
    priorities = -waste  # Lower waste is better (higher priority).

    # Additionally, incentivize bins that are already somewhat full. A heuristic to guide towards filling already used bins
    # rather than starting new ones (reduces the total number of bins needed). This adds some 'best fit' element to avoid small fragments.
    
    bin_utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)
    priorities += 0.5 * bin_utilization # Scale this based on performance
    
    # If no bin can fit the item, let all bins have same priority. This reduces bias introduced by utilization rate
    if np.all(infeasible_mask):
       priorities = np.ones_like(priorities) / len(priorities)
    else:
       priorities[infeasible_mask] = -np.inf
    return priorities
```
