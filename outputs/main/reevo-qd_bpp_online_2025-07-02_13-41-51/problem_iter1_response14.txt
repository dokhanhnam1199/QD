```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after adding the item
    remaining_after_add = bins_remain_cap - item
    
    # Give high priority to bins where the item fits and minimizes wasted space
    # First check feasibility (item fits or not)
    feasible_bins = remaining_after_add >= 0
    
    if np.any(feasible_bins):
        # Calculate wasted space for feasible bins
        wasted_space = remaining_after_add[feasible_bins]
        
        # Give higher priority to bins with smallest wasted space
        priorities[feasible_bins] = 1 / (1e-6 + wasted_space) # avoid division by zero

        # Boost the priority if the item fills a significant portion of the bin.
        fill_ratio = item / bins_remain_cap[feasible_bins]
        priorities[feasible_bins] *= (1 + fill_ratio)  
    else:
      # If item doesn't fit into any bin, assign priority -inf. Make sure an infeasible choice will be impossible if one exists.
      priorities[:] = -np.inf

    #If multiple bins have same remaining capacity
    unique_capacities = np.unique(bins_remain_cap)
    for cap in unique_capacities:
      indices = np.where(bins_remain_cap == cap)[0]
      if len(indices) > 1:
        priorities[indices] = np.random.rand(len(indices)) # Tie break

    return priorities
```
