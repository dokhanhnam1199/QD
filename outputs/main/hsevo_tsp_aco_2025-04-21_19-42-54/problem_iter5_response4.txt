```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """Adaptive heuristic combining shortest paths, gravitational attraction, and sparsification."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    epsilon = 1e-9

    # Shortest Path Influence
    shortest_path_matrix = np.copy(distance_matrix)
    for k in range(n):
        for i in range(n):
            for j in range(n):
                shortest_path_matrix[i, j] = min(shortest_path_matrix[i, j], shortest_path_matrix[i, k] + shortest_path_matrix[k, j])

    mean_distance = np.mean(distance_matrix[distance_matrix != 0])
    shortest_path_factor = np.exp(-shortest_path_matrix / mean_distance)

    # Inverse distance with centrality boost from v1
    inverse_distance = 1 / (distance_matrix + np.eye(n))
    node_centrality = np.sum(inverse_distance, axis=1)
    edge_centrality = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            edge_centrality[i, j] = node_centrality[i] * node_centrality[j]
    centrality_boost = inverse_distance * (edge_centrality**0.5 + 1e-9)

    # Gravitational attraction
    gravitational_attraction = 1.0 / (distance_matrix**2 + epsilon)

    # Combine factors with normalization
    combined = shortest_path_factor + gravitational_attraction + centrality_boost

    # Normalizing the matrix values to range between 0 and 1
    combined = (combined - np.min(combined)) / (np.max(combined) - np.min(combined))
    heuristics = combined

    # Sparsification
    threshold = np.percentile(heuristics[heuristics > 0], 20)
    heuristics[heuristics < threshold] = 0

    return heuristics
```
