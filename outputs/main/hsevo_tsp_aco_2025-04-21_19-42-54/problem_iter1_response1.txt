```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Einstein's heuristics for TSP using stochastic solution sampling,
    considering both distance and potential cluster structures.

    Args:
        distance_matrix: A numpy array representing the distances between cities.

    Returns:
        A numpy array of the same shape as distance_matrix, representing the
        prior indicators of how promising it is to include each edge in a solution.
    """

    n = distance_matrix.shape[0]

    # 1. Inverse distance: Shorter distances are generally more promising.
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # 2. Node degree centrality adjustment: Nodes with fewer close neighbors might be more critical.
    degree_centrality = np.sum(heuristic_matrix, axis=0)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] /= (degree_centrality[i] * degree_centrality[j])**0.25 # Adjust centrality influence with exponent
    
    # 3. Adjust for Triangle Inequality violations (proxy for "shortcuts"):
    #    If going from i to k to j is significantly shorter than i to j, it hints
    #    that i to j may be a useful long-range connection in some cases.
    #    We *decrease* its heuristic value, penalizing direct connections where shortcuts exist
    for i in range(n):
        for j in range(n):
            if i != j:
                shortcut_factor = 0.0
                for k in range(n):
                    if i != k and j != k:
                         potential_shortcut = distance_matrix[i, k] + distance_matrix[k, j]
                         shortcut_factor += np.maximum(0, (distance_matrix[i, j] - potential_shortcut) / distance_matrix[i,j])
                heuristic_matrix[i, j] /= (1 + shortcut_factor/ n ) # Average, normalized impact of shortcuts

    # 4. Symmetry correction:  Ensure the matrix is symmetric (if it wasn't already)
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2

    return heuristic_matrix
```
