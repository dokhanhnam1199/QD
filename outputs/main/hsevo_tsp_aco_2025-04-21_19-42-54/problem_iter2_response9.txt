```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """Combines inverse distance, gravity, and degree for TSP."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)
    inverse_distance = 1.0 / (distance_matrix + 1e-6)
    total_distances = np.sum(distance_matrix, axis=0)
    gravity_potential = total_distances / np.mean(total_distances)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] = inverse_distance[i, j] * (gravity_potential[i] + gravity_potential[j])
            else:
                heuristic_matrix[i, j] = 0

    node_degree = np.sum(heuristic_matrix > 0, axis=0)
    for i in range(n):
        for j in range(n):
            if i != j:
                degree_penalty = 1 / (node_degree[i] + node_degree[j] + 1e-9)
                heuristic_matrix[i,j] = heuristic_matrix[i, j] * degree_penalty
    heuristic_matrix = (heuristic_matrix - np.min(heuristic_matrix)) / (np.max(heuristic_matrix) - np.min(heuristic_matrix) + 1e-9)
    return heuristic_matrix
```
