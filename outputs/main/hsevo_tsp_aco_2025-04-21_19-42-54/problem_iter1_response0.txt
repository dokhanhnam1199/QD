```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for the Traveling Salesman Problem based on a combination of
    inverse distance, node degree (favoring lower degree), and a randomized
    component to encourage exploration.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances
                                      between cities. distance_matrix[i][j] is the
                                      distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each
                      element indicates the prior probability of including the
                      corresponding edge in a TSP tour.  Higher values indicate
                      more promising edges.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance heuristic
    inverse_distance = 1.0 / (distance_matrix + np.eye(n)) # Avoid division by zero

    # Node degree heuristic: Penalize high-degree nodes
    degree_penalty = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                degree_i = np.sum(inverse_distance[i, :])
                degree_j = np.sum(inverse_distance[j, :])
                degree_penalty[i, j] = 1.0 / (degree_i * degree_j)  # Favor edges connecting to low-degree nodes
    
    # Randomized component: Encourage exploration
    random_component = np.random.rand(n, n) * 0.1  # Small random values
    

    # Combine the heuristics
    heuristic_matrix = inverse_distance * (1 + degree_penalty) + random_component

    # Normalize the heuristic matrix to values between 0 and 1 (optional)
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix = heuristic_matrix / max_val

    return heuristic_matrix
```
