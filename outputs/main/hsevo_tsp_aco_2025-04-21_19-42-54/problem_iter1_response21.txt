```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for the Traveling Salesman Problem (TSP) based on a combination of inverse distance,
    nearest neighbor considerations, and a touch of randomness to explore the solution space.

    This heuristic prioritizes edges that are short (inverse distance) and connects to nodes with
    few close neighbors (discouraging dense clusters initially). A small random component is added
    to break ties and encourage exploration.  Zero distances are avoided to prevent division by zero.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances between cities.
                                       distance_matrix[i, j] is the distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element indicates the
                    prior promise of including the corresponding edge in the TSP solution.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Avoid division by zero. A small epsilon is added to ensure no edge is infinitely attractive.
    epsilon = 1e-9
    inverse_distance = 1 / (distance_matrix + epsilon)

    # Nearest neighbor consideration: penalize connecting to nodes with too many close neighbors
    neighbor_penalty = np.zeros((n, n))
    for i in range(n):
        distances = distance_matrix[i, :]
        # Sort distances and find the indices of the k nearest neighbors (excluding itself)
        nearest_neighbors_indices = np.argsort(distances)[1:min(4, n)]  # k=3 or fewer
        for j in range(n):
            if j in nearest_neighbors_indices:
                neighbor_penalty[i, j] = -0.1  # Relatively minor penalty

    # Randomness for exploration. Smaller than other components to not destroy overall direction
    random_component = 0.01 * np.random.rand(n, n)


    heuristic_matrix = inverse_distance + neighbor_penalty + random_component
    return heuristic_matrix
```
