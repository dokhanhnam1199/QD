```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Newtonian Heuristics for TSP Edge Prioritization:
    Combines gravitational attraction (inverse square distance) with a simulated annealing-inspired temperature factor
    to prioritize shorter edges and prevent premature convergence.

    Args:
        distance_matrix (np.ndarray):  Distance matrix representing the TSP instance.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution.  Higher values suggest higher priority.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Handle potential division by zero or near-zero distances:
    epsilon = 1e-9  # A small value to avoid division by zero

    # Temperature parameter - Decreases as algorithm runs
    temperature = 1.0  # Initial Temperature - High initially allows exploration.

    # Gravitational attraction component (scaled and temperature modulated):
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] = (1.0 / (distance_matrix[i, j]**2 + epsilon)) * temperature
            else:
                heuristics[i, j] = 0.0 # No self loops

    # Annealing Schedule - Decay of the temperature
    temperature *= 0.995 #Reduce temperature each step (simulates cooling)
    # Can use other annealing functions, such as: temperature = initial_temperature / (1 + np.log(iteration_count))

    return heuristics

```
