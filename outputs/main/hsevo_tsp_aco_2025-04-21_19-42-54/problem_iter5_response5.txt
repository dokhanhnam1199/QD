```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """Adaptive heuristic: Combines shortest path, edge attraction, and adaptive temperature scaling."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    epsilon = 1e-9
    initial_temperature = 1.0
    current_temperature = initial_temperature

    # Shortest Path Influence
    shortest_path_matrix = np.copy(distance_matrix)
    for k in range(n):
        for i in range(n):
            for j in range(n):
                shortest_path_matrix[i, j] = min(shortest_path_matrix[i, j], shortest_path_matrix[i, k] + shortest_path_matrix[k, j])

    mean_distance = np.mean(distance_matrix[distance_matrix != 0])
    node_desirability = np.zeros(n)
    for i in range(n):
        node_desirability[i] = np.sum(1.0 / (distance_matrix[i, :] + epsilon))
    node_desirability /= np.max(node_desirability)

    edge_attraction = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                edge_attraction[i, j] = (1.0 / (distance_matrix[i, j]**2 + epsilon))
            else:
                edge_attraction[i, j] = 0.0

    edge_attraction = edge_attraction / np.max(edge_attraction)

    for i in range(n):
        for j in range(n):
            if i != j:
                shortest_path_factor = np.exp(-shortest_path_matrix[i, j] / mean_distance)
                heuristics[i, j] = (edge_attraction[i, j] * (node_desirability[i] + node_desirability[j]) + shortest_path_factor) * current_temperature
            else:
                heuristics[i, j] = 0.0

    threshold = np.percentile(heuristics[heuristics > 0], 40)
    heuristics[heuristics < threshold] = 0

    edge_values = heuristics[heuristics > 0]
    if len(edge_values) > 0:
        edge_variance = np.var(edge_values)
    else:
        edge_variance = 0.0

    if edge_variance > 0.1:
        current_temperature *= 0.99
    else:
        current_temperature *= 0.999

    current_temperature = max(current_temperature, 0.01)

    return heuristics
```
