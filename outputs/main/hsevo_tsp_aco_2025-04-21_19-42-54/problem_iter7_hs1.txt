import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, percentile_threshold: float = 63.62021093284392, epsilon: float = 1.009967160670338e-07) -> np.ndarray:
    """Adaptive heuristics combining distance, desirability, sparsification."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Node Desirability: Inverse sum of distances
    node_desirability = np.sum(1.0 / (distance_matrix + epsilon), axis=1)
    node_desirability /= np.max(node_desirability)

    # Edge Attraction: Inverse squared distance
    edge_attraction = 1.0 / (distance_matrix**2 + epsilon)
    np.fill_diagonal(edge_attraction, 0)
    edge_attraction /= np.max(edge_attraction)

    # Combine desirability and attraction
    heuristics = edge_attraction * (node_desirability[:, None] + node_desirability[None, :])

    # Sparsification: Keep top edges
    threshold = np.percentile(heuristics[heuristics > 0], percentile_threshold)
    heuristics[heuristics < threshold] = 0

    # Normalize
    heuristics = (heuristics - np.min(heuristics)) / (np.max(heuristics) - np.min(heuristics) + epsilon)

    return heuristics
