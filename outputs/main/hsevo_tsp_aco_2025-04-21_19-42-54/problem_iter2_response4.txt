```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    TSP heuristics: Combines inverse distance, savings, node centrality, and randomness.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Inverse distance
    inverse_distance = 1 / (distance_matrix + np.eye(n))
    heuristics += inverse_distance

    # Savings Heuristic
    depot = 0
    savings = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                savings[i, j] = distance_matrix[depot, i] + distance_matrix[depot, j] - distance_matrix[i, j]
    heuristics += savings / (distance_matrix + np.eye(n))

    # Node centrality
    node_centrality = np.sum(inverse_distance, axis=1)
    edge_centrality = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            edge_centrality[i, j] = node_centrality[i] * node_centrality[j]
    heuristics += inverse_distance * (edge_centrality**0.5 + 1e-9)

    # Randomness
    randomness = np.random.rand(n, n) * 0.05
    heuristics += randomness

    heuristics[np.diag_indices_from(heuristics)] = -1

    heuristics = (heuristics - np.min(heuristics)) / (np.max(heuristics) - np.min(heuristics))

    return heuristics
```
