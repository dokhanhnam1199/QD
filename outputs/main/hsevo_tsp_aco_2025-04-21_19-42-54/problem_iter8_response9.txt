```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """Adaptive heuristic combining shortest paths, centrality, and adaptive sparsification."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    epsilon = 1e-9

    # Shortest Path Influence
    shortest_path_matrix = np.copy(distance_matrix)
    for k in range(n):
        for i in range(n):
            for j in range(n):
                shortest_path_matrix[i, j] = min(shortest_path_matrix[i, j], shortest_path_matrix[i, k] + shortest_path_matrix[k, j])

    mean_distance = np.mean(distance_matrix[distance_matrix != 0])
    shortest_path_factor = np.exp(-shortest_path_matrix / (mean_distance + epsilon))

    # Inverse distance with centrality boost
    inverse_distance = 1 / (distance_matrix + np.eye(n) + epsilon)
    node_centrality = np.sum(inverse_distance, axis=1)
    edge_centrality = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            edge_centrality[i, j] = node_centrality[i] * node_centrality[j]
    centrality_boost = inverse_distance * (edge_centrality**0.5 + epsilon)

    # Adaptive Sparsification based on edge variance
    combined = shortest_path_factor + centrality_boost

    # Normalize
    combined = (combined - np.min(combined)) / (np.max(combined) - np.min(combined) + epsilon)

    heuristics = combined

    edge_values = heuristics[np.triu_indices_from(heuristics, k=1)] # Get upper triangle values (excluding diagonal)
    if edge_values.size > 0:
        threshold = np.percentile(edge_values, 20)  #Dynamic sparsification percentile
        heuristics[heuristics < threshold] = 0.0
    else:
        heuristics = np.zeros_like(heuristics) # All zero matrix if there are no valid edges to threshold on

    return heuristics
```
