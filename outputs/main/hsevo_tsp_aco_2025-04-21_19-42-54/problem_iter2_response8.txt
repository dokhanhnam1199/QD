```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, stochasticity, node degree, and a global penalization.
    Balances exploitation and exploration, prevents premature convergence.
    """
    n = distance_matrix.shape[0]
    max_distance = np.max(distance_matrix[np.isfinite(distance_matrix)])

    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    inverse_distance = 1.0 / (distance_matrix + 1e-9)

    node_degree = np.sum(inverse_distance, axis=0)
    node_degree_matrix = np.outer(node_degree, node_degree)

    min_dist_to_node = np.min(distance_matrix + np.diag([np.inf]*n), axis=0)
    node_min_dist_matrix = np.outer(min_dist_to_node,min_dist_to_node)
    penalization_matrix = distance_matrix * (node_min_dist_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                stochasticity = np.random.rand() * (distance_matrix[i,j] / max_distance)
                heuristic_matrix[i, j] = inverse_distance[i,j] + stochasticity + 0.01 * node_degree_matrix[i,j] - 0.00001 * penalization_matrix[i,j]
            else:
                heuristic_matrix[i, j] = 0

    return heuristic_matrix
```
