```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Enhanced Heuristics for TSP Edge Prioritization:
    Combines gravitational attraction (inverse square distance), node degree desirability,
    and a simulated annealing-inspired temperature factor with sparsification
    to prioritize shorter edges, encourage balanced node degrees, and prevent premature convergence.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution.
                      Higher values suggest higher priority.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Handle potential division by zero or near-zero distances:
    epsilon = 1e-9  # A small value to avoid division by zero

    # Temperature parameter - Decreases as algorithm runs
    temperature = 1.0  # Initial Temperature - High initially allows exploration.

    # Node Degree Desirability Component:
    # Encourages nodes to have a degree close to 2 (typical for TSP solutions)
    degree_penalty = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                degree_penalty[i, j] = 1.0 # Initialize to 1, then penalize bad edges

    # Gravitational attraction component (scaled and temperature modulated):
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] = (1.0 / (distance_matrix[i, j]**2 + epsilon)) * temperature * degree_penalty[i, j]
            else:
                heuristics[i, j] = 0.0  # No self loops

    # Annealing Schedule - Decay of the temperature
    temperature *= 0.995  # Reduce temperature each step (simulates cooling)

    # Sparsification:  Zero out less promising edges
    threshold = np.mean(heuristics) * 0.1 # Dynamic threshold based on mean
    heuristics[heuristics < threshold] = 0.0 # Zero out low-priority edges.

    return heuristics
```
