import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, epsilon: float = 9.887172978183187e-07, initial_temperature: float = 3.1789547815365444, sparsification_percentile: float = 50.38883426001415, cooling_factor_high_variance: float = 0.9041270382387533, cooling_factor_low_variance: float = 0.9952789929927134, min_temperature: float = 0.015492092645643326, edge_variance_threshold: float = 1.0930626478650536) -> np.ndarray:
    """Adaptive heuristic: Combines edge attraction, node desirability, and adaptive temperature scaling."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    current_temperature = initial_temperature

    # Node Desirability
    node_desirability = np.zeros(n)
    for i in range(n):
        node_desirability[i] = np.sum(1.0 / (distance_matrix[i, :] + epsilon))
    node_desirability /= np.max(node_desirability)

    # Edge Attraction (inverse square distance)
    edge_attraction = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                edge_attraction[i, j] = (1.0 / (distance_matrix[i, j]**2 + epsilon))
            else:
                edge_attraction[i, j] = 0.0
    edge_attraction = edge_attraction / np.max(edge_attraction)

    # Heuristic Combination
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] = edge_attraction[i, j] * (node_desirability[i] + node_desirability[j]) * current_temperature
            else:
                heuristics[i, j] = 0.0

    # Sparsification
    threshold = np.percentile(heuristics[heuristics > 0], sparsification_percentile)
    heuristics[heuristics > 0] = np.where(heuristics[heuristics > 0] >= threshold, heuristics[heuristics > 0], 0.0)

    # Adaptive Cooling
    edge_values = heuristics[heuristics > 0]
    if len(edge_values) > 0:
        edge_variance = np.var(edge_values)
    else:
        edge_variance = 0.0

    if edge_variance > edge_variance_threshold:
        current_temperature *= cooling_factor_high_variance
    else:
        current_temperature *= cooling_factor_low_variance

    current_temperature = max(current_temperature, min_temperature)

    return heuristics
