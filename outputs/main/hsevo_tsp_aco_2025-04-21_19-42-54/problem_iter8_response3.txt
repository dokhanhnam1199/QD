```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """Adaptive heuristic: Inverse distance, adaptive density, sparsification."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)
    epsilon = 1e-9

    # Inverse Distance
    inverse_distance = 1.0 / (distance_matrix + epsilon)

    # Adaptive Density Scaling
    node_densities = np.zeros(n)
    for i in range(n):
        node_densities[i] = np.mean(inverse_distance[i, :])

    density_scaling = 1.0 / (1.0 + node_densities)
    density_scaling = np.tile(density_scaling, (n, 1))
    density_scaling = np.minimum(density_scaling, density_scaling.T)

    # Combined heuristic
    heuristic_matrix = inverse_distance * density_scaling

    # Adaptive Sparsification (Dynamic threshold)
    threshold = np.mean(heuristic_matrix) * 0.75
    heuristic_matrix = np.where(heuristic_matrix > threshold, heuristic_matrix, 0)

    # Normalize
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix = heuristic_matrix / max_val

    return heuristic_matrix
```
