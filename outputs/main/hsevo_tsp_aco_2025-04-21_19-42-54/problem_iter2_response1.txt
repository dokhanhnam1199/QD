```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """TSP heuristics: Combines inverse distance, node connectivity, and gravity-inspired exploration."""
    n = distance_matrix.shape[0]
    inverse_distance = 1.0 / (distance_matrix + 1e-9)
    node_connectivity = np.sum(inverse_distance, axis=1)
    heuristic_matrix = inverse_distance * node_connectivity[:, None]

    # Gravity-inspired exploration
    for i in range(n):
        degree = np.sum(distance_matrix[i, :] < np.mean(distance_matrix[i, :]))
        visibility = 1.0 / (degree + 1)
        heuristic_matrix[i, :] *= (visibility + 1e-9)

    # Add global context
    for i in range(n):
        for j in range(n):
            heuristic_matrix[i, j] += np.mean([heuristic_matrix[i, k] + heuristic_matrix[k,j] for k in range(n)])/(n+1e-9)

    heuristic_matrix /= np.max(heuristic_matrix)
    return heuristic_matrix
```
