```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Improved heuristics for the Traveling Salesman Problem based on distance and node connectivity.

    This heuristic considers both the distance between nodes and an estimate of the connectivity
    of each node within the graph represented by the distance matrix.  Shorter distances are
    generally favored, and nodes that appear to be more centrally located or highly connected
    are given a boost in their edge desirability.  This helps guide the search towards solutions
    that balance short hops with good overall tour structure.

    Args:
        distance_matrix (np.ndarray): A square matrix where distance_matrix[i, j] represents the distance
                                     between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, containing heuristic values
                     indicating the desirability of including each edge in the TSP solution.
    """

    n = distance_matrix.shape[0]

    # 1. Inverse Distance (Basic desirability)
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero

    # 2. Node Connectivity Estimate (Sum of inverse distances to other nodes)
    node_connectivity = np.sum(heuristic_matrix, axis=1)

    # 3. Combine Distance and Connectivity
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] *= (node_connectivity[i] + node_connectivity[j]) / 2.0 # Averaging connectivity of both nodes
            else:
                heuristic_matrix[i, j] = 0  # No self-loops allowed

    # 4. Normalize heuristics (optional, but can improve stability)
    heuristic_matrix = heuristic_matrix / np.max(heuristic_matrix)

    return heuristic_matrix
```
