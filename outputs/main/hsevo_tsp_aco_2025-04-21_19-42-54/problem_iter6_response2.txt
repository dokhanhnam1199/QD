```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray,
                  epsilon: float = 2.5408635945870555e-07,
                  initial_temperature: float = 3.301010802589493,
                  sparsification_percentile: float = 49.22462731911484,
                  high_variance_threshold: float = 0.46775928005587575,
                  cooling_high_variance: float = 0.9952012128425347,
                  cooling_low_variance: float = 0.9959702645502414,
                  min_temperature: float = 0.056679815478619666) -> np.ndarray:
    """
    Enhanced Adaptive Heuristics for TSP Edge Prioritization:
    Combines gravitational attraction with node-based desirability scores,
    an adaptive temperature, and pheromone-inspired edge reinforcement.  Sparsification is also used.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.
        epsilon (float): Small value to avoid division by zero. Default is 1e-9.
        initial_temperature (float): Initial temperature for exploration. Default is 1.0.
        sparsification_percentile (float): Percentile for sparsification. Default is 40.0.
        high_variance_threshold (float): Threshold for high variance in edge values. Default is 0.1.
        cooling_high_variance (float): Cooling factor when variance is high. Default is 0.99.
        cooling_low_variance (float): Cooling factor when variance is low. Default is 0.999.
        min_temperature (float): Minimum temperature to prevent it from becoming too small. Default is 0.01.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution.
                     Higher values suggest higher priority. Sparsified.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # 1. Node Desirability Scores (Normalized):
    node_desirability = np.zeros(n)
    for i in range(n):
        node_desirability[i] = np.sum(1.0 / (distance_matrix[i, :] + epsilon))
    node_desirability /= np.max(node_desirability)

    # 2. Edge Attraction (Gravity, Normalized):
    edge_attraction = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                edge_attraction[i, j] = (1.0 / (distance_matrix[i, j]**2 + epsilon))
            else:
                edge_attraction[i, j] = 0.0

    edge_attraction = edge_attraction / np.max(edge_attraction)

    # 3. Pheromone-inspired Edge Reinforcement (Initially uniform, updated later during search):
    pheromone_levels = np.ones_like(distance_matrix)  # Initialize pheromone to 1 for all edges
    pheromone_levels = pheromone_levels / np.max(pheromone_levels) #Normalize


    # 4. Adaptive Temperature:
    temperature = initial_temperature

    # Combine factors:  Node Desirability + Edge Attraction + Pheromone + Temperature
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] = (node_desirability[i] + node_desirability[j]) * \
                                   edge_attraction[i, j] * pheromone_levels[i, j] * temperature
            else:
                heuristics[i, j] = 0.0

    # 5. Sparsification:
    threshold = np.percentile(heuristics[heuristics > 0], sparsification_percentile)
    heuristics[heuristics < threshold] = 0.0

    # 6. Adaptive Cooling (Variance-based):
    edge_values = heuristics[heuristics > 0]

    if len(edge_values) > 0:
        edge_variance = np.var(edge_values)
    else:
        edge_variance = 0.0

    if edge_variance > high_variance_threshold:
        temperature *= cooling_high_variance
    else:
        temperature *= cooling_low_variance

    temperature = max(temperature, min_temperature)

    # 7. Pheromone update simulation (simulated, not actually used in search here):
    #    Simulate best tour selection and reinforce edges. This part is crucial and
    #    would normally be done iteratively during a metaheuristic search.
    #    For this heuristic function, we will simulate a simple pheromone update based on shortest edges.

    shortest_edges = np.argsort(distance_matrix, axis=None)[:n] #Consider shortest edges in the graph
    for edge_index in shortest_edges:
          row = edge_index // n
          col = edge_index % n

          if row != col and heuristics[row,col] > 0:
              pheromone_levels[row, col] += 0.1 #Reinforce with constant 0.1

    pheromone_levels = pheromone_levels / np.max(pheromone_levels)  #Normalize again after update

    #Recompute heuristics one last time with updated pheromone
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] = (node_desirability[i] + node_desirability[j]) * \
                                   edge_attraction[i, j] * pheromone_levels[i, j] * temperature
            else:
                heuristics[i, j] = 0.0
    threshold = np.percentile(heuristics[heuristics > 0], sparsification_percentile)
    heuristics[heuristics < threshold] = 0.0

    return heuristics
```
