```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for Traveling Salesman Problem (TSP) based on:
    1. Inverse distance (shorter distances are preferred).
    2. Node degree preference:  Nodes connected to more other nodes tend to be connected earlier.
    3. Avoidance of long edges connected to nodes already having short edges.

    Args:
        distance_matrix: A numpy ndarray representing the distance matrix.

    Returns:
        A numpy ndarray of the same shape as distance_matrix,
        representing the heuristic value for each edge. Higher values
        indicate more promising edges.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance heuristic
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add a small value to avoid division by zero

    # 2. Node degree preference: encourage exploration of nodes
    node_degree = np.sum(inverse_distance, axis=0)  # Sum of inverse distances for each node
    node_degree_matrix = np.outer(node_degree, node_degree)

    # 3. Penalize long edges for nodes that already have short edges
    min_dist_to_node = np.min(distance_matrix + np.diag([np.inf]*n), axis=0) # smallest distance to all nodes

    node_min_dist_matrix = np.outer(min_dist_to_node,min_dist_to_node)
    penalization_matrix = distance_matrix * (node_min_dist_matrix )

    heuristics = inverse_distance +  0.1*node_degree_matrix - 0.0001 * penalization_matrix

    return heuristics
```
