```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """Adaptive heuristic combining inverse distance, node desirability, and sparsification."""
    n = distance_matrix.shape[0]
    epsilon = 1e-9
    heuristic_matrix = np.zeros_like(distance_matrix)

    # 1. Inverse Distance
    inverse_distance = 1.0 / (distance_matrix + epsilon)

    # 2. Node Desirability (sum of inverse distances)
    node_desirability = np.sum(inverse_distance, axis=1)
    node_desirability /= np.max(node_desirability)

    # 3. Combine inverse distance and node desirability
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] = inverse_distance[i, j] * (node_desirability[i] + node_desirability[j])
            else:
                heuristic_matrix[i, j] = 0.0

    # 4. Sparsification: keep only top edges
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 40)
    heuristic_matrix[heuristic_matrix < threshold] = 0.0

    # Normalize
    if np.max(heuristic_matrix) > 0:  # Avoid division by zero
        heuristic_matrix = (heuristic_matrix - np.min(heuristic_matrix)) / (np.max(heuristic_matrix) - np.min(heuristic_matrix) + epsilon)

    return heuristic_matrix
```
