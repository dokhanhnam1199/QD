```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """Adaptive heuristic with node desirability, sparsification, and stochasticity."""
    n = distance_matrix.shape[0]
    epsilon = 1e-9
    heuristics = np.zeros_like(distance_matrix)

    # Node Desirability (similar to v0)
    node_desirability = np.zeros(n)
    for i in range(n):
        node_desirability[i] = np.sum(1.0 / (distance_matrix[i, :] + epsilon))
    node_desirability /= np.max(node_desirability)

    # Inverse Distance (similar to v1)
    inverse_distance = 1.0 / (distance_matrix + epsilon)
    inverse_distance /= np.max(inverse_distance)  # Normalize

    # Stochasticity (similar to v1, but scaled)
    max_distance = np.max(distance_matrix[np.isfinite(distance_matrix)])
    stochasticity_matrix = np.random.rand(n, n) * (distance_matrix / (max_distance + epsilon))
    stochasticity_matrix /= np.max(stochasticity_matrix)  # Normalize

    # Combine factors
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] = (
                    0.4 * inverse_distance[i, j] +
                    0.3 * stochasticity_matrix[i, j] +
                    0.3 * (node_desirability[i] + node_desirability[j]) / 2.0  # Average desirability
                )
            else:
                heuristics[i, j] = 0.0

    # Sparsification
    sparsification_percentile = 40.0  #Static sparsification
    threshold = np.percentile(heuristics[heuristics > 0], sparsification_percentile)
    heuristics[heuristics < threshold] = 0.0

    return heuristics
```
