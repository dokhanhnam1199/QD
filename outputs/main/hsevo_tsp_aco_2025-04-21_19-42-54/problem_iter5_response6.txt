```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, adaptive density, and sparsification for TSP.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Avoid division by zero and self-loops
    distance_matrix = np.where(distance_matrix == 0, np.inf, distance_matrix)
    np.fill_diagonal(distance_matrix, np.inf)

    # 1. Inverse Distance
    inverse_distance = 1 / distance_matrix

    # 2. Adaptive Density Scaling
    node_densities = np.zeros(n)
    for i in range(n):
        node_densities[i] = np.mean(inverse_distance[i, :])

    density_scaling = 1.0 / (1.0 + node_densities)
    density_scaling = np.tile(density_scaling, (n, 1))
    density_scaling = np.minimum(density_scaling, density_scaling.T)

    # 3. Sparsification (adaptive threshold)
    threshold = np.mean(inverse_distance) * 0.5  # Dynamic threshold
    sparse_inverse_distance = np.where(inverse_distance > threshold, inverse_distance, 0)

    # Combine factors
    heuristic_matrix = sparse_inverse_distance * density_scaling

    # Normalize
    max_val = np.max(heuristic_matrix)
    min_val = np.min(heuristic_matrix)
    if max_val > min_val: # Avoid division by zero
        heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    else:
        heuristic_matrix = np.zeros_like(heuristic_matrix)


    return heuristic_matrix
```
