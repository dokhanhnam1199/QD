[2025-04-21 19:42:54,879][root][INFO] - Workspace: C:\Users\Nam\Documents\GitHub\HSEvo\outputs\main\hsevo_tsp_aco_2025-04-21_19-42-54
[2025-04-21 19:42:54,879][root][INFO] - Project Root: C:\Users\Nam\Documents\GitHub\HSEvo
[2025-04-21 19:42:54,880][root][INFO] - Using LLM: gemini/gemini-2.0-flash
[2025-04-21 19:42:54,880][root][INFO] - Using Algorithm: hsevo
[2025-04-21 19:42:57,399][httpx][INFO] - HTTP Request: GET https://raw.githubusercontent.com/BerriAI/litellm/main/model_prices_and_context_window.json "HTTP/1.1 200 OK"
[2025-04-21 19:42:59,547][root][INFO] - Problem: tsp_aco
[2025-04-21 19:42:59,548][root][INFO] - Problem description: Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
[2025-04-21 19:42:59,548][root][INFO] - Function name: heuristics
[2025-04-21 19:42:59,641][root][INFO] - Evaluating seed function...
[2025-04-21 19:42:59,642][root][INFO] - Seed function code: 
import numpy as np
import random
import math
import scipy
import torch
def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix
[2025-04-21 19:42:59,642][root][INFO] - Iteration 0: Running Code 0
[2025-04-21 19:43:05,695][root][INFO] - Iteration 0: Code Run 0 successful!
[2025-04-21 19:43:12,457][root][INFO] - Iteration 0, response_id 0: Objective value: 6.53445015463223
[2025-04-21 19:43:12,458][root][INFO] - Iteration 0: Elitist: 6.53445015463223
[2025-04-21 19:43:12,458][root][INFO] - Iteration 0 finished...
[2025-04-21 19:43:12,458][root][INFO] - Best obj: 6.53445015463223, Best Code Path: problem_iter0_code0.py
[2025-04-21 19:43:12,459][root][INFO] - LLM usage: prompt_tokens = 0, completion_tokens = 0
[2025-04-21 19:43:12,459][root][INFO] - Function Evals: 1
[2025-04-21 19:43:12,459][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,460][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are Albert Einstein, relativity theory developer. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are Albert Einstein, relativity theory developer. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,461][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are Isaac Newton, the father of physics. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are Isaac Newton, the father of physics. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,463][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are Marie Curie, pioneer in radioactivity. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are Marie Curie, pioneer in radioactivity. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,464][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are Nikola Tesla, master of electricity. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are Nikola Tesla, master of electricity. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,466][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are Galileo Galilei, champion of heliocentrism. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are Galileo Galilei, champion of heliocentrism. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,468][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are Stephen Hawking, black hole theorist. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are Stephen Hawking, black hole theorist. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,469][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are Richard Feynman, quantum mechanics genius. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are Richard Feynman, quantum mechanics genius. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,471][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are Rosalind Franklin, DNA structure revealer. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are Rosalind Franklin, DNA structure revealer. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,472][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are Ada Lovelace, computer programming pioneer. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are Ada Lovelace, computer programming pioneer. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,473][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,475][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are Albert Einstein, relativity theory developer. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are Albert Einstein, relativity theory developer. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,477][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are Isaac Newton, the father of physics. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are Isaac Newton, the father of physics. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,478][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are Marie Curie, pioneer in radioactivity. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are Marie Curie, pioneer in radioactivity. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,480][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are Nikola Tesla, master of electricity. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are Nikola Tesla, master of electricity. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,486][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are Galileo Galilei, champion of heliocentrism. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are Galileo Galilei, champion of heliocentrism. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,488][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are Stephen Hawking, black hole theorist. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are Stephen Hawking, black hole theorist. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,490][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are Richard Feynman, quantum mechanics genius. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are Richard Feynman, quantum mechanics genius. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,491][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are Rosalind Franklin, DNA structure revealer. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are Rosalind Franklin, DNA structure revealer. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,492][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are Ada Lovelace, computer programming pioneer. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are Ada Lovelace, computer programming pioneer. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,493][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,494][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are Albert Einstein, relativity theory developer. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are Albert Einstein, relativity theory developer. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,496][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are Isaac Newton, the father of physics. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are Isaac Newton, the father of physics. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,497][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are Marie Curie, pioneer in radioactivity. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are Marie Curie, pioneer in radioactivity. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,499][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are Nikola Tesla, master of electricity. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are Nikola Tesla, master of electricity. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,500][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are Galileo Galilei, champion of heliocentrism. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are Galileo Galilei, champion of heliocentrism. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,502][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are Stephen Hawking, black hole theorist. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are Stephen Hawking, black hole theorist. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,502][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are Richard Feynman, quantum mechanics genius. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are Richard Feynman, quantum mechanics genius. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,503][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are Rosalind Franklin, DNA structure revealer. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are Rosalind Franklin, DNA structure revealer. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,504][root][INFO] - Initial Population Prompt: 
System Prompt: 
You are Ada Lovelace, computer programming pioneer. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are Ada Lovelace, computer programming pioneer. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.

def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:
    return 1 / distance_matrix


Refer to the format of a trivial design above. Be very creative and give `heuristics_v2`. Output code only and enclose your code with Python code block: ```python ... ```.

[2025-04-21 19:43:12,522][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:43:12,526][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:43:16,400][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:43:16,402][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:43:16,403][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:16,403][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:16,404][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:16,405][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:43:16,715][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:43:16,717][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:43:16,717][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:16,717][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:16,718][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:43:16,719][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:20,496][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:43:20,499][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:43:20,500][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:20,500][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:20,502][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:43:20,504][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:21,435][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:43:21,438][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:43:21,440][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:21,440][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:21,442][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:43:21,444][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:25,110][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:43:25,113][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:43:25,115][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:25,115][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:25,118][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:43:25,119][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:26,278][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:43:26,281][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:43:26,282][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:26,283][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:26,285][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:43:26,286][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:30,077][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:43:30,078][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:43:30,079][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:30,079][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:30,080][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:43:30,081][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:30,341][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:43:30,342][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:43:30,343][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:30,343][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:30,344][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:43:30,345][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:34,082][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:43:34,084][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:43:34,085][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:34,085][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:34,086][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:43:34,086][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:34,929][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:43:34,931][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:43:34,932][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:34,933][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:34,935][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:43:34,936][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:38,267][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:43:38,270][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:43:38,271][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:38,272][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:38,274][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:43:38,276][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:38,371][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:43:38,372][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:43:38,373][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:38,373][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:38,374][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:43:38,375][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:41,535][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:43:41,538][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:43:41,539][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:41,540][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:41,542][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:43:41,543][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:41,792][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:43:41,793][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:43:41,794][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:41,794][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:41,795][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:43:41,796][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:45,169][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:43:45,172][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:43:45,173][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:45,174][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:45,175][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:43:45,176][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:45,888][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:43:45,891][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:43:45,892][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:45,893][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:45,895][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:43:45,896][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:43:45,910][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 429 Too Many Requests"
[2025-04-21 19:43:46,025][root][INFO] - Attempt 1 failed with error: litellm.RateLimitError: litellm.RateLimitError: VertexAIException - {
  "error": {
    "code": 429,
    "message": "You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.",
    "status": "RESOURCE_EXHAUSTED",
    "details": [
      {
        "@type": "type.googleapis.com/google.rpc.QuotaFailure",
        "violations": [
          {
            "quotaMetric": "generativelanguage.googleapis.com/generate_content_free_tier_requests",
            "quotaId": "GenerateRequestsPerMinutePerProjectPerModel-FreeTier",
            "quotaDimensions": {
              "location": "global",
              "model": "gemini-2.0-flash"
            },
            "quotaValue": "15"
          }
        ]
      },
      {
        "@type": "type.googleapis.com/google.rpc.Help",
        "links": [
          {
            "description": "Learn more about Gemini API quotas",
            "url": "https://ai.google.dev/gemini-api/docs/rate-limits"
          }
        ]
      },
      {
        "@type": "type.googleapis.com/google.rpc.RetryInfo",
        "retryDelay": "11s"
      }
    ]
  }
}

[2025-04-21 19:43:47,526][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 429 Too Many Requests"
[2025-04-21 19:43:47,541][root][INFO] - Attempt 1 failed with error: litellm.RateLimitError: litellm.RateLimitError: VertexAIException - {
  "error": {
    "code": 429,
    "message": "You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.",
    "status": "RESOURCE_EXHAUSTED",
    "details": [
      {
        "@type": "type.googleapis.com/google.rpc.QuotaFailure",
        "violations": [
          {
            "quotaMetric": "generativelanguage.googleapis.com/generate_content_free_tier_requests",
            "quotaId": "GenerateRequestsPerMinutePerProjectPerModel-FreeTier",
            "quotaDimensions": {
              "location": "global",
              "model": "gemini-2.0-flash"
            },
            "quotaValue": "15"
          }
        ]
      },
      {
        "@type": "type.googleapis.com/google.rpc.Help",
        "links": [
          {
            "description": "Learn more about Gemini API quotas",
            "url": "https://ai.google.dev/gemini-api/docs/rate-limits"
          }
        ]
      },
      {
        "@type": "type.googleapis.com/google.rpc.RetryInfo",
        "retryDelay": "10s"
      }
    ]
  }
}

[2025-04-21 19:43:49,026][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:43:50,543][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:43:50,607][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 429 Too Many Requests"
[2025-04-21 19:43:50,619][root][INFO] - Attempt 2 failed with error: litellm.RateLimitError: litellm.RateLimitError: VertexAIException - {
  "error": {
    "code": 429,
    "message": "You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.",
    "status": "RESOURCE_EXHAUSTED",
    "details": [
      {
        "@type": "type.googleapis.com/google.rpc.QuotaFailure",
        "violations": [
          {
            "quotaMetric": "generativelanguage.googleapis.com/generate_content_free_tier_requests",
            "quotaId": "GenerateRequestsPerMinutePerProjectPerModel-FreeTier",
            "quotaDimensions": {
              "model": "gemini-2.0-flash",
              "location": "global"
            },
            "quotaValue": "15"
          }
        ]
      },
      {
        "@type": "type.googleapis.com/google.rpc.Help",
        "links": [
          {
            "description": "Learn more about Gemini API quotas",
            "url": "https://ai.google.dev/gemini-api/docs/rate-limits"
          }
        ]
      },
      {
        "@type": "type.googleapis.com/google.rpc.RetryInfo",
        "retryDelay": "7s"
      }
    ]
  }
}

[2025-04-21 19:43:51,329][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 429 Too Many Requests"
[2025-04-21 19:43:51,343][root][INFO] - Attempt 2 failed with error: litellm.RateLimitError: litellm.RateLimitError: VertexAIException - {
  "error": {
    "code": 429,
    "message": "You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.",
    "status": "RESOURCE_EXHAUSTED",
    "details": [
      {
        "@type": "type.googleapis.com/google.rpc.QuotaFailure",
        "violations": [
          {
            "quotaMetric": "generativelanguage.googleapis.com/generate_content_free_tier_requests",
            "quotaId": "GenerateRequestsPerMinutePerProjectPerModel-FreeTier",
            "quotaDimensions": {
              "location": "global",
              "model": "gemini-2.0-flash"
            },
            "quotaValue": "15"
          }
        ]
      },
      {
        "@type": "type.googleapis.com/google.rpc.Help",
        "links": [
          {
            "description": "Learn more about Gemini API quotas",
            "url": "https://ai.google.dev/gemini-api/docs/rate-limits"
          }
        ]
      },
      {
        "@type": "type.googleapis.com/google.rpc.RetryInfo",
        "retryDelay": "6s"
      }
    ]
  }
}

[2025-04-21 19:43:53,621][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:43:54,346][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:43:55,143][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 429 Too Many Requests"
[2025-04-21 19:43:55,167][root][INFO] - Attempt 3 failed with error: litellm.RateLimitError: litellm.RateLimitError: VertexAIException - {
  "error": {
    "code": 429,
    "message": "You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.",
    "status": "RESOURCE_EXHAUSTED",
    "details": [
      {
        "@type": "type.googleapis.com/google.rpc.QuotaFailure",
        "violations": [
          {
            "quotaMetric": "generativelanguage.googleapis.com/generate_content_free_tier_requests",
            "quotaId": "GenerateRequestsPerMinutePerProjectPerModel-FreeTier",
            "quotaDimensions": {
              "location": "global",
              "model": "gemini-2.0-flash"
            },
            "quotaValue": "15"
          }
        ]
      },
      {
        "@type": "type.googleapis.com/google.rpc.Help",
        "links": [
          {
            "description": "Learn more about Gemini API quotas",
            "url": "https://ai.google.dev/gemini-api/docs/rate-limits"
          }
        ]
      },
      {
        "@type": "type.googleapis.com/google.rpc.RetryInfo",
        "retryDelay": "2s"
      }
    ]
  }
}

[2025-04-21 19:43:55,208][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 429 Too Many Requests"
[2025-04-21 19:43:55,217][root][INFO] - Attempt 3 failed with error: litellm.RateLimitError: litellm.RateLimitError: VertexAIException - {
  "error": {
    "code": 429,
    "message": "You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.",
    "status": "RESOURCE_EXHAUSTED",
    "details": [
      {
        "@type": "type.googleapis.com/google.rpc.QuotaFailure",
        "violations": [
          {
            "quotaMetric": "generativelanguage.googleapis.com/generate_content_free_tier_requests",
            "quotaId": "GenerateRequestsPerMinutePerProjectPerModel-FreeTier",
            "quotaDimensions": {
              "location": "global",
              "model": "gemini-2.0-flash"
            },
            "quotaValue": "15"
          }
        ]
      },
      {
        "@type": "type.googleapis.com/google.rpc.Help",
        "links": [
          {
            "description": "Learn more about Gemini API quotas",
            "url": "https://ai.google.dev/gemini-api/docs/rate-limits"
          }
        ]
      },
      {
        "@type": "type.googleapis.com/google.rpc.RetryInfo",
        "retryDelay": "2s"
      }
    ]
  }
}

[2025-04-21 19:43:58,169][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:43:58,219][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:43:59,081][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 429 Too Many Requests"
[2025-04-21 19:43:59,096][root][INFO] - Attempt 4 failed with error: litellm.RateLimitError: litellm.RateLimitError: VertexAIException - {
  "error": {
    "code": 429,
    "message": "You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.",
    "status": "RESOURCE_EXHAUSTED",
    "details": [
      {
        "@type": "type.googleapis.com/google.rpc.QuotaFailure",
        "violations": [
          {
            "quotaMetric": "generativelanguage.googleapis.com/generate_content_free_tier_requests",
            "quotaId": "GenerateRequestsPerMinutePerProjectPerModel-FreeTier",
            "quotaDimensions": {
              "location": "global",
              "model": "gemini-2.0-flash"
            },
            "quotaValue": "15"
          }
        ]
      },
      {
        "@type": "type.googleapis.com/google.rpc.Help",
        "links": [
          {
            "description": "Learn more about Gemini API quotas",
            "url": "https://ai.google.dev/gemini-api/docs/rate-limits"
          }
        ]
      },
      {
        "@type": "type.googleapis.com/google.rpc.RetryInfo",
        "retryDelay": "58s"
      }
    ]
  }
}

[2025-04-21 19:44:00,018][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 429 Too Many Requests"
[2025-04-21 19:44:00,031][root][INFO] - Attempt 4 failed with error: litellm.RateLimitError: litellm.RateLimitError: VertexAIException - {
  "error": {
    "code": 429,
    "message": "You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.",
    "status": "RESOURCE_EXHAUSTED",
    "details": [
      {
        "@type": "type.googleapis.com/google.rpc.QuotaFailure",
        "violations": [
          {
            "quotaMetric": "generativelanguage.googleapis.com/generate_content_free_tier_requests",
            "quotaId": "GenerateRequestsPerMinutePerProjectPerModel-FreeTier",
            "quotaDimensions": {
              "location": "global",
              "model": "gemini-2.0-flash"
            },
            "quotaValue": "15"
          }
        ]
      },
      {
        "@type": "type.googleapis.com/google.rpc.Help",
        "links": [
          {
            "description": "Learn more about Gemini API quotas",
            "url": "https://ai.google.dev/gemini-api/docs/rate-limits"
          }
        ]
      },
      {
        "@type": "type.googleapis.com/google.rpc.RetryInfo",
        "retryDelay": "57s"
      }
    ]
  }
}

[2025-04-21 19:44:02,099][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:44:02,882][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 429 Too Many Requests"
[2025-04-21 19:44:02,898][root][INFO] - Attempt 5 failed with error: litellm.RateLimitError: litellm.RateLimitError: VertexAIException - {
  "error": {
    "code": 429,
    "message": "You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.",
    "status": "RESOURCE_EXHAUSTED",
    "details": [
      {
        "@type": "type.googleapis.com/google.rpc.QuotaFailure",
        "violations": [
          {
            "quotaMetric": "generativelanguage.googleapis.com/generate_content_free_tier_requests",
            "quotaId": "GenerateRequestsPerMinutePerProjectPerModel-FreeTier",
            "quotaDimensions": {
              "location": "global",
              "model": "gemini-2.0-flash"
            },
            "quotaValue": "15"
          }
        ]
      },
      {
        "@type": "type.googleapis.com/google.rpc.Help",
        "links": [
          {
            "description": "Learn more about Gemini API quotas",
            "url": "https://ai.google.dev/gemini-api/docs/rate-limits"
          }
        ]
      },
      {
        "@type": "type.googleapis.com/google.rpc.RetryInfo",
        "retryDelay": "54s"
      }
    ]
  }
}

[2025-04-21 19:44:03,033][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:44:03,910][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 429 Too Many Requests"
[2025-04-21 19:44:03,929][root][INFO] - Attempt 5 failed with error: litellm.RateLimitError: litellm.RateLimitError: VertexAIException - {
  "error": {
    "code": 429,
    "message": "You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.",
    "status": "RESOURCE_EXHAUSTED",
    "details": [
      {
        "@type": "type.googleapis.com/google.rpc.QuotaFailure",
        "violations": [
          {
            "quotaMetric": "generativelanguage.googleapis.com/generate_content_free_tier_requests",
            "quotaId": "GenerateRequestsPerMinutePerProjectPerModel-FreeTier",
            "quotaDimensions": {
              "location": "global",
              "model": "gemini-2.0-flash"
            },
            "quotaValue": "15"
          }
        ]
      },
      {
        "@type": "type.googleapis.com/google.rpc.Help",
        "links": [
          {
            "description": "Learn more about Gemini API quotas",
            "url": "https://ai.google.dev/gemini-api/docs/rate-limits"
          }
        ]
      },
      {
        "@type": "type.googleapis.com/google.rpc.RetryInfo",
        "retryDelay": "53s"
      }
    ]
  }
}

[2025-04-21 19:44:05,900][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:44:06,931][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:44:07,474][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 429 Too Many Requests"
[2025-04-21 19:44:07,492][root][INFO] - Attempt 6 failed with error: litellm.RateLimitError: litellm.RateLimitError: VertexAIException - {
  "error": {
    "code": 429,
    "message": "You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.",
    "status": "RESOURCE_EXHAUSTED",
    "details": [
      {
        "@type": "type.googleapis.com/google.rpc.QuotaFailure",
        "violations": [
          {
            "quotaMetric": "generativelanguage.googleapis.com/generate_content_free_tier_requests",
            "quotaId": "GenerateRequestsPerMinutePerProjectPerModel-FreeTier",
            "quotaDimensions": {
              "location": "global",
              "model": "gemini-2.0-flash"
            },
            "quotaValue": "15"
          }
        ]
      },
      {
        "@type": "type.googleapis.com/google.rpc.Help",
        "links": [
          {
            "description": "Learn more about Gemini API quotas",
            "url": "https://ai.google.dev/gemini-api/docs/rate-limits"
          }
        ]
      },
      {
        "@type": "type.googleapis.com/google.rpc.RetryInfo",
        "retryDelay": "50s"
      }
    ]
  }
}

[2025-04-21 19:44:07,694][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 429 Too Many Requests"
[2025-04-21 19:44:07,712][root][INFO] - Attempt 6 failed with error: litellm.RateLimitError: litellm.RateLimitError: VertexAIException - {
  "error": {
    "code": 429,
    "message": "You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.",
    "status": "RESOURCE_EXHAUSTED",
    "details": [
      {
        "@type": "type.googleapis.com/google.rpc.QuotaFailure",
        "violations": [
          {
            "quotaMetric": "generativelanguage.googleapis.com/generate_content_free_tier_requests",
            "quotaId": "GenerateRequestsPerMinutePerProjectPerModel-FreeTier",
            "quotaDimensions": {
              "location": "global",
              "model": "gemini-2.0-flash"
            },
            "quotaValue": "15"
          }
        ]
      },
      {
        "@type": "type.googleapis.com/google.rpc.Help",
        "links": [
          {
            "description": "Learn more about Gemini API quotas",
            "url": "https://ai.google.dev/gemini-api/docs/rate-limits"
          }
        ]
      },
      {
        "@type": "type.googleapis.com/google.rpc.RetryInfo",
        "retryDelay": "50s"
      }
    ]
  }
}

[2025-04-21 19:44:10,495][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:44:10,714][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:44:11,588][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 429 Too Many Requests"
[2025-04-21 19:44:11,605][root][INFO] - Attempt 7 failed with error: litellm.RateLimitError: litellm.RateLimitError: VertexAIException - {
  "error": {
    "code": 429,
    "message": "You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.",
    "status": "RESOURCE_EXHAUSTED",
    "details": [
      {
        "@type": "type.googleapis.com/google.rpc.QuotaFailure",
        "violations": [
          {
            "quotaMetric": "generativelanguage.googleapis.com/generate_content_free_tier_requests",
            "quotaId": "GenerateRequestsPerMinutePerProjectPerModel-FreeTier",
            "quotaDimensions": {
              "location": "global",
              "model": "gemini-2.0-flash"
            },
            "quotaValue": "15"
          }
        ]
      },
      {
        "@type": "type.googleapis.com/google.rpc.Help",
        "links": [
          {
            "description": "Learn more about Gemini API quotas",
            "url": "https://ai.google.dev/gemini-api/docs/rate-limits"
          }
        ]
      },
      {
        "@type": "type.googleapis.com/google.rpc.RetryInfo",
        "retryDelay": "46s"
      }
    ]
  }
}

[2025-04-21 19:44:12,170][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 429 Too Many Requests"
[2025-04-21 19:44:12,185][root][INFO] - Attempt 7 failed with error: litellm.RateLimitError: litellm.RateLimitError: VertexAIException - {
  "error": {
    "code": 429,
    "message": "You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.",
    "status": "RESOURCE_EXHAUSTED",
    "details": [
      {
        "@type": "type.googleapis.com/google.rpc.QuotaFailure",
        "violations": [
          {
            "quotaMetric": "generativelanguage.googleapis.com/generate_content_free_tier_requests",
            "quotaId": "GenerateRequestsPerMinutePerProjectPerModel-FreeTier",
            "quotaDimensions": {
              "location": "global",
              "model": "gemini-2.0-flash"
            },
            "quotaValue": "15"
          }
        ]
      },
      {
        "@type": "type.googleapis.com/google.rpc.Help",
        "links": [
          {
            "description": "Learn more about Gemini API quotas",
            "url": "https://ai.google.dev/gemini-api/docs/rate-limits"
          }
        ]
      },
      {
        "@type": "type.googleapis.com/google.rpc.RetryInfo",
        "retryDelay": "45s"
      }
    ]
  }
}

[2025-04-21 19:44:14,607][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:44:15,188][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:44:18,396][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:44:18,399][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:44:18,401][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:18,401][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:18,404][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:44:18,405][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:18,836][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:44:18,844][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:44:18,844][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:18,844][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:18,845][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:44:18,846][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:22,545][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:44:22,548][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:44:22,548][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:22,548][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:22,549][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:44:22,550][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:23,360][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:44:23,363][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:44:23,365][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:23,366][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:23,367][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:44:23,369][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:27,459][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:44:27,462][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:44:27,463][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:27,464][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:27,466][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:44:27,467][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:28,187][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:44:28,190][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:44:28,191][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:28,191][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:28,192][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:44:28,193][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:31,779][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:44:31,783][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:44:31,784][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:31,784][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:31,786][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:44:31,788][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:32,647][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:44:32,650][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:44:32,651][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:32,652][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:32,654][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:44:32,655][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:36,162][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:44:36,165][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:44:36,166][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:36,167][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:36,169][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:44:36,171][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:36,206][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:44:36,212][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:44:36,212][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:36,213][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:36,213][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:44:36,214][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:40,357][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:44:40,361][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:44:40,362][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:40,363][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:40,364][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:44:40,365][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:40,648][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:44:40,649][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:44:40,650][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:40,650][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:40,651][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:44:40,652][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:44,817][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:44:44,820][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:44:44,821][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:44,821][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:44,824][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:45,124][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:44:45,127][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:44:45,128][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:45,128][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:45,131][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:44:45,174][root][INFO] - Iteration 1: Running Code 0
[2025-04-21 19:44:51,111][root][INFO] - Iteration 1: Code Run 0 successful!
[2025-04-21 19:44:51,112][root][INFO] - Iteration 1: Running Code 1
[2025-04-21 19:44:58,095][root][INFO] - Iteration 1: Code Run 1 successful!
[2025-04-21 19:44:58,095][root][INFO] - Iteration 1: Running Code 2
[2025-04-21 19:45:05,190][root][INFO] - Iteration 1: Code Run 2 successful!
[2025-04-21 19:45:05,190][root][INFO] - Iteration 1: Running Code 3
[2025-04-21 19:45:12,694][root][INFO] - Iteration 1: Code Run 3 successful!
[2025-04-21 19:45:12,695][root][INFO] - Iteration 1: Running Code 4
[2025-04-21 19:45:19,779][root][INFO] - Iteration 1: Code Run 4 successful!
[2025-04-21 19:45:19,780][root][INFO] - Iteration 1: Running Code 5
[2025-04-21 19:45:26,873][root][INFO] - Iteration 1: Code Run 5 successful!
[2025-04-21 19:45:26,873][root][INFO] - Iteration 1: Running Code 6
[2025-04-21 19:45:33,952][root][INFO] - Iteration 1: Code Run 6 successful!
[2025-04-21 19:45:33,953][root][INFO] - Iteration 1: Running Code 7
[2025-04-21 19:45:40,962][root][INFO] - Iteration 1: Code Run 7 successful!
[2025-04-21 19:45:40,963][root][INFO] - Iteration 1: Running Code 8
[2025-04-21 19:45:48,383][root][INFO] - Iteration 1: Code Run 8 successful!
[2025-04-21 19:45:48,383][root][INFO] - Iteration 1: Running Code 9
[2025-04-21 19:45:55,537][root][INFO] - Iteration 1: Code Run 9 successful!
[2025-04-21 19:45:55,537][root][INFO] - Iteration 1: Running Code 10
[2025-04-21 19:46:02,569][root][INFO] - Iteration 1: Code Run 10 successful!
[2025-04-21 19:46:02,569][root][INFO] - Iteration 1: Running Code 11
[2025-04-21 19:46:09,752][root][INFO] - Iteration 1: Code Run 11 successful!
[2025-04-21 19:46:09,752][root][INFO] - Iteration 1: Running Code 12
[2025-04-21 19:46:17,067][root][INFO] - Iteration 1: Code Run 12 successful!
[2025-04-21 19:46:17,067][root][INFO] - Iteration 1: Running Code 13
[2025-04-21 19:46:24,215][root][INFO] - Iteration 1: Code Run 13 successful!
[2025-04-21 19:46:24,215][root][INFO] - Iteration 1: Running Code 14
[2025-04-21 19:46:31,341][root][INFO] - Iteration 1: Code Run 14 successful!
[2025-04-21 19:46:31,341][root][INFO] - Iteration 1: Running Code 15
[2025-04-21 19:46:38,372][root][INFO] - Iteration 1: Code Run 15 successful!
[2025-04-21 19:46:38,372][root][INFO] - Iteration 1: Running Code 16
[2025-04-21 19:46:45,854][root][INFO] - Iteration 1: Code Run 16 successful!
[2025-04-21 19:46:45,854][root][INFO] - Iteration 1: Running Code 17
[2025-04-21 19:46:52,922][root][INFO] - Iteration 1: Code Run 17 successful!
[2025-04-21 19:46:52,922][root][INFO] - Iteration 1: Running Code 18
[2025-04-21 19:46:59,951][root][INFO] - Iteration 1: Code Run 18 successful!
[2025-04-21 19:46:59,952][root][INFO] - Iteration 1: Running Code 19
[2025-04-21 19:47:07,186][root][INFO] - Iteration 1: Code Run 19 successful!
[2025-04-21 19:47:07,187][root][INFO] - Iteration 1: Running Code 20
[2025-04-21 19:47:14,415][root][INFO] - Iteration 1: Code Run 20 successful!
[2025-04-21 19:47:14,415][root][INFO] - Iteration 1: Running Code 21
[2025-04-21 19:47:21,663][root][INFO] - Iteration 1: Code Run 21 successful!
[2025-04-21 19:47:21,663][root][INFO] - Iteration 1: Running Code 22
[2025-04-21 19:47:28,659][root][INFO] - Iteration 1: Code Run 22 successful!
[2025-04-21 19:47:28,659][root][INFO] - Iteration 1: Running Code 23
[2025-04-21 19:47:35,627][root][INFO] - Iteration 1: Code Run 23 successful!
[2025-04-21 19:47:35,627][root][INFO] - Iteration 1: Running Code 24
[2025-04-21 19:47:42,768][root][INFO] - Iteration 1: Code Run 24 successful!
[2025-04-21 19:47:42,768][root][INFO] - Iteration 1: Running Code 25
[2025-04-21 19:47:49,752][root][INFO] - Iteration 1: Code Run 25 successful!
[2025-04-21 19:47:49,753][root][INFO] - Iteration 1: Running Code 26
[2025-04-21 19:47:57,022][root][INFO] - Iteration 1: Code Run 26 successful!
[2025-04-21 19:47:57,022][root][INFO] - Iteration 1: Running Code 27
[2025-04-21 19:48:03,885][root][INFO] - Iteration 1: Code Run 27 successful!
[2025-04-21 19:48:03,885][root][INFO] - Iteration 1: Running Code 28
[2025-04-21 19:48:10,430][root][INFO] - Iteration 1: Code Run 28 successful!
[2025-04-21 19:48:10,431][root][INFO] - Iteration 1: Running Code 29
[2025-04-21 19:48:17,664][root][INFO] - Iteration 1: Code Run 29 successful!
[2025-04-21 19:48:17,674][root][INFO] - Iteration 1, response_id 0: Objective value: 6.458357024009716
[2025-04-21 19:48:17,685][root][INFO] - Iteration 1, response_id 1: Objective value: 6.528374124087044
[2025-04-21 19:48:17,716][root][INFO] - Iteration 1, response_id 2: Objective value: 18.736814716812624
[2025-04-21 19:48:17,729][root][INFO] - Iteration 1, response_id 3: Objective value: 6.565943607941081
[2025-04-21 19:48:17,740][root][INFO] - Iteration 1, response_id 4: Objective value: 6.2732103354979545
[2025-04-21 19:48:17,751][root][INFO] - Iteration 1, response_id 5: Objective value: 6.524373185061795
[2025-04-21 19:48:17,762][root][INFO] - Iteration 1, response_id 6: Objective value: 6.599938514585152
[2025-04-21 19:48:17,774][root][INFO] - Iteration 1, response_id 7: Objective value: 6.7658975041879845
[2025-04-21 19:48:17,784][root][INFO] - Iteration 1, response_id 8: Objective value: 6.696692561321962
[2025-04-21 19:48:17,795][root][INFO] - Iteration 1, response_id 9: Objective value: 6.513339315763346
[2025-04-21 19:48:17,805][root][INFO] - Iteration 1, response_id 10: Objective value: 6.38831268488715
[2025-04-21 19:48:17,816][root][INFO] - Iteration 1, response_id 11: Objective value: 6.492316496831615
[2025-04-21 19:48:17,827][root][INFO] - Iteration 1, response_id 12: Objective value: 5.981912711007224
[2025-04-21 19:48:17,838][root][INFO] - Iteration 1, response_id 13: Objective value: 6.532741314854155
[2025-04-21 19:48:17,848][root][INFO] - Iteration 1, response_id 14: Objective value: 6.40384966269131
[2025-04-21 19:48:17,859][root][INFO] - Iteration 1, response_id 15: Objective value: 19.449758280842453
[2025-04-21 19:48:17,869][root][INFO] - Iteration 1, response_id 16: Objective value: 6.718106999759075
[2025-04-21 19:48:17,880][root][INFO] - Iteration 1, response_id 17: Objective value: 6.528151489787037
[2025-04-21 19:48:17,891][root][INFO] - Iteration 1, response_id 18: Objective value: 6.6405964504148915
[2025-04-21 19:48:17,902][root][INFO] - Iteration 1, response_id 19: Objective value: 6.612957028444259
[2025-04-21 19:48:17,913][root][INFO] - Iteration 1, response_id 20: Objective value: 6.5479841666002985
[2025-04-21 19:48:17,925][root][INFO] - Iteration 1, response_id 21: Objective value: 6.525669079474596
[2025-04-21 19:48:17,935][root][INFO] - Iteration 1, response_id 22: Objective value: 6.585663896479781
[2025-04-21 19:48:17,945][root][INFO] - Iteration 1, response_id 23: Objective value: 6.747289304616973
[2025-04-21 19:48:17,956][root][INFO] - Iteration 1, response_id 24: Objective value: 12.021394847327132
[2025-04-21 19:48:17,967][root][INFO] - Iteration 1, response_id 25: Objective value: 6.600262147027712
[2025-04-21 19:48:17,982][root][INFO] - Iteration 1, response_id 26: Objective value: inf
[2025-04-21 19:48:17,993][root][INFO] - Iteration 1, response_id 27: Objective value: 6.69753561764345
[2025-04-21 19:48:19,204][root][INFO] - Iteration 1, response_id 28: Objective value: 6.268709643335038
[2025-04-21 19:48:24,649][root][INFO] - Iteration 1, response_id 29: Objective value: 6.473902583020835
[2025-04-21 19:48:24,652][root][INFO] - Iteration 1: Elitist: 5.981912711007224
[2025-04-21 19:48:24,652][root][INFO] - Iteration 1 finished...
[2025-04-21 19:48:24,652][root][INFO] - Best obj: 5.981912711007224, Best Code Path: problem_iter1_code12.py
[2025-04-21 19:48:24,653][root][INFO] - LLM usage: prompt_tokens = 6618, completion_tokens = 13724
[2025-04-21 19:48:24,653][root][INFO] - Function Evals: 31
[2025-04-21 19:48:24,654][root][INFO] - Flash reflection Prompt: 
System Prompt: 
You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.

User Prompt: 
### List heuristics
Below is a list of design heuristics ranked from best to worst.
[Heuristics 1st]
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Improves upon the basic 1/distance_matrix heuristic for TSP.

    This heuristic combines several factors to estimate the desirability
    of including an edge:

    1.  Inverse distance: Shorter edges are generally better.
    2.  Node degree penalty: Avoids high-degree nodes early on to encourage
        a more balanced tour.  Calculated from average distances. Edges
        connecting nodes that are, on average, further away from others are preferred.
    3.  Global distance context: Considers the overall distance distribution.  Encourages
        inclusion of edges that are significantly shorter than the average.

    Args:
        distance_matrix: A numpy array representing the distance matrix.

    Returns:
        A numpy array of the same shape as distance_matrix, where each element
        represents the desirability of including the corresponding edge in the TSP tour.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate average distance for each node
    avg_distances = np.mean(distance_matrix, axis=0)

    # Global average distance
    global_avg_distance = np.mean(distance_matrix)


    for i in range(n):
        for j in range(n):
            if i != j:
                # Inverse distance
                distance_component = 1 / distance_matrix[i, j]

                # Node degree penalty/preference (using average distances as proxy for centrality)
                degree_component = avg_distances[i] + avg_distances[j]  # Prefer edges connecting "peripheral" nodes

                #Global distance context:
                global_context_component = np.exp(-(distance_matrix[i, j] / global_avg_distance)) #exp(-x) decays as x grows. Shorter edges get higher weights.


                heuristic_matrix[i, j] = distance_component * (1 / (degree_component)) * global_context_component
            else:
                heuristic_matrix[i, j] = 0  # Avoid self-loops

    return heuristic_matrix

[Heuristics 2nd]
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    A more sophisticated heuristic for the Traveling Salesman Problem.
    This version combines distance, a "gravity" effect, and randomness.

    The heuristic favors shorter distances but also encourages exploration
    of less-visited edges.  A stochastic element is introduced to avoid
    getting stuck in local optima.

    Args:
        distance_matrix (np.ndarray): A square matrix where distance_matrix[i][j]
                                       represents the distance between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element
                    represents a heuristic value indicating the desirability of
                    including the corresponding edge in the TSP tour.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance component (shorter distances are better)
    inverse_distance = 1.0 / (distance_matrix + 1e-6)  # Add a small constant to avoid division by zero

    # "Gravity" component: Encourage connections to nodes that are far from the "center of gravity".
    # This promotes exploration and avoids clustering in one region.
    total_distances = np.sum(distance_matrix, axis=0)  # Sum of distances from each node to all other nodes
    gravity_potential = total_distances / np.mean(total_distances)  # Normalize to a reasonable scale


    # Combine the components
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] = inverse_distance[i, j] * (gravity_potential[i] + gravity_potential[j]) # Both nodes have gravity effects

            else:
                heuristic_matrix[i, j] = 0  # No self-loops
    # Add a stochastic element to encourage exploration

    random_noise = np.random.rand(n, n) * 0.1  # Small random values
    heuristic_matrix = heuristic_matrix + random_noise


    return heuristic_matrix

[Heuristics 3rd]
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Improved heuristics for the Traveling Salesman Problem based on distance and neighborhood.
    Prioritizes shorter distances and edges connecting to nodes with longer average distances to other nodes.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances between nodes.
                                       distance_matrix[i][j] is the distance between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element
                      indicates the desirability of including the corresponding edge in the TSP tour.
    """
    n = distance_matrix.shape[0]

    # 1. Inverse distance heuristic: shorter distances are more desirable
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small value to avoid division by zero

    # 2. Node Importance Heuristic: Give higher weight to edges connecting nodes with overall larger distances
    #    to others. This encourages exploring less-connected parts of the graph early on,
    #    potentially preventing premature convergence to local optima.
    node_importance = np.sum(distance_matrix, axis=1)  # Sum of distances for each node
    node_importance_matrix = np.tile(node_importance, (n, 1)) # Replicate node importance for matrix operations
    node_importance_heuristic = node_importance_matrix + node_importance_matrix.T
    #3. combine heuristics
    heuristic_matrix = inverse_distance * (node_importance_heuristic/np.max(node_importance_heuristic))

    # Set diagonal elements to zero to avoid self-loops.  The inverse_distance also handles this, but added for extra safety.
    np.fill_diagonal(heuristic_matrix, 0)

    return heuristic_matrix

[Heuristics 4th]
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for the Traveling Salesman Problem (TSP) based on distance.

    This version incorporates several ideas:

    1.  Inverse Distance:  As in v1, shorter distances are initially preferred.
    2.  Greedy Start Bias: To encourage better starting edges for local search, prefer edges that link to locations
        that have smaller summed distances to all others.
    3.  Global connection boost: Edges that bridge regions of high density, represented
        by distant neighbors are somewhat preferred.  It tries to help 'stitch together'
        separated clusters.
    4. Prevent Self-Loops: Explicitly sets the heuristic value of self-loops (distance of 0) to 0.
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance (primary heuristic)
    heuristics = 1.0 / (distance_matrix + 1e-9)  # Avoid division by zero

    # Calculate node 'importance' (sum of distances to all other nodes)
    node_importance = np.sum(distance_matrix, axis=1)

    # Node bias. Preferentially links two "important" nodes.
    for i in range(n):
        for j in range(n):
           heuristics[i,j] = heuristics[i, j] * ((1/(node_importance[i]+ 1e-9)) + (1/(node_importance[j] + 1e-9)))

    #Global Connection Boost: Penalize edges to locations already closeby
    for i in range(n):
        for j in range(n):

            avg_dist_to_neighbors_i = np.mean(distance_matrix[i,:])
            avg_dist_to_neighbors_j = np.mean(distance_matrix[j,:])
            heuristics[i,j] = heuristics[i,j] * (avg_dist_to_neighbors_i + avg_dist_to_neighbors_j)

    # Zero out self-loops (distance of 0)
    for i in range(n):
        heuristics[i, i] = 0.0

    return heuristics

[Heuristics 5th]
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Einstein's heuristics for TSP using stochastic solution sampling,
    considering both distance and potential cluster structures.

    Args:
        distance_matrix: A numpy array representing the distances between cities.

    Returns:
        A numpy array of the same shape as distance_matrix, representing the
        prior indicators of how promising it is to include each edge in a solution.
    """

    n = distance_matrix.shape[0]

    # 1. Inverse distance: Shorter distances are generally more promising.
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # 2. Node degree centrality adjustment: Nodes with fewer close neighbors might be more critical.
    degree_centrality = np.sum(heuristic_matrix, axis=0)
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] /= (degree_centrality[i] * degree_centrality[j])**0.25 # Adjust centrality influence with exponent
    
    # 3. Adjust for Triangle Inequality violations (proxy for "shortcuts"):
    #    If going from i to k to j is significantly shorter than i to j, it hints
    #    that i to j may be a useful long-range connection in some cases.
    #    We *decrease* its heuristic value, penalizing direct connections where shortcuts exist
    for i in range(n):
        for j in range(n):
            if i != j:
                shortcut_factor = 0.0
                for k in range(n):
                    if i != k and j != k:
                         potential_shortcut = distance_matrix[i, k] + distance_matrix[k, j]
                         shortcut_factor += np.maximum(0, (distance_matrix[i, j] - potential_shortcut) / distance_matrix[i,j])
                heuristic_matrix[i, j] /= (1 + shortcut_factor/ n ) # Average, normalized impact of shortcuts

    # 4. Symmetry correction:  Ensure the matrix is symmetric (if it wasn't already)
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2

    return heuristic_matrix

[Heuristics 6th]
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Improved heuristics for the Traveling Salesman Problem based on distance and node connectivity.

    This heuristic considers both the distance between nodes and an estimate of the connectivity
    of each node within the graph represented by the distance matrix.  Shorter distances are
    generally favored, and nodes that appear to be more centrally located or highly connected
    are given a boost in their edge desirability.  This helps guide the search towards solutions
    that balance short hops with good overall tour structure.

    Args:
        distance_matrix (np.ndarray): A square matrix where distance_matrix[i, j] represents the distance
                                     between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, containing heuristic values
                     indicating the desirability of including each edge in the TSP solution.
    """

    n = distance_matrix.shape[0]

    # 1. Inverse Distance (Basic desirability)
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero

    # 2. Node Connectivity Estimate (Sum of inverse distances to other nodes)
    node_connectivity = np.sum(heuristic_matrix, axis=1)

    # 3. Combine Distance and Connectivity
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] *= (node_connectivity[i] + node_connectivity[j]) / 2.0 # Averaging connectivity of both nodes
            else:
                heuristic_matrix[i, j] = 0  # No self-loops allowed

    # 4. Normalize heuristics (optional, but can improve stability)
    heuristic_matrix = heuristic_matrix / np.max(heuristic_matrix)

    return heuristic_matrix

[Heuristics 7th]
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for Traveling Salesman Problem (TSP) based on distance and node degree.

    This function calculates a heuristic score for each edge in the distance matrix,
    indicating how promising it is to include that edge in the final TSP solution.
    The heuristic combines the inverse of distance with a node degree penalty.  Edges
    connected to nodes with fewer connections are preferred.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances
            between all pairs of nodes.  distance_matrix[i, j] is the distance
            from node i to node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each
            element represents the heuristic score for the corresponding edge.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Calculate node degree desirability: nodes with lower degree should be prioritized.
    # This helps prevent premature closure of sub-tours.

    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] = 1 / (distance_matrix[i, j] + 1e-9) # avoid division by zero
            else:
                heuristic_matrix[i, j] = 0  # No self-loops

    # Normalize to ensure values between 0 and 1, enhancing exploration
    heuristic_matrix = (heuristic_matrix - np.min(heuristic_matrix)) / (np.max(heuristic_matrix) - np.min(heuristic_matrix) + 1e-9)


    #Calculate node degree "attractiveness".
    node_degree = np.sum(heuristic_matrix > 0, axis=0)  # Approximate current node degrees.

    # Modify the heuristic by penalizing higher degree nodes. Favor connecting to low degree nodes.
    for i in range(n):
        for j in range(n):
            if i != j:

                degree_penalty = 1 / (node_degree[i] + node_degree[j] + 1e-9) # Favor low degree connections.

                heuristic_matrix[i,j] = heuristic_matrix[i, j] * degree_penalty #Combines distance and node desirability


    #Re-normalize
    heuristic_matrix = (heuristic_matrix - np.min(heuristic_matrix)) / (np.max(heuristic_matrix) - np.min(heuristic_matrix) + 1e-9)

    return heuristic_matrix

[Heuristics 8th]
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for the Traveling Salesman Problem (TSP) using concepts inspired by
    black holes and gravitational lensing. The core idea is to bias the search towards
    edges that are shorter (stronger gravitational pull) and connect to nodes with fewer
    nearby nodes (less obscured).

    This heuristic attempts to mimic the way light bends around a black hole, where shorter paths
    are preferred, and areas of lower node density are more "visible" (less obscured).

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances between nodes.
                                         distance_matrix[i, j] is the distance between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element
                      indicates the desirability of including the corresponding edge in the solution.
                      Higher values represent more desirable edges.
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Inverse of distance, analogous to gravitational pull (shorter distances are preferred)
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add small constant to avoid division by zero

    # Node degree heuristic: Favors nodes with fewer nearby neighbors
    # Mimics the idea that nodes in less dense regions are more accessible.

    for i in range(n):
        # Calculate a "node visibility" score for each node i.
        # Lower degree (fewer neighbors within a certain radius) implies higher visibility.

        # Option 1: Simple inverse degree
        node_degree = np.sum(distance_matrix[i, :] < np.mean(distance_matrix[i,:])) # count how many nodes nearby

        node_visibility = 1.0 / (node_degree + 1)  # Avoid division by zero

        # Option 2: More complex "gravitational potential" based on inverse distance.
        # potential = np.sum(inverse_distance[i, :])
        # node_visibility = 1.0 / (potential + 1e-9)

        for j in range(n):
            # Combine inverse distance (attraction) and node visibility.
            heuristics_matrix[i, j] = inverse_distance[i, j] * (node_visibility+ 1e-9)  #Adjust to encourage visibility



    # Additional edge weighting - prioritize shorter edges, but also consider
    # how well they connect to the overall graph structure. A small adjustment
    # ensures symmetry and avoids zero division
    for i in range(n):
        for j in range(n):
                heuristics_matrix[i, j] +=  np.mean([heuristics_matrix[i, k] + heuristics_matrix[k,j] for k in range(n)])/(n+1e-9) # give higher score if intermediate hop would also be useful


    # Normalize to avoid extreme values (improve numerical stability).
    max_val = np.max(heuristics_matrix)
    if max_val > 0:
      heuristics_matrix /= max_val

    return heuristics_matrix

[Heuristics 9th]
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Improved heuristic for TSP based on a combination of distance,
    reciprocal rank, and adaptive weighting based on local density.
    Higher values indicate a more promising edge.

    Args:
        distance_matrix: A NumPy array representing the distance matrix.
                         distance_matrix[i, j] is the distance between node i and node j.

    Returns:
        A NumPy array of the same shape as distance_matrix,
        representing the heuristic scores for each edge.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Avoid division by zero and self-loops
    distance_matrix = np.where(distance_matrix == 0, np.inf, distance_matrix)
    np.fill_diagonal(distance_matrix, np.inf) # ensure we don't choose self-loops

    # 1. Inverse Distance: Shorter distances are generally more desirable
    inverse_distance = 1 / distance_matrix

    # 2. Reciprocal Rank: Reward edges that are short relative to others from the same node.
    reciprocal_rank = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        # Get distances from node i to all other nodes
        distances = distance_matrix[i, :]
        # Get the rank of each distance from node i (lower distance = lower rank)
        ranks = np.argsort(distances)  # Indices sorted by distance
        ranked_distances = np.argsort(ranks) + 1  # Rank starts from 1
        reciprocal_rank[i, :] = 1 / ranked_distances

    # 3. Adaptive weighting: Account for local node density. Denser areas mean even short edges must be handled with caution
    #   - We calculate node density using a simple averaging of neighboring inverse distances.  High inverse distance == high node density nearby
    #   - Low local density gives greater weight to reciprocal rank to aggressively explore shorter paths, preventing traps
    #   - High local density deemphasizes reciprocal rank, and instead focuses on pure distance.
    node_densities = np.zeros(n)
    for i in range(n):
        node_densities[i] = np.mean(inverse_distance[i, :])

    # Weight scaling factor based on density. Higher local density, reduces exploration.
    density_scaling = 1.0 / (1.0 + node_densities) # Scale densities so they become penalty coefficients.
    density_scaling = np.tile(density_scaling, (n,1))
    density_scaling = np.minimum(density_scaling, density_scaling.T) #take lower density factor between connected nodes


    # Combine heuristics: inverse distance contributes heavily to base utility, exploration reciprocal rank to boost better ones
    heuristic_matrix = inverse_distance + density_scaling * reciprocal_rank # density acts as a weighting penalty on exploration.

    # Normalize heuristic matrix so stochastic sampling isn't overly sensitive to scale.
    heuristic_matrix = (heuristic_matrix - np.min(heuristic_matrix)) / (np.max(heuristic_matrix) - np.min(heuristic_matrix) + 1e-9) # scaled [0,1]

    return heuristic_matrix

[Heuristics 10th]
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Improved heuristic for TSP based on a combination of distance,
    reciprocal rank, and adaptive weighting based on local density.
    Higher values indicate a more promising edge.

    Args:
        distance_matrix: A NumPy array representing the distance matrix.
                         distance_matrix[i, j] is the distance between node i and node j.

    Returns:
        A NumPy array of the same shape as distance_matrix,
        representing the heuristic scores for each edge.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Avoid division by zero and self-loops
    distance_matrix = np.where(distance_matrix == 0, np.inf, distance_matrix)
    np.fill_diagonal(distance_matrix, np.inf) # ensure we don't choose self-loops

    # 1. Inverse Distance: Shorter distances are generally more desirable
    inverse_distance = 1 / distance_matrix

    # 2. Reciprocal Rank: Reward edges that are short relative to others from the same node.
    reciprocal_rank = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        # Get distances from node i to all other nodes
        distances = distance_matrix[i, :]
        # Get the rank of each distance from node i (lower distance = lower rank)
        ranks = np.argsort(distances)  # Indices sorted by distance
        ranked_distances = np.argsort(ranks) + 1  # Rank starts from 1
        reciprocal_rank[i, :] = 1 / ranked_distances

    # 3. Adaptive weighting: Account for local node density. Denser areas mean even short edges must be handled with caution
    #   - We calculate node density using a simple averaging of neighboring inverse distances.  High inverse distance == high node density nearby
    #   - Low local density gives greater weight to reciprocal rank to aggressively explore shorter paths, preventing traps
    #   - High local density deemphasizes reciprocal rank, and instead focuses on pure distance.
    node_densities = np.zeros(n)
    for i in range(n):
        node_densities[i] = np.mean(inverse_distance[i, :])

    # Weight scaling factor based on density. Higher local density, reduces exploration.
    density_scaling = 1.0 / (1.0 + node_densities) # Scale densities so they become penalty coefficients.
    density_scaling = np.tile(density_scaling, (n,1))
    density_scaling = np.minimum(density_scaling, density_scaling.T) #take lower density factor between connected nodes


    # Combine heuristics: inverse distance contributes heavily to base utility, exploration reciprocal rank to boost better ones
    heuristic_matrix = inverse_distance + density_scaling * reciprocal_rank # density acts as a weighting penalty on exploration.

    # Normalize heuristic matrix so stochastic sampling isn't overly sensitive to scale.
    heuristic_matrix = (heuristic_matrix - np.min(heuristic_matrix)) / (np.max(heuristic_matrix) - np.min(heuristic_matrix) + 1e-9) # scaled [0,1]

    return heuristic_matrix

[Heuristics 11th]
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Improves upon v1 by incorporating a "gravity" towards the center of the nodes
    and penalizing edges that cross far from the center, potentially leading to
    more compact and efficient routes. It also combines information about minimal outgoing edges,
    avoiding premature convergence and promoting exploration.

    Args:
        distance_matrix: A numpy ndarray representing the distance matrix.

    Returns:
        A numpy ndarray of the same shape as distance_matrix, representing the
        heuristic values for each edge.
    """
    n = distance_matrix.shape[0]

    # 1. Inverse distance (basic heuristic)
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Adding a small value to avoid division by zero

    # 2. Center of the nodes (proxy for geographical center)
    center_x = np.mean(np.arange(n))
    center_y = np.mean(np.arange(n))

    # 3. Calculate distances from each node to the center
    center_distances = np.sqrt((np.arange(n) - center_x)**2 + (np.arange(n) - center_y)**2)

    # 4. Heuristic factor based on proximity to the center
    center_proximity_factor = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
             center_proximity_factor[i,j] = 1.0 - (abs(center_distances[i] - center_distances[j]) / (np.max(center_distances)+1e-9))

    # 5. Minimal outgoing edge bonus: Helps explore different paths by
    #   identifying for each node edges that have small distances.
    min_outgoing_indices = np.argmin(distance_matrix, axis=1)
    min_outgoing_bonus = np.zeros((n, n))
    for i in range(n):
        min_outgoing_bonus[i, min_outgoing_indices[i]] = 1.0 # encourage to take edges that lead to the closest cities, at least once.

    # 6. Combine all factors (weighted)

    heuristic_matrix = (0.6 * heuristic_matrix +
                           0.3 * center_proximity_factor +
                           0.1 * min_outgoing_bonus) # emphasize distance, but consider geographical proximity.

    return heuristic_matrix

[Heuristics 12th]
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP using a combination of inverse distance and node centrality.

    The idea here is to favor edges that are short and connect to nodes that are centrally located in the graph.
    This aims to prevent solutions that branch out to distant nodes early on.

    Args:
        distance_matrix: A NumPy ndarray representing the distance matrix for the TSP.

    Returns:
        A NumPy ndarray of the same shape as the input distance matrix,
        where each element represents the "promise" of including the corresponding edge in a solution.
    """

    n = distance_matrix.shape[0]

    # Inverse distance heuristic
    inverse_distance = 1 / (distance_matrix + np.eye(n)) # Add identity to avoid division by zero for self-loops.  Self-loops aren't part of TSP, but numerical stability matters

    # Node centrality heuristic (degree centrality based on inverse distances)
    node_centrality = np.sum(inverse_distance, axis=1) # Sum of inverse distances for each node, giving how well a node connected to the rest.

    # Edge-wise centrality (product of the centrality of the two nodes connected by an edge)
    edge_centrality = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            edge_centrality[i, j] = node_centrality[i] * node_centrality[j]

    # Combine the heuristics
    # Adding small constance for numerical stability,
    # scaling the distance with node centrality information
    heuristic_matrix = inverse_distance * (edge_centrality**0.5 + 1e-9)

    return heuristic_matrix

[Heuristics 13th]
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for the Traveling Salesman Problem (TSP) based on stochastic solution sampling,
    inspired by black hole principles.

    This version combines inverse distance with a stochastic element, weighted by
    the distance to the farthest node.  The stochasticity allows for escaping local
    optima, mimicking Hawking radiation.  The weighting emphasizes potentially longer,
    but globally more efficient, "quantum tunneling" paths.

    Args:
        distance_matrix (np.ndarray): A square matrix where distance_matrix[i, j]
                                     represents the distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, containing heuristic values.
                    Higher values indicate more promising edges.
    """
    n = distance_matrix.shape[0]
    max_distance = np.max(distance_matrix[np.isfinite(distance_matrix)])  # Avoid infs when computing stochasticity

    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                # Inverse distance (shorter distances are preferred)
                inverse_distance = 1 / distance_matrix[i, j] if distance_matrix[i,j] !=0 else np.inf # prevent division by zero. If 0 then inf will automatically prevent algorithm to visit this route

                # Stochastic element (Hawking radiation): favor exploration based on "black hole event horizon"
                stochasticity = np.random.rand() * (distance_matrix[i,j] / max_distance) # Normalize by the "event horizon" (max distance)

                # Combine inverse distance and stochasticity. Weights promote potential quantum tunneling
                heuristic_matrix[i, j] = inverse_distance + stochasticity

            else:
                heuristic_matrix[i, j] = 0  # No self-loops

    return heuristic_matrix

[Heuristics 14th]
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for the Traveling Salesman Problem (TSP) using a combination of inverse distance,
    savings heuristic, and a touch of randomness to encourage exploration.

    Args:
        distance_matrix: A NumPy ndarray representing the distance matrix between cities.

    Returns:
        A NumPy ndarray of the same shape as distance_matrix, representing the prior
        indicator of how promising each edge is. Higher values indicate more promising edges.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # 1. Inverse distance (basic heuristic)
    inverse_distance = 1 / (distance_matrix + np.eye(n))  # Add identity to avoid division by zero on the diagonal
    heuristics += inverse_distance

    # 2. Savings Heuristic:  Measure the "savings" from directly linking two cities rather than going back to a depot (city 0).  Normalize savings by distance.

    depot = 0  # Arbitrarily choose city 0 as the depot/starting point. This can be randomized as well.
    savings = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j: # Avoid savings between same city
                savings[i, j] = distance_matrix[depot, i] + distance_matrix[depot, j] - distance_matrix[i, j]
    #scale savings by overall distances involved.
    heuristics += savings / (distance_matrix + np.eye(n))
    # 3. Randomness (Encourage exploration)
    randomness = np.random.rand(n, n) * 0.1  # Small random values

    heuristics += randomness

    # 4. Make sure diagnal is small/zero

    heuristics[np.diag_indices_from(heuristics)] = -1
    # 5. Normalize the heuristics
    heuristics = (heuristics - np.min(heuristics)) / (np.max(heuristics) - np.min(heuristics))  # Scale to [0, 1]


    return heuristics

[Heuristics 15th]
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for the Traveling Salesman Problem (TSP) using a combination of inverse distance,
    savings heuristic, and a touch of randomness to encourage exploration.

    Args:
        distance_matrix: A NumPy ndarray representing the distance matrix between cities.

    Returns:
        A NumPy ndarray of the same shape as distance_matrix, representing the prior
        indicator of how promising each edge is. Higher values indicate more promising edges.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # 1. Inverse distance (basic heuristic)
    inverse_distance = 1 / (distance_matrix + np.eye(n))  # Add identity to avoid division by zero on the diagonal
    heuristics += inverse_distance

    # 2. Savings Heuristic:  Measure the "savings" from directly linking two cities rather than going back to a depot (city 0).  Normalize savings by distance.

    depot = 0  # Arbitrarily choose city 0 as the depot/starting point. This can be randomized as well.
    savings = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j: # Avoid savings between same city
                savings[i, j] = distance_matrix[depot, i] + distance_matrix[depot, j] - distance_matrix[i, j]
    #scale savings by overall distances involved.
    heuristics += savings / (distance_matrix + np.eye(n))
    # 3. Randomness (Encourage exploration)
    randomness = np.random.rand(n, n) * 0.1  # Small random values

    heuristics += randomness

    # 4. Make sure diagnal is small/zero

    heuristics[np.diag_indices_from(heuristics)] = -1
    # 5. Normalize the heuristics
    heuristics = (heuristics - np.min(heuristics)) / (np.max(heuristics) - np.min(heuristics))  # Scale to [0, 1]


    return heuristics

[Heuristics 16th]
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for the Traveling Salesman Problem (TSP) using a combination of inverse distance,
    savings heuristic, and a touch of randomness to encourage exploration.

    Args:
        distance_matrix: A NumPy ndarray representing the distance matrix between cities.

    Returns:
        A NumPy ndarray of the same shape as distance_matrix, representing the prior
        indicator of how promising each edge is. Higher values indicate more promising edges.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # 1. Inverse distance (basic heuristic)
    inverse_distance = 1 / (distance_matrix + np.eye(n))  # Add identity to avoid division by zero on the diagonal
    heuristics += inverse_distance

    # 2. Savings Heuristic:  Measure the "savings" from directly linking two cities rather than going back to a depot (city 0).  Normalize savings by distance.

    depot = 0  # Arbitrarily choose city 0 as the depot/starting point. This can be randomized as well.
    savings = np.zeros_like(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j: # Avoid savings between same city
                savings[i, j] = distance_matrix[depot, i] + distance_matrix[depot, j] - distance_matrix[i, j]
    #scale savings by overall distances involved.
    heuristics += savings / (distance_matrix + np.eye(n))
    # 3. Randomness (Encourage exploration)
    randomness = np.random.rand(n, n) * 0.1  # Small random values

    heuristics += randomness

    # 4. Make sure diagnal is small/zero

    heuristics[np.diag_indices_from(heuristics)] = -1
    # 5. Normalize the heuristics
    heuristics = (heuristics - np.min(heuristics)) / (np.max(heuristics) - np.min(heuristics))  # Scale to [0, 1]


    return heuristics

[Heuristics 17th]
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for the Traveling Salesman Problem (TSP) based on a combination of
    inverse distance, savings heuristic, and random perturbations, inspired
    by quantum mechanics principles (stochastic sampling with "path integrals").

    Args:
        distance_matrix: A numpy ndarray representing the distance matrix between cities.

    Returns:
        A numpy ndarray of the same shape as distance_matrix, representing the
        prior probability of including each edge in a solution.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance (short distances are preferred)
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Adding a small value to avoid division by zero

    # Savings heuristic (inspired by Clarke-Wright algorithm)
    #  Higher savings indicate a higher likelihood of inclusion.
    savings = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                # Savings from merging i and j into a route
                savings[i, j] = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j] # assuming start node is 0
                savings[j, i] = distance_matrix[j, 0] + distance_matrix[0, i] - distance_matrix[j, i]

    # Combine inverse distance and savings
    heuristics = inverse_distance + savings # maybe add scaling factors

    # Add a stochastic element -  "quantum fluctuations"
    # This introduces some randomness to allow for exploration of different paths
    # even if some edges seem less promising initially.
    random_perturbation = np.random.normal(0, 0.1, size=(n, n)) # scaled random noise
    heuristics += random_perturbation

    # Ensure the diagonal is zero and all values are non-negative.

    for i in range(n):
        heuristics[i, i] = 0

    heuristics = np.maximum(heuristics, 0) # Ensure probabilities are non-negative


    # Normalize the heuristics
    total_sum = np.sum(heuristics)
    if total_sum > 0:
        heuristics /= total_sum  # Convert to probabilities (optional, but useful)
    else:
        heuristics = np.ones_like(distance_matrix) / (n * (n -1))

    return heuristics

[Heuristics 18th]
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    A heuristic function for the Traveling Salesman Problem based on Newton's laws and physical intuition.
    This function incorporates a combination of inverse distance (gravity),
    a temperature-based exploration factor, and a path coherence term.

    Args:
        distance_matrix (np.ndarray): A matrix where distance_matrix[i, j] is the distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, containing heuristic values for each edge.
                     Higher values indicate more promising edges.
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance (Gravitational Analogy): Closer cities are more attractive.
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero.

    # 2. Temperature-based Exploration: Encourage exploration initially, focusing as the search progresses.
    temperature = 1.0  # Initial temperature (can be tuned). It decreases over time implicitly
    exploration_factor = np.exp(-distance_matrix / temperature)

    # 3. Path Coherence: Encourages edges that connect to nodes that are "well-connected" in general,
    #    considering all edge connections in the graph to create a smooth and promising initial path
    path_coherence = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                # Compute the sum of inverse distances from i and j to all other nodes
                attraction_i = np.sum(inverse_distance[i, :])
                attraction_j = np.sum(inverse_distance[j, :])
                path_coherence[i, j] = (attraction_i + attraction_j)
    
    # 4. Combine the factors, weighting each appropriately. These weightings can be optimized through trials.
    alpha = 0.6  # Weight for inverse distance
    beta = 0.2   # Weight for exploration factor
    gamma = 0.2   # Weight for path coherence

    heuristics = alpha * inverse_distance + beta * exploration_factor + gamma * path_coherence

    # Set diagonal elements (distance to self) to zero, avoiding self-loops.
    np.fill_diagonal(heuristics, 0)

    return heuristics

[Heuristics 19th]
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    A heuristic function for the Traveling Salesman Problem based on Newton's laws and physical intuition.
    This function incorporates a combination of inverse distance (gravity),
    a temperature-based exploration factor, and a path coherence term.

    Args:
        distance_matrix (np.ndarray): A matrix where distance_matrix[i, j] is the distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, containing heuristic values for each edge.
                     Higher values indicate more promising edges.
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance (Gravitational Analogy): Closer cities are more attractive.
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero.

    # 2. Temperature-based Exploration: Encourage exploration initially, focusing as the search progresses.
    temperature = 1.0  # Initial temperature (can be tuned). It decreases over time implicitly
    exploration_factor = np.exp(-distance_matrix / temperature)

    # 3. Path Coherence: Encourages edges that connect to nodes that are "well-connected" in general,
    #    considering all edge connections in the graph to create a smooth and promising initial path
    path_coherence = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                # Compute the sum of inverse distances from i and j to all other nodes
                attraction_i = np.sum(inverse_distance[i, :])
                attraction_j = np.sum(inverse_distance[j, :])
                path_coherence[i, j] = (attraction_i + attraction_j)
    
    # 4. Combine the factors, weighting each appropriately. These weightings can be optimized through trials.
    alpha = 0.6  # Weight for inverse distance
    beta = 0.2   # Weight for exploration factor
    gamma = 0.2   # Weight for path coherence

    heuristics = alpha * inverse_distance + beta * exploration_factor + gamma * path_coherence

    # Set diagonal elements (distance to self) to zero, avoiding self-loops.
    np.fill_diagonal(heuristics, 0)

    return heuristics

[Heuristics 20th]
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for Traveling Salesman Problem (TSP) based on:
    1. Inverse distance (shorter distances are preferred).
    2. Node degree preference:  Nodes connected to more other nodes tend to be connected earlier.
    3. Avoidance of long edges connected to nodes already having short edges.

    Args:
        distance_matrix: A numpy ndarray representing the distance matrix.

    Returns:
        A numpy ndarray of the same shape as distance_matrix,
        representing the heuristic value for each edge. Higher values
        indicate more promising edges.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance heuristic
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add a small value to avoid division by zero

    # 2. Node degree preference: encourage exploration of nodes
    node_degree = np.sum(inverse_distance, axis=0)  # Sum of inverse distances for each node
    node_degree_matrix = np.outer(node_degree, node_degree)

    # 3. Penalize long edges for nodes that already have short edges
    min_dist_to_node = np.min(distance_matrix + np.diag([np.inf]*n), axis=0) # smallest distance to all nodes

    node_min_dist_matrix = np.outer(min_dist_to_node,min_dist_to_node)
    penalization_matrix = distance_matrix * (node_min_dist_matrix )

    heuristics = inverse_distance +  0.1*node_degree_matrix - 0.0001 * penalization_matrix

    return heuristics


### Guide
- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.
- The response in Markdown style and nothing else has the following structure:
"**Analysis:**
**Experience:**"
In there:
+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.
Example: "Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:"

+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).

I'm going to tip $999K for a better heuristics! Let's think step by step.
[2025-04-21 19:48:24,662][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:48:29,815][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:48:29,817][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:48:29,817][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:29,817][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:29,819][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:29,837][root][INFO] - Comprehensive reflection Prompt: 
System Prompt: 
You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.

User Prompt: 
Your task is to redefine 'Current self-reflection' paying attention to avoid all things in 'Ineffective self-reflection' in order to come up with ideas to design better heuristics.

### Current self-reflection
To design better heuristics, blend exploitation of short distances with exploration strategies like node degree adjustments, randomness, or savings heuristics. Carefully weigh these components and consider incorporating global context information to guide the search process effectively and avoid premature convergence.
None

### Ineffective self-reflection
None

Response (<100 words) should have 4 bullet points: Keywords, Advice, Avoid, Explanation.
I'm going to tip $999K for a better heuristics! Let's think step by step.
[2025-04-21 19:48:29,839][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:48:32,070][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:48:32,073][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:48:32,074][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:32,074][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:32,077][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:32,087][root][INFO] - Crossover Prompt: 
System Prompt: 
You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.


### Better code
def heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:

    """
    Heuristics for the Traveling Salesman Problem (TSP) based on a combination of
    inverse distance, savings heuristic, and random perturbations, inspired
    by quantum mechanics principles (stochastic sampling with "path integrals").

    Args:
        distance_matrix: A numpy ndarray representing the distance matrix between cities.

    Returns:
        A numpy ndarray of the same shape as distance_matrix, representing the
        prior probability of including each edge in a solution.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance (short distances are preferred)
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Adding a small value to avoid division by zero

    # Savings heuristic (inspired by Clarke-Wright algorithm)
    #  Higher savings indicate a higher likelihood of inclusion.
    savings = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                # Savings from merging i and j into a route
                savings[i, j] = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j] # assuming start node is 0
                savings[j, i] = distance_matrix[j, 0] + distance_matrix[0, i] - distance_matrix[j, i]

    # Combine inverse distance and savings
    heuristics = inverse_distance + savings # maybe add scaling factors

    # Add a stochastic element -  "quantum fluctuations"
    # This introduces some randomness to allow for exploration of different paths
    # even if some edges seem less promising initially.
    random_perturbation = np.random.normal(0, 0.1, size=(n, n)) # scaled random noise
    heuristics += random_perturbation

    # Ensure the diagonal is zero and all values are non-negative.

    for i in range(n):
        heuristics[i, i] = 0

    heuristics = np.maximum(heuristics, 0) # Ensure probabilities are non-negative


    # Normalize the heuristics
    total_sum = np.sum(heuristics)
    if total_sum > 0:
        heuristics /= total_sum  # Convert to probabilities (optional, but useful)
    else:
        heuristics = np.ones_like(distance_matrix) / (n * (n -1))

    return heuristics

### Worse code
def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:

    """
    A heuristic function for the Traveling Salesman Problem based on Newton's laws and physical intuition.
    This function incorporates a combination of inverse distance (gravity),
    a temperature-based exploration factor, and a path coherence term.

    Args:
        distance_matrix (np.ndarray): A matrix where distance_matrix[i, j] is the distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, containing heuristic values for each edge.
                     Higher values indicate more promising edges.
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance (Gravitational Analogy): Closer cities are more attractive.
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero.

    # 2. Temperature-based Exploration: Encourage exploration initially, focusing as the search progresses.
    temperature = 1.0  # Initial temperature (can be tuned). It decreases over time implicitly
    exploration_factor = np.exp(-distance_matrix / temperature)

    # 3. Path Coherence: Encourages edges that connect to nodes that are "well-connected" in general,
    #    considering all edge connections in the graph to create a smooth and promising initial path
    path_coherence = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                # Compute the sum of inverse distances from i and j to all other nodes
                attraction_i = np.sum(inverse_distance[i, :])
                attraction_j = np.sum(inverse_distance[j, :])
                path_coherence[i, j] = (attraction_i + attraction_j)
    
    # 4. Combine the factors, weighting each appropriately. These weightings can be optimized through trials.
    alpha = 0.6  # Weight for inverse distance
    beta = 0.2   # Weight for exploration factor
    gamma = 0.2   # Weight for path coherence

    heuristics = alpha * inverse_distance + beta * exploration_factor + gamma * path_coherence

    # Set diagonal elements (distance to self) to zero, avoiding self-loops.
    np.fill_diagonal(heuristics, 0)

    return heuristics

### Analyze & experience
- *   Comparing (1st) vs (20th), we see that the best heuristic incorporates inverse distance, node degree preference, and global distance context, penalizing long edges connected to nodes already having short edges, while the worst focuses on inverse distance, node degree, and penalizing long edges connected to nodes already having short edges. The key difference lies in the inclusion of the global context component in the best heuristic, along with degree component implemented by average distance, making it superior.
*   Comparing (2nd) vs (19th), we observe that the second-best heuristic combines inverse distance with a "gravity" effect encouraging exploration of less-visited edges and randomness to escape local optima. The 19th heuristic uses inverse distance, a temperature-based exploration factor, and path coherence. The added randomness and gravity component makes the 2nd better than 19th.
*   Comparing (1st) vs (2nd), the first prioritizes a more balanced tour with global distance awareness using average distances, while the second opts for exploration through a gravity effect and stochastic noise. The focus on a balanced tour appears to be more effective.
*   Comparing (3rd) vs (4th), the 3rd heuristic prioritizes shorter distances and edges connecting to nodes with longer average distances, while the 4th incorporates inverse distance, a greedy start bias based on summed distances, and a global connection boost. The node importance heuristic seems better than greedy start bias.
*   Comparing (2nd worst) vs (worst), the 19th relies on temperature-controlled exploration and path coherence, while the 20th uses node degree preference and avoidance of long edges connected to nodes with short edges. The path coherence mechanism appears less robust than degree-based exploration.
*   Overall: Effective heuristics incorporate a balance between exploitation (favoring shorter distances) and exploration (avoiding local optima). They often factor in node connectivity, either through degree penalties/preferences or gravity-like effects. The weighting of different components and the specific implementation of exploration mechanisms (randomness, temperature, savings heuristic) plays a significant role in performance. Global context awareness is also crucial for achieving superior results.
- - Try combining various factors to determine how promising it is to select an edge.
- Try sparsifying the matrix by setting unpromising elements to zero.
Okay, here's a redefinition of "Current self-reflection" focused on designing better heuristics, avoiding common pitfalls, and a roadmap for improvement:

*   **Keywords:** Heuristic design, exploitation-exploration balance, global context, premature convergence, adaptive strategies, performance metrics.

*   **Advice:** Design heuristics that dynamically adapt their exploration/exploitation ratio based on search progress and problem characteristics. Incorporate global information strategically, using it to guide, not dictate, the search. Rigorously test and benchmark heuristics against diverse problem instances.

*   **Avoid:** Over-reliance on any single strategy (e.g., pure exploitation), neglecting global problem context, ignoring performance metrics and feedback loops.

*   **Explanation:** Effective heuristic design requires a nuanced understanding of the problem landscape. Balance short-term gains with broader exploration guided by global awareness and adapt your strategy based on real-world performance data.


Your task is to write an improved function `heuristics_v2` by COMBINING elements of two above heuristics base Analyze & experience.
Output the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.

I'm going to tip $999K for a better heuristics! Let's think step by step.
[2025-04-21 19:48:32,114][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:48:32,115][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:48:35,755][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:48:35,758][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:48:35,759][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:35,760][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:35,762][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:48:35,763][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:36,076][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:48:36,079][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:48:36,080][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:36,080][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:36,081][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:48:36,096][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:38,818][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:48:38,821][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:48:38,822][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:38,823][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:38,825][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:48:38,827][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:39,472][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:48:39,477][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:48:39,478][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:39,478][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:39,481][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:48:39,482][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:41,774][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:48:41,777][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:48:41,779][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:41,779][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:41,781][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:48:41,781][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:43,646][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:48:43,652][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:48:43,653][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:43,654][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:43,656][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:48:43,657][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:45,463][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:48:45,466][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:48:45,467][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:45,467][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:45,469][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:48:45,470][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:47,020][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:48:47,022][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:48:47,024][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:47,024][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:47,026][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:48:47,028][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:49,150][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:48:49,153][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:48:49,155][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:49,155][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:49,157][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:50,393][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:48:50,395][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:48:50,395][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:50,395][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:50,396][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:48:50,417][root][INFO] - Iteration 2: Running Code 0
[2025-04-21 19:48:56,184][root][INFO] - Iteration 2: Code Run 0 successful!
[2025-04-21 19:48:56,184][root][INFO] - Iteration 2: Running Code 1
[2025-04-21 19:49:02,888][root][INFO] - Iteration 2: Code Run 1 successful!
[2025-04-21 19:49:02,888][root][INFO] - Iteration 2: Running Code 2
[2025-04-21 19:49:10,048][root][INFO] - Iteration 2: Code Run 2 successful!
[2025-04-21 19:49:10,048][root][INFO] - Iteration 2: Running Code 3
[2025-04-21 19:49:17,317][root][INFO] - Iteration 2: Code Run 3 successful!
[2025-04-21 19:49:17,317][root][INFO] - Iteration 2: Running Code 4
[2025-04-21 19:49:23,770][root][INFO] - Iteration 2: Code Run 4 successful!
[2025-04-21 19:49:23,771][root][INFO] - Iteration 2: Running Code 5
[2025-04-21 19:49:30,654][root][INFO] - Iteration 2: Code Run 5 successful!
[2025-04-21 19:49:30,654][root][INFO] - Iteration 2: Running Code 6
[2025-04-21 19:49:37,830][root][INFO] - Iteration 2: Code Run 6 successful!
[2025-04-21 19:49:37,830][root][INFO] - Iteration 2: Running Code 7
[2025-04-21 19:49:45,194][root][INFO] - Iteration 2: Code Run 7 successful!
[2025-04-21 19:49:45,194][root][INFO] - Iteration 2: Running Code 8
[2025-04-21 19:49:52,165][root][INFO] - Iteration 2: Code Run 8 successful!
[2025-04-21 19:49:52,165][root][INFO] - Iteration 2: Running Code 9
[2025-04-21 19:49:59,329][root][INFO] - Iteration 2: Code Run 9 successful!
[2025-04-21 19:49:59,340][root][INFO] - Iteration 2, response_id 0: Objective value: 14.031595804457487
[2025-04-21 19:49:59,351][root][INFO] - Iteration 2, response_id 1: Objective value: 6.565242319506825
[2025-04-21 19:49:59,362][root][INFO] - Iteration 2, response_id 2: Objective value: 6.1927394111312
[2025-04-21 19:49:59,378][root][INFO] - Iteration 2, response_id 3: Objective value: inf
[2025-04-21 19:49:59,390][root][INFO] - Iteration 2, response_id 4: Objective value: 6.552002887672481
[2025-04-21 19:49:59,401][root][INFO] - Iteration 2, response_id 5: Objective value: 6.356891121843295
[2025-04-21 19:49:59,412][root][INFO] - Iteration 2, response_id 6: Objective value: 6.571479931383254
[2025-04-21 19:49:59,423][root][INFO] - Iteration 2, response_id 7: Objective value: 6.202083715791013
[2025-04-21 19:50:00,755][root][INFO] - Iteration 2, response_id 8: Objective value: 18.932012445874662
[2025-04-21 19:50:06,457][root][INFO] - Iteration 2, response_id 9: Objective value: 6.536957968082836
[2025-04-21 19:50:06,458][root][INFO] - Iteration 2 finished...
[2025-04-21 19:50:06,458][root][INFO] - Best obj: 5.981912711007224, Best Code Path: problem_iter1_code12.py
[2025-04-21 19:50:06,458][root][INFO] - LLM usage: prompt_tokens = 36014, completion_tokens = 17097
[2025-04-21 19:50:06,459][root][INFO] - Function Evals: 41
[2025-04-21 19:50:06,460][root][INFO] - Mutation Prompt: 
System Prompt: 
You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.
Your response outputs Python code and nothing else. Format your code as a Python code string: "```python ... ```".

User Prompt: 
You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following "heuristics". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.
The `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.


Current heuristics:
def heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:

    """
    Newtonian Heuristics for TSP Edge Prioritization:
    Combines gravitational attraction (inverse square distance) with a simulated annealing-inspired temperature factor
    to prioritize shorter edges and prevent premature convergence.

    Args:
        distance_matrix (np.ndarray):  Distance matrix representing the TSP instance.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution.  Higher values suggest higher priority.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Handle potential division by zero or near-zero distances:
    epsilon = 1e-9  # A small value to avoid division by zero

    # Temperature parameter - Decreases as algorithm runs
    temperature = 1.0  # Initial Temperature - High initially allows exploration.

    # Gravitational attraction component (scaled and temperature modulated):
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] = (1.0 / (distance_matrix[i, j]**2 + epsilon)) * temperature
            else:
                heuristics[i, j] = 0.0 # No self loops

    # Annealing Schedule - Decay of the temperature
    temperature *= 0.995 #Reduce temperature each step (simulates cooling)
    # Can use other annealing functions, such as: temperature = initial_temperature / (1 + np.log(iteration_count))

    return heuristics

Now, think outside the box write a mutated function `heuristics_v2` better than current version.
You can use some hints below:
- - Try combining various factors to determine how promising it is to select an edge.
- Try sparsifying the matrix by setting unpromising elements to zero.
Okay, here's a redefinition of "Current self-reflection" focused on designing better heuristics, avoiding common pitfalls, and a roadmap for improvement:

*   **Keywords:** Heuristic design, exploitation-exploration balance, global context, premature convergence, adaptive strategies, performance metrics.

*   **Advice:** Design heuristics that dynamically adapt their exploration/exploitation ratio based on search progress and problem characteristics. Incorporate global information strategically, using it to guide, not dictate, the search. Rigorously test and benchmark heuristics against diverse problem instances.

*   **Avoid:** Over-reliance on any single strategy (e.g., pure exploitation), neglecting global problem context, ignoring performance metrics and feedback loops.

*   **Explanation:** Effective heuristic design requires a nuanced understanding of the problem landscape. Balance short-term gains with broader exploration guided by global awareness and adapt your strategy based on real-world performance data.


Output code only and enclose your code with Python code block: ```python ... ```.
I'm going to tip $999K for a better solution!
[2025-04-21 19:50:06,462][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:50:06,463][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:50:11,513][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:50:11,516][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:50:11,517][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:50:11,518][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:50:11,519][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:50:11,520][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:50:11,824][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:50:11,825][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:50:11,826][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:50:11,826][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:50:11,827][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:50:11,827][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:50:15,882][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:50:15,886][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:50:15,887][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:50:15,888][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:50:15,890][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:50:15,892][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:50:16,851][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:50:16,853][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:50:16,854][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:50:16,854][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:50:16,855][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:50:20,483][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:50:20,488][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:50:20,490][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:50:20,490][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:50:20,492][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:50:20,504][root][INFO] - Iteration 3: Running Code 0
[2025-04-21 19:50:26,268][root][INFO] - Iteration 3: Code Run 0 successful!
[2025-04-21 19:50:26,268][root][INFO] - Iteration 3: Running Code 1
[2025-04-21 19:50:33,178][root][INFO] - Iteration 3: Code Run 1 successful!
[2025-04-21 19:50:33,179][root][INFO] - Iteration 3: Running Code 2
[2025-04-21 19:50:40,408][root][INFO] - Iteration 3: Code Run 2 successful!
[2025-04-21 19:50:40,408][root][INFO] - Iteration 3: Running Code 3
[2025-04-21 19:50:47,671][root][INFO] - Iteration 3: Code Run 3 successful!
[2025-04-21 19:50:47,672][root][INFO] - Iteration 3: Running Code 4
[2025-04-21 19:50:54,722][root][INFO] - Iteration 3: Code Run 4 successful!
[2025-04-21 19:50:54,734][root][INFO] - Iteration 3, response_id 0: Objective value: 5.959145788545095
[2025-04-21 19:50:54,747][root][INFO] - Iteration 3, response_id 1: Objective value: 5.992226734011087
[2025-04-21 19:50:54,757][root][INFO] - Iteration 3, response_id 2: Objective value: 6.072574506537192
[2025-04-21 19:50:56,859][root][INFO] - Iteration 3, response_id 3: Objective value: 5.957249911088731
[2025-04-21 19:51:01,956][root][INFO] - Iteration 3, response_id 4: Objective value: 5.930409711516958
[2025-04-21 19:51:01,958][root][INFO] - Iteration 3: Elitist: 5.930409711516958
[2025-04-21 19:51:01,958][root][INFO] - Iteration 3 finished...
[2025-04-21 19:51:01,958][root][INFO] - Best obj: 5.930409711516958, Best Code Path: problem_iter3_code4.py
[2025-04-21 19:51:01,959][root][INFO] - LLM usage: prompt_tokens = 36793, completion_tokens = 17804
[2025-04-21 19:51:01,959][root][INFO] - Function Evals: 46
[2025-04-21 19:51:01,960][root][INFO] - Harmony Search Prompt: 
System Prompt: 
You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.
User Prompt: 
[code]
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Enhanced Heuristics for TSP Edge Prioritization:
    Combines gravitational attraction (inverse square distance), node degree bias (favoring less-connected nodes),
    and a simulated annealing-inspired temperature factor with adaptive cooling to balance exploration and exploitation.
    Sparsifies the matrix by setting unpromising elements to zero.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution. Higher values suggest higher priority.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Handle potential division by zero or near-zero distances:
    epsilon = 1e-9  # A small value to avoid division by zero

    # Temperature parameter - Decreases as algorithm runs, adaptive cooling.
    initial_temperature = 10.0
    temperature = initial_temperature  # Initial Temperature - High initially allows exploration.
    min_temperature = 0.01 # Minimum Temperature
    cooling_rate = 0.995
    adaptive_cooling_threshold = 0.05 #When to trigger a slower cooling

    # Node degree bias (favor less-connected nodes - initially uniform).  Will become dynamic during search (simulated annealing will be used to select edges)
    node_degrees = np.ones(n)  # Initially all nodes are considered equally unconnected


    # Gravitational attraction component (scaled and temperature modulated):
    for i in range(n):
        for j in range(n):
            if i != j:
                #Edge score combination
                distance_factor = 1.0 / (distance_matrix[i, j]**2 + epsilon)
                degree_factor = node_degrees[i] * node_degrees[j] #Promotes connections to nodes with lower degree
                heuristics[i, j] = distance_factor * degree_factor * temperature
            else:
                heuristics[i, j] = 0.0  # No self-loops

    #Sparsification (attempt to cut off edges that are considered too long, only if temperature is low enough)
    sparsification_threshold = np.mean(heuristics) * 0.1 # Dynamic threshold relative to average heuristic value. Can be further tuned.
    if temperature < 1.0:
      heuristics[heuristics < sparsification_threshold] = 0.0

    # Annealing Schedule - Decay of the temperature (adaptive)
    if np.sum(heuristics > 0) / (n * (n - 1)) < adaptive_cooling_threshold: #If many edges are already zeroed out, cool more slowly
      cooling_rate = 0.999 #Slow down cooling
    temperature *= cooling_rate #Reduce temperature each step (simulates cooling)
    temperature = max(temperature, min_temperature) #Ensure the temperature doesnt drop below the minimum

    return heuristics

Now extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.

- Output code only and enclose your code with Python code block: ```python ... ```.
- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```.
[2025-04-21 19:51:01,963][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:51:06,765][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:51:06,768][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:51:06,769][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:51:06,770][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:51:06,771][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:51:06,773][root][INFO] - LLM Response for HS step: ```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray,
                  epsilon: float = 1e-9,
                  initial_temperature: float = 10.0,
                  min_temperature: float = 0.01,
                  cooling_rate: float = 0.995,
                  adaptive_cooling_threshold: float = 0.05,
                  sparsification_threshold_factor: float = 0.1) -> np.ndarray:
    """
    Enhanced Heuristics for TSP Edge Prioritization:
    Combines gravitational attraction (inverse square distance), node degree bias (favoring less-connected nodes),
    and a simulated annealing-inspired temperature factor with adaptive cooling to balance exploration and exploitation.
    Sparsifies the matrix by setting unpromising elements to zero.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.
        epsilon (float): A small value to avoid division by zero in distance factor calculation. Defaults to 1e-9.
        initial_temperature (float): Initial temperature for simulated annealing. Defaults to 10.0.
        min_temperature (float): Minimum temperature for simulated annealing. Defaults to 0.01.
        cooling_rate (float): Cooling rate for simulated annealing. Defaults to 0.995.
        adaptive_cooling_threshold (float): Threshold for adaptive cooling. Defaults to 0.05.
        sparsification_threshold_factor (float): Factor to determine the sparsification threshold. Defaults to 0.1.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution. Higher values suggest higher priority.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Node degree bias (favor less-connected nodes - initially uniform).  Will become dynamic during search (simulated annealing will be used to select edges)
    node_degrees = np.ones(n)  # Initially all nodes are considered equally unconnected


    # Gravitational attraction component (scaled and temperature modulated):
    for i in range(n):
        for j in range(n):
            if i != j:
                #Edge score combination
                distance_factor = 1.0 / (distance_matrix[i, j]**2 + epsilon)
                degree_factor = node_degrees[i] * node_degrees[j] #Promotes connections to nodes with lower degree
                heuristics[i, j] = distance_factor * degree_factor * temperature
            else:
                heuristics[i, j] = 0.0  # No self-loops

    #Sparsification (attempt to cut off edges that are considered too long, only if temperature is low enough)
    sparsification_threshold = np.mean(heuristics) * sparsification_threshold_factor # Dynamic threshold relative to average heuristic value. Can be further tuned.
    if temperature < 1.0:
      heuristics[heuristics < sparsification_threshold] = 0.0

    # Annealing Schedule - Decay of the temperature (adaptive)
    if np.sum(heuristics > 0) / (n * (n - 1)) < adaptive_cooling_threshold: #If many edges are already zeroed out, cool more slowly
      cooling_rate = 0.999 #Slow down cooling
    temperature *= cooling_rate #Reduce temperature each step (simulates cooling)
    temperature = max(temperature, min_temperature) #Ensure the temperature doesnt drop below the minimum

    return heuristics
```

```python
parameter_ranges = {
    "epsilon": (1e-10, 1e-8),
    "initial_temperature": (1.0, 20.0),
    "min_temperature": (0.001, 0.1),
    "cooling_rate": (0.9, 0.9999),
    "adaptive_cooling_threshold": (0.01, 0.2),
    "sparsification_threshold_factor": (0.01, 0.5)
}
```
[2025-04-21 19:51:06,784][root][INFO] - Iteration 4: Running Code 0
[2025-04-21 19:51:12,601][root][INFO] - Iteration 4: Code Run 0 successful!
[2025-04-21 19:51:12,601][root][INFO] - Iteration 4: Running Code 1
[2025-04-21 19:51:18,430][root][INFO] - Iteration 4: Code Run 1 successful!
[2025-04-21 19:51:18,430][root][INFO] - Iteration 4: Running Code 2
[2025-04-21 19:51:24,377][root][INFO] - Iteration 4: Code Run 2 execution error!
[2025-04-21 19:51:24,377][root][INFO] - Iteration 4: Running Code 3
[2025-04-21 19:51:30,137][root][INFO] - Iteration 4: Code Run 3 successful!
[2025-04-21 19:51:30,138][root][INFO] - Iteration 4: Running Code 4
[2025-04-21 19:51:35,983][root][INFO] - Iteration 4: Code Run 4 execution error!
[2025-04-21 19:51:35,992][root][INFO] - Iteration 4, response_id 0: Objective value: inf
[2025-04-21 19:51:36,005][root][INFO] - Iteration 4, response_id 1: Objective value: inf
[2025-04-21 19:51:36,007][root][INFO] - Iteration 4, response_id 2: Objective value: inf
[2025-04-21 19:51:36,009][root][INFO] - Iteration 4, response_id 3: Objective value: inf
[2025-04-21 19:51:36,488][root][INFO] - Iteration 4, response_id 4: Objective value: inf
[2025-04-21 19:51:36,491][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:51:44,360][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:51:44,362][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:51:44,363][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:51:44,363][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:51:44,366][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:51:44,369][root][INFO] - LLM Response for HS step: ```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, initial_temperature: float = 10.0, num_nearest_neighbors: int = 3,
                  neighbor_boost_factor: float = 1.5, global_boost_factor: float = 2.0, sparsification_threshold_factor: float = 0.1,
                  temperature_decay_base: float = 0.995, temperature_decay_sparsity_factor: float = 0.1,
                  min_temperature: float = 0.01, attraction_power: float = 2.0) -> np.ndarray:
    """
    Enhanced Heuristics for TSP Edge Prioritization:
    Combines gravitational attraction with adaptive temperature, nearest neighbor considerations,
    and sparsification to focus on promising edges.  It also uses global shortest edge.

    Args:
        distance_matrix (np.ndarray):  Distance matrix representing the TSP instance.
        initial_temperature (float): Initial temperature value.
        num_nearest_neighbors (int): Number of nearest neighbors to consider.
        neighbor_boost_factor (float): Boost factor for nearest neighbors.
        global_boost_factor (float): Boost factor for the global shortest edge.
        sparsification_threshold_factor (float): Factor to determine the sparsification threshold.
        temperature_decay_base (float): Base value for temperature decay.
        temperature_decay_sparsity_factor (float): Factor to adjust temperature decay based on sparsity.
        min_temperature (float): Minimum allowed temperature value.
        attraction_power (float): Power to use in the attraction calculation

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution.  Higher values suggest higher priority.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Epsilon to avoid division by zero:
    epsilon = 1e-9

    # Adaptive Temperature (starts high, decreases based on progress):
    temperature = initial_temperature

    # Nearest Neighbor Consideration: For each node, find the nearest neighbors.
    nearest_neighbors = []
    for i in range(n):
        distances = distance_matrix[i, :]
        nearest_neighbor_indices = np.argsort(distances)[1:num_nearest_neighbors+1]  # Exclude self, take top num_nearest_neighbors nearest
        nearest_neighbors.append(nearest_neighbor_indices)

    #Global shortest edge:
    min_dist = np.inf
    min_i = -1
    min_j = -1

    for i in range(n):
      for j in range(i + 1, n):
        if distance_matrix[i,j] < min_dist:
          min_dist = distance_matrix[i,j]
          min_i = i
          min_j = j


    # Heuristic calculation:  Gravitational attraction + Nearest Neighbor boost + Temp
    for i in range(n):
        for j in range(n):
            if i != j:
                attraction = (1.0 / (distance_matrix[i, j]**attraction_power + epsilon))

                # Nearest Neighbor Boost: Give a higher value if j is a nearest neighbor of i, or vice-versa.
                neighbor_boost = 0.0
                if j in nearest_neighbors[i] or i in nearest_neighbors[j]:
                    neighbor_boost = neighbor_boost_factor # Boost factor for nearest neighbors

                #Global shortest edge boost:
                global_boost = 0.0
                if (i == min_i and j == min_j) or (i == min_j and j == min_i):
                    global_boost = global_boost_factor

                heuristics[i, j] = (attraction + neighbor_boost + global_boost) * temperature
            else:
                heuristics[i, j] = 0.0  # No self-loops

    # Sparsification: Zero out edges with very low priority.
    # Calculate a threshold based on the mean heuristic value
    mean_heuristic = np.mean(heuristics)
    sparsification_threshold = sparsification_threshold_factor * mean_heuristic  # Example: keep only top 10% on average

    heuristics[heuristics < sparsification_threshold] = 0.0

    #Adaptive Temperature update based on sparsity
    sparsity = np.sum(heuristics == 0.0) / heuristics.size
    temperature_decay = temperature_decay_base - temperature_decay_sparsity_factor * sparsity # Reduce temp faster when more sparse

    temperature *= temperature_decay
    temperature = max(temperature, min_temperature) # Ensure temperature doesn't go to zero.


    return heuristics
```

```python
parameter_ranges = {
    "initial_temperature": (1.0, 20.0),
    "num_nearest_neighbors": (1.0, 10.0),
    "neighbor_boost_factor": (1.0, 5.0),
    "global_boost_factor": (1.0, 5.0),
    "sparsification_threshold_factor": (0.01, 0.5),
    "temperature_decay_base": (0.9, 0.999),
    "temperature_decay_sparsity_factor": (0.01, 0.2),
    "min_temperature": (0.001, 0.1),
    "attraction_power": (1.0, 3.0)
}
```
[2025-04-21 19:51:44,382][root][INFO] - Iteration 4: Running Code 0
[2025-04-21 19:51:50,135][root][INFO] - Iteration 4: Code Run 0 execution error!
[2025-04-21 19:51:50,135][root][INFO] - Iteration 4: Running Code 1
[2025-04-21 19:51:55,953][root][INFO] - Iteration 4: Code Run 1 execution error!
[2025-04-21 19:51:55,953][root][INFO] - Iteration 4: Running Code 2
[2025-04-21 19:52:01,766][root][INFO] - Iteration 4: Code Run 2 execution error!
[2025-04-21 19:52:01,766][root][INFO] - Iteration 4: Running Code 3
[2025-04-21 19:52:07,581][root][INFO] - Iteration 4: Code Run 3 execution error!
[2025-04-21 19:52:07,582][root][INFO] - Iteration 4: Running Code 4
[2025-04-21 19:52:13,436][root][INFO] - Iteration 4: Code Run 4 execution error!
[2025-04-21 19:52:13,446][root][INFO] - Iteration 4, response_id 0: Objective value: inf
[2025-04-21 19:52:13,448][root][INFO] - Iteration 4, response_id 1: Objective value: inf
[2025-04-21 19:52:13,450][root][INFO] - Iteration 4, response_id 2: Objective value: inf
[2025-04-21 19:52:13,451][root][INFO] - Iteration 4, response_id 3: Objective value: inf
[2025-04-21 19:52:13,974][root][INFO] - Iteration 4, response_id 4: Objective value: inf
[2025-04-21 19:52:13,977][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:52:21,361][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:52:21,364][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:52:21,366][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:52:21,366][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:52:21,369][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:52:21,372][root][INFO] - LLM Response for HS step: ```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, 
                  epsilon: float = 1e-9,
                  initial_temperature: float = 1.0,
                  sparsification_percentile: float = 40.0,
                  high_variance_threshold: float = 0.1,
                  cooling_high_variance: float = 0.99,
                  cooling_low_variance: float = 0.999,
                  min_temperature: float = 0.01) -> np.ndarray:
    """
    Adaptive Heuristics for TSP Edge Prioritization:
    Combines gravitational attraction with node-based desirability scores and
    an adaptive temperature to balance exploration and exploitation. Also includes sparsification.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.
        epsilon (float): Small value to avoid division by zero. Default is 1e-9.
        initial_temperature (float): Initial temperature for exploration. Default is 1.0.
        sparsification_percentile (float): Percentile for sparsification. Default is 40.0.
        high_variance_threshold (float): Threshold for high variance in edge values. Default is 0.1.
        cooling_high_variance (float): Cooling factor when variance is high. Default is 0.99.
        cooling_low_variance (float): Cooling factor when variance is low. Default is 0.999.
        min_temperature (float): Minimum temperature to prevent it from becoming too small. Default is 0.01.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution.
                     Higher values suggest higher priority. Sparsified.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # 1. Node Desirability Scores:
    #    Nodes connected to very long edges are considered "undesirable" and vice-versa.
    node_desirability = np.zeros(n)
    for i in range(n):
        node_desirability[i] = np.sum(1.0 / (distance_matrix[i, :] + epsilon))  # Sum of inverse distances
    node_desirability /= np.max(node_desirability) # Normalize 0-1.  More connected nodes = higher score

    # 2. Adaptive Temperature:
    #    Start with a high temperature for exploration, decrease adaptively based on the variance
    #    of edge costs in the current solution. If variance is high, explore more.
    temperature = initial_temperature
    edge_attraction = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                edge_attraction[i, j] = (1.0 / (distance_matrix[i, j]**2 + epsilon))
            else:
                edge_attraction[i, j] = 0.0

    edge_attraction = edge_attraction / np.max(edge_attraction)  # Normalize between 0 and 1

    # Combine all factors and sparsify
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] = edge_attraction[i, j] * (node_desirability[i] + node_desirability[j]) * temperature
            else:
                heuristics[i, j] = 0.0

    # 3. Sparsification: Zero out low-probability edges to focus search
    threshold = np.percentile(heuristics[heuristics > 0], sparsification_percentile)  # Keep top 60%
    heuristics[heuristics < threshold] = 0.0

    # Adaptive cooling
    edge_values = heuristics[heuristics > 0]

    if len(edge_values) > 0: #Prevent errors if all zero.
        edge_variance = np.var(edge_values)
    else:
        edge_variance = 0.0 #No edges.

    if edge_variance > high_variance_threshold:  #High Variance explore more
         temperature *= cooling_high_variance
    else: #Low variance, exploit more
         temperature *= cooling_low_variance

    temperature = max(temperature, min_temperature)  # Prevent temperature from becoming too small

    return heuristics
```

```python
parameter_ranges = {
    'epsilon': (1e-10, 1e-6),
    'initial_temperature': (0.1, 5.0),
    'sparsification_percentile': (10.0, 90.0),
    'high_variance_threshold': (0.01, 0.5),
    'cooling_high_variance': (0.9, 0.999),
    'cooling_low_variance': (0.99, 0.9999),
    'min_temperature': (0.001, 0.1)
}
```
[2025-04-21 19:52:21,385][root][INFO] - Iteration 4: Running Code 0
[2025-04-21 19:52:27,022][root][INFO] - Iteration 4: Code Run 0 successful!
[2025-04-21 19:52:27,022][root][INFO] - Iteration 4: Running Code 1
[2025-04-21 19:52:33,862][root][INFO] - Iteration 4: Code Run 1 successful!
[2025-04-21 19:52:33,862][root][INFO] - Iteration 4: Running Code 2
[2025-04-21 19:52:41,083][root][INFO] - Iteration 4: Code Run 2 successful!
[2025-04-21 19:52:41,083][root][INFO] - Iteration 4: Running Code 3
[2025-04-21 19:52:48,331][root][INFO] - Iteration 4: Code Run 3 successful!
[2025-04-21 19:52:48,331][root][INFO] - Iteration 4: Running Code 4
[2025-04-21 19:52:55,531][root][INFO] - Iteration 4: Code Run 4 successful!
[2025-04-21 19:52:55,544][root][INFO] - Iteration 4, response_id 0: Objective value: 6.002017007377988
[2025-04-21 19:52:55,555][root][INFO] - Iteration 4, response_id 1: Objective value: 5.94182921835465
[2025-04-21 19:52:55,565][root][INFO] - Iteration 4, response_id 2: Objective value: 5.847744522422038
[2025-04-21 19:52:57,081][root][INFO] - Iteration 4, response_id 3: Objective value: 5.971844393107125
[2025-04-21 19:53:02,411][root][INFO] - Iteration 4, response_id 4: Objective value: 5.962988145505909
[2025-04-21 19:53:02,414][root][INFO] - Iteration 4: Running Code 0
[2025-04-21 19:53:08,228][root][INFO] - Iteration 4: Code Run 0 successful!
[2025-04-21 19:53:14,972][root][INFO] - Iteration 4, hs_try 0: Objective value: 5.937032709511238
[2025-04-21 19:53:14,974][root][INFO] - Iteration 4: Running Code 0
[2025-04-21 19:53:20,776][root][INFO] - Iteration 4: Code Run 0 successful!
[2025-04-21 19:53:27,547][root][INFO] - Iteration 4, hs_try 1: Objective value: 5.9531400127211995
[2025-04-21 19:53:27,549][root][INFO] - Iteration 4: Running Code 0
[2025-04-21 19:53:33,263][root][INFO] - Iteration 4: Code Run 0 successful!
[2025-04-21 19:53:39,934][root][INFO] - Iteration 4, hs_try 2: Objective value: 5.901674461178287
[2025-04-21 19:53:39,937][root][INFO] - Iteration 4: Running Code 0
[2025-04-21 19:53:45,515][root][INFO] - Iteration 4: Code Run 0 successful!
[2025-04-21 19:53:52,030][root][INFO] - Iteration 4, hs_try 3: Objective value: 5.989992966347955
[2025-04-21 19:53:52,032][root][INFO] - Iteration 4: Running Code 0
[2025-04-21 19:53:57,770][root][INFO] - Iteration 4: Code Run 0 successful!
[2025-04-21 19:54:04,473][root][INFO] - Iteration 4, hs_try 4: Objective value: 5.957873762959894
[2025-04-21 19:54:04,475][root][INFO] - Iteration 4: Elitist: 5.847744522422038
[2025-04-21 19:54:04,475][root][INFO] - Iteration 4 finished...
[2025-04-21 19:54:04,475][root][INFO] - Best obj: 5.847744522422038, Best Code Path: problem_iter4_code2.py
[2025-04-21 19:54:04,476][root][INFO] - LLM usage: prompt_tokens = 39286, completion_tokens = 20800
[2025-04-21 19:54:04,476][root][INFO] - Function Evals: 56
[2025-04-21 19:54:04,478][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:54:07,463][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:54:07,466][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:54:07,468][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:07,468][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:07,471][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:07,495][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:54:09,568][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:54:09,571][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:54:09,573][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:09,573][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:09,575][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:09,612][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:54:09,613][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:54:12,084][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:54:12,087][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:54:12,088][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:12,089][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:12,091][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:54:12,092][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:12,658][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:54:12,661][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:54:12,663][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:12,663][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:12,665][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:54:12,667][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:15,092][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:54:15,095][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:54:15,096][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:15,097][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:15,099][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:54:15,100][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:16,369][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:54:16,371][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:54:16,373][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:16,373][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:16,374][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:54:16,374][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:18,533][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:54:18,537][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:54:18,538][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:18,538][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:18,541][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:54:18,543][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:20,509][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:54:20,512][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:54:20,513][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:20,514][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:20,516][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:54:20,518][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:21,592][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:54:21,595][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:54:21,597][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:21,597][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:21,599][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:54:21,600][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:23,375][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:54:23,376][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:54:23,377][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:23,377][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:23,378][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:54:23,379][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:26,141][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:54:26,145][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:54:26,146][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:26,147][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:26,150][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:26,754][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:54:26,757][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:54:26,758][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:26,759][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:26,761][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:54:26,786][root][INFO] - Iteration 5: Running Code 0
[2025-04-21 19:54:32,569][root][INFO] - Iteration 5: Code Run 0 successful!
[2025-04-21 19:54:32,569][root][INFO] - Iteration 5: Running Code 1
[2025-04-21 19:54:39,459][root][INFO] - Iteration 5: Code Run 1 successful!
[2025-04-21 19:54:39,459][root][INFO] - Iteration 5: Running Code 2
[2025-04-21 19:54:46,706][root][INFO] - Iteration 5: Code Run 2 successful!
[2025-04-21 19:54:46,706][root][INFO] - Iteration 5: Running Code 3
[2025-04-21 19:54:53,803][root][INFO] - Iteration 5: Code Run 3 successful!
[2025-04-21 19:54:53,804][root][INFO] - Iteration 5: Running Code 4
[2025-04-21 19:55:00,870][root][INFO] - Iteration 5: Code Run 4 successful!
[2025-04-21 19:55:00,871][root][INFO] - Iteration 5: Running Code 5
[2025-04-21 19:55:08,045][root][INFO] - Iteration 5: Code Run 5 successful!
[2025-04-21 19:55:08,046][root][INFO] - Iteration 5: Running Code 6
[2025-04-21 19:55:15,106][root][INFO] - Iteration 5: Code Run 6 successful!
[2025-04-21 19:55:15,107][root][INFO] - Iteration 5: Running Code 7
[2025-04-21 19:55:22,252][root][INFO] - Iteration 5: Code Run 7 successful!
[2025-04-21 19:55:22,252][root][INFO] - Iteration 5: Running Code 8
[2025-04-21 19:55:29,361][root][INFO] - Iteration 5: Code Run 8 successful!
[2025-04-21 19:55:29,361][root][INFO] - Iteration 5: Running Code 9
[2025-04-21 19:55:36,553][root][INFO] - Iteration 5: Code Run 9 successful!
[2025-04-21 19:55:36,563][root][INFO] - Iteration 5, response_id 0: Objective value: 5.926660173211903
[2025-04-21 19:55:36,572][root][INFO] - Iteration 5, response_id 1: Objective value: 6.551165768236561
[2025-04-21 19:55:36,584][root][INFO] - Iteration 5, response_id 2: Objective value: 5.9485877393446716
[2025-04-21 19:55:36,594][root][INFO] - Iteration 5, response_id 3: Objective value: 5.960232380419619
[2025-04-21 19:55:36,605][root][INFO] - Iteration 5, response_id 4: Objective value: 6.317393863045219
[2025-04-21 19:55:36,616][root][INFO] - Iteration 5, response_id 5: Objective value: 8.58297882809781
[2025-04-21 19:55:36,626][root][INFO] - Iteration 5, response_id 6: Objective value: 6.407564071257897
[2025-04-21 19:55:36,636][root][INFO] - Iteration 5, response_id 7: Objective value: 6.48340957274908
[2025-04-21 19:55:38,258][root][INFO] - Iteration 5, response_id 8: Objective value: 9.555254832450684
[2025-04-21 19:55:43,402][root][INFO] - Iteration 5, response_id 9: Objective value: 25.415197544477138
[2025-04-21 19:55:43,403][root][INFO] - Iteration 5 finished...
[2025-04-21 19:55:43,403][root][INFO] - Best obj: 5.847744522422038, Best Code Path: problem_iter4_code2.py
[2025-04-21 19:55:43,404][root][INFO] - LLM usage: prompt_tokens = 69915, completion_tokens = 24901
[2025-04-21 19:55:43,404][root][INFO] - Function Evals: 66
[2025-04-21 19:55:43,407][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:55:43,408][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:55:50,421][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:55:50,424][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:55:50,425][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:55:50,425][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:55:50,427][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:55:50,429][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:55:50,716][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:55:50,717][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:55:50,718][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:55:50,718][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:55:50,719][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:55:50,719][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:55:57,975][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:55:57,979][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:55:57,980][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:55:57,980][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:55:57,983][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:55:57,984][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:55:58,770][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:55:58,788][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:55:58,789][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:55:58,789][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:55:58,790][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:56:04,743][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:56:04,747][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:56:04,748][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:56:04,749][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:56:04,752][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:56:04,768][root][INFO] - Iteration 6: Running Code 0
[2025-04-21 19:56:10,557][root][INFO] - Iteration 6: Code Run 0 successful!
[2025-04-21 19:56:10,557][root][INFO] - Iteration 6: Running Code 1
[2025-04-21 19:56:17,569][root][INFO] - Iteration 6: Code Run 1 successful!
[2025-04-21 19:56:17,569][root][INFO] - Iteration 6: Running Code 2
[2025-04-21 19:56:24,756][root][INFO] - Iteration 6: Code Run 2 successful!
[2025-04-21 19:56:24,756][root][INFO] - Iteration 6: Running Code 3
[2025-04-21 19:56:31,854][root][INFO] - Iteration 6: Code Run 3 successful!
[2025-04-21 19:56:31,854][root][INFO] - Iteration 6: Running Code 4
[2025-04-21 19:56:38,564][root][INFO] - Iteration 6: Code Run 4 successful!
[2025-04-21 19:56:38,580][root][INFO] - Iteration 6, response_id 0: Objective value: 6.5424942456843524
[2025-04-21 19:56:38,588][root][INFO] - Iteration 6, response_id 1: Objective value: 15.119157616305841
[2025-04-21 19:56:38,598][root][INFO] - Iteration 6, response_id 2: Objective value: 5.931231154297858
[2025-04-21 19:56:45,991][root][INFO] - Iteration 6, response_id 3: Objective value: 11.386949597880559
[2025-04-21 19:56:46,005][root][INFO] - Iteration 6, response_id 4: Objective value: inf
[2025-04-21 19:56:46,006][root][INFO] - Iteration 6 finished...
[2025-04-21 19:56:46,007][root][INFO] - Best obj: 5.847744522422038, Best Code Path: problem_iter4_code2.py
[2025-04-21 19:56:46,007][root][INFO] - LLM usage: prompt_tokens = 71291, completion_tokens = 26009
[2025-04-21 19:56:46,007][root][INFO] - Function Evals: 71
[2025-04-21 19:56:46,010][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:56:48,789][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:56:48,793][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:56:48,794][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:56:48,795][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:56:48,798][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:56:48,799][root][INFO] - LLM Response for HS step: ```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, percentile_threshold: float = 40.0, epsilon: float = 1e-9) -> np.ndarray:
    """Adaptive heuristics combining distance, desirability, sparsification."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Node Desirability: Inverse sum of distances
    node_desirability = np.sum(1.0 / (distance_matrix + epsilon), axis=1)
    node_desirability /= np.max(node_desirability)

    # Edge Attraction: Inverse squared distance
    edge_attraction = 1.0 / (distance_matrix**2 + epsilon)
    np.fill_diagonal(edge_attraction, 0)
    edge_attraction /= np.max(edge_attraction)

    # Combine desirability and attraction
    heuristics = edge_attraction * (node_desirability[:, None] + node_desirability[None, :])

    # Sparsification: Keep top edges
    threshold = np.percentile(heuristics[heuristics > 0], percentile_threshold)
    heuristics[heuristics < threshold] = 0

    # Normalize
    heuristics = (heuristics - np.min(heuristics)) / (np.max(heuristics) - np.min(heuristics) + epsilon)

    return heuristics
```

```python
parameter_ranges = {
    'percentile_threshold': (1.0, 99.0),
    'epsilon': (1e-10, 1e-6)
}
```
[2025-04-21 19:56:48,807][root][INFO] - Iteration 7: Running Code 0
[2025-04-21 19:56:54,541][root][INFO] - Iteration 7: Code Run 0 successful!
[2025-04-21 19:56:54,541][root][INFO] - Iteration 7: Running Code 1
[2025-04-21 19:57:01,412][root][INFO] - Iteration 7: Code Run 1 successful!
[2025-04-21 19:57:01,412][root][INFO] - Iteration 7: Running Code 2
[2025-04-21 19:57:08,609][root][INFO] - Iteration 7: Code Run 2 successful!
[2025-04-21 19:57:08,609][root][INFO] - Iteration 7: Running Code 3
[2025-04-21 19:57:15,628][root][INFO] - Iteration 7: Code Run 3 successful!
[2025-04-21 19:57:15,629][root][INFO] - Iteration 7: Running Code 4
[2025-04-21 19:57:22,805][root][INFO] - Iteration 7: Code Run 4 successful!
[2025-04-21 19:57:22,815][root][INFO] - Iteration 7, response_id 0: Objective value: 5.945543706403738
[2025-04-21 19:57:22,827][root][INFO] - Iteration 7, response_id 1: Objective value: 6.403371105882611
[2025-04-21 19:57:22,841][root][INFO] - Iteration 7, response_id 2: Objective value: 13.689947567414933
[2025-04-21 19:57:24,041][root][INFO] - Iteration 7, response_id 3: Objective value: 6.01719778432205
[2025-04-21 19:57:29,750][root][INFO] - Iteration 7, response_id 4: Objective value: 6.019790641922766
[2025-04-21 19:57:29,753][root][INFO] - Iteration 7: Running Code 0
[2025-04-21 19:57:35,471][root][INFO] - Iteration 7: Code Run 0 successful!
[2025-04-21 19:57:42,131][root][INFO] - Iteration 7, hs_try 0: Objective value: 5.903723553053901
[2025-04-21 19:57:42,133][root][INFO] - Iteration 7: Running Code 0
[2025-04-21 19:57:47,971][root][INFO] - Iteration 7: Code Run 0 successful!
[2025-04-21 19:57:54,649][root][INFO] - Iteration 7, hs_try 1: Objective value: 5.927223361181144
[2025-04-21 19:57:54,651][root][INFO] - Iteration 7: Running Code 0
[2025-04-21 19:58:00,518][root][INFO] - Iteration 7: Code Run 0 successful!
[2025-04-21 19:58:07,233][root][INFO] - Iteration 7, hs_try 2: Objective value: 13.360839532701027
[2025-04-21 19:58:07,236][root][INFO] - Iteration 7: Running Code 0
[2025-04-21 19:58:12,937][root][INFO] - Iteration 7: Code Run 0 successful!
[2025-04-21 19:58:19,523][root][INFO] - Iteration 7, hs_try 3: Objective value: 5.924115121543214
[2025-04-21 19:58:19,525][root][INFO] - Iteration 7: Running Code 0
[2025-04-21 19:58:25,315][root][INFO] - Iteration 7: Code Run 0 successful!
[2025-04-21 19:58:32,068][root][INFO] - Iteration 7, hs_try 4: Objective value: 5.982321471935218
[2025-04-21 19:58:32,070][root][INFO] - Iteration 7 finished...
[2025-04-21 19:58:32,070][root][INFO] - Best obj: 5.847744522422038, Best Code Path: problem_iter4_code2.py
[2025-04-21 19:58:32,070][root][INFO] - LLM usage: prompt_tokens = 71731, completion_tokens = 26364
[2025-04-21 19:58:32,070][root][INFO] - Function Evals: 81
[2025-04-21 19:58:32,072][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:58:35,876][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:58:35,879][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:58:35,880][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:35,881][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:35,883][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:35,905][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:58:38,186][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:58:38,190][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:58:38,191][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:38,191][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:38,193][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:38,227][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:58:38,228][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:58:41,538][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:58:41,541][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:58:41,542][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:41,543][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:41,545][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:58:41,546][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:42,797][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:58:42,800][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:58:42,802][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:42,802][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:42,804][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:58:42,804][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:44,781][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:58:44,784][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:58:44,785][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:44,785][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:44,787][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:58:44,789][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:45,498][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:58:45,501][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:58:45,502][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:45,503][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:45,506][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:58:45,507][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:48,776][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:58:48,779][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:58:48,781][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:48,781][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:48,782][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:58:48,783][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:49,139][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:58:49,140][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:58:49,141][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:49,141][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:49,142][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:58:49,142][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:52,902][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:58:52,904][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:58:52,906][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:52,906][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:52,909][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:58:52,910][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:54,201][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:58:54,204][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:58:54,206][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:54,206][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:54,207][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 19:58:54,208][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:57,684][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:58:57,687][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:58:57,688][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:57,689][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:57,692][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:57,999][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 19:58:58,001][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 19:58:58,002][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:58,002][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:58,003][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 19:58:58,024][root][INFO] - Iteration 8: Running Code 0
[2025-04-21 19:59:03,902][root][INFO] - Iteration 8: Code Run 0 successful!
[2025-04-21 19:59:03,902][root][INFO] - Iteration 8: Running Code 1
[2025-04-21 19:59:10,846][root][INFO] - Iteration 8: Code Run 1 successful!
[2025-04-21 19:59:10,846][root][INFO] - Iteration 8: Running Code 2
[2025-04-21 19:59:18,190][root][INFO] - Iteration 8: Code Run 2 successful!
[2025-04-21 19:59:18,190][root][INFO] - Iteration 8: Running Code 3
[2025-04-21 19:59:25,281][root][INFO] - Iteration 8: Code Run 3 successful!
[2025-04-21 19:59:25,281][root][INFO] - Iteration 8: Running Code 4
[2025-04-21 19:59:32,471][root][INFO] - Iteration 8: Code Run 4 successful!
[2025-04-21 19:59:32,472][root][INFO] - Iteration 8: Running Code 5
[2025-04-21 19:59:39,748][root][INFO] - Iteration 8: Code Run 5 successful!
[2025-04-21 19:59:39,748][root][INFO] - Iteration 8: Running Code 6
[2025-04-21 19:59:46,806][root][INFO] - Iteration 8: Code Run 6 successful!
[2025-04-21 19:59:46,806][root][INFO] - Iteration 8: Running Code 7
[2025-04-21 19:59:53,831][root][INFO] - Iteration 8: Code Run 7 successful!
[2025-04-21 19:59:53,831][root][INFO] - Iteration 8: Running Code 8
[2025-04-21 20:00:00,838][root][INFO] - Iteration 8: Code Run 8 successful!
[2025-04-21 20:00:00,838][root][INFO] - Iteration 8: Running Code 9
[2025-04-21 20:00:08,035][root][INFO] - Iteration 8: Code Run 9 successful!
[2025-04-21 20:00:08,045][root][INFO] - Iteration 8, response_id 0: Objective value: 6.542797278441012
[2025-04-21 20:00:08,056][root][INFO] - Iteration 8, response_id 1: Objective value: 6.3320398414730406
[2025-04-21 20:00:08,067][root][INFO] - Iteration 8, response_id 2: Objective value: 5.9571468719483445
[2025-04-21 20:00:08,078][root][INFO] - Iteration 8, response_id 3: Objective value: 6.418263407979699
[2025-04-21 20:00:08,088][root][INFO] - Iteration 8, response_id 4: Objective value: 5.976840186968702
[2025-04-21 20:00:08,099][root][INFO] - Iteration 8, response_id 5: Objective value: 5.977806248711687
[2025-04-21 20:00:08,108][root][INFO] - Iteration 8, response_id 6: Objective value: 14.687972001754256
[2025-04-21 20:00:08,118][root][INFO] - Iteration 8, response_id 7: Objective value: 5.935040348637973
[2025-04-21 20:00:10,017][root][INFO] - Iteration 8, response_id 8: Objective value: 5.9982076489603635
[2025-04-21 20:00:15,372][root][INFO] - Iteration 8, response_id 9: Objective value: 6.36647257749142
[2025-04-21 20:00:15,373][root][INFO] - Iteration 8 finished...
[2025-04-21 20:00:15,373][root][INFO] - Best obj: 5.847744522422038, Best Code Path: problem_iter4_code2.py
[2025-04-21 20:00:15,374][root][INFO] - LLM usage: prompt_tokens = 99824, completion_tokens = 31300
[2025-04-21 20:00:15,374][root][INFO] - Function Evals: 91
[2025-04-21 20:00:15,377][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 20:00:15,377][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 20:00:20,820][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 20:00:20,841][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 20:00:20,841][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 20:00:20,841][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 20:00:20,842][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 20:00:20,843][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 20:00:22,683][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 20:00:22,686][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 20:00:22,688][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 20:00:22,688][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 20:00:22,690][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 20:00:22,692][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 20:00:28,427][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 20:00:28,430][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 20:00:28,432][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 20:00:28,432][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 20:00:28,434][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 20:00:28,437][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 20:00:29,683][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 20:00:29,686][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 20:00:29,687][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 20:00:29,688][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 20:00:29,690][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 20:00:34,454][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 20:00:34,458][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 20:00:34,460][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 20:00:34,460][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 20:00:34,461][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 20:00:34,472][root][INFO] - Iteration 9: Running Code 0
[2025-04-21 20:00:40,225][root][INFO] - Iteration 9: Code Run 0 successful!
[2025-04-21 20:00:40,225][root][INFO] - Iteration 9: Running Code 1
[2025-04-21 20:00:47,359][root][INFO] - Iteration 9: Code Run 1 successful!
[2025-04-21 20:00:47,360][root][INFO] - Iteration 9: Running Code 2
[2025-04-21 20:00:54,396][root][INFO] - Iteration 9: Code Run 2 successful!
[2025-04-21 20:00:54,396][root][INFO] - Iteration 9: Running Code 3
[2025-04-21 20:01:01,702][root][INFO] - Iteration 9: Code Run 3 successful!
[2025-04-21 20:01:01,702][root][INFO] - Iteration 9: Running Code 4
[2025-04-21 20:01:09,173][root][INFO] - Iteration 9: Code Run 4 successful!
[2025-04-21 20:01:09,183][root][INFO] - Iteration 9, response_id 0: Objective value: 20.491551722152288
[2025-04-21 20:01:09,194][root][INFO] - Iteration 9, response_id 1: Objective value: 12.657645253789187
[2025-04-21 20:01:09,205][root][INFO] - Iteration 9, response_id 2: Objective value: 5.982948302234655
[2025-04-21 20:01:10,285][root][INFO] - Iteration 9, response_id 3: Objective value: 20.1320249562728
[2025-04-21 20:01:16,027][root][INFO] - Iteration 9, response_id 4: Objective value: 5.938371814238954
[2025-04-21 20:01:16,028][root][INFO] - Iteration 9 finished...
[2025-04-21 20:01:16,028][root][INFO] - Best obj: 5.847744522422038, Best Code Path: problem_iter4_code2.py
[2025-04-21 20:01:16,029][root][INFO] - LLM usage: prompt_tokens = 101169, completion_tokens = 32094
[2025-04-21 20:01:16,029][root][INFO] - Function Evals: 96
[2025-04-21 20:01:16,032][LiteLLM][INFO] - 
LiteLLM completion() model= gemini-2.0-flash; provider = gemini
[2025-04-21 20:01:21,850][httpx][INFO] - HTTP Request: POST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDWz_8AG8ir2JnMbK_fzFl4H66epIQkqFs "HTTP/1.1 200 OK"
[2025-04-21 20:01:21,853][LiteLLM][INFO] - Wrapper: Completed Call, calling success_handler
[2025-04-21 20:01:21,855][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 20:01:21,855][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 20:01:21,858][LiteLLM][INFO] - selected model name for cost calculation: gemini/gemini-2.0-flash
[2025-04-21 20:01:21,861][root][INFO] - LLM Response for HS step: ```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, epsilon: float = 1e-9, initial_temperature: float = 1.0, sparsification_percentile: float = 40.0, cooling_factor_high_variance: float = 0.99, cooling_factor_low_variance: float = 0.999, min_temperature: float = 0.01, edge_variance_threshold: float = 0.1) -> np.ndarray:
    """Adaptive heuristic: Combines edge attraction, node desirability, and adaptive temperature scaling."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    current_temperature = initial_temperature

    # Node Desirability
    node_desirability = np.zeros(n)
    for i in range(n):
        node_desirability[i] = np.sum(1.0 / (distance_matrix[i, :] + epsilon))
    node_desirability /= np.max(node_desirability)

    # Edge Attraction (inverse square distance)
    edge_attraction = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                edge_attraction[i, j] = (1.0 / (distance_matrix[i, j]**2 + epsilon))
            else:
                edge_attraction[i, j] = 0.0
    edge_attraction = edge_attraction / np.max(edge_attraction)

    # Heuristic Combination
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] = edge_attraction[i, j] * (node_desirability[i] + node_desirability[j]) * current_temperature
            else:
                heuristics[i, j] = 0.0

    # Sparsification
    threshold = np.percentile(heuristics[heuristics > 0], sparsification_percentile)
    heuristics[heuristics > 0] = np.where(heuristics[heuristics > 0] >= threshold, heuristics[heuristics > 0], 0.0)

    # Adaptive Cooling
    edge_values = heuristics[heuristics > 0]
    if len(edge_values) > 0:
        edge_variance = np.var(edge_values)
    else:
        edge_variance = 0.0

    if edge_variance > edge_variance_threshold:
        current_temperature *= cooling_factor_high_variance
    else:
        current_temperature *= cooling_factor_low_variance

    current_temperature = max(current_temperature, min_temperature)

    return heuristics
```

```python
parameter_ranges = {
    'epsilon': (1e-10, 1e-6),
    'initial_temperature': (0.1, 10.0),
    'sparsification_percentile': (10.0, 90.0),
    'cooling_factor_high_variance': (0.9, 0.999),
    'cooling_factor_low_variance': (0.99, 0.9999),
    'min_temperature': (0.001, 0.1),
    'edge_variance_threshold': (0.01, 1.0)
}
```
[2025-04-21 20:01:21,870][root][INFO] - Iteration 10: Running Code 0
[2025-04-21 20:01:27,580][root][INFO] - Iteration 10: Code Run 0 successful!
[2025-04-21 20:01:27,580][root][INFO] - Iteration 10: Running Code 1
[2025-04-21 20:01:34,468][root][INFO] - Iteration 10: Code Run 1 successful!
[2025-04-21 20:01:34,469][root][INFO] - Iteration 10: Running Code 2
[2025-04-21 20:01:41,601][root][INFO] - Iteration 10: Code Run 2 successful!
[2025-04-21 20:01:41,601][root][INFO] - Iteration 10: Running Code 3
[2025-04-21 20:01:48,552][root][INFO] - Iteration 10: Code Run 3 successful!
[2025-04-21 20:01:48,552][root][INFO] - Iteration 10: Running Code 4
[2025-04-21 20:01:55,666][root][INFO] - Iteration 10: Code Run 4 successful!
[2025-04-21 20:01:55,676][root][INFO] - Iteration 10, response_id 0: Objective value: 6.357780507170281
[2025-04-21 20:01:55,689][root][INFO] - Iteration 10, response_id 1: Objective value: 5.895251435041327
[2025-04-21 20:01:55,700][root][INFO] - Iteration 10, response_id 2: Objective value: 5.9566787508706405
[2025-04-21 20:01:57,234][root][INFO] - Iteration 10, response_id 3: Objective value: 6.002718051709239
[2025-04-21 20:02:02,598][root][INFO] - Iteration 10, response_id 4: Objective value: 6.6719275661438555
[2025-04-21 20:02:02,600][root][INFO] - Iteration 10: Running Code 0
[2025-04-21 20:02:08,295][root][INFO] - Iteration 10: Code Run 0 successful!
[2025-04-21 20:02:14,999][root][INFO] - Iteration 10, hs_try 0: Objective value: 5.925964249075063
[2025-04-21 20:02:15,001][root][INFO] - Iteration 10: Running Code 0
[2025-04-21 20:02:20,815][root][INFO] - Iteration 10: Code Run 0 successful!
[2025-04-21 20:02:27,606][root][INFO] - Iteration 10, hs_try 1: Objective value: 5.975512131119825
[2025-04-21 20:02:27,608][root][INFO] - Iteration 10: Running Code 0
[2025-04-21 20:02:33,359][root][INFO] - Iteration 10: Code Run 0 successful!
[2025-04-21 20:02:40,008][root][INFO] - Iteration 10, hs_try 2: Objective value: 5.958309661695891
[2025-04-21 20:02:40,010][root][INFO] - Iteration 10: Running Code 0
[2025-04-21 20:02:45,712][root][INFO] - Iteration 10: Code Run 0 successful!
[2025-04-21 20:02:52,198][root][INFO] - Iteration 10, hs_try 3: Objective value: 5.997167536679848
[2025-04-21 20:02:52,200][root][INFO] - Iteration 10: Running Code 0
[2025-04-21 20:02:57,907][root][INFO] - Iteration 10: Code Run 0 successful!
[2025-04-21 20:03:04,592][root][INFO] - Iteration 10, hs_try 4: Objective value: 5.922912557161893
[2025-04-21 20:03:04,593][root][INFO] - Iteration 10 finished...
[2025-04-21 20:03:04,594][root][INFO] - Best obj: 5.847744522422038, Best Code Path: problem_iter4_code2.py
[2025-04-21 20:03:04,594][root][INFO] - LLM usage: prompt_tokens = 101824, completion_tokens = 32783
[2025-04-21 20:03:04,594][root][INFO] - Function Evals: 106
[2025-04-21 20:03:04,594][root][INFO] - Best Code Overall: import numpy as np
import random
import math
import scipy
import torch
def heuristics_v2(distance_matrix: np.ndarray, 
                  epsilon: float = 2.5408635945870555e-07,
                  initial_temperature: float = 3.301010802589493,
                  sparsification_percentile: float = 49.22462731911484,
                  high_variance_threshold: float = 0.46775928005587575,
                  cooling_high_variance: float = 0.9952012128425347,
                  cooling_low_variance: float = 0.9959702645502414,
                  min_temperature: float = 0.056679815478619666) -> np.ndarray:
    """
    Adaptive Heuristics for TSP Edge Prioritization:
    Combines gravitational attraction with node-based desirability scores and
    an adaptive temperature to balance exploration and exploitation. Also includes sparsification.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.
        epsilon (float): Small value to avoid division by zero. Default is 1e-9.
        initial_temperature (float): Initial temperature for exploration. Default is 1.0.
        sparsification_percentile (float): Percentile for sparsification. Default is 40.0.
        high_variance_threshold (float): Threshold for high variance in edge values. Default is 0.1.
        cooling_high_variance (float): Cooling factor when variance is high. Default is 0.99.
        cooling_low_variance (float): Cooling factor when variance is low. Default is 0.999.
        min_temperature (float): Minimum temperature to prevent it from becoming too small. Default is 0.01.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution.
                     Higher values suggest higher priority. Sparsified.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # 1. Node Desirability Scores:
    #    Nodes connected to very long edges are considered "undesirable" and vice-versa.
    node_desirability = np.zeros(n)
    for i in range(n):
        node_desirability[i] = np.sum(1.0 / (distance_matrix[i, :] + epsilon))  # Sum of inverse distances
    node_desirability /= np.max(node_desirability) # Normalize 0-1.  More connected nodes = higher score

    # 2. Adaptive Temperature:
    #    Start with a high temperature for exploration, decrease adaptively based on the variance
    #    of edge costs in the current solution. If variance is high, explore more.
    temperature = initial_temperature
    edge_attraction = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                edge_attraction[i, j] = (1.0 / (distance_matrix[i, j]**2 + epsilon))
            else:
                edge_attraction[i, j] = 0.0

    edge_attraction = edge_attraction / np.max(edge_attraction)  # Normalize between 0 and 1

    # Combine all factors and sparsify
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] = edge_attraction[i, j] * (node_desirability[i] + node_desirability[j]) * temperature
            else:
                heuristics[i, j] = 0.0

    # 3. Sparsification: Zero out low-probability edges to focus search
    threshold = np.percentile(heuristics[heuristics > 0], sparsification_percentile)  # Keep top 60%
    heuristics[heuristics < threshold] = 0.0

    # Adaptive cooling
    edge_values = heuristics[heuristics > 0]

    if len(edge_values) > 0: #Prevent errors if all zero.
        edge_variance = np.var(edge_values)
    else:
        edge_variance = 0.0 #No edges.

    if edge_variance > high_variance_threshold:  #High Variance explore more
         temperature *= cooling_high_variance
    else: #Low variance, exploit more
         temperature *= cooling_low_variance

    temperature = max(temperature, min_temperature)  # Prevent temperature from becoming too small

    return heuristics
[2025-04-21 20:03:04,595][root][INFO] - Best Code Path Overall: problem_iter4_code2.py
[2025-04-21 20:03:04,596][root][INFO] - Running validation script...: C:\Users\Nam\Documents\GitHub\HSEvo/problems/tsp_aco/eval.py
[2025-04-21 20:07:31,848][root][INFO] - Validation script finished. Results are saved in best_code_overall_val_stdout.txt.
[2025-04-21 20:07:31,860][root][INFO] - [*] Running ...
[2025-04-21 20:07:31,860][root][INFO] - [*] Average for 20: 3.8687360640750716
[2025-04-21 20:07:31,861][root][INFO] - [*] Average for 50: 5.945912889753311
[2025-04-21 20:07:31,861][root][INFO] - [*] Average for 100: 8.74107245198069
