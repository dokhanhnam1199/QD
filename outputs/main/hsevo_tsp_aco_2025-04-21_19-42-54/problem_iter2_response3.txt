```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, node importance, and adaptive density weighting.
    Balances exploitation and exploration, adapting to local node density.
    """
    n = distance_matrix.shape[0]
    distance_matrix = np.where(distance_matrix == 0, np.inf, distance_matrix)
    np.fill_diagonal(distance_matrix, np.inf)

    inverse_distance = 1 / distance_matrix
    node_importance = np.sum(distance_matrix, axis=1)
    node_importance_matrix = np.tile(node_importance, (n, 1))
    node_importance_heuristic = node_importance_matrix + node_importance_matrix.T
    
    node_densities = np.zeros(n)
    for i in range(n):
        node_densities[i] = np.mean(inverse_distance[i, :])
    density_scaling = 1.0 / (1.0 + node_densities)
    density_scaling = np.tile(density_scaling, (n,1))
    density_scaling = np.minimum(density_scaling, density_scaling.T)

    heuristic_matrix = inverse_distance * (node_importance_heuristic/np.max(node_importance_heuristic)) * density_scaling
    heuristic_matrix = (heuristic_matrix - np.min(heuristic_matrix)) / (np.max(heuristic_matrix) - np.min(heuristic_matrix) + 1e-9)
    return heuristic_matrix
```
