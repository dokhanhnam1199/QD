```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    A heuristic function for the Traveling Salesman Problem (TSP).
    This version combines inverse distance with a penalty for long edges
    and a bonus for edges that connect to poorly connected nodes (nodes with long average distance to others).

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix
                                       between cities. distance_matrix[i][j] is the distance
                                       between city i and city j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    representing the prior indicators of how promising it is
                    to include each edge in a solution. Higher values indicate
                    more promising edges.
    """
    n = distance_matrix.shape[0]

    # 1. Inverse Distance: Promotes shorter edges.
    heuristic = 1 / (distance_matrix + 1e-9)  # Add a small value to avoid division by zero

    # 2. Node connectivity penalty: Nodes that are poorly connected should be preferred.
    # Nodes with higher sum distances will be preferred, as they have high travel cost on average.
    avg_distances = np.sum(distance_matrix, axis=1) / (n - 1)

    for i in range(n):
        for j in range(n):
          heuristic[i,j] = heuristic[i,j] * (avg_distances[i] + avg_distances[j])
          if distance_matrix[i,j] > np.mean(distance_matrix):
            heuristic[i,j] = heuristic[i,j] * 0.75
          elif distance_matrix[i,j] > np.quantile(distance_matrix, 0.75):
            heuristic[i,j] = heuristic[i,j] * 0.85
          elif distance_matrix[i,j] < np.quantile(distance_matrix, 0.25):
            heuristic[i,j] = heuristic[i,j] * 1.15

    return heuristic
```
