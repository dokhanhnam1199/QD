```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Improved heuristics for the Traveling Salesman Problem based on distance and neighborhood.
    Prioritizes shorter distances and edges connecting to nodes with longer average distances to other nodes.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances between nodes.
                                       distance_matrix[i][j] is the distance between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element
                      indicates the desirability of including the corresponding edge in the TSP tour.
    """
    n = distance_matrix.shape[0]

    # 1. Inverse distance heuristic: shorter distances are more desirable
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small value to avoid division by zero

    # 2. Node Importance Heuristic: Give higher weight to edges connecting nodes with overall larger distances
    #    to others. This encourages exploring less-connected parts of the graph early on,
    #    potentially preventing premature convergence to local optima.
    node_importance = np.sum(distance_matrix, axis=1)  # Sum of distances for each node
    node_importance_matrix = np.tile(node_importance, (n, 1)) # Replicate node importance for matrix operations
    node_importance_heuristic = node_importance_matrix + node_importance_matrix.T
    #3. combine heuristics
    heuristic_matrix = inverse_distance * (node_importance_heuristic/np.max(node_importance_heuristic))

    # Set diagonal elements to zero to avoid self-loops.  The inverse_distance also handles this, but added for extra safety.
    np.fill_diagonal(heuristic_matrix, 0)

    return heuristic_matrix
```
