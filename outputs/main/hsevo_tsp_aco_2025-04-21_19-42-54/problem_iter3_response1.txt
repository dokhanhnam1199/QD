```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Enhanced Heuristics for TSP Edge Prioritization:
    Combines gravitational attraction, shortest path considerations,
    and adaptive temperature to prioritize promising edges while maintaining diversity.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution.
                      Higher values suggest higher priority.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    epsilon = 1e-9  # Avoid division by zero

    # Shortest Path Influence:
    #  - Estimate shortest path distances between all node pairs using Floyd-Warshall or Dijkstra.
    #  - Edges on or close to these shortest paths are likely to be useful.
    shortest_path_matrix = np.copy(distance_matrix)
    for k in range(n):
        for i in range(n):
            for j in range(n):
                shortest_path_matrix[i, j] = min(shortest_path_matrix[i, j], shortest_path_matrix[i, k] + shortest_path_matrix[k, j])

    # Adaptive Temperature:
    # - Start with a high temperature for exploration and reduce it adaptively based on the
    #   average edge distance in the current best solution (if available, otherwise use initial average distance).
    initial_temperature = 1.0
    current_temperature = initial_temperature

    #Calculate mean distance
    mean_distance = np.mean(distance_matrix[distance_matrix != 0])

    # Gravitational attraction and shortest path influence:
    for i in range(n):
        for j in range(n):
            if i != j:
                # Prioritize edges on or near shortest paths:
                shortest_path_factor = np.exp(-shortest_path_matrix[i, j] / mean_distance) # Higher if closer to shortest path

                #Gravitational attraction with temperature modulation:
                gravitational_attraction = (1.0 / (distance_matrix[i, j]**2 + epsilon)) * current_temperature

                #Combine the factors:
                heuristics[i, j] = gravitational_attraction + shortest_path_factor

            else:
                heuristics[i, j] = 0.0  # No self-loops

    # Sparsification: Remove edges with very low heuristic values to focus on the most promising ones.
    threshold = np.percentile(heuristics[heuristics > 0], 20)  # Keep top 80%
    heuristics[heuristics < threshold] = 0

    # Adaptive Cooling: Adjust temperature dynamically (example - based on some iteration count or a performance metric)
    current_temperature *= 0.995

    return heuristics
```
