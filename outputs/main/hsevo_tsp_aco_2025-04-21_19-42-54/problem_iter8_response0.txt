```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """Adaptive heuristic with shortest path, centrality, and dynamic sparsification."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    epsilon = 1e-9
    initial_temperature = 1.0
    cooling_rate = 0.995
    min_temperature = 0.01

    # Shortest Path Influence
    shortest_path_matrix = np.copy(distance_matrix)
    for k in range(n):
        for i in range(n):
            for j in range(n):
                shortest_path_matrix[i, j] = min(shortest_path_matrix[i, j], shortest_path_matrix[i, k] + shortest_path_matrix[k, j])

    mean_distance = np.mean(distance_matrix[distance_matrix != 0])
    shortest_path_factor = np.exp(-shortest_path_matrix / (mean_distance + epsilon))

    # Inverse distance with centrality boost
    inverse_distance = 1 / (distance_matrix + np.eye(n))
    node_centrality = np.sum(inverse_distance, axis=1)
    edge_centrality = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            edge_centrality[i, j] = node_centrality[i] * node_centrality[j]
    centrality_boost = inverse_distance * (edge_centrality**0.5 + epsilon)

    # Savings Heuristic
    depot = 0
    savings = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                savings[i, j] = distance_matrix[depot, i] + distance_matrix[depot, j] - distance_matrix[i, j]
    savings = savings / (np.max(savings) + epsilon)

    # Combine factors
    combined = shortest_path_factor + centrality_boost + savings

    # Normalize
    combined = (combined - np.min(combined)) / (np.max(combined) - np.min(combined) + epsilon)

    # Temperature-based stochasticity
    temperature = initial_temperature
    random_matrix = np.random.rand(n, n)
    heuristics = combined * (1 + temperature * random_matrix)

    # Dynamic Sparsification
    threshold = np.percentile(heuristics[heuristics > 0], 30)
    heuristics[heuristics < threshold] = 0

    # Adaptive Cooling
    temperature *= cooling_rate
    temperature = max(temperature, min_temperature)

    return heuristics
```
