{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:\n    \"\"\"Adaptive heuristic: Combines edge attraction, node desirability, and adaptive temperature scaling.\"\"\"\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix)\n    epsilon = 1e-9\n    initial_temperature = 1.0\n    current_temperature = initial_temperature\n    sparsification_percentile = 40.0\n\n    # Node Desirability\n    node_desirability = np.zeros(n)\n    for i in range(n):\n        node_desirability[i] = np.sum(1.0 / (distance_matrix[i, :] + epsilon))\n    node_desirability /= np.max(node_desirability)\n\n    # Edge Attraction (inverse square distance)\n    edge_attraction = np.zeros_like(distance_matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                edge_attraction[i, j] = (1.0 / (distance_matrix[i, j]**2 + epsilon))\n            else:\n                edge_attraction[i, j] = 0.0\n    edge_attraction = edge_attraction / np.max(edge_attraction)\n\n    # Heuristic Combination\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristics[i, j] = edge_attraction[i, j] * (node_desirability[i] + node_desirability[j]) * current_temperature\n            else:\n                heuristics[i, j] = 0.0\n\n    # Sparsification\n    threshold = np.percentile(heuristics[heuristics > 0], sparsification_percentile)\n    heuristics[heuristics > 0] = np.where(heuristics[heuristics > 0] >= threshold, heuristics[heuristics > 0], 0.0)\n\n    # Adaptive Cooling\n    edge_values = heuristics[heuristics > 0]\n    if len(edge_values) > 0:\n        edge_variance = np.var(edge_values)\n    else:\n        edge_variance = 0.0\n\n    if edge_variance > 0.1:\n        current_temperature *= 0.99\n    else:\n        current_temperature *= 0.999\n\n    current_temperature = max(current_temperature, 0.01)\n\n    return heuristics\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}