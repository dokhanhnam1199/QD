```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Enhanced Adaptive Heuristics for TSP Edge Prioritization:
    Dynamically adjusts edge priorities based on a combination of gravitational attraction,
    node desirability, pheromone influence (simulated), and an adaptive temperature.
    Sparsification is applied to focus the search.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution.
                     Higher values suggest higher priority. Sparsified.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    epsilon = 1e-9  # Avoid division by zero

    # 1. Node Desirability Scores:
    #    Nodes connected to shorter edges and high degree
    node_degree = np.sum(distance_matrix > 0, axis=1) #number of non zero elements
    node_desirability = np.zeros(n)
    for i in range(n):
        node_desirability[i] = np.sum(1.0 / (distance_matrix[i, :] + epsilon)) + node_degree[i]
    node_desirability /= np.max(node_desirability)


    # 2. Edge Attraction (Gravitational):
    edge_attraction = 1.0 / (distance_matrix**2 + epsilon)
    edge_attraction[np.diag_indices_from(edge_attraction)] = 0.0
    edge_attraction /= np.max(edge_attraction)


    # 3. Simulated Pheromone Influence:  (Initialize with a small positive value)
    pheromone_matrix = np.ones_like(distance_matrix) * 0.01


    # 4. Adaptive Temperature (Simulated Annealing):
    initial_temperature = 1.0
    temperature = initial_temperature
    cooling_rate = 0.995
    min_temperature = 0.01


    # 5. Dynamic Weighting (Calibrated based on problem characteristics):
    weight_node_desirability = 0.4
    weight_edge_attraction = 0.3
    weight_pheromone = 0.3 #Start all edges as equally attractive.


    # Initial Heuristic Combination:
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] = (weight_node_desirability * (node_desirability[i] + node_desirability[j]) +
                                     weight_edge_attraction * edge_attraction[i, j] +
                                     weight_pheromone * pheromone_matrix[i, j])
            else:
                heuristics[i, j] = 0.0

    heuristics = heuristics / np.max(heuristics)

    # 6. Sparsification:
    sparsification_percentile = 40.0
    threshold = np.percentile(heuristics[heuristics > 0], sparsification_percentile)
    heuristics[heuristics < threshold] = 0.0

    # Simulated Annealing Loop (Simplified - ideally, this would be within a larger search loop):
    # In a real implementation, this would be called iteratively to update the pheromones and temperature

    # Placeholder for Simulated Annealing step.  In a fuller implementation,
    # this would include pheromone updates based on solution quality, and
    # dynamic adjustments to the weights.  This is left out for brevity, as
    # it depends on the overall search framework.

    temperature = max(temperature * cooling_rate, min_temperature)

    return heuristics
```
