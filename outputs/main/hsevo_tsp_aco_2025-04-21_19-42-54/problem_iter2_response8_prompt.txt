{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n### Better code\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for the Traveling Salesman Problem (TSP) based on stochastic solution sampling,\n    inspired by black hole principles.\n\n    This version combines inverse distance with a stochastic element, weighted by\n    the distance to the farthest node.  The stochasticity allows for escaping local\n    optima, mimicking Hawking radiation.  The weighting emphasizes potentially longer,\n    but globally more efficient, \"quantum tunneling\" paths.\n\n    Args:\n        distance_matrix (np.ndarray): A square matrix where distance_matrix[i, j]\n                                     represents the distance between city i and city j.\n\n    Returns:\n        np.ndarray: A matrix of the same shape as distance_matrix, containing heuristic values.\n                    Higher values indicate more promising edges.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    max_distance = np.max(distance_matrix[np.isfinite(distance_matrix)])  # Avoid infs when computing stochasticity\n\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Inverse distance (shorter distances are preferred)\n                inverse_distance = 1 / distance_matrix[i, j] if distance_matrix[i,j] !=0 else np.inf # prevent division by zero. If 0 then inf will automatically prevent algorithm to visit this route\n\n                # Stochastic element (Hawking radiation): favor exploration based on \"black hole event horizon\"\n                stochasticity = np.random.rand() * (distance_matrix[i,j] / max_distance) # Normalize by the \"event horizon\" (max distance)\n\n                # Combine inverse distance and stochasticity. Weights promote potential quantum tunneling\n                heuristic_matrix[i, j] = inverse_distance + stochasticity\n\n            else:\n                heuristic_matrix[i, j] = 0  # No self-loops\n\n    return heuristic_matrix\n\n### Worse code\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for Traveling Salesman Problem (TSP) based on:\n    1. Inverse distance (shorter distances are preferred).\n    2. Node degree preference:  Nodes connected to more other nodes tend to be connected earlier.\n    3. Avoidance of long edges connected to nodes already having short edges.\n\n    Args:\n        distance_matrix: A numpy ndarray representing the distance matrix.\n\n    Returns:\n        A numpy ndarray of the same shape as distance_matrix,\n        representing the heuristic value for each edge. Higher values\n        indicate more promising edges.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix, dtype=float)\n\n    # 1. Inverse distance heuristic\n    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add a small value to avoid division by zero\n\n    # 2. Node degree preference: encourage exploration of nodes\n    node_degree = np.sum(inverse_distance, axis=0)  # Sum of inverse distances for each node\n    node_degree_matrix = np.outer(node_degree, node_degree)\n\n    # 3. Penalize long edges for nodes that already have short edges\n    min_dist_to_node = np.min(distance_matrix + np.diag([np.inf]*n), axis=0) # smallest distance to all nodes\n\n    node_min_dist_matrix = np.outer(min_dist_to_node,min_dist_to_node)\n    penalization_matrix = distance_matrix * (node_min_dist_matrix )\n\n    heuristics = inverse_distance +  0.1*node_degree_matrix - 0.0001 * penalization_matrix\n\n    return heuristics\n\n### Analyze & experience\n- *   Comparing (1st) vs (20th), we see that the best heuristic incorporates inverse distance, node degree preference, and global distance context, penalizing long edges connected to nodes already having short edges, while the worst focuses on inverse distance, node degree, and penalizing long edges connected to nodes already having short edges. The key difference lies in the inclusion of the global context component in the best heuristic, along with degree component implemented by average distance, making it superior.\n*   Comparing (2nd) vs (19th), we observe that the second-best heuristic combines inverse distance with a \"gravity\" effect encouraging exploration of less-visited edges and randomness to escape local optima. The 19th heuristic uses inverse distance, a temperature-based exploration factor, and path coherence. The added randomness and gravity component makes the 2nd better than 19th.\n*   Comparing (1st) vs (2nd), the first prioritizes a more balanced tour with global distance awareness using average distances, while the second opts for exploration through a gravity effect and stochastic noise. The focus on a balanced tour appears to be more effective.\n*   Comparing (3rd) vs (4th), the 3rd heuristic prioritizes shorter distances and edges connecting to nodes with longer average distances, while the 4th incorporates inverse distance, a greedy start bias based on summed distances, and a global connection boost. The node importance heuristic seems better than greedy start bias.\n*   Comparing (2nd worst) vs (worst), the 19th relies on temperature-controlled exploration and path coherence, while the 20th uses node degree preference and avoidance of long edges connected to nodes with short edges. The path coherence mechanism appears less robust than degree-based exploration.\n*   Overall: Effective heuristics incorporate a balance between exploitation (favoring shorter distances) and exploration (avoiding local optima). They often factor in node connectivity, either through degree penalties/preferences or gravity-like effects. The weighting of different components and the specific implementation of exploration mechanisms (randomness, temperature, savings heuristic) plays a significant role in performance. Global context awareness is also crucial for achieving superior results.\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, here's a redefinition of \"Current self-reflection\" focused on designing better heuristics, avoiding common pitfalls, and a roadmap for improvement:\n\n*   **Keywords:** Heuristic design, exploitation-exploration balance, global context, premature convergence, adaptive strategies, performance metrics.\n\n*   **Advice:** Design heuristics that dynamically adapt their exploration/exploitation ratio based on search progress and problem characteristics. Incorporate global information strategically, using it to guide, not dictate, the search. Rigorously test and benchmark heuristics against diverse problem instances.\n\n*   **Avoid:** Over-reliance on any single strategy (e.g., pure exploitation), neglecting global problem context, ignoring performance metrics and feedback loops.\n\n*   **Explanation:** Effective heuristic design requires a nuanced understanding of the problem landscape. Balance short-term gains with broader exploration guided by global awareness and adapt your strategy based on real-world performance data.\n\n\nYour task is to write an improved function `heuristics_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}