```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Implements a heuristic for the Traveling Salesman Problem (TSP)
    based on a combination of inverse distance and node degree considerations.

    This heuristic aims to prioritize edges connecting nodes with higher degrees
    (more connections to other nodes) and shorter distances.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances
            between nodes. distance_matrix[i][j] is the distance between node i
            and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each
            element represents the desirability of including the corresponding
            edge in a TSP solution. Higher values indicate more desirable edges.
    """
    n = distance_matrix.shape[0]  # Number of nodes

    # Initialize the heuristic matrix with the inverse of the distances.
    heuristic_matrix = 1 / (distance_matrix + np.eye(n))  # Adding identity to avoid division by zero

    # Calculate node degrees based on proximity. The smaller the distances
    # to neighbors, the larger the node degree is considered.
    node_degrees = np.sum(1 / (distance_matrix + np.eye(n)), axis=1)

    # Combine node degrees with the inverse distances to refine the heuristic.
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] *= (node_degrees[i] + node_degrees[j])

    # Normalize to be between 0 and 1 for probabilistic sampling.
    heuristic_matrix = (heuristic_matrix - np.min(heuristic_matrix)) / (np.max(heuristic_matrix) - np.min(heuristic_matrix))

    return heuristic_matrix
```
