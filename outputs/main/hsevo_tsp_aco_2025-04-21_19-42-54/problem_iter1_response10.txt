```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP based on a combination of distance, node degree,
    and a stochastic element.  The goal is to promote shorter edges,
    edges connected to nodes with fewer connections, and to introduce
    some randomness to explore different parts of the solution space.

    Args:
        distance_matrix: A numpy array representing the distance matrix.

    Returns:
        A numpy array of the same shape as distance_matrix, representing
        the heuristic values for each edge. Higher values indicate a more
        promising edge.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance: Shorter edges are preferred.
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Add small constant to avoid division by zero

    # 2. Node Degree:  Prioritize nodes with lower degree to encourage
    # exploration and avoid prematurely closing off regions. We approximate the
    # degree using a softened (sigmoid) rank-based approach.
    degree_penalty = np.zeros((n, n))
    for i in range(n):
        # Rank distances from node i to all other nodes.
        distances = distance_matrix[i, :]
        ranks = np.argsort(distances)

        # Assign a degree penalty based on the rank (close = higher degree, penalty to disincentivize)
        for j in range(n):
            rank_idx = np.where(ranks == j)[0][0]
            degree_penalty[i, j] = 1 / (1 + np.exp((rank_idx - n/2)/ (n/5)))

    # 3. Stochastic element: Add randomness to explore the solution space
    random_noise = np.random.rand(n, n) * 0.1  # Small random values

    # Combine the heuristics
    heuristic_matrix = inverse_distance * degree_penalty + random_noise

    # Make heuristic symmetric:  Since the TSP is undirected,
    # we want heuristics[i,j] == heuristics[j,i]
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2

    # Set diagonal elements to zero to prevent self-loops
    np.fill_diagonal(heuristic_matrix, 0)

    return heuristic_matrix
```
