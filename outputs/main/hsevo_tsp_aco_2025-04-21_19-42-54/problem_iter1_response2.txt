```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    A heuristic function for the Traveling Salesman Problem based on Newton's laws and physical intuition.
    This function incorporates a combination of inverse distance (gravity),
    a temperature-based exploration factor, and a path coherence term.

    Args:
        distance_matrix (np.ndarray): A matrix where distance_matrix[i, j] is the distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, containing heuristic values for each edge.
                     Higher values indicate more promising edges.
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance (Gravitational Analogy): Closer cities are more attractive.
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero.

    # 2. Temperature-based Exploration: Encourage exploration initially, focusing as the search progresses.
    temperature = 1.0  # Initial temperature (can be tuned). It decreases over time implicitly
    exploration_factor = np.exp(-distance_matrix / temperature)

    # 3. Path Coherence: Encourages edges that connect to nodes that are "well-connected" in general,
    #    considering all edge connections in the graph to create a smooth and promising initial path
    path_coherence = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                # Compute the sum of inverse distances from i and j to all other nodes
                attraction_i = np.sum(inverse_distance[i, :])
                attraction_j = np.sum(inverse_distance[j, :])
                path_coherence[i, j] = (attraction_i + attraction_j)
    
    # 4. Combine the factors, weighting each appropriately. These weightings can be optimized through trials.
    alpha = 0.6  # Weight for inverse distance
    beta = 0.2   # Weight for exploration factor
    gamma = 0.2   # Weight for path coherence

    heuristics = alpha * inverse_distance + beta * exploration_factor + gamma * path_coherence

    # Set diagonal elements (distance to self) to zero, avoiding self-loops.
    np.fill_diagonal(heuristics, 0)

    return heuristics
```
