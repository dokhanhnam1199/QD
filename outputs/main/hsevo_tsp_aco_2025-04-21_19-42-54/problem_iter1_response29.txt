```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    A more sophisticated heuristic for the Traveling Salesman Problem.
    This version combines distance, a "gravity" effect, and randomness.

    The heuristic favors shorter distances but also encourages exploration
    of less-visited edges.  A stochastic element is introduced to avoid
    getting stuck in local optima.

    Args:
        distance_matrix (np.ndarray): A square matrix where distance_matrix[i][j]
                                       represents the distance between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element
                    represents a heuristic value indicating the desirability of
                    including the corresponding edge in the TSP tour.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance component (shorter distances are better)
    inverse_distance = 1.0 / (distance_matrix + 1e-6)  # Add a small constant to avoid division by zero

    # "Gravity" component: Encourage connections to nodes that are far from the "center of gravity".
    # This promotes exploration and avoids clustering in one region.
    total_distances = np.sum(distance_matrix, axis=0)  # Sum of distances from each node to all other nodes
    gravity_potential = total_distances / np.mean(total_distances)  # Normalize to a reasonable scale


    # Combine the components
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] = inverse_distance[i, j] * (gravity_potential[i] + gravity_potential[j]) # Both nodes have gravity effects

            else:
                heuristic_matrix[i, j] = 0  # No self-loops
    # Add a stochastic element to encourage exploration

    random_noise = np.random.rand(n, n) * 0.1  # Small random values
    heuristic_matrix = heuristic_matrix + random_noise


    return heuristic_matrix
```
