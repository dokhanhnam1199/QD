```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """Combines inverse distance, node degree, and global context for TSP."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    avg_distances = np.mean(distance_matrix, axis=0)
    global_avg_distance = np.mean(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i != j:
                distance_component = 1 / distance_matrix[i, j]
                degree_component = avg_distances[i] + avg_distances[j]
                global_context_component = np.exp(-(distance_matrix[i, j] / global_avg_distance))
                heuristic_matrix[i, j] = distance_component * (1 / (degree_component)) * global_context_component
            else:
                heuristic_matrix[i, j] = 0

    # Add small random component
    heuristic_matrix += np.random.rand(n, n) * 0.001

    return heuristic_matrix
```
