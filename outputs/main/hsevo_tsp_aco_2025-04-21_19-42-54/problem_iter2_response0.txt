```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """Combines inverse distance, savings, gravity & randomness."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    inverse_distance = 1.0 / (distance_matrix + 1e-9)
    savings = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                savings[i, j] = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j]
                savings[j, i] = distance_matrix[j, 0] + distance_matrix[0, i] - distance_matrix[j, i]

    gravity = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                gravity[i, j] = np.sum(inverse_distance[i, :]) + np.sum(inverse_distance[j, :])

    heuristics = inverse_distance + savings + 0.1 * gravity + 0.01 * np.random.normal(0, 1, size=(n, n))
    np.fill_diagonal(heuristics, 0)
    heuristics = np.maximum(heuristics, 0)
    total_sum = np.sum(heuristics)
    if total_sum > 0:
        heuristics /= total_sum
    else:
        heuristics = np.ones_like(distance_matrix) / (n * (n - 1))
    return heuristics
```
