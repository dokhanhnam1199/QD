```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, adaptive density scaling, and center proximity
    to balance exploitation and exploration in TSP.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Avoid division by zero and self-loops
    distance_matrix = np.where(distance_matrix == 0, np.inf, distance_matrix)
    np.fill_diagonal(distance_matrix, np.inf)

    # 1. Inverse Distance
    inverse_distance = 1 / distance_matrix

    # 2. Reciprocal Rank (exploration)
    reciprocal_rank = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        distances = distance_matrix[i, :]
        ranks = np.argsort(distances)
        ranked_distances = np.argsort(ranks) + 1
        reciprocal_rank[i, :] = 1 / ranked_distances

    # 3. Adaptive Density Scaling (adjust exploration)
    node_densities = np.zeros(n)
    for i in range(n):
        node_densities[i] = np.mean(inverse_distance[i, :])

    density_scaling = 1.0 / (1.0 + node_densities)
    density_scaling = np.tile(density_scaling, (n, 1))
    density_scaling = np.minimum(density_scaling, density_scaling.T)

    # 4. Center Proximity Factor (global context)
    center_x = np.mean(np.arange(n))
    center_y = np.mean(np.arange(n))
    center_distances = np.sqrt((np.arange(n) - center_x)**2 + (np.arange(n) - center_y)**2)
    center_proximity_factor = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            center_proximity_factor[i, j] = 1.0 - (abs(center_distances[i] - center_distances[j]) / (np.max(center_distances) + 1e-9))


    # Combine factors: Inverse distance + adaptive exploration + global context.
    heuristic_matrix = inverse_distance + density_scaling * reciprocal_rank + 0.2 * center_proximity_factor

    # Normalize
    heuristic_matrix = (heuristic_matrix - np.min(heuristic_matrix)) / (np.max(heuristic_matrix) - np.min(heuristic_matrix) + 1e-9)

    return heuristic_matrix
```
