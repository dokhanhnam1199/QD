```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """Adaptive edge prioritization with node desirability and sparsification."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    epsilon = 1e-9
    temperature = 1.0

    # Node Desirability
    node_desirability = np.zeros(n)
    for i in range(n):
        node_desirability[i] = np.sum(1.0 / (distance_matrix[i, :] + epsilon))
    node_desirability /= np.max(node_desirability)

    # Edge Attraction
    edge_attraction = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                edge_attraction[i, j] = (1.0 / (distance_matrix[i, j]**2 + epsilon)) * temperature
            else:
                edge_attraction[i, j] = 0.0
    edge_attraction = edge_attraction / np.max(edge_attraction)

    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] = edge_attraction[i, j] * (node_desirability[i] + node_desirability[j])
            else:
                heuristics[i, j] = 0.0

    # Sparsification
    threshold = np.percentile(heuristics[heuristics > 0], 40)
    heuristics[heuristics < threshold] = 0.0

    temperature *= 0.995
    return heuristics
```
