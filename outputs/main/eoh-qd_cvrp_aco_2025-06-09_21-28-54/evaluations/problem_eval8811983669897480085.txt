import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm generates routes using a nearest neighbor approach with stochasticity and evaluates their feasibility and cost, updating a heuristic matrix based on edge frequency in good routes.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros((n, n))
    num_samples = 500
    alpha = 0.8  # Weight for distance when choosing the next node

    for _ in range(num_samples):
        # Start from the depot
        current_node = 0
        unvisited_customers = set(range(1, n))
        routes = []
        current_route = [0]
        current_load = 0
        
        while unvisited_customers:
            # Calculate weighted distances to unvisited customers
            weighted_distances = {}
            for customer in unvisited_customers:
                weighted_distances[customer] = alpha * distance_matrix[current_node, customer] + (1 - alpha) * random.random() # Introduce stochasticity

            # Sort customers by weighted distance
            sorted_customers = sorted(weighted_distances.items(), key=lambda item: item[1])
            
            next_customer = None
            for customer, _ in sorted_customers:
                if current_load + demands[customer] <= capacity:
                    next_customer = customer
                    break
            
            if next_customer is None:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_load = 0
                
                #Try to select a customer again
                for customer, _ in sorted_customers:
                    if current_load + demands[customer] <= capacity:
                        next_customer = customer
                        break
                
                if next_customer is None:
                    break

            current_route.append(next_customer)
            current_load += demands[next_customer]
            unvisited_customers.remove(next_customer)
            current_node = next_customer
        
        current_route.append(0)
        routes.append(current_route)
        
        # Check feasibility (all customers visited)
        visited_customers = set()
        for route in routes:
            visited_customers.update(route)

        valid_solution = True
        for i in range(1, n):
            if i not in visited_customers:
                valid_solution = False
                break

        if valid_solution:
            # Update heuristic matrix based on edges in the route
            for route in routes:
                for i in range(len(route) - 1):
                    node1 = route[i]
                    node2 = route[i + 1]
                    heuristics_matrix[node1, node2] += 1
                    heuristics_matrix[node2, node1] += 1  # Symmetric

    return heuristics_matrix
