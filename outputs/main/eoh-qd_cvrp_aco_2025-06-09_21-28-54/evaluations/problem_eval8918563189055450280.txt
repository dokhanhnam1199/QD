import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm estimates edge inclusion probabilities by sampling random partial routes, accepting them based on a simulated annealing-inspired probability depending on capacity and route length, and updating edge frequencies.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000
    temperature = 100.0  # Initial temperature for simulated annealing
    cooling_rate = 0.99  # Cooling rate for simulated annealing

    for _ in range(num_samples):
        # Start with a random customer
        current_node = np.random.randint(1, n)
        current_route = [0, current_node]
        current_load = demands[current_node]

        # Iteratively extend the route
        while True:
            # Find feasible neighbors
            feasible_neighbors = []
            for neighbor in range(1, n):
                if neighbor not in current_route and current_load + demands[neighbor] <= capacity:
                    feasible_neighbors.append(neighbor)

            # If no feasible neighbors, return to depot
            if not feasible_neighbors:
                current_route.append(0)
                break

            # Choose a neighbor randomly
            next_node = np.random.choice(feasible_neighbors)
            route_length = 0
            for i in range(len(current_route) - 1):
                route_length += distance_matrix[current_route[i], current_route[i+1]]
            route_length += distance_matrix[current_route[-1], next_node]
            
            # Accept the new node with a probability based on simulated annealing
            delta_cost = distance_matrix[current_route[-1], next_node]
            acceptance_probability = np.exp(-delta_cost / temperature)

            if np.random.rand() < acceptance_probability:
                current_route.append(next_node)
                current_load += demands[next_node]
            else:
                current_route.append(0)
                break

        # Update heuristics matrix
        for i in range(len(current_route) - 1):
            u = current_route[i]
            v = current_route[i+1]
            heuristics_matrix[u, v] += 1

        # Cool the temperature
        temperature *= cooling_rate

    # Normalize the heuristics matrix
    heuristics_matrix = heuristics_matrix / num_samples

    return heuristics_matrix
