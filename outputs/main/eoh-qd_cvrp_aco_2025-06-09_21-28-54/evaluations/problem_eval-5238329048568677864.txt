import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples many random routes, evaluates their feasibility with respect to capacity constraints, and averages the inverse of edge distances in feasible routes, weighted by route length, to construct a heuristic matrix favoring shorter edges in shorter routes.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding depot)
        customer_indices = list(range(1, n))
        random.shuffle(customer_indices)

        # Assign customers to routes based on capacity
        routes = []
        current_route = [0]  # Start at the depot
        current_load = 0

        for customer in customer_indices:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]  # Start a new route from depot
                current_load = demands[customer]

        current_route.append(0) # final return to depot
        routes.append(current_route)

        # Calculate route length
        route_lengths = []
        for route in routes:
          route_length = 0
          for i in range(len(route) - 1):
            u = route[i]
            v = route[i+1]
            route_length += distance_matrix[u,v]
          route_lengths.append(route_length)

        # Update heuristics matrix
        for idx, route in enumerate(routes):
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                edge_score = 1 / distance_matrix[u, v]
                route_weight = 1 / route_lengths[idx]
                heuristics_matrix[u, v] += edge_score * route_weight
                heuristics_matrix[v, u] += edge_score * route_weight # Assuming symmetric distance matrix

    # Normalize the matrix to get a probability-like heuristic
    heuristics_matrix = heuristics_matrix / num_samples
    return heuristics_matrix
