import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm constructs multiple solutions using a randomized nearest neighbor approach with capacity constraints, scoring each edge based on the quality of the solutions it appears in.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000
    
    for _ in range(num_samples):
        current_node = 0
        current_load = 0
        route = [0]
        unvisited = set(range(1, n))
        
        while unvisited:
            # Find nearest neighbors within capacity
            feasible_neighbors = []
            for neighbor in unvisited:
                if current_load + demands[neighbor] <= capacity:
                    feasible_neighbors.append(neighbor)
            
            if not feasible_neighbors:
                route.append(0)
                current_node = 0
                current_load = 0
                feasible_neighbors = []
                for neighbor in unvisited:
                    if current_load + demands[neighbor] <= capacity:
                        feasible_neighbors.append(neighbor)
                if not feasible_neighbors:
                  break


            # Select a neighbor randomly, weighted by inverse distance
            distances = [distance_matrix[current_node, neighbor] for neighbor in feasible_neighbors]
            if sum(distances) == 0:
                probabilities = [1/len(distances)] * len(distances)
            else:
                probabilities = [1 / d for d in distances]
                probabilities = [p / sum(probabilities) for p in probabilities]

            try:
                next_node = np.random.choice(feasible_neighbors, p=probabilities)
            except ValueError:
                next_node = np.random.choice(feasible_neighbors)
            
            route.append(next_node)
            current_load += demands[next_node]
            unvisited.remove(next_node)
            current_node = next_node
        
        route.append(0)
        
        # Calculate route cost
        route_cost = 0
        for i in range(len(route) - 1):
            route_cost += distance_matrix[route[i], route[i+1]]
        
        # Update heuristics matrix
        for i in range(len(route) - 1):
            u = route[i]
            v = route[i+1]
            heuristics_matrix[u, v] += 1 / (route_cost + 1e-6)
    
    heuristics_matrix /= num_samples
    return heuristics_matrix
