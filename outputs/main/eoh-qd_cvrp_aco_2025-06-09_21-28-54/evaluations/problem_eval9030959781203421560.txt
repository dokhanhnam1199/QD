import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm samples random feasible routes, evaluates their quality based on distance and capacity constraints, and aggregates edge usage frequency to generate a heuristic matrix favoring edges appearing in better solutions.}"""

    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000  # Number of random samples to generate

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        customer_indices = np.arange(1, n)
        np.random.shuffle(customer_indices)

        routes = []
        current_route = [0]  # Start at the depot
        current_demand = 0

        for customer in customer_indices:
            if current_demand + demands[customer] <= capacity:
                current_route.append(customer)
                current_demand += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]  # Start a new route
                current_demand = demands[customer]

        current_route.append(0)  # Return to depot
        routes.append(current_route)

        # Calculate the total distance of the routes
        total_distance = 0
        for route in routes:
            for i in range(len(route) - 1):
                total_distance += distance_matrix[route[i], route[i + 1]]

        # Update the heuristics matrix based on edge usage and total distance
        # Edges in shorter routes get higher scores
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i + 1]
                heuristics_matrix[node1, node2] += 1 / (1 + total_distance) #Higher score for edges in good solutions
                heuristics_matrix[node2, node1] += 1 / (1 + total_distance) # Ensure symmetry


    return heuristics_matrix
