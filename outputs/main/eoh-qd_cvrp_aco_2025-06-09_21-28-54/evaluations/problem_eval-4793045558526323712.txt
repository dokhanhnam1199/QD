import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm samples multiple random routes, evaluates their feasibility with respect to capacity constraints, and uses the frequency of each edge appearing in feasible routes to construct a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        customer_indices = np.random.permutation(np.arange(1, n))
        
        # Build a route based on the permutation, respecting capacity constraints
        routes = []
        current_route = [0]  # Start at the depot
        current_load = 0
        
        for customer in customer_indices:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]  # Start a new route
                current_load = demands[customer]

        current_route.append(0) # End the current route and return to the depot
        routes.append(current_route)

        # Update the heuristic matrix based on edges in the feasible routes
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1  # Assuming symmetry

    return heuristics_matrix
