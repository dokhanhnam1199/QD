import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm samples multiple random routes, evaluates their feasibility with respect to capacity constraints, and biases the route construction towards shorter edges, updating the heuristic matrix based on edge frequency in feasible routes.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a list of customers (excluding the depot)
        customer_indices = list(np.arange(1, n))
        
        # Build a route based, favoring closer customers, respecting capacity constraints
        routes = []
        current_route = [0]  # Start at the depot
        current_load = 0

        while customer_indices:
            current_node = current_route[-1]
            # Calculate distances to remaining customers
            distances = [distance_matrix[current_node, customer] for customer in customer_indices]

            # Bias towards shorter distances using softmax (or similar)
            probabilities = np.exp(-np.array(distances)) / np.sum(np.exp(-np.array(distances)))
            
            # Select the next customer based on the probabilities
            next_customer_index = np.random.choice(len(customer_indices), p=probabilities)
            next_customer = customer_indices[next_customer_index]

            if current_load + demands[next_customer] <= capacity:
                current_route.append(next_customer)
                current_load += demands[next_customer]
                del customer_indices[next_customer_index]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0]  # Start a new route
                current_load = 0
        if len(current_route) > 1:
            current_route.append(0) # End the current route and return to the depot
            routes.append(current_route)

        # Update the heuristic matrix based on edges in the feasible routes
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1  # Assuming symmetry

    return heuristics_matrix
