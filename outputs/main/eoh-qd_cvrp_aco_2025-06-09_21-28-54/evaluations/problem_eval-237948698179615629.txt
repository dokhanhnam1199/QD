import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm constructs a heuristics matrix by sampling random routes, evaluating their feasibility based on capacity, and rewarding edges that appear in feasible routes with a score that decays exponentially with route length.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        customer_indices = np.random.permutation(range(1, n))
        
        # Build routes based on capacity constraints
        routes = []
        current_route = [0]  # Start at the depot
        current_demand = 0
        
        for customer in customer_indices:
            if current_demand + demands[customer] <= capacity:
                current_route.append(customer)
                current_demand += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]  # Start a new route
                current_demand = demands[customer]
        
        current_route.append(0)  # End the last route at the depot
        routes.append(current_route)

        # Calculate total route length
        total_length = 0
        for route in routes:
            for i in range(len(route) - 1):
                total_length += distance_matrix[route[i], route[i+1]]
        
        # Update heuristics matrix if routes are feasible
        if total_length > 0:  # Ensure the route is not empty
            reward = np.exp(-total_length / 100)  # Exponential decay
            for route in routes:
                for i in range(len(route) - 1):
                    heuristics_matrix[route[i], route[i+1]] += reward
                    heuristics_matrix[route[i+1], route[i]] += reward  # Assuming symmetry

    return heuristics_matrix
