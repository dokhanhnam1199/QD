import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples routes by iteratively adding the nearest feasible node to the current route until the vehicle capacity is reached, then aggregates the frequency of edges in the feasible routes to construct a heuristic matrix.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000

    for _ in range(num_samples):
        # Initialize route and capacity
        routes = []
        unvisited_nodes = set(range(1, n))
        current_route = [0]
        current_capacity = 0

        while unvisited_nodes:
            # Find the nearest feasible node
            nearest_node = None
            min_distance = float('inf')
            for node in unvisited_nodes:
                if current_capacity + demands[node] <= capacity:
                    distance = distance_matrix[current_route[-1], node]
                    if distance < min_distance:
                        min_distance = distance
                        nearest_node = node

            # If no feasible node is found, return to depot and start a new route
            if nearest_node is None:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_capacity = 0
                continue

            # Add the nearest feasible node to the route
            current_route.append(nearest_node)
            current_capacity += demands[nearest_node]
            unvisited_nodes.remove(nearest_node)
        
        current_route.append(0)
        routes.append(current_route)

        # Update the heuristic matrix with edges present in the route
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1

    return heuristics_matrix
