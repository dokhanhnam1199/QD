import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{The algorithm samples many random routes and prioritizes shorter edges while penalizing edges that lead to infeasible routes due to capacity constraints.}"""
    n = len(demands)
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        customer_indices = list(range(1, n))
        random.shuffle(customer_indices)

        # Create routes based on capacity constraint
        routes = []
        current_route = [0]  # Start at the depot
        current_load = 0

        for customer in customer_indices:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]
                current_load = demands[customer]

        current_route.append(0)  # Complete the last route
        routes.append(current_route)

        # Update heuristics matrix based on distance and feasibility
        route_length = 0
        is_feasible = True
        for route in routes:
            current_route_load = 0
            for i in range(len(route)):
                if(route[i]!=0):
                    current_route_load+=demands[route[i]]
            if current_route_load > capacity:
                is_feasible = False
                break

        for route in routes:
          for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                distance = distance_matrix[u, v]

                if is_feasible:
                    heuristics_matrix[u, v] += (1 / (distance + 1e-6))
                    heuristics_matrix[v, u] += (1 / (distance + 1e-6))
                else:
                    heuristics_matrix[u, v] -= (1 / (distance + 1e-6))
                    heuristics_matrix[v, u] -= (1 / (distance + 1e-6))

    # Normalize the heuristics matrix
    max_val = np.max(np.abs(heuristics_matrix))
    if max_val > 0:
        heuristics_matrix = heuristics_matrix / max_val

    return heuristics_matrix
