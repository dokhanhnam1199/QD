import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm iteratively refines a heuristic matrix by sampling routes, evaluating their cost and feasibility, and updating edge scores based on a weighted combination of route cost and feasibility, favoring low-cost feasible routes.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000
    alpha = 0.7  # Weight for route cost
    beta = 0.3   # Weight for feasibility

    for _ in range(num_samples):
        route = list(range(1, n))
        random.shuffle(route)

        routes = []
        current_route = [0]
        current_demand = 0
        
        for node in route:
            if current_demand + demands[node] <= capacity:
                current_route.append(node)
                current_demand += demands[node]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, node]
                current_demand = demands[node]

        current_route.append(0)
        routes.append(current_route)

        total_demand = 0
        for rt in routes:
          for node in rt:
            if node!=0:
              total_demand += demands[node]

        feasible = total_demand <= len(routes)*capacity

        route_cost = 0
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                route_cost += distance_matrix[node1, node2]

        if feasible:
            score = alpha * (1 / (route_cost + 1e-6)) + beta * 1  # Feasible routes get a bonus
        else:
            score = alpha * (1 / (route_cost + 1e-6)) + beta * 0  # Infeasible routes get penalized

        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += score
                heuristics_matrix[node2, node1] += score

    return heuristics_matrix
