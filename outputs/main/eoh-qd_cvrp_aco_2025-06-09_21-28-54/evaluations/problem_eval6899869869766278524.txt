import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm constructs a heuristics matrix by sampling random routes, evaluating their feasibility based on capacity, and updating edge scores based on a combination of frequency and distance, favoring shorter, feasible routes that frequently utilize specific edges.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_samples = 1000

    for _ in range(num_samples):
        customer_indices = list(range(1, n))
        random.shuffle(customer_indices)

        routes = []
        current_route = [0]
        current_load = 0

        for customer in customer_indices:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, customer]
                current_load = demands[customer]

        current_route.append(0)
        routes.append(current_route)

        route_length = 0
        for route in routes:
            for i in range(len(route) - 1):
                route_length += distance_matrix[route[i], route[i+1]]

        if route_length > 0:
            for route in routes:
                for i in range(len(route) - 1):
                    u = route[i]
                    v = route[i+1]
                    heuristics_matrix[u, v] += (1 / distance_matrix[u, v]) / route_length
                    heuristics_matrix[v, u] += (1 / distance_matrix[v, u]) / route_length

    return heuristics_matrix
