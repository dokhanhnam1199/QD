import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm iteratively constructs solutions by adding the shortest feasible edge to a partially built route, prioritizing edges that connect to the depot when the current route is full.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_iterations = 100

    for _ in range(num_iterations):
        unvisited = set(range(1, n))
        routes = []
        current_route = [0]
        current_demand = 0

        while unvisited:
            # Find the nearest feasible customer to the last node in the current route
            last_node = current_route[-1]
            best_customer = None
            min_dist = float('inf')

            for customer in unvisited:
                if current_demand + demands[customer] <= capacity:
                    dist = distance_matrix[last_node, customer]
                    if dist < min_dist:
                        min_dist = dist
                        best_customer = customer

            if best_customer is not None:
                current_route.append(best_customer)
                current_demand += demands[best_customer]
                unvisited.remove(best_customer)
            else:
                # If no feasible customer can be added, return to the depot
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_demand = 0
        
        current_route.append(0)
        routes.append(current_route)

        # Update the heuristic matrix
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1

    # Normalize by the number of iterations
    heuristics_matrix /= num_iterations
    return heuristics_matrix
