import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm constructs a heuristic matrix by sampling random routes and penalizing edges that frequently violate capacity constraints while rewarding edges present in feasible solutions.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        customer_indices = np.random.permutation(range(1, n))
        
        # Initialize variables for route construction
        current_route = [0]  # Start at the depot
        current_load = 0
        routes = []

        # Build routes based on capacity constraints
        for customer in customer_indices:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]  # Start a new route from depot
                current_load = demands[customer]

        current_route.append(0) # Return to depot after last customer
        routes.append(current_route)

        # Update heuristic matrix based on route feasibility
        feasible = True
        for route in routes:
            total_demand = sum(demands[i] for i in route if i != 0)
            if total_demand > capacity:
                feasible = False
                break

        if feasible:
            for route in routes:
                for i in range(len(route) - 1):
                    node1 = route[i]
                    node2 = route[i+1]
                    heuristics_matrix[node1, node2] += 1
                    heuristics_matrix[node2, node1] += 1
        else:
            # Penalize edges in infeasible solutions
             for route in routes:
                for i in range(len(route) - 1):
                    node1 = route[i]
                    node2 = route[i+1]
                    heuristics_matrix[node1, node2] -= 0.5
                    heuristics_matrix[node2, node1] -= 0.5

    return heuristics_matrix
