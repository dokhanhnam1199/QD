import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples multiple random routes using a nearest neighbor approach within capacity constraints, and aggregates edge frequencies across feasible routes to create a heuristic matrix.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000

    for _ in range(num_samples):
        unvisited = set(range(1, n))
        routes = []
        current_route = [0]
        current_demand = 0
        
        while unvisited:
            current_node = current_route[-1]
            nearest_neighbor = None
            min_distance = float('inf')

            for neighbor in unvisited:
                if demands[neighbor] + current_demand <= capacity:
                    distance = distance_matrix[current_node, neighbor]
                    if distance < min_distance:
                        min_distance = distance
                        nearest_neighbor = neighbor

            if nearest_neighbor is not None:
                current_route.append(nearest_neighbor)
                current_demand += demands[nearest_neighbor]
                unvisited.remove(nearest_neighbor)
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_demand = 0
        
        current_route.append(0)
        routes.append(current_route)

        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1

    return heuristics_matrix
