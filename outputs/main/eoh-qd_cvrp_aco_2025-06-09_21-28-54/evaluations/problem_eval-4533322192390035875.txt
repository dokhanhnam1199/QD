import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm iteratively constructs routes by probabilistically selecting the next customer based on a combination of distance and demand, favoring closer and less demanding customers while respecting capacity constraints, and then aggregates edge usage frequency in these probabilistically constructed feasible routes to create a heuristic matrix.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_iterations = 1000

    for _ in range(num_iterations):
        routes = []
        unvisited_customers = set(range(1, n))
        current_route = [0]
        current_capacity = 0

        while unvisited_customers:
            eligible_customers = [(c, distance_matrix[current_route[-1], c], demands[c]) for c in unvisited_customers if current_capacity + demands[c] <= capacity]

            if not eligible_customers:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_capacity = 0
                eligible_customers = [(c, distance_matrix[current_route[-1], c], demands[c]) for c in unvisited_customers if current_capacity + demands[c] <= capacity]
                if not eligible_customers:
                    break  # No feasible customers from depot, likely infeasible problem

            # Probabilistic customer selection
            probabilities = []
            total_prob = 0
            for customer, distance, demand in eligible_customers:
                #Heuristic to favor closer and less demanding customers
                prob = 1 / (distance * demand + 1e-6)
                probabilities.append(prob)
                total_prob += prob

            if total_prob > 0:
                probabilities = [p / total_prob for p in probabilities]
                chosen_customer_index = random.choices(range(len(eligible_customers)), weights=probabilities, k=1)[0]
                chosen_customer, _, _ = eligible_customers[chosen_customer_index]

                current_route.append(chosen_customer)
                current_capacity += demands[chosen_customer]
                unvisited_customers.remove(chosen_customer)
            else:
                break  # No feasible customers, likely infeasible problem

        if current_route != [0]:
            current_route.append(0)
            routes.append(current_route)

        #Update the heuristic matrix
        for route in routes:
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                heuristics_matrix[u, v] += 1
                heuristics_matrix[v, u] += 1

    return heuristics_matrix
