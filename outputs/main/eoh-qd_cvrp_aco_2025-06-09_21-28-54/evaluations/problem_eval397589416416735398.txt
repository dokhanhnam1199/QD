import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm estimates edge inclusion probabilities by iteratively constructing routes using a nearest neighbor approach with stochastic route completion and counting edge occurrences.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros((n, n))
    num_iterations = 1000  # Number of random route generation iterations

    for _ in range(num_iterations):
        # Start with a random customer
        start_node = random.randint(1, n - 1)
        routes = []
        current_route = [0, start_node]
        current_capacity = demands[start_node]
        unvisited = set(range(1, n))
        unvisited.remove(start_node)

        while unvisited:
            # Find the nearest neighbor among unvisited customers
            nearest_neighbor = None
            min_distance = float('inf')
            for neighbor in unvisited:
                distance = distance_matrix[current_route[-1], neighbor]
                if distance < min_distance and current_capacity + demands[neighbor] <= capacity:
                    nearest_neighbor = neighbor
                    min_distance = distance

            if nearest_neighbor is not None:
                current_route.append(nearest_neighbor)
                current_capacity += demands[nearest_neighbor]
                unvisited.remove(nearest_neighbor)
            else:
                # No feasible neighbor, return to depot and start a new route with a random unvisited node
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_capacity = 0
                if unvisited:
                    next_start = random.choice(list(unvisited))
                    current_route.append(next_start)
                    current_capacity = demands[next_start]
                    unvisited.remove(next_start)

        current_route.append(0)  # Return to depot
        routes.append(current_route)

        # Update heuristics matrix based on the edges in the generated routes
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i + 1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1  # Since the problem is symmetric

    # Normalize the heuristics matrix to get probabilities
    heuristics_matrix = heuristics_matrix / num_iterations

    return heuristics_matrix
