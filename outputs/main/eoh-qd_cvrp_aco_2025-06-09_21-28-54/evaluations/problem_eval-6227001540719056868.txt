import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm constructs a heuristics matrix by stochastically sampling feasible routes based on distance and capacity constraints, favoring routes that efficiently utilize vehicle capacity while penalizing longer distances.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000

    for _ in range(num_samples):
        # Start from the depot
        current_node = 0
        current_route = [0]
        remaining_nodes = set(range(1, n))
        current_load = 0

        while remaining_nodes:
            # Find feasible neighbors
            feasible_neighbors = []
            for neighbor in remaining_nodes:
                if current_load + demands[neighbor] <= capacity:
                    feasible_neighbors.append(neighbor)
            
            if not feasible_neighbors:
                # Return to depot
                current_route.append(0)
                for i in range(len(current_route) - 1):
                    heuristics_matrix[current_route[i], current_route[i+1]] += 1
                current_node = 0
                current_load = 0
                current_route = [0]

                feasible_neighbors = []
                for neighbor in remaining_nodes:
                    if current_load + demands[neighbor] <= capacity:
                        feasible_neighbors.append(neighbor)
                if not feasible_neighbors:
                    break #impossible route

            # Choose next node stochastically based on capacity utilization, penalizing longer distances
            probabilities = []
            total_score = 0
            for neighbor in feasible_neighbors:
                # Score based on capacity utilization and distance penalty
                capacity_utilization = demands[neighbor] / capacity
                distance_penalty = distance_matrix[current_node, neighbor]
                score = capacity_utilization / (distance_penalty + 1e-6)  # Avoid division by zero
                total_score += score
                probabilities.append(score)

            # Normalize probabilities
            if total_score > 0:
                probabilities = [p / total_score for p in probabilities]
            else:
                probabilities = [1 / len(feasible_neighbors)] * len(feasible_neighbors)  # Uniform probability if total_score is zero

            try:
                next_node = np.random.choice(feasible_neighbors, p=probabilities)
            except ValueError:
                next_node = feasible_neighbors[0]

            current_route.append(next_node)
            remaining_nodes.remove(next_node)
            current_load += demands[next_node]
            current_node = next_node
            
        # Return to depot
        current_route.append(0)
        for i in range(len(current_route) - 1):
            heuristics_matrix[current_route[i], current_route[i+1]] += 1
    return heuristics_matrix
