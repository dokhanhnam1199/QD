import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm generates a heuristic matrix by iteratively improving random routes using a local search approach, favoring edges that lead to lower cost and feasible routes.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 500 # Number of initial random solutions
    num_iterations = 5 # Number of local search iterations per sample

    for _ in range(num_samples):
        # Generate an initial random solution
        customer_indices = list(range(1, n))
        random.shuffle(customer_indices)

        routes = []
        current_route = [0]
        current_demand = 0

        for customer in customer_indices:
            if current_demand + demands[customer] <= capacity:
                current_route.append(customer)
                current_demand += demands[customer]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, customer]
                current_demand = demands[customer]

        current_route.append(0)
        routes.append(current_route)

        # Local Search - Swap nodes between routes to improve solution
        for _ in range(num_iterations):
            # Choose two random routes
            if len(routes) < 2:
                break
            route1_idx, route2_idx = random.sample(range(len(routes)), 2)
            route1, route2 = routes[route1_idx], routes[route2_idx]

            # Choose a random node from each route (excluding depot)
            if len(route1) <= 2 or len(route2) <= 2:
                continue

            node1_idx = random.randint(1, len(route1) - 2)
            node2_idx = random.randint(1, len(route2) - 2)
            node1, node2 = route1[node1_idx], route2[node2_idx]

            # Check if swapping is feasible
            route1_demand = sum(demands[node] for node in route1)
            route2_demand = sum(demands[node] for node in route2)
            if route1_demand - demands[node1] + demands[node2] <= capacity and \
               route2_demand - demands[node2] + demands[node1] <= capacity:

                # Swap the nodes
                route1[node1_idx], route2[node2_idx] = node2, node1

                #Update Routes
                routes[route1_idx], routes[route2_idx] = route1, route2

        # Check feasibility of the routes
        feasible = True
        for route in routes:
            total_demand = 0
            for node in route:
                total_demand += demands[node]
            if total_demand > capacity:
                feasible = False
                break

        # Update heuristic matrix based on the 'improved' solution
        if feasible:
            for route in routes:
                for i in range(len(route) - 1):
                    node1 = route[i]
                    node2 = route[i+1]
                    heuristics_matrix[node1, node2] += 1
                    heuristics_matrix[node2, node1] += 1

    # Normalize the heuristic matrix
    heuristics_matrix = heuristics_matrix / num_samples

    return heuristics_matrix
