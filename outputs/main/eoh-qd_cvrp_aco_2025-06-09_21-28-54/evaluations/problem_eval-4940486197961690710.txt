import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm iteratively constructs routes by selecting the nearest feasible node with a probability proportional to the remaining capacity, building a heuristic matrix by aggregating edge occurrences across multiple route constructions.}"""
    n = len(demands)
    heuristics_matrix = np.zeros((n, n))
    num_routes = 1000

    for _ in range(num_routes):
        current_node = 0
        current_route = [0]
        remaining_nodes = set(range(1, n))
        current_load = 0

        while remaining_nodes:
            # Find feasible neighbors
            feasible_neighbors = [node for node in remaining_nodes if current_load + demands[node] <= capacity]

            if not feasible_neighbors:
                current_route.append(0)
                for i in range(len(current_route) - 1):
                    heuristics_matrix[current_route[i], current_route[i + 1]] += 1
                current_node = 0
                current_load = 0
                current_route = [0]
                remaining_nodes = set(range(1, n))
                for node in current_route[1:]:
                    if node != 0:
                        try:
                            remaining_nodes.remove(node)
                        except:
                            pass
                feasible_neighbors = [node for node in remaining_nodes if current_load + demands[node] <= capacity]
                if not feasible_neighbors:
                    break

            # Choose the nearest feasible neighbor with probability proportional to remaining capacity
            distances = [distance_matrix[current_node, neighbor] for neighbor in feasible_neighbors]
            remaining_capacities = [capacity - current_load - demands[neighbor] for neighbor in feasible_neighbors]
            probabilities = [(1 / d) * (rc / capacity) for d, rc in zip(distances, remaining_capacities)]
            total_probability = sum(probabilities)

            if total_probability > 0:
                probabilities = [p / total_probability for p in probabilities]
                next_node = random.choices(feasible_neighbors, weights=probabilities, k=1)[0]
            else:
                next_node = random.choice(feasible_neighbors)

            current_route.append(next_node)
            remaining_nodes.remove(next_node)
            current_load += demands[next_node]
            current_node = next_node
            
        current_route.append(0)
        for i in range(len(current_route) - 1):
            heuristics_matrix[current_route[i], current_route[i + 1]] += 1

    return heuristics_matrix
