import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm adaptively weights the edge selection probability based on edge distance and demand similarity of connected nodes, and then uses these probabilities to sample routes and construct a heuristic matrix.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    # Calculate demand similarity matrix
    demand_similarity = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            demand_similarity[i, j] = 1 - abs(demands[i] - demands[j]) / max(1, (demands[i] + demands[j]))

    # Calculate edge selection probabilities based on distance and demand similarity
    edge_probabilities = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                edge_probabilities[i, j] = (1 / (distance_matrix[i, j] + 1e-6)) * (demand_similarity[i, j] + 0.1)
            else:
                edge_probabilities[i, j] = 0
    
    # Normalize probabilities
    for i in range(n):
        row_sum = np.sum(edge_probabilities[i, :])
        if row_sum > 0:
            edge_probabilities[i, :] /= row_sum

    for _ in range(num_samples):
        customer_indices = list(range(1, n))
        random.shuffle(customer_indices)

        routes = []
        current_route = [0]
        current_load = 0

        for customer in customer_indices:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, customer]
                current_load = demands[customer]

        current_route.append(0)
        routes.append(current_route)
        
        visited_customers = set()
        for route in routes:
          visited_customers.update(route)
        
        valid_solution = True
        for i in range(1, n):
            if i not in visited_customers:
                valid_solution = False
                break

        if valid_solution:
            for route in routes:
                for i in range(len(route) - 1):
                    node1 = route[i]
                    node2 = route[i + 1]
                    heuristics_matrix[node1, node2] += 1
                    heuristics_matrix[node2, node1] += 1

    return heuristics_matrix
