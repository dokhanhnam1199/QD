import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples a set of random routes, evaluates their feasibility and cost, and then uses the edge frequencies in feasible routes to construct a heuristic matrix.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding depot)
        permutation = random.sample(range(1, n), n - 1)

        # Route construction
        routes = []
        current_route = [0]
        current_load = 0

        for customer in permutation:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, customer]
                current_load = demands[customer]

        current_route.append(0)
        routes.append(current_route)

        # Feasibility check
        feasible = True
        for route in routes:
            route_load = 0
            for customer in route:
                route_load += demands[customer]
            if route_load > capacity:
                feasible = False
                break

        # Update heuristics matrix if the solution is feasible
        if feasible:
            for route in routes:
                for i in range(len(route) - 1):
                    u = route[i]
                    v = route[i+1]
                    heuristics_matrix[u, v] += 1
                    heuristics_matrix[v, u] += 1 #since the distances are assumed to be symmetric, we can add the opposite direction

    # Normalize the heuristics matrix
    heuristics_matrix = heuristics_matrix / num_samples

    return heuristics_matrix
