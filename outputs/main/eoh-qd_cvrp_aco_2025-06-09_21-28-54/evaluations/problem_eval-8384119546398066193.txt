import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm constructs a heuristics matrix by stochastically sampling feasible routes using a combination of distance and demand-based probabilities, and also incorporates a penalty for routes that leave capacity significantly underutilized.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000

    for _ in range(num_samples):
        current_node = 0
        current_route = [0]
        remaining_nodes = set(range(1, n))
        current_load = 0

        while remaining_nodes:
            feasible_neighbors = []
            for neighbor in remaining_nodes:
                if current_load + demands[neighbor] <= capacity:
                    feasible_neighbors.append(neighbor)

            if not feasible_neighbors:
                current_route.append(0)
                for i in range(len(current_route) - 1):
                    heuristics_matrix[current_route[i], current_route[i+1]] += 1
                current_node = 0
                current_load = 0
                current_route = [0]
                feasible_neighbors = []
                for neighbor in remaining_nodes:
                    if current_load + demands[neighbor] <= capacity:
                        feasible_neighbors.append(neighbor)
                if not feasible_neighbors:
                    break

            # Choose next node stochastically based on a combined distance and demand probability
            probabilities = []
            total_prob = 0
            for neighbor in feasible_neighbors:
                distance_factor = 1 / distance_matrix[current_node, neighbor]
                demand_factor = demands[neighbor] / capacity #demand ratio for neighbor selection.
                combined_factor = distance_factor * (1 + demand_factor) #bias neighbor selection by demand as well.
                total_prob += combined_factor
                probabilities.append(combined_factor)
            
            probabilities = [p / total_prob for p in probabilities]

            try:
                next_node = np.random.choice(feasible_neighbors, p=probabilities)
            except ValueError:
                next_node = feasible_neighbors[0]

            current_route.append(next_node)
            remaining_nodes.remove(next_node)
            current_load += demands[next_node]
            current_node = next_node

        current_route.append(0)

        # Penalize routes with poor capacity utilization
        route_load = sum(demands[node] for node in current_route if node !=0)
        capacity_utilization = route_load / capacity if route_load > 0 else 0

        # Apply the penalty based on capacity utilization
        if capacity_utilization < 0.5:
            penalty = 0.5  # Example penalty factor
            for i in range(len(current_route) - 1):
                heuristics_matrix[current_route[i], current_route[i+1]] += (1- penalty)

        else:

            for i in range(len(current_route) - 1):
                heuristics_matrix[current_route[i], current_route[i+1]] += 1


    return heuristics_matrix
