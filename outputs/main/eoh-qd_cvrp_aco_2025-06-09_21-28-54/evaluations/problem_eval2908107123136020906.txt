import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm adaptively adjusts edge weights based on route cost and feasibility, favoring edges in low-cost feasible routes found during a stochastic sampling process.}"""
    n = len(demands)
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000
    alpha = 0.1  # Learning rate

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        customer_indices = list(range(1, n))
        random.shuffle(customer_indices)

        # Create routes based on capacity constraint
        routes = []
        current_route = [0]  # Start at the depot
        current_load = 0

        for customer in customer_indices:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]
                current_load = demands[customer]

        current_route.append(0)  # Complete the last route
        routes.append(current_route)

        # Calculate the total cost of the routes
        total_cost = 0
        for route in routes:
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                total_cost += distance_matrix[u, v]

        # Check for feasibility
        feasible = True
        for route in routes:
            route_demand = sum(demands[node] for node in route)
            if route_demand > capacity:
                feasible = False
                break

        # Update heuristics matrix based on cost and feasibility
        if feasible:
            for route in routes:
                for i in range(len(route) - 1):
                    u = route[i]
                    v = route[i+1]
                    # Reward edges in low-cost feasible routes
                    heuristics_matrix[u, v] += alpha * (1 / (1 + total_cost))
                    heuristics_matrix[v, u] += alpha * (1 / (1 + total_cost))
        else:
            for route in routes:
                for i in range(len(route) - 1):
                    u = route[i]
                    v = route[i+1]
                    # Penalize edges in infeasible routes
                    heuristics_matrix[u, v] -= alpha * 0.1  # Small penalty
                    heuristics_matrix[v, u] -= alpha * 0.1

    return heuristics_matrix
