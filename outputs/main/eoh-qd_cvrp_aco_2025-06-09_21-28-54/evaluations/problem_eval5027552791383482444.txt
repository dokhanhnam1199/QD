import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm iteratively constructs routes by probabilistically selecting the next customer based on distance and demand, and then updates a heuristic matrix reflecting the frequency of edges in feasible routes, weighted by route length.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_iterations = 1000

    for _ in range(num_iterations):
        routes = []
        unvisited = set(range(1, n))
        current_route = [0]
        current_demand = 0

        while unvisited:
            current_node = current_route[-1]
            possible_next = []
            for node in unvisited:
                if current_demand + demands[node] <= capacity:
                    possible_next.append(node)
            
            if not possible_next:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_demand = 0
                continue

            probabilities = []
            total_distance = sum(distance_matrix[current_node, node] for node in possible_next)
            for node in possible_next:
                probabilities.append((1 / distance_matrix[current_node, node]) / (sum(1 / distance_matrix[current_node, k] for k in possible_next))) if total_distance > 0 else probabilities.append(1/len(possible_next))
            
            next_node = random.choices(possible_next, probabilities)[0]
            current_route.append(next_node)
            current_demand += demands[next_node]
            unvisited.remove(next_node)
            
        current_route.append(0)
        routes.append(current_route)

        route_length = sum(distance_matrix[routes[0][i], routes[0][i+1]] for i in range(len(routes[0])-1))
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += 1 / route_length if route_length > 0 else 1
                heuristics_matrix[node2, node1] += 1 / route_length if route_length > 0 else 1

    return heuristics_matrix
