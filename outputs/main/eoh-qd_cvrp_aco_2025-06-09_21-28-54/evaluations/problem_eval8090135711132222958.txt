import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm generates multiple random routes, evaluates their feasibility and cost, and uses the inverse of the total distance of each route to construct a heuristic matrix.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        customer_indices = list(range(1, n))
        random.shuffle(customer_indices)

        routes = []
        current_route = [0]
        current_load = 0

        for customer in customer_indices:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, customer]
                current_load = demands[customer]

        current_route.append(0)  # Return to depot
        routes.append(current_route)

        # Check feasibility (all customers visited)
        visited_customers = set()
        for route in routes:
          visited_customers.update(route)
        
        valid_solution = True
        for i in range(1, n):
            if i not in visited_customers:
                valid_solution = False
                break
                
        if valid_solution:
            total_distance = 0
            for route in routes:
                for i in range(len(route) - 1):
                    node1 = route[i]
                    node2 = route[i + 1]
                    total_distance += distance_matrix[node1, node2]

            if total_distance > 0:
                route_score = 1.0 / total_distance
            else:
                route_score = 0

            # Update heuristic matrix based on edges in the route
            for route in routes:
                for i in range(len(route) - 1):
                    node1 = route[i]
                    node2 = route[i + 1]
                    heuristics_matrix[node1, node2] += route_score
                    heuristics_matrix[node2, node1] += route_score  # Symmetric

    return heuristics_matrix
