import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm iteratively constructs routes by probabilistically selecting the next customer based on a combination of distance and demand, penalizing choices that lead to infeasibility.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_iterations = 1000
    alpha = 1.0  # Weight for distance
    beta = 2.0   # Weight for demand
    gamma = 5.0

    for _ in range(num_iterations):
        current_route = [0]
        current_load = 0
        unvisited = set(range(1, n))
        
        while unvisited:
            current_node = current_route[-1]
            probabilities = []
            candidates = []
            
            for neighbor in unvisited:
                if current_load + demands[neighbor] <= capacity:
                    candidates.append(neighbor)
                    distance_score = (1 / distance_matrix[current_node, neighbor]) ** alpha
                    demand_score = (1 / demands[neighbor]) ** beta
                    probabilities.append(distance_score * demand_score)
                else:
                    probabilities.append(0) 
            
            if not candidates: #If can't add to current route, return to depot
                current_route.append(0)
                current_load = 0
                continue
                

            probabilities = np.array(probabilities)
            probabilities /= probabilities.sum() if probabilities.sum() > 0 else 1e-6

            next_node = random.choices(candidates, weights=probabilities[:len(candidates)], k=1)[0]
            
            
            current_route.append(next_node)
            current_load += demands[next_node]
            unvisited.remove(next_node)

        current_route.append(0)

        for i in range(len(current_route) - 1):
            heuristics_matrix[current_route[i], current_route[i+1]] += 1
            heuristics_matrix[current_route[i+1], current_route[i]] += 1
    
    return heuristics_matrix
