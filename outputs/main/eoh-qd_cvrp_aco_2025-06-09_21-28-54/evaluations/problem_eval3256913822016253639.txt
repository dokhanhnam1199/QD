import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm refines edge inclusion probabilities by iteratively generating routes, probabilistically accepting them based on cost, and updating edge frequencies.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_iterations = 1000
    temperature = 100.0  # Initial temperature for simulated annealing

    for _ in range(num_iterations):
        # Generate a random permutation of customers (excluding depot)
        permutation = random.sample(range(1, n), n - 1)

        # Route construction
        routes = []
        current_route = [0]
        current_load = 0

        for customer in permutation:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, customer]
                current_load = demands[customer]

        current_route.append(0)
        routes.append(current_route)

        # Calculate the cost of the routes
        total_cost = 0
        for route in routes:
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i + 1]
                total_cost += distance_matrix[u, v]

        # Probabilistic acceptance based on cost (Simulated Annealing-like)
        if _ == 0:
          accept = True
        else:
          delta_cost = total_cost - previous_cost
          if delta_cost < 0:
              accept = True
          else:
              probability = np.exp(-delta_cost / temperature)
              accept = random.random() < probability
        
        if accept:
            # Update heuristics matrix if the solution is accepted
            for route in routes:
                for i in range(len(route) - 1):
                    u = route[i]
                    v = route[i+1]
                    heuristics_matrix[u, v] += 1
                    heuristics_matrix[v, u] += 1

            previous_cost = total_cost

        temperature *= 0.99  # Cool down the temperature

    # Normalize the heuristics matrix
    heuristics_matrix = heuristics_matrix / num_iterations

    return heuristics_matrix
