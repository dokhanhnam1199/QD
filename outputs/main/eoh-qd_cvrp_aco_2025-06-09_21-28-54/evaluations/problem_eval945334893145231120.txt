import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm samples a large number of random routes, evaluates their feasibility and cost, and updates the heuristics matrix based on the inverse of the route cost, giving more weight to cheaper routes.}"""

    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        customer_permutation = list(range(1, n))
        random.shuffle(customer_permutation)

        # Construct routes based on capacity constraints
        routes = []
        current_route = [0]  # Start at the depot
        current_demand = 0

        for customer in customer_permutation:
            if current_demand + demands[customer] <= capacity:
                current_route.append(customer)
                current_demand += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]  # Start new route from depot
                current_demand = demands[customer]

        current_route.append(0)
        routes.append(current_route)
        
        # Calculate the cost of the routes
        route_cost = 0
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                route_cost += distance_matrix[node1, node2]

        # Update heuristics matrix based on the inverse of the route cost
        if route_cost > 0:
            weight = 1.0 / route_cost
        else:
            weight = 0 #avoid division by zero
            
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += weight
                heuristics_matrix[node2, node1] += weight
        

    return heuristics_matrix
