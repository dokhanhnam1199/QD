import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm uses a guided sampling approach where initial routes are generated randomly, then iteratively improved by swapping nodes between routes based on cost reduction and feasibility, updating a heuristic matrix based on edge frequency in improved routes.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 500
    num_iterations = 5

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding depot)
        customer_indices = np.random.permutation(np.arange(1, n))
        
        # Create initial routes based on capacity constraints
        routes = []
        current_route = [0]
        current_capacity = 0
        
        for customer in customer_indices:
            if current_capacity + demands[customer] <= capacity:
                current_route.append(customer)
                current_capacity += demands[customer]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, customer]
                current_capacity = demands[customer]

        current_route.append(0)
        routes.append(current_route)

        #Iterative Improvement
        for _ in range(num_iterations):
            # Try swapping nodes between routes
            for i in range(len(routes)):
                for j in range(len(routes)):
                    if i == j:
                        continue

                    for node1_idx in range(1,len(routes[i])-1):
                        for node2_idx in range(1, len(routes[j])-1):
                            node1 = routes[i][node1_idx]
                            node2 = routes[j][node2_idx]

                            #Check feasibility if swapped
                            route_i_without_node1_capacity = sum([demands[node] for node in routes[i] if node!=0 and node != node1])
                            route_j_without_node2_capacity = sum([demands[node] for node in routes[j] if node!=0 and node != node2])

                            if route_i_without_node1_capacity + demands[node2] <= capacity and route_j_without_node2_capacity + demands[node1] <= capacity:
                                #Calculate distance change if swap
                                dist_change = (distance_matrix[routes[i][node1_idx-1], node2] + distance_matrix[node2, routes[i][node1_idx+1]] -
                                            distance_matrix[routes[i][node1_idx-1], node1] - distance_matrix[node1, routes[i][node1_idx+1]] +
                                            distance_matrix[routes[j][node2_idx-1], node1] + distance_matrix[node1, routes[j][node2_idx+1]] -
                                            distance_matrix[routes[j][node2_idx-1], node2] - distance_matrix[node2, routes[j][node2_idx+1]])
                                
                                #Swap if distance improves
                                if dist_change < 0:
                                    routes[i][node1_idx], routes[j][node2_idx] = routes[j][node2_idx], routes[i][node1_idx]

        
        # Update the heuristic matrix with edges present in the route
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1
                
    return heuristics_matrix
