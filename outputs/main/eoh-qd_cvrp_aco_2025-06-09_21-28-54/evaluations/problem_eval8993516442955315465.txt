import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm generates routes by iteratively adding the nearest feasible customer to the current route, and updates a heuristic matrix based on the edges used in these routes, weighted by the inverse of the edge distance.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_iterations = 500

    for _ in range(num_iterations):
        unvisited = set(range(1, n))  # All customers initially unvisited
        routes = []
        current_route = [0]  # Start at the depot
        current_demand = 0

        while unvisited:
            current_node = current_route[-1]
            nearest_customer = None
            min_distance = float('inf')

            for customer in unvisited:
                if demands[customer] + current_demand <= capacity and distance_matrix[current_node, customer] < min_distance:
                    nearest_customer = customer
                    min_distance = distance_matrix[current_node, customer]

            if nearest_customer is not None:
                current_route.append(nearest_customer)
                current_demand += demands[nearest_customer]
                unvisited.remove(nearest_customer)
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0]  # Start a new route
                current_demand = 0
        if len(current_route) > 1:
            current_route.append(0)
            routes.append(current_route)

        # Update heuristics matrix based on edges in the routes
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += 1 / distance_matrix[node1, node2] if distance_matrix[node1, node2] > 0 else 0
                heuristics_matrix[node2, node1] += 1 / distance_matrix[node2, node1] if distance_matrix[node2, node1] > 0 else 0

    return heuristics_matrix
