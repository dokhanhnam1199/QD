import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm samples multiple routes, biased towards shorter edges, evaluates feasibility based on capacity, and uses the frequency of edges in feasible routes, weighted by edge length, to build a heuristic matrix.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a biased random permutation favoring closer customers
        customer_indices = np.arange(1, n)
        distances_to_depot = distance_matrix[0, 1:]
        probabilities = 1 / (distances_to_depot + 1e-6)  # Avoid division by zero
        probabilities /= np.sum(probabilities)
        
        customer_indices = np.random.choice(customer_indices, size=n-1, replace=False, p=probabilities)

        # Build a route based on the permutation, respecting capacity constraints
        routes = []
        current_route = [0]  # Start at the depot
        current_load = 0
        
        for customer in customer_indices:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]  # Start a new route
                current_load = demands[customer]

        current_route.append(0) # End the current route and return to the depot
        routes.append(current_route)

        # Update the heuristic matrix based on edges in the feasible routes, weighted by edge length
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                edge_length = distance_matrix[node1, node2]
                heuristics_matrix[node1, node2] += 1 / (edge_length + 1e-6) # Favor shorter edges
                heuristics_matrix[node2, node1] += 1 / (edge_length + 1e-6)  # Assuming symmetry

    return heuristics_matrix
