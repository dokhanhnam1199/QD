import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm generates multiple route sets using a nearest neighbor approach with capacity constraints, then evaluates and aggregates edge frequencies across these sets to build a heuristic matrix.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000

    for _ in range(num_samples):
        routes = []
        remaining_nodes = set(range(1, n))
        while remaining_nodes:
            current_route = [0]
            current_demand = 0
            current_node = 0  # Start from depot

            while True:
                # Find the nearest neighbor
                nearest_neighbor = None
                min_distance = float('inf')
                for neighbor in remaining_nodes:
                    if current_demand + demands[neighbor] <= capacity:
                        dist = distance_matrix[current_node, neighbor]
                        if dist < min_distance:
                            min_distance = dist
                            nearest_neighbor = neighbor

                if nearest_neighbor is None:
                    break  # No feasible neighbor found

                current_route.append(nearest_neighbor)
                current_demand += demands[nearest_neighbor]
                current_node = nearest_neighbor
                remaining_nodes.remove(nearest_neighbor)

            current_route.append(0)
            routes.append(current_route)

        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1

    return heuristics_matrix
