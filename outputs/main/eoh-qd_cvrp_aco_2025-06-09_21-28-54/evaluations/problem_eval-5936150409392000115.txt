import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm generates multiple candidate solutions using a construction heuristic guided by shortest distance and demand considerations, evaluates them based on total distance and feasibility, and then creates a heuristic matrix that reflects the frequency with which each edge appears in the top-performing solutions.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000
    top_solutions_to_consider = 100  # Consider only the top solutions

    solutions = []  # List to store (cost, routes) tuples

    for _ in range(num_samples):
        # Construct a solution using a simple greedy heuristic
        remaining_customers = set(range(1, n))
        routes = []
        current_route = [0]
        current_demand = 0

        while remaining_customers:
            # Find the nearest customer from the current location that fits within capacity
            last_node = current_route[-1]
            nearest_customer = None
            min_distance = float('inf')

            for customer in remaining_customers:
                if current_demand + demands[customer] <= capacity:
                    dist = distance_matrix[last_node, customer]
                    if dist < min_distance:
                        min_distance = dist
                        nearest_customer = customer

            if nearest_customer is not None:
                current_route.append(nearest_customer)
                current_demand += demands[nearest_customer]
                remaining_customers.remove(nearest_customer)
            else:
                # Close the current route and start a new one
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_demand = 0

        current_route.append(0)
        routes.append(current_route)

        # Calculate the total cost of the routes
        total_cost = 0
        for route in routes:
            for i in range(len(route) - 1):
                total_cost += distance_matrix[route[i], route[i+1]]

        solutions.append((total_cost, routes))

    # Sort the solutions by cost
    solutions.sort(key=lambda x: x[0])

    # Update the heuristic matrix based on the top solutions
    for i in range(min(top_solutions_to_consider, len(solutions))):
        _, routes = solutions[i]
        for route in routes:
            for j in range(len(route) - 1):
                node1 = route[j]
                node2 = route[j+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1

    # Normalize the heuristic matrix
    heuristics_matrix = heuristics_matrix / min(top_solutions_to_consider, len(solutions))

    return heuristics_matrix
