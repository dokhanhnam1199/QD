import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm constructs a heuristic matrix by sampling routes using a weighted combination of distance and demand to guide route construction, rewarding edges in routes that efficiently balance distance and capacity utilization.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        # Start from the depot
        current_node = 0
        current_route = [0]
        remaining_nodes = set(range(1, n))
        current_load = 0

        while remaining_nodes:
            # Find feasible neighbors
            feasible_neighbors = []
            for neighbor in remaining_nodes:
                if current_load + demands[neighbor] <= capacity:
                    feasible_neighbors.append(neighbor)
            
            if not feasible_neighbors:
                # Return to depot
                current_route.append(0)
                for i in range(len(current_route) - 1):
                    heuristics_matrix[current_route[i], current_route[i+1]] += 1
                    heuristics_matrix[current_route[i+1], current_route[i]] += 1
                current_node = 0
                current_load = 0
                current_route = [0]

                feasible_neighbors = []
                for neighbor in remaining_nodes:
                    if current_load + demands[neighbor] <= capacity:
                        feasible_neighbors.append(neighbor)
                if not feasible_neighbors:
                    break #impossible route

            # Choose next node stochastically based on distance and demand
            weights = []
            for neighbor in feasible_neighbors:
                distance_weight = 1 / distance_matrix[current_node, neighbor]
                demand_weight = (capacity - current_load - demands[neighbor]) / capacity  # Encourage filling capacity
                
                #Combine
                combined_weight = distance_weight + demand_weight
                weights.append(combined_weight)
            
            # Normalize weights to create probabilities
            total_weight = sum(weights)
            if total_weight > 0:
                probabilities = [w / total_weight for w in weights]
            else:
                probabilities = [1 / len(feasible_neighbors)] * len(feasible_neighbors)

            try:
                next_node = np.random.choice(feasible_neighbors, p=probabilities)
            except ValueError:
                next_node = feasible_neighbors[0]

            current_route.append(next_node)
            remaining_nodes.remove(next_node)
            current_load += demands[next_node]
            current_node = next_node
            
        # Return to depot
        current_route.append(0)
        for i in range(len(current_route) - 1):
            heuristics_matrix[current_route[i], current_route[i+1]] += 1
            heuristics_matrix[current_route[i+1], current_route[i]] += 1

    return heuristics_matrix
