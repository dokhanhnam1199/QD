import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm constructs initial routes based on nearest neighbors with capacity constraints, then iteratively improves the routes by swapping nodes between routes to minimize the total distance, updating a heuristic matrix based on edge frequency in improved routes.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_iterations = 100

    # Initialize routes using nearest neighbor with capacity constraint
    unvisited = set(range(1, n))
    routes = []
    while unvisited:
        current_route = [0]
        current_demand = 0
        last_node = 0
        while unvisited:
            nearest_neighbor = None
            min_distance = float('inf')
            for neighbor in unvisited:
                if distance_matrix[last_node, neighbor] < min_distance and current_demand + demands[neighbor] <= capacity:
                    nearest_neighbor = neighbor
                    min_distance = distance_matrix[last_node, neighbor]
            if nearest_neighbor is None:
                break
            current_route.append(nearest_neighbor)
            current_demand += demands[nearest_neighbor]
            unvisited.remove(nearest_neighbor)
            last_node = nearest_neighbor
        current_route.append(0)
        routes.append(current_route)

    # Iterative improvement by swapping nodes between routes
    for _ in range(num_iterations):
        best_routes = routes[:]
        best_distance = calculate_total_distance(routes, distance_matrix)

        for i in range(len(routes)):
            for j in range(i + 1, len(routes)):
                for node1_index in range(1, len(routes[i]) - 1):
                    for node2_index in range(1, len(routes[j]) - 1):
                        node1 = routes[i][node1_index]
                        node2 = routes[j][node2_index]

                        # Check capacity constraints after swap
                        route1_demand = sum(demands[node] for node in routes[i][1:-1]) - demands[node1] + demands[node2]
                        route2_demand = sum(demands[node] for node in routes[j][1:-1]) - demands[node2] + demands[node1]

                        if route1_demand <= capacity and route2_demand <= capacity:
                            new_routes = [route[:] for route in routes]  # Create deep copy
                            new_routes[i][node1_index] = node2
                            new_routes[j][node2_index] = node1

                            new_distance = calculate_total_distance(new_routes, distance_matrix)

                            if new_distance < best_distance:
                                best_distance = new_distance
                                best_routes = new_routes

        routes = best_routes  # Update routes with the best swap found
        

    # Update heuristics matrix based on the final routes
    for route in routes:
        for i in range(len(route) - 1):
            node1 = route[i]
            node2 = route[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1
    
    return heuristics_matrix

def calculate_total_distance(routes, distance_matrix):
    total_distance = 0
    for route in routes:
        for i in range(len(route) - 1):
            total_distance += distance_matrix[route[i], route[i+1]]
    return heuristics_matrix
