import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm iteratively refines a heuristic matrix by sampling routes and adjusting edge weights based on route cost and feasibility, favoring edges in lower-cost, feasible routes.}"""
    n = len(demands)
    heuristics_matrix = np.ones_like(distance_matrix)  # Initialize with ones to avoid division by zero
    learning_rate = 0.1
    num_iterations = 100
    num_samples_per_iteration = 10

    for _ in range(num_iterations):
        for _ in range(num_samples_per_iteration):
            # Generate a random permutation of customers (excluding the depot)
            customer_permutation = list(range(1, n))
            random.shuffle(customer_permutation)

            # Construct routes based on capacity constraints
            routes = []
            current_route = [0]  # Start at the depot
            current_demand = 0

            for customer in customer_permutation:
                if current_demand + demands[customer] <= capacity:
                    current_route.append(customer)
                    current_demand += demands[customer]
                else:
                    current_route.append(0)  # Return to depot
                    routes.append(current_route)
                    current_route = [0, customer]  # Start new route from depot
                    current_demand = demands[customer]

            current_route.append(0)
            routes.append(current_route)

            # Calculate route cost
            total_cost = 0
            for route in routes:
                for i in range(len(route) - 1):
                    node1 = route[i]
                    node2 = route[i + 1]
                    total_cost += distance_matrix[node1, node2]

            #Update heuristics matrix for each route
            is_feasible = True
            for route in routes:
                route_demand = 0
                for node in route:
                    if node !=0:
                        route_demand += demands[node]
                if route_demand > capacity and len(route) >2:
                    is_feasible = False
                    break


            if is_feasible:
                for route in routes:
                    for i in range(len(route) - 1):
                        node1 = route[i]
                        node2 = route[i + 1]
                        heuristics_matrix[node1, node2] *= (1 - learning_rate * (total_cost / np.sum(distance_matrix)))  # Decrease weight for edges in good routes
                        heuristics_matrix[node2, node1] = heuristics_matrix[node1, node2]
            else:
                for route in routes:
                    for i in range(len(route) - 1):
                        node1 = route[i]
                        node2 = route[i + 1]
                        heuristics_matrix[node1, node2] *= (1 + learning_rate * (total_cost / np.sum(distance_matrix)))  # Increase weight for edges in bad routes
                        heuristics_matrix[node2, node1] = heuristics_matrix[node1, node2]



    return heuristics_matrix
