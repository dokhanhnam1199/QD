import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm constructs a heuristic matrix by iteratively improving routes based on savings and penalizing edges that lead to capacity violations.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_iterations = 100

    for _ in range(num_iterations):
        # Initialize a random solution
        unvisited_customers = list(range(1, n))
        routes = []
        current_route = [0]
        current_load = 0

        while unvisited_customers:
            best_customer = None
            best_saving = -np.inf

            for customer in unvisited_customers:
                if current_load + demands[customer] <= capacity:
                    # Calculate savings: cost of going to depot and then customer vs. going directly to customer
                    saving = distance_matrix[current_route[-1], 0] + distance_matrix[0, customer] - distance_matrix[current_route[-1], customer]
                    if saving > best_saving:
                        best_saving = saving
                        best_customer = customer

            if best_customer is not None:
                current_route.append(best_customer)
                current_load += demands[best_customer]
                unvisited_customers.remove(best_customer)
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_load = 0

        current_route.append(0)
        routes.append(current_route)

        # Evaluate feasibility and update heuristics
        feasible = True
        for route in routes:
            total_demand = sum(demands[i] for i in route if i != 0)
            if total_demand > capacity:
                feasible = False
                break

        if feasible:
            for route in routes:
                for i in range(len(route) - 1):
                    node1 = route[i]
                    node2 = route[i+1]
                    heuristics_matrix[node1, node2] += 1
                    heuristics_matrix[node2, node1] += 1
        else:
            # Penalize edges in infeasible solutions
             for route in routes:
                for i in range(len(route) - 1):
                    node1 = route[i]
                    node2 = route[i+1]
                    heuristics_matrix[node1, node2] -= 0.5
                    heuristics_matrix[node2, node1] -= 0.5

    return heuristics_matrix
