import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples a large number of random routes, evaluates their feasibility and cost, and then uses the frequency with which each edge appears in feasible solutions to construct a heuristic matrix.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000 # Increased number of samples
    
    for _ in range(num_samples):
        
        # Generate a random permutation of customers (excluding depot)
        customer_indices = list(range(1, n))
        random.shuffle(customer_indices)
        
        # Construct routes based on capacity constraints
        routes = []
        current_route = [0]  # Start at the depot
        current_demand = 0
        
        for customer in customer_indices:
            if current_demand + demands[customer] <= capacity:
                current_route.append(customer)
                current_demand += demands[customer]
            else:
                current_route.append(0) # Return to depot
                routes.append(current_route)
                current_route = [0, customer] # Start a new route at depot
                current_demand = demands[customer]
        
        current_route.append(0) # Return to depot at the end
        routes.append(current_route)

        #Check feasibility. For simplicity, we suppose that all demands[i] < capacity.
        feasible = True
        for route in routes:
            total_demand = 0
            for node in route:
                total_demand += demands[node]
            if total_demand > capacity:
                feasible = False
                break
                
        # Update the heuristic matrix
        if feasible:
            for route in routes:
                for i in range(len(route) - 1):
                    node1 = route[i]
                    node2 = route[i+1]
                    heuristics_matrix[node1, node2] += 1
                    heuristics_matrix[node2, node1] += 1  # Symmetric

    # Normalize the heuristic matrix
    heuristics_matrix = heuristics_matrix / num_samples

    return heuristics_matrix
