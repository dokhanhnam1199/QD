import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples a set of random routes, evaluates them based on a weighted combination of distance and capacity constraints, and constructs a heuristic matrix by aggregating the inverse of the cost of each edge appearing in feasible routes.}
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000
    alpha = 0.5  # Weight for distance
    beta = 0.5   # Weight for capacity

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding depot)
        customer_indices = np.random.permutation(np.arange(1, n))
        
        # Create routes based on capacity constraints
        routes = []
        current_route = [0]
        current_capacity = 0
        
        for customer in customer_indices:
            if current_capacity + demands[customer] <= capacity:
                current_route.append(customer)
                current_capacity += demands[customer]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, customer]
                current_capacity = demands[customer]

        current_route.append(0)
        routes.append(current_route)
        
        # Update the heuristic matrix with edges present in the route
        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                
                # Cost of the edge: weighted sum of distance and capacity impact
                distance_cost = distance_matrix[node1, node2]
                capacity_impact = demands[node2] if node2 != 0 else 0  # Avoid capacity impact for returning to depot

                cost = alpha * distance_cost + beta * capacity_impact
                
                # Heuristic value is inversely proportional to the cost
                if cost > 0:  # Avoid division by zero
                    heuristics_matrix[node1, node2] += 1/cost
                    heuristics_matrix[node2, node1] += 1/cost
                
    return heuristics_matrix
