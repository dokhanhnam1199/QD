import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm samples multiple routes with a probabilistic node selection based on distance and demand, evaluates their feasibility, and updates a heuristic matrix reflecting edge frequencies in feasible routes.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        current_node = 0
        current_route = [0]
        current_load = 0
        unvisited = set(range(1, n))
        
        while unvisited:
            # Calculate probabilities for each unvisited node
            probabilities = []
            for node in unvisited:
                # Favor closer nodes and nodes with smaller demands
                distance_factor = 1 / (distance_matrix[current_node, node] + 1e-6)  # Avoid division by zero
                demand_factor = 1 / (demands[node] + 1e-6)
                probabilities.append(distance_factor * demand_factor)

            # Normalize probabilities
            probabilities = np.array(probabilities)
            probabilities /= np.sum(probabilities)

            # Choose the next node based on the probabilities
            next_node = np.random.choice(list(unvisited), p=probabilities)
            
            if current_load + demands[next_node] <= capacity:
                current_route.append(next_node)
                current_load += demands[next_node]
                current_node = next_node
                unvisited.remove(next_node)
            else:
                current_route.append(0)
                current_route.append(next_node)
                current_load = demands[next_node]
                current_node = next_node
                unvisited.remove(next_node)
        
        current_route.append(0)
        
        # Update heuristic matrix
        for i in range(len(current_route) - 1):
            node1 = current_route[i]
            node2 = current_route[i+1]
            heuristics_matrix[node1, node2] += 1
            heuristics_matrix[node2, node1] += 1

    return heuristics_matrix
