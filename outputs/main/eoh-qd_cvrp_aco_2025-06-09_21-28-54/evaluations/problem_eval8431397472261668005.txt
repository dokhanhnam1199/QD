import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm estimates edge inclusion probabilities by iteratively constructing routes using a nearest neighbor approach with stochastic acceptance based on route feasibility, and updates edge counts accordingly.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros((n, n))
    num_iterations = 1000

    for _ in range(num_iterations):
        routes = []
        unvisited = set(range(1, n))
        current_route = [0]
        current_capacity = 0
        
        while unvisited:
            
            # Find nearest neighbor within capacity
            nearest_neighbor = None
            min_distance = float('inf')

            eligible_neighbors = []
            for neighbor in unvisited:
                if current_capacity + demands[neighbor] <= capacity:
                  eligible_neighbors.append(neighbor)
            
            if not eligible_neighbors:
                routes.append(current_route + [0])
                current_route = [0]
                current_capacity = 0
                continue
            
            for neighbor in eligible_neighbors:
                dist = distance_matrix[current_route[-1], neighbor]
                if dist < min_distance:
                    min_distance = dist
                    nearest_neighbor = neighbor

            #Stochastic acceptance: accept nearest neighbor with 0.8 probability.
            if random.random() < 0.8 and nearest_neighbor is not None: 
                current_route.append(nearest_neighbor)
                current_capacity += demands[nearest_neighbor]
                unvisited.remove(nearest_neighbor)
            else:
                #If random number > 0.8, then select a random neighbor
                random_neighbor = random.choice(eligible_neighbors)
                current_route.append(random_neighbor)
                current_capacity += demands[random_neighbor]
                unvisited.remove(random_neighbor)


        routes.append(current_route + [0])

        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i + 1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1

    heuristics_matrix = heuristics_matrix / num_iterations

    return heuristics_matrix
