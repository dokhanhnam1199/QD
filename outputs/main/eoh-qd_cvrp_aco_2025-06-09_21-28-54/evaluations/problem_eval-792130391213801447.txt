import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm samples many random routes, evaluates their feasibility and cost, and uses the frequency of each edge appearing in feasible routes as a heuristic.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        permutation = random.sample(range(1, n), n - 1)
        
        # Construct routes based on capacity constraints
        routes = []
        current_route = [0]  # Start at the depot
        current_load = 0
        
        for customer in permutation:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]  # Start a new route from depot
                current_load = demands[customer]
        
        current_route.append(0) # return to depot
        routes.append(current_route)
        
        # Evaluate feasibility (all customers visited)
        visited_customers = set()
        for route in routes:
            visited_customers.update(route)
        
        valid_permutation = all(i in visited_customers for i in range(1,n))
    
        # Update heuristics matrix if the permutation yields a valid routing
        if valid_permutation:
          for route in routes:
            for i in range(len(route) - 1):
                heuristics_matrix[route[i], route[i+1]] += 1
                heuristics_matrix[route[i+1], route[i]] += 1  # Assuming undirected graph

    return heuristics_matrix
