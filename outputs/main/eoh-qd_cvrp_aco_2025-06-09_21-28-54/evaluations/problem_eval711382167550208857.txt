import numpy as np

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm constructs a heuristics matrix by iteratively building routes, penalizing edges when capacity constraints are violated, and rewarding edges when routes are feasible with a score inversely proportional to the route length.}"""
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)
    num_iterations = 1000

    for _ in range(num_iterations):
        # Start with a random customer order
        customer_indices = list(range(1, n))
        np.random.shuffle(customer_indices)

        # Build initial route greedily
        routes = []
        current_route = [0]
        current_demand = 0
        
        for customer in customer_indices:
            if current_demand + demands[customer] <= capacity:
                current_route.append(customer)
                current_demand += demands[customer]
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0, customer]
                current_demand = demands[customer]
        
        current_route.append(0)
        routes.append(current_route)

        # Calculate initial route length
        total_length = 0
        for route in routes:
            for i in range(len(route) - 1):
                total_length += distance_matrix[route[i], route[i+1]]

        # Reward/penalize edges based on route feasibility and length
        if total_length > 0:
            reward = 1.0 / total_length
            for route in routes:
                for i in range(len(route) - 1):
                    heuristics_matrix[route[i], route[i+1]] += reward
                    heuristics_matrix[route[i+1], route[i]] += reward
        else:
            # If routes are empty do nothing
            pass

    return heuristics_matrix
