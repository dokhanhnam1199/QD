import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """
    {This algorithm iteratively refines routes by probabilistically swapping nodes between routes based on cost reduction and feasibility, updating a heuristic matrix based on edge usage.}
    """
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_iterations = 1000

    # Initialize routes randomly
    routes = []
    unassigned_customers = list(range(1, n))
    while unassigned_customers:
        route = [0]
        current_capacity = 0
        while unassigned_customers and current_capacity + min(demands[c] for c in unassigned_customers) <= capacity:
            
            possible_adds = [c for c in unassigned_customers if current_capacity + demands[c] <= capacity]
            next_customer = random.choice(possible_adds)
            route.append(next_customer)
            current_capacity += demands[next_customer]
            unassigned_customers.remove(next_customer)
        route.append(0)
        routes.append(route)

    for _ in range(num_iterations):
        # Choose two routes randomly
        if len(routes) < 2:
            break
        route_index1, route_index2 = random.sample(range(len(routes)), 2)
        route1 = routes[route_index1]
        route2 = routes[route_index2]

        # Choose two customers randomly (excluding depot)
        customer_index1 = random.randint(1, len(route1) - 2)
        customer_index2 = random.randint(1, len(route2) - 2)
        customer1 = route1[customer_index1]
        customer2 = route2[customer_index2]

        # Calculate current capacities of routes
        capacity1 = sum(demands[c] for c in route1[1:-1])
        capacity2 = sum(demands[c] for c in route2[1:-1])

        # Attempt swap
        if capacity1 - demands[customer1] + demands[customer2] <= capacity and \
           capacity2 - demands[customer2] + demands[customer1] <= capacity:

            # Calculate cost change of swap
            cost_change = (distance_matrix[route1[customer_index1-1], customer2] +
                           distance_matrix[customer2, route1[customer_index1+1]] -
                           distance_matrix[route1[customer_index1-1], customer1] -
                           distance_matrix[customer1, route1[customer_index1+1]] +
                           distance_matrix[route2[customer_index2-1], customer1] +
                           distance_matrix[customer1, route2[customer_index2+1]] -
                           distance_matrix[route2[customer_index2-1], customer2] -
                           distance_matrix[customer2, route2[customer_index2+1]])
            
            # Accept swap with some probability
            if cost_change < 0 or random.random() < 0.1:
                route1[customer_index1] = customer2
                route2[customer_index2] = customer1

        #Update Heuristics Matrix
        for route in routes:
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                heuristics_matrix[u, v] += 1
                heuristics_matrix[v, u] += 1  # Since it's an undirected graph
    return heuristics_matrix
