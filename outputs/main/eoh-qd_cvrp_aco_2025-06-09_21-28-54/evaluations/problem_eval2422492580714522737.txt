import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{The algorithm samples many random routes, evaluates their feasibility with respect to capacity constraints, and constructs a heuristic matrix favoring edges that appear frequently in solutions with shorter total distances.}"""
    n = len(demands)
    heuristics_matrix = np.zeros((n, n))
    num_samples = 1000

    for _ in range(num_samples):
        # Generate a random permutation of customers (excluding the depot)
        customer_indices = list(range(1, n))
        random.shuffle(customer_indices)

        # Create routes based on capacity constraint
        routes = []
        current_route = [0]  # Start at the depot
        current_load = 0

        for customer in customer_indices:
            if current_load + demands[customer] <= capacity:
                current_route.append(customer)
                current_load += demands[customer]
            else:
                current_route.append(0)  # Return to depot
                routes.append(current_route)
                current_route = [0, customer]
                current_load = demands[customer]

        current_route.append(0)  # Complete the last route
        routes.append(current_route)

        # Calculate the total distance of the routes
        total_distance = 0
        for route in routes:
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                total_distance += distance_matrix[u, v]

        # Update heuristics matrix based on inverse of total distance
        # To favor routes with shorter total distance
        score = 1 / (total_distance + 1e-6)  # Add a small value to avoid division by zero

        for route in routes:
            for i in range(len(route) - 1):
                u = route[i]
                v = route[i+1]
                heuristics_matrix[u, v] += score
                heuristics_matrix[v, u] += score  # Assuming symmetry

    # Normalize the heuristics matrix
    heuristics_matrix = heuristics_matrix / num_samples

    return heuristics_matrix
