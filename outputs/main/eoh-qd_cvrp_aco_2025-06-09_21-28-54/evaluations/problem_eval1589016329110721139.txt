import numpy as np
import random

def heuristics_v2(distance_matrix, coordinates, demands, capacity):
    """{This algorithm uses a regret-based insertion heuristic within a sampled route construction framework to build a heuristic matrix favoring edges used in low-regret insertion choices.}"""
    n = len(demands)
    heuristics_matrix = np.zeros_like(distance_matrix)
    num_samples = 500

    for _ in range(num_samples):
        unvisited = list(range(1, n))
        routes = []
        current_route = [0]
        current_capacity = 0

        while unvisited:
            best_customer = None
            best_regret = float('inf')

            for customer in unvisited:
                if current_capacity + demands[customer] <= capacity:
                    insertion_cost = distance_matrix[current_route[-1], customer] + distance_matrix[customer, 0] - distance_matrix[current_route[-1], 0]
                    
                    # Temporarily add the customer to the route
                    temp_route = current_route + [customer]
                    
                    #Find second best to compute regret
                    second_best_cost = float('inf')
                    for other_customer in unvisited:
                        if other_customer != customer and current_capacity + demands[other_customer] <= capacity:
                             temp_insertion_cost = distance_matrix[current_route[-1], other_customer] + distance_matrix[other_customer, 0] - distance_matrix[current_route[-1], 0]
                             second_best_cost = min(second_best_cost, temp_insertion_cost)
                    
                    regret = insertion_cost if second_best_cost == float('inf') else insertion_cost - second_best_cost  # Calculate regret
                    if regret < best_regret:
                        best_regret = regret
                        best_customer = customer
            
            if best_customer is not None:
                current_route.append(best_customer)
                current_capacity += demands[best_customer]
                unvisited.remove(best_customer)
            else:
                current_route.append(0)
                routes.append(current_route)
                current_route = [0]
                current_capacity = 0
                
        current_route.append(0)
        routes.append(current_route)

        for route in routes:
            for i in range(len(route) - 1):
                node1 = route[i]
                node2 = route[i+1]
                heuristics_matrix[node1, node2] += 1
                heuristics_matrix[node2, node1] += 1

    return heuristics_matrix
