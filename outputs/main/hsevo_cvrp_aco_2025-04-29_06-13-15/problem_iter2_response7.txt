```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    CVRP heuristic: Combines distance, demand, angle, and depot proximity.
    Sparsifies the matrix by setting unpromising elements to zero.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))
    epsilon = 1e-6

    for i in range(n):
        for j in range(n):
            if i == j:
                continue

            dist_h = 1 / (distance_matrix[i, j] + epsilon)
            demand_h = 1 - np.clip((demands[i] + demands[j]) / (2 * capacity + epsilon), 0, 1)
            if i == 0 or j == 0:
                demand_h = 1.0

            angle_h = 1.0
            if i != 0 and j != 0:
                angle_h = 0.0
                nn_idx = -1; dist = np.inf
                for k in range(n):
                    if k != i and k != j:
                        if distance_matrix[i, k] < dist:
                            dist = distance_matrix[i, k]
                            nn_idx = k

                if nn_idx != -1:
                    a = distance_matrix[i, j]
                    b = distance_matrix[i, nn_idx]
                    c = distance_matrix[j, nn_idx]
                    try:
                        angle_h = (a**2 + b**2 - c**2) / (2 * a * b + epsilon)
                        angle_h = np.clip(angle_h, -1.0, 1.0)
                        angle_h = (angle_h + 1.0) / 2.0
                    except:
                        angle_h = 0.5

            depot_prox_h = 1 - np.clip((distance_matrix[0, i] + distance_matrix[0, j]) / (2 * np.max(distance_matrix) + epsilon), 0, 1)

            heuristics[i, j] = (
                0.5 * dist_h +
                0.15 * demand_h +
                0.25 * angle_h +
                0.1 * depot_prox_h
            )

    # Sparsify the matrix (optional, but can be beneficial)
    threshold = np.mean(heuristics) * 0.2  # Dynamic threshold based on the mean
    heuristics[heuristics < threshold] = 0

    return heuristics
```
