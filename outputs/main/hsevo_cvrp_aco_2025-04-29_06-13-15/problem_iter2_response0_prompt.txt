{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n### Better code\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Generates heuristics for CVRP based on distance, demand, and vehicle capacity,\n    prioritizing edges that connect nodes with moderate demand that, when combined,\n    do not exceed vehicle capacity, and penalizing edges that are too long or\n    connect to very high-demand nodes. It also gives slight preference to shorter\n    edges overall, and connections to depot are given higher consideration\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Demand of each node (n). Depot demand is demands[0].\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Heuristic values for each edge (n x n).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Scale distance for better handling\n    scaled_distance = distance_matrix / np.max(distance_matrix)\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # No self-loops\n                continue\n\n            # Base heuristic: Inverse of distance (shorter edges are better)\n            heuristic_matrix[i, j] = 1 / (scaled_distance[i, j] + 0.0001) #prevent division by zero\n\n            # Demand consideration: Nodes with moderate demand are more desirable\n            demand_penalty = (demands[i] + demands[j]) / (2 * capacity)\n            heuristic_matrix[i, j] /= (demand_penalty + 0.5)  # Penalty increases as combined demand approaches capacity. Avoid division by zero\n\n            # Heavily Penalize edges connecting nodes with extreme demands if demand will overflow\n            if demands[i] > 0.7 * capacity or demands[j] > 0.7 * capacity:\n                heuristic_matrix[i, j] /= 5  # Much stronger penalty\n\n            # Add slight preference for edges close to depot\n            if i == 0 or j == 0:\n                heuristic_matrix[i, j] *= 1.5\n            \n            # Small boost for mid-range demand nodes as they have higher chance of being combined\n            if 0.15*capacity < demands[i] < 0.45*capacity or 0.15*capacity < demands[j] < 0.45*capacity:\n                heuristic_matrix[i, j] *= 1.1\n\n    return heuristic_matrix\n\n### Worse code\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for CVRP using a combination of distance, demand, and angle considerations.\n\n    Args:\n        distance_matrix: Distance matrix between nodes (n x n).\n        coordinates: Euclidean coordinates of nodes (n x 2).\n        demands: Customer demands (n).\n        capacity: Vehicle capacity.\n\n    Returns:\n        Heuristic matrix (n x n) indicating the desirability of including each edge.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Parameters to control the influence of different factors\n    distance_weight = 0.5\n    demand_weight = 0.3\n    angle_weight = 0.2\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # No self-loops\n            else:\n                # Distance factor: Inverse of distance\n                distance_factor = 1 / distance_matrix[i, j]\n\n                # Demand factor:  Encourage connecting to nodes with demands that fit vehicle capacity.\n                # Penalize exceeding capacity more heavily.\n\n                demand_factor = 1 / (demands[j] + 1e-6) # Avoid division by zero\n                if demands[i] + demands[j] > capacity:\n                    demand_factor /=2\n\n                # Angle factor:  Prefer edges that don't make sharp turns\n                # Calculate the angle between the vectors from node i to node j and from node 0 (depot) to node j\n                if i != 0 and j != 0:\n                    vector_ij = coordinates[j] - coordinates[i]\n                    vector_0j = coordinates[j] - coordinates[0]\n\n                    # Calculate the dot product and magnitudes\n                    dot_product = np.dot(vector_ij, vector_0j)\n                    magnitude_ij = np.linalg.norm(vector_ij)\n                    magnitude_0j = np.linalg.norm(vector_0j)\n\n                    # Calculate the cosine of the angle\n                    if magnitude_ij > 0 and magnitude_0j > 0:\n                        cos_angle = dot_product / (magnitude_ij * magnitude_0j)\n                        # Ensure cos_angle is within [-1, 1] to avoid errors\n                        cos_angle = np.clip(cos_angle, -1.0, 1.0)\n                        angle = np.arccos(cos_angle)  # Angle in radians\n                        angle_factor = 1 - (angle / np.pi) # Normalize between 0 and 1\n\n                    else:\n                        angle_factor = 0.5 # Neutral value if vectors are zero\n                else:\n                    angle_factor = 0.5 #Neutral if one node is the depot.\n\n\n                # Combine the factors\n                heuristic_matrix[i, j] = (\n                    distance_weight * distance_factor +\n                    demand_weight * demand_factor +\n                    angle_weight * angle_factor\n                )\n\n    return heuristic_matrix\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic incorporates a gravitational attraction component, while the worst uses a simpler angle factor. Also, the best normalizes the combined heuristics to between 0 and 1, potentially improving stability. The worst uses fixed weights, potentially limiting adaptability.\n\nComparing (2nd best) vs (2nd worst), we see that \"Heuristics 2nd\" and \"Heuristics 19th\" exhibit noticeable distinctions. \"Heuristics 2nd\" employs gravitational attraction, demand feasibility, and depot proximity while \"Heuristics 19th\" focuses on angle relative to the depot.\n\nComparing (1st) vs (2nd), there are no difference so both are the same.\n\nComparing (3rd) vs (4th), we see that \"Heuristics 3rd\" calculates an angle between edges (i->j) and (j-> depot) as a proxy for a smooth route, also including additional penalty for high demand customers. \"Heuristics 4th\" measures the angle each node creates to the depot and combine angle and demand penalty.\n\nComparing (second worst) vs (worst), \"Heuristics 19th\" calculates angle between nodes relative to the depot, encouraging edges connecting nodes with similar angles. \"Heuristics 20th\" calculates angle between the vectors from node i to node j and from node 0 (depot) to node j, preferring edges that don't make sharp turns.\n\nOverall: The better heuristics incorporate more sophisticated factors like gravitational attraction and spatial distribution, while also normalizing the output. Simpler approaches relying solely on distance, demand, and basic angle calculations tend to perform worse. The weighting of different factors and handling of edge cases (e.g., division by zero) also seem to play a crucial role. Depot proximity is a frequently used concept that appears in many of the better heuristics.\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, let's redefine effective self-reflection for heuristic design.\n\n*   **Keywords:** Multi-faceted Evaluation, Adaptive Tuning, Contextual Awareness, Performance Analysis.\n*   **Advice:** Actively analyze *why* a heuristic succeeds/fails in specific instances. Consider environmental factors (e.g., problem structure, data distribution). Prioritize adaptive weight tuning during execution.\n*   **Avoid:** Focusing solely on overall averages. Ignoring the influence of problem-specific characteristics. Fixed or arbitrary parameter settings.\n*   **Explanation:** Shift from broad considerations to a deep understanding of performance drivers. This enables targeted improvements and robust heuristic design.\n\n\nYour task is to write an improved function `heuristics_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}