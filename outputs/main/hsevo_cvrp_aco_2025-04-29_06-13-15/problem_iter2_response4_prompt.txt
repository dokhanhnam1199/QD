{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n### Better code\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for CVRP using a combination of distance, demand, and angular considerations.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix)\n\n    # Scale distance by demand\n    demand_scaled_distance = distance_matrix * (demands[np.newaxis, :] + demands[:, np.newaxis]) / (2 * capacity)  # Normalize by 2*capacity for relative cost\n    demand_scaled_distance = np.where(demand_scaled_distance == 0, np.inf, demand_scaled_distance) # Avoid division by zero and zero distances (self-loops)\n\n    # Angular penalty (discourage sharp turns at depot)\n    depot_x, depot_y = coordinates[0]\n    for i in range(1, n):\n        for j in range(1, n):\n            if i == j:\n                continue\n            node_i_x, node_i_y = coordinates[i]\n            node_j_x, node_j_y = coordinates[j]\n\n            # Angles relative to the depot\n            angle_i = np.arctan2(node_i_y - depot_y, node_i_x - depot_x)\n            angle_j = np.arctan2(node_j_y - depot_y, node_j_x - depot_x)\n\n            angle_diff = np.abs(angle_i - angle_j)\n            angle_diff = np.minimum(angle_diff, 2 * np.pi - angle_diff)  # Ensure angle_diff is the shorter angle\n\n            angular_penalty = (angle_diff / np.pi)  # Scale to [0, 1]\n\n            # Adjust heuristic value based on distance, demand and angular penalty.\n            heuristics[i, j] = 1 / (demand_scaled_distance[i, j] + 0.1* angular_penalty) # add a small amount to ensure strictly positive\n            heuristics[j, i] = heuristics[i, j] # enforce symmetric heuristics\n\n    # Special treatment for depot edges. Prioritize edges to the depot.\n    for i in range(1, n):\n        heuristics[0, i] = 1.0 / (distance_matrix[0, i]* demands[i] / capacity+1e-6)  # Scale by demand relative to capacity\n        heuristics[i, 0] = heuristics[0, i]\n\n    #Make self-loops zero to prohibit them\n    for i in range(n):\n      heuristics[i, i] = 0\n\n    return heuristics\n\n### Worse code\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for Capacitated Vehicle Routing Problem (CVRP) using stochastic solution sampling principles.\n\n    This version incorporates distance, demand, and spatial distribution to guide the search towards promising edges.\n\n    Args:\n        distance_matrix: n x n distance matrix between nodes.\n        coordinates: n x 2 array of node coordinates (Euclidean).\n        demands: n-dimensional array of customer demands.\n        capacity: Vehicle capacity.\n\n    Returns:\n        n x n matrix of heuristic values, indicating the promise of including each edge in a solution.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Parameters (feel free to experiment with these)\n    distance_weight = 1.0\n    demand_weight = 1.0\n    spatial_weight = 0.5  # weight assigned to influence of neighboring demand\n    depot_proximity_weight = 0.5  # reward proximity to depot\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # No self-loops\n                continue\n\n            # 1. Distance component: Inverse of distance (shorter is better)\n            distance_heuristic = distance_weight / (distance_matrix[i, j] + 1e-9) # avoid division by zero\n\n            # 2. Demand component: Penalize edges connecting nodes with high combined demand relative to capacity.\n            #    We are using harmonic mean because high demands from either customer should deter the connection\n            demand_i = demands[i]\n            demand_j = demands[j]\n            combined_demand = (2 * demand_i * demand_j) / (demand_i + demand_j + 1e-9)\n\n            demand_heuristic = (1- min(1.0, combined_demand / capacity)) * demand_weight\n\n            # 3. Spatial Distribution component: Consider nearby nodes with high demand\n            spatial_heuristic = 0.0\n            neighbor_radius = np.mean(distance_matrix) / 2  # Dynamically adjusted radius\n            neighbor_count = 0\n            for k in range(n):\n                if k != i and k != j and distance_matrix[i, k] < neighbor_radius: # find neighbor\n                    spatial_heuristic += demands[k]\n                    neighbor_count += 1\n                if k != i and k != j and distance_matrix[j, k] < neighbor_radius:\n                    spatial_heuristic += demands[k]\n                    neighbor_count += 1\n            if neighbor_count > 0:\n                 spatial_heuristic = (1 - min(1, spatial_heuristic / (neighbor_count * capacity + 1e-9))) * spatial_weight\n            else:\n                spatial_heuristic = spatial_weight\n\n            #4. Proximity to Depot\n            depot_proximity = 1 - 0.9 * max(distance_matrix[0,i], distance_matrix[0,j]) / np.mean(distance_matrix)\n            depot_heuristic = depot_proximity * depot_proximity_weight\n\n            # Combine components - adjust weights to fine-tune the heuristic\n            heuristic_matrix[i, j] = distance_heuristic + demand_heuristic + spatial_heuristic + depot_heuristic\n\n    return heuristic_matrix\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic incorporates a gravitational attraction component, while the worst uses a simpler angle factor. Also, the best normalizes the combined heuristics to between 0 and 1, potentially improving stability. The worst uses fixed weights, potentially limiting adaptability.\n\nComparing (2nd best) vs (2nd worst), we see that \"Heuristics 2nd\" and \"Heuristics 19th\" exhibit noticeable distinctions. \"Heuristics 2nd\" employs gravitational attraction, demand feasibility, and depot proximity while \"Heuristics 19th\" focuses on angle relative to the depot.\n\nComparing (1st) vs (2nd), there are no difference so both are the same.\n\nComparing (3rd) vs (4th), we see that \"Heuristics 3rd\" calculates an angle between edges (i->j) and (j-> depot) as a proxy for a smooth route, also including additional penalty for high demand customers. \"Heuristics 4th\" measures the angle each node creates to the depot and combine angle and demand penalty.\n\nComparing (second worst) vs (worst), \"Heuristics 19th\" calculates angle between nodes relative to the depot, encouraging edges connecting nodes with similar angles. \"Heuristics 20th\" calculates angle between the vectors from node i to node j and from node 0 (depot) to node j, preferring edges that don't make sharp turns.\n\nOverall: The better heuristics incorporate more sophisticated factors like gravitational attraction and spatial distribution, while also normalizing the output. Simpler approaches relying solely on distance, demand, and basic angle calculations tend to perform worse. The weighting of different factors and handling of edge cases (e.g., division by zero) also seem to play a crucial role. Depot proximity is a frequently used concept that appears in many of the better heuristics.\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, let's redefine effective self-reflection for heuristic design.\n\n*   **Keywords:** Multi-faceted Evaluation, Adaptive Tuning, Contextual Awareness, Performance Analysis.\n*   **Advice:** Actively analyze *why* a heuristic succeeds/fails in specific instances. Consider environmental factors (e.g., problem structure, data distribution). Prioritize adaptive weight tuning during execution.\n*   **Avoid:** Focusing solely on overall averages. Ignoring the influence of problem-specific characteristics. Fixed or arbitrary parameter settings.\n*   **Explanation:** Shift from broad considerations to a deep understanding of performance drivers. This enables targeted improvements and robust heuristic design.\n\n\nYour task is to write an improved function `heuristics_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}