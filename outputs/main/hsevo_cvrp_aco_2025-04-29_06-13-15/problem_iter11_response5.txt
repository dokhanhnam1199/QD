```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """CVRP heuristics: Combines distance, demand, depot proximity, savings, clustering, centrality, adaptive weighting, sparsification."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))
    epsilon = 1e-6

    # 1. Distance (normalized)
    distance_heuristic = 1 / (distance_matrix + epsilon)
    distance_heuristic = (distance_heuristic - np.min(distance_heuristic)) / (np.max(distance_heuristic) - np.min(distance_heuristic) + epsilon)

    # 2. Demand Feasibility
    demand_heuristic = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_heuristic[i, j] = 0
            if demands[i] + demands[j] > capacity and i == 0:
                demand_heuristic[i, j] = 0.1
            elif demands[i] + demands[j] > capacity and j == 0:
                demand_heuristic[i, j] = 0.1
            elif i != 0 and demands[i] > capacity or j != 0 and demands[j] > capacity:
                demand_heuristic[i,j] = 0.05

    # 3. Depot Proximity (normalized)
    depot_heuristic = np.zeros((n, n))
    for i in range(1, n):
        avg_distance = np.sum(distance_matrix[i, 1:]) / (n - 2) if n > 2 else distance_matrix[i, 0]
        depot_preference = (avg_distance / np.max(distance_matrix)) * (demands[i] / capacity)
        depot_heuristic[i, 0] = depot_preference
        depot_heuristic[0, i] = depot_preference
    depot_heuristic = (depot_heuristic - np.min(depot_heuristic)) / (np.max(depot_heuristic) - np.min(depot_heuristic) + epsilon)

    # 4. Savings (normalized)
    savings_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_heuristic[i, j] = savings
            savings_heuristic[j, i] = savings
    savings_heuristic = (savings_heuristic - np.min(savings_heuristic)) / (np.max(savings_heuristic) - np.min(savings_heuristic) + epsilon)

    # 5. Clustering (adaptive k)
    clustering_heuristic = np.zeros((n, n))
    k_nearest = min(10, n - 1)
    for i in range(1, n):
        nearest_neighbors = np.argsort(distance_matrix[i, 1:])[:k_nearest] + 1
        for j in range(1, n):
            if i != j:
                common_neighbors = 0
                for neighbor_i in nearest_neighbors:
                    if neighbor_i in (np.argsort(distance_matrix[j, 1:])[:k_nearest] + 1):
                        common_neighbors += 1
                clustering_heuristic[i, j] = common_neighbors / k_nearest
    clustering_heuristic = clustering_heuristic / np.max(clustering_heuristic)

    # 6. Node Centrality (normalized)
    centrality = np.zeros(n)
    for i in range(1, n):
        centrality[i] = np.sum(distance_matrix[i, 1:])
    centrality = np.max(centrality) / (centrality + epsilon)
    centrality[0] = 1
    centrality_heuristic = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            centrality_heuristic[i, j] = (centrality[i] + centrality[j]) / 2.0
    centrality_heuristic = centrality_heuristic / np.max(centrality_heuristic)

    # Adaptive Weighting
    capacity_ratio = np.sum(demands[1:]) / (capacity * (n - 1))
    num_nodes_factor = n / 100.0

    alpha = 0.2
    beta = 0.15
    gamma = 0.1
    delta = 0.15
    eta = 0.2

    alpha += 0.05 * capacity_ratio + 0.02 * num_nodes_factor
    beta -= 0.03 * capacity_ratio - 0.01 * num_nodes_factor
    gamma += 0.02 * capacity_ratio + 0.03 * num_nodes_factor
    delta += 0.01 * capacity_ratio + 0.02 * num_nodes_factor
    eta -= 0.01 * capacity_ratio - 0.02 * num_nodes_factor

    # Combine heuristics
    heuristics = (alpha * distance_heuristic * demand_heuristic +
                  beta * depot_heuristic +
                  gamma * savings_heuristic +
                  delta * clustering_heuristic +
                  eta * centrality_heuristic)

    # Sparsification (adaptive threshold)
    k_nearest = min(12, n - 1)
    threshold = np.percentile(heuristics[heuristics > 0], 40)

    for i in range(n):
        nearest_neighbors = np.argsort(distance_matrix[i, :])[1:k_nearest+1]
        for j in range(n):
            if heuristics[i, j] < threshold and j not in nearest_neighbors:
                heuristics[i, j] = 0

    # Normalize
    max_val = np.max(heuristics)
    if max_val > 0:
        heuristics = heuristics / max_val

    return heuristics
```
