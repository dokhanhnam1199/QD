```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version incorporates several factors to estimate the desirability of including each edge:
    - Distance: Shorter distances are preferred (inverse relationship).
    - Angle: Edges that result in less sharp turns are favored. This promotes smoother routes.
    - Demand: Edges connected to nodes with higher demands might be penalized to balance vehicle loads.
    - Depot proximity: Edges closer to the depot might be encouraged, especially for starting/ending routes.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)

    # Parameters (tunable)
    distance_weight = 1.0
    angle_weight = 0.5
    demand_weight = 0.2
    depot_weight = 0.3

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics[i, j] = 0  # No self-loops
                continue

            # Distance component (inverse relationship)
            distance_heuristic = distance_weight / (distance_matrix[i, j] + 1e-6) #add small constant to prevent divide by zero

            # Angle component: Penalize sharp turns.  Compute angle using dot product. Consider using arccos to avoid branch misprediction
            angle_heuristic = 0.0
            for k in range(n):
                if k != i and k != j:
                  vec1 = coordinates[i] - coordinates[k]
                  vec2 = coordinates[j] - coordinates[i]
                  norm_vec1 = np.linalg.norm(vec1)
                  norm_vec2 = np.linalg.norm(vec2)
                  if norm_vec1 > 0 and norm_vec2 > 0:
                    dot_product = np.dot(vec1, vec2) / (norm_vec1 * norm_vec2)
                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0)) #clip to avoid math domain errors
                    angle_heuristic += np.exp(-angle) #smaller angle yields higher score
            angle_heuristic *= angle_weight

            # Demand component:  Consider demands of both nodes.  Perhaps penalize high demand nodes more.
            demand_heuristic = demand_weight / (demands[i] + demands[j] + 1e-6)


            # Depot proximity component: Encourage connections to/from depot (node 0).
            depot_heuristic = 0.0
            if i == 0 or j == 0:
                depot_heuristic = depot_weight * (1.0 / (distance_matrix[i,j] + 1e-6) )#distance penalty when connecting to depot.


            # Combine the components
            heuristics[i, j] = distance_heuristic + angle_heuristic + demand_heuristic + depot_heuristic


    return heuristics
```
