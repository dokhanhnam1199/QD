```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version incorporates:
    1. Distance: Edges with shorter distances are preferred.
    2. Demand Feasibility: Penalizes edges that would immediately violate capacity constraints.
    3. Depot Proximity: Prioritizes returning to the depot from nodes that are far from other customers and have high demand.
    4. Gravitational Attraction: Mimics the gravitational attraction of black holes.
    5. Angle Prioritization:  Prioritizes edges that create smaller angles at intersections, promoting smoother routes.
    6. Sparsification: Sets unpromising edges to zero to reduce search space.
    7. Adaptive Scaling: Adaptively scales the influence of different heuristic components based on problem characteristics.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n). The demand of depot is demands[0].
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))

    # Add a small value to avoid division by zero
    epsilon = 1e-6

    # 1. Distance component (inverse relationship)
    distance_heuristic = 1 / (distance_matrix + epsilon)

    # 2. Demand Feasibility component
    demand_heuristic = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_heuristic[i, j] = 0  # No self-loops
            if demands[i] + demands[j] > capacity and i == 0:
                demand_heuristic[i, j] = 0.1
            elif demands[i] + demands[j] > capacity and j == 0:
                demand_heuristic[i, j] = 0.1
            elif i != 0 and demands[i] > capacity or j != 0 and demands[j] > capacity:
                 demand_heuristic[i,j] = 0.05


    # 3. Depot Proximity
    depot_heuristic = np.zeros((n, n))
    for i in range(1, n):
        avg_distance = np.sum(distance_matrix[i, 1:]) / (n - 2) if n > 2 else distance_matrix[i,0]
        depot_preference = (avg_distance / np.max(distance_matrix)) * (demands[i] / capacity)
        depot_heuristic[i, 0] = depot_preference
        depot_heuristic[0, i] = depot_preference

    # 4. Gravitational Attraction
    gravitational_heuristic = np.zeros((n, n))
    gravitational_constant = 1.0
    for i in range(1, n):
        for j in range(1, n):
            mass_i = demands[i]
            mass_j = demands[j]
            if i == j:
                gravitational_heuristic[i,j] = 0
                continue
            gravitational_heuristic[i, j] = gravitational_constant * (mass_i * mass_j) / (distance_matrix[i, j]**2 + epsilon)


    # 5. Angle Prioritization: Smaller angles are preferred (smoother routes).  Only calculate for non-depot nodes.
    angle_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                #Find a k such that k is close to both i and j.
                best_k = -1
                min_dist = float('inf')
                for k in range(1, n):
                    if k != i and k != j:
                        dist = distance_matrix[i, k] + distance_matrix[j, k]
                        if dist < min_dist:
                            min_dist = dist
                            best_k = k
                if best_k != -1:
                    # cosine rule
                    a = distance_matrix[i,j]
                    b = distance_matrix[i, best_k]
                    c = distance_matrix[j, best_k]
                    angle = np.arccos((b**2 + c**2 - a**2) / (2 * b * c + epsilon))
                    angle_heuristic[i,j] = 1 - (angle / np.pi) #Smaller angle, bigger value

    # 6. Sparsification: Remove edges that are too long relative to average distance. Adaptively determined.
    avg_distance = np.sum(distance_matrix) / (n * (n - 1))
    sparsification_threshold = 2.5 * avg_distance  # Tune this parameter.
    sparsification_mask = distance_matrix <= sparsification_threshold

    # Combine the heuristics with adaptive scaling.  Weights can be tuned.
    alpha = 0.4  # Distance weight
    beta = 0.2  # Demand weight
    gamma = 0.15 # Depot weight
    delta = 0.15 # Gravitational weight
    theta = 0.1 # Angle weight
    heuristics = alpha * distance_heuristic * demand_heuristic + beta * demand_heuristic + gamma * depot_heuristic + delta * gravitational_heuristic + theta * angle_heuristic

    # Apply sparsification
    heuristics = heuristics * sparsification_mask

    # Normalize to be between 0 and 1
    max_val = np.max(heuristics)
    if max_val > 0:
        heuristics = heuristics / max_val

    return heuristics
```
