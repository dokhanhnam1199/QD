```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for CVRP based on distance, demand, and angular considerations.

    Args:
        distance_matrix: (n, n) distance matrix.
        coordinates: (n, 2) Euclidean coordinates.
        demands: (n,) demand vector.
        capacity: Vehicle capacity.

    Returns:
        (n, n) matrix of heuristic values, indicating the desirability of each edge.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate angles relative to the depot (node 0)
    angles = np.arctan2(coordinates[:, 1] - coordinates[0, 1],
                        coordinates[:, 0] - coordinates[0, 0])

    # Ensure angles are in the range [0, 2*pi]
    angles = (angles + 2 * np.pi) % (2 * np.pi)

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
            else:
                # Prioritize shorter distances
                distance_factor = 1 / distance_matrix[i, j]

                # Penalize edges that would likely violate capacity constraints
                demand_factor = 1.0  # Neutral initially

                #Prioritize connecting smaller demands if possible
                if demands[i] > 0 and demands[j] > 0:
                  demand_factor = 1 / (demands[i] + demands[j])**0.5
                elif demands[i] > 0 or demands[j] > 0:
                    demand_factor = 1 / (max(demands[i], demands[j])**0.5)


                # Incorporate angular considerations to encourage spatially coherent routes
                angle_diff = abs(angles[i] - angles[j])
                angle_diff = min(angle_diff, 2 * np.pi - angle_diff)  # Smaller difference
                angle_factor = 1 / (1 + angle_diff)  # Smaller difference -> higher value

                heuristic_matrix[i, j] = distance_factor * demand_factor * angle_factor

    return heuristic_matrix
```
