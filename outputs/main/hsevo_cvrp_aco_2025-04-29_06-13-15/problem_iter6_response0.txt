```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version incorporates:
    1. Distance: Edges with shorter distances are preferred.
    2. Demand Feasibility: Penalizes edges that would immediately violate capacity constraints.
    3. Depot Proximity: Prioritizes returning to the depot from nodes that are far from other customers and have high demand.
    4. Savings Heuristic Integration: Incorporates the savings heuristic to encourage merging routes.
    5. Clustering Encouragement: Encourages connections within spatial clusters.
    6. Sparsification: Sets unpromising edges to zero to focus the search, adaptively.
    7. Adaptive Weighting: Dynamically adjusts weights based on problem characteristics.
    8. Demand Density: Considers demand density around each node.
    9. Angle to Depot: Prioritizes connections that reduce the angle formed by (node i - depot - node j) to encourage direct routes

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n). The demand of depot is demands[0].
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))
    epsilon = 1e-6

    # 1. Distance component (normalized)
    distance_heuristic = 1 / (distance_matrix + epsilon)
    distance_heuristic = (distance_heuristic - np.min(distance_heuristic)) / (np.max(distance_heuristic) - np.min(distance_heuristic) + epsilon)

    # 2. Demand Feasibility
    demand_heuristic = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_heuristic[i, j] = 0
            if demands[i] + demands[j] > capacity and i == 0:
                demand_heuristic[i, j] = 0.1
            elif demands[i] + demands[j] > capacity and j == 0:
                demand_heuristic[i, j] = 0.1
            elif i != 0 and demands[i] > capacity or j != 0 and demands[j] > capacity:
                demand_heuristic[i,j] = 0.05

    # 3. Depot Proximity (normalized and enhanced)
    depot_heuristic = np.zeros((n, n))
    for i in range(1, n):
        avg_distance = np.sum(distance_matrix[i, 1:]) / (n - 2) if n > 2 else distance_matrix[i, 0]
        depot_preference = (avg_distance / np.max(distance_matrix)) * (demands[i] / capacity)
        depot_heuristic[i, 0] = depot_preference
        depot_heuristic[0, i] = depot_preference
    depot_heuristic = (depot_heuristic - np.min(depot_heuristic)) / (np.max(depot_heuristic) - np.min(depot_heuristic) + epsilon)


    # 4. Savings Heuristic (normalized)
    savings_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_heuristic[i, j] = savings
            savings_heuristic[j, i] = savings  # Savings are symmetric
    savings_heuristic = (savings_heuristic - np.min(savings_heuristic)) / (np.max(savings_heuristic) - np.min(savings_heuristic) + epsilon)

    # 5. Clustering Encouragement (based on spatial proximity)
    clustering_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            dist_ij = distance_matrix[i, j]
            # Encourage connections between nodes that are close relative to their distance to the depot
            clustering_heuristic[i, j] = clustering_heuristic[j, i] = np.exp(-dist_ij / (distance_matrix[i, 0] + distance_matrix[j, 0] + epsilon))

    # 6. Demand Density
    demand_density_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i == j:
                continue
            # Measure demand density around each node
            neighborhood_size = 5 #number of neighbors to consider
            i_neighbors = np.argsort(distance_matrix[i, 1:])[:neighborhood_size] + 1
            j_neighbors = np.argsort(distance_matrix[j, 1:])[:neighborhood_size] + 1

            i_density = np.sum(demands[i_neighbors]) / np.sum(distance_matrix[i, i_neighbors]) if np.sum(distance_matrix[i, i_neighbors]) > 0 else 0
            j_density = np.sum(demands[j_neighbors]) / np.sum(distance_matrix[j, j_neighbors]) if np.sum(distance_matrix[j, j_neighbors]) > 0 else 0
            demand_density_heuristic[i,j] = demand_density_heuristic[j, i] = i_density + j_density

    demand_density_heuristic = (demand_density_heuristic - np.min(demand_density_heuristic)) / (np.max(demand_density_heuristic) - np.min(demand_density_heuristic) + epsilon)

    #7. Angle to Depot
    angle_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i == j:
                continue
            vector_i = coordinates[i] - coordinates[0]
            vector_j = coordinates[j] - coordinates[0]

            # Calculate the cosine of the angle
            cosine_angle = np.dot(vector_i, vector_j) / (np.linalg.norm(vector_i) * np.linalg.norm(vector_j) + epsilon)

            # Convert cosine to angle in radians
            angle = np.arccos(np.clip(cosine_angle, -1.0, 1.0))

            angle_heuristic[i, j] = angle_heuristic[j, i] =  1- (angle / np.pi) # Normalize to [0, 1] (higher is better, smaller angle)

    # Adaptive Weighting (adjust based on problem size/characteristics)
    n_customers = n - 1
    alpha = 0.3 #distance
    beta = 0.15 #depot proximity
    gamma = 0.20 #savings
    delta = 0.15 #clustering
    eta = 0.1 #demand density
    phi = 0.1 #angle heuristic
    # Adjust weights (example: emphasize depot proximity more for larger problems)
    if n_customers > 50:
        beta += 0.05
        alpha -= 0.05 #reduce alpha a bit
    if capacity < np.mean(demands) * 5: # Tighter capacity constraints, increase savings
        gamma += 0.05

    # Combine the heuristics
    heuristics = (alpha * distance_heuristic * demand_heuristic +
                  beta * depot_heuristic +
                  gamma * savings_heuristic +
                  delta * clustering_heuristic +
                  eta * demand_density_heuristic +
                  phi * angle_heuristic)

    # 8. Sparsification (adaptive threshold based on heuristic values)
    threshold = np.percentile(heuristics[heuristics > 0], 40) # Increased sparsity

    k_nearest = 12 #consider k-nearest neighbors, increase it a bit

    for i in range(n):
        nearest_neighbors = np.argsort(distance_matrix[i, :])[1:k_nearest+1]
        for j in range(n):
            if heuristics[i, j] < threshold and j not in nearest_neighbors:
                heuristics[i, j] = 0

    # Normalize to be between 0 and 1
    max_val = np.max(heuristics)
    if max_val > 0:
        heuristics = heuristics / max_val

    return heuristics
```
