```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version incorporates distance, demand, and angular considerations to guide edge selection.

    Args:
        distance_matrix (np.ndarray): Distance matrix (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Vector of customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate angular cost relative to the depot (node 0).
    depot_x, depot_y = coordinates[0]
    angles = np.arctan2(coordinates[:, 1] - depot_y, coordinates[:, 0] - depot_x)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Distance-based heuristic: Favor shorter distances.
                distance_factor = 1 / distance_matrix[i, j] if distance_matrix[i, j] > 0 else 0

                # Demand-based heuristic: Discourage connecting high-demand nodes directly, especially if exceeding capacity.
                demand_factor = 1 / (demands[i] + demands[j]) if (demands[i] + demands[j]) > 0 else 1  # Consider higher when both demands are low

                # Angle-based heuristic: Encourage connections that make logical sense relative to the depot.  Penalize connections "wrapping around".
                angle_diff = np.abs(angles[i] - angles[j])
                angle_diff = np.min([angle_diff, 2 * np.pi - angle_diff]) # Correct for wrap-around

                angle_factor = 1 / (angle_diff + 0.1) # Added small const. to avoid divide by zero and promote nodes which lie along the same angle as that is the likely route to traverse from the origin node.



                heuristic_matrix[i, j] = distance_factor * demand_factor * angle_factor


    return heuristic_matrix
```
