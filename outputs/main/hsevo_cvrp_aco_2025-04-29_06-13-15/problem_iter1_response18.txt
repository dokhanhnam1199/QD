```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Generates heuristics for CVRP based on distance, demand, and vehicle capacity,
    prioritizing edges that connect nodes with moderate demand that, when combined,
    do not exceed vehicle capacity, and penalizing edges that are too long or
    connect to very high-demand nodes. It also gives slight preference to shorter
    edges overall, and connections to depot are given higher consideration

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Demand of each node (n). Depot demand is demands[0].
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Heuristic values for each edge (n x n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Scale distance for better handling
    scaled_distance = distance_matrix / np.max(distance_matrix)

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
                continue

            # Base heuristic: Inverse of distance (shorter edges are better)
            heuristic_matrix[i, j] = 1 / (scaled_distance[i, j] + 0.0001) #prevent division by zero

            # Demand consideration: Nodes with moderate demand are more desirable
            demand_penalty = (demands[i] + demands[j]) / (2 * capacity)
            heuristic_matrix[i, j] /= (demand_penalty + 0.5)  # Penalty increases as combined demand approaches capacity. Avoid division by zero

            # Heavily Penalize edges connecting nodes with extreme demands if demand will overflow
            if demands[i] > 0.7 * capacity or demands[j] > 0.7 * capacity:
                heuristic_matrix[i, j] /= 5  # Much stronger penalty

            # Add slight preference for edges close to depot
            if i == 0 or j == 0:
                heuristic_matrix[i, j] *= 1.5
            
            # Small boost for mid-range demand nodes as they have higher chance of being combined
            if 0.15*capacity < demands[i] < 0.45*capacity or 0.15*capacity < demands[j] < 0.45*capacity:
                heuristic_matrix[i, j] *= 1.1

    return heuristic_matrix
```
