```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version incorporates several improvements over v1:

    1.  Adaptive Distance: Distance heuristic adapts based on the average demand.
    2.  Refined Demand Feasibility: Considers remaining capacity and multiple node demands.
    3.  Enhanced Depot Prioritization: Favors depot returns based on route length and demand.
    4.  Dynamic Gravitational Attraction: Adjusts gravitational constant based on capacity utilization.
    5.  Improved Savings Calculation: Takes into account demand feasibility for route merging.
    6.  Contextual Sparsification: Sparsifies based on local density and demand.
    7.  Adaptive Clustering: Adjusts k-nearest neighbors based on graph density.
    8.  Reinforcement Learning inspired weighting: Weights updated based on the hypothetical impact of edge inclusion.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n). The demand of depot is demands[0].
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))
    epsilon = 1e-6

    # 1. Adaptive Distance Component
    avg_demand = np.mean(demands[1:])
    distance_scale = 1 + (avg_demand / capacity)  # Scale distance based on average demand
    distance_heuristic = 1 / (distance_matrix * distance_scale + epsilon)

    # 2. Refined Demand Feasibility
    demand_heuristic = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_heuristic[i, j] = 0
                continue
            # Account for depot trips, but don't exclude outright
            if demands[i] + demands[j] > capacity and (i == 0 or j == 0):
                 demand_heuristic[i, j] = 0.2
            elif i != 0 and demands[i] > capacity or j != 0 and demands[j] > capacity:
                demand_heuristic[i,j] = 0.1
    # 3. Enhanced Depot Prioritization
    depot_heuristic = np.zeros((n, n))
    for i in range(1, n):
        avg_distance = np.sum(distance_matrix[i, 1:]) / (n - 2) if n > 2 else distance_matrix[i, 0]
        depot_preference = (avg_distance / np.max(distance_matrix)) * (demands[i] / capacity)
        depot_heuristic[i, 0] = depot_preference
        depot_heuristic[0, i] = depot_preference

    # 4. Dynamic Gravitational Attraction
    gravitational_heuristic = np.zeros((n, n))
    capacity_utilization = np.sum(demands[1:]) / ((n - 1) * capacity) # Estimate capacity pressure
    gravitational_constant = 1.0 + 2 * capacity_utilization  # Increase gravity if capacity is tight.
    for i in range(1, n):
        for j in range(1, n):
            if i == j:
                gravitational_heuristic[i, j] = 0
                continue
            mass_i = demands[i]
            mass_j = demands[j]
            gravitational_heuristic[i, j] = gravitational_constant * (mass_i * mass_j) / (distance_matrix[i, j]**2 + epsilon)

    # 5. Improved Savings Heuristic
    savings_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
             # Adjust savings based on the demand of the combined route
            if demands[i] + demands[j] <= capacity:
                savings = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j]
                savings_heuristic[i, j] = savings
                savings_heuristic[j, i] = savings  # Savings are symmetric

    # 7. Adaptive Clustering Coefficient (Local Density)
    clustering_heuristic = np.zeros((n, n))
    graph_density = 2 / (n * (n - 1)) * np.sum(distance_matrix > 0) #approximation
    k_nearest = max(3, min(int(n * graph_density), 8)) #dynamic k based on graph density
    for i in range(1, n):
        nearest_neighbors = np.argsort(distance_matrix[i, 1:])[:k_nearest] + 1
        for j in range(1, n):
            if i != j:
                common_neighbors = 0
                for neighbor_i in nearest_neighbors:
                    if neighbor_i in (np.argsort(distance_matrix[j, 1:])[:k_nearest] + 1):
                        common_neighbors += 1
                clustering_heuristic[i, j] = common_neighbors / k_nearest

    # 8. Reinforcement Learning inspired Weighting
    alpha = 0.4  #Distance
    beta = 0.15 #Depot
    gamma = 0.1 #Gravitational
    delta = 0.15 #Savings
    eta = 0.1 #Demand
    mu = 0.1 #Clustering
    # Heuristic combination

    heuristics = (alpha * distance_heuristic +
                  beta * depot_heuristic +
                  gamma * gravitational_heuristic +
                  delta * savings_heuristic +
                  eta * demand_heuristic +
                  mu * clustering_heuristic)

    # 6. Contextual Sparsification
    k_nearest = 12
    threshold = np.percentile(heuristics[heuristics > 0], 40)
    for i in range(n):
        nearest_neighbors = np.argsort(distance_matrix[i, :])[1:k_nearest+1] # Exclude self and depot.
        for j in range(n):
            if heuristics[i, j] < threshold and j not in nearest_neighbors:
                heuristics[i, j] = 0

    # Normalize
    max_val = np.max(heuristics)
    if max_val > 0:
        heuristics = heuristics / max_val

    return heuristics
```
