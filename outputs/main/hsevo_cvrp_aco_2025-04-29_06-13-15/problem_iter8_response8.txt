```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Heuristic combining distance, demand, savings, angle, and depot proximity with adaptive weights."""

    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))
    epsilon = 1e-6

    # 1. Distance component
    distance_heuristic = 1 / (distance_matrix + epsilon)

    # 2. Demand Feasibility
    demand_heuristic = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_heuristic[i, j] = 0
            if demands[i] + demands[j] > capacity and i == 0:
                demand_heuristic[i, j] = 0.1
            elif demands[i] + demands[j] > capacity and j == 0:
                demand_heuristic[i, j] = 0.1
            elif i != 0 and demands[i] > capacity or j != 0 and demands[j] > capacity:
                 demand_heuristic[i,j] = 0.05


    # 3. Savings Heuristic
    savings_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_heuristic[i, j] = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_heuristic[j, i] = savings_heuristic[i, j]

    # 4. Angle heuristic relative to the depot
    angle_heuristic = np.zeros((n,n))
    for i in range(n):
        for j in range(n):
            if i != j:
                depot_x, depot_y = coordinates[0]
                i_x, i_y = coordinates[i]
                j_x, j_y = coordinates[j]

                vector_ij = np.array([j_x - i_x, j_y - i_y])
                vector_di = np.array([i_x - depot_x, i_y - depot_y])

                vector_ij = vector_ij / (np.linalg.norm(vector_ij) + 1e-9)
                vector_di = vector_di / (np.linalg.norm(vector_di) + 1e-9)

                dot_product = np.clip(np.dot(vector_ij, vector_di), -1.0, 1.0)
                angle = np.arccos(dot_product)
                angle_factor = 1 - (angle / np.pi)
                angle_heuristic[i,j] = angle_factor
            else:
                angle_heuristic[i,j] = 0


    # 5. Depot Proximity
    depot_heuristic = np.zeros((n, n))
    for i in range(1, n):
        avg_distance = np.sum(distance_matrix[i, 1:]) / (n - 2) if n > 2 else distance_matrix[i,0]

        depot_preference = (avg_distance / np.max(distance_matrix)) * (demands[i] / capacity)
        depot_heuristic[i, 0] = depot_preference
        depot_heuristic[0, i] = depot_preference

    # Adaptive Weighting
    avg_demand = np.mean(demands[1:])
    demand_ratio = avg_demand / capacity

    weight_distance = 0.3
    weight_demand = 0.2
    weight_savings = 0.2 + demand_ratio * 0.1
    weight_angle = 0.15
    weight_depot = 0.15 - demand_ratio * 0.05

    heuristics = (weight_distance * distance_heuristic * demand_heuristic +
                  weight_savings * savings_heuristic +
                  weight_angle * angle_heuristic +
                  weight_depot * depot_heuristic)

    # Sparsification
    threshold = np.mean(heuristics) * 0.3
    heuristics[heuristics < threshold] = 0

    max_val = np.max(heuristics)
    if max_val > 0:
        heuristics = heuristics / max_val

    return heuristics
```
