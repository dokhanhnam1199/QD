```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving the Capacitated Vehicle Routing Problem (CVRP)
    via stochastic solution sampling.

    This version incorporates several ideas:
    1.  Distance-based desirability: Shorter distances are more desirable.
    2.  Demand consideration:  Edges connecting nodes with high demand to the depot
        are initially favored, but intra-route edges are penalised if demand is high.
        The intuition is that high-demand nodes *must* be served directly from the
        depot, at least initially. As vehicles fill up, consider intra-route edges with
        penalisation factors that are proportional to the node demands.
    3.  Angle to depot:  Edges forming smaller angles with the depot tend to lead
        to more compact and efficient routes.
    4.  Capacity Adjustment factor: Adjust edge "promise" based on a vehicles' remaining capacity.
        Penalise using shorter edges to force visiting multiple nodes before returning to depot.

    Args:
        distance_matrix: Distance matrix (n x n).
        coordinates: Euclidean coordinates of nodes (n x 2).
        demands: Vector of customer demands (n).
        capacity: Vehicle capacity.

    Returns:
        A matrix (n x n) representing the prior indicators of how promising it is to
        include each edge in a solution.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Constants for tuning the heuristic
    alpha = 1.0  # Weight for distance
    beta = 0.5 # Weight for demand attraction/repulsion
    gamma = 0.5  # Weight for angle to depot
    delta = 0.2 # weight for capacity adjustment
    epsilon = 1e-6 # Avoid division by zero

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
                continue

            distance = distance_matrix[i, j]

            # Distance-based desirability
            distance_factor = alpha / (distance + epsilon)

            # Demand consideration
            demand_factor = 1.0
            if i == 0:  # Edge from depot
                demand_factor += beta * (demands[j] / capacity)
            elif j == 0: # edge to depot
                demand_factor += beta * (demands[i] / capacity)
            else: # intra-route edge
                 demand_factor -= beta * ((demands[i] + demands[j]) / (2 * capacity))

            # Angle to depot (try to connect nodes close to depot)
            angle_factor = 1.0
            if i != 0 and j != 0:
                # Compute angle between vectors from depot to i and depot to j
                vector_i = coordinates[i] - coordinates[0]
                vector_j = coordinates[j] - coordinates[0]
                norm_i = np.linalg.norm(vector_i)
                norm_j = np.linalg.norm(vector_j)

                if norm_i > 0 and norm_j > 0:  # Avoid zero vectors
                    cos_angle = np.dot(vector_i, vector_j) / (norm_i * norm_j)
                    # Angle is between 0 and pi. Smaller angles are better
                    angle = np.arccos(np.clip(cos_angle, -1.0, 1.0))
                    angle_factor = 1 + gamma * (1 - angle / np.pi)  # Scale and shift

            # Capacity adjustment factor
            capacity_factor = 1.0
            # This favors using edges that would make vehicle return to depot, if vehicle is nearing capacity.
            if i != 0 and j!=0: # no capacity adjustment if travelling directly from or to depot
                avg_demand = (demands[i]+demands[j])/2
                capacity_factor = 1 + delta * (1- (avg_demand /capacity))


            heuristic_matrix[i, j] = distance_factor * demand_factor * angle_factor * capacity_factor

    return heuristic_matrix
```
