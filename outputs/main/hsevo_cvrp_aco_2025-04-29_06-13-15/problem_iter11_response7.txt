```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """CVRP heuristics: Combines normalized distance, savings, depot proximity, angle cost, and adaptive weighting based on capacity tightness."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))
    epsilon = 1e-6

    # 1. Normalized Distance
    distance_h = 1 / (distance_matrix + epsilon)
    distance_h = (distance_h - np.min(distance_h)) / (np.max(distance_h) - np.min(distance_h) + epsilon)

    # 2. Demand Feasibility
    demand_h = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_h[i, j] = 0
            if demands[i] + demands[j] > capacity and (i == 0 or j == 0):
                demand_h[i, j] = 0.1
            elif i != 0 and demands[i] > capacity or j != 0 and demands[j] > capacity:
                demand_h[i,j] = 0.05

    # 3. Normalized Savings
    savings_h = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_h[i, j] = savings
            savings_h[j, i] = savings
    savings_h = (savings_h - np.min(savings_h)) / (np.max(savings_h) - np.min(savings_h) + epsilon)

    # 4. Normalized Depot Proximity
    depot_h = np.zeros((n, n))
    for i in range(1, n):
        avg_distance = np.sum(distance_matrix[i, 1:]) / (n - 2) if n > 2 else distance_matrix[i, 0]
        depot_preference = (avg_distance / (np.max(distance_matrix) + epsilon)) * (demands[i] / capacity)
        depot_h[i, 0] = depot_preference
        depot_h[0, i] = depot_preference
    depot_h = (depot_h - np.min(depot_h)) / (np.max(depot_h) - np.min(depot_h) + epsilon)

    # 5. Angle Heuristic
    angle_h = np.zeros((n, n))
    depot_x, depot_y = coordinates[0]
    for i in range(1, n):
        angle_i = np.arctan2(coordinates[i, 1] - depot_y, coordinates[i, 0] - depot_x)
        for j in range(i + 1, n):
            angle_j = np.arctan2(coordinates[j, 1] - depot_y, coordinates[j, 0] - depot_x)
            angle_diff = min(abs(angle_i - angle_j), 2 * np.pi - abs(angle_i - angle_j))
            angle_preference = np.exp(-angle_diff)
            angle_h[i, j] = angle_preference
            angle_h[j, i] = angle_preference
    angle_h = (angle_h - np.min(angle_h)) / (np.max(angle_h) - np.min(angle_h) + epsilon)

    # 6. Adaptive Weights
    capacity_ratio = np.sum(demands[1:]) / (capacity * (n - 1))
    weight_dist = 0.35
    weight_depot = 0.1
    weight_savings = 0.25
    weight_angle = 0.3

    if capacity < np.mean(demands) * 5:
        weight_savings += 0.05
        weight_dist -= 0.05

    # Combine heuristics
    heuristic_matrix = (
        weight_dist * distance_h * demand_h +
        weight_depot * depot_h +
        weight_savings * savings_h * demand_h +
        weight_angle * angle_h * demand_h
    )

    # 7. Sparsification
    k_nearest = 10
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 40)

    for i in range(n):
        nearest_neighbors = np.argsort(distance_matrix[i, :])[1:k_nearest+1]

        for j in range(n):
            if heuristic_matrix[i, j] < threshold and j not in nearest_neighbors:
                heuristic_matrix[i, j] = 0

    # Normalize final heuristic matrix
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix /= max_heuristic
    else:
        heuristic_matrix = np.ones_like(heuristic_matrix) / n


    return heuristic_matrix
```
