```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version incorporates:
    1.  Distance: Edges with shorter distances are preferred.
    2.  Demand Feasibility: Penalizes edges that would immediately violate capacity constraints if used early in a route.
    3.  Depot Proximity: Prioritizes returning to the depot from nodes that are far from other customers and have high demand.
    4.  Gravitational Attraction: Mimics the gravitational attraction of black holes: Nodes with high demand and/or far from depot will "attract" closer nodes to form clusters.
    5.  Savings Heuristic Integration: Incorporates the savings heuristic to encourage merging routes.
    6.  Sparsification: Sets unpromising edges to zero to focus the search.
    7.  Clustering Coefficient: Encourages connections between nodes within local clusters
    8.  Adaptive Weighting: Adjusts weights based on problem characteristics (e.g., tightness of capacity)
    9.  Angle Cost: Penalizes sharp turns in routes, encouraging smoother paths.
    10. Route Elongation Penalty: Penalizes edges that significantly elongate existing routes beyond a certain threshold.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n). The demand of depot is demands[0].
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))
    epsilon = 1e-6

    # 1. Distance component
    distance_heuristic = 1 / (distance_matrix + epsilon)
    distance_heuristic = (distance_heuristic - np.min(distance_heuristic)) / (np.max(distance_heuristic) - np.min(distance_heuristic) + epsilon) # Normalize

    # 2. Demand Feasibility
    demand_heuristic = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_heuristic[i, j] = 0
            if demands[i] + demands[j] > capacity and i == 0:
                demand_heuristic[i, j] = 0.1
            elif demands[i] + demands[j] > capacity and j == 0:
                demand_heuristic[i, j] = 0.1
            elif i != 0 and demands[i] > capacity or j != 0 and demands[j] > capacity:
                demand_heuristic[i,j] = 0.05
    demand_heuristic = (demand_heuristic - np.min(demand_heuristic)) / (np.max(demand_heuristic) - np.min(demand_heuristic) + epsilon) # Normalize


    # 3. Depot Proximity
    depot_heuristic = np.zeros((n, n))
    for i in range(1, n):
        avg_distance = np.sum(distance_matrix[i, 1:]) / (n - 2) if n > 2 else distance_matrix[i,0]
        depot_preference = (avg_distance / np.max(distance_matrix)) * (demands[i] / capacity)
        depot_heuristic[i, 0] = depot_preference
        depot_heuristic[0, i] = depot_preference
    depot_heuristic = (depot_heuristic - np.min(depot_heuristic)) / (np.max(depot_heuristic) - np.min(depot_heuristic) + epsilon) # Normalize


    # 4. Gravitational Attraction
    gravitational_heuristic = np.zeros((n, n))
    gravitational_constant = 1.0
    for i in range(1, n):
        for j in range(1, n):
            mass_i = demands[i]
            mass_j = demands[j]
            if i == j:
                gravitational_heuristic[i,j] = 0
                continue
            gravitational_heuristic[i, j] = gravitational_constant * (mass_i * mass_j) / (distance_matrix[i, j]**2 + epsilon)
    gravitational_heuristic = (gravitational_heuristic - np.min(gravitational_heuristic)) / (np.max(gravitational_heuristic) - np.min(gravitational_heuristic) + epsilon) # Normalize


    # 5. Savings Heuristic
    savings_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_heuristic[i, j] = savings
            savings_heuristic[j, i] = savings  # Savings are symmetric
    savings_heuristic = (savings_heuristic - np.min(savings_heuristic)) / (np.max(savings_heuristic) - np.min(savings_heuristic) + epsilon) # Normalize

    # 7. Clustering Coefficient approximation (Local Density)
    clustering_heuristic = np.zeros((n, n))
    k_nearest = 6  # Consider only k-nearest neighbors for clustering
    for i in range(1, n):
        nearest_neighbors = np.argsort(distance_matrix[i, 1:])[:k_nearest] + 1  # k-nearest neighbors excluding depot, adjusting index
        for j in range(1, n):
            if i != j:
                common_neighbors = 0
                for neighbor_i in nearest_neighbors:
                    if neighbor_i in (np.argsort(distance_matrix[j, 1:])[:k_nearest] + 1):
                        common_neighbors += 1
                clustering_heuristic[i, j] = common_neighbors / k_nearest
    clustering_heuristic = (clustering_heuristic - np.min(clustering_heuristic)) / (np.max(clustering_heuristic) - np.min(clustering_heuristic) + epsilon) # Normalize

    # 9. Angle Cost
    angle_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                # Calculate angle between vectors depot->i and depot->j
                vector_i = coordinates[i] - coordinates[0]
                vector_j = coordinates[j] - coordinates[0]
                dot_product = np.dot(vector_i, vector_j)
                magn_i = np.linalg.norm(vector_i)
                magn_j = np.linalg.norm(vector_j)
                if magn_i * magn_j == 0:
                    angle = 0
                else:
                    angle = np.arccos(dot_product / (magn_i * magn_j + epsilon))
                angle_cost = angle / np.pi  # Normalize angle to [0, 1]
                angle_heuristic[i, j] = 1 - angle_cost  # Prefer smaller angles
    angle_heuristic = (angle_heuristic - np.min(angle_heuristic)) / (np.max(angle_heuristic) - np.min(angle_heuristic) + epsilon) # Normalize

    # 10. Route Elongation Penalty (considering current distance from depot)
    elongation_heuristic = np.ones((n, n))
    avg_cust_distance = np.mean(distance_matrix[0, 1:])
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                if distance_matrix[i,j] > 2 * avg_cust_distance: # dynamically adjust threshold
                     elongation_heuristic[i, j] = 0.2 # drastically reduce probability of selection
    elongation_heuristic = (elongation_heuristic - np.min(elongation_heuristic)) / (np.max(elongation_heuristic) - np.min(elongation_heuristic) + epsilon) # Normalize


    # 8. Adaptive Weighting
    capacity_ratio = np.sum(demands[1:]) / (capacity * (n - 1))  # Approximate tightness
    alpha = 0.25
    beta = 0.1
    gamma = 0.05
    delta = 0.1
    eta = 0.05
    mu = 0.15
    phi = 0.15
    kappa = 0.15 # route elongation

    alpha += 0.1 * capacity_ratio
    beta -= 0.05 * capacity_ratio


    # Combine the heuristics with adaptive weights.
    heuristics = alpha * distance_heuristic * demand_heuristic + beta * depot_heuristic + \
                 gamma * gravitational_heuristic + delta * savings_heuristic + mu * clustering_heuristic + \
                 phi * angle_heuristic + kappa * elongation_heuristic

    # 6. Sparsification
    k_nearest = 10  # consider only k-nearest neighbors.
    threshold = np.percentile(heuristics[heuristics > 0], 40)  # Dynamic threshold

    for i in range(n):
        nearest_neighbors = np.argsort(distance_matrix[i, :])[1:k_nearest+1] #excluding self loop and depot

        for j in range(n):
            if heuristics[i, j] < threshold and j not in nearest_neighbors:
                heuristics[i, j] = 0

    # Normalize to be between 0 and 1
    max_val = np.max(heuristics)
    if max_val > 0:
        heuristics = heuristics / max_val

    return heuristics
```
