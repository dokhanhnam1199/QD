import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int,
                  demand_penalty_depot: float = 0.15982633194836882, demand_penalty_other: float = 0.09213704113934569,
                  gravitational_constant: float = 1.2662773521215562, epsilon: float = 9.777821087813485e-06) -> np.ndarray:
    """
    Combines distance, demand feasibility, depot proximity, and gravitational attraction.
    Normalizes the heuristic matrix for stability.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))

    # 1. Distance component (inverse relationship)
    distance_heuristic = 1 / (distance_matrix + epsilon)

    # 2. Demand Feasibility component
    demand_heuristic = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_heuristic[i, j] = 0
            if demands[i] + demands[j] > capacity and i == 0:
                demand_heuristic[i, j] = demand_penalty_depot
            elif demands[i] + demands[j] > capacity and j == 0:
                demand_heuristic[i, j] = demand_penalty_depot
            elif i != 0 and demands[i] > capacity or j != 0 and demands[j] > capacity:
                 demand_heuristic[i,j] = demand_penalty_other

    # 3. Depot Proximity
    depot_heuristic = np.zeros((n, n))
    for i in range(1, n):
        avg_distance = np.sum(distance_matrix[i, 1:]) / (n - 2) if n > 2 else distance_matrix[i,0]
        depot_preference = (avg_distance / np.max(distance_matrix)) * (demands[i] / capacity)
        depot_heuristic[i, 0] = depot_preference
        depot_heuristic[0, i] = depot_preference

    # 4. Gravitational Attraction
    gravitational_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            mass_i = demands[i]
            mass_j = demands[j]
            if i == j:
                gravitational_heuristic[i,j] = 0
                continue
            gravitational_heuristic[i, j] = gravitational_constant * (mass_i * mass_j) / (distance_matrix[i, j]**2 + epsilon)

    # Combine the heuristics
    heuristics = distance_heuristic * demand_heuristic + depot_heuristic + gravitational_heuristic

    # Normalize
    max_val = np.max(heuristics)
    if max_val > 0:
        heuristics = heuristics / max_val

    return heuristics
