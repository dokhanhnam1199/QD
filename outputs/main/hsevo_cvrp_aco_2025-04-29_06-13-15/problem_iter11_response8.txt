```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """CVRP heuristics: Combines distance, demand, depot proximity, savings, clustering, and adaptive weighting."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))
    epsilon = 1e-6

    # 1. Distance component (normalized)
    distance_heuristic = 1 / (distance_matrix + epsilon)
    distance_heuristic = (distance_heuristic - np.min(distance_heuristic)) / (np.max(distance_heuristic) - np.min(distance_heuristic) + epsilon)

    # 2. Demand Feasibility
    demand_heuristic = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_heuristic[i, j] = 0
            if demands[i] + demands[j] > capacity and i == 0:
                demand_heuristic[i, j] = 0.1
            elif demands[i] + demands[j] > capacity and j == 0:
                demand_heuristic[i, j] = 0.1
            elif i != 0 and demands[i] > capacity or j != 0 and demands[j] > capacity:
                demand_heuristic[i,j] = 0.05

    # 3. Depot Proximity (normalized and enhanced)
    depot_heuristic = np.zeros((n, n))
    for i in range(1, n):
        avg_distance = np.sum(distance_matrix[i, 1:]) / (n - 2) if n > 2 else distance_matrix[i, 0]
        depot_preference = (avg_distance / np.max(distance_matrix)) * (demands[i] / capacity)
        depot_heuristic[i, 0] = depot_preference
        depot_heuristic[0, i] = depot_preference
    depot_heuristic = (depot_heuristic - np.min(depot_heuristic)) / (np.max(depot_heuristic) - np.min(depot_heuristic) + epsilon)


    # 4. Savings Heuristic (normalized)
    savings_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_heuristic[i, j] = savings
            savings_heuristic[j, i] = savings  # Savings are symmetric
    savings_heuristic = (savings_heuristic - np.min(savings_heuristic)) / (np.max(savings_heuristic) - np.min(savings_heuristic) + epsilon)

    # 5. Clustering Encouragement (based on spatial proximity)
    clustering_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            dist_ij = distance_matrix[i, j]
            # Encourage connections between nodes that are close relative to their distance to the depot
            clustering_heuristic[i, j] = clustering_heuristic[j, i] = np.exp(-dist_ij / (distance_matrix[i, 0] + distance_matrix[j, 0] + epsilon))

    # Adaptive Weighting (adjust based on problem size/characteristics)
    n_customers = n - 1
    capacity_ratio = np.sum(demands[1:]) / (capacity * (n - 1))  # Approximate tightness
    alpha = 0.3 #distance
    beta = 0.15 #depot proximity
    gamma = 0.20 #savings
    delta = 0.15 #clustering
    phi = 0.05 # angle cost

    # Adjust weights (example: emphasize depot proximity more for larger problems)
    if n_customers > 50:
        beta += 0.05
        alpha -= 0.05 #reduce alpha a bit
    if capacity < np.mean(demands) * 5: # Tighter capacity constraints, increase savings
        gamma += 0.05
    if capacity_ratio > 0.75:
        alpha -= 0.05
        delta += 0.05

    # 9. Angle Cost
    angle_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                # Calculate angle between vectors depot->i and depot->j
                vector_i = coordinates[i] - coordinates[0]
                vector_j = coordinates[j] - coordinates[0]
                dot_product = np.dot(vector_i, vector_j)
                magn_i = np.linalg.norm(vector_i)
                magn_j = np.linalg.norm(vector_j)
                if magn_i * magn_j == 0:
                    angle = 0
                else:
                    angle = np.arccos(dot_product / (magn_i * magn_j + epsilon))
                angle_cost = angle / np.pi  # Normalize angle to [0, 1]
                angle_heuristic[i, j] = 1 - angle_cost  # Prefer smaller angles
    angle_heuristic = (angle_heuristic - np.min(angle_heuristic)) / (np.max(angle_heuristic) - np.min(angle_heuristic) + epsilon) # Normalize



    # Combine the heuristics
    heuristics = (alpha * distance_heuristic * demand_heuristic +
                  beta * depot_heuristic +
                  gamma * savings_heuristic +
                  delta * clustering_heuristic +
                  phi * angle_heuristic)

    # 6. Sparsification (adaptive threshold based on heuristic values)
    threshold = np.percentile(heuristics[heuristics > 0], 40) # Increased sparsity

    k_nearest = 12 #consider k-nearest neighbors, increase it a bit

    for i in range(n):
        nearest_neighbors = np.argsort(distance_matrix[i, :])[1:k_nearest+1]
        for j in range(n):
            if heuristics[i, j] < threshold and j not in nearest_neighbors:
                heuristics[i, j] = 0

    # Normalize to be between 0 and 1
    max_val = np.max(heuristics)
    if max_val > 0:
        heuristics = heuristics / max_val

    return heuristics
```
