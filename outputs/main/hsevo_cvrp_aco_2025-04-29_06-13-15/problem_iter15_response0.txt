```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version combines adaptive elements, spatial awareness, and sparsification for enhanced performance.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))
    epsilon = 1e-6

    # 1. Adaptive Distance Scaling
    total_demand = np.sum(demands[1:])
    capacity_ratio = total_demand / (capacity * (n - 1 + epsilon))
    distance_scale = 1.0 + 0.5 * capacity_ratio
    distance_heuristic = 1 / (distance_matrix * distance_scale + epsilon)

    # 2. Demand Feasibility with Remaining Capacity Consideration
    demand_heuristic = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_heuristic[i, j] = 0
            if i == 0 and j != 0 and demands[j] > capacity:
                demand_heuristic[i,j] = 0
            if j == 0 and i != 0 and demands[i] > capacity:
                demand_heuristic[i,j] = 0

            if i != 0 and j != 0:
                if demands[i] + demands[j] > capacity:
                   demand_heuristic[i, j] = 0.2

    # 3. Enhanced Depot Attraction (Softmax with Capacity-Based Urgency)
    depot_heuristic = np.zeros((n, n))
    urgency_factor = 5.0
    for i in range(1, n):
        avg_distance = np.sum(distance_matrix[i, 1:]) / (n - 2 + epsilon) if n > 2 else distance_matrix[i, 0]
        urgency = np.exp(urgency_factor * (avg_distance / np.max(distance_matrix)) * (demands[i] / (capacity + epsilon)))
        depot_heuristic[i, 0] = urgency
        depot_heuristic[0, i] = urgency

    # 4. Adaptive Gravitational Attraction with Distance-Demand Interaction
    gravitational_heuristic = np.zeros((n, n))
    avg_demand = np.mean(demands[1:])
    adaptive_gravitational_constant = 1.0 + 0.2 * (avg_demand / capacity)
    for i in range(1, n):
        for j in range(1, n):
            if i == j:
                gravitational_heuristic[i, j] = 0
                continue
            mass_i = demands[i]
            mass_j = demands[j]
            gravitational_heuristic[i, j] = adaptive_gravitational_constant * (mass_i * mass_j) / (distance_matrix[i, j]**2 + epsilon)

    # 5. Savings Heuristic with Lookahead and Demand Considerations
    savings_heuristic = np.zeros((n, n))
    lookahead_neighbors = 5
    for i in range(1, n):
        for j in range(i + 1, n):
            savings = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j]
            neighbor_i = np.argsort(distance_matrix[i, 1:])[:lookahead_neighbors] + 1
            neighbor_j = np.argsort(distance_matrix[j, 1:])[:lookahead_neighbors] + 1
            future_savings = 0
            for ni in neighbor_i:
                for nj in neighbor_j:
                    future_savings += distance_matrix[ni, 0] + distance_matrix[0, nj] - distance_matrix[ni, nj]

            #Modulate future savings based on demand
            future_savings_modulation = (demands[i] + demands[j]) / (2 * capacity + epsilon)
            savings += 0.1 * future_savings * future_savings_modulation / (lookahead_neighbors**2 + epsilon)
            savings_heuristic[i, j] = savings
            savings_heuristic[j, i] = savings

    # 6. Edge Clustering Coefficient (Focus on High-Demand Clusters and Distance)
    clustering_heuristic = np.zeros((n, n))
    k_nearest = 6
    for i in range(1, n):
        nearest_neighbors = np.argsort(distance_matrix[i, 1:])[:k_nearest] + 1
        for j in range(1, n):
            if i != j:
                common_neighbors = 0
                for neighbor_i in nearest_neighbors:
                    if neighbor_i in (np.argsort(distance_matrix[j, 1:])[:k_nearest] + 1):
                        common_neighbors += 1
                clustering_coefficient = common_neighbors / (k_nearest + epsilon)
                demand_factor = (demands[i] + demands[j]) / (2 * capacity + epsilon)
                distance_factor = 1 / (distance_matrix[i, j] + epsilon)  # Closer clusters are more important
                clustering_heuristic[i, j] = clustering_coefficient * demand_factor * distance_factor

    # 7. Vehicle Load Balancing Heuristic
    load_balance_heuristic = np.zeros((n, n))
    avg_demand_per_customer = np.mean(demands[1:])
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
              demand_difference = abs(demands[i] - demands[j])
              load_balance_score = 1 - (demand_difference / (2 * avg_demand_per_customer + epsilon))
              load_balance_heuristic[i, j] = load_balance_score if load_balance_score > 0 else 0 #Ensure positive value

    # 8. Combination and Sparsification with Adaptive Threshold
    combined_heuristic = (distance_heuristic * demand_heuristic)**0.5 + 0.3 * depot_heuristic + 0.15 * gravitational_heuristic + 0.1 * savings_heuristic + 0.1 * clustering_heuristic + 0.05 * load_balance_heuristic

    #Adaptive Sparsification based on heuristic values
    sparsification_percentile = 30  # Adjust for desired sparsity
    threshold = np.percentile(combined_heuristic[combined_heuristic > 0], sparsification_percentile)
    k_nearest = 10 # Number of nearest neighbors to always keep
    for i in range(n):
      nearest_neighbors = np.argsort(distance_matrix[i, :])[1:k_nearest+1]
      for j in range(n):
        if combined_heuristic[i,j] < threshold and j not in nearest_neighbors:
          combined_heuristic[i,j] = 0

    # Normalize final heuristic
    max_val = np.max(combined_heuristic)
    if max_val > 0:
        heuristics = combined_heuristic / max_val
    else:
        heuristics = combined_heuristic

    return heuristics
```
