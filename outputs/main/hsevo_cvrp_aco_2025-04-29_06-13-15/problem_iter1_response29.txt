```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP)
    using a combination of distance, demand, and angle considerations.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge
                  in a solution (shape: n by n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Parameters to control the influence of each factor
    distance_weight = 1.0
    demand_weight = 0.5
    angle_weight = 0.5  # Increased angle weight

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # Avoid self-loops
                continue

            # Distance factor (Encourage shorter distances)
            distance_factor = 1 / (distance_matrix[i, j] + 1e-6) #Avoid division by zero

            # Demand factor (Penalize edges connecting to nodes with high demands if near capacity)
            demand_factor = 1.0
            if demands[i] + demands[j] > capacity / 3 : # A parameter can be added here.
                demand_factor = 0.5
            # Further penalty when a vehicle is likely to reach near capacity.
            if demands[i] + demands[j] > capacity / 2 : # A parameter can be added here.
                demand_factor = 0.25

            # Angle factor (Penalize sharp turns) - Angle at the depot (node 0)
            angle_factor = 1.0
            if i != 0 and j != 0:
                v1 = coordinates[i] - coordinates[0]
                v2 = coordinates[j] - coordinates[i]

                dot_product = np.dot(v1, v2)
                magnitude_v1 = np.linalg.norm(v1)
                magnitude_v2 = np.linalg.norm(v2)

                if magnitude_v1 > 0 and magnitude_v2 > 0:
                   cosine_angle = dot_product / (magnitude_v1 * magnitude_v2)
                   angle = np.arccos(np.clip(cosine_angle, -1.0, 1.0))  # Clip to avoid NaN

                   # Smaller angle means sharper turn, penalize
                   angle_factor = 1 - (angle / np.pi) # Normalize angle to 0-1 range; inverse so smaller angle leads to smaller factor

            heuristic_matrix[i, j] = (
                distance_weight * distance_factor +
                demand_weight * demand_factor +
                angle_weight * angle_factor
            )

    return heuristic_matrix
```
