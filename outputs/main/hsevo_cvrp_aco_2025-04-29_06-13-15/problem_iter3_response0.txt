```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version incorporates:
    1. Distance: Edges with shorter distances are preferred.
    2. Demand Feasibility: Penalizes edges that would immediately violate capacity constraints.
    3. Depot Proximity: Prioritizes returning to the depot from nodes that are far from other customers and have high demand.
    4. Gravitational Attraction: Mimics the gravitational attraction of black holes.
    5. Savings Heuristic component: Considers savings from merging routes based on distance.
    6. Sparsification: Sets unpromising edges to zero to reduce the search space.
    7. Adaptive Weighting: Dynamically adjusts the weights of different heuristic components.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))
    epsilon = 1e-6

    # 1. Distance component (inverse relationship)
    distance_heuristic = 1 / (distance_matrix + epsilon)

    # 2. Demand Feasibility component
    demand_heuristic = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_heuristic[i, j] = 0
            if demands[i] + demands[j] > capacity and i == 0:
                demand_heuristic[i, j] = 0.1
            elif demands[i] + demands[j] > capacity and j == 0:
                demand_heuristic[i, j] = 0.1
            elif i != 0 and demands[i] > capacity or j != 0 and demands[j] > capacity:
                 demand_heuristic[i,j] = 0.05

    # 3. Depot Proximity
    depot_heuristic = np.zeros((n, n))
    for i in range(1, n):
        avg_distance = np.sum(distance_matrix[i, 1:]) / (n - 2) if n > 2 else distance_matrix[i,0]
        depot_preference = (avg_distance / np.max(distance_matrix)) * (demands[i] / capacity)
        depot_heuristic[i, 0] = depot_preference
        depot_heuristic[0, i] = depot_preference

    # 4. Gravitational Attraction
    gravitational_heuristic = np.zeros((n, n))
    gravitational_constant = 1.0
    for i in range(1, n):
        for j in range(1, n):
            mass_i = demands[i]
            mass_j = demands[j]
            if i == j:
                gravitational_heuristic[i,j] = 0
                continue
            gravitational_heuristic[i, j] = gravitational_constant * (mass_i * mass_j) / (distance_matrix[i, j]**2 + epsilon)

    # 5. Savings Heuristic component
    savings_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_heuristic[i, j] = savings
            savings_heuristic[j, i] = savings  # Ensure symmetry

    # Adaptive Weights (Example: Adjust based on problem size or other characteristics)
    weight_distance = 0.4
    weight_demand = 0.1
    weight_depot = 0.15
    weight_gravity = 0.15
    weight_savings = 0.2

    # Combine the heuristics with adaptive weights
    heuristics = (weight_distance * distance_heuristic +
                  weight_demand * demand_heuristic +
                  weight_depot * depot_heuristic +
                  weight_gravity * gravitational_heuristic +
                  weight_savings * savings_heuristic)

    # Normalize
    max_val = np.max(heuristics)
    if max_val > 0:
        heuristics = heuristics / max_val

    # 6. Sparsification (set unpromising edges to zero)
    threshold = np.percentile(heuristics[heuristics > 0], 20)  # Keep top 80%
    heuristics[heuristics < threshold] = 0


    return heuristics
```
