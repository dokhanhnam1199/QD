```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version incorporates:
    1. Distance: Edges with shorter distances are preferred.
    2. Demand Feasibility: Penalizes edges that would immediately violate capacity constraints.
    3. Depot Proximity: Prioritizes returning to the depot from nodes that are far from other customers and have high demand.
    4. Savings Heuristic Integration: Encourages merging routes.
    5. Sparsification: Sets unpromising edges to zero to focus the search.
    6. Clustering Coefficient: Encourages connections between nodes within local clusters
    7. Adaptive Weighting: Adjusts weights based on problem characteristics (e.g., tightness of capacity) and node proximity.
    8. Angle Cost: Penalizes sharp turns (high angle cost) to promote smoother routes.
    9. Demand Density: Encourages connections in dense demand regions.
    10. Randomized Perturbation: Adds a small random value to each edge's heuristic value for diversity.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n). The demand of depot is demands[0].
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))
    epsilon = 1e-6

    # 1. Distance component
    distance_heuristic = 1 / (distance_matrix + epsilon)
    distance_heuristic = (distance_heuristic - np.min(distance_heuristic)) / (np.max(distance_heuristic) - np.min(distance_heuristic) + epsilon)

    # 2. Demand Feasibility
    demand_heuristic = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_heuristic[i, j] = 0
            if demands[i] + demands[j] > capacity and (i == 0 or j == 0):
                demand_heuristic[i, j] = 0.1
            elif i != 0 and demands[i] > capacity or j != 0 and demands[j] > capacity:
                demand_heuristic[i,j] = 0.05
    demand_heuristic = (demand_heuristic - np.min(demand_heuristic)) / (np.max(demand_heuristic) - np.min(demand_heuristic) + epsilon)


    # 3. Depot Proximity
    depot_heuristic = np.zeros((n, n))
    for i in range(1, n):
        avg_distance = np.sum(distance_matrix[i, 1:]) / (n - 2) if n > 2 else distance_matrix[i, 0]
        depot_preference = (avg_distance / np.max(distance_matrix)) * (demands[i] / capacity)
        depot_heuristic[i, 0] = depot_preference
        depot_heuristic[0, i] = depot_preference
    depot_heuristic = (depot_heuristic - np.min(depot_heuristic)) / (np.max(depot_heuristic) - np.min(depot_heuristic) + epsilon)

    # 4. Savings Heuristic
    savings_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_heuristic[i, j] = savings
            savings_heuristic[j, i] = savings  # Savings are symmetric
    savings_heuristic = (savings_heuristic - np.min(savings_heuristic)) / (np.max(savings_heuristic) - np.min(savings_heuristic) + epsilon)

    # 5. Clustering Coefficient approximation (Local Density)
    clustering_heuristic = np.zeros((n, n))
    k_nearest = 6  # Consider only k-nearest neighbors for clustering
    for i in range(1, n):
        nearest_neighbors = np.argsort(distance_matrix[i, 1:])[:k_nearest] + 1  # k-nearest neighbors excluding depot, adjusting index
        for j in range(1, n):
            if i != j:
                common_neighbors = 0
                for neighbor_i in nearest_neighbors:
                    if neighbor_i in (np.argsort(distance_matrix[j, 1:])[:k_nearest] + 1):
                        common_neighbors += 1
                clustering_heuristic[i, j] = common_neighbors / k_nearest
    clustering_heuristic = (clustering_heuristic - np.min(clustering_heuristic)) / (np.max(clustering_heuristic) - np.min(clustering_heuristic) + epsilon)

    # 8. Angle Cost Heuristic
    angle_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                # Calculate angle between vectors (0 -> i) and (i -> j)
                vector_oi = coordinates[i] - coordinates[0]
                vector_ij = coordinates[j] - coordinates[i]
                dot_product = np.dot(vector_oi, vector_ij)
                magnitude_oi = np.linalg.norm(vector_oi)
                magnitude_ij = np.linalg.norm(vector_ij)

                if magnitude_oi > 0 and magnitude_ij > 0:
                    cosine_angle = dot_product / (magnitude_oi * magnitude_ij)
                    cosine_angle = np.clip(cosine_angle, -1.0, 1.0)  # Clip to valid range
                    angle = np.arccos(cosine_angle)
                    angle_cost = angle / np.pi  # Normalize to [0, 1]
                    angle_heuristic[i, j] = 1 - angle_cost  # Prefer smaller angles
    angle_heuristic = (angle_heuristic - np.min(angle_heuristic)) / (np.max(angle_heuristic) - np.min(angle_heuristic) + epsilon)


    # 9. Demand Density Heuristic
    demand_density_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                #Consider nodes near to node i, and j
                near_nodes_i = np.argsort(distance_matrix[i, 1:])[:5] + 1 #5 nearest
                near_nodes_j = np.argsort(distance_matrix[j, 1:])[:5] + 1 #5 nearest

                total_demand_i = np.sum(demands[near_nodes_i])
                total_demand_j = np.sum(demands[near_nodes_j])

                demand_density_heuristic[i,j] = (total_demand_i + total_demand_j)

    demand_density_heuristic = (demand_density_heuristic - np.min(demand_density_heuristic)) / (np.max(demand_density_heuristic) - np.min(demand_density_heuristic) + epsilon)

    # Adaptive Weighting
    capacity_ratio = np.sum(demands[1:]) / (capacity * (n - 1))  # Approximate tightness

    # Dynamically adjust weights based on capacity_ratio and node proximity
    alpha = 0.2 #Distance
    beta = 0.1 #Depot
    gamma = 0.05 #savings
    delta = 0.15  #clustering
    eta = 0.3 #angle
    phi = 0.2 #demand density

    #Adjust weights
    alpha += 0.05 * capacity_ratio #Tighter -> prioritize distance
    beta -= 0.05 * capacity_ratio #Tighter -> less depot
    eta += 0.05 * capacity_ratio #Tighter -> prioritize smoother turns

    #Combine
    heuristics = alpha * distance_heuristic + beta * depot_heuristic + gamma * savings_heuristic + delta * clustering_heuristic + eta * angle_heuristic + phi * demand_density_heuristic

    # 10. Randomized Perturbation for diversity
    random_perturbation = np.random.normal(0, 0.01, size=(n, n))
    heuristics += random_perturbation

    # Sparsification
    k_nearest = 10
    threshold = np.percentile(heuristics[heuristics > 0], 30)

    for i in range(n):
        nearest_neighbors = np.argsort(distance_matrix[i, :])[1:k_nearest+1] #excluding self loop and depot

        for j in range(n):
            if heuristics[i, j] < threshold and j not in nearest_neighbors:
                heuristics[i, j] = 0

    # Normalize to be between 0 and 1
    max_val = np.max(heuristics)
    if max_val > 0:
        heuristics = heuristics / max_val

    return heuristics
```
