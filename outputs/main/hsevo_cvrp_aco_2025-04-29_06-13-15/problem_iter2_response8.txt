```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Combines distance, demand, depot proximity, and spatial influence for CVRP heuristic."""

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Parameters
    distance_weight = 1.0
    demand_weight = 1.0
    spatial_weight = 0.5
    depot_proximity_weight = 0.5

    for i in range(n):
        for j in range(n):
            if i == j:
                continue

            # Distance
            distance_heuristic = distance_weight / (distance_matrix[i, j] + 1e-9)

            # Demand
            demand_i = demands[i]
            demand_j = demands[j]
            combined_demand = (2 * demand_i * demand_j) / (demand_i + demand_j + 1e-9)
            demand_heuristic = (1 - min(1.0, combined_demand / capacity)) * demand_weight

            # Spatial
            spatial_heuristic = 0.0
            neighbor_radius = np.mean(distance_matrix) / 2
            neighbor_count = 0
            for k in range(n):
                if k != i and k != j and distance_matrix[i, k] < neighbor_radius:
                    spatial_heuristic += demands[k]
                    neighbor_count += 1
                if k != i and k != j and distance_matrix[j, k] < neighbor_radius:
                    spatial_heuristic += demands[k]
                    neighbor_count += 1
            if neighbor_count > 0:
                spatial_heuristic = (1 - min(1, spatial_heuristic / (neighbor_count * capacity + 1e-9))) * spatial_weight
            else:
                spatial_heuristic = spatial_weight

            # Depot Proximity
            depot_proximity = 1 - 0.9 * max(distance_matrix[0, i], distance_matrix[0, j]) / np.mean(distance_matrix)
            depot_heuristic = depot_proximity * depot_proximity_weight

            heuristic_matrix[i, j] = distance_heuristic + demand_heuristic + spatial_heuristic + depot_heuristic

    # Depot connections favored
    for i in range(1, n):
        heuristic_matrix[0, i] *= 1.2  # Boost depot connections
        heuristic_matrix[i, 0] *= 1.2


    return heuristic_matrix
```
