{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n### Better code\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    This version incorporates:\n    1. Distance: Edges with shorter distances are preferred.\n    2. Demand Feasibility: Penalizes edges that would immediately violate capacity constraints.\n    3. Depot Proximity: Prioritizes returning to the depot from nodes that are far from other customers and have high demand.\n    4. Savings Heuristic Integration: Encourages merging routes based on savings.\n    5. Angle-based Clustering: Encourages connections within angular sectors from the depot.\n    6. Adaptive Weighting: Adjusts the importance of heuristics based on problem characteristics.\n    7. Sparsification: Sets unpromising edges to zero to focus the search.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).\n        demands (np.ndarray): Vector of customer demands (shape: n). The demand of depot is demands[0].\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros((n, n))\n    epsilon = 1e-6\n\n    # 1. Distance component\n    distance_heuristic = 1 / (distance_matrix + epsilon)\n    distance_heuristic = (distance_heuristic - np.min(distance_heuristic)) / (np.max(distance_heuristic) - np.min(distance_heuristic) + epsilon)\n\n    # 2. Demand Feasibility\n    demand_heuristic = np.ones((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                demand_heuristic[i, j] = 0\n            if demands[i] + demands[j] > capacity and (i == 0 or j == 0): # Only penalize depot connections exceeding capacity.\n                 demand_heuristic[i, j] = 0.1  # Reduced penalty\n            elif i != 0 and demands[i] > capacity or j != 0 and demands[j] > capacity: #Prevent from selecting nodes that exceed the capacity\n                demand_heuristic[i,j] = 0.05 #reduced penalty\n\n    # 3. Depot Proximity\n    depot_heuristic = np.zeros((n, n))\n    for i in range(1, n):\n        avg_distance = np.sum(distance_matrix[i, 1:]) / (n - 2) if n > 2 else distance_matrix[i,0]\n        depot_preference = (avg_distance / (np.max(distance_matrix) + epsilon)) * (demands[i] / capacity)\n        depot_heuristic[i, 0] = depot_preference\n        depot_heuristic[0, i] = depot_preference\n    depot_heuristic = (depot_heuristic - np.min(depot_heuristic)) / (np.max(depot_heuristic) - np.min(depot_heuristic) + epsilon)\n\n\n    # 4. Savings Heuristic\n    savings_heuristic = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_heuristic[i, j] = savings\n            savings_heuristic[j, i] = savings  # Savings are symmetric\n    savings_heuristic = (savings_heuristic - np.min(savings_heuristic)) / (np.max(savings_heuristic) - np.min(savings_heuristic) + epsilon)\n\n\n    # 5. Angle-based Clustering\n    angle_heuristic = np.zeros((n, n))\n    depot_x, depot_y = coordinates[0]\n    for i in range(1, n):\n        angle_i = np.arctan2(coordinates[i, 1] - depot_y, coordinates[i, 0] - depot_x)\n        for j in range(i + 1, n):\n            angle_j = np.arctan2(coordinates[j, 1] - depot_y, coordinates[j, 0] - depot_x)\n            angle_diff = min(abs(angle_i - angle_j), 2 * np.pi - abs(angle_i - angle_j))\n            angle_preference = np.exp(-angle_diff)  # Higher value for smaller angle differences\n            angle_heuristic[i, j] = angle_preference\n            angle_heuristic[j, i] = angle_preference\n\n    angle_heuristic = (angle_heuristic - np.min(angle_heuristic)) / (np.max(angle_heuristic) - np.min(angle_heuristic) + epsilon)\n\n\n    # 6. Adaptive Weighting\n    # Adjust weights based on problem characteristics (e.g., tightness of capacity)\n    capacity_ratio = np.sum(demands[1:]) / (capacity * (n-1)) #Total demand vs max total vehicle capacity needed\n    alpha = 0.35 #Distance\n    beta = 0.1 #Depot\n    gamma = 0.25 #Savings\n    delta = 0.3 # Angle\n\n    # Combine the heuristics with adaptive weights\n    heuristics = alpha * distance_heuristic * demand_heuristic + beta * depot_heuristic + gamma * savings_heuristic * demand_heuristic + delta * angle_heuristic * demand_heuristic\n\n    # 7. Sparsification\n    k_nearest = 10\n    threshold = np.percentile(heuristics[heuristics > 0], 40)\n\n    for i in range(n):\n        nearest_neighbors = np.argsort(distance_matrix[i, :])[1:k_nearest+1]\n\n        for j in range(n):\n            if heuristics[i, j] < threshold and j not in nearest_neighbors:\n                heuristics[i, j] = 0\n\n\n    # Normalize to be between 0 and 1\n    max_val = np.max(heuristics)\n    if max_val > 0:\n        heuristics = heuristics / max_val\n\n    return heuristics\n\n### Worse code\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"CVRP heuristic: Combines distance, demand, angle, and depot proximity with sparsification.\"\"\"\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros((n, n))\n    epsilon = 1e-6\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n\n            dist_h = 1 / (distance_matrix[i, j] + epsilon)\n            demand_h = 1 - np.clip((demands[i] + demands[j]) / (2 * capacity + epsilon), 0, 1)\n            if i == 0 or j == 0:\n                demand_h = 1.0\n\n            angle_h = 1.0\n            if i != 0 and j != 0:\n                angle_h = 0.0\n                nn_idx = -1; dist = np.inf\n                for k in range(n):\n                    if k != i and k != j:\n                        if distance_matrix[i, k] < dist:\n                            dist = distance_matrix[i, k]\n                            nn_idx = k\n\n                if nn_idx != -1:\n                    a = distance_matrix[i, j]\n                    b = distance_matrix[i, nn_idx]\n                    c = distance_matrix[j, nn_idx]\n                    try:\n                        angle_h = (a**2 + b**2 - c**2) / (2 * a * b + epsilon)\n                        angle_h = np.clip(angle_h, -1.0, 1.0)\n                        angle_h = (angle_h + 1.0) / 2.0\n                    except:\n                        angle_h = 0.5\n\n            depot_prox_h = 1 - np.clip((distance_matrix[0, i] + distance_matrix[0, j]) / (2 * np.max(distance_matrix) + epsilon), 0, 1)\n\n            heuristics[i, j] = (\n                0.5 * dist_h +\n                0.15 * demand_h +\n                0.25 * angle_h +\n                0.1 * depot_prox_h\n            )\n\n    # Sparsify the matrix\n    threshold = np.mean(heuristics) * 0.2\n    heuristics[heuristics < threshold] = 0\n\n    return heuristics\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the best heuristic incorporates more diverse factors, including distance, demand feasibility, depot proximity, gravitational attraction, savings heuristic, clustering coefficient, and adaptive weighting, while the worst only considers distance, demand, angle, and depot proximity. (2nd best) vs (second worst) shows similar trend. Comparing (1st) vs (2nd), we see that the best heuristic uses adaptive weighting that adjusts based on problem characteristics, such as capacity tightness, while the second best uses fixed weights based on demand ratio. (3rd) vs (4th) shows a trend where later heuristics incorporate angle-based clustering and normalize heuristic components, features absent in the earlier ones. Comparing (second worst) vs (worst), they share same logic. Overall: The best heuristics incorporate a wider range of problem-specific information, use adaptive weighting schemes, and normalize their heuristic components. Sparsification is a common feature, but its implementation and thresholding vary.\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, I will help you redefine \"Current self-reflection\" to design better heuristics, focusing on actionable advice and avoiding common pitfalls.\n\nHere's a refined reflection framework:\n\n*   **Keywords:** Multifactorial, Adaptive Weighting, Normalization, Sparsification, Problem Characteristics, Spatial Relationships.\n*   **Advice:** Design heuristics incorporating diverse factors beyond basic features, especially spatial relationships. Implement adaptive weighting schemes dynamically adjusted by problem characteristics. Normalize heuristic outputs.\n*   **Avoid:** Static weights, neglecting problem-specific features, unnormalized components, and fixed sparsification thresholds.\n*   **Explanation:** Combine diverse, normalized factors using problem-aware adaptive weights. Use sparsification judiciously.\n\n\nYour task is to write an improved function `heuristics_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}