```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version incorporates:
    1.  Distance: Edges with shorter distances are preferred.
    2.  Demand Feasibility: Penalizes edges that would immediately violate capacity constraints if used early in a route.
    3.  Depot Proximity: Prioritizes returning to the depot from nodes that are far from other customers and have high demand.
    4.  Savings Heuristic Integration: Incorporates the savings heuristic to encourage merging routes.
    5.  Sparsification: Sets unpromising edges to zero to focus the search.
    6.  Clustering Coefficient: Encourages connections between nodes within local clusters
    7.  Adaptive Weighting: Adjusts weights based on problem characteristics (e.g., tightness of capacity) and node characteristics.
    8.  Orientation: Nodes in similar direction from the depot are more likely to be on the same route
    9.  Demand-Distance interaction: Penalize long edges between high-demand nodes.
    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n). The demand of depot is demands[0].
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))
    epsilon = 1e-6

    # 1. Distance component
    distance_heuristic = 1 / (distance_matrix + epsilon)

    # 2. Demand Feasibility
    demand_heuristic = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_heuristic[i, j] = 0
            if demands[i] + demands[j] > capacity and (i == 0 or j == 0):  # Only check at the depot
                demand_heuristic[i, j] = 0.1 # Lower, as the depot is important.
            elif i != 0 and demands[i] > capacity or j != 0 and demands[j] > capacity:
                demand_heuristic[i,j] = 0.05 # Much Lower, avoid overload

    # 3. Depot Proximity
    depot_heuristic = np.zeros((n, n))
    for i in range(1, n):
        avg_distance = np.sum(distance_matrix[i, 1:]) / (n - 2) if n > 2 else distance_matrix[i,0]
        depot_preference = (avg_distance / np.max(distance_matrix)) * (demands[i] / capacity)
        depot_heuristic[i, 0] = depot_preference
        depot_heuristic[0, i] = depot_preference

    # 4. Savings Heuristic
    savings_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_heuristic[i, j] = savings
            savings_heuristic[j, i] = savings  # Savings are symmetric

    # 5. Clustering Coefficient approximation (Local Density)
    clustering_heuristic = np.zeros((n, n))
    k_nearest = 6  # Consider only k-nearest neighbors for clustering
    for i in range(1, n):
        nearest_neighbors = np.argsort(distance_matrix[i, 1:])[:k_nearest] + 1  # k-nearest neighbors excluding depot, adjusting index
        for j in range(1, n):
            if i != j:
                common_neighbors = 0
                for neighbor_i in nearest_neighbors:
                    if neighbor_i in (np.argsort(distance_matrix[j, 1:])[:k_nearest] + 1):
                        common_neighbors += 1
                clustering_heuristic[i, j] = common_neighbors / k_nearest

    # 6. Orientation Heuristic
    orientation_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                # Calculate angles from depot
                angle_i = np.arctan2(coordinates[i, 1] - coordinates[0, 1], coordinates[i, 0] - coordinates[0, 0])
                angle_j = np.arctan2(coordinates[j, 1] - coordinates[0, 1], coordinates[j, 0] - coordinates[0, 0])

                # Angle difference
                angle_diff = np.abs(angle_i - angle_j)
                angle_diff = np.min([angle_diff, 2 * np.pi - angle_diff])  # Ensure smaller angle

                # Prioritize similar orientations (smaller angle difference)
                orientation_heuristic[i, j] = np.exp(-angle_diff) # Exponential decay

    # 7. Demand-Distance Interaction
    demand_distance_heuristic = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
             demand_distance_heuristic[i, j] = np.exp(- (demands[i] + demands[j]) * distance_matrix[i, j] / capacity) # Penalize long edges between high-demand nodes.

    # 8. Adaptive Weighting
    capacity_ratio = np.sum(demands[1:]) / (capacity * (n - 1))  # Approximate tightness
    alpha = 0.3
    beta = 0.15
    gamma = 0.05
    delta = 0.15
    eta = 0.1
    mu = 0.1
    zeta = 0.15
    theta = 0.1

    # Adjust alpha (distance) and beta (depot) based on capacity ratio
    alpha += 0.1 * capacity_ratio  # Increase importance of distance if capacity is tight
    beta -= 0.05 * capacity_ratio  # Decrease importance of going to depot if capacity is tight (more local clusters)

    # Node Diversity Weighting
    demand_std = np.std(demands[1:])
    distance_to_depot_std = np.std(distance_matrix[0, 1:])

    if demand_std > 0 and distance_to_depot_std > 0:
        alpha += 0.05 * (demand_std / np.mean(demands[1:]))
        beta += 0.05 * (distance_to_depot_std / np.mean(distance_matrix[0,1:]))


    # Combine the heuristics with adaptive weights. Weights could be tuned by a metaheuristic
    heuristics = alpha * distance_heuristic * demand_heuristic + beta * depot_heuristic + gamma * savings_heuristic + delta * clustering_heuristic + eta * orientation_heuristic + mu * demand_distance_heuristic

    # 9. Sparsification
    # Only keep edges with a heuristic value above a certain threshold or that are among the k-nearest neighbors.
    k_nearest = min(10, n - 1)  # consider only k-nearest neighbors.
    threshold = np.percentile(heuristics[heuristics > 0], 30)  # Dynamic threshold (e.g., 30th percentile)

    for i in range(n):
        # Find k-nearest neighbors
        nearest_neighbors = np.argsort(heuristics[i, :])[::-1][1:k_nearest+1] # excluding self loop

        for j in range(n):
            if heuristics[i, j] < threshold and j not in nearest_neighbors:
                heuristics[i, j] = 0

    # Normalize to be between 0 and 1
    max_val = np.max(heuristics)
    if max_val > 0:
        heuristics = heuristics / max_val

    return heuristics
```
