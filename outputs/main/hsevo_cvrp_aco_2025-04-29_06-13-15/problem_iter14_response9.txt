```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """CVRP heuristics: Combines normalized distance, demand, depot proximity, savings, and adaptive weighting."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))
    epsilon = 1e-6

    # 1. Distance (Enhanced)
    distance_heuristic = 1 / (distance_matrix**2 + epsilon)

    # 2. Demand Feasibility (Refined)
    demand_heuristic = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_heuristic[i, j] = 0
            if demands[i] + demands[j] > capacity and i == 0:
                demand_heuristic[i, j] = 0.01
            elif demands[i] + demands[j] > capacity and j == 0:
                demand_heuristic[i, j] = 0.01
            elif i != 0 and demands[i] > capacity or j != 0 and demands[j] > capacity:
                demand_heuristic[i,j] = 0.005

            # Simulate a simple route: depot -> i -> j
            remaining_capacity = capacity - demands[i] if i != 0 else capacity
            if i != 0 and j!= 0 and remaining_capacity < demands[j]:
                 demand_heuristic[i,j] = 0.001


    # 3. Depot Proximity (Contextualized)
    depot_heuristic = np.zeros((n, n))
    isolation_threshold = np.mean(distance_matrix)
    for i in range(1, n):
        avg_distance = np.sum(distance_matrix[i, 1:]) / (n - 2) if n > 2 else distance_matrix[i,0]
        if avg_distance > isolation_threshold:
            depot_preference = (avg_distance / np.max(distance_matrix)) * (demands[i] / capacity)**0.5
            depot_heuristic[i, 0] = depot_preference
            depot_heuristic[0, i] = depot_preference


    # 4. Savings Heuristic (Aggressive)
    savings_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_heuristic[i, j] = savings**2
            savings_heuristic[j, i] = savings**2

    #Adaptive Weighting
    capacity_ratio = np.sum(demands[1:]) / (capacity * (n - 1))
    num_nodes_factor = n / 100.0

    alpha = 0.4
    beta = 0.1
    gamma = 0.4


    alpha += 0.05 * capacity_ratio + 0.02 * num_nodes_factor
    beta -= 0.03 * capacity_ratio - 0.01 * num_nodes_factor
    gamma += 0.02 * capacity_ratio + 0.03 * num_nodes_factor


    heuristics = alpha * distance_heuristic * demand_heuristic + beta * depot_heuristic + gamma * savings_heuristic

    # Sparsification (Aggressive and Dynamic)
    k_nearest = 8
    threshold = np.percentile(heuristics[heuristics > 0], 50)

    for i in range(n):
        nearest_neighbors = np.argsort(distance_matrix[i, :])[1:k_nearest+1]

        for j in range(n):
            if heuristics[i, j] < threshold and j not in nearest_neighbors:
                heuristics[i, j] = 0
            #Triangle inequality check
            for k in range(n):
              if distance_matrix[i,j] > distance_matrix[i,k] + distance_matrix[k,j]:
                heuristics[i,j] = 0
                break


    # Normalize
    max_val = np.max(heuristics)
    if max_val > 0:
        heuristics = heuristics / max_val

    return heuristics
```
