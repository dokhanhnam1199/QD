```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version incorporates several improvements over v1, including:

    1.  Adaptive Distance Scaling: Dynamically adjusts the importance of distance based on problem tightness.
    2.  Refined Demand Feasibility: Considers remaining vehicle capacity for more accurate feasibility assessments.
    3.  Enhanced Depot Attraction: Uses a softmax function to prioritize returns to the depot based on urgency.
    4.  Adaptive Gravitational Constant: Adjusts the gravitational constant based on the average demand.
    5.  Edge Clustering Coefficient: Focuses on connections within high-demand clusters.
    6.  Lookahead Savings: Estimates savings based on potential future connections.
    7.  Reinforced Sparsification: Adaptively sets thresholds based on edge characteristics.
    8.  Capacity Slack Aware weight adjustments: adjusts weights based on how close total demand is to vehicle capacity.
    9.  Node Centrality Measure:  Estimates a node's importance based on its position in the network.
    10. Demand Density: Evaluates the concentration of demand around a node.
    11. Angle Penalty: Discourages sharp turns in routes.
    12. Route Elongation Penalty: Penalizes routes that significantly deviate from the direct path.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n). The demand of depot is demands[0].
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))
    epsilon = 1e-6

    # 1. Adaptive Distance Scaling
    total_demand = np.sum(demands[1:])
    capacity_ratio = total_demand / (capacity * (n - 1))
    distance_scale = 1.0 + 0.5 * capacity_ratio  # Increase distance importance if capacity is tight
    distance_heuristic = 1 / (distance_matrix * distance_scale + epsilon)
    distance_heuristic = (distance_heuristic - np.min(distance_heuristic)) / (np.max(distance_heuristic) - np.min(distance_heuristic) + epsilon)

    # 2. Refined Demand Feasibility
    demand_heuristic = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_heuristic[i, j] = 0
            #Consider the edge between depot and the node.
            if demands[i] + demands[j] > capacity and i == 0:
                demand_heuristic[i, j] = 0.1
            elif demands[i] + demands[j] > capacity and j == 0:
                demand_heuristic[i, j] = 0.1
            elif i != 0 and demands[i] > capacity or j != 0 and demands[j] > capacity:
                demand_heuristic[i,j] = 0.05
    demand_heuristic = (demand_heuristic - np.min(demand_heuristic)) / (np.max(demand_heuristic) - np.min(demand_heuristic) + epsilon)

    # 3. Enhanced Depot Attraction
    depot_heuristic = np.zeros((n, n))
    urgency_factor = 5.0
    for i in range(1, n):
        avg_distance = np.sum(distance_matrix[i, 1:]) / (n - 2) if n > 2 else distance_matrix[i,0]
        urgency = np.exp(urgency_factor * (avg_distance / np.max(distance_matrix)) * (demands[i] / capacity))
        depot_heuristic[i, 0] = urgency
        depot_heuristic[0, i] = urgency
    depot_heuristic = (depot_heuristic - np.min(depot_heuristic)) / (np.max(depot_heuristic) - np.min(depot_heuristic) + epsilon)

    # 4. Adaptive Gravitational Attraction
    gravitational_heuristic = np.zeros((n, n))
    avg_demand = np.mean(demands[1:])
    adaptive_gravitational_constant = 1.0 + 0.2 * (avg_demand / capacity)
    for i in range(1, n):
        for j in range(1, n):
            if i == j:
                gravitational_heuristic[i,j] = 0
                continue
            mass_i = demands[i]
            mass_j = demands[j]
            gravitational_heuristic[i, j] = adaptive_gravitational_constant * (mass_i * mass_j) / (distance_matrix[i, j]**2 + epsilon)
    gravitational_heuristic = (gravitational_heuristic - np.min(gravitational_heuristic)) / (np.max(gravitational_heuristic) - np.min(gravitational_heuristic) + epsilon)

    # 5. Savings Heuristic with Lookahead
    savings_heuristic = np.zeros((n, n))
    lookahead_neighbors = 5 #number of neighbors to consider for lookahead
    for i in range(1, n):
        for j in range(i + 1, n):
            savings = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j]
            #Lookahead
            neighbor_i = np.argsort(distance_matrix[i, 1:])[:lookahead_neighbors] + 1
            neighbor_j = np.argsort(distance_matrix[j, 1:])[:lookahead_neighbors] + 1
            future_savings = 0
            for ni in neighbor_i:
                for nj in neighbor_j:
                    future_savings += distance_matrix[ni, 0] + distance_matrix[0, nj] - distance_matrix[ni, nj]
            savings += 0.1 * future_savings / (lookahead_neighbors**2 + epsilon)
            savings_heuristic[i, j] = savings
            savings_heuristic[j, i] = savings
    savings_heuristic = (savings_heuristic - np.min(savings_heuristic)) / (np.max(savings_heuristic) - np.min(savings_heuristic) + epsilon)

    # 6. Edge Clustering Coefficient (focus on high-demand clusters)
    clustering_heuristic = np.zeros((n, n))
    k_nearest = 6
    for i in range(1, n):
        nearest_neighbors = np.argsort(distance_matrix[i, 1:])[:k_nearest] + 1
        for j in range(1, n):
            if i != j:
                common_neighbors = 0
                for neighbor_i in nearest_neighbors:
                    if neighbor_i in (np.argsort(distance_matrix[j, 1:])[:k_nearest] + 1):
                        common_neighbors += 1
                clustering_heuristic[i, j] = (common_neighbors / k_nearest) * (demands[i] + demands[j]) / (2*capacity) # Scale by demand
    clustering_heuristic = (clustering_heuristic - np.min(clustering_heuristic)) / (np.max(clustering_heuristic) - np.min(clustering_heuristic) + epsilon)

    # 9. Node Centrality Measure (Degree Centrality)
    centrality_heuristic = np.zeros((n, n))
    degree = np.sum(distance_matrix > 0, axis=1) # number of neighbours
    for i in range(1, n):
        for j in range(1,n):
            centrality_heuristic[i,j] = (degree[i] + degree[j])
    centrality_heuristic = (centrality_heuristic - np.min(centrality_heuristic)) / (np.max(centrality_heuristic) - np.min(centrality_heuristic) + epsilon)

    # 10. Demand Density
    demand_density_heuristic = np.zeros((n, n))
    neighbor_radius = np.mean(distance_matrix) / 3
    for i in range(1, n):
        for j in range(1, n):
            neighbors = np.where(distance_matrix[i, :] < neighbor_radius)[0]
            demand_density = np.sum(demands[neighbors]) / (len(neighbors) + epsilon)
            demand_density_heuristic[i,j] = demand_density
    demand_density_heuristic = (demand_density_heuristic - np.min(demand_density_heuristic)) / (np.max(demand_density_heuristic) - np.min(demand_density_heuristic) + epsilon)

    # 11. Angle Penalty
    angle_penalty_heuristic = np.zeros((n, n))
    for i in range(1, n):
      for j in range(1,n):
        if i == j:
          angle_penalty_heuristic[i,j] = 0
          continue
        vector_i = coordinates[i] - coordinates[0]
        vector_j = coordinates[j] - coordinates[0]
        dot_product = np.dot(vector_i, vector_j)
        magnitude_i = np.linalg.norm(vector_i)
        magnitude_j = np.linalg.norm(vector_j)
        if magnitude_i == 0 or magnitude_j == 0:
            angle = 0
        else:
            cosine_angle = dot_product / (magnitude_i * magnitude_j)
            cosine_angle = np.clip(cosine_angle, -1, 1)  # Clip to avoid errors
            angle = np.arccos(cosine_angle)
        angle_penalty = angle  # Directly use the angle as penalty
        angle_penalty_heuristic[i, j] = 1 - (angle_penalty / np.pi)  # Normalize to [0, 1]
    angle_penalty_heuristic = (angle_penalty_heuristic - np.min(angle_penalty_heuristic)) / (np.max(angle_penalty_heuristic) - np.min(angle_penalty_heuristic) + epsilon)

    # 12. Route Elongation Penalty: Penalizes routes that significantly deviate from the direct path.
    route_elongation_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                direct_distance = distance_matrix[i, j]
                detour_distance = distance_matrix[i, 0] + distance_matrix[0, j]
                elongation = direct_distance / (detour_distance + epsilon)
                route_elongation_heuristic[i,j] = elongation
    route_elongation_heuristic = (route_elongation_heuristic - np.min(route_elongation_heuristic)) / (np.max(route_elongation_heuristic) - np.min(route_elongation_heuristic) + epsilon)

    # 7. Sparsification
    k_nearest = 10
    sparsification_threshold = 25 #more aggressive sparsification

    # 8. Capacity Slack Aware Weight Adjustments
    # Measure capacity slack as the percentage of unused capacity across all vehicles, assuming one vehicle per customer.
    capacity_slack = 1 - (total_demand / (capacity * (n - 1)))
    alpha = 0.3 # Distance heuristic
    beta = 0.1 # Depot heuristic
    gamma = 0.1 # Gravitational heuristic
    delta = 0.1 # Savings heuristic
    eta = 0.1 # Clustering heuristic
    zeta = 0.05 # centrality heuristic
    theta = 0.05 # demand density heuristic
    iota = 0.1 # Angle penalty
    kappa = 0.1 # route elongation penalty

    # If we have a lot of spare capacity, reduce the importance of the depot trips.
    alpha = alpha + 0.1*capacity_slack # Give more weight to distance
    beta = beta - 0.1*capacity_slack  # Give less weight to depot
    gamma = gamma + 0.05*capacity_slack
    delta = delta + 0.05*capacity_slack

    heuristics = (alpha * distance_heuristic + beta * depot_heuristic + gamma * gravitational_heuristic + delta * savings_heuristic + eta * clustering_heuristic + zeta * centrality_heuristic + theta * demand_density_heuristic + iota * angle_penalty_heuristic + kappa * route_elongation_heuristic)

    threshold = np.percentile(heuristics[heuristics > 0], sparsification_threshold)
    for i in range(n):
        nearest_neighbors = np.argsort(distance_matrix[i, :])[1:k_nearest+1]
        for j in range(n):
            if heuristics[i, j] < threshold and j not in nearest_neighbors:
                heuristics[i, j] = 0

    # Normalize
    max_val = np.max(heuristics)
    if max_val > 0:
        heuristics = heuristics / max_val

    return heuristics
```
