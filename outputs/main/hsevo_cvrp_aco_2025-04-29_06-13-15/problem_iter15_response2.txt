```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version incorporates several improvements over v1, including:

    1.  Adaptive Distance Scaling: Dynamically adjusts the importance of distance based on problem tightness.
    2.  Refined Demand Feasibility: Considers remaining vehicle capacity for more accurate feasibility assessments.
    3.  Enhanced Depot Attraction: Uses a softmax function to prioritize returns to the depot based on urgency, using demand and distance from depot.
    4.  Adaptive Gravitational Constant: Adjusts the gravitational constant based on the average demand and spatial density.
    5.  Edge Clustering Coefficient: Focuses on connections within high-demand clusters, weighted by demand similarity.
    6.  Lookahead Savings: Estimates savings based on potential future connections with different discount factors.
    7.  Reinforced Sparsification: Adaptively sets thresholds based on edge characteristics relative to global statistics, more aggressive sparsification based on percentile of combined scores.
    8.  Capacity Slack Aware weight adjustments: adjusts weights based on how close total demand is to vehicle capacity, and dynamically adjusts the heuristic contributions.
    9.  Spatial Density Influence: Considers node density to promote connections within sparse regions.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n). The demand of depot is demands[0].
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))
    epsilon = 1e-6

    # 1. Adaptive Distance Scaling
    total_demand = np.sum(demands[1:])
    capacity_ratio = total_demand / (capacity * (n - 1))
    distance_scale = 1.0 + 0.7 * capacity_ratio  # Increase distance importance if capacity is tight
    distance_heuristic = 1 / (distance_matrix * distance_scale + epsilon)
    distance_heuristic = (distance_heuristic - np.min(distance_heuristic)) / (np.max(distance_heuristic) - np.min(distance_heuristic) + epsilon) # Normalize

    # 2. Refined Demand Feasibility
    demand_heuristic = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_heuristic[i, j] = 0
            if demands[i] + demands[j] > capacity and i == 0:
                demand_heuristic[i, j] = 0.1
            elif demands[i] + demands[j] > capacity and j == 0:
                demand_heuristic[i, j] = 0.1
            elif i != 0 and demands[i] > capacity or j != 0 and demands[j] > capacity:
                demand_heuristic[i,j] = 0.05
    demand_heuristic = (demand_heuristic - np.min(demand_heuristic)) / (np.max(demand_heuristic) - np.min(demand_heuristic) + epsilon) # Normalize


    # 3. Enhanced Depot Attraction
    depot_heuristic = np.zeros((n, n))
    urgency_factor = 7.0
    for i in range(1, n):
        avg_distance = np.sum(distance_matrix[i, 1:]) / (n - 2) if n > 2 else distance_matrix[i,0]
        urgency = np.exp(urgency_factor * (avg_distance / np.max(distance_matrix)) * (demands[i] / capacity))
        depot_heuristic[i, 0] = urgency
        depot_heuristic[0, i] = urgency
    depot_heuristic = (depot_heuristic - np.min(depot_heuristic)) / (np.max(depot_heuristic) - np.min(depot_heuristic) + epsilon) # Normalize

    # 4. Adaptive Gravitational Attraction
    gravitational_heuristic = np.zeros((n, n))
    avg_demand = np.mean(demands[1:])
    # Calculate spatial density
    node_density = np.zeros(n)
    for i in range(1, n):
        distances_to_others = distance_matrix[i, 1:]
        nearest_neighbors_dist = np.sort(distances_to_others)[:5]
        node_density[i] = np.mean(nearest_neighbors_dist) # Average distance to 5 nearest neighbors
    avg_node_density = np.mean(node_density[1:])
    adaptive_gravitational_constant = 1.0 + 0.3 * (avg_demand / capacity) + 0.2 * (avg_node_density / np.max(distance_matrix))
    for i in range(1, n):
        for j in range(1, n):
            if i == j:
                gravitational_heuristic[i,j] = 0
                continue
            mass_i = demands[i]
            mass_j = demands[j]
            gravitational_heuristic[i, j] = adaptive_gravitational_constant * (mass_i * mass_j) / (distance_matrix[i, j]**2 + epsilon)
    gravitational_heuristic = (gravitational_heuristic - np.min(gravitational_heuristic)) / (np.max(gravitational_heuristic) - np.min(gravitational_heuristic) + epsilon) # Normalize

    # 5. Savings Heuristic with Lookahead
    savings_heuristic = np.zeros((n, n))
    lookahead_neighbors = 4
    for i in range(1, n):
        for j in range(i + 1, n):
            savings = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j]
            neighbor_i = np.argsort(distance_matrix[i, 1:])[:lookahead_neighbors] + 1
            neighbor_j = np.argsort(distance_matrix[j, 1:])[:lookahead_neighbors] + 1
            future_savings = 0
            for ni in neighbor_i:
                for nj in neighbor_j:
                    future_savings += distance_matrix[ni, 0] + distance_matrix[0, nj] - distance_matrix[ni, nj]
            savings += 0.15 * future_savings / (lookahead_neighbors**2 + epsilon)
            savings_heuristic[i, j] = savings
            savings_heuristic[j, i] = savings
    savings_heuristic = (savings_heuristic - np.min(savings_heuristic)) / (np.max(savings_heuristic) - np.min(savings_heuristic) + epsilon) # Normalize

    # 6. Edge Clustering Coefficient (focus on high-demand clusters)
    clustering_heuristic = np.zeros((n, n))
    k_nearest = 5
    for i in range(1, n):
        nearest_neighbors = np.argsort(distance_matrix[i, 1:])[:k_nearest] + 1
        for j in range(1, n):
            if i != j:
                common_neighbors = 0
                for neighbor_i in nearest_neighbors:
                    if neighbor_i in (np.argsort(distance_matrix[j, 1:])[:k_nearest] + 1):
                        common_neighbors += 1
                demand_similarity = 1 - abs(demands[i] - demands[j]) / (capacity + epsilon) # Added Demand Similarity
                clustering_heuristic[i, j] = (common_neighbors / k_nearest) * (demands[i] + demands[j]) / (2*capacity) * demand_similarity
    clustering_heuristic = (clustering_heuristic - np.min(clustering_heuristic)) / (np.max(clustering_heuristic) - np.min(clustering_heuristic) + epsilon) # Normalize

    # 7. Sparsification
    k_nearest = 8
    sparsification_threshold = 30 # More agressive sparsification
    combined_heuristic = (distance_heuristic * demand_heuristic)**0.5 + 0.3 * depot_heuristic + 0.2 * gravitational_heuristic + 0.15 * savings_heuristic + 0.1 * clustering_heuristic
    threshold = np.percentile(combined_heuristic[combined_heuristic > 0], sparsification_threshold)
    for i in range(n):
        nearest_neighbors = np.argsort(distance_matrix[i, :])[1:k_nearest+1]
        for j in range(n):
            if combined_heuristic[i, j] < threshold and j not in nearest_neighbors:
                combined_heuristic[i, j] = 0

    # 8. Capacity Slack Aware Weight Adjustments
    capacity_slack = 1 - (total_demand / (capacity * (n - 1)))
    alpha = 0.4
    beta = 0.2
    gamma = 0.1
    delta = 0.15
    eta = 0.15

    alpha = alpha + 0.1*capacity_slack
    beta = beta - 0.1*capacity_slack
    gamma = gamma + 0.05*capacity_slack
    delta = delta + 0.05*capacity_slack
    eta = eta - 0.05*capacity_slack

    # 9. Spatial Density Influence
    spatial_density_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            spatial_density_heuristic[i, j] = 1 / (node_density[i] + node_density[j] + epsilon)

    spatial_density_heuristic = (spatial_density_heuristic - np.min(spatial_density_heuristic)) / (np.max(spatial_density_heuristic) - np.min(spatial_density_heuristic) + epsilon) # Normalize

    # Combine all heuristics
    heuristics = (distance_heuristic * demand_heuristic)**0.5 * alpha + depot_heuristic * beta + gravitational_heuristic * gamma + savings_heuristic * delta + clustering_heuristic * eta + spatial_density_heuristic * 0.1

    # Normalize
    max_val = np.max(heuristics)
    if max_val > 0:
        heuristics = heuristics / max_val

    return heuristics
```
