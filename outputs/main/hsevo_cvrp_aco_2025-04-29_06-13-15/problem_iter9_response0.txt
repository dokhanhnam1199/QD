```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version incorporates:
    1.  Distance: Edges with shorter distances are preferred.
    2.  Demand Feasibility: Penalizes edges that would immediately violate capacity constraints.
    3.  Depot Proximity: Prioritizes returning to the depot from nodes that are far from other customers and have high demand.
    4.  Savings Heuristic Integration: Incorporates the savings heuristic to encourage merging routes.
    5.  Sparsification: Sets unpromising edges to zero to focus the search.
    6.  Clustering Coefficient: Encourages connections between nodes within local clusters. Uses adaptive k-nearest neighbor count.
    7.  Adaptive Weighting: Adjusts weights based on problem characteristics (e.g., tightness of capacity, number of nodes).
    8.  Node Centrality: Prioritizes connections from more "central" nodes to distribute routes evenly.
    9.  Demand Density: Encourages links between nodes with similar demand profiles within spatial proximity
    10. Route balancing: Add heuristics to encourage routes of a similar length

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n). The demand of depot is demands[0].
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))
    epsilon = 1e-6

    # 1. Distance component (Normalized)
    distance_heuristic = 1 / (distance_matrix + epsilon)
    distance_heuristic = distance_heuristic / np.max(distance_heuristic)

    # 2. Demand Feasibility
    demand_heuristic = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_heuristic[i, j] = 0
            if demands[i] + demands[j] > capacity and i == 0:
                demand_heuristic[i, j] = 0.1
            elif demands[i] + demands[j] > capacity and j == 0:
                demand_heuristic[i, j] = 0.1
            elif i != 0 and demands[i] > capacity or j != 0 and demands[j] > capacity:
                demand_heuristic[i,j] = 0.05
    demand_heuristic = demand_heuristic / np.max(demand_heuristic)

    # 3. Depot Proximity (Normalized)
    depot_heuristic = np.zeros((n, n))
    for i in range(1, n):
        avg_distance = np.sum(distance_matrix[i, 1:]) / (n - 2) if n > 2 else distance_matrix[i,0]
        depot_preference = (avg_distance / np.max(distance_matrix)) * (demands[i] / capacity)
        depot_heuristic[i, 0] = depot_preference
        depot_heuristic[0, i] = depot_preference
    depot_heuristic = depot_heuristic / np.max(depot_heuristic)

    # 4. Savings Heuristic (Normalized)
    savings_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_heuristic[i, j] = savings
            savings_heuristic[j, i] = savings  # Savings are symmetric
    savings_heuristic = savings_heuristic / np.max(savings_heuristic)

    # 6. Clustering Coefficient approximation (Local Density) - Adaptive k
    clustering_heuristic = np.zeros((n, n))
    k_nearest = min(10, n - 1)  # Adaptive k: Limit to n-1
    for i in range(1, n):
        nearest_neighbors = np.argsort(distance_matrix[i, 1:])[:k_nearest] + 1
        for j in range(1, n):
            if i != j:
                common_neighbors = 0
                for neighbor_i in nearest_neighbors:
                    if neighbor_i in (np.argsort(distance_matrix[j, 1:])[:k_nearest] + 1):
                        common_neighbors += 1
                clustering_heuristic[i, j] = common_neighbors / k_nearest
    clustering_heuristic = clustering_heuristic / np.max(clustering_heuristic)


    # 8. Node Centrality (Closeness Centrality Approximation) (Normalized)
    centrality = np.zeros(n)
    for i in range(1, n):
        centrality[i] = np.sum(distance_matrix[i, 1:])
    centrality = np.max(centrality) / (centrality + epsilon)  # Higher is more central
    centrality[0] = 1 #depot as most central
    centrality_heuristic = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            centrality_heuristic[i, j] = (centrality[i] + centrality[j]) / 2.0
    centrality_heuristic = centrality_heuristic / np.max(centrality_heuristic)

    # 9. Demand Density (Normalized)
    demand_density_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            demand_diff = abs(demands[i] - demands[j]) / capacity
            distance_normalized = distance_matrix[i, j] / np.max(distance_matrix)
            demand_density_heuristic[i, j] = 1- (demand_diff + distance_normalized) / 2
    demand_density_heuristic = demand_density_heuristic / np.max(demand_density_heuristic)

    #10. Route Balance (penalize connections that contribute to large imbalances)
    route_balance_heuristic = np.ones((n,n))
    avg_route_length = np.sum(distance_matrix) / (n * n)

    for i in range(1,n):
        for j in range(1,n):
            if i == j:
                route_balance_heuristic[i,j] = 0
            edge_length_deviation = abs(distance_matrix[i,j] - avg_route_length)
            route_balance_heuristic[i,j] = max(0, 1 - (edge_length_deviation / avg_route_length))

    route_balance_heuristic = route_balance_heuristic / np.max(route_balance_heuristic)



    # 7. Adaptive Weighting
    capacity_ratio = np.sum(demands[1:]) / (capacity * (n - 1))  # Approximate tightness
    num_nodes_factor = n / 100.0  # Scale based on the number of nodes

    alpha = 0.2  # Distance
    beta = 0.15  # Depot Proximity
    gamma = 0.1   # Savings
    delta = 0.15  # Clustering
    eta = 0.2  # Centrality
    mu = 0.1   # Demand Density
    zeta = 0.1 #route balance

    # Adapt weights
    alpha += 0.05 * capacity_ratio + 0.02 * num_nodes_factor
    beta -= 0.03 * capacity_ratio - 0.01 * num_nodes_factor
    gamma += 0.02 * capacity_ratio + 0.03 * num_nodes_factor
    delta += 0.01 * capacity_ratio + 0.02 * num_nodes_factor
    eta -= 0.01 * capacity_ratio - 0.02 * num_nodes_factor
    mu += 0.03 * capacity_ratio + 0.01 * num_nodes_factor
    zeta +=  0.02 * capacity_ratio - 0.01 * num_nodes_factor

    # Combine the heuristics with adaptive weights.
    heuristics = (alpha * distance_heuristic * demand_heuristic +
                  beta * depot_heuristic +
                  gamma * savings_heuristic +
                  delta * clustering_heuristic +
                  eta * centrality_heuristic +
                  mu * demand_density_heuristic +
                  zeta * route_balance_heuristic)


    # 5. Sparsification (Adaptive Threshold)
    k_nearest = min(12, n -1)
    threshold = np.percentile(heuristics[heuristics > 0], 40) # Adaptive Percentile

    for i in range(n):
        nearest_neighbors = np.argsort(distance_matrix[i, :])[1:k_nearest+1]

        for j in range(n):
            if heuristics[i, j] < threshold and j not in nearest_neighbors:
                heuristics[i, j] = 0

    # Normalize to be between 0 and 1
    max_val = np.max(heuristics)
    if max_val > 0:
        heuristics = heuristics / max_val

    return heuristics
```
