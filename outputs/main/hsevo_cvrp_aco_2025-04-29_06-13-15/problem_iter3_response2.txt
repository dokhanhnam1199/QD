```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version incorporates:
    1.  Distance: Edges with shorter distances are preferred.
    2.  Demand Feasibility:  Penalizes edges that would immediately violate capacity constraints if used early in a route.
    3.  Depot Proximity: Prioritizes returning to the depot from nodes that are far from other customers and have high demand.
    4.  Gravitational Attraction: Mimics the gravitational attraction of black holes: Nodes with high demand and/or far from depot will "attract" closer nodes to form clusters.
    5.  Savings Heuristic Component:  Estimates cost savings by merging routes.
    6.  Sparsification: Setting unpromising edges to zero to reduce the search space and computational cost.
    7.  Adaptive Weighting: Dynamically adjusts the weights of different heuristic components based on problem characteristics.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n). The demand of depot is demands[0].
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))

    # Add a small value to avoid division by zero
    epsilon = 1e-6

    # 1. Distance component (inverse relationship)
    distance_heuristic = 1 / (distance_matrix + epsilon)

    # 2. Demand Feasibility component
    demand_heuristic = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_heuristic[i, j] = 0  # No self-loops

            # If using this edge would exceed vehicle capacity (assuming starting from depot), penalize
            if demands[i] + demands[j] > capacity and i == 0: # starting node
                demand_heuristic[i, j] = 0.1  # A small value but not zero so it is not totally ignored
            elif demands[i] + demands[j] > capacity and j == 0:
                demand_heuristic[i, j] = 0.1
            elif i != 0 and demands[i] > capacity or j != 0 and demands[j] > capacity:
                 demand_heuristic[i,j] = 0.05


    # 3. Depot Proximity (encourage returning to depot if far and demand is high)
    depot_heuristic = np.zeros((n, n))
    for i in range(1, n):  # Exclude depot itself
        # Calculate average distance from node i to all other nodes (excluding the depot)
        avg_distance = np.sum(distance_matrix[i, 1:]) / (n - 2) if n > 2 else distance_matrix[i,0] # If only one other point exist use the distance to depot.

        # Encourage going back to the depot from this node IF it is far and demands are relatively high.
        # Depot preference is weighted based on avg_distance and demand compared to capacity
        depot_preference = (avg_distance / np.max(distance_matrix)) * (demands[i] / capacity)
        depot_heuristic[i, 0] = depot_preference
        depot_heuristic[0, i] = depot_preference #symmetry

    # 4. Gravitational Attraction: Node `i` attracts closeby node `j`
    gravitational_heuristic = np.zeros((n, n))
    gravitational_constant = 1.0  # Adjust to control attraction strength.
    for i in range(1, n):  # Start from 1 to exclude the depot itself as a gravity center. Depot is served by the previous depot_heuristic.
        for j in range(1, n): # Start from 1 to exclude the depot itself being attracted by the gravitational heuristic.

            mass_i = demands[i]
            mass_j = demands[j]
            if i == j:
                gravitational_heuristic[i,j] = 0
                continue
            gravitational_heuristic[i, j] = gravitational_constant * (mass_i * mass_j) / (distance_matrix[i, j]**2 + epsilon) # F = G*m1*m2/r^2

    # 5. Savings Heuristic Component
    savings_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_heuristic[i, j] = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_heuristic[j, i] = savings_heuristic[i, j]  # Symmetry

    # Adaptive Weighting (Example: Adjust based on average demand relative to capacity)
    avg_demand = np.mean(demands[1:])
    demand_ratio = avg_demand / capacity

    # Adjust weights based on demand ratio (example)
    weight_distance = 0.4  # Base weight
    weight_demand = 0.3
    weight_depot = 0.1 + demand_ratio * 0.2  # Increase depot weight if demand is high
    weight_gravitational = 0.1
    weight_savings = 0.1 - demand_ratio * 0.05 #Decrease saving if demand is high

    # Combine the heuristics with adaptive weights
    heuristics = (weight_distance * distance_heuristic * demand_heuristic +
                  weight_depot * depot_heuristic +
                  weight_gravitational * gravitational_heuristic +
                  weight_savings * savings_heuristic)

    # 6. Sparsification (set unpromising edges to zero)
    threshold = np.mean(heuristics) * 0.2  # Dynamic threshold based on mean
    heuristics[heuristics < threshold] = 0

    # Normalize to be between 0 and 1, can help stability of stochastic sampling methods
    max_val = np.max(heuristics)
    if max_val > 0:
        heuristics = heuristics / max_val

    return heuristics
```
