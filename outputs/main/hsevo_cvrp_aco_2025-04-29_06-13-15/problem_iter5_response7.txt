```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """CVRP heuristics: Combines distance, demand, depot proximity, and angle prioritization."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))
    epsilon = 1e-6

    # Distance component (inverse relationship)
    distance_heuristic = 1 / (distance_matrix + epsilon)

    # Demand Feasibility component
    demand_heuristic = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_heuristic[i, j] = 0
            if demands[i] + demands[j] > capacity and i == 0:
                demand_heuristic[i, j] = 0.1
            elif demands[i] + demands[j] > capacity and j == 0:
                demand_heuristic[i, j] = 0.1
            elif i != 0 and demands[i] > capacity or j != 0 and demands[j] > capacity:
                 demand_heuristic[i,j] = 0.05

    # Depot Proximity
    depot_heuristic = np.zeros((n, n))
    for i in range(1, n):
        avg_distance = np.sum(distance_matrix[i, 1:]) / (n - 2) if n > 2 else distance_matrix[i,0]
        depot_preference = (avg_distance / np.max(distance_matrix)) * (demands[i] / capacity)
        depot_heuristic[i, 0] = depot_preference
        depot_heuristic[0, i] = depot_preference

    # Angle Prioritization
    angle_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                best_k = -1
                min_dist = float('inf')
                for k in range(1, n):
                    if k != i and k != j:
                        dist = distance_matrix[i, k] + distance_matrix[j, k]
                        if dist < min_dist:
                            min_dist = dist
                            best_k = k
                if best_k != -1:
                    a = distance_matrix[i,j]
                    b = distance_matrix[i, best_k]
                    c = distance_matrix[j, best_k]
                    angle = np.arccos((b**2 + c**2 - a**2) / (2 * b * c + epsilon))
                    angle_heuristic[i,j] = 1 - (angle / np.pi)

    # Sparsification
    avg_distance = np.sum(distance_matrix) / (n * (n - 1))
    sparsification_threshold = 2.5 * avg_distance
    sparsification_mask = distance_matrix <= sparsification_threshold

    # Combine heuristics with adaptive scaling
    alpha = 0.4
    beta = 0.2
    gamma = 0.15
    theta = 0.25
    heuristics = alpha * distance_heuristic * demand_heuristic + beta * demand_heuristic + gamma * depot_heuristic + theta * angle_heuristic

    heuristics = heuristics * sparsification_mask

    max_val = np.max(heuristics)
    if max_val > 0:
        heuristics = heuristics / max_val

    return heuristics
```
