```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version enhances v1 with more sophisticated strategies:

    1.  Adaptive Distance and Demand Prioritization: Integrates distance and demand information more tightly.
    2.  Cluster-Aware Depot Attraction: Modifies depot attraction based on cluster density around nodes.
    3.  Combined Gravitational and Savings Potential: Uses a hybrid approach leveraging both.
    4.  Dynamic Sparsification Based on Edge Density: Adjusts sparsification based on local edge density.
    5.  Capacity Slack Awareness with Non-Linear Weighting: Employs a non-linear function for capacity slack.
    6.  Spatial Density Consideration: Incorporates a measure of node density based on neighbors.
    7.  Edge Centrality Measure: Computes a betweenness-like centrality measure for edges.
    8.  Demand Correlation: Favors connections between nodes with similar demands when capacity allows.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n). The demand of depot is demands[0].
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))
    epsilon = 1e-6

    # 1. Adaptive Distance and Demand Prioritization
    total_demand = np.sum(demands[1:])
    capacity_ratio = total_demand / (capacity * (n - 1))
    distance_scale = 1.0 + 0.5 * capacity_ratio
    distance_heuristic = 1 / (distance_matrix * distance_scale + epsilon)
    demand_feasibility = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_feasibility[i, j] = 0
            if demands[i] + demands[j] > capacity and (i == 0 or j == 0):
                demand_feasibility[i, j] = 0.1
            elif i != 0 and demands[i] > capacity or j != 0 and demands[j] > capacity:
                demand_feasibility[i, j] = 0.05
    combined_distance_demand = (distance_heuristic * demand_feasibility)**0.5

    # 2. Cluster-Aware Depot Attraction
    depot_heuristic = np.zeros((n, n))
    urgency_factor = 5.0
    k_nearest = 5
    for i in range(1, n):
        avg_distance = np.sum(distance_matrix[i, 1:]) / (n - 2) if n > 2 else distance_matrix[i,0]
        urgency = np.exp(urgency_factor * (avg_distance / np.max(distance_matrix)) * (demands[i] / capacity))
        nearest_neighbors = np.argsort(distance_matrix[i, 1:])[:k_nearest] + 1
        cluster_density = np.sum(demands[nearest_neighbors]) / (k_nearest * capacity + epsilon)
        depot_heuristic[i, 0] = urgency * (1 + cluster_density)
        depot_heuristic[0, i] = urgency * (1 + cluster_density)

    # 3. Combined Gravitational and Savings Potential
    gravitational_heuristic = np.zeros((n, n))
    avg_demand = np.mean(demands[1:])
    adaptive_gravitational_constant = 1.0 + 0.2 * (avg_demand / capacity)
    for i in range(1, n):
        for j in range(1, n):
            if i == j:
                gravitational_heuristic[i,j] = 0
                continue
            mass_i = demands[i]
            mass_j = demands[j]
            gravitational_heuristic[i, j] = adaptive_gravitational_constant * (mass_i * mass_j) / (distance_matrix[i, j]**2 + epsilon)

    savings_heuristic = np.zeros((n, n))
    lookahead_neighbors = 5
    for i in range(1, n):
        for j in range(i + 1, n):
            savings = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j]
            neighbor_i = np.argsort(distance_matrix[i, 1:])[:lookahead_neighbors] + 1
            neighbor_j = np.argsort(distance_matrix[j, 1:])[:lookahead_neighbors] + 1
            future_savings = 0
            for ni in neighbor_i:
                for nj in neighbor_j:
                    future_savings += distance_matrix[ni, 0] + distance_matrix[0, nj] - distance_matrix[ni, nj]
            savings += 0.1 * future_savings / (lookahead_neighbors**2 + epsilon)
            savings_heuristic[i, j] = savings
            savings_heuristic[j, i] = savings
    combined_grav_savings = (gravitational_heuristic * savings_heuristic)**0.5

    # 4. Dynamic Sparsification Based on Edge Density
    k_nearest_sparsify = 8
    edge_density_threshold = 0.75
    sparsification_threshold = 30 # less aggressive sparsification
    temp_heuristics = combined_distance_demand + 0.3 * depot_heuristic + 0.2 * combined_grav_savings
    threshold = np.percentile(temp_heuristics[temp_heuristics > 0], sparsification_threshold)
    for i in range(n):
        nearest_neighbors = np.argsort(distance_matrix[i, :])[1:k_nearest_sparsify+1]
        neighbor_edges_above_threshold = np.sum(temp_heuristics[i, nearest_neighbors] > threshold)
        edge_density = neighbor_edges_above_threshold / k_nearest_sparsify
        for j in range(n):
            if temp_heuristics[i, j] < threshold and j not in nearest_neighbors and edge_density < edge_density_threshold:
                temp_heuristics[i, j] = 0

    # 5. Capacity Slack Awareness with Non-Linear Weighting
    capacity_slack = 1 - (total_demand / (capacity * (n - 1) + epsilon))
    slack_weight = np.exp(-5 * capacity_slack) # Non-linear scaling
    alpha = 0.4 + 0.1 * slack_weight  #combined_distance_demand
    beta = 0.2 - 0.1 * slack_weight #depot_heuristic
    gamma = 0.4  #combined_grav_savings

    heuristics = alpha * combined_distance_demand + beta * depot_heuristic + gamma * combined_grav_savings

    # 6. Spatial Density Consideration
    spatial_density = np.zeros((n,n))
    k_nearest_spatial = 4
    for i in range(1,n):
        nearest_nodes = np.argsort(distance_matrix[i,1:])[:k_nearest_spatial] + 1
        avg_dist = np.mean(distance_matrix[i,nearest_nodes])
        for j in range(1,n):
            if i!= j:
                spatial_density[i,j] = np.exp(-distance_matrix[i,j]/avg_dist)
    heuristics = 0.8 * heuristics + 0.2 * spatial_density

    # 7. Edge Centrality Measure (Approximate Betweenness)
    edge_centrality = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            shortest_path_len = distance_matrix[i, j]
            num_shorter_paths = 0
            for k in range(1, n):
                if k != i and k != j:
                    if distance_matrix[i, k] + distance_matrix[k, j] < shortest_path_len * 1.1:  # approximate check
                        num_shorter_paths += 1
            edge_centrality[i, j] = num_shorter_paths / (n - 2 + epsilon)
            edge_centrality[j, i] = edge_centrality[i, j]
    heuristics = 0.9 * heuristics + 0.1 * edge_centrality

    # 8. Demand Correlation
    demand_correlation = np.zeros((n,n))
    for i in range(1,n):
        for j in range(i+1,n):
            demand_similarity = 1 - abs(demands[i]-demands[j])/(max(demands[i],demands[j])+epsilon)
            if demands[i] + demands[j] <= capacity:
                demand_correlation[i,j] = demand_similarity
                demand_correlation[j,i] = demand_similarity
    heuristics = 0.9 * heuristics + 0.1 * demand_correlation

    #Normalize the values
    max_val = np.max(heuristics)
    if max_val > 0:
        heuristics = heuristics / max_val
    return heuristics
```
