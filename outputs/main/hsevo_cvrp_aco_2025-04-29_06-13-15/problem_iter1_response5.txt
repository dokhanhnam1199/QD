```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristic function for the Capacitated Vehicle Routing Problem (CVRP) based on distance, demand, and node proximity.

    Args:
        distance_matrix (np.ndarray): A matrix of pairwise distances between nodes.
        coordinates (np.ndarray): Euclidean coordinates of the nodes.
        demands (np.ndarray): A vector of customer demands.
        capacity (int): The vehicle capacity.

    Returns:
        np.ndarray: A matrix of heuristics values for each edge, indicating how promising it is to include the edge in a solution.
    """

    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix)

    # Heuristic 1: Inverse distance - shorter distances are preferred
    distance_heuristic = 1 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero

    # Heuristic 2: Demand-based penalty - penalize edges that connect nodes with high combined demand, exceeding capacity. Edges to the depot are always favored
    demand_penalty = np.ones_like(distance_matrix)
    for i in range(1, n):  # Skip depot (index 0) for the inner loop
        for j in range(1, n):
            if i != j:
                if demands[i] + demands[j] > capacity:
                    demand_penalty[i, j] = 0.1  # Severely penalize if sum exceeds capacity
                else:
                    demand_penalty[i,j] = 1

    #Heuristic 3: Closeness to Depot Penalty.  Nodes farther away from depot penalize each other more strongly. This tries to pull edges closer to the depot earlier.
    depot_penalty = np.ones_like(distance_matrix)
    for i in range(1, n):
        for j in range(1,n):
            if i != j:
                depot_distance_i = distance_matrix[0, i]
                depot_distance_j = distance_matrix[0, j]
                depot_penalty[i, j] = max(0.1, 1.0 / (0.1 + (depot_distance_i + depot_distance_j)/2 )) # Ensure a non-zero penalty. Larger distanes penalize more

    #Favor connections to/from the depot
    for i in range(1, n):
      demand_penalty[0,i] = 1
      demand_penalty[i,0] = 1
      depot_penalty[0,i] = 1
      depot_penalty[i,0] = 1




    # Combine the heuristics - balance distance and demand considerations
    heuristics_matrix = distance_heuristic * demand_penalty * depot_penalty

    return heuristics_matrix
```
