```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version incorporates:
    1. Distance: Edges with shorter distances are preferred.
    2. Demand Feasibility: Penalizes edges that would immediately violate capacity constraints if used early in a route.
    3. Depot Proximity: Prioritizes returning to the depot from nodes that are far from other customers and have high demand.
    4. Savings Heuristic Integration: Incorporates the savings heuristic to encourage merging routes.
    5. Sparsification: Sets unpromising edges to zero to focus the search.
    6. Node Centrality: Encourage connections between nodes with high betweenness centrality
    7. Demand Correlation: Encourages connections between nodes with similar demand.
    8. Adaptive Weighting: Adjusts weights based on problem characteristics (e.g., tightness of capacity)
    9. Route Length Regularization: Penalizes edges that would lead to excessively long routes

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n). The demand of depot is demands[0].
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))
    epsilon = 1e-6

    # 1. Distance component
    distance_heuristic = 1 / (distance_matrix + epsilon)

    # 2. Demand Feasibility
    demand_heuristic = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_heuristic[i, j] = 0
            if demands[i] + demands[j] > capacity and i == 0:
                demand_heuristic[i, j] = 0.1
            elif demands[i] + demands[j] > capacity and j == 0:
                demand_heuristic[i, j] = 0.1
            elif i != 0 and demands[i] > capacity or j != 0 and demands[j] > capacity:
                demand_heuristic[i,j] = 0.05

    # 3. Depot Proximity
    depot_heuristic = np.zeros((n, n))
    for i in range(1, n):
        avg_distance = np.sum(distance_matrix[i, 1:]) / (n - 2) if n > 2 else distance_matrix[i,0]
        depot_preference = (avg_distance / np.max(distance_matrix)) * (demands[i] / capacity)
        depot_heuristic[i, 0] = depot_preference
        depot_heuristic[0, i] = depot_preference

    # 4. Savings Heuristic
    savings_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_heuristic[i, j] = savings
            savings_heuristic[j, i] = savings  # Savings are symmetric

    # 6. Node Centrality (Degree Centrality approximation)
    centrality_heuristic = np.zeros((n, n))
    for i in range(1, n):
        degree_i = np.sum(distance_matrix[i, 1:] < np.mean(distance_matrix[i, 1:])) # Number of nodes closer than average
        for j in range(1, n):
            if i != j:
                degree_j = np.sum(distance_matrix[j, 1:] < np.mean(distance_matrix[j, 1:]))
                centrality_heuristic[i, j] = (degree_i + degree_j) / (2 * (n - 1))

    # 7. Demand Correlation
    demand_correlation_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                demand_correlation_heuristic[i, j] = 1 - abs(demands[i] - demands[j]) / capacity # Normalize by capacity

    # 9. Route Length Regularization
    route_length_heuristic = np.ones((n, n))
    avg_distance_all = np.mean(distance_matrix[distance_matrix > 0])
    max_route_length = 2.5 * avg_distance_all # allow route to be at most 2.5x avg distance
    for i in range(n):
      for j in range(n):
        if distance_matrix[i,j] > max_route_length:
          route_length_heuristic[i, j] = 0.2

    # 8. Adaptive Weighting
    capacity_ratio = np.sum(demands[1:]) / (capacity * (n - 1))  # Approximate tightness
    alpha = 0.4
    beta = 0.1
    gamma = 0.15
    delta = 0.2
    eta = 0.1
    zeta = 0.05
    theta = 0.1 # weight for route length

    # Adjust alpha (distance) and beta (depot) based on capacity ratio
    alpha += 0.1 * capacity_ratio  # Increase importance of distance if capacity is tight
    beta -= 0.05 * capacity_ratio  # Decrease importance of going to depot if capacity is tight (more local clusters)

    # Combine the heuristics with adaptive weights. Weights could be tuned by a metaheuristic
    heuristics = alpha * distance_heuristic * demand_heuristic + beta * depot_heuristic + gamma * savings_heuristic + delta * centrality_heuristic + eta * demand_correlation_heuristic + zeta * savings_heuristic + theta * route_length_heuristic

    # 5. Sparsification
    # Only keep edges with a heuristic value above a certain threshold or that are among the k-nearest neighbors.
    k_nearest = 12  # consider only k-nearest neighbors.
    threshold = np.percentile(heuristics[heuristics > 0], 35)  # Dynamic threshold (e.g., 35th percentile)

    for i in range(n):
        # Find k-nearest neighbors
        nearest_neighbors = np.argsort(distance_matrix[i, :])[1:k_nearest+1] #excluding self loop and depot

        for j in range(n):
            if heuristics[i, j] < threshold and j not in nearest_neighbors:
                heuristics[i, j] = 0

    # Normalize to be between 0 and 1
    max_val = np.max(heuristics)
    if max_val > 0:
        heuristics = heuristics / max_val

    return heuristics
```
