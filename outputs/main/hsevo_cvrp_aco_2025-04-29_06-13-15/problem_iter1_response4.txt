```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Generates heuristics for the Capacitated Vehicle Routing Problem (CVRP).
    This version considers distance, demand, and angular proximity to the depot.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Demand of each node (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Heuristic values for each edge (n x n). Higher values indicate
                      more promising edges.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate angles relative to the depot (node 0)
    depot_x, depot_y = coordinates[0]
    angles = np.arctan2(coordinates[:, 1] - depot_y, coordinates[:, 0] - depot_x)

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
                continue

            distance = distance_matrix[i, j]

            # Heuristic component 1: Inverse distance (shorter is better)
            distance_heuristic = 1 / (distance + 1e-9) #Add a small value to avoid division by zero

            # Heuristic component 2: Demand consideration.  Prefer edges
            # that connect nodes with lower demands.
            demand_heuristic = 1 / (demands[i] + demands[j] + 1e-9) #Avoid zero

            # Heuristic component 3: Angular proximity to depot.  Favor connecting
            # nodes that are close in angle from the depot to encourage
            # radial routes.  Small difference == high value
            angle_diff = np.abs(angles[i] - angles[j])
            angle_heuristic = 1 / (angle_diff + 0.01) # prevent division by zero


            # Combine the heuristics (weighted average)
            heuristic_matrix[i, j] = (
                0.6 * distance_heuristic +
                0.2 * demand_heuristic +
                0.2 * angle_heuristic
            )

    return heuristic_matrix
```
