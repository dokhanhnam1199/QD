```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Combines distance, demand, depot proximity, and angular factors for CVRP."""
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))
    depot_x, depot_y = coordinates[0]

    for i in range(n):
        for j in range(n):
            if i == j:
                continue

            distance_factor = 1 / (distance_matrix[i, j] + 1e-9)
            demand_factor = np.exp(-(demands[i] + demands[j]) / (2 * capacity))

            angle_i = np.arctan2(coordinates[i, 1] - depot_y, coordinates[i, 0] - depot_x)
            angle_j = np.arctan2(coordinates[j, 1] - depot_y, coordinates[j, 0] - depot_x)
            angular_difference = abs(angle_i - angle_j)
            angular_factor = 1 / (1 + angular_difference)

            depot_distance_factor_i = 1 / (1 + distance_matrix[0, i])
            depot_distance_factor_j = 1 / (1 + distance_matrix[0, j])
            depot_proximity_factor = depot_distance_factor_i + depot_distance_factor_j

            heuristic_matrix[i, j] = (
                0.4 * distance_factor +
                0.2 * demand_factor +
                0.2 * angular_factor +
                0.2 * depot_proximity_factor
            )
    return heuristic_matrix
```
