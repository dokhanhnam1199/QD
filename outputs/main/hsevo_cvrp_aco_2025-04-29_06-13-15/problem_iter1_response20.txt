```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic for CVRP based on distance, demand, and angle.

    Args:
        distance_matrix: Distance matrix between nodes.
        coordinates: Coordinates of each node.
        demands: Demand of each node.
        capacity: Vehicle capacity.

    Returns:
        A matrix indicating the desirability of each edge.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate angle between nodes relative to depot
    depot_x, depot_y = coordinates[0]
    angles = np.arctan2(coordinates[:, 1] - depot_y, coordinates[:, 0] - depot_x)

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0
                continue

            distance_factor = 1 / distance_matrix[i, j]

            # Penalize edges connecting nodes with high demands if either i or j is not the depot
            demand_penalty = 1.0
            if i != 0 and j != 0:
                demand_penalty = 1 / (demands[i] + demands[j])

            # Encourage edges connecting nodes with similar angles (close to the depot)
            angle_diff = abs(angles[i] - angles[j])
            angle_factor = np.exp(-angle_diff)  # Exponential decay based on angle difference

            heuristic_matrix[i, j] = distance_factor * demand_penalty * angle_factor

    return heuristic_matrix
```
