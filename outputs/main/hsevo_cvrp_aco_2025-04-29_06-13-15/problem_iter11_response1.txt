```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """CVRP heuristic: Combines normalized distance, demand, savings,
       depot proximity, and clustering. Adaptive weights and sparsification."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))
    epsilon = 1e-6

    # 1. Normalized Distance
    distance_heuristic = 1 / (distance_matrix + epsilon)
    distance_heuristic = (distance_heuristic - np.min(distance_heuristic)) / (np.max(distance_heuristic) - np.min(distance_heuristic) + epsilon)

    # 2. Demand Feasibility
    demand_heuristic = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_heuristic[i, j] = 0
            if demands[i] + demands[j] > capacity and (i == 0 or j == 0):
                demand_heuristic[i, j] = 0.1
            elif i != 0 and demands[i] > capacity or j != 0 and demands[j] > capacity:
                demand_heuristic[i,j] = 0.05

    # 3. Savings Heuristic (normalized)
    savings_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_heuristic[i, j] = savings
            savings_heuristic[j, i] = savings
    savings_heuristic = (savings_heuristic - np.min(savings_heuristic)) / (np.max(savings_heuristic) - np.min(savings_heuristic) + epsilon)

    # 4. Depot Proximity (normalized)
    depot_heuristic = np.zeros((n, n))
    for i in range(1, n):
        avg_distance = np.sum(distance_matrix[i, 1:]) / (n - 2) if n > 2 else distance_matrix[i,0]
        depot_preference = (avg_distance / (np.max(distance_matrix) + epsilon)) * (demands[i] / capacity)
        depot_heuristic[i, 0] = depot_preference
        depot_heuristic[0, i] = depot_preference
    depot_heuristic = (depot_heuristic - np.min(depot_heuristic)) / (np.max(depot_heuristic) - np.min(depot_heuristic) + epsilon)

    # 5. Clustering Encouragement
    clustering_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            dist_ij = distance_matrix[i, j]
            clustering_heuristic[i, j] = clustering_heuristic[j, i] = np.exp(-dist_ij / (distance_matrix[i, 0] + distance_matrix[j, 0] + epsilon))

    # Adaptive Weighting (based on capacity utilization)
    capacity_ratio = np.sum(demands[1:]) / (capacity * (n - 1))
    alpha = 0.3  # Distance
    beta = 0.2 # Depot
    gamma = 0.25  # Savings
    delta = 0.25  # Clustering

    if capacity_ratio > 0.7:  # High capacity utilization
        alpha -= 0.05
        gamma += 0.05
    elif capacity_ratio < 0.3:  # Low capacity utilization
        beta += 0.05
        delta -= 0.05

    heuristics = (alpha * distance_heuristic * demand_heuristic +
                  beta * depot_heuristic +
                  gamma * savings_heuristic * demand_heuristic +
                  delta * clustering_heuristic)

    # Sparsification (k-NN and percentile threshold)
    k_nearest = 10
    threshold = np.percentile(heuristics[heuristics > 0], 40)

    for i in range(n):
        nearest_neighbors = np.argsort(distance_matrix[i, :])[1:k_nearest+1]

        for j in range(n):
            if heuristics[i, j] < threshold and j not in nearest_neighbors:
                heuristics[i, j] = 0

    max_val = np.max(heuristics)
    if max_val > 0:
        heuristics = heuristics / max_val

    return heuristics
```
