```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Heuristics for CVRP. Combines distance, demand, depot proximity, savings, gravitational attraction, clustering, adaptively weighted and sparsified."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))
    epsilon = 1e-6

    # 1. Adaptive Distance Scaling
    total_demand = np.sum(demands[1:])
    capacity_ratio = total_demand / (capacity * (n - 1))
    distance_scale = 1.0 + 0.5 * capacity_ratio  # Increase distance importance if capacity is tight
    distance_heuristic = 1 / (distance_matrix * distance_scale + epsilon)
    #distance_heuristic = (distance_heuristic - np.min(distance_heuristic)) / (np.max(distance_heuristic) - np.min(distance_heuristic) + epsilon)

    # 2. Demand Feasibility
    demand_heuristic = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_heuristic[i, j] = 0
            if demands[i] + demands[j] > capacity and i == 0:
                demand_heuristic[i, j] = 0.1
            elif demands[i] + demands[j] > capacity and j == 0:
                demand_heuristic[i, j] = 0.1
            elif i != 0 and demands[i] > capacity or j != 0 and demands[j] > capacity:
                demand_heuristic[i,j] = 0.05

    # 3. Enhanced Depot Attraction
    depot_heuristic = np.zeros((n, n))
    urgency_factor = 5.0
    for i in range(1, n):
        avg_distance = np.sum(distance_matrix[i, 1:]) / (n - 2) if n > 2 else distance_matrix[i, 0]
        urgency = np.exp(urgency_factor * (avg_distance / np.max(distance_matrix)) * (demands[i] / capacity))
        depot_heuristic[i, 0] = urgency
        depot_heuristic[0, i] = urgency
    #depot_heuristic = (depot_heuristic - np.min(depot_heuristic)) / (np.max(depot_heuristic) - np.min(depot_heuristic) + epsilon)

    # 4. Adaptive Gravitational Attraction
    gravitational_heuristic = np.zeros((n, n))
    avg_demand = np.mean(demands[1:])
    adaptive_gravitational_constant = 1.0 + 0.2 * (avg_demand / capacity)
    for i in range(1, n):
        for j in range(1, n):
            if i == j:
                gravitational_heuristic[i,j] = 0
                continue
            mass_i = demands[i]
            mass_j = demands[j]
            gravitational_heuristic[i, j] = adaptive_gravitational_constant * (mass_i * mass_j) / (distance_matrix[i, j]**2 + epsilon)

    # 5. Savings Heuristic with Lookahead
    savings_heuristic = np.zeros((n, n))
    lookahead_neighbors = 5 #number of neighbors to consider for lookahead
    for i in range(1, n):
        for j in range(i + 1, n):
            savings = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j]
            #Lookahead
            neighbor_i = np.argsort(distance_matrix[i, 1:])[:lookahead_neighbors] + 1
            neighbor_j = np.argsort(distance_matrix[j, 1:])[:lookahead_neighbors] + 1
            future_savings = 0
            for ni in neighbor_i:
                for nj in neighbor_j:
                    future_savings += distance_matrix[ni, 0] + distance_matrix[0, nj] - distance_matrix[ni, nj]
            savings += 0.1 * future_savings / (lookahead_neighbors**2 + epsilon)
            savings_heuristic[i, j] = savings
            savings_heuristic[j, i] = savings
    #savings_heuristic = (savings_heuristic - np.min(savings_heuristic)) / (np.max(savings_heuristic) - np.min(savings_heuristic) + epsilon)

    # 6. Edge Clustering Coefficient (focus on high-demand clusters)
    clustering_heuristic = np.zeros((n, n))
    k_nearest = 6
    for i in range(1, n):
        nearest_neighbors = np.argsort(distance_matrix[i, 1:])[:k_nearest] + 1
        for j in range(1, n):
            if i != j:
                common_neighbors = 0
                for neighbor_i in nearest_neighbors:
                    if neighbor_i in (np.argsort(distance_matrix[j, 1:])[:k_nearest] + 1):
                        common_neighbors += 1
                clustering_heuristic[i, j] = (common_neighbors / k_nearest) * (demands[i] + demands[j]) / (2*capacity) # Scale by demand
    #clustering_heuristic = clustering_heuristic / np.max(clustering_heuristic)

    # Adaptive Weighting
    capacity_ratio = np.sum(demands[1:]) / (capacity * (n - 1))
    num_nodes_factor = n / 100.0

    alpha = 0.2
    beta = 0.15
    gamma = 0.1
    delta = 0.15
    eta = 0.2

    alpha += 0.05 * capacity_ratio + 0.02 * num_nodes_factor
    beta -= 0.03 * capacity_ratio - 0.01 * num_nodes_factor
    gamma += 0.02 * capacity_ratio + 0.03 * num_nodes_factor
    delta += 0.01 * capacity_ratio + 0.02 * num_nodes_factor
    eta -= 0.01 * capacity_ratio - 0.02 * num_nodes_factor

    # Combine heuristics

    heuristics = (alpha * distance_heuristic * demand_heuristic +
                  beta * depot_heuristic +
                  gamma * gravitational_heuristic +
                  delta * savings_heuristic +
                  eta * clustering_heuristic)

    # Sparsification (adaptive threshold)
    k_nearest = min(12, n - 1)
    threshold = np.percentile(heuristics[heuristics > 0], 40)

    for i in range(n):
        nearest_neighbors = np.argsort(distance_matrix[i, :])[1:k_nearest+1]
        for j in range(n):
            if heuristics[i, j] < threshold and j not in nearest_neighbors:
                heuristics[i, j] = 0

    # Normalize
    max_val = np.max(heuristics)
    if max_val > 0:
        heuristics = heuristics / max_val

    return heuristics
```
