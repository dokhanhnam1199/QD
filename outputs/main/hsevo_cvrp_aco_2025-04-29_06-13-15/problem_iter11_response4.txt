```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """Combines distance, demand, savings, angle cost, depot proximity, with adaptive weights and sparsification."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))
    epsilon = 1e-6

    # 1. Distance component (normalized)
    distance_heuristic = 1 / (distance_matrix + epsilon)
    distance_heuristic = (distance_heuristic - np.min(distance_heuristic)) / (np.max(distance_heuristic) - np.min(distance_heuristic) + epsilon)


    # 2. Demand Feasibility
    demand_heuristic = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_heuristic[i, j] = 0
            if demands[i] + demands[j] > capacity and (i == 0 or j == 0):
                demand_heuristic[i, j] = 0.1
            elif i != 0 and demands[i] > capacity or j != 0 and demands[j] > capacity:
                demand_heuristic[i,j] = 0.05



    # 3. Savings Heuristic (normalized)
    savings_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_heuristic[i, j] = savings
            savings_heuristic[j, i] = savings
    savings_heuristic = (savings_heuristic - np.min(savings_heuristic)) / (np.max(savings_heuristic) - np.min(savings_heuristic) + epsilon)

    # 4. Depot Proximity Heuristic (normalized)
    depot_heuristic = np.zeros((n, n))
    for i in range(1, n):
        avg_distance = np.sum(distance_matrix[i, 1:]) / (n - 2) if n > 2 else distance_matrix[i,0]
        depot_preference = (avg_distance / (np.max(distance_matrix) + epsilon)) * (demands[i] / capacity)
        depot_heuristic[i, 0] = depot_preference
        depot_heuristic[0, i] = depot_preference
    depot_heuristic = (depot_heuristic - np.min(depot_heuristic)) / (np.max(depot_heuristic) - np.min(depot_heuristic) + epsilon)


    # 5. Angle Cost (prioritize nodes with smaller angles from the depot)
    angle_heuristic = np.zeros((n, n))
    depot_coords = coordinates[0]
    for i in range(1, n):
        for j in range(1, n):
            if i == j:
                angle_heuristic[i, j] = 0
                continue

            vector_i = coordinates[i] - depot_coords
            vector_j = coordinates[j] - depot_coords

            # Calculate the angle between the two vectors
            dot_product = np.dot(vector_i, vector_j)
            magnitudes = np.linalg.norm(vector_i) * np.linalg.norm(vector_j)
            if magnitudes == 0:
                angle = 0
            else:
                angle = np.arccos(np.clip(dot_product / magnitudes, -1.0, 1.0))

            angle_heuristic[i, j] = 1 - (angle / np.pi)  # Smaller angles are preferred

    angle_heuristic = (angle_heuristic - np.min(angle_heuristic)) / (np.max(angle_heuristic) - np.min(angle_heuristic) + epsilon)

    # 6. Adaptive Weighting
    capacity_ratio = np.sum(demands[1:]) / (capacity * (n - 1))
    alpha = 0.3  # Distance
    beta = 0.2   # Depot Proximity
    gamma = 0.2   # Savings
    delta = 0.2   # Angle Cost
    eta = 0.1 # Demand Feasibility



    heuristics = alpha * distance_heuristic * demand_heuristic + beta * depot_heuristic + gamma * savings_heuristic * demand_heuristic + delta * angle_heuristic + eta * demand_heuristic


    # 7. Sparsification (k-NN + Threshold)
    k_nearest = 10
    threshold = np.percentile(heuristics[heuristics > 0], 40) # Adjust percentile as needed

    for i in range(n):
        nearest_neighbors = np.argsort(distance_matrix[i, :])[1:k_nearest+1] # Find k-nearest neighbors

        for j in range(n):
            if heuristics[i, j] < threshold and j not in nearest_neighbors:
                heuristics[i, j] = 0

    # 8. Normalization
    max_val = np.max(heuristics)
    if max_val > 0:
        heuristics = heuristics / max_val

    return heuristics
```
