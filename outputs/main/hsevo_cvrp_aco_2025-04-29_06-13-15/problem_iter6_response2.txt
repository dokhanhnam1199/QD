```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version incorporates:
    1. Distance: Edges with shorter distances are preferred.
    2. Demand Feasibility: Penalizes edges that would immediately violate capacity constraints.
    3. Depot Proximity: Prioritizes returning to the depot from nodes that are far from other customers and have high demand.
    4. Savings Heuristic Integration: Encourages merging routes based on savings.
    5. Angle-based Clustering: Encourages connections within angular sectors from the depot.
    6. Adaptive Weighting: Adjusts the importance of heuristics based on problem characteristics.
    7. Sparsification: Sets unpromising edges to zero to focus the search.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n). The demand of depot is demands[0].
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros((n, n))
    epsilon = 1e-6

    # 1. Distance component
    distance_heuristic = 1 / (distance_matrix + epsilon)
    distance_heuristic = (distance_heuristic - np.min(distance_heuristic)) / (np.max(distance_heuristic) - np.min(distance_heuristic) + epsilon)

    # 2. Demand Feasibility
    demand_heuristic = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i == j:
                demand_heuristic[i, j] = 0
            if demands[i] + demands[j] > capacity and (i == 0 or j == 0): # Only penalize depot connections exceeding capacity.
                 demand_heuristic[i, j] = 0.1  # Reduced penalty
            elif i != 0 and demands[i] > capacity or j != 0 and demands[j] > capacity: #Prevent from selecting nodes that exceed the capacity
                demand_heuristic[i,j] = 0.05 #reduced penalty

    # 3. Depot Proximity
    depot_heuristic = np.zeros((n, n))
    for i in range(1, n):
        avg_distance = np.sum(distance_matrix[i, 1:]) / (n - 2) if n > 2 else distance_matrix[i,0]
        depot_preference = (avg_distance / (np.max(distance_matrix) + epsilon)) * (demands[i] / capacity)
        depot_heuristic[i, 0] = depot_preference
        depot_heuristic[0, i] = depot_preference
    depot_heuristic = (depot_heuristic - np.min(depot_heuristic)) / (np.max(depot_heuristic) - np.min(depot_heuristic) + epsilon)


    # 4. Savings Heuristic
    savings_heuristic = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings = distance_matrix[i, 0] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_heuristic[i, j] = savings
            savings_heuristic[j, i] = savings  # Savings are symmetric
    savings_heuristic = (savings_heuristic - np.min(savings_heuristic)) / (np.max(savings_heuristic) - np.min(savings_heuristic) + epsilon)


    # 5. Angle-based Clustering
    angle_heuristic = np.zeros((n, n))
    depot_x, depot_y = coordinates[0]
    for i in range(1, n):
        angle_i = np.arctan2(coordinates[i, 1] - depot_y, coordinates[i, 0] - depot_x)
        for j in range(i + 1, n):
            angle_j = np.arctan2(coordinates[j, 1] - depot_y, coordinates[j, 0] - depot_x)
            angle_diff = min(abs(angle_i - angle_j), 2 * np.pi - abs(angle_i - angle_j))
            angle_preference = np.exp(-angle_diff)  # Higher value for smaller angle differences
            angle_heuristic[i, j] = angle_preference
            angle_heuristic[j, i] = angle_preference

    angle_heuristic = (angle_heuristic - np.min(angle_heuristic)) / (np.max(angle_heuristic) - np.min(angle_heuristic) + epsilon)


    # 6. Adaptive Weighting
    # Adjust weights based on problem characteristics (e.g., tightness of capacity)
    capacity_ratio = np.sum(demands[1:]) / (capacity * (n-1)) #Total demand vs max total vehicle capacity needed
    alpha = 0.35 #Distance
    beta = 0.1 #Depot
    gamma = 0.25 #Savings
    delta = 0.3 # Angle

    # Combine the heuristics with adaptive weights
    heuristics = alpha * distance_heuristic * demand_heuristic + beta * depot_heuristic + gamma * savings_heuristic * demand_heuristic + delta * angle_heuristic * demand_heuristic

    # 7. Sparsification
    k_nearest = 10
    threshold = np.percentile(heuristics[heuristics > 0], 40)

    for i in range(n):
        nearest_neighbors = np.argsort(distance_matrix[i, :])[1:k_nearest+1]

        for j in range(n):
            if heuristics[i, j] < threshold and j not in nearest_neighbors:
                heuristics[i, j] = 0


    # Normalize to be between 0 and 1
    max_val = np.max(heuristics)
    if max_val > 0:
        heuristics = heuristics / max_val

    return heuristics
```
