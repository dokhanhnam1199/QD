```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version combines several factors to determine the desirability of each edge:
    - Inverse distance: Shorter distances are generally preferred.
    - Demand factor: Edges connecting nodes with higher remaining demands (relative to vehicle capacity) are favored early on.
    - Angle factor:  Edges that contribute to smoother turns (smaller angles) are favored. This is approximated via cosine similarity.
    - Capacity check factor: Encourages connections if the total demand served by the current path can fit the vehicle's capacity.
    - Sparsification: Sets unpromising edges to zero to reduce search space.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Demand of each node (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Parameters for controlling the weight of each factor.
    distance_weight = 1.0
    demand_weight = 0.5
    angle_weight = 0.3
    capacity_weight = 0.2
    sparsification_threshold = 0.1  # Only consider top 10% promising edges

    # Normalize demands by dividing them by the capacity
    normalized_demands = demands / capacity

    for i in range(n):
        for j in range(n):
            if i != j:  # No self-loops
                distance = distance_matrix[i, j]

                # Inverse distance factor
                distance_factor = 1 / (distance + 1e-6)  # Adding small value to avoid division by zero

                # Demand factor: favoring edges connecting nodes with significant remaining demands.
                demand_factor = normalized_demands[i] + normalized_demands[j]

                # Angle factor (cosine similarity approximation)
                angle_factor = 0.0  # Initialize, will be 0 if i or j is the depot
                if i != 0 and j != 0:
                    # Assuming the depot is node 0
                    vector_i = coordinates[i] - coordinates[0]
                    vector_j = coordinates[j] - coordinates[0]
                    norm_i = np.linalg.norm(vector_i)
                    norm_j = np.linalg.norm(vector_j)

                    if norm_i > 0 and norm_j > 0:
                        angle_factor = np.dot(vector_i, vector_j) / (norm_i * norm_j)  # Cosine similarity
                        angle_factor = (angle_factor + 1) / 2 # Rescale to [0, 1]
                elif i == 0 or j == 0:
                    angle_factor = 0.0 # Avoid loops involving only the depot


                # Capacity factor (simplified: encouraging connection if demand is generally lower)
                capacity_factor = 1 - max(normalized_demands[i], normalized_demands[j]) # Penalize high demand nodes

                # Combine the factors
                heuristic_matrix[i, j] = (
                    distance_weight * distance_factor +
                    demand_weight * demand_factor +
                    angle_weight * angle_factor +
                    capacity_weight * capacity_factor
                )

    # Sparsification: Only consider top promising edges (prevent infinite loops)
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 1 - sparsification_threshold)
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
