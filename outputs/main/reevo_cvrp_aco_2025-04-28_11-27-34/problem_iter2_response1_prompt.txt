{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    This version combines distance, demand, and angle considerations to determine edge desirability.\n    It also sparsifies the matrix by setting unpromising elements to zero.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Customer demands (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Parameters (can be tuned)\n    distance_importance = 1.0\n    demand_importance = 0.5\n    angle_importance = 0.2\n    capacity_threshold = 0.9  # Maximum allowable demand relative to capacity for single customer\n\n    # Calculate angle cost (penalizes sharp turns)\n    angle_cost = np.zeros((n, n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                for k in range(n):\n                    if k != i and k != j:\n                        v1 = coordinates[j] - coordinates[i]\n                        v2 = coordinates[k] - coordinates[j]\n                        v1_u = v1 / np.linalg.norm(v1) if np.linalg.norm(v1) > 0 else v1\n                        v2_u = v2 / np.linalg.norm(v2) if np.linalg.norm(v2) > 0 else v2\n                        angle = np.arccos(np.clip(np.dot(v1_u, v2_u), -1.0, 1.0))\n                        angle_cost[i, j, k] = angle\n                        angle_cost[j, k, i] = angle\n\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Distance factor: Shorter distances are more promising\n                distance_factor = 1 / distance_matrix[i, j] if distance_matrix[i, j] > 0 else 0\n\n                # Demand factor: Penalize edges connecting to high-demand nodes if exceeding the capacity threshold\n                demand_factor = 1.0\n                if demands[i] > capacity_threshold * capacity or demands[j] > capacity_threshold * capacity:\n                    demand_factor = 0.1  # Heavily penalize high demand nodes\n\n                # Angle factor: Encourages smoother routes\n                avg_angle_cost = 0.0\n                count = 0\n                for k in range(n):\n                    if k != i and k != j:\n                         avg_angle_cost += angle_cost[i, j, k]\n                         count += 1\n                if count > 0:\n                  avg_angle_cost /= count\n\n                angle_factor = 1/(1 + avg_angle_cost) # smaller avg angle leads to a higher factor\n\n                heuristic_matrix[i, j] = (\n                    distance_importance * distance_factor +\n                    demand_importance * demand_factor +\n                    angle_importance * angle_factor\n                )\n\n    # Sparsify the matrix (set unpromising edges to zero)\n    threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.2 # dynamically adjust threshold\n    heuristic_matrix[heuristic_matrix < threshold] = 0  # Remove less promising edges\n    np.fill_diagonal(heuristic_matrix, 0)  # Ensure no self-loops\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    A heuristic function for the Capacitated Vehicle Routing Problem (CVRP) based on stochastic solution sampling.\n\n    This version incorporates a combination of factors:\n    - Distance: Shorter distances are preferred.\n    - Demand: Edges connecting to nodes with high demands are penalized (to encourage efficient capacity utilization).\n    - Angle: Edges that form sharp turns are penalized.\n    - Capacity Ratio: Prioritizes connection to nodes such that the total capacity in current tour is less than vehicle capacity.\n    - Sparsity: Sets elements of the matrix to zero if deemed unpromising.\n\n    Args:\n        distance_matrix: A NumPy array representing the distance between nodes.\n        coordinates: A NumPy array of node coordinates (x, y).\n        demands: A NumPy array of node demands.\n        capacity: The capacity of each vehicle.\n\n    Returns:\n        A NumPy array of the same shape as the distance_matrix, representing the heuristic values for each edge.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Parameters (can be tuned)\n    distance_weight = 1.0\n    demand_weight = 0.5\n    angle_weight = 0.2\n    capacity_weight = 0.3\n    sparsity_threshold = 0.1\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # No self-loops\n                continue\n\n            # Distance factor (prefer shorter distances)\n            distance_factor = distance_weight / (distance_matrix[i, j] + 1e-6) # avoid division by zero\n\n            # Demand factor (penalize connections to very high demand nodes). Note the depot demand is 0, so not penalized.\n            demand_factor = 1.0 - demand_weight * (demands[i] + demands[j]) / (2.0 * capacity + 1e-6)\n            demand_factor = max(0.0, demand_factor) # Ensure factor is non-negative\n\n            # Angle factor (penalize sharp turns)\n            angle_factor = 1.0\n            if i != 0 and j != 0:\n                # Calculate angles between lines connecting node i and j to the depot (node 0).\n                vector_i = coordinates[i] - coordinates[0]\n                vector_j = coordinates[j] - coordinates[0]\n                \n                # Normalize vectors to avoid issues with magnitude\n                vector_i = vector_i / (np.linalg.norm(vector_i) + 1e-6)\n                vector_j = vector_j / (np.linalg.norm(vector_j) + 1e-6)\n                \n                dot_product = np.dot(vector_i, vector_j)\n                angle = np.arccos(np.clip(dot_product, -1.0, 1.0))  # Clip to avoid domain errors\n                angle_factor = 1.0 - angle_weight * (angle / np.pi) # Normalize by pi\n                angle_factor = max(0.0, angle_factor)\n\n            # Simple capacity ratio factor (encourage routes that don't immediately exceed capacity)\n            capacity_ratio = (demands[i] + demands[j]) / (capacity + 1e-6)\n            capacity_factor = 1.0 - capacity_weight * capacity_ratio\n            capacity_factor = max(0.0, capacity_factor) # Ensure it does not go negative\n\n            heuristic_matrix[i, j] = distance_factor * demand_factor * angle_factor * capacity_factor\n\n    # Sparsify the matrix (set unpromising edges to zero)\n    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], sparsity_threshold)\n    heuristic_matrix[heuristic_matrix < threshold] = 0.0\n\n    return heuristic_matrix\n\n[Reflection]\nThe better code uses multiplicative combination of factors, explicit capacity ratio, and quantile-based sparsification.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}