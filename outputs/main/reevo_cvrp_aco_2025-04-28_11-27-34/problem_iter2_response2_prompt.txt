{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Vector of customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Parameters (can be tuned)\n    alpha = 1.0  # Importance of distance\n    beta = 0.5  # Importance of demand consideration\n    gamma = 0.2  # Importance of closeness to depot\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                distance = distance_matrix[i, j]\n\n                # Demand factor: Prioritize edges connecting to nodes with demands that are not too large to fill vehicle space but neither too small.\n                demand_factor = 1.0\n                if i != 0 and j!=0: #if both are not the depot\n                    demand_factor = np.exp(-((demands[i] + demands[j]) / capacity - 0.5) ** 2 / 0.08)\n                elif i!= 0: #if only one of them is the depot\n                    demand_factor = np.exp(-(demands[i] / capacity - 0.25)**2 / 0.08)\n                elif j!=0: #if only one of them is the depot\n                    demand_factor = np.exp(-(demands[j] / capacity - 0.25)**2 / 0.08)\n                \n\n                # Closeness to depot factor: Encourage edges connecting nodes close to the depot.\n                depot_distance_factor = np.exp(-((distance_matrix[0, i] + distance_matrix[0, j]) / (np.sum(distance_matrix[0, :]) / n))) if (i != 0 and j!= 0) else 1.0\n\n                # Combine factors\n                heuristic_matrix[i, j] = (\n                    (1 / (distance + 1e-6)) ** alpha\n                    * (demand_factor) ** beta\n                    * (depot_distance_factor) ** gamma\n                )\n\n    #Sparsify the matrix. Keep only top k edges for each node, the rest are zero\n    k = int(np.sqrt(n)) #number of neighbors to keep (tunable)\n    for i in range(n):\n        row = heuristic_matrix[i, :].copy()\n        indices = np.argpartition(row, -k)[-k:] #indices of k largest values in the row\n        mask = np.ones(n, dtype=bool)\n        mask[indices] = False\n        heuristic_matrix[i, mask] = 0.0\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for solving the Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    This function calculates a matrix of edge weights representing the \"promise\" of including each edge in a solution.\n    It combines several factors to estimate edge suitability, including distance, demand, angle, and a stochastic element.\n\n    Args:\n        distance_matrix (np.ndarray): A matrix (n x n) representing the distances between each pair of nodes.\n        coordinates (np.ndarray): A matrix (n x 2) containing the Euclidean coordinates of each node.\n        demands (np.ndarray): A vector (n) representing the demand of each node.\n        capacity (int): The capacity of each vehicle.\n\n    Returns:\n        np.ndarray: A matrix (n x n) of edge weights representing the promise of each edge.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Calculate angle costs (encourage smoother routes)\n    angle_costs = np.zeros((n, n, n))\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if i != j and i != k and j != k:\n                    v1 = coordinates[j] - coordinates[i]\n                    v2 = coordinates[k] - coordinates[i]\n                    dot_product = np.dot(v1, v2)\n                    magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)\n                    if magnitudes > 0:\n                        angle = np.arccos(np.clip(dot_product / magnitudes, -1.0, 1.0))\n                        angle_costs[i, j, k] = angle\n                    else:\n                        angle_costs[i, j, k] = np.pi  # Penalize if nodes are the same\n\n    # Calculate combined heuristic values\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                distance_factor = 1 / distance_matrix[i, j]\n                demand_factor = 1 / (demands[i] + demands[j] + 1e-6)  # Avoid division by zero\n\n                # Angle consideration: Favoring routes that form angles far from straight lines.\n                angle_penalty = 0.0\n                for k in range(n): #penalize smaller angles by averaging\n                   if i!=k and j!=k:\n                       angle_penalty += angle_costs[i, j, k]\n                angle_penalty /= n\n                angle_factor = angle_penalty\n                # Stochasticity: Add a small random value\n                stochastic_factor = np.random.uniform(0.5, 1.5)  # Random number between 0.5 and 1.5\n\n                heuristic_matrix[i, j] = distance_factor * demand_factor * angle_factor * stochastic_factor\n\n    # Sparsify the matrix (optional, but often helpful)\n    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 20)  # Keep top 80%\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n    np.fill_diagonal(heuristic_matrix, 0)\n    return heuristic_matrix\n\n[Reflection]\nConsider angle, stochasticity, adaptive sparsification, and avoid hand-tuning factor weights.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}