```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for CVRP using a combination of factors with adaptive weights and sparsification.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Demand of each customer (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # --- Heuristic Factors ---
    # 1. Distance Factor (normalized inverse distance)
    distance_factor = 1 / (distance_matrix + 1e-6)
    distance_factor = distance_factor / np.max(distance_factor)  # Normalize

    # 2. Angle Factor (angle from depot to i to j)
    angle_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                v1 = coordinates[i] - coordinates[0]
                v2 = coordinates[j] - coordinates[i]
                norm1 = np.linalg.norm(v1)
                norm2 = np.linalg.norm(v2)
                if norm1 > 0 and norm2 > 0:
                    v1 = v1 / norm1
                    v2 = v2 / norm2
                    dot = np.dot(v1, v2)
                    angle = np.arccos(np.clip(dot, -1.0, 1.0))
                    angle_factor[i, j] = 1 - (angle / np.pi)
    angle_factor = angle_factor / np.max(angle_factor) #normalize

    # 3. Demand Factor (remaining capacity consideration)
    demand_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i != j and i != 0 and j != 0:
                demand_factor[i, j] = np.exp(-(demands[j]) / capacity)  # Only consider destination demand
    demand_factor = demand_factor / np.max(demand_factor) #normalize

    # 4. Depot Proximity Factor (encourage returning to depot)
    depot_proximity_factor = np.zeros((n, n))
    for i in range(n):
      depot_proximity_factor[i, 0] = 1
    depot_proximity_factor = depot_proximity_factor / np.max(depot_proximity_factor) #normalize


    # --- Adaptive Weights ---
    w_distance = 0.4
    w_angle = 0.2
    w_demand = 0.2
    w_depot = 0.2

    # --- Combine Factors ---
    heuristic_matrix = (w_distance * distance_factor +
                        w_angle * angle_factor +
                        w_demand * demand_factor +
                        w_depot * depot_proximity_factor)

    # --- Sparsification ---
    mean_distance = np.mean(distance_matrix[distance_matrix > 0])
    distance_threshold = mean_distance * 2 #adaptive

    heuristic_matrix[distance_matrix > distance_threshold] = 0
    np.fill_diagonal(heuristic_matrix, 0)


    # --- Normalize ---
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic

    return heuristic_matrix
```
