```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) using a combination of factors.
    This version incorporates more sophisticated heuristic combinations and sparsification.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Demand of each customer (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # 1. Distance Factor:
    distance_factor = 1 / (distance_matrix + 1e-6)

    # 2. Depot Proximity Factor: Favor edges connected to the depot
    depot_proximity_factor = np.zeros((n, n))
    for i in range(1, n):  # Exclude depot itself
        depot_proximity_factor[0, i] = depot_proximity_factor[i, 0] = 1 / (distance_matrix[0, i] + 1e-6)

    # 3. Angle Factor:
    angle_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                vector1 = coordinates[i] - coordinates[0]
                vector2 = coordinates[j] - coordinates[i]

                norm1 = np.linalg.norm(vector1)
                norm2 = np.linalg.norm(vector2)
                if norm1 > 0 and norm2 > 0:
                    vector1 = vector1 / norm1
                    vector2 = vector2 / norm2
                    dot_product = np.dot(vector1, vector2)
                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))
                    angle_factor[i, j] = 1 - (angle / np.pi)

    # 4. Demand Factor:
    demand_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i != j and i != 0 and j != 0:
                demand_sum = demands[i] + demands[j]
                demand_factor[i, j] = np.exp(- (demand_sum / capacity)**2)  # Gaussian-like demand factor

    # 5. Combined Heuristic: Multiplicative combination with depot proximity
    heuristic_matrix = distance_factor * angle_factor * demand_factor * (1 + depot_proximity_factor)

    # Sparsification: Adaptive thresholding based on quantiles
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.25) # Keep top 75%
        heuristic_matrix[heuristic_matrix < threshold] = 0
        heuristic_matrix = heuristic_matrix / max_heuristic # Normalize

    np.fill_diagonal(heuristic_matrix, 0)

    # Controlled Randomness: Add small random value to non-zero elements to break ties
    mask = heuristic_matrix > 0
    random_noise = np.random.normal(0, 0.01, size=heuristic_matrix.shape)
    heuristic_matrix[mask] += random_noise[mask]
    heuristic_matrix = np.clip(heuristic_matrix, 0, 1) #ensure heuristic values stay between 0 and 1.

    return heuristic_matrix
```
