```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings for each edge (Clark-Wright savings heuristic)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]  # Ensure symmetry

    # Combine distance and savings information.  Also, add demand based factor
    for i in range(n):
        for j in range(n):
            if i != j:
                # Inverse distance (shorter distances are better)
                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Add small constant to avoid division by zero
                
                # Savings factor (higher savings are better). Handle depot node.
                savings_factor = 0.0
                if i != 0 and j != 0:  #Only compute if not starting from the depot
                  savings_factor = savings_matrix[i, j]
                
                demand_factor = 1.0
                if i != 0 and j!= 0: # Only factor in when going from one customer to another
                  demand_factor = 1 / (demands[i] + demands[j] + 1e-6) #penalize for large demand for the customers i and j

                heuristic_matrix[i, j] = distance_factor + savings_factor * 0.5 + demand_factor * 0.1  # Weigh the factors


    # Sparsify the matrix: remove less promising edges
    # Option 1: Keep only the k-nearest neighbors for each node
    k = int(np.sqrt(n))  # Dynamic k based on problem size. Tune if needed
    for i in range(n):
        # Get the indices of the k smallest distances from node i
        nearest_neighbors = np.argsort(distance_matrix[i, :])[1:k+1]  # Exclude itself and take the k nearest
        
        # Zero out all but the k nearest neighbors in the heuristic matrix
        for j in range(n):
            if j not in nearest_neighbors and i != j:
                heuristic_matrix[i, j] = 0.0

    #Option 2: Thresholding. Remove edges that do not exceed a certain threshold

    #normalizing the heuristic matrix
    max_heuristic = np.max(heuristic_matrix)

    if max_heuristic > 0:
      heuristic_matrix = heuristic_matrix / max_heuristic
    threshold = 0.1 #Remove edges with very low probabilities (tuneable).

    heuristic_matrix[heuristic_matrix < threshold] = 0.0


    return heuristic_matrix
```
