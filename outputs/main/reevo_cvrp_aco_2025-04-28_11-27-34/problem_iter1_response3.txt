```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version incorporates several factors to determine the "promise" of including each edge in a solution,
    including distance, angle from the depot, demand considerations, and sparsification.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """

    n = distance_matrix.shape[0]
    promise = np.zeros_like(distance_matrix)

    # Calculate angle from depot (node 0)
    depot_coords = coordinates[0]
    angles = np.arctan2(coordinates[:, 1] - depot_coords[1], coordinates[:, 0] - depot_coords[0])

    # Normalize demands
    normalized_demands = demands / np.max(demands)

    for i in range(n):
        for j in range(n):
            if i == j:
                promise[i, j] = 0  # No self-loops
                continue

            # Basic distance factor (shorter distance is better)
            distance_factor = 1 / (distance_matrix[i, j] + 1e-9)  # Add a small value to avoid division by zero

            # Angle factor: prefer edges that don't drastically change direction from depot
            angle_diff = np.abs(angles[i] - angles[j])
            angle_factor = np.exp(-angle_diff)  # Exponential decay for larger angle differences

            # Demand factor: Penalize edges connecting nodes with large demands if it's far from depot
            demand_factor = 1 - (normalized_demands[i] + normalized_demands[j]) if i != 0 and j != 0 else 1 #give depot larger chance to link

            # Combined factor (weighted average - tune these weights)
            promise[i, j] = (0.6 * distance_factor + 0.2 * angle_factor + 0.2 * demand_factor)

    # Sparsify the matrix (keep only the top K edges for each node)
    sparsity_factor = 0.1
    k = int(n * sparsity_factor)
    for i in range(n):
        # Find the indices of the top k promising edges for node i
        top_k_indices = np.argsort(promise[i, :])[::-1][:k]  # Indices of top k values
        # Zero out the promise values for all other edges from node i
        promise[i, :] = 0
        promise[i, top_k_indices] = 1 / (distance_matrix[i, top_k_indices] + 1e-9)

    return promise
```
