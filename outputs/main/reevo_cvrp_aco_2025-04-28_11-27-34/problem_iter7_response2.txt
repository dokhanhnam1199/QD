```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) using a combination of factors with adaptive weights and sparsification.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Demand of each customer (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # --- Weights for factors (Adaptive during search) ---
    weight_distance = 0.6
    weight_angle = 0.2
    weight_demand = 0.2

    # --- Heuristic factors: ---
    # 1. Distance: Shorter distances are more promising.
    distance_factor = 1 / (distance_matrix + 1e-6)  # Avoid division by zero

    # 2. Angle: Edges that create sharp turns are less promising.
    angle_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                vector1 = coordinates[i] - coordinates[0]  # Relative to depot
                vector2 = coordinates[j] - coordinates[i]

                norm1 = np.linalg.norm(vector1)
                norm2 = np.linalg.norm(vector2)

                if norm1 > 0 and norm2 > 0:
                    vector1 = vector1 / norm1
                    vector2 = vector2 / norm2
                    dot_product = np.dot(vector1, vector2)
                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))
                    angle_factor[i, j] = 1 - (angle / np.pi)
                else:
                    angle_factor[i, j] = 0 # if same location.

    # 3. Demand: Edges connecting nodes with higher demands are penalized.
    demand_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i != j and i != 0 and j != 0:
                demand_penalty = np.exp(-((demands[i] + demands[j]) ** 2) / (2 * (capacity / 3) ** 2))  # Gaussian-like penalty
                demand_factor[i, j] = demand_penalty

    # --- Combine factors multiplicatively with weights ---
    heuristic_matrix = (distance_factor ** weight_distance) * (angle_factor ** weight_angle) * (demand_factor ** weight_demand)

    # --- Sparsification: Remove less promising edges (Adaptive threshold) ---
    # Use distance quantiles for adaptive sparsification
    distances = distance_matrix[distance_matrix > 0].flatten()
    quantile_75 = np.quantile(distances, 0.75)
    distance_threshold = quantile_75 * 1.5  # Remove edges significantly longer than the 75th percentile

    heuristic_matrix[distance_matrix > distance_threshold] = 0
    np.fill_diagonal(heuristic_matrix, 0)

    # --- Depot Proximity: Encourage edges near the depot ---
    depot_proximity_factor = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                depot_proximity_factor[i, j] = np.exp(- (distance_matrix[0, i] + distance_matrix[0, j]) / (2 * np.mean(distance_matrix) ))  # encourage proximity

    heuristic_matrix = heuristic_matrix * depot_proximity_factor

    # --- Add small amount of randomness to encourage exploration ---
    randomness_factor = np.random.rand(n, n) * (distance_matrix / np.max(distance_matrix + 1e-6)) * 0.05  # scaled by distance
    heuristic_matrix = heuristic_matrix + randomness_factor

    # --- Normalization ---
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic

    return heuristic_matrix
```
