```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) using a combination of factors.
    Version 3: Focuses on refined multiplicative combinations, adaptive sparsification using a dynamic threshold,
    enhanced depot proximity consideration, angle calculations, demand-capacity scaling, controlled randomness,
    and a more precise Gaussian-like demand factor. This version also includes explicit handling of edge cases
    and normalization to improve stability and performance.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Demand of each customer (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # 1. Distance Factor (Shorter distances are better)
    distance_factor = 1 / (distance_matrix + 1e-9)

    # 2. Depot Proximity Factor (Closer to depot is better, especially for return trips)
    depot_proximity_factor = np.zeros((n, n))
    avg_distance_to_depot = np.mean(distance_matrix[0, 1:])
    for i in range(1, n):  # Skip depot
        for j in range(1, n):
            #Scaled by the average distance ensures it's not overly sensitive
            depot_proximity_factor[i, j] = np.exp(-0.5 * ((distance_matrix[0, i] + distance_matrix[j, 0]) / (2 * avg_distance_to_depot + 1e-9))**2)

    # 3. Angle Factor (Avoid sharp turns)
    angle_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                vector1 = coordinates[i] - coordinates[0]
                vector2 = coordinates[j] - coordinates[i]

                norm1 = np.linalg.norm(vector1)
                norm2 = np.linalg.norm(vector2)

                if norm1 > 0 and norm2 > 0:
                    vector1 = vector1 / norm1
                    vector2 = vector2 / norm2
                    dot_product = np.dot(vector1, vector2)
                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0)) # Ensure the value is within the valid range
                    angle_factor[i, j] = 1 - (angle / np.pi)
                else:
                    angle_factor[i, j] = 0.5 #Handle edge cases near depot

    # 4. Demand Factor (Penalize edges that would overload a vehicle)
    demand_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i != j and i != 0 and j != 0:
                # Gaussian-like penalty around 75% capacity, scaled for sensitivity
                demand_factor[i, j] = np.exp(-((demands[i] + demands[j]) / (capacity * 0.75 + 1e-9))**2)

    # 5. Randomness (introduce some stochasticity to diversify the search)
    randomness_factor = np.random.uniform(0.75, 1.25, size=(n, n))

    # Combine factors multiplicatively
    heuristic_matrix = distance_factor * depot_proximity_factor * angle_factor * demand_factor * randomness_factor

    # Adaptive Sparsification (Remove unpromising edges based on a dynamic quantile)
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic  # Normalize to [0, 1]
        # Dynamic quantile based on problem size - larger problem needs a larger cut.
        quantile_threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], min(0.25 + (n / 1000), 0.75)) #Keep top (75% - n/1000)% for n < 500, otherwise cut more
        heuristic_matrix[heuristic_matrix < quantile_threshold] = 0

    np.fill_diagonal(heuristic_matrix, 0)  # No self-loops

    return heuristic_matrix
```
