```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for CVRP, improved with multiplicative combination,
    adaptive sparsification, and normalized factors.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes.
        coordinates (np.ndarray): Euclidean coordinates of nodes.
        demands (np.ndarray): Customer demands.
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # 1. Distance Factor (Normalized inverse distance)
    distance_factor = 1 / (distance_matrix + 1e-9)
    distance_factor = distance_factor / np.max(distance_factor)  # Normalize

    # 2. Depot Proximity Factor (Scaled Gaussian proximity to depot)
    depot_proximity_factor = np.zeros((n, n))
    avg_distance_to_depot = np.mean(distance_matrix[0, 1:])
    for i in range(1, n):
        for j in range(1, n):
            depot_proximity_factor[i, j] = np.exp(-0.5 * ((distance_matrix[0, i] + distance_matrix[j, 0]) / (2 * avg_distance_to_depot + 1e-9))**2)
    depot_proximity_factor = depot_proximity_factor / np.max(depot_proximity_factor) # Normalize

    # 3. Angle Factor (Cosine of angle, penalized sharp turns)
    angle_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                v1 = coordinates[i] - coordinates[0]
                v2 = coordinates[j] - coordinates[i]
                norm1 = np.linalg.norm(v1)
                norm2 = np.linalg.norm(v2)
                if norm1 > 0 and norm2 > 0:
                    dot_product = np.dot(v1, v2) / (norm1 * norm2)
                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))
                    angle_factor[i, j] = 1 - (angle / np.pi)
                else:
                    angle_factor[i, j] = 0.5
    angle_factor = angle_factor / np.max(angle_factor) # Normalize

    # 4. Demand Factor (Gaussian penalty, prefer edges fitting remaining capacity)
    demand_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i != j and i != 0 and j != 0:
                demand_factor[i, j] = np.exp(-((demands[i] + demands[j]) / (capacity * 0.75 + 1e-9))**2)
    demand_factor = demand_factor / np.max(demand_factor) # Normalize

    # 5. Randomness (Scaled uniform noise for search diversity)
    randomness_factor = np.random.uniform(0.75, 1.25, size=(n, n))

    # Combine factors multiplicatively
    heuristic_matrix = distance_factor * depot_proximity_factor * angle_factor * demand_factor * randomness_factor

    # Adaptive Sparsification (Dynamic quantile threshold)
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic  # Normalize
        quantile_threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], min(0.25 + (n / 1000), 0.75))
        heuristic_matrix[heuristic_matrix < quantile_threshold] = 0

    np.fill_diagonal(heuristic_matrix, 0)  # No self-loops

    return heuristic_matrix
```
