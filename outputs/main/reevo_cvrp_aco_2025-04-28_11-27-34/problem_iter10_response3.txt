```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) using a combination of factors.
    Improved version with normalized factors, adaptive thresholds, depot proximity, and distance-scaled randomness.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Demand of each customer (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # 1. Distance Factor (normalized)
    distance_factor = 1 / (distance_matrix + 1e-6)
    distance_factor /= np.max(distance_factor)

    # 2. Angle Factor (normalized)
    angle_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                v1 = coordinates[i] - coordinates[0]
                v2 = coordinates[j] - coordinates[i]
                norm1 = np.linalg.norm(v1)
                norm2 = np.linalg.norm(v2)
                if norm1 > 0 and norm2 > 0:
                    v1_norm = v1 / norm1
                    v2_norm = v2 / norm2
                    dot_product = np.dot(v1_norm, v2_norm)
                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))
                    angle_factor[i, j] = 1 - (angle / np.pi)
    angle_factor /= np.max(angle_factor)

    # 3. Demand Factor (normalized)
    demand_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i != j and i != 0 and j != 0:
                combined_demand = demands[i] + demands[j]
                demand_factor[i, j] = np.exp(-combined_demand / capacity)
    demand_factor /= np.max(demand_factor)

    # 4. Depot Proximity Factor (normalized)
    depot_proximity_factor = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                 depot_proximity_factor[i, j] = 1 / (distance_matrix[0, i] + distance_matrix[0, j] + 1e-6)
    depot_proximity_factor /= np.max(depot_proximity_factor)

    # Weights
    w_distance = 0.3
    w_angle = 0.2
    w_demand = 0.3
    w_depot = 0.2

    # Combine factors (multiplicative)
    heuristic_matrix = (distance_factor**w_distance) * (angle_factor**w_angle) * (demand_factor**w_demand) * (depot_proximity_factor**w_depot)

    # Adaptive Sparsification
    mean_distance = np.mean(distance_matrix[distance_matrix > 0])
    sparsification_threshold = mean_distance * (1 + 1/np.log(n))
    heuristic_matrix[distance_matrix > sparsification_threshold] = 0

    # Distance-scaled Randomness
    randomness_strength = 0.01
    random_matrix = np.random.rand(n, n) / (distance_matrix + 1e-6)
    heuristic_matrix += randomness_strength * random_matrix

    # Clean up
    np.fill_diagonal(heuristic_matrix, 0)
    heuristic_matrix[0, 0] = 0

    # Normalize heuristic matrix
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix /= max_heuristic

    return heuristic_matrix
```
