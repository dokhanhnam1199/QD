```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate savings for each edge
    savings_matrix = np.zeros_like(distance_matrix, dtype=float)
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Node distance to depot
    depot_proximity = np.zeros(n)
    for i in range(1, n):
      depot_proximity[i] = distance_matrix[0,i]

    # Normalize demands (important for combining different factors)
    normalized_demands = demands / np.max(demands) if np.max(demands) > 0 else demands #Avoid dividing by zero if max demand is zero.

    # Combine different factors
    for i in range(n):
        for j in range(n):
            if i != j:
                # Edge desirability:
                #   - Inverse distance (shorter edges are preferred)
                #   - Savings (higher savings are preferred - Clarke-Wright)
                #   - Demand factor (lower demands, more easily clustered. avoid over capacity)
                #   - Proximity to Depot (Nodes near depot can link others to depot.)
                heuristic_matrix[i, j] = (
                    (1 / (distance_matrix[i, j] + 1e-6))  # Avoid division by zero
                    + (savings_matrix[i, j] if i!=0 and j!=0 else 0) #Savings of edges not including depot should contribute.
                    - 0.1 * (normalized_demands[i] + normalized_demands[j]) #Demands are a penalty
                    - 0.05 * (depot_proximity[i] + depot_proximity[j])
                    )

    # Sparsify the matrix (optional, but can improve performance)
    # This sets values below a certain threshold to zero
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 25) # Only consider positive heuristic values when calculating threshold
    heuristic_matrix[heuristic_matrix < threshold] = 0


    return heuristic_matrix
```
