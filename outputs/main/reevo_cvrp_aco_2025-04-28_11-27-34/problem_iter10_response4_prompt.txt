{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) using a combination of factors.\n    Improved version with adaptive weights, sparsification, and depot proximity consideration.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Demand of each customer (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # 1. Distance Factor (Normalized)\n    distance_factor = 1 / (distance_matrix + 1e-6)\n    max_distance_factor = np.max(distance_factor)\n    distance_factor = distance_factor / max_distance_factor if max_distance_factor > 0 else distance_factor\n\n    # 2. Angle Factor (Depot Proximity - Normalized)\n    angle_factor = np.ones((n, n))\n    for i in range(1, n):  # Iterate over customers only\n        for j in range(1, n):  # Iterate over customers only\n            if i != j:\n                vector1 = coordinates[i] - coordinates[0]\n                vector2 = coordinates[j] - coordinates[i]\n\n                norm1 = np.linalg.norm(vector1)\n                norm2 = np.linalg.norm(vector2)\n\n                if norm1 > 0 and norm2 > 0:\n                    vector1 = vector1 / norm1\n                    vector2 = vector2 / norm2\n\n                    dot_product = np.dot(vector1, vector2)\n                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))\n                    angle_factor[i, j] = 1 - (angle / np.pi)\n    max_angle_factor = np.max(angle_factor)\n    angle_factor = angle_factor / max_angle_factor if max_angle_factor > 0 else angle_factor\n\n    # 3. Demand Factor (Remaining Capacity - Normalized)\n    demand_factor = np.ones((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                demand_factor[i, j] = np.exp(-(demands[i] + demands[j]) / capacity)\n    max_demand_factor = np.max(demand_factor)\n    demand_factor = demand_factor / max_demand_factor if max_demand_factor > 0 else demand_factor\n    # Adaptive Weights\n    alpha = 0.5  # Distance weight\n    beta = 0.3  # Angle weight\n    gamma = 0.2  # Demand weight\n\n    # Combined Heuristic Matrix\n    heuristic_matrix = (alpha * distance_factor + beta * angle_factor + gamma * demand_factor)\n\n    # Sparsification\n    mean_distance = np.mean(distance_matrix[distance_matrix > 0])\n    distance_threshold = mean_distance * (1 + 0.5 * (n / 100))  # Adaptive threshold based on problem size\n    heuristic_matrix[distance_matrix > distance_threshold] = 0\n\n    np.fill_diagonal(heuristic_matrix, 0)\n\n    # Final Normalization\n    max_heuristic = np.max(heuristic_matrix)\n    if max_heuristic > 0:\n        heuristic_matrix = heuristic_matrix / max_heuristic\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) using a combination of factors and stochastic sampling.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Demand of each customer (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # 1. Distance factor: Shorter distances are more promising.\n    distance_factor = 1 / (distance_matrix + 1e-6)  # Avoid division by zero\n\n    # 2. Angle factor: Penalize sharp turns using cosine similarity.\n    angle_factor = np.ones((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                # Vectors from depot to i and from i to j\n                vector1 = coordinates[i] - coordinates[0]\n                vector2 = coordinates[j] - coordinates[i]\n\n                # Normalize vectors\n                norm1 = np.linalg.norm(vector1)\n                norm2 = np.linalg.norm(vector2)\n\n                if norm1 > 0 and norm2 > 0:\n                    vector1_norm = vector1 / norm1\n                    vector2_norm = vector2 / norm2\n                    angle_factor[i, j] = (1 + np.dot(vector1_norm, vector2_norm)) / 2  # Cosine similarity ranges from 0 to 1\n                else:\n                    angle_factor[i, j] = 0.5  # Default value if a node is at the depot location\n\n    # 3. Demand factor: Penalize edges based on combined demand relative to capacity.\n    demand_factor = np.ones((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                demand_factor[i, j] = np.exp(- (demands[i] + demands[j]) / (0.75 * capacity)) # Adjusted scaling\n\n    # Adaptive sparsification based on problem size and distances\n    quantile_threshold = 0.80 - min(0.3, 0.002 * n)  # More aggressive for larger problems\n    distance_threshold = np.quantile(distance_matrix[distance_matrix > 0], quantile_threshold)\n    sparsification_mask = distance_matrix > distance_threshold\n\n    # Introduce controlled stochasticity\n    random_matrix = np.random.normal(0, 0.1, size=(n, n))\n    random_matrix = np.clip(random_matrix, -0.2, 0.2)\n\n    # Combine all factors\n    heuristic_matrix = (distance_factor**0.6) * (angle_factor**0.4) * (demand_factor**0.7) + random_matrix\n    heuristic_matrix[sparsification_mask] = 0\n\n    # Ensure no self-loops or edges to/from depot (except potentially from depot to first node)\n    np.fill_diagonal(heuristic_matrix, 0)\n    heuristic_matrix[:, 0] = 0  # No edges pointing to the depot\n    heuristic_matrix[0, 0] = 0 #no self loop\n\n    # Normalize heuristic matrix\n    max_heuristic = np.max(heuristic_matrix)\n    if max_heuristic > 0:\n        heuristic_matrix = heuristic_matrix / max_heuristic\n\n    return heuristic_matrix\n\n[Reflection]\nStochasticity, adjusted scaling, aggressive sparsification, and multiplicative combination of factors appear beneficial.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}