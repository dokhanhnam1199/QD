{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    This version incorporates several factors to determine the desirability of including an edge in a solution:\n        - Distance: Shorter distances are generally preferred.\n        - Demand compatibility: Edges connecting nodes with small combined demands are favored.\n        - Angle relative to the depot: Edges that steer away from the depot quickly are discouraged.\n        - Sparsification: Unpromising edges (high cost) are set to zero to reduce the search space.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Vector of customer demands (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros((n, n))\n\n    # Parameters (adjust these to fine-tune the heuristic)\n    distance_weight = 1.0\n    demand_weight = 0.5\n    angle_weight = 0.2\n    sparsification_threshold = np.percentile(distance_matrix[distance_matrix > 0], 75) #remove top 25% edges\n    depot_penalty = 10 # large value makes edges connecting two customer nodes close to the depot less likely\n    # Depot Index\n    depot_index = 0\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristics_matrix[i, j] = 0  # No self-loops\n                continue\n\n            if distance_matrix[i, j] == 0:\n                heuristics_matrix[i,j] = 0\n                continue\n\n            # Distance factor (inversely proportional)\n            distance_factor = distance_weight / distance_matrix[i, j]\n\n            # Demand factor (favor edges connecting nodes with combined demands that are easily satisfied\n            demand_factor = demand_weight * min(1.0, (capacity - demands[i] - demands[j]) / capacity) # high capacity vehicle available\n\n            # Angle factor (discourage edges that point away from the depot early)\n            # Angle is calculated relative to the vector from the current node to the depot\n            depot_x, depot_y = coordinates[0] #x,y location of the depot\n            node_i_x, node_i_y = coordinates[i]\n            node_j_x, node_j_y = coordinates[j]\n\n            # vectors from depot to node i and node j\n            vector_i = np.array([node_i_x - depot_x, node_i_y - depot_y])\n            vector_j = np.array([node_j_x - depot_x, node_j_y - depot_y])\n            if np.linalg.norm(vector_i) == 0 or np.linalg.norm(vector_j) == 0:\n                angle = 0\n            else:\n                cos_angle = np.dot(vector_i, vector_j) / (np.linalg.norm(vector_i) * np.linalg.norm(vector_j))\n                cos_angle = np.clip(cos_angle, -1, 1)\n                angle = np.arccos(cos_angle) # angle between two vectors\n\n\n            angle_factor = angle_weight * (1- np.degrees(angle)/180) # Prefer small angles (edges to neighboring nodes)\n\n            # If near the depot connecting two customers penalize this to avoid very short routes.\n            depot_penalty_factor = 1.0\n            if i != depot_index and j != depot_index:\n                 # Distance threshold, you may want to change the hard coded value (e.g., 50)\n                if distance_matrix[i, depot_index] < 50 and distance_matrix[j, depot_index] < 50: #if close to the depot\n                    depot_penalty_factor = 1/depot_penalty # discourage\n\n            # Combine the factors\n            heuristics_matrix[i, j] = depot_penalty_factor * distance_factor + demand_factor + angle_factor\n\n    # Sparsification: Set unpromising edges to zero\n    heuristics_matrix[distance_matrix > sparsification_threshold] = 0\n\n\n    return heuristics_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for CVRP that combines distance, demand, and angle information.\n    It sparsifies the matrix by setting unpromising elements to zero.\n\n    Args:\n        distance_matrix: Distance matrix (n x n).\n        coordinates: Euclidean coordinates of nodes (n x 2).\n        demands: Customer demands (n).\n        capacity: Vehicle capacity.\n\n    Returns:\n        A matrix of the same shape as the distance_matrix, indicating the\n        promise of each edge.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Parameters (can be tuned)\n    distance_weight = 0.5\n    demand_weight = 0.3\n    angle_weight = 0.2\n    sparsification_threshold = 0.1 # remove edges below this threshold\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # No self-loops\n                continue\n\n            # Distance factor (normalized)\n            distance_factor = 1 / (distance_matrix[i, j] + 1e-6) # Avoid division by zero\n\n            # Demand factor: Favor edges connecting nodes with compatible demands\n            # Penalize edges that would easily lead to capacity violations\n\n            demand_factor = 1 - min(1, (demands[i] + demands[j]) / (2*capacity))\n            # Angle factor: Favor edges that don't create sharp turns\n\n            # Calculate the angle between the edge (i, j) and the x-axis.\n            angle = np.arctan2(coordinates[j, 1] - coordinates[i, 1], coordinates[j, 0] - coordinates[i, 0])\n            angle_factor = 1 #default if we don't find the closest node, which prevents errors\n\n            closest_node_angle_diff = np.inf # initialize to maximum value\n            for k in range(n):\n                if k != i and k !=j : #avoid current node, or node j\n                   temp_angle = np.arctan2(coordinates[k,1] - coordinates[i,1], coordinates[k,0] - coordinates[i,0])\n                   angle_diff = np.abs(angle - temp_angle) #take smallest turn\n\n                   if angle_diff < closest_node_angle_diff:\n                       closest_node_angle_diff = angle_diff\n\n            angle_factor = 1 - min(1, closest_node_angle_diff / np.pi) # map from [0, pi] -> [0, 1]. larger = good\n           # Overall heuristic value\n            heuristic_value = (\n                distance_weight * distance_factor +\n                demand_weight * demand_factor +\n                angle_weight * angle_factor\n            )\n\n            heuristic_matrix[i, j] = heuristic_value\n\n    # Sparsification: Remove unpromising edges\n    max_val = np.max(heuristic_matrix)\n\n    if max_val > 0: #avoid divide by 0\n        heuristic_matrix = heuristic_matrix / max_val # Normalize matrix\n\n        heuristic_matrix[heuristic_matrix < sparsification_threshold] = 0\n\n\n    return heuristic_matrix\n\n[Reflection]\nBetter heuristics normalize values, refine angle calculations using closest nodes, and sparsify based on normalized thresholds.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}