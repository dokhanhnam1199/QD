```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version combines multiple factors to determine the promise of each edge and sparsifies the matrix.

    Args:
        distance_matrix (np.ndarray): Distance matrix (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Edge promise indicators (n x n).
    """
    n = distance_matrix.shape[0]
    promise = np.zeros_like(distance_matrix)

    # Calculate distance-based promise (inverse distance)
    distance_promise = 1 / (distance_matrix + 1e-6)  # Add a small constant to avoid division by zero

    # Calculate demand-based promise (nodes with similar demand are less likely to be connected directly if demand is high)
    demand_matrix = np.abs(demands[:, None] - demands[None, :])
    demand_promise = 1 - np.clip(demand_matrix / capacity, 0, 1)  # Normalize demand difference by capacity
    demand_promise = np.maximum(0.1, demand_promise)

    # Calculate angle-based promise (penalize sharp turns)
    angle_promise = np.ones_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                # Calculate angle between lines from depot to i and depot to j
                v1 = coordinates[i] - coordinates[0]
                v2 = coordinates[j] - coordinates[0]
                v1_norm = np.linalg.norm(v1)
                v2_norm = np.linalg.norm(v2)
                if v1_norm > 0 and v2_norm > 0:
                    cos_angle = np.dot(v1, v2) / (v1_norm * v2_norm)
                    cos_angle = np.clip(cos_angle, -1, 1)
                    angle = np.arccos(cos_angle)
                    angle_promise[i, j] = 1 - np.clip(angle / np.pi, 0, 1) # angle between 0 and pi

    # Combine promises
    promise = distance_promise * demand_promise * angle_promise

    # Sparsify the matrix (keep only the most promising edges)
    threshold = np.percentile(promise[promise > 0], 40)  # Keep top 60% edges
    promise[promise < threshold] = 0

    # Ensure depot connectivity
    for i in range(1, n):
        if np.sum(promise[0, :]) == 0:
            promise[0, np.argmin(distance_matrix[0, 1:])+1] = 1.0 # always allow some kind of depot connections if totally disconnected
        if np.sum(promise[:, 0]) == 0:
            promise[np.argmin(distance_matrix[1:, 0])+1,0] = 1.0 # always allow some kind of depot connections if totally disconnected



    return promise
```
