```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Combines distance, demand, and angle information to create a heuristic matrix.
    Sparsifies the matrix by setting unpromising elements to zero.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Parameters (tune these for better performance)
    distance_weight = 0.6  # Weight for distance
    demand_weight = 0.3    # Weight for demand
    angle_weight = 0.1     # Weight for angle
    sparsification_threshold = 0.1  # Threshold for sparsification

    for i in range(n):
        for j in range(n):
            if i != j:
                # Distance factor: inversely proportional to distance
                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Avoid division by zero

                # Demand factor: favors connections to nodes with smaller demands
                demand_factor = 1 - (demands[j] / (capacity + 1e-6))  # Normalized demand

                # Angle factor: penalize sharp turns (helps create smoother routes)
                if i == 0:
                     angle_factor = 1.0 # No penalty for starting from depot.
                else:
                    angles = []
                    for k in range(n):
                        if k != i and k != j:
                            # compute angle at node i from k to j
                            vec1 = coordinates[k] - coordinates[i]
                            vec2 = coordinates[j] - coordinates[i]
                            norm_vec1 = vec1 / np.linalg.norm(vec1)
                            norm_vec2 = vec2 / np.linalg.norm(vec2)
                            angle = np.arccos(np.dot(norm_vec1, norm_vec2))
                            angles.append(angle)
                    if angles:
                        angle_factor = 1 - (min(angles) / np.pi)  # Normalize angles to [0,1]
                    else:
                        angle_factor = 1.0
                # Combine the factors
                heuristic_matrix[i, j] = (
                    distance_weight * distance_factor +
                    demand_weight * demand_factor +
                    angle_weight * angle_factor
                )
    # Sparsify the matrix: remove less promising edges
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        threshold = sparsification_threshold * max_heuristic
        heuristic_matrix[heuristic_matrix < threshold] = 0
    else:
        heuristic_matrix = np.zeros((n, n))


    return heuristic_matrix
```
