```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) using a combination of factors and stochastic sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Demand of each customer (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # 1. Distance factor
    distance_factor = 1 / (distance_matrix + 1e-6)

    # 2. Angle factor
    angle_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                vector1 = coordinates[i] - coordinates[0]
                vector2 = coordinates[j] - coordinates[i]
                norm1 = np.linalg.norm(vector1)
                norm2 = np.linalg.norm(vector2)
                if norm1 > 0 and norm2 > 0:
                    vector1 = vector1 / norm1
                    vector2 = vector2 / norm2
                    dot_product = np.dot(vector1, vector2)
                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))
                    angle_factor[i, j] = 1 - (angle / np.pi)

    # 3. Demand factor
    demand_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i != j and i != 0 and j != 0:
                demand_factor[i, j] = np.exp(- (demands[i] + demands[j]) / (2 * capacity)) # Adjusted exponent

    # Adaptive weight based on problem size
    problem_size_weight = min(1.0, n / 100.0)  # Smaller problems give more weight to distance
    distance_weight = 0.6 + 0.4 * problem_size_weight  # Adjust distance weight
    angle_weight = 0.25 - 0.15 * problem_size_weight  # Adjust angle weight
    demand_weight = 0.15 - 0.25 * problem_size_weight

    # Controlled Randomness: Additive noise proportional to distance
    random_matrix = np.random.normal(0, 0.05 * distance_matrix, size=(n, n))
    random_matrix = np.clip(random_matrix, -0.1, 0.1) #clip to prevent creating large noise.

    # Combine factors multiplicatively
    heuristic_matrix = (distance_factor ** distance_weight) * \
                       (angle_factor ** angle_weight) * \
                       (demand_factor ** demand_weight) + random_matrix

    # Sparsification using quantile-based thresholding, adapted to demand
    demand_threshold = np.quantile(demands[1:], 0.75)  # Customers with higher demand get more sparsification.

    distance_threshold = np.quantile(distance_matrix[distance_matrix > 0], 0.8 + 0.1 * (demand_threshold / np.max(demands[1:]))) # dynamically adjust distance threshold
    heuristic_matrix[distance_matrix > distance_threshold] = 0
    np.fill_diagonal(heuristic_matrix, 0)


    # Normalize
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic

    return heuristic_matrix
```
