{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) using a combination of factors and stochastic solution sampling.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Demand of each customer (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # 1. Distance factor\n    distance_factor = 1 / (distance_matrix + 1e-6)\n\n    # 2. Angle factor\n    angle_factor = np.ones((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                vector1 = coordinates[i] - coordinates[0]\n                vector2 = coordinates[j] - coordinates[i]\n                norm1 = np.linalg.norm(vector1)\n                norm2 = np.linalg.norm(vector2)\n                if norm1 > 0 and norm2 > 0:\n                    vector1 = vector1 / norm1\n                    vector2 = vector2 / norm2\n                    dot_product = np.dot(vector1, vector2)\n                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))\n                    angle_factor[i, j] = 1 - (angle / np.pi)\n\n    # 3. Demand factor\n    demand_factor = np.ones((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j and i != 0 and j != 0:\n                demand_factor[i, j] = np.exp(- (demands[i] + demands[j]) / capacity)\n\n    # Combined heuristic\n    heuristic_matrix = distance_factor * angle_factor * demand_factor\n\n    # Sparsification using quantile-based thresholding\n    flat_heuristic = heuristic_matrix.flatten()\n    quantile_threshold = np.quantile(flat_heuristic[flat_heuristic > 0], 0.50)  # Adaptive: 50th quantile\n    heuristic_matrix[heuristic_matrix < quantile_threshold] = 0\n    np.fill_diagonal(heuristic_matrix, 0)\n\n    # Stochasticity: Add small random noise to avoid getting stuck\n    noise = np.random.normal(0, 0.01, size=(n, n)) # Scale the noise by 0.01\n    heuristic_matrix = heuristic_matrix + noise\n    heuristic_matrix = np.clip(heuristic_matrix, 0, 1)\n\n    # Normalize heuristic matrix\n    max_heuristic = np.max(heuristic_matrix)\n    if max_heuristic > 0:\n        heuristic_matrix = heuristic_matrix / max_heuristic\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    This version refines the factors used to determine edge promise, including distance,\n    angle between nodes, demand considerations, and introduces more sophisticated sparsification.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Parameters (tunable)\n    distance_weight = 0.4  # Weight for distance factor\n    angle_weight = 0.3     # Weight for angle factor\n    demand_weight = 0.3    # Weight for demand factor\n    sparsification_threshold = int(np.sqrt(n))  # Dynamic threshold based on problem size\n    depot_proximity_weight = 0.1 #Weight for proximity to depot\n    \n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Distance factor: Inverse of distance\n                distance_factor = 1 / (distance_matrix[i, j] + 1e-9)\n\n                # Angle factor: Penalize sharp turns.  More robust handling of depot connections.\n                if i != 0 and j != 0:\n                    v1 = coordinates[i] - coordinates[0]\n                    v2 = coordinates[j] - coordinates[i]\n                    v1_norm = np.linalg.norm(v1)\n                    v2_norm = np.linalg.norm(v2)\n                    if v1_norm > 0 and v2_norm > 0:\n                        dot_product = np.dot(v1, v2)\n                        angle = np.arccos(np.clip(dot_product / (v1_norm * v2_norm), -1.0, 1.0)) #Clip to avoid domain errors\n                        angle_factor = 1 - (angle / np.pi)\n                    else:\n                        angle_factor = 0.5 # Default if a node is very close to the depot\n                else:\n                    angle_factor = 0.8  # Slightly incentivize depot connections\n\n                # Demand factor: Consider remaining capacity\n                remaining_capacity_i = capacity - demands[i] if i!=0 else capacity #Treat the depot as having full capacity\n                remaining_capacity_j = capacity - demands[j] if j!=0 else capacity\n                demand_compatibility = np.exp(-((demands[i] + demands[j]) / (2*capacity))**2 / 0.1)\n                demand_factor = demand_compatibility\n\n                # Depot proximity factor: Incentive to connect to nodes closer to the depot\n                depot_distance_sum = distance_matrix[0, i] + distance_matrix[0, j] if (i != 0 and j != 0) else distance_matrix[0, i] if i!=0 else distance_matrix[0,j] if j!=0 else 0.0\n                depot_proximity = np.exp(-depot_distance_sum / (np.mean(distance_matrix[0,:])+ 1e-9)) #Normalize the distance\n\n                # Combine factors with weights\n                heuristic_matrix[i, j] = (\n                    distance_weight * distance_factor +\n                    angle_weight * angle_factor +\n                    demand_weight * demand_factor +\n                    depot_proximity_weight * depot_proximity\n                )\n\n    # Sparsification: Adaptive thresholding and masking\n    for i in range(n):\n        row = heuristic_matrix[i, :].copy()\n        # Exclude the self-loop (i, i)\n        row[i] = -np.inf  # Ensure self-loop is not selected\n\n        # Select top k neighbors\n        indices = np.argpartition(row, -sparsification_threshold)[-sparsification_threshold:]\n\n        # Zero out the rest\n        mask = np.ones(n, dtype=bool)\n        mask[indices] = False\n        heuristic_matrix[i, mask] = 0.0\n    \n    return heuristic_matrix\n\n[Reflection]\nWeighting factors, adaptive sparsification, and depot proximity improve CVRP heuristic performance.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}