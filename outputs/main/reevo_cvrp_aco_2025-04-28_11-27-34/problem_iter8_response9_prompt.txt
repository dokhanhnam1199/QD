{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) using a combination of factors.\n    Version 3: Focuses on multiplicative combinations, adaptive sparsification, depot proximity,\n    angle calculations, demand-capacity scaling, controlled randomness, and prioritized depot connections.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Demand of each customer (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # 1. Distance Factor (Shorter distances are better)\n    distance_factor = 1 / (distance_matrix + 1e-6)\n\n    # 2. Depot Proximity Factor (Closer to depot is often better, especially for return trips)\n    depot_proximity_factor = np.zeros((n, n))\n    for i in range(1, n):  # Skip depot itself\n        depot_proximity_factor[0, i] = depot_proximity_factor[i, 0] = np.exp(-0.5 * (distance_matrix[0, i] / np.mean(distance_matrix[0, 1:]))**2) # Gaussian-like decay, stronger depot connection\n\n    # 3. Angle Factor (Avoid sharp turns)\n    angle_factor = np.ones((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                vector1 = coordinates[i] - coordinates[0]\n                vector2 = coordinates[j] - coordinates[i]\n\n                norm1 = np.linalg.norm(vector1)\n                norm2 = np.linalg.norm(vector2)\n\n                if norm1 > 0 and norm2 > 0:\n                    vector1 = vector1 / norm1\n                    vector2 = vector2 / norm2\n                    dot_product = np.dot(vector1, vector2)\n                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))\n                    angle_factor[i, j] = 1 - (angle / np.pi)\n\n    # 4. Demand Factor (Penalize edges that would overload a vehicle)\n    demand_factor = np.ones((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j and i != 0 and j != 0:\n                demand_factor[i, j] = np.exp(-((demands[i] + demands[j]) / (capacity * 0.8))**2)  # Gaussian-like penalty around 80% capacity\n\n    # 5. Route Start Preference (prefer connections to the depot to start routes)\n    route_start_factor = np.ones((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                route_start_factor[0, i] = 1.2 # Prefer starting routes from the depot\n                route_start_factor[i, 0] = 1.2\n\n    # 6. Randomness (introduce some stochasticity to diversify the search)\n    randomness_factor = np.random.uniform(0.8, 1.2, size=(n, n))\n\n    # Combine factors multiplicatively\n    heuristic_matrix = distance_factor * depot_proximity_factor * angle_factor * demand_factor * route_start_factor * randomness_factor\n\n    # Adaptive Sparsification (Remove unpromising edges based on quantile)\n    max_heuristic = np.max(heuristic_matrix)\n    if max_heuristic > 0:\n        heuristic_matrix = heuristic_matrix / max_heuristic  # Normalize to [0, 1]\n        quantile_threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.3)  # Keep top 70%\n        heuristic_matrix[heuristic_matrix < quantile_threshold] = 0\n\n    np.fill_diagonal(heuristic_matrix, 0)  # No self-loops\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for CVRP using a stochastic solution sampling approach with adaptive weights and sparsification.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Demand of each customer (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # --- Heuristic Factors ---\n    # 1. Distance Factor\n    distance_factor = 1 / (distance_matrix + 1e-6)\n\n    # 2. Angle Factor\n    angle_factor = np.ones((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                v1 = coordinates[i] - coordinates[0]\n                v2 = coordinates[j] - coordinates[i]\n                norm1 = np.linalg.norm(v1)\n                norm2 = np.linalg.norm(v2)\n\n                if norm1 > 0 and norm2 > 0:\n                    v1_norm = v1 / norm1\n                    v2_norm = v2 / norm2\n                    dot_product = np.dot(v1_norm, v2_norm)\n                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))\n                    angle_factor[i, j] = 1 - (angle / np.pi)\n\n    # 3. Demand Factor (Gaussian-like penalty)\n    demand_factor = np.ones((n, n))\n    demand_penalty_scale = 0.5 #scaling factor, tuned heuristically.\n    for i in range(n):\n        for j in range(n):\n            if i != j and i != 0 and j != 0:\n                combined_demand = demands[i] + demands[j]\n                demand_factor[i, j] = np.exp(-0.5 * ((combined_demand / capacity)**2) / demand_penalty_scale ) # gaussian penalty\n\n    # 4. Depot Proximity\n    depot_proximity_factor = np.ones((n,n))\n    for i in range(n):\n        for j in range(n):\n            depot_proximity_factor[i, j] = (1 / (distance_matrix[0, i] + distance_matrix[0, j] + 1e-6))**0.5 #shorter distance to depot, better.\n            #Squareroot to reduce the impact.\n\n    # --- Adaptive Sparsification ---\n    distances = distance_matrix[distance_matrix > 0].flatten()\n    quantile_75 = np.quantile(distances, 0.75)  # Example quantile\n    sparsification_threshold = quantile_75 * 1.5 #adaptive threshold\n\n    # --- Controlled Randomness ---\n    randomness_strength = 0.01 #scaling parameter, can be tuned.\n    random_factor = np.random.rand(n, n) * distance_matrix * randomness_strength  #Scaled with edge distance\n\n\n    # --- Combination of Factors (Multiplicative) ---\n    #Initial Weights\n    w_distance = 0.4\n    w_angle = 0.2\n    w_demand = 0.2\n    w_depot = 0.2\n\n    heuristic_matrix = (distance_factor**w_distance) * \\\n                       (angle_factor**w_angle) * \\\n                       (demand_factor**w_demand) * \\\n                       (depot_proximity_factor**w_depot) + random_factor\n\n    # --- Sparsify and Clean ---\n    heuristic_matrix[distance_matrix > sparsification_threshold] = 0\n    np.fill_diagonal(heuristic_matrix, 0)\n    heuristic_matrix[0,0] = 0 # Ensure depot->depot is zero\n\n    # --- Normalize ---\n    max_heuristic = np.max(heuristic_matrix)\n    if max_heuristic > 0:\n        heuristic_matrix = heuristic_matrix / max_heuristic\n\n    return heuristic_matrix\n\n[Reflection]\nAdaptive weights, distance-scaled randomness, refined sparsification, and depot handling improve heuristic quality.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}