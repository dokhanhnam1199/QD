```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Parameters to control the influence of different factors
    distance_factor = 1.0
    demand_factor = 1.0
    angle_factor = 1.0
    capacity_margin_factor = 0.5 # How much the capacity constraint matters in sparsification. Smaller values mean more sparsification

    # Calculate angles between nodes relative to the depot
    depot_x, depot_y = coordinates[0]
    angles = np.zeros(n)
    for i in range(1, n):
        x, y = coordinates[i]
        angles[i] = np.arctan2(y - depot_y, x - depot_x)

    # Heuristic calculation for each edge
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
                continue

            # Distance component: Shorter distances are preferred
            distance_heuristic = 1 / (distance_matrix[i, j] + 1e-6) # Avoid division by zero

            # Demand component: Smaller combined demands are preferred
            demand_heuristic = 1 / (demands[i] + demands[j] + 1e-6)

            # Angle component: Encourage smoother routes (avoid sharp turns)
            angle_diff = abs(angles[i] - angles[j])
            angle_diff = min(angle_diff, 2 * np.pi - angle_diff)  # Normalize angle difference
            angle_heuristic = 1 / (angle_diff + 1e-6)

            # Combine the heuristics
            heuristic_matrix[i, j] = (
                distance_factor * distance_heuristic +
                demand_factor * demand_heuristic +
                angle_factor * angle_heuristic
            )

    # Sparsification based on capacity and distance
    max_heuristic = np.max(heuristic_matrix)
    avg_demand = np.mean(demands)

    for i in range(n):
        for j in range(n):
             if i == 0 and demands[j] > capacity or j == 0 and demands[i] > capacity: # if the demand itself larger than capacity.
                heuristic_matrix[i, j] = 0
                continue

             #If it can be plausibly routed based on the remaining capacity
             remaining_capacity_i = capacity - demands[i]
             remaining_capacity_j = capacity - demands[j]

             # Heuristic * scale factor << Remaining capacity.
             if i != 0 and remaining_capacity_i < capacity_margin_factor *  (demands[j] *  max_heuristic / (heuristic_matrix[i,j]+ 1e-9)):  #avoid division by zero

                 heuristic_matrix[i, j] = 0

             if j != 0 and remaining_capacity_j < capacity_margin_factor * (demands[i] *  max_heuristic / (heuristic_matrix[i,j]+ 1e-9)):
                 heuristic_matrix[i, j] = 0



    return heuristic_matrix
```
