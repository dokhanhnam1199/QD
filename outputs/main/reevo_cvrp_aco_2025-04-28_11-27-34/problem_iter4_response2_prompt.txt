{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    A heuristic function for the Capacitated Vehicle Routing Problem (CVRP) based on stochastic solution sampling.\n\n    This version incorporates a combination of factors:\n    - Distance: Shorter distances are preferred.\n    - Demand: Edges connecting to nodes with high demands are penalized (to encourage efficient capacity utilization).\n    - Angle: Edges that form sharp turns are penalized.\n    - Capacity Ratio: Prioritizes connection to nodes such that the total capacity in current tour is less than vehicle capacity.\n    - Sparsity: Sets elements of the matrix to zero if deemed unpromising.\n\n    This version uses a multiplicative combination of factors, explicit capacity ratio, and quantile-based sparsification.\n\n    Args:\n        distance_matrix: A NumPy array representing the distance between nodes.\n        coordinates: A NumPy array of node coordinates (x, y).\n        demands: A NumPy array of node demands.\n        capacity: The capacity of each vehicle.\n\n    Returns:\n        A NumPy array of the same shape as the distance_matrix, representing the heuristic values for each edge.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Parameters (can be tuned)\n    distance_weight = 1.0\n    demand_weight = 0.5\n    angle_weight = 0.2\n    capacity_weight = 0.3\n    sparsity_threshold = 0.2  # Adjust for desired sparsity\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # No self-loops\n                continue\n\n            # Distance factor (prefer shorter distances)\n            distance_factor = distance_weight / (distance_matrix[i, j] + 1e-6) # avoid division by zero\n\n            # Demand factor (penalize connections to very high demand nodes). Note the depot demand is 0, so not penalized.\n            demand_factor = max(0.01, 1.0 - demand_weight * (demands[i] + demands[j]) / (2.0 * capacity + 1e-6)) # Ensure it's non-zero and not too small\n            # Angle factor (penalize sharp turns)\n            angle_factor = 1.0\n            if i != 0 and j != 0:\n                # Calculate angles between lines connecting node i and j to the depot (node 0).\n                vector_i = coordinates[i] - coordinates[0]\n                vector_j = coordinates[j] - coordinates[0]\n                \n                # Normalize vectors to avoid issues with magnitude\n                vector_i = vector_i / (np.linalg.norm(vector_i) + 1e-6)\n                vector_j = vector_j / (np.linalg.norm(vector_j) + 1e-6)\n                \n                dot_product = np.dot(vector_i, vector_j)\n                angle = np.arccos(np.clip(dot_product, -1.0, 1.0))  # Clip to avoid domain errors\n                angle_factor = max(0.01, 1.0 - angle_weight * (angle / np.pi)) # Normalize by pi and make sure it's not zero.\n\n            # Capacity ratio factor (encourage routes that don't immediately exceed capacity)\n            capacity_ratio = (demands[i] + demands[j]) / (capacity + 1e-6)\n            capacity_factor = max(0.01, 1.0 - capacity_weight * capacity_ratio) # make sure it's not zero.\n\n            heuristic_matrix[i, j] = distance_factor * demand_factor * angle_factor * capacity_factor\n\n    # Sparsify the matrix (set unpromising edges to zero)\n    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], sparsity_threshold)\n    heuristic_matrix[heuristic_matrix < threshold] = 0.0\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n\n    \"\"\"\n    A heuristic function for the Capacitated Vehicle Routing Problem (CVRP) using stochastic solution sampling principles.\n\n    This version incorporates several factors to assess the desirability of including each edge in a solution:\n    - Distance: Shorter distances are generally preferred.\n    - Demand: Edges connecting nodes with high demands might be less desirable if they risk exceeding vehicle capacity early.\n    - Closeness to Depot: Edges connecting nodes far from the depot might be penalized, encouraging vehicles to return to the depot more frequently.\n    - Savings: Savings from merging two routes.\n    - Sparsification:  Sets low-probability edges to zero to focus on promising connections.\n\n    Args:\n        distance_matrix (np.ndarray): A matrix of distances between all nodes (n x n).\n        coordinates (np.ndarray): A matrix of node coordinates (n x 2).\n        demands (np.ndarray): A vector of customer demands (n).\n        capacity (int): The capacity of each vehicle.\n\n    Returns:\n        np.ndarray: A matrix of heuristic values, indicating the desirability of each edge (n x n).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Parameters (tunable)\n    distance_weight = 1.0\n    demand_weight = 0.5\n    depot_proximity_weight = 0.5\n    savings_weight = 0.5\n    sparsification_threshold = 0.1  # Adjust this value for more or less sparsification\n\n    # Calculate savings matrix\n    savings_matrix = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]  # Savings matrix is symmetric\n\n    # Normalize the distance matrix (important for scaling)\n    max_distance = np.max(distance_matrix)\n    normalized_distance_matrix = distance_matrix / (max_distance + 1e-6) #Avoid div by zero.\n\n    max_savings = np.max(savings_matrix)\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # No self-loops\n                continue\n\n            # Distance factor: inversely proportional to distance\n            distance_factor = distance_weight / (normalized_distance_matrix[i, j] + 1e-6)  # Adding a small constant to avoid division by zero\n\n            # Demand factor: Penalize edges that connect to nodes with higher demands\n            demand_factor = 1.0 - demand_weight * (demands[i] + demands[j]) / (2 * capacity + 1e-6)  # Scaled relative to the capcity\n\n            # Depot proximity factor: Encourage returns to depot\n            depot_distance_i = distance_matrix[i, 0] #Distance from node i to depot\n            depot_distance_j = distance_matrix[j, 0] #Distance from node j to depot\n\n            depot_proximity_factor = 1.0 - depot_proximity_weight * (depot_distance_i + depot_distance_j) / (2 * max_distance + 1e-6)\n\n            #Savings factor\n            savings_factor = 0.0\n            if max_savings > 0:\n                savings_factor = savings_weight * savings_matrix[i,j]/max_savings\n\n            # Combine the factors\n            heuristic_matrix[i, j] = distance_factor * max(0, demand_factor) * max(0, depot_proximity_factor) + savings_factor\n\n    # Sparsification: Zero out low-probability edges\n    max_heuristic = np.max(heuristic_matrix)\n    if max_heuristic > 0:\n        threshold = sparsification_threshold * max_heuristic\n        heuristic_matrix[heuristic_matrix < threshold] = 0.0\n\n    return heuristic_matrix\n\n[Reflection]\nConsider savings, depot proximity, normalized distances, and thresholding relative to the maximum heuristic value.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}