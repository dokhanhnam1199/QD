```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version prioritizes accurate angle calculation, demand compatibility, and top-N sparsification
    for improved edge selection in the CVRP.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Parameters (tunable)
    distance_weight = 0.4
    angle_weight = 0.4
    demand_weight = 0.2
    sparsification_threshold = 5  # Keep top N edges per node

    for i in range(n):
        for j in range(n):
            if i != j:
                # Distance factor
                distance_factor = 1 / (distance_matrix[i, j] + 1e-9) # Add small value to avoid zero division

                # Angle factor (more accurate angle calculation)
                if i != 0 and j != 0:
                    v1 = coordinates[i] - coordinates[0]  # Vector from depot to i
                    v2 = coordinates[j] - coordinates[i]  # Vector from i to j

                    v1_norm = np.linalg.norm(v1)
                    v2_norm = np.linalg.norm(v2)

                    if v1_norm > 0 and v2_norm > 0:
                        dot_product = np.dot(v1, v2)
                        cos_angle = dot_product / (v1_norm * v2_norm)
                        # Clip cosine value to the range [-1, 1] to avoid arccos domain errors
                        cos_angle = np.clip(cos_angle, -1.0, 1.0)
                        angle = np.arccos(cos_angle)
                        angle_factor = 1 - (angle / np.pi)  # Normalize to [0, 1], higher is better (straighter)
                    else:
                        angle_factor = 0.5  # Neutral value if vectors are too short
                else:
                    angle_factor = 0.8  # Higher score for depot connections

                # Demand factor (prioritize compatible demands)
                demand_factor = max(0, 1 - abs(demands[i] + demands[j]) / (2 * capacity)) # ensures non-negative values

                heuristic_matrix[i, j] = (
                    distance_weight * distance_factor +
                    angle_weight * angle_factor +
                    demand_weight * demand_factor
                )

    # Sparsification (Top-N selection per row)
    for i in range(n):
        row = heuristic_matrix[i, :]
        # Find indices of the top N largest values, excluding self-loops
        indices = np.argsort(row)[-(sparsification_threshold + 1):]
        
        # Set non-top N edges to 0
        for j in range(n):
            if i != j and j not in indices:
                heuristic_matrix[i, j] = 0

    return heuristic_matrix
```
