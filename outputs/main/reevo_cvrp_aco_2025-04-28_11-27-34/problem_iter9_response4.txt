```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) using a combination of factors with adaptive weights and sparsification.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Demand of each customer (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # 1. Distance Factor (normalized)
    distance_factor = 1 / (distance_matrix + 1e-6)
    distance_factor = distance_factor / np.max(distance_factor)

    # 2. Angle Factor (normalized)
    angle_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                vector1 = coordinates[i] - coordinates[0]
                vector2 = coordinates[j] - coordinates[i]
                norm1 = np.linalg.norm(vector1)
                norm2 = np.linalg.norm(vector2)
                if norm1 > 0 and norm2 > 0:
                    vector1 = vector1 / norm1
                    vector2 = vector2 / norm2
                    dot_product = np.dot(vector1, vector2)
                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))
                    angle_factor[i, j] = 1 - (angle / np.pi)
    angle_factor = angle_factor / np.max(angle_factor)

    # 3. Demand Factor (normalized)
    demand_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i != j and i != 0 and j != 0:
                demand_factor[i, j] = np.exp(- (demands[i] + demands[j]) / capacity)
    demand_factor = demand_factor / np.max(demand_factor)

    # Adaptive Weights (Example: Based on problem size)
    alpha = 0.5 # Distance weight
    beta = 0.3  # Angle weight
    gamma = 0.2 # Demand weight

    # Combined Heuristic Matrix
    heuristic_matrix = (alpha * distance_factor + beta * angle_factor + gamma * demand_factor)

    # Sparsification (Adaptive threshold)
    mean_distance = np.mean(distance_matrix[distance_matrix > 0])
    distance_threshold = mean_distance * (1 + 0.5 * (n / 100)) #Adjusted threshold based on n
    heuristic_matrix[distance_matrix > distance_threshold] = 0
    np.fill_diagonal(heuristic_matrix, 0)

    # Randomness (Scaled by distance to add some stochasticity)
    randomness_factor = np.random.rand(n, n) * 0.1 / (distance_matrix + 1e-6) #Inverse relationship to distance
    heuristic_matrix = heuristic_matrix + randomness_factor

    # Normalize the final heuristic matrix
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic

    return heuristic_matrix
```
