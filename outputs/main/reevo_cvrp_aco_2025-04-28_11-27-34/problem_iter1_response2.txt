```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings for each pair of customers
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Combine distance, savings, and demand considerations
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0
            else:
                # Prioritize shorter distances
                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Adding a small constant to avoid division by zero

                # Incorporate savings
                savings_factor = savings_matrix[i, j]

                # Penalize edges connecting nodes with high demands to promote balanced routes
                demand_penalty = (demands[i] + demands[j]) / (2 * capacity + 1e-6)

                # Combine the factors
                heuristic_matrix[i, j] = distance_factor + savings_factor - demand_penalty

    # Sparsify the matrix by setting unpromising elements to zero
    # Keep only the top k promising edges for each node
    k = int(np.sqrt(n))  # Adjust k as needed
    for i in range(n):
        row = heuristic_matrix[i, :]
        indices = np.argsort(row)[-k:]  # Indices of top k elements
        mask = np.ones(n, dtype=bool)
        mask[indices] = False
        heuristic_matrix[i, mask] = 0

    # Ensure no connection to the depot is set to zero. The depot must be connected.
    for i in range(1, n):
      heuristic_matrix[0,i] = max(heuristic_matrix[0,i], 0.1 * np.max(heuristic_matrix)) #ensure reasonable connection to depot
      heuristic_matrix[i,0] = max(heuristic_matrix[i,0], 0.1 * np.max(heuristic_matrix)) #ensure reasonable connection to depot


    return heuristic_matrix
```
