{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) using a combination of factors.\n    Improved version with adaptive weights, sparsification, and depot proximity consideration.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Demand of each customer (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # 1. Distance Factor (Normalized)\n    distance_factor = 1 / (distance_matrix + 1e-6)\n    max_distance_factor = np.max(distance_factor)\n    distance_factor = distance_factor / max_distance_factor if max_distance_factor > 0 else distance_factor\n\n    # 2. Angle Factor (Depot Proximity - Normalized)\n    angle_factor = np.ones((n, n))\n    for i in range(1, n):  # Iterate over customers only\n        for j in range(1, n):  # Iterate over customers only\n            if i != j:\n                vector1 = coordinates[i] - coordinates[0]\n                vector2 = coordinates[j] - coordinates[i]\n\n                norm1 = np.linalg.norm(vector1)\n                norm2 = np.linalg.norm(vector2)\n\n                if norm1 > 0 and norm2 > 0:\n                    vector1 = vector1 / norm1\n                    vector2 = vector2 / norm2\n\n                    dot_product = np.dot(vector1, vector2)\n                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))\n                    angle_factor[i, j] = 1 - (angle / np.pi)\n    max_angle_factor = np.max(angle_factor)\n    angle_factor = angle_factor / max_angle_factor if max_angle_factor > 0 else angle_factor\n\n    # 3. Demand Factor (Remaining Capacity - Normalized)\n    demand_factor = np.ones((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                demand_factor[i, j] = np.exp(-(demands[i] + demands[j]) / capacity)\n    max_demand_factor = np.max(demand_factor)\n    demand_factor = demand_factor / max_demand_factor if max_demand_factor > 0 else demand_factor\n    # Adaptive Weights\n    alpha = 0.5  # Distance weight\n    beta = 0.3  # Angle weight\n    gamma = 0.2  # Demand weight\n\n    # Combined Heuristic Matrix\n    heuristic_matrix = (alpha * distance_factor + beta * angle_factor + gamma * demand_factor)\n\n    # Sparsification\n    mean_distance = np.mean(distance_matrix[distance_matrix > 0])\n    distance_threshold = mean_distance * (1 + 0.5 * (n / 100))  # Adaptive threshold based on problem size\n    heuristic_matrix[distance_matrix > distance_threshold] = 0\n\n    np.fill_diagonal(heuristic_matrix, 0)\n\n    # Final Normalization\n    max_heuristic = np.max(heuristic_matrix)\n    if max_heuristic > 0:\n        heuristic_matrix = heuristic_matrix / max_heuristic\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for Capacitated Vehicle Routing Problem (CVRP).\n    This version prioritizes a multiplicative combination of factors, dynamic sparsification,\n    and depot proximity to enhance solution quality.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Demand of each customer (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # 1. Distance Factor (Shorter distances are better)\n    distance_factor = 1 / (distance_matrix + 1e-9)\n\n    # 2. Depot Proximity Factor (Closer to the depot, better)\n    depot_proximity_factor = np.zeros((n, n))\n    avg_distance_to_depot = np.mean(distance_matrix[0, 1:])  # Average distance from depot to customers\n    for i in range(1, n):  # Exclude depot\n        for j in range(1, n):  # Exclude depot\n            depot_proximity_factor[i, j] = np.exp(-0.5 * ((distance_matrix[0, i] + distance_matrix[j, 0]) / (2 * avg_distance_to_depot + 1e-9))**2)\n\n\n    # 3. Demand Factor (Edges connecting nodes with low combined demand are favored)\n    demand_factor = np.ones((n, n))\n    for i in range(1, n):  # Exclude depot\n        for j in range(1, n):  # Exclude depot\n            if i != j:\n                demand_factor[i, j] = np.exp(-((demands[i] + demands[j]) / (capacity * 0.75 + 1e-9))**2)\n\n\n    # 4. Angle Factor (Encourage less sharp turns from depot)\n    angle_factor = np.ones((n, n))\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                vector_i = coordinates[i] - coordinates[0]\n                vector_j = coordinates[j] - coordinates[i]\n\n                norm_i = np.linalg.norm(vector_i)\n                norm_j = np.linalg.norm(vector_j)\n\n                if norm_i > 0 and norm_j > 0:\n                    vector_i = vector_i / norm_i\n                    vector_j = vector_j / norm_j\n                    dot_product = np.dot(vector_i, vector_j)\n                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))\n                    angle_factor[i, j] = 1 - (angle / np.pi)\n                else:\n                    angle_factor[i, j] = 0.5\n\n\n    # Combine the factors multiplicatively\n    heuristic_matrix = distance_factor * depot_proximity_factor * demand_factor * angle_factor\n\n    # Dynamic Sparsification (Zero out less promising edges to reduce the search space)\n    max_heuristic = np.max(heuristic_matrix)\n    if max_heuristic > 0:\n        heuristic_matrix = heuristic_matrix / max_heuristic  # Normalize\n\n        # Adjust quantile based on problem size\n        quantile_threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], min(0.5 + (n / 1000), 0.95))\n        heuristic_matrix[heuristic_matrix < quantile_threshold] = 0  # Remove edges below threshold\n\n    np.fill_diagonal(heuristic_matrix, 0) # No self-loops\n\n\n    return heuristic_matrix\n\n[Reflection]\nMultiplicative combination, depot proximity, dynamic sparsification with quantiles, and demand scaling improve CVRP heuristics.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}