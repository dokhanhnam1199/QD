```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP).
    This version prioritizes a multiplicative combination of factors, dynamic sparsification,
    and depot proximity to enhance solution quality.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Demand of each customer (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # 1. Distance Factor (Shorter distances are better)
    distance_factor = 1 / (distance_matrix + 1e-9)

    # 2. Depot Proximity Factor (Closer to the depot, better)
    depot_proximity_factor = np.zeros((n, n))
    avg_distance_to_depot = np.mean(distance_matrix[0, 1:])  # Average distance from depot to customers
    for i in range(1, n):  # Exclude depot
        for j in range(1, n):  # Exclude depot
            depot_proximity_factor[i, j] = np.exp(-0.5 * ((distance_matrix[0, i] + distance_matrix[j, 0]) / (2 * avg_distance_to_depot + 1e-9))**2)


    # 3. Demand Factor (Edges connecting nodes with low combined demand are favored)
    demand_factor = np.ones((n, n))
    for i in range(1, n):  # Exclude depot
        for j in range(1, n):  # Exclude depot
            if i != j:
                demand_factor[i, j] = np.exp(-((demands[i] + demands[j]) / (capacity * 0.75 + 1e-9))**2)


    # 4. Angle Factor (Encourage less sharp turns from depot)
    angle_factor = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                vector_i = coordinates[i] - coordinates[0]
                vector_j = coordinates[j] - coordinates[i]

                norm_i = np.linalg.norm(vector_i)
                norm_j = np.linalg.norm(vector_j)

                if norm_i > 0 and norm_j > 0:
                    vector_i = vector_i / norm_i
                    vector_j = vector_j / norm_j
                    dot_product = np.dot(vector_i, vector_j)
                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))
                    angle_factor[i, j] = 1 - (angle / np.pi)
                else:
                    angle_factor[i, j] = 0.5


    # Combine the factors multiplicatively
    heuristic_matrix = distance_factor * depot_proximity_factor * demand_factor * angle_factor

    # Dynamic Sparsification (Zero out less promising edges to reduce the search space)
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic  # Normalize

        # Adjust quantile based on problem size
        quantile_threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], min(0.5 + (n / 1000), 0.95))
        heuristic_matrix[heuristic_matrix < quantile_threshold] = 0  # Remove edges below threshold

    np.fill_diagonal(heuristic_matrix, 0) # No self-loops


    return heuristic_matrix
```
