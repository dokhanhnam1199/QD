{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP)\n    via stochastic solution sampling.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Vector of customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge\n                  in a solution (same shape as distance_matrix).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros((n, n))\n\n    # Calculate savings matrix\n    savings_matrix = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]  # Savings matrix is symmetric\n\n    # Combine distance, savings, demand considerations\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristics_matrix[i, j] = 0  # No self-loops\n            else:\n                distance_factor = 1 / (distance_matrix[i, j] + 1e-9)  # Avoid division by zero\n                savings_factor = savings_matrix[i, j] if i != 0 and j != 0 else 0  # Only use savings for non-depot links\n                demand_factor = 1 / (demands[i] + demands[j] + 1e-9) if i != 0 and j != 0 else 0\n\n                #heuristic_value = distance_factor * (savings_factor + 0.01) * (demand_factor + 0.01)\n                heuristic_value = distance_factor * (1 + 0.1 * savings_factor)\n                heuristics_matrix[i, j] = heuristic_value\n\n    # Sparsify the matrix\n    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 75) #Only keep top 25%\n\n    heuristics_matrix[heuristics_matrix < threshold] = 0\n    #Force connection from depot to all others.\n    for i in range(1,n):\n        heuristics_matrix[0,i] = max(heuristics_matrix[0,i], heuristics_matrix.max()/10)\n        heuristics_matrix[i,0] = max(heuristics_matrix[i,0], heuristics_matrix.max()/10)\n    return heuristics_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    A heuristic function for the Capacitated Vehicle Routing Problem (CVRP) using stochastic solution sampling principles.\n\n    This version incorporates several factors to assess the desirability of including each edge in a solution:\n    - Distance: Shorter distances are generally preferred.\n    - Demand: Edges connecting nodes with high demands might be less desirable if they risk exceeding vehicle capacity early.\n    - Closeness to Depot: Edges connecting nodes far from the depot might be penalized, encouraging vehicles to return to the depot more frequently.\n    - Sparsification:  Sets low-probability edges to zero to focus on promising connections.\n\n    Args:\n        distance_matrix (np.ndarray): A matrix of distances between all nodes (n x n).\n        coordinates (np.ndarray): A matrix of node coordinates (n x 2).\n        demands (np.ndarray): A vector of customer demands (n).\n        capacity (int): The capacity of each vehicle.\n\n    Returns:\n        np.ndarray: A matrix of heuristic values, indicating the desirability of each edge (n x n).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Parameters (tunable)\n    distance_weight = 1.0\n    demand_weight = 0.5\n    depot_proximity_weight = 0.5\n    sparsification_threshold = 0.1  # Adjust this value for more or less sparsification\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristic_matrix[i, j] = 0  # No self-loops\n                continue\n\n            # Distance factor: inversely proportional to distance\n            distance_factor = distance_weight / (distance_matrix[i, j] + 1e-6)  # Adding a small constant to avoid division by zero\n\n            # Demand factor: Penalize edges that connect to nodes with higher demands\n            demand_factor = 1.0 - demand_weight * (demands[i] + demands[j]) / (2 * capacity + 1e-6)  #Scaled relative to the capcity\n\n            # Depot proximity factor: Encourage returns to depot\n            depot_distance_i = distance_matrix[i, 0] #Distance from node i to depot\n            depot_distance_j = distance_matrix[j, 0] #Distance from node j to depot\n\n            depot_proximity_factor = 1.0 - depot_proximity_weight * (depot_distance_i + depot_distance_j) / (2 * np.max(distance_matrix) + 1e-6)\n\n\n            # Combine the factors\n            heuristic_matrix[i, j] = distance_factor * max(0, demand_factor) * max(0, depot_proximity_factor)\n\n    # Sparsification: Zero out low-probability edges\n    max_heuristic = np.max(heuristic_matrix)\n    if max_heuristic > 0:\n        threshold = sparsification_threshold * max_heuristic\n        heuristic_matrix[heuristic_matrix < threshold] = 0.0\n\n    return heuristic_matrix\n\n[Reflection]\nThe better code uses weighted, normalized factors (distance, demand, depot proximity) and sparsification for improved edge selection.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}