```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Parameters (can be tuned)
    alpha = 1.0  # Importance of distance
    beta = 0.5  # Importance of demand consideration
    gamma = 0.2  # Importance of closeness to depot

    for i in range(n):
        for j in range(n):
            if i != j:
                distance = distance_matrix[i, j]

                # Demand factor: Prioritize edges connecting to nodes with demands that are not too large to fill vehicle space but neither too small.
                demand_factor = 1.0
                if i != 0 and j!=0: #if both are not the depot
                    demand_factor = np.exp(-((demands[i] + demands[j]) / capacity - 0.5) ** 2 / 0.08)
                elif i!= 0: #if only one of them is the depot
                    demand_factor = np.exp(-(demands[i] / capacity - 0.25)**2 / 0.08)
                elif j!=0: #if only one of them is the depot
                    demand_factor = np.exp(-(demands[j] / capacity - 0.25)**2 / 0.08)
                

                # Closeness to depot factor: Encourage edges connecting nodes close to the depot.
                depot_distance_factor = np.exp(-((distance_matrix[0, i] + distance_matrix[0, j]) / (np.sum(distance_matrix[0, :]) / n))) if (i != 0 and j!= 0) else 1.0

                # Combine factors
                heuristic_matrix[i, j] = (
                    (1 / (distance + 1e-6)) ** alpha
                    * (demand_factor) ** beta
                    * (depot_distance_factor) ** gamma
                )

    #Sparsify the matrix. Keep only top k edges for each node, the rest are zero
    k = int(np.sqrt(n)) #number of neighbors to keep (tunable)
    for i in range(n):
        row = heuristic_matrix[i, :].copy()
        indices = np.argpartition(row, -k)[-k:] #indices of k largest values in the row
        mask = np.ones(n, dtype=bool)
        mask[indices] = False
        heuristic_matrix[i, mask] = 0.0

    return heuristic_matrix
```
