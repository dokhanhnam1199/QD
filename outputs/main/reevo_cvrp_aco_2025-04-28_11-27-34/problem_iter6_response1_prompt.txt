{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for solving the Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    This version incorporates global angle information, stochasticity, adaptive sparsification, and a Gaussian-like demand factor.\n\n    Args:\n        distance_matrix: A NumPy array representing the distance between nodes.\n        coordinates: A NumPy array of node coordinates (x, y).\n        demands: A NumPy array of node demands.\n        capacity: The capacity of each vehicle.\n\n    Returns:\n        A NumPy array of the same shape as the distance_matrix, representing the heuristic values for each edge.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Calculate angle costs (encourage smoother routes - global info)\n    angle_costs = np.zeros((n, n, n))\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if i != j and i != k and j != k:\n                    v1 = coordinates[j] - coordinates[i]\n                    v2 = coordinates[k] - coordinates[i]\n                    dot_product = np.dot(v1, v2)\n                    magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)\n                    if magnitudes > 0:\n                        angle = np.arccos(np.clip(dot_product / magnitudes, -1.0, 1.0))\n                        angle_costs[i, j, k] = angle\n                    else:\n                        angle_costs[i, j, k] = np.pi  # Penalize if nodes are the same\n\n    # Calculate combined heuristic values\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)\n\n                # Gaussian-like demand factor (centered around half capacity)\n                demand_factor = np.exp(-((demands[i] + demands[j]) / (2 * capacity) - 0.5) ** 2 / 0.08)\n\n                # Angle consideration: Favoring routes that avoid sharp turns.\n                angle_penalty = 0.0\n                for k in range(n):  # Penalize smaller angles by averaging\n                    if i != k and j != k:\n                        angle_penalty += angle_costs[i, j, k]\n                angle_penalty /= (n - 2 + 1e-6)\n                angle_factor = np.exp(-((angle_penalty - np.pi/2) / (np.pi/4))**2) #gaussian centered at pi/2\n\n                # Stochasticity: Add a small random value\n                stochastic_factor = np.random.uniform(0.5, 1.5)\n\n                heuristic_matrix[i, j] = distance_factor * demand_factor * angle_factor * stochastic_factor\n\n    # Adaptive Sparsification (based on average degree)\n    avg_degree = int(np.sqrt(n))  # Desired average degree\n    for i in range(n):\n        row = heuristic_matrix[i, :].copy()\n        indices = np.argpartition(row, -avg_degree)[-avg_degree:]\n        mask = np.ones(n, dtype=bool)\n        mask[indices] = False\n        heuristic_matrix[i, mask] = 0.0\n\n    np.fill_diagonal(heuristic_matrix, 0)\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) using a combination of factors and stochastic sampling.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Demand of each customer (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # 1. Distance factor\n    distance_factor = 1 / (distance_matrix + 1e-6)\n\n    # 2. Angle factor\n    angle_factor = np.ones((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                vector1 = coordinates[i] - coordinates[0]\n                vector2 = coordinates[j] - coordinates[i]\n                norm1 = np.linalg.norm(vector1)\n                norm2 = np.linalg.norm(vector2)\n                if norm1 > 0 and norm2 > 0:\n                    vector1 = vector1 / norm1\n                    vector2 = vector2 / norm2\n                    dot_product = np.dot(vector1, vector2)\n                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))\n                    angle_factor[i, j] = 1 - (angle / np.pi)\n\n    # 3. Demand factor\n    demand_factor = np.ones((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j and i != 0 and j != 0:\n                demand_factor[i, j] = np.exp(- (demands[i] + demands[j]) / (2 * capacity)) # Adjusted exponent\n\n    # Adaptive weight based on problem size\n    problem_size_weight = min(1.0, n / 100.0)  # Smaller problems give more weight to distance\n    distance_weight = 0.6 + 0.4 * problem_size_weight  # Adjust distance weight\n    angle_weight = 0.25 - 0.15 * problem_size_weight  # Adjust angle weight\n    demand_weight = 0.15 - 0.25 * problem_size_weight\n\n    # Controlled Randomness: Additive noise proportional to distance\n    random_matrix = np.random.normal(0, 0.05 * distance_matrix, size=(n, n))\n    random_matrix = np.clip(random_matrix, -0.1, 0.1) #clip to prevent creating large noise.\n\n    # Combine factors multiplicatively\n    heuristic_matrix = (distance_factor ** distance_weight) * \\\n                       (angle_factor ** angle_weight) * \\\n                       (demand_factor ** demand_weight) + random_matrix\n\n    # Sparsification using quantile-based thresholding, adapted to demand\n    demand_threshold = np.quantile(demands[1:], 0.75)  # Customers with higher demand get more sparsification.\n\n    distance_threshold = np.quantile(distance_matrix[distance_matrix > 0], 0.8 + 0.1 * (demand_threshold / np.max(demands[1:]))) # dynamically adjust distance threshold\n    heuristic_matrix[distance_matrix > distance_threshold] = 0\n    np.fill_diagonal(heuristic_matrix, 0)\n\n\n    # Normalize\n    max_heuristic = np.max(heuristic_matrix)\n    if max_heuristic > 0:\n        heuristic_matrix = heuristic_matrix / max_heuristic\n\n    return heuristic_matrix\n\n[Reflection]\nPrioritize distance, depot-relative angles, and demand. Tune weights adaptively and sparsify based on distance quantiles.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}