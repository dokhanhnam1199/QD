{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) using a combination of factors and stochastic solution sampling.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Demand of each customer (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # 1. Distance factor\n    distance_factor = 1 / (distance_matrix + 1e-6)\n\n    # 2. Angle factor\n    angle_factor = np.ones((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                vector1 = coordinates[i] - coordinates[0]\n                vector2 = coordinates[j] - coordinates[i]\n                norm1 = np.linalg.norm(vector1)\n                norm2 = np.linalg.norm(vector2)\n                if norm1 > 0 and norm2 > 0:\n                    vector1 = vector1 / norm1\n                    vector2 = vector2 / norm2\n                    dot_product = np.dot(vector1, vector2)\n                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))\n                    angle_factor[i, j] = 1 - (angle / np.pi)\n\n    # 3. Demand factor\n    demand_factor = np.ones((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j and i != 0 and j != 0:\n                demand_factor[i, j] = np.exp(- (demands[i] + demands[j]) / capacity)\n\n    # Combined heuristic\n    heuristic_matrix = distance_factor * angle_factor * demand_factor\n\n    # Sparsification using quantile-based thresholding\n    flat_heuristic = heuristic_matrix.flatten()\n    quantile_threshold = np.quantile(flat_heuristic[flat_heuristic > 0], 0.50)  # Adaptive: 50th quantile\n    heuristic_matrix[heuristic_matrix < quantile_threshold] = 0\n    np.fill_diagonal(heuristic_matrix, 0)\n\n    # Stochasticity: Add small random noise to avoid getting stuck\n    noise = np.random.normal(0, 0.01, size=(n, n)) # Scale the noise by 0.01\n    heuristic_matrix = heuristic_matrix + noise\n    heuristic_matrix = np.clip(heuristic_matrix, 0, 1)\n\n    # Normalize heuristic matrix\n    max_heuristic = np.max(heuristic_matrix)\n    if max_heuristic > 0:\n        heuristic_matrix = heuristic_matrix / max_heuristic\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    This version combines several factors to determine the promise of an edge, including distance,\n    angle between nodes, demand considerations, and sparsification, with improved handling of depot connections.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Parameters (can be tuned)\n    distance_weight = 0.5  # Weight for distance factor\n    angle_weight = 0.3     # Weight for angle factor\n    demand_weight = 0.2    # Weight for demand factor\n    sparsification_threshold = 5  # Keep only top N promising edges per node (excluding self-loops)\n    depot_connection_boost = 0.1 # Boost edges connected to the depot\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Distance factor: Inverse of distance (shorter distances are more promising)\n                distance_factor = 1 / (distance_matrix[i, j] + 1e-9)  # Add small value to avoid division by zero\n\n                # Angle factor: Penalize sharp turns (encourages smoother routes)\n                # Calculate angle between i, j, and depot (0)\n                if i != 0 and j != 0:\n                    v1 = coordinates[i] - coordinates[0]\n                    v2 = coordinates[j] - coordinates[i]\n                    v1_norm = np.linalg.norm(v1)\n                    v2_norm = np.linalg.norm(v2)\n                    if v1_norm > 0 and v2_norm > 0:\n                        dot_product = np.dot(v1, v2)\n                        angle = np.arccos(np.clip(dot_product / (v1_norm * v2_norm), -1.0, 1.0))\n                        angle_factor = 1 - (angle / np.pi)  # Normalize to [0, 1] (larger is better, straighter line)\n                    else:\n                        angle_factor = 0.5  # Assign a neutral value if distance from origin is small\n                else:\n                    angle_factor = 1.0  # give higher score if the edge is connected with the depot.\n\n                # Demand factor: Encourages connecting nodes with compatible demands\n                demand_factor = 1 - abs(demands[i] + demands[j]) / (2 * capacity)\n\n                # Combine factors with weights\n                heuristic_matrix[i, j] = (\n                    distance_weight * distance_factor +\n                    angle_weight * angle_factor +\n                    demand_weight * demand_factor\n                )\n                #Boost depot connection\n                if i == 0 or j == 0:\n                    heuristic_matrix[i,j] += depot_connection_boost\n\n    # Sparsification: Keep only the most promising edges\n    for i in range(n):\n        row = heuristic_matrix[i, :]\n        # Find indices of top N largest values, excluding self-loop\n        indices = np.argsort(row)[-(sparsification_threshold+1):]\n\n        # Reset values for nodes not in the indices list to zero\n        for j in range(n):\n            if i != j and j not in indices:\n                heuristic_matrix[i, j] = 0\n\n    return heuristic_matrix\n\n[Reflection]\nBetter code: Weighted factors, depot boosting, top-N sparsification improve heuristic quality and exploration.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}