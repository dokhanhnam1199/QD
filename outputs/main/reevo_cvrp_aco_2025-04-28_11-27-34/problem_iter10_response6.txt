```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:

    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) using a combination of factors.
    This version incorporates depot proximity, adaptive sparsification using distance quantiles,
    controlled randomness, and a Gaussian-like demand penalty.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Demand of each customer (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # --- Heuristic Factors ---

    # 1. Distance Factor:
    distance_factor = 1 / (distance_matrix + 1e-6)  # Avoid division by zero
    distance_factor = distance_factor / np.max(distance_factor) if np.max(distance_factor) > 0 else distance_factor


    # 2. Angle Factor:
    angle_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                vector1 = coordinates[i] - coordinates[0]
                vector2 = coordinates[j] - coordinates[i]
                norm1 = np.linalg.norm(vector1)
                norm2 = np.linalg.norm(vector2)
                if norm1 > 0 and norm2 > 0:
                    vector1 = vector1 / norm1
                    vector2 = vector2 / norm2
                    dot_product = np.dot(vector1, vector2)
                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))
                    angle_factor[i, j] = 1 - (angle / np.pi)
    angle_factor = angle_factor / np.max(angle_factor) if np.max(angle_factor) > 0 else angle_factor


    # 3. Demand Factor:
    demand_factor = np.ones((n, n))
    demand_penalty_scale = 2.0  # Adjust for sensitivity
    for i in range(n):
        for j in range(n):
             if i != j and i != 0 and j != 0:
                combined_demand = demands[i] + demands[j]
                demand_factor[i, j] = np.exp(-demand_penalty_scale * (combined_demand / capacity)**2)
    demand_factor = demand_factor / np.max(demand_factor) if np.max(demand_factor) > 0 else demand_factor


    # 4. Depot Proximity Factor:
    depot_proximity_factor = np.ones((n, n))
    depot_distance_scale = 0.5  # Adjust sensitivity
    for i in range(1, n): #start from 1 to not include the depot.
        depot_proximity_factor[0, i] = np.exp(-depot_distance_scale * distance_matrix[0, i] / np.mean(distance_matrix))
        depot_proximity_factor[i, 0] = np.exp(-depot_distance_scale * distance_matrix[i, 0] / np.mean(distance_matrix))

    depot_proximity_factor = depot_proximity_factor / np.max(depot_proximity_factor) if np.max(depot_proximity_factor) > 0 else depot_proximity_factor



    # --- Adaptive Sparsification ---

    # Use distance quantiles for adaptive thresholding
    distances = distance_matrix[distance_matrix > 0].flatten()
    quantile_threshold = np.quantile(distances, 0.75)  # Keep top 75% shortest edges.  Adjust quantile as needed

    # --- Combination and Randomness ---

    # Adaptive weights (initialized, can be tuned during search)
    weight_distance = 0.3
    weight_angle = 0.2
    weight_demand = 0.1
    weight_depot = 0.4
    randomness_scale = 0.005 # Adjust the level of randomness

    heuristic_matrix = (
        weight_distance * distance_factor +
        weight_angle * angle_factor +
        weight_demand * demand_factor +
        weight_depot * depot_proximity_factor
    )

    # Add controlled randomness scaled to edge distance
    randomness = np.random.normal(0, randomness_scale * distance_matrix, size=(n, n))
    heuristic_matrix = heuristic_matrix + randomness

    #Sparsify based on distance quantile
    heuristic_matrix[distance_matrix > quantile_threshold] = 0
    np.fill_diagonal(heuristic_matrix, 0)

    # Normalize
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic

    return heuristic_matrix
```
