```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) using a combination of factors.
    Improved version with adaptive weights, sparsification, depot proximity, and demand consideration.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Demand of each customer (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # --- Factor 1: Distance ---
    distance_factor = 1 / (distance_matrix + 1e-6)  # Avoid division by zero
    distance_factor_normalized = (distance_factor - np.min(distance_factor)) / (np.max(distance_factor) - np.min(distance_factor))

    # --- Factor 2: Angle from Depot ---
    angle_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                vector1 = coordinates[i] - coordinates[0]
                vector2 = coordinates[j] - coordinates[i]

                norm1 = np.linalg.norm(vector1)
                norm2 = np.linalg.norm(vector2)
                if norm1 > 0 and norm2 > 0:
                    vector1 = vector1 / norm1
                    vector2 = vector2 / norm2
                    dot_product = np.dot(vector1, vector2)
                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))
                    angle_factor[i, j] = 1 - (angle / np.pi)
    angle_factor_normalized = (angle_factor - np.min(angle_factor)) / (np.max(angle_factor) - np.min(angle_factor))

    # --- Factor 3: Demand Consideration ---
    demand_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i != j and i != 0 and j != 0:
                demand_factor[i, j] = np.exp(- (demands[i] + demands[j]) / capacity)
    demand_factor_normalized = (demand_factor - np.min(demand_factor)) / (np.max(demand_factor) - np.min(demand_factor))

    # --- Adaptive Weights ---
    weight_distance = 0.4
    weight_angle = 0.3
    weight_demand = 0.3

    # --- Combined Heuristic ---
    heuristic_matrix = (weight_distance * distance_factor_normalized +
                        weight_angle * angle_factor_normalized +
                        weight_demand * demand_factor_normalized)

    # --- Sparsification ---
    mean_distance = np.mean(distance_matrix[distance_matrix > 0])
    distance_threshold = mean_distance * 1.5  # Adjusted threshold

    heuristic_matrix[distance_matrix > distance_threshold] = 0
    np.fill_diagonal(heuristic_matrix, 0)

    # --- Distance-Scaled Randomness ---
    randomness_factor = 0.01
    random_matrix = np.random.rand(n, n) * randomness_factor * distance_factor

    heuristic_matrix = heuristic_matrix + random_matrix

    # --- Normalization ---
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic

    return heuristic_matrix
```
