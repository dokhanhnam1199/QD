```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # Calculate a cost factor based on distance
    distance_factor = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Calculate a demand factor. Edges connecting nodes with large demand should be penalized.
    demand_factor = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            demand_factor[i, j] = 1 / (demands[i] + demands[j] + 1e-9) # Adding a small constant to avoid division by zero

    # Calculate proximity to the depot factor.  Nodes that are far away from the depot may have high values
    depot_proximity_factor = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
      for j in range(n):
        depot_proximity_factor[i, j] = 1/(distance_matrix[0,i] + distance_matrix[0,j] + 1e-9)

    # Combine the factors
    heuristics = distance_factor * demand_factor * depot_proximity_factor

    # Sparsify the matrix: set unpromising elements to zero
    threshold = np.percentile(heuristics[heuristics > 0], 20)  # Keep only top 80% edges based on heuristics values that are greater than zero.

    heuristics[heuristics < threshold] = 0

    #Ensure that the depot is always strongly connected
    for i in range(1, n):
      heuristics[0, i] = max(heuristics[0, i], np.percentile(heuristics, 75)) #Force links to depot
      heuristics[i, 0] = max(heuristics[i, 0], np.percentile(heuristics, 75))

    return heuristics
```
