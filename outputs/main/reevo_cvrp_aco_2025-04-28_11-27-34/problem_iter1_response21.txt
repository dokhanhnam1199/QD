```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for the Capacitated Vehicle Routing Problem (CVRP) using a combination of factors.

    This function calculates a heuristic matrix that indicates the desirability of including each edge
    in the CVRP solution. It considers distance, angle, demand, and sparsification.

    Args:
        distance_matrix (np.ndarray): A matrix of distances between all node pairs (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of each node (shape: n x 2).
        demands (np.ndarray): Demand of each node (shape: n).
        capacity (int): Capacity of each vehicle.

    Returns:
        np.ndarray: A heuristic matrix of the same shape as distance_matrix, where higher values
                      indicate more promising edges.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Parameters (can be tuned)
    alpha = 1.0  # Distance factor
    beta = 0.5   # Angle factor
    gamma = 0.8  # Demand factor
    sparsification_threshold = 3 #Only allow edges among the top K closest edges from each node.

    for i in range(n):
        for j in range(n):
            if i != j:
                # Distance factor (shorter distance is better)
                distance_factor = 1 / distance_matrix[i, j]

                # Angle factor (penalize sharp turns - avoid zig-zag paths)
                # Calculate angle between vectors (i -> j) and (j -> depot)
                depot = 0  # Index of the depot
                vector1 = coordinates[j] - coordinates[i]
                vector2 = coordinates[depot] - coordinates[j]

                # Handle the case where any of the point is the depot itself.
                if np.all(vector1 == 0) or np.all(vector2 == 0):
                   angle_factor = 1 #No penality if either of the adjacent edge goes to depot.
                else:
                    dot_product = np.dot(vector1, vector2)
                    magnitudes = np.linalg.norm(vector1) * np.linalg.norm(vector2)
                    angle = np.arccos(np.clip(dot_product / magnitudes, -1.0, 1.0))  # Clip for numerical stability
                    angle_factor = 1 - (angle / np.pi)  # Normalize to [0, 1], penalize large angles

                # Demand factor (prioritize connecting nodes with smaller total demand)
                demand_factor = 1 / (demands[i] + demands[j] + 1e-6)  # Add a small constant to avoid division by zero

                # Combine the factors
                heuristic_matrix[i, j] = (alpha * distance_factor +
                                           beta * angle_factor +
                                           gamma * demand_factor)
    #Sparsification
    for i in range(n):
        # Get indices of nodes sorted by distance from node i
        closest_nodes = np.argsort(distance_matrix[i, :])

        # Set heuristic value to zero for all but the k nearest neighbors
        for j in range(n):
            if j not in closest_nodes[:sparsification_threshold+1]:
                heuristic_matrix[i, j] = 0

    return heuristic_matrix
```
