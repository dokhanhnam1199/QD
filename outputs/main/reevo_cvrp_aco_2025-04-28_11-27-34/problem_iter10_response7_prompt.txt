{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) using a combination of factors.\n    This version incorporates adaptive weighting, sparsification using distance quantiles, depot proximity,\n    remaining capacity considerations, angle calculations, controlled randomness, and a Gaussian-like demand penalty.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Demand of each customer (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # --- Heuristic Factors ---\n\n    # 1. Distance Factor:\n    distance_factor = 1 / (distance_matrix + 1e-6)  # Avoid division by zero\n\n    # 2. Angle Factor:\n    angle_factor = np.ones((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                vector1 = coordinates[i] - coordinates[0]\n                vector2 = coordinates[j] - coordinates[i]\n                norm1 = np.linalg.norm(vector1)\n                norm2 = np.linalg.norm(vector2)\n                if norm1 > 0 and norm2 > 0:\n                    vector1 = vector1 / norm1\n                    vector2 = vector2 / norm2\n                    dot_product = np.dot(vector1, vector2)\n                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))\n                    angle_factor[i, j] = 1 - (angle / np.pi)\n\n    # 3. Demand Factor:\n    demand_factor = np.ones((n, n))\n    demand_penalty_scale = 2.0  # Adjust for sensitivity. Increased sensitivity.\n    for i in range(n):\n        for j in range(n):\n             if i != j and i != 0 and j != 0:\n                combined_demand = demands[i] + demands[j]\n                demand_factor[i, j] = np.exp(-demand_penalty_scale * (combined_demand / capacity)**2)\n\n    # 4. Depot Proximity Factor:\n    depot_proximity_factor = np.ones((n, n))\n    depot_distance_scale = 0.5  # Adjust sensitivity. Increased sensitivity.\n    for i in range(1, n): #start from 1 to not include the depot.\n        depot_proximity_factor[0, i] = np.exp(-depot_distance_scale * distance_matrix[0, i] / np.mean(distance_matrix))\n        depot_proximity_factor[i, 0] = np.exp(-depot_distance_scale * distance_matrix[i, 0] / np.mean(distance_matrix))\n\n    # --- Adaptive Sparsification ---\n\n    # Use distance quantiles for adaptive thresholding\n    distances = distance_matrix[distance_matrix > 0].flatten()\n    quantile_threshold = np.quantile(distances, 0.75)  # Keep top 75% shortest edges.  Adjust quantile as needed\n\n    # --- Combination and Randomness ---\n\n    # Adaptive weights (initialized, can be tuned during search)\n    weight_distance = 0.4\n    weight_angle = 0.3\n    weight_demand = 0.2\n    weight_depot = 0.1\n    randomness_scale = 0.005 # Adjust the level of randomness. Decreased randomness.\n\n    heuristic_matrix = (\n        weight_distance * distance_factor +\n        weight_angle * angle_factor +\n        weight_demand * demand_factor +\n        weight_depot * depot_proximity_factor\n    )\n\n    # Add controlled randomness scaled to edge distance\n    randomness = np.random.normal(0, randomness_scale * distance_matrix, size=(n, n))\n    heuristic_matrix = heuristic_matrix + randomness\n\n    #Sparsify based on distance quantile\n    heuristic_matrix[distance_matrix > quantile_threshold] = 0\n    np.fill_diagonal(heuristic_matrix, 0)\n\n    # Normalize\n    max_heuristic = np.max(heuristic_matrix)\n    if max_heuristic > 0:\n        heuristic_matrix = heuristic_matrix / max_heuristic\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n\n    \"\"\"\n    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) using a combination of factors.\n    Version 2: Focuses on refined multiplicative combinations, adaptive sparsification using a dynamic threshold,\n    enhanced depot proximity consideration, angle calculations, demand-capacity scaling, controlled randomness,\n    and a more precise Gaussian-like demand factor. This version also includes explicit handling of edge cases\n    and normalization to improve stability and performance.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Demand of each customer (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # 1. Distance Factor (Shorter distances are better)\n    distance_factor = 1 / (distance_matrix + 1e-9)\n\n    # 2. Depot Proximity Factor (Closer to depot is better, especially for return trips)\n    depot_proximity_factor = np.zeros((n, n))\n    avg_distance_to_depot = np.mean(distance_matrix[0, 1:])\n    for i in range(1, n):  # Skip depot\n        for j in range(1, n):\n            #Scaled by the average distance ensures it's not overly sensitive\n            depot_proximity_factor[i, j] = np.exp(-0.5 * ((distance_matrix[0, i] + distance_matrix[j, 0]) / (2 * avg_distance_to_depot + 1e-9))**2)\n\n    # 3. Angle Factor (Avoid sharp turns)\n    angle_factor = np.ones((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                vector1 = coordinates[i] - coordinates[0]\n                vector2 = coordinates[j] - coordinates[i]\n\n                norm1 = np.linalg.norm(vector1)\n                norm2 = np.linalg.norm(vector2)\n\n                if norm1 > 0 and norm2 > 0:\n                    vector1 = vector1 / norm1\n                    vector2 = vector2 / norm2\n                    dot_product = np.dot(vector1, vector2)\n                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0)) # Ensure the value is within the valid range\n                    angle_factor[i, j] = 1 - (angle / np.pi)\n                else:\n                    angle_factor[i, j] = 0.5 #Handle edge cases near depot\n\n    # 4. Demand Factor (Penalize edges that would overload a vehicle)\n    demand_factor = np.ones((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j and i != 0 and j != 0:\n                # Gaussian-like penalty around 75% capacity, scaled for sensitivity\n                demand_factor[i, j] = np.exp(-((demands[i] + demands[j]) / (capacity * 0.75 + 1e-9))**2)\n\n    # 5. Randomness (introduce some stochasticity to diversify the search)\n    randomness_factor = np.random.uniform(0.75, 1.25, size=(n, n))\n\n    # Combine factors multiplicatively\n    heuristic_matrix = (distance_factor**0.6) * (depot_proximity_factor**0.2) * (angle_factor**0.1) * (demand_factor**0.1) * randomness_factor\n\n    # Adaptive Sparsification (Remove unpromising edges based on a dynamic quantile)\n    max_heuristic = np.max(heuristic_matrix)\n    if max_heuristic > 0:\n        heuristic_matrix = heuristic_matrix / max_heuristic  # Normalize to [0, 1]\n        # Dynamic quantile based on problem size - larger problem needs a larger cut.\n        quantile_threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], min(0.25 + (n / 1000), 0.75)) #Keep top (75% - n/1000)% for n < 500, otherwise cut more\n        heuristic_matrix[heuristic_matrix < quantile_threshold] = 0\n\n    np.fill_diagonal(heuristic_matrix, 0)  # No self-loops\n\n    return heuristic_matrix\n\n[Reflection]\nMultiplicative combination, dynamic sparsification, and depot proximity scaling improved heuristic performance.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}