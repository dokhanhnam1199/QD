```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristic function for the Capacitated Vehicle Routing Problem (CVRP) based on stochastic solution sampling.

    This version incorporates a combination of factors:
    - Distance: Shorter distances are preferred.
    - Demand: Edges connecting to nodes with high demands are penalized (to encourage efficient capacity utilization).
    - Angle: Edges that form sharp turns are penalized.
    - Capacity Ratio: Prioritizes connection to nodes such that the total capacity in current tour is less than vehicle capacity.
    - Sparsity: Sets elements of the matrix to zero if deemed unpromising.

    Args:
        distance_matrix: A NumPy array representing the distance between nodes.
        coordinates: A NumPy array of node coordinates (x, y).
        demands: A NumPy array of node demands.
        capacity: The capacity of each vehicle.

    Returns:
        A NumPy array of the same shape as the distance_matrix, representing the heuristic values for each edge.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Parameters (can be tuned)
    distance_weight = 1.0
    demand_weight = 0.5
    angle_weight = 0.2
    capacity_weight = 0.3
    sparsity_threshold = 0.1

    for i in range(n):
        for j in range(n):
            if i == j:
                heuristic_matrix[i, j] = 0  # No self-loops
                continue

            # Distance factor (prefer shorter distances)
            distance_factor = distance_weight / (distance_matrix[i, j] + 1e-6) # avoid division by zero

            # Demand factor (penalize connections to very high demand nodes). Note the depot demand is 0, so not penalized.
            demand_factor = 1.0 - demand_weight * (demands[i] + demands[j]) / (2.0 * capacity + 1e-6)
            demand_factor = max(0.0, demand_factor) # Ensure factor is non-negative

            # Angle factor (penalize sharp turns)
            angle_factor = 1.0
            if i != 0 and j != 0:
                # Calculate angles between lines connecting node i and j to the depot (node 0).
                vector_i = coordinates[i] - coordinates[0]
                vector_j = coordinates[j] - coordinates[0]
                
                # Normalize vectors to avoid issues with magnitude
                vector_i = vector_i / (np.linalg.norm(vector_i) + 1e-6)
                vector_j = vector_j / (np.linalg.norm(vector_j) + 1e-6)
                
                dot_product = np.dot(vector_i, vector_j)
                angle = np.arccos(np.clip(dot_product, -1.0, 1.0))  # Clip to avoid domain errors
                angle_factor = 1.0 - angle_weight * (angle / np.pi) # Normalize by pi
                angle_factor = max(0.0, angle_factor)

            # Simple capacity ratio factor (encourage routes that don't immediately exceed capacity)
            capacity_ratio = (demands[i] + demands[j]) / (capacity + 1e-6)
            capacity_factor = 1.0 - capacity_weight * capacity_ratio
            capacity_factor = max(0.0, capacity_factor) # Ensure it does not go negative

            heuristic_matrix[i, j] = distance_factor * demand_factor * angle_factor * capacity_factor

    # Sparsify the matrix (set unpromising edges to zero)
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], sparsity_threshold)
    heuristic_matrix[heuristic_matrix < threshold] = 0.0

    return heuristic_matrix
```
