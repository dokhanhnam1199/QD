```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) using a combination of factors and stochastic sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Demand of each customer (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Heuristic factors:
    # 1. Distance: Shorter distances are more promising.
    distance_factor = 1 / (distance_matrix + 1e-6)  # Avoid division by zero

    # 2. Angle: Edges that create sharp turns are less promising.
    angle_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                # Calculate angles between edges (depot -> i) and (i -> j)
                vector1 = coordinates[i] - coordinates[0]
                vector2 = coordinates[j] - coordinates[i]

                # Normalize vectors
                norm1 = np.linalg.norm(vector1)
                norm2 = np.linalg.norm(vector2)
                if norm1 > 0 and norm2 > 0:  # avoid division by 0.
                    vector1 = vector1 / norm1
                    vector2 = vector2 / norm2
                    dot_product = np.dot(vector1, vector2)
                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))  # Clip to avoid errors
                    angle_factor[i, j] = 1 - (angle / np.pi) # closer to 1 when it is straight

    # 3. Demand: Edges connecting nodes with higher demands might be less promising if vehicle is almost full.
    demand_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i != j and i != 0 and j !=0: #avoid edge from depot to depot.
                demand_factor[i, j] = np.exp(- (demands[i] + demands[j]) / capacity)  # Exponential decay based on demand relative to capacity

    # Combine factors multiplicatively
    heuristic_matrix = distance_factor * angle_factor * demand_factor

    # Sparsify: Remove edges that are very long or unlikely to be in the solution.
    # Adaptive distance threshold based on the mean distance.
    mean_distance = np.mean(distance_matrix[distance_matrix > 0])
    distance_threshold = mean_distance * 2  # Heuristic: edges much longer than average are less promising

    heuristic_matrix[distance_matrix > distance_threshold] = 0
    np.fill_diagonal(heuristic_matrix, 0) # Ensure depot->depot edge is excluded.

    # Quantile-based sparsification
    quantile_threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.25)  # Remove the bottom 25%
    heuristic_matrix[heuristic_matrix < quantile_threshold] = 0
    
    # Stochastic Solution Sampling: Add some noise to edge probabilities.
    noise = np.random.normal(0, 0.05, size=(n, n))
    heuristic_matrix = heuristic_matrix + noise
    heuristic_matrix = np.clip(heuristic_matrix, 0, 1) # Ensure values stay within [0,1]

    # Normalize heuristic matrix
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic

    return heuristic_matrix
```
