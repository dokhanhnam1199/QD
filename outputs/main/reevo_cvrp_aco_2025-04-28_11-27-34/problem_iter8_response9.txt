```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:

    """
    Heuristic function for CVRP using a stochastic solution sampling approach with adaptive weights,
    distance-scaled randomness, refined sparsification, and depot handling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Demand of each customer (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # --- Heuristic Factors ---
    # 1. Distance Factor
    distance_factor = 1 / (distance_matrix + 1e-6)

    # 2. Angle Factor
    angle_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                v1 = coordinates[i] - coordinates[0]
                v2 = coordinates[j] - coordinates[i]
                norm1 = np.linalg.norm(v1)
                norm2 = np.linalg.norm(v2)

                if norm1 > 0 and norm2 > 0:
                    v1_norm = v1 / norm1
                    v2_norm = v2 / norm2
                    dot_product = np.dot(v1_norm, v2_norm)
                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))
                    angle_factor[i, j] = 1 - (angle / np.pi)

    # 3. Demand Factor (Gaussian-like penalty)
    demand_factor = np.ones((n, n))
    demand_penalty_scale = 0.5 #scaling factor, tuned heuristically.
    for i in range(n):
        for j in range(n):
            if i != j and i != 0 and j != 0:
                combined_demand = demands[i] + demands[j]
                demand_factor[i, j] = np.exp(-0.5 * ((combined_demand / capacity)**2) / demand_penalty_scale ) # gaussian penalty

    # 4. Depot Proximity
    depot_proximity_factor = np.ones((n,n))
    for i in range(n):
        for j in range(n):
            depot_proximity_factor[i, j] = (1 / (distance_matrix[0, i] + distance_matrix[0, j] + 1e-6))**0.5 #shorter distance to depot, better.
            #Squareroot to reduce the impact.

    # --- Adaptive Sparsification ---
    distances = distance_matrix[distance_matrix > 0].flatten()
    quantile_75 = np.quantile(distances, 0.75)  # Example quantile
    sparsification_threshold = quantile_75 * 1.2 #adaptive threshold (reduced from 1.5)

    # --- Controlled Randomness ---
    randomness_strength = 0.01 #scaling parameter, can be tuned.
    random_factor = np.random.rand(n, n) * distance_matrix * randomness_strength  #Scaled with edge distance


    # --- Adaptive Weights ---
    # Initial Weights (can be further tuned)
    w_distance = 0.4
    w_angle = 0.2
    w_demand = 0.2
    w_depot = 0.2

    # Adjust weights based on problem characteristics (example: more weight to distance if demands are relatively uniform)
    demand_std = np.std(demands[1:]) #exclude depot
    if demand_std < np.mean(demands[1:]) * 0.2:  # relatively uniform demands
        w_distance += 0.1
        w_demand -= 0.1 #reduce demand

    # Normalize weights (ensure sum to 1)
    total_weight = w_distance + w_angle + w_demand + w_depot
    w_distance /= total_weight
    w_angle /= total_weight
    w_demand /= total_weight
    w_depot /= total_weight

    # --- Combination of Factors (Multiplicative) ---
    heuristic_matrix = (distance_factor**w_distance) * \
                       (angle_factor**w_angle) * \
                       (demand_factor**w_demand) * \
                       (depot_proximity_factor**w_depot) + random_factor

    # --- Sparsify and Clean ---
    heuristic_matrix[distance_matrix > sparsification_threshold] = 0
    np.fill_diagonal(heuristic_matrix, 0)
    heuristic_matrix[0,0] = 0 # Ensure depot->depot is zero

    # --- Normalize ---
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic

    return heuristic_matrix
```
