```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) using a multiplicative combination of factors,
    adaptive sparsification, and depot proximity considerations.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Demand of each customer (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # 1. Distance Factor: Inverse of distance, scaled by depot proximity.
    distance_factor = 1 / (distance_matrix + 1e-6)  # Avoid division by zero
    depot_proximity_factor = np.ones((n, n))
    for i in range(1, n):  # Exclude depot
        depot_proximity_factor[0, i] = np.exp(-distance_matrix[0, i] / np.mean(distance_matrix[0, 1:])) # Scale based on average depot distance
        depot_proximity_factor[i, 0] = np.exp(-distance_matrix[i, 0] / np.mean(distance_matrix[0, 1:]))

    distance_factor = distance_factor * depot_proximity_factor # Scale the distance factor.

    # 2. Angle Factor: Penalize sharp turns.
    angle_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                vector1 = coordinates[i] - coordinates[0]
                vector2 = coordinates[j] - coordinates[i]

                norm1 = np.linalg.norm(vector1)
                norm2 = np.linalg.norm(vector2)
                if norm1 > 0 and norm2 > 0:
                    vector1 = vector1 / norm1
                    vector2 = vector2 / norm2
                    dot_product = np.dot(vector1, vector2)
                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))
                    angle_factor[i, j] = 1 - (angle / np.pi)

    # 3. Demand-Capacity Scaling Factor: Penalize edges that would likely overload a vehicle.
    demand_factor = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                  demand_factor[i, j] = np.exp(-((demands[i] + demands[j]) / (capacity * 0.75))**2) # More aggresive penalty.

    # 4. Randomness Factor: Add a small amount of controlled randomness to avoid premature convergence.
    randomness_factor = np.random.normal(1, 0.05, size=(n, n))  # Gaussian noise with mean 1 and std 0.05

    # Combine all factors multiplicatively.
    heuristic_matrix = distance_factor * angle_factor * demand_factor * randomness_factor

    # Adaptive Sparsification: Remove edges with heuristic values below a certain quantile.
    quantile_threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.25)  # Remove bottom 25%
    heuristic_matrix[heuristic_matrix < quantile_threshold] = 0
    np.fill_diagonal(heuristic_matrix, 0)

    # Normalize heuristic matrix
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic

    return heuristic_matrix
```
