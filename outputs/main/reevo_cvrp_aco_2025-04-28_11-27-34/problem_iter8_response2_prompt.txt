{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for CVRP using a stochastic solution sampling approach with adaptive weights and sparsification.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Demand of each customer (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # --- Heuristic Factors ---\n    # 1. Distance Factor\n    distance_factor = 1 / (distance_matrix + 1e-6)\n\n    # 2. Angle Factor\n    angle_factor = np.ones((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                v1 = coordinates[i] - coordinates[0]\n                v2 = coordinates[j] - coordinates[i]\n                norm1 = np.linalg.norm(v1)\n                norm2 = np.linalg.norm(v2)\n\n                if norm1 > 0 and norm2 > 0:\n                    v1_norm = v1 / norm1\n                    v2_norm = v2 / norm2\n                    dot_product = np.dot(v1_norm, v2_norm)\n                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))\n                    angle_factor[i, j] = 1 - (angle / np.pi)\n\n    # 3. Demand Factor (Gaussian-like penalty)\n    demand_factor = np.ones((n, n))\n    demand_penalty_scale = 0.5 #scaling factor, tuned heuristically.\n    for i in range(n):\n        for j in range(n):\n            if i != j and i != 0 and j != 0:\n                combined_demand = demands[i] + demands[j]\n                demand_factor[i, j] = np.exp(-0.5 * ((combined_demand / capacity)**2) / demand_penalty_scale ) # gaussian penalty\n\n    # 4. Depot Proximity\n    depot_proximity_factor = np.ones((n,n))\n    for i in range(n):\n        for j in range(n):\n            depot_proximity_factor[i, j] = (1 / (distance_matrix[0, i] + distance_matrix[0, j] + 1e-6))**0.5 #shorter distance to depot, better.\n            #Squareroot to reduce the impact.\n\n    # --- Adaptive Sparsification ---\n    distances = distance_matrix[distance_matrix > 0].flatten()\n    quantile_75 = np.quantile(distances, 0.75)  # Example quantile\n    sparsification_threshold = quantile_75 * 1.5 #adaptive threshold\n\n    # --- Controlled Randomness ---\n    randomness_strength = 0.01 #scaling parameter, can be tuned.\n    random_factor = np.random.rand(n, n) * distance_matrix * randomness_strength  #Scaled with edge distance\n\n\n    # --- Combination of Factors (Multiplicative) ---\n    #Initial Weights\n    w_distance = 0.4\n    w_angle = 0.2\n    w_demand = 0.2\n    w_depot = 0.2\n\n    heuristic_matrix = (distance_factor**w_distance) * \\\n                       (angle_factor**w_angle) * \\\n                       (demand_factor**w_demand) * \\\n                       (depot_proximity_factor**w_depot) + random_factor\n\n    # --- Sparsify and Clean ---\n    heuristic_matrix[distance_matrix > sparsification_threshold] = 0\n    np.fill_diagonal(heuristic_matrix, 0)\n    heuristic_matrix[0,0] = 0 # Ensure depot->depot is zero\n\n    # --- Normalize ---\n    max_heuristic = np.max(heuristic_matrix)\n    if max_heuristic > 0:\n        heuristic_matrix = heuristic_matrix / max_heuristic\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n\n    \"\"\"\n    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    This version refines the heuristics_v1 function by incorporating learnable parameters and refining the edge scoring mechanism.\n    Specifically, it addresses the edge scoring by considering the remaining capacity of a potential route.\n    It also incorporates a route start bias.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Learnable Parameters (initialized with reasonable defaults)\n    distance_weight = 0.4\n    angle_weight = 0.3\n    demand_weight = 0.3\n    depot_connection_boost = 0.2\n    sparsification_threshold = 5\n    remaining_capacity_exponent = 2  # Increase the impact of remaining capacity\n    min_demand_ratio = 0.05  # Minimum demand ratio to consider an edge viable\n    route_start_bias = 0.1\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Distance factor: Inverse of distance\n                distance_factor = 1 / (distance_matrix[i, j] + 1e-9)\n\n                # Angle factor: Penalize sharp turns using the depot as reference\n                if i != 0 and j != 0:\n                    v1 = coordinates[i] - coordinates[0]\n                    v2 = coordinates[j] - coordinates[i]\n                    v1_norm = np.linalg.norm(v1)\n                    v2_norm = np.linalg.norm(v2)\n                    if v1_norm > 0 and v2_norm > 0:\n                        dot_product = np.dot(v1, v2)\n                        angle = np.arccos(np.clip(dot_product / (v1_norm * v2_norm), -1.0, 1.0))\n                        angle_factor = 1 - (angle / np.pi)\n                    else:\n                        angle_factor = 0.5\n                else:\n                    angle_factor = 1.0\n\n                # Demand factor: Consider remaining capacity instead of just combined demand\n                # Estimate remaining capacity after visiting node i\n                remaining_capacity_i = capacity - demands[i] if i != 0 else capacity\n\n                # Route start bias: Encourage starting a new route\n                if i == 0 and j != 0:\n                    demand_factor = route_start_bias * (1 - demands[j] / capacity)\n\n                # Encourage edges where the demand of j fits into the remaining capacity\n                elif demands[j] <= remaining_capacity_i and demands[j] / capacity >= min_demand_ratio:\n                    demand_factor = (remaining_capacity_i - demands[j]) / capacity\n                    demand_factor = demand_factor**remaining_capacity_exponent  # Emphasize remaining capacity\n                else:\n                    demand_factor = 0.0  # Very low score if demand doesn't fit\n\n                # Combine factors\n                heuristic_matrix[i, j] = (\n                    distance_weight * distance_factor +\n                    angle_weight * angle_factor +\n                    demand_weight * demand_factor\n                )\n\n                # Boost depot connection\n                if i == 0 or j == 0:\n                    heuristic_matrix[i, j] += depot_connection_boost\n\n    # Sparsification: Keep only top promising edges\n    for i in range(n):\n        row = heuristic_matrix[i, :]\n        indices = np.argsort(row)[-(sparsification_threshold + 1):]\n        for j in range(n):\n            if i != j and j not in indices:\n                heuristic_matrix[i, j] = 0\n\n    return heuristic_matrix\n\n[Reflection]\nConsider route context (remaining capacity), adaptive parameter tuning, and targeted edge boosting.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}