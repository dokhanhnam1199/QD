```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:

    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) using a combination of factors.
    Version 3: Further improves upon v2 with enhanced depot proximity, dynamic demand scaling,
    refined randomness, and adaptive sparsification based on both distance and heuristic value.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Demand of each customer (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # 1. Distance Factor (Shorter distances are better)
    distance_factor = 1 / (distance_matrix + 1e-6)

    # 2. Depot Proximity Factor (Closer to depot is often better)
    depot_proximity_factor = np.zeros((n, n))
    avg_distance_to_depot = np.mean(distance_matrix[0, 1:]) # Average distance from depot to other customers
    for i in range(1, n):  # Skip depot
        for j in range(1, n):
            # Prioritize returning to the depot sooner if far away
            depot_proximity_factor[i, j] = np.exp(-0.5 * ((distance_matrix[0, i] + distance_matrix[j, 0]) / (2 * avg_distance_to_depot))**2)

    # 3. Angle Factor (Avoid sharp turns)
    angle_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                vector1 = coordinates[i] - coordinates[0]
                vector2 = coordinates[j] - coordinates[i]

                norm1 = np.linalg.norm(vector1)
                norm2 = np.linalg.norm(vector2)

                if norm1 > 0 and norm2 > 0:
                    vector1 = vector1 / norm1
                    vector2 = vector2 / norm2
                    dot_product = np.dot(vector1, vector2)
                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))
                    angle_factor[i, j] = 1 - (angle / np.pi)

    # 4. Demand Factor (Penalize edges that would overload a vehicle)
    demand_factor = np.ones((n, n))
    avg_demand = np.mean(demands[1:])  # Average customer demand (excluding depot)

    for i in range(n):
        for j in range(n):
            if i != j and i != 0 and j != 0:
                # Scale capacity penalty based on avg_demand. Less restrictive if demands are generally low.
                scaled_capacity = capacity * (0.6 + 0.4 * (avg_demand / np.max(demands[1:]))) # Adjust target capacity
                demand_factor[i, j] = np.exp(-((demands[i] + demands[j]) / scaled_capacity)**2)


    # 5. Randomness (introduce some stochasticity to diversify the search)
    randomness_factor = np.random.normal(1, 0.1, size=(n, n)) # Gaussian noise around 1
    randomness_factor = np.clip(randomness_factor, 0.5, 1.5) # Limit random values

    # Combine factors multiplicatively
    heuristic_matrix = distance_factor * depot_proximity_factor * angle_factor * demand_factor * randomness_factor

    # Adaptive Sparsification (Remove unpromising edges based on quantile)
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic  # Normalize to [0, 1]

        #Distance based sparsification
        distance_threshold = np.quantile(distance_matrix[distance_matrix > 0], 0.9) # Remove long edges
        heuristic_matrix[distance_matrix > distance_threshold] = 0

        #Heuristic based sparsification
        quantile_threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.3) # Keep top 70% of remaining edges
        heuristic_matrix[heuristic_matrix < quantile_threshold] = 0



    np.fill_diagonal(heuristic_matrix, 0)  # No self-loops

    return heuristic_matrix
```
