{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) using a combination of factors with adaptive weights and sparsification.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Demand of each customer (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # 1. Distance Factor (normalized)\n    distance_factor = 1 / (distance_matrix + 1e-6)\n    distance_factor = distance_factor / np.max(distance_factor)\n\n    # 2. Angle Factor (normalized)\n    angle_factor = np.ones((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                vector1 = coordinates[i] - coordinates[0]\n                vector2 = coordinates[j] - coordinates[i]\n                norm1 = np.linalg.norm(vector1)\n                norm2 = np.linalg.norm(vector2)\n                if norm1 > 0 and norm2 > 0:\n                    vector1 = vector1 / norm1\n                    vector2 = vector2 / norm2\n                    dot_product = np.dot(vector1, vector2)\n                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))\n                    angle_factor[i, j] = 1 - (angle / np.pi)\n    angle_factor = angle_factor / np.max(angle_factor)\n\n    # 3. Demand Factor (normalized)\n    demand_factor = np.ones((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j and i != 0 and j != 0:\n                demand_factor[i, j] = np.exp(- (demands[i] + demands[j]) / capacity)\n    demand_factor = demand_factor / np.max(demand_factor)\n\n    # Adaptive Weights (Example: Based on problem size)\n    alpha = 0.5 # Distance weight\n    beta = 0.3  # Angle weight\n    gamma = 0.2 # Demand weight\n\n    # Combined Heuristic Matrix\n    heuristic_matrix = (alpha * distance_factor + beta * angle_factor + gamma * demand_factor)\n\n    # Sparsification (Adaptive threshold)\n    mean_distance = np.mean(distance_matrix[distance_matrix > 0])\n    distance_threshold = mean_distance * (1 + 0.5 * (n / 100)) #Adjusted threshold based on n\n    heuristic_matrix[distance_matrix > distance_threshold] = 0\n    np.fill_diagonal(heuristic_matrix, 0)\n\n    # Randomness (Scaled by distance to add some stochasticity)\n    randomness_factor = np.random.rand(n, n) * 0.1 / (distance_matrix + 1e-6) #Inverse relationship to distance\n    heuristic_matrix = heuristic_matrix + randomness_factor\n\n    # Normalize the final heuristic matrix\n    max_heuristic = np.max(heuristic_matrix)\n    if max_heuristic > 0:\n        heuristic_matrix = heuristic_matrix / max_heuristic\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) using a combination of factors.\n    Improved version with normalized weights, adaptive sparsification, depot proximity, and distance-scaled randomness.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).\n        demands (np.ndarray): Demand of each customer (n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Heuristic factors:\n    # 1. Distance: Shorter distances are more promising.\n    distance_factor = 1 / (distance_matrix + 1e-6)  # Avoid division by zero\n    distance_factor = distance_factor / np.max(distance_factor)  # Normalize\n\n    # 2. Angle: Edges that create sharp turns are less promising.\n    angle_factor = np.ones((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Calculate angles between edges (depot -> i) and (i -> j)\n                vector1 = coordinates[i] - coordinates[0]\n                vector2 = coordinates[j] - coordinates[i]\n\n                # Normalize vectors\n                norm1 = np.linalg.norm(vector1)\n                norm2 = np.linalg.norm(vector2)\n                if norm1 > 0 and norm2 > 0:  # avoid division by 0.\n                    vector1 = vector1 / norm1\n                    vector2 = vector2 / norm2\n                    dot_product = np.dot(vector1, vector2)\n                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))  # Clip to avoid errors\n                    angle_factor[i, j] = 1 - (angle / np.pi)  # closer to 1 when it is straight\n    angle_factor = angle_factor / np.max(angle_factor) #normalize\n\n    # 3. Demand: Edges connecting nodes with higher demands might be less promising if vehicle is almost full.\n    demand_factor = np.ones((n, n))\n    for i in range(n):\n        for j in range(n):\n            if i != j and i != 0 and j != 0:  # avoid edge from depot to depot.\n                demand_factor[i, j] = np.exp(- (demands[i] + demands[j]) / capacity)  # Exponential decay based on demand relative to capacity\n    demand_factor = demand_factor / np.max(demand_factor)\n\n    # Adaptive weights for factors\n    w_distance = 0.4\n    w_angle = 0.3\n    w_demand = 0.3\n\n    # Combine factors multiplicatively with weights\n    heuristic_matrix = (distance_factor ** w_distance) * (angle_factor ** w_angle) * (demand_factor ** w_demand)\n\n    # Sparsify: Remove edges that are very long or unlikely to be in the solution.\n    # Adaptive distance threshold based on the mean distance.\n    mean_distance = np.mean(distance_matrix[distance_matrix > 0])\n    distance_threshold = mean_distance * (1 + 1/np.log(n))  # Scale threshold based on problem size\n    heuristic_matrix[distance_matrix > distance_threshold] = 0\n\n    # Distance-scaled randomness (add small random value proportional to inverse distance)\n    randomness_factor = 0.01  # Adjust scaling factor\n    random_matrix = np.random.rand(n, n) / (distance_matrix + 1e-6) # Random matrix scaled by inverse distance\n    heuristic_matrix = heuristic_matrix + randomness_factor * random_matrix\n\n    np.fill_diagonal(heuristic_matrix, 0) # Ensure depot->depot edge is excluded.\n\n    # Normalize heuristic matrix\n    max_heuristic = np.max(heuristic_matrix)\n    if max_heuristic > 0:\n        heuristic_matrix = heuristic_matrix / max_heuristic\n\n    return heuristic_matrix\n\n[Reflection]\nMultiplicative combination, adaptive sparsification, and distance-scaled randomness improved heuristic quality.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}