```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) using a combination of factors.
    This version prioritizes normalized multiplicative factor combinations and adaptive sparsification.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Demand of each customer (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # 1. Distance Factor (normalized):
    distance_factor = 1 / (distance_matrix + 1e-6)
    distance_factor = distance_factor / np.max(distance_factor) # Normalize

    # 2. Depot Proximity Factor (normalized): Favor connections near depot
    depot_proximity = np.zeros((n, n))
    for i in range(1, n):  # Exclude depot itself
        depot_proximity[0, i] = 1 / (distance_matrix[0, i] + 1e-6)  # From depot to node
        depot_proximity[i, 0] = 1 / (distance_matrix[i, 0] + 1e-6)  # From node to depot
    depot_proximity = depot_proximity / np.max(depot_proximity) # Normalize

    # 3. Demand Factor (normalized): Penalize edges with high demand relative to capacity
    demand_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i != j and i != 0 and j != 0:
                demand_factor[i, j] = np.exp(- (demands[i] + demands[j]) / (2 * capacity))
    demand_factor = demand_factor / np.max(demand_factor)  # Normalize

    # 4. Angle Factor (normalized): Prefer edges that create less sharp turns.
    angle_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                vector1 = coordinates[i] - coordinates[0]
                vector2 = coordinates[j] - coordinates[i]

                norm1 = np.linalg.norm(vector1)
                norm2 = np.linalg.norm(vector2)
                if norm1 > 0 and norm2 > 0:
                    vector1 = vector1 / norm1
                    vector2 = vector2 / norm2
                    dot_product = np.dot(vector1, vector2)
                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))
                    angle_factor[i, j] = 1 - (angle / np.pi)
    angle_factor = angle_factor / np.max(angle_factor)

    # Combine factors multiplicatively
    heuristic_matrix = distance_factor * depot_proximity * demand_factor * angle_factor

    # Adaptive Sparsification (quantile-based)
    quantile_threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.75)  # Keep top 75%
    heuristic_matrix[heuristic_matrix < quantile_threshold] = 0

    np.fill_diagonal(heuristic_matrix, 0) #remove depot->depot

    # Distance-Scaled Randomness (only add if still zero after sparsification)
    for i in range(n):
        for j in range(n):
            if i != j and heuristic_matrix[i, j] == 0:
                randomness = np.random.rand() * np.exp(-distance_matrix[i, j] / np.mean(distance_matrix[distance_matrix > 0])) * np.exp(-(demands[i]+demands[j])/capacity) # inverse prop distance and demand
                heuristic_matrix[i, j] = randomness

    # Final Normalization
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic

    return heuristic_matrix
```
