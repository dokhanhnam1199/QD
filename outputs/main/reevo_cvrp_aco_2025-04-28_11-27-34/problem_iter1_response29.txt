```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for CVRP based on a combination of factors and sparsification.

    Args:
        distance_matrix (np.ndarray): Distance matrix (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge (n x n).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Heuristic factors:
    # 1. Distance: Shorter distances are more promising.
    distance_factor = 1 / (distance_matrix + 1e-6)  # Adding a small value to avoid division by zero.

    # 2. Demand proximity: Nodes with higher demand close to the depot are promising starting points.
    depot_distances = distance_matrix[0, :]
    demand_proximity_factor = demands / (depot_distances + 1e-6)

    # 3. Angle from depot: Edges forming smaller angles with the depot are prioritized (helps with clustering).
    angle_factor = np.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                # Calculate vectors from depot to node i and node j
                vector_i = coordinates[i] - coordinates[0]
                vector_j = coordinates[j] - coordinates[0]

                # Calculate the cosine of the angle between the vectors
                dot_product = np.dot(vector_i, vector_j)
                magnitude_i = np.linalg.norm(vector_i)
                magnitude_j = np.linalg.norm(vector_j)

                cos_angle = dot_product / (magnitude_i * magnitude_j + 1e-6)  # Avoid division by zero

                # Angle factor is proportional to the cosine (smaller angle = higher value)
                angle_factor[i, j] = (cos_angle + 1) / 2  # Normalize to [0, 1]

    # Combine factors (weighted sum)
    heuristic_matrix = (0.5 * distance_factor +
                         0.25 * demand_proximity_factor[:, None] +  # Use demand only for node *from*
                         0.25 * angle_factor)

    # Sparsification: Remove edges that are unlikely to be in the optimal solution.
    # Remove long edges: Keep only the top k nearest neighbors for each node.
    k_nearest = 10  # Adjust this value based on the problem size
    for i in range(n):
        # Get indices of the k smallest distances (excluding the diagonal element).
        indices = np.argsort(distance_matrix[i, :])[1:k_nearest + 1]

        # Zero out elements in the heuristic matrix except for k-nearest neighbors
        row = np.ones(n, dtype=bool)
        row[indices] = False
        heuristic_matrix[i, row] = 0

    #Ensure that the edges connecting back to depot has a value
    for i in range(1,n):
        heuristic_matrix[i,0] = np.max(heuristic_matrix)
        heuristic_matrix[0,i] = np.max(heuristic_matrix)


    return heuristic_matrix
```
