```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) using a combination of factors and adaptive sparsification.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Demand of each customer (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Heuristic factors (with small constants to avoid division by zero):
    distance_factor = 1 / (distance_matrix + 1e-6)
    depot_proximity_factor = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            depot_proximity_factor[i, j] = np.exp(-0.5 * (distance_matrix[0, i] + distance_matrix[0, j]) / np.mean(distance_matrix))

    angle_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                vector1 = coordinates[i] - coordinates[0]
                vector2 = coordinates[j] - coordinates[i]
                norm1 = np.linalg.norm(vector1)
                norm2 = np.linalg.norm(vector2)
                if norm1 > 0 and norm2 > 0:
                    vector1 = vector1 / norm1
                    vector2 = vector2 / norm2
                    dot_product = np.dot(vector1, vector2)
                    angle = np.arccos(np.clip(dot_product, -1.0, 1.0))
                    angle_factor[i, j] = 1 - (angle / np.pi)

    demand_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
             if i != j and i != 0 and j !=0:
                demand_factor[i, j] = np.exp(-((demands[i] + demands[j])**2) / (2 * (capacity/3)**2)) # Gaussian-like penalty

    # Adaptive weights
    weight_distance = 0.4
    weight_depot = 0.15
    weight_angle = 0.25
    weight_demand = 0.2

    heuristic_matrix = (weight_distance * distance_factor +
                        weight_depot * depot_proximity_factor +
                        weight_angle * angle_factor +
                        weight_demand * demand_factor)

    # Adaptive sparsification (distance-based quantile):
    flattened_distances = distance_matrix[distance_matrix > 0].flatten()
    distance_threshold = np.quantile(flattened_distances, 0.75)  # Keep top 75% shortest edges

    heuristic_matrix[distance_matrix > distance_threshold] = 0
    np.fill_diagonal(heuristic_matrix, 0)

    # Add small randomness scaled to distance:
    randomness_strength = 0.05  # Adjust for desired randomness
    random_matrix = np.random.rand(n, n) * randomness_strength * distance_matrix
    heuristic_matrix += random_matrix

    # Normalize
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic

    return heuristic_matrix
```
