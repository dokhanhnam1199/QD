```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) using a combination of factors and stochastic sampling.
    v2: Improved with more aggressive sparsification, adjusted scaling, multiplicative combination and stochasticity.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Demand of each customer (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # 1. Distance factor: Shorter distances are more promising.
    distance_factor = 1 / (distance_matrix + 1e-6)  # Avoid division by zero

    # 2. Angle factor: Penalize sharp turns using cosine similarity.
    angle_factor = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                # Vectors from depot to i and from i to j
                vector1 = coordinates[i] - coordinates[0]
                vector2 = coordinates[j] - coordinates[i]

                # Normalize vectors
                norm1 = np.linalg.norm(vector1)
                norm2 = np.linalg.norm(vector2)

                if norm1 > 0 and norm2 > 0:
                    vector1_norm = vector1 / norm1
                    vector2_norm = vector2 / norm2
                    angle_factor[i, j] = (1 + np.dot(vector1_norm, vector2_norm)) / 2  # Cosine similarity ranges from 0 to 1
                else:
                    angle_factor[i, j] = 0.5  # Default value if a node is at the depot location

    # 3. Demand factor: Penalize edges based on combined demand relative to capacity.
    demand_factor = np.ones((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                demand_factor[i, j] = np.exp(- (demands[i] + demands[j]) / (0.75 * capacity))  # Adjusted scaling

    # Adaptive sparsification based on problem size and distances
    quantile_threshold = 0.90 - min(0.4, 0.003 * n)  # More aggressive for larger problems
    distance_threshold = np.quantile(distance_matrix[distance_matrix > 0], quantile_threshold)
    sparsification_mask = distance_matrix > distance_threshold

    # Introduce controlled stochasticity
    random_matrix = np.random.normal(0, 0.05, size=(n, n))  # Reduced stochasticity for stability
    random_matrix = np.clip(random_matrix, -0.1, 0.1)

    # Combine all factors multiplicatively
    heuristic_matrix = (distance_factor**0.6) * (angle_factor**0.4) * (demand_factor**0.7) + random_matrix
    heuristic_matrix[sparsification_mask] = 0

    # Ensure no self-loops or edges to/from depot (except potentially from depot to first node)
    np.fill_diagonal(heuristic_matrix, 0)
    heuristic_matrix[:, 0] = 0  # No edges pointing to the depot
    heuristic_matrix[0, 0] = 0  # no self loop

    # Normalize heuristic matrix
    max_heuristic = np.max(heuristic_matrix)
    if max_heuristic > 0:
        heuristic_matrix = heuristic_matrix / max_heuristic

    return heuristic_matrix
```
