```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) using a combination of factors and stochastic sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Demand of each customer (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Heuristic factors:
    # 1. Distance: Shorter distances are more promising.
    distance_factor = 1 / (distance_matrix + 1e-6)  # Avoid division by zero
    distance_factor = distance_factor / np.max(distance_factor) # Normalize
    
    # 2. Depot Proximity
    depot_proximity = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            depot_proximity[i, j] = np.exp(- (distance_matrix[0, i] + distance_matrix[0, j]) / np.mean(distance_matrix[0,1:])) # Normalized by mean depot dist
    depot_proximity = depot_proximity / np.max(depot_proximity) # Normalize.


    # 3. Demand: Edges connecting nodes with higher demands might be less promising if vehicle is almost full.
    demand_factor = np.ones((n, n))
    for i in range(n):
        for j in range(n):
            if i != j and i != 0 and j !=0: #avoid edge from depot to depot.
                demand_factor[i, j] = np.exp(- (demands[i] + demands[j]) / capacity)  # Exponential decay based on demand relative to capacity
    demand_factor = demand_factor / np.max(demand_factor) # Normalize

    # 4. Stochasticity (distance-scaled randomness)
    random_factor = np.random.rand(n, n)
    random_factor = random_factor / np.max(random_factor) # Normalize

    # Combine factors multiplicatively
    heuristic_matrix = distance_factor * depot_proximity * demand_factor * (0.1 + 0.9 * random_factor)  # Added randomness.  Weight randomness less strongly.
    heuristic_matrix = heuristic_matrix / np.max(heuristic_matrix) # Normalize again after combination.

    # Sparsify: Remove edges that are very long or unlikely to be in the solution.
    # Adaptive distance threshold based on the quantile of the distance values
    distance_threshold = np.quantile(distance_matrix[distance_matrix > 0], 0.75) # Keep top 75%
    heuristic_matrix[distance_matrix > distance_threshold] = 0

    np.fill_diagonal(heuristic_matrix, 0)  # Ensure depot->depot edge is excluded.

    return heuristic_matrix
```
