```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP)
    via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge
                  in a solution (same shape as distance_matrix).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Calculate savings matrix
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]  # Savings matrix is symmetric

    # Combine distance, savings, demand considerations
    for i in range(n):
        for j in range(n):
            if i == j:
                heuristics_matrix[i, j] = 0  # No self-loops
            else:
                distance_factor = 1 / (distance_matrix[i, j] + 1e-9)  # Avoid division by zero
                savings_factor = savings_matrix[i, j] if i != 0 and j != 0 else 0  # Only use savings for non-depot links
                demand_factor = 1 / (demands[i] + demands[j] + 1e-9) if i != 0 and j != 0 else 0

                #heuristic_value = distance_factor * (savings_factor + 0.01) * (demand_factor + 0.01)
                heuristic_value = distance_factor * (1 + 0.1 * savings_factor)
                heuristics_matrix[i, j] = heuristic_value

    # Sparsify the matrix
    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 75) #Only keep top 25%

    heuristics_matrix[heuristics_matrix < threshold] = 0
    #Force connection from depot to all others.
    for i in range(1,n):
        heuristics_matrix[0,i] = max(heuristics_matrix[0,i], heuristics_matrix.max()/10)
        heuristics_matrix[i,0] = max(heuristics_matrix[i,0], heuristics_matrix.max()/10)
    return heuristics_matrix
```
