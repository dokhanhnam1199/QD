{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    This function combines several factors to determine how promising it is to select an edge,\n    including distance, demand, and angle relative to the depot.  It also sparsifies the matrix\n    by setting unpromising elements to zero.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Vector of customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution\n                      (shape: same as distance_matrix).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros((n, n))\n\n    # Parameters (can be tuned)\n    distance_weight = 1.0\n    demand_weight = 0.5\n    angle_weight = 0.2\n    capacity_threshold = 0.8  #Edges with both nodes with individual demand greater than % of the capacity is pruned.\n\n    # Calculate angle of each node relative to the depot (node 0)\n    depot_x, depot_y = coordinates[0]\n    angles = np.arctan2(coordinates[:, 1] - depot_y, coordinates[:, 0] - depot_x)\n\n    #Create a mask to ignore direct returns from the depot back to depot.\n    depot_mask = np.ones((n,n))\n    depot_mask[0,0] = 0\n    \n    # Create an edge pruning mask if demands exceed vehicle capacity\n    demand_pruning_mask = np.ones((n,n))\n\n    for i in range(n):\n      for j in range(n):\n        if demands[i] > capacity * capacity_threshold or demands[j] > capacity * capacity_threshold:\n            demand_pruning_mask[i,j] = 0\n        if i == j:\n            demand_pruning_mask[i,j] = 0 # Ensure no node self-loops\n\n    for i in range(n):\n        for j in range(n):\n            if i != j and i != 0 and j !=0 : # Do not select routes from or to depot initially except return to the depot from other places.\n                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Avoid division by zero\n                demand_factor = np.exp(-demands[i] / capacity) * np.exp(-demands[j] / capacity)  # Favor edges with lower demand nodes\n                angle_diff = np.abs(angles[i] - angles[j])\n                angle_factor = np.exp(-angle_diff) # penalize large angle differences to favor smoother routes.\n\n\n                heuristic_matrix[i, j] = (\n                        distance_weight * distance_factor +\n                        demand_weight * demand_factor +\n                        angle_weight * angle_factor\n                )\n                \n    #Prioritize return to the depot\n    for i in range(1, n):\n        heuristic_matrix[i,0] = np.mean(heuristic_matrix) * 2 # Set to a high value but not inf\n\n    heuristic_matrix = heuristic_matrix * depot_mask * demand_pruning_mask\n\n    # Sparsify the matrix (set unpromising edges to zero)\n    threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) * 0.1 # small percentage of the non-zero averages.\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP)\n    via stochastic solution sampling.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Vector of customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge\n                  in a solution (same shape as distance_matrix).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros((n, n))\n\n    # Calculate savings matrix\n    savings_matrix = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]  # Savings matrix is symmetric\n\n    # Combine distance, savings, demand considerations\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                heuristics_matrix[i, j] = 0  # No self-loops\n            else:\n                distance_factor = 1 / (distance_matrix[i, j] + 1e-9)  # Avoid division by zero\n                savings_factor = savings_matrix[i, j] if i != 0 and j != 0 else 0  # Only use savings for non-depot links\n                demand_factor = 1 / (demands[i] + demands[j] + 1e-9) if i != 0 and j != 0 else 0\n\n                #heuristic_value = distance_factor * (savings_factor + 0.01) * (demand_factor + 0.01)\n                heuristic_value = distance_factor * (1 + 0.1 * savings_factor)\n                heuristics_matrix[i, j] = heuristic_value\n\n    # Sparsify the matrix\n    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 75) #Only keep top 25%\n\n    heuristics_matrix[heuristics_matrix < threshold] = 0\n    #Force connection from depot to all others.\n    for i in range(1,n):\n        heuristics_matrix[0,i] = max(heuristics_matrix[0,i], heuristics_matrix.max()/10)\n        heuristics_matrix[i,0] = max(heuristics_matrix[i,0], heuristics_matrix.max()/10)\n    return heuristics_matrix\n\n[Reflection]\nSavings calculations, demand considerations, and aggressive sparsification improve heuristic quality.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}