```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version refines the heuristics_v1 function by incorporating learnable parameters and refining the edge scoring mechanism.
    Specifically, it addresses the edge scoring by considering the remaining capacity of a potential route.
    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Learnable Parameters (initialized with reasonable defaults)
    distance_weight = 0.4
    angle_weight = 0.3
    demand_weight = 0.3
    depot_connection_boost = 0.2
    sparsification_threshold = 5
    remaining_capacity_exponent = 2  # Increase the impact of remaining capacity
    min_demand_ratio = 0.05  # Minimum demand ratio to consider an edge viable

    for i in range(n):
        for j in range(n):
            if i != j:
                # Distance factor: Inverse of distance
                distance_factor = 1 / (distance_matrix[i, j] + 1e-9)

                # Angle factor: Penalize sharp turns using the depot as reference
                if i != 0 and j != 0:
                    v1 = coordinates[i] - coordinates[0]
                    v2 = coordinates[j] - coordinates[i]
                    v1_norm = np.linalg.norm(v1)
                    v2_norm = np.linalg.norm(v2)
                    if v1_norm > 0 and v2_norm > 0:
                        dot_product = np.dot(v1, v2)
                        angle = np.arccos(np.clip(dot_product / (v1_norm * v2_norm), -1.0, 1.0))
                        angle_factor = 1 - (angle / np.pi)
                    else:
                        angle_factor = 0.5
                else:
                    angle_factor = 1.0

                # Demand factor: Consider remaining capacity instead of just combined demand
                # Estimate remaining capacity after visiting node i
                remaining_capacity_i = capacity - demands[i] if i != 0 else capacity
                # Encourage edges where the demand of j fits into the remaining capacity
                if demands[j] <= remaining_capacity_i and demands[j] / capacity >= min_demand_ratio:
                    demand_factor = (remaining_capacity_i - demands[j]) / capacity
                    demand_factor = demand_factor**remaining_capacity_exponent  # Emphasize remaining capacity
                else:
                    demand_factor = 0.0  # Very low score if demand doesn't fit

                # Combine factors
                heuristic_matrix[i, j] = (
                    distance_weight * distance_factor +
                    angle_weight * angle_factor +
                    demand_weight * demand_factor
                )

                # Boost depot connection
                if i == 0 or j == 0:
                    heuristic_matrix[i, j] += depot_connection_boost

    # Sparsification: Keep only top promising edges
    for i in range(n):
        row = heuristic_matrix[i, :]
        indices = np.argsort(row)[-(sparsification_threshold + 1):]
        for j in range(n):
            if i != j and j not in indices:
                heuristic_matrix[i, j] = 0

    return heuristic_matrix
```
