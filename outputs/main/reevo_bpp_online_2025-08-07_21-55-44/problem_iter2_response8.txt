```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority function for online bin packing that prefers bins with the
    smallest leftover space after placing the item, while giving a huge
    bonus to exact fits.  No bias is introduced based on bin index.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1â€‘D array containing the remaining capacity of each existing bin.

    Returns
    -------
    np.ndarray
        An array of priority scores, one per bin.  The bin with the
        maximum score will be selected.  Infeasible bins receive ``-np.inf``.
    """
    # Ensure we are working with a float array
    caps = np.asarray(bins_remain_cap, dtype=float)

    # Initialize all priorities to -inf (unfeasible)
    priorities = np.full(caps.shape, -np.inf, dtype=float)

    # Feasible bins: those with enough capacity for the item
    feasible = caps >= item
    if not np.any(feasible):
        # No existing bin can fit the item; caller may decide to open a new bin
        return priorities

    # Compute leftover space if the item were placed in each feasible bin
    leftover = caps - item

    # Base priority: larger leftover => lower priority (negative leftover)
    priorities[feasible] = -leftover[feasible]

    # Detect exact fits within a small tolerance and give them a massive bonus
    # This ensures an exact fit is always chosen over a bin with a small leftover.
    tolerance = 1e-9
    exact_fit = feasible & (leftover <= tolerance)
    if np.any(exact_fit):
        # A large constant that dominates any other priority
        EXACT_FIT_BONUS = 1e9
        priorities[exact_fit] = EXACT_FIT_BONUS

    return priorities
```
