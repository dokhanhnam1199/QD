{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    *,\n    exact_fit_bonus: float = 1e5,\n    slack_decay: float = 10.0,\n    next_item_factor: float = 0.1,\n    jitter: float = 1e-6,\n    atol: float = 1e-12,\n) -> np.ndarray:\n    \"\"\"\n    Compute priority scores for bins in an online Bin Packing Problem.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each currently opened bin.\n    exact_fit_bonus : float, optional\n        Large bonus added for bins that can accommodate the item exactly.\n    slack_decay : float, optional\n        Controls the steepness of the exponential slack bonus.\n    next_item_factor : float, optional\n        Small bonus for bins that can still hold another item of the same size\n        after the current placement.\n    jitter : float, optional\n        Deterministic tie\u2011breaker magnitude (lower\u2011index bins get a tiny\n        advantage).\n    atol : float, optional\n        Absolute tolerance for detecting an exact fit.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores of the same shape as ``bins_remain_cap``.  Feasible\n        bins receive finite scores; infeasible bins receive ``-np.inf`` and\n        are never selected.\n    \"\"\"\n    # Convert to a 1\u2011D float array; avoid modifying the caller's array\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Initialise all scores to -inf (infeasible)\n    priority = np.full_like(caps, -np.inf, dtype=float)\n\n    if n_bins == 0:\n        return priority\n\n    # Slack after placing the item\n    slack = caps - item\n    feasible = slack >= 0\n\n    # No feasible bins: return early\n    if not np.any(feasible):\n        return priority\n\n    # Normalise slack within feasible bins to [0, 1]\n    max_slack = np.max(slack[feasible])  # >= 0\n    slack_norm = slack[feasible] / (max_slack + atol)\n\n    # Exponential slack bonus: small slack \u2192 large bonus\n    slack_bonus = np.exp(-slack_decay * slack_norm)\n\n    # Base priority from slack bonus\n    priority[feasible] = slack_bonus\n\n    # Anticipation bonus: still room for another item of the same size\n    anticipation_mask = feasible & (slack >= item)\n    priority[anticipation_mask] += next_item_factor\n\n    # Exact\u2011fit bonus\n    exact_fit_mask = feasible & np.isclose(slack, 0.0, atol=atol)\n    priority[exact_fit_mask] += exact_fit_bonus\n\n    # Deterministic tie\u2011breaker: favor lower\u2011index bins slightly\n    priority += -np.arange(n_bins, dtype=float) * jitter\n\n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    *,\n    bin_capacity: float = 1.0,\n    exact_fit_bonus: float = 1e6,\n    slack_weight: float = 1.0,\n    new_bin_penalty: float = 0.2,\n    epsilon: float = 1e-12,\n) -> np.ndarray:\n    \"\"\"\n    Priority function for online Bin Packing.\n\n    The function evaluates each currently open bin and a virtual new bin.\n    Higher returned values indicate more desirable bins.\n\n    - Exact\u2011fit bins receive a large ``exact_fit_bonus``.\n    - For other feasible bins the priority decreases linearly with the\n      normalized slack (waste / bin_capacity).  Slack is multiplied by\n      ``slack_weight``; larger slack => lower priority.\n    - Opening a new bin is penalised by ``new_bin_penalty`` proportionally to its\n      expected waste.\n    - A tiny deterministic tie\u2011breaker (``epsilon``) favours lower indices.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of already opened bins.\n    bin_capacity : float, optional\n        Fixed capacity of every bin (default 1.0).\n    exact_fit_bonus : float, optional\n        Bonus added to a bin that would be exactly filled (default 1e6).\n    slack_weight : float, optional\n        Linear weight for normalized slack (default 1.0).\n    new_bin_penalty : float, optional\n        Multiplicative penalty applied to the waste of a newly opened bin\n        (default 0.2 \u2192 20\u202f% extra waste (default 0.2 \u2192 20\u202f% extra waste cost).\n    epsilon : float, optional\n        Tiny value for deterministic tie\u2011breaking (default 1e\u201112).\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores with shape ``(len(bins_remain_cap) + 1,)``.\n        The last entry corresponds to the virtual new bin.\n    \"\"\"\n    # Ensure NumPy array\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # Waste (remaining capacity after placement) for each existing bin\n    waste = bins_remain_cap - item\n    feasible = waste >= 0\n\n    # Normalized slack: waste divided by the fixed bin capacity\n    slack = np.where(feasible, waste / bin_capacity, np.inf)\n\n    # Base priority: negative weighted slack (smaller slack \u2192 higher priority)\n    base_priority = np.where(feasible, -slack_weight * slack, -np.inf)\n\n    # Exact\u2011fit bonus (within tolerance)\n    exact_fit_mask = np.isclose(waste, 0.0, atol=epsilon)\n    base_priority = np.where(exact_fit_mask, base_priority + exact_fit_bonus, base_priority)\n\n    # Deterministic tie\u2011breaker: tiny advantage for lower indices\n    tie_breaker = -np.arange(bins_remain_cap.size) * epsilon\n    base_priority = base_priority + tie_breaker\n\n    # ---------- Virtual new bin ----------\n    waste_new = bin_capacity - item\n    if waste_new < 0:\n        new_bin_priority = -np.inf\n    else:\n        slack_new = waste_new / bin_capacity\n        # Apply penalty proportional to expected waste\n        new_bin_priority = -slack_weight * slack_new * (1.0 + new_bin_penalty)\n        # Exact\u2011fit bonus for a perfect new bin\n        if np.isclose(waste_new, 0.0, atol=epsilon):\n            new_bin_priority += exact_fit_bonus\n        # Tie\u2011breaker for the virtual bin (give it a neutral index after all real bins)\n        new_bin_priority += -bins_remain_cap.size * epsilon\n\n    # Append virtual new bin priority as the last element\n    priorities = np.append(base_priority, new_bin_priority)\n\n    return priorities\n\n[Reflection]\nLinear slack cost, exact\u2011fit bonus, virtual new\u2011bin penalty, tiny tie\u2011breaker, prefer minimal waste.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}