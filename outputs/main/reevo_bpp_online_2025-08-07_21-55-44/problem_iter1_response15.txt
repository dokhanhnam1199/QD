```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority function for online bin packing using Inverse Distance
    and a simple utilization enhancement.

    For each bin the function computes how close the remaining capacity
    would be to a perfect fit if the item were placed there (Inverse
    Distance).  It also mildly biases the selection toward bins that are
    already more heavily utilized (smaller remaining capacity relative
    to the best feasible bin).  Bins that cannot fit the item receive
    a priority of -np.inf and are never selected.

    Parameters
    ----------
    item : float
        Size of the item to place.
    bins_remain_cap : np.ndarray
        Current remaining capacities of all bins.

    Returns
    -------
    np.ndarray
        Array of priority scores, one per bin.
    """
    eps = 1e-12  # small constant to avoid division by zero

    # Remaining capacity after adding the item (distance from perfect fit)
    dist = bins_remain_cap - item

    # Boolean mask for bins that can accommodate the item
    feasible = dist >= 0

    # Base array: unusable bins get -inf priority
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    if not np.any(feasible):
        # No bin can fit the item; downstream logic may open a new bin
        return priorities

    # Work with feasible bins only
    dist_vals = dist[feasible]

    # 1/(distance + eps) : larger value â†’ tighter fit
    proximity = 1.0 / (dist_vals + eps)

    # Utilization factor: higher when the remaining capacity is relatively small
    max_remaining = np.max(bins_remain_cap[feasible])
    utilization = 1.0 - (dist_vals / (max_remaining + eps))
    utilization = np.clip(utilization, 0.0, 1.0)

    # Combine proximity and utilization.  A simple product gives the correct
    # ranking: tight fits win, and among similar tight fits, prefer more used bins.
    combined = proximity * utilization

    # Write priorities back to the full array
    priorities[feasible] = combined

    return priorities
```
