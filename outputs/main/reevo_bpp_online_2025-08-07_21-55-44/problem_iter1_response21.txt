```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best-Fit priority: Prefer the bin that leaves the smallest leftover capacity.

    The function assigns a higher (less negative) priority to bins where the item fits
    and the remaining space after placement is minimal. Bins that cannot accommodate
    the item receive a very low priority (negative infinity) to exclude them.

    Args:
        item: Size of the incoming item.
        bins_remain_cap: 1â€‘D array of remaining capacities for each bin.

    Returns:
        np.ndarray of priorities, same shape as ``bins_remain_cap``.
    """
    # Ensure floating point arithmetic to handle -inf safely
    caps = bins_remain_cap.astype(float, copy=False)

    # Compute the residual capacity if the item were placed in each bin
    residual = caps - item

    # Feasible bins: residual >= 0; priority is negative residual (smaller residual => higher priority)
    # Infeasible bins: assign -inf so they will never be chosen.
    priorities = np.where(residual >= 0, -residual, -np.inf)

    return priorities
```
