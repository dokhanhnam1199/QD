```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Softmax‑based fit priority for online bin packing.

    For each bin a fit score is computed that favours a tight packing
    (small remaining capacity after placing *item*).  The scores are
    transformed by a softmax to obtain a probability‑like priority
    distribution over the bins.  Bins that cannot host the item receive
    a priority of zero.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array with the remaining capacity of each currently open bin.

    Returns
    -------
    np.ndarray
        Array of priorities, one per bin.  Priorities sum to one over all
        feasible bins and are zero when no bin can accommodate the item.
    """
    # Temperature determines how deterministic the softmax is.
    # Very low -> almost always pick the tightest fit.
    # Higher -> smoother distribution over feasible bins.
    temperature = 0.05

    # Residual capacity after (hypothetically) placing the item.
    residual = bins_remain_cap - item

    # Feasibility mask: only bins with non‑negative residual can host the item.
    feasible = residual >= 0

    # Initialise scores with -inf so that exp(-inf) = 0 for infeasible bins.
    scores = np.full_like(bins_remain_cap, -np.inf, dtype=np.float64)

    # Fit score: tighter fit (smaller residual) → larger score.
    # Using -residual / temperature makes tighter fits produce higher exponents.
    scores[feasible] = -residual[feasible] / temperature

    # Compute a numerically‑stable softmax.
    if np.any(feasible):
        max_score = np.max(scores[feasible])          # shift for stability
        exp_scores = np.exp(scores - max_score)       # infeasible stay near zero
        exp_scores[~feasible] = 0.0                    # guarantee exact zero
        total = exp_scores.sum()
        priorities = exp_scores / total if total > 0 else np.zeros_like(bins_remain_cap, dtype=np.float64)
    else:
        # No bin can accommodate the item → all priorities zero (caller may open a new bin).
        priorities = np.zeros_like(bins_remain_cap, dtype=np.float64)

    return priorities
```
