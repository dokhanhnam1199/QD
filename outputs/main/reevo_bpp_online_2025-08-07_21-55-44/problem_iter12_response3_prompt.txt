{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global constant for bin capacity (assumed normalized to 1.0)\nBIN_CAPACITY = 1.0\n\n    \"\"\"\n    Priority function for online Bin Packing.\n\n    The score for each currently opened bin combines:\n      \u2022 a sigmoid on the normalized slack after placement, with steepness\n        scaling according to how full the bin already is;\n      \u2022 a large bonus for an exact fit;\n      \u2022 a modest reuse bonus (penalising opening a new bin);\n      \u2022 a one\u2011step look\u2011ahead term that slightly favours bins leaving some slack;\n      \u2022 a tiny deterministic jitter to break exact ties.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each opened bin.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores (same shape as ``bins_remain_cap``). Infeasible\n        bins receive ``-inf`` so they are never selected.\n    \"\"\"\n    # Ensure NumPy array\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # Feasibility mask: bin can accommodate the item only if remaining capacity >= item\n    feasible = bins_remain_cap >= item\n\n    # Initialise priorities with -inf for infeasible bins\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        # No feasible bin \u2013 caller should open a new bin\n        return priorities\n\n    # Slack after placing the item (non\u2011negative for feasible bins)\n    slack = bins_remain_cap - item\n    slack_norm = slack / BIN_CAPACITY  # normalized to [0, 1]\n\n    # Fullness of each bin before placement (0 for empty, 1 for completely full)\n    fullness = 1.0 - (bins_remain_cap / BIN_CAPACITY)\n\n    # Steepness of the sigmoid scales with fullness\n    base_k = 5.0            # base steepness\n    scale_factor = 5.0      # how much steepness grows with fullness\n    k = base_k * (1.0 + scale_factor * fullness)\n\n    # Decreasing sigmoid on normalized slack; multiplied by 2 maps exact\u2011fit to 1\n    sigmoid_score = 2.0 / (1.0 + np.exp(k * slack_norm))\n\n    # Exact\u2011fit bonus (large boost when slack is essentially zero)\n    eps = 1e-12\n    exact_fit_bonus = np.where(slack <= eps, 10.0, 0.0)\n\n    # Reuse bonus \u2013 small constant that makes using an existing bin slightly better\n    reuse_bonus = 0.05\n\n    # One\u2011step look\u2011ahead term: modestly reward bins that leave a bit of slack\n    lookahead_weight = 0.2\n    lookahead_score = lookahead_weight * slack_norm\n\n    # Tiny deterministic jitter to break ties (prefers lower index)\n    # Using a negative sign ensures index 0 gets the highest tie\u2011breaker.\n    jitter = -np.arange(bins_remain_cap.size) * 1e-12\n\n    # Combine all components for feasible bins\n    combined_score = (\n        sigmoid_score\n        + exact_fit_bonus\n        + reuse_bonus\n        + lookahead_score\n        + jitter\n    )\n\n    # Assign combined scores only to feasible bins\n    priorities[feasible] = combined_score[feasible]\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    item: float,\n    bins_remain_cap: Union[np.ndarray, Sequence[float]],\n    *,\n    bin_capacity: Optional[float] = None,\n    lookahead_items: Optional[Union[np.ndarray, Sequence[float]]] = None,\n    base_steepness: float = 8.0,\n    lookahead_alpha: float = 0.2,\n    exact_fit_bonus: float = 0.15,\n    jitter: float = 1e-7,\n    random_state: Optional[Union[int, np.random.Generator]] = None,\n) -> np.ndarray:\n    \"\"\"\n    Compute priority scores for bins in an online Bin Packing setting.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : array\u2011like, shape (n_bins,)\n        Remaining capacities of the currently opened bins.\n    bin_capacity : float, optional\n        Fixed capacity of each bin. If ``None``, it is inferred as\n        ``max(bins_remain_cap) + item`` (plus a tiny epsilon to avoid division\n        by zero).\n    lookahead_items : array\u2011like, optional\n        Sizes of a few future items. Bins that can still accommodate many of\n        these items after the current placement receive a multiplicative boost.\n    base_steepness : float, default 8.0\n        Base steepness for the sigmoid; scaled by ``1 + fullness``.\n    lookahead_alpha : float, default 0.2\n        Strength of the look\u2011ahead boost (0\u202f\u2264\u202f\u03b1\u202f\u2264\u202f1).\n    exact_fit_bonus : float, default 0.15\n        Small additive bonus for bins that fit the item exactly.\n    jitter : float, default 1e-7\n        Amplitude of tiny random noise for tie\u2011breaking.\n    random_state : int or np.random.Generator, optional\n        Seed or generator for reproducible jitter.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (0\u2011based). Infeasible bins receive ``-np.inf``.\n    \"\"\"\n    # ------------------------------------------------------------------\n    # 1. Normalise inputs\n    # ------------------------------------------------------------------\n    bins = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = bins.size\n\n    if n_bins == 0:\n        return np.empty(0, dtype=float)\n\n    # ------------------------------------------------------------------\n    # 2. Determine bin capacity if not supplied\n    # ------------------------------------------------------------------\n    if bin_capacity is None:\n        # Estimate capacity from the largest observed remaining capacity.\n        bin_capacity = float(np.max(bins) + item + 1e-9)\n    else:\n        bin_capacity = float(bin_capacity)\n\n    if bin_capacity <= 0.0:\n        raise ValueError(\"bin_capacity must be positive.\")\n\n    # ------------------------------------------------------------------\n    # 3. Feasibility mask\n    # ------------------------------------------------------------------\n    feasible = bins >= item\n    if not np.any(feasible):\n        # No bin can host the item.\n        return np.full_like(bins, -np.inf, dtype=float)\n\n    # ------------------------------------------------------------------\n    # 4. Slack after placement and derived quantities\n    # ------------------------------------------------------------------\n    slack = bins - item                     # \u22650 for feasible bins\n    norm_gap = np.clip(slack / bin_capacity, 0.0, 1.0)      # normalised slack \u2208[0,1]\n\n    # Fullness before placement (used capacity / total capacity)\n    fullness = np.clip((bin_capacity - bins) / bin_capacity, 0.0, 1.0)\n\n    # ------------------------------------------------------------------\n    # 5. Dynamic sigmoid steepness\n    # ------------------------------------------------------------------\n    k = base_steepness * (1.0 + fullness)   # steeper for already\u2011full bins\n\n    # ------------------------------------------------------------------\n    # 6. Sigmoid score (monotonically decreasing with slack)\n    # ------------------------------------------------------------------\n    # Using an inflection point at norm_gap = 0.5.\n    exponent = k * (0.5 - norm_gap)        # larger \u2192 tighter fit\n    exponent = np.clip(exponent, -700.0, 700.0)  # safe for exp()\n    scores = 1.0 / (1.0 + np.exp(-exponent))\n\n    # ------------------------------------------------------------------\n    # 7. Exact\u2011fit bonus\n    # ------------------------------------------------------------------\n    exact_fit_mask = feasible & np.isclose(slack, 0.0, atol=1e-12)\n    scores[exact_fit_mask] += exact_fit_bonus\n\n    # ------------------------------------------------------------------\n    # 8. Look\u2011ahead boost (optional)\n    # ------------------------------------------------------------------\n    if lookahead_items is not None:\n        lookahead = np.asarray(lookahead_items, dtype=float).ravel()\n        if lookahead.size > 0:\n            # Remaining capacity after placing the current item (only for feasible bins)\n            remaining_after = slack[feasible]   # \u22650\n            # Count how many look\u2011ahead items could still fit into each bin\n            fits = (remaining_after[:, None] >= lookahead[None, :]).sum(axis=1)\n            fit_ratio = fits.astype(float) / lookahead.size  # \u2208[0,1]\n            boost = 1.0 + np.clip(lookahead_alpha, 0.0, 1.0) * fit_ratio\n            scores[feasible] *= boost\n\n    # ------------------------------------------------------------------\n    # 9. Tiny jitter for deterministic tie\u2011breaking\n    # ------------------------------------------------------------------\n    rng = np.random.default_rng(random_state)\n    jitter_noise = rng.uniform(0.0, jitter, size=np.count_nonzero(feasible))\n    scores[feasible,] = scores[feasible] + jitter_noise  # type: ignore\n\n    # ------------------------------------------------------------------\n    # 10. Assemble final priority vector\n    # ------------------------------------------------------------------\n    priority = np.full_like(bins, -np.inf, dtype=float)\n    priority[feasible] = scores[feasible]\n\n    return priority\n\n[Reflection]\nUse dynamic steepness sigmoid, add exact\u2011fit bonus, incorporate lookahead, jitter tie\u2011breaker, normalise, clip for stability.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}