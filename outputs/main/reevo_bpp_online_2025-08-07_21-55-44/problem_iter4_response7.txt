```python
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    *,
    exact_fit_bonus: float = 1e7,
    slack_decay: float = 12.0,
    next_item_factor: float = 0.05,
    jitter: float = 1e-12,
    atol: float = 1e-12,
) -> np.ndarray:
    """
    Compute priority scores for bins in an online Bin Packing Problem.

    Higher scores indicate a more desirable bin for the incoming ``item``.
    The priority combines several heuristics:
      • Large bonus for an exact fit (remaining capacity ≈ 0).
      • Exponential slack penalty: bins with less leftover capacity get a
        larger boost, encouraging tight packing.
      • Anticipation bonus: slight extra score if the bin would still hold
        another item of the same size after placement.
      • Deterministic tie‑breaker based on bin index (jitter).

    Infeasible bins (insufficient capacity) receive ``-inf`` priority.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities for each currently opened bin.
    exact_fit_bonus : float, optional
        Bonus added for bins where the item fits exactly.
    slack_decay : float, optional
        Controls steepness of the exponential slack bonus.
    next_item_factor : float, optional
        Small bonus for bins that could still accommodate another item of
        size ``item`` after this placement.
    jitter : float, optional
        Magnitude of the deterministic tie‑breaker based on bin index.
    atol : float, optional
        Absolute tolerance for detecting an exact fit.

    Returns
    -------
    np.ndarray
        Priority scores (same shape as ``bins_remain_cap``).
    """
    # Ensure a 1‑D float array
    caps = np.asarray(bins_remain_cap, dtype=float).ravel()
    n_bins = caps.size

    if n_bins == 0:
        return np.array([], dtype=float)

    # Compute slack (remaining capacity after placing the item)
    slack = caps - item
    feasible : np.ndarray = slack >= 0

    # Initialise priority with -inf for infeasible bins
    priority = np.full_like(caps, -np.inf, dtype=float)

    if not np.any(feasible):
        # No feasible bin; return early
        # (All entries already -inf)
        return priority

    # Base priority: negative slack (less waste = higher score)
    base = -slack[feasible]

    # Normalized slack for exponential bonus
    max_slack = np.max(slack[feasible])
    norm_slack = slack[feasible] / (max_slack + atol)  # avoid division by zero

    # Exponential slack bonus (high when slack is small)
    slack_bonus = np.exp(-slack_decay * norm_slack)

    # Combine base and slack bonus
    priority[feasible] = base + slack_bonus

    # Anticipation bonus: still room for another item of same size
    anticipate_mask = feasible & (slack >= item)
    priority[anticipate_mask] += next_item_factor

    # Exact‑fit bonus
    exact_fit_mask = feasible & np.isclose(slack, 0.0, atol=atol)
    priority[exact_fit_mask] += exact_fit_bonus

    # Deterministic tie‑breaker: favor lower‑index bins slightly
    priority += -np.arange(n_bins, dtype=float) * jitter

    return priority
```
