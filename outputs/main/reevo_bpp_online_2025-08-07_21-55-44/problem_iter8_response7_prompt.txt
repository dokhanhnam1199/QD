{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    *,\n    exact_fit_bonus: float = 1e5,\n    slack_decay: float = 10.0,\n    next_item_factor: float = 0.1,\n    jitter: float = 1e-6,\n    atol: float = 1e-12,\n) -> np.ndarray:\n    \"\"\"\n    Compute priority scores for bins in an online Bin Packing Problem.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each currently opened bin.\n    exact_fit_bonus : float, optional\n        Large bonus added for bins that can accommodate the item exactly.\n    slack_decay : float, optional\n        Controls the steepness of the exponential slack bonus.\n    next_item_factor : float, optional\n        Small bonus for bins that can still hold another item of the same size\n        after the current placement.\n    jitter : float, optional\n        Deterministic tie\u2011breaker magnitude (lower\u2011index bins get a tiny\n        advantage).\n    atol : float, optional\n        Absolute tolerance for detecting an exact fit.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores of the same shape as ``bins_remain_cap``.  Feasible\n        bins receive finite scores; infeasible bins receive ``-np.inf`` and\n        are never selected.\n    \"\"\"\n    # Convert to a 1\u2011D float array; avoid modifying the caller's array\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Initialise all scores to -inf (infeasible)\n    priority = np.full_like(caps, -np.inf, dtype=float)\n\n    if n_bins == 0:\n        return priority\n\n    # Slack after placing the item\n    slack = caps - item\n    feasible = slack >= 0\n\n    # No feasible bins: return early\n    if not np.any(feasible):\n        return priority\n\n    # Normalise slack within feasible bins to [0, 1]\n    max_slack = np.max(slack[feasible])  # >= 0\n    slack_norm = slack[feasible] / (max_slack + atol)\n\n    # Exponential slack bonus: small slack \u2192 large bonus\n    slack_bonus = np.exp(-slack_decay * slack_norm)\n\n    # Base priority from slack bonus\n    priority[feasible] = slack_bonus\n\n    # Anticipation bonus: still room for another item of the same size\n    anticipation_mask = feasible & (slack >= item)\n    priority[anticipation_mask] += next_item_factor\n\n    # Exact\u2011fit bonus\n    exact_fit_mask = feasible & np.isclose(slack, 0.0, atol=atol)\n    priority[exact_fit_mask] += exact_fit_bonus\n\n    # Deterministic tie\u2011breaker: favor lower\u2011index bins slightly\n    priority += -np.arange(n_bins, dtype=float) * jitter\n\n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: Union[np.ndarray, list, tuple],\n    *,\n    bin_capacity: Optional[float] = None,\n    lookahead_items: Optional[Union[np.ndarray, list, tuple]] = None,\n    k_base: float = 8.0,\n    alpha: float = 0.2,\n    random_state: Optional[Union[int, np.random.Generator]] = None,\n) -> np.ndarray:\n    \"\"\"\n    Priority scores for bins in an online Bin Packing problem.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : array\u2011like of float\n        Remaining capacity of each currently opened bin.\n    bin_capacity : float, optional\n        Fixed capacity of a bin.  If ``None``, the maximum observed remaining\n        capacity plus the incoming item is used as a proxy.\n    lookahead_items : array\u2011like of float, optional\n        Sizes of future items.  Bins that can also accommodate more of these\n        items after placing the current one receive a multiplicative boost.\n    k_base : float, default 8.0\n        Base steepness for the sigmoid.  It is scaled by bin fullness.\n    alpha : float, default 0.2\n        Strength of the look\u2011ahead boost (0\u202f\u2264\u202falpha\u202f\u2264\u202f1).\n    random_state : int or np.random.Generator, optional\n        Seed or generator for a tiny random tie\u2011breaking noise.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (same shape as ``bins_remain_cap``).  Infeasible bins\n        (remaining capacity < ``item``) receive ``-np.inf``.\n    \"\"\"\n    # ------------------------------------------------------------------\n    # 1. Prepare inputs\n    # ------------------------------------------------------------------\n    bins = np.asarray(bins_remain_cap, dtype=float)\n    n_bins = bins.size\n\n    if n_bins == 0:\n        return np.empty(0, dtype=float)\n\n    # Infer bin capacity if not provided\n    if bin_capacity is None:\n        # Use the largest observed remaining capacity as a surrogate.\n        # Adding a tiny epsilon avoids division by zero.\n        bin_capacity = float(np.max(bins) + 1e-9)\n    else:\n        bin_capacity = float(bin_capacity)\n\n    # ------------------------------------------------------------------\n    # 2. Feasibility mask\n    # ------------------------------------------------------------------\n    feasible = bins >= item\n    if not np.any(feasible):\n        # No bin can host the item.\n        return np.full_like(bins, -np.inf, dtype=float)\n\n    # ------------------------------------------------------------------\n    # 3. Compute gaps and normalized gaps\n    # ------------------------------------------------------------------\n    gaps = bins - item                     # >= 0 for feasible bins\n    norm_gaps = gaps / bin_capacity        # scale to [0, 1] (approx.)\n    norm_gaps = np.clip(norm_gaps, 0.0, 1.0)\n\n    # ------------------------------------------------------------------\n    # 4. Dynamic sigmoid steepness based on bin fullness\n    # ------------------------------------------------------------------\n    # Fullness = used capacity / total capacity\n    fullness = (bin_capacity - bins) / bin_capacity          # [0, 1]\n    k = k_base * (1.0 + fullness)                           # shape (n_bins,)\n\n    # ------------------------------------------------------------------\n    # 5. Monotonic sigmoid on normalized gaps\n    # ------------------------------------------------------------------\n    # We want higher scores for tighter fits (smaller gaps).  Use the\n    # largest normalized gap as a reference and apply a decreasing sigmoid.\n    norm_gaps_feas = norm_gaps[feasible]\n    k_feas = k[feasible]\n\n    max_norm_gap = np.max(norm_gaps_feas)                   # reference\n    # Shift such that exact fits (gap = 0) get the largest positive argument.\n    shifted = max_norm_gap - norm_gaps_feas                  # larger => tighter fit\n    exponent = k_feas * shifted\n\n    # Clip exponent to avoid overflow in exp().\n    exponent = np.clip(exponent, -700.0, 700.0)\n\n    # Sigmoid (monotonic decreasing in original gap)\n    scores = 1.0 / (1.0 + np.exp(-exponent))                # in (0, 1)\n\n    # ------------------------------------------------------------------\n    # 6. Tiny random tie\u2011breaker\n    # ------------------------------------------------------------------\n    rng = np.random.default_rng(random_state)\n    scores += rng.uniform(0.0, 1e-6, size=scores.shape)\n\n    # ------------------------------------------------------------------\n    # 7. Optional look\u2011ahead boost\n    # ------------------------------------------------------------------\n    if lookahead_items is not None:\n        lookahead = np.asarray(lookahead_items, dtype=float)\n        if lookahead.size > 0:\n            remaining_after = gaps[feasible]               # capacity left after current placement\n            # Count how many look\u2011ahead items each bin could still fit\n            fits = (remaining_after[:, None] >= lookahead[None, :]).sum(axis=1)\n            fit_ratio = fits.astype(float) / float(lookahead.size)   # in [0, 1]\n            # Apply multiplicative boost\n            boost = 1.0 + np.clip(alpha, 0.0, 1.0) * fit_ratio\n            scores *= boost\n\n    # ------------------------------------------------------------------\n    # 8. Assemble final priority vector\n    # ------------------------------------------------------------------\n    priority = np.full_like(bins, -np.inf, dtype=float)\n    priority[feasible] = scores\n\n    return priority\n\n[Reflection]\nNormalize gaps, sigmoid with fullness\u2011scaled steepness, incorporate look\u2011ahead boost, tiny random tie\u2011breaker, avoid huge bonuses.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}