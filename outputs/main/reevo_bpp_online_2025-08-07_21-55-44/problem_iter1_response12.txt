```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Computes a priority for each bin using the Worst‑Fit strategy for the
    online Bin Packing Problem.  The bin with the highest priority will be
    chosen for the incoming item.

    For each bin we calculate the amount of free capacity that would remain
    after placing the item.  This value is used as the priority; bins that
    cannot accommodate the item receive a sentinel negative value (−∞) so
    they will never be chosen.

    Args:
        item: The size of the item that must be placed.
        bins_remain_cap: 1‑D numpy array holding the remaining capacity of each bin.

    Returns:
        A numpy array of floats, same shape as ``bins_remain_cap``.  Each element
        represents the priority of the corresponding bin.
    """
    # Ensure we are working with float values
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)
    item = float(item)

    # Compute the remaining capacity if the item were placed
    slack = bins_remain_cap - item

    # Bins that cannot fit the item receive a very negative priority
    # so they are never selected by argmax.
    priorities = np.where(slack >= 0, slack, -np.inf)

    return priorities
```
