{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute priority scores for bins in an online Bin Packing Problem.\n\n    The priority is composed of:\n      * Primary component: smaller bin index receives higher priority (first\u2011fit).\n      * Secondary component: tighter fit (smaller leftover capacity) breaks ties.\n      * Infeasible bins (cannot accommodate the item) receive -inf.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each bin.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores (same shape as ``bins_remain_cap``).\n    \"\"\"\n    # Ensure we are working with a float array\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Feasibility mask: bin can hold the item\n    feasible = caps >= item\n\n    # Primary ordering: smaller index => higher priority.\n    # Use negative indices: idx 0 -> 0, idx 1 -> -1, idx 2 -> -2, ...\n    idx = np.arange(caps.size, dtype=float)\n    primary = -idx\n\n    # Secondary ordering: tighter fit (smaller leftover) => higher priority.\n    leftover = caps - item                     # >= 0 for feasible bins\n    epsilon = 1e-6                             # tiny weight so primary dominates\n    secondary = -leftover * epsilon\n\n    # Combine components\n    scores = primary + secondary\n\n    # Mask infeasible bins\n    scores = np.where(feasible, scores, -np.inf)\n\n    return scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function for online Bin Packing that blends worst\u2011fit\n    with best\u2011fit using a softmax\u2011style score, temperature scaling,\n    and a linear waste penalty.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of the remaining capacity of each currently used bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin.  The bin with the highest score will\n        be selected.  Feasible bins that cannot accommodate the item receive\n        a score of -inf and are never chosen.\n    \"\"\"\n    # Ensure we are working with floats\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Start with all bins infeasible\n    priorities = np.full_like(caps, fill_value=-np.inf, dtype=float)\n\n    # Identify bins that can accept the item\n    feasible = caps >= item\n    if not np.any(feasible):\n        return priorities\n\n    # Leftover capacity if the item were placed in each feasible bin\n    leftover = caps[feasible] - item  # >= 0\n\n    # ---------- Heuristic parameters ----------\n    alpha = 0.5            # 0 \u2192 pure best\u2011fit, 1 \u2192 pure worst\u2011fit\n    penalty_factor = 0.1   # linear penalty proportional to wasted capacity\n    temperature = 1.0      # temperature for scaling (larger \u2192 flatter)\n\n    # ---------- Combine best\u2011fit and worst\u2011fit ----------\n    # Best\u2011fit score: tighter fit \u2192 higher priority (negative leftover)\n    best_score = -leftover\n    # Worst\u2011fit score: more remaining capacity \u2192 higher priority (positive leftover)\n    worst_score = leftover\n    # Linear blend\n    combined = (1 - alpha) * best_score + alpha * worst_score\n\n    # ---------- Penalize waste ----------\n    combined -= penalty_factor * leftover  # larger leftover => more penalty\n\n    # ---------- Temperature scaling ----------\n    if temperature <= 0:\n        temperature = 1e-8\n    combined /= temperature\n\n    # Assign the computed priorities to the feasible bins\n    priorities[feasible] = combined\n\n    return priorities\n\n[Reflection]\nBlend best\u2011fit and worst\u2011fit, apply temperature scaling, add waste penalty, ensure feasibility, tune \u03b1 and temperature.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}