```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Softmaxâ€‘based priority for each bin in online bin packing.

    A bin with the item that would fill it most (i.e. leaving minimal
    leftover) receives the highest probability.  Bins that cannot hold
    the item are given a negligible priority.  The probabilities sum to
    one, providing a convenient score for selecting the bin with the
    maximum priority.

    Args:
        item: Size of the incoming item.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        A float array of the same shape as *bins_remain_cap* containing
        a softmax priority for each bin.
    """
    # Compute leftover after placing the item; bins that cannot fit will
    # get a huge negative value to zero their probability after softmax.
    leftover = bins_remain_cap - item
    fit_val = np.where(leftover >= 0, -leftover, -1e9)

    # Numerically stable softmax
    max_fit = np.max(fit_val)
    exp_fit = np.exp(fit_val - max_fit)

    sum_exp = np.sum(exp_fit)
    if sum_exp <= 0:            # no bin can accommodate the item
        return np.zeros_like(bins_remain_cap, dtype=float)

    priority = exp_fit / sum_exp
    return priority
```
