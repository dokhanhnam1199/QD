```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Compute priority scores for bins in an online Bin Packing Problem.

    The priority is composed of:
      * Primary component: smaller bin index receives higher priority (first‑fit).
      * Secondary component: tighter fit (smaller leftover capacity) breaks ties.
      * Infeasible bins (cannot accommodate the item) receive -inf.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities for each bin.

    Returns
    -------
    np.ndarray
        Array of priority scores (same shape as ``bins_remain_cap``).
    """
    # Ensure we are working with a float array
    caps = np.asarray(bins_remain_cap, dtype=float)

    # Feasibility mask: bin can hold the item
    feasible = caps >= item

    # Primary ordering: smaller index => higher priority.
    # Use negative indices: idx 0 -> 0, idx 1 -> -1, idx 2 -> -2, ...
    idx = np.arange(caps.size, dtype=float)
    primary = -idx

    # Secondary ordering: tighter fit (smaller leftover) => higher priority.
    leftover = caps - item                     # >= 0 for feasible bins
    epsilon = 1e-6                             # tiny weight so primary dominates
    secondary = -leftover * epsilon

    # Combine components
    scores = primary + secondary

    # Mask infeasible bins
    scores = np.where(feasible, scores, -np.inf)

    return scores
```
