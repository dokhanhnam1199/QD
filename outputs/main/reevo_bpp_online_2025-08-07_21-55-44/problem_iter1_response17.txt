```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Random-fit priority score, selecting uniformly at random among bins that can
    accommodate the incoming item.

    Parameters
    ----------
    item : float
        Size of the incoming item to be packed.
    bins_remain_cap : np.ndarray
        1-D array containing the remaining capacity of each bin.

    Returns
    -------
    priorities : np.ndarray
        Array of the same shape as ``bins_remain_cap``.  Feasible bins (those with
        remaining capacity >= ``item``) receive a uniform random priority in
        the range [0, 1).  Infeasible bins are given a sentinel value of
        ``-np.inf`` so they are never chosen when the algorithm selects the
        bin with the highest priority.
    """
    # Find bins that can accommodate the item
    feasible_mask = bins_remain_cap >= item

    # Initialize all priorities to -inf (infeasible)
    priorities = np.full_like(bins_remain_cap, fill_value=-np.inf, dtype=float)

    # Assign random priorities only to feasible bins
    if feasible_mask.any():
        # Uniform random numbers in [0, 1) for the feasible bins
        priorities[feasible_mask] = np.random.rand(feasible_mask.sum())

    return priorities
```
