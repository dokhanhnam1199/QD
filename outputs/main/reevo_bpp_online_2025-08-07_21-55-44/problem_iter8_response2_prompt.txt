{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    *,\n    exact_fit_bonus: float = 1e5,\n    slack_decay: float = 10.0,\n    next_item_factor: float = 0.1,\n    jitter: float = 1e-6,\n    atol: float = 1e-12,\n) -> np.ndarray:\n    \"\"\"\n    Compute priority scores for bins in an online Bin Packing Problem.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each currently opened bin.\n    exact_fit_bonus : float, optional\n        Large bonus added for bins that can accommodate the item exactly.\n    slack_decay : float, optional\n        Controls the steepness of the exponential slack bonus.\n    next_item_factor : float, optional\n        Small bonus for bins that can still hold another item of the same size\n        after the current placement.\n    jitter : float, optional\n        Deterministic tie\u2011breaker magnitude (lower\u2011index bins get a tiny\n        advantage).\n    atol : float, optional\n        Absolute tolerance for detecting an exact fit.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores of the same shape as ``bins_remain_cap``.  Feasible\n        bins receive finite scores; infeasible bins receive ``-np.inf`` and\n        are never selected.\n    \"\"\"\n    # Convert to a 1\u2011D float array; avoid modifying the caller's array\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Initialise all scores to -inf (infeasible)\n    priority = np.full_like(caps, -np.inf, dtype=float)\n\n    if n_bins == 0:\n        return priority\n\n    # Slack after placing the item\n    slack = caps - item\n    feasible = slack >= 0\n\n    # No feasible bins: return early\n    if not np.any(feasible):\n        return priority\n\n    # Normalise slack within feasible bins to [0, 1]\n    max_slack = np.max(slack[feasible])  # >= 0\n    slack_norm = slack[feasible] / (max_slack + atol)\n\n    # Exponential slack bonus: small slack \u2192 large bonus\n    slack_bonus = np.exp(-slack_decay * slack_norm)\n\n    # Base priority from slack bonus\n    priority[feasible] = slack_bonus\n\n    # Anticipation bonus: still room for another item of the same size\n    anticipation_mask = feasible & (slack >= item)\n    priority[anticipation_mask] += next_item_factor\n\n    # Exact\u2011fit bonus\n    exact_fit_mask = feasible & np.isclose(slack, 0.0, atol=atol)\n    priority[exact_fit_mask] += exact_fit_bonus\n\n    # Deterministic tie\u2011breaker: favor lower\u2011index bins slightly\n    priority += -np.arange(n_bins, dtype=float) * jitter\n\n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    item: float,\n    bins_remain_cap: Union[np.ndarray, list, tuple],\n    *,\n    bin_capacity: Optional[float] = None,\n    lookahead_items: Optional[Union[np.ndarray, list, tuple]] = None,\n    alpha: float = 0.2,\n    k_base: float = 8.0,\n    random_state: Optional[Union[int, np.random.Generator]] = None,\n) -> np.ndarray:\n    \"\"\"\n    Compute priority scores for bins in an online bin\u2011packing setting.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : array\u2011like of float\n        Remaining capacities of the existing bins.\n    bin_capacity : float, optional\n        Fixed capacity of each bin. If omitted, inferred from the maximum\n        observed remaining capacity (augmented by ``item`` if needed).\n    lookahead_items : array\u2011like of float, optional\n        Sizes of future items that may arrive soon. Bins that can still fit\n        more of these items after placing the current item receive a boost.\n    alpha : float, default 0.2\n        Strength of the look\u2011ahead boost (multiplicative factor).\n    k_base : float, default 8.0\n        Base steepness for the sigmoid; scaled by each bin\u2019s fullness.\n    random_state : int or np.random.Generator, optional\n        Seed or generator for the tiny random tie\u2011breaker.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin; infeasible bins receive ``-np.inf``.\n    \"\"\"\n    # ------------------------------------------------------------------\n    # Normalise inputs\n    # ------------------------------------------------------------------\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    n_bins = caps.size\n    if n_bins == 0:\n        return np.empty(0, dtype=float)\n\n    # ------------------------------------------------------------------\n    # Infer bin capacity if not supplied\n    # ------------------------------------------------------------------\n    if bin_capacity is None:\n        max_cap = np.max(caps)\n        # Ensure the inferred capacity can hold the current item\n        bin_capacity = float(max_cap if max_cap >= item else max_cap + item)\n    if bin_capacity <= 0:\n        raise ValueError(\"bin_capacity must be positive.\")\n\n    # ------------------------------------------------------------------\n    # Feasibility mask\n    # ------------------------------------------------------------------\n    feasible = caps >= item\n    if not np.any(feasible):\n        return np.full(n_bins, -np.inf, dtype=float)\n\n    # ------------------------------------------------------------------\n    # Compute leftover capacity after placing the item (feasible bins only)\n    # ------------------------------------------------------------------\n    leftover = caps[feasible] - item                # >= 0\n    gap_norm = leftover / bin_capacity               # normalised gap in [0, 1)\n\n    # ------------------------------------------------------------------\n    # Dynamic sigmoid steepness based on bin fullness\n    # ------------------------------------------------------------------\n    # Fullness before placement (fraction already used)\n    fullness = (bin_capacity - caps[feasible]) / bin_capacity\n    k = k_base * (1.0 + fullness)                    # per\u2011bin steepness\n\n    # ------------------------------------------------------------------\n    # Monotonic decreasing sigmoid: high score for small gap_norm\n    # ------------------------------------------------------------------\n    # Shift sigmoid so that gap_norm = 0.5 maps to a moderate score.\n    arg = k * (0.5 - gap_norm)\n    # Clip to avoid overflow in exp\n    arg = np.clip(arg, -700.0, 700.0)\n    scores = 1.0 / (1.0 + np.exp(-arg))\n\n    # ------------------------------------------------------------------\n    # Tiny random tie\u2011breaker\n    # ------------------------------------------------------------------\n    rng = np.random.default_rng(random_state)\n    eps = 1e-12 * max(1.0, np.max(np.abs(scores)))\n    scores += rng.uniform(0.0, eps, size=scores.shape)\n\n    # ------------------------------------------------------------------\n    # Optional look\u2011ahead boost\n    # ------------------------------------------------------------------\n    if lookahead_items is not None and len(lookahead_items) > 0:\n        look = np.asarray(lookahead_items, dtype=float)\n        # For each feasible bin, count future items that would still fit\n        fits = (look[None, :] <= leftover[:, None]).sum(axis=1)\n        fit_ratio = fits / float(look.size)        # in [0, 1]\n        # Multiplicative boost (clipped to keep scores bounded)\n        scores = scores * (1.0 + alpha * fit_ratio)\n        scores = np.clip(scores, 0.0, 1.0)\n\n    # ------------------------------------------------------------------\n    # Assemble full priority vector\n    # ------------------------------------------------------------------\n    priority = np.full(n_bins, -np.inf, dtype=float)\n    priority[feasible] = scores\n\n    return priority\n\n[Reflection]\nEmploy capacity inference, dynamic sigmoid steepness based on fullness, lookahead boosts, and tiny random tie\u2011breakers for smoother priorities.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}