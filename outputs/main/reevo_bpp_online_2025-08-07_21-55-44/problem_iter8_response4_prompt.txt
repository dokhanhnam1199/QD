{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    *,\n    exact_fit_bonus: float = 1e5,\n    slack_decay: float = 10.0,\n    next_item_factor: float = 0.1,\n    jitter: float = 1e-6,\n    atol: float = 1e-12,\n) -> np.ndarray:\n    \"\"\"\n    Compute priority scores for bins in an online Bin Packing Problem.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each currently opened bin.\n    exact_fit_bonus : float, optional\n        Large bonus added for bins that can accommodate the item exactly.\n    slack_decay : float, optional\n        Controls the steepness of the exponential slack bonus.\n    next_item_factor : float, optional\n        Small bonus for bins that can still hold another item of the same size\n        after the current placement.\n    jitter : float, optional\n        Deterministic tie\u2011breaker magnitude (lower\u2011index bins get a tiny\n        advantage).\n    atol : float, optional\n        Absolute tolerance for detecting an exact fit.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores of the same shape as ``bins_remain_cap``.  Feasible\n        bins receive finite scores; infeasible bins receive ``-np.inf`` and\n        are never selected.\n    \"\"\"\n    # Convert to a 1\u2011D float array; avoid modifying the caller's array\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Initialise all scores to -inf (infeasible)\n    priority = np.full_like(caps, -np.inf, dtype=float)\n\n    if n_bins == 0:\n        return priority\n\n    # Slack after placing the item\n    slack = caps - item\n    feasible = slack >= 0\n\n    # No feasible bins: return early\n    if not np.any(feasible):\n        return priority\n\n    # Normalise slack within feasible bins to [0, 1]\n    max_slack = np.max(slack[feasible])  # >= 0\n    slack_norm = slack[feasible] / (max_slack + atol)\n\n    # Exponential slack bonus: small slack \u2192 large bonus\n    slack_bonus = np.exp(-slack_decay * slack_norm)\n\n    # Base priority from slack bonus\n    priority[feasible] = slack_bonus\n\n    # Anticipation bonus: still room for another item of the same size\n    anticipation_mask = feasible & (slack >= item)\n    priority[anticipation_mask] += next_item_factor\n\n    # Exact\u2011fit bonus\n    exact_fit_mask = feasible & np.isclose(slack, 0.0, atol=atol)\n    priority[exact_fit_mask] += exact_fit_bonus\n\n    # Deterministic tie\u2011breaker: favor lower\u2011index bins slightly\n    priority += -np.arange(n_bins, dtype=float) * jitter\n\n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute a priority score for each bin in an online Bin Packing Problem.\n\n    The scoring scheme combines:\n      * A massive bonus for exact fits.\n      * A quadratic penalty on leftover capacity (smaller leftover \u2192 higher priority).\n      * An adaptive weighting factor (\u03b1) that reacts to the distribution of\n        leftover capacities among feasible bins.\n      * A tiny index\u2011based epsilon tie\u2011breaker for deterministic selection.\n      * Infeasible bins receive ``-np.inf`` and are never chosen.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each bin.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores (higher is better).  The caller should select\n        the bin with the maximal score.\n    \"\"\"\n    # Ensure we work with a float array\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    n_bins = caps.shape[0]\n\n    # Initialise all scores as infeasible\n    scores = np.full(n_bins, -np.inf, dtype=float)\n\n    # Feasibility mask: bins that can accommodate the item\n    feasible = caps >= item\n    if not feasible.any():\n        return scores\n\n    # Remaining capacity after placing the item\n    leftover = caps - item  # >= 0 for feasible bins\n\n    # -----------------------------------------------------------------\n    # Adaptive weighting: compute a coefficient \u03b1 based on the spread\n    # of leftover capacities among feasible bins.\n    # -----------------------------------------------------------------\n    leftover_feas = leftover[feasible]\n    mean_left = leftover_feas.mean()\n    std_left = leftover_feas.std()\n    # Coefficient of variation (cv) captures relative dispersion; avoid div\u2011by\u2011zero\n    cv = std_left / mean_left if mean_left > 0 else 0.0\n    base_alpha = 1e-3               # baseline quadratic strength\n    alpha = base_alpha * (1.0 + cv) # larger cv \u2192 stronger quadratic penalty\n\n    # -----------------------------------------------------------------\n    # Quadratic penalty: prioritize bins with smaller leftovers\n    # -----------------------------------------------------------------\n    # priority = -leftover - \u03b1 * leftover\u00b2  (more negative \u2192 lower priority)\n    base_priority = -leftover_feas - alpha * (leftover_feas ** 2)\n\n    # -----------------------------------------------------------------\n    # Tiny tie\u2011breaker based on bin index (deterministic)\n    # -----------------------------------------------------------------\n    epsilon = 1e-12\n    tie_breaker = -epsilon * np.arange(n_bins, dtype=float)\n\n    # Assign base priority (including tie\u2011breaker) to feasible bins\n    scores[feasible] = base_priority + tie_breaker[feasible]\n\n    # -----------------------------------------------------------------\n    # Exact\u2011fit detection: give a massive bonus to bins that fit the item perfectly\n    # -----------------------------------------------------------------\n    exact_tolerance = 1e-9\n    exact_fit = feasible & np.isclose(leftover, 0.0, atol=exact_tolerance)\n    if exact_fit.any():\n        EXACT_BONUS = 1e12  # dominates any other term\n        scores[exact_fit] = EXACT_BONUS + tie_breaker[exact_fit]\n\n    return scores\n\n[Reflection]\nUse adaptive slack weighting, massive exact\u2011fit bonus, index\u2011based tie\u2011breaker, and a non\u2011linear leftover penalty for improved bin selection.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}