```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Deterministic priority scoring for online bin packing.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of the current bins.

    Returns
    -------
    np.ndarray
        Priority scores (higher = more desirable).  The caller should
        select the bin with the maximal score.

    Notes
    -----
    * Exact fits receive a huge bonus.
    * Feasible bins are scored with a quadratic penalty on leftover.
    * A tiny index‑based epsilon breaks ties deterministically.
    * Infeasible bins receive ``-np.inf`` so they are never selected.
    """
    # Flatten input to 1‑D for vectorised operations
    caps = np.asarray(bins_remain_cap, dtype=float).ravel()
    n_bins = caps.size

    # Handle empty input
    if n_bins == 0:
        return np.empty(0, dtype=float)

    # Default priorities: infeasible bins
    priorities = np.full(n_bins, -np.inf, dtype=float)

    # Feasibility mask
    feasible = caps >= item
    if not np.any(feasible):
        return priorities.reshape(bins_remain_cap.shape)

    # Leftover after placing the item
    leftover = caps - item

    # Base priority: negative leftover plus a small quadratic penalty
    alpha = 1e-3
    base_priority = -leftover - alpha * (leftover ** 2)

    # Deterministic tie‑breaker: tiny epsilon weighted by bin index
    epsilon = 1e-12
    tie_breaker = -epsilon * np.arange(n_bins, dtype=float)
    base_priority += tie_breaker

    # Assign base priority to feasible bins
    priorities[feasible] = base_priority[feasible]

    # Exact fit detection and massive bonus
    exact_tolerance = 1e-9
    exact_fit = feasible & np.isclose(leftover, 0.0, atol=exact_tolerance)
    if np.any(exact_fit):
        EXACT_BONUS = 1e9
        priorities[exact_fit] = EXACT_BONUS + tie_breaker[exact_fit]

    return priorities.reshape(bins_remain_cap.shape)
```
