```python
import numpy as np
from typing import Optional, Union, Sequence


def priority_v2(
    item: float,
    bins_remain_cap: Union[np.ndarray, Sequence[float]],
    *,
    bin_capacity: Optional[float] = None,
    lookahead_items: Optional[Union[np.ndarray, Sequence[float]]] = None,
    k_base: float = 8.0,
    alpha: float = 0.2,
    jitter: float = 1e-7,
    exact_fit_bonus: float = 0.15,
    random_state: Optional[Union[int, np.random.Generator]] = None,
) -> np.ndarray:
    """
    Compute priority scores for bins in an online Bin Packing problem.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : array‑like of float
        Remaining capacity of each currently opened bin.
    bin_capacity : float, optional
        Fixed capacity of a bin.  If ``None`` a small estimate is derived
        from the data (max remaining capacity + the incoming item).
    lookahead_items : array‑like of float, optional
        Sizes of future items.  Bins that can also accommodate more of these
        items after the current placement receive a multiplicative boost.
    k_base : float, default 8.0
        Base steepness for the sigmoid.  Scaled by bin fullness.
    alpha : float, default 0.2
        Strength of the look‑ahead boost (0 ≤ alpha ≤ 1).
    jitter : float, default 1e-7
        Amplitude of the random tie‑breaker noise.
    exact_fit_bonus : float, default 0.15
        Small additive bonus for bins that fit the item exactly.
    random_state : int or np.random.Generator, optional
        Seed or generator for the random tie‑breaker.

    Returns
    -------
    np.ndarray
        Priority scores (same shape as ``bins_remain_cap``).  Infeasible bins
        (remaining capacity < ``item``) receive ``-np.inf``.
    """
    # ------------------------------------------------------------------
    # 1. Prepare input
    # ------------------------------------------------------------------
    bins = np.asarray(bins_remain_cap, dtype=float).ravel()
    n_bins = bins.size

    if n_bins == 0:
        return np.empty(0, dtype=float)

    # ------------------------------------------------------------------
    # 2. Infer bin capacity if not provided
    # ------------------------------------------------------------------
    if bin_capacity is None:
        # Use the largest observed remaining capacity plus the current item.
        # Adding a tiny epsilon guards against division‑by‑zero.
        bin_capacity = float(np.max(bins) + item + 1e-9)
    else:
        bin_capacity = float(bin_capacity)

    if bin_capacity <= 0.0:
        raise ValueError("Bin capacity must be positive.")

    # ------------------------------------------------------------------
    # 3. Feasibility mask
    # ------------------------------------------------------------------
    feasible = bins >= item
    if not np.any(feasible):
        # No bin can host the item.
        return np.full_like(bins, -np.inf, dtype=float)

    # ------------------------------------------------------------------
    # 4. Slack (remaining capacity after placing the item)
    # ------------------------------------------------------------------
    slack = bins - item                       # may be negative for infeasible bins

    # ------------------------------------------------------------------
    # 5. Normalised slack (gap) and bin fullness (used fraction)
    # ------------------------------------------------------------------
    # Normalise slack to [0, 1] using the (estimated) bin capacity.
    norm_gap = np.clip(slack / bin_capacity, 0.0, 1.0)

    # Fullness = used capacity / total capacity
    fullness = np.clip((bin_capacity - bins) / bin_capacity, 0.0, 1.0)

    # ------------------------------------------------------------------
    # 6. Dynamic sigmoid steepness based on bin fullness
    # ------------------------------------------------------------------
    # Bins that are already more full get a steeper curve, rewarding
    # tight fits even more strongly.
    k = k_base * (1.0 + fullness)               # shape (n_bins,)

    # ------------------------------------------------------------------
    # 7. Sigmoid score favouring tighter fits
    # ------------------------------------------------------------------
    # We want a monotone decreasing function of the normalised gap.
    # Using shift = 1 - norm_gap makes a perfect fit (gap=0) give the
    # largest exponent, hence the highest sigmoid value.
    shift = 1.0 - norm_gap                       # larger -> tighter fit
    exponent = k * shift                        # shape (n_bins,)

    # feasible bins only
    # Clip exponent to avoid overflow in exp()
    exponent = np.clip(exponent, -700.0, 700.0)

    # Logistic sigmoid in (0, 1)
    scores = 1.0 / (1.0 + np.exp(-exponent))

    # ------------------------------------------------------------------
    # 8. Exact‑fit bonus (small additive bump)
    # ------------------------------------------------------------------
    exact_fit_mask = feasible & np.isclose(slack, 0.0, atol=1e-12)
    scores[exact_fit_mask] += exact_fit_bonus

    # ------------------------------------------------------------------
    # 9. Look‑ahead boost (optional)
    # ------------------------------------------------------------------
    if lookahead_items is not None:
        lookahead = np.asarray(lookahead_items, dtype=float).ravel()
        if lookahead.size > 0:
            # Capacity left after the current placement for each feasible bin.
            remaining_after = slack[feasible]                      # >= 0
            # Count how many look‑ahead items each bin could still accommodate.
            fits = (remaining_after[:, None] >= lookahead[None, :]).sum(axis=1)
            fit_ratio = fits.astype(float) / float(lookahead.size)                                   # in [0, 1]
            boost = 1.0 + np.clip(alpha, 0.0, 1.0) * fit_ratio
            scores[feasible] *= boost

    # ------------------------------------------------------------------
    # 10. Tiny random tie‑breaker
    # ------------------------------------------------------------------
    rng = np.random.default_rng(random_state)
    scores[feasible] += rng.uniform(0.0, jitter, size=np.count_nonzero(feasible))

    # ------------------------------------------------------------------
    # 11. Assemble final priority vector
    # ------------------------------------------------------------------
    priority = np.full_like(bins, -np.inf, dtype=float)
    priority[feasible] = scores[feasible]

    return priority
```
