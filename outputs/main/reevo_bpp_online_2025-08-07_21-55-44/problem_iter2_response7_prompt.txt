{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Computes a priority for each bin using the Worst\u2011Fit strategy for the\n    online Bin Packing Problem.  The bin with the highest priority will be\n    chosen for the incoming item.\n\n    For each bin we calculate the amount of free capacity that would remain\n    after placing the item.  This value is used as the priority; bins that\n    cannot accommodate the item receive a sentinel negative value (\u2212\u221e) so\n    they will never be chosen.\n\n    Args:\n        item: The size of the item that must be placed.\n        bins_remain_cap: 1\u2011D numpy array holding the remaining capacity of each bin.\n\n    Returns:\n        A numpy array of floats, same shape as ``bins_remain_cap``.  Each element\n        represents the priority of the corresponding bin.\n    \"\"\"\n    # Ensure we are working with float values\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n    item = float(item)\n\n    # Compute the remaining capacity if the item were placed\n    slack = bins_remain_cap - item\n\n    # Bins that cannot fit the item receive a very negative priority\n    # so they are never selected by argmax.\n    priorities = np.where(slack >= 0, slack, -np.inf)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"First\u2011Fit priority for the online Bin Packing Problem.\n\n    The returned scores satisfy the First\u2011Fit rule:\n      * Bins that cannot hold ``item`` receive ``-np.inf`` so they will never be\n        chosen.\n      * Among the feasible bins, the one with the smallest index obtains the\n        highest score (i.e., the \u201cfirst\u201d bin).  If several bins share the same\n        index (theoretically impossible) a secondary tie\u2011breaker prefers the\n        tighter fit (smaller leftover capacity).\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of the current bins (1\u2011D array).\n\n    Returns\n    -------\n    np.ndarray\n        An array of the same shape as ``bins_remain_cap`` containing the\n        priority score for each bin.\n    \"\"\"\n    # Convert to float for arithmetic safety\n    caps = bins_remain_cap.astype(float)\n\n    # Feasibility mask: bin can accommodate the item\n    feasible = caps >= item\n\n    # Primary component: enforce the \"first\" bin rule.\n    # Bin 0 -> 0, Bin 1 -> -1, Bin 2 -> -2, ...  Higher value means higher priority.\n    idx = np.arange(caps.size, dtype=float)\n    primary = -idx\n\n    # Secondary component (tie\u2011breaker): prefer a tighter fit.\n    # The leftover after placing the item is (caps - item).\n    # Smaller leftover \u2192 larger secondary priority.\n    # Scale it by a tiny epsilon so it never overpowers the primary ordering.\n    epsilon = 1e-4\n    secondary = - (caps - item) * epsilon\n\n    # Combine components\n    scores = primary + secondary\n\n    # Infeasible bins should never be selected\n    scores = np.where(feasible, scores, -np.inf)\n\n    return scores\n\n[Reflection]\nUse primary index ordering plus secondary fit tie\u2011breaker; scale secondary with epsilon; mask infeasible bins.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}