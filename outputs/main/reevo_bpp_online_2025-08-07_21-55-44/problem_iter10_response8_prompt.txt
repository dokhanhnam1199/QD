{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    item: float,\n    bins_remain_cap: Union[np.ndarray, list, tuple],\n    *,\n    bin_capacity: Optional[float] = None,\n    lookahead_items: Optional[Union[np.ndarray, list, tuple]] = None,\n    k_base: float = 8.0,\n    alpha: float = 0.2,\n    random_state: Optional[Union[int, np.random.Generator]] = None,\n    jitter: float = 1e-6,\n) -> np.ndarray:\n    \"\"\"\n    Compute priority scores for bins in an online Bin Packing problem.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : array\u2011like of float\n        Remaining capacity of each currently opened bin.\n    bin_capacity : float, optional\n        Fixed capacity of a bin. If ``None`` the maximum remaining capacity\n        observed in ``bins_remain_cap`` is used.\n    lookahead_items : array\u2011like of float, optional\n        Sizes of future items.  Bins that can still accommodate more of these\n        items after the current placement receive a multiplicative boost.\n    k_base : float, default 8.0\n        Base steepness for the adaptive sigmoid.  The steepness is scaled by\n        bin fullness so fuller bins get a steeper curve.\n    alpha : float, default 0.2\n        Strength of the look\u2011ahead boost (0\u202f\u2264\u202falpha\u202f\u2264\u202f1).\n    random_state : int or np.random.Generator, optional\n        Seed or generator for a tiny random tie\u2011breaking noise.\n    jitter : float, default 1e-6\n        Deterministic tie\u2011breaker magnitude (lower\u2011index bins get a tiny\n        advantage).\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (same shape as ``bins_remain_cap``).  Infeasible bins\n        (remaining capacity < ``item``) receive ``-np.inf`` and are never\n        selected.\n    \"\"\"\n    # ------------------------------------------------------------------\n    # 1. Prepare inputs\n    # ------------------------------------------------------------------\n    bins = np.asarray(bins_remain_cap, dtype=float)\n    n_bins = bins.size\n\n    if n_bins == 0:\n        return np.empty(0, dtype=float)\n\n    # Infer bin capacity if not provided\n    if bin_capacity is None:\n        bin_capacity = float(np.max(bins) + 1e-9)\n    else:\n        bin_capacity = float(bin_capacity)\n\n    # ------------------------------------------------------------------\n    # 2. Feasibility mask\n    # ------------------------------------------------------------------\n    feasible = bins >= item\n    if not np.any(feasible):\n        # No bin can host the item.\n        return np.full_like(bins, -np.inf, dtype=float)\n\n    # ------------------------------------------------------------------\n    # 3. Compute gaps and normalized gaps\n    # ------------------------------------------------------------------\n    slack = bins - item  # remaining capacity after placing the item\n    norm_gaps = slack / bin_capacity  # [0,1] (or slightly >1 for overflow)\n    norm_gaps = np.clip(norm_gaps, 0.0, 1.0)\n\n    # ------------------------------------------------------------------\n    # 4. Dynamic sigmoid steepness based on bin fullness\n    # ------------------------------------------------------------------\n    fullness = (bin_capacity - bins) / bin_capacity  # [0,1]\n    fullness = np.clip(fullness, 0.0, 1.0)\n    k = k_base * (1.0 + fullness)  # steeper for fuller bins\n\n    # ------------------------------------------------------------------\n    # 5. Adaptive sigmoid on normalized gaps\n    # ------------------------------------------------------------------\n    # Shift gaps so that the smallest gap gets the highest score\n    feasible_gaps = norm_gaps[feasible]\n    feasible_k = k[feasible]\n    max_norm_gap = np.max(feasible_gaps)\n    shift = max_norm_gap - feasible_gaps  # larger for tighter fits\n    exponent = feasible_k * shift\n    exponent = np.clip(exponent, -700.0, 700.0)  # avoid overflow\n    scores = 1.0 / (1.0 + np.exp(-exponent))  # in (0.5, 1]\n\n    # ------------------------------------------------------------------\n    # 6. Tiny random tie\u2011breaker\n    # ------------------------------------------------------------------\n    rng = np.random.default_rng(random_state)\n    noise = rng.uniform(0.0, 1e-6, size=scores.shape)\n    scores += noise\n\n    # ------------------------------------------------------------------\n    # 7. Optional look\u2011ahead boost\n    # ------------------------------------------------------------------\n    if lookahead_items is not None:\n        lookahead = np.asarray(lookahead_items, dtype=float)\n        if lookahead.size > 0:\n            remaining_after = slack[feasible]  # capacity left after placement\n            # Count how many lookahead items each bin can still fit\n            fits = (remaining_after[:, None] >= lookahead[None, :]).sum(axis=1)\n            fit_ratio = fits.astype(float) / float(lookahead.size)  # [0,1]\n            # Apply multiplicative boost\n            boost = 1.0 + np.clip(alpha, 0.0, 1.0) * fit_ratio\n            scores *= boost\n\n    # ------------------------------------------------------------------\n    # 8. Assemble final priority vector\n    # ------------------------------------------------------------------\n    priority = np.full_like(bins, -np.inf, dtype=float)\n    priority[feasible] = scores\n\n    # ------------------------------------------------------------------\n    # 9. Deterministic tie\u2011breaker\n    # ------------------------------------------------------------------\n    priority += -np.arange(n_bins, dtype=float) * jitter\n\n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    *,\n    bin_capacity: float = 1.0,\n    exact_fit_bonus: float = 1e9,\n    slack_weight: float = 1.0,\n    new_bin_penalty: float = 0.2,\n    epsilon: float = 1e-12,\n) -> np.ndarray:\n    \"\"\"\n    Compute priority scores for an online Bin Packing decision.\n\n    For each currently opened bin the function returns a score that rewards\n    small waste (linear slack penalty) and gives a huge bonus for exact fits.\n    A virtual new bin is appended as the last entry; opening a new bin incurs\n    an extra waste penalty controlled by ``new_bin_penalty``.  A tiny\n    deterministic tie\u2011breaker (``epsilon``) prefers lower\u2011index bins.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of already opened bins.\n    bin_capacity : float, optional\n        Fixed capacity of every bin (default 1.0).\n    exact_fit_bonus : float, optional\n        Large bonus added when a placement would fill a bin exactly.\n    slack_weight : float, optional\n        Linear weight for the normalized slack (waste). Larger values increase\n        the penalty for waste.\n    new_bin_penalty : float, optional\n        Multiplicative factor applied to the waste of a newly opened bin\n        (e.g., 0.2 adds a 20\u202f% penalty).\n    epsilon : float, optional\n        Tiny value used for deterministic tie\u2011breaking.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores with shape ``(len(bins_remain_cap) + 1,)``.  The last\n        element corresponds to the virtual new bin.  Infeasible bins receive\n        ``-np.inf`` and will never be selected.\n    \"\"\"\n    # Ensure a 1\u2011D NumPy array of floats\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # ---------- Existing bins ----------\n    # Waste (remaining capacity after placing the item)\n    waste = caps - item\n    feasible = waste >= -epsilon  # tolerate tiny numerical negatives\n\n    # Normalized slack (waste as fraction of bin capacity)\n    slack = np.where(feasible, waste / bin_capacity, np.inf)\n\n    # Base priority: linear penalty on slack (smaller slack \u2192 higher priority)\n    base_priority = np.where(feasible, -slack_weight * slack, -np.inf)\n\n    # Exact\u2011fit bonus\n    exact_fit_mask = feasible & np.isclose(waste, 0.0, atol=epsilon)\n    base_priority = np.where(\n        exact_fit_mask,\n        base_priority + exact_fit_bonus,\n        base_priority,\n    )\n\n    # Deterministic tie\u2011breaker (favor lower indices)\n    tie_breaker = -np.arange(n_bins, dtype=float) * epsilon\n    base_priority += tie_breaker\n\n    # ---------- Virtual new bin ----------\n    waste_new = bin_capacity - item\n    if waste_new < -epsilon:\n        # Item does not fit into an empty bin \u2192 infeasible\n        new_bin_priority = -np.inf\n    else:\n        slack_new = waste_new / bin_capacity\n        # Apply penalty for opening a new bin\n        new_bin_priority = -slack_weight * slack_new * (1.0 + new_bin_penalty)\n\n        # Exact\u2011fit bonus for a perfect new bin\n        if np.isclose(waste_new, 0.0, atol=epsilon):\n            new_bin_priority += exact_fit_bonus\n\n        # Tie\u2011breaker for the virtual bin (place it after all real bins)\n        new_bin_priority += -n_bins * epsilon\n\n    # Append the virtual bin priority\n    priorities = np.append(base_priority, new_bin_priority)\n\n    return priorities\n\n[Reflection]\nLinear slack penalty, massive exact\u2011fit bonus, modest new\u2011bin penalty, deterministic tie\u2011breaker, avoid complex sigmoids.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}