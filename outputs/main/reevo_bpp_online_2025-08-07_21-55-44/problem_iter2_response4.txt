```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Computes priority scores for placing an incoming item in existing bins.

    Priority is defined as the negative waste (unused space) that would remain after
    placing the item.  Bins that cannot accommodate the item receive a priority of
    -inf, guaranteeing they are never selected.  In case several bins would leave
    the same amount of waste, a tiny deterministic bias favouring the lowest‑indexed
    bin is added, ensuring stable behaviour.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities of the currently open bins.

    Returns
    -------
    np.ndarray
        Array of priority scores, one per bin.  The caller should select the bin
        with the maximum priority.
    """
    # Ensure the input is a NumPy array of float type
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)

    # Compute waste if the item were placed in each bin
    waste = bins_remain_cap - item

    # Determine feasible bins (non‑negative waste)
    feasible = waste >= 0

    # Base priority: negative waste (larger => smaller waste)
    base_priority = np.where(feasible, -waste, -np.inf)

    # Deterministic tie‑breaker: smaller index gets a tiny advantage
    epsilon = 1e-12
    tie_breaker = -np.arange(bins_remain_cap.size, dtype=float) * epsilon

    return base_priority + tie_breaker
```
