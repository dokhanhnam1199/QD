{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function using the Worst Fit strategy.\n\n    The priority returned for a bin equals the remaining capacity that would be left\n    after placing the given `item`.  The larger this value, the worse the fit, so the\n    bin with the maximum priority is the best choice.  Bins that cannot accommodate\n    the item receive a priority of -inf, ensuring they are never selected.\n\n    Args:\n        item: Size of the item to place.\n        bins_remain_cap: 1-D array of remaining capacities for each bin.\n\n    Returns:\n        np.ndarray of priority scores, same shape as `bins_remain_cap`.\n    \"\"\"\n    # Determine which bins can accommodate the item\n    can_fit = bins_remain_cap >= item\n\n    # Start with very low priorities for all bins\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # For bins that can fit, priority is remaining capacity after the item\n    priorities[can_fit] = bins_remain_cap[can_fit] - item\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Best\u2011Fit priority function for online Bin Packing.\n\n    The priority is higher (i.e., less negative) for bins that will have the\n    smallest remaining capacity after placing ``item``. Bins that cannot accommodate\n    the item receive ``-inf`` priority to guarantee they are never chosen.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each currently opened bin.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores, same shape as ``bins_remain_cap``. The caller\n        should select the bin with the maximum priority.\n    \"\"\"\n    # Ensure a NumPy array (in case a list or other sequence is passed)\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # Compute the waste (unused space) if the item were placed in each bin.\n    waste = bins_remain_cap - item\n\n    # Feasibility mask: only bins with non\u2011negative waste can hold the item.\n    feasible = waste >= 0\n\n    # Primary priority: negative waste (larger value \u21d2 smaller waste).\n    base_priority = np.where(feasible, -waste, -np.inf)\n\n    # Tie\u2011breaker: give a tiny advantage to bins with smaller index.\n    # This factor is far smaller than any realistic waste difference.\n    epsilon = 1e-12\n    tie_breaker = -np.arange(bins_remain_cap.size) * epsilon\n\n    priorities = base_priority + tie_breaker\n    return priorities\n\n[Reflection]\nPrefer smallest waste (negative), mask infeasible bins, deterministic index tie\u2011breaker, use vectorized NumPy for speed.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}