```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns a priority score for placing an item into each bin based on the 
    Almost Full Fit strategy.

    Strategy Overview
    -----------------
    *  Prefer bins that can accommodate the item.
    *  Prefer bins that are already highly utilized so the new item will fill 
       the gap and keep most bins near capacity (Almost Full).
    *  Combine the current occupancy of a bin with the remaining space after
       the new item is added.  The score is higher for bins that are both
       well‑filled and will become close to full.

    Parameters
    ----------
    item : float
        Size of the incoming item (0 < item <= 1).
    bins_remain_cap : np.ndarray
        1‑D array of the remaining capacity of each bin.  Assumes each bin 
        has capacity of 1.0.

    Returns
    -------
    np.ndarray
        Same shape as ``bins_remain_cap`` containing a score for each bin.  
        The bin with the maximum score will be chosen.  Bins that cannot
        accommodate the item receive ``-np.inf`` as their score.
    """
    # Ensure we operate on a float array.
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)
    
    # Identify bins that can hold the item.
    feasible = bins_remain_cap >= item

    # Initialise priorities: impossible placements get the lowest value.
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    if np.any(feasible):
        # Space that will remain after packing the item.
        new_rem = bins_remain_cap[feasible] - item

        # How full the bin is before adding the item.
        # (1.0 - remaining capacity) is the fraction of capacity already used.
        current_load = 1.0 - bins_remain_cap[feasible]

        # Base score: more filled bins & less remaining space => higher score.
        # Small epsilon prevents division by zero.
        priorities[feasible] = current_load / (new_rem + 1e-8)

        # *Almost Full* boost: give a 20 % extra weight to bins that will be
        # nearly full after the placement (remaining capacity <= 0.1).
        almost_full_mask = new_rem <= 0.1
        priorities[feasible][almost_full_mask] *= 1.2

    return priorities
```
