```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Inverse Distance (Proximity Fit) priority for online Bin Packing.

    Returns a priority score for each bin where bins that would have the smallest
    leftover capacity after placing the item obtain the highest score.
    Infeasible bins (cannot accommodate the item) receive a score of 0.

    Args:
        item: Size of the incoming item.
        bins_remain_cap: 1â€‘D array of remaining capacities for each open bin.

    Returns:
        np.ndarray of the same shape as ``bins_remain_cap`` containing priority scores.
    """
    epsilon = 1e-9  # Prevent division by zero for a perfect fit.

    # Compute the hypothetical leftover capacity if the item were placed.
    leftover = bins_remain_cap - item

    # Bins that can actually accommodate the item.
    feasible = leftover >= 0

    # Initialise priorities (infeasible bins stay at zero).
    priorities = np.zeros_like(bins_remain_cap, dtype=np.float64)

    # For feasible bins compute the inverse of the leftover capacity.
    # Smaller leftover => higher priority. For exact fits use epsilon.
    safe_leftover = np.where(leftover[feasible] == 0, epsilon, leftover[feasible])
    priorities[feasible] = 1.0 / safe_leftover

    return priorities
```
