{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute priority scores for bins in an online Bin Packing Problem.\n\n    The priority is composed of:\n      * Primary component: smaller bin index receives higher priority (first\u2011fit).\n      * Secondary component: tighter fit (smaller leftover capacity) breaks ties.\n      * Infeasible bins (cannot accommodate the item) receive -inf.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each bin.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores (same shape as ``bins_remain_cap``).\n    \"\"\"\n    # Ensure we are working with a float array\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Feasibility mask: bin can hold the item\n    feasible = caps >= item\n\n    # Primary ordering: smaller index => higher priority.\n    # Use negative indices: idx 0 -> 0, idx 1 -> -1, idx 2 -> -2, ...\n    idx = np.arange(caps.size, dtype=float)\n    primary = -idx\n\n    # Secondary ordering: tighter fit (smaller leftover) => higher priority.\n    leftover = caps - item                     # >= 0 for feasible bins\n    epsilon = 1e-6                             # tiny weight so primary dominates\n    secondary = -leftover * epsilon\n\n    # Combine components\n    scores = primary + secondary\n\n    # Mask infeasible bins\n    scores = np.where(feasible, scores, -np.inf)\n\n    return scores\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute deterministic priority scores for online bin packing.\n\n    The priority reflects:\n      * exact fits receive a massive bonus,\n      * among feasible bins, the smaller the leftover after placing the item,\n        the higher the priority,\n      * a tiny index\u2011based epsilon breaks ties deterministically,\n      * a quadratic penalty on leftover discourages creating large fragments,\n        which helps anticipate future items.\n\n    Infeasible bins receive ``-np.inf`` so they are never selected.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the current bins.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (higher = more desirable).  The caller should select the\n        bin with the maximal score.\n    \"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    n_bins = caps.shape[0]\n\n    # Initialise all priorities to -inf (infeasible)\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    # Feasibility mask: bins that can accommodate the item\n    feasible = caps >= item\n    if not feasible.any():\n        return priorities\n\n    # Compute leftover capacity after placing the item\n    leftover = caps - item\n\n    # Base priority: negative leftover (smaller leftover => larger priority)\n    # plus a quadratic penalty to heavily discourage large leftovers.\n    alpha = 1e-3\n    base_priority = -leftover - alpha * (leftover ** 2)\n\n    # Deterministic tie\u2011breaker: small epsilon weighted by bin index\n    epsilon = 1e-12\n    tie_breaker = -epsilon * np.arange(n_bins, dtype=float)\n    base_priority += tie_breaker\n\n    # Assign base priority to feasible bins\n    priorities[feasible] = base_priority[feasible]\n\n    # Exact fit detection and massive bonus\n    exact_tolerance = 1e-9\n    exact_fit = feasible & np.isclose(leftover, 0.0, atol=exact_tolerance)\n    if exact_fit.any():\n        EXACT_BONUS = 1e9\n        # Override priority for exact fits (including tie\u2011breaker)\n        priorities[exact_fit] = EXACT_BONUS + tie_breaker[exact_fit]\n\n    return priorities\n\n[Reflection]\nMassive exact-fit bonus, quadratic leftover penalty, tiny index epsilon tie\u2011breaker, mask infeasibles as -inf.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}