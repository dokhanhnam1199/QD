```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Compute priority scores for each bin for online bin packing.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1-D array of remaining capacities of existing bins.

    Returns
    -------
    np.ndarray
        Priority scores for each bin.  Higher score indicates more desirable bin.
        Bins that cannot accommodate the item receive ``-np.inf``.
    """
    caps = np.asarray(bins_remain_cap, dtype=float)
    n_bins = caps.shape[0]

    # Default score for infeasible bins
    priorities = np.full(n_bins, -np.inf, dtype=float)

    # Compute leftover after placing the item
    leftover = caps - item

    # Feasible bins
    feasible = leftover >= 0

    if not feasible.any():
        # No bin can accommodate the item
        return priorities

    # Base priority: penalize leftover, weighted by item size
    # Larger items see a stronger penalty for the same leftover
    priorities[feasible] = -leftover[feasible] * item

    # Exact fits get a massive bonus
    exact_fit = feasible & np.isclose(leftover, 0.0, atol=1e-9)
    if exact_fit.any():
        # Use a value large enough to dominate any other feasible bin
        EXACT_FIT_BONUS = 1e12
        priorities[exact_fit] = EXACT_FIT_BONUS

    # Tieâ€‘break by lower index: subtract a tiny epsilon proportional to the index
    epsilon = 1e-6
    priorities -= epsilon * np.arange(n_bins)

    return priorities
```
