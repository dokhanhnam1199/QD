```python
import numpy as np

def sigmoid(x: np.ndarray) -> np.ndarray:
    """Numerically stable logistic function."""
    return 1.0 / (1.0 + np.exp(-x))

def priority_v2(item: float, bins_remain_cap: np.ndarray, beta: float = 8.0) -> np.ndarray:
    """
    Sigmoid Fit Score based priority function for online Bin Packing.

    Bins that leave a smaller leftover capacity after placing the item
    receive higher priority.  The residual (remaining capacity minus the
    item size) is normalised and fed into a logistic (sigmoid)
    transform so that bins with an almost perfect fit get a score close
    to 0.5 while bins with a large remaining capacity get a score
    approaching 0.  Bins that cannot accommodate the item receive a
    priority of -inf.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1â€‘D array containing the remaining capacity of each bin.
    beta : float, optional
        Steepness of the logistic curve; larger values lead to a
        sharper differentiation between exact and loose fits.

    Returns
    -------
    np.ndarray
        Priority score for each bin, same shape as `bins_remain_cap`.
    """
    # Convert to array for safety
    remain = np.asarray(bins_remain_cap, dtype=float)

    # Default low priority for bins that cannot hold the item
    priorities = np.full(remain.shape, -np.inf, dtype=float)

    # Identify bins that can accept the item
    fit_mask = remain >= item
    if not np.any(fit_mask):
        return priorities

    # Remaining space after placing the item
    diff = remain[fit_mask] - item

    # Normalise the difference so that the sigmoid operates on a comparable scale.
    # The maximum diff among candidate bins provides a good scale.
    scale = diff.max() if diff.size else 1.0
    scale = scale if scale > 0 else 1.0
    norm_diff = diff / scale

    # Logistic transform with negative sign to turn higher residuals into lower scores.
    # Higher priority => smaller leftover after packing.
    priorities[fit_mask] = sigmoid(-beta * norm_diff)

    return priorities
```
