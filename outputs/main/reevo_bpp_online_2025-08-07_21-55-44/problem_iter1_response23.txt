```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Implements the “Almost Full Fit” priority heuristic.

    For bins that can accept the incoming item it assigns a score that
    grows when the remaining capacity after placement is small,
    i.e., the bin would become almost full.  A tiny additional bonus
    is given to bins that would leave a slack of no more than a
    fixed tolerance, encouraging the algorithm to first fill those
    bins before starting a new one.

    The function returns an array of scores; the largest score is the
    preferred bin.
    """
    # start with a very negative priority – this guarantees that bins
    # which cannot accommodate the item will never be selected.
    priorities = np.full_like(bins_remain_cap, -1e9, dtype=float)

    # identify bins that can host the item
    fit = bins_remain_cap >= item
    if not np.any(fit):
        # nothing can accept the item – the calling routine will open
        # a new bin
        return priorities

    # remaining space after placing the item
    slack = bins_remain_cap[fit] - item

    # Small epsilon to avoid division by zero
    eps = 1e-12

    # Base priority: 1 / slack → smaller slack gives larger priority
    base = 1.0 / (slack + eps)

    # Almost‑full bonus – strengthen priority for bins that would
    # have a slack smaller than a chosen tolerance
    ALMOST_FULL_TOL = 0.05  # 5 % of a unit‑size bin
    bonus = 50.0            # tuned to be dominant over the 1/slack term
    almost_full = slack <= ALMOST_FULL_TOL
    base = np.where(almost_full, base + bonus, base)

    # Store the computed priorities for the eligible bins
    priorities[fit] = base

    return priorities
```
