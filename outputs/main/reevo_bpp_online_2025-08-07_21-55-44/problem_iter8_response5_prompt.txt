{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    *,\n    exact_fit_bonus: float = 1e5,\n    slack_decay: float = 10.0,\n    next_item_factor: float = 0.1,\n    jitter: float = 1e-6,\n    atol: float = 1e-12,\n) -> np.ndarray:\n    \"\"\"\n    Compute priority scores for bins in an online Bin Packing Problem.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each currently opened bin.\n    exact_fit_bonus : float, optional\n        Large bonus added for bins that can accommodate the item exactly.\n    slack_decay : float, optional\n        Controls the steepness of the exponential slack bonus.\n    next_item_factor : float, optional\n        Small bonus for bins that can still hold another item of the same size\n        after the current placement.\n    jitter : float, optional\n        Deterministic tie\u2011breaker magnitude (lower\u2011index bins get a tiny\n        advantage).\n    atol : float, optional\n        Absolute tolerance for detecting an exact fit.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores of the same shape as ``bins_remain_cap``.  Feasible\n        bins receive finite scores; infeasible bins receive ``-np.inf`` and\n        are never selected.\n    \"\"\"\n    # Convert to a 1\u2011D float array; avoid modifying the caller's array\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Initialise all scores to -inf (infeasible)\n    priority = np.full_like(caps, -np.inf, dtype=float)\n\n    if n_bins == 0:\n        return priority\n\n    # Slack after placing the item\n    slack = caps - item\n    feasible = slack >= 0\n\n    # No feasible bins: return early\n    if not np.any(feasible):\n        return priority\n\n    # Normalise slack within feasible bins to [0, 1]\n    max_slack = np.max(slack[feasible])  # >= 0\n    slack_norm = slack[feasible] / (max_slack + atol)\n\n    # Exponential slack bonus: small slack \u2192 large bonus\n    slack_bonus = np.exp(-slack_decay * slack_norm)\n\n    # Base priority from slack bonus\n    priority[feasible] = slack_bonus\n\n    # Anticipation bonus: still room for another item of the same size\n    anticipation_mask = feasible & (slack >= item)\n    priority[anticipation_mask] += next_item_factor\n\n    # Exact\u2011fit bonus\n    exact_fit_mask = feasible & np.isclose(slack, 0.0, atol=atol)\n    priority[exact_fit_mask] += exact_fit_bonus\n\n    # Deterministic tie\u2011breaker: favor lower\u2011index bins slightly\n    priority += -np.arange(n_bins, dtype=float) * jitter\n\n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    *,\n    exact_fit_bonus: float = 1e6,\n    slack_exponent_k: float = 10.0,\n    next_item_bonus: float = 0.05,\n    jitter: float = 1e-12,\n    exact_fit_atol: float = 1e-12,\n    eps: float = 1e-12,\n) -> np.ndarray:\n    \"\"\"\n    Compute a priority score for each open bin in an online Bin Packing problem.\n\n    Heuristics (kept simple):\n    \u2022 Exact\u2011fit boost \u2013 a very large constant when the item fills a bin almost\n      perfectly.\n    \u2022 Exponential slack penalty \u2013 tighter fits (smaller slack) receive a higher\n      bonus via exp(-k * normalized_slack).\n    \u2022 Anticipation bonus \u2013 a small extra reward if the bin would still fit another\n      item of the same size after placement.\n    \u2022 Deterministic tie\u2011breaker \u2013 tiny index\u2011based term to make the decision\n      reproducible.\n    \u2022 Infeasible bins receive -inf priority.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the currently opened bins.\n    exact_fit_bonus : float, optional\n        Large constant added for (near) exact fits.\n    slack_exponent_k : float, optional\n        Controls steepness of the exponential slack bonus.\n    next_item_bonus : float, optional\n        Bonus if the bin would still hold another item of the same size.\n    jitter : float, optional\n        Tiny magnitude for deterministic tie\u2011breaking.\n    exact_fit_atol : float, optional\n        Absolute tolerance for treating a placement as an exact fit.\n    eps : float, optional\n        Small constant to avoid division\u2011by\u2011zero when normalising slack.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (same shape as ``bins_remain_cap``).  Higher scores are\n        more desirable.\n    \"\"\"\n    # Ensure a flat float array\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Edge case: no bins at all\n    if n_bins == 0:\n        return np.empty(0, dtype=float)\n\n    # Slack after placing the item\n    slack = caps - item\n\n    # Feasibility mask: slack must be non\u2011negative\n    feasible = slack >= 0.0\n\n    # Initialise priorities with -inf for infeasible bins\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    # If nothing fits, return early\n    if not feasible.any():\n        return priorities\n\n    # Base priority: tighter fit \u2192 larger (negative slack)\n    base_priority = -slack[feasible]\n\n    # Normalise slack for exponential term (avoid division by zero)\n    max_slack = slack[feasible].max()\n    denom = max_slack + eps\n    slack_norm = slack[feasible] / denom\n\n    # Exponential slack bonus: larger for smaller slack_norm\n    slack_bonus = np.exp(-slack_exponent_k * slack_norm)\n\n    # Anticipation bonus: can still fit another item of the same size\n    anticipate_bonus = np.where(slack[feasible] >= item, next_item_bonus, 0.0)\n\n    # Combine components\n    priority_feasible = base_priority + slack_bonus + anticipate_bonus\n\n    # Exact\u2011fit boost (within tolerance)\n    exact_fit_mask = np.isclose(slack[feasible], 0.0, atol=exact_fit_atol)\n    priority_feasible[exact_fit_mask] += exact_fit_bonus\n\n    # Insert feasible priorities back into full array\n    priorities[feasible] = priority_feasible\n\n    # Deterministic tie\u2011breaker: favor lower\u2011index bins ever so slightly\n    tie_breaker = -np.arange(n_bins, dtype=float) * jitter\n    priorities += tie_breaker\n\n    return priorities\n\n[Reflection]\nNormalize slack, add base negative slack, exponential penalty, small anticipation, massive exact\u2011fit reward, deterministic tie\u2011breaker.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}