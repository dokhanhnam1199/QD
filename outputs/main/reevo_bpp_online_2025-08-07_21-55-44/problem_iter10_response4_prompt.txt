{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    bin_capacity: float = 1.0,\n    avg_future_item: float = None,\n) -> np.ndarray:\n    \"\"\"\n    Advanced priority function for online Bin Packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of the currently opened bins.\n    bin_capacity : float, optional\n        Fixed capacity of each bin (default = 1.0).\n    avg_future_item : float, optional\n        Expected size of a typical future item; used for a one\u2011step look\u2011ahead boost.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin; higher values indicate more desirable bins.\n        Infeasible bins receive ``-np.inf``.\n    \"\"\"\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n    waste = bins_remain_cap - item\n    feasible = waste >= 0\n\n    # Initialise priorities with -inf for infeasible bins\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        return priorities\n\n    # ---------- Parameter settings ----------\n    alpha = 5.0          # exponential slack penalty steepness\n    beta = 4.0           # scaling with current bin fullness\n    exact_fit_reward = 1e6\n    lookahead_boost = 0.2\n    epsilon = 1e-12\n    tol = 1e-9\n    # ----------------------------------------\n\n    # Fullness before placement (0 = empty, 1 = full)\n    fullness_before = (bin_capacity - bins_remain_cap) / bin_capacity\n    # Penalty steepness factor grows with bin fullness\n    factor = 1.0 + beta * fullness_before\n\n    # Normalized slack (waste) after placing the item\n    normalized_slack = waste / bin_capacity\n\n    # Exponential penalty: larger slack \u2192 more negative priority\n    penalty = -np.exp(alpha * normalized_slack * factor)\n\n    # Apply penalty to feasible bins\n    priorities[feasible] = penalty[feasible]\n\n    # Massive reward for an exact fit (waste \u2248 0)\n    exact_fit_mask = feasible & np.isclose(waste, 0.0, atol=tol)\n    priorities[exact_fit_mask] = exact_fit_reward\n\n    # One\u2011step look\u2011ahead boost if we have an estimate of future item size\n    if avg_future_item is not None:\n        boost_mask = feasible & (waste >= avg_future_item)\n        if np.any(boost_mask):\n            # Boost proportional to the surplus capacity beyond the expected future item\n            boost = lookahead_boost * ((waste[boost_mask] - avg_future_item) / bin_capacity)\n            priorities[boost_mask] += boost\n\n    # Tiny tie\u2011breaker: deterministic component (index) plus minuscule random noise\n    N = bins_remain_cap.size\n    det_eps = -np.arange(N) * epsilon\n    rand_eps = (np.random.rand(N) - 0.5) * epsilon * 0.1  # \u00b10.05\u00b7\u03b5\n    tie_breaker = det_eps + rand_eps\n    priorities += tie_breaker\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Best\u2011Fit priority function for online Bin Packing.\n\n    The priority is higher (i.e., less negative) for bins that will have the\n    smallest remaining capacity after placing ``item``. Bins that cannot accommodate\n    the item receive ``-inf`` priority to guarantee they are never chosen.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each currently opened bin.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores, same shape as ``bins_remain_cap``. The caller\n        should select the bin with the maximum priority.\n    \"\"\"\n    # Ensure a NumPy array (in case a list or other sequence is passed)\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # Compute the waste (unused space) if the item were placed in each bin.\n    waste = bins_remain_cap - item\n\n    # Feasibility mask: only bins with non\u2011negative waste can hold the item.\n    feasible = waste >= 0\n\n    # Primary priority: negative waste (larger value \u21d2 smaller waste).\n    base_priority = np.where(feasible, -waste, -np.inf)\n\n    # Tie\u2011breaker: give a tiny advantage to bins with smaller index.\n    # This factor is far smaller than any realistic waste difference.\n    epsilon = 1e-12\n    tie_breaker = -np.arange(bins_remain_cap.size) * epsilon\n\n    priorities = base_priority + tie_breaker\n    return priorities\n\n[Reflection]\nPrioritize exact fits, mildly penalize slack, use simple index tie\u2011breakers; avoid complex exponentials.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}