```python
import numpy as np
from typing import Union, Sequence

def priority_v2(item: float,
                bins_remain_cap: Union[np.ndarray, Sequence[float]],
                *,
                epsilon: float = 1e-12) -> np.ndarray:
    """
    Best‑fit priority function for the online Bin Packing Problem.

    The function returns a priority score for each bin such that the bin
    with the highest score (i.e., the largest priority) is the one that
    would leave the smallest remaining capacity after placing ``item``.
    Infeasible bins (remaining capacity < ``item``) receive ``-np.inf`` so
    they are never selected.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : array‑like of float
        Remaining capacity of each currently opened bin.
    epsilon : float, optional
        Tiny tie‑breaker added to favour lower‑index bins when the waste
        is identical. The default value (1e‑12) is far smaller than any
        realistic waste difference.

    Returns
    -------
    np.ndarray
        Array of priority scores, same shape as ``bins_remain_cap``.
    """
    # Convert to a NumPy float array for vectorised operations
    caps = np.asarray(bins_remain_cap, dtype=float)

    # Early exit for empty bin list
    if caps.size == 0:
        return np.empty(0, dtype=float)

    # Compute waste (remaining capacity after placing the item)
    waste = caps - item

    # Feasibility mask: only bins with non‑negative waste can hold the item
    feasible = waste >= 0

    # Base priority: negative waste (larger value ⇒ tighter fit)
    base_priority = np.where(feasible, -waste, -np.inf)

    # Tiny deterministic tie‑breaker: lower‑index bins get a minute advantage
    tie_breaker = -np.arange(caps.size, dtype=float) * epsilon

    return base_priority + tie_breaker
```
