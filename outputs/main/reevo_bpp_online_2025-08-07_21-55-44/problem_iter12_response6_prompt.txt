{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    item: float,\n    bins_remain_cap: Union[np.ndarray, list, tuple],\n    *,\n    bin_capacity: Optional[float] = None,\n    lookahead_items: Optional[Union[np.ndarray, list, tuple]] = None,\n    k_base: float = 8.0,\n    alpha: float = 0.2,\n    random_state: Optional[Union[int, np.random.Generator]] = None,\n    jitter: float = 1e-6,\n) -> np.ndarray:\n    \"\"\"\n    Compute priority scores for bins in an online bin\u2011packing problem.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : array\u2011like of float\n        Remaining capacity of each currently opened bin.\n    bin_capacity : float, optional\n        Fixed capacity of a bin.  If ``None`` the maximum remaining\n        capacity observed in ``bins_remain_cap`` is used.\n    lookahead_items : array\u2011like of float, optional\n        Sizes of future items.  Bins that can still accommodate more of\n        these items after the current placement receive a modest\n        multiplicative boost.\n    k_base : float, default 8.0\n        Base steepness for the adaptive sigmoid.  The steepness is\n        scaled by bin fullness so fuller bins get a steeper curve.\n    alpha : float, default 0.2\n        Strength of the look\u2011ahead boost (0\u202f\u2264\u202falpha\u202f\u2264\u202f1).\n    random_state : int or np.random.Generator, optional\n        Seed or generator for a tiny random tie\u2011breaking noise.\n    jitter : float, default 1e-6\n        Magnitude of deterministic tie\u2011breaker (lower\u2011index bins get a tiny\n        advantage).  Also used as the upper bound for random noise.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (same shape as ``bins_remain_cap``).  Infeasible\n        bins (remaining capacity < ``item``) receive ``-np.inf`` and are\n        never selected.\n\n    Notes\n    -----\n    The score for each feasible bin is based on:\n      1. Normalised slack after placing the item.\n      2. An adaptive sigmoid that steepens with bin fullness.\n      3. A multiplicative look\u2011ahead boost if ``lookahead_items`` are\n         provided.\n      4. Tiny deterministic and random tie\u2011breakers to resolve exact\n         ties reproducibly.\n    \"\"\"\n    bins = np.asarray(bins_remain_cap, dtype=float)\n    n_bins = bins.size\n\n    if n_bins == 0:\n        return np.empty(0, dtype=float)\n\n    if bin_capacity is None:\n        # Use the maximum remaining capacity observed as the nominal bin size.\n        bin_capacity = float(np.max(bins)) + 1e-9\n\n    # Feasibility mask\n    feasible = bins >= item\n    if not np.any(feasible):\n        return np.full_like(bins, -np.inf, dtype=float)\n\n    # Slack after placement for feasible bins\n    slack = bins[feasible] - item  # shape (m,)\n    # Normalised gaps (0 when tight fit, 1 when fully slack)\n    norm_gaps = slack / bin_capacity\n    norm_gaps = np.clip(norm_gaps, 0.0, 1.0)\n\n    # Bin fullness relative to capacity (0 empty, 1 full)\n    fullness = (bin_capacity - bins[feasible]) / bin_capacity\n    fullness = np.clip(fullness, 0.0, 1.0)\n\n    # Adaptive sigmoid steepness: fuller bins get steeper curves\n    k = k_base * (1.0 + fullness)\n\n    # Shift gaps so that tighter fits get higher values\n    max_norm_gap = np.max(norm_gaps)\n    shift = max_norm_gap - norm_gaps\n    exponent = k * shift\n    exponent = np.clip(exponent, -700.0, 700.0)  # avoid overflow\n\n    # Adaptive sigmoid scoring in (0.5, 1]\n    scores = 1.0 / (1.0 + np.exp(-exponent))\n\n    # Optional look\u2011ahead boost\n    if lookahead_items is not None:\n        lookahead = np.asarray(lookahead_items, dtype=float)\n        if lookahead.size > 0:\n            # Remaining capacity after placement for each feasible bin\n            remaining = slack  # shape (m,)\n            # Count how many lookahead items each bin can still fit\n            fits = (remaining[:, None] >= lookahead[None, :]).sum(axis=1)\n            fit_ratio = fits.astype(float) / float(lookahead.size)  # [0,1]\n            boost = 1.0 + np.clip(alpha, 0.0, 1.0) * fit_ratio\n            scores *= boost\n\n    # Tiny random tie\u2011breaker\n    rng = np.random.default_rng(random_state)\n    noise = rng.uniform(0.0, jitter, size=scores.shape)\n    scores += noise\n\n    # Assemble priority vector\n    priority = np.full_like(bins, -np.inf, dtype=float)\n    priority[feasible] = scores\n\n    # Deterministic tie\u2011breaker (lower index gets a slight advantage)\n    priority += -np.arange(n_bins, dtype=float) * jitter\n\n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    item: float,\n    bins_remain_cap: Union[np.ndarray, Sequence[float]],\n    *,\n    bin_capacity: Optional[float] = None,\n    lookahead_items: Optional[Union[np.ndarray, Sequence[float]]] = None,\n    base_steepness: float = 8.0,\n    lookahead_alpha: float = 0.2,\n    exact_fit_bonus: float = 0.15,\n    jitter: float = 1e-7,\n    random_state: Optional[Union[int, np.random.Generator]] = None,\n) -> np.ndarray:\n    \"\"\"\n    Compute priority scores for bins in an online Bin Packing setting.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : array\u2011like, shape (n_bins,)\n        Remaining capacities of the currently opened bins.\n    bin_capacity : float, optional\n        Fixed capacity of each bin. If ``None``, it is inferred as\n        ``max(bins_remain_cap) + item`` (plus a tiny epsilon to avoid division\n        by zero).\n    lookahead_items : array\u2011like, optional\n        Sizes of a few future items. Bins that can still accommodate many of\n        these items after the current placement receive a multiplicative boost.\n    base_steepness : float, default 8.0\n        Base steepness for the sigmoid; scaled by ``1 + fullness``.\n    lookahead_alpha : float, default 0.2\n        Strength of the look\u2011ahead boost (0\u202f\u2264\u202f\u03b1\u202f\u2264\u202f1).\n    exact_fit_bonus : float, default 0.15\n        Small additive bonus for bins that fit the item exactly.\n    jitter : float, default 1e-7\n        Amplitude of tiny random noise for tie\u2011breaking.\n    random_state : int or np.random.Generator, optional\n        Seed or generator for reproducible jitter.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin (0\u2011based). Infeasible bins receive ``-np.inf``.\n    \"\"\"\n    # ------------------------------------------------------------------\n    # 1. Normalise inputs\n    # ------------------------------------------------------------------\n    bins = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = bins.size\n\n    if n_bins == 0:\n        return np.empty(0, dtype=float)\n\n    # ------------------------------------------------------------------\n    # 2. Determine bin capacity if not supplied\n    # ------------------------------------------------------------------\n    if bin_capacity is None:\n        # Estimate capacity from the largest observed remaining capacity.\n        bin_capacity = float(np.max(bins) + item + 1e-9)\n    else:\n        bin_capacity = float(bin_capacity)\n\n    if bin_capacity <= 0.0:\n        raise ValueError(\"bin_capacity must be positive.\")\n\n    # ------------------------------------------------------------------\n    # 3. Feasibility mask\n    # ------------------------------------------------------------------\n    feasible = bins >= item\n    if not np.any(feasible):\n        # No bin can host the item.\n        return np.full_like(bins, -np.inf, dtype=float)\n\n    # ------------------------------------------------------------------\n    # 4. Slack after placement and derived quantities\n    # ------------------------------------------------------------------\n    slack = bins - item                     # \u22650 for feasible bins\n    norm_gap = np.clip(slack / bin_capacity, 0.0, 1.0)      # normalised slack \u2208[0,1]\n\n    # Fullness before placement (used capacity / total capacity)\n    fullness = np.clip((bin_capacity - bins) / bin_capacity, 0.0, 1.0)\n\n    # ------------------------------------------------------------------\n    # 5. Dynamic sigmoid steepness\n    # ------------------------------------------------------------------\n    k = base_steepness * (1.0 + fullness)   # steeper for already\u2011full bins\n\n    # ------------------------------------------------------------------\n    # 6. Sigmoid score (monotonically decreasing with slack)\n    # ------------------------------------------------------------------\n    # Using an inflection point at norm_gap = 0.5.\n    exponent = k * (0.5 - norm_gap)        # larger \u2192 tighter fit\n    exponent = np.clip(exponent, -700.0, 700.0)  # safe for exp()\n    scores = 1.0 / (1.0 + np.exp(-exponent))\n\n    # ------------------------------------------------------------------\n    # 7. Exact\u2011fit bonus\n    # ------------------------------------------------------------------\n    exact_fit_mask = feasible & np.isclose(slack, 0.0, atol=1e-12)\n    scores[exact_fit_mask] += exact_fit_bonus\n\n    # ------------------------------------------------------------------\n    # 8. Look\u2011ahead boost (optional)\n    # ------------------------------------------------------------------\n    if lookahead_items is not None:\n        lookahead = np.asarray(lookahead_items, dtype=float).ravel()\n        if lookahead.size > 0:\n            # Remaining capacity after placing the current item (only for feasible bins)\n            remaining_after = slack[feasible]   # \u22650\n            # Count how many look\u2011ahead items could still fit into each bin\n            fits = (remaining_after[:, None] >= lookahead[None, :]).sum(axis=1)\n            fit_ratio = fits.astype(float) / lookahead.size  # \u2208[0,1]\n            boost = 1.0 + np.clip(lookahead_alpha, 0.0, 1.0) * fit_ratio\n            scores[feasible] *= boost\n\n    # ------------------------------------------------------------------\n    # 9. Tiny jitter for deterministic tie\u2011breaking\n    # ------------------------------------------------------------------\n    rng = np.random.default_rng(random_state)\n    jitter_noise = rng.uniform(0.0, jitter, size=np.count_nonzero(feasible))\n    scores[feasible,] = scores[feasible] + jitter_noise  # type: ignore\n\n    # ------------------------------------------------------------------\n    # 10. Assemble final priority vector\n    # ------------------------------------------------------------------\n    priority = np.full_like(bins, -np.inf, dtype=float)\n    priority[feasible] = scores[feasible]\n\n    return priority\n\n[Reflection]\nUse adaptive sigmoid steepness, exact\u2011fit bonus, normalized slack, look\u2011ahead boost, and tiny jitter for tie\u2011breaking.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}