{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    bin_capacity: float = 1.0,\n    avg_future_item: float = None,\n) -> np.ndarray:\n    \"\"\"\n    Advanced priority function for online Bin Packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of the currently opened bins.\n    bin_capacity : float, optional\n        Fixed capacity of each bin (default = 1.0).\n    avg_future_item : float, optional\n        Expected size of a typical future item; used for a one\u2011step look\u2011ahead boost.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin; higher values indicate more desirable bins.\n        Infeasible bins receive ``-np.inf``.\n    \"\"\"\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n    waste = bins_remain_cap - item\n    feasible = waste >= 0\n\n    # Initialise priorities with -inf for infeasible bins\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        return priorities\n\n    # ---------- Parameter settings ----------\n    alpha = 5.0          # exponential slack penalty steepness\n    beta = 4.0           # scaling with current bin fullness\n    exact_fit_reward = 1e6\n    lookahead_boost = 0.2\n    epsilon = 1e-12\n    tol = 1e-9\n    # ----------------------------------------\n\n    # Fullness before placement (0 = empty, 1 = full)\n    fullness_before = (bin_capacity - bins_remain_cap) / bin_capacity\n    # Penalty steepness factor grows with bin fullness\n    factor = 1.0 + beta * fullness_before\n\n    # Normalized slack (waste) after placing the item\n    normalized_slack = waste / bin_capacity\n\n    # Exponential penalty: larger slack \u2192 more negative priority\n    penalty = -np.exp(alpha * normalized_slack * factor)\n\n    # Apply penalty to feasible bins\n    priorities[feasible] = penalty[feasible]\n\n    # Massive reward for an exact fit (waste \u2248 0)\n    exact_fit_mask = feasible & np.isclose(waste, 0.0, atol=tol)\n    priorities[exact_fit_mask] = exact_fit_reward\n\n    # One\u2011step look\u2011ahead boost if we have an estimate of future item size\n    if avg_future_item is not None:\n        boost_mask = feasible & (waste >= avg_future_item)\n        if np.any(boost_mask):\n            # Boost proportional to the surplus capacity beyond the expected future item\n            boost = lookahead_boost * ((waste[boost_mask] - avg_future_item) / bin_capacity)\n            priorities[boost_mask] += boost\n\n    # Tiny tie\u2011breaker: deterministic component (index) plus minuscule random noise\n    N = bins_remain_cap.size\n    det_eps = -np.arange(N) * epsilon\n    rand_eps = (np.random.rand(N) - 0.5) * epsilon * 0.1  # \u00b10.05\u00b7\u03b5\n    tie_breaker = det_eps + rand_eps\n    priorities += tie_breaker\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: Union[np.ndarray, list, tuple],\n    *,\n    bin_capacity: Optional[float] = None,\n    lookahead_items: Optional[Union[np.ndarray, list, tuple]] = None,\n    k_base: float = 8.0,\n    alpha: float = 0.2,\n    exact_fit_bonus: float = 1e5,\n    jitter_eps: float = 1e-12,\n    random_state: Optional[Union[int, np.random.Generator]] = None,\n) -> np.ndarray:\n    \"\"\"\n    Compute priority scores for each bin in an online Bin Packing Problem.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : array-like of float\n        Remaining capacities of the current bins.\n    bin_capacity : float, optional\n        The fixed capacity of each bin. If omitted, it is inferred from the\n        current bins, ensuring that the inferred capacity can accommodate\n        the incoming item.\n    lookahead_items : array-like of float, optional\n        Sizes of items that are expected to arrive soon. Bins that can still\n        accommodate more of these items after the current placement receive\n        a multiplicative boost.\n    k_base : float, default 8.0\n        Base steepness parameter for the sigmoid; scaled by bin fullness.\n    alpha : float, default 0.2\n        Strength of the look\u2011ahead boost (fractional multiplier).\n    exact_fit_bonus : float, default 1e5\n        Large additive bonus for bins that will have zero slack after\n        placement (i.e., an exact fit).\n    jitter_eps : float, default 1e-12\n        Magnitude of the tiny random tie\u2011breaker added to each score.\n    random_state : int or np.random.Generator, optional\n        Seed or generator for the tiny random tie\u2011breaker.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores with the same length as ``bins_remain_cap``.\n        Feasible bins receive a finite score; infeasible bins receive\n        ``-np.inf`` and will never be selected.\n    \"\"\"\n    # Convert input to a 1\u2011D float array\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n    if n_bins == 0:\n        return np.empty(0, dtype=float)\n\n    # Infer bin capacity if not provided\n    if bin_capacity is None:\n        max_cap = np.max(caps)\n        bin_capacity = float(max_cap if max_cap >= item else max_cap + item)\n    if bin_capacity <= 0:\n        raise ValueError(\"bin_capacity must be positive.\")\n\n    # Feasibility mask\n    feasible = caps >= item\n    if not np.any(feasible):\n        return np.full(n_bins, -np.inf, dtype=float)\n\n    # Remaining capacity after placing the item (only for feasible bins)\n    leftover = caps[feasible] - item  # >= 0\n    gap_norm = leftover / bin_capacity  # normalised gap in [0, 1)\n\n    # Fullness before placement (fraction already used)\n    fullness = (bin_capacity - caps[feasible]) / bin_capacity\n    k = k_base * (1.0 + fullness)  # dynamic steepness\n\n    # Logistic sigmoid: decreasing in gap_norm\n    arg = k * (gap_norm - 0.5)\n    # Clip to avoid overflow\n    arg = np.clip(arg, -700.0, 700.0)\n    scores = 1.0 / (1.0 + np.exp(arg))  # in (0,1)\n\n    # Tiny random tie\u2011breaker\n    rng = np.random.default_rng(random_state)\n    eps = jitter_eps * max(1.0, np.max(scores)) if scores.size else 0.0\n    scores += rng.uniform(0.0, eps, size=scores.shape)\n\n    # Look\u2011ahead boost\n    if lookahead_items is not None:\n        look = np.asarray(lookahead_items, dtype=float).ravel()\n        if look.size > 0:\n            fits = (look <= leftover[:, None]).sum(axis=1)\n            fit_ratio = fits / float(look.size)  # in [0, 1]\n            scores = scores * (1.0 + alpha * fit_ratio)\n            scores = np.clip(scores, 0.0, 1.0)\n\n    # Exact\u2011fit bonus\n    exact_fit_mask = np.isclose(leftover, 0.0, atol=1e-12)\n    if np.any(exact_fit_mask):\n        scores[exact_fit_mask] += exact_fit_bonus\n\n    # Assemble full priority vector\n    priority = np.full(n_bins, -np.inf, dtype=float)\n    priority[feasible] = scores\n\n    return priority\n\n[Reflection]\nUse sigmoid with fullness scaling; multiplicative look\u2011ahead boost; exact\u2011fit bonus; tiny random tie\u2011breaker.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}