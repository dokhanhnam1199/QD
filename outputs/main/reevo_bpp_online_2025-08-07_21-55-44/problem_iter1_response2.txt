```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority function using the Worst Fit strategy.

    The priority returned for a bin equals the remaining capacity that would be left
    after placing the given `item`.  The larger this value, the worse the fit, so the
    bin with the maximum priority is the best choice.  Bins that cannot accommodate
    the item receive a priority of -inf, ensuring they are never selected.

    Args:
        item: Size of the item to place.
        bins_remain_cap: 1-D array of remaining capacities for each bin.

    Returns:
        np.ndarray of priority scores, same shape as `bins_remain_cap`.
    """
    # Determine which bins can accommodate the item
    can_fit = bins_remain_cap >= item

    # Start with very low priorities for all bins
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)

    # For bins that can fit, priority is remaining capacity after the item
    priorities[can_fit] = bins_remain_cap[can_fit] - item

    return priorities
```
