{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\nScore bins by normalized slack (linear or exponential penalty); give a massive exact\u2011fit reward; penalize opening a new bin by expected waste; adjust sigmoid steepness by bin fullness; add a one\u2011step lookahead boost; break ties with a tiny deterministic/random\u202f\u03b5; keep parameters minimal.\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Best\u2011Fit priority function for online Bin Packing.\n\n    The priority is higher (i.e., less negative) for bins that will have the\n    smallest remaining capacity after placing ``item``. Bins that cannot accommodate\n    the item receive ``-inf`` priority to guarantee they are never chosen.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each currently opened bin.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores, same shape as ``bins_remain_cap``. The caller\n        should select the bin with the maximum priority.\n    \"\"\"\n    # Ensure a NumPy array (in case a list or other sequence is passed)\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # Compute the waste (unused space) if the item were placed in each bin.\n    waste = bins_remain_cap - item\n\n    # Feasibility mask: only bins with non\u2011negative waste can hold the item.\n    feasible = waste >= 0\n\n    # Primary priority: negative waste (larger value \u21d2 smaller waste).\n    base_priority = np.where(feasible, -waste, -np.inf)\n\n    # Tie\u2011breaker: give a tiny advantage to bins with smaller index.\n    # This factor is far smaller than any realistic waste difference.\n    epsilon = 1e-12\n    tie_breaker = -np.arange(bins_remain_cap.size) * epsilon\n\n    priorities = base_priority + tie_breaker\n    return priorities\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}