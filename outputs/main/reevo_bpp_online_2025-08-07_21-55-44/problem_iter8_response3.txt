```python
import numpy as np
from typing import Optional, Union


def priority_v2(
    item: float,
    bins_remain_cap: Union[np.ndarray, list, tuple],
    *,
    bin_capacity: Optional[float] = None,
    lookahead_items: Optional[Union[np.ndarray, list, tuple]] = None,
    k_base: float = 8.0,
    alpha: float = 0.2,
    random_state: Optional[Union[int, np.random.Generator]] = None,
    jitter: float = 1e-6,
) -> np.ndarray:
    """
    Compute priority scores for bins in an online Bin Packing problem.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : array‑like of float
        Remaining capacity of each currently opened bin.
    bin_capacity : float, optional
        Fixed capacity of a bin. If ``None`` the maximum remaining capacity
        observed in ``bins_remain_cap`` is used.
    lookahead_items : array‑like of float, optional
        Sizes of future items.  Bins that can still accommodate more of these
        items after the current placement receive a multiplicative boost.
    k_base : float, default 8.0
        Base steepness for the adaptive sigmoid.  The steepness is scaled by
        bin fullness so fuller bins get a steeper curve.
    alpha : float, default 0.2
        Strength of the look‑ahead boost (0 ≤ alpha ≤ 1).
    random_state : int or np.random.Generator, optional
        Seed or generator for a tiny random tie‑breaking noise.
    jitter : float, default 1e-6
        Deterministic tie‑breaker magnitude (lower‑index bins get a tiny
        advantage).

    Returns
    -------
    np.ndarray
        Priority scores (same shape as ``bins_remain_cap``).  Infeasible bins
        (remaining capacity < ``item``) receive ``-np.inf`` and are never
        selected.
    """
    # ------------------------------------------------------------------
    # 1. Prepare inputs
    # ------------------------------------------------------------------
    bins = np.asarray(bins_remain_cap, dtype=float)
    n_bins = bins.size

    if n_bins == 0:
        return np.empty(0, dtype=float)

    # Infer bin capacity if not provided
    if bin_capacity is None:
        bin_capacity = float(np.max(bins) + 1e-9)
    else:
        bin_capacity = float(bin_capacity)

    # ------------------------------------------------------------------
    # 2. Feasibility mask
    # ------------------------------------------------------------------
    feasible = bins >= item
    if not np.any(feasible):
        # No bin can host the item.
        return np.full_like(bins, -np.inf, dtype=float)

    # ------------------------------------------------------------------
    # 3. Compute gaps and normalized gaps
    # ------------------------------------------------------------------
    slack = bins - item  # remaining capacity after placing the item
    norm_gaps = slack / bin_capacity  # [0,1] (or slightly >1 for overflow)
    norm_gaps = np.clip(norm_gaps, 0.0, 1.0)

    # ------------------------------------------------------------------
    # 4. Dynamic sigmoid steepness based on bin fullness
    # ------------------------------------------------------------------
    fullness = (bin_capacity - bins) / bin_capacity  # [0,1]
    fullness = np.clip(fullness, 0.0, 1.0)
    k = k_base * (1.0 + fullness)  # steeper for fuller bins

    # ------------------------------------------------------------------
    # 5. Adaptive sigmoid on normalized gaps
    # ------------------------------------------------------------------
    # Shift gaps so that the smallest gap gets the highest score
    feasible_gaps = norm_gaps[feasible]
    feasible_k = k[feasible]
    max_norm_gap = np.max(feasible_gaps)
    shift = max_norm_gap - feasible_gaps  # larger for tighter fits
    exponent = feasible_k * shift
    exponent = np.clip(exponent, -700.0, 700.0)  # avoid overflow
    scores = 1.0 / (1.0 + np.exp(-exponent))  # in (0.5, 1]

    # ------------------------------------------------------------------
    # 6. Tiny random tie‑breaker
    # ------------------------------------------------------------------
    rng = np.random.default_rng(random_state)
    noise = rng.uniform(0.0, 1e-6, size=scores.shape)
    scores += noise

    # ------------------------------------------------------------------
    # 7. Optional look‑ahead boost
    # ------------------------------------------------------------------
    if lookahead_items is not None:
        lookahead = np.asarray(lookahead_items, dtype=float)
        if lookahead.size > 0:
            remaining_after = slack[feasible]  # capacity left after placement
            # Count how many lookahead items each bin can still fit
            fits = (remaining_after[:, None] >= lookahead[None, :]).sum(axis=1)
            fit_ratio = fits.astype(float) / float(lookahead.size)  # [0,1]
            # Apply multiplicative boost
            boost = 1.0 + np.clip(alpha, 0.0, 1.0) * fit_ratio
            scores *= boost

    # ------------------------------------------------------------------
    # 8. Assemble final priority vector
    # ------------------------------------------------------------------
    priority = np.full_like(bins, -np.inf, dtype=float)
    priority[feasible] = scores

    # ------------------------------------------------------------------
    # 9. Deterministic tie‑breaker
    # ------------------------------------------------------------------
    priority += -np.arange(n_bins, dtype=float) * jitter

    return priority
```
