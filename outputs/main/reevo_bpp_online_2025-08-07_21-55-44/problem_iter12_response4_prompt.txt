{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global constant for bin capacity (assumed normalized to 1.0)\nBIN_CAPACITY = 1.0\n\n    \"\"\"\n    Priority function for online Bin Packing.\n\n    The score for each currently opened bin combines:\n      \u2022 a sigmoid on the normalized slack after placement, with steepness\n        scaling according to how full the bin already is;\n      \u2022 a large bonus for an exact fit;\n      \u2022 a modest reuse bonus (penalising opening a new bin);\n      \u2022 a one\u2011step look\u2011ahead term that slightly favours bins leaving some slack;\n      \u2022 a tiny deterministic jitter to break exact ties.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each opened bin.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores (same shape as ``bins_remain_cap``). Infeasible\n        bins receive ``-inf`` so they are never selected.\n    \"\"\"\n    # Ensure NumPy array\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # Feasibility mask: bin can accommodate the item only if remaining capacity >= item\n    feasible = bins_remain_cap >= item\n\n    # Initialise priorities with -inf for infeasible bins\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        # No feasible bin \u2013 caller should open a new bin\n        return priorities\n\n    # Slack after placing the item (non\u2011negative for feasible bins)\n    slack = bins_remain_cap - item\n    slack_norm = slack / BIN_CAPACITY  # normalized to [0, 1]\n\n    # Fullness of each bin before placement (0 for empty, 1 for completely full)\n    fullness = 1.0 - (bins_remain_cap / BIN_CAPACITY)\n\n    # Steepness of the sigmoid scales with fullness\n    base_k = 5.0            # base steepness\n    scale_factor = 5.0      # how much steepness grows with fullness\n    k = base_k * (1.0 + scale_factor * fullness)\n\n    # Decreasing sigmoid on normalized slack; multiplied by 2 maps exact\u2011fit to 1\n    sigmoid_score = 2.0 / (1.0 + np.exp(k * slack_norm))\n\n    # Exact\u2011fit bonus (large boost when slack is essentially zero)\n    eps = 1e-12\n    exact_fit_bonus = np.where(slack <= eps, 10.0, 0.0)\n\n    # Reuse bonus \u2013 small constant that makes using an existing bin slightly better\n    reuse_bonus = 0.05\n\n    # One\u2011step look\u2011ahead term: modestly reward bins that leave a bit of slack\n    lookahead_weight = 0.2\n    lookahead_score = lookahead_weight * slack_norm\n\n    # Tiny deterministic jitter to break ties (prefers lower index)\n    # Using a negative sign ensures index 0 gets the highest tie\u2011breaker.\n    jitter = -np.arange(bins_remain_cap.size) * 1e-12\n\n    # Combine all components for feasible bins\n    combined_score = (\n        sigmoid_score\n        + exact_fit_bonus\n        + reuse_bonus\n        + lookahead_score\n        + jitter\n    )\n\n    # Assign combined scores only to feasible bins\n    priorities[feasible] = combined_score[feasible]\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Compute priority scores for each bin in an online Bin Packing Problem.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each currently opened bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (same shape as `bins_remain_cap`). Higher scores\n        indicate more desirable bins. Infeasible bins receive -inf.\n    \"\"\"\n    # Constants\n    exact_fit_bonus = 1e9   # Large reward for an exact fit\n    slack_decay = 10.0      # Steepness of the exponential slack penalty\n    jitter = 1e-12          # Deterministic tie\u2011breaker magnitude\n    atol = 1e-12            # Tolerance for detecting an exact fit\n\n    # Convert to flat float array\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n    if n_bins == 0:\n        return np.empty(0, dtype=float)\n\n    # Remaining capacity after placing the item\n    slack = caps - item\n\n    # Feasibility mask (allow tiny negative due to floating point)\n    feasible = slack >= -atol\n\n    # Initialise priorities with -inf for infeasible bins\n    priority = np.full_like(caps, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        # No feasible bin \u2013 return early\n        return priority\n\n    # Indices of feasible bins\n    feasible_idx = np.nonzero(feasible)[0]\n    slack_feasible = slack[feasible_idx]\n\n    # Monotonic base score: negative slack (smaller slack \u21d2 higher score)\n    base_score = -slack_feasible\n\n    # Normalised slack for exponential penalty\n    max_slack = np.max(slack_feasible)\n    norm_slack = slack_feasible / (max_slack + atol)\n\n    # Exponential slack penalty (larger slack \u21d2 larger penalty)\n    slack_penalty = np.exp(slack_decay * norm_slack)\n\n    # Combine base and penalty (higher is better)\n    priority[feasible_idx] = base_score - slack_penalty\n\n    # Exact\u2011fit bonus (detect near\u2011zero slack)\n    exact_fit_mask = np.isclose(slack_feasible, 0.0, atol=atol)\n    if np.any(exact_fit_mask):\n        priority[feasible_idx[exact_fit_mask]] += exact_fit_bonus\n\n    # Deterministic tie\u2011breaker: prefer lower\u2011index bins slightly\n    priority -= np.arange(n_bins, dtype=float) * jitter\n\n    # Reshape to original shape\n    return priority.reshape(bins_remain_cap.shape)\n\n[Reflection]\nPrefer monotonic scores, simple exponential slack penalty, huge exact\u2011fit bonus, deterministic jitter, minimal hyperparameters.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}