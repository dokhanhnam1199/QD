{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    bin_capacity: float = 1.0,\n    avg_future_item: float = None,\n) -> np.ndarray:\n    \"\"\"\n    Advanced priority function for online Bin Packing.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of the currently opened bins.\n    bin_capacity : float, optional\n        Fixed capacity of each bin (default = 1.0).\n    avg_future_item : float, optional\n        Expected size of a typical future item; used for a one\u2011step look\u2011ahead boost.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin; higher values indicate more desirable bins.\n        Infeasible bins receive ``-np.inf``.\n    \"\"\"\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n    waste = bins_remain_cap - item\n    feasible = waste >= 0\n\n    # Initialise priorities with -inf for infeasible bins\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        return priorities\n\n    # ---------- Parameter settings ----------\n    alpha = 5.0          # exponential slack penalty steepness\n    beta = 4.0           # scaling with current bin fullness\n    exact_fit_reward = 1e6\n    lookahead_boost = 0.2\n    epsilon = 1e-12\n    tol = 1e-9\n    # ----------------------------------------\n\n    # Fullness before placement (0 = empty, 1 = full)\n    fullness_before = (bin_capacity - bins_remain_cap) / bin_capacity\n    # Penalty steepness factor grows with bin fullness\n    factor = 1.0 + beta * fullness_before\n\n    # Normalized slack (waste) after placing the item\n    normalized_slack = waste / bin_capacity\n\n    # Exponential penalty: larger slack \u2192 more negative priority\n    penalty = -np.exp(alpha * normalized_slack * factor)\n\n    # Apply penalty to feasible bins\n    priorities[feasible] = penalty[feasible]\n\n    # Massive reward for an exact fit (waste \u2248 0)\n    exact_fit_mask = feasible & np.isclose(waste, 0.0, atol=tol)\n    priorities[exact_fit_mask] = exact_fit_reward\n\n    # One\u2011step look\u2011ahead boost if we have an estimate of future item size\n    if avg_future_item is not None:\n        boost_mask = feasible & (waste >= avg_future_item)\n        if np.any(boost_mask):\n            # Boost proportional to the surplus capacity beyond the expected future item\n            boost = lookahead_boost * ((waste[boost_mask] - avg_future_item) / bin_capacity)\n            priorities[boost_mask] += boost\n\n    # Tiny tie\u2011breaker: deterministic component (index) plus minuscule random noise\n    N = bins_remain_cap.size\n    det_eps = -np.arange(N) * epsilon\n    rand_eps = (np.random.rand(N) - 0.5) * epsilon * 0.1  # \u00b10.05\u00b7\u03b5\n    tie_breaker = det_eps + rand_eps\n    priorities += tie_breaker\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n                exact_fit_bonus: float = 1e6,\n                slack_exponent_k: float = 10.0,\n                next_item_bonus: float = 0.05,\n                jitter: float = 1e-12,\n                exact_fit_atol: float = 1e-12,\n                eps: float = 1e-12) -> np.ndarray:\n    \"\"\"\n    Compute a priority score for each open bin in an online Bin Packing problem.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1-D array of remaining capacities of the currently opened bins.\n    exact_fit_bonus : float, optional\n        Large constant added for (near) exact fits.\n    slack_exponent_k : float, optional\n        Controls steepness of the exponential slack bonus.\n    next_item_bonus : float, optional\n        Bonus if the bin would still hold another item of the same size.\n    jitter : float, optional\n        Tiny magnitude for deterministic tie\u2011breaking.\n    exact_fit_atol : float, optional\n        Absolute tolerance for treating a placement as an exact fit.\n    eps : float, optional\n        Small constant to avoid division\u2011by\u2011zero when normalising slack.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (same shape as ``bins_remain_cap``).  Higher scores are\n        more desirable.\n    \"\"\"\n    # Ensure a flat float array\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Edge case: no bins at all\n    if n_bins == 0:\n        return np.empty(0, dtype=float)\n\n    # Slack after placing the item\n    slack = caps - item\n\n    # Feasibility mask: slack must be non\u2011negative\n    feasible = slack >= 0.0\n\n    # Initialise priorities with -inf for infeasible bins\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    # If nothing fits, return early\n    if not feasible.any():\n        return priorities\n\n    # Compute base priority: tighter fit \u2192 larger (less negative) value\n    base_priority = -slack[feasible]\n\n    # Normalise slack for exponential term (avoid division by zero)\n    max_slack = slack[feasible].max()\n    denom = max_slack + eps\n    slack_norm = slack[feasible] / denom\n\n    # Exponential slack bonus: larger for smaller slack_norm\n    exp_bonus = np.exp(-slack_exponent_k * slack_norm)\n\n    # Anticipation bonus: can still fit another item of the same size\n    anticipate_bonus = np.where(slack[feasible] >= item, next_item_bonus, 0.0)\n\n    # Combine components\n    priority_feasible = base_priority + exp_bonus + anticipate_bonus\n\n    # Exact\u2011fit boost (within tolerance)\n    exact_fit_mask = np.isclose(slack[feasible], 0.0, atol=exact_fit_atol)\n    priority_feasible[exact_fit_mask] += exact_fit_bonus\n\n    # Insert feasible priorities back into full array\n    priorities[feasible] = priority_feasible\n\n    # Deterministic tie\u2011breaker: favor lower\u2011index bins ever so slightly\n    tie_breaker = -np.arange(n_bins, dtype=float) * jitter\n    priorities += tie_breaker\n\n    return priorities\n\n[Reflection]\nNormalize slack; exponential reward for tight fits; anticipate next same\u2011size item; huge exact\u2011fit boost; deterministic tie\u2011breaker.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}