{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Priority function implementing the Worst\u2011Fit heuristic for online\n    bin packing.\n\n    The worst\u2011fit strategy chooses the bin with the *largest* remaining\n    capacity that can still accommodate the incoming item.  We compute,\n    for each bin, the capacity that would remain after putting the\n    item.  Bins that cannot hold the item receive an effectively\n    minimal priority value (negative infinity), ensuring they are\n    never selected by a max\u2011arg operation.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array containing the remaining capacity of each bin in use.\n\n    Returns\n    -------\n    np.ndarray\n        An array of the same shape as `bins_remain_cap`.  Higher values\n        correspond to more desirable bins for the upcoming item.\n    \"\"\"\n    # Residual capacity after placing the item (negative if impossible)\n    remaining_after = bins_remain_cap - item\n\n    # Bins that cannot accommodate the item get a very low priority.\n    # Using -np.inf guarantees they will never be chosen by np.argmax.\n    low_priority = -np.inf\n    priorities = np.where(remaining_after >= 0, remaining_after, low_priority)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Softmax\u2011based fit priority for the online Bin Packing Problem.\n\n    Each feasible bin (i.e., with enough remaining capacity for ``item``) receives a\n    probability proportional to ``exp(-remaining_space / T)`` where ``remaining_space``\n    is the leftover capacity after placing the item.  Bins that cannot accommodate\n    the item get a priority of 0.  The temperature ``T`` controls how greedy the\n    decision is: lower ``T`` yields a more deterministic choice (tightest fit), while\n    higher ``T`` spreads probability more uniformly.\n\n    Args:\n        item: Size of the incoming item.\n        bins_remain_cap: 1\u2011D array of remaining capacities of existing bins.\n\n    Returns:\n        An array of the same shape as ``bins_remain_cap`` containing the priority\n        (probability) for each bin.\n    \"\"\"\n    # Ensure a NumPy array of float for safe arithmetic\n    caps = np.asarray(bins_remain_cap, dtype=float)\n\n    # Initialize all priorities to zero (including infeasible bins)\n    priorities = np.zeros_like(caps, dtype=float)\n\n    # Identify bins that can accommodate the item\n    feasible = caps >= item\n    if not np.any(feasible):\n        # No feasible bin \u2013 return all zeros (caller may open a new bin)\n        return priorities\n\n    # Compute the leftover capacity if the item were placed in each feasible bin\n    leftover = caps[feasible] - item                      # >= 0\n\n    # Score is higher for tighter fits: smaller leftover -> larger (less negative) score\n    # Using negative leftover as raw score for softmax\n    raw_scores = -leftover\n\n    # Temperature controls greediness; choose a sensible default\n    temperature = 0.5\n    # Prevent division by zero or extremely sharp distributions\n    temperature = max(temperature, 1e-8)\n\n    # Stable softmax: shift by the maximum raw score before exponent\n    max_score = np.max(raw_scores)\n    exp_shifted = np.exp((raw_scores - max_score) / temperature)\n\n    # Normalize to obtain a probability distribution over feasible bins\n    probs = exp_shifted / exp_shifted.sum()\n\n    # Assign the probabilities back to the full priority vector\n    priorities[feasible] = probs\n    return priorities\n\n[Reflection]\nCombine worst\u2011fit greed with softmax probabilities; tune temperature; penalize waste; consider bin\u2011opening cost.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}