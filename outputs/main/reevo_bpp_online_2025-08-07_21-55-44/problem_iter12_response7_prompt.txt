{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# Global constant for bin capacity (assumed normalized to 1.0)\nBIN_CAPACITY = 1.0\n\n    \"\"\"\n    Priority function for online Bin Packing.\n\n    The score for each currently opened bin combines:\n      \u2022 a sigmoid on the normalized slack after placement, with steepness\n        scaling according to how full the bin already is;\n      \u2022 a large bonus for an exact fit;\n      \u2022 a modest reuse bonus (penalising opening a new bin);\n      \u2022 a one\u2011step look\u2011ahead term that slightly favours bins leaving some slack;\n      \u2022 a tiny deterministic jitter to break exact ties.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each opened bin.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores (same shape as ``bins_remain_cap``). Infeasible\n        bins receive ``-inf`` so they are never selected.\n    \"\"\"\n    # Ensure NumPy array\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n\n    # Feasibility mask: bin can accommodate the item only if remaining capacity >= item\n    feasible = bins_remain_cap >= item\n\n    # Initialise priorities with -inf for infeasible bins\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        # No feasible bin \u2013 caller should open a new bin\n        return priorities\n\n    # Slack after placing the item (non\u2011negative for feasible bins)\n    slack = bins_remain_cap - item\n    slack_norm = slack / BIN_CAPACITY  # normalized to [0, 1]\n\n    # Fullness of each bin before placement (0 for empty, 1 for completely full)\n    fullness = 1.0 - (bins_remain_cap / BIN_CAPACITY)\n\n    # Steepness of the sigmoid scales with fullness\n    base_k = 5.0            # base steepness\n    scale_factor = 5.0      # how much steepness grows with fullness\n    k = base_k * (1.0 + scale_factor * fullness)\n\n    # Decreasing sigmoid on normalized slack; multiplied by 2 maps exact\u2011fit to 1\n    sigmoid_score = 2.0 / (1.0 + np.exp(k * slack_norm))\n\n    # Exact\u2011fit bonus (large boost when slack is essentially zero)\n    eps = 1e-12\n    exact_fit_bonus = np.where(slack <= eps, 10.0, 0.0)\n\n    # Reuse bonus \u2013 small constant that makes using an existing bin slightly better\n    reuse_bonus = 0.05\n\n    # One\u2011step look\u2011ahead term: modestly reward bins that leave a bit of slack\n    lookahead_weight = 0.2\n    lookahead_score = lookahead_weight * slack_norm\n\n    # Tiny deterministic jitter to break ties (prefers lower index)\n    # Using a negative sign ensures index 0 gets the highest tie\u2011breaker.\n    jitter = -np.arange(bins_remain_cap.size) * 1e-12\n\n    # Combine all components for feasible bins\n    combined_score = (\n        sigmoid_score\n        + exact_fit_bonus\n        + reuse_bonus\n        + lookahead_score\n        + jitter\n    )\n\n    # Assign combined scores only to feasible bins\n    priorities[feasible] = combined_score[feasible]\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    *,\n    exact_fit_bonus: float = 1e6,\n    slack_exponent_k: float = 12.0,\n    next_item_bonus: float = 0.05,\n    jitter: float = 1e-12,\n    exact_fit_atol: float = 1e-12,\n    eps: float = 1e-12,\n) -> np.ndarray:\n    \"\"\"\n    Compute priority scores for each open bin in an online Bin Packing problem.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item (0 < item \u2264 bin capacity).\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities of the currently opened bins.\n    exact_fit_bonus : float, optional\n        Large additive boost for (near) exact fits.\n    slack_exponent_k : float, optional\n        Controls the steepness of the exponential reward for tight fits.\n    next_item_bonus : float, optional\n        Bonus added if the bin would still be able to accommodate another\n        item of the same size after placing the current one.\n    jitter : float, optional\n        Tiny deterministic tie\u2011breaker (lower\u2011index bins get a minute advantage).\n    exact_fit_atol : float, optional\n        Absolute tolerance for treating a placement as an exact fit.\n    eps : float, optional\n        Small constant to avoid division\u2011by\u2011zero in normalisation.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (same shape as ``bins_remain_cap``). Higher scores indicate\n        more desirable bins. Infeasible bins receive ``-np.inf``.\n    \"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Early exit if there are no bins\n    if n_bins == 0:\n        return np.empty(0, dtype=float)\n\n    # Slack after placing the item\n    slack = caps - item\n\n    # Feasibility mask: only bins with non\u2011negative slack are candidates\n    feasible = slack >= 0.0\n\n    # Initialise all priorities to -inf (infeasible)\n    priorities = np.full(n_bins, -np.inf, dtype=float)\n\n    # If nothing fits, return early\n    if not feasible.any():\n        return priorities\n\n    # ----- Base component: prefer tighter fits -----\n    # Negative slack: less waste yields a larger (less negative) value\n    base = -slack[feasible]\n\n    # ----- Normalised slack for exponential reward -----\n    # Normalise by the largest slack among feasible bins (keeps values in [0,1])\n    max_slack = slack[feasible].max()\n    denom = max_slack + eps\n    slack_norm = slack[feasible] / denom\n\n    # Exponential reward: larger when slack_norm is small (tight fit)\n    exp_reward = np.exp(-slack_exponent_k * slack_norm)\n\n    # ----- Anticipation bonus: can still fit another same\u2011size item -----\n    anticipate = np.where(slack[feasible] >= item, next_item_bonus, 0.0)\n\n    # ----- Combine components -----\n    score = base + exp_reward + anticipate\n\n    # ----- Exact\u2011fit boost (within tolerance) -----\n    exact_fit_mask = np.isclose(slack[feasible], 0.0, atol=exact_fit_atol)\n    score[exact_fit_mask] += exact_fit_bonus\n\n    # Insert feasible scores back into the full array\n    priorities[feasible] = score\n\n    # ----- Deterministic tie\u2011breaker: lower index gets a minuscule advantage -----\n    tie_breaker = -np.arange(n_bins, dtype=float) * jitter\n    priorities += tie_breaker\n\n    return priorities\n\n[Reflection]\nPrefer tight fits, normalize slack, exponential reward, big exact\u2011fit bonus, anticipate next item, tiny tie\u2011breaker.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}