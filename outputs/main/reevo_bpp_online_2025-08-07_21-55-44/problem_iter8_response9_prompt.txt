{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    *,\n    exact_fit_bonus: float = 1e5,\n    slack_decay: float = 10.0,\n    next_item_factor: float = 0.1,\n    jitter: float = 1e-6,\n    atol: float = 1e-12,\n) -> np.ndarray:\n    \"\"\"\n    Compute priority scores for bins in an online Bin Packing Problem.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each currently opened bin.\n    exact_fit_bonus : float, optional\n        Large bonus added for bins that can accommodate the item exactly.\n    slack_decay : float, optional\n        Controls the steepness of the exponential slack bonus.\n    next_item_factor : float, optional\n        Small bonus for bins that can still hold another item of the same size\n        after the current placement.\n    jitter : float, optional\n        Deterministic tie\u2011breaker magnitude (lower\u2011index bins get a tiny\n        advantage).\n    atol : float, optional\n        Absolute tolerance for detecting an exact fit.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores of the same shape as ``bins_remain_cap``.  Feasible\n        bins receive finite scores; infeasible bins receive ``-np.inf`` and\n        are never selected.\n    \"\"\"\n    # Convert to a 1\u2011D float array; avoid modifying the caller's array\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Initialise all scores to -inf (infeasible)\n    priority = np.full_like(caps, -np.inf, dtype=float)\n\n    if n_bins == 0:\n        return priority\n\n    # Slack after placing the item\n    slack = caps - item\n    feasible = slack >= 0\n\n    # No feasible bins: return early\n    if not np.any(feasible):\n        return priority\n\n    # Normalise slack within feasible bins to [0, 1]\n    max_slack = np.max(slack[feasible])  # >= 0\n    slack_norm = slack[feasible] / (max_slack + atol)\n\n    # Exponential slack bonus: small slack \u2192 large bonus\n    slack_bonus = np.exp(-slack_decay * slack_norm)\n\n    # Base priority from slack bonus\n    priority[feasible] = slack_bonus\n\n    # Anticipation bonus: still room for another item of the same size\n    anticipation_mask = feasible & (slack >= item)\n    priority[anticipation_mask] += next_item_factor\n\n    # Exact\u2011fit bonus\n    exact_fit_mask = feasible & np.isclose(slack, 0.0, atol=atol)\n    priority[exact_fit_mask] += exact_fit_bonus\n\n    # Deterministic tie\u2011breaker: favor lower\u2011index bins slightly\n    priority += -np.arange(n_bins, dtype=float) * jitter\n\n    return priority\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    item: float,\n    bins_remain_cap: np.ndarray,\n    *,\n    exact_fit_bonus: float = 1e7,\n    slack_decay: float = 10.0,\n    jitter: float = 1e-12,\n    atol: float = 1e-12,\n) -> np.ndarray:\n    \"\"\"\n    Compute a priority score for each bin in an online Bin Packing Problem.\n\n    Higher scores indicate a more desirable bin for the incoming ``item``1``.\n    The scoring scheme follows the reflection:\n\n    \u2022 Monotonic slack score: bins with less leftover capacity after placement\n      receive a higher base score (``-slack``).\n    \u2022 Exponential slack penalty: larger leftovers are penalised by an\n      exponential term, preserving monotonicity.\n    \u2022 Large bonus for exact fits.\n    \u2022 Tiny deterministic tie\u2011breaker based on bin index (``jitter``).\n\n    Infeasible bins (capacity < item) receive ``-inf`` priority.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array of remaining capacities for each currently opened bin.\n    exact_fit_bonus : float, optional\n        Bonus added for bins where the item fits exactly.\n    slack_decay : float, optional\n        Controls steepness of the exponential slack penalty.\n    jitter : float, optional\n        Magnitude of the deterministic tie\u2011breaker based on bin index.\n    atol : float, optional\n        Absolute tolerance for detecting an exact fit.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores (same shape as ``bins_remain_cap``).\n    \"\"\"\n    # Convert to 1\u2011D float  array\n    caps = np.asarray(bins_remain_cap, dtype=float).ravel()\n    n_bins = caps.size\n\n    # Edge case: no bins\n    if n_bins == 0:\n        return np.array([], dtype=float)\n\n    # Remaining capacity after placing the item\n    slack = caps - item\n\n    # Feasibility mask (allow tiny negative due to floating point)\n    feasible = slack >= -atol\n\n    # Initialise priorities with -inf for infeasible bins\n    priority = np.full_like(caps, -np.inf, dtype=float)\n\n    if not np.any(feasible):\n        # No feasible bin \u2013 return early\n        return priority\n\n    # Monotonic base score: negative slack (smaller slack \u21d2 higher score)\n    base_score = -slack[feasible]\n\n    # Normalised slack for exponential penalty (avoid division by zero)\n    max_slack = np.max(slack[feasible])\n    norm_slack = slack[feasible] / (max_slack + atol)\n\n    # Exponential slack penalty (larger slack \u21d2 larger penalty)\n    slack_penalty = np.exp(slack_decay * norm_slack)\n\n    # Combine base and penalty (higher is better)\n    priority[feasible] = base_score - slack_penalty\n\n    # Exact\u2011fit bonus (detect near\u2011zero slack)\n    exact_fit = np.isclose(slack[feasible], 0.0, atol=atol)\n    if np.any(exact_fit):\n        priority[feasible][exact_fit] += exact_fit_bonus\n\n    # Deterministic tie\u2011breaker: prefer lower\u2011index bins slightly\n    priority -= np.arange(n_bins, dtype=float) * jitter\n\n    return priority\n\n[Reflection]\nMonotonic slack base, exponential penalty, huge exact\u2011fit bonus, minimal jitter; drop extra anticipation term.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}