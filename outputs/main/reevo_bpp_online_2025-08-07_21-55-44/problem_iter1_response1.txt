```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Best‑Fit priority function for online Bin Packing.

    The priority is higher (i.e., less negative) for bins that will have the
    smallest remaining capacity after placing ``item``. Bins that cannot accommodate
    the item receive ``-inf`` priority to guarantee they are never chosen.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of remaining capacities for each currently opened bin.

    Returns
    -------
    np.ndarray
        Array of priority scores, same shape as ``bins_remain_cap``. The caller
        should select the bin with the maximum priority.
    """
    # Ensure a NumPy array (in case a list or other sequence is passed)
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)

    # Compute the waste (unused space) if the item were placed in each bin.
    waste = bins_remain_cap - item

    # Feasibility mask: only bins with non‑negative waste can hold the item.
    feasible = waste >= 0

    # Primary priority: negative waste (larger value ⇒ smaller waste).
    base_priority = np.where(feasible, -waste, -np.inf)

    # Tie‑breaker: give a tiny advantage to bins with smaller index.
    # This factor is far smaller than any realistic waste difference.
    epsilon = 1e-12
    tie_breaker = -np.arange(bins_remain_cap.size) * epsilon

    priorities = base_priority + tie_breaker
    return priorities
```
