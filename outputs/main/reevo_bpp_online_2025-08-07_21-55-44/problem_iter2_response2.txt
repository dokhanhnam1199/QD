```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority function for online Bin Packing that blends worst‑fit
    with best‑fit using a softmax‑style score, temperature scaling,
    and a linear waste penalty.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        1‑D array of the remaining capacity of each currently used bin.

    Returns
    -------
    np.ndarray
        Priority scores for each bin.  The bin with the highest score will
        be selected.  Feasible bins that cannot accommodate the item receive
        a score of -inf and are never chosen.
    """
    # Ensure we are working with floats
    caps = np.asarray(bins_remain_cap, dtype=float)

    # Start with all bins infeasible
    priorities = np.full_like(caps, fill_value=-np.inf, dtype=float)

    # Identify bins that can accept the item
    feasible = caps >= item
    if not np.any(feasible):
        return priorities

    # Leftover capacity if the item were placed in each feasible bin
    leftover = caps[feasible] - item  # >= 0

    # ---------- Heuristic parameters ----------
    alpha = 0.5            # 0 → pure best‑fit, 1 → pure worst‑fit
    penalty_factor = 0.1   # linear penalty proportional to wasted capacity
    temperature = 1.0      # temperature for scaling (larger → flatter)

    # ---------- Combine best‑fit and worst‑fit ----------
    # Best‑fit score: tighter fit → higher priority (negative leftover)
    best_score = -leftover
    # Worst‑fit score: more remaining capacity → higher priority (positive leftover)
    worst_score = leftover
    # Linear blend
    combined = (1 - alpha) * best_score + alpha * worst_score

    # ---------- Penalize waste ----------
    combined -= penalty_factor * leftover  # larger leftover => more penalty

    # ---------- Temperature scaling ----------
    if temperature <= 0:
        temperature = 1e-8
    combined /= temperature

    # Assign the computed priorities to the feasible bins
    priorities[feasible] = combined

    return priorities
```
