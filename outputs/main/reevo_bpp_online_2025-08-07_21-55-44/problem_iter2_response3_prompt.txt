{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Computes a priority for each bin using the Worst\u2011Fit strategy for the\n    online Bin Packing Problem.  The bin with the highest priority will be\n    chosen for the incoming item.\n\n    For each bin we calculate the amount of free capacity that would remain\n    after placing the item.  This value is used as the priority; bins that\n    cannot accommodate the item receive a sentinel negative value (\u2212\u221e) so\n    they will never be chosen.\n\n    Args:\n        item: The size of the item that must be placed.\n        bins_remain_cap: 1\u2011D numpy array holding the remaining capacity of each bin.\n\n    Returns:\n        A numpy array of floats, same shape as ``bins_remain_cap``.  Each element\n        represents the priority of the corresponding bin.\n    \"\"\"\n    # Ensure we are working with float values\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n    item = float(item)\n\n    # Compute the remaining capacity if the item were placed\n    slack = bins_remain_cap - item\n\n    # Bins that cannot fit the item receive a very negative priority\n    # so they are never selected by argmax.\n    priorities = np.where(slack >= 0, slack, -np.inf)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Exact\u2011Fit\u2011First priority function for the online Bin Packing Problem.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        1\u2011D array containing the remaining capacity of each open bin.\n\n    Returns\n    -------\n    np.ndarray\n        Array of priority scores (same shape as `bins_remain_cap`).  The bin\n        with the highest score should be chosen for the item.\n\n    Strategy\n    --------\n    1. **Exact fits** (remaining capacity after placement \u2248 0) receive a very\n       large positive boost, guaranteeing they are selected whenever possible.\n    2. **Feasible but non\u2011exact bins** receive a priority equal to the negative\n       slack (`- (remaining capacity - item)`).  Since the slack is non\u2011negative,\n       a smaller slack yields a larger priority (e.g., slack\u202f=\u202f0.1 \u2192 \u22120.1 > \u22121.0).\n    3. **Infeasible bins** receive `-inf` so they are never selected.\n    \"\"\"\n    # Compute remaining capacity after putting the item into each bin\n    slack = bins_remain_cap - item\n\n    # Feasibility mask (slack >= 0, i.e., item fits)\n    feasible = slack >= 0\n\n    # Exact\u2011fit mask (slack is essentially zero, tolerant to floating\u2011point noise)\n    exact_fit = feasible & np.isclose(slack, 0.0, atol=1e-12)\n\n    # Initialise all priorities as -inf (worst possible)\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n\n    # Assign a huge constant to exact\u2011fit bins\n    BIG_BOOST = 1e9\n    priorities[exact_fit] = BIG_BOOST\n\n    # For the remaining feasible bins, priority = -slack (higher when slack is smaller)\n    non_exact = feasible & ~exact_fit\n    priorities[non_exact] = -slack[non_exact]\n\n    return priorities\n\n[Reflection]\nBoost exact fits heavily; rank feasible bins by\u202f\u2011slack; assign\u202f\u2011inf to infeasible; use tolerance for floating\u2011point noise.\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}