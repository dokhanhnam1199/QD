```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins by rewarding exact fits and then minimizing normalized slack
    for non-exact fits, ensuring stability.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    can_fit_mask = bins_remain_cap >= item
    
    if not np.any(can_fit_mask):
        return priorities

    eligible_bins_remain_cap = bins_remain_cap[can_fit_mask]
    
    # Prioritize exact fits with a high score
    exact_fit_mask = np.isclose(eligible_bins_remain_cap, item)
    priorities[can_fit_mask][exact_fit_mask] = 1.0
    
    # For non-exact fits, minimize normalized slack (remaining capacity after fit / original bin capacity)
    non_exact_fit_mask = ~exact_fit_mask
    if np.any(non_exact_fit_mask):
        non_exact_eligible_bins_remain_cap = eligible_bins_remain_cap[non_exact_fit_mask]
        
        # Calculate remaining capacity after placing the item
        remaining_after_fit = non_exact_eligible_bins_remain_cap - item
        
        # Original capacities for the eligible non-exact fit bins
        original_capacities = bins_remain_cap[can_fit_mask][non_exact_fit_mask]
        
        # Calculate normalized slack. Add epsilon to denominator for stability.
        # Higher priority for smaller normalized slack.
        normalized_slack = remaining_after_fit / (original_capacities + 1e-9)
        
        # Invert normalized slack to get priority, so smaller slack gets higher priority
        # Add 1 to inverted slack to shift values and ensure positive priorities,
        # making them distinct from exact fit score of 1.0.
        priorities[can_fit_mask][non_exact_fit_mask] = 1.0 + (1.0 / (normalized_slack + 1e-9))

    return priorities
```
