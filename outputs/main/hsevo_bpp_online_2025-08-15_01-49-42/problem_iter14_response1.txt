```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Hybrid heuristic: Prioritizes exact fits, then Best Fit, with a penalty for extreme slack.
    Combines the exact fit priority of v0 with the normalized slack of v1, and adds a penalty.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float) # Initialize with negative infinity for non-fitting bins
    epsilon = 1e-9

    # --- Exact Fit Priority (High Priority) ---
    exact_fit_mask = np.isclose(bins_remain_cap, item)
    exact_fit_score = 1e6  # High score for perfect matches
    priorities[exact_fit_mask] = exact_fit_score

    # --- Non-Exact Fit Priorities ---
    can_fit_mask = bins_remain_cap > item
    fitting_bins_indices = np.where(can_fit_mask)[0]

    if fitting_bins_indices.size > 0:
        fitting_bins_remain_cap = bins_remain_cap[fitting_bins_indices]
        
        # Calculate remaining capacity after placing the item
        remaining_capacities_after_fit = fitting_bins_remain_cap - item
        
        # --- Best Fit Component (Minimize remaining capacity) ---
        # Prioritize bins with less remaining capacity. Score is inverse of remaining capacity.
        best_fit_score_component = 1.0 / (remaining_capacities_after_fit + epsilon)
        
        # --- Slack Penalty Component (Discourage extreme slack) ---
        # Penalty for bins that would have a large amount of remaining capacity relative to the item size.
        # This term is subtracted, so a larger penalty means a lower score.
        slack_penalty_factor = 0.05 # Tunable parameter for penalty strength
        relative_slack = remaining_capacities_after_fit / (item + epsilon)
        slack_penalty_component = slack_penalty_factor * relative_slack

        # Combine scores: Prioritize small remaining capacity, then penalize large relative slack.
        # Scale Best Fit component to differentiate from exact fits, but be lower.
        # Use a factor to keep it below exact_fit_score.
        scaled_best_fit = 1000.0 * best_fit_score_component
        combined_non_exact_score = scaled_best_fit - slack_penalty_component

        # Assign scores to priorities array for fitting bins
        priorities[fitting_bins_indices] = combined_non_exact_score
        
        # Ensure that exact fits (already assigned exact_fit_score) are still higher.
        # This is implicitly handled by the high exact_fit_score value.

    return priorities
```
