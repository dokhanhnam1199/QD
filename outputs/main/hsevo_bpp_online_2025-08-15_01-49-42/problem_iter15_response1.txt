```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacity: float) -> np.ndarray:

    """
    Normalized Slack Fit priority function.

    This strategy prioritizes bins based on their "normalized slack" after placing the item.
    Normalized slack is defined as (remaining_capacity - item) / bin_capacity.
    A smaller normalized slack indicates a better fit. We want to minimize this value.
    Additionally, we provide a higher priority to exact fits (slack of 0).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacity: The maximum capacity of each bin.

    Returns:
        Array of priority scores for each bin. Bins that cannot accommodate the item
        receive a priority of -1. Higher scores indicate higher priority.
    """
    priorities = np.full_like(bins_remain_cap, -1.0)
    
    can_fit_mask = bins_remain_cap >= item
    
    if np.any(can_fit_mask):
        remaining_capacities_if_fit = bins_remain_cap[can_fit_mask] - item
        
        # Calculate normalized slack: (remaining_capacity - item) / bin_capacity
        # We want to minimize this value. To convert to a maximization problem,
        # we can take the negative of the normalized slack.
        # Add a small bonus for exact fits (slack = 0).
        normalized_slack = remaining_capacities_if_fit / bin_capacity
        
        # Priority is -normalized_slack. A higher value means a smaller (or zero) slack.
        # We can also add a small constant to ensure exact fits have a distinctively higher priority
        # if there are floating point issues where normalized_slack might be slightly negative.
        # A simpler approach for now: make exact fits have a slightly higher priority.
        # Let's assign a bonus of 1 to exact fits.
        
        priorities[can_fit_mask] = -normalized_slack
        
        # Boost priority for bins that become exactly full
        exact_fit_mask = (remaining_capacities_if_fit == 0)
        priorities[can_fit_mask][exact_fit_mask] += 1.0 # Add a bonus for exact fits

    return priorities
```
