```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes exact fits, then bins with minimal normalized slack using a stable, tiered scoring.

    This function assigns the highest priority to exact fits. For other bins that can
    accommodate the item, it calculates a priority based on normalized slack.
    The scoring is tiered to ensure clear separation between exact fits and other options,
    and among different levels of slack.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Mask for bins that can fit the item
    can_fit_mask = bins_remain_cap >= item
    fit_indices = np.where(can_fit_mask)[0]

    if len(fit_indices) == 0:
        return priorities # No bins can fit the item

    # Separate bins into exact fits and potential fits
    exact_fit_mask = bins_remain_cap[can_fit_mask] == item
    exact_fit_indices_filtered = np.where(exact_fit_mask)[0]
    actual_exact_fit_indices = fit_indices[exact_fit_indices_filtered]

    # Assign highest priority to exact fits
    priorities[actual_exact_fit_indices] = 1.0

    # Process bins that are not exact fits but can still accommodate the item
    non_exact_fit_mask = can_fit_mask & ~exact_fit_mask
    non_exact_fit_indices = np.where(non_exact_fit_mask)[0]

    if len(non_exact_fit_indices) > 0:
        eligible_bins_for_slack = bins_remain_cap[non_exact_fit_indices]
        
        # Calculate remaining capacity after fitting the item
        remaining_after_fit = eligible_bins_for_slack - item
        
        # Calculate normalized slack: (remaining_capacity_after_fit) / (current_bin_capacity)
        # A smaller normalized slack is better. Add epsilon for numerical stability.
        # Using the current remaining capacity as a proxy for original bin capacity for normalization.
        normalized_slack = remaining_after_fit / (eligible_bins_for_slack + 1e-9)

        # Assign priorities for non-exact fits.
        # We want to favor smaller normalized slack. The scoring should be less than 1.0 (exact fit score)
        # and greater than 0.0 (default for non-fitting bins).
        # We use 1.0 - normalized_slack to map smaller slack to higher scores.
        # Scale these scores to be clearly less than 1.0, e.g., into the range [0.5, 0.99].
        # A linear scaling: 0.5 + (1.0 - normalized_slack) * 0.49
        # This approach combines the best aspects of prioritizing exact fits and using
        # normalized slack for fine-grained selection among other options.
        best_fit_scores = 1.0 - normalized_slack
        scaled_best_fit_priorities = 0.5 + best_fit_scores * 0.49

        priorities[non_exact_fit_indices] = scaled_best_fit_priorities

    return priorities
```
