import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, exact_fit_score: float = 0.4335547447793364, slack_offset: float = 0.985670739810402, epsilon: float = -1.372550348856294e-09) -> np.ndarray:
    """Prioritizes exact fits and then applies a scaled inverse slack for remaining bins.

    This heuristic rewards bins that perfectly accommodate the item with a score of `exact_fit_score`.
    For other bins, it calculates a priority based on the inverse of the remaining
    capacity after fitting, ensuring numerical stability and favoring tighter fits.

    Args:
        item: The size of the item to be placed.
        bins_remain_cap: A numpy array representing the remaining capacity of each bin.
        exact_fit_score: The score assigned to bins that perfectly fit the item.
        slack_offset: A value added to the remaining capacity for inverse calculation,
                      ensuring bins with zero remaining capacity after fit get a high priority.
        epsilon: A small value to prevent division by zero and handle floating-point inaccuracies.

    Returns:
        A numpy array representing the priority score for each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        return priorities

    suitable_bins_remain_cap = bins_remain_cap[can_fit_mask]
    suitable_bins_indices = np.where(can_fit_mask)[0]

    # Prioritize exact fits with a score of exact_fit_score
    exact_fit_mask = suitable_bins_remain_cap == item
    priorities[suitable_bins_indices[exact_fit_mask]] = exact_fit_score

    # For non-exact fits, use a scaled inverse of the remaining capacity after fitting
    non_exact_fit_mask = ~exact_fit_mask
    if np.any(non_exact_fit_mask):
        non_exact_bins_remain_cap = suitable_bins_remain_cap[non_exact_fit_mask]
        # Calculate the remaining capacity after fitting the item
        remaining_after_fit = non_exact_bins_remain_cap - item
        # Assign priorities: inverse of (remaining_after_fit + slack_offset + epsilon)
        priorities[suitable_bins_indices[non_exact_fit_mask]] = 1.0 / (remaining_after_fit + slack_offset + epsilon)

    return priorities
