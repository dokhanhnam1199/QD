```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    suitable_bins_mask = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    suitable_bins_remain_cap = bins_remain_cap[suitable_bins_mask]
    
    if suitable_bins_remain_cap.size > 0:
        # Inverse distance (proximity fit): prioritize bins that are closer to fitting the item
        # A smaller remaining capacity (but still fitting) is better
        # We want to invert this, so larger values mean higher priority
        # Using (1 / (remaining_capacity - item + epsilon)) to avoid division by zero and heavily favor bins with minimal leftover space.
        # Adding a small constant to remaining capacity before inversion to push smaller leftover spaces to higher priorities
        
        # Option 1: Simple inverse of remaining capacity, emphasizing tighter fits
        # priorities[suitable_bins_mask] = 1.0 / (suitable_bins_remain_cap + 1e-9)
        
        # Option 2: Prioritize bins that leave minimal waste, which means remaining_capacity is closest to item size
        # Difference from item size: (remaining_capacity - item)
        # Smaller difference is better, so we want to invert it for higher priority.
        # Add a small constant to avoid division by zero and to ensure that bins that exactly fit get a high priority.
        differences = suitable_bins_remain_cap - item
        priorities[suitable_bins_mask] = 1.0 / (differences + 1.0 + 1e-9) 

        # Option 3: Weighted inverse distance - could consider how "full" the bin is relative to its initial capacity if that info was available.
        # For now, sticking to relative to item size.

    return priorities
```
