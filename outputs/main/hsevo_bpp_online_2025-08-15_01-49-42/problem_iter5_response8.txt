```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins by favoring exact fits, then best fits by minimizing normalized slack.
    This hybrid approach ensures precise packing and robustly handles near-fits.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    can_fit_mask = bins_remain_cap >= item
    
    if not np.any(can_fit_mask):
        return priorities

    eligible_bins_remain_cap = bins_remain_cap[can_fit_mask]
    
    # Score 1.0 for exact fits to give them the highest priority
    exact_fit_mask = np.isclose(eligible_bins_remain_cap, item)
    priorities[can_fit_mask][exact_fit_mask] = 1.0
    
    # For non-exact fits, calculate normalized slack and use it to prioritize
    non_exact_fit_mask = ~exact_fit_mask
    if np.any(non_exact_fit_mask):
        non_exact_eligible_bins_remain_cap = eligible_bins_remain_cap[non_exact_fit_mask]
        
        # Calculate slack after placing the item
        slack = non_exact_eligible_bins_remain_cap - item
        
        # Normalized slack: slack / original remaining capacity. Smaller is better.
        # Add epsilon for numerical stability and to prevent division by zero.
        # Invert normalized slack to get a priority score (higher is better).
        epsilon = 1e-9
        normalized_slack_priorities = 1.0 / (slack / (non_exact_eligible_bins_remain_cap + epsilon) + epsilon)
        
        # Normalize these priorities so the maximum is less than 1.0 (to distinguish from exact fits)
        if np.max(normalized_slack_priorities) > epsilon:
            normalized_slack_priorities = 0.5 + 0.5 * (normalized_slack_priorities / np.max(normalized_slack_priorities))
        else:
            normalized_slack_priorities = np.full_like(normalized_slack_priorities, 0.5) # Assign a mid-range score if all are near zero

        priorities[can_fit_mask][non_exact_fit_mask] = normalized_slack_priorities

    return priorities
```
