{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    for i in range(len(bins_remain_cap)):\n        if bins_remain_cap[i] >= item:\n            priorities[i] = 1 / (bins_remain_cap[i] - item + 1e-9)\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin using Softmax-Based Fit.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    eligible_bins_mask = bins_remain_cap >= item\n    \n    if not np.any(eligible_bins_mask):\n        return np.zeros_like(bins_remain_cap)\n        \n    eligible_bins_remain_cap = bins_remain_cap[eligible_bins_mask]\n    \n    \n    differences = eligible_bins_remain_cap - item\n    \n    \n    scaled_differences = differences / np.max(eligible_bins_remain_cap)\n    \n    \n    exponentiated_priorities = np.exp(scaled_differences)\n    \n    \n    priorities = np.zeros_like(bins_remain_cap)\n    priorities[eligible_bins_mask] = exponentiated_priorities\n    \n    return priorities\n\n### Analyze & experience\n- Comparing [Heuristics 1st] (First Fit) and [Heuristics 2nd] (modified First Fit), the first heuristic uses `1.0 / (remaining_after_fit + 1e-9)` which prioritizes bins that will be \"most full\" after packing. The second heuristic uses `1.0 / (differences - min_diff + 1e-9)` which normalizes the remaining capacity relative to the minimum remaining capacity among suitable bins. This normalization can lead to more discriminative priorities.\n\nComparing [Heuristics 3rd] and [Heuristics 4th], the third heuristic explores different options for priority calculation, with Option 2 using `1.0 / (differences + 1.0 + 1e-9)`. This adds a constant to the difference, making the priority less sensitive to very small remaining capacities compared to a pure inverse. The fourth heuristic uses `-(bins_remain_cap[can_fit_mask] - item)`, directly maximizing the negative of the remaining capacity. This approach directly targets the \"most full\" bin without inversion, which can be more stable numerically.\n\nComparing [Heuristics 5th] (Exact Fit First / Best Fit) and [Heuristics 6th] (inverse of remaining capacity), the fifth heuristic prioritizes bins with minimal remaining space by assigning a negative value `-exact_fit_diff`. This is a good way to represent \"closer to exact fit is better\". The sixth heuristic uses `1.0 / (available_bins_caps - item + 1e-9)`, which is similar to the first but applied to specific available bins.\n\nComparing [Heuristics 7th] (Exact Fit First / Best Fit) and [Heuristics 8th] (inverse of remaining capacity), the seventh heuristic prioritizes exact fits with a score of `1.0`, and then uses a scaled inverse of the residual for non-exact fits. This provides a clear hierarchy. The eighth heuristic is a simple loop implementation of inverse remaining capacity.\n\nComparing [Heuristics 13th] and [Heuristics 14th] (Sigmoid Fit Score), the 13th heuristic is incomplete, but the intention seems to be some form of exponential scaling. The 14th uses a sigmoid function on scaled differences, mapping the remaining capacity to a [0, 1] range, which can provide smoother prioritization and better handle varying bin capacities.\n\nComparing [Heuristics 19th] (Worst Fit) and [Heuristics 20th] (Worst Fit), both aim to prioritize bins with the largest remaining capacity. The 19th uses `-np.inf` for non-fitting bins and the actual difference for fitting bins. The 20th uses `0` for non-fitting bins and the difference, also setting non-fitting bins to `-np.inf`. The use of `-np.inf` for non-fitting bins in both is consistent with maximizing priority. The 20th is slightly cleaner by directly assigning priorities based on masks.\n\nOverall: Heuristics that provide a clear ranking (e.g., prioritizing exact fits, then best fits) or use normalized/scaled differences (like sigmoid) tend to be more robust and potentially perform better. Simple inversions can be sensitive to small differences. Worst-fit heuristics have a different objective.\n- \nHere's a refined approach to self-reflection for heuristic design:\n\n*   **Keywords:** Objective clarity, capacity normalization, adaptive masking, robust scaling.\n*   **Advice:** Focus on precisely defining objective functions (e.g., exact fit satisfaction, minimizing slack), and consistently normalize or scale capacities to create a common comparison basis. Implement dynamic masking strategies that adapt to bin characteristics rather than fixed rules.\n*   **Avoid:** Over-reliance on absolute differences or direct division. Avoid rigid, non-adaptive masking logic that fails on diverse bin sizes.\n*   **Explanation:** This ensures heuristics evaluate solutions meaningfully across different scales. Adaptive masking and robust scaling prevent edge cases and numerical instability, leading to more generalizable and effective optimization.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}