```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes exact fits, then bins with minimal normalized slack, using tiered scoring.
    This heuristic combines the clarity of exact fit prioritization with nuanced differentiation
    among non-exact fits based on relative space utilization for better packing efficiency.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 1e-9

    can_fit_mask = bins_remain_cap >= item
    fit_indices = np.where(can_fit_mask)[0]

    if len(fit_indices) == 0:
        return priorities

    eligible_bins_remain_cap = bins_remain_cap[can_fit_mask]
    
    exact_fit_mask = np.abs(eligible_bins_remain_cap - item) < epsilon
    exact_fit_indices_filtered = np.where(exact_fit_mask)[0]
    actual_exact_fit_indices = fit_indices[exact_fit_indices_filtered]

    priorities[actual_exact_fit_indices] = 1.0

    non_exact_fit_mask = can_fit_mask & ~exact_fit_mask
    non_exact_fit_indices = np.where(non_exact_fit_mask)[0]

    if len(non_exact_fit_indices) > 0:
        eligible_bins_for_slack_subset = bins_remain_cap[non_exact_fit_indices]
        
        remaining_after_fit = eligible_bins_for_slack_subset - item
        
        # Prioritize bins that leave minimal space after fitting the item.
        # Normalize this residual capacity relative to the bin's capacity before fitting.
        # This captures both 'best fit' and 'normalized slack' ideas.
        # Higher score for smaller normalized remaining capacity.
        normalized_remaining_capacity = remaining_after_fit / (eligible_bins_for_slack_subset + epsilon)
        
        # Map to scores less than 1.0 (exact fit score) to differentiate.
        # A score of 1 - normalized_remaining_capacity (scaled) gives higher scores to bins
        # that have less remaining space after fitting, thus being more "full".
        # Scale to be in a range like [0.5, 0.99] for clear distinction from exact fits.
        best_fit_scores = 1.0 - normalized_remaining_capacity
        scaled_best_fit_priorities = 0.5 + best_fit_scores * 0.49

        priorities[non_exact_fit_indices] = scaled_best_fit_priorities

    return priorities
```
