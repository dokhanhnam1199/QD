{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines exact fit preference with scaled inverse normalized slack for non-exact fits.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit_mask = bins_remain_cap >= item\n\n    if not np.any(can_fit_mask):\n        return priorities\n\n    eligible_bins_remain_cap = bins_remain_cap[can_fit_mask]\n    eligible_bins_indices = np.where(can_fit_mask)[0]\n\n    # Prioritize exact fits with a high score of 1.0\n    exact_fit_mask = np.isclose(eligible_bins_remain_cap, item)\n    priorities[eligible_bins_indices[exact_fit_mask]] = 1.0\n\n    # For non-exact fits, prioritize bins with smaller normalized slack\n    non_exact_fit_mask = ~exact_fit_mask\n    if np.any(non_exact_fit_mask):\n        non_exact_eligible_bins_remain_cap = eligible_bins_remain_cap[non_exact_fit_mask]\n        \n        # Calculate remaining capacity after placing the item\n        remaining_after_fit = non_exact_eligible_bins_remain_cap - item\n        \n        # Original capacities for the eligible non-exact fit bins\n        original_capacities = bins_remain_cap[eligible_bins_indices[non_exact_fit_mask]]\n        \n        # Calculate normalized slack, ensuring stability with epsilon\n        normalized_slack = remaining_after_fit / (original_capacities + 1e-9)\n        \n        # Assign priorities as 1.0 minus normalized slack, scaled to be less than 1.0\n        # This rewards smaller normalized slack with higher priority values closer to 1.0.\n        priorities[eligible_bins_indices[non_exact_fit_mask]] = 0.99 * (1.0 - normalized_slack)\n\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}