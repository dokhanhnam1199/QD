{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines exact fit priority with scaled inverse normalized slack for non-exact fits.\n    Prioritizes exact fits, then bins with minimal normalized slack to promote balanced packing.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Mask for bins that can potentially fit the item\n    can_fit_mask = bins_remain_cap >= item\n    \n    # Identify bins that are an exact fit\n    exact_fit_mask = np.isclose(bins_remain_cap, item)\n    \n    # Assign highest priority to exact fits\n    priorities[exact_fit_mask] = 1.0\n    \n    # Consider bins that can fit the item but are not exact fits\n    non_exact_fit_mask = can_fit_mask & ~exact_fit_mask\n    non_exact_indices = np.where(non_exact_fit_mask)[0]\n    \n    if len(non_exact_indices) > 0:\n        # Calculate remaining capacity after fitting the item\n        remaining_after_fit = bins_remain_cap[non_exact_indices] - item\n        current_capacities = bins_remain_cap[non_exact_indices]\n        \n        # Calculate normalized slack: (remaining_capacity_after_fit) / (current_bin_capacity)\n        # Smaller normalized slack is better. Add epsilon for numerical stability.\n        normalized_slack = remaining_after_fit / (current_capacities + 1e-9)\n        \n        # Assign priorities: higher score for smaller normalized slack.\n        # Use 1.0 - normalized_slack to map smaller slack to higher scores.\n        # Scale these scores to be less than 1.0, ensuring exact fits are always preferred.\n        # A range of [0.5, 0.99] effectively differentiates good fits.\n        best_fit_scores = 1.0 - normalized_slack\n        scaled_best_fit_priorities = 0.5 + best_fit_scores * 0.49\n        \n        priorities[non_exact_indices] = scaled_best_fit_priorities\n        \n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}