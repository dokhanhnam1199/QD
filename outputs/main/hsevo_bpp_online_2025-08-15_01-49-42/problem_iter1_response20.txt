```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Implements the First Fit Decreasing heuristic for the online Bin Packing Problem.
    This version prioritizes bins that can fit the item with the least remaining capacity
    after the item is placed, encouraging tighter packing.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    for i in range(len(bins_remain_cap)):
        if bins_remain_cap[i] >= item:
            remaining_capacity = bins_remain_cap[i] - item
            
            if remaining_capacity == 0:
                priorities[i] = float('inf') # Highest priority for exact fit
            else:
                # Prioritize bins that result in smaller remaining capacity
                # The idea is to try and "fill up" bins as much as possible
                # A smaller remaining capacity after placing the item is preferred
                # We use the inverse of remaining capacity to get a higher score for smaller remaining capacities.
                # Adding 1 to the denominator to avoid division by zero and to ensure positive scores.
                priorities[i] = 1.0 / (remaining_capacity + 1e-6) 
        else:
            priorities[i] = -1.0 # Assign a low priority if the item doesn't fit

    # Normalize priorities to be between 0 and 1 for potentially smoother behavior in other algorithms
    # However, for First Fit strategy, direct comparison is sufficient.
    # If no bin can fit the item, all priorities will be -1.0.
    # In a real implementation, a new bin would be opened in such a case.
    # This function only provides priorities for existing bins.
    
    return priorities
```
