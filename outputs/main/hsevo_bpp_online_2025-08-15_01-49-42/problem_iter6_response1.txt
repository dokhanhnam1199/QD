```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_capacities: np.ndarray) -> np.ndarray:
    """
    Improved priority function for online Bin Packing Problem.

    This strategy prioritizes bins based on a combination of exact fit and
    minimized normalized slack. It aims to find bins that are either an
    exact fit or, failing that, minimize the "wasted space" relative to the
    bin's original capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        bin_capacities: Array of original capacities for each bin.

    Returns:
        Array of priority scores for each bin. Bins that cannot accommodate
        the item receive a priority of -1. Higher scores indicate higher priority.
    """
    priorities = np.full_like(bins_remain_cap, -1.0, dtype=float)
    
    can_fit_mask = bins_remain_cap >= item
    
    if np.any(can_fit_mask):
        fitting_bins_remain_cap = bins_remain_cap[can_fit_mask]
        fitting_bins_original_cap = bin_capacities[can_fit_mask]
        
        # Calculate slack for bins that can fit the item
        slack = fitting_bins_remain_cap - item
        
        # Prioritize exact fits with a high score
        exact_fit_mask = (slack == 0)
        priorities[can_fit_mask][exact_fit_mask] = 1e9  # High score for exact fits

        # For non-exact fits, prioritize minimizing normalized slack
        non_exact_fit_mask = ~exact_fit_mask
        
        if np.any(non_exact_fit_mask):
            non_exact_slack = slack[non_exact_fit_mask]
            non_exact_original_cap = fitting_bins_original_cap[non_exact_fit_mask]
            
            # Normalized slack: slack / original_capacity
            # Add a small epsilon to the denominator to prevent division by zero
            # and to ensure stable scoring even for very small capacities.
            epsilon = 1e-9
            normalized_slack = non_exact_slack / (non_exact_original_cap + epsilon)
            
            # We want to MINIMIZE normalized slack, so we assign a priority
            # that is inversely proportional to it (e.g., negative normalized slack).
            # A smaller normalized slack means a larger negative value, thus higher priority.
            priorities[can_fit_mask][non_exact_fit_mask] = -normalized_slack

    return priorities
```
