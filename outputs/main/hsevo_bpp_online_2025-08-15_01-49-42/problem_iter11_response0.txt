```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines exact fit priority with scaled inverse normalized slack for non-exact fits.
    Prioritizes exact fits, then bins with minimal normalized slack to promote balanced packing.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Mask for bins that can potentially fit the item
    can_fit_mask = bins_remain_cap >= item
    
    # Identify bins that are an exact fit
    exact_fit_mask = np.isclose(bins_remain_cap, item)
    
    # Assign highest priority to exact fits
    priorities[exact_fit_mask] = 1.0
    
    # Consider bins that can fit the item but are not exact fits
    non_exact_fit_mask = can_fit_mask & ~exact_fit_mask
    non_exact_indices = np.where(non_exact_fit_mask)[0]
    
    if len(non_exact_indices) > 0:
        # Calculate remaining capacity after fitting the item
        remaining_after_fit = bins_remain_cap[non_exact_indices] - item
        current_capacities = bins_remain_cap[non_exact_indices]
        
        # Calculate normalized slack: (remaining_capacity_after_fit) / (current_bin_capacity)
        # Smaller normalized slack is better. Add epsilon for numerical stability.
        normalized_slack = remaining_after_fit / (current_capacities + 1e-9)
        
        # Assign priorities: higher score for smaller normalized slack.
        # Use 1.0 - normalized_slack to map smaller slack to higher scores.
        # Scale these scores to be less than 1.0, ensuring exact fits are always preferred.
        # A range of [0.5, 0.99] effectively differentiates good fits.
        best_fit_scores = 1.0 - normalized_slack
        scaled_best_fit_priorities = 0.5 + best_fit_scores * 0.49
        
        priorities[non_exact_indices] = scaled_best_fit_priorities
        
    return priorities
```
