```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes exact fits, then bins with minimal normalized slack using a scaled approach.
    Combines the exact fit priority of v0/v9/v10 with the normalized slack approach of v9/v10.
    The scoring ensures a clear hierarchy: exact fits > best fits (min normalized slack).
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Exact Fit: Highest priority (1.0)
    exact_fit_mask = np.isclose(bins_remain_cap, item)
    priorities[exact_fit_mask] = 1.0

    # Best Fit: Prioritize bins with minimal positive remaining capacity after fitting.
    # Consider bins that can fit the item and are not exact fits.
    can_fit_mask = (bins_remain_cap >= item) & ~exact_fit_mask
    fit_indices = np.where(can_fit_mask)[0]

    if len(fit_indices) > 0:
        remaining_after_fit = bins_remain_cap[fit_indices] - item
        current_capacities = bins_remain_cap[fit_indices]

        # Calculate normalized slack: (remaining_capacity_after_fit) / (current_bin_capacity)
        # Smaller normalized slack is better. Add epsilon for numerical stability.
        normalized_slack = remaining_after_fit / (current_capacities + 1e-9)

        # Assign priorities that are higher for smaller normalized slack.
        # We use 1.0 - normalized_slack to map smaller slack to higher scores.
        # Scale these scores to be clearly less than 1.0, e.g., into the range [0.5, 0.99].
        # This mirrors the effective scoring of v9/v10.
        best_fit_scores = 1.0 - normalized_slack
        scaled_best_fit_priorities = 0.5 + best_fit_scores * 0.49

        priorities[fit_indices] = scaled_best_fit_priorities

    return priorities
```
