```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes exact fits and then applies a scaled inverse slack for remaining bins.

    This heuristic rewards bins that perfectly accommodate the item with a score of 1.0.
    For other bins, it calculates a priority based on the inverse of the remaining
    capacity after fitting, ensuring numerical stability and favoring tighter fits.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        return priorities

    suitable_bins_remain_cap = bins_remain_cap[can_fit_mask]
    suitable_bins_indices = np.where(can_fit_mask)[0]

    # Prioritize exact fits with a score of 1.0
    exact_fit_mask = suitable_bins_remain_cap == item
    priorities[suitable_bins_indices[exact_fit_mask]] = 1.0

    # For non-exact fits, use a scaled inverse of the remaining capacity after fitting
    non_exact_fit_mask = ~exact_fit_mask
    if np.any(non_exact_fit_mask):
        non_exact_bins_remain_cap = suitable_bins_remain_cap[non_exact_fit_mask]
        # Calculate the remaining capacity after fitting the item
        remaining_after_fit = non_exact_bins_remain_cap - item
        # Assign priorities: inverse of (remaining_after_fit + 1.0 + epsilon)
        # Adding 1.0 ensures bins that exactly fit (remaining_after_fit=0) get a high priority (1/1).
        # A small epsilon (1e-9) prevents division by zero and handles floating-point issues.
        priorities[suitable_bins_indices[non_exact_fit_mask]] = 1.0 / (remaining_after_fit + 1.0 + 1e-9)

    return priorities
```
