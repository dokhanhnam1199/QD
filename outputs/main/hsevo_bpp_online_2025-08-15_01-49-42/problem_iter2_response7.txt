```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins that offer the tightest fit using a combination of inverse scaling and offset for numerical stability.

    This heuristic aims to give higher priority to bins where the remaining capacity is just enough to fit the item,
    using an inverse relationship with the difference between bin capacity and item size. A small offset is added
    to the denominator to prevent division by zero and to ensure bins that exactly fit receive a very high priority.
    """
    suitable_bins_mask = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    suitable_bins_remain_cap = bins_remain_cap[suitable_bins_mask]

    if suitable_bins_remain_cap.size > 0:
        # Calculate the difference between remaining capacity and item size for suitable bins.
        differences = suitable_bins_remain_cap - item
        # Assign priorities: inverse of (difference + 1.0 + epsilon).
        # Adding 1.0 to the difference ensures that bins with zero difference (exact fits)
        # get a high priority (1/1). Adding a small epsilon (1e-9) handles potential
        # floating-point issues and ensures non-zero denominators.
        priorities[suitable_bins_mask] = 1.0 / (differences + 1.0 + 1e-9)

    return priorities
```
