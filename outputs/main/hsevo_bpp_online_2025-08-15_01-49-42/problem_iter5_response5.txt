```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes exact fits, then bins with minimal normalized slack.

    This heuristic combines the "exact fit" strategy with a "best fit"
    approach normalized by remaining capacity, ensuring clear ranking.
    """
    priorities = np.full_like(bins_remain_cap, -1.0)
    
    exact_fit_mask = bins_remain_cap == item
    non_exact_fit_mask = bins_remain_cap > item
    
    # Prioritize exact fits with a score of 1.0
    priorities[exact_fit_mask] = 1.0
    
    # For non-exact fits, calculate priority based on normalized slack
    if np.any(non_exact_fit_mask):
        eligible_bins_remain_cap = bins_remain_cap[non_exact_fit_mask]
        
        # Calculate remaining capacity after placing the item
        remaining_capacities_if_fit = eligible_bins_remain_cap - item
        
        # Calculate normalized slack: remaining capacity / current bin capacity
        # Add epsilon for numerical stability for bins that might have 0 capacity (though unlikely in BPP)
        epsilon = 1e-9
        normalized_slack = remaining_capacities_if_fit / (eligible_bins_remain_cap + epsilon)
        
        # Priority is 1 - normalized_slack: smaller slack means higher priority (closer to 1.0)
        # This maps the best fit (smallest normalized slack) to a score close to 1.0,
        # and progressively lower scores for bins with larger normalized slack.
        # This also ensures scores are positive and distinct from exact fits (1.0).
        priorities[non_exact_fit_mask] = 1.0 - normalized_slack

    # If there are exact fits, they are already set to 1.0.
    # For non-exact fits, scores will be in the range [0, 1).
    # We can shift non-exact fit scores slightly lower if we want exact fits to be strictly dominant.
    # For example, subtract a small value from non-exact fit scores if any exact fits exist.
    # However, the current scheme where exact fits are 1.0 and others are < 1.0 naturally handles this.
    
    return priorities
```
