import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.77365224590108) -> np.ndarray:
    """
    Prioritizes bins using a hybrid approach: favoring exact fits and then
    best fits by inverting the remaining capacity, while ensuring stability.

    Args:
        item (float): The size of the item to be placed.
        bins_remain_cap (np.ndarray): An array of remaining capacities of the bins.
        epsilon (float): A small value to add to the denominator for stability,
                         preventing division by zero and ensuring finite priorities.

    Returns:
        np.ndarray: An array of priorities for each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Identify bins that can fit the item
    can_fit_mask = bins_remain_cap >= item
    
    # Calculate remaining capacity after placing the item for fitting bins
    remaining_after_fit = bins_remain_cap[can_fit_mask] - item
    
    # Calculate priority: higher for bins that will be more full (less remaining capacity)
    # Adding epsilon to the denominator to avoid division by zero and to ensure
    # that bins with zero remaining capacity get a high but finite priority.
    # This is a stable inversion that prioritizes bins that result in less slack.
    priorities[can_fit_mask] = 1.0 / (remaining_after_fit + epsilon)
    
    # Bins that cannot fit the item receive zero priority, meaning they are not considered.
    
    return priorities
