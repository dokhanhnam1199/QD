```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes exact fits with a high score, then uses scaled inverse slack for others.

    Combines the exact-fit emphasis of v0 with a more nuanced inverse slack calculation
    inspired by the spirit of other heuristics, ensuring distinct scores and robustness.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        return priorities

    suitable_bins_indices = np.where(can_fit_mask)[0]
    suitable_bins_remain_cap = bins_remain_cap[suitable_bins_indices]

    # Prioritize exact fits with a high score
    exact_fit_mask = suitable_bins_remain_cap == item
    priorities[suitable_bins_indices[exact_fit_mask]] = 1.0

    # For non-exact fits, calculate a scaled inverse slack
    non_exact_fit_mask = ~exact_fit_mask
    if np.any(non_exact_fit_mask):
        non_exact_bins_remain_cap = suitable_bins_remain_cap[non_exact_fit_mask]
        remaining_after_fit = non_exact_bins_remain_cap - item

        # Use a scaled inverse of (remaining_after_fit + 1) to give higher priority to tighter fits.
        # Adding 1 to remaining_after_fit ensures that a remaining capacity of 0 (after fitting)
        # gets a score of 1.0, and smaller positive remaining capacities get scores < 1.0.
        # A small epsilon prevents division by zero.
        priorities[suitable_bins_indices[non_exact_fit_mask]] = 0.5 * (1.0 / (remaining_after_fit + 1.0 + 1e-9))

    return priorities
```
