```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    priorities = np.zeros_like(bins_remain_cap, dtype=np.float64)
    epsilon = 0.1
    available_bins_mask = bins_remain_cap >= item
    valid_bins_remain_cap = bins_remain_cap[available_bins_mask]
    
    if np.any(available_bins_mask):
        greedy_scores = -valid_bins_remain_cap
        
        min_cap_idx = np.argmin(valid_bins_remain_cap)
        max_cap_idx = np.argmax(valid_bins_remain_cap)
        
        greedy_scores[min_cap_idx] += 1.0 * (1 - epsilon) 
        greedy_scores[max_cap_idx] -= 1.0 * (1 - epsilon)
        
        
        random_indices = np.random.choice(len(valid_bins_remain_cap), size=int(epsilon * len(valid_bins_remain_cap)), replace=False)
        greedy_scores[random_indices] += np.random.randn(len(random_indices)) * 0.5

        
        priorities[available_bins_mask] = greedy_scores
        
        
        if not np.any(priorities[available_bins_mask]):
            priorities[available_bins_mask] = np.random.rand(np.sum(available_bins_mask))

    return priorities
```
