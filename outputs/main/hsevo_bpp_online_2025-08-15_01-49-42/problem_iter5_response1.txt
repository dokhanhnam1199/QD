```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines exact fit priority with normalized slack for effective online bin packing.

    Prioritizes bins that achieve an exact fit with a high score (1.0). For other
    bins, it calculates priority based on minimizing normalized slack, ensuring
    better-fitting bins receive higher scores.
    """
    priorities = np.full_like(bins_remain_cap, -1.0)
    
    can_fit_mask = bins_remain_cap >= item
    
    if np.any(can_fit_mask):
        current_bin_capacities = bins_remain_cap[can_fit_mask]
        remaining_capacities_if_fit = current_bin_capacities - item
        
        # Exact fit has the highest priority
        exact_fit_mask = remaining_capacities_if_fit == 0
        priorities[can_fit_mask][exact_fit_mask] = 1.0
        
        # For non-exact fits, calculate priority based on normalized slack
        # Minimized normalized slack means higher priority.
        # We use 1.0 - normalized_slack to map smaller slack to higher priority.
        non_exact_fit_mask = ~exact_fit_mask
        if np.any(non_exact_fit_mask):
            non_exact_bins_capacities = current_bin_capacities[non_exact_fit_mask]
            non_exact_bins_remaining = remaining_capacities_if_fit[non_exact_fit_mask]
            
            # Add epsilon for numerical stability, avoid division by zero
            epsilon = 1e-9
            normalized_slack = non_exact_bins_remaining / (non_exact_bins_capacities + epsilon)
            
            # Priority is higher for smaller normalized slack
            # Assign priorities in the range (0, 1) to distinguish from exact fits
            priorities[can_fit_mask][non_exact_fit_mask] = 0.5 * (1.0 - normalized_slack)
            
    return priorities
```
