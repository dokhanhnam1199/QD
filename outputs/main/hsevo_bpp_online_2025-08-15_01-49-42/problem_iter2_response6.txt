```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins by favoring exact fits and then best fits using a scaled inverse.
    Combines the exact fit preference of Best Fit with the scaled inverse approach of Softmax-Based Fit.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    eligible_bins_mask = bins_remain_cap >= item
    
    if not np.any(eligible_bins_mask):
        return priorities

    eligible_bins_remain_cap = bins_remain_cap[eligible_bins_mask]
    
    # Prioritize exact fits with a high score
    exact_fit_mask = np.isclose(eligible_bins_remain_cap, item)
    priorities[eligible_bins_mask][exact_fit_mask] = 1.0
    
    # For non-exact fits, use a scaled inverse of the remaining capacity
    non_exact_fit_mask = ~exact_fit_mask
    if np.any(non_exact_fit_mask):
        non_exact_eligible_bins_remain_cap = eligible_bins_remain_cap[non_exact_fit_mask]
        
        # Scale differences to be between 0 and 1 for the inverse calculation
        # Add 1 to the difference to avoid division by zero and to penalize
        # bins that are slightly larger than needed.
        differences = non_exact_eligible_bins_remain_cap - item
        
        # Use a robust scaling similar to the softmax approach, but without exponentiation
        # to avoid potential overflow and maintain a more linear preference for smaller remaining capacities.
        # Adding 1e-9 for numerical stability.
        scaled_inverse = 1.0 / (differences + 1.0 + 1e-9)
        
        # Normalize these scaled inverse priorities so the highest is 1,
        # making them comparable to the exact fit score of 1.0.
        if np.max(scaled_inverse) > 1e-9: # Avoid division by zero if all scaled_inverse are near zero
            normalized_scaled_inverse = scaled_inverse / np.max(scaled_inverse)
        else:
            normalized_scaled_inverse = scaled_inverse # Or handle as a special case if needed
            
        priorities[eligible_bins_mask][non_exact_fit_mask] = normalized_scaled_inverse

    return priorities
```
