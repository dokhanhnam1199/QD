```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for CVRP using a combination of factors and sparsification.

    Args:
        distance_matrix (np.ndarray): Distance matrix (n x n).
        coordinates (np.ndarray): Node coordinates (n x 2).
        demands (np.ndarray): Customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators (n x n).
    """
    n = distance_matrix.shape[0]
    indicators = np.zeros_like(distance_matrix, dtype=float)

    # Heuristic factors:
    distance_factor = 1 / (distance_matrix + 1e-6)  # Avoid division by zero
    demand_compatibility = np.ones_like(distance_matrix, dtype=float)
    angle_factor = np.ones_like(distance_matrix, dtype=float)

    # Calculate demand compatibility:
    for i in range(n):
        for j in range(n):
            if i != j:
                # Penalize edges that connect to nodes with high demands that make it difficult to combine in a route
                demand_compatibility[i, j] = 1 / (demands[i] + demands[j] + 1e-6) # Avoid division by zero
            else:
                demand_compatibility[i, j] = 0

    # Calculate angle factor: penalize sharp turns
    for i in range(n):
        for j in range(n):
            if i != j and i != 0 and j != 0:  # Consider angles between depot and other nodes
                # Calculate angle at node i between depot and node j
                vector_depot_i = coordinates[i] - coordinates[0]
                vector_i_j = coordinates[j] - coordinates[i]

                # Normalize vectors
                vector_depot_i = vector_depot_i / (np.linalg.norm(vector_depot_i) + 1e-6)
                vector_i_j = vector_i_j / (np.linalg.norm(vector_i_j) + 1e-6)
                
                dot_product = np.dot(vector_depot_i, vector_i_j)
                angle = np.arccos(np.clip(dot_product, -1.0, 1.0)) # Clip to handle floating point issues
                angle_factor[i, j] = 1 - (angle / np.pi)  # Smaller angle is more promising
            else:
                angle_factor[i,j] = 1.0


    # Combine factors:
    indicators = distance_factor * demand_compatibility * angle_factor

    # Sparsification: remove edges that are not promising
    threshold = np.percentile(indicators[indicators > 0], 25)  # Keep top 75% non-zero edges.
    indicators[indicators < threshold] = 0

    # Ensure the depot has a path to every other node
    for i in range(1,n):
        if indicators[0, i] == 0 and indicators[i, 0] == 0:
           indicators[0, i] = np.max(indicators[0,:]) #assign best edges
           indicators[i, 0] = np.max(indicators[:,0])
    return indicators
```
