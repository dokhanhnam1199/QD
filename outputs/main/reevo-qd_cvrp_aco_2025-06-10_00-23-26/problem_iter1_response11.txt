```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for Capacitated Vehicle Routing Problem (CVRP) using stochastic solution sampling.

    This function combines several factors to determine the promise of including each edge
    in a solution, including distance, demand, and geometric proximity to the depot.
    It also sparsifies the matrix by setting unpromising elements to zero.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution
                    (same shape as distance_matrix).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Parameters (can be tuned)
    distance_weight = 0.5
    demand_weight = 0.3
    depot_proximity_weight = 0.2
    max_edges_per_node = 10  # Maximum number of edges to consider for each node

    for i in range(n):
        for j in range(n):
            if i != j:
                # Distance factor (lower distance is better)
                distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Add a small value to avoid division by zero

                # Demand factor (penalize edges that connect nodes with high demand)
                demand_factor = 1 / (demands[i] + demands[j] + 1e-6)

                # Depot proximity factor (favor edges that connect nodes closer to the depot)
                depot_proximity_i = np.linalg.norm(coordinates[i] - coordinates[0])
                depot_proximity_j = np.linalg.norm(coordinates[j] - coordinates[0])
                depot_proximity_factor = 1 / (depot_proximity_i + depot_proximity_j + 1e-6)

                # Combine the factors
                heuristic_matrix[i, j] = (
                    distance_weight * distance_factor +
                    demand_weight * demand_factor +
                    depot_proximity_weight * depot_proximity_factor
                )

    # Sparsify the matrix: keep only the most promising edges for each node
    for i in range(n):
        # Find the indices of the top max_edges_per_node edges for node i
        indices = np.argsort(heuristic_matrix[i, :])[::-1][:max_edges_per_node]

        # Zero out the heuristic values for all other edges
        for j in range(n):
            if j not in indices:
                heuristic_matrix[i, j] = 0.0

    return heuristic_matrix
```
