```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Calculate savings for each edge
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]  # Savings is symmetric

    # Combine distance and savings. Shorter distance, more savings -> more promising
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = savings_matrix[i, j] / (distance_matrix[i, j] + 1e-6) # avoid division by zero

    # Penalize edges connecting nodes with high demands, softer penalty. Depot connections are not exempt.
    demand_penalty = np.zeros((n, n))
    for i in range(1, n):
      for j in range(1, n):
        if i!=j:
          demand_penalty[i,j] = ((demands[i] + demands[j]) / (2 * capacity))**0.5 # softer penalty

    heuristics_matrix = heuristics_matrix - demand_penalty # reduce heuristic values with high demand

    # Encourage connection to the depot by boosting the heuristic value, more significant boost
    for i in range(1,n):
        heuristics_matrix[0, i] = heuristics_matrix[0, i] * 1.6
        heuristics_matrix[i, 0] = heuristics_matrix[i, 0] * 1.6

    # Scale the heuristic values based on proximity to depot, more pronounced effect
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                # Closer to depot -> higher value, stronger scaling
                heuristics_matrix[i, j] *= (2.5 - (distance_matrix[0, i] + distance_matrix[0, j]) / (np.max(distance_matrix) + 1e-6))
                

    # Sparsify the matrix. Zero out unpromising edges to encourage stochastic sampling. Less aggressive
    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 35) #consider the top 65% only
    heuristics_matrix[heuristics_matrix < threshold] = 0

    # Adjusted sparsification - remove edges if demands exceed capacity when combined in a route from depot
    for i in range(1, n):
        for j in range(1, n):
            if i != j and heuristics_matrix[i, j] > 0:
                if demands[i] + demands[j] > capacity:
                    heuristics_matrix[i, j] = 0

    return heuristics_matrix
```
