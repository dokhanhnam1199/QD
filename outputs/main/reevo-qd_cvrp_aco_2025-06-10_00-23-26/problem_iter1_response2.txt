```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """

    n = distance_matrix.shape[0]

    # 1. Distance factor: Inverse of distance, but avoid division by zero
    distance_heuristic = 1 / (distance_matrix + 1e-6)

    # 2. Demand factor: Penalize edges that connect to nodes with high demands (relative to capacity).
    demand_factor = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            demand_factor[i, j] = 1 - (demands[i] + demands[j]) / (2 * capacity)  # Normalize to [0, 1]
            demand_factor[i, j] = max(0, demand_factor[i, j]) # Ensure non-negativity

    # 3. Depot proximity factor: Reward edges connecting to the depot (node 0).  Edges closer to depot more promising.
    depot_proximity = np.zeros((n, n))
    for i in range(n):
      for j in range(n):
        depot_proximity[i,j] = 2 - (distance_matrix[0, i] + distance_matrix[0, j])/ (np.max(distance_matrix) + 1e-6)
        depot_proximity[i,j] = max(0.01, depot_proximity[i,j]) # Ensure that it is positive

    # 4. Angle factor: Penalize sharp turns, as they tend to increase the overall route length.
    angle_factor = np.ones((n, n))  # Initialize to 1. Sharp turns should DECREASE heuristic.
    for i in range(n):
        for j in range(n):
            if i != j:
                angles = []
                for k in range(n):
                    if k != i and k != j:
                        # Calculate angle i-j-k. The smaller the angle, the sharper the turn.
                        v1 = coordinates[i] - coordinates[j]
                        v2 = coordinates[k] - coordinates[j]
                        dot_product = np.dot(v1, v2)
                        magnitudes = np.linalg.norm(v1) * np.linalg.norm(v2)
                        if magnitudes > 0:  #Avoid division by zero for collocated points
                            angle = np.arccos(np.clip(dot_product / magnitudes, -1.0, 1.0)) #Clipping for numerical issues
                            angles.append(angle)

                if angles:
                    avg_angle = np.mean(angles)  # Average angle at node j.  Smaller angles -> sharper turn.
                    angle_factor[i, j] = min(1, avg_angle / (np.pi / 2.0)) # Normalize. Smaller the ratio, the worse it is

    # Combine the factors with weights
    heuristic_matrix = (
        0.4 * distance_heuristic +
        0.2 * demand_factor +
        0.2 * depot_proximity +
        0.2 * angle_factor
    )

    #Sparsify the heuristic matrix, zero-ing out edges that seem very poor.
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 20) # Keep only top 80%.  avoids zero edges being included.
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Ensure the depot has edges by thresholding from only the rows and columns relevant to the depot node.
    depot_threshold = np.percentile(np.concatenate((heuristic_matrix[0, :], heuristic_matrix[:, 0]))[np.concatenate((heuristic_matrix[0, :], heuristic_matrix[:, 0])) > 0], 10)
    heuristic_matrix[0, heuristic_matrix[0, :] < depot_threshold] = depot_threshold # Ensure depot edge.
    heuristic_matrix[heuristic_matrix[:, 0] < depot_threshold, 0] = depot_threshold # Ensure depot edge

    return heuristic_matrix
```
