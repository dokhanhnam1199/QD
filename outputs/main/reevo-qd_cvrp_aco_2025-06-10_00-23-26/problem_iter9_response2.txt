```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Calculate savings for each edge
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]  # Savings is symmetric

    # Combine distance and savings. Shorter distance, more savings -> more promising
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = savings_matrix[i, j] / (distance_matrix[i, j] + 1e-6) # avoid division by zero

    # Sharpened demand penalty
    demand_penalty = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                demand_penalty[i, j] = ((demands[i] + demands[j]) / capacity)**2 # quadratic penalty
    heuristics_matrix = heuristics_matrix - demand_penalty

    # Fine-tune depot connections: Combine savings and depot proximity
    depot_proximity = np.zeros((n, n))
    for i in range(1, n):
      depot_proximity[0, i] = 1 / (distance_matrix[0, i] + 1e-6)
      depot_proximity[i, 0] = 1 / (distance_matrix[i, 0] + 1e-6)

    for i in range(1,n):
        heuristics_matrix[0, i] = heuristics_matrix[0, i] + savings_matrix[0,i] * depot_proximity[0, i]
        heuristics_matrix[i, 0] = heuristics_matrix[i, 0] + savings_matrix[i,0] * depot_proximity[i, 0]

    # Adjusted sparsification with stricter capacity check
    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 25) # More aggressive sparsification
    heuristics_matrix[heuristics_matrix < threshold] = 0

    # Feasibility check: Remove edges that violate capacity constraints
    for i in range(1, n):
        for j in range(1, n):
            if i != j and heuristics_matrix[i, j] > 0:
                if demands[i] + demands[j] > capacity or demands[i] + demands[j] + np.min(demands[1:])> 1.5*capacity: # stricter check + combined route from depot.
                   heuristics_matrix[i, j] = 0

    return heuristics_matrix
```
