```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:

    """
    A heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Calculate savings for each edge
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]  # Savings is symmetric

    # Combine distance and savings. Shorter distance, more savings -> more promising
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = savings_matrix[i, j] / (distance_matrix[i, j] + 1e-6) # avoid division by zero

    # Sharpen demand penalties. Increased exponent.
    demand_penalty = np.zeros((n, n))
    for i in range(1, n):
      for j in range(1, n):
        if i!=j:
          demand_penalty[i,j] = ((demands[i] + demands[j]) / (2 * capacity))**3  # Cubic penalty

    heuristics_matrix = heuristics_matrix - demand_penalty # reduce heuristic values with high demand

    # Depot connection boost. Adjusted scaling factor.
    for i in range(1,n):
        heuristics_matrix[0, i] = heuristics_matrix[0, i] * 2.0
        heuristics_matrix[i, 0] = heuristics_matrix[i, 0] * 2.0

    # Prioritize high-saving, demand-aware, and depot-connecting edges for sparsification
    combined_metric = heuristics_matrix * (1 - demand_penalty)**2 # consider existing heuristic and demand penalty

    # Sparsify based on the combined metric, using a more aggressive threshold
    threshold = np.percentile(combined_metric[combined_metric > 0], 40) # consider the top 60% only

    for i in range(n):
      for j in range(n):
        if combined_metric[i,j] < threshold:
          heuristics_matrix[i,j] = 0

    # Remove edges if demands exceed capacity when combined in a route from depot
    for i in range(1, n):
        for j in range(1, n):
            if i != j and heuristics_matrix[i, j] > 0:
                if demands[i] + demands[j] > capacity:
                    heuristics_matrix[i, j] = 0
    
    # Even more aggressive sparsification based on distance from depot
    for i in range(1, n):
        for j in range(1, n):
            if i != j and heuristics_matrix[i, j] > 0:
                # If the total distance from i and j to the depot is too large, remove the edge
                if distance_matrix[0, i] + distance_matrix[0, j] > np.mean(distance_matrix[0, 1:]) * 3:
                    heuristics_matrix[i, j] = 0


    return heuristics_matrix
```
