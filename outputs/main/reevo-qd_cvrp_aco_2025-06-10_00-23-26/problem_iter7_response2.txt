```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Calculate savings for each edge
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]  # Savings is symmetric

    # Combine distance, savings, and demand
    for i in range(n):
        for j in range(n):
            if i != j:
                # Heuristic Value: Savings / (Distance * Demand Factor)
                demand_factor = 1 + (demands[i] + demands[j]) / (2 * capacity) # scale demand factor
                heuristics_matrix[i, j] = savings_matrix[i, j] / (distance_matrix[i, j] * demand_factor + 1e-6) # avoid division by zero

    # Depot Connection Priority: Boost edges connected to the depot significantly based on savings
    for i in range(1, n):
        heuristics_matrix[0, i] = heuristics_matrix[0, i] + savings_matrix[0,i]
        heuristics_matrix[i, 0] = heuristics_matrix[i, 0] + savings_matrix[i,0]

    # Demand aware Sparsification: Adaptive threshold based on edge characteristics
    edge_values = heuristics_matrix[heuristics_matrix > 0].flatten()
    if len(edge_values) > 0:
        threshold = np.percentile(edge_values, 40) # Focus on higher-value edges
    else:
        threshold = 0

    for i in range(n):
        for j in range(n):
            if heuristics_matrix[i, j] < threshold:
                heuristics_matrix[i, j] = 0
            elif i != 0 and j != 0 and demands[i] + demands[j] > capacity: #Strict Capacity Enforcement
                heuristics_matrix[i, j] = 0

    return heuristics_matrix
```
