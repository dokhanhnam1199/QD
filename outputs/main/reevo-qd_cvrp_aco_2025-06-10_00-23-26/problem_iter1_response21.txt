```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings for each pair of nodes
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Combine distance and savings
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] = (
                    (1 / (distance_matrix[i, j] + 1e-6))
                    + (savings_matrix[i, j] / (np.max(savings_matrix) + 1e-6))
                )

    # Penalize edges connecting nodes with high demand
    max_demand = np.max(demands)
    for i in range(n):
        for j in range(n):
            if i != j:
                 heuristic_matrix[i, j] *= (1 - ((demands[i] + demands[j]) / (2 * capacity + 1e-6)))

    # Encourage connections near the depot
    for i in range(1,n):
        heuristic_matrix[0,i] *= 1.1
        heuristic_matrix[i,0] *= 1.1

    #Sparsify the matrix. Set unpromising edges to 0 to encourage efficient sampling.
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.2)
    heuristic_matrix[heuristic_matrix < threshold] = 0

    #Set diagonal to zero.
    for i in range(n):
        heuristic_matrix[i,i] = 0.0

    return heuristic_matrix
```
