```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings matrix
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]

    # Normalize distance and savings matrices
    normalized_distance = distance_matrix / np.max(distance_matrix)
    normalized_savings = savings_matrix / np.max(savings_matrix)

    # Factor in demand considerations. Edges to high demand nodes are penalized.
    demand_factor = np.zeros((n, n))
    for i in range(1, n):
      for j in range(1,n):
        demand_factor[i,j] = (demands[i] + demands[j]) / (2 * capacity)

    # Combine distance, savings, and demand information to create heuristic matrix
    heuristic_matrix = (0.6 * normalized_savings - 0.4 * normalized_distance) * (1 - demand_factor) # Adjusted weights.
    heuristic_matrix = np.clip(heuristic_matrix, 0, 1) # Ensure values are between 0 and 1

    # Sparsify the matrix
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 40) # Adjusted threshold for sparsification
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Ensure depot (node 0) connections are not entirely pruned
    for i in range(1, n):
        if heuristic_matrix[0, i] == 0 and heuristic_matrix[i, 0] ==0:
          heuristic_matrix[0, i] = 0.1 * normalized_savings[0, i] #Small non-zero values
          heuristic_matrix[i, 0] = 0.1 * normalized_savings[i, 0]


    return heuristic_matrix
```
