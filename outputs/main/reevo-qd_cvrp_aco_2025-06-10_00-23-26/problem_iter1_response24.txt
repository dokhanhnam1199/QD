```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    This version incorporates multiple factors to assess the promise of each edge:
    - Distance: Shorter distances are preferred.
    - Demand: Edges connecting to nodes with high demand are penalized (makes the node "more expensive" to visit).
    - Closeness to depot: Edges connecting nodes far from the depot are penalized.
    - Sparsification: Edges deemed highly unpromising are set to zero.

    Args:
        distance_matrix (np.ndarray): Distance matrix (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Edge promise indicators (n x n).
    """

    n = distance_matrix.shape[0]
    promise = np.zeros_like(distance_matrix)

    # Calculate depot distances
    depot_distances = distance_matrix[0, :]

    for i in range(n):
        for j in range(n):
            if i == j:
                promise[i, j] = 0  # No self-loops
                continue

            # Distance factor (shorter distances are better)
            distance_factor = 1 / (distance_matrix[i, j] + 1e-6)  # Avoid division by zero

            # Demand factor (lower demand is better)
            demand_factor = 1 / (demands[i] + demands[j] + 1e-6)

            # Depot proximity factor (closer to depot is better; avoid dividing by zero)
            depot_proximity_factor = 1 / (depot_distances[i] + depot_distances[j] + 1e-6)


            # Combine factors
            promise[i, j] = distance_factor * demand_factor * depot_proximity_factor

    # Sparsify the matrix: Zero out edges that are highly unpromising
    threshold = np.quantile(promise[promise > 0], 0.25)  # Keep top 75% (remove bottom 25%) of non-zero elements
    promise[promise < threshold] = 0

    return promise
```
