```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Calculate savings for each edge
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]  # Savings is symmetric

    # Combine distance and savings. Shorter distance, more savings -> more promising
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = savings_matrix[i, j] / (distance_matrix[i, j] + 1e-6) # avoid division by zero

    # Penalize edges connecting nodes with high demands directly, but less harshly.
    demand_penalty = np.zeros((n, n))
    for i in range(1, n):
      for j in range(1, n):
        if i!=j:
          demand_penalty[i,j] = (demands[i] + demands[j]) / (3 * capacity) # less sensitive penalty

    heuristics_matrix = heuristics_matrix - demand_penalty # reduce heuristic values with high demand

    # Encourage connection to the depot by boosting the heuristic value, but less aggressively.
    for i in range(1,n):
        heuristics_matrix[0, i] = heuristics_matrix[0, i] * 1.2
        heuristics_matrix[i, 0] = heuristics_matrix[i, 0] * 1.2

    # Sparsify the matrix. Zero out unpromising edges to encourage stochastic sampling, but higher percentile.
    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 40) #consider the top 60% only. Higher threshold.
    heuristics_matrix[heuristics_matrix < threshold] = 0

    # Further encourage edges near each other if they have similar demand.
    demand_similarity = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            demand_similarity[i, j] = 1 - abs(demands[i] - demands[j]) / capacity #closer to 1 means similar demand
            demand_similarity[j, i] = demand_similarity[i, j]

            # boost if similar demand and close
            heuristics_matrix[i,j] = heuristics_matrix[i,j] + demand_similarity[i,j] * (1 / (distance_matrix[i,j] + 1e-6)) * (heuristics_matrix[i,j] > 0)
            heuristics_matrix[j,i] = heuristics_matrix[j,i] + demand_similarity[j,i] * (1 / (distance_matrix[j,i] + 1e-6)) * (heuristics_matrix[j,i] > 0)


    return heuristics_matrix
```
