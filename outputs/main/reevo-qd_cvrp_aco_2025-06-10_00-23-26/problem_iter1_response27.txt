```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Parameters to control the influence of each factor
    alpha = 1.0  # Distance factor
    beta = 0.5  # Demand factor
    gamma = 0.2  # Angle factor

    for i in range(n):
        for j in range(n):
            if i != j:  # Avoid self-loops
                # Distance factor: inversely proportional to distance
                distance_factor = 1 / distance_matrix[i, j]

                # Demand factor: penalize edges connecting to high-demand nodes
                demand_factor = 1 / (demands[i] + demands[j] + 1e-6)  # Avoid division by zero
                # Angle factor: calculate angle between vectors depot->i and depot->j
                if i == 0 or j == 0 :
                     angle_factor = 1.0
                else:
                    vector_i = coordinates[i] - coordinates[0]
                    vector_j = coordinates[j] - coordinates[0]
                    norm_i = np.linalg.norm(vector_i)
                    norm_j = np.linalg.norm(vector_j)
                    if norm_i > 0 and norm_j > 0:
                        cos_angle = np.dot(vector_i, vector_j) / (norm_i * norm_j)
                        angle = np.arccos(np.clip(cos_angle, -1.0, 1.0))  # Clip to avoid invalid values
                        angle_factor = 1 / (angle + 0.1)  # Smaller angle is better
                    else:
                        angle_factor = 1.0 # if either vector is zero.

                heuristic_matrix[i, j] = (alpha * distance_factor +
                                           beta * demand_factor +
                                           gamma * angle_factor)

    # Sparsify the matrix: keep only top k edges for each node
    k = int(np.sqrt(n))  # Number of edges to keep for each node
    for i in range(n):
        row = heuristic_matrix[i, :]
        indices = np.argsort(row)[-k:]  # Indices of top k values
        mask = np.ones(n, dtype=bool)
        mask[indices] = False
        heuristic_matrix[i, mask] = 0

    return heuristic_matrix
```
