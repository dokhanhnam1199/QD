```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """

    n = distance_matrix.shape[0]

    # Initialize the heuristic matrix with a base value (inverse of distance)
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Incorporate demand information: Penalize edges connecting nodes with high demands if they are far apart
    demand_factor = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            demand_factor[i, j] = demands[i] * demands[j]
    heuristic_matrix = heuristic_matrix / (demand_factor + 1e-9)  # Scale by demand

    # Incorporate proximity to depot. Closer nodes to depot are more attractive
    depot_proximity = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            depot_proximity[i,j] = (distance_matrix[0, i] + distance_matrix[0, j])

    heuristic_matrix = heuristic_matrix / (depot_proximity + 1e-9) # Nodes close to depot encouraged.

    #Sparsify heuristic matrix: Eliminate edges deemed very unpromising. Focus only on a subset of edges during sampling.
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 20)  # Only top 80% are kept
    heuristic_matrix[heuristic_matrix < threshold] = 0.0
    # Further discourage edges between two high demand nodes if both are distant from the depot
    for i in range(1,n):
      for j in range(i+1,n):
        if demands[i] > capacity/3 and demands[j] > capacity/3:
          if distance_matrix[i, 0] > distance_matrix.mean() and distance_matrix[j,0] > distance_matrix.mean():
              heuristic_matrix[i,j] = heuristic_matrix[i,j] * 0.1
              heuristic_matrix[j,i] = heuristic_matrix[j,i] * 0.1 # Scale edge probability by a lower amount.

    return heuristic_matrix
```
