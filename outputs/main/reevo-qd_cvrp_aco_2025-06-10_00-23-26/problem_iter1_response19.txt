```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix (n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (n x 2).
        demands (np.ndarray): Customer demands (n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (n x n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate savings for each edge (Clarke-Wright Savings Heuristic)
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]  # Ensure symmetry

    # Normalize distance and savings
    normalized_distance = distance_matrix / np.max(distance_matrix) if np.max(distance_matrix) != 0 else np.zeros_like(distance_matrix)
    normalized_savings = savings_matrix / np.max(savings_matrix) if np.max(savings_matrix) != 0 else np.zeros_like(savings_matrix)

    # Incorporate demand considerations. Edges connecting nodes with high demand get penalized
    demand_factor = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            demand_factor[i,j] = demands[i] + demands[j]

    normalized_demand = demand_factor / np.max(demand_factor) if np.max(demand_factor) != 0 else np.zeros_like(demand_factor)


    # Combine factors
    heuristic_matrix = (0.6 * normalized_savings - 0.4 * normalized_distance) / (0.1 * normalized_demand + 1)

    # Sparsify the matrix: remove long edges or those with small savings
    threshold = np.mean(heuristic_matrix) * 0.5 # dynamically chosen threshold

    heuristic_matrix[heuristic_matrix < threshold] = 0
    np.fill_diagonal(heuristic_matrix, 0) #remove self loops
    heuristic_matrix[distance_matrix == 0] = 0 #remove edges with zero distance

    return heuristic_matrix
```
