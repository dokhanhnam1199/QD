```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    It returns prior indicators of how promising it is to include each edge in a solution.

    Args:
        distance_matrix (np.ndarray): Distance matrix (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix)

    # Calculate savings for each pair of nodes
    savings_matrix = np.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]

    # Node proximity to depot
    depot_proximity = np.zeros(n)
    for i in range(1, n):
        depot_proximity[i] = 1 / distance_matrix[0, i]  # Closer is better

    # Demand factor
    demand_factor = np.zeros_like(distance_matrix)
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                demand_factor[i, j] = 1 / (demands[i] + demands[j] + 1e-9) # Avoid zero div, smaller demand pair preferred

    # Combine factors
    for i in range(n):
        for j in range(n):
            if i != j:
                 heuristic_matrix[i, j] = (0.5 / (distance_matrix[i, j] + 1e-9) + # Base distance factor, avoid zero division
                                           0.3 * savings_matrix[i, j] + # savings
                                           0.1 * (depot_proximity[i] + depot_proximity[j]) + # depot proximity, average of node i and j
                                           0.1 * demand_factor[i,j] # smaller demand is preferred
                                          )

    # Sparsify the matrix (optional, but often helpful)
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 40)  # Keep top 60% of edges
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Ensure depot connections are always considered
    for i in range(1, n):
        if heuristic_matrix[0, i] == 0:
          heuristic_matrix[0, i] = np.max(heuristic_matrix) / 10 # small value so that the search process might select it.
        if heuristic_matrix[i, 0] == 0:
          heuristic_matrix[i, 0] = np.max(heuristic_matrix) / 10
    
    return heuristic_matrix
```
