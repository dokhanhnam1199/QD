```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Calculate savings for each edge
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]  # Savings is symmetric

    # Combine distance and savings. Shorter distance, more savings -> more promising
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = savings_matrix[i, j] / (distance_matrix[i, j] + 1e-6) # avoid division by zero

    # Sharpen demand penalty: higher power
    demand_penalty = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                demand_penalty[i, j] = ((demands[i] + demands[j]) / (2 * capacity))**3  # Cubic penalty
    heuristics_matrix = heuristics_matrix - demand_penalty

    # Depot proximity combined with savings, adjusted with demand
    for i in range(1, n):
        depot_proximity_factor = (1 + savings_matrix[0, i] / (distance_matrix[0, i] + 1e-6)) * (1 - min(1.0, demands[i] / capacity))
        heuristics_matrix[0, i] = heuristics_matrix[0, i] * depot_proximity_factor
        heuristics_matrix[i, 0] = heuristics_matrix[i, 0] * depot_proximity_factor

    # Sparsify the matrix.
    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 30) # Reduced percentile
    heuristics_matrix[heuristics_matrix < threshold] = 0

    # Adjusted sparsification with stricter capacity
    for i in range(1, n):
        for j in range(1, n):
            if i != j and heuristics_matrix[i, j] > 0:
                if demands[i] + demands[j] > 1.1*capacity: # stricter capacity check
                    heuristics_matrix[i, j] = 0

                #Remove direct edges to depot from large demand nodes to encourage balance
                if (i==0 and demands[j] > 0.7*capacity) or (j==0 and demands[i] > 0.7*capacity):
                  heuristics_matrix[i,j] = 0
    # Introduce a penalty for edges that are far from the depot
    max_distance = np.max(distance_matrix)
    for i in range(1, n):
        for j in range(1, n):
            if i != j and heuristics_matrix[i,j] > 0:
                avg_dist_to_depot = (distance_matrix[0, i] + distance_matrix[0, j]) / 2
                distance_penalty = (avg_dist_to_depot / max_distance)**2  # Penalty scaled by max distance
                heuristics_matrix[i, j] *= (1 - distance_penalty)

    return heuristics_matrix
```
