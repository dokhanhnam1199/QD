```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (same shape as distance_matrix).
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Parameters (tuned for performance - feel free to experiment)
    alpha = 1.0  # Weight for distance
    beta = 1.0   # Weight for demand proximity (closeness to depot in demand)
    gamma = 0.5  # Weight for angle cost

    # Demand normalized to vehicle capacity (used to indicate depot distance preference)
    normalized_demands = demands / capacity

    # Calculate demand proximity to depot
    demand_proximity = np.zeros(n)
    for i in range(1, n):  # Exclude depot (index 0)
        demand_proximity[i] = 1 - normalized_demands[i]

    # Calculate angle cost
    angle_cost = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            if i != j:
                # Vectors from node i and j to the depot (node 0)
                vector_i = coordinates[0] - coordinates[i]
                vector_j = coordinates[0] - coordinates[j]

                # Calculate the cosine of the angle between the vectors
                norm_i = np.linalg.norm(vector_i)
                norm_j = np.linalg.norm(vector_j)
                if norm_i > 0 and norm_j > 0:
                    cos_angle = np.dot(vector_i, vector_j) / (norm_i * norm_j)
                    # Angle cost: penalize large angles (encourage turns toward the depot)
                    angle_cost[i, j] = (1 - cos_angle) / 2 # Rescale to [0,1]
                else:
                    angle_cost[i, j] = 1 # High cost if nodes on depot, avoid loop
            else:
                angle_cost[i, j] = 1 # high cost if loops (edge to itself)


    # Combine factors to create the heuristic matrix
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] = (
                    (1 / (distance_matrix[i, j] + 1e-6))**alpha #avoid div by zero
                    * (demand_proximity[i] + demand_proximity[j])**beta
                    * (1 / (angle_cost[i, j] + 1e-6))**gamma # avoid div by zero
                )


    # Sparsify the matrix (set unpromising elements to zero)
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.25)  # Keep top 75%
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
