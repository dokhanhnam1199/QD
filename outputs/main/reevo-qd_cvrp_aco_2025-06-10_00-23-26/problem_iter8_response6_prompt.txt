{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling. CVRP requires finding the shortest path that visits all given nodes and returns to the starting node. Each node has a demand and each vehicle has a capacity. The total demand of the nodes visited by a vehicle cannot exceed the vehicle capacity. When the total demand exceeds the vehicle capacity, the vehicle must return to the starting node.\nThe `heuristics` function takes as input a distance matrix (shape: n by n), Euclidean coordinates of nodes (shape: n by 2), a vector of customer demands (shape: n), and the integer capacity of vehicle capacity. It returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the distance_matrix. The depot node is indexed by 0.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n    return 1 / distance_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:\n\n    \"\"\"\n    A heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).\n        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).\n        demands (np.ndarray): Customer demands (shape: n).\n        capacity (int): Vehicle capacity.\n\n    Returns:\n        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics_matrix = np.zeros((n, n))\n\n    # Calculate savings for each edge\n    savings_matrix = np.zeros((n, n))\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]\n            savings_matrix[j, i] = savings_matrix[i, j]  # Savings is symmetric\n\n    # Combine distance and savings. Shorter distance, more savings -> more promising\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristics_matrix[i, j] = savings_matrix[i, j] / (distance_matrix[i, j] + 1e-6) # avoid division by zero\n\n    # Penalize edges connecting nodes with high demands directly. Edges connected to depot are exempted\n    demand_penalty = np.zeros((n, n))\n    for i in range(1, n):\n      for j in range(1, n):\n        if i!=j:\n          demand_penalty[i,j] = (demands[i] + demands[j]) / (2 * capacity) # normalized between 0 and 1 or beyond\n\n    heuristics_matrix = heuristics_matrix - demand_penalty # reduce heuristic values with high demand\n\n    # Encourage connection to the depot by boosting the heuristic value\n    for i in range(1,n):\n        heuristics_matrix[0, i] = heuristics_matrix[0, i] * 1.5\n        heuristics_matrix[i, 0] = heuristics_matrix[i, 0] * 1.5\n        \n    # Scale the heuristic values based on proximity to depot\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j:\n                # Closer to depot -> higher value\n                heuristics_matrix[i, j] *= (2 - (distance_matrix[0, i] + distance_matrix[0, j]) / (np.max(distance_matrix) + 1e-6))\n                \n\n    # Sparsify the matrix. Zero out unpromising edges to encourage stochastic sampling\n    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 20) #consider the top 80% only\n    heuristics_matrix[heuristics_matrix < threshold] = 0\n\n    # Adjusted sparsification - remove edges if demands exceed capacity when combined in a route from depot\n    for i in range(1, n):\n        for j in range(1, n):\n            if i != j and heuristics_matrix[i, j] > 0:\n                if demands[i] + demands[j] > capacity:\n                    heuristics_matrix[i, j] = 0\n\n    return heuristics_matrix\n\n[Reflection]\nSavings, demand considerations, depot proximity, and sparsification improve edge selection heuristics for CVRP.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}