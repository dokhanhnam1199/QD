```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristic function for solving the Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Vector of customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """

    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Calculate a basic distance heuristic
    distance_heuristic = 1 / (distance_matrix + 1e-6)  # Add a small constant to avoid division by zero

    # Calculate a demand-based heuristic: edges connecting nodes with high demands are penalized.
    demand_heuristic = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            demand_heuristic[i, j] = 1 / (demands[i] + demands[j] + 1e-6) #Penalize edges linking nodes with large demands

    # Calculate a depot-proximity heuristic: prioritize edges closer to the depot.
    depot_proximity_heuristic = np.zeros((n, n))
    for i in range(n):
      for j in range(n):
        depot_proximity_heuristic[i,j] = 1 / (distance_matrix[0,i] + distance_matrix[0,j] + 1e-6)


    # Combine the heuristics
    heuristics_matrix = distance_heuristic * demand_heuristic * depot_proximity_heuristic

    #Sparsify based on distance
    distance_threshold = np.percentile(distance_matrix[distance_matrix > 0], 75)
    for i in range(n):
        for j in range(n):
             if distance_matrix[i,j] > distance_threshold:
                heuristics_matrix[i, j] = 0.0

    #Sparsify based on the heuristic values
    heuristic_threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 25)
    heuristics_matrix[heuristics_matrix < heuristic_threshold] = 0.0


    # Ensure depot is connected
    for i in range(1, n): #exclude depot to depot edge
      heuristics_matrix[0, i] = max(heuristics_matrix[0, i], np.mean(heuristics_matrix))
      heuristics_matrix[i, 0] = max(heuristics_matrix[i, 0], np.mean(heuristics_matrix))


    return heuristics_matrix
```
