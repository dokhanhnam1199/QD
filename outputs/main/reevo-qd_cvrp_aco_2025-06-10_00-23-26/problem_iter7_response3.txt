```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Calculate savings for each edge
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]  # Savings is symmetric

    # Combine distance and savings. Shorter distance, more savings -> more promising
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = savings_matrix[i, j] / (distance_matrix[i, j] + 1e-6) # avoid division by zero

    # Sharpen demand penalty: Penalize edges connecting nodes with high demands, scaled by distance.
    demand_penalty = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                demand_penalty[i, j] = (demands[i] * demands[j]) / (capacity**2) * distance_matrix[i, j] # Higher demand and distance -> larger penalty.

    heuristics_matrix = heuristics_matrix - demand_penalty

    #Refined Sparsification
    #Prioritize edges with high savings, are demand-aware and connect to depot.
    #Focus on good edges that consider depot connection, savings and demand.

    # Edge score based on savings, inverse distance, and demand consideration.
    edge_scores = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                edge_scores[i, j] = (savings_matrix[i, j] + 1e-6) / (distance_matrix[i, j] + 1e-6) / (demands[i] + demands[j] + 1e-6)
                if i == 0 or j == 0: # Depot connection bonus
                    edge_scores[i, j] *= 2

    # Combine heuristics and edge scores
    heuristics_matrix = 0.7 * heuristics_matrix + 0.3 * edge_scores  # Weighted average

    # Sparsify: Keep top edges. Dynamic threshold based on edge scores.
    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 40)  # Keep top 60%
    heuristics_matrix[heuristics_matrix < threshold] = 0

    # Extra sparsification based on capacity restrictions for immediate neighbors of the depot
    for i in range(1, n):
        if heuristics_matrix[0, i] > 0 and demands[i] > capacity: # Node itself exceeds capacity
            heuristics_matrix[0, i] = 0
            heuristics_matrix[i, 0] = 0  # Symmetric

    return heuristics_matrix
```
