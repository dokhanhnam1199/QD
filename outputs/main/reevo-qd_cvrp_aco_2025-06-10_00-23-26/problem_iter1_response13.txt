```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    Heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n x n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n x 2).
        demands (np.ndarray): Customer demands for each node (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n x n).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Parameters (can be tuned)
    alpha = 1.0  # Distance factor
    beta = 0.5  # Demand factor
    gamma = 0.2  # Angle factor
    delta = 0.8  # Closeness to depot factor

    # Normalize demands by capacity
    normalized_demands = demands / capacity

    for i in range(n):
        for j in range(n):
            if i != j:
                # Distance factor: shorter distances are more promising
                distance_factor = 1 / distance_matrix[i, j]

                # Demand factor: smaller demands are more promising
                demand_factor = 1 - (normalized_demands[i] + normalized_demands[j]) / 2 # average of both demand

                # Angle factor: penalize sharp turns.  Favor direct routes.
                # The dot product will be close to 1.0 for small angle, close to -1.0 for big angle.
                if i == 0:
                    angle_factor = 1.0 #No angle since depot
                else:
                    vector1 = coordinates[i] - coordinates[0]  # Vector from depot to i
                    vector2 = coordinates[j] - coordinates[i]  # Vector from i to j
                    norm1 = np.linalg.norm(vector1)
                    norm2 = np.linalg.norm(vector2)
                    if norm1 == 0 or norm2 == 0:
                      angle_factor = 1.0
                    else:
                      angle_factor = np.dot(vector1, vector2) / (norm1 * norm2)
                      angle_factor = (angle_factor + 1)/2  #normalize

                # Closeness to depot factor:  Nodes closer to the depot will tend to link more

                depot_distance_i = distance_matrix[0,i] if i!=0 else 0.0
                depot_distance_j = distance_matrix[0,j] if j!=0 else 0.0

                depot_factor_i = 1.0/(1.0 + depot_distance_i)
                depot_factor_j = 1.0/(1.0 + depot_distance_j)
                depot_factor = (depot_factor_i + depot_factor_j)/2

                # Combine factors
                heuristic_value = (alpha * distance_factor +
                                   beta * demand_factor +
                                   gamma * angle_factor +
                                   delta * depot_factor)

                heuristic_matrix[i, j] = heuristic_value

    # Sparsify the matrix: zero out less promising edges
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.25) # Keep the best 75% edges only

    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Normalize the matrix
    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix = heuristic_matrix / max_val

    return heuristic_matrix
```
