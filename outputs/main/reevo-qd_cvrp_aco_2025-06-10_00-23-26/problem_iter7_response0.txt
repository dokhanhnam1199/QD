```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.
    This version incorporates refined demand penalties and sparsification strategies.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity (int): Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Calculate savings for each edge
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]  # Savings is symmetric

    # Combine distance and savings. Shorter distance, more savings -> more promising
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = savings_matrix[i, j] / (distance_matrix[i, j] + 1e-6)

    # Sharpen demand penalty - more sensitive to exceeding capacity
    demand_penalty = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                demand_ratio = (demands[i] + demands[j]) / capacity
                demand_penalty[i, j] = demand_ratio**2 if demand_ratio > 1 else demand_ratio # Quadratic penalty if exceeding capacity

    heuristics_matrix = heuristics_matrix - demand_penalty

    # Prioritize depot connections based on demand and distance
    for i in range(1, n):
        depot_priority = (capacity - demands[i]) / (distance_matrix[0, i] + 1e-6) # High priority if node has low demand, short distance to depot
        heuristics_matrix[0, i] += depot_priority
        heuristics_matrix[i, 0] += depot_priority


    # Refine Sparsification. Focus on high-saving, demand-aware, depot-connecting edges
    # 1. Initial Threshold: Prioritize depot edges
    threshold = np.percentile(heuristics_matrix[heuristics_matrix > 0], 40)  # Keep top 60% initially
    heuristics_matrix[heuristics_matrix < threshold] = 0


    # Adjusted sparsification - remove edges if demands exceed capacity when combined in a route from depot
    for i in range(1, n):
        for j in range(1, n):
            if i != j and heuristics_matrix[i, j] > 0:
                if demands[i] + demands[j] > capacity:
                    heuristics_matrix[i, j] = 0



    return heuristics_matrix
```
