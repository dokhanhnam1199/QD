```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray, coordinates: np.ndarray, demands: np.ndarray, capacity: int) -> np.ndarray:
    """
    A heuristics function for solving Capacitated Vehicle Routing Problem (CVRP) via stochastic solution sampling.

    Args:
        distance_matrix (np.ndarray): Distance matrix between nodes (shape: n by n).
        coordinates (np.ndarray): Euclidean coordinates of nodes (shape: n by 2).
        demands (np.ndarray): Customer demands (shape: n).
        capacity: Vehicle capacity.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution (shape: n by n).
    """
    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros((n, n))

    # Calculate savings for each edge
    savings_matrix = np.zeros((n, n))
    for i in range(1, n):
        for j in range(i + 1, n):
            savings_matrix[i, j] = distance_matrix[0, i] + distance_matrix[0, j] - distance_matrix[i, j]
            savings_matrix[j, i] = savings_matrix[i, j]  # Savings is symmetric

    # Combine distance and savings. Shorter distance, more savings -> more promising
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics_matrix[i, j] = savings_matrix[i, j] / (distance_matrix[i, j] + 1e-6)

    # Demand-aware Sparsification and capacity consideration
    demand_factor = np.zeros((n, n))
    for i in range(1, n):
        for j in range(1, n):
            if i != j:
                demand_factor[i, j] = (demands[i] + demands[j]) / (2 * capacity)

    heuristics_matrix = heuristics_matrix - demand_factor #reduce heuristic values for higher demand


    # Depot Proximity and Savings Combination
    depot_proximity_scaling = 1.2  # Tunable scaling factor
    for i in range(1, n):
        heuristics_matrix[0, i] *= depot_proximity_scaling
        heuristics_matrix[i, 0] *= depot_proximity_scaling

    # Sparsify matrix, considering only existing edges for percentile calculation
    existing_edges = heuristics_matrix > 0
    if np.any(existing_edges):  # Check if there are any positive elements before calculating percentile
        threshold = np.percentile(heuristics_matrix[existing_edges], 30) # Reduce to 70%
        heuristics_matrix[heuristics_matrix < threshold] = 0


    # Stricter capacity check and redundancy avoidance. Also consider single node demands

    for i in range(1, n):
        for j in range(1, n):
            if i != j and heuristics_matrix[i, j] > 0: #check edge existance
                if demands[i] + demands[j] > capacity:
                    heuristics_matrix[i, j] = 0
                    heuristics_matrix[j, i] = 0
            if demands[i] > capacity: #Remove edges from depot directly if they exceed capacity
                heuristics_matrix[0, i] = 0
                heuristics_matrix[i, 0] = 0
            if demands[j] > capacity:
                heuristics_matrix[0, j] = 0
                heuristics_matrix[j, 0] = 0



    return heuristics_matrix
```
