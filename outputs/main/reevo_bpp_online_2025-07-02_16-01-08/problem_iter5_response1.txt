```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        # Remaining capacity after fit
        remaining_after_fit = bins_remain_cap[can_fit] - item
        
        # Prioritize near-perfect fits
        perfect_fit_threshold = 0.1 * bin_capacity  # e.g., within 10% of perfect fit
        near_perfect_fit = (remaining_after_fit >= 0) & (remaining_after_fit <= perfect_fit_threshold)
        priorities[can_fit][near_perfect_fit] += 1.0

        # Minimize waste (prioritize tighter fits in general)
        normalized_remaining = remaining_after_fit / bin_capacity
        priorities[can_fit] += (1.0 - normalized_remaining)
        
        # Dynamic fill level bonus/penalty
        fill_level = (bin_capacity - bins_remain_cap[can_fit]) / bin_capacity # Current bin fill level
        mid_range_start = 0.25
        mid_range_end = 0.75

        mid_fullness_bonus = np.where(
            (fill_level >= mid_range_start) & (fill_level <= mid_range_end),
            1.0,  # Give a bonus if in the mid-range
            0.0
        )
        
        priorities[can_fit] += mid_fullness_bonus

        #Feasibility score to make sure not NAN values
        priorities[can_fit] += 1e-6
    else:
        # No bin can fit, prioritize bins with larger remaining capacity, but less aggressively
        priorities = bins_remain_cap / bin_capacity * 0.1  # Lower priority if no fit
    
    return priorities
```
