{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    can_fit = bins_remain_cap >= item\n    \n    if np.any(can_fit):\n        # Remaining capacity after fit\n        remaining_after_fit = bins_remain_cap[can_fit] - item\n\n        # Prioritize perfect/near-perfect fits\n        perfect_fit_bonus = np.isclose(remaining_after_fit, 0)\n        priorities[can_fit][perfect_fit_bonus] += 1.0  # Substantial bonus for perfect fits\n\n        # Prioritize near-perfect fits, but less than perfect.\n        near_perfect_fit = (remaining_after_fit > 0) & (remaining_after_fit <= 0.1 * np.max(bins_remain_cap)) # adjust 0.1\n        priorities[can_fit][near_perfect_fit] += 0.5 \n\n\n        # Minimize waste: penalize larger remaining capacities\n        waste_penalty = remaining_after_fit / np.max(bins_remain_cap)\n        priorities[can_fit] -= waste_penalty\n\n        # Encourage filling bins with mid-fullness.\n        fill_level_before = (bins_remain_cap[can_fit] / np.max(bins_remain_cap))\n        fill_level_after = remaining_after_fit / np.max(bins_remain_cap)\n        mid_fullness_bonus = np.exp(-((fill_level_after - 0.6) ** 2) / 0.08) #gaussian centered around 0.6. adjust paramenters.\n        priorities[can_fit] += mid_fullness_bonus\n        \n        # Normalize the priorities to [0, 1] range (avoid negative values)\n        min_priority = np.min(priorities[can_fit])\n        max_priority = np.max(priorities[can_fit])\n        if max_priority > min_priority:\n            priorities[can_fit] = (priorities[can_fit] - min_priority) / (max_priority - min_priority)\n        else:\n            priorities[can_fit] = 0.5 * np.ones_like(priorities[can_fit]) # all same. doesn't matter which\n\n    else:\n        # No bin can fit. Prioritize bins with greater remaining capacity, normalized.\n        priorities = bins_remain_cap / np.max(bins_remain_cap)  # Linear prioritization of larger capacity.\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Extremely high priority for perfect fit\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    priorities[perfect_fit] = 10000\n\n    # Very high priority for near-perfect fit (small tolerance)\n    near_perfect_fit = (bins_remain_cap - item > 0) & (bins_remain_cap - item <= 0.1)\n    priorities[near_perfect_fit] = 5000\n\n    # Moderate priority for bins where the item fits\n    fits = bins_remain_cap >= item\n    fits_indices = np.where(fits)[0]\n\n    if len(fits_indices) > 0:\n        remaining_space = bins_remain_cap[fits] - item\n        # Prioritize based on remaining space, smaller remaining space gets higher priority\n        # Use a normalized score to avoid issues with different capacity scales\n        max_remaining = np.max(remaining_space)\n        if max_remaining > 0:  # Avoid division by zero\n            priorities[fits] = 1000 - (remaining_space / max_remaining) * 900  # Scale between 100 and 1000\n        else:\n            priorities[fits] = 1000 #All remaining space is same and 0.\n\n    # Lower priority if it fits but not perfectly/near perfectly and not the best fit, to avoid fragmentation.\n    other_fits = fits & ~perfect_fit & ~near_perfect_fit\n\n    # Apply some baseline priority, but less than perfect/near-perfect\n    priorities[other_fits] = np.maximum(priorities[other_fits],100)\n    return priorities\n\n[Reflection]\nPrioritize perfect/near-perfect fits with large rewards. Use scaled remaining space for granular prioritization.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}