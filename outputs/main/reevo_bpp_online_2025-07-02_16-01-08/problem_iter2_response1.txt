```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # Feasibility check: Assign a very low priority to bins that cannot fit the item.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Score based on how well the item fits into the bin
    feasible_mask = ~infeasible_mask
    remaining_capacity = bins_remain_cap[feasible_mask] - item
    
    # Prioritize bins where the remaining capacity is a good percentage of bin size
    # A remaining capacity close to zero is also penalized

    fit_score = 1 - np.abs((remaining_capacity / bin_capacity) - 0.5)  # Prefer ~50% remain
    priorities[feasible_mask] = fit_score

    return priorities
```
