```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        # Normalized remaining capacity after fit, prioritize tighter fits
        remaining_after_fit = bins_remain_cap[can_fit] - item
        normalized_remaining = remaining_after_fit / np.max(bins_remain_cap)
        priorities[can_fit] = 1.0 - normalized_remaining
        
        # Encourage medium fill levels before placing item.
        fill_level_before = bins_remain_cap[can_fit] / np.max(bins_remain_cap)
        fill_penalty = np.abs(fill_level_before - 0.5) # Prefer levels closer to 0.5
        priorities[can_fit] += (1.0 - fill_penalty)

        # Small bonus for already used bins
        already_used = bins_remain_cap < np.max(bins_remain_cap)
        priorities[already_used & can_fit] += 0.5 #Slightly prefer existing bins if feasible

    else:
        # If no bin can fit, prioritize bins with larger remaining capacity.
        priorities = bins_remain_cap / np.max(bins_remain_cap)

    return priorities
```
