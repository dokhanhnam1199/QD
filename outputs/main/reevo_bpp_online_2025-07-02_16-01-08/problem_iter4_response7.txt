```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        remaining_after_fit = bins_remain_cap[can_fit] - item
        max_capacity = np.max(bins_remain_cap)

        # Tighter fit priority
        normalized_remaining = remaining_after_fit / max_capacity
        tighter_fit_priority = 1.0 - normalized_remaining

        priorities[can_fit] = tighter_fit_priority

        # Fill level penalty (Gaussian centered at 0.5)
        fill_level = (max_capacity - bins_remain_cap[can_fit]) / max_capacity
        fill_penalty = np.exp(-((fill_level - 0.5)**2) / 0.08)
        priorities[can_fit] *= fill_penalty

        # Proximity score (remaining capacity close to item size)
        proximity_score = 1.0 / (np.abs(bins_remain_cap[can_fit] - item) / max_capacity + 0.00001)
        priorities[can_fit] += proximity_score

        # Refine by also considering remaining capacity relative to item size
        item_relative_remaining = remaining_after_fit / (item + 0.00001)
        item_relative_priority = np.exp(-((item_relative_remaining - 1.0)**2) / 0.1) # prefer item_relative_remaining = 1
        priorities[can_fit] += item_relative_priority

    else:
        # If no bins can fit, prioritize the bin with largest remaining capacity, normalized by item size.
        priorities = bins_remain_cap / (item + 0.00001)

    return priorities
```
