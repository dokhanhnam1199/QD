```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Can the item fit in the bin?
    feasible_bins = bins_remain_cap >= item
    
    # 2. Remaining Capacity: Prefer bins where the item fits best (least wasted space)
    waste = bins_remain_cap - item
    waste[~feasible_bins] = np.inf  # Assign infinite waste to infeasible bins
    
    #Prioritize small amount of waste, only considering bins that can accomodate item
    priorities[feasible_bins] = -waste[feasible_bins]
    
    #3. Bonus for nearly full bins (try to fill them up)
    nearly_full = (bins_remain_cap > item) & (bins_remain_cap <= 2*item) #tune parameters
    priorities[nearly_full] += 1 #can tune this parameter
        
    #4. Large bins: give negative priority to not use if other better option are there.
    large_bins = bins_remain_cap > 3*item
    priorities[large_bins] -=0.5

    # Ensure infeasible bins have the lowest priority
    priorities[~feasible_bins] = -np.inf

    return priorities
```
