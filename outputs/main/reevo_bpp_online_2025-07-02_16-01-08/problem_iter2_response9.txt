```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can fit the item.
    fit_indices = bins_remain_cap >= item

    if np.any(fit_indices):
        # Calculate the fill ratio (item size / bin capacity after placement). Higher is better.
        fill_ratio = item / (bins_remain_cap[fit_indices])
        priorities[fit_indices] = fill_ratio

        # Scale priorities to emphasize tight fits.
        priorities[fit_indices] *= 10  # Increase contribution of feasible bins

        # Prioritize bins with less remaining space after item is placed (tight fit).
        remaining_space = bins_remain_cap[fit_indices] - item
        priorities[fit_indices] += (1 / (remaining_space + 0.0001))  # Avoid division by zero and prioritize smaller remaining space

    else:
        # If no bin can fit, assign a negative priority to all bins.
        priorities = np.full_like(bins_remain_cap, -1.0)

        # Find the bin with the maximum remaining capacity and give it a slightly better negative priority.
        max_cap_idx = np.argmax(bins_remain_cap)
        priorities[max_cap_idx] = -0.9  # Slightly better than other infeasible bins

    return priorities
```
