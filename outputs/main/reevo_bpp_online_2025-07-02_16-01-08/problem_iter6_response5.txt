```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Perfect Fit: Highest Priority
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = 10000.0

    # 2. Feasibility Check & Wasted Space Minimization
    feasible_bins = bins_remain_cap >= item
    infeasible_bins = ~feasible_bins
    priorities[infeasible_bins] = -np.inf  # Ensure infeasible bins are never selected

    # Prioritize feasible bins based on minimizing wasted space
    wasted_space = bins_remain_cap[feasible_bins] - item
    # Invert wasted space to create a priority score; smaller wasted space -> higher priority
    priorities[feasible_bins] = 1000.0 - wasted_space * 10 # Scale wasted space to make the priority meaningful

    return priorities
```
