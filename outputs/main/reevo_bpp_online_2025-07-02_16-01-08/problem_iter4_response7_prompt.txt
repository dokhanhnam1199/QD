{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n\n    # Feasibility check: Assign a very low priority to bins that cannot fit the item.\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n\n    # Score based on how well the item fits into the bin\n    feasible_mask = ~infeasible_mask\n    remaining_capacity = bins_remain_cap[feasible_mask] - item\n    \n    # Prioritize bins where the remaining capacity is a good percentage of bin size\n    # A remaining capacity close to zero is also penalized\n\n    fit_score = 1 - np.abs((remaining_capacity / bin_capacity) - 0.5)  # Prefer ~50% remain\n    priorities[feasible_mask] = fit_score\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    can_fit = bins_remain_cap >= item\n    \n    if np.any(can_fit):\n        remaining_after_fit = bins_remain_cap[can_fit] - item\n        \n        # Normalized remaining capacity:  closer to 0 is better (tighter fit).\n        normalized_remaining = remaining_after_fit / np.max(bins_remain_cap)\n\n        # Give higher priority to tighter fits.  Invert and offset to ensure positive values.\n        priorities[can_fit] = 1.0 - normalized_remaining\n\n        # Scale priority based on current fill level.  Avoid near-full or near-empty bins.\n        fill_level = (np.max(bins_remain_cap) - bins_remain_cap[can_fit]) / np.max(bins_remain_cap)\n        \n        # Penalize bins that are already almost full or almost empty.\n        fill_penalty = np.exp(-((fill_level - 0.5)**2) / 0.08)  # Gaussian centered at 0.5\n        priorities[can_fit] *= fill_penalty\n\n        # Prioritize bins with remaining capacity closest to item size\n        proximity_score = 1.0 / (np.abs(bins_remain_cap[can_fit] - item) / np.max(bins_remain_cap) + 0.00001)\n\n        priorities[can_fit] += proximity_score\n        \n    else:\n        # If no bins can fit, prioritize the bin with largest remaining capacity.\n        # This might lead to opening a new bin later.  Divide by the item size to\n        # normalize based on the item we're trying to place.\n        priorities = bins_remain_cap / (item + 0.00001)\n\n    return priorities\n\n[Reflection]\nTighter fit, fill level penalty, and proximity score improve bin selection. Normalization is also key.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}