```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Big enough but with minimum waste.
    can_fit = bins_remain_cap >= item
    waste = bins_remain_cap - item
    
    priorities[can_fit] = 1 / (waste[can_fit] + 0.000001)  # Add a small constant to avoid division by zero
    
    # If it can perfectly fit: assign a very high priority to that bin.
    perfect_fit = waste == 0
    priorities[perfect_fit] = 1000
    
    # Bins where the item does not fit get a zero priority
    priorities[~can_fit] = -1
    
    return priorities
```
