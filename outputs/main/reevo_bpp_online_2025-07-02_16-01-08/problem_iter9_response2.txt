```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)
    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        remaining_after_fit = bins_remain_cap[can_fit] - item
        normalized_remaining = remaining_after_fit / bin_capacity

        # Perfect fit bonus (exponential, prioritize near-perfect fits)
        perfect_fit_bonus = np.exp(-100 * normalized_remaining)

        # Initial priority based on tightness of fit (minimize waste)
        priorities[can_fit] = 1.0 - normalized_remaining + perfect_fit_bonus

        # Fill-level considerations: bonus for medium-full, penalty for extremes
        fill_level_before = bins_remain_cap[can_fit] / bin_capacity
        fill_level_after = (bins_remain_cap[can_fit] - item) / bin_capacity
        
        # Ideal fill level around 0.7
        fill_level_target = 0.7
        fill_penalty = np.abs(fill_level_after - fill_level_target)

        #Bonus for bins moving closer to the fill level target, negative penalty for moving far away
        fill_bonus = -fill_penalty

        priorities[can_fit] += fill_bonus * 0.5 # Reduce the weights of bonuses and penalties.


        #Small priorization of bins that are bigger
        priorities[can_fit] += (bins_remain_cap[can_fit] / bin_capacity) * 0.05
    else:
        # No bin can fit: heavily penalize, slightly prefer bins with more capacity
        priorities = -1e9 * np.ones_like(bins_remain_cap)
        priorities[bins_remain_cap == np.max(bins_remain_cap)] = -1e8  # Slightly favor largest

    return priorities
```
