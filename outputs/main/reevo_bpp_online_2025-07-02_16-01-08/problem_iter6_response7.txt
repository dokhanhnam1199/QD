```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Assign a very low priority to bins that cannot fit the item.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Prioritize bins with minimal remaining space after placing the item.
    feasible_mask = ~infeasible_mask
    remaining_capacity = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -remaining_capacity  # Smaller remaining capacity -> higher priority

    # Add a tie-breaker: Prefer bins with higher initial capacity among those with similar remaining capacity
    priorities[feasible_mask] += bins_remain_cap[feasible_mask] * 1e-6

    return priorities
```
