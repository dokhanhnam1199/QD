```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Large bins that can accommodate the item are preferred (First Fit Decreasing inspired)
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1  # Basic priority for being able to fit

    # Bins that have just enough space are preferred (Best Fit inspired)
    space_left = bins_remain_cap - item
    
    # Avoid fragmenting bins too much: penalize almost full bins.
    almost_full = (space_left > 0) & (space_left <= np.percentile(space_left[space_left>0] if np.any(space_left>0) else [0], 25) if np.any(space_left > 0) else np.array([False])) #only consider positive space_left to avoid indexing errors with negative space_left

    priorities[almost_full] += 2 #Higher Priority
    
    # Add small random noise to break ties and explore more possibilities.
    priorities += np.random.rand(len(bins_remain_cap)) * 0.01
    
    return priorities
```
