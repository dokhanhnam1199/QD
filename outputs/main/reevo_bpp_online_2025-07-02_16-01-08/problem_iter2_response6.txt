```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility Check: Give -inf priority to bins that cannot fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Priority for bins that can fit:
    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins):
        remaining_space = bins_remain_cap[feasible_bins] - item

        # 1. Smallest Waste First: Prefer bins that leave the smallest waste. Scaled to be significant.
        waste_priority = -remaining_space

        # 2. Fill Level Preference: Prefer bins that are already somewhat full, but not too full.
        # Normalize remaining capacity to a 0-1 scale (0 = full, 1 = empty)
        normalized_remaining = bins_remain_cap[feasible_bins] / np.max(bins_remain_cap)
        fill_level_priority = 1 - normalized_remaining  # Higher = more full

        # 3. Fragmentation avoidance: Penalize bins that, after the item is added,
        #    have remaining capacity larger than the current item. Avoid small items blocking larger ones later
        frag_penalty = np.where(remaining_space > item, -5, 0)  # Reduced penalty

        # 4. Empty Bin Avoidance: Heavily penalize filling an empty bin unless all other bins are full.
        empty_penalty = np.where(bins_remain_cap[feasible_bins] == np.max(bins_remain_cap), -10, 0)

        priorities[feasible_bins] = waste_priority + fill_level_priority + frag_penalty + empty_penalty

    return priorities
```
