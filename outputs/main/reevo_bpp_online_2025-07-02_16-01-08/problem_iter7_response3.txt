```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        # Remaining capacity after fit
        remaining_after_fit = bins_remain_cap[can_fit] - item

        # Normalized remaining capacity after fit
        normalized_remaining = remaining_after_fit / np.max(bins_remain_cap)
        
        # Prioritize bins that result in a tighter fit (lower normalized remaining capacity).
        priorities[can_fit] = 1.0 - normalized_remaining

        # Perfect fit bonus: Greatly prioritize perfect fits.
        perfect_fit = (remaining_after_fit == 0)
        if np.any(perfect_fit):
            priorities[can_fit][perfect_fit] += 10  # Large bonus

        # Near-perfect fit bonus
        near_perfect_fit = (remaining_after_fit > 0) & (remaining_after_fit <= 0.1 * np.max(bins_remain_cap))  #Up to 10% of capacity remaining
        if np.any(near_perfect_fit):
            priorities[can_fit][near_perfect_fit] += 5

        # Fullness Bonus (avoid over-filling)
        current_fill_level = (bins_remain_cap / np.max(bins_remain_cap))[can_fit]
        fullness_penalty = np.abs(current_fill_level - 0.5)
        priorities[can_fit] += (1-fullness_penalty)


    else:
        # If no bin can fit, strongly penalize by assigning a very low priority.
        priorities = -1e9 * np.ones_like(bins_remain_cap)


    return priorities
```
