```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        # Remaining capacity after fit
        remaining_after_fit = bins_remain_cap[can_fit] - item

        # Prioritize perfect/near-perfect fits
        perfect_fit_bonus = np.isclose(remaining_after_fit, 0)
        priorities[can_fit][perfect_fit_bonus] += 1.0  # Substantial bonus for perfect fits

        # Prioritize near-perfect fits, but less than perfect.
        near_perfect_fit = (remaining_after_fit > 0) & (remaining_after_fit <= 0.1 * np.max(bins_remain_cap)) # adjust 0.1
        priorities[can_fit][near_perfect_fit] += 0.5 


        # Minimize waste: penalize larger remaining capacities
        waste_penalty = remaining_after_fit / np.max(bins_remain_cap)
        priorities[can_fit] -= waste_penalty

        # Encourage filling bins with mid-fullness.
        fill_level_before = (bins_remain_cap[can_fit] / np.max(bins_remain_cap))
        fill_level_after = remaining_after_fit / np.max(bins_remain_cap)
        mid_fullness_bonus = np.exp(-((fill_level_after - 0.6) ** 2) / 0.08) #gaussian centered around 0.6. adjust paramenters.
        priorities[can_fit] += mid_fullness_bonus
        
        # Normalize the priorities to [0, 1] range (avoid negative values)
        min_priority = np.min(priorities[can_fit])
        max_priority = np.max(priorities[can_fit])
        if max_priority > min_priority:
            priorities[can_fit] = (priorities[can_fit] - min_priority) / (max_priority - min_priority)
        else:
            priorities[can_fit] = 0.5 * np.ones_like(priorities[can_fit]) # all same. doesn't matter which

    else:
        # No bin can fit. Prioritize bins with greater remaining capacity, normalized.
        priorities = bins_remain_cap / np.max(bins_remain_cap)  # Linear prioritization of larger capacity.

    return priorities
```
