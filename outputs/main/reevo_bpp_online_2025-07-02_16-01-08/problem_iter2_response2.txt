```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility Check: Give -inf priority to bins that cannot fit the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf
    
    # Priority for bins that can fit:
    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins):
        remaining_space = bins_remain_cap[feasible_bins] - item
        
        # 1. Smallest Waste First: Prefer bins that leave the smallest waste. Scaled to be significant.
        waste_priority = -remaining_space  # Smaller waste is better
        waste_priority = waste_priority / bins_remain_cap.max() # Normalize
        waste_priority *= 5 #Scale up

        # 2. Fill Level Preference: Prefer bins that are already somewhat full, but not too full.
        fill_level = 1 - (bins_remain_cap[feasible_bins] / bins_remain_cap.max())
        fill_priority = fill_level  # Slightly full preferred
        #Heavily penalize too full bins
        too_full = remaining_space < 0.1
        fill_priority[too_full] -= 2
        
        # 3. Avoid very empty bins to promote consolidation, avoid fragmentation
        empty_penalty = np.where(bins_remain_cap[feasible_bins] == bins_remain_cap.max(), -1, 0)  # heavily penalize filling an empty bin unless all other are full

        priorities[feasible_bins] = waste_priority + fill_priority + empty_penalty

    return priorities
```
