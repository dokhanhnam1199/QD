```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Large items get high priority for bins with sufficient remaining capacity
    sufficient_capacity = bins_remain_cap >= item
    priorities[sufficient_capacity] = (bins_remain_cap[sufficient_capacity] - item) / bins_remain_cap[sufficient_capacity]

    # If no bin has sufficient capacity, penalize all bins
    if not np.any(sufficient_capacity):
        priorities = np.zeros_like(bins_remain_cap, dtype=float)
    else:
        #Small items given some priority to bins which have more than the item size
        priorities = np.where(bins_remain_cap >= item, 1/(1 + np.abs(bins_remain_cap-item)), 0)
        priorities[bins_remain_cap < item] = -100 #negative priority to make sure not selected

    return priorities
```
