```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Bins that can accommodate the item get higher priority.
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1.0

    # Rule 2: Favor bins where the item fills a large portion of the remaining capacity.
    fill_ratios = item / bins_remain_cap
    fill_ratios[~can_fit] = 0  # Avoid division by zero and prioritize only valid bins
    priorities += fill_ratios * can_fit #Only consider fill ratios of bins where item can fit
   
    # Rule 3: Reduce priority if the bin is getting too full and a small remaining space would be left
    small_space_mask = (bins_remain_cap - item) < 0.1
    priorities[can_fit & small_space_mask] -= 0.5 # Reduce priority slightly if a bin will have very little space left
    
    # Rule 4: If the bin is empty (equal to initial bin size), boost priority to encourage first-fit type behaviour.
    empty_bin_mask = bins_remain_cap == bins_remain_cap.max()
    priorities[empty_bin_mask & can_fit] += 0.75 #Higher priority boost for empty bins where the item can fit.

    # Rule 5: If no bins can accomodate the item return bins with most space.
    if not np.any(can_fit):
        priorities = bins_remain_cap/bins_remain_cap.max()
        
    return priorities
```
