{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n\n    # Feasibility check: Assign a very low priority to bins that cannot fit the item.\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n\n    # Score based on how well the item fits into the bin\n    feasible_mask = ~infeasible_mask\n    remaining_capacity = bins_remain_cap[feasible_mask] - item\n    \n    # Prioritize bins where the remaining capacity is a good percentage of bin size\n    # A remaining capacity close to zero is also penalized\n\n    fit_score = 1 - np.abs((remaining_capacity / bin_capacity) - 0.5)  # Prefer ~50% remain\n    priorities[feasible_mask] = fit_score\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    can_fit = bins_remain_cap >= item\n    \n    if np.any(can_fit):\n        remaining_after_fit = bins_remain_cap[can_fit] - item\n        \n        # Normalized remaining capacity after fit\n        normalized_remaining = remaining_after_fit / np.max(bins_remain_cap)\n        \n        # Prioritize smaller normalized remaining capacity (tighter fit)\n        priorities[can_fit] = 1.0 - normalized_remaining\n        \n        # Dynamic scaling based on bin state. Avoid near-full or near-empty bins\n        fill_ratio = (bins_remain_cap[can_fit] - remaining_after_fit) / np.max(bins_remain_cap)\n        \n        # Add a bonus if the fill ratio is within a good range (e.g., 0.6 to 0.9)\n        bonus = np.where((fill_ratio >= 0.6) & (fill_ratio <= 0.9), 0.5, 0.0)\n        priorities[can_fit] += bonus\n\n    else:\n        # If no bins can fit, prioritize the bin with the largest remaining capacity.\n        priorities = bins_remain_cap / np.max(bins_remain_cap)\n\n    return priorities\n\n[Reflection]\nTighter fit, normalized remaining capacity, dynamic scaling with fill ratio, and handling infeasibility improve heuristic design.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}