```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First Fit Decreasing-inspired heuristic: Prefer bins that can fit the item
    # without a large remaining capacity, but prioritize almost-full bins.
    fit_mask = bins_remain_cap >= item
    if np.any(fit_mask):
        #Prioritize bins where the remaining capacity after packing is small.
        remaining_after_packing = bins_remain_cap[fit_mask] - item
        priorities[fit_mask] = 1.0 / (remaining_after_packing + 0.0001)  # Avoid division by zero

        # Boost priority for bins that are close to full after packing
        almost_full_mask = remaining_after_packing < 0.1 * np.max(bins_remain_cap) #was < 0.1
        priorities[fit_mask][almost_full_mask] *= 2.0

    else:
        # If no bin can fit, penalize bins with very low capacity.
        # This tries to save space for future potentially smaller items.
        priorities = - (item - bins_remain_cap) #Negative difference

    return priorities
```
