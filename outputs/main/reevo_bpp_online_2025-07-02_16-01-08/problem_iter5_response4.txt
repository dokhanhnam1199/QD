```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)  # Assuming all bins have same capacity

    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        # Remaining capacity after fit
        remaining_after_fit = bins_remain_cap[can_fit] - item

        # Normalized remaining capacity
        normalized_remaining = remaining_after_fit / bin_capacity

        # Prioritize near-perfect fits
        perfect_fit_score = np.exp(-np.abs(remaining_after_fit) / (0.1 * bin_capacity))
        priorities[can_fit] = perfect_fit_score

        # Prioritize minimizing waste (fragmentation)
        waste_penalty = normalized_remaining
        priorities[can_fit] -= waste_penalty

        # Bin fill level bonus
        fill_level = (bins_remain_cap[can_fit] - remaining_after_fit) / bin_capacity  # Current fill level
        fill_level_ideal = 0.7 # prefered occupancy for the bin
        fill_level_score = np.exp(-np.abs(fill_level - fill_level_ideal)/0.2) # gaussian curve around fill_level_ideal

        priorities[can_fit] += fill_level_score

        #Normalize
        max_priority = np.max(priorities[can_fit])
        if max_priority > 0:
          priorities[can_fit] /= max_priority

    else:
        # If no bin can fit, prioritize bins with larger remaining capacity (to minimize needed bins)
        priorities = bins_remain_cap / bin_capacity
        #Normalize priorities
        max_priority = np.max(priorities)
        if max_priority > 0:
          priorities /= max_priority
    
    return priorities
```
