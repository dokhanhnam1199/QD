```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Rule out bins that are too small.
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf  # Very low priority

    # 2. Remaining capacity near item size has the highest priority.
    diff = np.abs(bins_remain_cap - item)
    priorities[~infeasible] = -diff[~infeasible] # Closer to item size, better
    
    # 3. Smallest Remaining Capacity (among feasible bins). This favors bins with very little space.
    priorities[~infeasible] += -bins_remain_cap[~infeasible]/np.max(bins_remain_cap[~infeasible])

    # 4. Consider the waste (remaining capacity after packing the item). Penalize waste.
    waste = bins_remain_cap - item
    waste[waste < 0] = 0 # already considered infeasible, but to be safe
    priorities[~infeasible] += -waste[~infeasible]/np.max(bins_remain_cap) # Normalize by bin capacity
    
    return priorities
```
