```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First-Fit Decreasing inspired: prioritize bins that can fit the item well
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = bins_remain_cap[fit_mask] - item  # Smaller remaining space is better
    
    # Avoid bins that are too full after adding the item
    almost_full_mask = (bins_remain_cap > 0) & (bins_remain_cap < item + 0.1)  #tolerate floating point errors
    priorities[almost_full_mask] = -np.inf # Mark them to be avoided.

    # Use remaining cap as tie breaker
    priorities += bins_remain_cap / np.max(bins_remain_cap, initial=1) / 1000 # prevent division by zero by setting initial to 1

    return priorities
```
