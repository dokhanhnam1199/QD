```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        # Remaining capacity after fit
        remaining_after_fit = bins_remain_cap[can_fit] - item

        # Perfect fit bonus: Much higher priority if it perfectly fills the bin
        perfect_fit = np.isclose(remaining_after_fit, 0)
        priorities[can_fit][perfect_fit] = 10.0

        # Near-perfect fit bonus: High priority if it almost perfectly fills the bin
        near_perfect_fit = (remaining_after_fit > 0) & (remaining_after_fit <= 0.1)  # Adjust threshold as needed
        priorities[can_fit][near_perfect_fit] = 5.0

        # General priority based on minimizing waste and fill level
        normalized_remaining = remaining_after_fit / np.max(bins_remain_cap) #normalize by the bin capacity not by remaining capacity
        priorities[can_fit] += (1.0 - normalized_remaining)

        # Bin Fill Level Penalty - encourages bins closer to half-full. Modified to be between 0 and 1.
        fill_level_before = (bins_remain_cap[can_fit] / np.max(bins_remain_cap))
        fill_level_after = (bins_remain_cap[can_fit] - item) / np.max(bins_remain_cap)
        fill_penalty = np.abs(fill_level_before - 0.5)
        priorities[can_fit] += (1.0 - fill_penalty)

        # Fragmentation penalty: Penalize bins with small remaining capacity after insertion.
        # This makes it harder to put small items later in a bin.
        fragmentation_penalty = normalized_remaining
        priorities[can_fit] -= fragmentation_penalty

    else:
        # No bin can fit, prioritize bins with larger remaining capacity (to minimize number of needed bins)
        # But strongly penalize since the item doesn't fit
        priorities = bins_remain_cap / np.max(bins_remain_cap) - 2.0 # Penalize more so that the existing bins get filled up before opening a new one. If a bin cannot fit the item this results in a negative priority score.
        
    return priorities
```
