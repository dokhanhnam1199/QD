```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        # Remaining capacity AFTER placing item
        remaining_after_fit = bins_remain_cap[can_fit] - item
        
        # Normalized remaining capacity AFTER placing item. Crucial for measuring waste relative to the bin.
        normalized_remaining = remaining_after_fit / np.max(bins_remain_cap) # use the original bin capacity

        # Prioritize near-perfect fits. A perfect fit has normalized_remaining close to 0.
        perfect_fit_bonus = np.exp(-10 * normalized_remaining) # Exponential decay, peaks at 0 remaining
        priorities[can_fit] += 2 * perfect_fit_bonus

        # Discourage high waste.  Penalize bins that leave a large proportion empty.  Use a quadratic penalty.
        waste_penalty = normalized_remaining**2 # quadratic penalty, 0 at no waste, 1 at full waste.
        priorities[can_fit] += -waste_penalty

        #Encourage medium-full bins before placement. Normalize bins_remain_cap before placement.
        normalized_before = bins_remain_cap[can_fit] / np.max(bins_remain_cap)
        medium_full_bonus = np.exp(-5 * (normalized_before - 0.6)**2)
        priorities[can_fit] += medium_full_bonus # Encourage bins with remaining capacity around 0.6

    else:
        # If item does not fit, strongly penalize the placement by assigning a very low priority
        priorities = -1e9 * np.ones_like(bins_remain_cap)

    return priorities
```
