```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        # Remaining capacity after fit
        remaining_after_fit = bins_remain_cap[can_fit] - item
        
        # Normalized remaining capacity after fit (relative to the bin's capacity)
        normalized_remaining = remaining_after_fit / np.max(bins_remain_cap)  # Use max capacity for normalization
    
        #Prioritize perfect/near-perfect fits
        perfect_fit_bonus = np.exp(-100*normalized_remaining) #High bonus when normalized_remaining is near zero. Adjusted exponent.

        # Prioritize bins that result in a tighter fit (lower normalized remaining capacity)
        priorities[can_fit] = 1.0 - normalized_remaining + perfect_fit_bonus
        

        # Add a bonus for bins that are already relatively full before the item is added.
        #  Avoid bins near full or near empty to avoid small wastes and over-filling.
        fill_level = bins_remain_cap[can_fit] / np.max(bins_remain_cap)
        
        # Penalize bins that are either too empty or too full
        fill_penalty = np.exp(-20 * (fill_level - 0.6)**2)  # Gaussian-like penalty, best around 0.6.

        priorities[can_fit] = priorities[can_fit] + fill_penalty * 0.8 # Adjust the priorities. Increased weight

        #Slightly prioritize bins with bigger initial capacity
        priorities[can_fit] = priorities[can_fit] + (bins_remain_cap[can_fit] / np.max(bins_remain_cap))*0.05 #weight 0.05

    else:
        # If no bin can fit, strongly penalize and slightly prefer bins with more capacity
        priorities = -1e9 * np.ones_like(bins_remain_cap)  # Extremely negative priority
        priorities[bins_remain_cap == np.max(bins_remain_cap)] = -1e8 # Slightly favor the empty bins but still penalize strongly

    return priorities
```
