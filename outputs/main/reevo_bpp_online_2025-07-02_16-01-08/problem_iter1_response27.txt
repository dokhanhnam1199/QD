```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give very low priority to bins that cannot accommodate the item.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Prioritize bins that can fit the item.
    feasible_bins = ~infeasible_bins
    
    if np.any(feasible_bins):
        # Calculate the waste if the item is added to each feasible bin.
        waste = bins_remain_cap[feasible_bins] - item

        # Give higher priority to bins with smaller waste.  Invert and exponentiate to amplify the difference.  Add a small constant to avoid log(0) and encourage tighter packing.

        priorities[feasible_bins] = np.exp(-waste / np.mean(bins_remain_cap[feasible_bins]))
        
        #Boost priority if item fills the bin completely, using condition and where
        perfect_fit = np.isclose(waste, 0) & feasible_bins
        priorities[perfect_fit] = np.inf

    return priorities
```
