```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Very high priority if the item fits perfectly.
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = 1000.0  # Give very high priority to perfect fits.

    # High priority if the item fits
    fits = (bins_remain_cap >= item)
    if np.any(fits):
        wasted_space = bins_remain_cap[fits] - item
        #Prioritize bins where we waste the least space; invert wasted space to get a positive priority. 
        #Scale wasted space for better differentiation.
        priorities[fits] = 500.0 - (wasted_space * 10) # Increased scaling

    # Give a negative priority (discourage) bins that are too full (less than the item size)
    no_fit = (bins_remain_cap < item)
    priorities[no_fit] = -1000.0  # Discourage no-fit bins heavily.

    return priorities
```
