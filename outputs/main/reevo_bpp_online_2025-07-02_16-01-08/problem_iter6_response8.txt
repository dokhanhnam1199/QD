```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        # Tighter fit priority: prioritize smaller remaining capacity after placing the item.
        remaining_after_fit = bins_remain_cap[can_fit] - item
        
        # Relative normalization:  Normalize remaining capacity by the item size. This emphasizes how "tight" the fit is *relative* to the item being placed.
        normalized_remaining = remaining_after_fit / item
        priorities[can_fit] = 1.0 - normalized_remaining

        # Balanced bin utilization: Prioritize bins that are neither too full nor too empty.
        current_fill = (np.max(bins_remain_cap) - bins_remain_cap[can_fit]) / np.max(bins_remain_cap)
        fill_penalty = np.abs(current_fill - 0.5) # Closer to 0.5 is better
        priorities[can_fit] += (1 - fill_penalty)

        # Additional bonus for bins that are close to full *after* placing the item (but not overfull) to encourage complete filling
        future_fill = (np.max(bins_remain_cap) - remaining_after_fit) / np.max(bins_remain_cap)
        fullness_bonus = np.where((future_fill > 0.7) & (future_fill <= 1.0), 0.5, 0.0)
        priorities[can_fit] += fullness_bonus
    else:
        # If no bin can fit, prioritize bins with larger remaining capacity (to minimize number of needed bins)
        priorities = bins_remain_cap / np.max(bins_remain_cap)
        
    return priorities
```
