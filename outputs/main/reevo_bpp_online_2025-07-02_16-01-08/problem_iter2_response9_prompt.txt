{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First-Fit Decreasing heuristic inspired component: Favor bins that can fit the item.\n    can_fit = bins_remain_cap >= item\n    priorities[can_fit] += 1  # Give a base priority to bins that can fit.\n\n    # Remaining Capacity Based: Higher remaining capacity, lower priority to balance bin usage.\n    priorities[can_fit] -= (bins_remain_cap[can_fit] - item) / np.max(bins_remain_cap)  # Normalize to avoid dominance\n\n    # Avoidance of nearly full bins component: Discourage bins with very small remaining capacity, which may cause fragmentation\n    nearly_full = (bins_remain_cap > 0) & (bins_remain_cap < item + 0.1) # avoid floats==0, avoid very small gaps, account for float inaccuracy (epsilon 0.1)\n    priorities[nearly_full] -= 0.5\n\n    # Bins that can't fit should get the lowest possible score, so they aren't considered at all\n    priorities[~can_fit] = -np.inf\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First-Fit-Decreasing heuristic adaptation: prioritize bins that can fit the item well\n    fit_indices = bins_remain_cap >= item\n    priorities[fit_indices] = (bins_remain_cap[fit_indices] - item) / bins_remain_cap[fit_indices]  # Remaining capacity ratio\n\n    # Prioritize bins where the item almost fills it. The nearer to 1, the higher the score\n    priorities[fit_indices] = np.where(bins_remain_cap[fit_indices] > 0, 1 - (bins_remain_cap[fit_indices] - item)/bins_remain_cap[fit_indices], 0)\n\n    # If the item can't fit in any bin, penalize\n    if not np.any(fit_indices):\n        priorities = np.full_like(bins_remain_cap, -1.0)\n        # find the bin with maximum remaining capacity and give it a small advantage\n        max_cap_idx = np.argmax(bins_remain_cap)\n        priorities[max_cap_idx] = -0.9 # slightly better than other infeasible bin\n    else:\n         #Scale other priorities\n         priorities[fit_indices] *= 10 # Increase the contribution\n\n    return priorities\n\n[Reflection]\nPrioritize tight fits using ratio-based metrics. Scale priorities and handle infeasibility gracefully, favoring largest remaining capacity.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}