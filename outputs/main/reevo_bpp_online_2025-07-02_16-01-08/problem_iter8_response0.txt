```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        # Remaining capacity after placing the item in each feasible bin.
        remaining_after_fit = bins_remain_cap[can_fit] - item
        
        # Normalized remaining capacity relative to the maximum bin capacity.
        normalized_remaining = remaining_after_fit / max_cap

        # Prioritize tight fits by minimizing normalized wasted space.  Invert to give higher scores to lower values.
        priorities[can_fit] = 1.0 - normalized_remaining

        # Perfect Fit Bonus: Give substantial bonus if item fits perfectly
        perfect_fit = (remaining_after_fit == 0)
        priorities[can_fit][perfect_fit] += 2.0

        # Near-Perfect Fit Bonus: Give slight bonus if item nearly perfectly fits
        near_perfect_fit = (remaining_after_fit > 0) & (remaining_after_fit <= 0.1 * max_cap)
        priorities[can_fit][near_perfect_fit] += 1.0

        # Fill Level Incentive: Encourage medium-full bins and discourage nearly empty.
        fill_level_before = (bins_remain_cap[can_fit]) / max_cap

        # Penalize bins that are too full after adding item, encouraging space
        overfull_penalty = (remaining_after_fit < 0.1 * max_cap)
        priorities[can_fit][overfull_penalty] -= 3.0 # Reduced Penalty

        # Penalize near empty bins, discourage sparsely filled bins
        empty_penalty = (fill_level_before > 0.9)
        priorities[can_fit][empty_penalty] -= 0.5

        # Adjust priority range, Ensure no negative scores
        priorities[priorities < 0] = 0

    else:
        # If no bin can fit, heavily penalize and open a new bin
        priorities = -10*np.ones_like(bins_remain_cap)
        # prioritize bins with larger remaining capacity (to minimize number of needed bins), making them slightly less undesirable.
        priorities[bins_remain_cap.argmax()] = -5 #Slightly better than others
        
    return priorities
```
