{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Give high priority to bins that can fit the item\n    fit_mask = bins_remain_cap >= item\n    priorities[fit_mask] += 1.0\n\n    # Prioritize bins with smaller remaining capacity after adding the item\n    remaining_capacity_after_fit = bins_remain_cap[fit_mask] - item\n    priorities[fit_mask] += 1.0 / (remaining_capacity_after_fit + 0.0001) #adding small number to avoid divide by zero.\n\n    # Slightly penalize bins that are almost full after adding the item, since it limits future placements.\n    almost_full_mask = (remaining_capacity_after_fit < (0.1 * np.max(bins_remain_cap))) & fit_mask[bins_remain_cap >= item]  # Correctly index with boolean mask\n    priorities[almost_full_mask] -= 0.2\n\n    #Give zero priority to bins where item can't fit\n    priorities[~fit_mask] = -1.0\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Feasibility Check: Give -inf priority to bins that cannot fit the item.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf\n    \n    # Priority for bins that can fit:\n    feasible_bins = ~infeasible_bins\n    if np.any(feasible_bins):\n        remaining_space = bins_remain_cap[feasible_bins] - item\n        \n        # 1. Smallest Waste First: Prefer bins that leave the smallest waste.  Scaled to be significant.\n        waste_priority = -remaining_space  # Smaller waste is better\n        \n        # 2. Fill Level Preference:  Prefer bins that are already somewhat full, but not too full.\n        fill_level = 1 - (bins_remain_cap[feasible_bins] / bins_remain_cap[feasible_bins].max())\n        fill_priority = fill_level # Slightly full preferred\n\n        # 3. Avoid very empty bins to promote consolidation, avoid fragmentation\n        empty_penalty = np.where(bins_remain_cap[feasible_bins] == bins_remain_cap[feasible_bins].max(), -10, 0) #heavily penalize filling an empty bin unless all other are full\n\n        priorities[feasible_bins] = waste_priority + fill_priority + empty_penalty\n\n    return priorities\n\n[Reflection]\nPrioritize feasibility. Directly optimize for minimal waste and fragmentation. Dynamically scale priorities based on bin states.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}