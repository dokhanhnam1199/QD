```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give high priority to bins that can accommodate the item
    # but have minimal remaining capacity *after* placing the item.
    # This helps to fill bins as much as possible.

    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        remaining_after_fit = bins_remain_cap[can_fit] - item
        priorities[can_fit] = 1.0 / (remaining_after_fit + 0.00001) # Avoid division by zero
        
        # Further prioritization: prioritize bins with remaining capacity closest to item size
        # This can help prevent creating many bins with small leftover space if possible.

        priorities[can_fit] += 1.0 / np.abs(bins_remain_cap[can_fit] - item + 0.00001)


    # If no bins can fit, prioritize the bin with largest capacity.
    else:
      priorities = bins_remain_cap
      
    return priorities
```
