```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        remaining_after_fit = bins_remain_cap[can_fit] - item

        # Normalized remaining capacity after fit (tighter fit is better)
        normalized_remaining = remaining_after_fit / bin_capacity
        priorities[can_fit] = 1.0 - normalized_remaining

        # Dynamic scaling based on bin fill ratio
        fill_ratio = (bins_remain_cap[can_fit] - remaining_after_fit) / bin_capacity

        # Bonus for fill ratio within a good range (e.g., 0.5 to 0.9)
        bonus = np.where((fill_ratio >= 0.5) & (fill_ratio <= 0.9), 0.5, 0.0)
        priorities[can_fit] += bonus

        # Penalize bins that will become nearly full after placing the item.
        near_full_penalty = np.where(fill_ratio > 0.9, -0.75, 0.0)  # Significant penalty
        priorities[can_fit] += near_full_penalty

    else:
        # If no bins can fit, prioritize the bin with the largest remaining capacity to minimize waste
        priorities = bins_remain_cap / bin_capacity  # Normalize to give preference

    return priorities
```
