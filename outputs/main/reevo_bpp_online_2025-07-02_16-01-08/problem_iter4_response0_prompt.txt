{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Feasibility Check: Give -inf priority to bins that cannot fit the item.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf\n    \n    # Priority for bins that can fit:\n    feasible_bins = ~infeasible_bins\n    if np.any(feasible_bins):\n        remaining_space = bins_remain_cap[feasible_bins] - item\n        \n        # 1. Smallest Waste First: Prefer bins that leave the smallest waste. Scaled to be significant.\n        waste_priority = -remaining_space  # Smaller waste is better\n        waste_priority = waste_priority / bins_remain_cap.max() # Normalize\n        waste_priority *= 5 #Scale up\n\n        # 2. Fill Level Preference: Prefer bins that are already somewhat full, but not too full.\n        fill_level = 1 - (bins_remain_cap[feasible_bins] / bins_remain_cap.max())\n        fill_priority = fill_level  # Slightly full preferred\n        #Heavily penalize too full bins\n        too_full = remaining_space < 0.1\n        fill_priority[too_full] -= 2\n        \n        # 3. Avoid very empty bins to promote consolidation, avoid fragmentation\n        empty_penalty = np.where(bins_remain_cap[feasible_bins] == bins_remain_cap.max(), -1, 0)  # heavily penalize filling an empty bin unless all other are full\n\n        priorities[feasible_bins] = waste_priority + fill_priority + empty_penalty\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Very high priority if the item fits perfectly.\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    priorities[perfect_fit] = 1000.0  # Give very high priority to perfect fits.\n\n    # High priority if the item fits\n    fits = (bins_remain_cap >= item)\n    if np.any(fits):\n        wasted_space = bins_remain_cap[fits] - item\n        #Prioritize bins where we waste the least space; invert wasted space to get a positive priority. Add a constant to ensure it is positive.\n        priorities[fits] = 100.0 - wasted_space\n\n\n    # Give a negative priority (discourage) bins that are too full (less than the item size)\n    no_fit = (bins_remain_cap < item)\n    priorities[no_fit] = -1000.0  # Discourage no-fit bins heavily.\n\n    return priorities\n\n[Reflection]\nPrioritize perfect fits and minimize wasted space. Heavily penalize infeasible bins. Simple scaling works better.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}