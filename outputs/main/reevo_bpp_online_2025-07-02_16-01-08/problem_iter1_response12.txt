```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing heuristic inspired component: Favor bins that can fit the item.
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1  # Give a base priority to bins that can fit.

    # Remaining Capacity Based: Higher remaining capacity, lower priority to balance bin usage.
    priorities[can_fit] -= (bins_remain_cap[can_fit] - item) / np.max(bins_remain_cap)  # Normalize to avoid dominance

    # Avoidance of nearly full bins component: Discourage bins with very small remaining capacity, which may cause fragmentation
    nearly_full = (bins_remain_cap > 0) & (bins_remain_cap < item + 0.1) # avoid floats==0, avoid very small gaps, account for float inaccuracy (epsilon 0.1)
    priorities[nearly_full] -= 0.5

    # Bins that can't fit should get the lowest possible score, so they aren't considered at all
    priorities[~can_fit] = -np.inf

    return priorities
```
