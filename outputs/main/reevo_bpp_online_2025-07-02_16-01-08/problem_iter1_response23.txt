```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            waste = cap - item
            # Prioritize bins with smaller waste after placing item (First-Fit Decreasing like)
            priorities[i] = 1 / (waste + 0.00001)  #Adding small value to avoid dividing by zero

            # Additional considerations for prioritizing fuller bins
            fullness = 1 - (cap / 1.0) # Assuming bin capacity is 1.0.
            priorities[i] += fullness * 0.5  # give slight preference to fuller bins

            # Penalize almost full bins to avoid extreme waste
            if waste < 0.1:
                priorities[i] *= 0.8
        else:
            priorities[i] = -np.inf  # cannot add to bin

    return priorities
```
