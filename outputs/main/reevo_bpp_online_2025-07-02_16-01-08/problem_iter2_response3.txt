```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Disqualify bins that cannot fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf  # Mark infeasible bins with negative infinity

    # 2. Prioritize feasible bins based on remaining capacity
    if np.any(feasible_bins):
        remaining_capacity = bins_remain_cap[feasible_bins] - item

        # Base priority: Inverse of remaining capacity (Best-Fit principle)
        priorities[feasible_bins] = 1.0 / (remaining_capacity + 1e-9)

        # 3. Reward near-full bins
        near_full_threshold = 0.1  # Adjust as needed
        near_full_bins = remaining_capacity <= near_full_threshold
        priorities[feasible_bins][near_full_bins] *= 2.0  # Double the priority

        # 4. Penalize near-empty bins
        near_empty_threshold = 0.9  # Adjust as needed
        near_empty_bins = remaining_capacity > near_empty_threshold
        priorities[feasible_bins][near_empty_bins] /= 2.0  # Halve the priority

    return priorities
```
