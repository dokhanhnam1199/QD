{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility check: Assign a very low priority to bins that cannot fit the item.\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf\n\n    # Score based on remaining capacity after placing the item\n    feasible_mask = ~infeasible_mask\n    remaining_capacity = bins_remain_cap[feasible_mask] - item\n    \n    # Higher priority to bins where remaining capacity is small, but not too small\n    # to avoid creating very fragmented bins\n    priorities[feasible_mask] = np.exp(-np.abs(remaining_capacity - item/2)) \n    \n    # Add a bonus for almost full bins (to prioritize filling them up)\n    almost_full_mask = (bins_remain_cap >= item) & (bins_remain_cap <= item * 1.1)  #tolerate 10% overhead\n    priorities[almost_full_mask] += 1.0 #give significant boost\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # First Fit Decreasing heuristic idea\n    # High priority for bins that can fit the item closely\n    \n    # Give a high priority to bins that have enough space to fit\n    fit_indices = bins_remain_cap >= item\n    \n    if np.any(fit_indices):\n        priorities[fit_indices] = (bins_remain_cap[fit_indices] - item)  # Remaining space after placing item\n        priorities[fit_indices] = 1 / (1e-9 + priorities[fit_indices]) # Inverse of the remaining space\n    else:\n        # If no bin can fit, penalize the bins by negative priority (try next fit after bins are filled).\n        priorities[:] = -1.0\n        \n\n    return priorities\n\n[Reflection]\nFocus on remaining space minimization (first-fit decreasing idea) and avoid complex scoring functions.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}