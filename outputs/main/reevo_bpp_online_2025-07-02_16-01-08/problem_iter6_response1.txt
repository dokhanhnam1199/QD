```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        # Normalized remaining capacity after fit, higher is better.
        remaining_after_fit = bins_remain_cap[can_fit] - item
        normalized_remaining = remaining_after_fit / np.max(bins_remain_cap) 

        # Prioritize bins that result in a tighter fit (lower normalized remaining capacity)
        priorities[can_fit] = 1.0 - normalized_remaining

        # Add a bonus for bins that are already relatively full before the item is added.
        # This encourages filling up existing bins before opening new ones. Avoid bins near full or near empty.
        fill_level = (np.max(bins_remain_cap) - bins_remain_cap[can_fit]) / np.max(bins_remain_cap)

        # Prioritize bins with a medium fill level (e.g., 0.2 to 0.8). Avoid overly empty or full bins
        fill_penalty = np.abs(fill_level - 0.5)
        priorities[can_fit] = priorities[can_fit] + (1 - fill_penalty) * 0.5 #Scale the bonus
    else:
        # If no bin can fit, prioritize bins with larger remaining capacity (to minimize number of needed bins)
        priorities = bins_remain_cap / np.max(bins_remain_cap)
        
    return priorities
```
