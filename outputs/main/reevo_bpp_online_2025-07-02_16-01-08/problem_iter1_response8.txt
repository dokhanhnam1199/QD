```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Assign a very low priority to bins that cannot fit the item.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # Score based on remaining capacity after placing the item
    feasible_mask = ~infeasible_mask
    remaining_capacity = bins_remain_cap[feasible_mask] - item
    
    # Higher priority to bins where remaining capacity is small, but not too small
    # to avoid creating very fragmented bins
    priorities[feasible_mask] = np.exp(-np.abs(remaining_capacity - item/2)) 
    
    # Add a bonus for almost full bins (to prioritize filling them up)
    almost_full_mask = (bins_remain_cap >= item) & (bins_remain_cap <= item * 1.1)  #tolerate 10% overhead
    priorities[almost_full_mask] += 1.0 #give significant boost

    return priorities
```
