{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Perfect/Near-Perfect Fit: Highest Priority\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    almost_fit = (bins_remain_cap - item >= 0) & (bins_remain_cap - item <= 0.05)\n\n    priorities[perfect_fit] = 10000\n    priorities[almost_fit] = 5000\n\n    # 2. Feasibility Check\n    feasible_bins = bins_remain_cap >= item\n    infeasible_bins = ~feasible_bins\n    priorities[infeasible_bins] = -np.inf  # Ensure infeasible bins are never selected\n\n    # 3. Remaining Capacity Consideration for Feasible Bins\n    feasible_indices = np.where(feasible_bins)[0]\n    if len(feasible_indices) > 0:\n        remaining_space = bins_remain_cap[feasible_bins] - item\n        mean_remaining_cap = np.mean(bins_remain_cap[feasible_bins]) if len(bins_remain_cap[feasible_bins]) > 0 else 0 # Avoid errors\n\n        # Prioritize bins with remaining space close to the mean, but not perfect fits.\n        # Normalized priority: Higher priority for bins closer to the mean remaining capacity\n        valid_bins = feasible_bins & ~perfect_fit & ~almost_fit #exclude perfect/almost fits from this calc\n        space_diff = np.abs(remaining_space[valid_bins[feasible_bins]] - mean_remaining_cap) #compute diff vs the mean\n        max_diff = np.max(np.abs(bins_remain_cap[feasible_bins] - mean_remaining_cap)) if len(bins_remain_cap[feasible_bins]) > 0 else 1 #normalise by max diff, avoid divide by 0\n\n        priorities[valid_bins] = 900 - (space_diff / max_diff) * 800 #scale from 100 to 900\n\n\n        #4. Give minimal priority to remaining feasible bins.\n        other_feasible = feasible_bins & ~perfect_fit & ~almost_fit & ~valid_bins\n        priorities[other_feasible] = 100\n    \n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Infeasible bins get the lowest priority.\n    can_fit = bins_remain_cap >= item\n    priorities[~can_fit] = -np.inf\n\n    # 2. Encourage packing into feasible bins (Base priority boost)\n    priorities[can_fit] += 10.0\n\n    # 3. Balance Remaining Capacity:  Prioritize bins with smaller *normalized* remaining space, but avoid nearly full bins.\n    remaining_space = bins_remain_cap - item\n    \n    # Avoid division by zero by adding a small epsilon value.\n    max_capacity = np.max(bins_remain_cap)\n    epsilon = 1e-6\n\n    normalized_remaining_space = np.zeros_like(bins_remain_cap, dtype=float)\n    normalized_remaining_space[can_fit] = remaining_space[can_fit] / (max_capacity + epsilon)\n\n    # Subtract normalized remaining space from priority.\n    priorities[can_fit] -= normalized_remaining_space[can_fit]\n\n    # 4. Penalize Near-Full Bins: Avoid bins that would become almost full.\n    nearly_full_threshold = 0.1 * max_capacity # Dynamic threshold based on max capacity\n    nearly_full = (remaining_space > 0) & (remaining_space <= nearly_full_threshold)\n    priorities[nearly_full] -= 5.0\n\n    # 5. Bonus for bins that are already somewhat full (but not nearly full). Encourages filling bins that have already been used.\n    already_full_threshold = 0.5 * max_capacity  # Example threshold, adjust as needed\n    already_full = can_fit & (bins_remain_cap < already_full_threshold)\n    priorities[already_full] += 2.0 # Smaller bonus\n\n    return priorities\n\n[Reflection]\nNormalization, dynamic thresholds, and balancing remaining capacity with small incentives improve bin packing.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}