```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)  # Assuming all bins have the same capacity

    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        # Remaining capacity after fit
        remaining_after_fit = bins_remain_cap[can_fit] - item
        
        # Prioritize Perfect fit
        perfect_fit = np.isclose(remaining_after_fit, 0)
        if np.any(perfect_fit):
            priorities[can_fit][perfect_fit] = 2.0 # Perfect fit gets highest priority
            return priorities

        # Prioritize near-perfect fits (small waste)
        near_perfect_fit = (remaining_after_fit / bin_capacity) <= 0.1  # Waste <= 10% of capacity
        priorities[can_fit][near_perfect_fit] = 1.5

        # Calculate fill levels, remaining ratios, and waste
        fill_level_before = (bin_capacity - bins_remain_cap[can_fit]) / bin_capacity
        waste_ratio = remaining_after_fit / bin_capacity
        
        # Base priority based on minimizing waste
        priorities[can_fit] += (1 - waste_ratio)
        
        # Dynamic fill level bonus
        fill_level_penalty = np.abs(fill_level_before - 0.5)  # Prefer bins around half full
        priorities[can_fit] += (1 - fill_level_penalty)

        # Adjust for fragmentation; penalize small remaining capacity without being zero.
        fragmentation_penalty = np.clip(1 / (remaining_after_fit + 0.0001), 0, 1) #Avoid zero division
        priorities[can_fit] -= fragmentation_penalty*0.2 #reduce a bit to not let it dominate


        # Normalize the priorities
        max_priority = np.max(priorities[can_fit])
        if max_priority > 0:
            priorities[can_fit] /= max_priority

    else:
        # If no bin can fit, prioritize bins with larger remaining capacity (to minimize number of needed bins).
        # Scale with total capacity for normalization.
        priorities = bins_remain_cap / bin_capacity
    
    return priorities
```
