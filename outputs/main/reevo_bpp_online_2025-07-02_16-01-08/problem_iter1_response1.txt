```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # First priority: Can the item fit?  If not, priority is -inf
    can_fit = item <= bins_remain_cap
    priorities[~can_fit] = -np.inf
    
    # Next, prioritize bins where the item fills a significant portion, but doesn't overfill.
    # Higher priority if the remaining space after placing the item is small, but not zero.
    
    remaining_space = bins_remain_cap - item
    
    # Avoid division by zero
    remaining_space[remaining_space <= 0] = np.inf  # Prioritize filling bins almost completely.
    
    # Prioritize using smaller bins, as long as item fits.
    priorities[can_fit] = (item / bins_remain_cap[can_fit]) + (1.0 / remaining_space[can_fit]) #Ratio of fill + inverse of the remaining space

    return priorities
```
