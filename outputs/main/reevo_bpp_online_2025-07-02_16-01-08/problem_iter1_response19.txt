```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: If the item doesn't fit, lowest priority
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # 2. Best Fit Criterion: Prioritize bins with smallest remaining capacity *after* packing the item
    #    This encourages filling bins as much as possible.
    feasible_mask = ~infeasible_mask
    remaining_after_pack = bins_remain_cap[feasible_mask] - item
    priorities[feasible_mask] = -np.abs(remaining_after_pack)  # Smaller absolute value = higher priority
    
    # 3. Tie-breaking (Slight Preference for bins that are already somewhat full):
    #    Add a small bonus based on the *original* fill level. This can help avoid creating many bins with tiny amounts of wasted space.  Important this is added *after* the main Best Fit.
    fill_levels = 1 - bins_remain_cap / np.max(bins_remain_cap) #Scale fill levels for consistent performance.
    priorities[feasible_mask] += 0.001 * fill_levels[feasible_mask] # Small influence to avoid dominating best fit
    
    # 4. Bonus for exact fit
    exact_fit_mask = bins_remain_cap == item
    priorities[exact_fit_mask] = 1000 #Huge boost for exact fit so this is always chosen

    return priorities
```
