{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    max_cap = np.max(bins_remain_cap)\n    \n    can_fit = bins_remain_cap >= item\n    \n    if np.any(can_fit):\n        # Remaining capacity after placing the item in each feasible bin.\n        remaining_after_fit = bins_remain_cap[can_fit] - item\n        \n        # Normalized remaining capacity relative to the maximum bin capacity.\n        normalized_remaining = remaining_after_fit / max_cap\n\n        # Prioritize tight fits by minimizing normalized wasted space.  Invert to give higher scores to lower values.\n        priorities[can_fit] = 1.0 - normalized_remaining\n\n        # Perfect Fit Bonus: Give substantial bonus if item fits perfectly\n        perfect_fit = (remaining_after_fit == 0)\n        priorities[can_fit][perfect_fit] += 2.0\n\n        # Near-Perfect Fit Bonus: Give slight bonus if item nearly perfectly fits\n        near_perfect_fit = (remaining_after_fit > 0) & (remaining_after_fit <= 0.1 * max_cap)\n        priorities[can_fit][near_perfect_fit] += 1.0\n\n        # Fill Level Incentive: Encourage medium-full bins and discourage nearly empty.\n        fill_level_before = (bins_remain_cap[can_fit]) / max_cap\n\n        # Penalize bins that are too full after adding item, encouraging space\n        overfull_penalty = (remaining_after_fit < 0.1 * max_cap)\n        priorities[can_fit][overfull_penalty] -= 3.0 # Reduced Penalty\n\n        # Penalize near empty bins, discourage sparsely filled bins\n        empty_penalty = (fill_level_before > 0.9)\n        priorities[can_fit][empty_penalty] -= 0.5\n\n        # Adjust priority range, Ensure no negative scores\n        priorities[priorities < 0] = 0\n\n    else:\n        # If no bin can fit, heavily penalize and open a new bin\n        priorities = -10*np.ones_like(bins_remain_cap)\n        # prioritize bins with larger remaining capacity (to minimize number of needed bins), making them slightly less undesirable.\n        priorities[bins_remain_cap.argmax()] = -5 #Slightly better than others\n        \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    can_fit = bins_remain_cap >= item\n\n    if np.any(can_fit):\n        # Remaining capacity after fit\n        remaining_after_fit = bins_remain_cap[can_fit] - item\n\n        # Normalized remaining capacity after fit (relative to the bin's capacity)\n        normalized_remaining = remaining_after_fit / np.max(bins_remain_cap)\n\n        # Prioritize perfect/near-perfect fits\n        perfect_fit_bonus = np.exp(-50 * normalized_remaining)  # High bonus when normalized_remaining is near zero. Adjusted exponent.\n\n        # Prioritize bins that result in a tighter fit (lower normalized remaining capacity)\n        priorities[can_fit] = 1.0 - normalized_remaining + perfect_fit_bonus\n\n        # Add a bonus for bins that are already relatively full before the item is added.\n        #  Avoid bins near full or near empty to avoid small wastes and over-filling.\n        fill_level = bins_remain_cap[can_fit] / np.max(bins_remain_cap)\n        \n        # Apply a sigmoid function to provide a smoother transition and fine-tune the fill level preference.\n        # Focus on the \"sweet spot\" around medium fill levels (0.4 to 0.8).\n        fill_preference = 1.0 / (1 + np.exp(-15 * (fill_level - 0.6))) # More aggressive sigmoid. Target fill 0.6\n        \n        priorities[can_fit] = priorities[can_fit] + fill_preference * 0.7  # Increased weight\n\n        #Slightly prioritize bins with bigger initial capacity\n        priorities[can_fit] = priorities[can_fit] + (bins_remain_cap[can_fit] / np.max(bins_remain_cap)) * 0.1\n\n    else:\n        # If no bin can fit, strongly penalize and slightly prefer bins with more capacity\n        priorities = -1e9 * np.ones_like(bins_remain_cap)  # Extremely negative priority\n        priorities[bins_remain_cap == np.max(bins_remain_cap)] = -1e8\n\n    return priorities\n\n[Reflection]\nPrioritize tight fits exponentially, favor medium-full bins with a sigmoid, and strongly penalize infeasible bins.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}