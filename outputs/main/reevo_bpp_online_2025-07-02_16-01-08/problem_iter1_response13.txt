```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Assign a very low priority to bins that can't fit the item.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf
    
    # 2. Remaining capacity after packing: Prioritize bins with smaller remaining capacity *after* packing the item, but only if they can fit it.
    feasible_mask = ~infeasible_mask
    remaining_capacity_after_packing = bins_remain_cap[feasible_mask] - item
    
    # Apply a function that penalizes larger remaining capacity while making it monotonically increase from zero.
    # One option is to use the negative of the remaining capacity. However, very small and close to zero capacities could produce too low priority. We offset by np.max to turn all negative into positive values.
    priorities[feasible_mask] = -remaining_capacity_after_packing + np.max(bins_remain_cap)

    # 3. Give bins a small bonus if the item fills them close to full
    filling_ratio = item / bins_remain_cap[feasible_mask]
    close_to_full_bonus = np.where(filling_ratio > 0.7, 10, 0) # Tunable parameter
    priorities[feasible_mask] = priorities[feasible_mask] + close_to_full_bonus
    
    # 4. A bonus for near-exact fit
    near_exact_fit_threshold = 0.1 * item  # If bin capacity within 10% of item size
    near_exact_fit_mask = (bins_remain_cap[feasible_mask] - item) <= near_exact_fit_threshold
    near_exact_fit_bonus = np.where(near_exact_fit_mask, 20, 0) # A higher bonus for very near-perfect fit
    priorities[feasible_mask] = priorities[feasible_mask] + near_exact_fit_bonus

    return priorities
```
