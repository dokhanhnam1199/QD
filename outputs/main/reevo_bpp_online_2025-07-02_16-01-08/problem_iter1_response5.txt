```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Disqualify bins that cannot fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # 2. Remaining Capacity: Prefer bins with enough space, but not too much
    # Penalize bins that would have too much or too little space left.
    remaining_after_fit = bins_remain_cap - item
    
    # Calculate a "waste" score.  Ideally, we want bins to be relatively full
    waste_penalty = np.abs(remaining_after_fit - np.mean(remaining_after_fit[remaining_after_fit >= 0])) #Prioritizes bins with the average leftover after packing the item

    # Calculate score based on how close the item fits
    fit_score = bins_remain_cap - item

    # 3. Combine Scores
    priorities[~infeasible_bins] = 1.0/(waste_penalty[~infeasible_bins] + 1e-9)  + fit_score[~infeasible_bins] # add a small value to avoid division by zero
    
    return priorities
```
