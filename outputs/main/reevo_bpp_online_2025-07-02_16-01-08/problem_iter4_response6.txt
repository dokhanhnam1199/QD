```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        remaining_after_fit = bins_remain_cap[can_fit] - item
        
        # Tighter fit relative to original remaining capacity
        normalized_remaining = remaining_after_fit / bins_remain_cap[can_fit]
        priorities[can_fit] = 1.0 - normalized_remaining  # Higher priority for tighter fits

        # Moderate fill level bonus (avoid near-empty or near-full bins)
        current_fill_level = (np.max(bins_remain_cap) - bins_remain_cap[can_fit]) / np.max(bins_remain_cap)
        fill_penalty = np.abs(current_fill_level - 0.5)  # Penalize deviations from 0.5 fill level
        priorities[can_fit] += (1 - fill_penalty) * 0.5 # Scale the bonus

        # Bonus for bins with capacity closest to item size
        proximity = 1.0 / (np.abs(bins_remain_cap[can_fit] - item) + 0.00001)
        priorities[can_fit] += proximity * 0.2 # Scale the bonus
    else:
        # If no bin fits, prioritize the fullest bin, so remaining_capacity is smallest.
        priorities = (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap)
        
    return priorities
```
