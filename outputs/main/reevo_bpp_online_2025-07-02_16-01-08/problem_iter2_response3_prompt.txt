{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility: Disqualify bins that cannot fit the item\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf\n\n    # 2. Remaining Capacity: Prefer bins with enough space, but not too much\n    # Penalize bins that would have too much or too little space left.\n    remaining_after_fit = bins_remain_cap - item\n    \n    # Calculate a \"waste\" score.  Ideally, we want bins to be relatively full\n    waste_penalty = np.abs(remaining_after_fit - np.mean(remaining_after_fit[remaining_after_fit >= 0])) #Prioritizes bins with the average leftover after packing the item\n\n    # Calculate score based on how close the item fits\n    fit_score = bins_remain_cap - item\n\n    # 3. Combine Scores\n    priorities[~infeasible_bins] = 1.0/(waste_penalty[~infeasible_bins] + 1e-9)  + fit_score[~infeasible_bins] # add a small value to avoid division by zero\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # First, filter out bins that cannot accommodate the item\n    valid_bins = bins_remain_cap >= item\n    \n    if not np.any(valid_bins):\n        # If no bin can accommodate the item, return low priority for all bins.\n        return priorities\n\n    # Calculate remaining capacity after placing the item\n    remaining_capacity = bins_remain_cap[valid_bins] - item\n\n    # Prioritize bins based on remaining capacity:\n    # 1. Bins with smaller remaining capacity after placement get higher priority \n    # (First-Fit Decreasing/Best-Fit approximation).\n    priorities[valid_bins] = 1.0 / (remaining_capacity + 1e-9)  # Adding a small constant to prevent division by zero\n\n    # 2. Give a bonus if the remaining capacity is very small\n    almost_full = remaining_capacity <= 0.1  # Adjust threshold (0.1) if needed\n    priorities[valid_bins][almost_full] *= 2.0 # Double the priority\n\n    # 3. Give a penalty if the bin will be very empty after placing the item\n    very_empty = remaining_capacity > 0.9 # Adjust threshold (0.9) if needed\n    priorities[valid_bins][very_empty] /= 2.0  # Reduce the priority\n\n    return priorities\n\n[Reflection]\nFocus on feasibility, remaining capacity, and rewarding near-full bins while penalizing near-empty ones.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}