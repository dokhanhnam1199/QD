```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        remaining_after_fit = bins_remain_cap[can_fit] - item
        
        # Normalized remaining capacity:  closer to 0 is better (tighter fit).
        normalized_remaining = remaining_after_fit / np.max(bins_remain_cap)

        # Give higher priority to tighter fits.  Invert and offset to ensure positive values.
        priorities[can_fit] = 1.0 - normalized_remaining

        # Scale priority based on current fill level.  Avoid near-full or near-empty bins.
        fill_level = (np.max(bins_remain_cap) - bins_remain_cap[can_fit]) / np.max(bins_remain_cap)
        
        # Penalize bins that are already almost full or almost empty.
        fill_penalty = np.exp(-((fill_level - 0.5)**2) / 0.08)  # Gaussian centered at 0.5
        priorities[can_fit] *= fill_penalty

        # Prioritize bins with remaining capacity closest to item size
        proximity_score = 1.0 / (np.abs(bins_remain_cap[can_fit] - item) / np.max(bins_remain_cap) + 0.00001)

        priorities[can_fit] += proximity_score
        
    else:
        # If no bins can fit, prioritize the bin with largest remaining capacity.
        # This might lead to opening a new bin later.  Divide by the item size to
        # normalize based on the item we're trying to place.
        priorities = bins_remain_cap / (item + 0.00001)

    return priorities
```
