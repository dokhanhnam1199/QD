{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    can_fit = bins_remain_cap >= item\n    \n    if np.any(can_fit):\n        # Remaining capacity after fit\n        remaining_after_fit = bins_remain_cap[can_fit] - item\n\n        # Normalized remaining capacity after fit\n        normalized_remaining = remaining_after_fit / np.max(bins_remain_cap)\n        \n        # Prioritize bins that result in a tighter fit (lower normalized remaining capacity).\n        priorities[can_fit] = 1.0 - normalized_remaining\n\n        # Perfect fit bonus: Greatly prioritize perfect fits.\n        perfect_fit = (remaining_after_fit == 0)\n        if np.any(perfect_fit):\n            priorities[can_fit][perfect_fit] += 10  # Large bonus\n\n        # Near-perfect fit bonus\n        near_perfect_fit = (remaining_after_fit > 0) & (remaining_after_fit <= 0.1 * np.max(bins_remain_cap))  #Up to 10% of capacity remaining\n        if np.any(near_perfect_fit):\n            priorities[can_fit][near_perfect_fit] += 5\n\n        # Fullness Bonus (avoid over-filling)\n        current_fill_level = (bins_remain_cap / np.max(bins_remain_cap))[can_fit]\n        fullness_penalty = np.abs(current_fill_level - 0.5)\n        priorities[can_fit] += (1-fullness_penalty)\n\n\n    else:\n        # If no bin can fit, strongly penalize by assigning a very low priority.\n        priorities = -1e9 * np.ones_like(bins_remain_cap)\n\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Very high priority if the item fits perfectly.\n    perfect_fit = np.isclose(bins_remain_cap, item)\n    priorities[perfect_fit] = 1000.0  # Give very high priority to perfect fits.\n\n    # High priority if the item fits\n    fits = (bins_remain_cap >= item)\n    if np.any(fits):\n        wasted_space = bins_remain_cap[fits] - item\n        #Prioritize bins where we waste the least space; invert wasted space to get a positive priority. \n        #Scale wasted space for better differentiation.\n        priorities[fits] = 500.0 - (wasted_space * 10) # Increased scaling\n\n    # Give a negative priority (discourage) bins that are too full (less than the item size)\n    no_fit = (bins_remain_cap < item)\n    priorities[no_fit] = -1000.0  # Discourage no-fit bins heavily.\n\n    return priorities\n\n[Reflection]\nPrioritize perfect fits and minimize wasted space. Heavily penalize bins that cannot fit the item.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}