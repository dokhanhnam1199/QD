```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First Fit Decreasing heuristic idea
    # High priority for bins that can fit the item closely
    
    # Give a high priority to bins that have enough space to fit
    fit_indices = bins_remain_cap >= item
    
    if np.any(fit_indices):
        priorities[fit_indices] = (bins_remain_cap[fit_indices] - item)  # Remaining space after placing item
        priorities[fit_indices] = 1 / (1e-9 + priorities[fit_indices]) # Inverse of the remaining space
    else:
        # If no bin can fit, penalize the bins by negative priority (try next fit after bins are filled).
        priorities[:] = -1.0
        

    return priorities
```
