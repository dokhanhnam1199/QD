```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        # Remaining capacity after fit
        remaining_after_fit = bins_remain_cap[can_fit] - item
        
        # Normalize remaining capacity using the initial capacity of the bin
        normalized_remaining = remaining_after_fit / (bins_remain_cap[can_fit] + item - remaining_after_fit) # original bin capacity

        # Prioritize bins that result in a tighter fit (lower normalized remaining capacity)
        priorities[can_fit] = 1.0 - normalized_remaining

        # Perfect Fit Bonus: Give very high priority to bins where the item fits perfectly.
        perfect_fit = (remaining_after_fit == 0)
        priorities[can_fit][perfect_fit] += 10  # substracting is not suitable when combined with normalization
        
        # Near Perfect Fit Bonus: Give high priority to bins where the item nearly fits perfectly.
        near_perfect_fit = (remaining_after_fit > 0) & (remaining_after_fit <= 0.1 * (bins_remain_cap[can_fit] + item - remaining_after_fit))
        priorities[can_fit][near_perfect_fit] += 5

        # Encourage medium fullness, but penalize near empty bins less
        fill_level_before = bins_remain_cap[can_fit] / (bins_remain_cap[can_fit] + item - remaining_after_fit) # original bin capacity
        
        # Penalty for extreme fill levels before packing. Favor medium-full
        fill_penalty = np.abs(fill_level_before - 0.75) # Target fullness of 75%
        priorities[can_fit] -= fill_penalty

    else:
        # If no bin can fit, assign a very low priority (effectively preventing placement, which is bad)
        priorities[:] = -1000 # large negative number to effectively block this bin
        
    return priorities
```
