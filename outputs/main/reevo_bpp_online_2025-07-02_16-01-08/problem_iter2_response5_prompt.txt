{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Rule 1: Bins that can accommodate the item get higher priority.\n    can_fit = bins_remain_cap >= item\n    priorities[can_fit] += 1.0\n\n    # Rule 2: Favor bins where the item fills a large portion of the remaining capacity.\n    fill_ratios = item / bins_remain_cap\n    fill_ratios[~can_fit] = 0  # Avoid division by zero and prioritize only valid bins\n    priorities += fill_ratios * can_fit #Only consider fill ratios of bins where item can fit\n   \n    # Rule 3: Reduce priority if the bin is getting too full and a small remaining space would be left\n    small_space_mask = (bins_remain_cap - item) < 0.1\n    priorities[can_fit & small_space_mask] -= 0.5 # Reduce priority slightly if a bin will have very little space left\n    \n    # Rule 4: If the bin is empty (equal to initial bin size), boost priority to encourage first-fit type behaviour.\n    empty_bin_mask = bins_remain_cap == bins_remain_cap.max()\n    priorities[empty_bin_mask & can_fit] += 0.75 #Higher priority boost for empty bins where the item can fit.\n\n    # Rule 5: If no bins can accomodate the item return bins with most space.\n    if not np.any(can_fit):\n        priorities = bins_remain_cap/bins_remain_cap.max()\n        \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First-Fit Decreasing heuristic inspired component: Favor bins that can fit the item.\n    can_fit = bins_remain_cap >= item\n    priorities[can_fit] += 1  # Give a base priority to bins that can fit.\n\n    # Remaining Capacity Based: Higher remaining capacity, lower priority to balance bin usage.\n    priorities[can_fit] -= (bins_remain_cap[can_fit] - item) / np.max(bins_remain_cap)  # Normalize to avoid dominance\n\n    # Avoidance of nearly full bins component: Discourage bins with very small remaining capacity, which may cause fragmentation\n    nearly_full = (bins_remain_cap > 0) & (bins_remain_cap < item + 0.1) # avoid floats==0, avoid very small gaps, account for float inaccuracy (epsilon 0.1)\n    priorities[nearly_full] -= 0.5\n\n    # Bins that can't fit should get the lowest possible score, so they aren't considered at all\n    priorities[~can_fit] = -np.inf\n\n    return priorities\n\n[Reflection]\nPrioritize fit, balance remaining capacity, avoid near-full bins, and eliminate infeasible options. Normalization is key.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}