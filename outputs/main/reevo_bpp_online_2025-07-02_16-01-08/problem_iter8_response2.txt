```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        # Normalized remaining capacity after fit
        remaining_after_fit = bins_remain_cap[can_fit] - item
        normalized_remaining = remaining_after_fit / bins_remain_cap[can_fit]

        # Prioritize bins that result in a tighter fit (lower normalized remaining capacity)
        priorities[can_fit] = 1.0 - normalized_remaining

        # Add a bonus for bins that are already relatively full before the item is added.
        # This encourages filling up existing bins before opening new ones. Avoid bins near full or near empty.
        fill_level = (bins_remain_cap[can_fit] / np.max(bins_remain_cap))
        # Prioritize bins with a medium fill level (e.g., 0.2 to 0.8). Avoid overly empty or full bins
        fill_penalty = np.abs(fill_level - 0.5)
        priorities[can_fit] = priorities[can_fit] + (0.5 - fill_penalty) # Scale fill penalty

        # Add a small bonus to bins that are not too full and not too empty.  This may help avoid creating
        # bins that are difficult to fill later.
        intermediate_fill_bonus = np.exp(-((fill_level - 0.5)**2) / (2 * 0.15**2))
        priorities[can_fit] = priorities[can_fit] + 0.1 * intermediate_fill_bonus

    else:
        # If no bin can fit, prioritize bins with larger remaining capacity (to minimize number of needed bins)
        # Use a different scaling approach to avoid overly small values
        priorities = bins_remain_cap / np.max(bins_remain_cap) # Normalize to [0, 1]
        priorities = priorities * 0.2  # Reduce the magnitude to be small

    return priorities
```
