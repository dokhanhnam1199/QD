```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    can_fit = bins_remain_cap >= item
    
    if np.any(can_fit):
        remaining_after_fit = bins_remain_cap[can_fit] - item
        
        # Prioritize tighter fits: normalize remaining capacity *after* placing the item
        normalized_remaining = remaining_after_fit / (bins_remain_cap[can_fit] + 1e-9)  # Avoid division by zero

        priorities[can_fit] = 1.0 - normalized_remaining
        
        # Bonus for bins that are already partially full.
        current_fill = (bins_remain_cap[can_fit] - remaining_after_fit) / (np.max(bins_remain_cap) + 1e-9) #Use max_cap for current fill, avoid division by zero

        #Give a larger bonus to bins between 0.3 and 0.7 fill range
        fill_bonus = np.where((current_fill >= 0.3) & (current_fill <= 0.7), 0.5, 0.0) 
        priorities[can_fit] += fill_bonus

    else:
        # If no bin can fit, prioritize bins with larger remaining capacity (to minimize number of needed bins)
        priorities = bins_remain_cap / (np.max(bins_remain_cap) + 1e-9) # Avoid division by zero
        
    return priorities
```
