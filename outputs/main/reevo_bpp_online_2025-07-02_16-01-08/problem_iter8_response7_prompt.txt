{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n    \n    if np.any(can_fit):\n        # Normalized remaining capacity after fit, prioritize tighter fits\n        remaining_after_fit = bins_remain_cap[can_fit] - item\n        normalized_remaining = remaining_after_fit / np.max(bins_remain_cap)\n        priorities[can_fit] = 1.0 - normalized_remaining\n        \n        # Encourage medium fill levels before placing item.\n        fill_level_before = bins_remain_cap[can_fit] / np.max(bins_remain_cap)\n        fill_penalty = np.abs(fill_level_before - 0.5) # Prefer levels closer to 0.5\n        priorities[can_fit] += (1.0 - fill_penalty)\n\n        # Small bonus for already used bins\n        already_used = bins_remain_cap < np.max(bins_remain_cap)\n        priorities[already_used & can_fit] += 0.5 #Slightly prefer existing bins if feasible\n\n    else:\n        # If no bin can fit, prioritize bins with larger remaining capacity.\n        priorities = bins_remain_cap / np.max(bins_remain_cap)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    can_fit = bins_remain_cap >= item\n    \n    if np.any(can_fit):\n        # Remaining capacity AFTER placing item\n        remaining_after_fit = bins_remain_cap[can_fit] - item\n        \n        # Normalized remaining capacity AFTER placing item. Crucial for measuring waste relative to the bin.\n        normalized_remaining = remaining_after_fit / np.max(bins_remain_cap) # use the original bin capacity\n\n        # Prioritize near-perfect fits. A perfect fit has normalized_remaining close to 0.\n        perfect_fit_bonus = np.exp(-10 * normalized_remaining) # Exponential decay, peaks at 0 remaining\n        priorities[can_fit] += 2 * perfect_fit_bonus\n\n        # Discourage high waste.  Penalize bins that leave a large proportion empty.  Use a quadratic penalty.\n        waste_penalty = normalized_remaining**2 # quadratic penalty, 0 at no waste, 1 at full waste.\n        priorities[can_fit] += -waste_penalty\n\n        #Encourage medium-full bins before placement. Normalize bins_remain_cap before placement.\n        normalized_before = bins_remain_cap[can_fit] / np.max(bins_remain_cap)\n        medium_full_bonus = np.exp(-5 * (normalized_before - 0.6)**2)\n        priorities[can_fit] += medium_full_bonus # Encourage bins with remaining capacity around 0.6\n\n    else:\n        # If item does not fit, strongly penalize the placement by assigning a very low priority\n        priorities = -1e9 * np.ones_like(bins_remain_cap)\n\n    return priorities\n\n[Reflection]\nFocus on waste minimization (post-fit), near-perfect fits, and penalizing infeasible placements drastically.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}