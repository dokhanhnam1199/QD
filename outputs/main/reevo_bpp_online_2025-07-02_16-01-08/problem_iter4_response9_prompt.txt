{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # 1. Feasibility: Eliminate bins that cannot fit the item.\n    infeasible_mask = bins_remain_cap < item\n    priorities[infeasible_mask] = -np.inf  # Very low priority\n    \n    # 2.  Fill-Rate Priority (Higher fill rate is better, but not perfect fit).\n    fill_rates = item / bins_remain_cap\n    fill_rates[infeasible_mask] = 0  # Zero fill rate for infeasible bins.\n    \n    priorities = fill_rates # Original priority with the fill rate\n    \n    #3. Best Fit bonus/penalty - Prefer bins where the remaining space is small (but feasible).\n    # The closer to zero, the better the fit. Subtracting this value encourages smaller remaining space.\n    best_fit_penalty = np.where(bins_remain_cap >= item, (bins_remain_cap - item) / np.max(bins_remain_cap), 0)\n    priorities -= best_fit_penalty * 0.5 # Scale down the penalty\n\n    # 4. Small Remaining Capacity bonus (try to use bins with less space left).  Prioritizes bins that are already somewhat full.\n    remaining_cap_normalized = bins_remain_cap / np.max(bins_remain_cap)\n    priorities += (1 - remaining_cap_normalized) * 0.1 # Weigh it less to avoid extreme preference.\n\n    # 5. Empty Bin Bonus (First-Fit type encouragement).  Only applied if the item *can* fit.\n    empty_bin_mask = bins_remain_cap == bins_remain_cap.max()\n    priorities[empty_bin_mask & ~infeasible_mask] += 0.2 # Small bonus to encourage use of empty bins.\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility Check: Give -inf priority to bins that cannot fit the item.\n    infeasible_bins = bins_remain_cap < item\n    priorities[infeasible_bins] = -np.inf\n\n    # Priority for bins that can fit:\n    feasible_bins = ~infeasible_bins\n    if np.any(feasible_bins):\n        remaining_space = bins_remain_cap[feasible_bins] - item\n\n        # 1. Smallest Waste First: Prefer bins that leave the smallest waste. Scaled to be significant.\n        waste_priority = -remaining_space\n\n        # 2. Fill Level Preference: Prefer bins that are already somewhat full, but not too full.\n        # Normalize remaining capacity to a 0-1 scale (0 = full, 1 = empty)\n        normalized_remaining = bins_remain_cap[feasible_bins] / np.max(bins_remain_cap)\n        fill_level_priority = 1 - normalized_remaining  # Higher = more full\n\n        # 3. Fragmentation avoidance: Penalize bins that, after the item is added,\n        #    have remaining capacity larger than the current item. Avoid small items blocking larger ones later\n        frag_penalty = np.where(remaining_space > item, -5, 0)  # Reduced penalty\n\n        # 4. Empty Bin Avoidance: Heavily penalize filling an empty bin unless all other bins are full.\n        empty_penalty = np.where(bins_remain_cap[feasible_bins] == np.max(bins_remain_cap), -10, 0)\n\n        priorities[feasible_bins] = waste_priority + fill_level_priority + frag_penalty + empty_penalty\n\n    return priorities\n\n[Reflection]\nPrioritize waste, fill-level; penalize fragmentation and empty bins. Explicit feasibility checks are crucial.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}