```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # 1. Feasibility: Eliminate bins that cannot fit the item.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf  # Very low priority
    
    # 2.  Fill-Rate Priority (Higher fill rate is better, but not perfect fit).
    fill_rates = item / bins_remain_cap
    fill_rates[infeasible_mask] = 0  # Zero fill rate for infeasible bins.
    
    priorities = fill_rates # Original priority with the fill rate
    
    #3. Best Fit bonus
    best_fit_bonus = np.where(bins_remain_cap >= item, (bins_remain_cap - item) / np.max(bins_remain_cap), 0)
    priorities += - best_fit_bonus * (1 - fill_rates)

    # 4. Small Remaining Capacity penalty (try to use bins with less space left)
    remaining_cap_normalized = bins_remain_cap / np.max(bins_remain_cap)
    priorities += (1 - remaining_cap_normalized) * 0.1  # Weigh it less to avoid extreme preference
    

    return priorities
```
