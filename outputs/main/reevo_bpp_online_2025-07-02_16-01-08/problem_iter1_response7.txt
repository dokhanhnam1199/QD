```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First, filter out bins that cannot accommodate the item
    valid_bins = bins_remain_cap >= item
    
    if not np.any(valid_bins):
        # If no bin can accommodate the item, return low priority for all bins.
        return priorities

    # Calculate remaining capacity after placing the item
    remaining_capacity = bins_remain_cap[valid_bins] - item

    # Prioritize bins based on remaining capacity:
    # 1. Bins with smaller remaining capacity after placement get higher priority 
    # (First-Fit Decreasing/Best-Fit approximation).
    priorities[valid_bins] = 1.0 / (remaining_capacity + 1e-9)  # Adding a small constant to prevent division by zero

    # 2. Give a bonus if the remaining capacity is very small
    almost_full = remaining_capacity <= 0.1  # Adjust threshold (0.1) if needed
    priorities[valid_bins][almost_full] *= 2.0 # Double the priority

    # 3. Give a penalty if the bin will be very empty after placing the item
    very_empty = remaining_capacity > 0.9 # Adjust threshold (0.9) if needed
    priorities[valid_bins][very_empty] /= 2.0  # Reduce the priority

    return priorities
```
