```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give high priority to bins that can fit the item
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1.0

    # Prioritize bins with smaller remaining capacity after adding the item
    remaining_capacity_after_fit = bins_remain_cap[fit_mask] - item
    priorities[fit_mask] += 1.0 / (remaining_capacity_after_fit + 0.0001) #adding small number to avoid divide by zero.

    # Slightly penalize bins that are almost full after adding the item, since it limits future placements.
    almost_full_mask = (remaining_capacity_after_fit < (0.1 * np.max(bins_remain_cap))) & fit_mask[bins_remain_cap >= item]  # Correctly index with boolean mask
    priorities[almost_full_mask] -= 0.2

    #Give zero priority to bins where item can't fit
    priorities[~fit_mask] = -1.0

    return priorities
```
