```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give a high priority to bins where the item fits perfectly or almost perfectly.
    perfect_fit = np.isclose(bins_remain_cap, item)
    almost_fit = (bins_remain_cap - item >= 0) & (bins_remain_cap - item <= 0.1) # Allow for minor floating point issues/epsilon
    fits = bins_remain_cap >= item
    
    priorities[perfect_fit] = 1000  # Highest priority for perfect fit

    priorities[almost_fit] = 500  # High priority for almost perfect fit

    # Prioritize bins that have enough capacity for the item, but not too much (to avoid fragmentation).
    remaining_space = bins_remain_cap - item
    valid_bins = fits & (remaining_space <= np.mean(bins_remain_cap[fits]))
    
    priorities[valid_bins] = 100 - (remaining_space[valid_bins] / np.mean(bins_remain_cap[fits]))*50 if np.any(fits) else 0 # Normalize

    # Give a small priority to all bins where the item fits (but not the previous conditions)
    other_fits = fits & ~perfect_fit & ~almost_fit & ~valid_bins
    priorities[other_fits] = 1 # Baseline fit priority
        
    return priorities
```
