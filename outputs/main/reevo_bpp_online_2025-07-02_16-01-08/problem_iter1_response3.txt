```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit-Decreasing heuristic adaptation: prioritize bins that can fit the item well
    fit_indices = bins_remain_cap >= item
    priorities[fit_indices] = (bins_remain_cap[fit_indices] - item) / bins_remain_cap[fit_indices]  # Remaining capacity ratio

    # Prioritize bins where the item almost fills it. The nearer to 1, the higher the score
    priorities[fit_indices] = np.where(bins_remain_cap[fit_indices] > 0, 1 - (bins_remain_cap[fit_indices] - item)/bins_remain_cap[fit_indices], 0)

    # If the item can't fit in any bin, penalize
    if not np.any(fit_indices):
        priorities = np.full_like(bins_remain_cap, -1.0)
        # find the bin with maximum remaining capacity and give it a small advantage
        max_cap_idx = np.argmax(bins_remain_cap)
        priorities[max_cap_idx] = -0.9 # slightly better than other infeasible bin
    else:
         #Scale other priorities
         priorities[fit_indices] *= 10 # Increase the contribution

    return priorities
```
