```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        # Normalized remaining capacity after fit
        remaining_after_fit = bins_remain_cap[can_fit] - item
        normalized_remaining = remaining_after_fit / np.max(bins_remain_cap)  # Normalize by max capacity

        # Prioritize bins that result in a tighter fit (lower normalized remaining capacity)
        priorities[can_fit] = 1.0 - normalized_remaining

        # Bin Fill Level Heuristic: Encourages filling bins to a certain level
        fill_level = bins_remain_cap[can_fit] / np.max(bins_remain_cap)
        # Penalize bins that are too full or too empty. A good range is 0.2 to 0.8, centered around 0.5
        fill_penalty = np.abs(fill_level - 0.5)  # Distance from the ideal fill level
        priorities[can_fit] += (1 - fill_penalty) * 0.5  # Scale to avoid overpowering the remaining capacity heuristic

        # Perfect Fit Bonus: Significantly boost bins that offer a perfect fit
        perfect_fit = np.isclose(remaining_after_fit, 0)
        priorities[can_fit][perfect_fit] += 1.0  # Substantially increase priority for perfect fits

    else:
        # If no bin can fit, prioritize bins with larger remaining capacity.
        # This aims to reduce the number of bins opened when a new bin is unavoidable.
        priorities = bins_remain_cap / np.max(bins_remain_cap)

    return priorities
```
