```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Extremely high priority for perfect fit
    perfect_fit = np.isclose(bins_remain_cap, item)
    priorities[perfect_fit] = 10000

    # Very high priority for near-perfect fit (small tolerance)
    near_perfect_fit = (bins_remain_cap - item > 0) & (bins_remain_cap - item <= 0.1)
    priorities[near_perfect_fit] = 5000

    # Moderate priority for bins where the item fits
    fits = bins_remain_cap >= item
    fits_indices = np.where(fits)[0]

    if len(fits_indices) > 0:
        remaining_space = bins_remain_cap[fits] - item
        # Prioritize based on remaining space, smaller remaining space gets higher priority
        # Use a normalized score to avoid issues with different capacity scales
        max_remaining = np.max(remaining_space)
        if max_remaining > 0:  # Avoid division by zero
            priorities[fits] = 1000 - (remaining_space / max_remaining) * 900  # Scale between 100 and 1000
        else:
            priorities[fits] = 1000 #All remaining space is same and 0.

    # Lower priority if it fits but not perfectly/near perfectly and not the best fit, to avoid fragmentation.
    other_fits = fits & ~perfect_fit & ~near_perfect_fit

    # Apply some baseline priority, but less than perfect/near-perfect
    priorities[other_fits] = np.maximum(priorities[other_fits],100)
    return priorities
```
