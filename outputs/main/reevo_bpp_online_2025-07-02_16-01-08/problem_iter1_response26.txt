```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate wasted space if item is added to each bin.
    wasted_space = bins_remain_cap - item

    # Give high priority to bins where the item fits.
    fit_mask = wasted_space >= 0
    priorities[fit_mask] = 1 / (wasted_space[fit_mask] + 1e-6)  # Avoid division by zero

    # Slightly penalize bins where the item doesn't fit (discourage overallocation).
    no_fit_mask = wasted_space < 0
    priorities[no_fit_mask] = -np.abs(wasted_space[no_fit_mask])

    # Boost priority for bins that are almost full before placing the item, using some sigmoid function.
    almost_full = (bins_remain_cap > 0) & (bins_remain_cap <= 2 * item)
    priorities[almost_full] += 1 / (1 + np.exp(-bins_remain_cap[almost_full]))

    # Further prioritizing nearly full bins.
    nearly_full_mask = fit_mask & (wasted_space < 0.1 * np.max(bins_remain_cap))
    priorities[nearly_full_mask] += 5 # Give a significant priority boost

    return priorities
```
