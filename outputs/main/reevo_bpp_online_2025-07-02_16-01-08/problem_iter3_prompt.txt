{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\nFocus on normalized, ratio-based scores prioritizing feasibility and tight fits. Directly minimize waste and fragmentation. Dynamically scale priorities based on bin states, balancing fill levels while avoiding near-full or near-empty bins.\n\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Give high priority to bins that can accommodate the item\n    # but have minimal remaining capacity *after* placing the item.\n    # This helps to fill bins as much as possible.\n\n    can_fit = bins_remain_cap >= item\n    \n    if np.any(can_fit):\n        remaining_after_fit = bins_remain_cap[can_fit] - item\n        priorities[can_fit] = 1.0 / (remaining_after_fit + 0.00001) # Avoid division by zero\n        \n        # Further prioritization: prioritize bins with remaining capacity closest to item size\n        # This can help prevent creating many bins with small leftover space if possible.\n\n        priorities[can_fit] += 1.0 / np.abs(bins_remain_cap[can_fit] - item + 0.00001)\n\n\n    # If no bins can fit, prioritize the bin with largest capacity.\n    else:\n      priorities = bins_remain_cap\n      \n    return priorities\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}