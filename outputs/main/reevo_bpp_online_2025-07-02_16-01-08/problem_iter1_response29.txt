```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give high priority to bins that can fit the item reasonably well, but not perfectly.
    fit_indices = bins_remain_cap >= item
    
    # Avoid bins that are too full or too empty after adding the item
    
    remaining_after_fit = bins_remain_cap[fit_indices] - item
    
    #Prioritize bins where the remaining capacity after adding the item is a good percentage of bin size
    priority_fit = (1 - (remaining_after_fit / np.max(bins_remain_cap)))
    
    
    priorities[fit_indices] = priority_fit #* (1 - item / bins_remain_cap[fit_indices])

    # Penalize bins that cannot fit the item or would become nearly empty
    
    priority_too_small = (item - bins_remain_cap) #Penalty function for bins that are too small, zero otherwise
    priority_too_small = np.maximum(priority_too_small, 0)

    priorities = priorities - priority_too_small #Subtraction is correct

    return priorities
```
