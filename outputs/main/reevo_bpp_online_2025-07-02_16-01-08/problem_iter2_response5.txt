```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize fit: Give a large priority boost to bins that can fit the item.
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 10.0

    # Balance remaining capacity: Smaller remaining capacity after fitting is better, but avoid making bins nearly full
    remaining_space = bins_remain_cap - item
    
    # Normalize remaining space to bin capacity and consider only bins where item can fit.
    normalized_remaining_space = np.zeros_like(bins_remain_cap, dtype=float)
    normalized_remaining_space[can_fit] = remaining_space[can_fit] / np.max(bins_remain_cap)
    
    # Higher priority if normalized_remaining_space is smaller. Subtract it from the priority.
    priorities[can_fit] -= normalized_remaining_space[can_fit]

    # Avoid near-full bins: Penalize bins where the remaining space would be very small.
    nearly_full = (remaining_space > 0) & (remaining_space <= 0.1)
    priorities[nearly_full] -= 5.0

    # Discourage bins that can't fit by giving lowest possible score.
    priorities[~can_fit] = -np.inf

    return priorities
```
