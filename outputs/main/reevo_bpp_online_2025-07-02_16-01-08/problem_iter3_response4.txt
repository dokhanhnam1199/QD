```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = 1.0 # Assuming bin size is 1, makes the code more general

    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        # Calculate remaining capacity after placing item
        remaining_after_fit = bins_remain_cap[can_fit] - item

        # Normalized remaining capacity (waste)
        normalized_waste = remaining_after_fit / bin_size

        # Priority based on minimizing normalized waste
        priorities[can_fit] = 1.0 - normalized_waste # Higher priority for less waste

        # Prioritize bins that are already reasonably full, but not too full
        fill_level = (bin_size - bins_remain_cap[can_fit]) / bin_size
        
        # Apply a bonus for bins in a sweet spot of fill level (e.g., 0.4 to 0.8)
        sweet_spot_lower = 0.4
        sweet_spot_upper = 0.8
        in_sweet_spot = (fill_level >= sweet_spot_lower) & (fill_level <= sweet_spot_upper)
        priorities[can_fit][in_sweet_spot] += 0.5  # Give a significant bonus

        # Penalize near-full bins to avoid extreme fragmentation
        near_full_threshold = 0.9
        near_full = fill_level > near_full_threshold
        priorities[can_fit][near_full] -= 0.2 # Reduce priority if nearly full

    else:
        # If no bin fits, prioritize the least full bin (to potentially open a new one later)
        fill_levels = (bin_size - bins_remain_cap) / bin_size
        priorities = 1.0 - fill_levels  # Higher priority to least full

    return priorities
```
