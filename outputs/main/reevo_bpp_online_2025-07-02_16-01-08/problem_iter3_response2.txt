```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    if np.any(can_fit):
        remaining_after_fit = bins_remain_cap[can_fit] - item
        
        # Normalized remaining capacity after fit.  Smaller is better.
        normalized_remaining = remaining_after_fit / bins_remain_cap[can_fit]
        
        # Use inverse of normalized remaining capacity as a base priority.
        # Higher priority to bins that are filled more completely.
        priorities[can_fit] = 1.0 / (normalized_remaining + 0.00001)  # Avoid division by zero
        
        # Prioritize bins whose remaining capacity is closest to the item size.
        # Minimizes fragmentation and creates tighter fits.
        proximity_score = 1.0 / (np.abs(bins_remain_cap[can_fit] - item) + 0.00001)
        priorities[can_fit] += proximity_score
        
        # Dynamically scale priorities: Penalize near-full or near-empty bins *after* placing item
        fill_level_after_fit = (bins_remain_cap[can_fit] - item) / np.max(bins_remain_cap) #Assuming all bins have same initial capacity
        
        # Penalize if fill_level_after_fit is close to 0 or 1.  Target medium fill levels.
        fill_level_penalty = -np.abs(fill_level_after_fit - 0.5) # Penalize deviation from 0.5 (half full)

        priorities[can_fit] += fill_level_penalty


    else:
        # No bins can fit. Prioritize the bin with the largest remaining capacity
        # but reduce the priority to distinguish from bins that can fit.
        priorities = bins_remain_cap / np.max(bins_remain_cap) # Normalize
        priorities = priorities * 0.1  # Reduce priority significantly
        
    return priorities
```
