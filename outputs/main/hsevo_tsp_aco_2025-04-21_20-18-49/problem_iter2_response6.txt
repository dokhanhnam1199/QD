```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Hybrid heuristic using inverse distance, rank-based normalization,
    and nearest neighbor influence.
    """
    n = distance_matrix.shape[0]
    epsilon = 1e-9
    distance_matrix = distance_matrix + epsilon
    inverse_distance = 1 / distance_matrix
    rank_matrix = np.zeros((n, n))
    for i in range(n):
        distances = distance_matrix[i, :]
        ranks = np.argsort(distances)
        for j, r in enumerate(ranks):
            rank_matrix[i, r] = (n - j) / n
    heuristic_matrix = inverse_distance * rank_matrix
    for i in range(n):
        nearest_neighbors = np.argsort(distance_matrix[i, :])[1:4]
        for j in range(n):
            if i != j and j in nearest_neighbors:
                heuristic_matrix[i, j] += 0.2 #Boost edges towards nearest neighbors
    min_val = np.min(heuristic_matrix)
    max_val = np.max(heuristic_matrix)
    heuristic_matrix = (heuristic_matrix - min_val) / (max_val - min_val)
    return heuristic_matrix
```
