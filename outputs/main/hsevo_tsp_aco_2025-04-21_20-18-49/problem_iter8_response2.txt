```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    TSP heuristic: Combines inverse distance, attractiveness, centrality, 
    adaptive temperature, and percentile-based sparsification.
    """
    n = distance_matrix.shape[0]
    epsilon = 1e-9

    inverse_distance = 1.0 / (distance_matrix + np.eye(n) + epsilon)

    node_attractiveness = np.sum(inverse_distance, axis=0)
    node_attractiveness = 1.0 / (node_attractiveness / np.mean(node_attractiveness) + epsilon)

    node_centrality = np.sum(inverse_distance, axis=1)
    node_centrality = node_centrality / np.mean(node_centrality + epsilon)
    node_centrality_penalty = 1.0 / (node_centrality + epsilon)
    
    heuristic_matrix = (inverse_distance**2.0) * (node_attractiveness[:, None] * node_attractiveness[None, :]) * (node_centrality_penalty[:, None] * node_centrality_penalty[None, :])
    
    temperature = np.mean(distance_matrix) / 2
    heuristic_matrix = heuristic_matrix * np.exp(-distance_matrix / temperature)
    
    threshold = np.percentile(heuristic_matrix, 75)
    heuristic_matrix[heuristic_matrix < threshold] = 0

    heuristic_matrix = (heuristic_matrix - np.min(heuristic_matrix)) / (np.max(heuristic_matrix) - np.min(heuristic_matrix) + epsilon)

    return heuristic_matrix
```
