import numpy as np

def heuristics_v2(distance_matrix: np.ndarray,
                   attractiveness_exponent: float = 4.0677835124766935,
                   sparsification_factor: float = 9.192280081430006,
                   inverse_distance_offset: float = 2.5252655602721696,
                   node_attractiveness_scaling: float = 0.9470559666610782,
                   node_centrality_scaling: float = 1.0192192941624214,
                   temperature_scaling: float = 0.6488483557219303) -> np.ndarray:
    """Enhanced heuristics using distance, centrality, attractiveness, and adaptive temperature & sparsification."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    temperature = np.median(distance_matrix) * temperature_scaling
    inverse_distance = 1.0 / (distance_matrix + np.eye(n) * inverse_distance_offset)

    node_attractiveness = np.sum(inverse_distance, axis=0)
    node_attractiveness = 1.0 / (node_attractiveness / np.mean(node_attractiveness) * node_attractiveness_scaling)

    node_centrality = np.sum(inverse_distance, axis=1)
    node_centrality = node_centrality / np.mean(node_centrality) * node_centrality_scaling
    node_centrality_penalty = 1.0 / node_centrality

    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] = (inverse_distance[i, j]**attractiveness_exponent) * \
                                   (node_attractiveness[i] * node_attractiveness[j]) * \
                                   (node_centrality_penalty[i] * node_centrality_penalty[j]) * \
                                   np.exp(-distance_matrix[i, j] / temperature)

    # Adaptive sparsification
    threshold = np.mean(heuristics[heuristics > 0]) / sparsification_factor
    heuristics[heuristics < threshold] = 0
    return heuristics
