```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, degree, and exploration for TSP.
    """
    n = distance_matrix.shape[0]
    epsilon = 1e-9

    inverse_distance = 1 / (distance_matrix + epsilon)
    node_degrees = np.sum(1 / (distance_matrix + np.eye(n)), axis=1)
    degree_matrix = np.tile(node_degrees, (n, 1)) + np.tile(node_degrees, (n, 1)).T
    temperature = np.mean(distance_matrix)
    hawking_radiation = np.random.normal(0, temperature / (distance_matrix + np.eye(n)), size=(n, n))
    hawking_radiation = np.abs(hawking_radiation)

    heuristic_matrix = inverse_distance * degree_matrix + hawking_radiation
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T)/2
    heuristic_matrix = np.nan_to_num(heuristic_matrix, nan=0.0)
    heuristic_matrix = (heuristic_matrix - np.min(heuristic_matrix)) / (np.max(heuristic_matrix) - np.min(heuristic_matrix) + epsilon)

    return heuristic_matrix
```
