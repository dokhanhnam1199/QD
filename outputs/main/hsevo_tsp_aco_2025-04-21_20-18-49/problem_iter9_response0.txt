```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray,
                  attractiveness_exponent: float = 2.0,
                  centrality_exponent: float = 1.0,
                  temperature_factor: float = 1.0,
                  sparsification_factor: float = 5.0) -> np.ndarray:
    """
    Enhanced heuristics for TSP using inverse distance, node attractiveness (based on inverse distance),
    node centrality (based on shortest paths), adaptive temperature, and sparsification.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance with a small constant to avoid division by zero
    inverse_distance = 1.0 / (distance_matrix + np.eye(n) * 1e-9)

    # Node attractiveness: Higher attractiveness for nodes closer to many other nodes
    node_attractiveness = np.sum(inverse_distance, axis=0)
    node_attractiveness = node_attractiveness / np.mean(node_attractiveness) # Normalize

    # Node centrality: Estimate node importance based on sum of inverse distances
    node_centrality = np.sum(inverse_distance, axis=1)
    node_centrality = node_centrality / np.mean(node_centrality) # Normalize
    
    # Adaptive Temperature: Based on the median distance, adjusted by a factor.
    temperature = np.median(distance_matrix) * temperature_factor

    # Combine factors
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] = (inverse_distance[i, j] ** attractiveness_exponent) * \
                                   (node_attractiveness[i] * node_attractiveness[j]) * \
                                   (node_centrality[i] ** centrality_exponent * node_centrality[j] ** centrality_exponent) * \
                                   np.exp(-distance_matrix[i, j] / temperature)

    # Adaptive Sparsification: Set values below a dynamic threshold to zero
    threshold = np.mean(heuristics) / sparsification_factor
    heuristics[heuristics < threshold] = 0

    return heuristics
```
