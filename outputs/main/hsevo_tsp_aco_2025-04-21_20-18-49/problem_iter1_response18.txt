```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Generates heuristic indicators for TSP edges based on a combination of distance,
    nearest neighbors, and global average distance.

    Args:
        distance_matrix (np.ndarray): A square matrix where distance_matrix[i, j]
            is the distance between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix,
            containing heuristic indicators for each edge. Higher values indicate
            more promising edges. Diagonal elements will be 0.
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # Calculate nearest neighbors for each node
    nearest_neighbors = np.argsort(distance_matrix, axis=1)[:, 1:4]  # Exclude self
    
    # Calculate global average distance
    avg_distance = np.mean(distance_matrix[np.triu_indices_from(distance_matrix, k=1)])

    for i in range(n):
        for j in range(n):
            if i != j:
                distance = distance_matrix[i, j]

                # Heuristic component 1: Inverse distance (basic desirability)
                heuristic_value = 1 / (distance + 1e-6) #add a small number to avoid dividing by zero.

                # Heuristic component 2: Nearest neighbor bonus
                if j in nearest_neighbors[i]:
                    heuristic_value += 0.5  # Bonus for being a nearest neighbor
                    #Further boost if i is also j's nearest neighbour.
                    nearest_neighbours_of_j = np.argsort(distance_matrix, axis=1)[:, 1:4][j]
                    if i in nearest_neighbours_of_j:
                        heuristic_value += 0.2

                # Heuristic component 3: Encourage selection if distance is smaller than global average distance.
                if distance < avg_distance:
                    heuristic_value += 0.2
                

                heuristics[i, j] = heuristic_value
                
    return heuristics
```
