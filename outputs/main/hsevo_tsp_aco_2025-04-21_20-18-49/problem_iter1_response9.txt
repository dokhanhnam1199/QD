```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Implements a more sophisticated heuristic for the Traveling Salesman Problem (TSP).
    Combines inverse distance with a "nearest neighbor" component to guide search.

    Args:
        distance_matrix (np.ndarray): A square matrix where distance_matrix[i, j]
                                     is the distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element
                      indicates how promising the corresponding edge is to be included
                      in a TSP solution.  Higher values indicate more promising edges.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance component: Favors shorter edges. Avoid division by zero
    inverse_distance = 1.0 / (distance_matrix + np.eye(n))  # Add identity matrix to avoid div by 0 on diagonal
    np.fill_diagonal(inverse_distance, 0) # Set diagonal elements to zero

    # 2. Nearest neighbor component: Favors edges connecting each city to its nearest neighbors.

    for i in range(n):
        # Find the nearest neighbors for each city (excluding itself)
        neighbors = np.argsort(distance_matrix[i, :])[1:4]  #Top 3 nearest neighbours. More will incur greater cost to computation
        for neighbor in neighbors:
            heuristic_matrix[i, neighbor] = 1 # Mark neighbours to boost heuristic weights

    # Combine the two components:  A weighted sum allows flexibility.
    heuristic_matrix = 0.7 * inverse_distance + 0.3 * heuristic_matrix

    return heuristic_matrix
```
