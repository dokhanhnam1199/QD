```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) based on
    a combination of inverse distance and a nearest neighbor component.

    Args:
        distance_matrix (np.ndarray): A square matrix where distance_matrix[i][j]
                                      represents the distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each
                     element represents a heuristic value indicating the
                     desirability of including the corresponding edge in the TSP tour.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance component (as in v1)
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Nearest neighbor component
    for i in range(n):
        # Find the nearest neighbors for each city
        nearest_neighbors = np.argsort(distance_matrix[i, :])[1:4]  # Exclude itself, take top 3

        for j in range(n):
            if i != j:
                #Boost heuristic value if j is one of the nearest neighbors of i
                if j in nearest_neighbors:
                     heuristic_matrix[i, j] += 0.5 # increase the prob for edges towards NN
                heuristic_matrix[i, j] += inverse_distance[i, j]

    # Normalize the heuristic values to be between 0 and 1
    max_heuristic = np.max(heuristic_matrix)
    min_heuristic = np.min(heuristic_matrix)

    if max_heuristic > min_heuristic:
        heuristic_matrix = (heuristic_matrix - min_heuristic) / (max_heuristic - min_heuristic)
    else:
        heuristic_matrix = np.ones_like(heuristic_matrix) # all the same values, meaning no prior knowledge

    return heuristic_matrix
```
