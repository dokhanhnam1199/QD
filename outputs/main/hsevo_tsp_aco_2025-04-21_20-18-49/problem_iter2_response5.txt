```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, nearest neighbors, and global distance for heuristics.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)
    nearest_neighbors = np.argsort(distance_matrix, axis=1)[:, 1:6]
    avg_distance = np.mean(distance_matrix[np.triu_indices_from(distance_matrix, k=1)])

    for i in range(n):
        for j in range(n):
            if i != j:
                distance = distance_matrix[i, j]
                heuristic_value = 1 / (distance + 1e-6)
                if j in nearest_neighbors[i]:
                    heuristic_value += 0.5
                    if i in np.argsort(distance_matrix, axis=1)[:, 1:6][j]:
                        heuristic_value += 0.2
                if distance < avg_distance:
                    heuristic_value += 0.2
                heuristics[i, j] = heuristic_value

    #Optional: Normalize the heuristic matrix
    max_h = np.max(heuristics)
    min_h = np.min(heuristics)
    if max_h > min_h:
        heuristics = (heuristics - min_h) / (max_h - min_h)

    return heuristics
```
