```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics for TSP based on a combination of distance, edge uniformity,
    and a small stochastic element (simulating gravitational perturbations).

    Args:
        distance_matrix: A numpy array representing the distance matrix.

    Returns:
        A numpy array of the same shape as distance_matrix, representing the
        heuristic values for each edge. Higher values indicate more promising edges.
    """
    n = distance_matrix.shape[0]

    # Inverse distance component (Newton's Law of Gravitation analogy - shorter distance, higher attraction)
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Add small value to avoid division by zero

    # Edge Uniformity (penalize edges that deviate significantly from the average)
    average_distance = np.mean(distance_matrix[distance_matrix != np.inf]) #Exclude infinity elements
    uniformity = np.exp(-np.abs(distance_matrix - average_distance) / average_distance)

    # Stochastic Perturbation (Simulating Brownian motion or slight external forces)
    stochastic_element = np.random.normal(0, 0.01, size=distance_matrix.shape)  # Small random noise

    # Combine the components with weights (empirically tuned)
    heuristic_values = 0.7 * inverse_distance + 0.2 * uniformity + 0.1 * stochastic_element

    # Ensure no infinities exist
    heuristic_values[distance_matrix == np.inf] = 0

    return heuristic_values
```
