```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray,
                  attractiveness_exponent: float = 2.0,
                  sparsification_factor: float = 4.733362140013519,
                  gravity_weight: float = 0.1,
                  random_weight: float = 0.01) -> np.ndarray:
    """Enhanced heuristics: Combines inverse distance, centrality, gravity, adaptive temperature and sparsification."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)
    temperature = np.median(distance_matrix)
    epsilon = 1e-9

    # Inverse distance
    inverse_distance = 1.0 / (distance_matrix + np.eye(n) + epsilon)

    # Node attractiveness
    node_attractiveness = np.sum(inverse_distance, axis=0)
    node_attractiveness = 1.0 / (node_attractiveness / np.mean(node_attractiveness))

    # Node centrality
    node_centrality = np.sum(inverse_distance, axis=1)
    node_centrality = node_centrality / np.mean(node_centrality)
    node_centrality_penalty = 1.0 / node_centrality

    # Gravity
    gravity = 1.0 / (distance_matrix**2 + epsilon)

    # Randomness
    random_matrix = np.random.rand(n, n) * temperature

    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] = (inverse_distance[i, j]**attractiveness_exponent) * \
                                   (node_attractiveness[i] * node_attractiveness[j]) * \
                                   (node_centrality_penalty[i] * node_centrality_penalty[j]) * \
                                   np.exp(-distance_matrix[i, j] / temperature) + \
                                   gravity_weight * gravity[i, j] + \
                                   random_weight * random_matrix[i, j]

    # Normalize
    heuristics = heuristics / np.max(heuristics)

    # Sparsification
    threshold = np.mean(heuristics) / sparsification_factor
    heuristics[heuristics < threshold] = 0

    return heuristics
```
