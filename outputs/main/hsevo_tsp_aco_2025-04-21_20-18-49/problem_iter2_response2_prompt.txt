{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n### Better code\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Ada Lovelace's Heuristic for TSP.\n\n    This heuristic combines several strategies to estimate the desirability of including each edge in the final TSP tour.\n\n    1.  Inverse Distance:  Shorter distances are initially favored.\n    2.  Nearest Neighbor Influence: Edges connecting nodes to their nearest neighbors are prioritized.\n    3.  Avoidance of Long Edges:  Penalizes long edges by raising the inverse distance to a power.\n    4.  Start/End Point Bias: Heuristically encourage the solutions to go to or back from specific start/end nodes.\n        This may speed up the algorithm given a fixed start point.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix, dtype=float)\n\n    # 1. Inverse Distance\n    heuristics = 1.0 / (distance_matrix + 1e-9) # Adding a small value to avoid division by zero\n    # 2. Nearest Neighbor Influence\n    for i in range(n):\n        #Find closest neighbor for node i, excluding self-loops.\n\n        temp_distances = distance_matrix[i].copy()\n        temp_distances[i] = np.inf # Ensure that the node is not selected as its own nearest neighbor.\n\n        nearest_neighbor = np.argmin(temp_distances) # argmin returns the index of the smallest value\n\n        heuristics[i, nearest_neighbor] *= 2.0 # Boost the priority for connections to the nearest neighbor.\n        heuristics[nearest_neighbor, i] *= 2.0 # Ensure symmetry of heuristics.\n\n    # 3. Avoidance of Long Edges\n    heuristics = heuristics ** 1.5 # Further amplify the priority of shorter edges\n\n    # 4. Start/End point bias: assume index 0 is the start point\n    heuristics[0, :] *= 1.2\n    heuristics[:, 0] *= 1.2\n\n    #Ensure no inf values\n    heuristics[np.isinf(heuristics)] = 0\n    return heuristics\n\n### Worse code\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristics for TSP based on a combination of distance, node degree,\n    and a stochastic component to encourage exploration.\n\n    Args:\n        distance_matrix: A numpy array representing the distance matrix between cities.\n\n    Returns:\n        A numpy array of the same shape as distance_matrix, representing the\n        heuristic values for each edge. Higher values indicate more promising edges.\n    \"\"\"\n    n = distance_matrix.shape[0]\n\n    # Avoid division by zero and self-loops by setting diagonal to infinity\n    temp_matrix = distance_matrix.copy()\n    np.fill_diagonal(temp_matrix, np.inf)\n\n    # 1. Inverse Distance:  Shorter distances are generally better.\n    inverse_distance = 1 / temp_matrix\n\n    # 2. Node Degree Preference: Prefer edges connected to nodes with fewer connections\n    #    already selected (simulating a form of constraint satisfaction).\n    #    This is approximated using the sum of inverse distances from each node.\n    node_degree_preference = np.zeros_like(distance_matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j:  # Avoid self-loops\n                node_degree_preference[i, j] = (np.sum(inverse_distance[i, :]) + np.sum(inverse_distance[j, :]))/2\n\n    # 3. Stochastic Perturbation: Add a small amount of random noise to encourage exploration\n    #    and prevent getting stuck in local optima.  The magnitude of the noise is scaled\n    #    by the mean inverse distance to avoid dominating the signal.\n    mean_inverse_distance = np.mean(inverse_distance[np.isfinite(inverse_distance)])\n    stochastic_perturbation = np.random.normal(0, 0.1 * mean_inverse_distance, size=(n, n))\n\n\n    # 4. Combine the heuristics.  Experiment with weights to adjust the influence of each component.\n    heuristic_matrix = (0.7 * inverse_distance +\n                         0.2 * (1/node_degree_preference) + #inverse as higher node degree indicates less preference\n                         0.1 * stochastic_perturbation)\n    # Set diagonal to zero to avoid self-loops\n    np.fill_diagonal(heuristic_matrix, 0)\n\n    return heuristic_matrix\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see that the best heuristic uses inverse distance, node degree desirability, and distance normalization with a temperature parameter, while the worst uses inverse distance, node degree (favoring nodes with fewer connections), and simulated annealing-inspired exploration with a temperature parameter, and normalization. The key difference lies in how node degree is used and the exploration strategy; the best uses \"attractiveness\" to less-connected nodes, while the worst uses a simpler inverse degree and a more direct random addition.\n\nComparing (2nd best) vs (second worst), the second best heuristic uses inverse distance, rank-based normalization, and radioactive decay analogy (edge half-life), and then normalizes the heuristic matrix between 0 and 1; The second worst heuristic combines inverse distance with node degree and randomness with a weight. Key difference here is rank-based normalization that emphasize relative edge importance, independent of scale and the decay factor.\n\nComparing (1st) vs (2nd), the first heuristic focuses on a temperature-controlled balance between exploitation and exploration, normalizing node attractiveness to drive towards isolated nodes, while the second employs rank-based normalization and a radioactive decay analogy to favor shorter edges probabilistically. The first heuristic is more grounded in a simulated physical process, while the second adopts concepts from radioactivity.\n\nComparing (3rd) vs (4th), the third heuristic uses inverse distance, nearest neighbor influence, avoidance of long edges, and start/end point bias; the fourth uses inverse distance, gravity-inspired attraction, global connectivity boost, and local optimization influence (row and column means). The third favors nearest neighbors explicitly and penalizes long edges aggressively, while the fourth balances inverse distance with gravitational attraction and local optimization metrics, adding a constant boost to all edges.\n\nComparing (second worst) vs (worst), the 19th and 20th are identical. They use inverse distance, node degree heuristic (favor nodes with fewer connections), and simulated annealing-inspired exploration, and then normalizing.\n\nOverall: The better heuristics combine multiple factors, including inverse distance, node degree information, and some form of exploration strategy (temperature, randomness, rank-based normalization, radioactive decay). They often normalize the heuristic matrix to a specific range. The use of more sophisticated metaphors and analogies (radioactive decay, gravity) appears correlated with better performance. Emphasizing relative edge importance independent of scales might be more useful. Adding some kind of exploration strategy is vital for escaping local optima.\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, here's a refined concept of \"Current Self-Reflection\" aimed at improving heuristic design, focusing on actionable insights and avoiding common pitfalls:\n\n*   **Keywords:** Iterative Improvement, Performance Analysis, Adaptability, Bias Mitigation.\n*   **Advice:** Critically analyze heuristic performance across diverse problem instances. Identify strengths and weaknesses. Quantify the impact of individual components.\n*   **Avoid:** Over-reliance on intuition or anecdotal evidence. Neglecting edge cases or focusing solely on average performance. Premature optimization.\n*   **Explanation:** Effective reflection involves data-driven analysis, constant questioning of assumptions, and a commitment to refining heuristics based on empirical results. Focus on adaptability and identifying biases.\n\n\nYour task is to write an improved function `heuristics_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}