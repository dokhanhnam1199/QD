```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, node attractiveness, and adaptive sparsification.
    """
    n = distance_matrix.shape[0]
    epsilon = 1e-9
    inverse_distance = 1 / (distance_matrix + np.eye(n) + epsilon)
    node_attractiveness = np.sum(inverse_distance, axis=0)
    node_attractiveness = node_attractiveness / np.mean(node_attractiveness)

    heuristic_matrix = inverse_distance * (node_attractiveness[:, None] * node_attractiveness[None, :])

    # Adaptive sparsification based on mean
    threshold = np.mean(heuristic_matrix) / 2.0
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
