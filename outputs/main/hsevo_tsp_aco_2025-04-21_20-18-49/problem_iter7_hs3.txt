import numpy as np

def heuristics_v2(distance_matrix: np.ndarray,
                  attractiveness_exponent: float = 2.089831176223727,
                  sparsification_factor: float = 6.422910455974381,
                  inverse_distance_offset: float = 1.3158831937756053,
                  node_attractiveness_scaling: float = 0.8098038070437948,
                  node_centrality_scaling: float = 0.8607676762058467,
                  temperature_scaling: float = 0.7013246681569921) -> np.ndarray:
    """Enhanced heuristics using inverse distance, centrality, attractiveness, and adaptive temperature."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)
    temperature = np.median(distance_matrix) * temperature_scaling
    inverse_distance = 1.0 / (distance_matrix + np.eye(n) * inverse_distance_offset)
    node_attractiveness = np.sum(inverse_distance, axis=0)
    node_attractiveness = 1.0 / (node_attractiveness / np.mean(node_attractiveness) * node_attractiveness_scaling)
    node_centrality = np.sum(inverse_distance, axis=1)
    node_centrality = node_centrality / np.mean(node_centrality) * node_centrality_scaling
    node_centrality_penalty = 1.0 / node_centrality

    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] = (inverse_distance[i, j]**attractiveness_exponent) * \
                                   (node_attractiveness[i] * node_attractiveness[j]) * \
                                   (node_centrality_penalty[i] * node_centrality_penalty[j]) * \
                                   np.exp(-distance_matrix[i, j] / temperature)

    threshold = np.mean(heuristics) / sparsification_factor
    heuristics[heuristics < threshold] = 0

    return heuristics
