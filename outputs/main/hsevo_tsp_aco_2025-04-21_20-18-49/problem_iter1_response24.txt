```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Tesla's Electrifying TSP Heuristic - Version 2: Electromagnetically Enhanced Edge Evaluation.

    This function evaluates the promise of each edge in a Traveling Salesman Problem
    by considering not only the direct distance but also the context of neighboring nodes.
    Edges connected to nodes with long average distances to others are penalized,
    reflecting the idea that these nodes are likely to be on the periphery of the optimal path.

    The heuristic leverages a combination of inverse distance (attraction) and a node centrality measure
    based on average distance to all other nodes (repulsion).

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances between nodes.
                                         distance_matrix[i][j] is the distance from node i to node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, containing heuristic values
                      indicating the promise of each edge. Higher values indicate a more promising edge.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate average distance from each node to all other nodes.
    node_centrality = np.mean(distance_matrix, axis=1)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Base attraction: Inverse of the distance (shorter distances are more attractive).
                attraction = 1 / distance_matrix[i, j]

                # Node centrality penalty (nodes far from center penalized).
                # Applying a normalized exponential penalty based on the centrality of both nodes.

                penalty = np.exp(-0.5 * (node_centrality[i] + node_centrality[j]) / np.mean(node_centrality)) # Normalize by mean

                heuristic_matrix[i, j] = attraction * penalty
            else:
                heuristic_matrix[i, j] = 0  # No self-loops

    return heuristic_matrix
```
