```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, gravitational attraction, and adaptive randomness.
    """
    n = distance_matrix.shape[0]
    epsilon = 1e-9
    avg_distance = np.mean(distance_matrix)

    inverse_distance = 1 / (distance_matrix + epsilon)
    gravitational_attraction = 1 / ((distance_matrix**2) + epsilon)
    temperature = avg_distance / 2 # Scale temperature relative to avg dist

    # Adaptive randomness: Higher randomness for longer distances.
    randomness = np.random.rand(n, n) * (temperature / (distance_matrix + epsilon))
    randomness = (randomness + randomness.T) / 2

    heuristic_matrix = (
        0.4 * inverse_distance +
        0.3 * gravitational_attraction +
        0.3 * randomness
    )

    np.fill_diagonal(heuristic_matrix, 0)

    # Normalizing heuristic matrix
    max_h = np.max(heuristic_matrix)
    min_h = np.min(heuristic_matrix)

    if max_h > min_h:
        heuristic_matrix = (heuristic_matrix - min_h) / (max_h - min_h)
    return heuristic_matrix
```
