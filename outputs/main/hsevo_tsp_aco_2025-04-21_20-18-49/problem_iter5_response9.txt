```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, gravity, adaptive temp, and sparsification.
    Normalizes for robust performance.
    """
    n = distance_matrix.shape[0]
    epsilon = 1e-9

    # Inverse distance & Gravity
    inverse_distance = 1.0 / (distance_matrix + epsilon)
    gravity = 1.0 / (distance_matrix**2 + epsilon)

    # Adaptive Temperature
    temperature = np.mean(distance_matrix) / 2
    random_matrix = np.random.rand(n, n) * temperature

    # Combine and normalize
    heuristic = inverse_distance + gravity + random_matrix
    heuristic = heuristic / np.max(heuristic)

    #Sparsification
    threshold = np.percentile(heuristic, 75)
    heuristic[heuristic < threshold] = 0

    return heuristic
```
