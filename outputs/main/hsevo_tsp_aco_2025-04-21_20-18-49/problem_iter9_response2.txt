```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray,
                  attractiveness_exponent: float = 2.0,
                  sparsification_factor: float = 4.733362140013519,
                  centrality_weight: float = 0.5,
                  temperature_scaling: float = 1.0) -> np.ndarray:
    """Enhanced heuristics using inverse distance, centrality, attractiveness, and adaptive temperature."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # Adaptive temperature based on distance distribution
    temperature = np.median(distance_matrix) * temperature_scaling

    # Inverse distance with a small constant to avoid division by zero
    inverse_distance = 1.0 / (distance_matrix + np.eye(n) * 1e-6)

    # Node attractiveness (sum of inverse distances)
    node_attractiveness = np.sum(inverse_distance, axis=0)
    node_attractiveness = node_attractiveness / np.mean(node_attractiveness)  # Normalize

    # Node centrality (sum of inverse distances)
    node_centrality = np.sum(inverse_distance, axis=1)
    node_centrality = node_centrality / np.mean(node_centrality)  # Normalize

    # Combined attractiveness and centrality score
    node_score = (node_attractiveness + centrality_weight * node_centrality) / (1 + centrality_weight)

    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] = (inverse_distance[i, j]**attractiveness_exponent) * \
                                   (node_score[i] * node_score[j]) * \
                                   np.exp(-distance_matrix[i, j] / temperature)

    # Adaptive sparsification based on mean and standard deviation
    threshold = np.mean(heuristics) + sparsification_factor * np.std(heuristics)
    heuristics[heuristics < threshold] = 0

    return heuristics
```
