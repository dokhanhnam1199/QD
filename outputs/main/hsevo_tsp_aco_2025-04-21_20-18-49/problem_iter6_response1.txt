```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray,
                  distance_exponent: float = 2.0,
                  centrality_exponent: float = 1.0,
                  attractiveness_exponent: float = 1.5,
                  sparsification_factor: float = 5.0,
                  temperature_factor: float = 1.0) -> np.ndarray:
    """
    Enhanced heuristics using distance, centrality, and attractiveness, with dynamic temperature and sparsification.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # Normalize distance matrix
    max_distance = np.max(distance_matrix[distance_matrix != np.inf])  # Avoid inf values
    normalized_distance = distance_matrix / max_distance

    # Inverse distance with exponent
    inverse_distance = 1.0 / (normalized_distance + np.eye(n))
    inverse_distance = np.power(inverse_distance, distance_exponent)

    # Node attractiveness based on inverse distances
    node_attractiveness = np.sum(inverse_distance, axis=0)
    node_attractiveness = node_attractiveness / np.mean(node_attractiveness) # Normalize
    node_attractiveness = np.power(node_attractiveness, attractiveness_exponent)

    # Node centrality based on inverse distances
    node_centrality = np.sum(inverse_distance, axis=1)
    node_centrality = node_centrality / np.mean(node_centrality) # Normalize
    node_centrality = np.power(node_centrality, centrality_exponent)

    # Dynamic temperature based on median distance
    temperature = np.median(distance_matrix) * temperature_factor

    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] = (inverse_distance[i, j] *
                                   node_attractiveness[i] * node_attractiveness[j] *
                                   node_centrality[i] * node_centrality[j] *
                                   np.exp(-distance_matrix[i, j] / temperature))

    # Adaptive sparsification based on mean heuristic value
    threshold = np.mean(heuristics[heuristics > 0]) / sparsification_factor  # ignore 0
    heuristics[heuristics < threshold] = 0

    return heuristics
```
