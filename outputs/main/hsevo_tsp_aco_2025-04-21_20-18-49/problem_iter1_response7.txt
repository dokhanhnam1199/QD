```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    A more sophisticated heuristics function for the Traveling Salesman Problem (TSP).

    This version combines several ideas inspired by physics and common-sense heuristics
    to provide more informative edge priors.  It aims to balance exploration
    (allowing for non-obvious edges) with exploitation (favoring short, promising edges).

    Specifically, it uses:
    1.  Inverse distance: Shorter edges are generally more desirable.
    2.  Node degree desirability: Nodes with fewer short connections are made more desirable
        as endpoints of edges.  This encourages exploring parts of the graph that
        are less well-connected initially. This simulates a sort of 'attractive force'.
    3.  Distance normalization: The 'temperature' variable adjusts how strongly we adhere to
        short distances. At higher temperatures, we're more willing to explore longer edges.

    Args:
        distance_matrix (np.ndarray): The distance matrix representing the distances
                                         between cities.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, representing the
                     prior probabilities of including each edge in a solution. Higher
                     values indicate a higher prior probability.
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)
    temperature = np.mean(distance_matrix) / 2  # Adjust as needed for optimal performance

    # Inverse distance, but avoid division by zero
    inverse_distance = 1.0 / (distance_matrix + np.eye(n))

    # Node degree desirability (attractiveness)
    node_attractiveness = np.sum(inverse_distance, axis=0)
    node_attractiveness = 1.0 / (node_attractiveness / np.mean(node_attractiveness)) #Inverse normalized attractiveness to drive toward "isolated" nodes

    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] = (inverse_distance[i, j]**2) * (node_attractiveness[i] * node_attractiveness[j]) * np.exp(-distance_matrix[i, j] / temperature)

    return heuristics
```
