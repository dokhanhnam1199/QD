```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray,
                  attractiveness_exponent: float = 2.0,
                  sparsification_factor: float = 4.733362140013519,
                  centrality_weight: float = 0.5,
                  temperature_adjust_factor: float = 0.1) -> np.ndarray:
    """Enhanced heuristics using inverse distance, centrality, attractiveness, and adaptive temperature."""
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)
    initial_temperature = np.median(distance_matrix)
    temperature = initial_temperature + temperature_adjust_factor * np.std(distance_matrix)

    inverse_distance = 1.0 / (distance_matrix + np.eye(n) * np.mean(distance_matrix))
    
    # Node attractiveness based on inverse distance (normalized)
    node_attractiveness = np.sum(inverse_distance, axis=0)
    node_attractiveness = node_attractiveness / np.mean(node_attractiveness)

    # Node centrality based on inverse distance (normalized)
    node_centrality = np.sum(inverse_distance, axis=1)
    node_centrality = node_centrality / np.mean(node_centrality)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Combined factor: inverse distance, attractiveness, and centrality
                combined_factor = (inverse_distance[i, j]**attractiveness_exponent) * \
                                  (node_attractiveness[i] * node_attractiveness[j]) * \
                                  ((node_centrality[i] * node_centrality[j])**centrality_weight)

                # Temperature-based probability
                temperature_factor = np.exp(-distance_matrix[i, j] / temperature)

                heuristics[i, j] = combined_factor * temperature_factor

    # Adaptive threshold based on mean and std
    threshold = np.mean(heuristics) / (sparsification_factor + np.std(heuristics)/np.mean(heuristics))
    heuristics[heuristics < threshold] = 0

    return heuristics
```
