```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, node attractiveness, and rank-based normalization
    for better edge prioritization in TSP.
    """
    n = distance_matrix.shape[0]
    epsilon = 1e-9

    # Inverse distance
    inverse_distance = 1.0 / (distance_matrix + epsilon)

    # Node attractiveness (favor less-connected nodes)
    node_attractiveness = np.sum(inverse_distance, axis=0)
    node_attractiveness = 1.0 / (node_attractiveness / np.mean(node_attractiveness) + epsilon)

    # Combine inverse distance and node attractiveness
    heuristic_matrix = inverse_distance * (node_attractiveness[:, None] * node_attractiveness[None, :])

    # Rank-based normalization
    ranks = np.argsort(heuristic_matrix, axis=1)
    normalized_matrix = np.zeros_like(heuristic_matrix, dtype=float)
    for i in range(n):
        normalized_matrix[i, ranks[i]] = np.arange(1, n + 1)
    normalized_matrix = normalized_matrix / n

    return normalized_matrix
```
