```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Newton's Heuristic for TSP Edge Promisingness

    This heuristic combines principles of gravitational attraction and spring-like
    forces to estimate the desirability of including each edge in the TSP tour.

    1.  Inverse Distance (Gravitational Analogy):  Shorter distances are more attractive.
        Think of cities attracting each other with a force inversely proportional to
        their distance.

    2.  Node Degree Penalty (Spring Analogy): Nodes with many short connections are penalized.
        Imagine each node connected to all others with springs. A node that is
        already "pulled" in many directions doesn't need more connections.

    3.  Normalization: Rescale the result to a probability-like range (0 to 1, approximately).

    Args:
        distance_matrix (np.ndarray): A square matrix where distance_matrix[i, j]
            represents the distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each
            element represents the heuristic estimate of including that edge.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance (Gravitational Analogy)
    heuristic_matrix = 1.0 / (distance_matrix + 1e-9)  # Add small value to avoid division by zero

    # 2. Node Degree Penalty (Spring Analogy)
    for i in range(n):
        total_attraction = np.sum(heuristic_matrix[i, :]) - heuristic_matrix[i, i] # subtract self-loop
        for j in range(n):
             heuristic_matrix[i, j] /= (total_attraction + 1e-9)

    # 3. Global penalty. Add L-2 norm to control sparsity and avoid being trapped in a few nodes.
    l2_norm = np.linalg.norm(distance_matrix)
    heuristic_matrix = heuristic_matrix/(l2_norm + 1e-9)
    # Ensure diagonal is not selected in the tour

    for i in range(n):
        heuristic_matrix[i,i] = 0.0

    return heuristic_matrix
```
