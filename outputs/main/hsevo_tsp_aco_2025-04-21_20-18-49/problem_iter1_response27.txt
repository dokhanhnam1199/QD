```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic for Traveling Salesman Problem (TSP) edge selection.
    Combines distance-based weighting with node degree and randomness.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance component (close cities are generally good)
    inverse_distance = 1.0 / (distance_matrix + 1e-6)  # Add small value to avoid division by zero

    # Node degree component (discourage high degree nodes early on)
    # Initially all nodes have same potential.  Modify based on edge selection.

    # Randomness component (explore diverse solutions).  Scale with problem size
    randomness = np.random.rand(n, n) * (1.0 / n)  # Scaled randomness
    randomness = (randomness + randomness.T)/2 #Make sure it is symmetric

    # Initial Heuristics: weighted combination of inverse distance and randomness
    heuristics = 0.7 * inverse_distance + 0.3 * randomness

    # Zero out the diagonals.  Traveling from node i to node i isn't allowed.
    np.fill_diagonal(heuristics, 0)

    return heuristics
```
