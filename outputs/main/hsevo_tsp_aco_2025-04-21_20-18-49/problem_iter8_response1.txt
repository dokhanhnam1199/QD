```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, attractiveness, and sparsification.
    Uses normalized values and dynamic temperature.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance
    max_distance = np.max(distance_matrix[distance_matrix != np.inf])
    normalized_distance = distance_matrix / max_distance
    inverse_distance = 1.0 / (normalized_distance + np.eye(n))

    # Node attractiveness
    node_attractiveness = np.sum(inverse_distance, axis=0)
    node_attractiveness = node_attractiveness / np.mean(node_attractiveness)

    # Dynamic temperature
    temperature = np.mean(distance_matrix) / 2

    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] = (inverse_distance[i, j] *
                                   node_attractiveness[i] * node_attractiveness[j] *
                                   np.exp(-distance_matrix[i, j] / temperature))

    # Adaptive sparsification
    threshold = np.percentile(heuristics[heuristics > 0], 20)
    heuristics[heuristics < threshold] = 0

    return heuristics
```
