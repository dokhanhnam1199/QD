{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef heuristics_v2(distance_matrix: np.ndarray,\n                  attractiveness_exponent: float = 2.0,\n                  sparsification_factor: float = 4.733362140013519) -> np.ndarray:\n    \"\"\"Enhanced heuristics using inverse distance, centrality, attractiveness, and adaptive temperature.\"\"\"\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix, dtype=float)\n    temperature = np.median(distance_matrix)\n    inverse_distance = 1.0 / (distance_matrix + np.eye(n))\n    node_attractiveness = np.sum(inverse_distance, axis=0)\n    node_attractiveness = 1.0 / (node_attractiveness / np.mean(node_attractiveness))\n    node_centrality = np.sum(inverse_distance, axis=1)\n    node_centrality = node_centrality / np.mean(node_centrality)\n    node_centrality_penalty = 1.0 / node_centrality\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                heuristics[i, j] = (inverse_distance[i, j]**attractiveness_exponent) * \\\n                                   (node_attractiveness[i] * node_attractiveness[j]) * \\\n                                   (node_centrality_penalty[i] * node_centrality_penalty[j]) * \\\n                                   np.exp(-distance_matrix[i, j] / temperature)\n\n    threshold = np.mean(heuristics) / sparsification_factor\n    heuristics[heuristics < threshold] = 0\n\n    return heuristics\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}