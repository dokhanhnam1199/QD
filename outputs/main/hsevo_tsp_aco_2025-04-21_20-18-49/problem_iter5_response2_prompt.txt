{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n### Better code\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines inverse distance, gravitational attraction, and randomness.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    epsilon = 1e-9\n\n    inverse_distance = 1 / (distance_matrix + epsilon)\n    gravitational_attraction = 1 / ((distance_matrix**2) + epsilon)\n    randomness = np.random.rand(n, n) * (1.0 / n)\n    randomness = (randomness + randomness.T) / 2\n\n    heuristic_matrix = (\n        0.5 * inverse_distance +\n        0.3 * gravitational_attraction +\n        0.2 * randomness\n    )\n\n    np.fill_diagonal(heuristic_matrix, 0)\n    return heuristic_matrix\n\n### Worse code\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines inverse distance, nearest neighbors, and global distance for heuristics.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix, dtype=float)\n    nearest_neighbors = np.argsort(distance_matrix, axis=1)[:, 1:6]\n    avg_distance = np.mean(distance_matrix[np.triu_indices_from(distance_matrix, k=1)])\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                distance = distance_matrix[i, j]\n                heuristic_value = 1 / (distance + 1e-6)\n                if j in nearest_neighbors[i]:\n                    heuristic_value += 0.5\n                    if i in np.argsort(distance_matrix, axis=1)[:, 1:6][j]:\n                        heuristic_value += 0.2\n                if distance < avg_distance:\n                    heuristic_value += 0.2\n                heuristics[i, j] = heuristic_value\n\n    #Optional: Normalize the heuristic matrix\n    max_h = np.max(heuristics)\n    min_h = np.min(heuristics)\n    if max_h > min_h:\n        heuristics = (heuristics - min_h) / (max_h - min_h)\n\n    return heuristics\n\n### Analyze & experience\n- *   Comparing (1st) vs (2nd), we see they are identical. This suggests redundancy or that these are the same heuristic implementation repeated.\n\n*   Comparing (1st) vs (4th), we observe that (1st) uses default values for `attractiveness_exponent` and `sparsification_factor`, while (4th) hardcodes these values (2 and 5 respectively).  (1st) also imports `random`, `math`, `scipy`, and `torch` which are not used, suggesting a lack of code cleanup. The parameters in (1st) add flexibility.\n\n*   Comparing (4th) vs (5th), (4th) combines inverse distance, node attractiveness, centrality penalty, and a temperature factor, along with sparsification. (5th) replaces the centrality penalty with a sparse connectivity bias and a pheromone level, and uses percentile-based sparsification. (5th) incorporates a \"pheromone\" concept and a temperature adjusted to `np.mean(distance_matrix) / 2`.\n\n*   Comparing (5th) vs (6th), (5th) employs node attractiveness, sparse connectivity bias, and pheromone levels with sparsification, while (6th) uses inverse distance, gravity, node degree desirability, a fixed temperature for exploration, and normalization. (6th) uses a fixed temperature and normalizes the heuristic. (5th) uses more adaptive components.\n\n*   Comparing (6th) vs (7th), (6th) uses inverse distance, gravity, node degree desirability, and a temperature-controlled random matrix. It normalizes the result. (7th) uses inverse distance, gravitational attraction and a fixed randomness component with specific weights. (7th) uses fixed weights for combining factors.\n\n*   Comparing (second worst) vs (worst), (19th) and (20th) both combine inverse distance, degree desirability, and decay. They differ primarily in how they combine these factors and normalize the results. They both use rank based normalization.\n\nOverall: The better heuristics tend to incorporate more adaptive elements (like adaptive temperature, dynamic thresholds for sparsification) and combinations of different factors (distance, node properties, edge properties). Normalization and avoidance of division by zero are common good practices. Poorer heuristics tend to use fixed weights and less adaptive parameters.\n- - Try combining various factors to determine how promising it is to select an edge.\n- Try sparsifying the matrix by setting unpromising elements to zero.\nOkay, let's redefine \"Current Self-Reflection\" to provide more actionable advice for designing better heuristics, while avoiding the pitfalls of \"Ineffective Self-Reflection.\" Here's a breakdown:\n\n*   **Keywords:** Parameterization, Normalization, Dynamic Adaptation, Factor Combination.\n\n*   **Advice:** Focus on creating modular heuristic components with adjustable parameters. Normalize inputs to allow fair comparisons. Design mechanisms that dynamically adapt to problem characteristics during runtime.\n\n*   **Avoid:** Blindly combining factors without understanding their interactions. Over-reliance on single, static threshold values.\n\n*   **Explanation:** Robust heuristics result from carefully integrating adaptable components. Parameterization facilitates tuning and generalization. Dynamic adaptation allows the heuristic to respond to the problem's nuances. Normalization ensures fair evaluation of different factors.\n\n\nYour task is to write an improved function `heuristics_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}