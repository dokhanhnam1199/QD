```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, node centrality, and rank-based normalization.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance
    inverse_distance = 1.0 / (distance_matrix + 1e-9)

    # Node centrality (average distance to other nodes)
    node_centrality = np.mean(distance_matrix, axis=1)
    penalty = np.exp(-0.5 * (node_centrality[:, None] + node_centrality[None, :]) / np.mean(node_centrality))
    heuristic_matrix = inverse_distance * penalty

    # Rank-based normalization
    ranks = np.argsort(heuristic_matrix, axis=1)
    n_ranks = np.argsort(ranks, axis=1)
    heuristic_matrix = n_ranks / n

    return heuristic_matrix
```
