```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, node attractiveness, and adaptive temperature for TSP.
    Sparsifies based on percentile of combined heuristic matrix.
    """
    n = distance_matrix.shape[0]
    epsilon = 1e-9

    inverse_distance = 1.0 / (distance_matrix + epsilon)
    node_attractiveness = np.sum(inverse_distance, axis=0)
    node_attractiveness = 1.0 / (node_attractiveness / np.mean(node_attractiveness) + epsilon)
    heuristic_matrix = inverse_distance * (node_attractiveness[:, None] * node_attractiveness[None, :])
    temperature = np.mean(distance_matrix) / 2
    randomness = np.random.normal(0, temperature, size=(n, n))
    heuristic_matrix = heuristic_matrix + np.abs(randomness)

    #Adaptive Sparsification
    threshold = np.percentile(heuristic_matrix, 75)
    heuristic_matrix[heuristic_matrix < threshold] = 0
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T)/2
    heuristic_matrix = (heuristic_matrix - np.min(heuristic_matrix)) / (np.max(heuristic_matrix) - np.min(heuristic_matrix) + epsilon)
    return heuristic_matrix
```
