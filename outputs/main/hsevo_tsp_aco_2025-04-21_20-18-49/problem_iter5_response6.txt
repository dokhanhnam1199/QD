```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, adaptive temperature, and sparsification.
    """
    n = distance_matrix.shape[0]
    epsilon = 1e-9
    inverse_distance = 1 / (distance_matrix + np.eye(n) * epsilon)
    node_avg_distances = np.mean(distance_matrix, axis=1)
    temperature_matrix = np.tile(node_avg_distances, (n, 1)) + np.tile(node_avg_distances, (n, 1)).T
    temperature_matrix /= 4
    temperature_matrix = np.clip(temperature_matrix, np.min(distance_matrix) / 2, np.max(distance_matrix) * 2)
    heuristic_matrix = inverse_distance * np.exp(-distance_matrix / (temperature_matrix + epsilon))
    threshold = np.mean(heuristic_matrix[heuristic_matrix > 0]) / 3
    heuristic_matrix[heuristic_matrix < threshold] = 0
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2
    heuristic_matrix = (heuristic_matrix - np.min(heuristic_matrix)) / (np.max(heuristic_matrix) - np.min(heuristic_matrix) + epsilon)
    heuristic_matrix = np.nan_to_num(heuristic_matrix, nan=0.0)
    return heuristic_matrix
```
