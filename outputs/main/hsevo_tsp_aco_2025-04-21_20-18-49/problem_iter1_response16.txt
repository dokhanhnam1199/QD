```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Stephen Hawking's Heuristic for TSP, inspired by black hole physics and stochastic sampling.

    This heuristic aims to guide TSP solvers by creating a 'gravitational potential'
    based on edge lengths, node degree (proximity to other nodes), and a touch
    of simulated Hawking radiation for exploration.

    Args:
        distance_matrix (np.ndarray):  A square, symmetric matrix where distance_matrix[i, j]
                                     is the distance between node i and node j. Diagonal elements
                                     (distance_matrix[i, i]) should be zero.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, representing
                    the heuristic values (probabilities or weights) for including each edge
                    in the TSP tour. Higher values indicate a more promising edge.
    """

    n = distance_matrix.shape[0]  # Number of nodes
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Node Degree (Proximity): Nodes close to many other nodes are likely
    # to be good connectors in the optimal tour.
    node_degrees = np.sum(1 / (distance_matrix + np.eye(n)), axis=1)  # Add eye to prevent division by zero
    degree_matrix = np.tile(node_degrees, (n, 1)) + np.tile(node_degrees, (n, 1)).T

    # Inverse Distance (Gravity):  Shorter distances are more attractive.
    inverse_distance = 1 / (distance_matrix + np.eye(n))

    # Hawking Radiation (Exploration):  Introduce randomness, especially for longer edges
    # to prevent premature convergence.  Simulate thermal fluctuations.
    temperature = np.mean(distance_matrix)  # Scale temperature by average distance
    hawking_radiation = np.random.normal(0, temperature / (distance_matrix + np.eye(n)), size=(n, n))
    hawking_radiation = np.abs(hawking_radiation)  # Ensure positive contribution

    # Combine factors:
    heuristic_matrix = inverse_distance * degree_matrix + hawking_radiation
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T)/2 #Ensure symmetry
    heuristic_matrix = np.nan_to_num(heuristic_matrix, nan=0.0)
    # Normalize (optional, but often helpful for stochastic sampling)
    heuristic_matrix = (heuristic_matrix - np.min(heuristic_matrix)) / (np.max(heuristic_matrix) - np.min(heuristic_matrix) + 1e-9) #normalizes to 0 to 1

    return heuristic_matrix
```
