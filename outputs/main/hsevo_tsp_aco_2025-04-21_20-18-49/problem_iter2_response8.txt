```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, degree desirability, gravity, and temperature.
    Normalizes for robust performance.
    """
    n = distance_matrix.shape[0]
    epsilon = 1e-9

    # Inverse distance & Gravity
    inverse_distance = 1.0 / (distance_matrix + epsilon)
    gravity = 1.0 / (distance_matrix**2 + epsilon)

    # Node degree desirability
    node_degrees = np.sum(inverse_distance, axis=0)
    degree_heuristic = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            if i != j:
                degree_heuristic[i, j] = 1.0 / (node_degrees[i] + node_degrees[j] + epsilon)

    # Temperature-controlled exploration
    temperature = 0.1 # Reduced initial temp for faster convergence
    random_matrix = np.random.rand(n, n) * temperature

    # Combine and normalize
    heuristic = inverse_distance + gravity + degree_heuristic + random_matrix
    heuristic = heuristic / np.max(heuristic)

    return heuristic
```
