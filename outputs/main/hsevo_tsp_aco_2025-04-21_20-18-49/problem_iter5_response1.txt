```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Combines inverse distance, node attractiveness, sparse connectivity bias, and pheromone.
    Sparsifies to focus on promising edges.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)
    temperature = np.mean(distance_matrix) / 2

    inv_dist = 1.0 / (distance_matrix + np.eye(n))
    node_attract = np.sum(inv_dist, axis=0)
    node_attract = 1.0 / (node_attract / np.mean(node_attract))
    connectivity = np.sum(inv_dist, axis=0)
    sparse_bias = np.outer(connectivity, connectivity)
    pheromone = np.zeros_like(distance_matrix, dtype=float)
    shortest_dist = np.partition(distance_matrix.flatten(), n+1)[n+1]
    pheromone[distance_matrix <= shortest_dist * 1.2] = 1.0

    for i in range(n):
        for j in range(n):
            if i != j:
                heuristics[i, j] = ((inv_dist[i, j]**2) *
                                     (node_attract[i] * node_attract[j]) *
                                     np.exp(-distance_matrix[i, j] / temperature) /
                                     (sparse_bias[i, j] + 1e-6)) + pheromone[i, j]

    threshold = np.percentile(heuristics[heuristics > 0], 20)
    heuristics[heuristics < threshold] = 0

    return heuristics
```
