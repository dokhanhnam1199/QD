```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Einstein's heuristic for the Traveling Salesman Problem (TSP).

    This function calculates a heuristic matrix based on a combination of
    distance, nearest neighbors, and a dash of randomness inspired by
    Brownian motion. The goal is to guide stochastic TSP solvers towards
    promising edges.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances
                                       between cities. distance_matrix[i, j] is the
                                       distance between city i and city j.

    Returns:
        np.ndarray: A heuristic matrix of the same shape as the distance matrix.
                      Higher values indicate more promising edges.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance (shorter is better)
    heuristic_matrix = 1.0 / (distance_matrix + 1e-9)  # Add small value to avoid division by zero

    # 2. Nearest Neighbor bonus: Cities close to many others get a boost.
    nearest_neighbors_bonus = np.zeros(n)
    for i in range(n):
        # Find the k nearest neighbors (excluding itself)
        distances = distance_matrix[i, :]
        nearest_neighbors_indices = np.argsort(distances)[1:6] # Top 5 nearest
        nearest_neighbors_bonus[i] = np.sum(1.0 / distances[nearest_neighbors_indices])


    #  incorporate into heuristic matrix. Cities with short distances from
    # the current one and high neighbor bonuses receive strong heuristic value

    for i in range(n):
      for j in range(n):
        if i != j:
           heuristic_matrix[i,j] = heuristic_matrix[i,j] * (nearest_neighbors_bonus[i] + nearest_neighbors_bonus[j])


    # 3. Introduce a bit of "Brownian Motion" (randomness)
    randomness = np.random.rand(n, n) * 0.1
    heuristic_matrix += randomness

    # Normalize the heuristic matrix to values between 0 and 1 (optional, but good practice)
    heuristic_matrix = (heuristic_matrix - np.min(heuristic_matrix)) / (np.max(heuristic_matrix) - np.min(heuristic_matrix))


    return heuristic_matrix
```
