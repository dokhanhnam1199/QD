```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) using a combination of inverse distance and node degree estimation.

    This heuristic prioritizes edges connecting nodes with relatively high degree (number of close neighbors)
    while also favoring shorter distances. The degree estimation is inspired by the gravitational
    attraction concept, where closer nodes have a stronger influence on the node's degree.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances between all nodes.
                                     distance_matrix[i][j] is the distance between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, representing the prior "promise" of
                    including each edge in a TSP solution. Higher values indicate more promising edges.
    """

    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix)
    degree_approximation = np.zeros(n)

    # Estimate node degree based on proximity to other nodes
    # Closer nodes contribute more to the degree estimation
    for i in range(n):
        for j in range(n):
            if i != j:
                degree_approximation[i] += 1.0 / (distance_matrix[i, j] + 1e-9) # Added small constant to avoid division by zero

    # Combine inverse distance with node degree information
    for i in range(n):
        for j in range(n):
            if i != j:
                #Heuristic as product of inverse distance and the average degree of both vertices
                heuristics[i, j] = (1.0 / (distance_matrix[i, j] + 1e-9)) * (degree_approximation[i] + degree_approximation[j]) / 2.0  # Add a small value to the distance to avoid division by zero.
            else:
                heuristics[i,j] = 0.0 #No self loops.
    return heuristics
```
