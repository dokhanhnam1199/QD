```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Ada Lovelace's Heuristic for TSP.

    This heuristic combines several strategies to estimate the desirability of including each edge in the final TSP tour.

    1.  Inverse Distance:  Shorter distances are initially favored.
    2.  Nearest Neighbor Influence: Edges connecting nodes to their nearest neighbors are prioritized.
    3.  Avoidance of Long Edges:  Penalizes long edges by raising the inverse distance to a power.
    4.  Start/End Point Bias: Heuristically encourage the solutions to go to or back from specific start/end nodes.
        This may speed up the algorithm given a fixed start point.
    """
    n = distance_matrix.shape[0]
    heuristics = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance
    heuristics = 1.0 / (distance_matrix + 1e-9) # Adding a small value to avoid division by zero
    # 2. Nearest Neighbor Influence
    for i in range(n):
        #Find closest neighbor for node i, excluding self-loops.

        temp_distances = distance_matrix[i].copy()
        temp_distances[i] = np.inf # Ensure that the node is not selected as its own nearest neighbor.

        nearest_neighbor = np.argmin(temp_distances) # argmin returns the index of the smallest value

        heuristics[i, nearest_neighbor] *= 2.0 # Boost the priority for connections to the nearest neighbor.
        heuristics[nearest_neighbor, i] *= 2.0 # Ensure symmetry of heuristics.

    # 3. Avoidance of Long Edges
    heuristics = heuristics ** 1.5 # Further amplify the priority of shorter edges

    # 4. Start/End point bias: assume index 0 is the start point
    heuristics[0, :] *= 1.2
    heuristics[:, 0] *= 1.2

    #Ensure no inf values
    heuristics[np.isinf(heuristics)] = 0
    return heuristics
```
