```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = np.max(bins_remain_cap)  # Assuming all bins have the same size
    # 1. Feasibility: Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item

    # 2. Residual Capacity Priority (Scaled to item size)
    residual_capacity = bins_remain_cap - item
    residual_capacity_normalized = np.clip(residual_capacity / item, 0, 1)  # Normalize and clip
    residual_priority = np.where(feasible_bins, 1 - residual_capacity_normalized, 0)  # Higher priority for smaller residual

    # 3. Fill-Level Bonus (Favor bins that are already somewhat full)
    fill_level = (bin_size - bins_remain_cap) / bin_size  # Fraction of bin already filled
    fill_level_bonus = np.clip(fill_level, 0, 1) * feasible_bins  # Bonus scaled by fill level

    # 4. Load Balancing (Encourage using less full bins)
    load_balancing_bonus = (bins_remain_cap / bin_size) * feasible_bins

    # Combine priorities with additive bonuses and scaling
    priorities = residual_priority + 0.2 * fill_level_bonus + 0.1 * load_balancing_bonus
    return priorities
```
