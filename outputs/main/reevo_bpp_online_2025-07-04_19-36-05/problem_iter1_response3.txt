```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: Feasibility.  Infeasible bins get -inf priority.
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf
    
    # Rule 2:  Try to fill bins as much as possible, but avoid overfilling significantly.
    #          Use a penalty based on wasted space.
    
    feasible = ~infeasible
    remaining_after_fit = bins_remain_cap[feasible] - item
    
    # Higher priority if closer to full.  Also, introduce a slight penalty for too much waste.
    priorities[feasible] = bins_remain_cap[feasible] / (bins_remain_cap[feasible] + item) - 0.1 * (item - bins_remain_cap[feasible])
    
    # Rule 3: Small preference for bins that are already non-empty.
    # This reduces the number of bins in use early on.
    already_used = bins_remain_cap < 1.0 # Assumes bin size is 1.0
    priorities[already_used] += 0.05
    
    
    return priorities
```
