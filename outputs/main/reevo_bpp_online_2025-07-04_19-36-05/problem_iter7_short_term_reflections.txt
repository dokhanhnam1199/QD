Prioritize item-relative waste, existing fill, and scale penalties appropriately. Fine-tune exponential decay factors.

Prioritize feasibility, reward fullness, penalize fragmentation aggressively (e.g., squared/cubed), and boost near-full bins.

Prioritize feasibility, minimize fragmentation, and consider existing fill level and item size relative to residual capacity.

Prioritize feasibility, normalize, penalize fragmentation, reward near-full bins, and avoid small gaps.

Key improvements: Scaling penalties/bonuses relative to `item` size and prioritizing existing fill. Consider bin diversity.

Emphasize best-fit, aggressive near-full bonuses, stronger fragmentation penalties, and small gap handling.

Prioritize feasibility, normalize capacity, penalize fragmentation, and reward near-full bins. If infeasible, use relative capacity.

Focus on feasibility, best fit, fragmentation, and relative item size consideration with proper scaling.

Prioritize feasibility, aggressively reward fullness, penalize fragmentation cubically, and add near-full bonus.

Cube fragmentation penalty, fullness reward, near-full bonus, and feasibility are key improvements.

