```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First Fit Decreasing heuristic component: prefer bins that can fit the item
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1  # Give a base priority if it fits

    # Best Fit heuristic component: prioritize bins with smallest remaining capacity after placing item, but only if item fits
    remaining_after_fit = bins_remain_cap - item
    remaining_after_fit[~fit_mask] = np.inf  # set to infinity if it does not fit so it will not be considered the best fit
    best_fit_idx = np.argmin(remaining_after_fit)
    if np.isfinite(remaining_after_fit[best_fit_idx]): #check that there exists a feasible bin
        priorities[best_fit_idx] += 2  # Higher priority for best fit

    # Avoid Fragmentation: Penalize bins where the item would create small fragment
    fragmentation_threshold = 0.1 #parameterizable
    small_fragment_mask = (remaining_after_fit > 0) & (remaining_after_fit < fragmentation_threshold * np.max(bins_remain_cap)) & fit_mask
    priorities[small_fragment_mask] -= 1 #reduce the priorities for those bins if available.


    # Encourage filling bins before opening new ones: Boost the score for partially filled bins significantly more than empty bins
    empty_bin_mask = bins_remain_cap == np.max(bins_remain_cap) #assuming all bins are initially the same size. If not, this needs to be an input.
    priorities[~empty_bin_mask] += 0.5 # a boost to non empty bins.
    return priorities
```
