```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - 1.0  # Return low priority if no bin fits

    residual_capacity = bins_remain_cap - item
    bin_capacity = np.max(bins_remain_cap)
    bin_utilization = (bin_capacity - bins_remain_cap) / bin_capacity

    # 1. Best Fit Criterion (Exponential, item-relative)
    best_fit_priority = np.where(feasible_bins, np.exp(-5 * np.abs(residual_capacity) / item), 0)

    # 2. Fragmentation Penalty (Exponential, item-relative)
    fragmentation_penalty = np.where(feasible_bins, np.exp(-1 * residual_capacity / item), 0)

    # 3. Encourage Filling (Bonus based on existing fill level, scaled)
    existing_fill_level = bin_utilization
    already_full_bonus = feasible_bins * existing_fill_level

    # 4. Near-Full Bonus (Direct, item-relative threshold)
    near_full_threshold = 0.1 * item
    near_full_bonus = np.where(
        feasible_bins & (residual_capacity >= 0) & (residual_capacity <= near_full_threshold),
        1.0,
        0.0,
    )

    # 5. Load balancing among bins (variance penalty); scaled by item size to normalize
    load_imbalance_penalty = -np.var(bin_utilization) / item

    # 6. Prioritize less utilized bins (inversely proportional to utilization)
    utilization_penalty = -bin_utilization

    # Combine priorities additively with weights
    priorities = (
        best_fit_priority
        + 0.5 * fragmentation_penalty
        + 0.3 * already_full_bonus
        + 0.8 * near_full_bonus
        + 0.1 * load_imbalance_penalty
        + 0.2 * utilization_penalty
    )

    return priorities
```
