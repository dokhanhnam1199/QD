```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First Fit Decreasing-like: prioritize bins with smallest remaining capacity that fits the item
            priorities[i] = cap - item # Smaller difference means higher priority (less wasted space)
            priorities[i] = 1/(priorities[i] + 0.000001) #avoid division by zero. Large reward for minimal wastage
            #Alternative idea : prioritize bins that, after adding the item, leave the closest capacity to some 'ideal' value
            #ideal_capacity = 0.5 #Target 50% full bins
            #priorities[i] = -abs((cap - item) - ideal_capacity) #Prioritize bins that get close to ideal capacity

        else:
            priorities[i] = -1000 # Very low priority if the item doesn't fit
            #Alternative:
            #priorities[i] = -np.inf #Item does not fit

    return priorities
```
