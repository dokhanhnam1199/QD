```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap) # Assume all bins have same capacity
    
    # 1. Feasibility: Only consider bins that can fit the item. Infeasible bins get a very large negative priority.
    feasible_bins = bins_remain_cap >= item
    priorities = np.where(~feasible_bins, -1e9, 0) # Penalize infeasible bins harshly.

    # 2. Best Fit Criterion: Prioritize bins where residual capacity is small (bin-relative scaling).
    residual_capacity = bins_remain_cap - item
    best_fit_priority = np.where(feasible_bins, np.exp(-5 * residual_capacity / bin_capacity), 0)

    # 3. Fragmentation Avoidance: Heavily penalize leaving too much space (cubic penalty, bin-relative). Stronger penalty.
    fragmentation_penalty = np.where(feasible_bins, np.exp(-20 * (residual_capacity / bin_capacity)**3), 1)

    # 4. Reward Near-Full Bins: Directly reward bins close to being full after placement (bin-relative).
    near_full_reward = np.where(feasible_bins, np.exp(-5 * np.abs(residual_capacity / bin_capacity)), 0)

    # 5. Learned Weights (Illustrative): These would ideally be learned.
    w_best_fit = 0.6
    w_fragmentation = 0.2
    w_near_full = 0.2

    # 6. Combine Heuristics Multiplicatively:
    priorities = np.where(feasible_bins, w_best_fit * best_fit_priority * w_fragmentation * fragmentation_penalty + w_near_full * near_full_reward, priorities)

    # 7. Directly Reward Almost Full (even more direct than near_full_reward).
    almost_full_bonus = np.where(feasible_bins & (residual_capacity <= 0.1 * bin_capacity), 1.0, 0.0) # Binary Reward
    priorities = np.where(almost_full_bonus>0, priorities+1, priorities)

    # 8. Slightly prefer to use bins that already have some items in them (reduce number of bins used)
    # Only apply this bonus when there are feasible bins, and the item is not too small.
    existing_item_bonus = np.where(feasible_bins & (bins_remain_cap < bin_capacity) & (item > 0.1 * bin_capacity), 0.1, 0.0)
    priorities = priorities + existing_item_bonus
    

    return priorities
```
