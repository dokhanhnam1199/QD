```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First Fit Decreasing (FFD) Inspired: Prioritize bins that can fit the item snugly.
    fit_mask = bins_remain_cap >= item
    
    # Give a bonus to bins where the item fits with little wasted space.  The smaller the
    # waste, the better the fit, the higher the priority.  Use a non-linear scaling.
    waste = bins_remain_cap - item
    priorities[fit_mask] = 1.0 / (waste[fit_mask] + 0.0001) # Avoid division by zero
    
    # Next Fit Inspired: Give a small bonus to the last bin used (or the first if none are used)
    # This encourages using the same bin repeatedly, before opening a new one, but 
    # the "snug fit" above will generally outweigh it.

    # Bins that cannot fit receive very low priority, slightly randomized.
    priorities[~fit_mask] = -1000 + np.random.rand(np.sum(~fit_mask))
    
    return priorities
```
