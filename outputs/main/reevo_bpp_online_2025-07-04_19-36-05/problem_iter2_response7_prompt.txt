{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Assign high priority to bins that can fit the item\n    can_fit = bins_remain_cap >= item\n    priorities[can_fit] = 1.0\n\n    # Scale priority based on remaining capacity after packing the item.\n    remaining_capacity = bins_remain_cap[can_fit] - item\n    priorities[can_fit] += remaining_capacity / np.max(bins_remain_cap) # np.max(bins_remain_cap) serves as scaling factor\n\n    # If no bin can fit the item, assign some default priorities. Avoid selecting fully empty bins first if possible.\n    if not np.any(can_fit):\n        priorities = bins_remain_cap / np.max(bins_remain_cap) # scaled remaining capacity.\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Give a high priority to bins that can accommodate the item\n    can_accommodate = bins_remain_cap >= item\n    priorities[can_accommodate] = 1\n\n    # Prioritize bins with smaller remaining capacity among those that can fit the item.\n    # This encourages filling up bins as much as possible and reducing fragmentation.\n    priorities[can_accommodate] = priorities[can_accommodate] + (1 - (bins_remain_cap[can_accommodate] - item) / bins_remain_cap[can_accommodate])\n\n    # For bins that cannot accommodate the item, give a negative priority\n    # based on how much the item exceeds the bin's capacity. This discourages\n    # selecting nearly full bins.\n\n    cannot_accommodate = bins_remain_cap < item\n    priorities[cannot_accommodate] = - (item - bins_remain_cap[cannot_accommodate]) / np.mean(bins_remain_cap) if np.any(bins_remain_cap) > 0 else -1\n\n    return priorities\n\n[Reflection]\nThe better code prioritizes filling bins, penalizes exceeding capacity, and avoids scaling issues.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}