```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = np.max(bins_remain_cap)  # Assuming all bins have the same initial capacity

    # 1. Feasibility: Only consider bins that can fit the item. Infeasible bins get -inf priority
    feasible_bins = bins_remain_cap >= item
    priorities = np.where(feasible_bins, priorities, -np.inf)

    # 2. Normalize remaining capacity for better comparison
    normalized_remaining_cap = bins_remain_cap / bin_size

    # 3. Best Fit & Fragmentation Penalty: Strongly penalize small gaps (fragmentation).
    residual_capacity = bins_remain_cap - item
    normalized_residual = residual_capacity / bin_size
    
    # Explicit penalty for small gaps; scaled by the bin size to make it relative.
    small_gap_threshold = 0.1
    small_gap_penalty = np.where(feasible_bins & (residual_capacity > 0) & (residual_capacity <= small_gap_threshold * bin_size), -5, 0)

    # Reward bins that are nearly full after adding the item.
    near_full_bonus = np.where(feasible_bins, np.exp(-10 * normalized_residual), 0)
    
    # Prioritize bins with less remaining capacity before adding the item, but after filtering infeasible ones
    fill_level_priority = np.where(feasible_bins, 1 - normalized_remaining_cap, 0)
    
    # 4. Infeasible Bin Handling - Relative Capacity: if item doesn't fit in ANY bin, choose the bin with the largest remaining capacity.
    if not np.any(feasible_bins):
        priorities = bins_remain_cap / bin_size # Use relative capacity. Remove infeasible marker (-inf)
        return priorities

    priorities = near_full_bonus + fill_level_priority + small_gap_penalty
    return priorities
```
