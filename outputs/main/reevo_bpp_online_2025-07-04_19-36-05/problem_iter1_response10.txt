```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing inspired heuristic: Prefer bins where the item fits best,
    # but penalize bins that are almost full or too empty.

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Base priority: remaining capacity after packing item
            remaining = cap - item
            priorities[i] = remaining

            # Bonus for better fit: prioritize bins that use more of their capacity
            priorities[i] += item / cap  # Ratio of item size to bin capacity

            # Penalty for being too empty afterwards
            priorities[i] -= (remaining / cap)**2 # Squaring the remaining capacity

            # Bonus for smaller items - to fill smaller bins better.
            priorities[i] += np.exp(-item)
        else:
            priorities[i] = -np.inf  # Item does not fit

    return priorities
```
