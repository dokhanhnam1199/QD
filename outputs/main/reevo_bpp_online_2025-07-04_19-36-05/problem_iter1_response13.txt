```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give very low priority (high negative value) to bins that cannot fit the item
    priorities[bins_remain_cap < item] = -np.inf
    
    # For bins that can fit the item, prioritize bins that result in the least wasted space.
    # Calculate wasted space if the item is placed in each bin.
    wasted_space = bins_remain_cap - item
    
    # Give higher priority to bins with smaller wasted space. Using inverse of wasted space.
    # Adding a small constant to avoid division by zero and to ensure all priorities are positive
    priorities[bins_remain_cap >= item] = 1 / (wasted_space[bins_remain_cap >= item] + 0.001)

    # Further prioritize bins close to being full *after* placing the item
    # This encourages closing bins and reduces fragmentation
    remaining_fraction = (bins_remain_cap[bins_remain_cap >= item] - item) / bins_remain_cap[bins_remain_cap >= item]
    priorities[bins_remain_cap >= item] += (1-remaining_fraction)*10  # Scale factor can be tuned
    
    return priorities
```
