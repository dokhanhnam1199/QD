```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining capacity after adding the item.
    remaining_capacities = bins_remain_cap - item
    
    # Give high priority to bins where the item fits (positive remaining capacity).
    # Give higher priority to bins that result in less wasted space.
    valid_bins = remaining_capacities >= 0
    
    if np.any(valid_bins):  # If any bin can accommodate the item:
        priorities[valid_bins] = (1 / (remaining_capacities[valid_bins] + 1e-9)) # Avoid division by zero, prioritize less wasted space
    else:
        # If no bin can accommodate the item, try to find the bin with the smallest remaining capacity
        # Prioritize the bin that needs least space to fit the item.
        priorities = -bins_remain_cap # assign negative priority
        # Give a large penalty
        priorities = priorities - 1000
    return priorities
```
