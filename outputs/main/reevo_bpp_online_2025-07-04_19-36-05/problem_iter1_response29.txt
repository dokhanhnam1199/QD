```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Immediate fit bonus
    immediate_fit = bins_remain_cap == item
    priorities[immediate_fit] += 1000

    # Near fit bonus
    near_fit = (bins_remain_cap > item) & (bins_remain_cap <= item * 1.1) # within 10%
    priorities[near_fit] += 500

    # Try to fill fullest bins first, avoiding excessive fragmentation
    valid_bins = bins_remain_cap >= item
    priorities[valid_bins] += bins_remain_cap[valid_bins] # higher remaining cap -> lower fragmentation -> higher priority

    # Avoid bins that will become too empty, leading to wastage
    too_empty = (bins_remain_cap - item) < 0.2 # e.g., remaining cap < 20% bin size
    priorities[too_empty] -= 100  # Penalize

    # Invalidate bins that can't accommodate the item
    invalid_bins = bins_remain_cap < item
    priorities[invalid_bins] = -np.inf
    
    return priorities
```
