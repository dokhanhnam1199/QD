```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First priority: Can the item even fit?
    fit_mask = bins_remain_cap >= item

    # If it doesn't fit, give it a very low priority (negative infinity)
    priorities[~fit_mask] = -np.inf

    # For bins where it *does* fit, calculate a priority based on remaining space
    remaining_space = bins_remain_cap[fit_mask] - item

    # A good heuristic is to prefer bins where the remaining space is small, but not too small
    # We want to avoid leaving tiny slivers that are useless for later items

    # Option 1: Using the absolute remaining space
    # priorities[fit_mask] = -np.abs(remaining_space - item / 2)

    # Option 2: A combined approach: Favor near-full bins, but penalize leaving very small gaps
    priorities[fit_mask] = (bins_remain_cap[fit_mask] / (item + 1e-9)) - (np.abs(remaining_space - item/3) / (item + 1e-9))
    
    #Option 3 : Best Fit heuristic (prioritize bins where item fits most snugly)
    #priorities[fit_mask] = -remaining_space

    #Option 4 : Reward using more space and penalize wasting space.
    # priorities[fit_mask] = item / bins_remain_cap[fit_mask] - remaining_space

    return priorities
```
