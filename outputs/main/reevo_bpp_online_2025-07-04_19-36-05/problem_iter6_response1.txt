```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Prioritizes feasibility, then fullness. Aggressively reward near-full bins
    and penalize fragmentation and wasted space, scaling rewards/penalties
    proportionally to bin capacity. Vectorized operations for efficiency.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    original_capacities = bins_remain_cap + 1e-9  #avoid zero divison error in case all the bins were filled

    # Calculate remaining space after placing the item. Negative values indicate item won't fit.
    remaining_after_placement = bins_remain_cap - item

    # Feasibility check: Only consider bins where the item fits.
    feasible_bins = remaining_after_placement >= 0

    if np.any(feasible_bins):
        # Fullness reward: Higher score for bins that become fuller after placement.
        fullness_reward = (item / original_capacities) * feasible_bins  # Only apply to feasible bins. Higher score if item is large compared to bin capacity

        # Fragmentation penalty: Penalize bins with significant remaining space after placement.
        # Scale penalty by the *cube* of the remaining ratio to aggressively penalize wasted space
        fragmentation_penalty = -((remaining_after_placement / original_capacities)**3) * feasible_bins

        # Near-full bonus: Extra reward if the bin becomes nearly full after placement.
        near_full_threshold = 0.2  # Define "nearly full" as remaining capacity <= 20% of original_capacities capacity.
        near_full_bonus = (remaining_after_placement <= (near_full_threshold * original_capacities)) * feasible_bins * 5  # Significantly boost priority if near full

        # Combine rewards and penalties
        priorities = fullness_reward + fragmentation_penalty + near_full_bonus

    else:
        # If no bin fits, assign a negative priority based on remaining capacity (prefer to open a new bin).
        priorities = -bins_remain_cap

    return priorities
```
