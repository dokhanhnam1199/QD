{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Assign high priority to bins that can fit the item\n    can_fit = bins_remain_cap >= item\n    priorities[can_fit] = 1.0\n\n    # Scale priority based on remaining capacity after packing the item.\n    remaining_capacity = bins_remain_cap[can_fit] - item\n    priorities[can_fit] += remaining_capacity / np.max(bins_remain_cap) # np.max(bins_remain_cap) serves as scaling factor\n\n    # If no bin can fit the item, assign some default priorities. Avoid selecting fully empty bins first if possible.\n    if not np.any(can_fit):\n        priorities = bins_remain_cap / np.max(bins_remain_cap) # scaled remaining capacity.\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First priority: Can the item even fit?\n    fit_mask = bins_remain_cap >= item\n\n    # If it doesn't fit, give it a very low priority (negative infinity)\n    priorities[~fit_mask] = -np.inf\n\n    # For bins where it *does* fit, calculate a priority based on remaining space\n    remaining_space = bins_remain_cap[fit_mask] - item\n\n    # A good heuristic is to prefer bins where the remaining space is small, but not too small\n    # We want to avoid leaving tiny slivers that are useless for later items\n\n    # Option 1: Using the absolute remaining space\n    # priorities[fit_mask] = -np.abs(remaining_space - item / 2)\n\n    # Option 2: A combined approach: Favor near-full bins, but penalize leaving very small gaps\n    priorities[fit_mask] = (bins_remain_cap[fit_mask] / (item + 1e-9)) - (np.abs(remaining_space - item/3) / (item + 1e-9))\n    \n    #Option 3 : Best Fit heuristic (prioritize bins where item fits most snugly)\n    #priorities[fit_mask] = -remaining_space\n\n    #Option 4 : Reward using more space and penalize wasting space.\n    # priorities[fit_mask] = item / bins_remain_cap[fit_mask] - remaining_space\n\n    return priorities\n\n[Reflection]\nFocus on feasibility first. Then, balance packing density with avoiding small, unusable gaps.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}