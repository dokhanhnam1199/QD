```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. Feasibility: Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item

    # 2. Remaining capacity ratio relative to item size. Clipped to avoid extreme values.
    remaining_ratio = np.clip(bins_remain_cap / item, 0, 5)  # Clip to reasonable range

    # 3. Best Fit - Additive bonus based on how well the item fits.
    best_fit_bonus = np.where(feasible_bins, np.exp(-np.abs(bins_remain_cap - item) / item), 0)

    # 4. Load Balancing - Prioritize bins with higher remaining capacity *relative to overall bin size*.
    load_balance_bonus = bins_remain_cap / bin_capacity

    # 5. Avoid Fragmentation - Penalty for leaving too much space *relative to item size*
    frag_penalty = np.where(feasible_bins, np.exp(-bins_remain_cap / item), 0)

    priorities = (
        best_fit_bonus
        + 0.2 * load_balance_bonus
        - 0.1 * frag_penalty
    )

    return priorities
```
