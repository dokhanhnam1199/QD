```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = np.max(bins_remain_cap)

    # 1. Feasibility: Only consider bins that can fit the item. Infeasible bins get a large negative priority.
    feasible_bins = bins_remain_cap >= item
    priorities = np.where(~feasible_bins, -1e9, priorities)

    # 2. Best Fit Criterion: Prefer bins with remaining capacity closest to the item size.
    residual_capacity = bins_remain_cap - item
    best_fit_priority = np.where(feasible_bins, np.exp(-5 * np.abs(residual_capacity) / bin_size), 0)  # Scale by bin size

    # 3. Avoid Fragmentation: Penalize bins with too much remaining capacity after placing the item. Scale penalty by item size. Make it cubic to penalize more heavily.
    fragmentation_penalty = np.where(feasible_bins, -10 * (residual_capacity / bin_size)**3 * (item / bin_size), 0)

    # 4. Reward Existing Fill Levels: Prioritize bins that are already somewhat full to avoid starting new bins unnecessarily. Scale by item size.
    existing_fill_level = (bin_size - bins_remain_cap) / bin_size
    existing_fill_priority = np.where(feasible_bins, 2 * existing_fill_level * (item / bin_size), 0)  # Scale by item size

    # Combine priorities
    priorities = best_fit_priority + fragmentation_penalty + existing_fill_priority

    return priorities
```
