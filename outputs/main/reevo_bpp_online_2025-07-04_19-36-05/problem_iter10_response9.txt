```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = 1.0  # Assuming bin size is 1, can be generalized.

    # 1. Feasibility: Only consider bins that can fit the item.  Set to -inf if not feasible
    feasible_bins = bins_remain_cap >= item
    priorities = np.where(~feasible_bins, -np.inf, priorities)

    # 2. Best Fit Criterion: Prefer bins with remaining capacity closest to the item size.
    residual_capacity = bins_remain_cap - item
    best_fit_priority = np.where(feasible_bins, np.exp(-2 * np.abs(residual_capacity) / bin_size), 0)

    # 3. Avoid Fragmentation: Penalize bins with too much remaining capacity after placing the item.
    fragmentation_penalty = np.where(feasible_bins, np.exp(-2 * residual_capacity / bin_size), 1)

    # 4. Filling Existing Bins: Prioritize bins that are already somewhat full.
    fill_level = (bin_size - bins_remain_cap) / bin_size
    fill_priority = np.where(feasible_bins, fill_level, 0)

    # Combine priorities.  Best fit and fragmentation are most important.
    priorities = best_fit_priority * fragmentation_penalty + 0.2 * fill_priority

    # Exploration: Add a small random component to encourage exploration of different bins.
    exploration_bonus = 0.01 * np.random.rand(len(bins_remain_cap))
    priorities = np.where(feasible_bins, priorities + exploration_bonus, priorities) # Add exploration only to feasible bins.

    # Graceful Infeasibility Handling: If no bin is feasible, try to put in bin with least waste (least negative residual).
    if not np.any(feasible_bins):
        priorities = -np.abs(residual_capacity)  # Use negative residual as priority

    return priorities
```
