```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Prefer bins where the item fits, but with minimal wasted space.
    #   Bins that can't fit the item get a priority of -np.inf
    #   Bins that fit get a score proportional to how much space is left after packing
    #   This promotes filling bins as much as possible.
    can_fit = item <= bins_remain_cap
    priorities[~can_fit] = -np.inf  # Give a very low priority for bins that can't fit

    remaining_space = bins_remain_cap - item
    priorities[can_fit] = 1.0 / (remaining_space[can_fit] + 1e-9)  # Avoid division by zero
    
    # Heuristic 2: Add small bonus for almost full bins to finish them off.
    almost_full = (bins_remain_cap > item) & (bins_remain_cap < (item * 1.2))
    priorities[almost_full] += 0.5

    # Heuristic 3: Consider the utilization rate if we placed the item in a particular bin
    utilization = item / bins_remain_cap
    priorities[can_fit] += utilization[can_fit]

    #Heuristic 4: Try to balance loads, assign a small penalty for selecting near-empty bins.
    #    this can avoid bins filling very slowly while others are filled close to full
    emptyish = bins_remain_cap > (np.mean(bins_remain_cap) * 1.5)
    priorities[emptyish] -= 0.1
    

    return priorities
```
