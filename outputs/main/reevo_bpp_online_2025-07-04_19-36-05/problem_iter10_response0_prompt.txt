{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap) # Assume all bins have same capacity\n    \n    # 1. Feasibility: Only consider bins that can fit the item. Infeasible bins get a very large negative priority.\n    feasible_bins = bins_remain_cap >= item\n    priorities = np.where(~feasible_bins, -1e9, 0) # Penalize infeasible bins harshly.\n\n    # 2. Best Fit Criterion: Prioritize bins where residual capacity is small (item-relative scaling).\n    residual_capacity = bins_remain_cap - item\n    best_fit_priority = np.where(feasible_bins, np.exp(-5 * residual_capacity / item), 0)\n\n    # 3. Fragmentation Avoidance: Heavily penalize leaving too much space (cubic penalty).\n    fragmentation_penalty = np.where(feasible_bins, np.exp(-10 * (residual_capacity / bin_capacity)**3), 1)\n\n    # 4. Reward Near-Full Bins: Directly reward bins close to being full after placement.\n    near_full_reward = np.where(feasible_bins, np.exp(-5 * np.abs(residual_capacity / bin_capacity)), 0)\n\n    # 5. Learned Weights (Illustrative): These would ideally be learned.\n    w_best_fit = 0.6\n    w_fragmentation = 0.2\n    w_near_full = 0.2\n\n    # 6. Combine Heuristics Multiplicatively:\n    priorities = np.where(feasible_bins, w_best_fit * best_fit_priority * w_fragmentation * fragmentation_penalty + w_near_full * near_full_reward, priorities)\n\n    # 7. Directly Reward Almost Full (even more direct than near_full_reward).\n    almost_full_bonus = np.where(feasible_bins & (residual_capacity <= 0.1 * bin_capacity), 1.0, 0.0) # Binary Reward\n    priorities = np.where(almost_full_bonus>0, priorities+1, priorities)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility check\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        return priorities - 1.0  # Return low priority if no bin fits\n\n    # Residual capacity after placing the item\n    residual_capacity = bins_remain_cap - item\n\n    # 1. Best Fit Criterion (Exponential, scaled by item size)\n    best_fit_priority = np.where(feasible_bins, np.exp(-5 * np.abs(residual_capacity) / item), 0)\n\n    # 2. Fragmentation Penalty (Exponential, scaled by item size)\n    fragmentation_penalty = np.where(feasible_bins, np.exp(-1 * residual_capacity / item), 0)\n\n    # 3. Encourage Filling (Bonus based on current fill level)\n    existing_fill_level = (bins_remain_cap) / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0\n    already_full_bonus = feasible_bins * existing_fill_level\n\n    # 4. Reward bins close to being full after placement\n    near_full_threshold = 0.1 * item\n    near_full_bonus = np.where((residual_capacity >= 0) & (residual_capacity <= near_full_threshold), 1.0, 0.0)\n\n    # Combine priorities with adjusted weights\n    priorities = (\n        best_fit_priority\n        + 0.6 * fragmentation_penalty\n        + 0.4 * already_full_bonus\n        + 0.7 * near_full_bonus\n    )\n\n    return priorities\n\n[Reflection]\nAdditive combination, direct rewards, and item-relative scaling improve bin packing heuristic performance.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}