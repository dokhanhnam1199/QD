```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. Feasibility: Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item

    # If no bin is feasible, prioritize bins with largest remaining capacity (relative).
    if not np.any(feasible_bins):
      return bins_remain_cap / bin_capacity

    # 2. Best Fit Criterion (emphasized): Prioritize bins with remaining capacity closest to the item size, but only if feasible.
    residual_capacity = bins_remain_cap - item
    best_fit_priority = np.where(feasible_bins, np.exp(-5 * np.abs(residual_capacity)), 0)  # Emphasized using exp

    # 3. Fragmentation Penalty (stronger): Heavily penalize bins with too much remaining capacity.
    fragmentation_penalty = np.where(feasible_bins, np.exp(-5 * residual_capacity / bin_capacity), 0)

    # 4. Near-Full Bonus (enhanced): Significantly reward bins that become near-full after placing the item.
    almost_full_bonus = np.where(feasible_bins, np.exp(-20 * np.abs(residual_capacity) / bin_capacity), 0) # More aggressive bonus

    # 5. Explicit Small Gap Penalty: Penalize bins that leave a small gap after placing the item.
    small_gap_penalty = np.where(feasible_bins & (residual_capacity > 0) & (residual_capacity < 0.1 * bin_capacity), -0.5, 0)

    # 6. Normalize Remaining Space: To ensure consistent scaling.
    normalized_remaining_space = bins_remain_cap / bin_capacity

    priorities = (
        best_fit_priority
        + 0.8 * almost_full_bonus
        + 0.3 * fragmentation_penalty
        + small_gap_penalty # Apply penalty
        + 0.1 * normalized_remaining_space # Add base priority
    )

    return priorities
```
