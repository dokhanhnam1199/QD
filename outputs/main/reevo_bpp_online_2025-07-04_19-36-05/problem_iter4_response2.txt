```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Identify bins that can accommodate the item
    can_accommodate = bins_remain_cap >= item

    if np.any(can_accommodate):
        # Base priority for bins that can accommodate the item
        priorities[can_accommodate] = 1.0

        # Prioritize bins with smaller remaining capacity, minimizing waste
        remaining_capacity = bins_remain_cap[can_accommodate] - item
        priorities[can_accommodate] += (1 - (remaining_capacity / bins_remain_cap[can_accommodate]))

        # Prioritize bins where the remaining capacity is close to a certain threshold.
        # This can be tuned.  Here, we prioritize if remaining capacity is close to 0.
        priorities[can_accommodate] += np.exp(-5 * remaining_capacity) # exponential decay, tunable parameter

        # Further bonus for bins that are already quite full (before adding the item).
        # Avoids creating mostly empty new bins.
        priorities[can_accommodate] += (bins_remain_cap[can_accommodate] / np.max(bins_remain_cap))

    # Penalize bins that cannot accommodate the item
    cannot_accommodate = bins_remain_cap < item
    if np.any(cannot_accommodate):
        # Negative priority based on how much the item exceeds the bin's capacity
        priorities[cannot_accommodate] = - (item - bins_remain_cap[cannot_accommodate]) / item

    return priorities
```
