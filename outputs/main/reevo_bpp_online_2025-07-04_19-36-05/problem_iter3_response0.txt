```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining space after placing the item. Negative values indicate item won't fit.
    remaining_after_placement = bins_remain_cap - item
    
    # Feasibility check: very low priority for bins that can't fit the item.
    infeasible_mask = remaining_after_placement < 0
    priorities[infeasible_mask] = -np.inf  # Mark as infeasible

    # Calculate fullness-based priority for feasible bins.
    feasible_mask = ~infeasible_mask
    if np.any(feasible_mask):
        # Reward fullness: higher priority for bins that will be more full after placement
        fullness_ratio = (bins_remain_cap[feasible_mask] - remaining_after_placement[feasible_mask]) / bins_remain_cap[feasible_mask]  # item / bins_remain_cap
        priorities[feasible_mask] = fullness_ratio**2 # Square to aggressively reward near-full bins

        #Penalize space wastage - favour smaller remainders.
        priorities[feasible_mask] -= (remaining_after_placement[feasible_mask] / np.max(bins_remain_cap))
        
    # If no bin fits, assign priority based on empty capacity (prefer adding to near empty bin)
    if np.all(infeasible_mask):
        priorities = -bins_remain_cap

    return priorities
```
