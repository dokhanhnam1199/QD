```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item

    # 2. Best Fit Criterion: Prefer bins with remaining capacity closest to the item size.
    residual_capacity = bins_remain_cap - item
    best_fit_priority = np.where(feasible_bins, np.exp(-np.abs(residual_capacity) / item), 0)

    # 3. Avoid Fragmentation: Penalize bins with too much remaining capacity after placing the item.
    fragmentation_penalty = np.where(feasible_bins, np.exp(-0.5 * residual_capacity / np.max(bins_remain_cap)), 1)

    # 4. Filling Existing Bins: Prioritize bins that are already somewhat full.
    existing_fill_level = bins_remain_cap / np.max(bins_remain_cap)
    existing_fill_priority = np.where(feasible_bins, 1 - existing_fill_level, 0)

    # Combine priorities multiplicatively and additively
    priorities = best_fit_priority * fragmentation_penalty + 0.1 * existing_fill_priority

    # If no bin is feasible, choose the one with least waste if we were to put it in
    if not np.any(feasible_bins):
      priorities = -np.abs(bins_remain_cap - item)

    return priorities
```
