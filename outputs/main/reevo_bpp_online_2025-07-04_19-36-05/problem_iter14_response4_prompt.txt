{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n\n    # 1. Feasibility: Only consider bins that can fit the item.\n    feasible_bins = bins_remain_cap >= item\n\n    # 2. Best Fit Criterion: Favor bins where remaining capacity is close to the item size.\n    residual_capacity = bins_remain_cap - item\n    best_fit_priority = np.where(feasible_bins, 1 / (1 + np.abs(residual_capacity)), 0)\n\n    # 3. Fragmentation Penalty: Penalize leaving too much empty space.\n    fragmentation_penalty = np.where(feasible_bins, np.exp(-2 * residual_capacity / bin_capacity), 0)\n\n    # 4. Near-Full Bonus: Reward filling bins that are close to being full.\n    near_full_bonus = np.where(feasible_bins, np.exp(-5 * np.abs(residual_capacity) / bin_capacity), 0)\n\n    # 5. Existing Fill Level: Prioritize bins that are already somewhat full.\n    existing_fill_level = np.where(feasible_bins, bins_remain_cap / bin_capacity, 0)\n\n    # 6. Item Size Ratio: Consider the ratio of item size to remaining bin capacity.\n    item_size_ratio = np.where(feasible_bins, item / (bins_remain_cap + 1e-9), 0)\n\n    # Combine the priorities additively with weights\n    priorities = (\n        0.4 * best_fit_priority\n        + 0.2 * fragmentation_penalty\n        + 0.15 * near_full_bonus\n        + 0.15 * existing_fill_level\n        + 0.1 * item_size_ratio\n    )\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        return priorities - 1.0  # Return low priority if no bin fits\n\n    residual_capacity = bins_remain_cap - item\n    bin_capacity = np.max(bins_remain_cap)\n\n    # 1. Best Fit Criterion (Exponential, item-relative)\n    best_fit_priority = np.where(feasible_bins, np.exp(-5 * np.abs(residual_capacity) / item), 0)\n\n    # 2. Fragmentation Penalty (Exponential, item-relative)\n    fragmentation_penalty = np.where(feasible_bins, np.exp(-1 * residual_capacity / item), 0)\n\n    # 3. Encourage Filling (Bonus based on existing fill level, scaled)\n    existing_fill_level = (bin_capacity - bins_remain_cap) / bin_capacity\n    already_full_bonus = feasible_bins * existing_fill_level\n\n    # 4. Near-Full Bonus (Direct, item-relative threshold)\n    near_full_threshold = 0.1 * item\n    near_full_bonus = np.where(feasible_bins & (residual_capacity >= 0) & (residual_capacity <= near_full_threshold), 1.0, 0.0)\n    \n    # 5. Balance load among bins (variance penalty)\n    bin_utilization = (bin_capacity - bins_remain_cap)/bin_capacity\n    load_imbalance_penalty = - np.var(bin_utilization)\n\n    # 6. Item Size consideration. Larger items need bins that are more empty.\n    empty_bin_bonus = np.where(feasible_bins, (bins_remain_cap / bin_capacity) * (item/bin_capacity), 0)\n\n\n    # Combine priorities additively with weights\n    priorities = (\n        best_fit_priority\n        + 0.5 * fragmentation_penalty\n        + 0.3 * already_full_bonus\n        + 0.8 * near_full_bonus\n        + 0.1 * load_imbalance_penalty\n        + 0.2 * empty_bin_bonus\n    )\n\n    return priorities\n\n[Reflection]\nFocus on item-relative scaling, direct bonuses, load balancing, and empty bin consideration for larger items.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}