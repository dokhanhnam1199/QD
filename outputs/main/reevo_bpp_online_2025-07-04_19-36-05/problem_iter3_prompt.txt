{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Prior reflection]\nPrioritize feasibility, then fullness. Aggressively reward near-full bins and penalize fragmentation and wasted space, scaling rewards/penalties proportionally to bin capacity. Vectorize operations for efficiency.\n\n\n[Code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Calculate remaining space after placing the item.  Negative values indicate item won't fit.\n    remaining_after_placement = bins_remain_cap - item\n    \n    # High priority for bins where the item fits best (smallest waste).\n    # But only if the item *does* fit!\n\n    fit_indices = remaining_after_placement >= 0\n    \n    if np.any(fit_indices):\n        priorities[fit_indices] = 1 / (remaining_after_placement[fit_indices] + 1e-6) #avoid division by zero\n        # Optionally, add a bonus for filling the bin close to full\n        priorities[fit_indices] += (item / bins_remain_cap[fit_indices])\n    \n    \n    # If no bin fits, assign a very low priority to all bins.  The calling\n    # function should then create a new bin. Setting it to the most empty bin\n    # avoids having empty bins and many bins containing little material each.\n    else:\n        priorities = -bins_remain_cap #give a negative score based on the size, prefer smaller capacity bins.\n    \n    return priorities\n\n[Improved code]\nPlease write a mutated function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}