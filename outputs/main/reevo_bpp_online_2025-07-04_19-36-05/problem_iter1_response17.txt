```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing heuristic inspiration
    # Give high priority to bins where the item fits well, but not perfectly
    fit_well = (bins_remain_cap >= item) & (bins_remain_cap <= 2 * item)
    priorities[fit_well] += 1.0 / (bins_remain_cap[fit_well] - item + 0.0001)  # Avoid division by zero

    # If no bin fits 'well', prioritize bins that can at least fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 0.5 / (bins_remain_cap[can_fit] + 0.0001)  #Give some priority if bin can fit, prioritize fuller bins.

    # Penalize bins that are too full (small capacity remaining)
    too_full = bins_remain_cap < item
    priorities[too_full] -= 10  # Very low priority if item does not fit.

    # Give a small bonus to bins that are nearly empty to encourage utilization of these
    nearly_empty = bins_remain_cap > 0.75 #If bin still has greater than 75% cap give slight bonus, otherwise do nothing to the priorities.
    priorities[nearly_empty] += 0.1

    return priorities
```
