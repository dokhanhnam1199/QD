```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Prioritizes feasibility, aggressively rewards fullness, penalizes fragmentation cubically, and adds a near-full bonus.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining space after placing the item.
    remaining_after_placement = bins_remain_cap - item

    # Feasibility check: Only consider bins where the item fits.
    feasible_bins = remaining_after_placement >= 0

    if np.any(feasible_bins):
        # Fullness reward: Higher score for bins that become fuller after placement.
        fullness_reward = (item / bins_remain_cap) * feasible_bins

        # Fragmentation penalty: Penalize bins with significant remaining space after placement.
        fragmentation_penalty = -((remaining_after_placement[feasible_bins] / bins_remain_cap[feasible_bins])**3)
        priorities[feasible_bins] += fragmentation_penalty

        # Near-full bonus: Extra reward if the bin becomes nearly full after placement.
        near_full_threshold = 0.2
        near_full_bins = (remaining_after_placement <= (near_full_threshold * bins_remain_cap)) & feasible_bins
        priorities[near_full_bins] += 3

        # Combine rewards and penalties
        priorities[feasible_bins] += fullness_reward[feasible_bins]

    else:
        # If no bin fits, assign a negative priority based on remaining capacity.
        priorities = -bins_remain_cap

    return priorities
```
