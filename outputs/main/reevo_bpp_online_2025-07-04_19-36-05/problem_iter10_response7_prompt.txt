{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_size = 1.0 # Assuming bin size is 1, can be generalized.\n\n    # 1. Feasibility: Only consider bins that can fit the item.  Penalize infeasible bins hard.\n    feasible_bins = bins_remain_cap >= item\n    priorities = np.where(~feasible_bins, -1e9, priorities) # Large negative priority for infeasible bins\n\n    # 2. Best Fit Criterion: Prefer bins with remaining capacity closest to the item size.\n    residual_capacity = bins_remain_cap - item\n    best_fit_priority = np.where(feasible_bins, np.exp(-5 * np.abs(residual_capacity) / item), 0)\n\n    # 3. Avoid Fragmentation: Penalize bins with too much remaining capacity after placing the item. Cubic penalty to punish fragmentation.\n    fragmentation_penalty = np.where(feasible_bins, 1 - (residual_capacity / bin_size)**3, 0)\n    fragmentation_penalty = np.clip(fragmentation_penalty, 0, 1) # Ensure penalty is between 0 and 1.\n\n    # 4. Bonus for Almost Full Bins: Reward near-full bins directly.\n    almost_full_bonus = np.where(feasible_bins, np.exp(-10 * np.abs(residual_capacity)), 0)\n\n    # 5. Item Size consideration: Prefer bins that result in minimal waste relative to the item size.\n    item_size_priority = np.where(feasible_bins, np.exp(-5 * residual_capacity / item), 0)\n\n    # Combine the heuristics multiplicatively, focusing on best-fit and fragmentation.\n    priorities = best_fit_priority * fragmentation_penalty * (1 + almost_full_bonus) * (1 + item_size_priority)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap) # Assume all bins have same capacity\n    \n    # 1. Feasibility: Only consider bins that can fit the item. Infeasible bins get a very large negative priority.\n    feasible_bins = bins_remain_cap >= item\n    priorities = np.where(~feasible_bins, -1e9, 0) # Penalize infeasible bins harshly.\n\n    # 2. Best Fit Criterion: Prioritize bins where residual capacity is small (item-relative scaling).\n    residual_capacity = bins_remain_cap - item\n    best_fit_priority = np.where(feasible_bins, np.exp(-5 * residual_capacity / item), 0)\n\n    # 3. Fragmentation Avoidance: Heavily penalize leaving too much space (cubic penalty).\n    fragmentation_penalty = np.where(feasible_bins, np.exp(-10 * (residual_capacity / bin_capacity)**3), 1)\n\n    # 4. Reward Near-Full Bins: Directly reward bins close to being full after placement.\n    near_full_reward = np.where(feasible_bins, np.exp(-5 * np.abs(residual_capacity / bin_capacity)), 0)\n\n    # 5. Learned Weights (Illustrative): These would ideally be learned.\n    w_best_fit = 0.6\n    w_fragmentation = 0.2\n    w_near_full = 0.2\n\n    # 6. Combine Heuristics Multiplicatively:\n    priorities = np.where(feasible_bins, w_best_fit * best_fit_priority * w_fragmentation * fragmentation_penalty + w_near_full * near_full_reward, priorities)\n\n    # 7. Directly Reward Almost Full (even more direct than near_full_reward).\n    almost_full_bonus = np.where(feasible_bins & (residual_capacity <= 0.1 * bin_capacity), 1.0, 0.0) # Binary Reward\n    priorities = np.where(almost_full_bonus>0, priorities+1, priorities)\n\n    return priorities\n\n[Reflection]\nLearned weights, bin-relative scaling, direct rewards, and strong fragmentation penalties improve online bin packing.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}