```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)  # Assuming all bins have the same max capacity

    # 1. Feasibility: Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item

    # If no bin can fit the item, prioritize bins with the most remaining capacity
    if not np.any(feasible_bins):
        return bins_remain_cap / bin_capacity

    # 2. Best Fit Criterion: Prefer bins with remaining capacity closest to the item size.
    residual_capacity = bins_remain_cap - item
    best_fit_priority = np.where(feasible_bins, 1.0 / (residual_capacity + 1e-9), 0)  # Avoid division by zero

    # 3. Fragmentation Penalty: Heavily penalize bins with too much remaining capacity after placing the item.
    fragmentation_penalty = np.where(feasible_bins, np.exp(-5 * residual_capacity / bin_capacity), 0)

    # 4. Bonus for Almost Full Bins: Encourage filling nearly full bins. Non-linear scaling.
    almost_full_bonus = np.where(feasible_bins, np.exp(-10 * np.abs(residual_capacity) / bin_capacity), 0)

    # 5. Normalize Remaining Capacity
    normalized_remaining_capacity = bins_remain_cap / bin_capacity

    # 6. Explicit Penalty for Small Gaps (e.g., gaps smaller than 10% of bin capacity)
    small_gap_penalty = np.where(feasible_bins & (residual_capacity < 0.1 * bin_capacity), -1, 0)  #Big negative score if small gap

    # Combine the priorities
    priorities = best_fit_priority * fragmentation_penalty + 2 * almost_full_bonus + small_gap_penalty

    return priorities
```
