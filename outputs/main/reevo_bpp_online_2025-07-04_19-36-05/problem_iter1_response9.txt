```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Prioritize bins where the item fits
    fit_indices = bins_remain_cap >= item
    priorities[fit_indices] = 1

    # Adjust priorities based on remaining capacity after placing the item
    remaining_after_fit = bins_remain_cap[fit_indices] - item
    
    # Give higher priority to bins with less remaining capacity after placing item (First-Fit Decreasing heuristic idea)
    priorities[fit_indices] += 1/(remaining_after_fit + 0.000001) # Adding small value to avoid zero division

    # If no bin can fit the item, give some priority to bins closest to fitting to avoid wasted space
    if not np.any(fit_indices):
      diffs = item - bins_remain_cap
      positive_diffs = diffs[diffs > 0]
      if positive_diffs.size > 0:
        min_diff = np.min(positive_diffs)
        closest_bins = diffs == min_diff
        priorities[closest_bins] = 0.01  # Small non-zero priority

    return priorities
```
