```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. Feasibility: Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item

    # 2. Best Fit Criterion: Favor bins where remaining capacity is close to the item size.
    residual_capacity = bins_remain_cap - item
    best_fit_priority = np.where(feasible_bins, 1 / (1 + np.abs(residual_capacity)), 0)

    # 3. Fragmentation Penalty: Penalize leaving too much empty space.
    fragmentation_penalty = np.where(feasible_bins, np.exp(-2 * residual_capacity / bin_capacity), 0)

    # 4. Near-Full Bonus: Reward filling bins that are close to being full.
    near_full_bonus = np.where(feasible_bins, np.exp(-5 * np.abs(residual_capacity) / bin_capacity), 0)

    # 5. Existing Fill Level: Prioritize bins that are already somewhat full.
    existing_fill_level = np.where(feasible_bins, bins_remain_cap / bin_capacity, 0)

    # 6. Item Size Ratio: Consider the ratio of item size to remaining bin capacity.
    item_size_ratio = np.where(feasible_bins, item / (bins_remain_cap + 1e-9), 0)

    # Combine the priorities additively with weights
    priorities = (
        0.4 * best_fit_priority
        + 0.2 * fragmentation_penalty
        + 0.15 * near_full_bonus
        + 0.15 * existing_fill_level
        + 0.1 * item_size_ratio
    )

    return priorities
```
