```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)
    bin_size = 1.0  # Standard bin size, assume normalized

    # Feasibility: Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item

    # Initialize priorities to a very small number for infeasible bins.
    priorities = np.where(feasible_bins, 1.0, 1e-6)

    # 1. Best Fit: Reward bins where the item fits with minimal remaining space.
    residual_capacity = bins_remain_cap - item
    best_fit_score = np.zeros(num_bins)
    best_fit_score[feasible_bins] = np.exp(-10 * residual_capacity[feasible_bins] / bin_size)

    # 2. Near-Full Reward: Give a bonus to bins that are close to being full after placing the item.
    near_full_reward = np.zeros(num_bins)
    near_full_reward[feasible_bins] = np.exp(-5 * np.abs(residual_capacity[feasible_bins]) / bin_size)

    # 3. Fragmentation Penalty: Penalize bins that leave a significant amount of wasted space.  Cubic penalty
    fragmentation_penalty = np.ones(num_bins)
    fragmentation_penalty[feasible_bins] = np.clip(1 - 5 * (residual_capacity[feasible_bins] / bin_size)**3, 0.0, 1) #clip between 0 to 1


    # Combination with learned weights (example weights)
    w_best_fit = 0.6
    w_near_full = 0.3
    w_fragmentation = 0.1

    # Combine multiplicatively for feasible bins
    priorities[feasible_bins] = (best_fit_score[feasible_bins]**w_best_fit) * (near_full_reward[feasible_bins]**w_near_full) * (fragmentation_penalty[feasible_bins]**w_fragmentation)
    
    # Infeasibility Penalty:  Strongly penalize infeasible bins. Already done by initializing to a small value

    return priorities
```
