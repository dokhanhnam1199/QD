{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_size = 1.0  # Assuming bin size is 1, can be generalized.\n\n    # 1. Feasibility: Only consider bins that can fit the item.  Set to -inf if not feasible\n    feasible_bins = bins_remain_cap >= item\n    priorities = np.where(~feasible_bins, -np.inf, priorities)\n\n    # 2. Best Fit Criterion: Prefer bins with remaining capacity closest to the item size.\n    residual_capacity = bins_remain_cap - item\n    best_fit_priority = np.where(feasible_bins, np.exp(-2 * np.abs(residual_capacity) / bin_size), 0)\n\n    # 3. Avoid Fragmentation: Penalize bins with too much remaining capacity after placing the item.\n    fragmentation_penalty = np.where(feasible_bins, np.exp(-2 * residual_capacity / bin_size), 1)\n\n    # 4. Filling Existing Bins: Prioritize bins that are already somewhat full.\n    fill_level = (bin_size - bins_remain_cap) / bin_size\n    fill_priority = np.where(feasible_bins, fill_level, 0)\n\n    # Combine priorities.  Best fit and fragmentation are most important.\n    priorities = best_fit_priority * fragmentation_penalty + 0.2 * fill_priority\n\n    # Exploration: Add a small random component to encourage exploration of different bins.\n    exploration_bonus = 0.01 * np.random.rand(len(bins_remain_cap))\n    priorities = np.where(feasible_bins, priorities + exploration_bonus, priorities) # Add exploration only to feasible bins.\n\n    # Graceful Infeasibility Handling: If no bin is feasible, try to put in bin with least waste (least negative residual).\n    if not np.any(feasible_bins):\n        priorities = -np.abs(residual_capacity)  # Use negative residual as priority\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        return priorities - 1.0  # Return low priority if no bin fits\n\n    residual_capacity = bins_remain_cap - item\n    bin_capacity = np.max(bins_remain_cap)\n\n    # 1. Best Fit Criterion (Exponential, item-relative)\n    best_fit_priority = np.where(feasible_bins, np.exp(-5 * np.abs(residual_capacity) / item), 0)\n\n    # 2. Fragmentation Penalty (Exponential, item-relative)\n    fragmentation_penalty = np.where(feasible_bins, np.exp(-1 * residual_capacity / item), 0)\n\n    # 3. Encourage Filling (Bonus based on existing fill level, scaled)\n    existing_fill_level = bins_remain_cap / bin_capacity\n    already_full_bonus = feasible_bins * existing_fill_level\n\n    # 4. Near-Full Bonus (Direct, item-relative threshold)\n    near_full_threshold = 0.1 * item\n    near_full_bonus = np.where(feasible_bins & (residual_capacity >= 0) & (residual_capacity <= near_full_threshold), 1.0, 0.0)\n    \n    # 5. Balance load among bins (variance penalty)\n    bin_utilization = (bin_capacity - bins_remain_cap)/bin_capacity\n    load_imbalance_penalty = - np.var(bin_utilization)\n\n\n    # Combine priorities additively with weights\n    priorities = (\n        best_fit_priority\n        + 0.5 * fragmentation_penalty\n        + 0.3 * already_full_bonus\n        + 0.8 * near_full_bonus\n        + 0.1 * load_imbalance_penalty\n    )\n\n    return priorities\n\n[Reflection]\nItem-relative scaling, direct bonuses, and load balancing significantly improve bin packing heuristics.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}