```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Invalidate bins that can't accommodate the item
    invalid_bins = bins_remain_cap < item
    priorities[invalid_bins] = -np.inf
    
    # Calculate remaining capacity after packing
    remaining_after_pack = bins_remain_cap - item
    
    # Calculate fill ratio (how full the bin will be)
    fill_ratio = (bins_remain_cap - remaining_after_pack) / bins_remain_cap
    
    # Base priority based on fill ratio
    priorities[remaining_after_pack >= 0] = 100 * fill_ratio[remaining_after_pack >= 0]
    
    # Bonus for near perfect fits
    near_fit = (remaining_after_pack >= 0) & (remaining_after_pack <= 0.1)
    priorities[near_fit] += 50
    
    # Moderate penalty for bins becoming too empty
    too_empty = (remaining_after_pack > 0.5)
    priorities[too_empty] -= 20 * remaining_after_pack[too_empty]
    
    # Strong penalty for bins that will have very little left
    very_empty = (remaining_after_pack > 0.8)
    priorities[very_empty] -= 50 * remaining_after_pack[very_empty]

    return priorities
```
