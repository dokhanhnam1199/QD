```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Prioritize bins where the item fits
            waste = cap - item
            priorities[i] = 1.0 / (waste + 1e-9)  # Inverse of wasted space.  Avoid division by zero and make smaller waste higher priority

            # Reward good fill ratios, with a stronger boost for nearly full bins
            fill_ratio = item / cap
            if fill_ratio > 0.75:
                priorities[i] *= (1 + 2 * (fill_ratio - 0.75))  # Boost priority more strongly as fill_ratio approaches 1

            # Slightly penalize nearly perfect fills to encourage better overall packing in later steps.
            if fill_ratio > 0.95:
                priorities[i] *= 0.9  # A small reduction to make these bins slightly less desirable

        else:
            # Very low priority if item doesn't fit
            priorities[i] = -1e9  # or a large negative number

    return priorities
```
