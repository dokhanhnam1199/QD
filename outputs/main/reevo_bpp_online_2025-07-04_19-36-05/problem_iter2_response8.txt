```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility: Can the item fit?
    fit_mask = bins_remain_cap >= item

    # Infeasible bins get the lowest priority
    priorities[~fit_mask] = -np.inf

    # Prioritize bins where the item fits.
    if np.any(fit_mask):
        remaining_space = bins_remain_cap[fit_mask] - item

        # Heuristic: Balance packing density with avoiding small gaps.
        # Prioritize bins with smaller remaining space, but penalize very small gaps.

        # Normalize remaining space by item size for relative comparison
        normalized_remaining_space = remaining_space / item

        # Give higher priority to bins that use more of their capacity
        priorities[fit_mask] = 1.0 - normalized_remaining_space

        # Penalize leaving gaps smaller than a fraction of the item size (e.g., 1/4)
        small_gap_penalty = -0.5  # Adjust penalty as needed
        priorities[fit_mask][normalized_remaining_space < 0.25] += small_gap_penalty

        # Penalize leaving extremely small gaps even more.
        extreme_small_gap_penalty = -1.0
        priorities[fit_mask][normalized_remaining_space < 0.1] += extreme_small_gap_penalty


    return priorities
```
