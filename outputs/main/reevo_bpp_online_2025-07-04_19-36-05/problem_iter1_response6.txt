```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # First-Fit Decreasing heuristic influence (but online)
            priorities[i] = cap - item  # Prefer bins with tighter fit
            
            # Try to balance number of used bins, avoiding near empty bins
            if cap - item > 0.75: #Avoid wasting space
               priorities[i] -= (cap-item) * 0.5 # penalize largely empty bins
            elif cap - item < 0.05:
                priorities[i] -= 0.1 # slight penalty to almost full bins to create diversity.
            else:
                priorities[i]+=0.1 #Slighly preffered when near fit

        else:
            priorities[i] = -np.inf  # Disqualify bins that cannot fit the item

    return priorities
```
