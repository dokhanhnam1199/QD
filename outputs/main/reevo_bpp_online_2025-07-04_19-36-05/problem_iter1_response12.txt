```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give a high priority to bins that can accommodate the item
    can_accommodate = bins_remain_cap >= item
    priorities[can_accommodate] = 1

    # Prioritize bins with smaller remaining capacity among those that can fit the item.
    # This encourages filling up bins as much as possible and reducing fragmentation.
    priorities[can_accommodate] = priorities[can_accommodate] + (1 - (bins_remain_cap[can_accommodate] - item) / bins_remain_cap[can_accommodate])

    # For bins that cannot accommodate the item, give a negative priority
    # based on how much the item exceeds the bin's capacity. This discourages
    # selecting nearly full bins.

    cannot_accommodate = bins_remain_cap < item
    priorities[cannot_accommodate] = - (item - bins_remain_cap[cannot_accommodate]) / np.mean(bins_remain_cap) if np.any(bins_remain_cap) > 0 else -1

    return priorities
```
