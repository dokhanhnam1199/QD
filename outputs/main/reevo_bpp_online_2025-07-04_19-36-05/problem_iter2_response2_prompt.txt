{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    for i, cap in enumerate(bins_remain_cap):\n        if item <= cap:\n            # Base priority: higher remaining capacity is better.\n            priorities[i] = cap\n\n            # Bonus for filling the bin well (but not too perfectly).\n            fill_ratio = item / cap\n            if 0.6 <= fill_ratio <= 1.0: #was 0.95\n                priorities[i] += 10 * (1-abs(fill_ratio-0.8))  #add a bonus for fill ratios around 0.8\n\n            # Potential slight penalty to avoid nearly perfect fills (can hinder future placements)\n            if 0.95 <= fill_ratio <= 1.0: #prevents perfect fills, encourages fragmentation and less total bins\n                priorities[i] -= 0.5 * (fill_ratio-0.95)\n        else:\n            priorities[i] = -np.inf  # Impossible to fit\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Give very low priority to bins that cannot fit the item\n    priorities[bins_remain_cap < item] = -np.inf\n    \n    # Calculate remaining space after placing item\n    remaining_space = bins_remain_cap - item\n    \n    # Prioritize bins with smaller remaining space (but still enough to fit the item)\n    priorities[bins_remain_cap >= item] = -remaining_space[bins_remain_cap >= item]\n    \n    # Boost the priority of bins that will be filled to a certain threshold\n    fill_threshold = 0.95  # Adjust as needed\n    filled_bins = (bins_remain_cap >= item) & ((bins_remain_cap - item) / bins_remain_cap <= (1 - fill_threshold))\n    priorities[filled_bins] += 100  # A significant boost\n    \n    #Add a small priority proportional to remaining capacity if bin will fit, to help differentiating when empty ones are present\n    fits_items = bins_remain_cap >= item\n    priorities[fits_items] += bins_remain_cap[fits_items]/np.max(bins_remain_cap) if np.max(bins_remain_cap)>0 else 0\n\n    return priorities\n\n[Reflection]\nPrioritize tighter fills, penalize large remaining space, and heavily reward near-full bins. Use vectorized operations.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}