```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap) #Assumed same capacity for all bins

    # 1. Feasibility: Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item

    # 2. Residual Capacity Priority: Favor bins where residual capacity after placing the item is small.
    residual_capacity = np.clip((bins_remain_cap - item) / bin_capacity, 0, 1)  # Normalized, clipped
    residual_priority = np.where(feasible_bins, 1 - residual_capacity, 0) # Higher priority for lower residual

    # 3. Load Balancing: Give a bonus to bins that are less full. Normalize by max bin capacity.
    load_priority = np.clip(bins_remain_cap / bin_capacity, 0, 1) # Normalize remaining capacity
    load_priority = 1-load_priority
    load_priority = np.where(feasible_bins, load_priority,0)

    # 4. Bonus for good fit relative to the item. Clip and scale.
    fit_score = np.clip((item - (bins_remain_cap - item))/item,0,1) #How much is wasted relative to item size
    fit_bonus = np.where(feasible_bins, 1-fit_score, 0)


    priorities = residual_priority + 0.5 * load_priority + 0.3 * fit_bonus


    return priorities
```
