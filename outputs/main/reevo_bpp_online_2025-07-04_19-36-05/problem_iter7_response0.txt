```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)  # Assuming all bins have the same capacity

    # 1. Feasibility: Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item

    # 2. Best Fit Criterion: Prefer bins with remaining capacity closest to the item size.  Scale by item size
    residual_capacity = bins_remain_cap - item
    best_fit_priority = np.where(feasible_bins, np.exp(-2*np.abs(residual_capacity/bin_capacity)), 0) #exp decay of normalized residual cap

    # 3. Avoid Fragmentation: Penalize bins with too much remaining capacity after placing the item. Cubically penalized and scaled by item size.
    fragmentation_penalty = np.where(feasible_bins, -10 * (residual_capacity / bin_capacity)**3 * item, 0)

    # 4. Bonus for Almost Full Bins: Encourage filling nearly full bins. Scale bonus by item size
    almost_full_bonus = np.where(feasible_bins, 5 * np.exp(-5 * (residual_capacity / bin_capacity)) * item , 0)

    # 5. Prioritize bins that are already somewhat full to avoid starting new bins unnecessarily.
    existing_fill_level = (bin_capacity - bins_remain_cap) / bin_capacity
    existing_fill_priority = feasible_bins * existing_fill_level

    # Combine priorities: Emphasize best fit, feasibility, penalize fragmentation
    priorities = best_fit_priority + fragmentation_penalty + almost_full_bonus + 0.5 * existing_fill_priority
    return priorities
```
