```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. Feasibility: Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item

    # 2. Best Fit Criterion: Prefer bins with remaining capacity closest to the item size.
    residual_capacity = bins_remain_cap - item
    best_fit_priority = np.where(feasible_bins, np.exp(-2 * np.abs(residual_capacity) / item), 0)  # Scale by item size

    # 3. Avoid Fragmentation: Penalize bins with too much remaining capacity after placing the item.
    fragmentation_penalty = np.where(feasible_bins, np.exp(-0.5 * residual_capacity / bin_capacity), 0)  # Scale by bin size

    # 4. Bonus for Almost Full Bins: Encourage filling nearly full bins.
    almost_full_bonus = np.where(feasible_bins, np.exp(-5 * np.abs(residual_capacity) / bin_capacity), 0)  # Scale by bin capacity

    # 5. Prioritize bins that are already somewhat full to avoid starting new bins unnecessarily.
    existing_fill_priority = feasible_bins * (1 - bins_remain_cap / bin_capacity)  # Use ratio of filled capacity

    # 6. Item Size consideration: Give higher priority to bins which can fit the item perfectly or with minimal waste, relative to the item size.
    item_size_priority = np.where(feasible_bins, np.exp(-1 * residual_capacity / item), 0)

    priorities = (
        best_fit_priority
        + 0.4 * fragmentation_penalty
        + 0.7 * almost_full_bonus
        + 0.1 * existing_fill_priority
        + 0.3 * item_size_priority
    )

    return priorities
```
