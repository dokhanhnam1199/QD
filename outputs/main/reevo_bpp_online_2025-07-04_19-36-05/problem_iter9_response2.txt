```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap) #Assume all bins have same capacity

    # 1. Feasibility (Hard Constraint): Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item

    # 2. Best Fit (Item-Relative Scaling): Prioritize bins where the remaining capacity after placing the item is small relative to the item size.
    residual_capacity = bins_remain_cap - item
    best_fit = np.where(feasible_bins, np.exp(-3 * residual_capacity / item), 0)

    # 3. Fragmentation Avoidance (Cubic Penalty): Heavily penalize bins that would result in significant fragmentation.
    fragmentation_penalty = np.where(feasible_bins, 1 - np.power(residual_capacity / bin_capacity, 3), 0)

    # 4. Near-Full Reward (Direct Reward): Directly reward bins that are close to being full after placing the item.
    near_full_reward = np.where(feasible_bins, np.exp(-5 * residual_capacity/bin_capacity), 0)

    # Explicit Infeasibility penalty
    priorities = feasible_bins * (0.5 * best_fit + 0.3 * fragmentation_penalty + 0.2 * near_full_reward)

    return priorities
```
