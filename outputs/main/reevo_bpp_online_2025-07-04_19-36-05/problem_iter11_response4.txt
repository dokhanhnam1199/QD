```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. Feasibility: Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item

    # 2. Best Fit Criterion: Prefer bins with remaining capacity closest to the item size.
    residual_capacity = bins_remain_cap - item
    best_fit_priority = np.where(feasible_bins, np.exp(-np.abs(residual_capacity - (0.1 * item)) / (0.1 * item + 1e-9)), 0)  # slight preference for slightly larger.

    # 3. Fragmentation Penalty: Heavily penalize large remaining capacity after placement. Cubic penalty
    fragmentation_penalty = np.where(feasible_bins, np.exp(-5 * (residual_capacity / bin_capacity)**3), 1e-9)  # Modified cubic scaling and stronger penalty. If infeasible, extremely low priority

    # 4. Reward near-full bins: Encourage filling bins that are close to being full.
    near_full_reward = np.where(feasible_bins, np.exp(-2 * np.abs(residual_capacity) / (0.2 * bin_capacity + 1e-9)), 1) # More lenient threshold based on bin capacity
    # 5. Combine heuristics multiplicatively with learned weights. Initialize weights
    w_best_fit = 0.4
    w_fragmentation = 0.3
    w_near_full = 0.3


    priorities = np.where(feasible_bins, (best_fit_priority**w_best_fit) * (fragmentation_penalty**w_fragmentation) * (near_full_reward**w_near_full), 1e-9) # If infeasible, extremely low priority

    return priorities
```
