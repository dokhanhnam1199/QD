```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # High priority for bins that can accommodate the item
    can_accommodate = bins_remain_cap >= item
    priorities[can_accommodate] = 1.0

    # Prioritize bins with smaller remaining capacity (relative to bin size)
    # among those that can fit the item.
    remaining_ratio = (bins_remain_cap[can_accommodate] - item) / bins_remain_cap[can_accommodate]
    priorities[can_accommodate] += (1.0 - remaining_ratio)

    # Penalize bins that cannot accommodate the item, proportional to the overflow
    cannot_accommodate = bins_remain_cap < item
    overflow_ratio = (item - bins_remain_cap[cannot_accommodate]) / np.mean(bins_remain_cap) if np.any(bins_remain_cap) else (item - bins_remain_cap[cannot_accommodate])
    priorities[cannot_accommodate] = -overflow_ratio

    return priorities
```
