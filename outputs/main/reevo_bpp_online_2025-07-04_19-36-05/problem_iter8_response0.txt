```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = np.max(bins_remain_cap) if bins_remain_cap.size > 0 else 1.0 #Avoid division by zero if bins_remain_cap is empty

    # 1. Feasibility: Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item

    # If no bin can accommodate, return a low priority for all bins.
    if not np.any(feasible_bins):
        return priorities - 1.0

    # 2. Best Fit Criterion: Prioritize bins with remaining capacity closest to the item size.
    residual_capacity = bins_remain_cap - item
    best_fit_priority = np.where(feasible_bins, np.exp(-20 * np.abs(residual_capacity) / item), 0)  # Sharper exponential, item-relative

    # 3. Minimize Fragmentation: Penalize bins with large residual capacity after placement.
    fragmentation_penalty = np.where(feasible_bins, np.exp(-1 * residual_capacity / item), 0)  # Scale by item size

    # 4. Encourage Filling: Bonus for bins that are already relatively full.
    existing_fill_level = (bin_size - bins_remain_cap) / bin_size
    already_full_bonus = np.where(feasible_bins, existing_fill_level, 0)

    # 5. Item Fit: Prioritize bins where item fits well relative to item size.
    item_fit_score = np.where(feasible_bins, np.exp(-10 * np.abs(residual_capacity) / item), 0)

    # 6. Balance: Incentivize using bins with low fill levels when almost full bins are not availabe
    balance_term = np.where(feasible_bins, 1 - existing_fill_level, 0)

    # Combine priorities. Adjust weights as needed.
    priorities = (
        best_fit_priority
        + 0.6 * fragmentation_penalty
        + 0.5 * already_full_bonus
        + 0.8 * item_fit_score
        + 0.3 * balance_term
    )

    return priorities
```
