```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining space after placing the item. Negative values indicate item won't fit.
    remaining_after_placement = bins_remain_cap - item

    # Feasibility check: assign a very low priority to bins where the item doesn't fit.
    infeasible_mask = remaining_after_placement < 0
    priorities[infeasible_mask] = -np.inf

    # For feasible bins, prioritize based on fullness.
    feasible_mask = ~infeasible_mask
    if np.any(feasible_mask):
        # Reward near-full bins aggressively
        fullness_ratio = item / bins_remain_cap[feasible_mask]
        priorities[feasible_mask] = fullness_ratio**2  # Increased exponent boosts near-full bins more

        # Penalize wasted space (fragmentation)
        waste_penalty = remaining_after_placement[feasible_mask] / bins_remain_cap[feasible_mask]
        priorities[feasible_mask] -= waste_penalty * 0.5 #Scale down waste penalty.

        # Bonus for fitting snugly (small remaining space)
        snug_fit_bonus = np.exp(-5 * remaining_after_placement[feasible_mask] / bins_remain_cap[feasible_mask])  # Exponential decay
        priorities[feasible_mask] += snug_fit_bonus * 0.2  # Scale down snug fit bonus.

    return priorities
```
