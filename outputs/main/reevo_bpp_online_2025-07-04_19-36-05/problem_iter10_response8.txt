```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check
    feasible_bins = bins_remain_cap >= item

    if not np.any(feasible_bins):
        return priorities - 1.0  # Return low priority if no bin fits

    # Residual capacity after placing the item
    residual_capacity = bins_remain_cap - item

    # 1. Best Fit Criterion (Exponential, scaled by item size) - Increased importance
    best_fit_priority = np.where(feasible_bins, np.exp(-7 * np.abs(residual_capacity) / item), 0)

    # 2. Fragmentation Penalty (Exponential, scaled by item size) - Slightly reduced
    fragmentation_penalty = np.where(feasible_bins, np.exp(-0.75 * residual_capacity / item), 0)

    # 3. Encourage Filling (Bonus based on current fill level) - Increased, also scale item size
    max_cap = np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1 # avoid division by zero if all bins are empty
    existing_fill_level = (max_cap - bins_remain_cap) / max_cap # fill level, normalized between 0 and 1.
    already_full_bonus = feasible_bins * existing_fill_level * (item / max_cap)

    # 4. Reward bins close to being full after placement - Adjusted threshold and bonus
    near_full_threshold = 0.15 * item # increased threshold
    near_full_bonus = np.where((residual_capacity >= 0) & (residual_capacity <= near_full_threshold), 1.2, 0.0) # increased bonus

    # 5. Item size consideration : prefer bins that fit item snugly.
    snug_fit_bonus = np.where(feasible_bins, np.exp(-3 * (bins_remain_cap - item) / bins_remain_cap),0)

    # Combine priorities with adjusted weights
    priorities = (
        1.2 * best_fit_priority
        + 0.5 * fragmentation_penalty
        + 0.6 * already_full_bonus
        + 0.9 * near_full_bonus
        + 0.3 * snug_fit_bonus
    )

    return priorities
```
