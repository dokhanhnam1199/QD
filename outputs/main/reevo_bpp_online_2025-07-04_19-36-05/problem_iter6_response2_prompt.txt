{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # High priority for bins that can accommodate the item\n    can_accommodate = bins_remain_cap >= item\n    priorities[can_accommodate] = 1.0\n\n    # Prioritize bins with smaller remaining capacity (relative to bin size)\n    # among those that can fit the item.\n    remaining_ratio = (bins_remain_cap[can_accommodate] - item) / bins_remain_cap[can_accommodate]\n    priorities[can_accommodate] += (1.0 - remaining_ratio)\n\n    # Penalize bins that cannot accommodate the item, proportional to the overflow\n    cannot_accommodate = bins_remain_cap < item\n    if np.any(cannot_accommodate):\n        overflow_ratio = (item - bins_remain_cap[cannot_accommodate]) / np.mean(bins_remain_cap) if np.any(bins_remain_cap) else (item - bins_remain_cap[cannot_accommodate])\n        priorities[cannot_accommodate] = -overflow_ratio\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Only consider bins that can fit the item.\n    feasible_bins = bins_remain_cap >= item\n\n    # 2. Best Fit Criterion: Prefer bins with remaining capacity closest to the item size.\n    residual_capacity = bins_remain_cap - item\n    best_fit_priority = np.where(feasible_bins, 1 / (residual_capacity + 1e-9), 0)  # Avoid division by zero\n\n    # 3. Avoid Fragmentation: Penalize bins with too much remaining capacity after placing the item.\n    fragmentation_penalty = np.where(feasible_bins, np.exp(-0.2 * residual_capacity), 0) # Exponential decay\n\n    # 4. Bonus for Almost Full Bins: Encourage filling nearly full bins.\n    almost_full_bonus = np.where(feasible_bins, np.exp(-5 * np.abs(residual_capacity)/item), 0)\n\n    # 5. Prioritize bins that are already somewhat full to avoid starting new bins unnecessarily.\n    # The more full the bin is (before adding the item), the higher the priority.  Scale by feasibility.\n    existing_fill_priority = feasible_bins * (bins_remain_cap / np.max(bins_remain_cap))\n\n    # 6. Item Size consideration: Give higher priority to bins which can fit the item perfectly or with minimal waste, relative to the item size.\n    item_size_priority = np.where(feasible_bins, np.exp(-2 * residual_capacity / item), 0)\n\n    priorities = best_fit_priority * fragmentation_penalty + almost_full_bonus + 0.1 * existing_fill_priority + 0.2 * item_size_priority\n\n    return priorities\n\n[Reflection]\nPrioritize feasibility, minimize fragmentation, and consider existing fill level and item size relative to residual capacity.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}