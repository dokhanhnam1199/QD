```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = np.max(bins_remain_cap) # added

    # 1. Feasibility: Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item

    # 2. Residual Capacity: Scaled by item size.
    residual_capacity = bins_remain_cap - item
    scaled_residual = np.clip(residual_capacity / item, 0, 2) #clip scaled value
    residual_priority = np.where(feasible_bins, 1 - scaled_residual/2, 0)

    # 3. Load Balancing: Target bins with mid-range occupancy.
    occupancy = (bin_size - bins_remain_cap) / bin_size # added, normalized occupancy
    load_balance_bonus = np.exp(-((occupancy - 0.5)**2) / 0.1) * feasible_bins # Gaussian around 0.5

    # 4. Direct Bonus: Small bonus if item fits snugly
    snug_fit_bonus = np.where(feasible_bins & (residual_capacity <= 0.1 * item), 0.5, 0)

    #Combine the features
    priorities = residual_priority + 0.2 * load_balance_bonus + 0.3 * snug_fit_bonus

    return priorities
```
