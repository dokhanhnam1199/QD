```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give very low priority to bins that cannot fit the item
    priorities[bins_remain_cap < item] = -np.inf

    # Calculate remaining space after placing item
    remaining_space = bins_remain_cap - item
    
    #Prioritize tighter fills, but only for bins that can fit item
    fits_item = bins_remain_cap >= item
    priorities[fits_item] = -remaining_space[fits_item]

    # Heavily reward near-full bins.
    fill_threshold_high = 0.95
    almost_full = fits_item & (item / bins_remain_cap >= fill_threshold_high)
    priorities[almost_full] += 100

    # Reward for bins becoming almost full with different threshold
    fill_threshold_low = 0.75
    becoming_almost_full = fits_item & (item / bins_remain_cap >= fill_threshold_low)
    priorities[becoming_almost_full] += 50

    # Add a small priority proportional to remaining capacity if bin will fit, to help differentiating when empty ones are present
    priorities[fits_item] += bins_remain_cap[fits_item]/np.max(bins_remain_cap) if np.max(bins_remain_cap)>0 else 0
    

    return priorities
```
