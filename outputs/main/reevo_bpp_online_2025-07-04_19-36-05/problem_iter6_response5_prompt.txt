{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_size = np.max(bins_remain_cap)  # Assuming all bins have the same initial capacity\n\n    # 1. Feasibility: Only consider bins that can fit the item.  Infeasible bins get -inf priority\n    feasible_bins = bins_remain_cap >= item\n    priorities = np.where(feasible_bins, priorities, -np.inf)\n\n    # 2. Normalize remaining capacity for better comparison\n    normalized_remaining_cap = bins_remain_cap / bin_size\n\n    # 3. Best Fit & Fragmentation Penalty: Strongly penalize small gaps (fragmentation).\n    residual_capacity = bins_remain_cap - item\n    normalized_residual = residual_capacity / bin_size\n    \n    # Explicit penalty for small gaps; scaled by the bin size to make it relative.\n    small_gap_penalty = np.where(feasible_bins & (residual_capacity > 0) & (residual_capacity <= 0.1 * bin_size), -5, 0)\n\n    # Reward bins that are nearly full after adding the item.\n    near_full_bonus = np.where(feasible_bins, np.exp(-10 * normalized_residual), 0)\n    \n    # Prioritize bins with less remaining capacity before adding the item\n    fill_level_priority = normalized_remaining_cap\n    \n    # 4. Infeasible Bin Handling - Relative Capacity: if item doesn't fit in ANY bin, choose the bin with the largest capacity.\n    if not np.any(feasible_bins):\n        priorities = bins_remain_cap / bin_size # Use relative capacity\n        return priorities\n\n    priorities = near_full_bonus + fill_level_priority + small_gap_penalty\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n\n    # 1. Feasibility: Only consider bins that can fit the item.\n    feasible_bins = bins_remain_cap >= item\n\n    # If no bin is feasible, prioritize bins with largest remaining capacity (relative).\n    if not np.any(feasible_bins):\n      return bins_remain_cap / bin_capacity\n\n    # 2. Best Fit Criterion (emphasized): Prioritize bins with remaining capacity closest to the item size, but only if feasible.\n    residual_capacity = bins_remain_cap - item\n    best_fit_priority = np.where(feasible_bins, np.exp(-5 * np.abs(residual_capacity)), 0)  # Emphasized using exp\n\n    # 3. Fragmentation Penalty (stronger): Heavily penalize bins with too much remaining capacity.\n    fragmentation_penalty = np.where(feasible_bins, np.exp(-5 * residual_capacity / bin_capacity), 0)\n\n    # 4. Near-Full Bonus (enhanced): Significantly reward bins that become near-full after placing the item.\n    almost_full_bonus = np.where(feasible_bins, np.exp(-20 * np.abs(residual_capacity) / bin_capacity), 0) # More aggressive bonus\n\n    # 5. Explicit Small Gap Penalty: Penalize bins that leave a small gap after placing the item.\n    small_gap_penalty = np.where(feasible_bins & (residual_capacity > 0) & (residual_capacity < 0.1 * bin_capacity), -0.5, 0)\n\n    # 6. Normalize Remaining Space: To ensure consistent scaling.\n    normalized_remaining_space = bins_remain_cap / bin_capacity\n\n    priorities = (\n        best_fit_priority\n        + 0.8 * almost_full_bonus\n        + 0.3 * fragmentation_penalty\n        + small_gap_penalty # Apply penalty\n        + 0.1 * normalized_remaining_space # Add base priority\n    )\n\n    return priorities\n\n[Reflection]\nEmphasize best-fit, aggressive near-full bonuses, stronger fragmentation penalties, and small gap handling.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}