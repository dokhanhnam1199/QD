```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give very low priority to bins that cannot fit the item
    priorities[bins_remain_cap < item] = -np.inf
    
    # Calculate remaining space after placing item
    remaining_space = bins_remain_cap - item
    
    # Prioritize bins with smaller remaining space (but still enough to fit the item)
    priorities[bins_remain_cap >= item] = -remaining_space[bins_remain_cap >= item]
    
    # Boost the priority of bins that will be filled to a certain threshold
    fill_threshold = 0.95  # Adjust as needed
    filled_bins = (bins_remain_cap >= item) & ((bins_remain_cap - item) / bins_remain_cap <= (1 - fill_threshold))
    priorities[filled_bins] += 100  # A significant boost
    
    #Add a small priority proportional to remaining capacity if bin will fit, to help differentiating when empty ones are present
    fits_items = bins_remain_cap >= item
    priorities[fits_items] += bins_remain_cap[fits_items]/np.max(bins_remain_cap) if np.max(bins_remain_cap)>0 else 0

    return priorities
```
