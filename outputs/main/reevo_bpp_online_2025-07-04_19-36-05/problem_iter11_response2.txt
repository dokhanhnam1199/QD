```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)
    bin_size = 1.0  # Assuming bin size is 1

    # 1. Feasibility: Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item

    # Infeasibility penalty
    priorities = np.where(feasible_bins, priorities, -1e9)

    # 2. Best Fit Criterion: Prioritize bins with remaining capacity closest to the item size.
    residual_capacity = bins_remain_cap - item
    best_fit_score = np.zeros(num_bins)
    best_fit_score[feasible_bins] = np.exp(-5 * np.abs(residual_capacity[feasible_bins]))

    # 3. Reward near-full bins after placement: The fuller the better
    near_full_reward = np.zeros(num_bins)
    near_full_reward[feasible_bins] = (bin_size - residual_capacity[feasible_bins])**2

    # 4. Cubic fragmentation penalty.
    fragmentation_penalty = np.zeros(num_bins)
    fragmentation_penalty[feasible_bins] = -10 * (residual_capacity[feasible_bins]**3)

    # Scale rewards/penalties by item size.
    scaled_best_fit = best_fit_score * item
    scaled_near_full = near_full_reward * item
    scaled_fragmentation = fragmentation_penalty * item

    # Combine heuristics multiplicatively with learned weights.
    weight_best_fit = 0.6
    weight_near_full = 0.3
    weight_fragmentation = 0.1

    priorities[feasible_bins] = (weight_best_fit * scaled_best_fit[feasible_bins] +
                                  weight_near_full * scaled_near_full[feasible_bins] +
                                  weight_fragmentation * scaled_fragmentation[feasible_bins])
    return priorities
```
