{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    num_bins = len(bins_remain_cap)\n    bin_size = 1.0  # Standard bin size, assume normalized\n\n    # Feasibility: Only consider bins that can fit the item.\n    feasible_bins = bins_remain_cap >= item\n\n    # Initialize priorities to a very small number for infeasible bins.\n    priorities = np.where(feasible_bins, 1.0, 1e-6)\n\n    # 1. Best Fit: Reward bins where the item fits with minimal remaining space.\n    residual_capacity = bins_remain_cap - item\n    best_fit_score = np.zeros(num_bins)\n    best_fit_score[feasible_bins] = np.exp(-10 * residual_capacity[feasible_bins] / bin_size)\n\n    # 2. Near-Full Reward: Give a bonus to bins that are close to being full after placing the item.\n    near_full_reward = np.zeros(num_bins)\n    near_full_reward[feasible_bins] = np.exp(-5 * np.abs(residual_capacity[feasible_bins]) / bin_size)\n\n    # 3. Fragmentation Penalty: Penalize bins that leave a significant amount of wasted space.  Cubic penalty\n    fragmentation_penalty = np.ones(num_bins)\n    fragmentation_penalty[feasible_bins] = np.clip(1 - 5 * (residual_capacity[feasible_bins] / bin_size)**3, 0.0, 1) #clip between 0 to 1\n\n\n    # Combination with learned weights (example weights)\n    w_best_fit = 0.6\n    w_near_full = 0.3\n    w_fragmentation = 0.1\n\n    # Combine multiplicatively for feasible bins\n    priorities[feasible_bins] = (best_fit_score[feasible_bins]**w_best_fit) * (near_full_reward[feasible_bins]**w_near_full) * (fragmentation_penalty[feasible_bins]**w_fragmentation)\n    \n    # Infeasibility Penalty:  Strongly penalize infeasible bins. Already done by initializing to a small value\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    num_bins = len(bins_remain_cap)\n    bin_size = np.max(bins_remain_cap) # Assuming all bins have same capacity initially\n\n    # 1. Feasibility Mask\n    feasible_bins = bins_remain_cap >= item\n\n    # 2. Best Fit: Reward bins where item fits best\n    residual_capacity = bins_remain_cap - item\n    best_fit = np.where(feasible_bins, np.exp(-2 * np.abs(residual_capacity / bin_size)), 0)  # Exponential score based on residual, scaled by bin_size\n\n    # 3. Near-Full Reward: Encourage filling bins that are close to full after placement\n    near_full_reward = np.where(feasible_bins, np.exp(-2 * np.abs(residual_capacity) / bin_size), 0)\n\n    # 4. Cubic Fragmentation Penalty: Heavily penalize leaving too much space\n    fragmentation_penalty = np.where(feasible_bins, np.exp(-0.5 * (residual_capacity / bin_size)**3), 1e-6)  # Cubic penalty scaled by bin size\n\n    # 5. Item Size Scaling: Scale the priority based on item size. Normalize by bin size.\n    item_size_factor = item / bin_size\n\n    # 6. Combine Heuristics Multiplicatively with Learned Weights (Example weights)\n    w_best_fit = 0.4\n    w_near_full = 0.3\n    w_fragmentation = 0.3\n\n    priorities = (w_best_fit * best_fit + 1e-9) * (w_near_full * near_full_reward + 1e-9) * (w_fragmentation * fragmentation_penalty + 1e-9) * (0.1 + item_size_factor)\n\n    # 7. Strong Penalty for Infeasibility\n    priorities = np.where(feasible_bins, priorities, -1e9) #Very small value for infeasible bins\n\n    return priorities\n\n[Reflection]\nPrioritize feasible bins. Scale residual capacity and fragmentation by bin size. Add item size scaling and small additive constant.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}