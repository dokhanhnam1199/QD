```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Big enough to fit? If not, priority = -inf
    eligible = bins_remain_cap >= item
    priorities[~eligible] = -np.inf

    # Sort eligible bins by remaining capacity in descending order.
    eligible_indices = np.where(eligible)[0]
    sorted_eligible_indices = eligible_indices[np.argsort(bins_remain_cap[eligible_indices])[::-1]]

    # Assign priority based on how full the bin will be if item is placed.
    for i, bin_index in enumerate(sorted_eligible_indices):
        remaining_after_pack = bins_remain_cap[bin_index] - item
        fill_ratio = 1 - (remaining_after_pack / bins_remain_cap[bin_index])
        
        # Prefer bins that get closest to full. Slightly penalize bins that become too full.
        if remaining_after_pack >=0:
            priorities[bin_index] = 100 * fill_ratio  # Give this fill ratio some magnitude
        else:
            priorities[bin_index] = -100 # avoid putting into bins that can not contain item after precision errors etc
                
        # Bonus for nearly perfect fits, but prevent tiny empty spaces (reduces fragmentation)
        if 0 <= remaining_after_pack <= 0.1:  # Tweak threshold as needed
            priorities[bin_index] += 50

        # Penalize large empty spaces
        if remaining_after_pack > 0.5:
           priorities[bin_index] -= remaining_after_pack

    return priorities
```
