{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Immediate fit bonus\n    immediate_fit = bins_remain_cap == item\n    priorities[immediate_fit] += 1000\n\n    # Near fit bonus\n    near_fit = (bins_remain_cap > item) & (bins_remain_cap <= item * 1.1) # within 10%\n    priorities[near_fit] += 500\n\n    # Try to fill fullest bins first, avoiding excessive fragmentation\n    valid_bins = bins_remain_cap >= item\n    priorities[valid_bins] += bins_remain_cap[valid_bins] # higher remaining cap -> lower fragmentation -> higher priority\n\n    # Avoid bins that will become too empty, leading to wastage\n    too_empty = (bins_remain_cap - item) < 0.2 # e.g., remaining cap < 20% bin size\n    priorities[too_empty] -= 100  # Penalize\n\n    # Invalidate bins that can't accommodate the item\n    invalid_bins = bins_remain_cap < item\n    priorities[invalid_bins] = -np.inf\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Big enough to fit? If not, priority = -inf\n    eligible = bins_remain_cap >= item\n    priorities[~eligible] = -np.inf\n\n    # Sort eligible bins by remaining capacity in descending order.\n    eligible_indices = np.where(eligible)[0]\n    sorted_eligible_indices = eligible_indices[np.argsort(bins_remain_cap[eligible_indices])[::-1]]\n\n    # Assign priority based on how full the bin will be if item is placed.\n    for i, bin_index in enumerate(sorted_eligible_indices):\n        remaining_after_pack = bins_remain_cap[bin_index] - item\n        fill_ratio = 1 - (remaining_after_pack / bins_remain_cap[bin_index])\n        \n        # Prefer bins that get closest to full. Slightly penalize bins that become too full.\n        if remaining_after_pack >=0:\n            priorities[bin_index] = 100 * fill_ratio  # Give this fill ratio some magnitude\n        else:\n            priorities[bin_index] = -100 # avoid putting into bins that can not contain item after precision errors etc\n                \n        # Bonus for nearly perfect fits, but prevent tiny empty spaces (reduces fragmentation)\n        if 0 <= remaining_after_pack <= 0.1:  # Tweak threshold as needed\n            priorities[bin_index] += 50\n\n        # Penalize large empty spaces\n        if remaining_after_pack > 0.5:\n           priorities[bin_index] -= remaining_after_pack\n\n    return priorities\n\n[Reflection]\nPrioritize fullness, penalize fragmentation, and ensure feasibility first. Magnitude of rewards/penalties matter.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}