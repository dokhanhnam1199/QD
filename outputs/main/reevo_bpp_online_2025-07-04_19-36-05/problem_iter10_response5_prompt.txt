{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_size = np.max(bins_remain_cap)\n\n    # 1. Feasibility: Only consider bins that can fit the item.\n    feasible_bins = bins_remain_cap >= item\n\n    # If no bin is feasible, consider relative capacity. Open a new bin.\n    if not np.any(feasible_bins):\n         return bins_remain_cap / bin_size # Return ratio of remaining capacity to bin size\n\n    # 2. Normalize remaining capacity. (unused, but good to keep for potential features)\n    normalized_cap = bins_remain_cap / bin_size\n\n    # 3. Best Fit Criterion: Prioritize bins with the smallest remaining capacity after placing the item.\n    residual_capacity = bins_remain_cap - item\n    best_fit_priority = np.where(feasible_bins, bin_size / (residual_capacity + 1e-9), 0) # Use bin size to scale priority.\n    best_fit_priority *= 2  # Increased importance\n\n    # 4. Fragmentation Penalty: Heavily penalize small gaps after placement.  Scale with bin_size\n    fragmentation_penalty = np.where(feasible_bins, np.exp(-5 * residual_capacity / bin_size), 0)\n    fragmentation_penalty *= bin_size / 2 # Reduce penalty strength, but scaled to bin size\n\n    # 5. Near-Full Reward: Encourage filling bins close to full with a stronger non-linear scaling.\n    almost_full_bonus = np.where(feasible_bins, np.exp(-10 * (residual_capacity / bin_size)**2), 0)\n    almost_full_bonus *= 3 # Increased bonus strength\n\n    # 6. Explicit Small Gap Penalty: Penalize remaining capacity below a certain threshold.\n    small_gap_threshold = 0.1 * bin_size\n    small_gap_penalty = np.where(feasible_bins & (residual_capacity < small_gap_threshold), -bin_size/5, 0) #Scale penalty with bin size and make it negative.\n\n\n    # 7. Introduce a capacity utilization reward. Higher utilization is better.\n    capacity_utilization = np.where(feasible_bins, (bin_size - residual_capacity) / bin_size, 0)\n    capacity_reward = capacity_utilization * bin_size # scale with bin size\n\n    priorities = best_fit_priority + almost_full_bonus + fragmentation_penalty + small_gap_penalty + capacity_reward\n    \n    #Ensure no negative priorities.\n    priorities = np.maximum(priorities, 0)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_size = np.max(bins_remain_cap)\n\n    # 1. Feasibility: Only consider bins that can fit the item. Infeasible bins get a large negative priority.\n    feasible_bins = bins_remain_cap >= item\n    priorities = np.where(~feasible_bins, -1e9, priorities)\n\n    # 2. Best Fit Criterion: Prefer bins with remaining capacity closest to the item size.\n    residual_capacity = bins_remain_cap - item\n    best_fit_priority = np.where(feasible_bins, np.exp(-5 * np.abs(residual_capacity) / bin_size), 0)  # Scale by bin size\n\n    # 3. Avoid Fragmentation: Penalize bins with too much remaining capacity after placing the item. Scale penalty by item size. Make it cubic to penalize more heavily.\n    fragmentation_penalty = np.where(feasible_bins, -10 * (residual_capacity / bin_size)**3 * (item / bin_size), 0)\n\n    # 4. Reward Existing Fill Levels: Prioritize bins that are already somewhat full to avoid starting new bins unnecessarily. Scale by item size.\n    existing_fill_level = (bin_size - bins_remain_cap) / bin_size\n    existing_fill_priority = np.where(feasible_bins, 2 * existing_fill_level * (item / bin_size), 0)  # Scale by item size\n\n    # Combine priorities\n    priorities = best_fit_priority + fragmentation_penalty + existing_fill_priority\n\n    return priorities\n\n[Reflection]\nBetter code:\n1. Uses explicit infeasibility penalty.\n2. Scales rewards/penalties with item size for better generalization.\n3. Cubes fragmentation penalty.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}