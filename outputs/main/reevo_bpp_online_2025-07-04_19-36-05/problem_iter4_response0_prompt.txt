{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Calculate remaining space after placing the item.  Negative values indicate item won't fit.\n    remaining_after_placement = bins_remain_cap - item\n    \n    # High priority for bins where the item fits best (smallest waste).\n    # But only if the item *does* fit!\n\n    fit_indices = remaining_after_placement >= 0\n    \n    if np.any(fit_indices):\n        # Reward near-full bins aggressively\n        priorities[fit_indices] = (bins_remain_cap[fit_indices] / item)\n        priorities[fit_indices] += np.exp(-remaining_after_placement[fit_indices]) # Exponentially decaying reward for smaller waste.\n\n        # Penalize wasted space relative to bin capacity (fragmentation)\n        priorities[fit_indices] -= (remaining_after_placement[fit_indices] / bins_remain_cap[fit_indices])\n    \n    \n    # If no bin fits, assign a very low priority to all bins.  The calling\n    # function should then create a new bin.\n    else:\n        priorities = -bins_remain_cap #give a negative score based on the size, prefer smaller capacity bins.\n    \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Prioritizes feasibility, then fullness. Aggressively reward near-full bins\n    and penalize fragmentation and wasted space, scaling rewards/penalties\n    proportionally to bin capacity. Vectorized operations for efficiency.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate remaining space after placing the item. Negative values indicate item won't fit.\n    remaining_after_placement = bins_remain_cap - item\n\n    # Feasibility check: Only consider bins where the item fits.\n    feasible_bins = remaining_after_placement >= 0\n\n    if np.any(feasible_bins):\n        # Fullness reward: Higher score for bins that become fuller after placement.\n        fullness_reward = (item / bins_remain_cap) * feasible_bins # Only apply to feasible bins. Higher score if item is large compared to bin capacity\n\n        # Fragmentation penalty: Penalize bins with significant remaining space after placement.\n        # Scale penalty by the *square* of the remaining ratio to aggressively penalize wasted space\n        fragmentation_penalty = -((remaining_after_placement / bins_remain_cap)**2) * feasible_bins\n\n        # Near-full bonus: Extra reward if the bin becomes nearly full after placement.\n        near_full_threshold = 0.1 # Define \"nearly full\" as remaining capacity <= 10% of total capacity.\n        near_full_bonus = (remaining_after_placement <= (near_full_threshold * bins_remain_cap)) * feasible_bins * 2  # Significantly boost priority if near full\n\n        # Combine rewards and penalties\n        priorities = fullness_reward + fragmentation_penalty + near_full_bonus\n\n    else:\n        # If no bin fits, assign a negative priority based on remaining capacity (prefer to open a new bin).\n        priorities = -bins_remain_cap #same approach as before\n\n    return priorities\n\n[Reflection]\nPrioritize feasibility, reward fullness, penalize fragmentation aggressively, and add near-full bin bonuses.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}