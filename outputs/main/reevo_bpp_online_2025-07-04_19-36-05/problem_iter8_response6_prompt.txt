{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)\n\n    # 1. Feasibility: Only consider bins that can fit the item.\n    feasible_bins = bins_remain_cap >= item\n\n    # If no bin is feasible, prioritize bins with largest remaining capacity (relative).\n    if not np.any(feasible_bins):\n      return bins_remain_cap / bin_capacity\n\n    # 2. Best Fit Criterion (highly emphasized): Prioritize bins with remaining capacity closest to the item size, but only if feasible.\n    residual_capacity = bins_remain_cap - item\n    best_fit_priority = np.where(feasible_bins, np.exp(-10 * np.abs(residual_capacity) / bin_capacity), 0)  # Strong emphasis\n\n    # 3. Fragmentation Penalty (very strong): Heavily penalize bins with too much remaining capacity.\n    fragmentation_penalty = np.where(feasible_bins, np.exp(-10 * residual_capacity / bin_capacity), 0)\n\n    # 4. Near-Full Bonus (extremely aggressive): Significantly reward bins that become near-full after placing the item.\n    almost_full_bonus = np.where(feasible_bins, np.exp(-40 * np.abs(residual_capacity) / bin_capacity), 0) # Very aggressive\n\n    # 5. Explicit Small Gap Penalty (more severe): Penalize bins that leave a small gap after placing the item.\n    small_gap_penalty = np.where(feasible_bins & (residual_capacity > 0) & (residual_capacity < 0.1 * bin_capacity), -1, 0) # Increased penalty\n\n    # 6. Normalize Remaining Space: To ensure consistent scaling.\n    normalized_remaining_space = bins_remain_cap / bin_capacity\n\n    priorities = (\n        best_fit_priority\n        + 0.9 * almost_full_bonus\n        + 0.2 * fragmentation_penalty\n        + small_gap_penalty\n        + 0.05 * normalized_remaining_space\n    )\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Only consider bins that can fit the item.\n    feasible_bins = bins_remain_cap >= item\n\n    # 2. Best Fit Criterion: Prefer bins with remaining capacity closest to the item size.\n    residual_capacity = bins_remain_cap - item\n    best_fit_priority = np.where(feasible_bins, np.exp(-np.abs(residual_capacity)), 0)\n\n    # 3. Avoid Fragmentation: Penalize bins with too much remaining capacity after placing the item.\n    fragmentation_penalty = np.where(feasible_bins, np.exp(-0.5 * residual_capacity / np.max(bins_remain_cap)), 0) # Scale by bin size\n\n    # 4. Bonus for Almost Full Bins: Encourage filling nearly full bins.\n    almost_full_bonus = np.where(feasible_bins, np.exp(-5 * np.abs(residual_capacity) / item), 0) # Scale residual by item size\n\n    # 5. Prioritize bins that are already somewhat full to avoid starting new bins unnecessarily.\n    existing_fill_priority = feasible_bins * (bins_remain_cap / np.max(bins_remain_cap))\n\n    # 6. Item Size consideration: Give higher priority to bins which can fit the item perfectly or with minimal waste, relative to the item size.\n    item_size_priority = np.where(feasible_bins, np.exp(-2 * residual_capacity / item), 0)\n\n    priorities = best_fit_priority + 0.5 * fragmentation_penalty + almost_full_bonus + 0.1 * existing_fill_priority + 0.2 * item_size_priority\n\n    return priorities\n\n[Reflection]\nScaling residual capacity by item size and bin size improves performance. Avoid over-emphasizing specific criteria.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}