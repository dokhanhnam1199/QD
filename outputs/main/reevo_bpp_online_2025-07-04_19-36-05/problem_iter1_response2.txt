```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First Fit Decreasing heuristic inspired priority: Prefer bins where the item fits with the least wasted space.

    potential_waste = bins_remain_cap - item
    
    # Give a high priority to bins where the item fits.
    fit_indices = potential_waste >= 0
    
    if np.any(fit_indices):
      priorities[fit_indices] = 1 / (potential_waste[fit_indices] + 1e-9)  # Avoid division by zero
    
    # Penalize bins where the item doesn't fit, but do it gradually (squared difference)
    non_fit_indices = potential_waste < 0
    priorities[non_fit_indices] = - (item - bins_remain_cap[non_fit_indices])**2

    return priorities
```
