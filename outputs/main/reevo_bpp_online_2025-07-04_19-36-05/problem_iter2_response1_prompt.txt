{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Feasibility: Only consider bins that can fit the item\n    feasible_bins = bins_remain_cap >= item\n    \n    if np.any(feasible_bins):\n        # 1. Remaining Capacity: Prioritize bins with smaller remaining capacity AFTER adding the item\n        remaining_capacity_after = bins_remain_cap - item\n        remaining_capacity_after[remaining_capacity_after < 0] = np.inf # Set to infinity if it doesn't fit (only for calculation)\n        \n        priorities[feasible_bins] = -remaining_capacity_after[feasible_bins]  # Smaller remaining capacity = higher priority\n\n        # 2. Item Size Ratio:  Also factor in how much of the bin the item will fill.\n        # This can help to consolidate items instead of spreading them too thin.\n        item_size_ratio = item / bins_remain_cap\n        priorities[feasible_bins] += item_size_ratio[feasible_bins] * 0.5 # Weigh the ratio effect.\n\n        # 3. Avoid nearly full bins to improve future packing\n        near_full_threshold = 0.9\n        near_full_bins = (bins_remain_cap - item) / bins_remain_cap < (1 - near_full_threshold)\n        priorities[near_full_bins & feasible_bins] -= 10  # Penalize nearly full bins\n\n    else:\n        # No bin can fit the item - assign low priority to all bins. This should not happen during online BPP, because a new bin should be added\n        # If this happens, means there might be a need to initialize the capacity, return -inf\n        priorities[:] = -np.inf\n        \n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Only consider bins that can fit the item.\n    feasible_bins = bins_remain_cap >= item\n\n    # 2. Best Fit Criterion: Prefer bins with remaining capacity closest to the item size.\n    residual_capacity = bins_remain_cap - item\n    best_fit_priority = np.where(feasible_bins, 1 / (residual_capacity + 0.000001), 0)  # Avoid division by zero\n\n    # 3. Avoid Fragmentation: Penalize bins with too much remaining capacity after placing the item.\n    fragmentation_penalty = np.where(feasible_bins, np.exp(-0.1 * residual_capacity), 0) # Exponential decay\n   \n\n    # 4. Bonus for Almost Full Bins: Encourage filling nearly full bins.\n    almost_full_bonus = np.where(bins_remain_cap > 0.0, np.exp(-10 * np.abs(bins_remain_cap -item)/item) * feasible_bins, 0)\n\n    priorities = best_fit_priority * fragmentation_penalty + almost_full_bonus\n\n    return priorities\n\n[Reflection]\nThe better code uses a combination of best-fit, fragmentation avoidance, and nearly-full bin incentives with exponential scaling.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}