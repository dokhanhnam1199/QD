```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Disqualify bins that cannot fit the item.
    priorities[bins_remain_cap < item] = -np.inf

    # 2. Best Fit Criterion: Prioritize bins with minimal remaining space after adding the item.
    feasible_bins = bins_remain_cap >= item
    remaining_space = bins_remain_cap - item
    priorities[feasible_bins] = -remaining_space[feasible_bins]  # Smaller remaining space = higher priority

    # 3. Reward Near-Full Bins: Heavily prioritize bins that become almost full.
    almost_full_threshold = 0.9
    post_fill_ratio = (bins_remain_cap[feasible_bins] - remaining_space[feasible_bins]) / (bins_remain_cap[feasible_bins] + item - remaining_space[feasible_bins])
    almost_full = feasible_bins & (post_fill_ratio >= almost_full_threshold)
    priorities[almost_full] += 100

    # 4. Small bonus for bins which are already relatively full to encourage reuse of bins.
    initial_fill_ratio = 1 - (bins_remain_cap / np.max(bins_remain_cap)) if np.max(bins_remain_cap) > 0 else np.zeros_like(bins_remain_cap)
    priorities[feasible_bins] += 10 * initial_fill_ratio[feasible_bins]

    return priorities
```
