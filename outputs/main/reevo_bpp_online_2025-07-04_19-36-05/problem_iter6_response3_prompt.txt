{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Identify bins that can accommodate the item\n    can_accommodate = bins_remain_cap >= item\n\n    if np.any(can_accommodate):\n        # Base priority for bins that can accommodate the item\n        priorities[can_accommodate] = 1.0\n\n        # Prioritize bins with smaller remaining capacity, minimizing waste\n        remaining_capacity = bins_remain_cap[can_accommodate] - item\n        priorities[can_accommodate] += (1 - (remaining_capacity / bins_remain_cap[can_accommodate]))\n\n        # Prioritize bins where the remaining capacity is close to a certain threshold.\n        # This can be tuned.  Here, we prioritize if remaining capacity is close to 0.\n        priorities[can_accommodate] += np.exp(-5 * remaining_capacity) # exponential decay, tunable parameter\n\n        # Further bonus for bins that are already quite full (before adding the item).\n        # Avoids creating mostly empty new bins.\n        priorities[can_accommodate] += (bins_remain_cap[can_accommodate] / np.max(bins_remain_cap))\n\n    # Penalize bins that cannot accommodate the item\n    cannot_accommodate = bins_remain_cap < item\n    if np.any(cannot_accommodate):\n        # Negative priority based on how much the item exceeds the bin's capacity\n        priorities[cannot_accommodate] = - (item - bins_remain_cap[cannot_accommodate]) / item\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_size = np.max(bins_remain_cap)\n\n    # 1. Feasibility: Only consider bins that can fit the item.\n    feasible_bins = bins_remain_cap >= item\n\n    # If no bin is feasible, consider relative capacity.\n    if not np.any(feasible_bins):\n        return bins_remain_cap / bin_size # Return ratio of remaining capacity to bin size\n\n    # 2. Normalize remaining capacity.\n    normalized_cap = bins_remain_cap / bin_size\n\n    # 3. Best Fit Criterion: Prioritize bins with the smallest remaining capacity after placing the item.\n    residual_capacity = bins_remain_cap - item\n    best_fit_priority = np.where(feasible_bins, bin_size / (residual_capacity + 1e-9), 0) # Use bin size to scale priority.\n\n    # 4. Fragmentation Penalty: Heavily penalize small gaps after placement.\n    fragmentation_penalty = np.where(feasible_bins, np.exp(-5 * residual_capacity / bin_size), 0)\n\n    # 5. Near-Full Reward: Encourage filling bins close to full with a stronger non-linear scaling.\n    almost_full_bonus = np.where(feasible_bins, np.exp(-10 * (residual_capacity / bin_size)**2), 0)\n\n    # 6. Explicit Small Gap Penalty: Penalize remaining capacity below a certain threshold.\n    small_gap_penalty = np.where(feasible_bins & (residual_capacity < 0.1 * bin_size), -1, 0)\n\n    priorities = best_fit_priority + almost_full_bonus + fragmentation_penalty + small_gap_penalty\n    \n    #Ensure no negative priorities.\n    priorities = np.maximum(priorities, 0)\n\n    return priorities\n\n[Reflection]\nPrioritize feasibility, normalize, penalize fragmentation, reward near-full bins, and avoid small gaps.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}