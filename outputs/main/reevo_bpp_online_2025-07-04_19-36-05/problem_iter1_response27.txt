```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Assign high priority to bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] = 1.0

    # Scale priority based on remaining capacity after packing the item.
    remaining_capacity = bins_remain_cap[can_fit] - item
    priorities[can_fit] += remaining_capacity / np.max(bins_remain_cap) # np.max(bins_remain_cap) serves as scaling factor

    # If no bin can fit the item, assign some default priorities. Avoid selecting fully empty bins first if possible.
    if not np.any(can_fit):
        priorities = bins_remain_cap / np.max(bins_remain_cap) # scaled remaining capacity.
    
    return priorities
```
