```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Heuristic 1: Prefer bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1

    # Heuristic 2: Prefer bins with smallest remaining capacity AFTER adding item
    remaining_after_add = bins_remain_cap - item
    
    valid_remaining = remaining_after_add[can_fit]
    if len(valid_remaining) > 0:
        min_remaining = np.min(valid_remaining)
        indices = np.where((remaining_after_add == min_remaining) & can_fit)[0] # Use & for element-wise boolean AND
        priorities[indices] += 2 # Stronger preference

    # Heuristic 3: avoid waste
    waste = bins_remain_cap - item
    # If Waste is a small portion of item size (<=20%), then provide small preference to it.
    avoid_waste = (waste <= 0.2 * item) & can_fit # only consider candidates that item fits into
    priorities[avoid_waste] += 0.5
    
    # Heuristic 4: Give negative priority to items that cannot fit
    priorities[~can_fit] -= 0.1 # slight negative preference


    return priorities
```
