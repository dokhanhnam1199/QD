```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Feasibility: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    
    if np.any(feasible_bins):
        # 1. Remaining Capacity: Prioritize bins with smaller remaining capacity AFTER adding the item
        remaining_capacity_after = bins_remain_cap - item
        remaining_capacity_after[remaining_capacity_after < 0] = np.inf # Set to infinity if it doesn't fit (only for calculation)
        
        priorities[feasible_bins] = -remaining_capacity_after[feasible_bins]  # Smaller remaining capacity = higher priority

        # 2. Item Size Ratio:  Also factor in how much of the bin the item will fill.
        # This can help to consolidate items instead of spreading them too thin.
        item_size_ratio = item / bins_remain_cap
        priorities[feasible_bins] += item_size_ratio[feasible_bins] * 0.5 # Weigh the ratio effect.

        # 3. Avoid nearly full bins to improve future packing
        near_full_threshold = 0.9
        near_full_bins = (bins_remain_cap - item) / bins_remain_cap < (1 - near_full_threshold)
        priorities[near_full_bins & feasible_bins] -= 10  # Penalize nearly full bins

    else:
        # No bin can fit the item - assign low priority to all bins. This should not happen during online BPP, because a new bin should be added
        # If this happens, means there might be a need to initialize the capacity, return -inf
        priorities[:] = -np.inf
        
    return priorities
```
