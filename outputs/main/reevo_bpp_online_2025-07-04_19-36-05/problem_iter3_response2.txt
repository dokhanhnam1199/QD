```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate remaining space after placing the item.  Negative values indicate item won't fit.
    remaining_after_placement = bins_remain_cap - item
    
    # High priority for bins where the item fits best (smallest waste).
    # But only if the item *does* fit!

    fit_indices = remaining_after_placement >= 0
    
    if np.any(fit_indices):
        # Reward near-full bins aggressively
        priorities[fit_indices] = (bins_remain_cap[fit_indices] / item)
        priorities[fit_indices] += np.exp(-remaining_after_placement[fit_indices]) # Exponentially decaying reward for smaller waste.

        # Penalize wasted space relative to bin capacity (fragmentation)
        priorities[fit_indices] -= (remaining_after_placement[fit_indices] / bins_remain_cap[fit_indices])
    
    
    # If no bin fits, assign a very low priority to all bins.  The calling
    # function should then create a new bin.
    else:
        priorities = -bins_remain_cap #give a negative score based on the size, prefer smaller capacity bins.
    
    return priorities
```
