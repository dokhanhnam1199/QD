```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)

    # 1. Feasibility: Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item

    # 2. Best Fit Criterion: Prefer bins with remaining capacity closest to the item size.
    residual_capacity = bins_remain_cap - item
    best_fit_priority = np.where(feasible_bins, np.exp(-np.abs(residual_capacity) / (0.5 * item)), 0)  # Sharper peak around best fit

    # 3. Fragmentation Penalty (scaled to item size)
    fragmentation_penalty = np.where(feasible_bins, -10 * (residual_capacity / bin_capacity)**3 * (item/bin_capacity), 0)

    # 4. Reward Near-Full Bins (scaled to item size)
    near_full_bonus = np.where(feasible_bins, 5 * (1 - residual_capacity / bin_capacity) * (item/bin_capacity), 0)

    # 5. Existing Fill Priority (scaled to bin capacity)
    existing_fill_priority = bins_remain_cap / bin_capacity

    # Overall Priority
    priorities = feasible_bins * (best_fit_priority + fragmentation_penalty + near_full_bonus + 0.5 * existing_fill_priority)

    return priorities
```
