```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item

    # 2. Best Fit Criterion: Prefer bins with remaining capacity closest to the item size.
    residual_capacity = bins_remain_cap - item
    best_fit_priority = np.where(feasible_bins, np.exp(-2 * np.abs(residual_capacity)), 0)

    # 3. Avoid Fragmentation: Penalize bins with too much remaining capacity after placing the item.
    fragmentation_penalty = np.where(feasible_bins, np.exp(-0.1 * residual_capacity), 1) # slightly reduce

    # 4. Bonus for Almost Full Bins: Encourage filling nearly full bins.
    almost_full_bonus = np.where(feasible_bins & (residual_capacity >=0) & (residual_capacity < 0.1), 1.0, 0) # if nearly full

    # 5. Prioritize bins that are already somewhat full to avoid starting new bins unnecessarily.
    existing_fill_level = (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0
    existing_fill_priority = feasible_bins * existing_fill_level

    priorities = best_fit_priority * fragmentation_penalty + 0.8 * almost_full_bonus + 0.1 * existing_fill_priority

    return priorities
```
