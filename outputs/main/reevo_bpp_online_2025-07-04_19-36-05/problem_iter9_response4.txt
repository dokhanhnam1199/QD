```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    num_bins = len(bins_remain_cap)
    bin_size = 1 # Implicitly assume bin size is 1, as capacity is the only info given

    # 1. Feasibility: Only consider bins that can fit the item.  Explicit Infeasibility Penalty
    feasible_bins = bins_remain_cap >= item
    priorities = np.where(~feasible_bins, -1e9, priorities)  # Massive penalty for infeasible bins


    # 2. Best Fit (Item-Relative):  Maximize use of bin relative to item size.
    residual_capacity = bins_remain_cap - item
    best_fit_score = np.where(feasible_bins, np.exp(-5 * np.abs(residual_capacity) / item), 0)


    # 3. Fragmentation Avoidance (Cubic Penalty): Heavily penalize leaving small gaps.
    fragmentation_penalty = np.where(feasible_bins, -10 * (residual_capacity / bin_size)**3, 0) #Cubic penalty, scaled by bin size

    # 4. Reward Near-Full Bins:  Incentivize completely filling bins.
    near_full_reward = np.where(feasible_bins, np.exp(-20 * np.abs(residual_capacity) / bin_size), 0) #Scaled by bin size

    # Combine Heuristics Multiplicatively & Additively
    priorities = best_fit_score * (1 + near_full_reward) + fragmentation_penalty


    return priorities
```
