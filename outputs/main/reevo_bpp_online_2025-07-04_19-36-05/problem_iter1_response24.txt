```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Base priority: higher remaining capacity is better.
            priorities[i] = cap

            # Bonus for filling the bin well (but not too perfectly).
            fill_ratio = item / cap
            if 0.6 <= fill_ratio <= 1.0: #was 0.95
                priorities[i] += 10 * (1-abs(fill_ratio-0.8))  #add a bonus for fill ratios around 0.8

            # Potential slight penalty to avoid nearly perfect fills (can hinder future placements)
            if 0.95 <= fill_ratio <= 1.0: #prevents perfect fills, encourages fragmentation and less total bins
                priorities[i] -= 0.5 * (fill_ratio-0.95)
        else:
            priorities[i] = -np.inf  # Impossible to fit

    return priorities
```
