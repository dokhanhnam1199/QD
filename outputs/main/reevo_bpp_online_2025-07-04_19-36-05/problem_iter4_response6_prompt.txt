{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Calculate remaining space after placing the item. Negative values indicate item won't fit.\n    remaining_after_placement = bins_remain_cap - item\n\n    # High priority for bins where the item fits best (smallest waste).\n    # But only if the item *does* fit!\n    fit_indices = remaining_after_placement >= 0\n\n    if np.any(fit_indices):\n        # Prioritize bins with smaller remaining space after placement (tight fit).\n        priorities[fit_indices] = 1 / (remaining_after_placement[fit_indices] + 1e-6)  # Avoid division by zero\n\n        # Add a bonus for filling the bin close to full. This encourages packing items into bins that are already relatively full.\n        priorities[fit_indices] += (item / bins_remain_cap[fit_indices])\n\n        # Further improve by prioritizing bins that are already more full (before adding the item)\n        priorities[fit_indices] += (bins_remain_cap[fit_indices] / np.max(bins_remain_cap))\n    else:\n        # If no bin fits, assign a very low priority to all bins. The calling\n        # function should then create a new bin. Setting it to the *largest* remaining capacity\n        # increases probability of fitting future items.\n        priorities = bins_remain_cap # Prefer bins with larger capacity when the item does not fit, new bin will be created and it is better to create a bin that can hold many items.\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility: Can the item fit?\n    fit_mask = bins_remain_cap >= item\n\n    # Infeasible bins get the lowest priority\n    priorities[~fit_mask] = -np.inf\n\n    # Prioritize bins where the item fits.\n    if np.any(fit_mask):\n        remaining_space = bins_remain_cap[fit_mask] - item\n\n        # Heuristic: Balance packing density with avoiding small gaps.\n        # Prioritize bins with smaller remaining space, but penalize very small gaps.\n\n        # Normalize remaining space by item size for relative comparison\n        normalized_remaining_space = remaining_space / item\n\n        # Give higher priority to bins that use more of their capacity\n        priorities[fit_mask] = 1.0 - normalized_remaining_space\n\n        # Penalize leaving gaps smaller than a fraction of the item size (e.g., 1/4)\n        small_gap_penalty = -0.5  # Adjust penalty as needed\n        priorities[fit_mask][normalized_remaining_space < 0.25] += small_gap_penalty\n\n        # Penalize leaving extremely small gaps even more.\n        extreme_small_gap_penalty = -1.0\n        priorities[fit_mask][normalized_remaining_space < 0.1] += extreme_small_gap_penalty\n\n\n    return priorities\n\n[Reflection]\nExplicitly handle infeasibility, normalize remaining space, and penalize small gaps to improve packing density.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}