```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap)  # Assuming all bins have the same capacity

    # 1. Feasibility: Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item

    # 2. Best Fit: Reward bins where the remaining capacity after placing the item is minimal.
    residual_capacity = bins_remain_cap - item
    best_fit_priority = np.where(feasible_bins, np.exp(-5 * residual_capacity / bin_capacity), 0)

    # 3. Fragmentation Penalty: Heavily penalize creating small fragments, scaled to item size.
    # Cubic penalty makes smaller fragments much less desirable
    fragmentation_penalty = np.where(feasible_bins, -10 * (residual_capacity / bin_capacity)**3 * item, 0)


    # 4. Reward Near-Full Bins: Encourage filling bins that are already close to full.
    near_full_bonus = np.where(feasible_bins, ((bin_capacity - bins_remain_cap) / bin_capacity)**2 * item, 0)

    # 5. Combine Factors: Emphasize best fit and penalize fragmentation, with a small bonus for near-full bins.
    priorities = best_fit_priority + fragmentation_penalty + near_full_bonus

    # Ensure infeasible bins have -inf priority
    priorities = np.where(feasible_bins, priorities, -np.inf)

    return priorities
```
