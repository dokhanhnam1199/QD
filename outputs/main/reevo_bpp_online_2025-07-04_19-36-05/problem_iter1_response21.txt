```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item

    # 2. Best Fit Criterion: Prefer bins with remaining capacity closest to the item size.
    residual_capacity = bins_remain_cap - item
    best_fit_priority = np.where(feasible_bins, 1 / (residual_capacity + 0.000001), 0)  # Avoid division by zero

    # 3. Avoid Fragmentation: Penalize bins with too much remaining capacity after placing the item.
    fragmentation_penalty = np.where(feasible_bins, np.exp(-0.1 * residual_capacity), 0) # Exponential decay
   

    # 4. Bonus for Almost Full Bins: Encourage filling nearly full bins.
    almost_full_bonus = np.where(bins_remain_cap > 0.0, np.exp(-10 * np.abs(bins_remain_cap -item)/item) * feasible_bins, 0)

    priorities = best_fit_priority * fragmentation_penalty + almost_full_bonus

    return priorities
```
