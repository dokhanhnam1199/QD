```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = 1.0 # Assuming bin size is 1, can be generalized.

    # 1. Feasibility: Only consider bins that can fit the item.  Penalize infeasible bins hard.
    feasible_bins = bins_remain_cap >= item
    priorities = np.where(~feasible_bins, -1e9, priorities) # Large negative priority for infeasible bins

    # 2. Best Fit Criterion: Prefer bins with remaining capacity closest to the item size.
    residual_capacity = bins_remain_cap - item
    best_fit_priority = np.where(feasible_bins, np.exp(-5 * np.abs(residual_capacity) / item), 0)

    # 3. Avoid Fragmentation: Penalize bins with too much remaining capacity after placing the item. Cubic penalty to punish fragmentation.
    fragmentation_penalty = np.where(feasible_bins, 1 - (residual_capacity / bin_size)**3, 0)
    fragmentation_penalty = np.clip(fragmentation_penalty, 0, 1) # Ensure penalty is between 0 and 1.

    # 4. Bonus for Almost Full Bins: Reward near-full bins directly.
    almost_full_bonus = np.where(feasible_bins, np.exp(-10 * np.abs(residual_capacity)), 0)

    # 5. Item Size consideration: Prefer bins that result in minimal waste relative to the item size.
    item_size_priority = np.where(feasible_bins, np.exp(-5 * residual_capacity / item), 0)

    # Combine the heuristics multiplicatively, focusing on best-fit and fragmentation.
    priorities = best_fit_priority * fragmentation_penalty * (1 + almost_full_bonus) * (1 + item_size_priority)

    return priorities
```
