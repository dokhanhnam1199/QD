```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit-Decreasing Inspired: Prioritize bins that can fit the item reasonably well.
    # Avoid bins that are either too full or have way too much remaining capacity.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask]  # Remaining space ratio after placing the item. Smaller ratio is better.
    priorities[fit_mask] = 1 - priorities[fit_mask] #Invert so that smaller ratio gives larger priority.

    # Give a slight boost to bins that are close to full (to consolidate).  This helps with "almost full" bins
    almost_full_mask = (bins_remain_cap < item * 1.2) & (bins_remain_cap >= item) #Bins that can fit but with not much remaining
    priorities[almost_full_mask] += 0.1 #Boost

    # Penalize bins with significantly more capacity than the item size (avoid fragmentation).
    large_capacity_mask = bins_remain_cap > item * 2  # Arbitrary threshold
    priorities[large_capacity_mask] -= 0.05 #Slight penalize

    # Avoid selecting bins that are already full or nearly full
    too_full_mask = bins_remain_cap < item
    priorities[too_full_mask] = -np.inf

    return priorities
```
