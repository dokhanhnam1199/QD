```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First Fit Decreasing variant
            space_waste = cap - item
            # Try to fill bins as much as possible
            priorities[i] = 1 / (space_waste + 1e-9) # Add small number to avoid division by zero

            # Modified First Fit Decreasing - penalize bins that are almost full
            if space_waste < 0.1:  # If bin is almost full
                priorities[i] *= 0.5 # Lower priority

            # Give a bonus to bins that fit the item perfectly (or near perfectly)
            if abs(space_waste) < 1e-6: # within tolerance
                 priorities[i] = np.inf

        else:
            priorities[i] = -np.inf

    return priorities
```
