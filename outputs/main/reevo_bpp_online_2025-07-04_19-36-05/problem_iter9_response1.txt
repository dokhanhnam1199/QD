```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = np.max(bins_remain_cap) # Implicitly relies on bins having the same capacity

    # Feasibility check:
    feasible = bins_remain_cap >= item

    # Best-fit scaled to item size:
    residual = bins_remain_cap - item
    best_fit = np.where(feasible, np.exp(-2 * np.abs(residual) / item), 0)

    # Fragmentation penalty (cubic):
    frag_penalty = np.where(feasible, 1 - (residual / bin_size)**3, 0)
    frag_penalty = np.clip(frag_penalty, 0, 1) # Ensure penalty is within [0, 1]

    # Near-full reward:
    near_full_reward = np.where(feasible, np.exp(-5 * np.abs(residual) / bin_size), 0)

    # Infeasibility penalty (large negative value):
    infeasibility_penalty = np.where(~feasible, -1e9, 0)

    # Learned weights (example values):
    w_best_fit = 0.4
    w_frag = 0.3
    w_near_full = 0.3

    # Multiplicative combination:
    priorities = w_best_fit * best_fit + w_frag * frag_penalty + w_near_full * near_full_reward + infeasibility_penalty

    return priorities
```
