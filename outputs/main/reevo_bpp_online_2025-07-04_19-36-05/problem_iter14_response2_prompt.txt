{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap) #Assumed same capacity for all bins\n\n    # 1. Feasibility: Only consider bins that can fit the item.\n    feasible_bins = bins_remain_cap >= item\n\n    # 2. Residual Capacity Priority: Favor bins where residual capacity after placing the item is small.\n    residual_capacity = np.clip((bins_remain_cap - item) / bin_capacity, 0, 1)  # Normalized, clipped\n    residual_priority = np.where(feasible_bins, 1 - residual_capacity, 0) # Higher priority for lower residual\n\n    # 3. Load Balancing: Give a bonus to bins that are less full. Normalize by max bin capacity.\n    load_priority = np.clip(bins_remain_cap / bin_capacity, 0, 1) # Normalize remaining capacity\n    load_priority = 1-load_priority\n    load_priority = np.where(feasible_bins, load_priority,0)\n\n    # 4. Bonus for good fit relative to the item. Clip and scale.\n    fit_score = np.clip((item - (bins_remain_cap - item))/item,0,1) #How much is wasted relative to item size\n    fit_bonus = np.where(feasible_bins, 1-fit_score, 0)\n\n\n    priorities = residual_priority + 0.5 * load_priority + 0.3 * fit_bonus\n\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # 1. Feasibility: Only consider bins that can fit the item.\n    feasible_bins = bins_remain_cap >= item\n\n    # 2. Best Fit Criterion: Prefer bins with remaining capacity closest to the item size.\n    residual_capacity = bins_remain_cap - item\n    best_fit_priority = np.where(feasible_bins, np.exp(-2 * np.abs(residual_capacity)), 0)\n\n    # 3. Avoid Fragmentation: Penalize bins with too much remaining capacity after placing the item.\n    fragmentation_penalty = np.where(feasible_bins, np.exp(-0.1 * residual_capacity), 1) # slightly reduce\n\n    # 4. Bonus for Almost Full Bins: Encourage filling nearly full bins.\n    almost_full_bonus = np.where(feasible_bins & (residual_capacity >=0) & (residual_capacity < 0.1), 1.0, 0) # if nearly full\n\n    # 5. Prioritize bins that are already somewhat full to avoid starting new bins unnecessarily.\n    existing_fill_level = (np.max(bins_remain_cap) - bins_remain_cap) / np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 0\n    existing_fill_priority = feasible_bins * existing_fill_level\n\n    priorities = best_fit_priority * fragmentation_penalty + 0.8 * almost_full_bonus + 0.1 * existing_fill_priority\n\n    return priorities\n\n[Reflection]\nThe better code emphasizes best fit, reduces fragmentation, and prioritizes partially filled bins using exponential functions.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}