```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Identify bins that can accommodate the item.
    can_accommodate = bins_remain_cap >= item

    if np.any(can_accommodate):
        # Base priority for feasible bins.
        priorities[can_accommodate] = 1.0

        # Remaining capacity after placing the item in feasible bins.
        remaining_capacity = bins_remain_cap[can_accommodate] - item

        # Prioritize bins based on how much they will be filled (utilization).
        # Non-linear scaling to emphasize near-full bins.
        utilization = 1 - (remaining_capacity / bins_remain_cap[can_accommodate])
        priorities[can_accommodate] += np.power(utilization, 2)  # Squaring enhances the priority of fuller bins

        # Further prioritize bins where the remaining capacity is close to zero.
        priorities[can_accommodate] += np.exp(-5 * np.abs(remaining_capacity) / item) # Exponential scaling for proximity

    # Handle bins that cannot accommodate the item (discourage overfilling).
    cannot_accommodate = bins_remain_cap < item
    if np.any(cannot_accommodate):
        # Negative priority proportional to the overflow.
        overflow = item - bins_remain_cap[cannot_accommodate]
        # Scale the negative priority based on average bin size or the item size
        scale = np.mean(bins_remain_cap[bins_remain_cap > 0]) if np.any(bins_remain_cap > 0) else item
        priorities[cannot_accommodate] = -np.power(overflow / scale, 0.5) # Sublinear penalty to avoid over-penalizing

    return priorities
```
