```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heuristic 1: Minimal wasted space after placing item.  Invalid moves penalized harshly.
    can_fit = item <= bins_remain_cap
    priorities[~can_fit] = -np.inf

    remaining_space = bins_remain_cap - item
    priorities[can_fit] = 1.0 / (remaining_space[can_fit] + 1e-9)  # Avoid division by zero. Higher priority for less wasted space.

    # Heuristic 2: Utilization rate of the bin after placing the item.
    utilization_after = item / (bins_remain_cap + 1e-9)
    priorities[can_fit] += utilization_after[can_fit]  # Higher utilization is better.

    # Heuristic 3: Penalize near-empty bins to encourage load balancing.
    mean_remaining_capacity = np.mean(bins_remain_cap)
    emptyish = bins_remain_cap > (mean_remaining_capacity * 1.2)  # Slightly more aggressive than v1
    priorities[emptyish] -= 0.2  # More aggressive penalty.

    # Heuristic 4: Immediate fit bonus - gives high priority to bins which exactly fits the item
    immediate_fit = bins_remain_cap == item
    priorities[immediate_fit] += 1  # Substantial bonus

    return priorities
```
