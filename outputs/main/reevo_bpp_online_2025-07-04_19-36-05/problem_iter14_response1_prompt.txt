{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    feasible_bins = bins_remain_cap >= item\n\n    if not np.any(feasible_bins):\n        return priorities - 1.0  # Return low priority if no bin fits\n\n    residual_capacity = bins_remain_cap - item\n    bin_capacity = np.max(bins_remain_cap)\n\n    # 1. Best Fit Criterion (Exponential, item-relative)\n    best_fit_priority = np.where(feasible_bins, np.exp(-5 * np.abs(residual_capacity) / item), 0)\n\n    # 2. Fragmentation Penalty (Exponential, item-relative) - encourage smaller frag\n    fragmentation_penalty = np.where(feasible_bins, np.exp(-1 * residual_capacity / item), 0)\n\n    # 3. Encourage Filling (Bonus based on existing fill level, scaled)\n    existing_fill_level = (bin_capacity - bins_remain_cap) / bin_capacity\n    already_full_bonus = feasible_bins * existing_fill_level\n\n    # 4. Near-Full Bonus (Direct, item-relative threshold)\n    near_full_threshold = 0.1 * item\n    near_full_bonus = np.where(feasible_bins & (residual_capacity >= 0) & (residual_capacity <= near_full_threshold), 1.0, 0.0)\n    \n    # 5. Balance load among bins (variance penalty) - stronger penalty\n    bin_utilization = (bin_capacity - bins_remain_cap)/bin_capacity\n    load_imbalance_penalty = -10 * np.var(bin_utilization)\n\n    #6. Avoid creating very small fragments\n    small_fragment_penalty = np.where(feasible_bins & (residual_capacity > 0) & (residual_capacity < 0.05 * bin_capacity), -1.0, 0.0) #Avoid very small fragment\n\n    # Combine priorities additively with weights\n    priorities = (\n        best_fit_priority\n        + 0.5 * fragmentation_penalty\n        + 0.3 * already_full_bonus\n        + 0.8 * near_full_bonus\n        + 0.1 * load_imbalance_penalty\n        + 0.7 * small_fragment_penalty\n    )\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    bin_capacity = np.max(bins_remain_cap)  # Assume all bins have same initial capacity\n\n    # 1. Feasibility: Only consider bins that can fit the item.\n    feasible_bins = bins_remain_cap >= item\n\n    # 2. Remaining Capacity Priority (scaled by item size): Favor bins with tighter fit.\n    # Normalize residual capacity by item size and bin capacity. Clip to [0, 1].\n    residual_capacity = bins_remain_cap - item\n    normalized_residual = np.clip(residual_capacity / bin_capacity, 0, 1) # normalize to bin size\n    remaining_cap_priority = np.where(feasible_bins, 1 - normalized_residual, 0) # normalized to bin size\n\n    # 3. Load Balancing: Give a bonus to bins with less remaining capacity relative to mean\n    mean_remaining_cap = np.mean(bins_remain_cap)\n    load_balance_bonus = np.where(feasible_bins, np.exp(-2 * np.maximum(0, mean_remaining_cap - bins_remain_cap) / bin_capacity), 0) #compare to mean.\n\n    # 4. Direct Bonus: If the item fits perfectly (or nearly so), give a significant bonus.\n    perfect_fit_bonus = np.where(feasible_bins & (residual_capacity >= 0) & (residual_capacity <= 0.1 * item), 0.5, 0) #relative to item\n\n    # 5. Prioritize partly full bins, prevent extreme values with clipped feature\n    fill_level = np.clip((bin_capacity - bins_remain_cap)/bin_capacity, 0, 1) #relative to bin size\n    partly_full_bonus = np.where(feasible_bins, fill_level, 0)\n\n    priorities = remaining_cap_priority + 0.3 * load_balance_bonus + perfect_fit_bonus + 0.1 * partly_full_bonus\n    return priorities\n\n[Reflection]\nNormalization improves scaling. Load balancing and fill level bonuses are beneficial. Relative thresholds are key.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}