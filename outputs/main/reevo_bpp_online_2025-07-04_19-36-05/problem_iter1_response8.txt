```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Prioritize bins that can accommodate the item
    valid_bins = bins_remain_cap >= item
    
    # If no bin can accommodate, assign a very low priority everywhere except the fullest bin, for which the priority is zero.
    if not np.any(valid_bins):
        min_capacity_index = np.argmin(bins_remain_cap)
        priorities[min_capacity_index] = 0.0
        priorities[np.arange(len(bins_remain_cap)) != min_capacity_index] = -np.inf
        return priorities
    
    # Base priority: higher remaining capacity is penalized more (First Fit Decreasing heuristic)
    priorities[valid_bins] = -bins_remain_cap[valid_bins]

    # Bonus for bins where the item fits relatively snugly. Goal: leave as little free space as possible
    slack = bins_remain_cap[valid_bins] - item
    priorities[valid_bins] += (1 / (slack + 1e-6)) # Avoid division by zero

    # Huge bonus for bins that become perfectly full with the addition of this item.
    perfect_fit = (slack == 0)
    priorities[valid_bins][perfect_fit] += 1000

    return priorities
```
