```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_capacity = np.max(bins_remain_cap) # Assume all bins have the same capacity

    # 1. Feasibility: Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item

    # If no bin is feasible, prioritize based on remaining capacity relative to item size.
    if not np.any(feasible_bins):
         return bins_remain_cap / item
    
    # 2. Best Fit Criterion: Calculate remaining capacity after placing the item.
    residual_capacity = bins_remain_cap - item

    # 3. Fragmentation Penalty: Heavily penalize bins with small gaps relative to bin capacity.
    fragmentation_penalty = np.where(feasible_bins, np.exp(-10 * residual_capacity / bin_capacity), 0)

    # 4. Near-Full Bonus: Reward bins that become nearly full after placing the item.
    near_full_bonus = np.where(feasible_bins, np.exp(-10 * np.abs(residual_capacity) / bin_capacity), 0)

    # 5. Normalize Remaining Space: Give a bonus to bins that are already relatively full.
    normalized_remaining_space = bins_remain_cap / bin_capacity
    existing_fill_bonus = np.where(feasible_bins, normalized_remaining_space, 0)

    priorities = feasible_bins * (near_full_bonus + existing_fill_bonus - fragmentation_penalty)

    return priorities
```
