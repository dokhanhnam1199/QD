```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining space after placing the item. Negative values indicate item won't fit.
    remaining_after_placement = bins_remain_cap - item

    # High priority for bins where the item fits best (smallest waste).
    # But only if the item *does* fit!
    fit_indices = remaining_after_placement >= 0

    if np.any(fit_indices):
        # Prioritize bins with smaller remaining space after placement (tight fit).
        priorities[fit_indices] = 1 / (remaining_after_placement[fit_indices] + 1e-6)  # Avoid division by zero

        # Add a bonus for filling the bin close to full. This encourages packing items into bins that are already relatively full.
        priorities[fit_indices] += (item / bins_remain_cap[fit_indices])

        # Further improve by prioritizing bins that are already more full (before adding the item)
        priorities[fit_indices] += (bins_remain_cap[fit_indices] / np.max(bins_remain_cap))
    else:
        # If no bin fits, assign a very low priority to all bins. The calling
        # function should then create a new bin. Setting it to the *largest* remaining capacity
        # increases probability of fitting future items.
        priorities = bins_remain_cap # Prefer bins with larger capacity when the item does not fit, new bin will be created and it is better to create a bin that can hold many items.
    return priorities
```
