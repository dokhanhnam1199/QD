```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Prioritizes feasibility, then fullness. Aggressively reward near-full bins and penalize fragmentation and wasted space, scaling rewards/penalties proportionally to bin capacity. Vectorize operations for efficiency.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining space after placing the item. Negative values indicate item won't fit.
    remaining_after_placement = bins_remain_cap - item

    # Feasibility: Very low priority for bins where the item doesn't fit.
    infeasible_mask = remaining_after_placement < 0
    priorities[infeasible_mask] = -np.inf

    # Calculate fullness-related rewards for feasible bins.
    feasible_mask = ~infeasible_mask
    if np.any(feasible_mask):
        # Reward filling bins close to full, scaling by bin capacity.
        fullness_reward = (item / bins_remain_cap[feasible_mask])**2  # Square it to aggressively reward near-full
        priorities[feasible_mask] += fullness_reward

        # Penalize wasted space (fragmentation), scaling by bin capacity.
        waste_penalty = (remaining_after_placement[feasible_mask] / bins_remain_cap[feasible_mask])
        priorities[feasible_mask] -= waste_penalty

        # Bonus if perfect fit
        perfect_fit_mask = remaining_after_placement[feasible_mask] == 0
        priorities[feasible_mask][perfect_fit_mask] += 1  # significant bonus for perfect fit

    return priorities
```
