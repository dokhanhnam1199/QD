```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins that can fit the item.
    feasible_bins = bins_remain_cap >= item

    # 2. Best Fit Criterion: Prefer bins with remaining capacity closest to the item size.  Higher the score if the fit is better.
    residual_capacity = bins_remain_cap - item
    best_fit_priority = np.where(feasible_bins, np.exp(-5 * np.abs(residual_capacity)), 0)

    # 3. Encourage Existing Bin Fill: The fuller a bin is, the more preferable to add the new item.
    existing_fill_priority = feasible_bins * (1 - bins_remain_cap / np.max(bins_remain_cap))

    # 4. Item-Relative Waste Consideration: Penalize bins based on the waste *relative to item size*
    item_relative_waste_penalty = np.where(feasible_bins, np.exp(-2 * residual_capacity / item), 0)

    # Combine the priorities
    priorities = best_fit_priority + 0.5 * existing_fill_priority + 0.3 * item_relative_waste_penalty

    return priorities
```
