```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines normalized fit feasibility with adaptive sigmoid penalties, integrating dynamic adjustments for fine-tuned decision-making.
    """
    # Check if item fits into the bin
    can_fit = (bins_remain_cap >= item).astype(float)
    
    # Normalize remaining capacity
    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)
    
    # Calculate adaptive midpoint and steepness
    midpoint = item / (np.mean(bins_remain_cap) + 1e-6)
    penalty_factor = 14.931397941541181 + 5 * (item / np.max(bins_remain_cap))
    
    # Calculate sigmoid penalty
    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))
    
    # Calculate priority score by combining feasibility and penalty
    priority_score = can_fit * (1 - sigmoid_penalty)
    
    return priority_score
```
