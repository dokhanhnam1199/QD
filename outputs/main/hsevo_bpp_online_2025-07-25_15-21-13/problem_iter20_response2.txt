```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines fit feasibility, adaptive sigmoid penalties, and dynamic midpoint adjustment for balanced prioritization.
    """
    # Fit feasibility
    can_fit = (bins_remain_cap >= item).astype(float)
    
    # Normalize remaining capacity
    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)
    
    # Adaptive midpoint calculation
    midpoint = item / (np.mean(bins_remain_cap) + 1e-6)
    
    # Adaptive sigmoid steepness
    k = 1.0 + (item / np.max(bins_remain_cap)) * 5
    
    # Dynamic sigmoid penalty
    sigmoid_penalty = 1 / (1 + np.exp(-k * (norm_remain_cap - midpoint)))
    
    # Combine feasibility and adaptive penalty
    priority_score = can_fit * (1 - sigmoid_penalty)
    
    return priority_score
```
