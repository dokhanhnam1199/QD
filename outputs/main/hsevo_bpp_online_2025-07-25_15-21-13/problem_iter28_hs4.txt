import numpy as np

def priority_v2(
    item: float, 
    bins_remain_cap: np.ndarray, 
    min_max_eps: float = 6.433931389191403e-06,
    penalty_factor_const: float = 7.810945176453208,
    penalty_factor_multiplier: float = 3.210777306872405) -> np.ndarray:
    """
    Prioritizes bins by combining normalized fit feasibility, adaptive sigmoid penalty, and dynamic midpoint.
    """
    can_fit = (bins_remain_cap >= item).astype(float)
    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + min_max_eps)
    midpoint = item / np.max(bins_remain_cap)
    penalty_factor = penalty_factor_const + penalty_factor_multiplier * (item / np.max(bins_remain_cap))
    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))
    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + min_max_eps)
    return can_fit * sigmoid_penalty / (penalty + min_max_eps)
