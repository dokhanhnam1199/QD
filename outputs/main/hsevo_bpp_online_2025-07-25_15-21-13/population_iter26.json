[
  {
    "stdout_filepath": "problem_iter26_response0.txt_stdout.txt",
    "code_path": "problem_iter26_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining fit feasibility, adaptive midpoint, and sigmoid-penalty for precise bin selection.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)  # Check if item fits\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)  # Normalize remaining capacity\n    midpoint = item / (np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1e-6)  # Adaptive midpoint\n    penalty_factor = 6.0 + 2 * midpoint  # Dynamic penalty factor\n    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))  # Sigmoid penalty\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)  # Penalty based on remaining capacity\n    priority_scores = can_fit * sigmoid_penalty / (penalty + 1e-6)  # Combined priority score\n    return priority_scores",
    "response_id": 0,
    "tryHS": false,
    "obj": 1.9644994016753137,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response1.txt_stdout.txt",
    "code_path": "problem_iter26_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using fit feasibility, adaptive sigmoid penalties, and dynamic normalization.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    midpoint = item / (np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1e-6)\n    penalty_factor = 5.0 + 1.5 * (item / (np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1e-6))\n    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)\n    priority_scores = can_fit * sigmoid_penalty / (penalty + 1e-6)\n    return priority_scores",
    "response_id": 1,
    "tryHS": false,
    "obj": 2.921818907060227,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response2.txt_stdout.txt",
    "code_path": "problem_iter26_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining normalized fit feasibility, adaptive sigmoid penalty, and dynamic midpoint.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    midpoint = item / np.max(bins_remain_cap)\n    penalty_factor = 8.060154863007442 + 3 * (item / np.max(bins_remain_cap))\n    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)\n    return can_fit * sigmoid_penalty / (penalty + 1e-6)",
    "response_id": 2,
    "tryHS": false,
    "obj": 1.0769844435580445,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response3.txt_stdout.txt",
    "code_path": "problem_iter26_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using normalized fit feasibility, adaptive midpoint, and dynamic penalty factors.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    midpoint = item / (np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1e-6)\n    penalty_factor = 5.0 + 2 * (item / (np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1e-6))\n    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)\n    priority_scores = can_fit * sigmoid_penalty / (penalty + 1e-6)\n    return priority_scores",
    "response_id": 3,
    "tryHS": false,
    "obj": 2.6725169525329036,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response4.txt_stdout.txt",
    "code_path": "problem_iter26_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines adaptive sigmoid penalty and dynamic midpoint for precise and flexible bin prioritization.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)  # Check if item fits\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    x0 = item / (np.max(bins_remain_cap) + 1e-6)  # Dynamic midpoint based on item size\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)  # Adaptive penalty\n    sigmoid_steepness = 10.0  # Tuned sigmoid steepness for better fit\n    priority_scores = can_fit * (1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - x0)))) / (penalty + 1e-6)\n    return priority_scores",
    "response_id": 4,
    "tryHS": false,
    "obj": 3.4004786597527064,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response5.txt_stdout.txt",
    "code_path": "problem_iter26_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines adaptive sigmoid penalty and dynamic midpoint for precise and flexible bin prioritization.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)  # Check if item fits\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    x0 = item / (np.max(bins_remain_cap) + 1e-6)  # Dynamic midpoint based on item size\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)  # Adaptive penalty\n    sigmoid_steepness = 10.0  # Tuned sigmoid steepness for better fit\n    priority_scores = can_fit * (1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - x0)))) / (penalty + 1e-6)\n    return priority_scores",
    "response_id": 5,
    "tryHS": false,
    "obj": 3.4004786597527064,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response6.txt_stdout.txt",
    "code_path": "problem_iter26_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining fit feasibility, dynamic midpoint, and adaptive sigmoid penalties.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)  # Check if item fits in the bin\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    midpoint = item / (np.max(bins_remain_cap) + 1e-6)  # Dynamic midpoint based on item size\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)  # Adaptive penalty\n    sigmoid_steepness = 10.0  # Tuned sigmoid steepness\n    sigmoid_priority = 1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - midpoint)))\n    adaptive_influence = sigmoid_priority / (penalty + 1e-6)\n    priority_scores = can_fit * adaptive_influence\n    return priority_scores",
    "response_id": 6,
    "tryHS": false,
    "obj": 3.4004786597527064,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response7.txt_stdout.txt",
    "code_path": "problem_iter26_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining fit feasibility, dynamic midpoint, adaptive sigmoid penalties, and normalized capacity.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)  # Check if item fits in the bin\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    x0 = item / (np.max(bins_remain_cap) + 1e-6)  # Dynamic midpoint based on item size\n    penalty_factor = 10 + 4 * (item / np.max(bins_remain_cap))  # Adaptive penalty factor\n    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - x0)))\n    priority_scores = can_fit * (1 - sigmoid_penalty)  # Combine feasibility and penalty\n    return priority_scores",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response8.txt_stdout.txt",
    "code_path": "problem_iter26_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining normalized fit feasibility, adaptive sigmoid penalties, and dynamic midpoint.\n    \"\"\"\n    # Check if the item can fit in the bin\n    can_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize remaining capacity\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Calculate adaptive midpoint based on item size relative to bin capacity\n    midpoint = item / (np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1e-6)\n    \n    # Calculate dynamic penalty factor based on item size\n    penalty_factor = 6.0 + 2 * (item / (np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1e-6))\n    \n    # Calculate adaptive sigmoid penalty to adjust priority based on remaining capacity and item size\n    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))\n    \n    # Combine feasibility and sigmoid penalty to calculate priority scores\n    priority_scores = can_fit * sigmoid_penalty\n    \n    return priority_scores",
    "response_id": 8,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response9.txt_stdout.txt",
    "code_path": "problem_iter26_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining normalized fit feasibility, adaptive sigmoid penalties, and dynamic midpoints.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    midpoint = item / np.max(bins_remain_cap)\n    penalty_factor = 8.060154863007442 + 3 * (item / np.max(bins_remain_cap))\n    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)\n    adaptive_penalty = 1 / (1 + np.exp(5 * penalty))\n    return can_fit * sigmoid_penalty * adaptive_penalty",
    "response_id": 9,
    "tryHS": false,
    "obj": 25.787794176306356,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]