```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins by dynamically adjusting parameters based on item and bin characteristics,
    using normalized normalization and adaptive sigmoid functions for specificity and flexibility.
    """
    # Calculate the feasible bins where the item can fit
    can_fit = (bins_remain_cap >= item).astype(float)
    
    # Normalize remaining capacities with dynamic range
    epsilon = 1e-6
    max_cap = np.max(bins_remain_cap)
    min_cap = np.min(bins_remain_cap)
    dynamic_range = max_cap - min_cap + epsilon
    norm_remain_cap = (bins_remain_cap - min_cap) / dynamic_range
    
    # Calculate adaptive penalty factor based on item size and bin capacity
    adaptive_penalty_factor = 5 + 5 * (item / max_cap)
    
    # Calculate dynamic midpoint for sigmoid based on item size
    dynamic_midpoint = item / max_cap
    
    # Calculate sigmoid penalty to penalize larger remaining capacities when needed
    sigmoid_penalty = 1 / (1 + np.exp(-adaptive_penalty_factor * (norm_remain_cap - dynamic_midpoint)))
    
    # Calculate penalty for bins that potentially over-use capacity
    penalty = (bins_remain_cap - item) / (max_cap + epsilon)
    
    # Combine feasibility, sigmoid penalty, and adaptive penalty for priority score
    priority_score = can_fit * sigmoid_penalty / (penalty + epsilon)
    
    return priority_score
```
