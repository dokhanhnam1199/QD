import numpy as np

def priority_v2(
    item: float, 
    bins_remain_cap: np.ndarray, 
    k: float = 1.9815951469152202, 
    sigmoid_midpoint_offset: float = 0.9307047468303047, 
    max_leftover_space_const: float = 9.79172845848556e-06) -> np.ndarray:
    """Combines fit feasibility with normalized penalties and adaptive sigmoid to prioritize bins."""
    # Fit feasibility
    ifbinsfit = (bins_remain_cap >= item).astype(float)
    # Leftover space
    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)
    # Normalized leftover space
    normalized_leftover = leftover_space / (np.max(leftover_space) + max_leftover_space_const)
    # Sigmoid function with dynamic adjustment based on item size
    x0 = sigmoid_midpoint_offset - (item / (np.max(bins_remain_cap) + max_leftover_space_const))  # Midpoint adjusted by item size
    priority_scores = ifbinsfit * 1 / (1 + np.exp(-k * (1 - normalized_leftover - x0)))
    return priority_scores
