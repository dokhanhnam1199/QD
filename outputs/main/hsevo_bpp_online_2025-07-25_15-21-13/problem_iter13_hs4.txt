import numpy as np

def priority_v2(
    item: float, 
    bins_remain_cap: np.ndarray, 
    sigmoid_steepness: float = 5.633818407474149, 
    max_cap_offset: float = 2.9172463312073285e-06) -> np.ndarray:
    """
    Prioritizes bins by combining normalized fit feasibility, dynamic sigmoid penalty, and adaptive item fit.
    """
    ifbinsfit = (bins_remain_cap >= item).astype(float)  # Check if item fits in the bin
    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + max_cap_offset)
    sigmoid_priority = 1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - (item / np.max(bins_remain_cap)))))  # Dynamic midpoint
    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + max_cap_offset)  # Adaptive penalty
    return ifbinsfit * sigmoid_priority / (penalty + max_cap_offset)  # Combine feasibility, sigmoid, and penalty
