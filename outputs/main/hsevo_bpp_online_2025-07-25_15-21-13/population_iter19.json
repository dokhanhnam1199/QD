[
  {
    "stdout_filepath": "problem_iter17_response0.txt_stdout.txt",
    "code_path": "problem_iter17_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines normalized fit feasibility with adaptive sigmoid penalties, adjusting for item size and remaining capacity.\n    \"\"\"\n    # Fit feasibility\n    can_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize remaining capacity\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Adaptive midpoint calculation\n    midpoint = item / (np.mean(bins_remain_cap) + 1e-6)\n    \n    # Dynamic sigmoid penalty\n    sigmoid_penalty = 1 / (1 + np.exp(-10 * (norm_remain_cap - midpoint)))\n    \n    # Combine feasibility and adaptive penalty\n    priority_score = can_fit * (1 - sigmoid_penalty)\n    \n    return priority_score",
    "response_id": 0,
    "tryHS": true,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response1.txt_stdout.txt",
    "code_path": "problem_iter17_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines normalized fit feasibility with dynamic sigmoid penalization, focusing on adaptive space utilization.\n    \"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)  # Check if item fits\n    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)  # Calculate leftover space\n    norm_leftover = leftover_space / (np.max(bins_remain_cap) + 1e-6)  # Normalize leftover space\n    k = 1.0  # Steepness of the sigmoid\n    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))  # Dynamic midpoint based on item size\n    adaptive_penalty = np.abs(norm_leftover - x0)  # Adaptive penalty based on normalized leftover space\n    priority_scores = ifbinsfit * (1 / (1 + np.exp(-k * (1 - norm_leftover - x0)))) / (adaptive_penalty + 1e-6)  # Sigmoid priority calculation\n    return priority_scores",
    "response_id": 1,
    "tryHS": false,
    "obj": 12.714399680893498,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response2.txt_stdout.txt",
    "code_path": "problem_iter17_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines normalized fit feasibility with dynamic sigmoid penalties and adaptive midpoint calculations.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)  # Check if item fits in the bin\n    norm_leftover = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)  # Normalize leftover space\n    k = 5.0  # Steepness of the sigmoid\n    x0 = item / (np.max(bins_remain_cap) + 1e-6)  # Dynamic midpoint based on item size\n    priority_scores = can_fit * (1 / (1 + np.exp(-k * (norm_leftover - x0))))  # Sigmoid penalty for space efficiency\n    return priority_scores",
    "response_id": 2,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response3.txt_stdout.txt",
    "code_path": "problem_iter17_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using dynamic sigmoid penalties, adaptive fit feasibility, and prioritization adjustments.\n    \"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    sigmoid_steepness = 10 * (1 - item / (np.max(bins_remain_cap) + 1e-6))\n    sigmoid_priority = 1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - item / (np.max(bins_remain_cap) + 1e-6))))\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)\n    priority_adjustment = np.exp(-np.abs(norm_remain_cap - 1) * 5)\n    return ifbinsfit * sigmoid_priority / (penalty + 1e-6) * priority_adjustment",
    "response_id": 3,
    "tryHS": false,
    "obj": 86.58755484643,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response4.txt_stdout.txt",
    "code_path": "problem_iter17_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using normalized fit feasibility, dynamic sigmoid penalties, and adaptive adjustments.\n    \"\"\"\n    # Check if item fits in the bin\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize remaining capacity dynamically\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Dynamic midpoint calculation\n    midpoint = (np.median(bins_remain_cap) - item) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Sigmoid function to balance priorities with dynamic steepness\n    sigmoid_steepness = 10.0\n    sigmoid_priority = 1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - midpoint)))\n    \n    # Adaptive priority adjustment\n    priority_adjustment_factor = (np.max(bins_remain_cap) - bins_remain_cap) / (np.max(bins_remain_cap) - item + 1e-6)\n    adjusted_priority = sigmoid_priority * priority_adjustment_factor\n    \n    # Final priority considering fit feasibility and adjusted priority\n    return ifbinsfit * adjusted_priority",
    "response_id": 4,
    "tryHS": false,
    "obj": 12.963701635420822,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response5.txt_stdout.txt",
    "code_path": "problem_iter17_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using normalized fit feasibility, dynamic sigmoid penalties, and item-specific adaptive adjustments.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)  # Check if item fits\n    leftover_space = np.where(can_fit, bins_remain_cap - item, np.inf)  # Calculate leftover space\n    norm_leftover = leftover_space / (np.max(bins_remain_cap) + 1e-6)  # Normalize leftover space\n    k = 2.0  # Steepness of the sigmoid\n    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))  # Dynamic midpoint based on item size\n    sigmoid_penalty = 1 / (1 + np.exp(-k * (1 - norm_leftover - x0)))  # Sigmoid penalty for space efficiency\n    penalty_factor = 0.7  # Factor to adjust penalty strength\n    adaptive_penalty = 1 / (1 + np.exp(penalty_factor * ((bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6))))\n    priority_scores = can_fit * sigmoid_penalty * adaptive_penalty  # Combine penalties and feasibility\n    return priority_scores",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response6.txt_stdout.txt",
    "code_path": "problem_iter17_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines normalized fit feasibility with dynamic sigmoid penalization, focusing on adaptive space utilization and item-specific adjustments.\n    \"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)  # Check if item fits\n    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)  # Calculate leftover space\n    norm_leftover = leftover_space / (np.max(bins_remain_cap) + 1e-6)  # Normalize leftover space\n    k = 1.0 + (item / np.max(bins_remain_cap)) * 5  # Adaptive sigmoid steepness based on item size\n    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))  # Dynamic midpoint based on item size\n    penalty = np.maximum(0, 1 - ((bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)))  # Adaptive penalty\n    priority_scores = ifbinsfit * (1 / (1 + np.exp(-k * (1 - norm_leftover - x0)))) / (penalty + 1e-6)  # Sigmoid priority with penalty\n    return priority_scores",
    "response_id": 6,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response7.txt_stdout.txt",
    "code_path": "problem_iter17_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining normalized fit feasibility, sigmoid penalties, and\n    adaptive adjustments considering both remaining capacity and item specifics.\n    \"\"\"\n    # Check if item fits in the bin\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize remaining capacity dynamically\n    min_cap, max_cap = np.min(bins_remain_cap), np.max(bins_remain_cap)\n    norm_remain_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)\n    \n    # Dynamic midpoint calculation based on current item and remaining capacities\n    midpoint = (np.median(bins_remain_cap) - item) / (max_cap - min_cap + 1e-6)\n    \n    # Sigmoid function to balance priorities with increased steepness\n    sigmoid_steepness = 10.0\n    sigmoid_priority = 1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - midpoint)))\n    \n    # Adaptive penalty adjustment based on the difference between bin capacity and item size\n    penalty_factor = 0.5\n    adaptive_penalty = (bins_remain_cap - item) / (max_cap + 1e-6)\n    penalty_adjustment = 1 / (1 + np.exp(penalty_factor * adaptive_penalty))\n    \n    # Combine feasibility, sigmoid priority, and penalty adjustment\n    priority_score = ifbinsfit * sigmoid_priority * penalty_adjustment\n    \n    return priority_score",
    "response_id": 7,
    "tryHS": false,
    "obj": 121.82887913841245,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response8.txt_stdout.txt",
    "code_path": "problem_iter17_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines normalized fit feasibility, adaptive sigmoid penalty, and dynamic adjustments.\n    \"\"\"\n    # Check if item fits in the bin\n    can_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize remaining capacity\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Dynamic sigmoid steepness and midpoint based on item size\n    item_fit_ratio = item / (np.mean(bins_remain_cap) + 1e-6)\n    sigmoid_steepness = 10 * (1 - item_fit_ratio)\n    sigmoid_midpoint = item / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Sigmoid penalty with dynamic midpoint and steepness\n    sigmoid_penalty = 1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - sigmoid_midpoint)))\n    \n    # Additional penalty for nearly full bins\n    priority_adjustment = np.exp(-np.abs(norm_remain_cap - 1) * 10)\n    \n    # Combine feasibility, sigmoid penalty, and prioritization adjustments\n    priority_score = can_fit * (1 - sigmoid_penalty) * priority_adjustment\n    \n    return priority_score",
    "response_id": 8,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter17_response9.txt_stdout.txt",
    "code_path": "problem_iter17_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using normalized fit feasibility, dynamic sigmoid penalties, and adaptive adjustments.\n    \"\"\"\n    # Check if item fits in the bin\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize remaining capacity dynamically\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Calculate normalized item size\n    norm_item_size = item / np.max(bins_remain_cap)\n    \n    # Dynamic sigmoid steepness based on item size and remaining capacity\n    sigmoid_steepness = 10 * (1 - norm_item_size)\n    \n    # Calculate sigmoid priority\n    sigmoid_priority = 1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - norm_item_size)))\n    \n    # Adaptive penalty based on remaining capacity after placing the item\n    penalty = np.maximum(0, 1 - ((bins_remain_cap - item) / np.max(bins_remain_cap)))\n    \n    # Combine feasibility, sigmoid penalty, and adaptive adjustments\n    priority_score = ifbinsfit * sigmoid_priority / (penalty + 1e-6)\n    \n    return priority_score",
    "response_id": 9,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter18_response0.txt_stdout.txt",
    "code_path": "problem_iter18_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using a dynamic and adaptive approach that considers item-specific fitting, \n    normalized remaining capacity, and a soft capacity limit to better balance the packing process.\n    \"\"\"\n    # Check if the item fits in each bin\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    \n    # Calculate the dynamic midpoint based on the current item size and remaining capacities\n    midpoint = (item / np.max(bins_remain_cap)) + (bins_remain_cap / np.max(bins_remain_cap)).mean() / 2\n    \n    # Normalize remaining capacities for fair comparison\n    norm_remain_cap = (bins_remain_cap - midpoint) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Adaptive sigmoid function to prioritize bins close to the dynamic midpoint\n    sigmoid_steepness = 10.0  # Adjust steepness for sensitivity\n    sigmoid_priority = 1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap)))\n    \n    # Combine feasibility with sigmoid priority\n    priority_scores = ifbinsfit * sigmoid_priority\n    \n    return priority_scores",
    "response_id": 0,
    "tryHS": false,
    "obj": 146.8787395293179,
    "SLOC": 13.0,
    "cyclomatic_complexity": 3.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter18_response1.txt_stdout.txt",
    "code_path": "problem_iter18_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining normalized fit feasibility, adaptive item fit, \n    and dynamic adjustment based on current bin utilization and item size.\n    \"\"\"\n    # Check if the item fits in each bin\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize remaining capacity with dynamic offset\n    cap_range = np.max(bins_remain_cap) - np.min(bins_remain_cap)\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (cap_range + 1e-6)\n    \n    # Dynamic sigmoid function to prioritize bins based on remaining capacity and item size\n    sigmoid_steepness = 10.0  # Adjust steepness as needed\n    midpoint = item / np.max(bins_remain_cap)\n    sigmoid_priority = 1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - midpoint)))\n    \n    # Adaptive fit based on item size relative to bin capacity\n    item_size_factor = item / np.mean(bins_remain_cap)\n    adaptive_fit = np.exp(-item_size_factor * (1 - ifbinsfit))\n    \n    # Dynamic adjustment factor based on current bin utilization\n    utilization_factor = bins_remain_cap / np.max(bins_remain_cap)\n    dynamic_adjustment = np.power(utilization_factor, sigmoid_steepness * item_size_factor)\n    \n    # Combine feasibility, sigmoid priority, adaptive fit, and dynamic adjustment\n    priority_scores = ifbinsfit * sigmoid_priority * adaptive_fit * dynamic_adjustment\n    \n    return priority_scores",
    "response_id": 1,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 13.0,
    "cyclomatic_complexity": 3.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter18_response2.txt_stdout.txt",
    "code_path": "problem_iter18_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using a dynamic and adaptive approach that considers item-specific fits, \n    normalized remaining capacity, and a refined penalty mechanism.\n    \n    Parameters:\n    - item (float): The size of the current item to be packed.\n    - bins_remain_cap (np.ndarray): An array containing the remaining capacity of each bin.\n    \n    Returns:\n    - np.ndarray: A priority score for each bin, where higher scores indicate a better fit.\n    \"\"\"\n    # Check if the item can fit in each bin\n    fit_feasibility = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize the remaining capacities\n    total_remaining_cap = np.sum(bins_remain_cap)\n    if total_remaining_cap == 0:\n        total_remaining_cap = 1e-9  # Avoid division by zero\n    norm_remain_cap = bins_remain_cap / total_remaining_cap\n    \n    # Calculate the normalized fit of the item to each bin\n    item_fit = (bins_remain_cap - item) / total_remaining_cap\n    \n    # Adaptive penalty function to avoid very small remainders\n    penalty_factor = np.where(item_fit < 0, 1e6, 1)  # Strong penalty for over-capacity bins\n    \n    # Dynamic adjustment based on current item size relative to average bin capacity\n    avg_bin_cap = np.mean(bins_remain_cap)\n    item_rel_size = item / avg_bin_cap\n    dynamic_adjustment = np.exp(-np.abs(item_rel_size - norm_remain_cap))\n    \n    # Combine feasibility, normalized fit, and dynamic adjustment with adaptive penalty\n    priority_scores = fit_feasibility * (dynamic_adjustment * norm_remain_cap) / penalty_factor\n    \n    return priority_scores",
    "response_id": 2,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 13.0,
    "cyclomatic_complexity": 3.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter18_response3.txt_stdout.txt",
    "code_path": "problem_iter18_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using a dynamic and adaptive approach that considers item-specific fits, \n    normalized remaining capacity, and a refined penalty mechanism.\n    \n    Parameters:\n    - item (float): The size of the current item to be packed.\n    - bins_remain_cap (np.ndarray): An array containing the remaining capacity of each bin.\n    \n    Returns:\n    - np.ndarray: A priority score for each bin, where higher scores indicate a better fit.\n    \"\"\"\n    # Check if the item can fit in each bin\n    fit_feasibility = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize the remaining capacities\n    total_remaining_cap = np.sum(bins_remain_cap)\n    if total_remaining_cap == 0:\n        total_remaining_cap = 1  # To avoid division by zero\n    norm_remain_cap = bins_remain_cap / total_remaining_cap\n    \n    # Adaptive midpoint calculation based on the item size\n    adaptive_midpoint = (np.max(bins_remain_cap) + np.min(bins_remain_cap)) / 2 + (item / 2)\n    \n    # Sigmoid function to prioritizebins near the adaptive midpoint\n    sigmoid_steepness = 4.0  # Adjust the steepness as needed\n    sigmoid_priority = 1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - (item / adaptive_midpoint))))\n    \n    # Adaptive penalty based on the difference between remaining capacity and item size\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)  # Avoid division by zero\n    \n    # Combine feasibility, sigmoid, and penalty into a final priority score\n    priority_score = fit_feasibility * sigmoid_priority / (abs(penalty) + 1e-3)  # Combine with a small offset to avoid division by zero\n    \n    return priority_score",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 13.0,
    "cyclomatic_complexity": 3.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter18_response4.txt_stdout.txt",
    "code_path": "problem_iter18_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using a dynamic and adaptive approach that considers item-specific fits, \n    normalized remaining capacity, and a refined penalty mechanism.\n    \n    Parameters:\n    - item (float): The size of the current item to be packed.\n    - bins_remain_cap (np.ndarray): An array containing the remaining capacity of each bin.\n    \n    Returns:\n    - np.ndarray: A priority score for each bin, where higher scores indicate a better fit.\n    \"\"\"\n    # Check if the item can fit in each bin\n    fit_feasibility = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize the remaining capacities\n    total_remaining_cap = np.sum(bins_remain_cap)\n    if total_remaining_cap == 0:\n        total_remaining_cap = 1e-9  # Avoid division by zero\n    norm_remain_cap = bins_remain_cap / total_remaining_cap\n    \n    # Calculate the normalized fit of the item to each bin\n    item_fit = (bins_remain_cap - item) / total_remaining_cap\n    \n    # Adaptive penalty function to penalize bins with less remaining capacity after placing the item\n    sigma = np.std(bins_remain_cap)\n    if sigma == 0:\n        sigma = 1e-9  # Avoid division by zero\n    adaptive_penalty = np.exp(-(bins_remain_cap - item) ** 2 / (2 * sigma ** 2))\n    \n    # Calculate the final priority score\n    priority_score = fit_feasibility * (norm_remain_cap + item_fit) / (adaptive_penalty + 1e-9)\n    \n    return priority_score",
    "response_id": 4,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 13.0,
    "cyclomatic_complexity": 3.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter19_response0.txt_stdout.txt",
    "code_path": "problem_iter19_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float, \n    bins_remain_cap: np.ndarray, \n    max_cap_addition: float = 9.774850987562268e-06, \n    penalty_factor: float = 14.931397941541181) -> np.ndarray:\n    \"\"\"\n    Combines normalized fit feasibility with adaptive sigmoid penalties, adjusting for item size and remaining capacity.\n    \"\"\"\n    # Fit feasibility\n    can_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize remaining capacity\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + max_cap_addition)\n    \n    # Adaptive midpoint calculation\n    midpoint = item / (np.mean(bins_remain_cap) + max_cap_addition)\n    \n    # Dynamic sigmoid penalty\n    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))\n    \n    # Combine feasibility and adaptive penalty\n    priority_score = can_fit * (1 - sigmoid_penalty)\n    \n    return priority_score",
    "response_id": 0,
    "tryHS": true,
    "obj": 4.048663741523748,
    "SLOC": 11.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]