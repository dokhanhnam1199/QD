```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins by combining normalized fit feasibility with dynamic adaptive penalties.
    This version uses a more adaptive and dynamic approach to penalize bins, focusing on real-time
    item-bin interactions and avoiding fixed parameters or static methods.
    """
    # Check if item fits in the bin
    ifbinsfit = (bins_remain_cap >= item).astype(float)
    
    # Normalize remaining capacities
    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)
    
    # Adaptive penalty based on item size compared to remaining capacity
    adaptive_penalty = np.abs(norm_remain_cap - (item / np.max(bins_remain_cap)))
    
    # Dynamic sigmoid function to balance feasibility and space efficiency
    sigmoid_balance = 1 / (1 + np.exp(-5 * (norm_remain_cap - (item / np.mean(bins_remain_cap)))))
    
    # Calculate priority score by combining feasibility and dynamically adjusted penalties
    priority_scores = ifbinsfit * sigmoid_balance / (adaptive_penalty + 1e-6)
    
    return priority_scores
```
