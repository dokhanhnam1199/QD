{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combine fit feasibility with normalized penalty for leftover space.\"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)\n    normalized_penalty = leftover_space / (np.max(leftover_space) + 1e-6)\n    return ifbinsfit / (normalized_penalty + 1e-6)\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combine fit feasibility with normalized penalty for leftover space.\"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)\n    normalized_penalty = leftover_space / (np.max(leftover_space) + 1e-6)\n    return ifbinsfit / (normalized_penalty + 1e-6)\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design implements a heuristic based on the remaining capacity of the bins.\n    Is a priority score based on filling tighter bins first, aiming to close the \n    bins as much as possible to trigger first fit for new bins sooner.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Inverse of remaining capacity (sinusoidal function to prioritize the almost full bins)\n    return 1.0 / (bins_remain_cap + 1e-6) * np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combine fit feasibility with normalized penalty for leftover space.\"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)\n    normalized_penalty = leftover_space / (np.max(leftover_space) + 1e-6)\n    return ifbinsfit / (normalized_penalty + 1e-6)\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combine fit feasibility with normalized penalty for leftover space.\"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)\n    normalized_penalty = leftover_space / (np.max(leftover_space) + 1e-6)\n    return ifbinsfit / (normalized_penalty + 1e-6)\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by normalized fit feasibility and adaptive penalty on leftover space.\"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)  # Check if item fits in the bin\n    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)  # Calculate leftover space\n    # Use an adaptive penalty based on leftover space, with normalization\n    penalty = leftover_space / (np.max(bins_remain_cap) + 1e-6)\n    # Combine fit feasibility with adaptive penalty\n    return ifbinsfit / (penalty + 1e-6)\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by normalized fit feasibility and adaptive penalty on leftover space.\"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)  # Check if item fits in the bin\n    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)  # Calculate leftover space\n    # Use an adaptive penalty based on leftover space, with normalization\n    penalty = leftover_space / (np.max(bins_remain_cap) + 1e-6)\n    # Combine fit feasibility with adaptive penalty\n    return ifbinsfit / (penalty + 1e-6)\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on item fit and minimal leftover space with adaptive normalization and dynamic penalization.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    space_weight = 0.9844426157387918  # Weight to balance item fit and space minimization\n    priority = can_fit * (space_weight - (space_left / bins_remain_cap))  # Minimize leftover space\n    relative_space_left_factor = bins_remain_cap / np.max(bins_remain_cap, initial=1.7107396879831833)  # Normalize remaining space\n    return priority * relative_space_left_factor  # Combine factors for adaptive prioritization\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design implements a heuristic based on the remaining capacity of the bins.\n    Is a priority score based on filling tighter bins first, aiming to close the \n    bins as much as possible to trigger first fit for new bins sooner.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Inverse of remaining capacity (sinusoidal function to prioritize the almost full bins)\n    return 1.0 / (bins_remain_cap + 1e-6) * np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by normalized fit feasibility and adaptive penalty on leftover space.\"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)  # Check if item fits in the bin\n    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)  # Calculate leftover space\n    # Use an adaptive penalty based on leftover space, with normalization\n    penalty = leftover_space / (np.max(bins_remain_cap) + 1e-6)\n    # Combine fit feasibility with adaptive penalty\n    return ifbinsfit / (penalty + 1e-6)\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins using normalization, sigmoid function, and fit feasibility.\"\"\"\n    max_cap = np.max(bins_remain_cap, initial=1.0)\n    norm_remain_cap = bins_remain_cap / max_cap\n    can_fit = (bins_remain_cap >= item).astype(float)\n    sigmoid_priority = 1 / (1 + np.exp(-10 * (norm_remain_cap - 0.5)))\n    priority_score = sigmoid_priority * can_fit * (1 - (bins_remain_cap - item) / max_cap)\n    return priority_score\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version uses a sigmoid function to dynamically adjust the priority scores based on the item size and remaining bin capacities. The goal is to balance between filling bins well and not over-penalizing bins that are almost full.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    normalized_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)\n    \n    # Sigmoid function with dynamic parameters based on item size\n    k = 1.0  # Steepness of the sigmoid function, can be tuned\n    x0 = 0.5 - (item / (max_cap + 1e-6))  # Midpoint of the sigmoid function, adjusted by item size\n    priority_scores = 1 / (1 + np.exp(-k * (normalized_cap - x0)))\n    \n    return priority_scores\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version uses a sigmoid function to dynamically adjust the priority scores based on the item size and remaining bin capacities. The goal is to balance between filling bins well and not over-penalizing bins that are almost full.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    normalized_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)\n    \n    # Sigmoid function with dynamic parameters based on item size\n    k = 1.0  # Steepness of the sigmoid function, can be tuned\n    x0 = 0.5 - (item / (max_cap + 1e-6))  # Midpoint of the sigmoid function, adjusted by item size\n    priority_scores = 1 / (1 + np.exp(-k * (normalized_cap - x0)))\n    \n    return priority_scores\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines normalized remaining capacity and sigmoid function to prioritize bins effectively.\"\"\"\n    \n    # Ensure item can fit in the bin\n    can_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize the remaining capacities\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Calculate the sigmoid priority based on normalized capacity\n    sigmoid_priority = 1 / (1 + np.exp(-10 * (norm_remain_cap - 0.5)))\n    \n    # Combine the sigmoid priority with the fit feasibility\n    priority_score = sigmoid_priority * can_fit\n    \n    return priority_score\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version uses a sigmoid function to dynamically adjust the priority scores based on the item size and remaining bin capacities. The goal is to balance between filling bins well and not over-penalizing bins that are almost full.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    normalized_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)\n    \n    # Sigmoid function with dynamic parameters based on item size\n    k = 1.0  # Steepness of the sigmoid function, can be tuned\n    x0 = 0.5 - (item / (max_cap + 1e-6))  # Midpoint of the sigmoid function, adjusted by item size\n    priority_scores = 1 / (1 + np.exp(-k * (normalized_cap - x0)))\n    \n    return priority_scores\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version uses a sigmoid function to dynamically adjust the priority scores based on the item size and remaining bin capacities. The goal is to balance between filling bins well and not over-penalizing bins that are almost full.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    normalized_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)\n    \n    # Sigmoid function with dynamic parameters based on item size\n    k = 1.0  # Steepness of the sigmoid function, can be tuned\n    x0 = 0.5 - (item / (max_cap + 1e-6))  # Midpoint of the sigmoid function, adjusted by item size\n    priority_scores = 1 / (1 + np.exp(-k * (normalized_cap - x0)))\n    \n    return priority_scores\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins based on normalized remaining capacity and dynamic penalization using sigmoid.\n    \"\"\"\n    # Normalize remaining capacities\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Sigmoid function to prioritize bins that are closer to being full\n    sigmoid_priority = 1 / (1 + np.exp(-10 * (norm_remain_cap - 0.5)))\n    \n    # Penalty for bins that cannot fit the item\n    can_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Combine sigmoid priority with fit feasibility\n    priority_score = sigmoid_priority * can_fit\n    \n    return priority_score\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version uses a sigmoid function to dynamically adjust the priority scores based on the item size and remaining bin capacities. The goal is to balance between filling bins well and not over-penalizing bins that are almost full.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    normalized_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)\n    \n    # Sigmoid function with dynamic parameters based on item size\n    k = 1.0  # Steepness of the sigmoid function, can be tuned\n    x0 = 0.5 - (item / (max_cap + 1e-6))  # Midpoint of the sigmoid function, adjusted by item size\n    priority_scores = 1 / (1 + np.exp(-k * (normalized_cap - x0)))\n    \n    return priority_scores\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins based on normalized remaining capacity and dynamic penalization using sigmoid.\n    \"\"\"\n    # Normalize remaining capacities\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Sigmoid function to prioritize bins that are closer to being full\n    sigmoid_priority = 1 / (1 + np.exp(-10 * (norm_remain_cap - 0.5)))\n    \n    # Penalty for bins that cannot fit the item\n    can_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Combine sigmoid priority with fit feasibility\n    priority_score = sigmoid_priority * can_fit\n    \n    return priority_score\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version uses a sigmoid function to dynamically adjust the priority scores based on the item size and remaining bin capacities. The goal is to balance between filling bins well and not over-penalizing bins that are almost full.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    normalized_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)\n    \n    # Sigmoid function with dynamic parameters based on item size\n    k = 1.0  # Steepness of the sigmoid function, can be tuned\n    x0 = 0.5 - (item / (max_cap + 1e-6))  # Midpoint of the sigmoid function, adjusted by item size\n    priority_scores = 1 / (1 + np.exp(-k * (normalized_cap - x0)))\n    \n    return priority_scores\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}