```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins by combining fit feasibility, dynamic midpoint, and adaptive sigmoid penalties.
    """
    can_fit = (bins_remain_cap >= item).astype(float)  # Check if item fits in the bin
    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)
    midpoint = item / (np.max(bins_remain_cap) + 1e-6)  # Dynamic midpoint based on item size
    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)  # Adaptive penalty
    sigmoid_steepness = 10.0  # Tuned sigmoid steepness
    sigmoid_priority = 1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - midpoint)))
    adaptive_influence = sigmoid_priority / (penalty + 1e-6)
    priority_scores = can_fit * adaptive_influence
    return priority_scores
```
