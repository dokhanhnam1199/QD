```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins by combining normalized fit feasibility, dynamic sigmoid penalty, 
    and adaptive item fit with dynamic adjustments based on current problem state.
    """
    # Check if item fits in the bin
    ifbinsfit = (bins_remain_cap >= item).astype(float)
    
    # Normalize remaining capacity dynamically
    min_cap, max_cap = np.min(bins_remain_cap), np.max(bins_remain_cap)
    norm_remain_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)
    
    # Calculate item fit ratio dynamically
    item_fit_ratio = item / (max_cap + 1e-6)
    
    # Dynamic sigmoid steepness based on current problem state
    sigmoid_steepness = 10 * (1 - item_fit_ratio)
    
    # Sigmoid priority with dynamic midpoint
    sigmoid_priority = 1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - item_fit_ratio)))
    
    # Priority adjustment for bins with nearly full capacity
    priority_adjustment = np.exp(-np.abs(norm_remain_cap - 1) * 10)
    
    # Combine feasibility, sigmoid priority, and priority adjustment
    return ifbinsfit * sigmoid_priority * priority_adjustment
```
