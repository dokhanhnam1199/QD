```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins using normalized fit feasibility and adaptive penalties with a sigmoid function.
    """
    # Fit feasibility
    ifbinsfit = (bins_remain_cap >= item).astype(float)
    
    # Normalized remaining capacity
    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)
    
    # Adaptive penalty based on item size compared to remaining capacity
    adaptive_penalty = np.abs(norm_remain_cap - (item / np.max(bins_remain_cap)))
    
    # Sigmoid function for balancing feasibility and adaptive penalties
    sigmoid_balance = 1 / (1 + np.exp(-5 * (norm_remain_cap - (item / np.mean(bins_remain_cap)))))
    
    # Calculate priority score
    priority_scores = ifbinsfit * sigmoid_balance / (adaptive_penalty + 1e-6)
    
    return priority_scores
```
