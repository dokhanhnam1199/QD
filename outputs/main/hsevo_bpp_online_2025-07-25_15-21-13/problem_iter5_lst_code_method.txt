{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design implements a heuristic based on the remaining capacity of the bins.\n    Is a priority score based on filling tighter bins first, aiming to close the \n    bins as much as possible to trigger first fit for new bins sooner.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Inverse of remaining capacity (sinusoidal function to prioritize the almost full bins)\n    return 1.0 / (bins_remain_cap + 1e-6) * np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines capacity and fit efficiency with a penalty for leftover space.\"\"\"\n    # Ensure the item can fit in the bin\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    # Priority based on leftover space after placing the item\n    leftover_space = bins_remain_cap - item\n    # Penalty for leftover space\n    space_penalty = np.where(ifbinsfit, leftover_space, np.inf)\n    # Combine fit check with a penalty for larger leftover space\n    return ifbinsfit / (space_penalty + 1e-6)\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines capacity and fit efficiency with a penalty for leftover space.\"\"\"\n    # Ensure the item can fit in the bin\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    # Priority based on leftover space after placing the item\n    leftover_space = bins_remain_cap - item\n    # Penalty for leftover space\n    space_penalty = np.where(ifbinsfit, leftover_space, np.inf)\n    # Combine fit check with a penalty for larger leftover space\n    return ifbinsfit / (space_penalty + 1e-6)\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines capacity fit and penalizes leftover space to prioritize bins efficiently.\"\"\"\n    # Ensure item can fit in the bin\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    # Priority based on remaining capacity and penalty for leftover space\n    priority = can_fit * (1 - (space_left / bins_remain_cap))\n    return priority\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines capacity and fit efficiency with a penalty for leftover space.\"\"\"\n    # Ensure the item can fit in the bin\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    # Priority based on leftover space after placing the item\n    leftover_space = bins_remain_cap - item\n    # Penalty for leftover space\n    space_penalty = np.where(ifbinsfit, leftover_space, np.inf)\n    # Combine fit check with a penalty for larger leftover space\n    return ifbinsfit / (space_penalty + 1e-6)\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design implements a heuristic based on the remaining capacity of the bins.\n    Is a priority score based on filling tighter bins first, aiming to close the \n    bins as much as possible to trigger first fit for new bins sooner.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Inverse of remaining capacity (sinusoidal function to prioritize the almost full bins)\n    return 1.0 / (bins_remain_cap + 1e-6) * np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))\n\n[Heuristics 7th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float, \n    bins_remain_cap: np.ndarray, \n    initial_relative_space: float = 1.7107396879831833, \n    space_weight: float = 0.9844426157387918) -> np.ndarray:\n    \"\"\"Prioritizes bins based on item fit and minimal leftover space, with dynamic threshold adjustment.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    priority = can_fit * (space_weight - (space_left / bins_remain_cap))  # Minimize leftover space\n    relative_space_left_factor = bins_remain_cap / np.max(bins_remain_cap, initial=initial_relative_space)  # Consider initial bin space\n    return priority * relative_space_left_factor  # Combine factors for adaptive prioritization\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines capacity and fit efficiency with a penalty for leftover space.\"\"\"\n    # Ensure the item can fit in the bin\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    # Priority based on leftover space after placing the item\n    leftover_space = bins_remain_cap - item\n    # Penalty for leftover space\n    space_penalty = np.where(ifbinsfit, leftover_space, np.inf)\n    # Combine fit check with a penalty for larger leftover space\n    return ifbinsfit / (space_penalty + 1e-6)\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines capacity fit and minimized leftover space to prioritize bins for item placement.\"\"\"\n    \n    # Ensure item can fit in the bin\n    can_fit = bins_remain_cap >= item\n    \n    # Calculate remaining space after adding the item\n    space_left = bins_remain_cap - item\n    \n    # Priority based on remaining capacity and minimal leftover space\n    priority = can_fit * (1 - (space_left / bins_remain_cap)) * np.clip(bins_remain_cap - item, 0, 1)\n    \n    return priority\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines capacity fit and minimized leftover space to prioritize bins for item placement.\"\"\"\n    \n    # Ensure item can fit in the bin\n    can_fit = bins_remain_cap >= item\n    \n    # Calculate remaining space after adding the item\n    space_left = bins_remain_cap - item\n    \n    # Priority based on remaining capacity and minimal leftover space\n    priority = can_fit * (1 - (space_left / bins_remain_cap)) * np.clip(bins_remain_cap - item, 0, 1)\n    \n    return priority\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on item fit and minimal leftover space, with dynamic threshold adjustment.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    priority = can_fit * (1 - (space_left / bins_remain_cap))  # Minimize leftover space\n    relative_space_left_factor = bins_remain_cap / np.max(bins_remain_cap, initial=1.0)  # Consider initial bin space\n    return priority * relative_space_left_factor  # Combine factors for adaptive prioritization\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on item fit and minimal leftover space, with dynamic threshold adjustment.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    priority = can_fit * (1 - (space_left / bins_remain_cap))  # Minimize leftover space\n    relative_space_left_factor = bins_remain_cap / np.max(bins_remain_cap, initial=1.0)  # Consider initial bin space\n    return priority * relative_space_left_factor  # Combine factors for adaptive prioritization\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version of the heuristic implements a dynamic penalty system that evaluates the\n    insertion of an item into each bin by considering both the remaining capacity and\n    the potential for future space inefficiency. It uses a sigmoid function to prioritize\n    bins that are closer to being full while also penalizing bins that are too empty.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize the remaining capacities\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    norm_remain_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)\n\n    # Calculate the sigmoid priority based on normalized capacity\n    sigmoid_priority = 1 / (1 + np.exp(-10 * (norm_remain_cap - 0.5)))\n\n    # Calculate a penalty for bins that can't even fit the item\n    can_fit = (bins_remain_cap >= item).astype(float)\n\n    # Combine the sigmoid priority with the penalty\n    priority_score = sigmoid_priority * can_fit\n\n    return priority_score\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritize bins based on capacity and waste reduction, penalize tight bins slightly.\"\"\"\n    waste_reduction = bins_remain_cap - item\n    priority_score = np.where(waste_reduction >= 0, waste_reduction, -1000)\n    epsilon = 0.01\n    encouragement = (bins_remain_cap / np.max(bins_remain_cap + 1e-6)) * epsilon\n    return priority_score - encouragement\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines remaining capacity and fit to prioritize bins effectively.\"\"\"\n    # Prioritize bins where the item fits closely but not less\n    close_fit = np.clip(bins_remain_cap - item, 0, 1)\n    # Prioritize bins with larger remaining capacity\n    large_capacity = bins_remain_cap\n    # Adjust priority by considering closeness of fit and remaining capacity\n    priority_score = close_fit * 1.5 + large_capacity\n    return priority_score\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version of the heuristic implements a dynamic penalty system that evaluates the\n    insertion of an item into each bin by considering both the remaining capacity and\n    the potential for future space inefficiency. It uses a sigmoid function to prioritize\n    bins that are closer to being full while also penalizing bins that are too empty.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize the remaining capacities\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    norm_remain_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)\n\n    # Calculate the sigmoid priority based on normalized capacity\n    sigmoid_priority = 1 / (1 + np.exp(-10 * (norm_remain_cap - 0.5)))\n\n    # Calculate a penalty for bins that can't even fit the item\n    can_fit = (bins_remain_cap >= item).astype(float)\n\n    # Combine the sigmoid priority with the penalty\n    priority_score = sigmoid_priority * can_fit\n\n    return priority_score\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version of the heuristic implements a dynamic penalty system that evaluates the\n    insertion of an item into each bin by considering both the remaining capacity and\n    the potential for future space inefficiency. It uses a sigmoid function to prioritize\n    bins that are closer to being full while also penalizing bins that are too empty.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize the remaining capacities\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    norm_remain_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)\n\n    # Calculate the sigmoid priority based on normalized capacity\n    sigmoid_priority = 1 / (1 + np.exp(-10 * (norm_remain_cap - 0.5)))\n\n    # Calculate a penalty for bins that can't even fit the item\n    can_fit = (bins_remain_cap >= item).astype(float)\n\n    # Combine the sigmoid priority with the penalty\n    priority_score = sigmoid_priority * can_fit\n\n    return priority_score\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritize bins based on capacity and waste reduction, penalize tight bins slightly.\"\"\"\n    waste_reduction = bins_remain_cap - item\n    priority_score = np.where(waste_reduction >= 0, waste_reduction, -1000)\n    epsilon = 0.01\n    encouragement = (bins_remain_cap / np.max(bins_remain_cap + 1e-6)) * epsilon\n    return priority_score - encouragement\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version of the heuristic implements a dynamic penalty system that evaluates the\n    insertion of an item into each bin by considering both the remaining capacity and\n    the potential for future space inefficiency. It uses a sigmoid function to prioritize\n    bins that are closer to being full while also penalizing bins that are too empty.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize the remaining capacities\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    norm_remain_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)\n\n    # Calculate the sigmoid priority based on normalized capacity\n    sigmoid_priority = 1 / (1 + np.exp(-10 * (norm_remain_cap - 0.5)))\n\n    # Calculate a penalty for bins that can't even fit the item\n    can_fit = (bins_remain_cap >= item).astype(float)\n\n    # Combine the sigmoid priority with the penalty\n    priority_score = sigmoid_priority * can_fit\n\n    return priority_score\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version of the heuristic implements a dynamic penalty system that evaluates the\n    insertion of an item into each bin by considering both the remaining capacity and\n    the potential for future space inefficiency. It uses a sigmoid function to prioritize\n    bins that are closer to being full while also penalizing bins that are too empty.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize the remaining capacities\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    norm_remain_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)\n\n    # Calculate the sigmoid priority based on normalized capacity\n    sigmoid_priority = 1 / (1 + np.exp(-10 * (norm_remain_cap - 0.5)))\n\n    # Calculate a penalty for bins that can't even fit the item\n    can_fit = (bins_remain_cap >= item).astype(float)\n\n    # Combine the sigmoid priority with the penalty\n    priority_score = sigmoid_priority * can_fit\n\n    return priority_score\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}