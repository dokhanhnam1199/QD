{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design increases priority for bins that have more remaining capacity compared to the item, but also penalizes \n    overly large empty spaces left in bins. Smaller empty spaces left after adding the item receive a higher priority score.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure that the item can actually fit into the bin\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    # Penalty for too much leftover space, decreased when the remaining space is minimal\n    priority = can_fit * (1 - (space_left / bins_remain_cap))\n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # First, prioritize bins with capacity close to the item size but not less\n    close_bins = np.clip(bins_remain_cap - item, 0, 1)\n    \n    # Next, prioritize bins with the largest remaining capacity (first-fit decreasing)\n    largest_first_fit = bins_remain_cap\n\n    # Combine the priorities, giving larger weights to bins close to the item size\n    priority_score = close_bins * 1.5 + largest_first_fit\n\n    return priority_score\n\n### Analyze & experience\n- Comparing (best) vs (worst), we see that the best heuristics consider the remaining capacity and efficiently manage space to minimize waste, which is crucial for optimization. In contrast, the worst heuristics apply a sinusoidal function that unnecessarily complicates the simplicity of filling bins based on capacity and space left. \n(second best) vs (second worst) reveals that the second best maintains a clear priority on minimizing leftover space and fits within the remaining capacity well, whereas the second worst does not account for capacity-based prioritization effectively.\nComparing (1st) vs (2nd), we see that both prioritize based on remaining capacity but the first adds a nuanced consideration of leftover space, improving efficiency over the second.\n(3rd) vs (4th) shows improvements when the fourth method introduces a penalty for leftover space, demonstrating the benefit of adaptive heuristics over static capacity-based ones.\nComparing (second worst) vs (worst), we see that the second worst at least checks if the item can fit within the bin, providing a basic layer of functionality the worst lacks.\nOverall: The best heuristics incorporate multiple factors like capacity, item fit, and leftover space effectively, enhancing efficiency in bin packing.\n- \n- **Keywords**: Space efficiency, item fit, penalties, iteratively refining, adaptability, systematic evaluation, dynamic thresholds\n- **Advice**: Focus on iteratively refining item selection strategies based on real-time feedback. Incorporate systematic evaluation to dynamically adjust penalties for leftover space.\n- **Avoid**: Static penalty structures, neglecting potential for adaptability, failing to reevaluate solutions periodically.\n- **Explanation**: Dynamic adjustment of penalties and strategies allows the heuristic to better adapt to varying input scenarios. This avoids the pitfalls of static penalty structures, enhancing robustness and effectiveness in space utilization and item fit.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}