```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins by combining normalized fit feasibility, dynamic sigmoid penalty, 
    and adaptive item fit with dynamic adjustments based on current problem state.
    """
    # Check if item fits in the bin
    ifbinsfit = (bins_remain_cap >= item).astype(float)
    
    # Normalize remaining capacity dynamically
    min_cap, max_cap = np.min(bins_remain_cap), np.max(bins_remain_cap)
    norm_remain_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)
    
    # Dynamic midpoint calculation based on current item and remaining capacities
    midpoint = (np.median(bins_remain_cap) - item) / (max_cap - min_cap + 1e-6)
    
    # Sigmoid function to balance priorities
    sigmoid_steepness = 10.0  # Adjusted for stronger steepness
    sigmoid_priority = 1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - midpoint)))
    
    # Adaptive priority adjustment based on the remaining capacity and item size
    priority_adjustment_factor = (max_cap - bins_remain_cap) / (max_cap - item + 1e-6)
    adjusted_priority = sigmoid_priority * priority_adjustment_factor
    
    # Final priority considering fit feasibility and adjusted priority
    return ifbinsfit * adjusted_priority
```
