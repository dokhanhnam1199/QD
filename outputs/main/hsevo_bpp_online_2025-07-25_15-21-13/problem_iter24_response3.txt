```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins by combining normalized fit feasibility, dynamically adjusted sigmoid penalties,
    and adaptive midpoint based on item and bin characteristics.
    """
    # Check if the item can fit in the bin
    can_fit = (bins_remain_cap >= item).astype(float)
    
    # Normalize remaining capacity
    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)
    
    # Calculate adaptive midpoint based on item size relative to bin capacity
    midpoint = item / (np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1e-6)
    
    # Calculate dynamic penalty factor based on item size
    penalty_factor = 6.0 + 2 * (item / (np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1e-6))
    
    # Calculate adaptive sigmoid penalty to adjust priority based on remaining capacity and item size
    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))
    
    # Calculate adjusted penalty based on remaining capacity and item size
    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)
    
    # Combine feasibility, sigmoid penalty, and adjusted penalty to calculate priority scores
    priority_scores = can_fit * sigmoid_penalty / (penalty + 1e-6)
    
    return priority_scores
```
