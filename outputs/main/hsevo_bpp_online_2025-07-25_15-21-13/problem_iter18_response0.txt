```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins using a dynamic and adaptive approach that considers item-specific fitting, 
    normalized remaining capacity, and a soft capacity limit to better balance the packing process.
    """
    # Check if the item fits in each bin
    ifbinsfit = (bins_remain_cap >= item).astype(float)
    
    # Calculate the dynamic midpoint based on the current item size and remaining capacities
    midpoint = (item / np.max(bins_remain_cap)) + (bins_remain_cap / np.max(bins_remain_cap)).mean() / 2
    
    # Normalize remaining capacities for fair comparison
    norm_remain_cap = (bins_remain_cap - midpoint) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)
    
    # Adaptive sigmoid function to prioritize bins close to the dynamic midpoint
    sigmoid_steepness = 10.0  # Adjust steepness for sensitivity
    sigmoid_priority = 1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap)))
    
    # Combine feasibility with sigmoid priority
    priority_scores = ifbinsfit * sigmoid_priority
    
    return priority_scores
```
