import numpy as np

def priority_v2(
    item: float, 
    bins_remain_cap: np.ndarray, 
    epsilon: float = 4.228139142546134e-06, 
    sigmoid_steepness: float = 7.032912684957468) -> np.ndarray:
    """
    Combines normalized fit feasibility with dynamically adjusted sigmoid penalty.
    """
    # Check if item fits in the bin
    can_fit = (bins_remain_cap >= item).astype(float)
    
    # Normalize remaining capacity
    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + epsilon)
    
    # Adaptive sigmoid-based penalty
    sigmoid_penalty = 1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - item / (np.mean(bins_remain_cap) + epsilon))))
    
    # Combine feasibility and adaptive penalty
    priority_score = can_fit * (1 - sigmoid_penalty)
    
    return priority_score
