```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins by combining normalized fit feasibility, adaptive sigmoid penalties, and dynamic midpoints.
    """
    can_fit = (bins_remain_cap >= item).astype(float)
    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)
    midpoint = item / np.max(bins_remain_cap)
    penalty_factor = 8.060154863007442 + 3 * (item / np.max(bins_remain_cap))
    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))
    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)
    adaptive_penalty = 1 / (1 + np.exp(5 * penalty))
    return can_fit * sigmoid_penalty * adaptive_penalty
```
