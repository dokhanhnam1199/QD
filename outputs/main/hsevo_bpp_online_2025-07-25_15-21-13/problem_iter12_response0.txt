```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins by combining normalized fit feasibility with an adaptive sigmoid penalty and a dynamic balance factor.
    """
    # Check if the item can fit in the bin
    can_fit = (bins_remain_cap >= item).astype(float)
    
    # Normalize remaining capacities
    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)
    
    # Calculate the midpoint for sigmoid based on current item size and bin capacities
    sigmoid_midpoint = item / np.max(bins_remain_cap)
    
    # Generate the sigmoid priority dynamically based on the normalized remaining capacity and item fit feasibility
    sigmoid_priority = can_fit * (1 / (1 + np.exp(-10 * (norm_remain_cap - sigmoid_midpoint))))
    
    # Calculate a dynamic penalty using the remaining capacity relative to the maximum remaining capacity
    dynamic_penalty = 1 - (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)
    
    # Combine the sigmoid priority and the dynamic penalty with a balance factor
    balance_factor = 1.5  # Adaptive balance factor to emphasize space efficiency
    priority_score = sigmoid_priority * (1 - dynamic_penalty) * balance_factor
    
    return priority_score
```
