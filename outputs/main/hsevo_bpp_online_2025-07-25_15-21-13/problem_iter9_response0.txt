```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This heuristic dynamically adjusts the priority score based on the item size
    relative to the remaining capacity of each bin. It aims to balance filling bins
    efficiently without overly penalizing bins with less remaining capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero and ensure numerical stability
    epsilon = 1e-6
    
    # Calculate the relative space available in each bin for the current item
    relative_space = bins_remain_cap / (item + epsilon)
    
    # Use a sigmoid function to create a smooth transition from low to high priority
    # This ensures that bins with just enough space also get considered
    priority_score = 1.0 / (1.0 + np.exp(-(relative_space - 1.5)))
    
    return priority_score
```
