```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins using normalized fit feasibility, dynamic sigmoid penalties, and item-specific adaptive adjustments.
    """
    can_fit = (bins_remain_cap >= item).astype(float)  # Check if item fits
    leftover_space = np.where(can_fit, bins_remain_cap - item, np.inf)  # Calculate leftover space
    norm_leftover = leftover_space / (np.max(bins_remain_cap) + 1e-6)  # Normalize leftover space
    k = 2.0  # Steepness of the sigmoid
    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))  # Dynamic midpoint based on item size
    sigmoid_penalty = 1 / (1 + np.exp(-k * (1 - norm_leftover - x0)))  # Sigmoid penalty for space efficiency
    penalty_factor = 0.7  # Factor to adjust penalty strength
    adaptive_penalty = 1 / (1 + np.exp(penalty_factor * ((bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6))))
    priority_scores = can_fit * sigmoid_penalty * adaptive_penalty  # Combine penalties and feasibility
    return priority_scores
```
