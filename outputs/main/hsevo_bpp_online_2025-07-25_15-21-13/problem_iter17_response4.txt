```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins using normalized fit feasibility, dynamic sigmoid penalties, and adaptive adjustments.
    """
    # Check if item fits in the bin
    ifbinsfit = (bins_remain_cap >= item).astype(float)
    
    # Normalize remaining capacity dynamically
    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)
    
    # Dynamic midpoint calculation
    midpoint = (np.median(bins_remain_cap) - item) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)
    
    # Sigmoid function to balance priorities with dynamic steepness
    sigmoid_steepness = 10.0
    sigmoid_priority = 1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - midpoint)))
    
    # Adaptive priority adjustment
    priority_adjustment_factor = (np.max(bins_remain_cap) - bins_remain_cap) / (np.max(bins_remain_cap) - item + 1e-6)
    adjusted_priority = sigmoid_priority * priority_adjustment_factor
    
    # Final priority considering fit feasibility and adjusted priority
    return ifbinsfit * adjusted_priority
```
