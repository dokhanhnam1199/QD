```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins by combining fit feasibility, normalized remaining capacity, and an adaptive sigmoid penalty.
    """
    can_fit = (bins_remain_cap >= item).astype(float)  # Check if item fits
    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)
    x0 = item / (np.max(bins_remain_cap) + 1e-6)  # Dynamic midpoint based on item size
    k = sigmoid_steepness = 8.060154863007442  # Tuned sigmoid steepness
    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)  # Adaptive penalty
    priority_scores = can_fit * (1 / (1 + np.exp(-k * (norm_remain_cap - x0)))) / (penalty + 1e-6)
    return priority_scores
```
