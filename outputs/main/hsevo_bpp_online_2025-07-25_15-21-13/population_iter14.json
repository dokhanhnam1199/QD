[
  {
    "stdout_filepath": "problem_iter14_response0.txt_stdout.txt",
    "code_path": "problem_iter14_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining normalized fit feasibility with adaptive sigmoid penalties based on current item and bin state.\n    \"\"\"\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    fit_feasibility = (bins_remain_cap >= item).astype(float)\n    midpoint = item / (np.max(bins_remain_cap) + 1e-6)\n    sigmoid_penalty = 1 / (1 + np.exp(-10 * (norm_remain_cap - midpoint)))\n    priority_score = fit_feasibility * sigmoid_penalty\n    return priority_score",
    "response_id": 0,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response1.txt_stdout.txt",
    "code_path": "problem_iter14_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using normalized fit feasibility and adaptive sigmoid penalties.\n    \"\"\"\n    # Normalized remaining capacity\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Fit feasibility\n    fit_feasibility = (bins_remain_cap >= item).astype(float)\n    \n    # Dynamic adaptive sigmoid penalty\n    midpoint = item / (np.max(bins_remain_cap) + 1e-6)\n    sigmoid_penalty = 1 / (1 + np.exp(-10 * (norm_remain_cap - midpoint)))\n    \n    # Combine feasibility and sigmoid penalty\n    priority_score = fit_feasibility * sigmoid_penalty\n    \n    return priority_score",
    "response_id": 1,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response2.txt_stdout.txt",
    "code_path": "problem_iter14_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using normalized fit feasibility and adaptive sigmoid penalties.\n    Balances space efficiency dynamically without redundant factors.\n    \"\"\"\n    # Check if item fits in the bin\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize remaining capacities\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Adaptive sigmoid penalty based on item size relative to bin capacity\n    adaptive_midpoint = item / np.mean(bins_remain_cap)\n    sigmoid_penalty = 1 / (1 + np.exp(-10 * (norm_remain_cap - adaptive_midpoint)))\n    \n    # Calculate priority score by combining feasibility and sigmoid penalty\n    priority_scores = ifbinsfit * sigmoid_penalty\n    \n    return priority_scores",
    "response_id": 2,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response3.txt_stdout.txt",
    "code_path": "problem_iter14_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines normalized fit feasibility with dynamically adjusted sigmoid penalty.\n    \"\"\"\n    # Check if item fits in the bin\n    can_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize remaining capacity\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Adaptive sigmoid-based penalty\n    sigmoid_penalty = 1 / (1 + np.exp(-10 * (norm_remain_cap - item / (np.mean(bins_remain_cap) + 1e-6))))\n    \n    # Combine feasibility and adaptive penalty\n    priority_score = can_fit * (1 - sigmoid_penalty)\n    \n    return priority_score",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response4.txt_stdout.txt",
    "code_path": "problem_iter14_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines normalized fit feasibility with dynamic sigmoid penalties for adaptive bin prioritization.\n    \"\"\"\n    # Normalized remaining capacity\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Fit feasibility\n    fit_feasibility = (bins_remain_cap >= item).astype(float)\n    \n    # Dynamic adaptive sigmoid penalty\n    midpoint = item / (np.max(bins_remain_cap) + 1e-6)\n    penalty = 1 / (1 + np.exp(-10 * (norm_remain_cap - midpoint)))\n    \n    # Combine feasibility and penalty\n    priority_score = fit_feasibility * penalty\n    \n    return priority_score",
    "response_id": 4,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response5.txt_stdout.txt",
    "code_path": "problem_iter14_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining normalized fit feasibility with a dynamic sigmoid penalty to balance space efficiency.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)  # Check if item fits in the bin\n    leftover_space = np.where(can_fit, bins_remain_cap - item, np.inf)  # Calculate leftover space\n    norm_leftover = leftover_space / (np.max(bins_remain_cap) + 1e-6)  # Normalize leftover space\n    k = 1.0  # Steepness of the sigmoid\n    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))  # Dynamic midpoint based on item size\n    priority_scores = can_fit * (1 / (1 + np.exp(-k * (1 - norm_leftover - x0))))  # Sigmoid penalty for space efficiency\n    return priority_scores",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response6.txt_stdout.txt",
    "code_path": "problem_iter14_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using normalized fit feasibility and adaptive penalties with a sigmoid function.\n    \"\"\"\n    # Fit feasibility\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalized remaining capacity\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Adaptive penalty based on item size compared to remaining capacity\n    adaptive_penalty = np.abs(norm_remain_cap - (item / np.max(bins_remain_cap)))\n    \n    # Sigmoid function for balancing feasibility and adaptive penalties\n    sigmoid_balance = 1 / (1 + np.exp(-5 * (norm_remain_cap - (item / np.mean(bins_remain_cap)))))\n    \n    # Calculate priority score\n    priority_scores = ifbinsfit * sigmoid_balance / (adaptive_penalty + 1e-6)\n    \n    return priority_scores",
    "response_id": 6,
    "tryHS": false,
    "obj": 22.72636617471082,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response7.txt_stdout.txt",
    "code_path": "problem_iter14_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines normalized fit feasibility with dynamic sigmoid penalization, focusing on adaptive space utilization.\n    \"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)  # Check if item fits\n    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)  # Calculate leftover space\n    norm_leftover = leftover_space / (np.max(bins_remain_cap) + 1e-6)  # Normalize leftover space\n    k = 1.0  # Steepness of the sigmoid\n    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))  # Dynamic midpoint based on item size\n    priority_scores = ifbinsfit * (1 / (1 + np.exp(-k * (1 - norm_leftover - x0))))  # Sigmoid priority calculation\n    return priority_scores",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response8.txt_stdout.txt",
    "code_path": "problem_iter14_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines normalized fit feasibility with dynamic sigmoid penalties adjusted based on item size and remaining capacity.\n    \"\"\"\n    # Fit feasibility\n    fit_feasibility = (bins_remain_cap >= item).astype(float)\n    \n    # Normalized remaining capacity\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Dynamic sigmoid penalty\n    midpoint = item / (np.max(bins_remain_cap) + 1e-6)\n    sigmoid_penalty = 1 / (1 + np.exp(-5 * (norm_remain_cap - midpoint)))\n    \n    # Combine feasibility and sigmoid penalty\n    priority_score = fit_feasibility * sigmoid_penalty\n    \n    return priority_score",
    "response_id": 8,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter14_response9.txt_stdout.txt",
    "code_path": "problem_iter14_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining normalized fit feasibility with a dynamic sigmoid penalty based on item fit and remaining space.\n    \"\"\"\n    # Check if the item fits in the bin\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    \n    # Calculate leftover space and normalize it\n    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)\n    normalized_leftover = leftover_space / (np.max(leftover_space) + 1e-6)\n    \n    # Dynamic sigmoid penalty based on normalized leftover space\n    k = 1.0  # Steepness of the sigmoid\n    sigmoid_penalty = 1 / (1 + np.exp(-k * normalized_leftover))\n    \n    # Combine feasibility and sigmoid penalty\n    priority_scores = ifbinsfit * sigmoid_penalty\n    \n    return priority_scores",
    "response_id": 9,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]