```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins using a dynamic and adaptive approach that considers item-specific fits, 
    normalized remaining capacity, and a refined penalty mechanism.
    
    Parameters:
    - item (float): The size of the current item to be packed.
    - bins_remain_cap (np.ndarray): An array containing the remaining capacity of each bin.
    
    Returns:
    - np.ndarray: A priority score for each bin, where higher scores indicate a better fit.
    """
    # Check if the item can fit in each bin
    fit_feasibility = (bins_remain_cap >= item).astype(float)
    
    # Normalize the remaining capacities
    total_remaining_cap = np.sum(bins_remain_cap)
    if total_remaining_cap == 0:
        total_remaining_cap = 1  # To avoid division by zero
    norm_remain_cap = bins_remain_cap / total_remaining_cap
    
    # Adaptive midpoint calculation based on the item size
    adaptive_midpoint = (np.max(bins_remain_cap) + np.min(bins_remain_cap)) / 2 + (item / 2)
    
    # Sigmoid function to prioritizebins near the adaptive midpoint
    sigmoid_steepness = 4.0  # Adjust the steepness as needed
    sigmoid_priority = 1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - (item / adaptive_midpoint))))
    
    # Adaptive penalty based on the difference between remaining capacity and item size
    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)  # Avoid division by zero
    
    # Combine feasibility, sigmoid, and penalty into a final priority score
    priority_score = fit_feasibility * sigmoid_priority / (abs(penalty) + 1e-3)  # Combine with a small offset to avoid division by zero
    
    return priority_score
```
