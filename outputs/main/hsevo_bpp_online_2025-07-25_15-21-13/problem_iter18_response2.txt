```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins using a dynamic and adaptive approach that considers item-specific fits, 
    normalized remaining capacity, and a refined penalty mechanism.
    
    Parameters:
    - item (float): The size of the current item to be packed.
    - bins_remain_cap (np.ndarray): An array containing the remaining capacity of each bin.
    
    Returns:
    - np.ndarray: A priority score for each bin, where higher scores indicate a better fit.
    """
    # Check if the item can fit in each bin
    fit_feasibility = (bins_remain_cap >= item).astype(float)
    
    # Normalize the remaining capacities
    total_remaining_cap = np.sum(bins_remain_cap)
    if total_remaining_cap == 0:
        total_remaining_cap = 1e-9  # Avoid division by zero
    norm_remain_cap = bins_remain_cap / total_remaining_cap
    
    # Calculate the normalized fit of the item to each bin
    item_fit = (bins_remain_cap - item) / total_remaining_cap
    
    # Adaptive penalty function to avoid very small remainders
    penalty_factor = np.where(item_fit < 0, 1e6, 1)  # Strong penalty for over-capacity bins
    
    # Dynamic adjustment based on current item size relative to average bin capacity
    avg_bin_cap = np.mean(bins_remain_cap)
    item_rel_size = item / avg_bin_cap
    dynamic_adjustment = np.exp(-np.abs(item_rel_size - norm_remain_cap))
    
    # Combine feasibility, normalized fit, and dynamic adjustment with adaptive penalty
    priority_scores = fit_feasibility * (dynamic_adjustment * norm_remain_cap) / penalty_factor
    
    return priority_scores
```
