```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins by dynamically adjusting parameters based on item and bin characteristics,
    using a combination of normalized fit feasibility, adaptive sigmoid penalty, and specificity.
    """
    # Determine if the item can fit in each bin
    can_fit = (bins_remain_cap >= item).astype(float)
    
    # Calculate adaptive parameters
    total_remaining_capacity = np.sum(bins_remain_cap)
    avg_bin_capacity = np.mean(bins_remain_cap)
    item_ratio = item / avg_bin_capacity
    
    # Normalize remaining capacities dynamically
    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)
    
    # Calculate midpoint dynamically based on item size and total remaining capacity
    midpoint = item / (total_remaining_capacity + 1e-6)
    
    # Adaptive penalty factor using item ratio and dynamic midpoint
    penalty_factor = 5.0 * (1 + item_ratio) + (1 / (midpoint + 1e-6))
    
    # Apply adaptive sigmoid penalty considering both the normalized capacity and midpoint
    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))
    
    # Calculate penalty with specificity adjustment
    specificity_penalty = 1 / (1 + np.exp(-10 * (bins_remain_cap - item) / (avg_bin_capacity + 1e-6)))
    
    # Combine feasibility, sigmoid penalty, and specificity penalty
    priority_score = can_fit * sigmoid_penalty * specificity_penalty
    
    return priority_score
```
