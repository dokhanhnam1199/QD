```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines normalized fit feasibility with dynamic sigmoid penalization, focusing on adaptive space utilization and item-specific adjustments.
    """
    ifbinsfit = (bins_remain_cap >= item).astype(float)  # Check if item fits
    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)  # Calculate leftover space
    norm_leftover = leftover_space / (np.max(bins_remain_cap) + 1e-6)  # Normalize leftover space
    k = 1.0 + (item / np.max(bins_remain_cap)) * 5  # Adaptive sigmoid steepness based on item size
    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))  # Dynamic midpoint based on item size
    penalty = np.maximum(0, 1 - ((bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)))  # Adaptive penalty
    priority_scores = ifbinsfit * (1 / (1 + np.exp(-k * (1 - norm_leftover - x0)))) / (penalty + 1e-6)  # Sigmoid priority with penalty
    return priority_scores
```
