{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    item: float, \n    bins_remain_cap: np.ndarray, \n    sigmoid_steepness: float = 8.060154863007442, \n    max_cap_offset: float = 9.629999168879228e-06) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining normalized fit feasibility, dynamic sigmoid penalty, and adaptive item fit.\n    \"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)  # Check if item fits in the bin\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + max_cap_offset)\n    sigmoid_priority = 1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - (item / np.max(bins_remain_cap)))))  # Dynamic midpoint\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + max_cap_offset)  # Adaptive penalty\n    return ifbinsfit * sigmoid_priority / (penalty + max_cap_offset)  # Combine feasibility, sigmoid, and penalty\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \n- **Keywords**: Adaptive mechanisms, tunable parameters, sensitivity, decision-making precision, item and bin characteristics, normalized normalization, dynamic parameter adjustment.\n- **Advice**: \n  - Implement adaptive mechanisms that allow for real-time changes in heuristic behavior based on the current state of items and bins.\n  - Use tunable parameters to finely adjust the sensitivity of the heuristic to various conditions, enhancing decision-making precision.\n  - Integrate normalized normalization techniques to ensure that all factors influencing bin selection and packing decisions are on a comparable scale.\n  - Develop flexible, dynamic parameter adjustment methods that respond to changes in item and bin characteristics, promoting better adaptability and performance.\n- **Avoid**: \n  - Static or fixed methods that do not allow for adjustments based on changing conditions.\n  - Unnecessary complexity and redundant calculations that do not add value to the heuristic's effectiveness.\n  - Paradoxical adaptive factors that may reduce efficiency or introduce inefficiencies into the system.\n  - Incorporating and penalizing leftover space in a way that space efficiency and item fit checks lead to more effective bin packing solutions, as it can distort heuristic priorities.\n- **Explanation**: By focusing on adaptive mechanisms and tunable parameters, the heuristic can dynamically respond to different problem scenarios, improving its overall effectiveness and efficiency. Normalized normalization ensures equitable consideration of various factors, while avoiding unnecessary complexity helps in maintaining computational efficiency and simplicity, ultimately leading to better decision-making in bin packing scenarios.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}