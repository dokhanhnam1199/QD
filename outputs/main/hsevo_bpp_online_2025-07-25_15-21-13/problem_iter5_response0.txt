```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using a combination of normalized remaining capacity and sigmoid function.

    This heuristic normalizes the remaining capacities and applies a sigmoid function to focus on bins
    that are almost full, while penalizing bins that cannot fit the item.
    """
    # Normalize the remaining capacities
    max_cap = np.max(bins_remain_cap)
    min_cap = np.min(bins_remain_cap)
    norm_remain_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)

    # Calculate the sigmoid priority based on normalized capacity
    sigmoid_priority = 1 / (1 + np.exp(-10 * (norm_remain_cap - 0.5)))

    # Calculate a penalty for bins that can't even fit the item
    can_fit = (bins_remain_cap >= item).astype(float)

    # Combine the sigmoid priority with the penalty
    priority_score = sigmoid_priority * can_fit

    return priority_score
```
