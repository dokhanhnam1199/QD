```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines normalized fit feasibility with dynamic sigmoid penalties and adaptive midpoint calculations.
    """
    can_fit = (bins_remain_cap >= item).astype(float)  # Check if item fits in the bin
    norm_leftover = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)  # Normalize leftover space
    k = 5.0  # Steepness of the sigmoid
    x0 = item / (np.max(bins_remain_cap) + 1e-6)  # Dynamic midpoint based on item size
    priority_scores = can_fit * (1 / (1 + np.exp(-k * (norm_leftover - x0))))  # Sigmoid penalty for space efficiency
    return priority_scores
```
