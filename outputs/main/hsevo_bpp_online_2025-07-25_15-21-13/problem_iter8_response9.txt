```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines normalized fit feasibility, dynamic penalties, and sigmoid to balance bin packing priorities."""
    ifbinsfit = (bins_remain_cap >= item).astype(float)  # Check if item fits in the bin
    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)  # Calculate leftover space
    # Adaptive penalty based on leftover space, with normalization
    penalty = leftover_space / (np.max(bins_remain_cap) + 1e-6)
    # Sigmoid function with dynamic parameters based on item size and remaining capacity
    k = 1.0  # Steepness of the sigmoid
    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))  # Midpoint adjusted by item size
    priority_scores = ifbinsfit * (1 / (1 + np.exp(-k * (1 - penalty - x0))))
    return priority_scores
```
