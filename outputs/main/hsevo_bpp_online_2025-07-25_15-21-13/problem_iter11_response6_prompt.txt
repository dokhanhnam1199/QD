{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines normalized fit feasibility and sigmoid-based adaptive penalty for better bin prioritization.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    sigmoid_penalty = 1 / (1 + np.exp(-10 * (norm_remain_cap - item / (np.mean(bins_remain_cap) + 1e-6))))\n    priority_score = can_fit * (1 - sigmoid_penalty)\n    return priority_score\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This heuristic dynamically adjusts the priority score based on the item size\n    relative to the remaining capacity of each bin. It aims to balance filling bins\n    efficiently without overly penalizing bins with less remaining capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Avoid division by zero and ensure numerical stability\n    epsilon = 1e-6\n    \n    # Calculate the relative space available in each bin for the current item\n    relative_space = bins_remain_cap / (item + epsilon)\n    \n    # Use a sigmoid function to create a smooth transition from low to high priority\n    # This ensures that bins with just enough space also get considered\n    priority_score = 1.0 / (1.0 + np.exp(-(relative_space - 1.5)))\n    \n    return priority_score\n\n### Analyze & experience\n- Comparing (best) Heuristics 1st vs (worst) Heuristics 20th, we see that the best approach utilizes a more nuanced calculation involving normalized leftover space adjusted dynamically by item size, while the worst one is repetitive and does not fully utilize the sigmoid's flexibility.\n(Second best) Heuristics 6th vs (second worst) Heuristics 19th, we see that Heuristics 6th better balances normalized fit feasibility with sigmoid-based adaptive penalty by adjusting sigmoid parameters dynamically. Heuristics 19th uses a simpler heuristic without dynamic adjustments.\nComparing (1st) vs (2nd), we see that both use similar mechanics but the first one adjusts its midpoint dynamically based on the item size with regard to the max bin capacity, whereas the second one has a more static midpoint.\n(3rd) vs (4th), we see a repetition without variation in the middle, indicating no additional learning or adaptation.\nComparing (second worst) Heuristics 19th vs (worst) Heuristics 20th, we see both use sigmoid functions but the former dynamically considers the item fit into the score calculation while the latter does not.\n\nOverall: The best techniques integrate normalization, dynamic parameter adjustment, and a sigmoid function to maximize adaptability and precision in priority calculation.\n- \n- **Keywords**: Dynamic adjustment, adaptive functions, balance objectives, prioritization\n- **Advice**: Implement adaptive dynamic penalties using sigmoid functions that adjust based on real-time item-bin interactions.\n- **Avoid**: Fixed penalties, complexity in calculations, static methods, redundant checks.\n- **Explanation**: Prioritize dynamic adjustments over fixed parameters by using adaptive functions like sigmoid to continuously evaluate and balance the trade-offs between space efficiency and item fit, enhancing heuristic effectiveness without unnecessary complexity.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}