{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Prioritizes bins using normalized fit feasibility and adaptive sigmoid penalties with dynamic tuning.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)  # Check if item fits\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    x0 = item / (np.max(bins_remain_cap) + 1e-6)  # Dynamic midpoint based on item size\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)  # Adaptive penalty\n    sigmoid_steepness = 9.78504159548925  # Tuned sigmoid steepness\n    priority_scores = can_fit * (1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - x0)))) / (penalty + 1e-6)\n    return priority_scores\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines fit feasibility, dynamic sigmoid midpoint, and adaptive penalty for precise bin selection.\n    \"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)  # Check if item fits\n    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)  # Calculate leftover space\n    norm_leftover = leftover_space / (np.max(bins_remain_cap) + 1e-6)  # Normalize leftover space\n    k = 1.0  # Steepness of the sigmoid\n    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))  # Dynamic midpoint based on item size\n    adaptive_penalty = np.abs(norm_leftover - x0)  # Adaptive penalty based on normalized leftover space\n    penalty_factor = np.where(norm_leftover < 0, 1e6, 1)  # Strong penalty for over-capacity bins\n    sigmoid_priority = 1 / (1 + np.exp(-k * (norm_leftover - x0)))  # Sigmoid-based priority calculation\n    priority_scores = ifbinsfit * sigmoid_priority / (adaptive_penalty * penalty_factor + 1e-6)  # Final priority score\n    return priority_scores\n\n### Analyze & experience\n- Comparing (best) vs (worst), we see that the best heuristics utilize detailed calculations for midpoint and penalty factor, ensuring nuanced bin prioritization. The worst heuristics lack variation, reuse similar calculations, and do not adapt well to different item sizes.\n(Second best) vs (second worst) shows that adaptive parameters (penalty factor, midpoint) and sigmoid steepness play a significant role in distinguishing better heuristics.\nComparing (1st) vs (2nd), we see almost identical code with minor differences in constants, indicating the importance of fine-tuning parameters for optimal performance.\n(3rd) vs (4th) further confirms that slight variations in penalty and midpoint calculation do not significantly impact the outcome, suggesting a need for more substantial alterations in heuristic design.\nComparing (second worst) vs (worst), we see that there are no discernible differences in logic or parameters, reinforcing the notion that the core design of the heuristic is crucial.\nOverall:\n- \n- **Keywords**: Adaptive parameters, dynamic adjustments, normalized normalization, unique design, sigmoid functions, flexibility, specificity.\n  \n- **Advice**: \n  - Focus on unique and adaptive design over minor parameter tweaking.\n  - Combine normalization techniques with adaptive sigmoid functions for better accuracy.\n  - Use item and bin characteristics for dynamic parameter adjustment.\n  - Prioritize specificity and simplicity in dynamic penalization.\n\n- **Avoid**: \n  - Fixed methods and static penalties.\n  - Unnecessary complexity and redundant calculations.\n  - Paradoxical adaptive factors.\n\n- **Explanation**: \n  Effective self-reflection highlights the importance of adaptability and specificity in heuristic design, emphasizing that unique approaches and simple yet powerful adjustments lead to better performance. Avoidance of fixed methods and unnecessary complexity ensures that the heuristics remain versatile and efficient, improving their applicability to a wider range of problems.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}