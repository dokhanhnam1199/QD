{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Prioritizes bins by combining normalized fit feasibility, adaptive sigmoid penalty, and dynamic midpoint.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    midpoint = item / np.max(bins_remain_cap)\n    penalty_factor = 8.060154863007442 + 3 * (item / np.max(bins_remain_cap))\n    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)\n    return can_fit * sigmoid_penalty / (penalty + 1e-6)\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \n- **Keywords**: Adaptive parameters, dynamic adjustments, normalized normalization, unique design, sigmoid functions, flexibility, specificity.\n  \n- **Advice**: \n  - Focus on unique and adaptive design over minor parameter tweaking.\n  - Combine normalization techniques with adaptive sigmoid functions for better accuracy.\n  - Use item and bin characteristics for dynamic parameter adjustment.\n  - Prioritize specificity and simplicity in dynamic penalization.\n\n- **Avoid**: \n  - Fixed methods and static penalties.\n  - Unnecessary complexity and redundant calculations.\n  - Paradoxical adaptive factors.\n\n- **Explanation**: \n  Effective self-reflection highlights the importance of adaptability and specificity in heuristic design, emphasizing that unique approaches and simple yet powerful adjustments lead to better performance. Avoidance of fixed methods and unnecessary complexity ensures that the heuristics remain versatile and efficient, improving their applicability to a wider range of problems.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}