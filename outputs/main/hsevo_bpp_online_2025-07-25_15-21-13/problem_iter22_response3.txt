import numpy as np

def priority_v2(
    item: float, 
    bins_remain_cap: np.ndarray, 
    sigmoid_steepness: float = 15.295154000399773, 
    max_cap_offset: float = 6.257323009170649e-06) -> np.ndarray:
    """
    Prioritizes bins by combining normalized fit feasibility and dynamic sigmoid penalties with tunable parameters.
    """
    can_fit = (bins_remain_cap >= item).astype(float)  # Check if item fits in the bin
    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + max_cap_offset)
    x0 = item / (np.max(bins_remain_cap) + max_cap_offset)  # Dynamic midpoint based on item size
    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + max_cap_offset)  # Adaptive penalty
    priority_scores = can_fit * (1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - x0)))) / (penalty + max_cap_offset)
    return priority_scores
