```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This design promotes placing items in bins that have the closest remaining capacity
    big enough to fit the item. Items are more likely to fill the bin snugly, reducing
    the leftover capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priority array
    priority_scores = np.zeros_like(bins_remain_cap)
    
    # Set a high score to bins that exactly match the item size
    exact_match = (bins_remain_cap == item)
    priority_scores += exact_match * 10000  # Large multiplier for incentivizing exact match
    
    # Set a secondary score to bins that can hold this item, prioritizing smaller remaining space to fill big spots
    potential_bins = bins_remain_cap >= item
    priority_scores[potential_bins] += -(bins_remain_cap[potential_bins] - item)  # Smembers yap Commands faster the more items fill that space
    
    return priority_scores
```
