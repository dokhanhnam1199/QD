```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version uses a dynamic and adaptive heuristic that prioritizes bins based on a weighted
    combination of remaining capacity and a penalty for deviation from an optimal bin fill level.
    The heuristic aims to balance filling bins efficiently without overly penalizing bins that
    are close to full, thus promoting a more flexible and adaptive packing strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero and numerical instability
    epsilon = 1e-6

    # Optimal fill level for a bin (assuming bins should be as full as possible, but not overfilled)
    optimal_fill = 0.8 * (bins_remain_cap.max() + epsilon)

    # Priority is based on a combination of remaining capacity and how close the bin is to the optimal fill level
    priority = (bins_remain_cap + epsilon) / (optimal_fill + epsilon)

    # Penalize bins that are too full (beyond the optimal fill level)
    penalty = np.where(bins_remain_cap < (0.9 * optimal_fill), (optimal_fill - bins_remain_cap) / optimal_fill, 0)

    # Final priority score is the remaining capacity adjusted by the penalty
    return priority * (1 - penalty)
```
