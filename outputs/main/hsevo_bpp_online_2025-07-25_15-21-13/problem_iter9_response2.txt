```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This heuristic dynamically adjusts priorities based on the item size relative to the remaining
    capacity of each bin, with a focus on adaptive fitting. It avoids static penalties and aims for
    simplicity and real-time evaluation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero by adding a small epsilon
    epsilon = 1e-6
    # Use an adaptive function that considers the ratio of item size to remaining capacity
    priority_scores = (bins_remain_cap - item) / (bins_remain_cap + epsilon)
    # Penalize bins that cannot fit the item by setting their priority to a very low value
    priority_scores[bins_remain_cap < item] = -np.inf
    # Add a small sinusoidal component to create a subtle preference for nearly full bins
    sinusoidal_adjustment = 0.1 * np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + epsilon)))
    priority_scores += sinusoidal_adjustment
    return priority_scores
```
