```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins by combining normalized fit feasibility with dynamic adaptive penalties.
    """
    # Check if item fits in the bin
    ifbinsfit = (bins_remain_cap >= item).astype(float)
    
    # Normalize remaining capacity
    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)
    
    # Adaptive sigmoid penalty based on item size relative to bin capacity
    adaptive_midpoint = item / np.max(bins_remain_cap)
    sigmoid_penalty = 1 / (1 + np.exp(-20 * (norm_remain_cap - adaptive_midpoint)))
    
    # Dynamic adjustment factor that considers the spread of remaining capacities
    spread_factor = 1 / (np.std(bins_remain_cap) + 1e-6)
    
    # Combine feasibility, sigmoid penalty, and dynamic adjustment
    priority_scores = ifbinsfit * sigmoid_penalty * spread_factor
    
    return priority_scores
```
