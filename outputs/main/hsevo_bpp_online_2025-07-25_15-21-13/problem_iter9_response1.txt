```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version uses a dynamic and adaptive heuristic that prioritizes bins based on a blend of remaining capacity and 
    flexibility to accommodate future items. The priority is adjusted in real-time based on the item size and the current 
    state of the bins. It aims to fill the bins efficiently without being overly rigid, allowing for better performance in 
    dynamic and uncertain conditions.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize remaining capacities
    max_cap = np.max(bins_remain_cap) + 1e-6
    norm_remain_cap = bins_remain_cap / max_cap

    # Priority based on remaining capacity and a sin function to favor tighter bins
    cap_priority = (1 - norm_remain_cap) * np.sin(np.pi / 2 * norm_remain_cap)

    # Adaptivity: Consider how well the item fits into each bin
    flexibility_factor = np.clip(1 - item / (bins_remain_cap + item), 0, 1)
    fit_priority = flexibility_factor * (1 - norm_remain_cap)

    # Combined priority: emphasis on capacity while considering flexibility
    combined_priority = cap_priority + fit_priority

    return combined_priority
```
