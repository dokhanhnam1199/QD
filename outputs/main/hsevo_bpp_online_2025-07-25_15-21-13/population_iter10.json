[
  {
    "stdout_filepath": "problem_iter8_response0.txt_stdout.txt",
    "code_path": "problem_iter8_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit feasibility with sigmoid-based dynamic penalty for adaptive bin prioritization.\"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    normalized_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    k = 2.0  # Steepness of the sigmoid\n    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))\n    penalty = 1 / (1 + np.exp(-k * (normalized_cap - x0)))\n    return ifbinsfit * penalty",
    "response_id": 0,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response1.txt_stdout.txt",
    "code_path": "problem_iter8_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit feasibility with sigmoid-based dynamic penalty for adaptive bin prioritization.\"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    normalized_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    k = 2.0  # Steepness of the sigmoid\n    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))\n    penalty = 1 / (1 + np.exp(-k * (normalized_cap - x0)))\n    return ifbinsfit * penalty",
    "response_id": 1,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response2.txt_stdout.txt",
    "code_path": "problem_iter8_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins using adaptive sigmoid function and fit feasibility checks.\"\"\"\n    \n    can_fit = (bins_remain_cap >= item).astype(float)\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    sigmoid_priority = 1 / (1 + np.exp(-10 * (norm_remain_cap - 0.5)))\n    \n    return sigmoid_priority * can_fit",
    "response_id": 2,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response3.txt_stdout.txt",
    "code_path": "problem_iter8_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit feasibility with sigmoid-based dynamic penalty for adaptive bin prioritization.\"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    normalized_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    k = 2.0  # Steepness of the sigmoid\n    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))\n    penalty = 1 / (1 + np.exp(-k * (normalized_cap - x0)))\n    return ifbinsfit * penalty",
    "response_id": 3,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response4.txt_stdout.txt",
    "code_path": "problem_iter8_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit feasibility with normalized penalties and adaptive sigmoid to prioritize bins.\"\"\"\n    # Fit feasibility\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    # Leftover space\n    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)\n    # Normalized leftover space\n    normalized_leftover = leftover_space / (np.max(leftover_space) + 1e-6)\n    # Sigmoid function with dynamic adjustment based on item size\n    k = 1.0  # Steepness of the sigmoid function, can be tuned\n    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))  # Midpoint adjusted by item size\n    priority_scores = ifbinsfit * 1 / (1 + np.exp(-k * (1 - normalized_leftover - x0)))\n    return priority_scores",
    "response_id": 4,
    "tryHS": true,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response5.txt_stdout.txt",
    "code_path": "problem_iter8_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines normalized fit feasibility and sigmoid-based adaptive penalty for better bin prioritization.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    sigmoid_penalty = 1 / (1 + np.exp(-10 * (norm_remain_cap - item / (np.mean(bins_remain_cap) + 1e-6))))\n    priority_score = can_fit * (1 - sigmoid_penalty)\n    return priority_score",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response6.txt_stdout.txt",
    "code_path": "problem_iter8_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using normalized fit feasibility and adaptive penalty with sigmoid.\n    \"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)  # Check if item fits in the bin\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    sigmoid_priority = 1 / (1 + np.exp(-10 * (norm_remain_cap - 0.5)))  # Prioritize bins closer to being full\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)  # Adaptive penalty based on leftover space\n    return ifbinsfit * sigmoid_priority / (penalty + 1e-6)  # Combine feasibility, sigmoid, and adaptive penalty",
    "response_id": 6,
    "tryHS": false,
    "obj": 8.6358197048265,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response7.txt_stdout.txt",
    "code_path": "problem_iter8_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Dynamic priority function combining normalized fit, adaptive penalties, and sigmoid for online BPP.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    normalized_cap = bins_remain_cap / np.max(bins_remain_cap, initial=1.0)\n    k = 1.0  # Steepness of the sigmoid function\n    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))\n    sigmoid_factor = 1 / (1 + np.exp(-k * (normalized_cap - x0)))\n    priority = can_fit * (normalized_cap - (space_left / bins_remain_cap)) * sigmoid_factor\n    return priority",
    "response_id": 7,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response8.txt_stdout.txt",
    "code_path": "problem_iter8_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins based on normalized remaining capacity and adaptive sigmoid penalization for item fit.\n    \"\"\"\n    # Normalize remaining capacities\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Sigmoid function to prioritize bins that are closer to being full\n    sigmoid_priority = 1 / (1 + np.exp(-10 * (norm_remain_cap - 0.5)))\n    \n    # Penalty for bins that cannot fit the item\n    can_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Combine sigmoid priority with fit feasibility, emphasizing item fit\n    priority_score = sigmoid_priority * can_fit * (1 + np.exp(-np.abs(bins_remain_cap - item)))\n    \n    return priority_score",
    "response_id": 8,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response9.txt_stdout.txt",
    "code_path": "problem_iter8_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines normalized fit feasibility, dynamic penalties, and sigmoid to balance bin packing priorities.\"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)  # Check if item fits in the bin\n    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)  # Calculate leftover space\n    # Adaptive penalty based on leftover space, with normalization\n    penalty = leftover_space / (np.max(bins_remain_cap) + 1e-6)\n    # Sigmoid function with dynamic parameters based on item size and remaining capacity\n    k = 1.0  # Steepness of the sigmoid\n    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))  # Midpoint adjusted by item size\n    priority_scores = ifbinsfit * (1 / (1 + np.exp(-k * (1 - penalty - x0))))\n    return priority_scores",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter9_response0.txt_stdout.txt",
    "code_path": "problem_iter9_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This heuristic dynamically adjusts the priority score based on the item size\n    relative to the remaining capacity of each bin. It aims to balance filling bins\n    efficiently without overly penalizing bins with less remaining capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Avoid division by zero and ensure numerical stability\n    epsilon = 1e-6\n    \n    # Calculate the relative space available in each bin for the current item\n    relative_space = bins_remain_cap / (item + epsilon)\n    \n    # Use a sigmoid function to create a smooth transition from low to high priority\n    # This ensures that bins with just enough space also get considered\n    priority_score = 1.0 / (1.0 + np.exp(-(relative_space - 1.5)))\n    \n    return priority_score",
    "response_id": 0,
    "tryHS": false,
    "obj": 149.27203829278022,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter9_response1.txt_stdout.txt",
    "code_path": "problem_iter9_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version uses a dynamic and adaptive heuristic that prioritizes bins based on a blend of remaining capacity and \n    flexibility to accommodate future items. The priority is adjusted in real-time based on the item size and the current \n    state of the bins. It aims to fill the bins efficiently without being overly rigid, allowing for better performance in \n    dynamic and uncertain conditions.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = np.max(bins_remain_cap) + 1e-6\n    norm_remain_cap = bins_remain_cap / max_cap\n\n    # Priority based on remaining capacity and a sin function to favor tighter bins\n    cap_priority = (1 - norm_remain_cap) * np.sin(np.pi / 2 * norm_remain_cap)\n\n    # Adaptivity: Consider how well the item fits into each bin\n    flexibility_factor = np.clip(1 - item / (bins_remain_cap + item), 0, 1)\n    fit_priority = flexibility_factor * (1 - norm_remain_cap)\n\n    # Combined priority: emphasis on capacity while considering flexibility\n    combined_priority = cap_priority + fit_priority\n\n    return combined_priority",
    "response_id": 1,
    "tryHS": false,
    "obj": 9.97207818109294,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter9_response2.txt_stdout.txt",
    "code_path": "problem_iter9_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This heuristic dynamically adjusts priorities based on the item size relative to the remaining\n    capacity of each bin, with a focus on adaptive fitting. It avoids static penalties and aims for\n    simplicity and real-time evaluation.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Avoid division by zero by adding a small epsilon\n    epsilon = 1e-6\n    # Use an adaptive function that considers the ratio of item size to remaining capacity\n    priority_scores = (bins_remain_cap - item) / (bins_remain_cap + epsilon)\n    # Penalize bins that cannot fit the item by setting their priority to a very low value\n    priority_scores[bins_remain_cap < item] = -np.inf\n    # Add a small sinusoidal component to create a subtle preference for nearly full bins\n    sinusoidal_adjustment = 0.1 * np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + epsilon)))\n    priority_scores += sinusoidal_adjustment\n    return priority_scores",
    "response_id": 2,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter9_response3.txt_stdout.txt",
    "code_path": "problem_iter9_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This heuristic dynamically adjusts the priority score based on the item size\n    relative to the remaining capacity of each bin. It aims to balance filling bins\n    efficiently without overly penalizing bins with very little remaining capacity.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the normalized remaining capacity\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    norm_remain_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)\n    \n    # Calculate the fit score: how well the item fits in the bin\n    # Smaller values are better as they indicate a better fit\n    fit_score = np.abs(bins_remain_cap - item)\n    \n    # Use a combination of the normalized remaining capacity and fit score\n    # Higher priority for bins where the item fits well and the bin is relatively full\n    priority_score = norm_remain_cap / (fit_score + 1e-6)\n    \n    return priority_score",
    "response_id": 3,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter9_response4.txt_stdout.txt",
    "code_path": "problem_iter9_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version uses a dynamic and adaptive heuristic that prioritizes bins based on a weighted\n    combination of remaining capacity and a penalty for deviation from an optimal bin fill level.\n    The heuristic aims to balance filling bins efficiently without overly penalizing bins that\n    are close to full, thus promoting a more flexible and adaptive packing strategy.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Avoid division by zero and numerical instability\n    epsilon = 1e-6\n\n    # Optimal fill level for a bin (assuming bins should be as full as possible, but not overfilled)\n    optimal_fill = 0.8 * (bins_remain_cap.max() + epsilon)\n\n    # Priority is based on a combination of remaining capacity and how close the bin is to the optimal fill level\n    priority = (bins_remain_cap + epsilon) / (optimal_fill + epsilon)\n\n    # Penalize bins that are too full (beyond the optimal fill level)\n    penalty = np.where(bins_remain_cap < (0.9 * optimal_fill), (optimal_fill - bins_remain_cap) / optimal_fill, 0)\n\n    # Final priority score is the remaining capacity adjusted by the penalty\n    return priority * (1 - penalty)",
    "response_id": 4,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter10_response0.txt_stdout.txt",
    "code_path": "problem_iter10_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float, \n    bins_remain_cap: np.ndarray, \n    k: float = 0.36441927144883424, \n    sigmoid_midpoint_offset: float = 0.1409242619459996, \n    max_leftover_space_const: float = 8.108007068741238e-06) -> np.ndarray:\n    \"\"\"Combines fit feasibility with normalized penalties and adaptive sigmoid to prioritize bins.\"\"\"\n    # Fit feasibility\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    # Leftover space\n    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)\n    # Normalized leftover space\n    normalized_leftover = leftover_space / (np.max(leftover_space) + max_leftover_space_const)\n    # Sigmoid function with dynamic adjustment based on item size\n    x0 = sigmoid_midpoint_offset - (item / (np.max(bins_remain_cap) + max_leftover_space_const))  # Midpoint adjusted by item size\n    priority_scores = ifbinsfit * 1 / (1 + np.exp(-k * (1 - normalized_leftover - x0)))\n    return priority_scores",
    "response_id": 0,
    "tryHS": true,
    "obj": 4.048663741523748,
    "SLOC": 12.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]