```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins using normalized fit feasibility, dynamic sigmoid penalties, and adaptive adjustments.
    """
    # Check if item fits in the bin
    ifbinsfit = (bins_remain_cap >= item).astype(float)
    
    # Normalize remaining capacity dynamically
    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)
    
    # Calculate normalized item size
    norm_item_size = item / np.max(bins_remain_cap)
    
    # Dynamic sigmoid steepness based on item size and remaining capacity
    sigmoid_steepness = 10 * (1 - norm_item_size)
    
    # Calculate sigmoid priority
    sigmoid_priority = 1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - norm_item_size)))
    
    # Adaptive penalty based on remaining capacity after placing the item
    penalty = np.maximum(0, 1 - ((bins_remain_cap - item) / np.max(bins_remain_cap)))
    
    # Combine feasibility, sigmoid penalty, and adaptive adjustments
    priority_score = ifbinsfit * sigmoid_priority / (penalty + 1e-6)
    
    return priority_score
```
