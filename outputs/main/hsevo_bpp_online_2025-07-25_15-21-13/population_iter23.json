[
  {
    "stdout_filepath": "problem_iter23_response0.txt_stdout.txt",
    "code_path": "problem_iter23_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines fit feasibility, dynamic sigmoid midpoint, and adaptive penalty for precise bin selection.\n    \"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)  # Check if item fits\n    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)  # Calculate leftover space\n    norm_leftover = leftover_space / (np.max(bins_remain_cap) + 1e-6)  # Normalize leftover space\n    k = 1.0  # Steepness of the sigmoid\n    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))  # Dynamic midpoint based on item size\n    adaptive_penalty = np.abs(norm_leftover - x0)  # Adaptive penalty based on normalized leftover space\n    penalty_factor = np.where(norm_leftover < 0, 1e6, 1)  # Strong penalty for over-capacity bins\n    sigmoid_priority = 1 / (1 + np.exp(-k * (norm_leftover - x0)))  # Sigmoid probability of bin fit\n    priority_scores = ifbinsfit * (sigmoid_priority / (adaptive_penalty * penalty_factor + 1e-6))  # Combined priority score\n    return priority_scores",
    "response_id": 0,
    "tryHS": false,
    "obj": 12.963701635420822,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response1.txt_stdout.txt",
    "code_path": "problem_iter23_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines fit feasibility, normalized remaining capacity, and an adaptive sigmoid penalty based on item size.\n    \"\"\"\n    # Check if item fits into the bin\n    can_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize remaining capacity\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Calculate adaptive midpoint and steepness\n    midpoint = item / (np.mean(bins_remain_cap) + 1e-6)\n    penalty_factor = 10 + 4 * (item / np.max(bins_remain_cap))\n    \n    # Calculate sigmoid penalty\n    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))\n    \n    # Calculate priority score by combining feasibility and penalty\n    priority_score = can_fit * (1 - sigmoid_penalty)\n    \n    return priority_score",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response2.txt_stdout.txt",
    "code_path": "problem_iter23_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines normalized fit feasibility with adaptive sigmoid penalties for robust bin selection.\n    \"\"\"\n    # Fit feasibility\n    can_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize remaining capacity\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Adaptive midpoint calculation\n    midpoint = item / (np.mean(bins_remain_cap) + 1e-6)\n    \n    # Adaptive sigmoid steepness\n    k = 1.0 + (item / np.max(bins_remain_cap)) * 5\n    \n    # Dynamic sigmoid penalty\n    sigmoid_penalty = 1 / (1 + np.exp(-k * (norm_remain_cap - midpoint)))\n    \n    # Combine feasibility and adaptive penalty\n    priority_score = can_fit * (1 - sigmoid_penalty)\n    \n    return priority_score",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response3.txt_stdout.txt",
    "code_path": "problem_iter23_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using normalized fit feasibility and adaptive sigmoid penalties with dynamic tuning.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)  # Check if item fits\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    x0 = item / (np.max(bins_remain_cap) + 1e-6)  # Dynamic midpoint based on item size\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)  # Adaptive penalty\n    sigmoid_steepness = 9.78504159548925  # Tuned sigmoid steepness\n    priority_scores = can_fit * (1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - x0)))) / (penalty + 1e-6)\n    return priority_scores",
    "response_id": 3,
    "tryHS": false,
    "obj": 2.1739130434782563,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response4.txt_stdout.txt",
    "code_path": "problem_iter23_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using normalized fit feasibility and adaptive sigmoid penalties with dynamic midpoints.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    midpoint = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))\n    k = 5.0  # Steepness of the sigmoid\n    sigmoid_penalty = 1 / (1 + np.exp(-k * (norm_remain_cap - midpoint)))\n    adaptive_penalty = 1 / (1 + np.exp(5 * ((bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6))))\n    priority_scores = can_fit * sigmoid_penalty * adaptive_penalty\n    return priority_scores",
    "response_id": 4,
    "tryHS": false,
    "obj": 7.169924212205833,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response5.txt_stdout.txt",
    "code_path": "problem_iter23_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining fit feasibility, normalized remaining capacity, and an adaptive sigmoid penalty.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)  # Check if item fits\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    x0 = item / (np.max(bins_remain_cap) + 1e-6)  # Dynamic midpoint based on item size\n    k = sigmoid_steepness = 8.060154863007442  # Tuned sigmoid steepness\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)  # Adaptive penalty\n    priority_scores = can_fit * (1 / (1 + np.exp(-k * (norm_remain_cap - x0)))) / (penalty + 1e-6)\n    return priority_scores",
    "response_id": 5,
    "tryHS": false,
    "obj": 1.266453928998808,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response6.txt_stdout.txt",
    "code_path": "problem_iter23_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining fit feasibility, dynamic sigmoid penalties, and normalized capacity.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)  # Check if item fits in the bin\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    x0 = item / (np.max(bins_remain_cap) + 1e-6)  # Dynamic midpoint based on item size\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)  # Adaptive penalty\n    sigmoid_steepness = 10.0  # Tuned sigmoid steepness\n    sigmoid_priority = 1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - x0)))\n    adaptive_influence = sigmoid_priority / (penalty + 1e-6)\n    priority_scores = can_fit * adaptive_influence\n    return priority_scores",
    "response_id": 6,
    "tryHS": false,
    "obj": 3.4004786597527064,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response7.txt_stdout.txt",
    "code_path": "problem_iter23_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines fit feasibility, dynamic sigmoid midpoint, and adaptive penalty for precise bin selection.\n    \"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)  # Check if item fits\n    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)  # Calculate leftover space\n    norm_leftover = leftover_space / (np.max(bins_remain_cap) + 1e-6)  # Normalize leftover space\n    k = 1.0  # Steepness of the sigmoid\n    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))  # Dynamic midpoint based on item size\n    adaptive_penalty = np.abs(norm_leftover - x0)  # Adaptive penalty based on normalized leftover space\n    penalty_factor = np.where(norm_leftover < 0, 1e6, 1)  # Strong penalty for over-capacity bins\n    sigmoid_priority = 1 / (1 + np.exp(-k * (norm_leftover - x0)))  # Sigmoid-based priority calculation\n    priority_scores = ifbinsfit * sigmoid_priority / (adaptive_penalty * penalty_factor + 1e-6)  # Final priority score\n    return priority_scores",
    "response_id": 7,
    "tryHS": false,
    "obj": 12.963701635420822,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response8.txt_stdout.txt",
    "code_path": "problem_iter23_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining normalized fit feasibility, adaptive sigmoid penalty, and dynamic midpoint.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    midpoint = item / np.max(bins_remain_cap)\n    penalty_factor = 8.060154863007442 + 3 * (item / np.max(bins_remain_cap))\n    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)\n    return can_fit * sigmoid_penalty / (penalty + 1e-6)",
    "response_id": 8,
    "tryHS": false,
    "obj": 1.0769844435580445,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter23_response9.txt_stdout.txt",
    "code_path": "problem_iter23_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines fit feasibility, normalized capacity, and adaptive sigmoid penalties for nuanced bin selection.\n    \"\"\"\n    # Check if item fits into the bin\n    can_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize remaining capacity\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Calculate dynamic midpoint and steepness\n    midpoint = item / (np.mean(bins_remain_cap) + 1e-6)\n    penalty_factor = 10 + 3 * (item / np.max(bins_remain_cap))\n    \n    # Calculate sigmoid penalty\n    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))\n    \n    # Calculate priority score by combining feasibility and penalty\n    priority_score = can_fit * (1 - sigmoid_penalty)\n    \n    return priority_score",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]