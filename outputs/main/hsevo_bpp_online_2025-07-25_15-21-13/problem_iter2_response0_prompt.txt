{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This design implements a heuristic based on the remaining capacity of the bins.\n    Is a priority score based on filling tighter bins first, aiming to close the \n    bins as much as possible to trigger first fit for new bins sooner.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Inverse of remaining capacity (sinusoidal function to prioritize the almost full bins)\n    return 1.0 / (bins_remain_cap + 1e-6) * np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used considering future placements. It calculates the reduction in\n    potential waste (as given by the difference between the remaining capacity and\n    the item size) and penalizes bins that have less room than the item.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate waste reduction if item is added to each bin\n    waste_reduction = bins_remain_cap - item\n    \n    # Items that cannot fit in the bin get a very low priority\n    priority_score = np.where(waste_reduction >= 0, waste_reduction, -1000)\n    \n    # Encourage using less full bins slightly by adding some epsilon based on current capacity\n    epsilon = 0.01\n    encouragement = (bins_remain_cap - np.max(bins_remain_cap)) * epsilon\n    priority_score_with_encouragement = priority_score + encouragement\n    \n    return priority_score_with_encouragement\n\n### Analyze & experience\n- Comparing (best) vs (worst), we see that the best heuristics consider the remaining capacity and efficiently manage space to minimize waste, which is crucial for optimization. In contrast, the worst heuristics apply a sinusoidal function that unnecessarily complicates the simplicity of filling bins based on capacity and space left. \n(second best) vs (second worst) reveals that the second best maintains a clear priority on minimizing leftover space and fits within the remaining capacity well, whereas the second worst does not account for capacity-based prioritization effectively.\nComparing (1st) vs (2nd), we see that both prioritize based on remaining capacity but the first adds a nuanced consideration of leftover space, improving efficiency over the second.\n(3rd) vs (4th) shows improvements when the fourth method introduces a penalty for leftover space, demonstrating the benefit of adaptive heuristics over static capacity-based ones.\nComparing (second worst) vs (worst), we see that the second worst at least checks if the item can fit within the bin, providing a basic layer of functionality the worst lacks.\nOverall: The best heuristics incorporate multiple factors like capacity, item fit, and leftover space effectively, enhancing efficiency in bin packing.\n- \n- **Keywords**: Space efficiency, item fit, penalties, iteratively refining, adaptability, systematic evaluation, dynamic thresholds\n- **Advice**: Focus on iteratively refining item selection strategies based on real-time feedback. Incorporate systematic evaluation to dynamically adjust penalties for leftover space.\n- **Avoid**: Static penalty structures, neglecting potential for adaptability, failing to reevaluate solutions periodically.\n- **Explanation**: Dynamic adjustment of penalties and strategies allows the heuristic to better adapt to varying input scenarios. This avoids the pitfalls of static penalty structures, enhancing robustness and effectiveness in space utilization and item fit.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}