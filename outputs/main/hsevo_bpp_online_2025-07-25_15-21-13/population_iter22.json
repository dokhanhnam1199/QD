[
  {
    "stdout_filepath": "problem_iter20_response0.txt_stdout.txt",
    "code_path": "problem_iter20_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines normalized fit feasibility with adaptive sigmoid penalties and midpoint adjustments for refined decision-making.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)  # Check if item fits\n    leftover_space = np.where(can_fit, bins_remain_cap - item, np.inf)  # Calculate leftover space\n    norm_leftover = leftover_space / (np.max(bins_remain_cap) + 1e-6)  # Normalize leftover space\n    k = 2.0  # Steepness of the sigmoid\n    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))  # Dynamic midpoint based on item size\n    adaptive_penalty = np.abs(norm_leftover - x0)  # Adaptive penalty based on normalized leftover space\n    priority_scores = can_fit * (1 / (1 + np.exp(-k * (norm_leftover - x0)))) / (adaptive_penalty + 1e-6)  # Sigmoid priority with adaptive penalty\n    return priority_scores",
    "response_id": 0,
    "tryHS": false,
    "obj": 12.97367371360193,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response1.txt_stdout.txt",
    "code_path": "problem_iter20_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining normalized fit feasibility with a dynamic sigmoid function to adaptively balance space utilization.\n    \"\"\"\n    # Check if the item fits in each bin\n    can_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Calculate normalized remaining capacity\n    norm_remain_cap = (bins_remain_cap - np.mean(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Adaptive sigmoid function to prioritize bins based on normalized remaining capacity\n    sigmoid_steepness = 10.0  # Adjust steepness for sensitivity\n    sigmoid_priority = 1 / (1 + np.exp(-sigmoid_steepness * norm_remain_cap))\n    \n    # Combine feasibility with sigmoid priority\n    priority_scores = can_fit * sigmoid_priority\n    \n    return priority_scores",
    "response_id": 1,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response2.txt_stdout.txt",
    "code_path": "problem_iter20_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines fit feasibility, adaptive sigmoid penalties, and dynamic midpoint adjustment for balanced prioritization.\n    \"\"\"\n    # Fit feasibility\n    can_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize remaining capacity\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Adaptive midpoint calculation\n    midpoint = item / (np.mean(bins_remain_cap) + 1e-6)\n    \n    # Adaptive sigmoid steepness\n    k = 1.0 + (item / np.max(bins_remain_cap)) * 5\n    \n    # Dynamic sigmoid penalty\n    sigmoid_penalty = 1 / (1 + np.exp(-k * (norm_remain_cap - midpoint)))\n    \n    # Combine feasibility and adaptive penalty\n    priority_score = can_fit * (1 - sigmoid_penalty)\n    \n    return priority_score",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response3.txt_stdout.txt",
    "code_path": "problem_iter20_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using a combination of normalized fit feasibility, sigmoid penalties,\n    and adaptive adjustments for dynamic and precise decision-making.\n    \"\"\"\n    # Check if item fits in the bin\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize remaining capacity dynamically\n    min_cap, max_cap = np.min(bins_remain_cap), np.max(bins_remain_cap)\n    norm_remain_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)\n    \n    # Dynamic midpoint calculation based on current item and remaining capacities\n    midpoint = (np.median(bins_remain_cap) - item) / (max_cap - min_cap + 1e-6)\n    \n    # Sigmoid function to balance priorities with increased steepness\n    sigmoid_steepness = 10.0\n    sigmoid_priority = 1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - midpoint)))\n    \n    # Adaptive penalty adjustment based on the difference between bin capacity and item size\n    penalty_factor = 0.5\n    adaptive_penalty = (bins_remain_cap - item) / (max_cap + 1e-6)\n    penalty_adjustment = 1 / (1 + np.exp(penalty_factor * adaptive_penalty))\n    \n    # Combine feasibility, sigmoid priority, and penalty adjustment\n    priority_score = ifbinsfit * sigmoid_priority * penalty_adjustment\n    \n    return priority_score",
    "response_id": 3,
    "tryHS": false,
    "obj": 121.82887913841245,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response4.txt_stdout.txt",
    "code_path": "problem_iter20_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using adaptive sigmoid penalties, normalized fit feasibility, and nuanced penalty adjustments.\n    \"\"\"\n    # Check if item fits in the bin\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize remaining capacity dynamically\n    min_cap, max_cap = np.min(bins_remain_cap), np.max(bins_remain_cap)\n    norm_remain_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)\n    \n    # Dynamic sigmoid steepness based on item size and remaining capacity\n    sigmoid_steepness = 10.0 * (1 - (item / max_cap))\n    \n    # Calculate sigmoid priority\n    sigmoid_priority = 1 / (1 + np.exp(-sigmoid_steepness * norm_remain_cap))\n    \n    # Adaptive penalty based on remaining capacity after placing the item\n    penalty_factor = 0.5\n    adaptive_penalty = (bins_remain_cap - item) / (max_cap + 1e-6)\n    penalty_adjustment = 1 / (1 + np.exp(penalty_factor * adaptive_penalty))\n    \n    # Combine feasibility, sigmoid priority, and penalty adjustment\n    priority_score = ifbinsfit * sigmoid_priority * penalty_adjustment\n    \n    return priority_score",
    "response_id": 4,
    "tryHS": false,
    "obj": 48.89309932189868,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response5.txt_stdout.txt",
    "code_path": "problem_iter20_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using adaptive sigmoid penalties and normalized fit feasibility.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    midpoint = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))\n    k = 5.0  # Steepness of the sigmoid\n    sigmoid_penalty = 1 / (1 + np.exp(-k * (norm_remain_cap - midpoint)))\n    penalty_factor = 1 / (1 + np.exp(5 * ((bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6))))\n    priority_scores = can_fit * sigmoid_penalty * penalty_factor\n    return priority_scores",
    "response_id": 5,
    "tryHS": false,
    "obj": 7.169924212205833,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response6.txt_stdout.txt",
    "code_path": "problem_iter20_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines adaptive fit feasibility with dynamic sigmoid penalization for precise bin selection.\n    \"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)  # Check if item fits\n    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)  # Calculate leftover space\n    norm_leftover = leftover_space / (np.max(bins_remain_cap) + 1e-6)  # Normalize leftover space\n    k = 1.0  # Steepness of the sigmoid\n    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))  # Dynamic midpoint based on item size\n    adaptive_penalty = np.abs(norm_leftover - x0)  # Adaptive penalty based on normalized leftover space\n    penalty_factor = np.where(norm_leftover < 0, 1e6, 1)  # Strong penalty for over-capacity bins\n    priority_scores = ifbinsfit * (1 / (1 + np.exp(-k * (1 - norm_leftover - x0)))) / (adaptive_penalty * penalty_factor + 1e-6)  # Sigmoid priority calculation\n    return priority_scores",
    "response_id": 6,
    "tryHS": false,
    "obj": 12.714399680893498,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response7.txt_stdout.txt",
    "code_path": "problem_iter20_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines normalized fit feasibility with adaptive sigmoid penalties, integrating dynamic adjustments for fine-tuned decision-making.\n    \"\"\"\n    # Check if item fits into the bin\n    can_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize remaining capacity\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Calculate adaptive midpoint and steepness\n    midpoint = item / (np.mean(bins_remain_cap) + 1e-6)\n    penalty_factor = 14.931397941541181 + 5 * (item / np.max(bins_remain_cap))\n    \n    # Calculate sigmoid penalty\n    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))\n    \n    # Calculate priority score by combining feasibility and penalty\n    priority_score = can_fit * (1 - sigmoid_penalty)\n    \n    return priority_score",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response8.txt_stdout.txt",
    "code_path": "problem_iter20_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using adaptive fit feasibility, dynamic sigmoid penalties, and normalization.\n    \"\"\"\n    # Check if item fits in the bin\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize remaining capacity dynamically\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Dynamic midpoint calculation\n    midpoint = (np.median(bins_remain_cap) - item) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Sigmoid function to balance priorities with dynamic steepness\n    sigmoid_steepness = 10.0\n    sigmoid_priority = 1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - midpoint)))\n    \n    # Adaptive priority adjustment\n    priority_adjustment_factor = (np.max(bins_remain_cap) - bins_remain_cap) / (np.max(bins_remain_cap) - item + 1e-6)\n    adjusted_priority = sigmoid_priority * priority_adjustment_factor\n    \n    # Combine fit feasibility and adjusted priority\n    return ifbinsfit * adjusted_priority",
    "response_id": 8,
    "tryHS": false,
    "obj": 12.963701635420822,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter20_response9.txt_stdout.txt",
    "code_path": "problem_iter20_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining normalized fit feasibility and dynamic sigmoid penalties with tunable parameters.\n    \"\"\"\n    sigmoid_steepness = 8.060154863007442\n    max_cap_offset = 9.629999168879228e-06\n    can_fit = (bins_remain_cap >= item).astype(float)  # Check if item fits in the bin\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + max_cap_offset)\n    x0 = item / (np.max(bins_remain_cap) + max_cap_offset)  # Dynamic midpoint based on item size\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + max_cap_offset)  # Adaptive penalty\n    priority_scores = can_fit * (1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - x0)))) / (penalty + max_cap_offset)\n    return priority_scores",
    "response_id": 9,
    "tryHS": true,
    "obj": 1.266453928998808,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter21_response0.txt_stdout.txt",
    "code_path": "problem_iter21_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, steepness: float = 10.0, influence: float = 0.5, epsilon: float = 1e-6) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by using an adaptive mechanism that combines fit feasibility,\n    a dynamic sigmoid function, and an influence factor to balance the decision-making.\n    \"\"\"\n    # Check if item fits in the bin\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalized remaining capacity ensuring no division by zero\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + epsilon)\n    \n    # Calculate the sigmoid priority\n    sigmoid_priority = 1 / (1 + np.exp(-steepness * (norm_remain_cap - (item / np.max(bins_remain_cap)))))\n    \n    # Influence of the item size on the priority, with adaptive steepness\n    adaptive_influence = sigmoid_priority * (1 - influence * (1 - item / np.max(bins_remain_cap)))\n    \n    # Combine feasibility with adaptive influence\n    priority_score = ifbinsfit * adaptive_influence\n    \n    return priority_score",
    "response_id": 0,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter21_response1.txt_stdout.txt",
    "code_path": "problem_iter21_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, steepness: float = 10.0, influence: float = 0.5, epsilon: float = 1e-6) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by using an adaptive mechanism that combines fit feasibility,\n    a dynamic sigmoid function, and an influence factor to balance the decision-making.\n    \"\"\"\n    # Check if item fits in the bin\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalized remaining capacity ensuring no division by zero\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + epsilon)\n    \n    # Calculate the sigmoid priority\n    sigmoid_priority = 1 / (1 + np.exp(-steepness * (norm_remain_cap - (item / np.max(bins_remain_cap)))))\n    \n    # Influence of the item size on the priority, with adaptive steepness\n    adaptive_influence = sigmoid_priority * (1 - influence * (1 - item / np.max(bins_remain_cap)))\n    \n    # Combine feasibility with adaptive influence\n    priority_score = ifbinsfit * adaptive_influence\n    \n    return priority_score",
    "response_id": 1,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter21_response2.txt_stdout.txt",
    "code_path": "problem_iter21_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, steepness: float = 10.0, influence: float = 0.5, epsilon: float = 1e-6) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by using an adaptive mechanism that combines fit feasibility,\n    a dynamic sigmoid function, and an influence factor to balance the decision-making.\n    \"\"\"\n    # Check if item fits in the bin\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalized remaining capacity ensuring no division by zero\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + epsilon)\n    \n    # Calculate the sigmoid priority\n    sigmoid_priority = 1 / (1 + np.exp(-steepness * (norm_remain_cap - (item / np.max(bins_remain_cap)))))\n    \n    # Influence of the item size on the priority, with adaptive steepness\n    adaptive_influence = sigmoid_priority * (1 - influence * (1 - item / np.max(bins_remain_cap)))\n    \n    # Combine feasibility with adaptive influence\n    priority_score = ifbinsfit * adaptive_influence\n    \n    return priority_score",
    "response_id": 2,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter21_response3.txt_stdout.txt",
    "code_path": "problem_iter21_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, steepness: float = 10.0, influence: float = 0.5, epsilon: float = 1e-6) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by using an adaptive mechanism that combines fit feasibility,\n    a dynamic sigmoid function, and an influence factor to balance the decision-making.\n    \"\"\"\n    # Check if item fits in the bin\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalized remaining capacity ensuring no division by zero\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + epsilon)\n    \n    # Calculate the sigmoid priority\n    sigmoid_priority = 1 / (1 + np.exp(-steepness * (norm_remain_cap - (item / np.max(bins_remain_cap)))))\n    \n    # Influence of the item size on the priority, with adaptive steepness\n    adaptive_influence = sigmoid_priority * (1 - influence * (1 - item / np.max(bins_remain_cap)))\n    \n    # Combine feasibility with adaptive influence\n    priority_score = ifbinsfit * adaptive_influence\n    \n    return priority_score",
    "response_id": 3,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter21_response4.txt_stdout.txt",
    "code_path": "problem_iter21_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, steepness: float = 10.0, influence: float = 0.5, epsilon: float = 1e-6) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by using an adaptive mechanism that combines fit feasibility,\n    a dynamic sigmoid function, and an influence factor to balance the decision-making.\n    \"\"\"\n    # Check if item fits in the bin\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalized remaining capacity ensuring no division by zero\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + epsilon)\n    \n    # Calculate the sigmoid priority\n    sigmoid_priority = 1 / (1 + np.exp(-steepness * (norm_remain_cap - (item / np.max(bins_remain_cap)))))\n    \n    # Influence of the item size on the priority, with adaptive steepness\n    adaptive_influence = sigmoid_priority * (1 - influence * (1 - item / np.max(bins_remain_cap)))\n    \n    # Combine feasibility with adaptive influence\n    priority_score = ifbinsfit * adaptive_influence\n    \n    return priority_score",
    "response_id": 4,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter22_response0.txt_stdout.txt",
    "code_path": "problem_iter22_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float, \n    bins_remain_cap: np.ndarray, \n    sigmoid_steepness: float = 9.78504159548925, \n    max_cap_offset: float = 1.8869258099912255e-06) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining normalized fit feasibility and dynamic sigmoid penalties with tunable parameters.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)  # Check if item fits in the bin\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + max_cap_offset)\n    x0 = item / (np.max(bins_remain_cap) + max_cap_offset)  # Dynamic midpoint based on item size\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + max_cap_offset)  # Adaptive penalty\n    priority_scores = can_fit * (1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - x0)))) / (penalty + max_cap_offset)\n    return priority_scores",
    "response_id": 0,
    "tryHS": true,
    "obj": 2.1739130434782563,
    "SLOC": 11.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]