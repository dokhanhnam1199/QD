[
  {
    "stdout_filepath": "problem_iter2_response0.txt_stdout.txt",
    "code_path": "problem_iter2_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritize bins based on capacity and waste reduction, penalize tight bins slightly.\"\"\"\n    waste_reduction = bins_remain_cap - item\n    priority_score = np.where(waste_reduction >= 0, waste_reduction, -1000)\n    epsilon = 0.01\n    encouragement = (bins_remain_cap / np.max(bins_remain_cap + 1e-6)) * epsilon\n    return priority_score - encouragement",
    "response_id": 0,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response1.txt_stdout.txt",
    "code_path": "problem_iter2_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines capacity and fit efficiency with a penalty for leftover space.\"\"\"\n    # Ensure the item can fit in the bin\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    # Priority based on leftover space after placing the item\n    leftover_space = bins_remain_cap - item\n    # Penalty for leftover space\n    space_penalty = np.where(ifbinsfit, leftover_space, np.inf)\n    # Combine fit check with a penalty for larger leftover space\n    return ifbinsfit / (space_penalty + 1e-6)",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response2.txt_stdout.txt",
    "code_path": "problem_iter2_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines remaining capacity and fit to prioritize bins effectively.\"\"\"\n    # Prioritize bins where the item fits closely but not less\n    close_fit = np.clip(bins_remain_cap - item, 0, 1)\n    # Prioritize bins with larger remaining capacity\n    large_capacity = bins_remain_cap\n    # Adjust priority by considering closeness of fit and remaining capacity\n    priority_score = close_fit * 1.5 + large_capacity\n    return priority_score",
    "response_id": 2,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response3.txt_stdout.txt",
    "code_path": "problem_iter2_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on item fit and minimal leftover space, with dynamic threshold adjustment.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    priority = can_fit * (1 - (space_left / bins_remain_cap))  # Minimize leftover space\n    relative_space_left_factor = bins_remain_cap / np.max(bins_remain_cap, initial=1.0)  # Consider initial bin space\n    return priority * relative_space_left_factor  # Combine factors for adaptive prioritization",
    "response_id": 3,
    "tryHS": false,
    "obj": 6.80095731950539,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response4.txt_stdout.txt",
    "code_path": "problem_iter2_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines capacity and fit efficiency with a penalty for leftover space.\"\"\"\n    # Ensure the item can fit in the bin\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    # Priority based on leftover space after placing the item\n    leftover_space = bins_remain_cap - item\n    # Penalty for leftover space\n    space_penalty = np.where(ifbinsfit, leftover_space, np.inf)\n    # Combine fit check with a penalty for larger leftover space\n    return ifbinsfit / (space_penalty + 1e-6)",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response5.txt_stdout.txt",
    "code_path": "problem_iter2_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines capacity fit and minimized leftover space to prioritize bins for item placement.\"\"\"\n    \n    # Ensure item can fit in the bin\n    can_fit = bins_remain_cap >= item\n    \n    # Calculate remaining space after adding the item\n    space_left = bins_remain_cap - item\n    \n    # Priority based on remaining capacity and minimal leftover space\n    priority = can_fit * (1 - (space_left / bins_remain_cap)) * np.clip(bins_remain_cap - item, 0, 1)\n    \n    return priority",
    "response_id": 5,
    "tryHS": false,
    "obj": 5.195452732349436,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response6.txt_stdout.txt",
    "code_path": "problem_iter2_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines capacity fit and penalizes leftover space to prioritize bins efficiently.\"\"\"\n    # Ensure item can fit in the bin\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    # Priority based on remaining capacity and penalty for leftover space\n    priority = can_fit * (1 - (space_left / bins_remain_cap))\n    return priority",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response7.txt_stdout.txt",
    "code_path": "problem_iter2_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on item fit and minimal leftover space, with dynamic threshold adjustment.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    priority = can_fit * (1 - (space_left / bins_remain_cap))  # Minimize leftover space\n    relative_space_left_factor = bins_remain_cap / np.max(bins_remain_cap, initial=1.0)  # Consider initial bin space\n    return priority * relative_space_left_factor  # Combine factors for adaptive prioritization",
    "response_id": 7,
    "tryHS": false,
    "obj": 6.80095731950539,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response8.txt_stdout.txt",
    "code_path": "problem_iter2_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines capacity and fit efficiency with a penalty for leftover space.\"\"\"\n    # Ensure the item can fit in the bin\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    # Priority based on leftover space after placing the item\n    leftover_space = bins_remain_cap - item\n    # Penalty for leftover space\n    space_penalty = np.where(ifbinsfit, leftover_space, np.inf)\n    # Combine fit check with a penalty for larger leftover space\n    return ifbinsfit / (space_penalty + 1e-6)",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response9.txt_stdout.txt",
    "code_path": "problem_iter2_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritize bins based on capacity and waste reduction, penalize tight bins slightly.\"\"\"\n    waste_reduction = bins_remain_cap - item\n    priority_score = np.where(waste_reduction >= 0, waste_reduction, -1000)\n    epsilon = 0.01\n    encouragement = (bins_remain_cap / np.max(bins_remain_cap + 1e-6)) * epsilon\n    return priority_score - encouragement",
    "response_id": 9,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter3_response0.txt_stdout.txt",
    "code_path": "problem_iter3_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version of the heuristic implements a dynamic penalty system that evaluates the\n    insertion of an item into each bin by considering both the remaining capacity and\n    the potential for future space inefficiency. It uses a sigmoid function to prioritize\n    bins that are closer to being full while also penalizing bins that are too empty.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize the remaining capacities\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    norm_remain_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)\n\n    # Calculate the sigmoid priority based on normalized capacity\n    sigmoid_priority = 1 / (1 + np.exp(-10 * (norm_remain_cap - 0.5)))\n\n    # Calculate a penalty for bins that can't even fit the item\n    can_fit = (bins_remain_cap >= item).astype(float)\n\n    # Combine the sigmoid priority with the penalty\n    priority_score = sigmoid_priority * can_fit\n\n    return priority_score",
    "response_id": 0,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter3_response1.txt_stdout.txt",
    "code_path": "problem_iter3_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version of the heuristic implements a dynamic penalty system that evaluates the\n    insertion of an item into each bin by considering both the remaining capacity and\n    the potential for future space inefficiency. It uses a sigmoid function to prioritize\n    bins that are closer to being full while also penalizing bins that are too empty.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize the remaining capacities\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    norm_remain_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)\n\n    # Calculate the sigmoid priority based on normalized capacity\n    sigmoid_priority = 1 / (1 + np.exp(-10 * (norm_remain_cap - 0.5)))\n\n    # Calculate a penalty for bins that can't even fit the item\n    can_fit = (bins_remain_cap >= item).astype(float)\n\n    # Combine the sigmoid priority with the penalty\n    priority_score = sigmoid_priority * can_fit\n\n    return priority_score",
    "response_id": 1,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter3_response2.txt_stdout.txt",
    "code_path": "problem_iter3_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version of the heuristic implements a dynamic penalty system that evaluates the\n    insertion of an item into each bin by considering both the remaining capacity and\n    the potential for future space inefficiency. It uses a sigmoid function to prioritize\n    bins that are closer to being full while also penalizing bins that are too empty.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize the remaining capacities\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    norm_remain_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)\n\n    # Calculate the sigmoid priority based on normalized capacity\n    sigmoid_priority = 1 / (1 + np.exp(-10 * (norm_remain_cap - 0.5)))\n\n    # Calculate a penalty for bins that can't even fit the item\n    can_fit = (bins_remain_cap >= item).astype(float)\n\n    # Combine the sigmoid priority with the penalty\n    priority_score = sigmoid_priority * can_fit\n\n    return priority_score",
    "response_id": 2,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter3_response3.txt_stdout.txt",
    "code_path": "problem_iter3_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version of the heuristic implements a dynamic penalty system that evaluates the\n    insertion of an item into each bin by considering both the remaining capacity and\n    the potential for future space inefficiency. It uses a sigmoid function to prioritize\n    bins that are closer to being full while also penalizing bins that are too empty.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize the remaining capacities\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    norm_remain_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)\n\n    # Calculate the sigmoid priority based on normalized capacity\n    sigmoid_priority = 1 / (1 + np.exp(-10 * (norm_remain_cap - 0.5)))\n\n    # Calculate a penalty for bins that can't even fit the item\n    can_fit = (bins_remain_cap >= item).astype(float)\n\n    # Combine the sigmoid priority with the penalty\n    priority_score = sigmoid_priority * can_fit\n\n    return priority_score",
    "response_id": 3,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter3_response4.txt_stdout.txt",
    "code_path": "problem_iter3_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This version of the heuristic implements a dynamic penalty system that evaluates the\n    insertion of an item into each bin by considering both the remaining capacity and\n    the potential for future space inefficiency. It uses a sigmoid function to prioritize\n    bins that are closer to being full while also penalizing bins that are too empty.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize the remaining capacities\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    norm_remain_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)\n\n    # Calculate the sigmoid priority based on normalized capacity\n    sigmoid_priority = 1 / (1 + np.exp(-10 * (norm_remain_cap - 0.5)))\n\n    # Calculate a penalty for bins that can't even fit the item\n    can_fit = (bins_remain_cap >= item).astype(float)\n\n    # Combine the sigmoid priority with the penalty\n    priority_score = sigmoid_priority * can_fit\n\n    return priority_score",
    "response_id": 4,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]