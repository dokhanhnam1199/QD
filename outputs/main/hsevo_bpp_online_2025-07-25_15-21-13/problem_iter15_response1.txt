```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins by combining normalized fit feasibility, dynamic sigmoid penalty, 
    and adaptive item fit with dynamic adjustments based on current problem state.
    """
    # Check if item fits in the bin
    ifbinsfit = (bins_remain_cap >= item).astype(float)
    
    # Normalize remaining capacity dynamically
    min_cap, max_cap = np.min(bins_remain_cap), np.max(bins_remain_cap)
    norm_remain_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)
    
    # Calculate normalized item size
    norm_item_size = item / max_cap
    
    # Dynamic sigmoid steepness based on item size and remaining capacity
    sigmoid_steepness = 10 * (1 - norm_item_size)  # More steep as item size decreases
    
    # Calculate sigmoid priority
    sigmoid_priority = 1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - norm_item_size)))
    
    # Calculate adaptive adjustment factor
    adjustment_factor = 0.5 + 0.5 * np.exp(-8 * ((bins_remain_cap - item) / max_cap) ** 2)
    
    # Calculate final priority score
    priority_score = ifbinsfit * sigmoid_priority * adjustment_factor
    
    return priority_score
```
