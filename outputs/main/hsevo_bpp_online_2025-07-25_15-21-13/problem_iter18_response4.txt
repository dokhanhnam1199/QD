```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins using a dynamic and adaptive approach that considers item-specific fits, 
    normalized remaining capacity, and a refined penalty mechanism.
    
    Parameters:
    - item (float): The size of the current item to be packed.
    - bins_remain_cap (np.ndarray): An array containing the remaining capacity of each bin.
    
    Returns:
    - np.ndarray: A priority score for each bin, where higher scores indicate a better fit.
    """
    # Check if the item can fit in each bin
    fit_feasibility = (bins_remain_cap >= item).astype(float)
    
    # Normalize the remaining capacities
    total_remaining_cap = np.sum(bins_remain_cap)
    if total_remaining_cap == 0:
        total_remaining_cap = 1e-9  # Avoid division by zero
    norm_remain_cap = bins_remain_cap / total_remaining_cap
    
    # Calculate the normalized fit of the item to each bin
    item_fit = (bins_remain_cap - item) / total_remaining_cap
    
    # Adaptive penalty function to penalize bins with less remaining capacity after placing the item
    sigma = np.std(bins_remain_cap)
    if sigma == 0:
        sigma = 1e-9  # Avoid division by zero
    adaptive_penalty = np.exp(-(bins_remain_cap - item) ** 2 / (2 * sigma ** 2))
    
    # Calculate the final priority score
    priority_score = fit_feasibility * (norm_remain_cap + item_fit) / (adaptive_penalty + 1e-9)
    
    return priority_score
```
