```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines fit feasibility, dynamic sigmoid midpoint, and adaptive penalty for precise bin selection.
    """
    ifbinsfit = (bins_remain_cap >= item).astype(float)  # Check if item fits
    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)  # Calculate leftover space
    norm_leftover = leftover_space / (np.max(bins_remain_cap) + 1e-6)  # Normalize leftover space
    k = 1.0  # Steepness of the sigmoid
    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))  # Dynamic midpoint based on item size
    adaptive_penalty = np.abs(norm_leftover - x0)  # Adaptive penalty based on normalized leftover space
    penalty_factor = np.where(norm_leftover < 0, 1e6, 1)  # Strong penalty for over-capacity bins
    sigmoid_priority = 1 / (1 + np.exp(-k * (norm_leftover - x0)))  # Sigmoid probability of bin fit
    priority_scores = ifbinsfit * (sigmoid_priority / (adaptive_penalty * penalty_factor + 1e-6))  # Combined priority score
    return priority_scores
```
