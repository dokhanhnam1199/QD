```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins by combining normalized fit feasibility, dynamic sigmoid penalty, 
    and adaptive item fit with dynamic adjustments based on current problem state.
    """
    # Check if item fits in the bin
    ifbinsfit = (bins_remain_cap >= item).astype(float)
    
    # Normalize remaining capacity
    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)
    
    # Dynamic sigmoid steepness adjustment based on the item size relative to max capacity
    sigmoid_steepness = 1 + (item / np.max(bins_remain_cap)) * 10
    
    # Calculate dynamic sigmoid priority
    sigmoid_priority = 1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - 0.5)))
    
    # Adaptive penalty based on the normalized remaining capacity after placing the item
    penalty = np.maximum(0, 1 - ((bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)))
    
    # Dynamic adjustment for priority based on the number of empty bins
    empty_bin_adjustment = 1 + (np.mean(bins_remain_cap == np.max(bins_remain_cap)) ** 2) * 5
    
    # Combine feasibility, sigmoid, penalty, and dynamic adjustments
    priority_scores = ifbinsfit * sigmoid_priority / (penalty + 1e-6) * empty_bin_adjustment
    
    return priority_scores
```
