import numpy as np

def priority_v2(
    item: float, 
    bins_remain_cap: np.ndarray, 
    max_cap_addition: float = 5.6555150700941606e-06, 
    penalty_factor: float = 6.422488482465502) -> np.ndarray:
    """
    Combines normalized fit feasibility with adaptive sigmoid penalties, adjusting for item size and remaining capacity.
    """
    # Fit feasibility
    can_fit = (bins_remain_cap >= item).astype(float)
    
    # Normalize remaining capacity
    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + max_cap_addition)
    
    # Adaptive midpoint calculation
    midpoint = item / (np.mean(bins_remain_cap) + max_cap_addition)
    
    # Dynamic sigmoid penalty
    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))
    
    # Combine feasibility and adaptive penalty
    priority_score = can_fit * (1 - sigmoid_penalty)
    
    return priority_score
