[
  {
    "stdout_filepath": "problem_iter11_response0.txt_stdout.txt",
    "code_path": "problem_iter11_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines normalized remaining capacity and fit feasibility with a sigmoid function\n    that adjusts dynamically based on item size to prioritize bins efficiently.\n    \"\"\"\n    # Fit feasibility\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    # Normalized remaining capacity\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    norm_remain_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)\n    # Adjusted fit score\n    fit_score = np.where(ifbinsfit, bins_remain_cap - item, np.inf)\n    # Normalized fit score\n    normalized_fit_score = fit_score / (np.max(fit_score) + 1e-6)\n    # Sigmoid function with dynamic adjustment based on item size\n    k = 1.0  # Steepness of the sigmoid function, can be tuned\n    x0 = 0.5 - (item / (max_cap + 1e-6))  # Midpoint adjusted by item size\n    priority_scores = norm_remain_cap * 1 / (1 + np.exp(-k * (1 - normalized_fit_score - x0)))\n    return priority_scores",
    "response_id": 0,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response1.txt_stdout.txt",
    "code_path": "problem_iter11_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balances fit feasibility with dynamically adjusted sigmoid penalty for adaptive bin prioritization.\"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)\n    normalized_leftover = leftover_space / (np.max(bins_remain_cap) + 1e-6)\n    k = 1.0  # Steepness of the sigmoid\n    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))  # Dynamic midpoint\n    penalty = 1 / (1 + np.exp(-k * (normalized_leftover - x0)))\n    priority_scores = ifbinsfit * penalty\n    return priority_scores",
    "response_id": 1,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response2.txt_stdout.txt",
    "code_path": "problem_iter11_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using normalized fit feasibility, sigmoid for adaptive fit, and dynamic penalty.\n    \"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)  # Check if item fits\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    sigmoid_priority = 1 / (1 + np.exp(-10 * (norm_remain_cap - 0.5)))  # Sigmoid for fit preference\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)  # Dynamic penalty\n    priority_scores = ifbinsfit * sigmoid_priority / (penalty + 1e-6)  # Combine feasibility, sigmoid, and penalty\n    return priority_scores",
    "response_id": 2,
    "tryHS": false,
    "obj": 8.6358197048265,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response3.txt_stdout.txt",
    "code_path": "problem_iter11_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins using fit feasibility, normalized leftover space, and adaptive sigmoid to balance space efficiency and item fit.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)  # Check if item fits in the bin\n    leftover_space = np.where(can_fit, bins_remain_cap - item, np.inf)  # Calculate leftover space\n    norm_leftover = leftover_space / (np.max(bins_remain_cap) + 1e-6)  # Normalize leftover space\n    k = 1.0  # Steepness of the sigmoid\n    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))  # Dynamic midpoint based on item size\n    priority_scores = can_fit * (1 / (1 + np.exp(-k * (1 - norm_leftover - x0))))  # Combine with sigmoid\n    return priority_scores",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response4.txt_stdout.txt",
    "code_path": "problem_iter11_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balances fit feasibility with dynamically adjusted sigmoid penalty for adaptive bin prioritization.\"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)\n    normalized_leftover = leftover_space / (np.max(bins_remain_cap) + 1e-6)\n    k = 1.0  # Steepness of the sigmoid\n    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))  # Dynamic midpoint\n    penalty = 1 / (1 + np.exp(-k * (normalized_leftover - x0)))\n    return ifbinsfit * penalty",
    "response_id": 4,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response5.txt_stdout.txt",
    "code_path": "problem_iter11_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines normalized fit feasibility with dynamic sigmoid penalization adjusted by item size for balanced priority.\n    \"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)  # Check if item fits\n    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)  # Calculate leftover space\n    norm_leftover = leftover_space / (np.max(bins_remain_cap) + 1e-6)  # Normalize leftover space\n    k = 1.0  # Steepness of the sigmoid\n    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))  # Dynamic midpoint based on item size\n    priority_scores = ifbinsfit * (1 / (1 + np.exp(-k * (1 - norm_leftover - x0))))\n    return priority_scores",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response6.txt_stdout.txt",
    "code_path": "problem_iter11_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines normalized fit feasibility and dynamically adjusted sigmoid penalty for bin prioritization.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    sigmoid_penalty = 1 / (1 + np.exp(-5 * (norm_remain_cap - item / (np.mean(bins_remain_cap) + 1e-6))))\n    priority_score = can_fit * (1 - sigmoid_penalty)\n    return priority_score",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response7.txt_stdout.txt",
    "code_path": "problem_iter11_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines normalized fit feasibility with dynamic sigmoid penalties for adaptive online BPP priority scoring.\"\"\"\n    can_fit = bins_remain_cap >= item\n    leftover_space = np.where(can_fit, bins_remain_cap - item, np.inf)\n    penalty = leftover_space / (np.max(bins_remain_cap) + 1e-6)\n    k = 1.0  # Steepness of sigmoid\n    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))  # Midpoint adjusted by item size\n    priority_scores = can_fit * (1 / (1 + np.exp(-k * (1 - penalty - x0))))\n    return priority_scores",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response8.txt_stdout.txt",
    "code_path": "problem_iter11_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining normalized fit feasibility, dynamic sigmoid penalty, and adaptive item fit.\n    \"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)  # Check if item fits in the bin\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    sigmoid_priority = 1 / (1 + np.exp(-10 * (norm_remain_cap - (item / np.max(bins_remain_cap)))))  # Dynamic midpoint\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)  # Adaptive penalty\n    return ifbinsfit * sigmoid_priority / (penalty + 1e-6)  # Combine feasibility, sigmoid, and penalty",
    "response_id": 8,
    "tryHS": true,
    "obj": 3.4004786597527064,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter11_response9.txt_stdout.txt",
    "code_path": "problem_iter11_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins using dynamic sigmoid penalty adjusted by item fit and normalized leftover space.\"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)\n    normalized_leftover = leftover_space / (np.max(leftover_space) + 1e-6)\n    k = 1.0  # Steepness of the sigmoid\n    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))\n    priority_scores = ifbinsfit * 1 / (1 + np.exp(-k * (1 - normalized_leftover - x0)))\n    return priority_scores",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter12_response0.txt_stdout.txt",
    "code_path": "problem_iter12_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining normalized fit feasibility with an adaptive sigmoid penalty and a dynamic balance factor.\n    \"\"\"\n    # Check if the item can fit in the bin\n    can_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize remaining capacities\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Calculate the midpoint for sigmoid based on current item size and bin capacities\n    sigmoid_midpoint = item / np.max(bins_remain_cap)\n    \n    # Generate the sigmoid priority dynamically based on the normalized remaining capacity and item fit feasibility\n    sigmoid_priority = can_fit * (1 / (1 + np.exp(-10 * (norm_remain_cap - sigmoid_midpoint))))\n    \n    # Calculate a dynamic penalty using the remaining capacity relative to the maximum remaining capacity\n    dynamic_penalty = 1 - (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Combine the sigmoid priority and the dynamic penalty with a balance factor\n    balance_factor = 1.5  # Adaptive balance factor to emphasize space efficiency\n    priority_score = sigmoid_priority * (1 - dynamic_penalty) * balance_factor\n    \n    return priority_score",
    "response_id": 0,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter12_response1.txt_stdout.txt",
    "code_path": "problem_iter12_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining normalized fit feasibility with dynamic adaptive penalties.\n    \"\"\"\n    # Check if item fits in the bin\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize remaining capacity\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Adaptive sigmoid penalty based on item size relative to bin capacity\n    adaptive_midpoint = item / np.max(bins_remain_cap)\n    sigmoid_penalty = 1 / (1 + np.exp(-20 * (norm_remain_cap - adaptive_midpoint)))\n    \n    # Dynamic adjustment factor that considers the spread of remaining capacities\n    spread_factor = 1 / (np.std(bins_remain_cap) + 1e-6)\n    \n    # Combine feasibility, sigmoid penalty, and dynamic adjustment\n    priority_scores = ifbinsfit * sigmoid_penalty * spread_factor\n    \n    return priority_scores",
    "response_id": 1,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter12_response2.txt_stdout.txt",
    "code_path": "problem_iter12_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining normalized fit feasibility with dynamic adaptive penalties.\n    \"\"\"\n    # Check if item fits in the bin\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize remaining capacity\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Adaptive sigmoid-based penalty that adjusts based on the item size relative to the remaining capacity\n    sigmoid_penalty = 1 / (1 + np.exp(-20 * (norm_remain_cap - 2 * (item / np.max(bins_remain_cap)))))\n    \n    # Combine feasibility and adaptive penalty\n    priority_scores = ifbinsfit * sigmoid_penalty\n    \n    return priority_scores",
    "response_id": 2,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter12_response3.txt_stdout.txt",
    "code_path": "problem_iter12_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining normalized fit feasibility with dynamic adaptive sigmoid penalties that adjust based on real-time item-bin interactions.\n    \"\"\"\n    # Normalized remaining capacity\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Fit feasibility\n    fit_feasibility = (bins_remain_cap >= item).astype(float)\n    \n    # Dynamic adaptive sigmoid penalty\n    # Midpoint is adjusted based on the current item size and remaining capacity\n    midpoint = item / (np.max(bins_remain_cap) + 1e-6)\n    sigmoid_penalty = 1 / (1 + np.exp(-10 * (norm_remain_cap - midpoint)))\n    \n    # Adaptive penalty based on the difference between remaining capacity and item size\n    adaptive_penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Combine feasibility and sigmoid penalty while balancing with adaptive penalty\n    priority_score = fit_feasibility * sigmoid_penalty / (adaptive_penalty + 1e-6)\n    \n    return priority_score",
    "response_id": 3,
    "tryHS": false,
    "obj": 3.4004786597527064,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter12_response4.txt_stdout.txt",
    "code_path": "problem_iter12_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining normalized fit feasibility with dynamic adaptive penalties.\n    This version uses a more adaptive and dynamic approach to penalize bins, focusing on real-time\n    item-bin interactions and avoiding fixed parameters or static methods.\n    \"\"\"\n    # Check if item fits in the bin\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize remaining capacities\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Adaptive penalty based on item size compared to remaining capacity\n    adaptive_penalty = np.abs(norm_remain_cap - (item / np.max(bins_remain_cap)))\n    \n    # Dynamic sigmoid function to balance feasibility and space efficiency\n    sigmoid_balance = 1 / (1 + np.exp(-5 * (norm_remain_cap - (item / np.mean(bins_remain_cap)))))\n    \n    # Calculate priority score by combining feasibility and dynamically adjusted penalties\n    priority_scores = ifbinsfit * sigmoid_balance / (adaptive_penalty + 1e-6)\n    \n    return priority_scores",
    "response_id": 4,
    "tryHS": false,
    "obj": 22.72636617471082,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter13_response1.txt_stdout.txt",
    "code_path": "problem_iter13_code1.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float, \n    bins_remain_cap: np.ndarray, \n    sigmoid_steepness: float = 8.060154863007442, \n    max_cap_offset: float = 9.629999168879228e-06) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining normalized fit feasibility, dynamic sigmoid penalty, and adaptive item fit.\n    \"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)  # Check if item fits in the bin\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + max_cap_offset)\n    sigmoid_priority = 1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - (item / np.max(bins_remain_cap)))))  # Dynamic midpoint\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + max_cap_offset)  # Adaptive penalty\n    return ifbinsfit * sigmoid_priority / (penalty + max_cap_offset)  # Combine feasibility, sigmoid, and penalty",
    "response_id": 1,
    "tryHS": true,
    "obj": 1.266453928998808,
    "SLOC": 10.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]