```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins using adaptive sigmoid penalties, normalized fit feasibility, and nuanced penalty adjustments.
    """
    # Check if item fits in the bin
    ifbinsfit = (bins_remain_cap >= item).astype(float)
    
    # Normalize remaining capacity dynamically
    min_cap, max_cap = np.min(bins_remain_cap), np.max(bins_remain_cap)
    norm_remain_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)
    
    # Dynamic sigmoid steepness based on item size and remaining capacity
    sigmoid_steepness = 10.0 * (1 - (item / max_cap))
    
    # Calculate sigmoid priority
    sigmoid_priority = 1 / (1 + np.exp(-sigmoid_steepness * norm_remain_cap))
    
    # Adaptive penalty based on remaining capacity after placing the item
    penalty_factor = 0.5
    adaptive_penalty = (bins_remain_cap - item) / (max_cap + 1e-6)
    penalty_adjustment = 1 / (1 + np.exp(penalty_factor * adaptive_penalty))
    
    # Combine feasibility, sigmoid priority, and penalty adjustment
    priority_score = ifbinsfit * sigmoid_priority * penalty_adjustment
    
    return priority_score
```
