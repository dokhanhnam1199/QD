```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version uses a sigmoid function to dynamically adjust the priority scores based on the item size and remaining bin capacities. The goal is to balance between filling bins well and not over-penalizing bins that are almost full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize remaining capacities
    max_cap = np.max(bins_remain_cap)
    min_cap = np.min(bins_remain_cap)
    normalized_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)
    
    # Sigmoid function with dynamic parameters based on item size
    k = 1.0  # Steepness of the sigmoid function, can be tuned
    x0 = 0.5 - (item / (max_cap + 1e-6))  # Midpoint of the sigmoid function, adjusted by item size
    priority_scores = 1 / (1 + np.exp(-k * (normalized_cap - x0)))
    
    return priority_scores
```
