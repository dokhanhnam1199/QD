```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins by dynamically adjusting parameters based on item and bin characteristics,
    using a unique combination of normalized normalization and adaptive sigmoid functions.
    """
    # Calculate can fit flag
    can_fit = (bins_remain_cap >= item).astype(float)
    
    # Normalize remaining capacities dynamically
    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)
    
    # Calculate adaptive midpoint dynamically
    midpoint = item / (np.max(bins_remain_cap) + 1e-6)
    
    # Define adaptive penalty factor based on item and bin characteristics
    penalty_factor = 5.0 + 2 * (item / (np.mean(bins_remain_cap) + 1e-6))
    
    # Calculate sigmoid penalty dynamically
    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))
    
    # Calculate specific penalty
    specific_penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)
    
    # Return priority score
    return can_fit * sigmoid_penalty / (specific_penalty + 1e-6)
```
