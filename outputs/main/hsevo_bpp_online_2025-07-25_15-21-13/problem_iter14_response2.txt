```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins using normalized fit feasibility and adaptive sigmoid penalties.
    Balances space efficiency dynamically without redundant factors.
    """
    # Check if item fits in the bin
    ifbinsfit = (bins_remain_cap >= item).astype(float)
    
    # Normalize remaining capacities
    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)
    
    # Adaptive sigmoid penalty based on item size relative to bin capacity
    adaptive_midpoint = item / np.mean(bins_remain_cap)
    sigmoid_penalty = 1 / (1 + np.exp(-10 * (norm_remain_cap - adaptive_midpoint)))
    
    # Calculate priority score by combining feasibility and sigmoid penalty
    priority_scores = ifbinsfit * sigmoid_penalty
    
    return priority_scores
```
