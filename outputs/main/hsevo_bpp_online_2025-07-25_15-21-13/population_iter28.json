[
  {
    "stdout_filepath": "problem_iter26_response0.txt_stdout.txt",
    "code_path": "problem_iter26_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining fit feasibility, adaptive midpoint, and sigmoid-penalty for precise bin selection.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)  # Check if item fits\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)  # Normalize remaining capacity\n    midpoint = item / (np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1e-6)  # Adaptive midpoint\n    penalty_factor = 6.0 + 2 * midpoint  # Dynamic penalty factor\n    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))  # Sigmoid penalty\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)  # Penalty based on remaining capacity\n    priority_scores = can_fit * sigmoid_penalty / (penalty + 1e-6)  # Combined priority score\n    return priority_scores",
    "response_id": 0,
    "tryHS": false,
    "obj": 1.9644994016753137,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response1.txt_stdout.txt",
    "code_path": "problem_iter26_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using fit feasibility, adaptive sigmoid penalties, and dynamic normalization.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    midpoint = item / (np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1e-6)\n    penalty_factor = 5.0 + 1.5 * (item / (np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1e-6))\n    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)\n    priority_scores = can_fit * sigmoid_penalty / (penalty + 1e-6)\n    return priority_scores",
    "response_id": 1,
    "tryHS": false,
    "obj": 2.921818907060227,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response2.txt_stdout.txt",
    "code_path": "problem_iter26_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining normalized fit feasibility, adaptive sigmoid penalty, and dynamic midpoint.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    midpoint = item / np.max(bins_remain_cap)\n    penalty_factor = 8.060154863007442 + 3 * (item / np.max(bins_remain_cap))\n    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)\n    return can_fit * sigmoid_penalty / (penalty + 1e-6)",
    "response_id": 2,
    "tryHS": true,
    "obj": 1.0769844435580445,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response3.txt_stdout.txt",
    "code_path": "problem_iter26_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using normalized fit feasibility, adaptive midpoint, and dynamic penalty factors.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    midpoint = item / (np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1e-6)\n    penalty_factor = 5.0 + 2 * (item / (np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1e-6))\n    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)\n    priority_scores = can_fit * sigmoid_penalty / (penalty + 1e-6)\n    return priority_scores",
    "response_id": 3,
    "tryHS": false,
    "obj": 2.6725169525329036,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response4.txt_stdout.txt",
    "code_path": "problem_iter26_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines adaptive sigmoid penalty and dynamic midpoint for precise and flexible bin prioritization.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)  # Check if item fits\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    x0 = item / (np.max(bins_remain_cap) + 1e-6)  # Dynamic midpoint based on item size\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)  # Adaptive penalty\n    sigmoid_steepness = 10.0  # Tuned sigmoid steepness for better fit\n    priority_scores = can_fit * (1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - x0)))) / (penalty + 1e-6)\n    return priority_scores",
    "response_id": 4,
    "tryHS": false,
    "obj": 3.4004786597527064,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response5.txt_stdout.txt",
    "code_path": "problem_iter26_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines adaptive sigmoid penalty and dynamic midpoint for precise and flexible bin prioritization.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)  # Check if item fits\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    x0 = item / (np.max(bins_remain_cap) + 1e-6)  # Dynamic midpoint based on item size\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)  # Adaptive penalty\n    sigmoid_steepness = 10.0  # Tuned sigmoid steepness for better fit\n    priority_scores = can_fit * (1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - x0)))) / (penalty + 1e-6)\n    return priority_scores",
    "response_id": 5,
    "tryHS": false,
    "obj": 3.4004786597527064,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response6.txt_stdout.txt",
    "code_path": "problem_iter26_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining fit feasibility, dynamic midpoint, and adaptive sigmoid penalties.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)  # Check if item fits in the bin\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    midpoint = item / (np.max(bins_remain_cap) + 1e-6)  # Dynamic midpoint based on item size\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)  # Adaptive penalty\n    sigmoid_steepness = 10.0  # Tuned sigmoid steepness\n    sigmoid_priority = 1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - midpoint)))\n    adaptive_influence = sigmoid_priority / (penalty + 1e-6)\n    priority_scores = can_fit * adaptive_influence\n    return priority_scores",
    "response_id": 6,
    "tryHS": false,
    "obj": 3.4004786597527064,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response7.txt_stdout.txt",
    "code_path": "problem_iter26_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining fit feasibility, dynamic midpoint, adaptive sigmoid penalties, and normalized capacity.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)  # Check if item fits in the bin\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    x0 = item / (np.max(bins_remain_cap) + 1e-6)  # Dynamic midpoint based on item size\n    penalty_factor = 10 + 4 * (item / np.max(bins_remain_cap))  # Adaptive penalty factor\n    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - x0)))\n    priority_scores = can_fit * (1 - sigmoid_penalty)  # Combine feasibility and penalty\n    return priority_scores",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response8.txt_stdout.txt",
    "code_path": "problem_iter26_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining normalized fit feasibility, adaptive sigmoid penalties, and dynamic midpoint.\n    \"\"\"\n    # Check if the item can fit in the bin\n    can_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize remaining capacity\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Calculate adaptive midpoint based on item size relative to bin capacity\n    midpoint = item / (np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1e-6)\n    \n    # Calculate dynamic penalty factor based on item size\n    penalty_factor = 6.0 + 2 * (item / (np.max(bins_remain_cap) if np.max(bins_remain_cap) > 0 else 1e-6))\n    \n    # Calculate adaptive sigmoid penalty to adjust priority based on remaining capacity and item size\n    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))\n    \n    # Combine feasibility and sigmoid penalty to calculate priority scores\n    priority_scores = can_fit * sigmoid_penalty\n    \n    return priority_scores",
    "response_id": 8,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter26_response9.txt_stdout.txt",
    "code_path": "problem_iter26_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining normalized fit feasibility, adaptive sigmoid penalties, and dynamic midpoints.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    midpoint = item / np.max(bins_remain_cap)\n    penalty_factor = 8.060154863007442 + 3 * (item / np.max(bins_remain_cap))\n    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)\n    adaptive_penalty = 1 / (1 + np.exp(5 * penalty))\n    return can_fit * sigmoid_penalty * adaptive_penalty",
    "response_id": 9,
    "tryHS": false,
    "obj": 25.787794176306356,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter27_response0.txt_stdout.txt",
    "code_path": "problem_iter27_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by dynamically adjusting parameters based on item and bin characteristics,\n    using a unique combination of normalized normalization and adaptive sigmoid functions.\n    \"\"\"\n    # Calculate can fit flag\n    can_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize remaining capacities dynamically\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Calculate adaptive midpoint dynamically\n    midpoint = item / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Define adaptive penalty factor based on item and bin characteristics\n    penalty_factor = 5.0 + 2 * (item / (np.mean(bins_remain_cap) + 1e-6))\n    \n    # Calculate sigmoid penalty dynamically\n    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))\n    \n    # Calculate specific penalty\n    specific_penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Return priority score\n    return can_fit * sigmoid_penalty / (specific_penalty + 1e-6)",
    "response_id": 0,
    "tryHS": false,
    "obj": 2.7822098125249393,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter27_response1.txt_stdout.txt",
    "code_path": "problem_iter27_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by dynamically adjusting parameters based on item and bin characteristics,\n    using a unique combination of normalized normalization and adaptive sigmoid functions.\n    \"\"\"\n    # Calculate can fit flag\n    can_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize remaining capacities dynamically\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Calculate adaptive midpoint dynamically\n    midpoint = item / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Define adaptive penalty factor based on item and bin characteristics\n    penalty_factor = 5.0 + 2 * (item / (np.mean(bins_remain_cap) + 1e-6))\n    \n    # Calculate sigmoid penalty dynamically\n    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))\n    \n    # Calculate specific penalty\n    specific_penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Return priority score\n    return can_fit * sigmoid_penalty / (specific_penalty + 1e-6)",
    "response_id": 1,
    "tryHS": false,
    "obj": 2.7822098125249393,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter27_response2.txt_stdout.txt",
    "code_path": "problem_iter27_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by dynamically adjusting parameters based on item and bin characteristics,\n    using a combination of normalized fit feasibility, adaptive sigmoid penalty, and specificity.\n    \"\"\"\n    # Determine if the item can fit in each bin\n    can_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Calculate adaptive parameters\n    total_remaining_capacity = np.sum(bins_remain_cap)\n    avg_bin_capacity = np.mean(bins_remain_cap)\n    item_ratio = item / avg_bin_capacity\n    \n    # Normalize remaining capacities dynamically\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Calculate midpoint dynamically based on item size and total remaining capacity\n    midpoint = item / (total_remaining_capacity + 1e-6)\n    \n    # Adaptive penalty factor using item ratio and dynamic midpoint\n    penalty_factor = 5.0 * (1 + item_ratio) + (1 / (midpoint + 1e-6))\n    \n    # Apply adaptive sigmoid penalty considering both the normalized capacity and midpoint\n    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))\n    \n    # Calculate penalty with specificity adjustment\n    specificity_penalty = 1 / (1 + np.exp(-10 * (bins_remain_cap - item) / (avg_bin_capacity + 1e-6)))\n    \n    # Combine feasibility, sigmoid penalty, and specificity penalty\n    priority_score = can_fit * sigmoid_penalty * specificity_penalty\n    \n    return priority_score",
    "response_id": 2,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter27_response3.txt_stdout.txt",
    "code_path": "problem_iter27_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by dynamically adjusting parameters based on item and bin characteristics,\n    using normalized normalization and adaptive sigmoid functions for specificity and flexibility.\n    \"\"\"\n    # Calculate the feasible bins where the item can fit\n    can_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize remaining capacities with dynamic range\n    epsilon = 1e-6\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    dynamic_range = max_cap - min_cap + epsilon\n    norm_remain_cap = (bins_remain_cap - min_cap) / dynamic_range\n    \n    # Calculate adaptive penalty factor based on item size and bin capacity\n    adaptive_penalty_factor = 5 + 5 * (item / max_cap)\n    \n    # Calculate dynamic midpoint for sigmoid based on item size\n    dynamic_midpoint = item / max_cap\n    \n    # Calculate sigmoid penalty to penalize larger remaining capacities when needed\n    sigmoid_penalty = 1 / (1 + np.exp(-adaptive_penalty_factor * (norm_remain_cap - dynamic_midpoint)))\n    \n    # Calculate penalty for bins that potentially over-use capacity\n    penalty = (bins_remain_cap - item) / (max_cap + epsilon)\n    \n    # Combine feasibility, sigmoid penalty, and adaptive penalty for priority score\n    priority_score = can_fit * sigmoid_penalty / (penalty + epsilon)\n    \n    return priority_score",
    "response_id": 3,
    "tryHS": false,
    "obj": 2.0741922616673385,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter27_response4.txt_stdout.txt",
    "code_path": "problem_iter27_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by dynamically adjusting parameters based on item and bin characteristics,\n    using a unique combination of normalized normalization and adaptive sigmoid functions.\n    \"\"\"\n    # Calculate can fit flag\n    can_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize remaining capacities dynamically\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Calculate adaptive midpoint dynamically\n    midpoint = item / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Define adaptive penalty factor based on item and bin characteristics\n    penalty_factor = 5.0 + 2 * (item / (np.mean(bins_remain_cap) + 1e-6))\n    \n    # Calculate sigmoid penalty dynamically\n    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))\n    \n    # Calculate specific penalty\n    specific_penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)\n    \n    # Return priority score\n    return can_fit * sigmoid_penalty / (specific_penalty + 1e-6)",
    "response_id": 4,
    "tryHS": false,
    "obj": 2.7822098125249393,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter28_hs4.txt_stdout.txt",
    "code_path": "problem_iter28_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float, \n    bins_remain_cap: np.ndarray, \n    min_max_eps: float = 6.433931389191403e-06,\n    penalty_factor_const: float = 7.810945176453208,\n    penalty_factor_multiplier: float = 3.210777306872405) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining normalized fit feasibility, adaptive sigmoid penalty, and dynamic midpoint.\n    \"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + min_max_eps)\n    midpoint = item / np.max(bins_remain_cap)\n    penalty_factor = penalty_factor_const + penalty_factor_multiplier * (item / np.max(bins_remain_cap))\n    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - midpoint)))\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + min_max_eps)\n    return can_fit * sigmoid_penalty / (penalty + min_max_eps)",
    "response_id": 0,
    "tryHS": true,
    "obj": 1.126844834463509,
    "SLOC": 13.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]