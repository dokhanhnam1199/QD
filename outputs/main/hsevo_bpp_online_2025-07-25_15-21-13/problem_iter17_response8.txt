```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines normalized fit feasibility, adaptive sigmoid penalty, and dynamic adjustments.
    """
    # Check if item fits in the bin
    can_fit = (bins_remain_cap >= item).astype(float)
    
    # Normalize remaining capacity
    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)
    
    # Dynamic sigmoid steepness and midpoint based on item size
    item_fit_ratio = item / (np.mean(bins_remain_cap) + 1e-6)
    sigmoid_steepness = 10 * (1 - item_fit_ratio)
    sigmoid_midpoint = item / (np.max(bins_remain_cap) + 1e-6)
    
    # Sigmoid penalty with dynamic midpoint and steepness
    sigmoid_penalty = 1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - sigmoid_midpoint)))
    
    # Additional penalty for nearly full bins
    priority_adjustment = np.exp(-np.abs(norm_remain_cap - 1) * 10)
    
    # Combine feasibility, sigmoid penalty, and prioritization adjustments
    priority_score = can_fit * (1 - sigmoid_penalty) * priority_adjustment
    
    return priority_score
```
