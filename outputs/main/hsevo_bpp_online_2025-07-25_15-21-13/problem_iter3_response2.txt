```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version of the heuristic implements a dynamic penalty system that evaluates the
    insertion of an item into each bin by considering both the remaining capacity and
    the potential for future space inefficiency. It uses a sigmoid function to prioritize
    bins that are closer to being full while also penalizing bins that are too empty.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize the remaining capacities
    max_cap = np.max(bins_remain_cap)
    min_cap = np.min(bins_remain_cap)
    norm_remain_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)

    # Calculate the sigmoid priority based on normalized capacity
    sigmoid_priority = 1 / (1 + np.exp(-10 * (norm_remain_cap - 0.5)))

    # Calculate a penalty for bins that can't even fit the item
    can_fit = (bins_remain_cap >= item).astype(float)

    # Combine the sigmoid priority with the penalty
    priority_score = sigmoid_priority * can_fit

    return priority_score
```
