[
  {
    "stdout_filepath": "problem_iter5_response0.txt_stdout.txt",
    "code_path": "problem_iter5_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins using a combination of normalized remaining capacity and sigmoid function.\n\n    This heuristic normalizes the remaining capacities and applies a sigmoid function to focus on bins\n    that are almost full, while penalizing bins that cannot fit the item.\n    \"\"\"\n    # Normalize the remaining capacities\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    norm_remain_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)\n\n    # Calculate the sigmoid priority based on normalized capacity\n    sigmoid_priority = 1 / (1 + np.exp(-10 * (norm_remain_cap - 0.5)))\n\n    # Calculate a penalty for bins that can't even fit the item\n    can_fit = (bins_remain_cap >= item).astype(float)\n\n    # Combine the sigmoid priority with the penalty\n    priority_score = sigmoid_priority * can_fit\n\n    return priority_score",
    "response_id": 0,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response1.txt_stdout.txt",
    "code_path": "problem_iter5_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combine fit feasibility with normalized penalty for leftover space.\"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)\n    normalized_penalty = leftover_space / (np.max(leftover_space) + 1e-6)\n    return ifbinsfit / (normalized_penalty + 1e-6)",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response2.txt_stdout.txt",
    "code_path": "problem_iter5_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by normalized fit feasibility and adaptive penalty on leftover space.\"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)  # Check if item fits in the bin\n    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)  # Calculate leftover space\n    # Use an adaptive penalty based on leftover space, with normalization\n    penalty = leftover_space / (np.max(bins_remain_cap) + 1e-6)\n    # Combine fit feasibility with adaptive penalty\n    return ifbinsfit / (penalty + 1e-6)",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response3.txt_stdout.txt",
    "code_path": "problem_iter5_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins based on normalized remaining capacity and dynamic penalization using sigmoid.\n    \"\"\"\n    # Normalize remaining capacities\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Sigmoid function to prioritize bins that are closer to being full\n    sigmoid_priority = 1 / (1 + np.exp(-10 * (norm_remain_cap - 0.5)))\n    \n    # Penalty for bins that cannot fit the item\n    can_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Combine sigmoid priority with fit feasibility\n    priority_score = sigmoid_priority * can_fit\n    \n    return priority_score",
    "response_id": 3,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response4.txt_stdout.txt",
    "code_path": "problem_iter5_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins using normalization, sigmoid function, and fit feasibility.\"\"\"\n    max_cap = np.max(bins_remain_cap, initial=1.0)\n    norm_remain_cap = bins_remain_cap / max_cap\n    can_fit = (bins_remain_cap >= item).astype(float)\n    sigmoid_priority = 1 / (1 + np.exp(-10 * (norm_remain_cap - 0.5)))\n    priority_score = sigmoid_priority * can_fit * (1 - (bins_remain_cap - item) / max_cap)\n    return priority_score",
    "response_id": 4,
    "tryHS": false,
    "obj": 28.051455923414437,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response5.txt_stdout.txt",
    "code_path": "problem_iter5_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combine fit feasibility with normalized penalty for leftover space.\"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)\n    normalized_penalty = leftover_space / (np.max(leftover_space) + 1e-6)\n    return ifbinsfit / (normalized_penalty + 1e-6)",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response6.txt_stdout.txt",
    "code_path": "problem_iter5_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins using a combination of normalized remaining capacity and sigmoid function.\n\n    This heuristic normalizes the remaining capacities and applies a sigmoid function to focus on bins\n    that are almost full, while penalizing bins that cannot fit the item.\n    \"\"\"\n    # Normalize the remaining capacities\n    max_cap = np.max(bins_remain_cap)\n    min_cap = np.min(bins_remain_cap)\n    norm_remain_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)\n\n    # Calculate the sigmoid priority based on normalized capacity\n    sigmoid_priority = 1 / (1 + np.exp(-10 * (norm_remain_cap - 0.5)))\n\n    # Calculate a penalty for bins that can't even fit the item\n    can_fit = (bins_remain_cap >= item).astype(float)\n\n    # Combine the sigmoid priority with the penalty\n    priority_score = sigmoid_priority * can_fit\n\n    return priority_score",
    "response_id": 6,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response7.txt_stdout.txt",
    "code_path": "problem_iter5_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins based on item fit and minimal leftover space with adaptive normalization and dynamic penalization.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    space_weight = 0.9844426157387918  # Weight to balance item fit and space minimization\n    priority = can_fit * (space_weight - (space_left / bins_remain_cap))  # Minimize leftover space\n    relative_space_left_factor = bins_remain_cap / np.max(bins_remain_cap, initial=1.7107396879831833)  # Normalize remaining space\n    return priority * relative_space_left_factor  # Combine factors for adaptive prioritization",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response8.txt_stdout.txt",
    "code_path": "problem_iter5_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins by balancing fit feasibility and normalized leftover space using adaptive penalization.\"\"\"\n    # Ensure the item can fit in the bin\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    # Calculate remaining space after placing the item\n    leftover_space = bins_remain_cap - item\n    # Adaptive penalty for leftover space\n    space_penalty = np.where(ifbinsfit, leftover_space, np.inf)\n    # Normalize and penalize based on remaining capacity\n    priority = ifbinsfit / (space_penalty + 1e-6)\n    return priority",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response9.txt_stdout.txt",
    "code_path": "problem_iter5_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines normalized remaining capacity and sigmoid function to prioritize bins effectively.\"\"\"\n    \n    # Ensure item can fit in the bin\n    can_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Normalize the remaining capacities\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Calculate the sigmoid priority based on normalized capacity\n    sigmoid_priority = 1 / (1 + np.exp(-10 * (norm_remain_cap - 0.5)))\n    \n    # Combine the sigmoid priority with the fit feasibility\n    priority_score = sigmoid_priority * can_fit\n    \n    return priority_score",
    "response_id": 9,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 6.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]