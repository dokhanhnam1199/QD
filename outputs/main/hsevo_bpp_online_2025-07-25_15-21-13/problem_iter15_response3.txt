```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins by combining normalized fit feasibility, dynamic sigmoid penalty, 
    and adaptive item fit with dynamic adjustments based on current problem state.
    """
    # Check if item fits in the bin
    ifbinsfit = (bins_remain_cap >= item).astype(float)
    
    # Normalize remaining capacity dynamically
    min_cap, max_cap = np.min(bins_remain_cap), np.max(bins_remain_cap)
    norm_remain_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)
    
    # Calculate normalized item size relative to max bin capacity
    norm_item_size = item / (max_cap + 1e-6)
    
    # Dynamic sigmoid function to prioritize bins with more remaining capacity
    sigmoid_steepness = 5.0  # Adjusted steepness for better control
    sigmoid_priority = 1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - norm_item_size)))
    
    # Adaptive penalty adjustment based on the difference between bin capacity and item size
    penalty_factor = 0.5
    adaptive_penalty = (bins_remain_cap - item) / (max_cap + 1e-6)
    penalty_adjustment = 1 / (1 + np.exp(penalty_factor * adaptive_penalty))
    
    # Combine feasibility, sigmoid priority, and penalty adjustment
    priority_score = ifbinsfit * sigmoid_priority * penalty_adjustment
    
    return priority_score
```
