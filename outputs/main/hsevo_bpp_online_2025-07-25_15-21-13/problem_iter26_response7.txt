```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins by combining fit feasibility, dynamic midpoint, adaptive sigmoid penalties, and normalized capacity.
    """
    can_fit = (bins_remain_cap >= item).astype(float)  # Check if item fits in the bin
    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)
    x0 = item / (np.max(bins_remain_cap) + 1e-6)  # Dynamic midpoint based on item size
    penalty_factor = 10 + 4 * (item / np.max(bins_remain_cap))  # Adaptive penalty factor
    sigmoid_penalty = 1 / (1 + np.exp(-penalty_factor * (norm_remain_cap - x0)))
    priority_scores = can_fit * (1 - sigmoid_penalty)  # Combine feasibility and penalty
    return priority_scores
```
