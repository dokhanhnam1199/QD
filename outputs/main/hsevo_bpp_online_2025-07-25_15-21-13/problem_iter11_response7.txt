```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines normalized fit feasibility with dynamic sigmoid penalties for adaptive online BPP priority scoring."""
    can_fit = bins_remain_cap >= item
    leftover_space = np.where(can_fit, bins_remain_cap - item, np.inf)
    penalty = leftover_space / (np.max(bins_remain_cap) + 1e-6)
    k = 1.0  # Steepness of sigmoid
    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))  # Midpoint adjusted by item size
    priority_scores = can_fit * (1 / (1 + np.exp(-k * (1 - penalty - x0))))
    return priority_scores
```
