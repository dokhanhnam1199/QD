```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins by combining normalized fit feasibility with a dynamic sigmoid penalty based on item fit and remaining space.
    """
    # Check if the item fits in the bin
    ifbinsfit = (bins_remain_cap >= item).astype(float)
    
    # Calculate leftover space and normalize it
    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)
    normalized_leftover = leftover_space / (np.max(leftover_space) + 1e-6)
    
    # Dynamic sigmoid penalty based on normalized leftover space
    k = 1.0  # Steepness of the sigmoid
    sigmoid_penalty = 1 / (1 + np.exp(-k * normalized_leftover))
    
    # Combine feasibility and sigmoid penalty
    priority_scores = ifbinsfit * sigmoid_penalty
    
    return priority_scores
```
