```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This heuristic dynamically adjusts the priority score based on the item size
    relative to the remaining capacity of each bin. It aims to balance filling bins
    efficiently without overly penalizing bins with very little remaining capacity.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate the normalized remaining capacity
    max_cap = np.max(bins_remain_cap)
    min_cap = np.min(bins_remain_cap)
    norm_remain_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)
    
    # Calculate the fit score: how well the item fits in the bin
    # Smaller values are better as they indicate a better fit
    fit_score = np.abs(bins_remain_cap - item)
    
    # Use a combination of the normalized remaining capacity and fit score
    # Higher priority for bins where the item fits well and the bin is relatively full
    priority_score = norm_remain_cap / (fit_score + 1e-6)
    
    return priority_score
```
