```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines normalized remaining capacity and fit feasibility with a sigmoid function
    that adjusts dynamically based on item size to prioritize bins efficiently.
    """
    # Fit feasibility
    ifbinsfit = (bins_remain_cap >= item).astype(float)
    # Normalized remaining capacity
    max_cap = np.max(bins_remain_cap)
    min_cap = np.min(bins_remain_cap)
    norm_remain_cap = (bins_remain_cap - min_cap) / (max_cap - min_cap + 1e-6)
    # Adjusted fit score
    fit_score = np.where(ifbinsfit, bins_remain_cap - item, np.inf)
    # Normalized fit score
    normalized_fit_score = fit_score / (np.max(fit_score) + 1e-6)
    # Sigmoid function with dynamic adjustment based on item size
    k = 1.0  # Steepness of the sigmoid function, can be tuned
    x0 = 0.5 - (item / (max_cap + 1e-6))  # Midpoint adjusted by item size
    priority_scores = norm_remain_cap * 1 / (1 + np.exp(-k * (1 - normalized_fit_score - x0)))
    return priority_scores
```
