[
  {
    "stdout_filepath": "problem_iter8_response0.txt_stdout.txt",
    "code_path": "problem_iter8_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit feasibility with sigmoid-based dynamic penalty for adaptive bin prioritization.\"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    normalized_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    k = 2.0  # Steepness of the sigmoid\n    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))\n    penalty = 1 / (1 + np.exp(-k * (normalized_cap - x0)))\n    return ifbinsfit * penalty",
    "response_id": 0,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response1.txt_stdout.txt",
    "code_path": "problem_iter8_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit feasibility with sigmoid-based dynamic penalty for adaptive bin prioritization.\"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    normalized_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    k = 2.0  # Steepness of the sigmoid\n    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))\n    penalty = 1 / (1 + np.exp(-k * (normalized_cap - x0)))\n    return ifbinsfit * penalty",
    "response_id": 1,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response2.txt_stdout.txt",
    "code_path": "problem_iter8_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritizes bins using adaptive sigmoid function and fit feasibility checks.\"\"\"\n    \n    can_fit = (bins_remain_cap >= item).astype(float)\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    sigmoid_priority = 1 / (1 + np.exp(-10 * (norm_remain_cap - 0.5)))\n    \n    return sigmoid_priority * can_fit",
    "response_id": 2,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response3.txt_stdout.txt",
    "code_path": "problem_iter8_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit feasibility with sigmoid-based dynamic penalty for adaptive bin prioritization.\"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    normalized_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    k = 2.0  # Steepness of the sigmoid\n    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))\n    penalty = 1 / (1 + np.exp(-k * (normalized_cap - x0)))\n    return ifbinsfit * penalty",
    "response_id": 3,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response4.txt_stdout.txt",
    "code_path": "problem_iter8_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit feasibility with normalized penalties and adaptive sigmoid to prioritize bins.\"\"\"\n    # Fit feasibility\n    ifbinsfit = (bins_remain_cap >= item).astype(float)\n    # Leftover space\n    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)\n    # Normalized leftover space\n    normalized_leftover = leftover_space / (np.max(leftover_space) + 1e-6)\n    # Sigmoid function with dynamic adjustment based on item size\n    k = 1.0  # Steepness of the sigmoid function, can be tuned\n    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))  # Midpoint adjusted by item size\n    priority_scores = ifbinsfit * 1 / (1 + np.exp(-k * (1 - normalized_leftover - x0)))\n    return priority_scores",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response5.txt_stdout.txt",
    "code_path": "problem_iter8_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines normalized fit feasibility and sigmoid-based adaptive penalty for better bin prioritization.\"\"\"\n    can_fit = (bins_remain_cap >= item).astype(float)\n    norm_remain_cap = bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)\n    sigmoid_penalty = 1 / (1 + np.exp(-10 * (norm_remain_cap - item / (np.mean(bins_remain_cap) + 1e-6))))\n    priority_score = can_fit * (1 - sigmoid_penalty)\n    return priority_score",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response6.txt_stdout.txt",
    "code_path": "problem_iter8_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins using normalized fit feasibility and adaptive penalty with sigmoid.\n    \"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)  # Check if item fits in the bin\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    sigmoid_priority = 1 / (1 + np.exp(-10 * (norm_remain_cap - 0.5)))  # Prioritize bins closer to being full\n    penalty = (bins_remain_cap - item) / (np.max(bins_remain_cap) + 1e-6)  # Adaptive penalty based on leftover space\n    return ifbinsfit * sigmoid_priority / (penalty + 1e-6)  # Combine feasibility, sigmoid, and adaptive penalty",
    "response_id": 6,
    "tryHS": false,
    "obj": 8.6358197048265,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response7.txt_stdout.txt",
    "code_path": "problem_iter8_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Dynamic priority function combining normalized fit, adaptive penalties, and sigmoid for online BPP.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    normalized_cap = bins_remain_cap / np.max(bins_remain_cap, initial=1.0)\n    k = 1.0  # Steepness of the sigmoid function\n    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))\n    sigmoid_factor = 1 / (1 + np.exp(-k * (normalized_cap - x0)))\n    priority = can_fit * (normalized_cap - (space_left / bins_remain_cap)) * sigmoid_factor\n    return priority",
    "response_id": 7,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response8.txt_stdout.txt",
    "code_path": "problem_iter8_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins based on normalized remaining capacity and adaptive sigmoid penalization for item fit.\n    \"\"\"\n    # Normalize remaining capacities\n    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-6)\n    \n    # Sigmoid function to prioritize bins that are closer to being full\n    sigmoid_priority = 1 / (1 + np.exp(-10 * (norm_remain_cap - 0.5)))\n    \n    # Penalty for bins that cannot fit the item\n    can_fit = (bins_remain_cap >= item).astype(float)\n    \n    # Combine sigmoid priority with fit feasibility, emphasizing item fit\n    priority_score = sigmoid_priority * can_fit * (1 + np.exp(-np.abs(bins_remain_cap - item)))\n    \n    return priority_score",
    "response_id": 8,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter8_response9.txt_stdout.txt",
    "code_path": "problem_iter8_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines normalized fit feasibility, dynamic penalties, and sigmoid to balance bin packing priorities.\"\"\"\n    ifbinsfit = (bins_remain_cap >= item).astype(float)  # Check if item fits in the bin\n    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)  # Calculate leftover space\n    # Adaptive penalty based on leftover space, with normalization\n    penalty = leftover_space / (np.max(bins_remain_cap) + 1e-6)\n    # Sigmoid function with dynamic parameters based on item size and remaining capacity\n    k = 1.0  # Steepness of the sigmoid\n    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))  # Midpoint adjusted by item size\n    priority_scores = ifbinsfit * (1 / (1 + np.exp(-k * (1 - penalty - x0))))\n    return priority_scores",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 8.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]