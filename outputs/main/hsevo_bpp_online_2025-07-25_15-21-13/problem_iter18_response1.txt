```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritizes bins by combining normalized fit feasibility, adaptive item fit, 
    and dynamic adjustment based on current bin utilization and item size.
    """
    # Check if the item fits in each bin
    ifbinsfit = (bins_remain_cap >= item).astype(float)
    
    # Normalize remaining capacity with dynamic offset
    cap_range = np.max(bins_remain_cap) - np.min(bins_remain_cap)
    norm_remain_cap = (bins_remain_cap - np.min(bins_remain_cap)) / (cap_range + 1e-6)
    
    # Dynamic sigmoid function to prioritize bins based on remaining capacity and item size
    sigmoid_steepness = 10.0  # Adjust steepness as needed
    midpoint = item / np.max(bins_remain_cap)
    sigmoid_priority = 1 / (1 + np.exp(-sigmoid_steepness * (norm_remain_cap - midpoint)))
    
    # Adaptive fit based on item size relative to bin capacity
    item_size_factor = item / np.mean(bins_remain_cap)
    adaptive_fit = np.exp(-item_size_factor * (1 - ifbinsfit))
    
    # Dynamic adjustment factor based on current bin utilization
    utilization_factor = bins_remain_cap / np.max(bins_remain_cap)
    dynamic_adjustment = np.power(utilization_factor, sigmoid_steepness * item_size_factor)
    
    # Combine feasibility, sigmoid priority, adaptive fit, and dynamic adjustment
    priority_scores = ifbinsfit * sigmoid_priority * adaptive_fit * dynamic_adjustment
    
    return priority_scores
```
