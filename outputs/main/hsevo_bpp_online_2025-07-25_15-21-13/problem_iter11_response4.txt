```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Balances fit feasibility with dynamically adjusted sigmoid penalty for adaptive bin prioritization."""
    ifbinsfit = (bins_remain_cap >= item).astype(float)
    leftover_space = np.where(ifbinsfit, bins_remain_cap - item, np.inf)
    normalized_leftover = leftover_space / (np.max(bins_remain_cap) + 1e-6)
    k = 1.0  # Steepness of the sigmoid
    x0 = 0.5 - (item / (np.max(bins_remain_cap) + 1e-6))  # Dynamic midpoint
    penalty = 1 / (1 + np.exp(-k * (normalized_leftover - x0)))
    return ifbinsfit * penalty
```
