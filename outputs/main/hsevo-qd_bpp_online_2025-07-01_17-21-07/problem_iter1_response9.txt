```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing inspired heuristic.
    # Prioritize bins that can fit the item snugly (small waste).

    # Option 1: High priority to bins with smallest waste, if item fits. Otherwise zero.
    waste = bins_remain_cap - item
    for i in range(len(bins_remain_cap)):
        if waste[i] >= 0:
            priorities[i] = 1 / (waste[i] + 1e-9)  # Avoid division by zero

    # Option 2: Add a large constant if the item fits. Small waste gets a larger priority.
    #  priorities = np.where(waste >= 0, 1000 / (waste + 1e-9), 0)

    # Option 3: Consider also how full a bin is as a percentage before adding the item.
    #   bin_fullness_before = (bins_remain_cap - item) / bins_remain_cap
    #   priorities = np.where(bins_remain_cap >= item, (1 / (waste + 1e-9)) + bin_fullness_before, -np.inf) #prioritize fullest bins


    return priorities
```
