```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version considers the following:
    1. Bins that cannot fit the item get a very low priority.
    2. Bins that fit the item perfectly get the highest priority.
    3. Otherwise, prioritize bins with less remaining capacity (higher utilization).
    4. A small random component is added to break ties.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Bins that cannot fit the item get a very low priority.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf

    # Bins that fit the item perfectly get the highest priority.
    perfect_fit_bins = bins_remain_cap == item
    priorities[perfect_fit_bins] = np.inf

    # Otherwise, prioritize bins with less remaining capacity (higher utilization).
    feasible_bins = ~infeasible_bins & ~perfect_fit_bins
    priorities[feasible_bins] = (1 / bins_remain_cap[feasible_bins])

    # Add a small random component to break ties.
    priorities += np.random.rand(len(bins_remain_cap)) * 1e-6

    return priorities
```
