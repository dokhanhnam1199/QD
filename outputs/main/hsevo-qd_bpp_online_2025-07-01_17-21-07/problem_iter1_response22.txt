```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Based on Newton's law of cooling and gravitational attraction.
    Higher priority encourages placing items in bins that are slightly larger.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero
    bins_remain_cap = np.where(bins_remain_cap <= 0, 1e-9, bins_remain_cap)

    # Gravity-inspired component (attraction to bins with larger capacity)
    gravitational_attraction = bins_remain_cap / (item + 1e-9) #Avoid division by zero

    # Cooling-inspired component (penalizes small remaining capacity relative to item size)
    temperature_difference = bins_remain_cap - item
    cooling_effect = np.exp(-np.abs(temperature_difference) / (item + 1e-9)) #Avoid division by zero

    # Combined priority
    priorities = gravitational_attraction * cooling_effect

    return priorities
```
