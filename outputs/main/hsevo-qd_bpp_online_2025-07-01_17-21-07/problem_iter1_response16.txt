```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Avoid division by zero and bins that cannot fit the item
    valid_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)  # Initialize with zeros
    
    if np.any(valid_bins):
        remaining_space = bins_remain_cap[valid_bins] - item
        
        # Prioritize bins that can fit the item with minimal wasted space. Use a decay function to diminish reward of bins with significantly greater room than needed.
        priorities[valid_bins] = np.exp(-10 * remaining_space / item)
        
        # Apply a sigmoid function to boost bins near the 'perfect fit', i.e. 'item / bins_remain_cap' is nearly 1.

        ratios = item / bins_remain_cap[valid_bins]
        priorities[valid_bins] += 1.0 / (1 + np.exp(-20 * (ratios - 0.95))) #boost ratios near 0.95

        # Small incentive for nearly full bins - try to fill them up, but do not allow large waste of spaces in other bins.
        priorities[valid_bins] += 0.1 * (bins_remain_cap[valid_bins]/bins_remain_cap.max())

    # For bins where item does not fit, keep their priority at 0 (already initialized).
    return priorities
```
