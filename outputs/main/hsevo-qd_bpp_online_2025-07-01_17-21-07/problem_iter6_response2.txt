```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function aims to improve upon v1 by dynamically adjusting
    its behavior based on the item size and available bin capacities.  It focuses
    on reducing fragmentation and balancing bin utilization.  It incorporates a
    dynamic penalty for bins that are either too empty or would become nearly full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    epsilon = 0.01  # Small constant to avoid division by zero

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            remaining_space = remaining_capacity - item

            # Fit score: higher is better (smaller remaining space is preferred)
            fit_score = 1.0 / (remaining_space + epsilon)

            # Dynamic penalty based on item size and remaining capacity:
            # - Avoid bins that become too empty after adding the item
            # - Avoid bins that become nearly full after adding the item
            # The penalty is scaled by the item size, so smaller items have less penalty
            # against placement.

            # Relative emptiness: how much space is left compared to original capacity
            relative_emptiness = remaining_space / (1 + epsilon)

            # Relative fullness: how full the bin will be if we place item.
            relative_fullness = item / (remaining_capacity + epsilon)

            emptiness_penalty = np.clip(relative_emptiness - 0.75, 0, 1) * item
            fullness_penalty  = np.clip(relative_fullness  - 0.95, 0, 1) * item

            priorities[i] = fit_score - emptiness_penalty - fullness_penalty


        else:
            priorities[i] = -np.inf

    return priorities
```
