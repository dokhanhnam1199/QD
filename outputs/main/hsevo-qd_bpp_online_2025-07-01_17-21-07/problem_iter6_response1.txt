```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers the remaining capacity of the bin
    and how well the item fits relative to that capacity. It also introduces
    a dynamic element based on the item size to better balance bin usage.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Item size normalization factor.  Scales the impact of fit and remaining space.
    item_scale = min(1.0, item)  # Cap at 1 to prevent excessive scaling for large items.

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            remaining_space = remaining_capacity - item

            # Fit score, prioritizing bins with smaller remaining space.
            fit_score = 1.0 / (remaining_space + 0.01)

            # Remaining capacity score.  Slight preference for bins that aren't too full.
            capacity_score = remaining_capacity

            # Combined priority, scaled by item size. This emphasizes efficient packing for larger items.
            priorities[i] = item_scale * (fit_score + 0.1 * capacity_score)
        else:
            priorities[i] = -np.inf

    return priorities
```
