```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers remaining capacity, fit, and a waste
    minimization strategy. It aims for balanced bin utilization to avoid
    fragmentation.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            remaining_space = remaining_capacity - item

            # Fit Score (as before, but potentially tweaked)
            fit_score = 1.0 / (remaining_space + 0.01)

            # Waste Profile Penalty: Discourage bins with either very little or too much space left.
            # Penalize based on distance from a target remaining space (e.g., half-full)
            target_remaining = 0.3  # Adjusted from .5 to .3 to potentially allow smaller items to fill it. Experiment with other values.
            waste_penalty = np.abs(remaining_space - remaining_capacity * target_remaining)

            # Capacity utilization score: Higher the utilization, the better
            capacity_utilization = item / remaining_capacity

            # Combine the scores, adjusting weights as needed. Experiment
            priorities[i] = fit_score - 0.5 * waste_penalty + 0.2 * capacity_utilization

        else:
            priorities[i] = -np.inf

    return priorities
```
