```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit and normalization for stable priority scores."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fit_score_epsilon = 0.01
    size_ratio_center = 0.5
    size_ratio_weight = 1.0

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            remaining_space = remaining_capacity - item
            fit_score = 1.0 / (remaining_space + fit_score_epsilon)
            size_ratio_penalty = size_ratio_weight * np.abs(item/remaining_capacity - size_ratio_center)
            priorities[i] = fit_score - size_ratio_penalty
        else:
            priorities[i] = -np.inf

    # Normalize priorities to [0, 1]
    if np.any(priorities != -np.inf):
        valid_priorities = priorities[priorities != -np.inf]
        min_priority = np.min(valid_priorities)
        max_priority = np.max(valid_priorities)
        if max_priority > min_priority:
            priorities[priorities != -np.inf] = (priorities[priorities != -np.inf] - min_priority) / (max_priority - min_priority)
        else:
            # All valid priorities are the same, so set them to 1 to avoid division by zero issues
            priorities[priorities != -np.inf] = 1.0


    return priorities
```
