```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers several factors:
    1.  Remaining capacity: Bins with capacity closer to the item size
        are preferred (to minimize wasted space, Golden Ratio optimization inspired).
    2.  Bin utilization: Bins that are already relatively full are prioritized.
    3.  Avoidance of near-full bins when possible (a subtle balance).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    epsilon = 1e-9  # Small constant to avoid division by zero and log(0)

    # 1. Capacity matching (Golden Ratio inspired, minimize wasted space)
    capacity_diff = np.abs(bins_remain_cap - item)
    capacity_priority = 1.0 / (capacity_diff + epsilon)

    # 2. Bin utilization (prioritize bins that are already relatively full)
    utilization = 1.0 - (bins_remain_cap / np.max(bins_remain_cap)) # Assuming all bins have same initial cap.
    utilization_priority = utilization + epsilon

    # 3. Avoidance of near-full bins (but not too strictly)
    near_full_penalty = np.where(bins_remain_cap < 1.1*item, -0.5, 0.0) # Slightly penalized
    # The factor 1.1 can be fine-tuned depending on scenario.


    # Combine the priorities, weighting them appropriately
    combined_priority = (0.5 * capacity_priority + 0.5 * utilization_priority + near_full_penalty)
    # Weights 0.5 and 0.5 are used for equal importance to capacity and utilization

    return combined_priority
```
