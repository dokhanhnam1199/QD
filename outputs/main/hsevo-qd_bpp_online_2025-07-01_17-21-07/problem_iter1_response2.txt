```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by potential energy and gravitational force, favouring "near fits".

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # 1. Calculate the "fit score" - how well the item fits into the remaining capacity.
    #    A higher fit score means a better fit.  Avoid zero division.
    fit_scores = np.where(bins_remain_cap > 0, np.exp(-np.abs(bins_remain_cap - item) / (item + 1e-6)), -np.inf)  # Exponential decay
    
    # 2. Introduce a penalty for bins where the item doesn't fit.
    #    This encourages using bins where the item *can* fit, even if not optimally.
    penalty = np.where(bins_remain_cap < item, -np.inf, 0)

    # 3. Combine fit score and penalty to obtain final priorities
    priorities = fit_scores + penalty

    return priorities
```
