```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using a combination of fit and capacity ratios."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            fit_score = remaining_capacity - item
            capacity_ratio = item / remaining_capacity
            priorities[i] =  - fit_score*capacity_ratio # Combine fit score and capacity
        else:
            priorities[i] = -np.inf

    if np.any(np.isfinite(priorities)):
        min_finite = np.min(priorities[np.isfinite(priorities)])
        max_finite = np.max(priorities[np.isfinite(priorities)])
        if max_finite > min_finite:
          priorities = (priorities - min_finite) / (max_finite - min_finite) #Normalize
        else:
          priorities = np.zeros_like(bins_remain_cap, dtype=float) #All bins have same priority
    else:
        priorities = np.zeros_like(bins_remain_cap, dtype=float)

    return priorities
```
