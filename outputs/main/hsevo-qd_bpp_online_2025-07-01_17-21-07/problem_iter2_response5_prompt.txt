{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This priority function considers both the remaining capacity of the bin\n    and how well the item fits relative to that capacity. Bins with capacity\n    slightly larger than the item are preferred (best fit). It penalizes\n    bins where the item would result in very little space left or bins where\n    the item is too small relative to the available space.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Iterate through each bin and calculate its priority\n    for i, remaining_capacity in enumerate(bins_remain_cap):\n        if item <= remaining_capacity:\n            # Calculate the remaining space after placing the item\n            remaining_space = remaining_capacity - item\n\n            # Calculate a 'fit' score.  Smaller remaining space implies better fit, but we add a small\n            # constant to avoid division by zero problems or infinite penalties\n            fit_score = 1.0 / (remaining_space + 0.01)\n\n            # Optionally, we can also incentivize the use of bins that aren't 'too full' to start,\n            # and/or penalize overly small item relative to the bins capacity.\n            # This part prevents extremely small items constantly getting stuffed into bins due to high `fit_score`\n            #  due to little `remaining_space` because an item of ~ 0 size was added to that bin.\n            size_ratio_penalty = np.abs(item/remaining_capacity - 0.5) # Prefer capacities close to 2x the item.\n\n            priorities[i] = fit_score - size_ratio_penalty\n            #priorities[i] = fit_score # Removed size ratio penalty since it caused worse packing.\n        else:\n            # If the item doesn't fit, give a very low priority\n            priorities[i] = -np.inf\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic considers both the remaining capacity of the bin and how well the item fits relative to that capacity, penalizing bins where the item would result in very little space left or where the item is too small relative to the available space. Conversely, the worst heuristic calculates priorities solely based on the negative logarithm of the ratio between the item size and remaining bin capacity. There is a big difference in design concept.\n\nComparing (2nd) vs (19th), the trend remains the same, highlighting the importance of a nuanced fit assessment over simple ratio-based prioritization. They are almost identical.\n\nComparing (1st) vs (2nd), there is no difference.\n\nComparing (11th) vs (20th), they are identical.\n\nComparing (second worst) vs (worst), they are identical.\n\nOverall: The better heuristics in this list prioritize a more detailed evaluation of how well an item fits into a bin, considering both remaining capacity and the potential for wasted space, while the worst heuristics rely on simpler ratio-based calculations. This suggests that heuristics incorporating multiple factors and penalties for poor fits tend to perform better in bin packing problems.\n- \nOkay, let's refine \"Current Self-Reflection\" to design better bin packing heuristics, steering clear of ineffective approaches.\n\n*   **Keywords:** Holistic Evaluation, Waste Minimization, Multi-Factorial, Tight Packing.\n*   **Advice:** Move beyond simple ratios. Analyze \"waste profiles\" within bins. Develop heuristics that actively seek to minimize the variance of remaining space across bins, penalizing highly unbalanced packing.\n*   **Avoid:** Solely relying on first-fit or best-fit based on immediate item size; ignoring the impact of current placement on future packing.\n*   **Explanation:** Heuristics need to be future-aware. A holistic view, penalizing bins with large or oddly shaped remaining spaces, prevents early sub-optimal decisions that severely limit later placement options.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}