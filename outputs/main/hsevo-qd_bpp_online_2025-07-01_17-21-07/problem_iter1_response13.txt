```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Higher priority means we prefer to put the item in that bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First, eliminate bins that can't fit the item
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    # For feasible bins, prioritize bins that leave the least waste, but
    # also avoid bins that fit the item almost perfectly (to encourage reuse of bins)

    remaining_after_fit = bins_remain_cap - item
    
    # Normalize the remaining capacity to be between 0 and 1. Smaller value means better fit
    normalized_remaining = remaining_after_fit / np.max(bins_remain_cap[~infeasible]) if np.any(~infeasible) else np.zeros_like(remaining_after_fit)

    #Give a penalty to bins where item fits too perfectly (leave less than 10% capacity unused)
    near_perfect_fit = (remaining_after_fit > 0) & (remaining_after_fit / bins_remain_cap < 0.1)
    
    priorities[~infeasible] = -normalized_remaining[~infeasible] - 0.5*near_perfect_fit[~infeasible] # Prefer smaller normalized remaining.
    
    #priorities = np.nan_to_num(priorities, neginf=-np.inf)

    return priorities
```
