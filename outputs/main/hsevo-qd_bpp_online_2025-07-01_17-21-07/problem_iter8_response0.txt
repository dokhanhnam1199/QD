```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fit, space waste, and normalization."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            remaining_space = remaining_capacity - item
            # Fit score, favor smaller remaining space.
            fit_score = 1.0 / (remaining_space + 0.01)
            # Waste penalty, avoid bins that are much larger than the item.
            waste_penalty = np.abs(remaining_space / item) * 0.1

            priorities[i] = fit_score - waste_penalty
        else:
            priorities[i] = -np.inf

    # Normalize priorities for numerical stability.
    if np.any(np.isfinite(priorities)):
        min_priority = np.min(priorities[np.isfinite(priorities)])
        max_priority = np.max(priorities[np.isfinite(priorities)])
        if max_priority > min_priority:  # Avoid division by zero
            priorities = (priorities - min_priority) / (max_priority - min_priority)
        else:
            priorities = np.zeros_like(bins_remain_cap, dtype=float) # All bins have equal priority
    else:
        priorities = np.zeros_like(bins_remain_cap, dtype=float)

    return priorities
```
