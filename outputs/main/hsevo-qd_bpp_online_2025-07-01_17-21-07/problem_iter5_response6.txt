```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fit and remaining space, avoids fragmentation."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            remaining_space = remaining_capacity - item
            # Fit score based on inverse of remaining space
            fit_score = 1.0 / (remaining_space + 0.01)

            # Penalize small bins relative to item size to reduce fragmentation
            size_ratio = item / remaining_capacity
            if size_ratio > 0.75:  #tuneable param
                fragment_penalty = 1
            else:
                fragment_penalty = 0
            priorities[i] = fit_score - fragment_penalty
        else:
            priorities[i] = -np.inf

    # Normalize priorities to prevent divergence
    if np.any(np.isfinite(priorities)):
        priorities = (priorities - np.min(priorities[np.isfinite(priorities)])) / \
                     (np.max(priorities[np.isfinite(priorities)]) - np.min(priorities[np.isfinite(priorities)]))
    else:
        priorities = np.zeros_like(bins_remain_cap, dtype=float)

    return priorities
```
