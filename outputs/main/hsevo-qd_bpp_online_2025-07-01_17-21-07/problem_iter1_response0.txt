```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Base priority: Higher remaining capacity is better, but not linearly.
            priorities[i] = cap - item  # Remaining space after placing the item.

            # Bonus for bins that are almost full (but can still fit the item). Encourages filling nearly full bins.
            if cap >= item and cap < 1.2 * item:  # Slightly higher than just fitting
                priorities[i] += 0.5 * item

            # Penalty for creating small leftover space, which will likely be unused.
            leftover = cap - item
            if 0 < leftover < 0.1 * item:  # Less than 10% of item size
                priorities[i] -= 0.75 * item # strong penalty
        else:
            priorities[i] = -np.inf  # Cannot fit, so lowest priority.

    return priorities
```
