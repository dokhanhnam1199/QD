```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers multiple factors to optimize bin packing.
    It prioritizes bins that can accommodate the item, minimizes wasted space,
    and promotes balanced utilization of bins.  It also considers the variance
    of current bin capacities to avoid putting all smaller items into a single bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            remaining_space = remaining_capacity - item

            # Fit Score: Prioritize bins with tighter fits, but avoid near-zero remaining space.
            fit_score = 1.0 / (remaining_space + 0.05)  # Adding a small constant for stability.

            # Capacity Utilization Score: Encourage using bins that are not already near full or nearly empty.
            capacity_utilization_score = (remaining_capacity / np.max(bins_remain_cap))  # Normalize to max cap

            # Balance Score: Penalize bins if adding this item dramatically reduces their remaining capacity
            # compared to other bins. Goal is to reduce the variance of remaining capacities.
            # We use the variance as a penalty term; a lower variance among bins implies
            # they are more evenly filled.
            temp_bins_remain_cap = bins_remain_cap.copy()
            temp_bins_remain_cap[i] = remaining_space  # Simulate placing the item
            balance_score = -np.var(temp_bins_remain_cap)

            # Combine the scores with appropriate weights.
            priorities[i] = (0.5 * fit_score +
                             0.3 * capacity_utilization_score +
                             0.2 * balance_score)
        else:
            priorities[i] = -np.inf  # Item doesn't fit

    return priorities
```
