```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version uses a combination of factors to determine priority:
    1. Capacity utilization: Prefer bins where the item fits relatively well.
    2. Avoidance of small remaining capacity: Discourage filling bins to a very small level.
    3. Encouraging filling: Provides a baseline benefit to filling bins at all.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Capacity utilization factor
    capacity_utilization = (item / bins_remain_cap)
    capacity_utilization_factor = np.exp(-np.abs(capacity_utilization - 0.8))  # Peaks around 80% utilization

    # 2. Avoid bins that would be filled too much, leading to low space remaining
    remaining_space_penalty = np.exp(-10 * np.abs(bins_remain_cap - item - 0.1)) # Avoids bins where little remains


    # 3. Add a small baseline benefit for any bin that fits
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] = 0.1 # flat prior.

    # Incorporate the factors only for the valid bins (where it can fit).
    priorities[fit_mask] += capacity_utilization_factor[fit_mask] # favor specific utilization
    priorities[fit_mask] += remaining_space_penalty[fit_mask]

    return priorities
```
