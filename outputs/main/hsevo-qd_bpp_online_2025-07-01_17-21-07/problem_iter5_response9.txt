```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins balancing fit and fragmentation; normalized."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            remaining_space = remaining_capacity - item
            fit_score = 1.0 / (remaining_space + 0.01) # Favor tight fits

            # Penalize extreme space relative to item, avoid fragmenation
            size_ratio_penalty = np.abs(item / remaining_capacity - 0.5)
            priorities[i] = fit_score - size_ratio_penalty
        else:
            priorities[i] = -np.inf

    # Normalize priorities.
    if np.any(np.isfinite(priorities)):
        finite_priorities = priorities[np.isfinite(priorities)]
        min_priority = np.min(finite_priorities)
        max_priority = np.max(finite_priorities)
        priorities[np.isfinite(priorities)] = (finite_priorities - min_priority) / (max_priority - min_priority)
    else:
        priorities = np.zeros_like(bins_remain_cap, dtype=float)

    return priorities
```
