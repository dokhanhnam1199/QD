```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give very low priority if item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf
    
    # Higher priority to bins that can fit the item, but not much larger than the item
    fit_bins = bins_remain_cap >= item
    
    if np.any(fit_bins):
        priority_temp = bins_remain_cap[fit_bins] - item
        # Give higher priority if there's less waste.
        priorities[fit_bins] = -priority_temp 
        
        # Scale the priorities to make smaller remaining capacities more appealing (avoid fragmenting large bins).
        priorities[fit_bins] += 1.0 / bins_remain_cap[fit_bins]

    return priorities
```
