{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This priority function considers both the remaining capacity of the bin\n    and how well the item fits relative to that capacity. Bins with capacity\n    slightly larger than the item are preferred (best fit). It penalizes\n    bins where the item would result in very little space left or bins where\n    the item is too small relative to the available space.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        fit_score_epsilon: Small constant added to remaining space to avoid division by zero.\n        size_ratio_target: Target ratio of item size to remaining capacity (e.g., 0.5 for capacities close to 2x the item).\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Iterate through each bin and calculate its priority\n    for i, remaining_capacity in enumerate(bins_remain_cap):\n        if item <= remaining_capacity:\n            # Calculate the remaining space after placing the item\n            remaining_space = remaining_capacity - item\n\n            # Calculate a 'fit' score.  Smaller remaining space implies better fit, but we add a small\n            # constant to avoid division by zero problems or infinite penalties\n            fit_score = 1.0 / (remaining_space + fit_score_epsilon)\n\n            # Optionally, we can also incentivize the use of bins that aren't 'too full' to start,\n            # and/or penalize overly small item relative to the bins capacity.\n            # This part prevents extremely small items constantly getting stuffed into bins due to high `fit_score`\n            #  due to little `remaining_space` because an item of ~ 0 size was added to that bin.\n            size_ratio_penalty = np.abs(item/remaining_capacity - size_ratio_target) # Prefer capacities close to 2x the item.\n\n            priorities[i] = fit_score - size_ratio_penalty\n            #priorities[i] = fit_score # Removed size ratio penalty since it caused worse packing.\n        else:\n            # If the item doesn't fit, give a very low priority\n            priorities[i] = -np.inf\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the first heuristic calculates a fit score based on remaining space and a size ratio penalty to avoid filling bins with items that are too small or leave very little space, while the 20th calculates a priority based on the negative log of the ratio of the item size to the remaining bin capacity. The first one considers both fit and efficient space utilization, while the 20th simply prioritizes bins where the item takes up a larger portion of the remaining capacity. (second best) vs (second worst), heuristics are very similar. Comparing (1st) vs (2nd), we see that the second heuristic normalizes the priorities, which can improve numerical stability but doesn't necessarily lead to better packing. (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see that function are very similar. Overall: The best heuristics prioritize a balance between fitting the item well (small remaining space) and avoiding excessive fragmentation (penalizing very small remaining space or filling bins with tiny items). Normalization doesn't necessarily improve packing performance. Simpler ratio-based approaches appear to be less effective than those that incorporate fit and fragmentation considerations. Introducing epsilon and size_ratio_target are useless.\n- \nOkay, I understand. Let's refine \"current self-reflection\" to make it more effective for designing better bin packing heuristics, avoiding the pitfalls of the \"ineffective\" example.\n\nHere's a revised approach:\n\n*   **Keywords:** Fit quality, fragmentation control, simplicity, adaptability, edge-case handling.\n\n*   **Advice:** Prioritize heuristics that dynamically adapt to item size distributions and bin capacities. Emphasize strategies that minimize *both* wasted space and the number of bins used.\n\n*   **Avoid:** Premature optimization based solely on average-case performance. Resist adding parameters without a clear understanding of their impact on solution quality and computational cost.\n\n*   **Explanation:** Effective heuristics should aim for a sweet spot between solution quality, computation complexity, and adaptability to diverse problem characteristics. Focus on methods that gracefully handle edge cases, such as very small or large items, without adding significant overhead.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}