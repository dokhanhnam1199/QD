```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Exclude bins where the item doesn't fit.
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Assign lowest possible priority

    # 2. First-Fit Decreasing-like component: Favor bins where item fits best without too much waste.
    # Penalize significant wasted space to promote efficient packing later. A higher K results in tighter packing.
    K = 2.0 #Tuneable paramter.

    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] = (bins_remain_cap[feasible_bins] - item) - K * (bins_remain_cap[feasible_bins] - item)**2

    # 3. Break ties with minimum remaining capacity, to use almost full bins first.
    priorities += 0.0001 * bins_remain_cap

    return priorities
```
