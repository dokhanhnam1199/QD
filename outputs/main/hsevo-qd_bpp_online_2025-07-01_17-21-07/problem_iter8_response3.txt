```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on best fit, penalizing extreme space."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            remaining_space = remaining_capacity - item
            fit_score = 1.0 / (remaining_space + 0.01)  # Higher if it fits well

            # Penalize bins that are too full or too empty
            size_ratio_penalty = np.abs((item / remaining_capacity) - 0.6)

            priorities[i] = fit_score - size_ratio_penalty
        else:
            priorities[i] = -np.inf

    # Normalize priorities for better comparison
    if np.any(np.isfinite(priorities)):
        min_finite = np.min(priorities[np.isfinite(priorities)])
        max_finite = np.max(priorities[np.isfinite(priorities)])
        if max_finite > min_finite:  # Avoid division by zero if all finite values are the same
            priorities = (priorities - min_finite) / (max_finite - min_finite)
        else:
            priorities[np.isfinite(priorities)] = 1.0 # Give equal priorities to all bins with the same remaining capacity.
    else:
        priorities = np.zeros_like(bins_remain_cap, dtype=float)

    return priorities
```
