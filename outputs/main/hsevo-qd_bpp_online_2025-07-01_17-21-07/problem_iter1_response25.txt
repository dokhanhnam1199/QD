```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap)

    if np.any(valid_bins):
      # Prioritize bins that can fit the item
      remaining_space = bins_remain_cap[valid_bins] - item
      priorities[valid_bins] = 1 / (remaining_space + 0.00001)  # Inverse of remaining space (avoid division by zero)

      # Slightly boost bins that are closer to being full *after* packing the item. This encourages filling bins more completely.
      filled_ratio = (bins_remain_cap[valid_bins] - item) / bins_remain_cap[valid_bins]
      priorities[valid_bins] += (1 - filled_ratio) * 0.5
    else:
      # If no bin can fit, assign low priority and choose a bin as a last resort - penalty proportional to capacity
      priorities = - bins_remain_cap

    return priorities
```
