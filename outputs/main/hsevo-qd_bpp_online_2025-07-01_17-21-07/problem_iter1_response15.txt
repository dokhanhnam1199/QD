```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Reward bins where the item fits.  Heavily penalize bins where it doesn't.
    fits = bins_remain_cap >= item
    priorities[fits] = bins_remain_cap[fits] - item # Higher remaining capacity after packing is better.
    priorities[~fits] = -np.inf # Extremely low priority for bins that cannot fit the item

    # Further prioritize bins that are closest to being full *after* adding the item, 
    # but only among the bins where the item fits. This encourages fuller bins. Avoid division by zero.
    remaining_capacities = bins_remain_cap - item
    remaining_capacities[~fits] = np.inf #resetting values of bins that do not fit so they will not affect argmax

    
    priorities[fits] =  1/(remaining_capacities[fits] + 1e-9)

    return priorities
```
