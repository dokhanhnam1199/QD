```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on best fit and remaining capacity, normalizes scores."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            rem = cap - item
            fit_score = 1.0 / (rem + 0.01)
            size_ratio_penalty = np.abs(item / cap - 0.5)
            priorities[i] = fit_score - size_ratio_penalty
        else:
            priorities[i] = -np.inf
    
    # Normalize priorities to [0, 1]
    if np.any(priorities != -np.inf):
        valid_priorities = priorities[priorities != -np.inf]
        min_priority = np.min(valid_priorities)
        max_priority = np.max(valid_priorities)
        if max_priority > min_priority:
            priorities[priorities != -np.inf] = (priorities[priorities != -np.inf] - min_priority) / (max_priority - min_priority)
        else: # all bins have same priority.
            priorities[priorities != -np.inf] = 0.5 # Assign a middle value.

    return priorities
```
