```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Find bins that can accommodate the item
    feasible_bins = bins_remain_cap >= item
    
    if not np.any(feasible_bins):
        # If no bin can accommodate the item, return all zeros. This indicates that a new bin needs to be opened
        return priorities

    # Calculate remaining capacity after placing the item
    remaining_capacity_after_placement = bins_remain_cap - item

    # Give higher priority to bins where the remaining capacity is small but non-negative
    # to avoid fragmentation.  Use a negative exponential to prioritize smaller remaining capacity.

    priorities[feasible_bins] = np.exp(-5 * remaining_capacity_after_placement[feasible_bins] / item)
    

    # If the remaining capacity is smaller than 10% of item size, further increase priority
    small_remaining = remaining_capacity_after_placement[(remaining_capacity_after_placement > 0) & (remaining_capacity_after_placement < 0.1 * item)]

    small_remaining_indices = np.where((remaining_capacity_after_placement > 0) & (remaining_capacity_after_placement < 0.1 * item))[0]

    priorities[small_remaining_indices] += 10 # Bump up the priority

    return priorities
```
