```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function balances bin utilization and fragmentation. It gives higher
    priority to bins where the item fits well without leaving excessive or very little space.
    It introduces a dynamic element to adapt to different item sizes.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate the mean and standard deviation of the remaining capacities to normalize them
    mean_capacity = np.mean(bins_remain_cap)
    std_capacity = np.std(bins_remain_cap) if np.std(bins_remain_cap) > 0 else 1  # Avoid division by zero

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            remaining_space = remaining_capacity - item

            # Calculate a fit score (similar to v1, but using remaining space ratio).
            fit_score = 1 - (remaining_space / remaining_capacity)

            # Introduce a capacity utilization score:
            capacity_utilization = item / remaining_capacity
            
            # Add a small penalty to extreme values of remaining space.
            space_penalty = np.abs(remaining_space - item) / (mean_capacity + 0.0001)

            # Prioritize bins with normalized remaining capacities close to the average
            # Use normalized capacity to prevent favoring empty bins
            normalized_capacity = (remaining_capacity - mean_capacity) / std_capacity
            capacity_priority = np.exp(-normalized_capacity**2 / 2)

            priorities[i] = fit_score + capacity_utilization - space_penalty + 0.2 * capacity_priority # Combine the scores.  Increase capacity priority by a scale of 0.2
        else:
            priorities[i] = -np.inf

    return priorities
```
