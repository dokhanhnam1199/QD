```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version incorporates elements of "least filled" and attempts to minimize wasted space.
    It also adds a stochastic element to avoid always picking the same bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Heuristic: Prefer bins that can fit the item snugly (minimize wasted space).
    #    This encourages filling bins efficiently.  Also use stochasticity (exp) to encourage exploration of slightly worse, but not bad, configurations.
    potential_fit = bins_remain_cap - item
    fit_priority = np.where(potential_fit >= 0, np.exp(-np.abs(potential_fit) / (item + 1e-9)), -np.inf) # 1e-9 avoids div by zero, prefer near-perfect fits

    priorities = fit_priority

    # 2. Add some small random noise to break ties and encourage exploration.  This helps escape local optima.
    priorities += np.random.normal(0, 0.01, size=bins_remain_cap.shape)

    return priorities
```
