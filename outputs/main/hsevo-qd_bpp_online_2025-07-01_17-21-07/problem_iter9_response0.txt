```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, fit_score_epsilon: float = 1e-6, size_ratio_center: float = 0.5, size_ratio_weight: float = 0.5, capacity_usage_weight: float = 0.0) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers both the remaining capacity of the bin
    and how well the item fits relative to that capacity. Bins with capacity
    slightly larger than the item are preferred (best fit). It penalizes
    bins where the item would result in very little space left or bins where
    the item is too small relative to the available space.  Also incorporates bin
    capacity usage, incentivizing filling bins that are already somewhat full.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        fit_score_epsilon: Small constant added to remaining_space to avoid division by zero.
        size_ratio_center: Target ratio of item size to remaining capacity (default 0.5, i.e., capacity is twice the item size).
        size_ratio_weight: Weight of the size ratio penalty in the overall priority score.
        capacity_usage_weight: Weight given to how full a bin is before adding an item.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    original_capacities = bins_remain_cap + item  # Estimate the original capacity if item fits.

    # Iterate through each bin and calculate its priority
    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            # Calculate the remaining space after placing the item
            remaining_space = remaining_capacity - item

            # Calculate a 'fit' score.  Smaller remaining space implies better fit, but we add a small
            # constant to avoid division by zero problems or infinite penalties
            fit_score = 1.0 / (remaining_space + fit_score_epsilon)

            # Optionally, we can also incentivize the use of bins that aren't 'too full' to start,
            # and/or penalize overly small item relative to the bins capacity.
            # This part prevents extremely small items constantly getting stuffed into bins due to high `fit_score`
            #  due to little `remaining_space` because an item of ~ 0 size was added to that bin.
            size_ratio_penalty = size_ratio_weight * np.abs(item/remaining_capacity - size_ratio_center) # Prefer capacities close to 2x the item.
            
            # Incentivize filling bins already used
            capacity_usage_score = 0.0
            if (original_capacities[i] != 0.0).all(): # Avoid division by zero in first placing of object
                capacity_usage_score = capacity_usage_weight * (1 - (remaining_capacity + fit_score_epsilon) / original_capacities[i])


            priorities[i] = fit_score - size_ratio_penalty + capacity_usage_score
        else:
            # If the item doesn't fit, give a very low priority
            priorities[i] = -np.inf

    return priorities
```
