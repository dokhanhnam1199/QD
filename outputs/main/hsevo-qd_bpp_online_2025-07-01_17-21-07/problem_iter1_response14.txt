```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Higher priority = better fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Penalize bins that are too small (negative remaining capacity after placement)
    invalid_bins = bins_remain_cap < item
    priorities[invalid_bins] = -np.inf

    # Reward bins with enough capacity but close to the item size, using a normalized fit ratio.
    valid_bins = ~invalid_bins
    fit_ratio = item / bins_remain_cap[valid_bins]
    priorities[valid_bins] = np.exp(-np.abs(fit_ratio - 1))  # Gaussian-like preference

    # Boost nearly full bins, favoring a completion strategy. Avoid large values for stability
    nearly_full = (bins_remain_cap >= item) & (bins_remain_cap < (item + 0.1))  # Allow for small difference, for example 0.1

    priorities[nearly_full] += 0.5  # Slightly nudge it towards filling bins almost entirely.

    # A small bonus for bins which if item is added, it still has significant amount of capacity (say at least 25% of the original). This adds to exploring new bins.
    original_capacity = 1.0 # Assuming original capacity is 1
    significant_cap_remaining = (bins_remain_cap - item) >= (0.25 * original_capacity)
    priorities[significant_cap_remaining] += 0.1

    return priorities
```
