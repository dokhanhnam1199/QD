```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    A Tesla-inspired approach that combines capacity fit with energy resonance.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Resonance factor: the closer the item fits, the higher the resonance (up to a point).
    resonance = np.clip(1 - np.abs(bins_remain_cap - item) / (np.mean(bins_remain_cap) + 1e-9), 0, 1)

    # Capacity utilization: Prefer bins that can hold the item without excessive waste
    capacity_utilization = np.where(bins_remain_cap >= item, (item / (bins_remain_cap + 1e-9)) * resonance , -1)  #Negative score if it doesn't fit

    # Small adjustment to handle edge cases - discourages bins nearly full but still large enough
    small_cap = np.where((bins_remain_cap > item) & (bins_remain_cap <= item + 0.1) , -0.1, 0)

    priorities = capacity_utilization + small_cap

    return priorities
```
