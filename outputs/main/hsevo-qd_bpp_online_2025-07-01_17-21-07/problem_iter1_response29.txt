```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This version prioritizes bins that are close to, but not less than,
    the item size, implementing a "best fit" strategy with a touch of
    waste minimization and bin utilization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Penalize bins that cannot fit the item
    infeasible = bins_remain_cap < item
    priorities[infeasible] = -np.inf

    # Give higher priority to bins where the item fits with minimal wasted space
    # We use a scaled inverse of the waste, so smaller waste results in higher priority.
    # Adding a small constant avoids division by zero and provides slight baseline
    # if there is an exact fit.

    feasible = bins_remain_cap >= item
    waste = bins_remain_cap[feasible] - item
    priorities[feasible] = 1.0 / (waste + 0.001) # Add small constant for stability

    #Further boost priority to bins whose remaining capacity ratio closely matches item size.
    capacity_ratio = item / bins_remain_cap
    priority_boost = np.exp(-np.abs(capacity_ratio - 1) * 5)  # Exponential decay around 1
    priorities = priorities + priority_boost
    return priorities
```
