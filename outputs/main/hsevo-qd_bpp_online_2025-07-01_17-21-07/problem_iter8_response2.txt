```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best fit with capacity awareness and normalization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            remaining_space = remaining_capacity - item
            fit_score = 1.0 / (remaining_space + 0.01)
            capacity_penalty = np.abs(item / remaining_capacity - 0.5)
            priorities[i] = fit_score - capacity_penalty
        else:
            priorities[i] = -np.inf

    # Normalize priorities to [0, 1]
    if np.any(np.isfinite(priorities)):  # Check if any valid priorities exist
        max_priority = np.max(priorities[np.isfinite(priorities)])
        min_priority = np.min(priorities[np.isfinite(priorities)])
        if max_priority != min_priority:
            priorities[np.isfinite(priorities)] = (priorities[np.isfinite(priorities)] - min_priority) / (max_priority - min_priority)
        else:
             priorities[np.isfinite(priorities)] = 1.0 # All bins are equally good or bad.
    else:
        priorities[:] = 0.0  # No bin can accommodate the item

    return priorities
```
