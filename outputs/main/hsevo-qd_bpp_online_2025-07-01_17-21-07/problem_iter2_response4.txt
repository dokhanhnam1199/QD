```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid priority: fit score + balance remaining space."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            remaining_space = remaining_capacity - item
            fit_score = 1.0 / (remaining_space + 0.01)

            # Penalize bins with too much or too little remaining space *after* placement
            space_penalty = np.abs(remaining_space - (np.mean(bins_remain_cap[bins_remain_cap > item]) if np.any(bins_remain_cap > item) else 0))

            priorities[i] = fit_score - 0.1 * space_penalty # scale by 0.1
        else:
            priorities[i] = -np.inf
    return priorities
```
