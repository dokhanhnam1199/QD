```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, fit_score_epsilon: float = 1e-6, size_ratio_center: float = 0.5, size_ratio_weight: float = 0.1, frag_penalty_exponent: float = 2.0) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers both the remaining capacity of the bin
    and how well the item fits relative to that capacity, and explicitly
    penalizes fragmentation.  It avoids over-penalizing very small items.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        fit_score_epsilon: Small constant added to remaining_space to avoid division by zero.
        size_ratio_center: Target ratio of item size to remaining capacity (default 0.5, i.e., capacity is twice the item size).
        size_ratio_weight: Weight of the size ratio penalty in the overall priority score.
        frag_penalty_exponent: Exponent to control the severity of fragmentation penalty.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Iterate through each bin and calculate its priority
    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            # Calculate the remaining space after placing the item
            remaining_space = remaining_capacity - item

            # Calculate a 'fit' score.  Smaller remaining space implies better fit, but we add a small
            # constant to avoid division by zero problems or infinite penalties
            fit_score = 1.0 / (remaining_space + fit_score_epsilon)

            # Penalize bins where the item would result in very little space left or bins where
            # the item is too small relative to the available space.
            size_ratio_penalty = size_ratio_weight * np.abs(item/remaining_capacity - size_ratio_center) # Prefer capacities close to 2x the item.

            # Fragmentation penalty:  Penalize leaving small gaps.  Use an exponent to control
            # the severity.
            frag_penalty = (remaining_space / remaining_capacity)**frag_penalty_exponent # Normalized fragmentation

            priorities[i] = fit_score - size_ratio_penalty - frag_penalty # Combines fit, size ratio, and frag penalties.
        else:
            # If the item doesn't fit, give a very low priority
            priorities[i] = -np.inf

    return priorities
```
