{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This priority function considers both the remaining capacity of the bin\n    and how well the item fits relative to that capacity. Bins with capacity\n    slightly larger than the item are preferred (best fit). It penalizes\n    bins where the item would result in very little space left or bins where\n    the item is too small relative to the available space.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        fit_score_epsilon: Small constant added to remaining_space to avoid division by zero.\n        size_ratio_center: Target ratio of item size to remaining capacity (default 0.5, i.e., capacity is twice the item size).\n        size_ratio_weight: Weight of the size ratio penalty in the overall priority score.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Iterate through each bin and calculate its priority\n    for i, remaining_capacity in enumerate(bins_remain_cap):\n        if item <= remaining_capacity:\n            # Calculate the remaining space after placing the item\n            remaining_space = remaining_capacity - item\n\n            # Calculate a 'fit' score.  Smaller remaining space implies better fit, but we add a small\n            # constant to avoid division by zero problems or infinite penalties\n            fit_score = 1.0 / (remaining_space + fit_score_epsilon)\n\n            # Optionally, we can also incentivize the use of bins that aren't 'too full' to start,\n            # and/or penalize overly small item relative to the bins capacity.\n            # This part prevents extremely small items constantly getting stuffed into bins due to high `fit_score`\n            #  due to little `remaining_space` because an item of ~ 0 size was added to that bin.\n            size_ratio_penalty = size_ratio_weight * np.abs(item/remaining_capacity - size_ratio_center) # Prefer capacities close to 2x the item.\n\n            priorities[i] = fit_score - size_ratio_penalty\n            #priorities[i] = fit_score # Removed size ratio penalty since it caused worse packing.\n        else:\n            # If the item doesn't fit, give a very low priority\n            priorities[i] = -np.inf\n\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's refine \"Current Self-Reflection\" to be more actionable and less like the \"Ineffective\" example, focusing on design principles for better heuristics:\n\nHere's a breakdown:\n\n*   **Keywords:** Multi-factor evaluation, fragmentation cost, parameter tuning, numerical stability.\n\n*   **Advice:** Design heuristics that evaluate multiple aspects of a packing decision (fit, fragmentation impact). Quantify fragmentation cost to penalize bad space usage. Use parameters for fine-grained control. Normalize *when* it demonstrably improves stability.\n\n*   **Avoid:** Oversimplification based only on ratios, assuming normalization *always* helps, rigid parameter settings (allow instance-specific tuning).\n\n*   **Explanation:** Better heuristics look at multiple factors and parameterization is to make them robust to various bin-packing instances with varying properties. Normalization should only be applied when it is clearly improving numerical stability during evaluation and/or operation.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}