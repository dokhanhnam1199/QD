```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities to a very low value.
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    # Iterate over bins and compute priority only for feasible bins.
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # First-Fit-Decreasing inspired:
            # Prioritize bins where the item fills a significant portion of the bin,
            # but also leaves a reasonable amount of space remaining.

            fill_ratio = item / cap
            remaining_ratio = (cap - item) / cap

            # Give a higher priority to bins that have a good fill ratio
            # and a reasonable amount of space remaining.
            priority = (fill_ratio * 0.7) + (remaining_ratio * 0.3) #Weighted Avg of the two ratios
            #Prioritising perfect fits, prevent fragmentations
            if cap - item < 0.01 :  #Close enough to perfect fit
               priority += 0.5 #Boost for near perfect fits
            priorities[i] = priority

    return priorities
```
