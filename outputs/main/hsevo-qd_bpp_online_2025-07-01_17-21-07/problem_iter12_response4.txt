```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, fit_score_epsilon: float = 1e-6,
                  size_ratio_center: float = 0.5, size_ratio_weight: float = 0.1,
                  frag_weight: float = 0.2) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin, considering fragmentation.

    This priority function considers the remaining capacity, the fit of the item, and
    a penalty for the fragmentation that would be caused by placing the item in the bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        fit_score_epsilon: Small constant for numerical stability.
        size_ratio_center: Target ratio of item size to remaining capacity.
        size_ratio_weight: Weight of the size ratio penalty.
        frag_weight: Weight of the fragmentation penalty.

    Return:
        Array of priorities for each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            remaining_space = remaining_capacity - item

            # Fit score:  Smaller remaining space is better
            fit_score = 1.0 / (remaining_space + fit_score_epsilon)

            # Size ratio penalty: Penalize bins where item is too small or too large relative to capacity
            size_ratio_penalty = size_ratio_weight * np.abs(item / remaining_capacity - size_ratio_center)

            # Fragmentation penalty: Penalize bins that will have very small remaining space. This promotes
            # filling bins more completely and discourages creating tiny fragments. The penalty is higher
            # for smaller remaining spaces.  We use a reciprocal to achieve this.
            frag_penalty = frag_weight / (remaining_space + fit_score_epsilon) if remaining_space > 0 else frag_weight * 1e6

            priorities[i] = fit_score - size_ratio_penalty - frag_penalty
        else:
            priorities[i] = -np.inf  # Item doesn't fit

    return priorities
```
