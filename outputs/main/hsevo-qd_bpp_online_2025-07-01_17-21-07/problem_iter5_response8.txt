```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering fit and fragmentation; avoids extremes."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            remaining_space = remaining_capacity - item
            fit_score = 1.0 / (remaining_space + 0.01)

            # Penalize extreme remaining space relative to item size.
            size_ratio_penalty = np.abs((item / (remaining_capacity + 0.01)) - 0.5)

            priorities[i] = fit_score - size_ratio_penalty
        else:
            priorities[i] = -np.inf

    # Normalize priorities to improve numerical stability.
    if np.any(np.isfinite(priorities)):
        min_finite = np.min(priorities[np.isfinite(priorities)])
        max_finite = np.max(priorities[np.isfinite(priorities)])
        if max_finite - min_finite > 1e-9:  # Avoid division by zero
            priorities = (priorities - min_finite) / (max_finite - min_finite)
        else:
            priorities = np.zeros_like(bins_remain_cap, dtype=float)
    else:
        priorities = np.zeros_like(bins_remain_cap, dtype=float)

    return priorities
```
