{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritizes bins considering fit and remaining space variance.\"\"\"\n\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    for i, remaining_capacity in enumerate(bins_remain_cap):\n        if item <= remaining_capacity:\n            remaining_space = remaining_capacity - item\n            fit_score = 1.0 / (remaining_space + 0.01)\n\n            # Penalize extreme remaining space relative to item size.\n            size_ratio_penalty = np.abs(item / remaining_capacity - 0.5)\n\n            priorities[i] = fit_score - size_ratio_penalty\n        else:\n            priorities[i] = -np.inf\n\n    # Normalize priorities to improve numerical stability.  Prevents divergence\n    # and potential overflow issues, especially in complex sequences.\n    if np.any(np.isfinite(priorities)):\n        priorities = (priorities - np.min(priorities[np.isfinite(priorities)])) / \\\n                     (np.max(priorities[np.isfinite(priorities)]) - np.min(priorities[np.isfinite(priorities)]))\n    else:\n        priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the first uses a complex scoring function that considers remaining capacity and a size ratio penalty, while the last only uses the log of the ratio of item size to remaining capacity. (2nd) is identical to (1st). Comparing (3rd) vs (4th), the third normalizes the priorities, which can help with numerical stability, but the fourth does not. Comparing (2nd worst) vs (worst), they are identical. Comparing (1st) vs (3rd), (1st) has configurable parameters while (3rd) has hardcoded parameters; (3rd) normalizes the priorites while (1st) does not.\nOverall: The better heuristics incorporate a notion of \"best fit\" by penalizing bins that are either too full or not full enough, and may include normalization for numerical stability. The worst heuristics rely solely on a simple ratio calculation and lack any mechanism for fine-tuning or preventing numerical issues.\n- \nOkay, let's redefine effective self-reflection for designing better heuristics, focusing on actionable advice and avoiding common pitfalls.\n\n*   **Keywords:** Comprehensive evaluation, adaptive parameterization, problem-specific tuning, stability analysis.\n\n*   **Advice:** Evaluate heuristics using diverse problem instances, adapt parameters based on performance feedback, and analyze solution stability.\n\n*   **Avoid:** Premature optimization, over-reliance on single metrics, neglecting problem-specific characteristics.\n\n*   **Explanation:** Effective self-reflection involves rigorously testing, adapting, and analyzing heuristic performance within the context of the specific problem.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}