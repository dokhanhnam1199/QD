```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function aims to improve upon priority_v1 by:
    1. Explicitly rewarding bins close to full after packing the item.
    2. Adding a small penalty for bins that are already nearly empty to avoid starting new bins unnecessarily.
    3. Reducing the impact of size_ratio_penalty which caused worse packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            remaining_space = remaining_capacity - item

            # Reward bins that will be close to full after packing
            fullness_reward = np.exp(-5 * remaining_space)  # Exponential decay, peaks when remaining_space is close to 0

            # Penalize bins that are already nearly empty (to avoid starting new ones unless necessary)
            empty_bin_penalty = 0.0
            if remaining_capacity > 0.9:
                empty_bin_penalty = 0.1 # Slightly penalize almost empty bins

            priorities[i] = fullness_reward - empty_bin_penalty

        else:
            priorities[i] = -np.inf

    return priorities
```
