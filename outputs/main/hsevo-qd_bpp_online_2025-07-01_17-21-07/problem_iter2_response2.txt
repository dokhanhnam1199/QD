```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculate priority based on fit and waste minimization."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            remaining_space = remaining_capacity - item
            fit_score = 1.0 / (remaining_space + 0.01)

            # Penalize bins that would have too much or too little remaining space.
            # Target remaining space is some fraction of the original bin capacity.
            target_space_ratio = 0.25  # Aim for remaining 25% free (example)
            target_space = target_space_ratio * 1.0 #Assume bin capacity is 1.0
            waste_penalty = np.abs(remaining_space - target_space)

            priorities[i] = fit_score - waste_penalty

        else:
            priorities[i] = -np.inf

    return priorities
```
