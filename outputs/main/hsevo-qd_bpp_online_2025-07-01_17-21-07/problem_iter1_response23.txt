```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First, eliminate bins that cannot fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Give these bins the lowest priority

    # For feasible bins, calculate priority based on a combination of factors:
    feasible_bins = ~infeasible_bins
    if np.any(feasible_bins):
        remaining_capacity = bins_remain_cap[feasible_bins]
        
        # 1. Fill ratio: prefer bins where the item fills a significant portion
        fill_ratio = item / remaining_capacity
        
        # 2. Absolute remaining capacity: prefer bins with more capacity overall, to avoid creating many nearly-empty bins
        
        # 3. Avoidance of near-empty bins: severely penalize bins where adding the item would leave very little space.
        near_empty_penalty = np.zeros_like(remaining_capacity)
        near_empty_threshold = 0.1 # Adjust this to experiment
        near_empty_bins = (remaining_capacity - item) <= near_empty_threshold
        near_empty_penalty[near_empty_bins] = -100.0  # Strong penalty to avoid near-empty bins

        # Combine factors. Play with the weights to achieve different behaviors
        priority_values = 0.6 * fill_ratio + 0.3 * remaining_capacity + 0.1 * near_empty_penalty 
        
        priorities[feasible_bins] = priority_values
        
    return priorities
```
