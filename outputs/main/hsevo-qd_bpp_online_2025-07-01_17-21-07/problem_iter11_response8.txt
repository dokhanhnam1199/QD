```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins based on fit and remaining space variance, normalized."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fit_score_epsilon = 0.01
    size_ratio_center = 0.5
    size_ratio_weight = 1.0

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            remaining_space = remaining_capacity - item
            fit_score = 1.0 / (remaining_space + fit_score_epsilon)
            size_ratio_penalty = size_ratio_weight * np.abs(item / remaining_capacity - size_ratio_center)
            priorities[i] = fit_score - size_ratio_penalty
        else:
            priorities[i] = -np.inf

    if np.any(np.isfinite(priorities)):
        min_finite = np.min(priorities[np.isfinite(priorities)])
        max_finite = np.max(priorities[np.isfinite(priorities)])
        if max_finite > min_finite:  # Avoid division by zero
            priorities = (priorities - min_finite) / (max_finite - min_finite)
        else:
            priorities = np.ones_like(priorities) * 0.5 # All bins are equally good

    else:
        priorities = np.zeros_like(bins_remain_cap, dtype=float)
    return priorities
```
