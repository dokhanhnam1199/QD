```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap)

    # Heuristic 1: First Fit Decreasing-ish (Maximize usage)
    # Higher priority to bins that fit the item best (smallest wasted space).
    # Avoids creating many near-empty bins.  But we also have to make sure this
    # doesn't prevent us from making smart merges later

    potential_waste = bins_remain_cap - item
    fit_indices = potential_waste >= 0

    priorities[fit_indices] += (bins_remain_cap[fit_indices] - item)**(-0.5) #Prefer bins that result in minimal waste. A power of -0.5 (sqrt(x) where x = waste).

    # Heuristic 2: Minimize Fragmentation: Prioritize bins that are almost full (avoid tiny gaps).
    # Penalize bins if the remaining capacity after placing the item will be super small
    min_waste_threshold = 0.1 # Avoid creating a small residual gap of 0.1 bin capacity or less

    small_waste_indices = (potential_waste >=0) & (potential_waste < min_waste_threshold)
    priorities[small_waste_indices] -= 10.0 # A large negative score, make it less likely

    # Heuristic 3: Encourage Merges, prioritize bins which when combined reach target.
    # Encourage placing into bin that is closest to half-full to create perfect combo.
    # Prioritize making 2 bins which almost add up to 1 whole. This might prevent future wasted space
    # but might make less spaces for upcoming larger items. We will use this to create entropy.

    target = 0.5 # try and fill close to half the bin when combined with incoming item.
    diff_from_target = np.abs(bins_remain_cap[fit_indices] - target)

    priorities[fit_indices] += np.exp(-10 * diff_from_target) # gaussian distribution centered around 0.5. The tighter spread (due to factor of 10), leads to fewer situations

    # Heuristic 4: Prevent single too large bins by incentivizing smaller-er placements.
    # Only slightly prioritze if the item will lead to a slightly better bin capacity.

    bin_fullness = (bins_remain_cap - item) / bins_remain_cap # proportion that is left

    priorities[fit_indices] -=  bin_fullness[fit_indices] # The smaller the leftover relative to its original space, the better

    return priorities
```
