```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, fit_score_epsilon:float = 1e-6, size_ratio_center:float = 0.5, size_ratio_weight:float = 1.0) -> np.ndarray:
    """Combines best-fit with capacity ratio and normalizes."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            rem = cap - item
            fit = 1.0 / (rem + fit_score_epsilon)
            ratio_penalty = size_ratio_weight * np.abs(item/cap - size_ratio_center)
            priorities[i] = fit - ratio_penalty
        else:
            priorities[i] = -np.inf
    # Normalize to avoid numerical issues
    priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities) + 1e-9)
    return priorities
```
