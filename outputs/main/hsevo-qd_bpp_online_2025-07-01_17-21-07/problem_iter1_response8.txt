```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Very High priority to bins that can fit the item almost perfectly (minimize wasted space)
    # Prioritize bins where the remaining space after packing the item will be small.
    remaining_space = bins_remain_cap - item
    
    # Bins that cannot fit the item get -inf priority
    priorities[remaining_space < 0] = -np.inf
    
    # Bins that *can* fit the item get a score inversely proportional to wasted space. 
    # Add a small epsilon to avoid division by zero if item perfectly fits a bin
    epsilon = 1e-9
    valid_bins_indices = remaining_space >= 0
    priorities[valid_bins_indices] = 1 / (remaining_space[valid_bins_indices] + epsilon)
    
    # Slightly boost the priority of bins with larger remaining capacity relative to the item size.
    # This favors using more empty bins instead of filling up partially filled bins.
    ratios = bins_remain_cap[valid_bins_indices] / item
    priorities[valid_bins_indices] += np.log1p(ratios)
    
    return priorities
```
