```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Calculate priority scores, favoring tighter fits and balancing bin usage."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            remaining_space = remaining_capacity - item
            fit_score = 1.0 / (remaining_space + 0.01)

            # Penalize bins with very little space remaining,
            # and incentivize utilization.
            space_utilization_penalty = np.abs((remaining_capacity-item)/remaining_capacity -0.7)
            priorities[i] = fit_score - space_utilization_penalty
        else:
            priorities[i] = -np.inf

    return priorities
```
