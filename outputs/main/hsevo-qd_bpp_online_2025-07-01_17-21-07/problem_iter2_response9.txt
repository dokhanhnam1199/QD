```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins considering fit and balance of remaining space."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            remaining_space = remaining_capacity - item
            fit_score = 1.0 / (remaining_space + 0.01)

            # Encourage bins to have similar fill levels by penalizing large
            # deviations from the mean remaining capacity
            mean_remaining = np.mean(bins_remain_cap)
            balance_penalty = np.abs(remaining_space - mean_remaining) / (mean_remaining + 0.01)

            priorities[i] = fit_score - balance_penalty
        else:
            priorities[i] = -np.inf

    return priorities
```
