```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by black hole physics, this priority function considers
    the "event horizon" (the size of the item) relative to the "mass"
    (remaining capacity) of each bin.  Bins with capacities closest
    to the item size get higher priority, simulating a gravitational
    attraction. Avoid overflowing bins by setting priority to -inf.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, capacity in enumerate(bins_remain_cap):
        if capacity < item:
            priorities[i] = -np.inf  # Cannot fit, so lowest priority. Represented as -inf
        else:
            # Calculate 'gravitational attraction'. Closer capacity to item -> higher priority
            # Using inverse square relationship but softened to prevent division by zero.
            distance = abs(capacity - item) + 1e-6  # Avoid zero distance
            priorities[i] = 1 / (distance**2) # Inversed square softened distance
            # Extra bonus for close fit to fully use capacity - a form of Hawking Radiation for bins
            if item > 0 and capacity > 0:  # Ensure no division by zero
              priorities[i] += np.exp(-abs(capacity - item) / item)

    return priorities
```
