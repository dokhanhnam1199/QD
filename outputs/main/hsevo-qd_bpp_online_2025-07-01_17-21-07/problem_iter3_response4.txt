```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers the remaining capacity, fit, and a waste profile.
    It tries to minimize variance in remaining space across bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            remaining_space = remaining_capacity - item

            # Fit score (smaller remaining space is better)
            fit_score = 1.0 / (remaining_space + 0.01)

            # Waste profile penalty: Penalize bins that will have large remaining spaces.
            # Encourage bins to be filled more completely, but not over-filled.
            waste_penalty = (remaining_space / (np.sum(bins_remain_cap) + 0.01))  # Normalized waste.

            # Encourage filling bins close to a target fill ratio (e.g., 75%)
            target_fill_ratio = 0.75
            current_fill_ratio = (remaining_capacity - remaining_space) / remaining_capacity
            fill_ratio_penalty = np.abs(current_fill_ratio - target_fill_ratio)

            priorities[i] = fit_score - 0.5 * waste_penalty - 0.25*fill_ratio_penalty

        else:
            priorities[i] = -np.inf

    return priorities
```
