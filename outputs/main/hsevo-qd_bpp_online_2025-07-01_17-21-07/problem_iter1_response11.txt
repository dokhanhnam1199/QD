```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers several factors:
    1. Remaining capacity: Bins with remaining capacity closer to the item size
       get higher priority.  This aims to minimize wasted space. We use a Gaussian
       distribution centered around the item size.
    2. Avoidance of near-full bins:  Bins that are already very full are penalized
       to avoid creating overly fragmented space in multiple bins.  A linear penalty
       is applied based on how close the bin is to being full AFTER adding the item.
    3. Feasibility: Infeasible bins are assigned the lowest priority to avoid errors.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = 1.0  # Assuming bin size is normalized to 1

    # Gaussian distribution centered around the item size
    # with standard deviation proportional to the item size
    capacity_priority = np.exp(-((bins_remain_cap - item)**2) / (2 * (item/2)**2))

    # Penalty for near-full bins.
    potential_remain_cap = bins_remain_cap - item
    near_full_penalty = np.where(potential_remain_cap > 0, potential_remain_cap, 0) # Only penalize if the item fits
    near_full_penalty = near_full_penalty # Keep capacities if we don't go above 1
    near_full_penalty = 1.0- near_full_penalty
    # Linear penalty
    near_full_penalty = np.clip(near_full_penalty, 0, 1)

    # Apply the penalties
    priorities = capacity_priority * near_full_penalty

    # Ensure feasible bins have the lowest priority. Set infeasible bins to -inf
    priorities = np.where(bins_remain_cap >= item, priorities, -np.inf)
    priorities = np.nan_to_num(priorities, nan=-np.inf) #ensure that nans become extremely low values

    return priorities
```
