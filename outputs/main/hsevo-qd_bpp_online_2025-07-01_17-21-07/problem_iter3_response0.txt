```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This priority function considers several factors to make more informed
    bin selection decisions:

    1.  Remaining Capacity:  Favors bins where the item fits.
    2.  Waste Minimization: Penalizes bins that would result in very small remaining space.
    3.  Balance: Encourages even distribution of items across bins, reducing variance
        in remaining capacities.
    4.  Fit Score: Prioritizes bins where the item fills a significant portion
        of the remaining capacity, but not too much (avoiding near-full bins).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            remaining_space = remaining_capacity - item

            # Fit Score:  Favors bins where the item fits well. Avoid division by zero.
            fit_score = 1.0 / (remaining_space + 0.01)

            # Waste Minimization: Penalize small remaining spaces.  A higher exponent
            # makes the penalty for near-full bins more severe.
            waste_penalty = (remaining_space / remaining_capacity)**2 # Increased exponent

            # Size Ratio Penalty: Prefer capacities close to 2x the item
            size_ratio_penalty = np.abs(item / remaining_capacity - 0.5)

            # Combined Priority:  Balance fit, waste, and size considerations.
            priorities[i] = fit_score - 0.5 * waste_penalty - 0.2 * size_ratio_penalty

            # Encourage use of emptier bins if item is relatively small
            if item < np.mean(bins_remain_cap) / 2:
                priorities[i] += (remaining_capacity / np.max(bins_remain_cap))*0.1
        else:
            priorities[i] = -np.inf

    return priorities
```
