```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit with capacity awareness and normalization."""
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            rem = cap - item
            fit = 1.0 / (rem + 0.01)  # Best-fit score
            size_ratio = np.abs(item / cap - 0.5)  # Avoid tiny/huge space
            priorities[i] = fit - size_ratio
        else:
            priorities[i] = -np.inf
    # Normalize to stabilize selection
    if np.max(priorities) > -np.inf:  # prevent all -inf
        priorities = (priorities - np.min(priorities)) / (np.max(priorities) - np.min(priorities))
    return priorities
```
