```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritize bins using dynamic weights, sigmoid penalties, and balanced distribution.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
    
    Returns:
        Array of priority scores for each bin.
    """
    alpha = 0.55  # Balance weight for Scaled Remaining Capacity
    beta = 0.30   # Balance weight for Balance Factor
    gamma = 0.15  # Balance weight for Last Fit Decrease
    
    # Scaled Remaining Capacity with adaptive sigmoid penalty
    sigmoid_penalty_threshold = 2.7985568202021485e-06
    scaled_remaining_capacity = np.where(
        bins_remain_cap >= item, 
        1.0 / (bins_remain_cap - item + sigmoid_penalty_threshold), 
        -np.inf
    )
    
    # Enhanced Balance Factor: Encourage a balanced distribution
    mean_cap = np.mean(bins_remain_cap)
    balance_factor = np.abs(mean_cap - bins_remain_cap) / np.max(np.abs(mean_cap - bins_remain_cap) + 1e-6)
    
    # Last Fit Decrease (LFD) Heuristic with slight adjustment
    last_fit_decrease = np.zeros_like(bins_remain_cap)
    if len(bins_remain_cap) > 1:
        last_fit_decrease[1:] = np.maximum(bins_remain_cap[:-1] - bins_remain_cap[1:], 0)
    
    # Combine heuristics with adaptive learning
    priority_scores = (
        alpha * scaled_remaining_capacity +
        beta * (1 - balance_factor) +
        gamma * last_fit_decrease
    )

    return priority_scores
```
