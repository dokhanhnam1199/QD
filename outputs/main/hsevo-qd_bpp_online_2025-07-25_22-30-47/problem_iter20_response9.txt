```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritize bins using a hybrid heuristic with adaptive learning and dynamic weights.
    """
    # Scaled Remaining Capacity with sigmoid penalty
    sigmoid_penalty_threshold = 7.870e-06
    scaled_remaining_capacity = np.where(
        bins_remain_cap >= item, 
        1.0 / (bins_remain_cap - item + sigmoid_penalty_threshold), 
        -np.inf
    )

    # Balance Factor: Encourage a more balanced distribution
    mean_cap = np.mean(bins_remain_cap)
    balance_factor_threshold = 8.540e-06
    balance_factor = np.abs(mean_cap - bins_remain_cap) / (np.max(np.abs(mean_cap - bins_remain_cap)) + balance_factor_threshold)
    balance_penalty = 1 - balance_factor

    # Reward bins that are less likely to be the last bin filled (First Fit Decreasing heuristic)
    rank_based_reward = np.argsort(-bins_remain_cap)

    # Adaptive coefficients based on the difference between the item size and mean bin capacity
    delta = item - mean_cap
    adaptive_alpha = 1 / (1 + np.exp(-delta))  # Smooth step function for dynamic weighting
    adaptive_beta = 1 - adaptive_alpha
    adaptive_gamma = 0.1  # Small constant for ranking reward to keep it balanced

    # Combine heuristics with adaptive learning
    priority_scores = (
        adaptive_alpha * scaled_remaining_capacity +
        adaptive_beta * balance_penalty +
        adaptive_gamma * rank_based_reward
    )

    return priority_scores
```
