```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This design increases priority for bins that have more remaining capacity compared to the item, but also penalizes larger
    remaining capacities to encourage better use of bins. It also gives a high penalty for bins where the item wouldn't fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Priority for bins that can hold the item
    can_hold_item = bins_remain_cap >= item

    # Calculate base priority for bins that can hold the item
    base_priority = bins_remain_cap - item

    # Penalize larger capacities to some extent (e.g., using a sigmoid function)
    penalty = 1 / (1 + np.exp(-(bins_remain_cap - np.median(bins_remain_cap))))
    
    # Combine base priority with penalty
    priority = base_priority * penalty

    # Zero priority for bins that cannot hold the item
    priority[~can_hold_item] = 0

    # Normalize priority to 0-1 range
    normalized_priority = (priority - np.min(priority)) / (np.max(priority) - np.min(priority))

    # To avoid undefined values when all priorities are zero (all bins are too small)
    if np.isnan(normalized_priority).all():
        return np.zeros_like(bins_remain_cap)
    else:
        return normalized_priority
```
