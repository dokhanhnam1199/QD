```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, adaptation_factor: float = 0.05, recent_fits: list = []) -> np.ndarray:
    """
    Prioritize bins by combining adaptive learning, balance factor, and sigmoid penalty with dynamic weights and thresholds.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        adaptation_factor: Factor to adjust weights based on recent fits.
        recent_fits: List of recent items added to bins for adaptive learning.

    Returns:
        Array of priority scores for each bin.
    """
    # Scaled Remaining Capacity with sigmoid penalty
    sigmoid_penalty_threshold = 1e-6 + max(recent_fits) * 1e-5 if recent_fits else 1e-6
    scaled_remaining_capacity = np.where(
        bins_remain_cap >= item, 
        1.0 / (bins_remain_cap - item + sigmoid_penalty_threshold), 
        -np.inf
    )

    # Balance Factor: Encourage a more balanced distribution
    mean_cap = np.mean(bins_remain_cap)
    balance_factor_threshold = 1e-6 + adaptation_factor * np.std(recent_fits) if recent_fits else 1e-6
    balance_factor = np.abs(mean_cap - bins_remain_cap) / np.max(np.abs(mean_cap - bins_remain_cap) + balance_factor_threshold)

    # Last Fit Decrease (LFD) Heuristic
    last_fit_decrease = np.zeros_like(bins_remain_cap)
    if len(bins_remain_cap) > 1:
        last_fit_decrease[1:] = bins_remain_cap[:-1] - bins_remain_cap[1:]

    # Dynamic weights based on recent fits
    if recent_fits:
        alpha = max(1 - len(recent_fits) * adaptation_factor, 0.5)
        beta = min(1, 0.5 + len(recent_fits) * adaptation_factor)
        gamma = adaptation_factor
    else:
        alpha, beta, gamma = 0.8703526170915381, 0.26928992154797116, 0.015623035472155156

    # Combine heuristics with adaptive learning
    priority_scores = (
        alpha * scaled_remaining_capacity +
        beta * (1 - balance_factor) +
        gamma * last_fit_decrease
    )

    # Append current item to recent fits for next iteration's adaptation
    recent_fits.append(item)

    return priority_scores
```
