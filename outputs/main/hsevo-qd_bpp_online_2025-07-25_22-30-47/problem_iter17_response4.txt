```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritize bins using dynamic weights and sigmoid penalties for adaptive and efficient bin placement.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of priority scores for each bin.
    """
    # Dynamic weights based on system state
    system_load = np.mean(bins_remain_cap)
    total_capacity = np.sum(bins_remain_cap)
    num_bins = len(bins_remain_cap)
    load_factor = system_load / (total_capacity / num_bins) if total_capacity > 0 else 1.0
    
    # Adaptive learning weights
    alpha = np.clip(0.5 + 0.5 * np.tanh((load_factor - 0.5) * 2), 0.0, 1.0)  # Scaled Remaining Capacity
    beta = np.clip(0.5 - 0.4 * np.tanh((load_factor - 0.5) * 2), 0.0, 1.0)  # Balance Factor
    gamma = 0.2  # Static weight for Last Fit Decrease

    # Scaled Remaining Capacity with sigmoid penalty
    sigmoid_penalty_threshold = 1e-6
    scaled_remaining_capacity = np.where(
        bins_remain_cap >= item, 
        1.0 / (bins_remain_cap - item + sigmoid_penalty_threshold), 
        -np.inf
    )

    # Balance Factor: Encourage balanced distribution
    mean_cap = np.mean(bins_remain_cap)
    balance_factor = np.abs(mean_cap - bins_remain_cap) / np.max(np.abs(mean_cap - bins_remain_cap) + 1e-6)

    # Last Fit Decrease (LFD) Heuristic
    last_fit_decrease = np.zeros_like(bins_remain_cap)
    if len(bins_remain_cap) > 1:
        last_fit_decrease[1:] = bins_remain_cap[:-1] - bins_remain_cap[1:]

    # Combine heuristics with adaptive learning
    priority_scores = (
        alpha * scaled_remaining_capacity +
        beta * (1 - balance_factor) +
        gamma * last_fit_decrease
    )

    return priority_scores
```
