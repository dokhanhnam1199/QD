{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    return np.zeros_like(bins_remain_cap)\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    This implementation considers both the remaining capacity and the number of\n    bins used when deciding the priority. Bins that have more remaining capacity\n    but do not risk creating new bins unnecessarily are preferred.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Calculate the benefit of adding the item to each bin, penalize for new bins\n    penalty_for_new_bin = np.max(bins_remain_cap) / 2.0\n    priority_scores = bins_remain_cap - item - (bins_remain_cap < item) * penalty_for_new_bin\n    return np.where(priority_scores < 0, -np.inf, priority_scores)\n\n### Analyze & experience\n- Comparing (best) vs (worst), we see that the best heuristic (1st, 3rd, 6th, 8th, 9th, 11th, 16th, 17th) considers both the suitability of the bin for the item (whether it can fit) and penalizes excessive leftover space, encouraging efficient use of bins. The worst heuristic (10th) always returns zero, making all bins equally unpreferred, which is counterproductive.\n  \n(Second best) vs (second worst), the second best (2nd, 4th, 5th, 7th, 12th, 13th, 14th, 15th, 18th, 19th, 20th) tries to fill bins tightly or considers factors like initial empty space, which can help in bin packing. However, these second-best heuristics often lack the nuanced balancing of fit and leftover space prioritized by the best ones.\n\nComparing (1st) vs (2nd), we see the 1st heuristic directly penalizes too much leftover space using a rational formula that balances remaining capacity and leftover space. In contrast, the sinusoidal factor in the 2nd heuristic complicates the prioritization without achieving the same balance or simplicity.\n\n(3rd) vs (4th), similar to the comparison of (1st) vs (2nd), (3rd) uses a straightforward approach with a penalty factor, whereas (4th) applies a sinusoidal transformation which adds complexity without clear improvement.\n\nComparing (second worst) vs (worst), we see that while the second worst tries to incorporate multiple factors (12th, 13th, 14th, 15th, 18th, 19th, 20th)-like remaining capacity, proximity to item size, penalizing for new bin creation, etc.- these attempts are less refined and lack the elegant balancing act seen in the top heuristics.\n\nOverall:\n- \n- **Keywords**: Balance, Efficiency, Simplicity, Encouragement\n- **Advice**: Focus on modular sub-heuristics, integrate adaptive learning, emphasize clear improvement criteria, and ensure feedback mechanisms.\n- **Avoid**: Overly complex algorithms, random adjustments, opaque rules, and intuitive but non-quantifiable optimizations.\n- **Explanation**: By modularizing heuristics, you can refine specific areas without affecting others. Adaptive learning allows the heuristic to improve over time. Clear improvement criteria ensure that changes are beneficial, and feedback mechanisms foster continuous optimization. Avoiding complexity and randomness ensures that the heuristic remains understandable and efficient.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}