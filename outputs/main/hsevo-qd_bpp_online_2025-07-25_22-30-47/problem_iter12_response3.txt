```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritize bins by combining adaptive learning, dynamic balance factor, and refined penalty mechanisms.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of priority scores for each bin.
    """
    # Adaptive threshold for sigmoid penalty
    adaptive_threshold = 1e-5 + (item / np.max(bins_remain_cap)) * 1e-4

    # Scaled Remaining Capacity with adaptive sigmoid penalty
    scaled_remaining_capacity = np.where(
        bins_remain_cap >= item, 
        1.0 / (bins_remain_cap - item + adaptive_threshold), 
        -np.inf
    )

    # Dynamic Balance Factor: Encourage a more balanced distribution
    mean_cap = np.mean(bins_remain_cap)
    dynamic_balance_factor = np.abs(mean_cap - bins_remain_cap) / np.max(np.abs(mean_cap - bins_remain_cap) + 1e-5)

    # Adaptive weights based on item size
    alpha = np.clip(1.0 - (item / np.max(bins_remain_cap)), 0.5, 1.0)
    beta = np.clip((item / np.max(bins_remain_cap)), 0.1, 0.5)
    gamma = np.clip(0.5 - (item / np.max(bins_remain_cap)), 0.0, 0.5)

    # Efficient First Fit Decrease (EFFD) Heuristic
    effd_heuristic = np.zeros_like(bins_remain_cap)
    if len(bins_remain_cap) > 1:
        effd_heuristic[1:] = (bins_remain_cap[:-1] - bins_remain_cap[1:]) / (
            bins_remain_cap[:-1] + bins_remain_cap[1:]) + 1

    # Combine heuristics with adaptive learning
    priority_scores = (
        alpha * scaled_remaining_capacity +
        beta * (1 - dynamic_balance_factor) +
        gamma * effd_heuristic
    )

    return priority_scores
```
