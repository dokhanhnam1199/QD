```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritize bins using dynamic weights, adaptive learning, and refined balance factors for online BPP.
    """
    # Calculate the remaining capacity after placing the item
    remaining_capacity_after_item = bins_remain_cap - item

    # Dynamic penalty for bins that cannot fit the item
    penalty_for_large_items = np.where(remaining_capacity_after_item < 0, -np.inf, 0)

    # Scaled Remaining Capacity with sigmoid penalty
    sigmoid_penalty_threshold = 1e-6
    scaled_remaining_capacity = np.where(
        bins_remain_cap >= item, 
        1.0 / (bins_remain_cap - item + sigmoid_penalty_threshold), 
        -np.inf
    )

    # Balance Factor: Encourage a more balanced distribution
    mean_cap = np.mean(bins_remain_cap)
    balance_factor = np.abs(mean_cap - bins_remain_cap) / np.max(np.abs(mean_cap - bins_remain_cap) + 1e-6)
    balance_penalty = 1 - balance_factor  # Inverse balance factor to penalize imbalance

    # Adaptive coefficients based on system load
    system_load = np.mean(bins_remain_cap)
    total_capacity = np.sum(bins_remain_cap)
    num_bins = len(bins_remain_cap)
    load_factor = system_load / (total_capacity / num_bins) if total_capacity > 0 else 1.0
    alpha = np.clip(0.5 + 0.5 * np.tanh((load_factor - 0.5) * 2), 0.0, 1.0)
    beta = np.clip(0.5 - 0.4 * np.tanh((load_factor - 0.5) * 2), 0.0, 1.0)

    # Combine heuristics with adaptive learning
    priority_scores = (
        alpha * scaled_remaining_capacity +
        beta * balance_penalty
    )

    # Apply penalty for bins that cannot fit the item
    priority_scores += penalty_for_large_items

    return priority_scores
```
