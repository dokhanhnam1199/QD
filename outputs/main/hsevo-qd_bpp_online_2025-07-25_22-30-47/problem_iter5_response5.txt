```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines scaled remaining capacity, balance factor, and waste reduction to prioritize bins effectively.
    """
    # Scaled Remaining Capacity: Lower capacity -> Higher priority
    scaled_remaining_capacity = 1.0 / (bins_remain_cap + 1e-6)
    
    # Balance Factor: Encourage a more balanced distribution
    mean_cap = np.mean(bins_remain_cap)
    balance_factor = np.abs(mean_cap - bins_remain_cap)
    
    # Waste Reduction: Prioritize bins that fit the item well
    waste_reduction = np.where(bins_remain_cap - item >= 0, bins_remain_cap - item, -1000)
    
    # Combine heuristics
    priority_scores = (
        0.5 * scaled_remaining_capacity +
        0.3 * (1 - balance_factor / np.max(balance_factor + 1e-6)) +
        0.2 * waste_reduction
    )
    
    return priority_scores
```
