```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritize bins by enhancing adaptive learning, balance factor, and sigmoid penalty dynamically.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of priority scores for each bin.
    """
    # Parameters for adaptive learning
    alpha = 0.7  # Increased weight for Scaled Remaining Capacity
    beta = 0.2   # Reduced weight for Balance Factor
    gamma = 0.1  # Reduced weight for Last Fit Decrease

    # Enhanced Scaled Remaining Capacity with adaptive sigmoid penalty
    sigmoid_penalty = np.exp(-np.power((bins_remain_cap - item) / (np.std(bins_remain_cap) + 1e-6), 2))
    scaled_remaining_capacity = np.where(bins_remain_cap >= item, sigmoid_penalty, -np.inf)

    # Balance Factor: Encourage a more balanced distribution
    mean_cap = np.mean(bins_remain_cap)
    balance_factor = np.abs(mean_cap - bins_remain_cap) / np.max(np.abs(mean_cap - bins_remain_cap) + 1e-6)

    # Last Fit Decrease (LFD) Heuristic with dynamic adjustment
    last_fit_decrease = np.zeros_like(bins_remain_cap)
    if len(bins_remain_cap) > 1:
        last_fit_decrease[1:] = np.log(bins_remain_cap[:-1] - bins_remain_cap[1:] + 1)

    # Combine heuristics with adaptive learning
    priority_scores = (
        alpha * scaled_remaining_capacity +
        beta * (1 - balance_factor) +
        gamma * last_fit_decrease
    )

    return priority_scores
```
