```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Balances fit and leftover space penalty with sigmoidal adjustment for better bin packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Ensure item can fit into the bin
    can_fit = bins_remain_cap >= item
    space_left = bins_remain_cap - item
    
    # Base priority: more space left after adding item
    base_priority = can_fit * (bins_remain_cap - item)
    
    # Sigmoidal penalty for larger remaining space to encourage tight packing
    penalty = 1 / (1 + np.exp(-0.5 * (bins_remain_cap - np.median(bins_remain_cap))))
    
    # Combine base priority with penalty
    priority = base_priority * (1 - penalty)
    
    # Normalize priority to 0-1 range
    priority = (priority - np.min(priority)) / (np.max(priority) - np.min(priority))
    
    # Handle edge case where all priorities are zero due to same bin capacities
    if np.isnan(priority).all() or np.isinf(priority).all():
        return np.zeros_like(bins_remain_cap)
    
    return priority
```
