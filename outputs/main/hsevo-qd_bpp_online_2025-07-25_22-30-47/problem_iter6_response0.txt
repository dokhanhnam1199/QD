```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritize bins by enhancing adaptive learning, balance factor, and sigmoid penalty, with refined parameters.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of priority scores for each bin.
    """
    # Refined Parameters for adaptive learning
    alpha = 0.7  # Increased weight for Scaled Remaining Capacity
    beta = 0.2   # Reduced weight for Balance Factor
    gamma = 0.1  # Weight for Last Fit Decrease remains the same

    # Scaled Remaining Capacity with sigmoid penalty: refine sigmoid to avoid steep gradients
    scaled_remaining_capacity = np.where(bins_remain_cap >= item, 1.0 / (bins_remain_cap - item + 1e-3), -np.inf)

    # Balance Factor: Encourage balanced distribution with a quadratic penalty
    mean_cap = np.mean(bins_remain_cap)
    balance_factor = (bins_remain_cap - mean_cap) ** 2 / (np.max(np.abs(bins_remain_cap - mean_cap))**2 + 1e-6)

    # Last Fit Decrease (LFD) Heuristic: refine to penalize larger gaps more aggressively
    last_fit_decrease = np.zeros_like(bins_remain_cap)
    if len(bins_remain_cap) > 1:
        last_fit_decrease[1:] = np.where(bins_remain_cap[:-1] - bins_remain_cap[1:] > 0, 
                                         (bins_remain_cap[:-1] - bins_remain_cap[1:]) ** 2, 0)

    # Combine heuristics with adaptive learning
    priority_scores = (
        alpha * scaled_remaining_capacity +
        (1 - beta) * (1 - balance_factor) +
        gamma * last_fit_decrease
    )

    return priority_scores
```
