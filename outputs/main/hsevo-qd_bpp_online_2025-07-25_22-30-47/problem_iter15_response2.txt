```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritize bins using a hybrid heuristic that combines adaptive learning, dynamic adjustments,
    and balanced penalties tailored to the domain of bin packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of priority scores for each bin.
    """
    # Adaptive Learning Parameters
    alpha = np.exp(-np.mean(bins_remain_cap))  # Dynamic alpha based on current mean capacity
    beta = 1 - alpha  # Complementary weight for balance factor
    gamma = 0.1 * (np.max(bins_remain_cap) / (np.max(bins_remain_cap) - np.min(bins_remain_cap) + 1e-5))  # Dynamic gamma based on range of capacities

    # Scaled Remaining Capacity with sigmoid penalty
    sigmoid_penalty_threshold = 1.0 / (len(bins_remain_cap) + 1)
    scaled_remaining_capacity = np.where(
        bins_remain_cap >= item, 
        1.0 / (bins_remain_cap - item + sigmoid_penalty_threshold), 
        -np.inf
    )

    # Balance Factor: Encourage a more balanced distribution
    mean_cap = np.mean(bins_remain_cap)
    balance_factor = np.abs(mean_cap - bins_remain_cap) / (np.max(np.abs(mean_cap - bins_remain_cap)) + 1e-5)

    # Last Fit Decrease (LFD) Heuristic with dynamic adjustment
    last_fit_decrease = np.zeros_like(bins_remain_cap)
    if len(bins_remain_cap) > 1:
        last_fit_decrease[1:] = np.gradient(bins_remain_cap)

    # Historical Fit Penalization: Penalize bins who have had many items fit recently
    historical_penalty = np.exp(-(bins_remain_cap / np.max(bins_remain_cap)))  # Recent bins with less capacity left are penalized

    # Combine heuristics with adaptive learning and dynamic adjustments
    priority_scores = (
        alpha * scaled_remaining_capacity +
        beta * (1 - balance_factor) +
        gamma * last_fit_decrease +
        -historical_penalty  # Minus sign to penalize based on historical fit
    )

    return priority_scores
```
