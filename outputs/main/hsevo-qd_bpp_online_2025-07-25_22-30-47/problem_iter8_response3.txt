```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines dynamic fit penalties, balance heuristic, and sigmoid to prioritize bins efficiently with adaptive learning.
    """
    can_fit = bins_remain_cap >= item
    space_left = bins_remain_cap - item
    fit_penalty = 1 - (space_left / bins_remain_cap)
    close_fit_factor = np.clip(bins_remain_cap - item, 0, 1)
    sigmoid_penalty = 1 / (1 + np.exp(-5 * (space_left - np.min(space_left))))
    average_remain_cap = np.mean(bins_remain_cap)
    balance_score = np.exp(-((bins_remain_cap - average_remain_cap) ** 2) / (2 * (average_remain_cap / 4) ** 2))
    dynamic_adjustment = 1.0 / (bins_remain_cap + 1e-6)
    priority = can_fit * (fit_penalty + close_fit_factor + sigmoid_penalty + balance_score) * dynamic_adjustment
    return priority
```
