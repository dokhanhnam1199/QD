```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritize bins using dynamic adjustments, sigmoid penalties, and balanced factor calculations.
    """
    # Scaled Remaining Capacity with sigmoid penalty
    alpha = 0.45
    beta = 0.05
    gamma = 0.27
    sigmoid_penalty_threshold = 2.8e-6
    balance_factor_threshold = 2.1e-6
    
    scaled_remaining_capacity = np.where(
        bins_remain_cap >= item, 
        1.0 / (bins_remain_cap - item + sigmoid_penalty_threshold), 
        -np.inf
    )

    # Balance Factor: Encourage a more balanced distribution
    mean_cap = np.mean(bins_remain_cap)
    balance_factor = np.abs(mean_cap - bins_remain_cap) / np.max(np.abs(mean_cap - bins_remain_cap) + balance_factor_threshold)

    # Waste Reduction: Prioritize bins that fit the item well
    waste_reduction = np.where(bins_remain_cap - item >= 0, bins_remain_cap - item, -1000)

    # Combine heuristics with adaptive learning
    priority_scores = (
        alpha * scaled_remaining_capacity +
        beta * (1 - balance_factor) +
        gamma * waste_reduction
    )

    return priority_scores
```
