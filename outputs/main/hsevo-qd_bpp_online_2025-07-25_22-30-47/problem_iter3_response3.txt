```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This heuristic uses a modular approach with two main components:
    1. Tightness Heuristic: Prioritizes bins that are almost full.
    2. Balance Heuristic: Penalizes bins that are too full or too empty compared to others.

    The heuristics are combined with weights that can be adjusted to emphasize one over the other.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Parameters for the heuristics
    tightness_weight = 0.7
    balance_weight = 0.3

    # Tightness Heuristic: Prioritize bins that are almost full
    tightness_score = 1.0 / (bins_remain_cap + 1e-6) * np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))

    # Balance Heuristic: Penalize bins that are too full or too empty compared to others
    average_remain_cap = np.mean(bins_remain_cap)
    balance_score = np.exp(-((bins_remain_cap - average_remain_cap) ** 2) / (2 * (average_remain_cap / 4) ** 2))

    # Combine both heuristics with weights
    priority_score = (tightness_weight * tightness_score) + (balance_weight * balance_score)

    return priority_score
```
