```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, adaptation_factor: float = 0.05, adaptive_weights: np.ndarray = np.array([0.9, 0.05, 0.05])):
    """
    Prioritize bins using adaptive learning and dynamic weights to improve decision-making in online Bin Packing Problem.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.
        adaptation_factor: Factor by which the weights can be adjusted.
        adaptive_weights: Initial weights for the heuristics (scaled_remaining_capacity, balance_factor, last_fit_decrease).

    Returns:
        Array of priority scores for each bin.
    """

    # Scaled Remaining Capacity with sigmoid penalty
    sigmoid_penalty_threshold = 1e-5  # Small threshold to avoid division by zero
    scaled_remaining_capacity = np.where(
        bins_remain_cap >= item, 
        1.0 / (bins_remain_cap - item + sigmoid_penalty_threshold), 
        -np.inf
    )

    # Balance Factor: Encourage a more balanced distribution
    mean_cap = np.mean(bins_remain_cap)
    balance_factor_part = np.abs(mean_cap - bins_remain_cap)
    max_diff = np.max(balance_factor_part) if np.max(balance_factor_part) > 0 else 1  # Avoid division by zero
    balance_factor = balance_factor_part / max_diff

    # Last Fit Decrease (LFD) Heuristic
    last_fit_decrease = np.zeros_like(bins_remain_cap)
    if len(bins_remain_cap) > 1:
        last_fit_decrease[1:] = bins_remain_cap[:-1] - bins_remain_cap[1:]

    # Adaptive learning: Adjust weights based on historical performance (dummy mechanism, replace with real adaptation using domain-specific data)
    # For demonstration, use a simple heuristic such as increasing the weight of LFD if the last fit was significantly better than average
    # In a real-world scenario, this would require historical data and performance metrics
    if np.any(bins_remain_cap - item > mean_cap):
        new_weight_lfd = adaptive_weights[2] + adaptation_factor
        total_weight = new_weight_lfd + adaptive_weights[0] + adaptive_weights[1]
        adaptive_weights = np.array([adaptive_weights[0] / total_weight, adaptive_weights[1] / total_weight, new_weight_lfd / total_weight])

    # Combine heuristics with adaptive learning
    priority_scores = (
        adaptive_weights[0] * scaled_remaining_capacity +
        adaptive_weights[1] * (1 - balance_factor) +
        adaptive_weights[2] * last_fit_decrease
    )

    return priority_scores
```
