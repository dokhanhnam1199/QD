```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This heuristic uses a modular approach with two main components:
    1. Tightness Heuristic: Prioritizes bins that are almost full.
    2. Balance Heuristic: Penalizes bins that are too full or too empty compared to others.

    The priorities are combined with weights to balance between filling bins tightly
    and maintaining a good balance across all bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Normalize remaining capacities
    max_cap = np.max(bins_remain_cap) + 1e-6
    norm_remain_cap = bins_remain_cap / max_cap

    # Tightness Heuristic: High priority for bins that are almost full
    tightness_score = 1.0 / (bins_remain_cap + 1e-6)

    # Balance Heuristic: Penalize bins that are too full or too empty
    # Mean remaining capacity
    mean_cap = np.mean(norm_remain_cap)
    # Deviation from mean capacity
    deviation = np.abs(norm_remain_cap - mean_cap)
    # Balance score: Low penalty for bins closer to the mean capacity
    balance_score = 1.0 / (deviation + 1e-6)

    # Combine scores with weights
    # Adjust weights based on item size relative to max capacity
    item_weight = item / max_cap
    tightness_weight = 1.0 - item_weight
    balance_weight = item_weight

    # Final priority score
    priority_scores = (tightness_heuristic_weight * tightness_score +
                       balance_weight * balance_score)
    
    return priority_scores
```
