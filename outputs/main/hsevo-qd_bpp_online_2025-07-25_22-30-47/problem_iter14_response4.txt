```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritize bins using dynamic adaptive weights and sigmoid penalties.
    
    Args:
        item: Size of item to be added.
        bins_remain_cap: Array of remaining capacities for each bin.
    
    Returns:
        Array of priority scores for each bin.
    """
    # Calculate load factor and adjust weights dynamically
    system_load = np.mean(bins_remain_cap)
    total_capacity = np.sum(bins_remain_cap)
    num_bins = len(bins_remain_cap)
    load_factor = system_load / (total_capacity / num_bins) if total_capacity > 0 else 1.0
    
    alpha = np.clip(0.5 + 0.5 * np.tanh((load_factor - 0.5) * 2), 0.0, 1.0)  # Scaled Remaining Capacity
    beta = np.clip(0.5 - 0.4 * np.tanh((load_factor - 0.5) * 2), 0.0, 1.0)  # Balance Factor
    
    # Scaled Remaining Capacity with sigmoid penalty
    sigmoid_penalty_threshold = 1e-6
    scaled_remaining_capacity = np.where(bins_remain_cap >= item, 1.0 / (bins_remain_cap - item + sigmoid_penalty_threshold), -np.inf)
    
    # Balance Factor: Encourage a more balanced distribution
    mean_cap = np.mean(bins_remain_cap)
    balance_factor = np.abs(mean_cap - bins_remain_cap) / np.max(np.abs(mean_cap - bins_remain_cap) + 1e-6)
    
    # Combine heuristics with adaptive learning
    priority_scores = alpha * scaled_remaining_capacity + beta * (1 - balance_factor)
    
    return priority_scores
```
