```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This heuristic combines several modular sub-heuristics:
    1. Scaled Remaining Capacity: Prioritizes bins with less remaining capacity.
    2. Balance Factor: Encourages a more balanced distribution of items across bins.
    3. Last Fit Decrease (LFD) Heuristic: Gives priority to bins where the last fit was larger.
    4. Adaptive Learning: Weights the heuristics based on past performance.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Parameters for adaptive learning
    alpha = 0.5  # Weight for Scaled Remaining Capacity
    beta = 0.3   # Weight for Balance Factor
    gamma = 0.2  # Weight for Last Fit Decrease

    # Scaled Remaining Capacity: Lower capacity -> Higher priority
    scaled_remaining_capacity = 1.0 / (bins_remain_cap + 1e-6)

    # Balance Factor: Encourage a more balanced distribution
    mean_cap = np.mean(bins_remain_cap)
    balance_factor = np.abs(mean_cap - bins_remain_cap)

    # Last Fit Decrease (LFD) Heuristic
    last_fit_decrease = np.zeros_like(bins_remain_cap)
    if len(bins_remain_cap) > 1:
        last_fit_decrease[1:] = bins_remain_cap[:-1] - bins_remain_cap[1:]

    # Combine heuristics with adaptive learning
    priority_scores = (
        alpha * scaled_remaining_capacity +
        beta * (1 - balance_factor / np.max(balance_factor + 1e-6)) +
        gamma * last_fit_decrease
    )

    return priority_scores
```
