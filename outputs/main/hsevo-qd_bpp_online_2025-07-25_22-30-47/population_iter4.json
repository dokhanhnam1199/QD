[
  {
    "stdout_filepath": "problem_iter2_response0.txt_stdout.txt",
    "code_path": "problem_iter2_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines fit-check and minimized leftover space with a sigmoid penalty for larger remaining space.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    penalty = 1 / (1 + np.exp(space_left))  # Sigmoid penalty for leftover space\n    priority = can_fit * penalty\n    return priority",
    "response_id": 0,
    "tryHS": true,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response1.txt_stdout.txt",
    "code_path": "problem_iter2_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritize bins by balancing the remaining capacity and leftover space efficiency.\"\"\"\n    ifbinsfit = bins_remain_cap >= item\n    priority = np.where(ifbinsfit, 1.0 / (bins_remain_cap - item + 1e-6), -np.inf)\n    relative_space_left_factor = bins_remain_cap / np.max(bins_remain_cap, initial=1.0)\n    return priority * relative_space_left_factor",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response2.txt_stdout.txt",
    "code_path": "problem_iter2_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority score for each bin based on remaining capacity and avoiding new bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of priority scores for each bin.\n    \"\"\"\n    penalty_for_new_bin = np.max(bins_remain_cap) / 2.0\n    priority_scores = bins_remain_cap - item - (bins_remain_cap < item) * penalty_for_new_bin\n    priority_scores = np.where(priority_scores < 0, -np.inf, priority_scores)\n    return priority_scores",
    "response_id": 2,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response3.txt_stdout.txt",
    "code_path": "problem_iter2_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balances fit and leftover space using a combination of capacity closeness and minimal remaining space penalty.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    # Close fit factor encourages bins with remaining capacity close to item size\n    close_fit_factor = np.clip(1 - space_left / bins_remain_cap, 0, 1)\n    # Leftover space penalty discourages bins with large leftover space\n    leftover_penalty = 1 - (space_left / bins_remain_cap)\n    # Combined priority: encourage close fit while penalizing leftover space\n    priority = can_fit * (close_fit_factor + 0.5 * leftover_penalty)\n    return priority",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response4.txt_stdout.txt",
    "code_path": "problem_iter2_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritize bins by balancing the remaining capacity and leftover space efficiency.\"\"\"\n    ifbinsfit = bins_remain_cap >= item\n    priority = np.where(ifbinsfit, 1.0 / (bins_remain_cap - item + 1e-6), -np.inf)\n    return priority * (bins_remain_cap / np.max(bins_remain_cap, initial=1.0))",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response5.txt_stdout.txt",
    "code_path": "problem_iter2_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines remaining capacity and balanced waste reduction to prioritize bins.\n    \n    Prioritizes bins that fit the item well while penalizing excessive leftover space.\"\"\"\n\n    # Calculate waste reduction if item is added to each bin\n    waste_reduction = bins_remain_cap - item\n    \n    # Items that cannot fit in the bin get a very low priority\n    priority_score = np.where(waste_reduction >= 0, waste_reduction, -1000)\n    \n    # Balance by reducing priority for bins with significantly more remaining capacity\n    balance_factor = 1.0 / (bins_remain_cap + 1e-6)\n    balanced_priority = priority_score * balance_factor\n    \n    return balanced_priority",
    "response_id": 5,
    "tryHS": false,
    "obj": 149.30195452732352,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response6.txt_stdout.txt",
    "code_path": "problem_iter2_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balances fit and leftover space penalty with sigmoidal adjustment for better bin packing.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure item can fit into the bin\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    \n    # Base priority: more space left after adding item\n    base_priority = can_fit * (bins_remain_cap - item)\n    \n    # Sigmoidal penalty for larger remaining space to encourage tight packing\n    penalty = 1 / (1 + np.exp(-0.5 * (bins_remain_cap - np.median(bins_remain_cap))))\n    \n    # Combine base priority with penalty\n    priority = base_priority * (1 - penalty)\n    \n    # Normalize priority to 0-1 range\n    priority = (priority - np.min(priority)) / (np.max(priority) - np.min(priority))\n    \n    # Handle edge case where all priorities are zero due to same bin capacities\n    if np.isnan(priority).all() or np.isinf(priority).all():\n        return np.zeros_like(bins_remain_cap)\n    \n    return priority",
    "response_id": 6,
    "tryHS": false,
    "obj": 67.6705225368967,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response7.txt_stdout.txt",
    "code_path": "problem_iter2_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balances item fit and minimal leftover space using a penalized approach.\"\"\"\n    # Penalize bins with too much leftover space\n    leftover_penalty = (bins_remain_cap - item) ** 2\n    # Prioritize bins that can fit the item closely\n    close_fit_priority = np.clip(bins_remain_cap - item, 0, 1)\n    # Combine priorities: emphasize close fit while penalizing excessive leftover space\n    priority_score = close_fit_priority - leftover_penalty\n    return priority_score",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.11846828879138,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response8.txt_stdout.txt",
    "code_path": "problem_iter2_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balances fit and leftover space using a combination of fit criterion and space efficiency.\n    \n    Args:\n        item: Size of item to be added.\n        bins_remain_cap: Array of remaining capacities for each bin.\n\n    Return:\n        Array of priority scores for each bin.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    fit_penalty = 1 - (space_left / bins_remain_cap)\n    close_fit_factor = np.clip(bins_remain_cap - item, 0, 1)\n    priority = can_fit * (fit_penalty + close_fit_factor)\n    return priority",
    "response_id": 8,
    "tryHS": false,
    "obj": 5.195452732349436,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter2_response9.txt_stdout.txt",
    "code_path": "problem_iter2_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Balances fit suitability and minimizes leftover space with adaptive bin prioritization.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    # Encourage bins that can fit the item with penalty for leftover space\n    fit_priority = can_fit * (1 - (space_left / bins_remain_cap))\n    # Prioritize bins with remaining capacity close to the item size but not less\n    close_fit_priority = np.clip(bins_remain_cap - item, 0, 1)\n    # Combine priorities with adaptive weights\n    priority = 0.7 * fit_priority + 0.3 * close_fit_priority\n    return priority",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.96609493418428,
    "SLOC": 7.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter3_response0.txt_stdout.txt",
    "code_path": "problem_iter3_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This heuristic uses a modular approach with two main components:\n    1. Tightness Heuristic: Prioritizes bins that are almost full.\n    2. Balance Heuristic: Penalizes bins that are too full or too empty compared to others.\n\n    The priorities are combined with weights to balance their influence.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure no division by zero\n    bins_remain_cap_safe = bins_remain_cap + 1e-6\n    \n    # Tightness Heuristic: Prioritize bins that are almost full\n    tightness_score = 1.0 / bins_remain_cap_safe * np.sin(np.pi / 2 * (bins_remain_cap_safe / np.max(bins_remain_cap_safe)))\n\n    # Balance Heuristic: Calculate standard deviation of remaining capacities\n    avg_remain_cap = np.mean(bins_remain_cap_safe)\n    std_remain_cap = np.std(bins_remain_cap_safe)\n    \n    # Penalize bins that are too full or too empty\n    balance_score = 1.0 / (np.abs(bins_remain_cap_safe - avg_remain_cap) + 1e-6)\n    \n    # Normalize scores\n    tightness_score /= np.max(tightness_score)\n    balance_score /= np.max(balance_score)\n    \n    # Combine scores with weights\n    # Weights can be adjusted based on empirical results or adaptive learning\n    weight_tightness = 0.7\n    weight_balance = 0.3\n    \n    priority_score = (weight_tightness * tightness_score) + (weight_balance * balance_score)\n    \n    return priority_score",
    "response_id": 0,
    "tryHS": false,
    "obj": 41.75309134423614,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter3_response1.txt_stdout.txt",
    "code_path": "problem_iter3_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This heuristic uses a modular approach with two main components:\n    1. Tightness Heuristic: Prioritizes bins that are almost full.\n    2. Balance Heuristic: Penalizes bins that are too full or too empty compared to others.\n\n    The priorities are combined with weights to balance between filling bins tightly\n    and maintaining a good balance across all bins.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Normalize remaining capacities\n    max_cap = np.max(bins_remain_cap) + 1e-6\n    norm_remain_cap = bins_remain_cap / max_cap\n\n    # Tightness Heuristic: High priority for bins that are almost full\n    tightness_score = 1.0 / (bins_remain_cap + 1e-6)\n\n    # Balance Heuristic: Penalize bins that are too full or too empty\n    # Mean remaining capacity\n    mean_cap = np.mean(norm_remain_cap)\n    # Deviation from mean capacity\n    deviation = np.abs(norm_remain_cap - mean_cap)\n    # Balance score: Low penalty for bins closer to the mean capacity\n    balance_score = 1.0 / (deviation + 1e-6)\n\n    # Combine scores with weights\n    # Adjust weights based on item size relative to max capacity\n    item_weight = item / max_cap\n    tightness_weight = 1.0 - item_weight\n    balance_weight = item_weight\n\n    # Final priority score\n    priority_scores = (tightness_heuristic_weight * tightness_score +\n                       balance_weight * balance_score)\n    \n    return priority_scores",
    "response_id": 1,
    "tryHS": false,
    "exec_success": false,
    "obj": Infinity,
    "traceback_msg": "Traceback (most recent call last):\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 112, in <module>\n    avg_num_bins = -evaluate(dataset)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 55, in evaluate\n    _, bins_packed = online_binpack(items.astype(float), bins)\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/eval.py\", line 28, in online_binpack\n    priorities = priority(item, bins[valid_bin_indices])\n  File \"/home/dokhanhnam1199/QD/problems/bpp_online/gpt.py\", line 43, in priority_v2\nNameError: name 'tightness_heuristic_weight' is not defined\n9\n1\n"
  },
  {
    "stdout_filepath": "problem_iter3_response2.txt_stdout.txt",
    "code_path": "problem_iter3_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This heuristic combines several modular sub-heuristics:\n    1. Scaled Remaining Capacity: Prioritizes bins with less remaining capacity.\n    2. Balance Factor: Encourages a more balanced distribution of items across bins.\n    3. Last Fit Decrease (LFD) Heuristic: Gives priority to bins where the last fit was larger.\n    4. Adaptive Learning: Weights the heuristics based on past performance.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Parameters for adaptive learning\n    alpha = 0.5  # Weight for Scaled Remaining Capacity\n    beta = 0.3   # Weight for Balance Factor\n    gamma = 0.2  # Weight for Last Fit Decrease\n\n    # Scaled Remaining Capacity: Lower capacity -> Higher priority\n    scaled_remaining_capacity = 1.0 / (bins_remain_cap + 1e-6)\n\n    # Balance Factor: Encourage a more balanced distribution\n    mean_cap = np.mean(bins_remain_cap)\n    balance_factor = np.abs(mean_cap - bins_remain_cap)\n\n    # Last Fit Decrease (LFD) Heuristic\n    last_fit_decrease = np.zeros_like(bins_remain_cap)\n    if len(bins_remain_cap) > 1:\n        last_fit_decrease[1:] = bins_remain_cap[:-1] - bins_remain_cap[1:]\n\n    # Combine heuristics with adaptive learning\n    priority_scores = (\n        alpha * scaled_remaining_capacity +\n        beta * (1 - balance_factor / np.max(balance_factor + 1e-6)) +\n        gamma * last_fit_decrease\n    )\n\n    return priority_scores",
    "response_id": 2,
    "tryHS": false,
    "obj": 5.684084563222976,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter3_response3.txt_stdout.txt",
    "code_path": "problem_iter3_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This heuristic uses a modular approach with two main components:\n    1. Tightness Heuristic: Prioritizes bins that are almost full.\n    2. Balance Heuristic: Penalizes bins that are too full or too empty compared to others.\n\n    The heuristics are combined with weights that can be adjusted to emphasize one over the other.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Parameters for the heuristics\n    tightness_weight = 0.7\n    balance_weight = 0.3\n\n    # Tightness Heuristic: Prioritize bins that are almost full\n    tightness_score = 1.0 / (bins_remain_cap + 1e-6) * np.sin(np.pi / 2 * (bins_remain_cap / (np.max(bins_remain_cap) + 1e-6)))\n\n    # Balance Heuristic: Penalize bins that are too full or too empty compared to others\n    average_remain_cap = np.mean(bins_remain_cap)\n    balance_score = np.exp(-((bins_remain_cap - average_remain_cap) ** 2) / (2 * (average_remain_cap / 4) ** 2))\n\n    # Combine both heuristics with weights\n    priority_score = (tightness_weight * tightness_score) + (balance_weight * balance_score)\n\n    return priority_score",
    "response_id": 3,
    "tryHS": false,
    "obj": 60.37096130833667,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter3_response4.txt_stdout.txt",
    "code_path": "problem_iter3_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Returns priority with which we want to add item to each bin.\n\n    This heuristic uses a modular approach with two main components:\n    1. Tightness Heuristic: Prioritizes bins that are almost full.\n    2. Balance Heuristic: Penalizes bins that are too full or too empty compared to others.\n\n    The priorities are combined with weights to balance their influence.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Returns:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    # Ensure no division by zero\n    bins_remain_cap_safe = bins_remain_cap + 1e-6\n    \n    # Tightness Heuristic: Prioritize bins that are almost full\n    tightness_score = 1.0 / bins_remain_cap_safe * np.sin(np.pi / 2 * (bins_remain_cap_safe / (np.max(bins_remain_cap_safe))))\n    \n    # Balance Heuristic: Encourage a balance between all bins\n    avg_remain_cap = np.mean(bins_remain_cap_safe)\n    balance_score = np.abs(bins_remain_cap_safe - avg_remain_cap)\n    \n    # Combine scores with weights\n    # You can adjust the weights to prioritize tightness or balance more\n    tightness_weight = 0.8\n    balance_weight = 0.2\n    \n    # Encourage bins that are tight but avoid extremely tight bins\n    priority_scores = tightness_weight * tightness_score - balance_weight * balance_score\n    \n    return priority_scores",
    "response_id": 4,
    "tryHS": false,
    "obj": 60.6003191065018,
    "SLOC": 9.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter4_response0.txt_stdout.txt",
    "code_path": "problem_iter4_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float, \n    bins_remain_cap: np.ndarray, \n    sigmoid_steepness: float = 9.227204138675623,\n    sigmoid_offset: float = 2.8153062240300635) -> np.ndarray:\n    \"\"\"Combines fit-check and minimized leftover space with a sigmoid penalty for larger remaining space.\"\"\"\n    can_fit = bins_remain_cap >= item\n    space_left = bins_remain_cap - item\n    penalty = 1 / (1 + np.exp(sigmoid_steepness * (space_left - sigmoid_offset)))  # Sigmoid penalty for leftover space\n    priority = can_fit * penalty\n    return priority",
    "response_id": 0,
    "tryHS": true,
    "obj": 4.048663741523748,
    "SLOC": 10.0,
    "cyclomatic_complexity": 1.0,
    "exec_success": true
  }
]