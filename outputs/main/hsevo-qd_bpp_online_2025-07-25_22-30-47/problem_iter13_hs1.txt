import numpy as np

def priority_v2(
    item: float, 
    bins_remain_cap: np.ndarray,
    alpha: float = 0.8671902100732771,  # Weight for Scaled Remaining Capacity
    beta: float = 0.1284832526578008,   # Weight for Balance Factor
    gamma: float = 0.18482012741945242,  # Weight for Last Fit Decrease
    sigmoid_penalty_threshold: float = 4.561580731670823e-06) -> np.ndarray:
    """
    Combines adaptive learning with sigmoid penalties and balance factor for efficient bin placement.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.
        alpha: Weight for Scaled Remaining Capacity.
        beta: Weight for Balance Factor.
        gamma: Weight for Last Fit Decrease.
        sigmoid_penalty_threshold: Threshold for sigmoid penalty.

    Returns:
        Array of priority scores for each bin.
    """
    # Scaled Remaining Capacity with sigmoid penalty
    scaled_remaining_capacity = np.where(
        bins_remain_cap >= item, 
        1.0 / (bins_remain_cap - item + sigmoid_penalty_threshold), 
        -np.inf
    )

    # Balance Factor: Encourage a more balanced distribution
    mean_cap = np.mean(bins_remain_cap)
    balance_factor = np.abs(mean_cap - bins_remain_cap) / np.max(np.abs(mean_cap - bins_remain_cap) + 1e-6)

    # Last Fit Decrease (LFD) Heuristic
    last_fit_decrease = np.zeros_like(bins_remain_cap)
    if len(bins_remain_cap) > 1:
        last_fit_decrease[1:] = bins_remain_cap[:-1] - bins_remain_cap[1:]

    # Combine heuristics with adaptive learning
    priority_scores = (
        alpha * scaled_remaining_capacity +
        beta * (1 - balance_factor) +
        gamma * last_fit_decrease
    )

    return priority_scores
