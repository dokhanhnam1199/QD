```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritize bins using dynamic adaptive learning with balanced penalties and refined balance factors.

    Args:
        item: Size of item to be added.
        bins_remain_cap: Array of remaining bin capacities.

    Returns:
        Array of priority scores for each bin.
    """
    # Adaptive Threshold Calculation
    max_bin_capacity = np.max(bins_remain_cap)
    threshold_factor = 0.05  # Dynamic adjustment factor
    sigmoid_penalty_threshold = max_bin_capacity * threshold_factor
    balance_factor_threshold = max_bin_capacity * threshold_factor

    # Scaled Remaining Capacity with sigmoid penalty
    scaled_remaining_capacity = np.where(bins_remain_cap >= item, 
                                       1.0 / (bins_remain_cap - item + sigmoid_penalty_threshold), 
                                       -np.inf)

    # Refined Balance Factor: Encourage a more balanced distribution with adaptive threshold
    mean_cap = np.mean(bins_remain_cap)
    balance_factor = np.abs(mean_cap - bins_remain_cap) / np.max(np.abs(mean_cap - bins_remain_cap) + balance_factor_threshold)

    # Last Fit Decrease (LFD) Heuristic with dynamic weighting
    last_fit_decrease = np.zeros_like(bins_remain_cap)
    if len(bins_remain_cap) > 1:
        last_fit_decrease[1:] = bins_remain_cap[:-1] - bins_remain_cap[1:]
    last_fit_decrease_weight = 0.02  # Dynamic weight for LFD

    # Dynamic Weights for heuristics based on the number of bins and average remaining capacity
    alpha = 0.8703526170915381  # Scaled Remaining Capacity weight
    beta = 0.26928992154797116   # Balance Factor weight
    gamma = 0.015623035472155156  # Last Fit Decrease weight

    # Combine heuristics with adaptive learning
    priority_scores = (
        alpha * scaled_remaining_capacity +
        beta * (1 - balance_factor) +
        gamma * last_fit_decrease
    )

    return priority_scores
```
