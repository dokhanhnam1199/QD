```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritize bins using a hybrid heuristic with adaptive learning, balance factor, and sigmoid penalty.
    """
    # Calculate remaining capacity after placing the item
    remaining_capacity_after_item = bins_remain_cap - item
    
    # Scaled Remaining Capacity with sigmoid penalty
    sigmoid_penalty_threshold = 7.870147266070587e-06
    scaled_remaining_capacity = np.where(
        bins_remain_cap >= item, 
        1.0 / (remaining_capacity_after_item + sigmoid_penalty_threshold), 
        -np.inf
    )
    
    # Balance Factor: Encourage a more balanced distribution
    mean_cap = np.mean(bins_remain_cap)
    balance_factor_threshold = 8.54060876899628e-06
    balance_factor = np.abs(mean_cap - bins_remain_cap) / (np.max(np.abs(mean_cap - bins_remain_cap)) + balance_factor_threshold)
    balance_penalty = 1 - balance_factor
    
    # Last Fit Decrease (LFD) Heuristic
    last_fit_decrease = np.zeros_like(bins_remain_cap)
    if len(bins_remain_cap) > 1:
        last_fit_decrease[1:] = bins_remain_cap[:-1] - bins_remain_cap[1:]
    
    # Adaptive coefficients based on the difference between the item size and mean bin capacity
    delta = item - mean_cap
    adaptive_alpha = 1 / (1 + np.exp(-delta))  # Smooth step function for dynamic weighting
    adaptive_beta = 1 - adaptive_alpha
    adaptive_gamma = 0.1  # Small constant for ranking reward to keep it balanced
    
    # Combine heuristics with dynamic adaptive learning
    priority_scores = (
        adaptive_alpha * scaled_remaining_capacity +
        adaptive_beta * balance_penalty +
        adaptive_gamma * last_fit_decrease
    )
    
    return priority_scores
```
