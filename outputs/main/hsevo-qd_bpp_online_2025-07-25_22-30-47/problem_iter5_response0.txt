```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines fit penalty, balance heuristic, and sigmoid functions for efficient bin placement.
    
    Args:
        item: Size of item to be added.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of priority scores for each bin.
    """
    can_fit = bins_remain_cap >= item
    space_left = bins_remain_cap - item
    fit_penalty = 1 - (space_left / bins_remain_cap)
    close_fit_factor = np.clip(bins_remain_cap - item, 0, 1)
    
    # Balance heuristic: Penalize bins that are too full or too empty
    average_remain_cap = np.mean(bins_remain_cap)
    balance_penalty = np.exp(-((bins_remain_cap - average_remain_cap) ** 2) / (2 * (average_remain_cap / 4) ** 2))
    
    # Combined score using sigmoid for balance and fit
    priority_score = can_fit * (fit_penalty + close_fit_factor) * balance_penalty
    return priority_score
```
