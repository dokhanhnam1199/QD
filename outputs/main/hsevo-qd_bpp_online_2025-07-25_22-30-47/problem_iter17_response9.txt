```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritize bins using dynamic adaptive learning, refined balance factors, and sigmoid penalties.
    """
    # Adaptive Threshold Calculation
    max_bin_capacity = np.max(bins_remain_cap)
    threshold_factor = 0.05
    sigmoid_penalty_threshold = max_bin_capacity * threshold_factor
    balance_factor_threshold = max_bin_capacity * threshold_factor

    # Scaled Remaining Capacity with sigmoid penalty
    scaled_remaining_capacity = np.where(
        bins_remain_cap >= item, 
        1.0 / (bins_remain_cap - item + sigmoid_penalty_threshold), 
        -np.inf
    )

    # Refined Balance Factor
    mean_cap = np.mean(bins_remain_cap)
    balance_factor = np.where(
        np.abs(mean_cap - bins_remain_cap) < balance_factor_threshold, 
        0, 
        np.abs(mean_cap - bins_remain_cap) / np.max(np.abs(mean_cap - bins_remain_cap) + balance_factor_threshold)
    )

    # Last Fit Decrease (LFD) Heuristic with dynamic weighting
    last_fit_decrease = np.zeros_like(bins_remain_cap)
    if len(bins_remain_cap) > 1:
        last_fit_decrease[1:] = bins_remain_cap[:-1] - bins_remain_cap[1:]
    last_fit_decrease_weight = 0.02

    # Dynamic Weights for heuristics
    alpha = 2 / (1 + np.exp(-0.5 * len(bins_remain_cap)))
    beta = 1 - alpha - last_fit_decrease_weight

    # Combine heuristics
    priority_scores = (
        alpha * scaled_remaining_capacity +
        beta * (1 - balance_factor) +
        last_fit_decrease_weight * last_fit_decrease
    )

    return priority_scores
```
