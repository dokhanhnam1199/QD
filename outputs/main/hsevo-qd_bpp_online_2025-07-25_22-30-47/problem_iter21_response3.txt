```python
import numpy as np
from sklearn.linear_model import SGDRegressor

class OnlineBppHeuristic:
    def __init__(self):
        # Initialize a machine learning model for adaptive learning
        self.model = SGDRegressor(max_iter=1, tol=None, learning_rate='invscaling', eta0=0.01)
        # Initialize with some default weights
        self.weights = np.array([0.8703526170915381, 0.26928992154797116, 0.015623035472155156])
        self.sigmoid_penalty_threshold = 7.870147266070587e-06
        self.balance_factor_threshold = 8.54060876899628e-06
        # Storage for past data to improve adaptive learning
        self.past_data = []
        self.past_labels = []

    def refine_weights(self):
        # Refine weights using stored past data
        if len(self.past_data) > 0:
            self.past_data = np.array(self.past_data)
            self.past_labels = np.array(self.past_labels)
            self.model.fit(self.past_data, self.past_labels)
            # Update weights
            self.weights = self.model.coef_

    def priority_v2(self, item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
        # Scaled Remaining Capacity with sigmoid penalty
        scaled_remaining_capacity = np.where(
            bins_remain_cap >= item, 
            1.0 / (bins_remain_cap - item + self.sigmoid_penalty_threshold), 
            -np.inf
        )

        # Balance Factor: Encourage a more balanced distribution
        mean_cap = np.mean(bins_remain_cap)
        balance_factor = np.abs(mean_cap - bins_remain_cap) / np.max(np.abs(mean_cap - bins_remain_cap) + self.balance_factor_threshold)

        # Last Fit Decrease (LFD) Heuristic
        last_fit_decrease = np.zeros_like(bins_remain_cap)
        if len(bins_remain_cap) > 1:
            last_fit_decrease[1:] = bins_remain_cap[:-1] - bins_remain_cap[1:]

        # Collect current features for adaptive learning
        features = np.column_stack((scaled_remaining_capacity, 1 - balance_factor, last_fit_decrease))
        # Predict labels to use in the adaptive learning process
        if len(self.past_data) == 0:
            labels = np.sum(features * self.weights, axis=1)
        else:
            labels = self.model.predict(features)

        # Store current data and labels for future refinement
        self.past_data.append(features)
        self.past_labels.append(labels)

        # Combine heuristics with adaptive learning
        priority_scores = labels

        return priority_scores

# Example usage
# heuristic = OnlineBppHeuristic()
# item = 0.5
# bins_remain_cap = np.array([0.9, 0.8, 0.7])
# priority_scores = heuristic.priority_v2(item, bins_remain_cap)
# print(priority_scores)
```
