```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritize bins using dynamic adaptive weights, sigmoid penalties, and refined balance factors.

    Args:
        item: Size of item to be added.
        bins_remain_cap: Array of remaining capacities for each bin.

    Returns:
        Array of priority scores for each bin.
    """
    # Calculate remaining capacity after placing the item
    remaining_capacity_after_item = bins_remain_cap - item

    # Penalty for bins that cannot fit the item
    penalty_for_large_items = np.where(remaining_capacity_after_item < 0, -np.inf, 0)

    # Sigmoid penalty for bins that can fit the item
    sigmoid_penalty_threshold = 1e-6
    sigmoid_penalty = 1.0 / (remaining_capacity_after_item + sigmoid_penalty_threshold)

    # Balance Factor: Encourage a more balanced distribution
    mean_cap = np.mean(bins_remain_cap)
    balance_factor = np.abs(mean_cap - bins_remain_cap) / np.max(np.abs(mean_cap - bins_remain_cap) + 1e-6)
    balance_penalty = 1 - balance_factor

    # Adaptive coefficients based on system state
    load_factor = mean_cap / (np.mean(bins_remain_cap) + 1e-6)
    alpha = np.clip(0.5 + 0.5 * np.tanh((load_factor - 0.5) * 2), 0.0, 1.0)
    beta = np.clip(0.5 - 0.4 * np.tanh((load_factor - 0.5) * 2), 0.0, 1.0)
    gamma = np.clip(0.2 + 0.3 * np.tanh((load_factor - 0.5) * 3), 0.0, 1.0)

    # Combine heuristics with adaptive learning
    priority_scores = (
        alpha * sigmoid_penalty +
        beta * balance_penalty +
        gamma * remaining_capacity_after_item  # Promote filling less used bins
    )

    # Apply penalty for bins that cannot fit the item
    priority_scores += penalty_for_large_items

    return priority_scores
```
