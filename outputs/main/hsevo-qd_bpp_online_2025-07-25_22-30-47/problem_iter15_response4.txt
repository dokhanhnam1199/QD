```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritize bins using a hybrid heuristic that combines adaptive learning, dynamic adjustments,
    and balanced penalties tailored to the domain of bin packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of priority scores for each bin.
    """
    # Calculate the remaining capacity after placing the item
    remaining_capacity_after_item = bins_remain_cap - item

    # Dynamic penalty for bins that cannot fit the item
    penalty_for_large_items = np.where(remaining_capacity_after_item < 0, -np.inf, 0)

    # Penalize bins that are close to being full
    sigmoid_penalty_threshold = 0.0001  # Small threshold to avoid division by zero
    sigmoid_penalty = 1.0 / (remaining_capacity_after_item + sigmoid_penalty_threshold)
    
    # Balance Factor: Encourage a more balanced distribution
    mean_cap = np.mean(bins_remain_cap)
    balance_factor_threshold = 0.001
    balance_factor = np.abs(mean_cap - bins_remain_cap) / (np.max(np.abs(mean_cap - bins_remain_cap)) + balance_factor_threshold)
    balance_penalty = 1 - balance_factor  # Inverse balance factor to penalize imbalance
    
    # Reward bins that are less likely to be the last bin filled (First Fit Decreasing heuristic)
    sorted_bins = np.sort(bins_remain_cap)
    sorted_indices = np.argsort(bins_remain_cap)
    reversed_sorted_indices = sorted_indices[::-1]
    rank_based_reward = np.zeros_like(bins_remain_cap)
    for rank, idx in enumerate(reversed_sorted_indices):
        rank_based_reward[idx] = rank  # Lower rank (better traditional fit) gets higher score
    
    # Adaptive coefficients based on the difference between the item size and mean bin capacity
    delta = item - mean_cap
    adaptive_alpha = 1 / (1 + np.exp(-delta))  # Smooth step function for dynamic weighting
    adaptive_beta = 1 - adaptive_alpha
    adaptive_gamma = 0.1  # Small constant for ranking reward to keep it balanced

    # Combine heuristics with adaptive learning
    priority_scores = (
        adaptive_alpha * sigmoid_penalty +
        adaptive_beta * balance_penalty +
        adaptive_gamma * rank_based_reward
    )

    # Apply penalty for bins that cannot fit the item
    priority_scores += penalty_for_large_items

    return priority_scores
```
