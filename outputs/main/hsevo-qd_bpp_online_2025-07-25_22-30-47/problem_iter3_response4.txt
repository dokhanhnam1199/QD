```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Returns priority with which we want to add item to each bin.

    This heuristic uses a modular approach with two main components:
    1. Tightness Heuristic: Prioritizes bins that are almost full.
    2. Balance Heuristic: Penalizes bins that are too full or too empty compared to others.

    The priorities are combined with weights to balance their influence.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Ensure no division by zero
    bins_remain_cap_safe = bins_remain_cap + 1e-6
    
    # Tightness Heuristic: Prioritize bins that are almost full
    tightness_score = 1.0 / bins_remain_cap_safe * np.sin(np.pi / 2 * (bins_remain_cap_safe / (np.max(bins_remain_cap_safe))))
    
    # Balance Heuristic: Encourage a balance between all bins
    avg_remain_cap = np.mean(bins_remain_cap_safe)
    balance_score = np.abs(bins_remain_cap_safe - avg_remain_cap)
    
    # Combine scores with weights
    # You can adjust the weights to prioritize tightness or balance more
    tightness_weight = 0.8
    balance_weight = 0.2
    
    # Encourage bins that are tight but avoid extremely tight bins
    priority_scores = tightness_weight * tightness_score - balance_weight * balance_score
    
    return priority_scores
```
