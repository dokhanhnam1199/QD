```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines adaptive learning with sigmoid penalties and balance factor, using dynamic weights based on item size.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of priority scores for each bin.
    """
    sigmoid_penalty_threshold = 1e-6
    mean_cap = np.mean(bins_remain_cap)
    delta = item - mean_cap
    adaptive_alpha = 1 / (1 + np.exp(-delta))  # Smooth step function for dynamic weighting
    adaptive_beta = 1 - adaptive_alpha
    adaptive_gamma = 0.2  # Small constant for ranking reward

    # Scaled Remaining Capacity with sigmoid penalty
    scaled_remaining_capacity = np.where(
        bins_remain_cap >= item, 
        1.0 / (bins_remain_cap - item + sigmoid_penalty_threshold), 
        -np.inf
    )

    # Balance Factor: Encourage a more balanced distribution
    balance_factor = np.abs(mean_cap - bins_remain_cap) / np.max(np.abs(mean_cap - bins_remain_cap) + 1e-6)
    balance_penalty = 1 - balance_factor

    # Rank-based reward for First Fit Decreasing heuristic
    sorted_indices = np.argsort(bins_remain_cap)[::-1]
    rank_based_reward = np.zeros_like(bins_remain_cap)
    for rank, idx in enumerate(sorted_indices):
        rank_based_reward[idx] = rank

    # Combine heuristics with adaptive learning
    priority_scores = (
        adaptive_alpha * scaled_remaining_capacity +
        adaptive_beta * balance_penalty +
        adaptive_gamma * rank_based_reward
    )

    return priority_scores
```
