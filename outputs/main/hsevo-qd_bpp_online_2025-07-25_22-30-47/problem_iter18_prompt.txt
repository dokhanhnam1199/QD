{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    item: float, \n    bins_remain_cap: np.ndarray, \n    alpha: float = 0.8703526170915381, \n    beta: float = 0.26928992154797116, \n    gamma: float = 0.015623035472155156, \n    sigmoid_penalty_threshold: float = 7.870147266070587e-06, \n    balance_factor_threshold: float = 8.54060876899628e-06) -> np.ndarray:\n    \"\"\"\n    Prioritize bins by combining adaptive learning, balance factor, and sigmoid penalty.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        alpha: Weight for Scaled Remaining Capacity.\n        beta: Weight for Balance Factor.\n        gamma: Weight for Last Fit Decrease.\n        sigmoid_penalty_threshold: Threshold for sigmoid penalty calculation.\n        balance_factor_threshold: Threshold for balance factor calculation.\n\n    Returns:\n        Array of priority scores for each bin.\n    \"\"\"\n    # Scaled Remaining Capacity with sigmoid penalty\n    scaled_remaining_capacity = np.where(\n        bins_remain_cap >= item, \n        1.0 / (bins_remain_cap - item + sigmoid_penalty_threshold), \n        -np.inf\n    )\n\n    # Balance Factor: Encourage a more balanced distribution\n    mean_cap = np.mean(bins_remain_cap)\n    balance_factor = np.abs(mean_cap - bins_remain_cap) / np.max(np.abs(mean_cap - bins_remain_cap) + balance_factor_threshold)\n\n    # Last Fit Decrease (LFD) Heuristic\n    last_fit_decrease = np.zeros_like(bins_remain_cap)\n    if len(bins_remain_cap) > 1:\n        last_fit_decrease[1:] = bins_remain_cap[:-1] - bins_remain_cap[1:]\n\n    # Combine heuristics with adaptive learning\n    priority_scores = (\n        alpha * scaled_remaining_capacity +\n        beta * (1 - balance_factor) +\n        gamma * last_fit_decrease\n    )\n\n    return priority_scores\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \n- **Keywords**: Adaptive learning, dynamic weights, threshold optimization, domain-specific data\n- **Advice**: Continuously calibrate weights and thresholds based on domain-specific data to optimize performance. Implement adaptive learning to refine balance factors over iterations.\n- **Avoid**: Overly complex algorithms, static parameters, random adjustments, and generic approaches.\n- **Explanation**: By focusing on dynamic and adaptive mechanisms grounded in specific domain data, the heuristic can become more responsive and efficient. This avoids the pitfalls of one-size-fits-all solutions and the inefficiencies caused by static parameters or random transformations.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}