```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines fit-check, sigmoid penalty, and adaptive balance heuristic for efficient online BPP.
    """
    can_fit = bins_remain_cap >= item
    space_left = bins_remain_cap - item
    sigmoid_steepness = 5.0
    sigmoid_offset = 1.5
    penalty = 1 / (1 + np.exp(sigmoid_steepness * (space_left - sigmoid_offset)))
    
    # Adaptive balance heuristic
    average_remain_cap = np.mean(bins_remain_cap)
    balance_penalty = np.exp(-((bins_remain_cap - average_remain_cap) ** 2) / (2 * (average_remain_cap / 4) ** 2))
    
    priority = can_fit * penalty * balance_penalty
    return priority
```
