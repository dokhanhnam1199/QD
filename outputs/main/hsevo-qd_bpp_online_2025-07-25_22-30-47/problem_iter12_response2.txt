```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritize bins by combining adaptive learning, dynamic balance factor, and refined penalty mechanisms.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of priority scores for each bin.
    """
    # Adaptive Threshold Calculation
    num_bins = len(bins_remain_cap)
    mean_cap = np.mean(bins_remain_cap)
    std_cap = np.std(bins_remain_cap)
    
    # Dynamic Scaled Remaining Capacity with Adaptive Penalty
    adaptive_penalty_threshold = max(1e-6, std_cap / 10)  # Lower bound to avoid division by zero
    scaled_remaining_capacity = np.where(
        bins_remain_cap >= item, 
        1.0 / (bins_remain_cap - item + adaptive_penalty_threshold), 
        -np.inf
    )

    # Dynamic Balance Factor: Encourage a more balanced distribution with dynamic thresholds
    balance_factor_threshold = max(1e-6, std_cap / 5)  # Dynamic balance factor threshold
    balance_factor = np.abs(mean_cap - bins_remain_cap) / np.max(np.abs(mean_cap - bins_remain_cap) + balance_factor_threshold)

    # Last Fit Decrease (LFD) Heuristic with Adaptive Adjustment
    last_fit_decrease = np.zeros_like(bins_remain_cap)
    if num_bins > 1:
        last_fit_decrease[1:] = bins_remain_cap[:-1] - bins_remain_cap[1:]
    lfd_weight = np.exp(-np.arange(num_bins) / num_bins)  # Weighting recent bins more heavily
    last_fit_decrease *= lfd_weight

    # Adaptive Learning: Adjusting weights dynamically
    alpha = 2 / (1 + np.exp(-0.05 * (item - mean_cap)))  # Adaptive weight for scaled remaining capacity
    beta = 1 / (1 + np.exp(-0.02 * (std_cap - mean_cap)))  # Adaptive weight for balance factor
    gamma = 1 - alpha - beta  # Remaining weight for LFD heuristic

    # Combine heuristics with adaptive learning
    priority_scores = (
        alpha * scaled_remaining_capacity +
        beta * (1 - balance_factor) +
        gamma * last_fit_decrease
    )

    return priority_scores
```
