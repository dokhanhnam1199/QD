```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritize bins using dynamic adaptive learning, balanced penalties, and sigmoid functions.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of priority scores for each bin.
    """
    alpha = 0.7  # Weight for scaled remaining capacity
    beta = 0.25  # Weight for balance factor
    gamma = 0.05 # Weight for last fit decrease

    # Scaled Remaining Capacity with sigmoid penalty
    scaled_remaining_capacity = np.where(bins_remain_cap >= item, 1.0 / (bins_remain_cap - item + 1e-6), -np.inf)

    # Enhanced Balance Factor with sigmoid
    mean_cap = np.mean(bins_remain_cap)
    balance_factor = np.abs(mean_cap - bins_remain_cap) / (np.max(np.abs(mean_cap - bins_remain_cap)) + 1e-6)
    balance_factor = 1 / (1 + np.exp(balance_factor * 2))  # Sigmoid transformation for smooth balance

    # Last Fit Decrease
    last_fit_decrease = np.zeros_like(bins_remain_cap)
    if len(bins_remain_cap) > 1:
        last_fit_decrease[1:] = np.maximum(bins_remain_cap[:-1] - bins_remain_cap[1:], 0)

    # Combined heuristics
    priority_scores = (
        alpha * scaled_remaining_capacity +
        beta * balance_factor +  # Invert the balance factor to positive impact
        gamma * last_fit_decrease
    )

    # Adjust priority scores to prioritize less filled bins slightly more
    priority_scores -= 0.01 * (1 - bins_remain_cap / np.max(bins_remain_cap + 1e-6))
    
    return priority_scores
```
