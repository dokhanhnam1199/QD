```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritize bins by combining adaptive learning, dynamic balance factor, and refined penalty mechanisms.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of priority scores for each bin.
    """
    # Adaptive Scaled Remaining Capacity with Dynamic Threshold
    mean_remain_cap = np.mean(bins_remain_cap)
    dynamic_threshold = 0.1 * mean_remain_cap  # Dynamic threshold based on mean remaining capacity
    scaled_remaining_capacity = np.where(
        bins_remain_cap >= item, 
        1.0 / (bins_remain_cap - item + dynamic_threshold), 
        -np.inf
    )

    # Refined Balance Factor: Encourage a more balanced distribution
    std_dev = np.std(bins_remain_cap)
    balance_factor = np.where(
        std_dev > 1e-6,  # Avoid division by zero or near-zero std_dev
        np.abs(bins_remain_cap - mean_remain_cap) / std_dev,
        0.0
    )

    # Dynamic Last Fit Decrease (LFD) Heuristic
    last_fit_decrease = np.zeros_like(bins_remain_cap)
    if len(bins_remain_cap) > 1:
        last_fit_decrease[1:] = np.where(
            bins_remain_cap[:-1] > bins_remain_cap[1:],
            bins_remain_cap[:-1] - bins_remain_cap[1:],
            0.0
        )

    # Adaptive Learning Weights
    alpha = 0.9 / (1 + np.exp(-0.1 * (len(bins_remain_cap) - 10)))  # Adjusts based on number of bins
    beta = 0.4 / (1 + np.exp(-0.1 * (mean_remain_cap - 5)))          # Adjusts based on mean remaining capacity
    gamma = 0.3                                                    # Fixed for simplicity, can be adjusted further

    # Combine heuristics with adaptive learning
    priority_scores = (
        alpha * scaled_remaining_capacity +
        beta * (1 - balance_factor) +
        gamma * last_fit_decrease
    )

    return priority_scores
```
