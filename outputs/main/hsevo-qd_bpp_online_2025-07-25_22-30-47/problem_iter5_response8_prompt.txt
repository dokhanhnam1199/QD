{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Prioritize bins by balancing the remaining capacity and leftover space efficiency.\"\"\"\n    ifbinsfit = bins_remain_cap >= item\n    priority = np.where(ifbinsfit, 1.0 / (bins_remain_cap - item + 1e-6), -np.inf)\n    return priority * (bins_remain_cap / np.max(bins_remain_cap, initial=1.0))\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Balances item fit and minimal leftover space using a penalized approach.\"\"\"\n    # Penalize bins with too much leftover space\n    leftover_penalty = (bins_remain_cap - item) ** 2\n    # Prioritize bins that can fit the item closely\n    close_fit_priority = np.clip(bins_remain_cap - item, 0, 1)\n    # Combine priorities: emphasize close fit while penalizing excessive leftover space\n    priority_score = close_fit_priority - leftover_penalty\n    return priority_score\n\n### Analyze & experience\n- Comparing (best) vs (worst), we see that the best heuristic (1st) effectively combines a sigmoid penalty to minimize leftover space while fitting the item, balancing tight bins and avoiding overflow elegantly. The worst (20th) repeats logic seen in weaker heuristics, without proper adjustments or penalties for larger remaining spaces.\n(second best) vs (second worst) illustrates the superiority of using modular sub-heuristics with adaptive learning (12th) compared to simplistic waste reduction strategies (19th) without balancing factors or penalties.\nComparing (1st) vs (2nd), we see the first uses a sigmoid function with specific parameters for penalty, which is more flexible and performance-driven than the sinusoidal inverse capacity method in the second.\n(3rd) vs (4th) highlights the necessity of specific parameters for sigmoid functions to effectively penalize larger spaces, as the third achieves better tuning than the fourth\u2019s generic handling.\nComparing (second worst) vs (worst), we see repetitive wasteful strategies without penalty mechanisms, underscoring the value of advanced heuristics with balanced approaches and penalties.\nOverall: Advanced heuristics combining multiple factors like adaptive learning, balance penalties, and sigmoid functions outperform simpler strategies.\n- \n- **Keywords**: Adaptive learning, balanced penalties, sigmoid functions, bin packing efficiency, heuristic design.\n- **Advice**: Focus on refining and fine-tuning the parameters of the adaptive learning mechanism to better address specific bin packing patterns and scenarios. Continuously assess and adjust penalties for inefficiencies dynamically without introducing unnecessary complexity.\n- **Avoid**: Overly complex transformations that complicate the heuristic without providing significant benefits. Random elements or changes that lack a clear rationale for improving performance.\n- **Explanation**: Effective self-reflection involves understanding the strengths and limitations of current strategies while making informed adjustments. By concentrating on refining adaptive learning and penalties dynamically, we can enhance efficiency without adding unnecessary complexity or randomness, which could degrade performance.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}