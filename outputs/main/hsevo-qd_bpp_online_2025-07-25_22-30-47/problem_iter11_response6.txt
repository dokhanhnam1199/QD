```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Prioritize bins using dynamic adaptive weights and sigmoid penalties for efficient packing.
    
    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Returns:
        Array of priority scores for each bin.
    """
    # Dynamic weights based on system load
    load_factor = np.mean(bins_remain_cap) / np.mean(bins_remain_cap) if np.mean(bins_remain_cap) > 0 else 1.0
    alpha = np.clip(0.5 + 0.5 * np.tanh((load_factor - 0.5) * 2), 0.0, 1.0)
    beta = np.clip(0.5 - 0.4 * np.tanh((load_factor - 0.5) * 2), 0.0, 1.0)
    gamma = np.clip(0.2 + 0.3 * np.tanh((load_factor - 0.5) * 3), 0.0, 1.0)
    
    # Scaled remaining capacity with sigmoid penalty
    scaled_remaining_capacity = np.where(bins_remain_cap >= item, 1.0 / (bins_remain_cap - item + 1e-6), -np.inf)
    
    # Balance factor
    mean_cap = np.mean(bins_remain_cap)
    balance_factor = np.abs(mean_cap - bins_remain_cap) / np.max(np.abs(mean_cap - bins_remain_cap) + 1e-6)
    
    # Last fit decrease
    last_fit_decrease = np.zeros_like(bins_remain_cap)
    if len(bins_remain_cap) > 1:
        last_fit_decrease[1:] = bins_remain_cap[:-1] - bins_remain_cap[1:]
    
    # Combine heuristics
    priority_scores = alpha * scaled_remaining_capacity + beta * (1 - balance_factor) + gamma * last_fit_decrease
    return priority_scores
```
