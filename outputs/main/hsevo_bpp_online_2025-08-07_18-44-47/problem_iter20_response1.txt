```python
import numpy as np

_item_counter = 0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority for online bin packing: inverse leftover with dynamic bias toward median load, plus adaptive random Gumbel perturbation and sinusoidal jitter.
    """
    global _item_counter
    _item_counter += 1
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    if not np.any(feasible):
        return priority
    eps = 1e-9
    base = 1.0 / (remaining[feasible] + eps)
    med = np.median(remaining[feasible])
    bias = -((remaining[feasible] - med) ** 2) * 1e-9
    indices = np.arange(n)
    rng = np.random.default_rng()
    sin_jitter = (np.sin((item + indices[feasible]) * 7.0) + 1) * 0.5 * 1e-9 * item
    temp = max(0.05, 0.5 * np.exp(-0.001 * _item_counter))
    rand_jitter = rng.random(feasible.sum()) * 0.01 * item / temp
    gumbel = -np.log(-np.log(rng.random(feasible.sum())))
    score = base + bias + sin_jitter + rand_jitter + gumbel / temp
    priority[feasible] = score
    return priority
```
