{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Priority: inverse leftover, tiny index bias, golden\u2011ratio jitter, adaptive random jitter.\"\"\"\n    bins = np.asarray(bins_remain_cap, dtype=float)\n    n = bins.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    remaining = bins - item\n    feasible = remaining >= 0\n    eps = 1e-9\n    idx = np.arange(n, dtype=float)\n    primary = np.full(n, -np.inf, dtype=float)\n    primary[feasible] = 1.0 / (remaining[feasible] + eps)\n    bias = -idx * 1e-6\n    phi = (1 + np.sqrt(5)) / 2\n    jitter = ((phi * (idx + 1) * item) % 1.0) * 1e-6 * item\n    if feasible.any():\n        std = np.std(remaining[feasible])\n        mean = np.mean(remaining[feasible])\n        coeff = std / (mean + eps)\n        random_weight = 0.01 * (1.0 + coeff)\n        rng = np.random.default_rng()\n        rand_jitter = rng.random(n) * random_weight * item\n    else:\n        rand_jitter = np.zeros(n, dtype=float)\n    score = primary + bias + jitter + rand_jitter\n    score[~feasible] = -np.inf\n    return score\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Priority: inverse leftover, tiny index bias, golden\u2011ratio jitter, adaptive random jitter.\"\"\"\n    bins = np.asarray(bins_remain_cap, dtype=float)\n    n = bins.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    remaining = bins - item\n    feasible = remaining >= 0\n    eps = 1e-9\n    idx = np.arange(n, dtype=float)\n    primary = np.full(n, -np.inf, dtype=float)\n    primary[feasible] = 1.0 / (remaining[feasible] + eps)\n    bias = -idx * 1e-6\n    phi = (1 + np.sqrt(5)) / 2\n    jitter = ((phi * (idx + 1) * item) % 1.0) * 1e-6 * item\n    if feasible.any():\n        std = np.std(remaining[feasible])\n        mean = np.mean(remaining[feasible])\n        coeff = std / (mean + eps)\n        random_weight = 0.01 * (1.0 + coeff)\n        rng = np.random.default_rng()\n        rand_jitter = rng.random(n) * random_weight * item\n    else:\n        rand_jitter = np.zeros(n, dtype=float)\n    score = primary + bias + jitter + rand_jitter\n    score[~feasible] = -np.inf\n    return score\n\n[Heuristics 3rd]\nimport numpy as np\n\n# deterministic RNG for reproducible jitter\n_rng = np.random.default_rng(42)\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins: inverse leftover, tiny index bias, and scaled random jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    # deterministic tie\u2011breaker: prefer lower index\n    priority[feasible] += -np.arange(n)[feasible] * 1e-5\n    # tiny reproducible jitter proportional to item size\n    jitter = _rng.random(n) * 0.01 * item\n    priority[feasible] += jitter[feasible]\n    return priority\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Priority: inverse leftover, tiny index bias, golden\u2011ratio jitter, adaptive random jitter.\"\"\"\n    bins = np.asarray(bins_remain_cap, dtype=float)\n    n = bins.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    remaining = bins - item\n    feasible = remaining >= 0\n    eps = 1e-9\n    idx = np.arange(n, dtype=float)\n    primary = np.full(n, -np.inf, dtype=float)\n    primary[feasible] = 1.0 / (remaining[feasible] + eps)\n    bias = -idx * 1e-6\n    phi = (1 + np.sqrt(5)) / 2\n    jitter = ((phi * (idx + 1) * item) % 1.0) * 1e-6 * item\n    if feasible.any():\n        std = np.std(remaining[feasible])\n        mean = np.mean(remaining[feasible])\n        coeff = std / (mean + eps)\n        random_weight = 0.01 * (1.0 + coeff)\n        rng = np.random.default_rng()\n        rand_jitter = rng.random(n) * random_weight * item\n    else:\n        rand_jitter = np.zeros(n, dtype=float)\n    score = primary + bias + jitter + rand_jitter\n    score[~feasible] = -np.inf\n    return score\n\n[Heuristics 5th]\nimport numpy as np\n\n# deterministic RNG for reproducible jitter\n_rng = np.random.default_rng(42)\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins: inverse leftover, tiny index bias, and scaled random jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    # deterministic tie\u2011breaker: prefer lower index\n    priority[feasible] += -np.arange(n)[feasible] * 1e-5\n    # tiny reproducible jitter proportional to item size\n    jitter = _rng.random(n) * 0.01 * item\n    priority[feasible] += jitter[feasible]\n    return priority\n\n[Heuristics 6th]\nimport numpy as np\n\n# deterministic RNG for reproducible jitter\n_rng = np.random.default_rng(42)\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins: inverse leftover, tiny index bias, and scaled random jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    # deterministic tie\u2011breaker: prefer lower index\n    priority[feasible] += -np.arange(n)[feasible] * 1e-5\n    # tiny reproducible jitter proportional to item size\n    jitter = _rng.random(n) * 0.01 * item\n    priority[feasible] += jitter[feasible]\n    return priority\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return priority\n    idx = np.arange(n, dtype=float)\n    eps = 1e-12\n    base = 1.0 / (remaining[feasible] + eps)\n    bias = -idx[feasible] * 1e-6\n    phi = 0.6180339887498949\n    det_jitter = (np.mod(phi * (idx[feasible] + 1) * item, 1.0) - 0.5) * 1e-5 * item\n    load_scale = remaining[feasible] / (remaining[feasible].max() + eps)\n    rng = np.random.default_rng()\n    rand_jitter = rng.standard_normal(feasible.sum()) * (1e-5 * item) * load_scale\n    priority[feasible] = base + bias + det_jitter + rand_jitter\n    return priority\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return priority\n    idx = np.arange(n, dtype=float)\n    eps = 1e-12\n    base = 1.0 / (remaining[feasible] + eps)\n    bias = -idx[feasible] * 1e-6\n    phi = 0.6180339887498949\n    det_jitter = (np.mod(phi * (idx[feasible] + 1) * item, 1.0) - 0.5) * 1e-5 * item\n    load_scale = remaining[feasible] / (remaining[feasible].max() + eps)\n    rng = np.random.default_rng()\n    rand_jitter = rng.standard_normal(feasible.sum()) * (1e-5 * item) * load_scale\n    priority[feasible] = base + bias + det_jitter + rand_jitter\n    return priority\n\n[Heuristics 9th]\nimport numpy as np\n_rng = np.random.default_rng(42)\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    if np.any(feasible):\n        eps = 1e-9\n        base = 1.0 / (remaining[feasible] + eps)\n        bias = -np.arange(n)[feasible] * 1e-5\n        phi = 0.6180339887498949\n        det_jitter = (np.mod(phi * (np.arange(n)[feasible] + 1) * item, 1.0) - 0.5) * 1e-5 * item\n        sin_jitter = np.sin(item * np.arange(n)[feasible] + 1.0) * 1e-9 * item\n        rng_jitter = _rng.standard_normal(feasible.sum()) * 1e-5 * item\n        priority[feasible] = base + bias + det_jitter + sin_jitter + rng_jitter\n    return priority\n\n[Heuristics 10th]\nimport numpy as np\n_rng = np.random.default_rng(42)\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    if np.any(feasible):\n        eps = 1e-9\n        base = 1.0 / (remaining[feasible] + eps)\n        bias = -np.arange(n)[feasible] * 1e-5\n        phi = 0.6180339887498949\n        det_jitter = (np.mod(phi * (np.arange(n)[feasible] + 1) * item, 1.0) - 0.5) * 1e-5 * item\n        sin_jitter = np.sin(item * np.arange(n)[feasible] + 1.0) * 1e-9 * item\n        rng_jitter = _rng.standard_normal(feasible.sum()) * 1e-5 * item\n        priority[feasible] = base + bias + det_jitter + sin_jitter + rng_jitter\n    return priority\n\n[Heuristics 11th]\nimport numpy as np\n_rng = np.random.default_rng()\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combine inverse leftover with variance\u2011scaled jitter for adaptive bin selection.\"\"\"\n    eps = 1e-9\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    base_score = np.where(feasible, 1.0 / (remaining + eps), -np.inf)\n    mean_rem = bins_remain_cap.mean()\n    var_norm = np.var(bins_remain_cap) / (mean_rem**2 + eps)\n    w_det = 1.0 / (1.0 + var_norm)\n    w_rand = var_norm / (1.0 + var_norm)\n    max_rem = bins_remain_cap.max()\n    jitter_scale = np.where(max_rem > 0, 1.0 - remaining / max_rem, 0.0)\n    jitter_scale = np.clip(jitter_scale, 0.0, 1.0)\n    jitter = _rng.random(n) * item * jitter_scale\n    tie = _rng.random(n) * 1e-6\n    priority = base_score * w_det + jitter * w_rand + tie\n    return priority\n\n[Heuristics 12th]\nimport numpy as np\n\n_item_avg = None\n_item_avg_count = 0\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-12\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return priority\n    global _item_avg, _item_avg_count\n    if _item_avg is None:\n        _item_avg = item\n        _item_avg_count = 1\n    else:\n        _item_avg += (item - _item_avg) / (_item_avg_count + 1)\n        _item_avg_count += 1\n    feas_rem = remaining[feasible]\n    mean_rem = feas_rem.mean()\n    std_rem = feas_rem.std()\n    cv = std_rem / (mean_rem + eps)\n    noise_sigma = item * np.exp(-cv)\n    factor = abs(item - _item_avg) / (_item_avg + eps)\n    noise_sigma *= (1 + factor)\n    rng = np.random.default_rng()\n    jitter = rng.normal(0, noise_sigma, size=n)\n    priority[feasible] = -remaining[feasible] + jitter[feasible]\n    return priority\n\n[Heuristics 13th]\nimport numpy as np\n\n_item_avg = None\n_item_avg_count = 0\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-12\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return priority\n    global _item_avg, _item_avg_count\n    if _item_avg is None:\n        _item_avg = item\n        _item_avg_count = 1\n    else:\n        _item_avg += (item - _item_avg) / (_item_avg_count + 1)\n        _item_avg_count += 1\n    feas_rem = remaining[feasible]\n    mean_rem = feas_rem.mean()\n    std_rem = feas_rem.std()\n    cv = std_rem / (mean_rem + eps)\n    noise_sigma = item * np.exp(-cv)\n    factor = abs(item - _item_avg) / (_item_avg + eps)\n    noise_sigma *= (1 + factor)\n    rng = np.random.default_rng()\n    jitter = rng.normal(0, noise_sigma, size=n)\n    priority[feasible] = -remaining[feasible] + jitter[feasible]\n    return priority\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Priority: inverse leftover + tiny index bias + deterministic jitter + variance penalty.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return priority\n    base = 1.0 / remaining[feasible]\n    idx_bias = np.arange(n)[feasible] * 1e-6\n    std_rem = np.std(remaining[feasible])\n    jitter_scale = item * 0.001 * (1 + std_rem / 10)\n    jitter = np.sin(item + np.arange(n)[feasible]) * jitter_scale\n    mean_rem = remaining[feasible].mean()\n    var_penalty = - ((remaining[feasible] - mean_rem) ** 2) * 1e-4\n    priority[feasible] = base + idx_bias + jitter + var_penalty\n    return priority\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Priority: inverse leftover + tiny index bias + deterministic jitter + variance penalty.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return priority\n    base = 1.0 / remaining[feasible]\n    idx_bias = np.arange(n)[feasible] * 1e-6\n    std_rem = np.std(remaining[feasible])\n    jitter_scale = item * 0.001 * (1 + std_rem / 10)\n    jitter = np.sin(item + np.arange(n)[feasible]) * jitter_scale\n    mean_rem = remaining[feasible].mean()\n    var_penalty = - ((remaining[feasible] - mean_rem) ** 2) * 1e-4\n    priority[feasible] = base + idx_bias + jitter + var_penalty\n    return priority\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Priority: inverse leftover + tiny index bias + deterministic jitter + variance penalty.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return priority\n    base = 1.0 / remaining[feasible]\n    idx_bias = np.arange(n)[feasible] * 1e-6\n    std_rem = np.std(remaining[feasible])\n    jitter_scale = item * 0.001 * (1 + std_rem / 10)\n    jitter = np.sin(item + np.arange(n)[feasible]) * jitter_scale\n    mean_rem = remaining[feasible].mean()\n    var_penalty = - ((remaining[feasible] - mean_rem) ** 2) * 1e-4\n    priority[feasible] = base + idx_bias + jitter + var_penalty\n    return priority\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Priority: inverse leftover + tiny index bias + deterministic jitter + variance penalty.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return priority\n    base = 1.0 / remaining[feasible]\n    idx_bias = np.arange(n)[feasible] * 1e-6\n    std_rem = np.std(remaining[feasible])\n    jitter_scale = item * 0.001 * (1 + std_rem / 10)\n    jitter = np.sin(item + np.arange(n)[feasible]) * jitter_scale\n    mean_rem = remaining[feasible].mean()\n    var_penalty = - ((remaining[feasible] - mean_rem) ** 2) * 1e-4\n    priority[feasible] = base + idx_bias + jitter + var_penalty\n    return priority\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Priority by inverse leftover, variance penalty, adaptive jitter, load centering, and tiny index bias.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    if not feasible.any():\n        return priority\n    idx = np.arange(n, dtype=float)\n    base = 1.0 / (remaining[feasible] + 1e-12)\n    mean_rem = remaining[feasible].mean()\n    var_penalty = -((remaining[feasible] - mean_rem) ** 2) * 1e-3\n    rng = np.random.default_rng()\n    jitter = rng.normal(loc=0.0, scale=item * 0.01, size=feasible.sum())\n    mean_center = (bins_remain_cap.mean() - bins_remain_cap[feasible]) * 0.001\n    bias = idx[feasible] * 1e-6\n    priority[feasible] = base + var_penalty + jitter + mean_center + bias\n    return priority\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins using inverse leftover, index bias, adaptive jitter, and load\u2011aware random perturbation.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-12\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    score = np.full(n, -np.inf, dtype=float)\n    inv_left = 1.0 / (remaining[feasible] + eps)\n    indices = np.arange(n, dtype=float)\n    idx_bias = indices * 1e-6\n    sin_jitter = np.sin((item + indices) * 0.01)\n    phi = (np.sqrt(5) - 1) / 2\n    phi_jitter = ((phi * (indices + 1) * item) % 1.0)\n    jitter_det = sin_jitter + phi_jitter\n    max_rem = bins_remain_cap.max()\n    load_factor = (remaining + eps) / (max_rem + eps)\n    rng = np.random.default_rng()\n    rand_vals = rng.random(n)\n    jitter_rand = rand_vals * 0.01 * item * load_factor\n    score[feasible] = inv_left - idx_bias[feasible] + jitter_det[feasible] * 0.01 + jitter_rand[feasible]\n    return score\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins using inverse leftover, index bias, adaptive jitter, and load\u2011aware random perturbation.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-12\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    score = np.full(n, -np.inf, dtype=float)\n    inv_left = 1.0 / (remaining[feasible] + eps)\n    indices = np.arange(n, dtype=float)\n    idx_bias = indices * 1e-6\n    sin_jitter = np.sin((item + indices) * 0.01)\n    phi = (np.sqrt(5) - 1) / 2\n    phi_jitter = ((phi * (indices + 1) * item) % 1.0)\n    jitter_det = sin_jitter + phi_jitter\n    max_rem = bins_remain_cap.max()\n    load_factor = (remaining + eps) / (max_rem + eps)\n    rng = np.random.default_rng()\n    rand_vals = rng.random(n)\n    jitter_rand = rand_vals * 0.01 * item * load_factor\n    score[feasible] = inv_left - idx_bias[feasible] + jitter_det[feasible] * 0.01 + jitter_rand[feasible]\n    return score\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}