```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score bins: inverse leftover, index bias, deterministic golden‑ratio jitter."""
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    eps = 1e-9
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)

    # Base: favor bins that leave little free space
    priority[feasible] = 1.0 / (remaining[feasible] + eps)

    # Tie‑break: slight negative bias for lower indices,
    # tiny positive offset to resolve exact ties
    idx = np.arange(n, dtype=float)
    bias = 1e-5
    tiny = 1e-12
    priority[feasible] -= idx[feasible] * bias
    priority[feasible] += idx[feasible] * tiny

    # Deterministic jitter using golden ratio (low‑discrepancy sequence)
    phi = 0.6180339887498949
    jitter_scale = 1e-9  # scaled by item size below
    jitter = np.mod(phi * (idx + 1) * item, 1.0) * jitter_scale * item
    priority[feasible] += jitter[feasible]

    # Small random jitter for exploration (no fixed seed)
    rnd = np.random.default_rng()
    random_jitter = rnd.random(n) * 1e-8 * item
    priority[feasible] += random_jitter[feasible]

    return priority
```
