```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score bins: inverse leftover + variance‑scaled deterministic jitter + tiny index bias + mild deviation penalty."""
    # Combine best‑fit, variance‑scaled jitter, tiny bias, and mild penalty for robust online BPP.
    eps = 1e-12
    bins = np.asarray(bins_remain_cap, dtype=float)
    n = bins.size
    if n == 0:
        return np.empty(0, dtype=float)
    remaining = bins - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    if not feasible.any():
        return priority
    base = 1.0 / (remaining[feasible] + eps)
    bias = -np.arange(n)[feasible] * 1e-6
    jitter_raw = (np.mod((np.arange(n) + 1) * 0.6180339887498949, 1.0) - 0.5)
    var_rem = np.var(remaining[feasible])
    jitter_scale = item * 0.01 * (1.0 + np.sqrt(var_rem))
    jitter = jitter_raw[feasible] * jitter_scale
    mean_rem = np.mean(remaining[feasible])
    penalty = -((remaining[feasible] - mean_rem) ** 2) * 1e-6
    priority[feasible] = base + bias + jitter + penalty
    return priority
```
