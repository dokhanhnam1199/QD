```python
import numpy as np

_rng = np.random.default_rng()

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score bins using inverse leftover, tightness, variance‑scaled jitter, and tiny tie‑breakers."""
    bins = np.asarray(bins_remain_cap, dtype=float)
    n = bins.size
    if n == 0:
        return np.empty(0, dtype=float)
    eps = 1e-9
    remaining = bins - item
    feasible = remaining >= 0
    scores = np.full(n, -np.inf, dtype=float)
    if not feasible.any():
        return scores
    rem_f = remaining[feasible]
    idx = np.arange(n, dtype=float)
    idx_f = idx[feasible]
    inv_leftover = 1.0 / (rem_f + eps)
    tightness = item / (item + rem_f + eps)
    bias = -idx_f * 1e-6
    phi = (1 + np.sqrt(5.0)) / 2.0
    phi_jitter = ((phi * (idx_f + 1) * item) % 1.0) * 1e-6 * item
    mean_rem = np.mean(rem_f)
    std_rem = np.std(rem_f)
    coeff = std_rem / (mean_rem + eps)
    jitter = _rng.random(rem_f.shape) * item * (0.01 + coeff * 0.01)
    scores[feasible] = inv_leftover + tightness + bias + phi_jitter + jitter
    return scores
```
