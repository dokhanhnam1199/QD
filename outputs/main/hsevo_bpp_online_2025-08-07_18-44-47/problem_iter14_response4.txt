```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Inverse leftover with bias, deterministic and reproducible jitter."""
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    eps = 1e-9
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    idx = np.arange(n)
    base = 1.0 / (remaining[feasible] + eps)
    bias_factor = 1e-5
    bias = -idx[feasible] * bias_factor
    phi = 0.6180339887498949
    jitter_factor = 1e-5
    det_jitter = (np.mod(phi * (idx[feasible] + 1) * item, 1.0) - 0.5) * jitter_factor * item
    rnd_factor = 1e-5
    rnd_jitter = (np.sin(item * 12.9898 + idx[feasible] * 78.233) * 43758.5453 % 1.0 - 0.5) * rnd_factor * item
    priority[feasible] = base + bias + det_jitter + rnd_jitter
    return priority
```
