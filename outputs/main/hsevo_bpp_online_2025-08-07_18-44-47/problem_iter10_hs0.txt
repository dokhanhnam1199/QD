import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    epsilon: float = 0.00013577134549805134,
    index_weight: float = 0.00026326070755176384,
    jitter_factor: float = 0.06792986820263264,
    rng_seed: int = 445.35214060762485,
) -> np.ndarray:
    """Score bins based on inverse leftover capacity, deterministic index bias, and jitter.

    Parameters
    ----------
    item : float
        Size of the item to be placed.
    bins_remain_cap : np.ndarray
        Remaining capacities of bins.
    epsilon : float, optional
        Small constant to avoid division by zero.
    index_weight : float, optional
        Weight applied to the deterministic index bias (lower index = higher priority).
    jitter_factor : float, optional
        Scaling factor for the random jitter term.
    rng_seed : int, optional
        Seed for the internal random number generator.
    """
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)

    remaining = bins_remain_cap - item
    feasible = remaining >= 0

    # Initialize priority with -inf for infeasible bins
    priority = np.full(n, -np.inf, dtype=float)

    # Inverse leftover capacity (tighter fits get higher priority)
    priority[feasible] = 1.0 / (remaining[feasible] + epsilon)

    # Deterministic tieâ€‘breaker: prefer lower indices
    priority[feasible] += -np.arange(n)[feasible] * index_weight

    # Random jitter to break residual ties
    rng = np.random.default_rng(rng_seed)
    jitter = rng.random(n) * jitter_factor * item
    priority[feasible] += jitter[feasible]

    return priority
