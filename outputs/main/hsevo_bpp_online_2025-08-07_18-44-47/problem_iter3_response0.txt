```python
import numpy as np

def _compute_residual(item, caps):
    return caps - item

def _feasibility_mask(residual):
    return residual >= 0

def _base_score(residual):
    return -residual

def _fill_score(caps):
    return -caps

def _tie_breaker(indices, eps=1e-12):
    return -eps * indices

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Deterministic best‑fit priority for online bin packing.

    Higher scores correspond to bins that can accommodate the item,
    leave the smallest residual capacity after placement, are already
    more filled, and have smaller indices as a deterministic tie‑breaker.
    """
    if bins_remain_cap.size == 0:
        return np.empty_like(bins_remain_cap, dtype=float)
    residual for clarity
    residual = _compute_residual(item, bins_remain_cap)
    feasible = _feasibility_mask(residual)
    base = _base_score(residual)
    fill = _fill_score(bins_remain_cap)
    w1 = 1.0
    w2 = 0.5
    combined = w1 * base + w2 * fill
    indices = np.arange(bins_remain_cap.size)
    score = combined + _tie_breaker(indices)
    return np.where(feasible, score, -np.inf)
```
