import numpy as np

_rng = np.random.default_rng(42)

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                eps: float = 7.039526096922731e-07,
                bias_factor: float = 0.0007342609210604633,
                jitter_factor: float = 0.08624602603503466,
                scaling_factor: float = 1.2198388311589752) -> np.ndarray:
    """Score bins: inverse leftover, tiny index bias, and scaled random jitter."""
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    priority[feasible] = scaling_factor / (remaining[feasible] + eps)
    # deterministic tieâ€‘breaker: prefer lower index
    priority[feasible] += -np.arange(n)[feasible] * bias_factor
    # tiny reproducible jitter proportional to item size
    jitter = _rng.random(n) * jitter_factor * item
    priority[feasible] += jitter[feasible]
    return priority
