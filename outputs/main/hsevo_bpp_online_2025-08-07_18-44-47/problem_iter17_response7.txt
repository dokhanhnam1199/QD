```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score bins using inverse‑leftover (primary), deterministic golden‑ratio + sinusoidal jitter,
    per‑call random jitter, and a variance‑balancing penalty."""
    caps = np.asarray(bins_remain_cap, dtype=float)
    n = caps.size
    if n == 0:
        return np.empty(0, dtype=float)
    remaining = caps - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    if not np.any(feasible):
        return priority
    eps = 1e-12
    inv_left = 1.0 / (remaining[feasible] + eps)
    idx = np.arange(n, dtype=float)[feasible]
    phi = 0.6180339887498949
    jitter_det = ((phi * (idx + 1) * item) % 1.0) * 0.01 * item
    sinus_jitter = np.sin(2 * np.pi * idx / n) * 1e-4 * item
    rng = np.random.default_rng()
    jitter_rand = rng.random(idx.shape) * 0.001 * item
    mean_rem = remaining[feasible].mean()
    var_penalty = 0.1 * ((remaining[feasible] - mean_rem) ** 2) / (caps.mean() + eps)
    # combine all components
    priority[feasible] = inv_left + jitter_det + sinus_jitter + jitter_rand - var_penalty
    return priority
```
