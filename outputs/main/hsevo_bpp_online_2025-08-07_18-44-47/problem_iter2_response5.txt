```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Inverse‑leftover priority with tiny random tie‑breaker."""
    # Use inverse leftover priority; small random noise breaks ties
    if bins_remain_cap.size == 0:
        return bins_remain_cap
    eps = 1e-12
    fits = bins_remain_cap >= item
    leftover = bins_remain_cap - item
    inv = 1.0 / (leftover + eps)
    tie = np.random.rand(len(bins_remain_cap)) * 1e-6 * item
    priorities = np.where(fits, inv + tie, -np.inf)
    return priorities
```
