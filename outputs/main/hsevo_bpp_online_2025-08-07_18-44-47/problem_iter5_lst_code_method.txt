{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Inverse leftover capacity with tiny random tie\u2011breakers; infeasible bins get -inf.\"\"\"\n    if bins_remain_cap.size == 0:\n        return np.empty_like(bins_remain_cap, dtype=float)\n    residual = bins_remain_cap - item\n    eps = 1e-6\n    noise = np.random.rand(bins_remain_cap.size) * 0.01 * item\n    return np.where(residual >= 0, 1.0 / (residual + eps) + noise, -np.inf)\n\n[Heuristics 2nd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines almost-full-fit priority (1/(remaining+eps)) with small random perturbation and bin-index tie-breaker for deterministic yet exploratory bin selection.\n    \"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    noise = np.random.rand(n) * 0.01 * item\n    tie_break = -np.arange(n) * 1e-5\n    priority[feasible] += noise[feasible] + tie_break[feasible]\n    return priority\n\n[Heuristics 3rd]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins: inverse residual capacity with tiny random tie\u2011breaker; infeasible \u2192 -inf.\"\"\"\n    priors = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return priors\n    residual = bins_remain_cap[feasible] - item\n    epsilon = 1e-9\n    base = 1.0 / (residual + epsilon)\n    rng = np.random.default_rng()\n    noise = rng.random(base.shape) * 1e-6\n    priors[feasible] = base + noise\n    return priors\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Inverse leftover score with tiny random jitter for tie-breaking.\"\"\"\n    eps = 1e-9\n    residual = bins_remain_cap - item\n    feasible = residual >= 0\n    score = np.where(feasible, 1.0 / (residual + eps), -np.inf)\n    jitter = np.random.random(bins_remain_cap.shape) * 1e-6\n    return score + jitter\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins: inverse residual capacity with tiny random tie\u2011breaker; infeasible \u2192 -inf.\"\"\"\n    priors = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return priors\n    residual = bins_remain_cap[feasible] - item\n    epsilon = 1e-9\n    base = 1.0 / (residual + epsilon)\n    rng = np.random.default_rng()\n    noise = rng.random(base.shape) * 1e-6\n    priors[feasible] = base + noise\n    return priors\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Inverse\u2011leftover priority with tiny random tie\u2011breaker.\"\"\"\n    # Use inverse leftover priority; small random noise breaks ties\n    if bins_remain_cap.size == 0:\n        return bins_remain_cap\n    eps = 1e-12\n    fits = bins_remain_cap >= item\n    leftover = bins_remain_cap - item\n    inv = 1.0 / (leftover + eps)\n    tie = np.random.rand(len(bins_remain_cap)) * 1e-6 * item\n    priorities = np.where(fits, inv + tie, -np.inf)\n    return priorities\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Inverse leftover score with tiny random jitter for tie-breaking.\"\"\"\n    eps = 1e-9\n    residual = bins_remain_cap - item\n    feasible = residual >= 0\n    score = np.where(feasible, 1.0 / (residual + eps), -np.inf)\n    jitter = np.random.random(bins_remain_cap.shape) * 1e-6\n    return score + jitter\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins: inverse residual capacity with tiny random tie\u2011breaker; infeasible \u2192 -inf.\"\"\"\n    priors = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return priors\n    residual = bins_remain_cap[feasible] - item\n    epsilon = 1e-9\n    base = 1.0 / (residual + epsilon)\n    rng = np.random.default_rng()\n    noise = rng.random(base.shape) * 1e-6\n    priors[feasible] = base + noise\n    return priors\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Inverse\u2011leftover priority with tiny random tie\u2011breaker.\"\"\"\n    # Use inverse leftover priority; small random noise breaks ties\n    if bins_remain_cap.size == 0:\n        return bins_remain_cap\n    eps = 1e-12\n    fits = bins_remain_cap >= item\n    leftover = bins_remain_cap - item\n    inv = 1.0 / (leftover + eps)\n    tie = np.random.rand(len(bins_remain_cap)) * 1e-6 * item\n    priorities = np.where(fits, inv + tie, -np.inf)\n    return priorities\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    EPSILON = 0.1\n    SMALL_EPS = 1e-6\n    RANDOM_NOISE = 0.01\n    feasible = bins_remain_cap >= item\n    residual = bins_remain_cap - item\n    deterministic = np.where(feasible, 1.0 / (residual + SMALL_EPS), -np.inf)\n    deterministic += np.where(feasible, np.random.rand(*bins_remain_cap.shape) * RANDOM_NOISE, 0)\n    random_scores = np.where(feasible, np.random.rand(*bins_remain_cap.shape), -np.inf)\n    return random_scores if np.random.rand() < EPSILON else deterministic\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    EPSILON = 0.1\n    SMALL_EPS = 1e-6\n    RANDOM_NOISE = 0.01\n    feasible = bins_remain_cap >= item\n    residual = bins_remain_cap - item\n    deterministic = np.where(feasible, 1.0 / (residual + SMALL_EPS), -np.inf)\n    deterministic += np.where(feasible, np.random.rand(*bins_remain_cap.shape) * RANDOM_NOISE, 0)\n    random_scores = np.where(feasible, np.random.rand(*bins_remain_cap.shape), -np.inf)\n    return random_scores if np.random.rand() < EPSILON else deterministic\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    epsilon = 1e-9\n    leftover = bins_remain_cap - item\n    fit = bins_remain_cap >= item\n    base = np.where(fit, 1.0/(leftover+epsilon), -np.inf)\n    noise = np.random.rand(len(bins_remain_cap)) * 0.1 * item\n    priorities = base + noise\n    return priorities\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    epsilon = 1e-9\n    leftover = bins_remain_cap - item\n    fit = bins_remain_cap >= item\n    base = np.where(fit, 1.0/(leftover+epsilon), -np.inf)\n    noise = np.random.rand(len(bins_remain_cap)) * 0.1 * item\n    priorities = base + noise\n    return priorities\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    epsilon = 1e-9\n    leftover = bins_remain_cap - item\n    fit = bins_remain_cap >= item\n    base = np.where(fit, 1.0/(leftover+epsilon), -np.inf)\n    noise = np.random.rand(len(bins_remain_cap)) * 0.1 * item\n    priorities = base + noise\n    return priorities\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    epsilon = 1e-9\n    leftover = bins_remain_cap - item\n    fit = bins_remain_cap >= item\n    base = np.where(fit, 1.0/(leftover+epsilon), -np.inf)\n    noise = np.random.rand(len(bins_remain_cap)) * 0.1 * item\n    priorities = base + noise\n    return priorities\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Inverse leftover score with tiny random tie\u2011breaker; infeasible bins get -inf.\"\"\"\n    # Combine inverse-remaining-capacity scoring with stochastic tie\u2011breaking.\n    if bins_remain_cap.size == 0:\n        return np.array([], dtype=float)\n    eps = 1e-9\n    noise_factor = 1e-3\n    leftover = bins_remain_cap - item\n    feasible = leftover >= 0\n    base = np.where(feasible, 1.0 / (leftover + eps), -np.inf)\n    noise = np.random.rand(bins_remain_cap.shape[0]) * noise_factor * item\n    return np.where(feasible, base + noise, -np.inf)\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Inverse leftover score with tiny random tie\u2011breaker; infeasible bins get -inf.\"\"\"\n    # Combine inverse-remaining-capacity scoring with stochastic tie\u2011breaking.\n    if bins_remain_cap.size == 0:\n        return np.array([], dtype=float)\n    eps = 1e-9\n    noise_factor = 1e-3\n    leftover = bins_remain_cap - item\n    feasible = leftover >= 0\n    base = np.where(feasible, 1.0 / (leftover + eps), -np.inf)\n    noise = np.random.rand(bins_remain_cap.shape[0]) * noise_factor * item\n    return np.where(feasible, base + noise, -np.inf)\n\n[Heuristics 18th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, eps: float = 3.4723251054610314e-05, noise_factor: float = 0.03679152813035629) -> np.ndarray:\n    \"\"\"Inverse leftover capacity with tiny random tie\u2011breakers; infeasible bins get -inf.\"\"\"\n    if bins_remain_cap.size == 0:\n        return np.empty_like(bins_remain_cap, dtype=float)\n\n[Heuristics 19th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, eps: float = 3.4723251054610314e-05, noise_factor: float = 0.03679152813035629) -> np.ndarray:\n    \"\"\"Inverse leftover capacity with tiny random tie\u2011breakers; infeasible bins get -inf.\"\"\"\n    if bins_remain_cap.size == 0:\n        return np.empty_like(bins_remain_cap, dtype=float)\n\n[Heuristics 20th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, eps: float = 3.4723251054610314e-05, noise_factor: float = 0.03679152813035629) -> np.ndarray:\n    \"\"\"Inverse leftover capacity with tiny random tie\u2011breakers; infeasible bins get -inf.\"\"\"\n    if bins_remain_cap.size == 0:\n        return np.empty_like(bins_remain_cap, dtype=float)\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}