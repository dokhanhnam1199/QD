```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score bins using inverse leftover, tiny index bias, golden‑ratio jitter,
    adaptive random jitter scaled by load variance, and a small variance penalty."""
    bins = np.asarray(bins_remain_cap, dtype=float)
    n = bins.size
    if n == 0:
        return np.empty(0, dtype=float)

    # remaining capacity after placing the item
    remaining = bins - item
    feasible = remaining >= 0
    eps = 1e-12

    # primary score: higher for tighter fit (inverse leftover)
    primary = np.full(n, -np.inf, dtype=float)
    primary[feasible] = 1.0 / (remaining[feasible] + eps)

    # tiny index bias to break ties (favor earlier bins)
    idx = np.arange(n, dtype=float)
    bias = -idx * 1e-7

    # deterministic golden‑ratio jitter (very small)
    phi = (1 + np.sqrt(5)) / 2
    phi_jitter = ((phi * (idx + 1) * item) % 1.0) * 1e-7 * item

    # adaptive random jitter scaled by coefficient of variation of feasible leftovers
    if feasible.any():
        rem_feas = remaining[feasible]
        mean = np.mean(rem_feas)
        std = np.std(rem_feas)
        cv = std / (mean + eps)
        random_weight = 0.01 * (1.0 + cv)
        rng = np.random.default_rng()
        rand_jitter = rng.random(n) * random_weight * item
    else:
        rand_jitter = np.zeros(n, dtype=float)

    # small variance penalty to discourage outlier leftovers
    var_penalty = np.zeros(n, dtype=float)
    if feasible.any():
        var_penalty[feasible] = -((remaining[feasible] - mean) ** 2) * 1e-5

    # combine all components
    score = primary + bias + phi_jitter + rand_jitter + var_penalty
    score[~feasible] = -np.inf
    return score
```
