```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Bin priority via inverse leftover, index bias, golden‑ratio jitter, and variance‑scaled random jitter."""
    bins = np.asarray(bins_remain_cap, dtype=float)
    n = bins.size
    if n == 0:
        return np.empty(0, dtype=float)
    remaining = bins - item
    feasible = remaining >= 0
    eps = 1e-9
    idx = np.arange(n, dtype=float)
    score = np.full(n, -np.inf, dtype=float)
    if feasible.any():
        inv_leftover = 1.0 / (remaining[feasible] + eps)
        bias = -idx[feasible] * 1e-6
        phi = (1 + np.sqrt(5)) / 2
        phi_jitter = ((phi * (idx[feasible] + 1) * item) % 1.0) * 1e-6 * item
        std = np.std(remaining[feasible])
        mean = np.mean(remaining[feasible])
        coeff = std / (mean + eps)
        random_weight = 0.01 * (1.0 + coeff)
        rng = np.random.default_rng()
        rand_jitter = rng.random(feasible.sum()) * random_weight * item
        score[feasible] = inv_leftover + bias + phi_jitter + rand_jitter
    return score
```
