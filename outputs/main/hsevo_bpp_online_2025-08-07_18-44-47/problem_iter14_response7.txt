```python
import numpy as np

_rng = np.random.default_rng()

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score bins by inverse leftover, with deterministic and stochastic jitter."""
    # Inverse remaining capacity encourages tight packing; jitter breaks ties.
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    eps = 1e-12
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    if not np.any(feasible):
        return priority
    inv = 1.0 / (remaining[feasible] + eps)
    idx = np.arange(n)[feasible]
    det_jitter = ((idx * 31 + int(item * 1e6)) % 1000) * 1e-15
    jitter = _rng.random(feasible.sum()) * 0.01 * item
    priority[feasible] = inv + jitter + det_jitter
    return priority
```
