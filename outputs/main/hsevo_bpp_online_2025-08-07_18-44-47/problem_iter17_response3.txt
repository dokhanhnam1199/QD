```python
import numpy as np

_rng = np.random.default_rng(12345)
_item_counter = 0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Priority combining inverse leftover, deterministic jitter, and Gumbel noise with decaying temperature.
    """
    bins = np.asarray(bins_remain_cap, dtype=float)
    n = bins.size
    if n == 0:
        return np.empty(0, dtype=float)
    global _item_counter
    _item_counter += 1
    remaining = bins - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    eps = 1e-9
    primary = 1.0 / (remaining + eps)
    idx = np.arange(n, dtype=float)
    bias = -idx * 1e-6
    phi = 0.6180339887498949
    golden = ((phi * (idx + 1) * item) % 1.0) * 1e-6 * item
    sin_j = (np.sin((item + idx) * 7.0) + 1) * 0.5 * 1e-9 * item
    rand = _rng.random(n) * 0.01 * item
    score = primary + bias + golden + sin_j + rand
    temp = max(0.05, 0.5 * np.exp(-0.001 * _item_counter))
    gumb = -np.log(-np.log(_rng.random(feasible.sum())))
    score[feasible] += gumb / temp
    priority[feasible] = score[feasible]
    return priority
```
