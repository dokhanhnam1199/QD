```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Adaptive inverse leftover priority with variance‑scaled random jitter, golden‑ratio deterministic jitter, and index tie‑break."""
    bins = np.asarray(bins_remain_cap, dtype=float)
    n = bins.size
    if n == 0:
        return np.empty(0, dtype=float)
    remaining = bins - item
    feasible = remaining >= 0
    scores = np.full(n, -np.inf, dtype=float)
    if not np.any(feasible):
        return scores
    idx = np.arange(n, dtype=float)
    eps = 1e-12
    primary = 1.0 / (remaining[feasible] + eps)
    bias = -idx[feasible] * 1e-6
    phi = (1 + np.sqrt(5)) / 2
    jitter = (((phi * (idx[feasible] + 1) * item) % 1.0) - 0.5) * 1e-5 * item
    mean = np.mean(remaining[feasible])
    std = np.std(remaining[feasible])
    coeff = std / (mean + eps)
    random_weight = 0.01 * (1.0 + coeff)
    load_scale = remaining[feasible] / (np.max(remaining[feasible]) + eps)
    rng = np.random.default_rng()
    rand_jitter = rng.standard_normal(feasible.sum()) * random_weight * item * load_scale
    scores[feasible] = primary + bias + jitter + rand_jitter
    return scores
```
