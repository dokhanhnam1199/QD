```python
import numpy as np

_rng = np.float64(np.random.default_rng(42).random())

def priority_v2(item: float, bins_remain_cap: np.ndarray,
                epsilon: float = 1e-9,
                index_weight: float = 1e-5,
                jitter_factor: float = 0.01,
                seed: int = None) -> np.ndarray:
    """Score bins by inverse leftover, index bias, and deterministic jitter."""
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    base = 1.0 / (remaining[feasible] + epsilon)
    idx = np.arange(n)[feasible]
    bias = -idx * index_weight
    tiny = idx * 1e-12
    rng = np.random.default_rng(seed) if seed is not None else _rng
    jitter = rng.random(n)[feasible] * jitter_factor * item
    priority[feasible] = base + bias + tiny + jitter
    return priority
```
