{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# deterministic RNG for reproducible jitter\n_rng = np.random.default_rng(42)\n\n    \"\"\"Score bins: inverse leftover, tiny index bias, and scaled random jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    # deterministic tie\u2011breaker: prefer lower index\n    priority[feasible] += -np.arange(n)[feasible] * 1e-5\n    # tiny reproducible jitter proportional to item size\n    jitter = _rng.random(n) * 0.01 * item\n    priority[feasible] += jitter[feasible]\n    return priority\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \n- **Keywords:** vectorized, deterministic tie\u2011break, capacity\u2011aware scoring, early exit, type\u2011safe, clear docstrings  \n- **Advice:** penalize infeasible bins (\u2011inf), score by inverse leftover capacity, add tiny reproducible noise proportional to item size, return early on empty inputs, keep imports minimal  \n- **Avoid:** duplicate imports, incomplete branches, worst\u2011fit bias, nondeterministic randomness, mismatched type hints, heavy loops  \n- **Explanation:** these practices make heuristics fast, robust, and maintainable while preventing bugs and nondeterminism and delivering high\u2011performance solutions.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}