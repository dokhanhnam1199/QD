{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    EPSILON = 0.1\n    SMALL_EPS = 1e-6\n    RANDOM_NOISE = 0.01\n    feasible = bins_remain_cap >= item\n    residual = bins_remain_cap - item\n    deterministic = np.where(feasible, 1.0 / (residual + SMALL_EPS), -np.inf)\n    deterministic += np.where(feasible, np.random.rand(*bins_remain_cap.shape) * RANDOM_NOISE, 0)\n    random_scores = np.where(feasible, np.random.rand(*bins_remain_cap.shape), -np.inf)\n    return random_scores if np.random.rand() < EPSILON else deterministic\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Inverse leftover score with tiny random tie\u2011breaker; infeasible bins get -inf.\"\"\"\n    # Combine inverse-remaining-capacity scoring with stochastic tie\u2011breaking.\n    if bins_remain_cap.size == 0:\n        return np.array([], dtype=float)\n    eps = 1e-9\n    noise_factor = 1e-3\n    leftover = bins_remain_cap - item\n    feasible = leftover >= 0\n    base = np.where(feasible, 1.0 / (leftover + eps), -np.inf)\n    noise = np.random.rand(bins_remain_cap.shape[0]) * noise_factor * item\n    return np.where(feasible, base + noise, -np.inf)\n\n### Analyze & experience\n- Comparing (best) vs (worst), we see the best implementation uses a clear docstring, vectorized `np.where`, a well\u2011chosen epsilon, noise proportional to the item size, and an early return for empty inputs; the worst lacks a return, imports unused libraries, and has no noise scaling or error handling.  \n(Second best) vs (Second worst) \u2013 the second best adds a deterministic tie\u2011breaker and handles infeasible bins gracefully, whereas the second worst again contains extraneous imports and an incomplete body.  \nComparing (1st) vs (2nd), we see the 1st is simpler and cleaner but lacks the deterministic index bias of the 2nd, which can improve consistency during ties.  \n(3rd) vs (4th) \u2013 both use inverse leftover scoring, but the 3rd employs a `default_rng` and tiny noise, while the 4th simply adds a fixed jitter; the difference is minor but the 3rd offers reproducibility.  \nComparing (second worst) vs (worst), both are incomplete: the second worst has unused imports and a custom epsilon but no core logic, while the worst has no return statement at all.  \nOverall: the top heuristics excel in concise, vectorized code, clear tie\u2011breaking, proper noise scaling, and robust edge\u2011case handling; the bottom ones suffer from clutter, missing logic, and lack of reproducibility.\n- \n- **Keywords:** vectorized, deterministic tie\u2011break, capacity\u2011aware scoring, early exit, type\u2011safe, clear docstrings  \n- **Advice:** penalize infeasible bins (\u2011inf), score by inverse leftover capacity, add tiny reproducible noise proportional to item size, return early on empty inputs, keep imports minimal  \n- **Avoid:** duplicate imports, incomplete branches, worst\u2011fit bias, nondeterministic randomness, mismatched type hints, heavy loops  \n- **Explanation:** these practices make heuristics fast, robust, and maintainable while preventing bugs and nondeterminism and delivering high\u2011performance solutions.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}