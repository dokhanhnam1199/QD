```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Scores bins by inverse remaining capacity, low-index bias, and jitter.
    """
    rng = np.random.default_rng(42)  # deterministic jitter for reproducibility
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)

    eps = 1e-12
    remaining = bins_remain_cap - item
    feasible = remaining >= 0

    priority = np.full(n, -np.inf, dtype=float)
    if not np.any(feasible):
        return priority

    base = 1.0 / (remaining[feasible] + eps)          # inverse leftover
    bias = np.arange(n)[feasible] * 1e-6                # low-index bias
    jitter = rng.random(feasible.sum()) * 0.01 * item  # exploration jitter
    idx_offset = np.arange(n)[feasible] * 1e-12        # tiny tieâ€‘break

    priority[feasible] = base - bias + jitter + idx_offset
    return priority
```
