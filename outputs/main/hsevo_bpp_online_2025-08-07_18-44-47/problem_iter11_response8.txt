```python
import numpy as np

_phi = 0.6180339887498949

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Priority via inverse leftover, index bias, and deterministic goldenâ€‘ratio jitter."""
    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    eps = 1e-9
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    idx = np.arange(n, dtype=float)
    primary = 1.0 / (remaining + eps)
    bias = -idx * 1e-5
    jitter = ((_phi * (idx + 1) * item) % 1.0) * 1e-6 * item
    priority[feasible] = primary[feasible] + bias[feasible] + jitter[feasible]
    return priority
```
