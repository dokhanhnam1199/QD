```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, rng: np.random.Generator = None) -> np.ndarray:
    """Score bins by inverse leftover capacity, penalizing infeasibles, with tiny itemâ€‘scaled jitter."""
    if bins_remain_cap.size == 0:
        return np.empty(0, dtype=float)
    if rng is None:
        rng = np.random.default_rng(0)
    residual = bins_remain_cap - item
    feasible = residual >= 0
    eps = 1e-12
    base = np.where(feasible, 1.0 / (residual + eps), -np.inf)
    jitter = rng.random(bins_remain_cap.shape) * eps * item
    bias = np.arange(bins_remain_cap.shape[0]) * eps * 0.1
    return base + jitter + bias
```
