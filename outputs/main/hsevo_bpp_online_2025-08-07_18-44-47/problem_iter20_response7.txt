```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score bins using inverse leftover, index bias, adaptive jitter, and loadâ€‘aware random perturbation."""
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    eps = 1e-12
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    score = np.full(n, -np.inf, dtype=float)
    inv_left = 1.0 / (remaining[feasible] + eps)
    indices = np.arange(n, dtype=float)
    idx_bias = indices * 1e-6
    sin_jitter = np.sin((item + indices) * 0.01)
    phi = (np.sqrt(5) - 1) / 2
    phi_jitter = ((phi * (indices + 1) * item) % 1.0)
    jitter_det = sin_jitter + phi_jitter
    max_rem = bins_remain_cap.max()
    load_factor = (remaining + eps) / (max_rem + eps)
    rng = np.random.default_rng()
    rand_vals = rng.random(n)
    jitter_rand = rand_vals * 0.01 * item * load_factor
    score[feasible] = inv_left - idx_bias[feasible] + jitter_det[feasible] * 0.01 + jitter_rand[feasible]
    return score
```
