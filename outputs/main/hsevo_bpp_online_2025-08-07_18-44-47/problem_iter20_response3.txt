```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Priority: inverse leftover + tiny index bias + deterministic jitter + variance penalty."""
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    if not np.any(feasible):
        return priority
    base = 1.0 / remaining[feasible]
    idx_bias = np.arange(n)[feasible] * 1e-6
    std_rem = np.std(remaining[feasible])
    jitter_scale = item * 0.001 * (1 + std_rem / 10)
    jitter = np.sin(item + np.arange(n)[feasible]) * jitter_scale
    mean_rem = remaining[feasible].mean()
    var_penalty = - ((remaining[feasible] - mean_rem) ** 2) * 1e-4
    priority[feasible] = base + idx_bias + jitter + var_penalty
    return priority
```
