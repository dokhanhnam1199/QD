```python
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Inverse leftover capacity priority with deterministic tie-breaker and optional noise.
    """
    if bins_remain_cap.size == 0:
        return np.empty_like(bins_remain_cap, dtype=float)
    SMALL_EPS = 1e-12
    EPSILON = 0.05
    RANDOM_NOISE = 0.01
    rng = np.random.default_rng()
    feasible = bins_remain_cap >= item
    residual = bins_remain_cap - item
    deterministic = np.where(feasible, 1.0 / (residual + SMALL_EPS), -np.inf)
    bin_indices = np.arange(bins_remain_cap.size)
    deterministic += np.where(feasible, bin_indices * 1e-9, 0)
    deterministic += np.where(feasible, rng.random(bins_remain_cap.shape) * RANDOM_NOISE, 0)
    random_scores = np.where(feasible, rng.random(bins_remain_cap.shape), -np.inf)
    return random_scores if rng.random() < EPSILON else deterministic
```
