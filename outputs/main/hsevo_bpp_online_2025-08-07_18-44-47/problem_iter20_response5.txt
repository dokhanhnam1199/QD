```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Priority: inverse leftover, tiny index bias, goldenâ€‘ratio jitter, adaptive random jitter."""
    bins = np.asarray(bins_remain_cap, dtype=float)
    n = bins.size
    if n == 0:
        return np.empty(0, dtype=float)
    remaining = bins - item
    feasible = remaining >= 0
    eps = 1e-9
    idx = np.arange(n, dtype=float)
    primary = np.full(n, -np.inf, dtype=float)
    primary[feasible] = 1.0 / (remaining[feasible] + eps)
    bias = -idx * 1e-6
    phi = (1 + np.sqrt(5)) / 2
    jitter = ((phi * (idx + 1) * item) % 1.0) * 1e-6 * item
    if feasible.any():
        std = np.std(remaining[feasible])
        mean = np.mean(remaining[feasible])
        coeff = std / (mean + eps)
        random_weight = 0.01 * (1.0 + coeff)
        rng = np.random.default_rng()
        rand_jitter = rng.random(n) * random_weight * item
    else:
        rand_jitter = np.zeros(n, dtype=float)
    score = primary + bias + jitter + rand_jitter
    score[~feasible] = -np.inf
    return score
```
