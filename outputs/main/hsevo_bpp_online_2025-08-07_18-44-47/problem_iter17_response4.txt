```python
import numpy as np

_rng = np.random.default_rng(42)

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    if np.any(feasible):
        eps = 1e-9
        base = 1.0 / (remaining[feasible] + eps)
        idx = np.arange(n)
        bias = -idx[feasible] * 1e-5
        phi = 0.6180339887498949
        det_jitter = (np.mod(phi * (idx[feasible] + 1) * item, 1.0) - 0.5) * 1e-5 * item
        sin_jitter = np.sin(item * idx[feasible] + 1.0) * 1e-9 * item
        jitter_scale = 1e-5 * item
        rng_jitter = _rng.standard_normal(feasible.sum()) * jitter_scale
        priority[feasible] = base + bias + det_jitter + sin_jitter + rng_jitter
    return priority
```
