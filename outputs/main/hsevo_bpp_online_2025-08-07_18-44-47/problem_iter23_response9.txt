```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Priority combining variance‑scaled inverse‑leftover, sin‑phi jitter, random jitter, and tie‑breakers."""
    eps = 1e-12
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    base_score = np.where(feasible, 1.0 / (remaining + eps), -np.inf)
    mean_rem = bins_remain_cap.mean()
    var_norm = np.var(bins_remain_cap) / (mean_rem**2 + eps)
    w_det = 1.0 / (1.0 + var_norm)
    w_rand = var_norm / (1.0 + var_norm)
    rng = np.random.default_rng()
    indices = np.arange(n, dtype=float)
    sin_jitter = np.sin((item + indices) * 0.01)
    phi = (np.sqrt(5) - 1) / 2
    phi_jitter = ((phi * (indices + 1) * item) % 1.0)
    jitter_det = sin_jitter + phi_jitter
    max_rem = bins_remain_cap.max()
    load_factor = (remaining + eps) / (max_rem + eps)
    jitter_det_scaled = jitter_det * 0.01 * item * load_factor
    jitter_rand = rng.random(n) * 0.01 * item * load_factor
    tie_breaker = indices * 1e-6
    priority = base_score * w_det + jitter_det_scaled * w_det + jitter_rand * w_rand + tie_breaker
    priority[~feasible] = -np.inf
    return priority
```
