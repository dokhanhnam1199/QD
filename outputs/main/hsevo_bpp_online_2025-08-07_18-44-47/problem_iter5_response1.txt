```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score feasible bins by inverse leftover capacity, tieâ€‘break by bin index."""
    if bins_remain_cap.size == 0:
        return np.empty_like(bins_remain_cap, dtype=float)
    priors = np.full(bins_remain_cap.shape, -np.inf, dtype=float)
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return priors
    residual = bins_remain_cap[feasible] - item
    epsilon = 1e-9
    base = 1.0 / (residual + epsilon)
    idx = np.nonzero(feasible)[0].astype(float)
    tie_break = idx * 1e-12
    priors[feasible] = base + tie_break
    return priors
```
