```python
import numpy as np

_rng = np.random.default_rng()

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score bins using inverse leftover, varianceâ€‘scaled jitter, and index bias."""
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    eps = 1e-9
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    if not np.any(feasible):
        return priority
    base = 1.0 / (remaining[feasible] + eps)
    idx_bias = -np.arange(n)[feasible] * 1e-6
    rem_feas = remaining[feasible]
    mean_rem = rem_feas.mean()
    std_rem = rem_feas.std()
    jitter_scale = item * (0.01 + std_rem * 0.001)
    jitter = _rng.random(rem_feas.shape) * jitter_scale
    var_penalty = -((rem_feas - mean_rem) ** 2) * 1e-4
    priority[feasible] = base + idx_bias + jitter + var_penalty
    return priority
```
