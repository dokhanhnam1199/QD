```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, epsilon: float = 0.1) -> np.ndarray:
    """Score bins: high if item fits tightly, small random tie‑breaker."""
    caps = np.asarray(bins_remain_cap, dtype=float)
    priorities = np.full_like(caps, -np.inf, dtype=float)
    feasible = caps >= item
    if not np.any(feasible):
        return priorities
    leftover = caps[feasible] - item
    # deterministic: inverse leftover (tight fit) yields higher score
    deterministic = 1.0 / (leftover + 1e-12)
    # random perturbation for exploration/tie‑breaking
    random_score = np.random.rand(np.count_nonzero(feasible))
    priorities[feasible] = (1 - epsilon) * deterministic + epsilon * random_score
    return priorities
```
