```python
import numpy as np
_rng = np.random.default_rng()
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combine inverse leftover with varianceâ€‘scaled jitter for adaptive bin selection."""
    eps = 1e-9
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    base_score = np.where(feasible, 1.0 / (remaining + eps), -np.inf)
    mean_rem = bins_remain_cap.mean()
    var_norm = np.var(bins_remain_cap) / (mean_rem**2 + eps)
    w_det = 1.0 / (1.0 + var_norm)
    w_rand = var_norm / (1.0 + var_norm)
    max_rem = bins_remain_cap.max()
    jitter_scale = np.where(max_rem > 0, 1.0 - remaining / max_rem, 0.0)
    jitter_scale = np.clip(jitter_scale, 0.0, 1.0)
    jitter = _rng.random(n) * item * jitter_scale
    tie = _rng.random(n) * 1e-6
    priority = base_score * w_det + jitter * w_rand + tie
    return priority
```
