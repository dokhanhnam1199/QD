{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\n_rng = np.random.default_rng(42)\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Inverse leftover with index bias and reproducible jitter for online BPP.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    inv = 1.0 / (remaining + eps)\n    bias = -np.arange(n) * 1e-5\n    jitter = _rng.random(n) * 0.01 * item\n    det_jitter = ((np.arange(n) * 31 + int(item * 1e6)) % 1000) * 1e-15\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = inv[feasible] + bias[feasible] + jitter[feasible] + det_jitter[feasible]\n    return priority\n\n[Heuristics 2nd]\nimport numpy as np\n\n# deterministic RNG for reproducible jitter\n_rng = np.random.default_rng(42)\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins: inverse leftover, tiny index bias, and scaled random jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    # deterministic tie\u2011breaker: prefer lower index\n    priority[feasible] += -np.arange(n)[feasible] * 1e-5\n    # tiny reproducible jitter proportional to item size\n    jitter = _rng.random(n) * 0.01 * item\n    priority[feasible] += jitter[feasible]\n    return priority\n\n[Heuristics 3rd]\nimport numpy as np\n\n_rng = np.random.default_rng(42)\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Inverse leftover with index bias and reproducible jitter for online BPP.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    inv = 1.0 / (remaining + eps)\n    bias = -np.arange(n) * 1e-5\n    jitter = _rng.random(n) * 0.01 * item\n    det_jitter = ((np.arange(n) * 31 + int(item * 1e6)) % 1000) * 1e-15\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = inv[feasible] + bias[feasible] + jitter[feasible] + det_jitter[feasible]\n    return priority\n\n[Heuristics 4th]\nimport numpy as np\n_rng = np.random.default_rng(42)\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritize bins by inverse leftover, low-index bias, and reproducible jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return priority\n    indices = np.arange(n)\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    priority[feasible] += -indices[feasible] * 1e-6\n    priority[feasible] += _rng.random(n)[feasible] * 0.01 * item\n    priority[feasible] += ((np.sin((item + indices[feasible]) * 7.0) + 1) * 0.5) * 1e-9 * item\n    return priority\n\n[Heuristics 5th]\nimport numpy as np\n_rng = np.random.default_rng(42)\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritize bins by inverse leftover, low-index bias, and reproducible jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return priority\n    indices = np.arange(n)\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    priority[feasible] += -indices[feasible] * 1e-6\n    priority[feasible] += _rng.random(n)[feasible] * 0.01 * item\n    priority[feasible] += ((np.sin((item + indices[feasible]) * 7.0) + 1) * 0.5) * 1e-9 * item\n    return priority\n\n[Heuristics 6th]\nimport numpy as np\n_rng = np.random.default_rng(42)\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Prioritize bins by inverse leftover, low-index bias, and reproducible jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return priority\n    indices = np.arange(n)\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    priority[feasible] += -indices[feasible] * 1e-6\n    priority[feasible] += _rng.random(n)[feasible] * 0.01 * item\n    priority[feasible] += ((np.sin((item + indices[feasible]) * 7.0) + 1) * 0.5) * 1e-9 * item\n    return priority\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins by tight fit, low-index bias, deterministic golden\u2011ratio jitter, plus small random noise.\"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    n = caps.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = caps - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    # core inverse leftover score\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    # bias toward lower\u2011index bins\n    idx = np.arange(n, dtype=float)\n    priority[feasible] -= idx[feasible] * 1e-5\n    # deterministic jitter using golden ratio\n    phi = 0.6180339887498949\n    jitter_det = np.mod(phi * (idx + 1) * item, 1.0) * 0.01 * item\n    priority[feasible] += jitter_det[feasible]\n    # small random jitter for exploration\n    jitter_rand = np.random.random(n) * 0.001 * item\n    priority[feasible] += jitter_rand[feasible]\n    return priority\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins by tight fit, low-index bias, deterministic golden\u2011ratio jitter, plus small random noise.\"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    n = caps.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = caps - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    # core inverse leftover score\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    # bias toward lower\u2011index bins\n    idx = np.arange(n, dtype=float)\n    priority[feasible] -= idx[feasible] * 1e-5\n    # deterministic jitter using golden ratio\n    phi = 0.6180339887498949\n    jitter_det = np.mod(phi * (idx + 1) * item, 1.0) * 0.01 * item\n    priority[feasible] += jitter_det[feasible]\n    # small random jitter for exploration\n    jitter_rand = np.random.random(n) * 0.001 * item\n    priority[feasible] += jitter_rand[feasible]\n    return priority\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins by tight fit, low-index bias, deterministic golden\u2011ratio jitter, plus small random noise.\"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    n = caps.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = caps - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    # core inverse leftover score\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    # bias toward lower\u2011index bins\n    idx = np.arange(n, dtype=float)\n    priority[feasible] -= idx[feasible] * 1e-5\n    # deterministic jitter using golden ratio\n    phi = 0.6180339887498949\n    jitter_det = np.mod(phi * (idx + 1) * item, 1.0) * 0.01 * item\n    priority[feasible] += jitter_det[feasible]\n    # small random jitter for exploration\n    jitter_rand = np.random.random(n) * 0.001 * item\n    priority[feasible] += jitter_rand[feasible]\n    return priority\n\n[Heuristics 10th]\n# Priority heuristic combining inverse leftover, index bias, and adaptive jitter.\nimport numpy as np\n\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    epsilon: float = 1e-9,\n    index_weight: float = 1e-5,\n    jitter_factor: float = 0.01,\n    rng_seed: int = None,\n) -> np.ndarray:\n    \"\"\"Score bins by inverse leftover, index bias, and adaptive jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = 1.0 / (remaining[feasible] + epsilon)\n    priority[feasible] -= np.arange(n)[feasible] * index_weight\n    priority[feasible] += np.arange(n)[feasible] * 1e-12\n    rng = np.random.default_rng(rng_seed) if rng_seed is not None else np.random.default_rng()\n    if np.any(feasible):\n        max_cap = bins_remain_cap.max()\n        jitter_vals = rng.random(np.count_nonzero(feasible)) * jitter_factor * (\n            (remaining[feasible] + epsilon) / (max_cap + epsilon)\n        )\n        priority[feasible] += jitter_vals\n    return priority\n\n[Heuristics 11th]\n# Priority heuristic combining inverse leftover, index bias, and adaptive jitter.\nimport numpy as np\n\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    epsilon: float = 1e-9,\n    index_weight: float = 1e-5,\n    jitter_factor: float = 0.01,\n    rng_seed: int = None,\n) -> np.ndarray:\n    \"\"\"Score bins by inverse leftover, index bias, and adaptive jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = 1.0 / (remaining[feasible] + epsilon)\n    priority[feasible] -= np.arange(n)[feasible] * index_weight\n    priority[feasible] += np.arange(n)[feasible] * 1e-12\n    rng = np.random.default_rng(rng_seed) if rng_seed is not None else np.random.default_rng()\n    if np.any(feasible):\n        max_cap = bins_remain_cap.max()\n        jitter_vals = rng.random(np.count_nonzero(feasible)) * jitter_factor * (\n            (remaining[feasible] + epsilon) / (max_cap + epsilon)\n        )\n        priority[feasible] += jitter_vals\n    return priority\n\n[Heuristics 12th]\nimport numpy as np\n\n_phi = 0.6180339887498949\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Priority via inverse leftover, index bias, and deterministic golden\u2011ratio jitter.\"\"\"\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    idx = np.arange(n, dtype=float)\n    primary = 1.0 / (remaining + eps)\n    bias = -idx * 1e-5\n    jitter = ((_phi * (idx + 1) * item) % 1.0) * 1e-6 * item\n    priority[feasible] = primary[feasible] + bias[feasible] + jitter[feasible]\n    return priority\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score feasible bins using inverse leftover, index bias, and deterministic phi jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    idx = np.arange(n)\n    base = 1.0 / (remaining[feasible] + eps)\n    bias = -idx[feasible] * 1e-5 + idx[feasible] * 1e-12\n    phi = 0.6180339887498949\n    jitter = (np.mod(phi * (idx[feasible] + 1) * item, 1.0) - 0.5) * 1e-5 * item\n    priority[feasible] = base + bias + jitter\n    return priority\n\n[Heuristics 14th]\nimport numpy as np\n\n_item_counter = 0\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    global _item_counter\n    _item_counter += 1\n    bins = np.asarray(bins_remain_cap, dtype=float)\n    n = bins.size\n    priority = np.full(n, -np.inf, dtype=float)\n    if n == 0:\n        return priority\n    remaining = bins - item\n    feasible = remaining >= 0\n    if not np.any(feasible):\n        return priority\n    eps = 1e-9\n    base_temp = 0.5\n    decay = 0.001\n    temp = max(0.05, base_temp * np.exp(-decay * _item_counter))\n    gumbel = -np.log(-np.log(np.random.rand(feasible.sum())))\n    priority[feasible] = -remaining[feasible] / temp + gumbel\n    priority[feasible] -= np.arange(n)[feasible] * 1e-6\n    jitter = np.random.rand(feasible.sum()) * (remaining[feasible] / (remaining[feasible].max() + eps)) * 0.01\n    priority[feasible] += jitter\n    return priority\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Scores bins by inverse remaining capacity, low-index bias, and jitter.\n    \"\"\"\n    rng = np.random.default_rng(42)  # deterministic jitter for reproducibility\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n\n    eps = 1e-12\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n\n    priority = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return priority\n\n    base = 1.0 / (remaining[feasible] + eps)          # inverse leftover\n    bias = np.arange(n)[feasible] * 1e-6                # low-index bias\n    jitter = rng.random(feasible.sum()) * 0.01 * item  # exploration jitter\n    idx_offset = np.arange(n)[feasible] * 1e-12        # tiny tie\u2011break\n\n    priority[feasible] = base - bias + jitter + idx_offset\n    return priority\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Scores bins by inverse remaining capacity, low-index bias, and jitter.\n    \"\"\"\n    rng = np.random.default_rng(42)  # deterministic jitter for reproducibility\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n\n    eps = 1e-12\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n\n    priority = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return priority\n\n    base = 1.0 / (remaining[feasible] + eps)          # inverse leftover\n    bias = np.arange(n)[feasible] * 1e-6                # low-index bias\n    jitter = rng.random(feasible.sum()) * 0.01 * item  # exploration jitter\n    idx_offset = np.arange(n)[feasible] * 1e-12        # tiny tie\u2011break\n\n    priority[feasible] = base - bias + jitter + idx_offset\n    return priority\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Scores bins by inverse remaining capacity, low-index bias, and jitter.\n    \"\"\"\n    rng = np.random.default_rng(42)  # deterministic jitter for reproducibility\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n\n    eps = 1e-12\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n\n    priority = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return priority\n\n    base = 1.0 / (remaining[feasible] + eps)          # inverse leftover\n    bias = np.arange(n)[feasible] * 1e-6                # low-index bias\n    jitter = rng.random(feasible.sum()) * 0.01 * item  # exploration jitter\n    idx_offset = np.arange(n)[feasible] * 1e-12        # tiny tie\u2011break\n\n    priority[feasible] = base - bias + jitter + idx_offset\n    return priority\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Scores bins by inverse remaining capacity, low-index bias, and jitter.\n    \"\"\"\n    rng = np.random.default_rng(42)  # deterministic jitter for reproducibility\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n\n    eps = 1e-12\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n\n    priority = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return priority\n\n    base = 1.0 / (remaining[feasible] + eps)          # inverse leftover\n    bias = np.arange(n)[feasible] * 1e-6                # low-index bias\n    jitter = rng.random(feasible.sum()) * 0.01 * item  # exploration jitter\n    idx_offset = np.arange(n)[feasible] * 1e-12        # tiny tie\u2011break\n\n    priority[feasible] = base - bias + jitter + idx_offset\n    return priority\n\n[Heuristics 19th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    eps: float = 3.3940680273918145e-09,\n    bias_factor: float = 8.696900385828479e-05,\n    jitter_factor: float = 0.04697494324369107,\n    det_jitter_factor: float = 9.489864274214504e-15,\n    det_jitter_multiplier: int = 51.85425826635653,\n    det_jitter_mod: int = 702.2985862983585,\n) -> np.ndarray:\n    \"\"\"Inverse leftover with index bias and reproducible jitter for online BPP.\n\n    Parameters\n    ----------\n    item : float\n        Size of the item to pack.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of the bins.\n    eps : float, optional\n        Small epsilon to avoid division by zero.\n    bias_factor : float, optional\n        Weight for the index bias term.\n    jitter_factor : float, optional\n        Scaling factor for the random jitter term.\n    det_jitter_factor : float, optional\n        Scaling factor for the deterministic jitter term.\n    det_jitter_multiplier : int, optional\n        Multiplier used in the deterministic jitter calculation.\n    det_jitter_mod : int, optional\n        Modulus used in the deterministic jitter calculation.\n    \"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n\n[Heuristics 20th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    eps: float = 3.3940680273918145e-09,\n    bias_factor: float = 8.696900385828479e-05,\n    jitter_factor: float = 0.04697494324369107,\n    det_jitter_factor: float = 9.489864274214504e-15,\n    det_jitter_multiplier: int = 51.85425826635653,\n    det_jitter_mod: int = 702.2985862983585,\n) -> np.ndarray:\n    \"\"\"Inverse leftover with index bias and reproducible jitter for online BPP.\n\n    Parameters\n    ----------\n    item : float\n        Size of the item to pack.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of the bins.\n    eps : float, optional\n        Small epsilon to avoid division by zero.\n    bias_factor : float, optional\n        Weight for the index bias term.\n    jitter_factor : float, optional\n        Scaling factor for the random jitter term.\n    det_jitter_factor : float, optional\n        Scaling factor for the deterministic jitter term.\n    det_jitter_multiplier : int, optional\n        Multiplier used in the deterministic jitter calculation.\n    det_jitter_mod : int, optional\n        Modulus used in the deterministic jitter calculation.\n    \"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}