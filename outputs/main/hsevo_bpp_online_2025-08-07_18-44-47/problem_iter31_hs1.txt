import numpy as np

_rng = np.random.default_rng()

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                epsilon: float = 4.931797319134953e-09,
                bias_factor: float = 3.13326728053839e-05,
                jitter_factor: float = 0.04418989107455528,
                var_penalty_factor: float = 1.91118473216315e-05) -> np.ndarray:
    """Score bins: inverse leftover + variance‑scaled jitter + tiny index bias + deviation penalty."""
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)

    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full( n, -np.inf, dtype=float)
    if not feasible.any():
        return priority

    # Base score: inverse of remaining capacity (avoid division by zero)
    base = 1.0 / (remaining[feasible] + epsilon)

    # Tiny index bias to break ties deterministically
    bias = -np.arange(n)[feasible] * bias_factor

    # Variance‑scaled jitter
    var_rem = np.var(remaining[feasible])
    jitter_scale = item * jitter_factor * (1.0 + np.sqrt(var_rem))
    jitter = (_rng.random(remaining[feasible].size) - 0.5) * jitter_scale

    # Deviation penalty
    var_penalty = -((remaining[feasible] - remaining[feasible].mean()) ** 2) * var_penalty_factor

    priority[feasible] = base + bias + jitter + var_penalty
    return priority
