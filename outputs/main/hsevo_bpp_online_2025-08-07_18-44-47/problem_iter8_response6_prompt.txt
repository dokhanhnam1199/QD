{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n# deterministic RNG for reproducible jitter\n_rng = np.random.default_rng(42)\n\n    \"\"\"Score bins: inverse leftover, tiny index bias, and scaled random jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    # deterministic tie\u2011breaker: prefer lower index\n    priority[feasible] += -np.arange(n)[feasible] * 1e-5\n    # tiny reproducible jitter proportional to item size\n    jitter = _rng.random(n) * 0.01 * item\n    priority[feasible] += jitter[feasible]\n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Inverse leftover capacity priority with deterministic tie-breaker and optional noise.\n    \"\"\"\n    if bins_remain_cap.size == 0:\n        return np.empty_like(bins_remain_cap, dtype=float)\n    SMALL_EPS = 1e-12\n    EPSILON = 0.05\n    RANDOM_NOISE = 0.01\n    rng = np.random.default_rng()\n    feasible = bins_remain_cap >= item\n    residual = bins_remain_cap - item\n    deterministic = np.where(feasible, 1.0 / (residual + SMALL_EPS), -np.inf)\n    bin_indices = np.arange(bins_remain_cap.size)\n    deterministic += np.where(feasible, bin_indices * 1e-9, 0)\n    deterministic += np.where(feasible, rng.random(bins_remain_cap.shape) * RANDOM_NOISE, 0)\n    random_scores = np.where(feasible, rng.random(bins_remain_cap.shape), -np.inf)\n    return random_scores if rng.random() < EPSILON else deterministic\n\n### Analyze & experience\n- Comparing (best) vs (worst), we see that the best heuristic uses a fixed RNG seed, a tiny index bias, and minimal jitter, while the worst imports many unused libraries, adds random exploration, and relies on a different tie\u2011break direction, making it non\u2011deterministic and heavier.  \n(Second best) vs (second worst) shows the second best is identical to the best, whereas the second worst removes jitter, using only a 1e\u201112 index bias, still deterministic but less robust to ties.  \nComparing (1st) vs (2nd), they are identical in implementation and behavior.  \n(3rd) vs (4th) are also identical to the first heuristic, confirming consistency across the top.  \nComparing the second worst vs worst, the second worst is deterministic, whereas the worst introduces random scores with a small probability, adding overhead and non\u2011determinism.  \nOverall: deterministic, lightweight implementations with minimal stochastic tie\u2011breakers outperform more complex, random\u2011heavy designs.\n- \n- **Keywords**: reproducibility, deterministic, capacity\u2011aware, vectorized, tie\u2011breaker.  \n- **Advice**: set fixed RNG seeds, compute scores as inverse leftover capacity, add tiny jitter proportional to item size, use NumPy vectorization, early\u2011return on empty input.  \n- **Avoid**: unnecessary random exploration, extra imports, worst\u2011fit bias, vague type hints, non\u2011deterministic branches.  \n- **Explanation**: Determinism ensures consistent evaluation; capacity\u2011aware scores prioritize feasible bins; minimal jitter resolves ties without disrupting performance; vectorization yields speed.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}