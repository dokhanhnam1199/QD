```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Priority based on inverse leftover capacity plus small random noise to break ties; infeasible bins are -inf."""
    fit = bins_remain_cap >= item
    if fit.any():
        left = bins_remain_cap - item
        epsilon = 1e-6
        inv_left = 1.0/(left[fit] + epsilon)
        noise = np.random.rand(np.count_nonzero(fit)) * 0.1 * item
        priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)
        priorities[fit] = inv_left + noise
    else:
        priorities = np.full(bins_remain_cap.shape, -np.inf, dtype=float)
    return priorities
```
