```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritize bins using inverse leftover, index bias, adaptive deterministic and random jitter weighted by remaining variance."""
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    if not np.any(feasible):
        return priority
    idx = np.arange(n, dtype=float)
    eps = 1e-12
    base = 1.0 / (remaining[feasible] + eps)
    bias = -idx[feasible] * 1e-6
    phi = 0.6180339887498949
    phi_jitter = (np.mod(phi * (idx[feasible] + 1) * item, 1.0) - 0.5)
    sin_jitter = np.sin((item + idx[feasible]) * 0.01)
    det_jitter = (phi_jitter + sin_jitter) * 1e-5 * item
    var_rem = np.var(remaining[feasible])
    var_factor = np.clip(np.sqrt(var_rem + eps), 0, 1)
    jitter_scale = 1 + var_factor
    load_scale = remaining[feasible] / (remaining[feasible].max() + eps)
    rng = np.random.default_rng()
    rand_jitter = rng.standard_normal(feasible.sum()) * (1e-5 * item * load_scale * jitter_scale)
    priority[feasible] = base + bias + det_jitter + rand_jitter
    return priority
```
