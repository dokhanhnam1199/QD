{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n_rng = np.random.default_rng()\n\n    \"\"\"Score bins: inverse leftover + variance\u2011scaled jitter + tiny index bias + deviation penalty.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    if not feasible.any():\n        return priority\n    eps = 1e-12\n    base = 1.0 / (remaining[feasible] + eps)\n    bias = -np.arange(n)[feasible] * 1e-6\n    var_rem = np.var(remaining[feasible])\n    jitter_scale = item * 0.01 * (1.0 + np.sqrt(var_rem))\n    jitter = (_rng.random(remaining[feasible].size) - 0.5) * jitter_scale\n    var_penalty = -((remaining[feasible] - remaining[feasible].mean())**2) * 1e-6\n    priority[feasible] = base + bias + jitter + var_penalty\n    return priority\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \n- **Keywords:** feasibility, inverse\u2011leftover, size\u2011scaled jitter; **Advice:** filter infeasible bins, score\u202f=\u202f1/(remaining+\u03b5)+\u03c3\u00b7itemSize\u00b7N(0,1); **Avoid:** fixed RNG seed, deterministic index bias; **Explanation:** keeps decisions stochastic yet capacity\u2011aware.  \n- **Keywords:** vectorized, minimal state; **Advice:** compute scores with NumPy broadcasting, early\u2011return on empty input; **Avoid:** per\u2011call RNG, mutable globals; **Explanation:** ensures speed and reproducibility.  \n- **Keywords:** tie\u2011break, tiny bias; **Advice:** add a 1e\u20119 constant when scores tie; **Avoid:** large deterministic offsets, over\u2011parameterisation; **Explanation:** gives reproducible tie\u2011breaks without biasing selection.  \n- **Keywords:** safeguards, docs; **Advice:** guard division with \u03b5, type\u2011hint returns, concise docstring; **Avoid:** missing edge\u2011cases, vague comments; **Explanation:** prevents runtime errors and aids maintenance.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}