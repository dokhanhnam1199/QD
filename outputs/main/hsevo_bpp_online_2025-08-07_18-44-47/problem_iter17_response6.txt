```python
import numpy as np

_rng = np.random.default_rng(42)

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score bins using inverse leftover, index bias, sinusoidal jitter, and reproducible random noise."""
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    eps = 1e-9
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    priority[feasible] = 1.0 / (remaining[feasible] + eps)
    priority[feasible] -= np.arange(n)[feasible] * 1e-5
    sin_jitter = np.sin((item + np.arange(n)) * 0.01)
    priority[feasible] += sin_jitter[feasible] * 1e-7
    priority[feasible] += _rng.random(n)[feasible] * 0.01 * item
    return priority
```
