```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, rng_seed: int = None) -> np.ndarray:
    """Heuristic using inverse leftover, index bias, golden‑ratio jitter, adaptive random jitter, deterministic tie‑breaker."""
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    if not np.any(feasible):
        return priority
    eps = 1e-9
    idx = np.arange(n)
    priority[feasible] = 1.0 / (remaining[feasible] + eps)
    priority[feasible] -= idx[feasible] * 1e-5
    phi = 0.6180339887498949
    golden_jitter = np.mod(idx * phi + item, 1.0) * 0.01
    priority[feasible] += golden_jitter[feasible]
    rng = np.random.default_rng(rng_seed)
    max_cap = bins_remain_cap.max()
    rand_vals = rng.random(n) * 0.01 * item * (remaining + eps) / (max_cap + eps)
    priority[feasible] += rand_vals[feasible]
    deterministic_jitter = ((idx * 31 + int(item * 1e6)) % 1000) * 1e-15
    priority[feasible] += deterministic_jitter[feasible]
    return priority
```
