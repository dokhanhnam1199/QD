```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines almost-full-fit priority (1/(remaining+eps)) with small random perturbation and bin-index tie-breaker for deterministic yet exploratory bin selection.
    """
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    eps = 1e-9
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    priority[feasible] = 1.0 / (remaining[feasible] + eps)
    noise = np.random.rand(n) * 0.01 * item
    tie_break = -np.arange(n) * 1e-5
    priority[feasible] += noise[feasible] + tie_break[feasible]
    return priority
```
