```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Inverse leftover, low-index bias, deterministic sinusoidal jitter, and item‑scaled pseudo‑random jitter."""
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    eps = 1e-9
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    if not np.any(feasible):
        return priority
    indices = np.arange(n)
    primary = 1.0 / (remaining[feasible] + eps)
    bias = -indices[feasible] * 1e-6
    det_jitter = ((np.sin((item + indices[feasible]) * 7.0) + 1) * 0.5) * 1e-9 * item
    int_item = int(item * 1e6)
    # compute deterministic pseudo‑random jitter
    pseudo = ((int_item + 31 * indices[feasible] + 7) % 2147483647) / 2147483647.0
    rand_jitter = pseudo * 0.01 * item
    priority[feasible] = primary + bias + det_jitter + rand_jitter
    return priority
```
