import numpy as np

_item_avg = None
_item_count = 1
_rng = np.random.default_rng()

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                eps: float = 8.13060546131751e-09,
                feasibility_threshold: float = -0.00132264759364978,
                weight_base: float = 0.8378460511094922,
                weight_tight: float = 0.3343702262511642,
                jitter_scale_factor: float = 0.062837682023074,
                bias_factor: float = 0.0004776022707263602,
                jitter_center_offset: float = 0.7064796899904706) -> np.ndarray:
    """Inverse leftover with variance‑scaled jitter and adaptive item‑size bias for online bin packing."""
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    remaining = bins_remain_cap - item
    feasible = remaining >= feasibility_threshold
    priority = np.full(n, -np.inf, dtype=float)
    if not feasible.any():
        return priority
    global _item_avg, _item_count
    if _item_avg is None:
        _item_avg = item
        _item_count = 1
    else:
        _item_count += 1
        _item_avg += (item - _item_avg) / _item_count
    dev_factor = abs(item - _item_avg) / (_item_avg + eps)
    base = 1.0 / (remaining[feasible] + eps)
    tight = item / (item + remaining[feasible] + eps)
    score = weight_base * base + weight_tight * tight
    var_rem = np.var(remaining[feasible])
    jitter_scale = item * jitter_scale_factor * (1.0 + np.sqrt(var_rem)) * (1.0 + dev_factor)
    jitter = (_rng.random(feasible.sum()) - jitter_center_offset) * jitter_scale
    bias = -np.arange(n)[feasible] * bias_factor
    priority[feasible] = score + jitter + bias
    return priority
