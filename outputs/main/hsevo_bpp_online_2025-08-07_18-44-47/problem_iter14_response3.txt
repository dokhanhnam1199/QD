```python
import numpy as np

_rng = np.random.default_rng(42)

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    eps = 1e-9
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    if not np.any(feasible):
        return priority
    indices = np.arange(n)
    base = 1.0 / (remaining[feasible] + eps)
    bias = -indices[feasible] * 1e-5
    jitter = _rng.random(n)[feasible] * 0.01 * item
    det_jitter = (np.sin((item + indices[feasible]) * 7.0) + 1) * 0.5 * 1e-9 * item
    priority[feasible] = base + bias + jitter + det_jitter
    return priority
```
