```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    n = bins_remain_cap.size
    priority = np.full(n, -np.inf, dtype=float)
    if n == 0:
        return priority
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    if not np.any(feasible):
        return priority
    eps = 1e-12
    rem = remaining[feasible]
    base = 1.0 / (rem + eps)
    tight = item / (item + rem + eps)
    base = base * tight
    var_rem = np.var(rem) if rem.size > 1 else 0.0
    rng = np.random.default_rng()
    jitter_scale = item * 0.005 * (1.0 + np.sqrt(var_rem))
    jitter = (rng.random(rem.size) - 0.5) * jitter_scale
    priority[feasible] = base + jitter
    return priority
```
