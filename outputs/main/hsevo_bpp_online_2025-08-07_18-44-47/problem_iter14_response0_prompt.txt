{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n_rng = np.random.default_rng(42)\n\n    \"\"\"Prioritize bins by inverse leftover, low-index bias, and reproducible jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return priority\n    indices = np.arange(n)\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    priority[feasible] += -indices[feasible] * 1e-6\n    priority[feasible] += _rng.random(n)[feasible] * 0.01 * item\n    priority[feasible] += ((np.sin((item + indices[feasible]) * 7.0) + 1) * 0.5) * 1e-9 * item\n    return priority\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n_phi = 0.6180339887498949\n\n    \"\"\"Priority via inverse leftover, index bias, and deterministic golden\u2011ratio jitter.\"\"\"\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    idx = np.arange(n, dtype=float)\n    primary = 1.0 / (remaining + eps)\n    bias = -idx * 1e-5\n    jitter = ((_phi * (idx + 1) * item) % 1.0) * 1e-6 * item\n    priority[feasible] = primary[feasible] + bias[feasible] + jitter[feasible]\n    return priority\n\n### Analyze & experience\n- - **Comparing (best) vs (worst):** The best heuristic (1st) returns a full priority vector using inverse leftover, a negative index bias, a reproducible random jitter, and an ultra\u2011small deterministic jitter, giving reproducible yet diversified tie\u2011breaking. The worst heuristic (20th) stops after size\u2011check and returns an empty array, providing no scoring at all.  \n- **Comparing (second best) vs (second worst):** The second best (2nd) still computes a well\u2011defined priority with inverse leftover, index bias, and reproducible jitter. The second worst (19th) defines many hyper\u2011parameters but never computes any priority, leaving the function effectively non\u2011functional.  \n- **Comparing (1st) vs (2nd):** The only difference is the extra deterministic jitter term in (1st), which supplies a stable, deterministic tie\u2011breaker without altering the main score, making (1st) marginally more robust.  \n- **Comparing (3rd) vs (4th):** (3rd) duplicates the top heuristic (identical to 1st). (4th) replaces the deterministic jitter with a sinusoidal term and reduces the index\u2011bias magnitude; the sinusoid adds negligible influence, yielding a slightly weaker tie\u2011break.  \n- **Comparing (second worst) vs (worst):** Heuristics (19th) and (20th) are essentially identical stubs that lack any priority computation; (19th) merely has a richer docstring, but both are equally ineffective.  \n- **Overall:** The ranking follows a clear gradient: heuristics that combine a solid primary score (inverse leftover) with deterministic tie\u2011breakers and bounded random jitter perform best, while those that omit the primary score or leave core logic unfinished perform worst.\n- \n- **Keywords:** capacity\u2011aware, adaptive stochastic tie\u2011breakers, dynamic jitter, vectorized scoring.  \n- **Advice:** use inverse\u2011leftover as primary score, add jitter proportional to item size, layer a deterministic tie\u2011breaker for reproducibility, and include early\u2011exit checks with fully vectorized operations.  \n- **Avoid:** fixed RNG seeds, static index bias, constant tiny jitter, unused imports, over\u2011parameterization, dead\u2011code, and any logic that remains deterministic\u2011only.  \n- **Explanation:** adaptive jitter balances exploration with item scale, stochastic tie\u2011breakers prevent systematic bias, deterministic fallbacks keep runs reproducible, and vectorized logic ensures high performance.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}