```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score bins by inverse leftover capacity with tiny deterministic and random tie‑breakers; infeasible bins get -inf."""
    if bins_remain_cap.size == 0:
        return np.empty(0, dtype=float)
    EPSILON = 0.1          # chance to use pure random exploration
    EPS = 1e-9             # avoid division by zero
    RAND_SCALE = 1e-6      # small random jitter factor
    feasible = bins_remain_cap >= item
    leftover = bins_remain_cap - item
    base = np.where(feasible, 1.0 / (leftover + EPS), -np.inf)
    # deterministic tie‑break using bin index (ensures uniqueness)
    tie_break = np.arange(bins_remain_cap.shape[0]) * 1e-12
    # tiny random jitter proportional to item size
    jitter = np.where(feasible, np.random.rand(bins_remain_cap.shape[0]), 0.0) * RAND_SCALE * item
    deterministic = base + tie_break + jitter
    random_score = np.where(feasible, np.random.rand(bins_remain_cap.shape[0]), -np.inf)
    return random_score if np.random.rand() < EPSILON else deterministic
```
