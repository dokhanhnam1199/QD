```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Inverse leftover score with tiny random tie‑breaker; infeasible bins get -inf."""
    # Combine inverse-remaining-capacity scoring with stochastic tie‑breaking.
    if bins_remain_cap.size == 0:
        return np.array([], dtype=float)
    eps = 1e-9
    noise_factor = 1e-3
    leftover = bins_remain_cap - item
    feasible = leftover >= 0
    base = np.where(feasible, 1.0 / (leftover + eps), -np.inf)
    noise = np.random.rand(bins_remain_cap.shape[0]) * noise_factor * item
    return np.where(feasible, base + noise, -np.inf)
```
