```python
import numpy as np

_item_avg = None
_item_count = 0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score bins by inverse leftover, tightness factor, variance‑scaled jitter, tiny index bias."""
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    if not np.any(feasible):
        return priority
    # Update running average of seen items (light adaptivity)
    global _item_avg, _item_count
    if _item_avg is None:
        _item_avg = item
        _item_count = 1
    else:
        _item_count += 1
        _item_avg += (item - _item_avg) / _item_count
    eps = 1e-12
    rem = remaining[feasible]
    # Base: inverse leftover weighted by tightness (prefers tighter fit)
    base = 1.0 / (rem + eps)
    tight = item / (item + rem + eps)
    base *= tight
    # Jitter magnitude grows with variance of remaining capacities and item deviation from average
    var_rem = np.var(rem) if rem.size > 1 else 0.0
    jitter_coeff = 0.005 * (1.0 + np.sqrt(var_rem))
    jitter_adj = 1.0 + abs(item - _item_avg) / (_item_avg + eps)
    jitter_scale = item * jitter_coeff * jitter_adj
    rng = np.random.default_rng()
    jitter = (rng.random(rem.size) - 0.5) * jitter_scale
    # Tiny index bias for deterministic tie‑breaks
    idx_bias = np.arange(n)[feasible] * 1e-6
    priority[feasible] = base + jitter + idx_bias
    return priority
```
