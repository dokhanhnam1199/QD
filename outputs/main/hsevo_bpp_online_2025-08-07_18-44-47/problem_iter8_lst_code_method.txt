{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\n# deterministic RNG for reproducible jitter\n_rng = np.random.default_rng(42)\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins: inverse leftover, tiny index bias, and scaled random jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    # deterministic tie\u2011breaker: prefer lower index\n    priority[feasible] += -np.arange(n)[feasible] * 1e-5\n    # tiny reproducible jitter proportional to item size\n    jitter = _rng.random(n) * 0.01 * item\n    priority[feasible] += jitter[feasible]\n    return priority\n\n[Heuristics 2nd]\nimport numpy as np\n\n# deterministic RNG for reproducible jitter\n_rng = np.random.default_rng(42)\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins: inverse leftover, tiny index bias, and scaled random jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    # deterministic tie\u2011breaker: prefer lower index\n    priority[feasible] += -np.arange(n)[feasible] * 1e-5\n    # tiny reproducible jitter proportional to item size\n    jitter = _rng.random(n) * 0.01 * item\n    priority[feasible] += jitter[feasible]\n    return priority\n\n[Heuristics 3rd]\nimport numpy as np\n\n# deterministic RNG for reproducible jitter\n_rng = np.random.default_rng(42)\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins: inverse leftover, tiny index bias, and scaled random jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    # deterministic tie\u2011breaker: prefer lower index\n    priority[feasible] += -np.arange(n)[feasible] * 1e-5\n    # tiny reproducible jitter proportional to item size\n    jitter = _rng.random(n) * 0.01 * item\n    priority[feasible] += jitter[feasible]\n    return priority\n\n[Heuristics 4th]\nimport numpy as np\n\n# deterministic RNG for reproducible jitter\n_rng = np.random.default_rng(42)\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins: inverse leftover, tiny index bias, and scaled random jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    # deterministic tie\u2011breaker: prefer lower index\n    priority[feasible] += -np.arange(n)[feasible] * 1e-5\n    # tiny reproducible jitter proportional to item size\n    jitter = _rng.random(n) * 0.01 * item\n    priority[feasible] += jitter[feasible]\n    return priority\n\n[Heuristics 5th]\nimport numpy as np\n\n# deterministic RNG for reproducible jitter\n_rng = np.random.default_rng(42)\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins: inverse leftover, tiny index bias, and scaled random jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    # deterministic tie\u2011breaker: prefer lower index\n    priority[feasible] += -np.arange(n)[feasible] * 1e-5\n    # tiny reproducible jitter proportional to item size\n    jitter = _rng.random(n) * 0.01 * item\n    priority[feasible] += jitter[feasible]\n    return priority\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score feasible bins by inverse leftover capacity, tie\u2011break by bin index.\"\"\"\n    if bins_remain_cap.size == 0:\n        return np.empty_like(bins_remain_cap, dtype=float)\n    priors = np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return priors\n    residual = bins_remain_cap[feasible] - item\n    epsilon = 1e-9\n    base = 1.0 / (residual + epsilon)\n    idx = np.nonzero(feasible)[0].astype(float)\n    tie_break = idx * 1e-12\n    priors[feasible] = base + tie_break\n    return priors\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Inverse leftover with deterministic index bias and tiny noise.\"\"\"\n    # Combination of inverse leftover, deterministic tie\u2011breaker, and tiny noise\n    if bins_remain_cap.size == 0:\n        return np.empty_like(bins_remain_cap, dtype=float)\n    residual = bins_remain_cap - item\n    eps = 1e-6\n    base = 1.0 / (residual + eps)\n    priors = np.where(residual >= 0, base, -np.inf)\n    priors += np.arange(bins_remain_cap.size) * 1e-5\n    rng = np.random.default_rng(int(item * 1e6) + 12345)\n    priors += rng.random(bins_remain_cap.size) * 1e-6 * item\n    return priors\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Inverse leftover capacity with deterministic index tie\u2011breaker; infeasible bins get -inf.\"\"\"\n    if bins_remain_cap.size == 0:\n        return np.empty_like(bins_remain_cap, dtype=float)\n    fits = bins_remain_cap >= item\n    leftover = bins_remain_cap - item\n    eps = 1e-12\n    inv = 1.0 / (leftover + eps)\n    # deterministic tie\u2011breaker: tiny increasing offset per bin\n    tie = 1e-12 * item * np.arange(bins_remain_cap.shape[0])\n    priorities = np.where(fits, inv + tie, -np.inf)\n    return priorities\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priors = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return priors\n    residual = bins_remain_cap[feasible] - item\n    epsilon = 1e-9\n    base = 1.0 / (residual + epsilon)\n    tie = (np.nonzero(feasible)[0].astype(float) + 1) * 1e-12\n    priors[feasible] = base + tie\n    return priors\n\n[Heuristics 10th]\nimport numpy as np\n\n_rng = np.random.default_rng(123456789)\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Compute priority scores for bins in online bin packing.\n\n    Scores favor bins that become highly filled after placing `item` and leave little leftover.\n    Infeasible bins receive -inf. A deterministic tie\u2011breaker prefers lower indices, and a tiny\n    reproducible jitter proportional to `item` resolves remaining ties.\n\n    Parameters\n    ----------\n    item : float\n        Size of the incoming item.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of each bin.\n\n    Returns\n    -------\n    np.ndarray\n        Priority scores for each bin.\n    \"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-12\n    feasible = bins_remain_cap >= item\n    priority = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return priority\n    remaining_after = bins_remain_cap[feasible] - item\n    used_after = 1.0 - bins_remain_cap[feasible] + item\n    base = used_after / (remaining_after + eps)\n    tie = -np.arange(n)[feasible] * 1e-8\n    jitter = _rng.random(remaining_after.shape) * 1e-6 * item\n    priority[feasible] = base + tie + jitter\n    return priority\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score feasible bins by inverse leftover capacity, tie\u2011break by bin index.\"\"\"\n    if bins_remain_cap.size == 0:\n        return np.empty_like(bins_remain_cap, dtype=float)\n    priors = np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return priors\n    residual = bins_remain_cap[feasible] - item\n    epsilon = 1e-9\n    base = 1.0 / (residual + epsilon)\n    idx = np.nonzero(feasible)[0].astype(float)\n    tie_break = idx * 1e-12\n    priors[feasible] = base + tie_break\n    return priors\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins for online BPP: inverse leftover with deterministic tie\u2011breaker.\"\"\"\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n    if bins_remain_cap.size == 0:\n        return np.empty(0, dtype=float)\n    residual = bins_remain_cap - item\n    eps = 1e-9\n    feasible = residual >= 0\n    base_score = np.where(feasible, 1.0 / (residual + eps), -np.inf)\n    jitter = 1e-10 * item * np.arange(bins_remain_cap.size)\n    return base_score + jitter\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Inverse leftover capacity with deterministic index tie\u2011breaker; infeasible bins get -inf.\"\"\"\n    if bins_remain_cap.size == 0:\n        return np.empty_like(bins_remain_cap, dtype=float)\n    fits = bins_remain_cap >= item\n    leftover = bins_remain_cap - item\n    eps = 1e-12\n    inv = 1.0 / (leftover + eps)\n    # deterministic tie\u2011breaker: tiny increasing offset per bin\n    tie = 1e-12 * item * np.arange(bins_remain_cap.shape[0])\n    priorities = np.where(fits, inv + tie, -np.inf)\n    return priorities\n\n[Heuristics 14th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Inverse leftover capacity priority with deterministic tie-breaker and optional noise.\n    \"\"\"\n    if bins_remain_cap.size == 0:\n        return np.empty_like(bins_remain_cap, dtype=float)\n    SMALL_EPS = 1e-12\n    EPSILON = 0.05\n    RANDOM_NOISE = 0.01\n    rng = np.random.default_rng()\n    feasible = bins_remain_cap >= item\n    residual = bins_remain_cap - item\n    deterministic = np.where(feasible, 1.0 / (residual + SMALL_EPS), -np.inf)\n    bin_indices = np.arange(bins_remain_cap.size)\n    deterministic += np.where(feasible, bin_indices * 1e-9, 0)\n    deterministic += np.where(feasible, rng.random(bins_remain_cap.shape) * RANDOM_NOISE, 0)\n    random_scores = np.where(feasible, rng.random(bins_remain_cap.shape), -np.inf)\n    return random_scores if rng.random() < EPSILON else deterministic\n\n[Heuristics 15th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Inverse leftover capacity priority with deterministic tie-breaker and optional noise.\n    \"\"\"\n    if bins_remain_cap.size == 0:\n        return np.empty_like(bins_remain_cap, dtype=float)\n    SMALL_EPS = 1e-12\n    EPSILON = 0.05\n    RANDOM_NOISE = 0.01\n    rng = np.random.default_rng()\n    feasible = bins_remain_cap >= item\n    residual = bins_remain_cap - item\n    deterministic = np.where(feasible, 1.0 / (residual + SMALL_EPS), -np.inf)\n    bin_indices = np.arange(bins_remain_cap.size)\n    deterministic += np.where(feasible, bin_indices * 1e-9, 0)\n    deterministic += np.where(feasible, rng.random(bins_remain_cap.shape) * RANDOM_NOISE, 0)\n    random_scores = np.where(feasible, rng.random(bins_remain_cap.shape), -np.inf)\n    return random_scores if rng.random() < EPSILON else deterministic\n\n[Heuristics 16th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Inverse leftover capacity priority with deterministic tie-breaker and optional noise.\n    \"\"\"\n    if bins_remain_cap.size == 0:\n        return np.empty_like(bins_remain_cap, dtype=float)\n    SMALL_EPS = 1e-12\n    EPSILON = 0.05\n    RANDOM_NOISE = 0.01\n    rng = np.random.default_rng()\n    feasible = bins_remain_cap >= item\n    residual = bins_remain_cap - item\n    deterministic = np.where(feasible, 1.0 / (residual + SMALL_EPS), -np.inf)\n    bin_indices = np.arange(bins_remain_cap.size)\n    deterministic += np.where(feasible, bin_indices * 1e-9, 0)\n    deterministic += np.where(feasible, rng.random(bins_remain_cap.shape) * RANDOM_NOISE, 0)\n    random_scores = np.where(feasible, rng.random(bins_remain_cap.shape), -np.inf)\n    return random_scores if rng.random() < EPSILON else deterministic\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins by inverse leftover capacity with tiny deterministic and random tie\u2011breakers; infeasible bins get -inf.\"\"\"\n    if bins_remain_cap.size == 0:\n        return np.empty(0, dtype=float)\n    EPSILON = 0.1          # chance to use pure random exploration\n    EPS = 1e-9             # avoid division by zero\n    RAND_SCALE = 1e-6      # small random jitter factor\n    feasible = bins_remain_cap >= item\n    leftover = bins_remain_cap - item\n    base = np.where(feasible, 1.0 / (leftover + EPS), -np.inf)\n    # deterministic tie\u2011break using bin index (ensures uniqueness)\n    tie_break = np.arange(bins_remain_cap.shape[0]) * 1e-12\n    # tiny random jitter proportional to item size\n    jitter = np.where(feasible, np.random.rand(bins_remain_cap.shape[0]), 0.0) * RAND_SCALE * item\n    deterministic = base + tie_break + jitter\n    random_score = np.where(feasible, np.random.rand(bins_remain_cap.shape[0]), -np.inf)\n    return random_score if np.random.rand() < EPSILON else deterministic\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins by inverse leftover capacity with tiny deterministic and random tie\u2011breakers; infeasible bins get -inf.\"\"\"\n    if bins_remain_cap.size == 0:\n        return np.empty(0, dtype=float)\n    EPSILON = 0.1          # chance to use pure random exploration\n    EPS = 1e-9             # avoid division by zero\n    RAND_SCALE = 1e-6      # small random jitter factor\n    feasible = bins_remain_cap >= item\n    leftover = bins_remain_cap - item\n    base = np.where(feasible, 1.0 / (leftover + EPS), -np.inf)\n    # deterministic tie\u2011break using bin index (ensures uniqueness)\n    tie_break = np.arange(bins_remain_cap.shape[0]) * 1e-12\n    # tiny random jitter proportional to item size\n    jitter = np.where(feasible, np.random.rand(bins_remain_cap.shape[0]), 0.0) * RAND_SCALE * item\n    deterministic = base + tie_break + jitter\n    random_score = np.where(feasible, np.random.rand(bins_remain_cap.shape[0]), -np.inf)\n    return random_score if np.random.rand() < EPSILON else deterministic\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins by inverse leftover capacity with tiny deterministic and random tie\u2011breakers; infeasible bins get -inf.\"\"\"\n    if bins_remain_cap.size == 0:\n        return np.empty(0, dtype=float)\n    EPSILON = 0.1          # chance to use pure random exploration\n    EPS = 1e-9             # avoid division by zero\n    RAND_SCALE = 1e-6      # small random jitter factor\n    feasible = bins_remain_cap >= item\n    leftover = bins_remain_cap - item\n    base = np.where(feasible, 1.0 / (leftover + EPS), -np.inf)\n    # deterministic tie\u2011break using bin index (ensures uniqueness)\n    tie_break = np.arange(bins_remain_cap.shape[0]) * 1e-12\n    # tiny random jitter proportional to item size\n    jitter = np.where(feasible, np.random.rand(bins_remain_cap.shape[0]), 0.0) * RAND_SCALE * item\n    deterministic = base + tie_break + jitter\n    random_score = np.where(feasible, np.random.rand(bins_remain_cap.shape[0]), -np.inf)\n    return random_score if np.random.rand() < EPSILON else deterministic\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins by inverse leftover capacity with tiny deterministic and random tie\u2011breakers; infeasible bins get -inf.\"\"\"\n    if bins_remain_cap.size == 0:\n        return np.empty(0, dtype=float)\n    EPSILON = 0.1          # chance to use pure random exploration\n    EPS = 1e-9             # avoid division by zero\n    RAND_SCALE = 1e-6      # small random jitter factor\n    feasible = bins_remain_cap >= item\n    leftover = bins_remain_cap - item\n    base = np.where(feasible, 1.0 / (leftover + EPS), -np.inf)\n    # deterministic tie\u2011break using bin index (ensures uniqueness)\n    tie_break = np.arange(bins_remain_cap.shape[0]) * 1e-12\n    # tiny random jitter proportional to item size\n    jitter = np.where(feasible, np.random.rand(bins_remain_cap.shape[0]), 0.0) * RAND_SCALE * item\n    deterministic = base + tie_break + jitter\n    random_score = np.where(feasible, np.random.rand(bins_remain_cap.shape[0]), -np.inf)\n    return random_score if np.random.rand() < EPSILON else deterministic\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}