import numpy as np

_rng = np.random.default_rng(42)

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    eps: float = 6.0307211433917475e-09,
    bias_factor: float = 8.174022336897435e-06,
    jitter_factor: float = 0.09131155095889704,
    det_jitter_factor: float = 7.705100021825921e-16,
    det_jitter_multiplier: int = 51.85425826635653,
    det_jitter_mod: int = 1777.6239429519217,
) -> np.ndarray:
    """Inverse leftover with index bias and reproducible jitter for online BPP.

    Parameters
    ----------
    item : float
        Size of the item to pack.
    bins_remain_cap : np.ndarray
        Remaining capacities of the bins.
    eps : float, optional
        Small epsilon to avoid division by zero.
    bias_factor : float, optional
        Weight for the index bias term.
    jitter_factor : float, optional
        Scaling factor for the random jitter term.
    det_jitter_factor : float, optional
        Scaling factor for the deterministic jitter term.
    det_jitter_multiplier : int, optional
        Multiplier used in the deterministic jitter calculation.
    det_jitter_mod : int, optional
        Modulus used in the deterministic jitter calculation.
    """
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)

    remaining = bins_remain_cap - item
    feasible = remaining >= 0

    inv = 1.0 / (remaining + eps)
    bias = -np.arange(n) * bias_factor * bias_factor
    jitter = _rng.random(n) * jitter_factor * item
    det_jitter = ((np.arange(n) * det_jitter_multiplier + int(item * 1e6)) % det_jitter_mod) * det_jitter_factor

    priority = np.full(n, -np.inf, dtype=float)
    priority[feasible] = inv[feasible] + bias[feasible] + jitter[feasible] + det_jitter[feasible]
    return priority
