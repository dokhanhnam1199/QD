```python
import numpy as np

_rng = np.random.default_rng()

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score bins: inverse leftover + varianceâ€‘scaled jitter + tiny index bias + deviation penalty."""
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    if not feasible.any():
        return priority
    eps = 1e-12
    base = 1.0 / (remaining[feasible] + eps)
    bias = -np.arange(n)[feasible] * 1e-6
    var_rem = np.var(remaining[feasible])
    jitter_scale = item * 0.01 * (1.0 + np.sqrt(var_rem))
    jitter = (_rng.random(remaining[feasible].size) - 0.5) * jitter_scale
    var_penalty = -((remaining[feasible] - remaining[feasible].mean())**2) * 1e-6
    priority[feasible] = base + bias + jitter + var_penalty
    return priority
```
