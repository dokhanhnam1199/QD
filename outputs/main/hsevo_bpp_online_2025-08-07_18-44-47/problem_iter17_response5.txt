```python
import numpy as np

# Combine inverse‑leftover, index bias, golden‑ratio deterministic jitter, and load‑scaled random jitter.
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score bins for online BPP using inverse leftover, tiny index bias, deterministic golden‑ratio jitter, and random jitter scaled by bin load."""
    caps = np.asarray(bins_remain_cap, dtype=float)
    n = caps.size
    if n == 0:
        return np.empty(0, dtype=float)
    eps = 1e-12
    remaining = caps - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    if not np.any(feasible):
        return priority
    idx = np.arange(n, dtype=float)
    base = 0.0
    base = 1.0 / (remaining[feasible] + eps)
    bias = idx[feasible] * 1e-6
    phi = 0.6180339887498949
    det_jitter = np.mod(phi * (idx[feasible] + 1) * item, 1.0) * 0.01 * item
    m = feasible.sum()
    rng = np.random.default_rng()
    load_scale = remaining[feasible] / (remaining[feasible].max() + eps)
    rand_jitter = rng.random(m) * 0.005 * item * load_scale
    priority[feasible] = base - bias + det_jitter + rand_jitter
    return priority
```
