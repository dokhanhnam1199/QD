{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\n# deterministic RNG for reproducible jitter\n_rng = np.random.default_rng(42)\n\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score feasible bins: inverse leftover, deterministic index bias, and jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    # base score: favor bins with little leftover space\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    # tie\u2011break: slight negative bias for lower indices, plus a tiny positive offset\n    idx = np.arange(n)\n    priority[feasible] += -idx[feasible] * 1e-5 + idx[feasible] * 1e-12\n    # reproducible jitter proportional to item size\n    jitter = _rng.random(n) * 0.01 * item\n    priority[feasible] += jitter[feasible]\n    return priority\n\n[Heuristics 2nd]\nimport numpy as np\n\n# deterministic RNG for reproducible jitter\n_rng = np.random.default_rng(42)\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins: inverse leftover, tiny index bias, and scaled random jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    # deterministic tie\u2011breaker: prefer lower index\n    priority[feasible] += -np.arange(n)[feasible] * 1e-5\n    # tiny reproducible jitter proportional to item size\n    jitter = _rng.random(n) * 0.01 * item\n    priority[feasible] += jitter[feasible]\n    return priority\n\n[Heuristics 3rd]\nimport numpy as np\n\n_rng = np.random.default_rng(42)\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins: inverse leftover, deterministic index bias, and tiny jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    # Inverse leftover capacity favors tighter fits\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    # Deterministic tie\u2011breaker: prefer lower indices\n    priority[feasible] += -np.arange(n)[feasible] * 1e-5\n    # Reproduc: tiny jitter scaled by item size for residual ties\n    jitter = _rng.random(n) * 0.01 * item\n    priority[feasible] += jitter[feasible]\n    return priority\n\n[Heuristics 4th]\nimport numpy as np\n\n# deterministic RNG for reproducible jitter\n_rng = np.random.default_rng(42)\n\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score feasible bins: inverse leftover, deterministic index bias, and jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    # base score: favor bins with little leftover space\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    # tie\u2011break: slight negative bias for lower indices, plus a tiny positive offset\n    idx = np.arange(n)\n    priority[feasible] += -idx[feasible] * 1e-5 + idx[feasible] * 1e-12\n    # reproducible jitter proportional to item size\n    jitter = _rng.random(n) * 0.01 * item\n    priority[feasible] += jitter[feasible]\n    return priority\n\n[Heuristics 5th]\nimport numpy as np\n\n# deterministic RNG for reproducible jitter\n_rng = np.random.default_rng(42)\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins: inverse leftover, tiny index bias, and scaled random jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    # deterministic tie\u2011breaker: prefer lower index\n    priority[feasible] += -np.arange(n)[feasible] * 1e-5\n    # tiny reproducible jitter proportional to item size\n    jitter = _rng.random(n) * 0.01 * item\n    priority[feasible] += jitter[feasible]\n    return priority\n\n[Heuristics 6th]\nimport numpy as np\n\n# deterministic RNG for reproducible jitter\n_rng = np.random.default_rng(42)\n\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score feasible bins: inverse leftover, deterministic index bias, and jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    # base score: favor bins with little leftover space\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    # tie\u2011break: slight negative bias for lower indices, plus a tiny positive offset\n    idx = np.arange(n)\n    priority[feasible] += -idx[feasible] * 1e-5 + idx[feasible] * 1e-12\n    # reproducible jitter proportional to item size\n    jitter = _rng.random(n) * 0.01 * item\n    priority[feasible] += jitter[feasible]\n    return priority\n\n[Heuristics 7th]\nimport numpy as np\n\n_rng = np.random.default_rng(42)\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins by inverse leftover, tiny index bias, and deterministic jitter.\"\"\"\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    priority[feasible] += -np.arange(n)[feasible] * 1e-5\n    jitter = _rng.random(n) * 0.01 * item\n    priority[feasible] += jitter[feasible]\n    return priority\n\n[Heuristics 8th]\nimport numpy as np\n\n_rng = np.random.default_rng(42)\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins by inverse leftover, tiny index bias, and deterministic jitter.\"\"\"\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    priority[feasible] += -np.arange(n)[feasible] * 1e-5\n    jitter = _rng.random(n) * 0.01 * item\n    priority[feasible] += jitter[feasible]\n    return priority\n\n[Heuristics 9th]\nimport numpy as np\n\n# deterministic RNG for reproducible jitter\n_rng = np.random.default_rng(42)\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins: inverse leftover, tiny index bias, and scaled random jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    # deterministic tie\u2011breaker: prefer lower index\n    priority[feasible] += -np.arange(n)[feasible] * 1e-5\n    # tiny reproducible jitter proportional to item size\n    jitter = _rng.random(n) * 0.01 * item\n    priority[feasible] += jitter[feasible]\n    return priority\n\n[Heuristics 10th]\nimport numpy as np\n\n_rng = np.random.default_rng(42)\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins: inverse leftover, low-index bias, deterministic jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-12\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    base = 1.0 / (remaining + eps)\n    bias = np.arange(n) * 1e-6\n    jitter = _rng.random(n) * 0.01 * item\n    priority[feasible] = base[feasible] - bias[feasible] + jitter[feasible]\n    return priority\n\n[Heuristics 11th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = -remaining[feasible]\n    idx = np.arange(n, dtype=float)\n    priority[feasible] += -idx[feasible] * 1e-9\n    phi = 0.6180339887498949\n    jitter = np.mod(phi * (idx + 1) * item, 1.0) * 1e-6 * item\n    priority[feasible] += jitter[feasible]\n    return priority\n\n[Heuristics 12th]\nimport numpy as np\n\n# deterministic scoring: inverse leftover + index bias + tiny jitter\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score feasible bins by inverse leftover capacity, add index bias and deterministic jitter.\"\"\"\n    if bins_remain_cap.size == 0:\n        return np.empty_like(bins_remain_cap, dtype=float)\n    eps = 1e-12\n    priors = np.full(bins_remain_cap.shape, -np.inf, dtype=float)\n    feasible = bins_remain_cap >= item\n    if not np.any(feasible):\n        return priors\n    residual = bins_remain_cap[feasible] - item\n    base = 1.0 / (residual + eps)\n    idx = np.nonzero(feasible)[0].astype(float)\n    tie_break = idx * 1e-12\n    jitter_scale = 1e-9 * item\n    jitter = ((np.sin((item + idx) * 7.0) + 1) * 0.5) * jitter_scale\n    priors[feasible] = base + tie_break + jitter\n    return priors\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = -remaining[feasible]\n    idx = np.arange(n, dtype=float)\n    priority[feasible] += -idx[feasible] * 1e-9\n    phi = 0.6180339887498949\n    jitter = np.mod(phi * (idx + 1) * item, 1.0) * 1e-6 * item\n    priority[feasible] += jitter[feasible]\n    return priority\n\n[Heuristics 14th]\nimport numpy as np\n\n_rng = np.random.default_rng(123456789)\n\ndef priority_v2(item, bins_remain_cap):\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-12\n    feasible = bins_remain_cap >= item\n    priority = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return priority\n    remaining_after = bins_remain_cap[feasible] - item\n    base = 1.0 / (remaining_after + eps)\n    tie = -np.arange(n)[feasible] * 1e-8\n    jitter = _rng.random(remaining_after.shape) * 1e-6 * item\n    priority[feasible] = base + tie + jitter\n    return priority\n\n[Heuristics 15th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score feasible bins by inverse leftover capacity, deterministic tie\u2011breaker.\"\"\"\n    if bins_remain_cap.size == 0:\n        return np.empty_like(bins_remain_cap, dtype=float)\n    fits = bins_remain_cap >= item\n    leftover = bins_remain_cap - item\n    eps = 1e-12\n    inv = 1.0 / (leftover + eps)\n    idx = np.arange(bins_remain_cap.shape[0])\n    jitter = ((idx * 31 + int(item * 1e6)) % 1000) * 1e-15\n    tie = idx * 1e-12 + item * 1e-12 * idx + jitter\n    return np.where(fits, inv + tie, -np.inf)\n\n[Heuristics 16th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = -remaining[feasible]\n    idx = np.arange(n, dtype=float)\n    priority[feasible] += -idx[feasible] * 1e-9\n    phi = 0.6180339887498949\n    jitter = np.mod(phi * (idx + 1) * item, 1.0) * 1e-6 * item\n    priority[feasible] += jitter[feasible]\n    return priority\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = -remaining[feasible]\n    idx = np.arange(n, dtype=float)\n    priority[feasible] += -idx[feasible] * 1e-9\n    phi = 0.6180339887498949\n    jitter = np.mod(phi * (idx + 1) * item, 1.0) * 1e-6 * item\n    priority[feasible] += jitter[feasible]\n    return priority\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item, bins_remain_cap):\n    if bins_remain_cap.size == 0:\n        return np.empty_like(bins_remain_cap, dtype=float)\n    fits = bins_remain_cap >= item\n    leftover = bins_remain_cap - item\n    eps = 1e-12\n    inv = 1.0 / (leftover + eps)\n    tie = eps * item * np.arange(bins_remain_cap.shape[0])\n    return np.where(fits, inv + tie, -np.inf)\n\n[Heuristics 19th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    epsilon: float = 0.0008901746596746403,\n    index_weight: float = 0.000698131900325939,\n    jitter_factor: float = 0.0088999467674249,\n    rng_seed: int = 710.3559746240198,\n) -> np.ndarray:\n    \"\"\"Score bins based on inverse leftover capacity, deterministic index bias, and jitter.\n\n    Parameters\n    ----------\n    item : float\n        Size of the item to be placed.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of bins.\n    epsilon : float, optional\n        Small constant to avoid division by zero.\n    index_weight : float, optional\n        Weight applied to the deterministic index bias (lower index = higher priority).\n    jitter_factor : float, optional\n        Scaling factor for the random jitter term.\n    rng_seed : int, optional\n        Seed for the internal random number generator.\n    \"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n\n[Heuristics 20th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(\n    item: float,\n    bins_remain_cap: np.ndarray,\n    epsilon: float = 0.0008901746596746403,\n    index_weight: float = 0.000698131900325939,\n    jitter_factor: float = 0.0088999467674249,\n    rng_seed: int = 710.3559746240198,\n) -> np.ndarray:\n    \"\"\"Score bins based on inverse leftover capacity, deterministic index bias, and jitter.\n\n    Parameters\n    ----------\n    item : float\n        Size of the item to be placed.\n    bins_remain_cap : np.ndarray\n        Remaining capacities of bins.\n    epsilon : float, optional\n        Small constant to avoid division by zero.\n    index_weight : float, optional\n        Weight applied to the deterministic index bias (lower index = higher priority).\n    jitter_factor : float, optional\n        Scaling factor for the random jitter term.\n    rng_seed : int, optional\n        Seed for the internal random number generator.\n    \"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}