```python
import numpy as np

_rng = np.random.default_rng(42)

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Inverse leftover with index bias and reproducible jitter for online BPP."""
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    eps = 1e-9
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    inv = 1.0 / (remaining + eps)
    bias = -np.arange(n) * 1e-5
    jitter = _rng.random(n) * 0.01 * item
    det_jitter = ((np.arange(n) * 31 + int(item * 1e6)) % 1000) * 1e-15
    priority = np.full(n, -np.inf, dtype=float)
    priority[feasible] = inv[feasible] + bias[feasible] + jitter[feasible] + det_jitter[feasible]
    return priority
```
