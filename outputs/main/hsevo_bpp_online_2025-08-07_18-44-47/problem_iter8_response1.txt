```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score bins by inverse leftover, deterministic index bias, and reproducible jitter."""
    if bins_remain_cap.size == 0:
        return np.empty_like(bins_remain_cap, dtype=float)
    residual = bins_remain_cap - item
    feasible = residual >= 0
    eps = 1e-12
    base = np.where(feasible, 1.0 / (residual + eps), -np.inf)
    n = bins_remain_cap.size
    idx_bias = np.arange(n, dtype=float) * 1e-12
    seed = int(item * 1e6) & 0xffffffff
    rng = np.random.default_rng(seed)
    jitter = np.where(feasible, rng.random(n) * 1e-12 * item, 0.0)
    return base + idx_bias + jitter
```
