```python
import numpy as np

_rng = np.random.default_rng()

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    eps = 1e-12
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    if not feasible.any():
        return priority
    rem_feas = remaining[feasible]
    base = 1.0 / (rem_feas + eps)
    load_balance = item / (item + rem_feas + eps)
    var_rem = np.var(rem_feas)
    jitter_scale = item * 0.005 * (1.0 + np.sqrt(var_rem))
    jitter = (_rng.random)  # corrected: should be _rng.random(n)
    jitter = (_rng.random(n) - 0.5) * jitter_scale
    bias = -np.arange(n)[feasible] * 1e-6
    priority[feasible] = base + load_balance + jitter[feasible] + bias
    return priority
```
