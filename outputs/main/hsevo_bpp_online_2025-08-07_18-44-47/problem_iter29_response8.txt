```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, _rng=np.random.default_rng()) -> np.ndarray:
    """Score bins by inverse leftover weighted by fit factor, jitter scaled by remaining variance, and tiny index bias."""
    # Combine best‑fit, fit factor, variance‑scaled jitter, and index bias.
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    eps = 1e-12
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    if not feasible.any():
        return priority
    rem = remaining[feasible]
    base = 1.0 / (rem + eps)
    fit_factor = item / (item + rem + eps)
    score = base * fit_factor
    var_rem = np.var(rem) if rem.size > 1 else 0.0
    jitter_scale = item * 0.01 * (1.0 + np.sqrt(var_rem))
    jitter = (_rng.random(rem.shape) - 0.5) * jitter_scale
    bias = -np.arange(n)[feasible] * 1e-6
    priority[feasible] = score + jitter + bias
    return priority
```
