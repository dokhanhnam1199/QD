```python
import numpy as np

# Priority function for online bin packing: best-fit with small index bias, golden‑ratio deterministic jitter, and variance‑scaled random jitter.
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Best‑fit priority: inverse leftover + tiny index bias + deterministic golden‑ratio jitter + variance‑scaled random jitter.
    """
    bins = np.asarray(bins_remain_cap, dtype=float)
    n = bins.size
    if n == 0:
        return np.empty(0, dtype=float)
    remaining = bins - item
    feasible = remaining >= 0
    score = np.full(n, -np.inf, dtype=float)
    if not np.any(feasible):
        return score
    eps = 1e-9
    idx = np.arange(n, dtype=float)
    inv_leftover = 1.0 / (remaining[feasible] + eps)
    bias = -idx[feasible] * 1e-6
    phi = (1 + np.sqrt(5)) / 2
    phi_jitter = ((phi * (idx[feasible] + 1) * item) % 1.0) * 1e-6 * item
    std = np.std(remaining[feasible])
    mean = np.mean(remaining[feasible]) + eps
    coeff = std / mean
    rng = np.random.default_rng()
    rand_jitter = rng.random(feasible.sum()) * item * 0.01 * (1.0 + coeff)
    score[feasible] = inv_leftover + bias + phi_jitter + rand_jitter
    return score
```
