```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, _rng: np.random.Generator = np.random.default_rng()) -> np.ndarray:
    """Return priority scores for each bin based on inverse leftover capacity and size  scaled jitter.
    Infeasible bins receive -inf. A tiny deterministic bias ensures reproducible tieâ€‘breaks."""
    if bins_remain_cap.size == 0:
        return np.empty(0, dtype=float)
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(bins_remain_cap.shape, -np.inf, dtype=float)
    if not feasible.any():
        return priority
    eps = 1e-12
    base = 1.0 / (remaining[feasible] + eps)
    var_rem = np.var(remaining[feasible])
    sigma = 0.02
    jitter = sigma * item * (1.0 + np.sqrt(var_rem)) * _rng.standard_normal(base.shape)
    bias = 1e-9 * (np.arange(bins_remain_cap.size)[feasible] / bins_remain_cap.size)
    priority[feasible] = base + jitter + bias
    return priority
```
