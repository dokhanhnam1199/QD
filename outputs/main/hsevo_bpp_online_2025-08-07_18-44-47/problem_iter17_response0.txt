```python
import numpy as np

_rng = np.random.default_rng(42)

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Priority: inverse leftover + index bias + deterministic golden ratio jitter + reproducible random jitter scaled by item size and remaining capacity."""
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    eps = 1e-9
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    priority[feasible] = 1.0 / (remaining[feasible] + eps)
    priority[feasible] -= np.arange(n, dtype=float)[feasible] * 1e-5
    phi = 0.6180339887498949
    jitter_det = np.mod(phi * (np.arange(n) + 1) * item, 1.0) * 0.01 * item
    jitter_rand = _rng.random(n) * 0.01 * item * (remaining + eps) / (bins_remain_cap.max() + eps)
    priority[feasible] += jitter_det[feasible] + jitter_rand[feasible]
    return priority
```
