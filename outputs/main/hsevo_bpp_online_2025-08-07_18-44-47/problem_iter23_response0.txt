```python
import numpy as np

_item_avg = None
_item_avg_count = 0

# Adaptive jitter with variance penalty for online BPP
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid: negative leftover, variance penalty, index bias, and adaptive jitter."""
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    if not np.any(feasible):
        return priority
    global _item_avg, _item_avg_count
    if _item_avg is None:
        _item_avg = item
        _item_avg_count = 1
    else:
        _item_avg += (item - _item_avg) / (_item_avg_count + 1)
        _item_avg_count += 1
    feas_rem = remaining[feasible]
    mean_rem = feas_rem.mean()
    std_rem = feas_rem.std()
    cv = std_rem / (mean_rem + 1e-12)
    noise_sigma = item * np.exp(-cv)
    factor = abs(item - _item_avg) / (_item_avg + 1e-12)
    noise_sigma *= (1 + factor)
    rng = np.random.default_rng()
    jitter = rng.normal(0, noise_sigma, size=feasible.sum())
    base = -feas_rem
    var_penalty = -((feas_rem - mean_rem) ** 2) * 1e-4
    idx_bias = np.arange(n)[feasible] * 1e-6
    priority[feasible] = base + var_penalty + jitter + idx_bias
    return priority
```
