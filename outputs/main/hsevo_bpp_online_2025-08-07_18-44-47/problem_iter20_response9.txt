```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Priority by inverse leftover, variance penalty, adaptive jitter, load centering, and tiny index bias."""
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    if not feasible.any():
        return priority
    idx = np.arange(n, dtype=float)
    base = 1.0 / (remaining[feasible] + 1e-12)
    mean_rem = remaining[feasible].mean()
    var_penalty = -((remaining[feasible] - mean_rem) ** 2) * 1e-3
    rng = np.random.default_rng()
    jitter = rng.normal(loc=0.0, scale=item * 0.01, size=feasible.sum())
    mean_center = (bins_remain_cap.mean() - bins_remain_cap[feasible]) * 0.001
    bias = idx[feasible] * 1e-6
    priority[feasible] = base + var_penalty + jitter + mean_center + bias
    return priority
```
