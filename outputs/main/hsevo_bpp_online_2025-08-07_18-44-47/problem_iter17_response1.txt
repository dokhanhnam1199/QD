```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Score bins by inverse leftover, variance penalty, and jitter scaled to remaining.
    """
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    if not np.any(feasible):
        return priority
    # Inverse leftover prioritizes bins with smallest remaining
    base = 1.0 / remaining[feasible]
    # Variance penalty prefers bins whose remaining is near the mean
    mean_rem = remaining[feasible].mean()
    var_penalty = - (remaining[feasible] - mean_rem)**2 * 1e-3
    # Random jitter scaled to remaining capacity for tieâ€‘breaking
    rng = np.random.default_rng()
    jitter = rng.normal(loc=0.0, scale=remaining[feasible] * 0.01)
    priority[feasible] = base + var_penalty + jitter
    return priority
```
