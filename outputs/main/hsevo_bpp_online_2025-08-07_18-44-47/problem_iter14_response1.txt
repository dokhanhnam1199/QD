```python
# Heuristic for online bin packing priorities: inverse leftover, index bias, adaptive jitter, deterministic tie‑breaker.
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, rng_seed: int = None,
                epsilon: float = 1e-9, index_weight: float = 1e-5,
                jitter_factor: float = 0.01, deterministic_factor: float = 1e-15) -> np.ndarray:
    """This heuristic uses the inverse leftover as the primary score, a small negative index bias, adaptive random jitter scaled by item size and leftover ratio, and a deterministic tiny tie‑breaker for stable ranking."""
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    priority[feasible] = 1.0 / (remaining[feasible] + epsilon)
    priority[feasible] -= np.arange(n)[feasible] * index_weight
    rng = np.random.default_rng(rng_seed) if rng_seed is not None else np.random.default_rng()
    if np.any(feasible):
        max_cap = bins_remain_cap.max()
        jitter_vals = rng.random(np.count_nonzero(feasible)) * jitter_factor * ((remaining[feasible] + epsilon) / (max_cap + epsilon))
        priority[feasible] += jitter_vals
    deterministic_jitter = ((np.arange(n) * 31 + int(item * 1e6)) % 1000) * deterministic_factor
    priority[feasible] += deterministic_jitter[feasible]
    return priority
```
