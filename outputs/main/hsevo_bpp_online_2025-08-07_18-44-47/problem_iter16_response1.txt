import numpy as np

_rng = np.random.default_rng()

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                eps: float = 2.3520086512279377e-10,
                det_jitter_mul: float = 94.54882757784611,
                det_jitter_mod: float = 9843.84739912932,
                det_jitter_scale: float = 8.202760280992338e-13,
                jitter_scale: float = 0.03859847487668544,
                item_scaling_factor: float = 8549218.15091421) -> np.ndarray:
    """Score bins by inverse leftover, with deterministic and stochastic jitter."""
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    if not np.any(feasible):
        return priority
    inv = 1.0 / (remaining[feasible] + eps)
    idx = np.arange(n)[feasible]
    det_jitter = ((idx * det_jitter_mul + int(item * item_scaling_factor)) % det_jitter_mod) * det_jitter_scale
    jitter = _rng.random(feasible.sum()) * jitter_scale * item
    priority[feasible] = inv + jitter + det_jitter
    return priority
