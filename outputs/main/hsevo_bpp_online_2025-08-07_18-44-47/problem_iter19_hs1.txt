import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                rng_seed: int = None,
                eps: float = 2.7843476210326025e-07,
                index_bias_weight: float = -7.541989565056911e-05,
                phi: float = 0.5063490546337882,
                golden_jitter_multiplier: float = 0.019265329118506386,
                random_jitter_multiplier: float = 0.014573246871955221,
                deterministic_jitter_multiplier: float = 8.053121823776255e-13,
                modulus_constant: int = 1646.1282445228885,
                deterministic_scaling: float = 7835447.0669036815) -> np.ndarray:
    """Heuristic using inverse leftover, index bias, golden‑ratio jitter,
    adaptive random jitter, deterministic tie‑breaker."""
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)

    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)

    if not np.any(feasible):
        return priority

    idx = np.arange(n)
    priority[feasible] = 1.0 / (remaining[feasible] + eps)
    priority[feasible] -= idx[feasible] * index_bias_weight

    golden_jitter = np.mod(idx * phi + item, 1.0) * golden_jitter_multiplier
    priority[feasible] += golden_jitter[feasible]

    rng = np.random.default_rng(rng_seed)
    max_cap = bins_remain_cap.max()
    rand_vals = rng.random(n) * random_jitter_multiplier * item * (remaining + eps) / (max_cap + eps)
    priority[feasible] += rand_vals[feasible]

    deterministic_jitter = ((idx * 31 + int(item * deterministic_scaling)) % modulus_constant) * deterministic_jitter_multiplier
    priority[feasible] += deterministic_jitter[feasible]

    return priority
