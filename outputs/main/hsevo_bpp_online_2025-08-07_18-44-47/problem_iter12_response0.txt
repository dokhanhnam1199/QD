```python
import numpy as np

_item_counter = 0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    global _item_counter
    _item_counter += 1
    bins = np.asarray(bins_remain_cap, dtype=float)
    n = bins.size
    priority = np.full(n, -np.inf, dtype=float)
    if n == 0:
        return priority
    remaining = bins - item
    feasible = remaining >= 0
    if not np.any(feasible):
        return priority
    eps = 1e-9
    base_temp = 0.5
    decay = 0.001
    temp = max(0.05, base_temp * np.exp(-decay * _item_counter))
    gumbel = -np.log(-np.log(np.random.rand(feasible.sum())))
    priority[feasible] = -remaining[feasible] / temp + gumbel
    priority[feasible] -= np.arange(n)[feasible] * 1e-6
    jitter = np.random.rand(feasible.sum()) * (remaining[feasible] / (remaining[feasible].max() + eps)) * 0.01
    priority[feasible] += jitter
    return priority
```
