{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, rng_seed: int = None) -> np.ndarray:\n    \"\"\"Heuristic using inverse leftover, index bias, golden\u2011ratio jitter, adaptive random jitter, deterministic tie\u2011breaker.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return priority\n    eps = 1e-9\n    idx = np.arange(n)\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    priority[feasible] -= idx[feasible] * 1e-5\n    phi = 0.6180339887498949\n    golden_jitter = np.mod(idx * phi + item, 1.0) * 0.01\n    priority[feasible] += golden_jitter[feasible]\n    rng = np.random.default_rng(rng_seed)\n    max_cap = bins_remain_cap.max()\n    rand_vals = rng.random(n) * 0.01 * item * (remaining + eps) / (max_cap + eps)\n    priority[feasible] += rand_vals[feasible]\n    deterministic_jitter = ((idx * 31 + int(item * 1e6)) % 1000) * 1e-15\n    priority[feasible] += deterministic_jitter[feasible]\n    return priority\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}