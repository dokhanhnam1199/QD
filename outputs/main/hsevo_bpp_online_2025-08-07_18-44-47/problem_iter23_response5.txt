```python
import numpy as np

_item_avg = None
_item_avg_count = 0

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines best-fit base with variance‑scaled random jitter and deterministic tie‑breakers."""
    global _item_avg, _item_avg_count
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    eps = 1e-12
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    if not np.any(feasible):
        return priority
    if _item_avg is None:
        _item_avg = item
        _item_avg_count = 1
    else:
        _item_avg += (item - _item_avg) / (_item_avg_count + 1)
        _item_avg_count += 1
    feas_rem = remaining[feasible]
    mean_rem = feas_rem.mean()
    std_rem = feas_rem.std()
    cv = std_rem / (mean_rem + eps)
    base = 1.0 / (feas_rem + eps)
    bias = -np.arange(n)[feasible] * 1e-5
    phi = 0.6180339887498949
    det_jitter = (np.mod(phi * (np.arange(n)[feasible] + 1) * item, 1.0) - 0.5) * 1e-5 * item
    sin_jitter = np.sin(item * np.arange(n)[feasible] + 1.0) * 1e-9 * item
    rng = np.random.default_rng()
    noise_sigma = item * np.exp(-cv)
    factor = abs(item - _item_avg) / (_item_avg + eps)
    noise_sigma *= (1 + factor)
    rng_jitter = rng.standard_normal(feasible.sum()) * noise_sigma
    priority[feasible] = base + bias + det_jitter + sin_jitter + rng_jitter
    return priority
```
