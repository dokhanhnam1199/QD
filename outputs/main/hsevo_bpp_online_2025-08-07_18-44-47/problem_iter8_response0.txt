```python
import numpy as np

# deterministic scoring: inverse leftover + index bias + tiny jitter
def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score feasible bins by inverse leftover capacity, add index bias and deterministic jitter."""
    if bins_remain_cap.size == 0:
        return np.empty_like(bins_remain_cap, dtype=float)
    eps = 1e-12
    priors = np.full(bins_remain_cap.shape, -np.inf, dtype=float)
    feasible = bins_remain_cap >= item
    if not np.any(feasible):
        return priors
    residual = bins_remain_cap[feasible] - item
    base = 1.0 / (residual + eps)
    idx = np.nonzero(feasible)[0].astype(float)
    tie_break = idx * 1e-12
    jitter_scale = 1e-9 * item
    jitter = ((np.sin((item + idx) * 7.0) + 1) * 0.5) * jitter_scale
    priors[feasible] = base + tie_break + jitter
    return priors
```
