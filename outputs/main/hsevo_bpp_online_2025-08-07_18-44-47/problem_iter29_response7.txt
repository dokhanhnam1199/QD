```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Best‑fit score: inverse leftover, tightness, deterministic golden‑ratio jitter, tiny index bias, and variance‑scaled random jitter. Returns -inf for infeasible bins."""
    bins = np.asarray(bins_remain_cap, dtype=float)
    n = bins.size
    if n == 0:
        return np.empty(0, dtype=float)
    remaining = bins - item
    feasible = remaining >= 0
    scores = np.full(n, -np.inf, dtype=float)
    if not np.any(feasible):
        return scores
    eps = 1e-12
    idx = np.arange(n, dtype=float)
    rem_feas = remaining[feasible]
    inv_leftover = 1.0 / (rem_feas + eps)
    tightness = item / (item + rem_feas + eps)
    phi = (1 + np.sqrt(5.0)) / 2.0
    phi_jitter = ((phi * (idx[feasible] + 1.0) * item) % 1.0) * 1e-6 * item
    bias = -idx[feasible] * 1e-6
    mean = np.mean(rem_feas)
    std = np.std(rem_feas)
    coeff = std / (mean + eps)
    jitter_weight = 0.01 * (1.0 + coeff)
    rng = np.random.default_rng()
    rand_jitter = rng.random(rem_feas.shape) * jitter_weight * item
    scores[feasible] = inv_leftover + tightness + phi_jitter + rand_jitter + bias
    return scores
```
