```python
import numpy as np

_rng = np.random.default_rng()

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    eps = 1e-12
    remaining_all = bins_remain_cap - item
    feasible = remaining_all >= 0
    priority = np.full(n, -np.inf, dtype=float)
    if not feasible.any():
        return priority
    remaining = remaining_all[feasible]
    base = 1.0 / (remaining + eps)
    mean_rem = remaining.mean()
    var_rem = np.var(remaining)
    lb_weight = 0.05 * (1.0 + np.sqrt(var_rem))
    load_balance = -lb_weight * np.abs(remaining - mean_rem)
    jitter_scale = item * 0.02 * (1.0 + np.sqrt(var_rem))
    jitter = (_rng.random(remaining.shape) - 0.5) * jitter_scale
    tie = _rng.random(remaining.shape) * 1e-9
    priority[feasible] = base + load_balance + code block end.```python
import numpy as np

_rng = np.random.default_rng()

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    eps = 1e-12
    remaining_all = bins_remain_cap - item
    feasible = remaining_all >= 0
    priority = np.full(n, -np.inf, dtype=float)
    if not feasible.any():
        return priority
    remaining = remaining_all[feasible]
    base = 1.0 / (remaining + eps)
    mean_rem = remaining.mean()
    var_rem = np.var(remaining)
    lb_weight = 0.05 * (1.0 + np.sqrt(var_rem))
    load_balance = -lb_weight * np.abs(remaining - mean_rem)
    jitter_scale = item * 0.02 * (1.0 + np.sqrt(var_rem))
    jitter = (_rng.random(remaining.shape) - 0.5) * jitter_scale
    tie = _rng.random(remaining.shape) * 1e-9
    1e-9
    priority[feasible] = base + load_balance + jitter + tie
    return priority
```
