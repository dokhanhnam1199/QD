```python
# Priority heuristic combining inverse leftover, index bias, and adaptive jitter.
import numpy as np

def priority_v2(
    item: float,
    bins_remain_cap: np.ndarray,
    epsilon: float = 1e-9,
    index_weight: float = 1e-5,
    jitter_factor: float = 0.01,
    rng_seed: int = None,
) -> np.ndarray:
    """Score bins by inverse leftover, index bias, and adaptive jitter."""
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    remaining = bins_remain_cap - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    priority[feasible] = 1.0 / (remaining[feasible] + epsilon)
    priority[feasible] -= np.arange(n)[feasible] * index_weight
    priority[feasible] += np.arange(n)[feasible] * 1e-12
    rng = np.random.default_rng(rng_seed) if rng_seed is not None else np.random.default_rng()
    if np.any(feasible):
        max_cap = bins_remain_cap.max()
        jitter_vals = rng.random(np.count_nonzero(feasible)) * jitter_factor * (
            (remaining[feasible] + epsilon) / (max_cap + epsilon)
        )
        priority[feasible] += jitter_vals
    return priority
```
