```python
import numpy as np

_rng = np.random.default_rng(123456789)

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Compute priority scores for bins in online bin packing.

    Scores favor bins that become highly filled after placing `item` and leave little leftover.
    Infeasible bins receive -inf. A deterministic tieâ€‘breaker prefers lower indices, and a tiny
    reproducible jitter proportional to `item` resolves remaining ties.

    Parameters
    ----------
    item : float
        Size of the incoming item.
    bins_remain_cap : np.ndarray
        Remaining capacities of each bin.

    Returns
    -------
    np.ndarray
        Priority scores for each bin.
    """
    n = bins_remain_cap.size
    if n == 0:
        return np.empty(0, dtype=float)
    eps = 1e-12
    feasible = bins_remain_cap >= item
    priority = np.full(n, -np.inf, dtype=float)
    if not np.any(feasible):
        return priority
    remaining_after = bins_remain_cap[feasible] - item
    used_after = 1.0 - bins_remain_cap[feasible] + item
    base = used_after / (remaining_after + eps)
    tie = -np.arange(n)[feasible] * 1e-8
    jitter = _rng.random(remaining_after.shape) * 1e-6 * item
    priority[feasible] = base + tie + jitter
    return priority
```
