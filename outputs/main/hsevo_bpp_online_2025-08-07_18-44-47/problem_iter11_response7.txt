```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score bins by tight fit, low-index bias, deterministic golden‑ratio jitter, plus small random noise."""
    caps = np.asarray(bins_remain_cap, dtype=float)
    n = caps.size
    if n == 0:
        return np.empty(0, dtype=float)
    eps = 1e-9
    remaining = caps - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    # core inverse leftover score
    priority[feasible] = 1.0 / (remaining[feasible] + eps)
    # bias toward lower‑index bins
    idx = np.arange(n, dtype=float)
    priority[feasible] -= idx[feasible] * 1e-5
    # deterministic jitter using golden ratio
    phi = 0.6180339887498949
    jitter_det = np.mod(phi * (idx + 1) * item, 1.0) * 0.01 * item
    priority[feasible] += jitter_det[feasible]
    # small random jitter for exploration
    jitter_rand = np.random.random(n) * 0.001 * item
    priority[feasible] += jitter_rand[feasible]
    return priority
```
