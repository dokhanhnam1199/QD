{"system": "You are an expert in the domain of optimization heuristics. Your task is to provide useful advice based on analysis to design better heuristics.\n", "user": "### List heuristics\nBelow is a list of design heuristics ranked from best to worst.\n[Heuristics 1st]\nimport numpy as np\n\n# deterministic RNG for reproducible jitter\n_rng = np.random.default_rng(42)\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins: inverse leftover, tiny index bias, and scaled random jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    # deterministic tie\u2011breaker: prefer lower index\n    priority[feasible] += -np.arange(n)[feasible] * 1e-5\n    # tiny reproducible jitter proportional to item size\n    jitter = _rng.random(n) * 0.01 * item\n    priority[feasible] += jitter[feasible]\n    return priority\n\n[Heuristics 2nd]\nimport numpy as np\n\n# deterministic RNG for reproducible jitter\n_rng = np.random.default_rng(42)\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins: inverse leftover, tiny index bias, and scaled random jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    # deterministic tie\u2011breaker: prefer lower index\n    priority[feasible] += -np.arange(n)[feasible] * 1e-5\n    # tiny reproducible jitter proportional to item size\n    jitter = _rng.random(n) * 0.01 * item\n    priority[feasible] += jitter[feasible]\n    return priority\n\n[Heuristics 3rd]\nimport numpy as np\n\n_rng = np.random.default_rng(42)\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return priority\n    indices = np.arange(n)\n    base = 1.0 / (remaining[feasible] + eps)\n    bias = -indices[feasible] * 1e-5\n    jitter = _rng.random(n)[feasible] * 0.01 * item\n    det_jitter = (np.sin((item + indices[feasible]) * 7.0) + 1) * 0.5 * 1e-9 * item\n    priority[feasible] = base + bias + jitter + det_jitter\n    return priority\n\n[Heuristics 4th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines inverse leftover, index bias, random jitter, golden\u2011ratio and sinusoidal tie\u2011breakers for bin priority.\n    \"\"\"\n    bins_remain_cap = np.asarray(bins_remain_cap, dtype=float)\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    idx = np.arange(n, dtype=float)\n    primary = 1.0 / (remaining + eps)\n    bias = -idx * 1e-6\n    rng = np.random.default_rng()\n    random_jitter = rng.random(n) * 0.01 * item\n    phi = 0.6180339887498949\n    golden_jitter = ((phi * (idx + 1) * item) % 1.0) * 1e-6 * item\n    sin_jitter = (np.sin((item + idx) * 7.0) + 1) * 0.5 * 1e-9 * item\n    priority[feasible] = primary[feasible] + bias[feasible] + random_jitter[feasible] + golden_jitter[feasible] + sin_jitter[feasible]\n    return priority\n\n[Heuristics 5th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins by inverse leftover, index bias, deterministic golden\u2011ratio jitter, and random noise.\"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    n = caps.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = caps - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return priority\n    inv_leftover = 1.0 / (remaining[feasible] + eps)\n    idx = np.arange(n, dtype=float)\n    bias = idx[feasible] * 1e-6\n    phi = 0.6180339887498949\n    jitter_det = np.mod(phi * (idx[feasible] + 1) * item, 1.0) * 0.01 * item\n    jitter_rand = np.random.random(feasible.sum()) * 0.001 * item\n    priority[feasible] = inv_leftover - bias + jitter_det + jitter_rand\n    return priority\n\n[Heuristics 6th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins by inverse leftover, low-index bias, deterministic golden\u2011ratio jitter, and small random jitter.\"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    n = caps.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-12\n    remaining = caps - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return priority\n    idx = np.arange(n, dtype=float)\n    base = 1.0 / (remaining[feasible] + eps)\n    bias = idx[feasible] * 1e-5\n    phi = 0.6180339887498949\n    jitter_det = np.mod(phi * (idx[feasible] + 1) * item, 1.0) * 0.01 * item\n    jitter_rand = np.random.random(feasible.sum()) * 0.001 * item\n    priority[feasible] = base - bias + jitter_det + jitter_rand\n    return priority\n\n[Heuristics 7th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins by inverse leftover, low-index bias, deterministic golden\u2011ratio jitter, and small random jitter.\"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    n = caps.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-12\n    remaining = caps - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return priority\n    idx = np.arange(n, dtype=float)\n    base = 1.0 / (remaining[feasible] + eps)\n    bias = idx[feasible] * 1e-5\n    phi = 0.6180339887498949\n    jitter_det = np.mod(phi * (idx[feasible] + 1) * item, 1.0) * 0.01 * item\n    jitter_rand = np.random.random(feasible.sum()) * 0.001 * item\n    priority[feasible] = base - bias + jitter_det + jitter_rand\n    return priority\n\n[Heuristics 8th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Score bins by inverse leftover, low-index bias, deterministic golden\u2011ratio jitter, and small random jitter.\"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    n = caps.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-12\n    remaining = caps - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return priority\n    idx = np.arange(n, dtype=float)\n    base = 1.0 / (remaining[feasible] + eps)\n    bias = idx[feasible] * 1e-5\n    phi = 0.6180339887498949\n    jitter_det = np.mod(phi * (idx[feasible] + 1) * item, 1.0) * 0.01 * item\n    jitter_rand = np.random.random(feasible.sum()) * 0.001 * item\n    priority[feasible] = base - bias + jitter_det + jitter_rand\n    return priority\n\n[Heuristics 9th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Inverse leftover with bias, deterministic and reproducible jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    idx = np.arange(n)\n    base = 1.0 / (remaining[feasible] + eps)\n    bias_factor = 1e-5\n    bias = -idx[feasible] * bias_factor\n    phi = 0.6180339887498949\n    jitter_factor = 1e-5\n    det_jitter = (np.mod(phi * (idx[feasible] + 1) * item, 1.0) - 0.5) * jitter_factor * item\n    rnd_factor = 1e-5\n    rnd_jitter = (np.sin(item * 12.9898 + idx[feasible] * 78.233) * 43758.5453 % 1.0 - 0.5) * rnd_factor * item\n    priority[feasible] = base + bias + det_jitter + rnd_jitter\n    return priority\n\n[Heuristics 10th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Inverse leftover, low-index bias, deterministic sinusoidal jitter, and item\u2011scaled pseudo\u2011random jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return priority\n    indices = np.arange(n)\n    primary = 1.0 / (remaining[feasible] + eps)\n    bias = -indices[feasible] * 1e-6\n    det_jitter = ((np.sin((item + indices[feasible]) * 7.0) + 1) * 0.5) * 1e-9 * item\n    int_item = int(item * 1e6)\n    # compute deterministic pseudo\u2011random jitter\n    pseudo = ((int_item + 31 * indices[feasible] + 7) % 2147483647) / 2147483647.0\n    rand_jitter = pseudo * 0.01 * item\n    priority[feasible] = primary + bias + det_jitter + rand_jitter\n    return priority\n\n[Heuristics 11th]\nimport numpy as np\n\n_item_counter = 0\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Priority based on leftover capacity with Gumbel temperature decay, item-size jitter, and deterministic index tie\u2011breaker.\"\"\"\n    global _item_counter\n    _item_counter += 1\n    bins = np.asarray(bins_remain_cap, dtype=float)\n    n = bins.size\n    priority = np.full(n, -np.inf, dtype=float)\n    if n == 0:\n        return priority\n    remaining = bins - item\n    feasible = remaining >= 0\n    if not np.any(feasible):\n        return priority\n    eps = 1e-12\n    base_temp = 0.5\n    decay = 0.001\n    temp = max(0.05, base_temp * np.exp(-decay * _item_counter))\n    rng = np.random.default_rng()\n    gumbel = -np.log(-np.log(rng.random(feasible.sum())))\n    idx = np.arange(n)\n    jitter = rng.random(feasible.sum()) * 0.01 * item\n    priority[feasible] = -remaining[feasible] / temp + gumbel + jitter + idx[feasible] * 1e-12 - idx[feasible] * 1e-6\n    return priority\n\n[Heuristics 12th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Inverse leftover with bias, deterministic and reproducible jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    idx = np.arange(n)\n    base = 1.0 / (remaining[feasible] + eps)\n    bias_factor = 1e-5\n    bias = -idx[feasible] * bias_factor\n    phi = 0.6180339887498949\n    jitter_factor = 1e-5\n    det_jitter = (np.mod(phi * (idx[feasible] + 1) * item, 1.0) - 0.5) * jitter_factor * item\n    rnd_factor = 1e-5\n    rnd_jitter = (np.sin(item * 12.9898 + idx[feasible] * 78.233) * 43758.5453 % 1.0 - 0.5) * rnd_factor * item\n    priority[feasible] = base + bias + det_jitter + rnd_jitter\n    return priority\n\n[Heuristics 13th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Inverse leftover, low-index bias, deterministic sinusoidal jitter, and item\u2011scaled pseudo\u2011random jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return priority\n    indices = np.arange(n)\n    primary = 1.0 / (remaining[feasible] + eps)\n    bias = -indices[feasible] * 1e-6\n    det_jitter = ((np.sin((item + indices[feasible]) * 7.0) + 1) * 0.5) * 1e-9 * item\n    int_item = int(item * 1e6)\n    # compute deterministic pseudo\u2011random jitter\n    pseudo = ((int_item + 31 * indices[feasible] + 7) % 2147483647) / 2147483647.0\n    rand_jitter = pseudo * 0.01 * item\n    priority[feasible] = primary + bias + det_jitter + rand_jitter\n    return priority\n\n[Heuristics 14th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Inverse leftover, low-index bias, deterministic sinusoidal jitter, and item\u2011scaled pseudo\u2011random jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    if not np.any(feasible):\n        return priority\n    indices = np.arange(n)\n    primary = 1.0 / (remaining[feasible] + eps)\n    bias = -indices[feasible] * 1e-6\n    det_jitter = ((np.sin((item + indices[feasible]) * 7.0) + 1) * 0.5) * 1e-9 * item\n    int_item = int(item * 1e6)\n    # compute deterministic pseudo\u2011random jitter\n    pseudo = ((int_item + 31 * indices[feasible] + 7) % 2147483647) / 2147483647.0\n    rand_jitter = pseudo * 0.01 * item\n    priority[feasible] = primary + bias + det_jitter + rand_jitter\n    return priority\n\n[Heuristics 15th]\n# Heuristic for online bin packing priorities: inverse leftover, index bias, adaptive jitter, deterministic tie\u2011breaker.\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, rng_seed: int = None,\n                epsilon: float = 1e-9, index_weight: float = 1e-5,\n                jitter_factor: float = 0.01, deterministic_factor: float = 1e-15) -> np.ndarray:\n    \"\"\"This heuristic uses the inverse leftover as the primary score, a small negative index bias, adaptive random jitter scaled by item size and leftover ratio, and a deterministic tiny tie\u2011breaker for stable ranking.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = 1.0 / (remaining[feasible] + epsilon)\n    priority[feasible] -= np.arange(n)[feasible] * index_weight\n    rng = np.random.default_rng(rng_seed) if rng_seed is not None else np.random.default_rng()\n    if np.any(feasible):\n        max_cap = bins_remain_cap.max()\n        jitter_vals = rng.random(np.count_nonzero(feasible)) * jitter_factor * ((remaining[feasible] + epsilon) / (max_cap + epsilon))\n        priority[feasible] += jitter_vals\n    deterministic_jitter = ((np.arange(n) * 31 + int(item * 1e6)) % 1000) * deterministic_factor\n    priority[feasible] += deterministic_jitter[feasible]\n    return priority\n\n[Heuristics 16th]\nimport numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float,\n                bins_remain_cap: np.ndarray,\n                eps: float = 8.555213927169448e-10,\n                det_jitter_mul: float = 5.024821511498017,\n                det_jitter_mod: float = 3413.441477351962,\n                det_jitter_scale: float = 3.84814226817756e-13,\n                jitter_scale: float = 0.00861802019669008,\n                item_scaling_factor: float = 6334655.964217664) -> np.ndarray:\n    \"\"\"Score bins by inverse leftover, with deterministic and stochastic jitter.\"\"\"\n    n = bins_remain_cap.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n\n[Heuristics 17th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    if np.any(feasible):\n        eps = 1e-12\n        base = 1.0 / (remaining[feasible] + eps)\n        rng = np.random.default_rng()\n        jitter_scale = 0.01 * item\n        jitter = rng.standard_normal(remaining[feasible].size) * jitter_scale\n        deterministic_term = remaining[feasible] * 1e-12\n        priority[feasible] = base + jitter + deterministic_term\n    return priority\n\n[Heuristics 18th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    remaining = bins_remain_cap - item\n    feasible = remaining >= 0\n    priority = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    if np.any(feasible):\n        eps = 1e-12\n        base = 1.0 / (remaining[feasible] + eps)\n        rng = np.random.default_rng()\n        jitter_scale = 0.01 * item\n        jitter = rng.standard_normal(remaining[feasible].size) * jitter_scale\n        deterministic_term = remaining[feasible] * 1e-12\n        priority[feasible] = base + jitter + deterministic_term\n    return priority\n\n[Heuristics 19th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Compute bin priorities using inverse leftover, index bias, deterministic golden\u2011ratio jitter and adaptive random jitter.\"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    n = caps.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = caps - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    idx = np.arange(n, dtype=float)\n    priority[feasible] -= idx[feasible] * 1e-5\n    phi = 0.6180339887498949\n    jitter_det = np.mod(phi * (idx + 1) * item, 1.0) * 0.01 * item\n    priority[feasible] += jitter_det[feasible]\n    max_cap = caps.max()\n    rng = np.random.default_rng()\n    jitter_rand = rng.random(n) * 0.01 * item * (remaining + eps) / (max_cap + eps)\n    priority[feasible] += jitter_rand[feasible]\n    return priority\n\n[Heuristics 20th]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Compute bin priorities using inverse leftover, index bias, deterministic golden\u2011ratio jitter and adaptive random jitter.\"\"\"\n    caps = np.asarray(bins_remain_cap, dtype=float)\n    n = caps.size\n    if n == 0:\n        return np.empty(0, dtype=float)\n    eps = 1e-9\n    remaining = caps - item\n    feasible = remaining >= 0\n    priority = np.full(n, -np.inf, dtype=float)\n    priority[feasible] = 1.0 / (remaining[feasible] + eps)\n    idx = np.arange(n, dtype=float)\n    priority[feasible] -= idx[feasible] * 1e-5\n    phi = 0.6180339887498949\n    jitter_det = np.mod(phi * (idx + 1) * item, 1.0) * 0.01 * item\n    priority[feasible] += jitter_det[feasible]\n    max_cap = caps.max()\n    rng = np.random.default_rng()\n    jitter_rand = rng.random(n) * 0.01 * item * (remaining + eps) / (max_cap + eps)\n    priority[feasible] += jitter_rand[feasible]\n    return priority\n\n\n### Guide\n- Keep in mind, list of design heuristics ranked from best to worst. Meaning the first function in the list is the best and the last function in the list is the worst.\n- The response in Markdown style and nothing else has the following structure:\n\"**Analysis:**\n**Experience:**\"\nIn there:\n+ Meticulously analyze comments, docstrings and source code of several pairs (Better code - Worse code) in List heuristics to fill values for **Analysis:**.\nExample: \"Comparing (best) vs (worst), we see ...;  (second best) vs (second worst) ...; Comparing (1st) vs (2nd), we see ...; (3rd) vs (4th) ...; Comparing (second worst) vs (worst), we see ...; Overall:\"\n\n+ Self-reflect to extract useful experience for design better heuristics and fill to **Experience:** (<60 words).\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}