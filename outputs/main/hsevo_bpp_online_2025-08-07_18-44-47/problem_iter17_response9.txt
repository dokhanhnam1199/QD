```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Score bins for online bin packing: inverse leftover, tiny index bias, deterministic golden‑ratio jitter, random jitter scaled by remaining capacity, and mean‑centered load term for balanced utilization."""
    caps = np.asarray(bins_remain_cap, dtype=float)
    n = caps.size
    if n == 0:
        return np.empty(0, dtype=float)
    eps = 1e-9
    remaining = caps - item
    feasible = remaining >= 0
    priority = np.full(n, -np.inf, dtype=float)
    if not feasible.any():
        return priority
    idx = np.arange(n, dtype=float)
    base = 1.0 / (remaining[feasible] + eps)
    bias = idx[feasible] * 1e-6
    phi = 0.6180339887498949
    jitter_det = np.mod(phi * (idx[feasible] + 1) * item, 1.0) * 0.01 * item
    rng = np.random.default_rng()
    jitter_rand = rng.random(feasible.sum()) * 0.005 * remaining[feasible]
    mean_center = (caps.mean() - caps[feasible]) * 0.001
    priority[feasible] = base - bias + jitter_det + jitter_rand + mean_center
    return priority
```
