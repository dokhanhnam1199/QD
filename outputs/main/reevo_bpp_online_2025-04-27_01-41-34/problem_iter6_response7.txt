```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Feasibility - Infeasible bins get a very negative priority.
    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -1e9

    # Rule 2: Exact Fit - Heavily reward exact fits.
    space_left = bins_remain_cap - item
    exact_fit = np.abs(space_left) < 1e-6
    priorities[exact_fit] += 1000.0

    # Rule 3: Tight Fit - Significantly reward tight fits.
    tight_fit = (can_fit) & (space_left <= 0.1) & (~exact_fit)
    priorities[tight_fit] += 500.0

    # Rule 4: Barely Fits - Penalize barely fitting items to reduce fragmentation.
    barely_fits = (can_fit) & (space_left > 0.1) & (space_left <= 0.3)
    priorities[barely_fits] -= 200.0

    # Rule 5: Best Fit - Prioritize bins where the item fits best (smallest waste), but not a tight or barely fit. Use exponential scaling.
    best_fit = (can_fit) & (~tight_fit) & (~barely_fits) & (~exact_fit)
    if np.any(best_fit):
        waste = bins_remain_cap - item
        max_cap = np.max(bins_remain_cap[best_fit])
        priorities[best_fit] += 100 * np.exp(-5 * waste[best_fit] / max_cap)

    # Rule 6: If no "good" fit, slightly prefer bins with more remaining capacity to distribute waste more evenly and potentially enable future fits.
    otherwise = can_fit & ~exact_fit & ~tight_fit & ~barely_fits & ~best_fit
    if np.any(otherwise):
        priorities[otherwise] += 0.1 * bins_remain_cap[otherwise]


    return priorities
```
