```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize near-perfect fits, strongly penalize unfit bins, and add a tie-breaking bonus for emptier bins.

    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -1e9  # Cannot fit, very low priority (effectively -inf but avoids inf issues)

    # Prioritize bins that have capacity close to item size.  Use a Gaussian-like distribution centered around 0 for the difference.
    diff = bins_remain_cap - item
    if np.any(can_fit):  # Avoid potential errors if no bins can fit.
        std_dev = item / 10  # Adjust for desired spread; smaller std_dev means stricter "near-perfect"
        priorities[can_fit] = np.exp(-(diff[can_fit]**2) / (2 * std_dev**2))


        # Add a tie-breaking bonus for emptier bins.  Normalize by the maximum remaining capacity to ensure scale invariance.
        if np.max(bins_remain_cap) > 0: # Avoid division by zero
             priorities[can_fit] += 0.01 * (bins_remain_cap[can_fit] / np.max(bins_remain_cap))

    return priorities
```
