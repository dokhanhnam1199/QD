```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1  # Base priority for fitting

    # Higher priority for bins with smaller remaining capacity after fitting
    remaining_after_fit = bins_remain_cap[can_fit] - item
    priorities[can_fit] += np.max(bins_remain_cap) - remaining_after_fit # Prefer less remaining space

    # Add some randomness to break ties and explore solutions
    priorities[can_fit] += np.random.rand(np.sum(can_fit)) * 0.1 # Small random bonus

    # Negative priority for bins that cannot fit the item
    priorities[~can_fit] = -np.inf  # Disqualify bins that can't fit

    return priorities
```
