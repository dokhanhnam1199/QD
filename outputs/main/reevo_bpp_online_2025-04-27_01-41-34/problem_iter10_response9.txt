```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    # Hard constraint: Cannot fit
    priorities[~can_fit] = -np.inf

    # Gaussian fit for bins that can fit
    if np.any(can_fit):
        diff = bins_remain_cap[can_fit] - item
        std_dev = item / 3  # Adjust standard deviation as needed
        priorities[can_fit] = np.exp(-(diff**2) / (2 * std_dev**2))

        # Tie-breaker: Favor bins with more remaining capacity (after accounting for item)
        remaining_after_fit = bins_remain_cap[can_fit] - item

        # Normalize tie-breaker by item size instead of max remaining capacity
        priorities[can_fit] += 0.2 * remaining_after_fit / item


    return priorities
```
