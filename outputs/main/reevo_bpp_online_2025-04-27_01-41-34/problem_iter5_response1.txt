```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Disqualify bins that can't fit the item
    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -np.inf  # Cannot fit, VERY low priority

    # Near-perfect fit bonus using a sharper Gaussian centered at 0 difference
    diff = bins_remain_cap - item
    if np.any(can_fit):
        std_dev = item / 5  # More selective near-fit than v1
        priorities[can_fit] += 5 * np.exp(-(diff[can_fit]**2) / (2 * std_dev**2))  # Higher magnitude

        # Tight fit reward and bare fit penalty
        tight_fit_threshold = item / 10 #Within 10% of item size
        bare_fit_threshold = item / 2  # More than 50% free space after packing item

        tight_fit = (diff[can_fit] <= tight_fit_threshold) & (diff[can_fit] >= 0)
        bare_fit = diff[can_fit] > bare_fit_threshold

        priorities[can_fit][tight_fit] += 2 # High reward for tight fit
        priorities[can_fit][bare_fit] -= 1   # Moderate penalty for very loose fit


        # Tie-breaking bonus: emptier bins get slight preference
        priorities[can_fit] += 0.05 * (bins_remain_cap[can_fit] / np.max(bins_remain_cap)) # Reduced magnitude

    return priorities
```
