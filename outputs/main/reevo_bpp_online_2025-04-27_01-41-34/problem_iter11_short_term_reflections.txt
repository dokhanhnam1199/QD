The better code uses: stricter infeasibility, fill ratio bonus, exploration, diversity penalty, and near-full bin bonus.

Better code:
1. Uses `-np.inf` for infeasibility.
2. Has larger `std_dev`, and capacity bonus normalized by `np.max`.

Feasibility is key. Sharper Gaussian, better tie-breaking with remaining capacity improves performance.

Sharper near-fit prioritization and emptiness bonus considering item size yielded improvement.

Prioritize perfect fits and strongly penalize unfit bins. Normalize tie-breakers for scale invariance.

Sharper infeasibility penalty, and emptier bin preference using `1 - (bins_remain_cap / max_cap)` improve performance.

Sharper near-fit Gaussians, emptiness bonus for near-fits, and a nearly-full bonus improve online bin packing.

Prioritize perfect fits, penalize barely fits, and reward almost-full bins for improved performance.

Prioritize perfect/near-perfect fits. Penalize barely fits. Reward almost-full bins after item placement.

Hard constraints, appropriate scaling, and a stronger tie-breaker significantly improve performance.

