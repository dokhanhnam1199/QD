```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Give a base priority inversely proportional to wasted space,
            # but scaled logarithmically to avoid over-emphasizing near-perfect fits.
            waste = cap - item
            priority = np.log1p(1 / (waste + 1e-9)) # Add a small constant to avoid division by zero

            # Boost priority for bins that are closer to full after packing
            fullness = item / cap
            priority += fullness * 2 # Double the influence of fullness.

            # Further boost if the item perfectly fits (or near perfectly)
            if abs(waste) < 1e-6:
                priority += 10 # Significant boost

            priorities[i] = priority
        else:
            # Very negative priority for bins that cannot fit
            priorities[i] = -np.inf
    return priorities
```
