```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    # Huge penalty for bins that cannot fit the item
    priorities[~can_fit] = -1e9

    # Reward bins with near perfect fit using Gaussian-like distribution
    diff = bins_remain_cap - item
    std_dev = item / 5  # Narrower std_dev for stricter near-perfect fit
    priorities[can_fit] = np.exp(-(diff[can_fit] ** 2) / (2 * std_dev ** 2))

    # Strong reward for bins that are almost full after placing the item
    almost_full_threshold = 0.1  # Within 10% of being full
    almost_full = (diff >= 0) & (diff <= almost_full_threshold)  # Corrected indexing
    priorities[almost_full] += 10  # Substantial reward for almost full

    # Moderate penalty for bins with a lot of space left after placing the item
    large_space_threshold = item * 2  # More than 2 times the item size remaining
    large_space = (diff > large_space_threshold) & can_fit
    priorities[large_space] -= 2 # Moderate penalty

    # Small bonus for emptier bins to break ties, but only when the bin can fit the item
    priorities[can_fit] += 0.01 * bins_remain_cap[can_fit]

    return priorities
```
