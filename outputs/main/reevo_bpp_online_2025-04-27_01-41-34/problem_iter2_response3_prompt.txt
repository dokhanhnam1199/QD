{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Heuristic 1: Prefer bins that can fit the item snugly (smallest remaining space after placement).\n\n    fit_check = bins_remain_cap - item >= 0\n    \n    if np.any(fit_check):\n        remaining_space = bins_remain_cap - item\n        remaining_space[~fit_check] = np.inf  # Disqualify bins that can't fit.\n\n        priorities = -remaining_space\n\n    else:\n        # if no bin can fit, assign a low, but non-zero priority. This should be the very last choice, triggering a new bin if this is chosen\n        priorities = np.full_like(bins_remain_cap, -1e9)\n        return priorities\n\n    # Heuristic 2: Modify based on remaining capacity ratio\n    capacity_ratios = bins_remain_cap / np.sum(bins_remain_cap)\n\n    priorities += capacity_ratios * 10 # Favor bins with larger overall remaining capacity\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First-Fit Decreasing inspired priority: prioritize bins where the item fits best,\n    # but penalize bins that are almost full after placing the item.\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            # Calculate remaining capacity after placing item.\n            remaining_capacity = cap - item\n\n            # Prioritize bins that provide a good fit. We want remaining capacity to be neither too large (wasted space) nor too small (high fragmentation).\n\n            # Prioritize bins that provide a 'moderate' remaining capacity.  Let's target around 20-50% of bin size\n            desired_remaining = 0.3 * 1  # Assuming bins have unit capacity. Adjust if not the case.\n            priority = np.exp(-((remaining_capacity - desired_remaining) ** 2) / (2 * (0.1) ** 2))\n\n            # Penalize bins where the item is a really tight fit (might lead to fragmentation later)\n            if remaining_capacity < 0.1:\n                priority *= 0.5  # Reduce priority\n\n            # Boost priority if remaining capacity is large enough to contain more similar items, potentially.\n            # Check if remaining can contain multiple smaller items, not useful because online context is considered to avoid future fit chances\n            priorities[i] = priority\n        else:\n            priorities[i] = -np.inf  # Item doesn't fit. Exclude bin completely by assigning low priority\n    return priorities\n\n[Reflection]\nThe better code uses a more nuanced, targeted approach to remaining capacity, penalizing fragmentation and rewarding good fits.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}