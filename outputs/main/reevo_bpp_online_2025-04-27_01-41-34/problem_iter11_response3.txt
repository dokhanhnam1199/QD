```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: infinite penalty if it doesn't fit.
    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -np.inf

    # Gaussian priority for near-perfect fits, only if it fits.
    if np.any(can_fit):
        diff = bins_remain_cap[can_fit] - item
        std_dev = item / 5  # Sharper Gaussian (smaller std_dev)
        priorities[can_fit] = np.exp(-(diff**2) / (2 * std_dev**2))

        # Fill ratio bonus: reward bins that are already somewhat full
        fill_ratio = (np.max(bins_remain_cap) - bins_remain_cap[can_fit]) / np.max(bins_remain_cap)
        priorities[can_fit] += 0.2 * fill_ratio

        # Emptiness reward, considering item size
        priorities[can_fit] += 0.05 * (bins_remain_cap[can_fit] / (np.max(bins_remain_cap) + item))

        # Exploration penalty: encourage diversity in bin selection (less deterministic)
        priorities[can_fit] -= 0.01 * np.random.rand(np.sum(can_fit))  # Small random penalty

        # Reward almost-full bins:
        almost_full = (bins_remain_cap[can_fit] >= 0) & (bins_remain_cap[can_fit] <= 0.2 * item)
        priorities[can_fit][almost_full] += 0.3  # Higher reward for nearly full bins

    return priorities
```
