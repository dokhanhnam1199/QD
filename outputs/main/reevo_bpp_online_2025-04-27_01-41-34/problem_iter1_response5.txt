```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Heuristic 1: Prefer bins that can fit the item snugly (smallest remaining space after placement).

    fit_check = bins_remain_cap - item >= 0
    
    if np.any(fit_check):
        remaining_space = bins_remain_cap - item
        remaining_space[~fit_check] = np.inf  # Disqualify bins that can't fit.

        priorities = -remaining_space

    else:
        # if no bin can fit, assign a low, but non-zero priority. This should be the very last choice, triggering a new bin if this is chosen
        priorities = np.full_like(bins_remain_cap, -1e9)
        return priorities

    # Heuristic 2: Modify based on remaining capacity ratio
    capacity_ratios = bins_remain_cap / np.sum(bins_remain_cap)

    priorities += capacity_ratios * 10 # Favor bins with larger overall remaining capacity

    return priorities
```
