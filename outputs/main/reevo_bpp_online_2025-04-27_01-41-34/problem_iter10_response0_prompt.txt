{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    can_fit = bins_remain_cap >= item\n    priorities[~can_fit] = -1e9  # Very strong penalty for infeasibility\n\n    diff = bins_remain_cap - item\n    if np.any(can_fit):\n        std_dev = item / 4  # Smaller std_dev for sharper Gaussian\n        priorities[can_fit] = np.exp(-(diff[can_fit]**2) / (2 * std_dev**2))\n\n        # Normalized bonus based on emptiness (1 - ratio of used capacity)\n        capacity_ratio = (bins_remain_cap[can_fit] - item) / bins_remain_cap[can_fit]\n        capacity_ratio = np.clip(capacity_ratio, 0, 1) # Ensure the ratio is within [0, 1]\n        priorities[can_fit] += 0.1 * (1 - capacity_ratio) # Emptier gets preference\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n    priorities[~can_fit] = -np.inf\n\n    if np.any(can_fit):\n        diff = bins_remain_cap[can_fit] - item\n        std_dev = item / 3\n        priorities[can_fit] = np.exp(-(diff**2) / (2 * std_dev**2))\n\n        # Fill ratio bonus\n        fill_ratio = item / bins_remain_cap[can_fit]\n        priorities[can_fit] += 0.3 * fill_ratio\n\n        # Random Exploration\n        priorities[can_fit] += np.random.rand(np.sum(can_fit)) * 0.05\n\n        # Bin Diversity: Penalize bins with very low remaining capacity but only if the item is relatively large\n        if item > np.mean(bins_remain_cap): # Only penalize if item is relatively big\n          low_capacity = bins_remain_cap[can_fit] < (item * 0.6)\n          priorities[can_fit][low_capacity] *= 0.7\n\n        # Bonus to bins that are nearly full\n        near_full = (bins_remain_cap[can_fit] > item) & (bins_remain_cap[can_fit] < (item * 1.2))\n        priorities[can_fit][near_full] += 0.15\n\n\n    return priorities\n\n[Reflection]\nThe better code uses: stricter infeasibility, fill ratio bonus, exploration, diversity penalty, and near-full bin bonus.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}