```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -np.inf

    if np.any(can_fit):
        diff = bins_remain_cap - item
        std_dev = item / 2.5
        priorities[can_fit] = np.exp(-(diff[can_fit]**2) / (2 * std_dev**2))

        # Fit Ratio: Prioritize higher utilization (but still penalize very tight fits)
        fit_ratio = item / (bins_remain_cap[can_fit] + 1e-9)  # Avoid division by zero
        priorities[can_fit] += 0.5 * fit_ratio  # Weigh the fit ratio

        # Penalize very tight fits (remaining capacity close to zero AFTER adding the item)
        remaining_after_fit = bins_remain_cap[can_fit] - item
        tight_fit_penalty = np.exp(-(remaining_after_fit**2) / (2 * (item/5)**2))
        priorities[can_fit] -= 0.2 * (1 - tight_fit_penalty) # Subtract penalty

        # Randomness for exploration
        priorities[can_fit] += 0.05 * np.random.rand(np.sum(can_fit)) # Add small random value

    return priorities
```
