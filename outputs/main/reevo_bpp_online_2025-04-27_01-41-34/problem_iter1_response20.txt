```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Assign very low priority if the item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    # Higher priority for bins where item fits well (avoid fragmentation)
    fit_score = bins_remain_cap - item
    priorities[bins_remain_cap >= item] = np.exp(-np.abs(fit_score[bins_remain_cap >= item]))

    # Slightly prefer bins that are already somewhat full (but can still accommodate)
    fill_ratio = (bins_remain_cap - item) / bins_remain_cap
    priorities[bins_remain_cap >= item] += 0.5 * (1 - fill_ratio[bins_remain_cap >= item]) # Higher fill means more pref

    return priorities
```
