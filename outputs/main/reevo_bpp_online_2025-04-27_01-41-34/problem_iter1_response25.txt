```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # First-Fit-Decreasing inspired priority: prefer bins that can fit the item
    # but avoid bins where the remaining space after placing the item will be too small.
    
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            remaining_space = cap - item
            
            # Prioritize bins where the remaining space is neither too small nor too large.
            # This aims to avoid both excessive fragmentation and wasting too much space.
            if remaining_space >= 0.1 * cap and remaining_space <= 0.8 * cap:
                priorities[i] = 1.0 / (abs(0.5*cap - remaining_space)+1e-6) # Bias towards half full bins.
            elif remaining_space < 0.1*cap:
                 priorities[i] = 0.5 # Small remaining space is OK
            else:
                priorities[i] = 0.25 # Large remaining space.

    # If no bin can fit, return all zeros (which means it doesn't matter which one gets the new bin).
    # Otherwise normalize so at least one bin can be used (we are not trying to avoid new bins altogether, just if other options are viable)

    if np.all(priorities == 0):
        return priorities
    
    return priorities
```
