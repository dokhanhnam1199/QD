```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility check: Give -inf priority to bins that cannot fit the item
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf

    # For feasible bins, prioritize based on remaining capacity *after* placing the item.
    # Bins with smaller remaining capacity after packing get higher priority (First Fit Decreasing style).
    remaining_after_packing = bins_remain_cap - item
    feasible_mask = ~infeasible_mask
    priorities[feasible_mask] = -remaining_after_packing[feasible_mask]

    # Further refine: Boost priority for bins that fit the item *well* without too much waste.
    # The "well" is measured by ratio, give small waste boost.

    ratios = item / bins_remain_cap
    small_waste_boost = (ratios > 0.5) * (ratios < 1.0) * 0.5 # added a bit of constant multiplier 0.5 to not overemphasize
    priorities[feasible_mask] += small_waste_boost[feasible_mask]


    return priorities
```
