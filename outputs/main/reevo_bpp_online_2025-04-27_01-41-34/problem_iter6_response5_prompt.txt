{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Rule 1: Feasibility check.  Bins that can't fit get a very low priority.\n    can_fit = bins_remain_cap >= item\n    priorities[~can_fit] = -1e9\n\n    # Rule 2: Give bins with exactly enough capacity the highest priority\n    space_left = bins_remain_cap - item\n    exact_fit = np.abs(space_left) < 1e-6\n    priorities[exact_fit] += 1e9  # Huge reward for exact fit\n\n    # Rule 3: Reward relatively tight fits, but not *too* tight.  Want to encourage\n    # filling bins reasonably well.\n    relatively_tight_fit = (can_fit) & (space_left > 1e-6) & (space_left <= item/4)\n    priorities[relatively_tight_fit] += 100.0\n\n    # Rule 4: Penalize bins where the item fits, but leaves a *lot* of space.\n    # We want to avoid fragmentation, so penalize leaving large gaps.\n    large_gap = (can_fit) & (space_left > item/4)\n    priorities[large_gap] -= 50.0\n\n    # Rule 5: Prioritize based on the percentage fullness.  We want to fill\n    # bins as much as possible. But only if it's not already prioritized.\n    intermediate_fit = can_fit & (~exact_fit) & (~relatively_tight_fit) & (~large_gap)\n    utilization = item / (bins_remain_cap[intermediate_fit] + 1e-9)  # Avoid division by zero.\n    priorities[intermediate_fit] += utilization * 10 # Scale to make it meaningful.\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Prioritize near-perfect fits, strongly penalize unfit bins, and add a tie-breaking bonus for emptier bins.\n\n    can_fit = bins_remain_cap >= item\n    priorities[~can_fit] = -np.inf  # Cannot fit, lowest priority\n\n    # Prioritize bins that have capacity close to item size.  Use a Gaussian-like distribution centered around 0 for the difference.\n    diff = bins_remain_cap - item\n    if np.any(can_fit):  # Avoid potential errors if no bins can fit.\n        std_dev = item / 3  # Adjust for desired spread; smaller std_dev means stricter \"near-perfect\"\n        priorities[can_fit] = np.exp(-(diff[can_fit]**2) / (2 * std_dev**2))\n\n\n        # Add a tie-breaking bonus for emptier bins, but only if it's a good fit. Prioritize filling emptier \"near perfect fit\" bins\n        near_perfect = priorities[can_fit] > 0.1  # Adjust threshold for what constitutes \"near perfect\"\n        if np.any(near_perfect):\n            priorities[can_fit][near_perfect] += 0.1 * (bins_remain_cap[can_fit][near_perfect] / np.max(bins_remain_cap))\n\n    return priorities\n\n[Reflection]\nGaussian fit, negative infinity for infeasibility, and tie-breaking bonus based on emptiness improve performance.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}