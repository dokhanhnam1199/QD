{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n\n    # Unfit bins get negative infinity priority.\n    priorities[~can_fit] = -np.inf\n\n    # Calculate the remaining capacity after placing the item.\n    remaining_capacity = bins_remain_cap - item\n\n    # Calculate the fill ratio (item size / bin capacity).\n    fill_ratio = item / bins_remain_cap\n\n    # Gaussian-based fit preference.\n    std_dev = item / 3  # Standard deviation scaled by item size.\n    gaussian_fit = np.exp(-(remaining_capacity[can_fit]**2) / (2 * std_dev**2))\n    priorities[can_fit] += gaussian_fit\n\n    # Maximize bin utilization (favor higher fill ratios).\n    priorities[can_fit] += fill_ratio[can_fit]\n\n    # Randomness for exploration.\n    priorities[can_fit] += 0.01 * np.random.rand(np.sum(can_fit))\n\n    # Handle edge cases and prioritize bins with smaller remaining capacity if Gaussian fit is similar\n    # to encourage closing bins.\n    priorities[can_fit] -= 0.05 * remaining_capacity[can_fit]\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n    priorities[~can_fit] = -np.inf\n\n    if np.any(can_fit):\n        diff = bins_remain_cap[can_fit] - item\n        std_dev = item / 3  # Standard deviation, adjusted for item size\n        priorities[can_fit] = np.exp(-(diff**2) / (2 * std_dev**2))\n\n        # Bonus for fullness: Prioritize bins that will be more full after packing\n        fill_ratio = item / bins_remain_cap[can_fit]\n        priorities[can_fit] += 0.2 * fill_ratio #Heuristic weight\n\n        # Random Exploration\n        priorities[can_fit] += np.random.rand(np.sum(can_fit)) * 0.05 # Small amount of randomness\n\n\n    return priorities\n\n[Reflection]\nFocus on relevant features (remaining capacity, fill ratio), tuned weights, and reduced anti-exploration.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}