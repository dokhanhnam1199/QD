{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Rule 1: Prioritize bins that can fit the item.\n    fit_mask = bins_remain_cap >= item\n    priorities[fit_mask] += 1  # Give a base priority for fitting\n    \n    # Rule 2: Give higher priority to bins with less remaining capacity, but only if they can fit the item. \n    #         This encourages filling bins up more completely when possible.\n    priorities[fit_mask] += (1 - (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask])\n    \n    # Rule 3: Penalize bins that would have very little space left after fitting the item.\n    #         Avoid creating bins that are almost empty.  Only consider if the item fits.\n    almost_full_mask = fit_mask & (bins_remain_cap - item < 0.1) # If it fits and less than 0.1 space remaining\n    priorities[almost_full_mask] -= 0.5 # Reduce priority slightly\n    \n    # Rule 4: Strongly penalize bins that CANNOT fit the item.\n    priorities[~fit_mask] = -1e9  # Make them extremely undesirable\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # First-Fit Decreasing inspired priority: prefer bins where the item almost perfectly fills it\n    # and heavily penalize bins that can't fit the item.\n\n    can_fit = bins_remain_cap >= item\n    priorities[~can_fit] = -np.inf  # Cannot fit, lowest priority\n\n    # Prioritize bins that have capacity close to item size\n    diff = bins_remain_cap - item\n    priorities[can_fit] = np.exp(-np.abs(diff[can_fit]) / item)\n\n    # Additionally, give a small bonus to bins that are relatively empty (First-Fit)\n    priorities[can_fit] += 0.1 * (1 - bins_remain_cap[can_fit] / np.max(bins_remain_cap))\n    return priorities\n\n[Reflection]\nPrioritize near-perfect fits, strongly penalize unfit bins, and add a tie-breaking bonus for emptier bins.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}