```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    # 1. Hard constraint: Cannot fit
    priorities[~can_fit] = -1e9

    # 2. Perfect fit bonus
    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6  # Tolerate floating-point errors
    priorities[perfect_fit] += 1e6

    # 3. Near-perfect fit bonus (Gaussian distribution)
    diff = bins_remain_cap - item
    std_dev = item / 5  # Stricter near-perfect definition
    gaussian_fit = np.exp(-(diff[can_fit]**2) / (2 * std_dev**2)) if np.any(can_fit) else np.array([])  #Handle empty slice
    priorities[can_fit] += 1e3 * gaussian_fit

    # 4. Barely fits penalty
    barely_fits = can_fit & (bins_remain_cap < item + item / 10)
    priorities[barely_fits] -= 1e4

    # 5. Tie-breaker: Emptier bins (but only if it can fit and not perfect fit)
    can_fit_not_perfect = can_fit & (~perfect_fit)
    if np.any(can_fit_not_perfect):  # avoid runtime warning
        priorities[can_fit_not_perfect] += 0.1 * bins_remain_cap[can_fit_not_perfect] / np.max(bins_remain_cap)


    return priorities
```
