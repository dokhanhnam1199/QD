```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -np.inf

    diff = bins_remain_cap - item
    if np.any(can_fit):
        std_dev = item / 3
        priorities[can_fit] = np.exp(-(diff[can_fit]**2) / (2 * std_dev**2))

        # More emphasis on filling bins
        priorities[can_fit] += 0.2 * (bins_remain_cap[can_fit] / np.max(bins_remain_cap))

        # Penalize very tight fits (less than 10% of bin size remaining after packing)
        remaining_after_pack = bins_remain_cap[can_fit] - item
        very_tight_fit = remaining_after_pack < (0.1 * np.max(bins_remain_cap))
        priorities[can_fit][very_tight_fit] *= 0.5 # Reduce priority for these bins

        # Add some randomness for exploration
        priorities[can_fit] += np.random.normal(0, 0.01, size=np.sum(can_fit))

    return priorities
```
