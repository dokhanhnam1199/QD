{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility is paramount; strongly penalize bins that cannot fit the item.\n    can_fit = bins_remain_cap >= item\n    priorities[~can_fit] = -1e9  # Huge negative penalty for infeasibility\n\n    # Sharpened Gaussian reward for bins with near-perfect fits.  Normalize diff by item size.\n    diff = bins_remain_cap - item\n    if np.any(can_fit):\n        std_dev = item / 5  # Even narrower Gaussian width\n        normalized_diff = diff[can_fit] / item\n        priorities[can_fit] = np.exp(-(normalized_diff**2) / (2 * (std_dev/item)**2)) # Gaussian centered at 0.\n\n        # Normalized bonus scaling: emptier bins get a smaller bonus to encourage filling fuller bins first when near-perfect fits exist.\n        # Using (1 - ratio) where ratio is fill ratio: item / (bin_capacity - remaining_capacity).  Want to *discourage* putting item into empty bin.\n        fill_ratio = item / (np.max(bins_remain_cap) - bins_remain_cap[can_fit] + item)  # Normalized fill ratio, avoids div-by-zero if all bins are empty.\n        priorities[can_fit] += 0.01 * (1 - fill_ratio)\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n\n    # Hard constraint: Cannot fit\n    priorities[~can_fit] = -np.inf\n\n    # Gaussian fit for bins that can fit\n    if np.any(can_fit):\n        diff = bins_remain_cap - item\n        std_dev = item / 3  # Adjust standard deviation as needed\n        priorities[can_fit] = np.exp(-(diff[can_fit]**2) / (2 * std_dev**2))\n\n        # Tie-breaker: Favor bins with more remaining capacity (after accounting for item)\n        # Avoid division by zero if all remaining capacities are zero.\n        max_remaining = np.max(bins_remain_cap[can_fit]) if np.any(can_fit) else 0\n\n        if max_remaining > 0:\n            priorities[can_fit] += 0.1 * (bins_remain_cap[can_fit] - item) / max_remaining\n        else:\n            priorities[can_fit] += 0.01  # Small bonus if all bins are empty\n\n    return priorities\n\n[Reflection]\nFeasibility is key. Sharper Gaussian, better tie-breaking with remaining capacity improves performance.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}