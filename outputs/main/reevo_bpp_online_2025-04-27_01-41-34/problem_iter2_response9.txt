```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility score: 1 if item fits, 0 otherwise
    feasible_bins = bins_remain_cap >= item
    priorities[feasible_bins] += 1

    # Remaining Capacity score: prioritize bins that, after packing, leaves less space
    remaining_capacity_score = np.where(feasible_bins, 1 - (bins_remain_cap - item) / np.max(bins_remain_cap[feasible_bins] if np.any(feasible_bins) else bins_remain_cap), 0)
    priorities += remaining_capacity_score

    # Best Fit score: Prioritize bins where item fits best (smallest waste)
    waste = bins_remain_cap - item
    best_fit_score = np.where(feasible_bins, np.exp(-10 * waste / np.max(bins_remain_cap[feasible_bins] if np.any(feasible_bins) else bins_remain_cap)), 0)
    priorities += best_fit_score

    # Worst Fit penalty: Discourage filling bins that have very little remaining capacity with a relatively small item
    worst_fit_threshold = 0.1 * np.max(bins_remain_cap)
    worst_fit_penalty = np.where(feasible_bins & (bins_remain_cap <= worst_fit_threshold), -0.5, 0)
    priorities += worst_fit_penalty

    # Level Bin Preference: slightly favor bins whose level is near to certain level.
    level_bin_pref = np.where(feasible_bins, np.exp(-((bins_remain_cap - item) - np.mean(bins_remain_cap[feasible_bins] if np.any(feasible_bins) else bins_remain_cap))**2 / (2 * np.std(bins_remain_cap[feasible_bins] if np.any(feasible_bins) else bins_remain_cap)**2 + 1e-6)), 0)
    priorities += level_bin_pref
    # Introduce some randomness to avoid local optima
    randomness = np.random.rand(len(bins_remain_cap)) * 0.005
    priorities += randomness

    return priorities
```
