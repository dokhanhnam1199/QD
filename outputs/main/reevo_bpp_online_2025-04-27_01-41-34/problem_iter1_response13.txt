```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate remaining space after placing the item in each bin
    remaining_space = bins_remain_cap - item

    # Give high priority to bins where the item fits
    fit_indices = remaining_space >= 0
    priorities[fit_indices] = 1

    #Prioritize bins with smallest remaining space when the item does fit

    priorities[fit_indices] = 1/(remaining_space[fit_indices] + 0.000001)  #add small number to avoid division by zero error

    # For bins where the item doesn't fit, give a very low priority
    # This discourages placing items in bins where they clearly don't belong

    return priorities
```
