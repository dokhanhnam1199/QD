```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -1e9  # Huge penalty for bins that can't fit

    diff = bins_remain_cap - item

    # Near perfect fit (Gaussian-like distribution)
    std_dev = item / 5  # Narrower std_dev for stricter perfect fit
    fit_score = np.exp(-(diff**2) / (2 * std_dev**2))
    priorities[can_fit] += fit_score[can_fit] * 100 # Substantially reward near-perfect fits

    # Tight Fit Reward
    tight_fit_threshold = item / 10 # A tight fit is within 10% of the item size
    tight_fit = (diff >= 0) & (diff <= tight_fit_threshold) & can_fit
    priorities[tight_fit] += 50  # Significant reward for tight fits

    # Barely fit penalty
    barely_fit_threshold = item / 2 #Barely fits means remaining capacity greater than half the item
    barely_fit = (diff > tight_fit_threshold) & (diff <= barely_fit_threshold) & can_fit
    priorities[barely_fit] -= 10  # Mild penalty

    #Tie-breaker: Bonus for emptier bins, but only if it can fit
    priorities[can_fit] += 0.01 * bins_remain_cap[can_fit]

    return priorities
```
