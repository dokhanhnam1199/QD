```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # First, filter out bins that can't fit the item
    infeasible_bins = bins_remain_cap < item
    priorities[infeasible_bins] = -np.inf  # Never choose these

    # For feasible bins:
    feasible_bins = ~infeasible_bins

    if np.any(feasible_bins):
        # 1. Remaining capacity after placing the item (higher is better, but penalized)
        remaining_capacity = bins_remain_cap[feasible_bins] - item
        priorities[feasible_bins] = remaining_capacity

        # 2. Try to completely fill bins (reward small wasted space)
        waste = bins_remain_cap[feasible_bins] - item
        close_to_full = np.exp(-np.abs(waste) / (0.1 + item))  # exp(-abs(waste)/scale) ; scale is important.

        priorities[feasible_bins] += 2 * close_to_full  # Weigh filling bins higher.

        # 3. Avoid bins that are very large compared to the item to prevent extreme fragmentation.

        capacity_ratios = bins_remain_cap[feasible_bins] / (item + 0.00001)
        fragmentation_penalty = np.exp(-capacity_ratios / 2)  # Penalize too large bins relative to item size.
        priorities[feasible_bins] -= fragmentation_penalty # Subtract fragmentation penalty.

        # 4. If there's a perfect fit, choose it first
        perfect_fit = np.abs(waste) < 1e-6 # Tolerate small numerical inaccuracies.

        priorities[feasible_bins][perfect_fit] += 100  # huge bonus for perfect fits.
    return priorities
```
