```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Feasibility check.  Bins that can't fit get a very low priority.
    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -1e9

    # Rule 2: Reward tight fits significantly.
    space_left = bins_remain_cap - item
    tight_fit = (can_fit) & (space_left <= 0.1)
    priorities[tight_fit] += 10.0

    # Rule 3: Penalize bins where the item barely fits to avoid fragmentation
    barely_fits = (can_fit) & (space_left > 0.1) & (space_left <= 0.3)
    priorities[barely_fits] -= 2.0

    # Rule 4: Prioritize bins that can fit, using remaining capacity as a proxy for fullness.
    # Invert remaining capacity to give higher scores to fuller bins.  Add a small constant
    # to avoid division by zero. Only consider if the item fits, and is not already prioritized.
    intermediate_fit = can_fit & (~tight_fit) & (~barely_fits)
    priorities[intermediate_fit] += 1.0 / (bins_remain_cap[intermediate_fit] + 0.001)
    
    # Rule 5: Give bins with exactly enough capacity the highest priority
    exact_fit = np.abs(space_left) < 1e-6
    priorities[exact_fit] += 20.0

    return priorities
```
