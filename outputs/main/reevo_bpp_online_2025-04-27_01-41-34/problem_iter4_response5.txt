```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Feasibility check.  Bins that can't fit get a very low priority.
    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -1e9

    # Rule 2: Give bins with exactly enough capacity the highest priority
    space_left = bins_remain_cap - item
    exact_fit = np.abs(space_left) < 1e-6
    priorities[exact_fit] += 1e9  # Huge reward for exact fit

    # Rule 3: Reward relatively tight fits, but not *too* tight.  Want to encourage
    # filling bins reasonably well.
    relatively_tight_fit = (can_fit) & (space_left > 1e-6) & (space_left <= item/4)
    priorities[relatively_tight_fit] += 100.0

    # Rule 4: Penalize bins where the item fits, but leaves a *lot* of space.
    # We want to avoid fragmentation, so penalize leaving large gaps.
    large_gap = (can_fit) & (space_left > item/4)
    priorities[large_gap] -= 50.0

    # Rule 5: Prioritize based on the percentage fullness.  We want to fill
    # bins as much as possible. But only if it's not already prioritized.
    intermediate_fit = can_fit & (~exact_fit) & (~relatively_tight_fit) & (~large_gap)
    utilization = item / (bins_remain_cap[intermediate_fit] + 1e-9)  # Avoid division by zero.
    priorities[intermediate_fit] += utilization * 10 # Scale to make it meaningful.

    return priorities
```
