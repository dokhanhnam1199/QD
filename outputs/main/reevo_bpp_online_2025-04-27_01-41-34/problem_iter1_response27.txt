```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Rule 1: Prioritize bins that can fit the item.
    fit_mask = bins_remain_cap >= item
    priorities[fit_mask] += 1  # Give a base priority for fitting
    
    # Rule 2: Give higher priority to bins with less remaining capacity, but only if they can fit the item. 
    #         This encourages filling bins up more completely when possible.
    priorities[fit_mask] += (1 - (bins_remain_cap[fit_mask] - item) / bins_remain_cap[fit_mask])
    
    # Rule 3: Penalize bins that would have very little space left after fitting the item.
    #         Avoid creating bins that are almost empty.  Only consider if the item fits.
    almost_full_mask = fit_mask & (bins_remain_cap - item < 0.1) # If it fits and less than 0.1 space remaining
    priorities[almost_full_mask] -= 0.5 # Reduce priority slightly
    
    # Rule 4: Strongly penalize bins that CANNOT fit the item.
    priorities[~fit_mask] = -1e9  # Make them extremely undesirable

    return priorities
```
