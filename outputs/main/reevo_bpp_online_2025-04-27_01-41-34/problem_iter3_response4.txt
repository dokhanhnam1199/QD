```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    # Unfit bins get negative infinity priority.
    priorities[~can_fit] = -np.inf

    # Calculate the remaining capacity after placing the item.
    remaining_capacity = bins_remain_cap - item

    # Calculate the fill ratio (item size / bin capacity).
    fill_ratio = item / bins_remain_cap

    # Gaussian-based fit preference.
    std_dev = item / 3  # Standard deviation scaled by item size.
    gaussian_fit = np.exp(-(remaining_capacity[can_fit]**2) / (2 * std_dev**2))
    priorities[can_fit] += gaussian_fit

    # Maximize bin utilization (favor higher fill ratios).
    priorities[can_fit] += fill_ratio[can_fit]

    # Randomness for exploration.
    priorities[can_fit] += 0.01 * np.random.rand(np.sum(can_fit))

    # Handle edge cases and prioritize bins with smaller remaining capacity if Gaussian fit is similar
    # to encourage closing bins.
    priorities[can_fit] -= 0.05 * remaining_capacity[can_fit]

    return priorities
```
