```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit-Decreasing inspired heuristic: favor bins that can accommodate the item
    # and are relatively full after the item is added. This avoids creating too many nearly-empty bins.
    # Give a significant bonus if item perfectly fits.
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            remaining = cap - item
            if remaining == 0:
                priorities[i] = 1000 # huge bonus if item fits perfectly.
            else:
                priorities[i] = (cap - item)/cap + 1/cap # prioritzing more filled bins

    # Adjust for bins that are too small. These get a negative priority.
    for i, cap in enumerate(bins_remain_cap):
        if cap < item:
            priorities[i] = - (item - cap) # Larger the diff, larger penalty.
    return priorities
```
