{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Feasibility check: Disqualify bins that can't fit the item\n    can_fit = bins_remain_cap >= item\n    priorities[~can_fit] = -np.inf  # Cannot fit, VERY low priority\n\n    # Near-perfect fit bonus using a sharper Gaussian centered at 0 difference\n    diff = bins_remain_cap - item\n    if np.any(can_fit):\n        std_dev = item / 5  # More selective near-fit than v1\n        priorities[can_fit] += 5 * np.exp(-(diff[can_fit]**2) / (2 * std_dev**2))  # Higher magnitude\n\n        # Tight fit reward and bare fit penalty\n        tight_fit_threshold = item / 10 #Within 10% of item size\n        bare_fit_threshold = item / 2  # More than 50% free space after packing item\n\n        tight_fit = (diff[can_fit] <= tight_fit_threshold) & (diff[can_fit] >= 0)\n        bare_fit = diff[can_fit] > bare_fit_threshold\n\n        priorities[can_fit][tight_fit] += 2 # High reward for tight fit\n        priorities[can_fit][bare_fit] -= 1   # Moderate penalty for very loose fit\n\n\n        # Tie-breaking bonus: emptier bins get slight preference\n        priorities[can_fit] += 0.05 * (bins_remain_cap[can_fit] / np.max(bins_remain_cap)) # Reduced magnitude\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    can_fit = bins_remain_cap >= item\n    priorities[~can_fit] = -1e9  # Cannot fit, extremely low priority\n\n    diff = bins_remain_cap - item\n    near_fit_threshold = item * 0.1 #tuneable parameter - how close is \"near\"\n\n    near_perfect_fit = can_fit & (diff <= near_fit_threshold)\n    good_fit = can_fit & ~near_perfect_fit\n\n    #Near perfect fit gets very high priority\n    priorities[near_perfect_fit] = 1e6\n\n    #Good fit gets a medium priority based on how close to the item size it is\n    priorities[good_fit] = 1000 * (1 - (diff[good_fit] / bins_remain_cap[good_fit]))\n\n    #Tie breaker: prioritize emptier bins amongst the good fits.\n    priorities[can_fit] += 0.1 * bins_remain_cap[can_fit]\n\n    return priorities\n\n[Reflection]\nPrioritize near-perfect fits highly and good fits moderately. Use bin capacity as a tie-breaker.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}