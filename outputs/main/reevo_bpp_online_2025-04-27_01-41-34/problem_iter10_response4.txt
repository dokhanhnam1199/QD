```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -np.inf  # Cannot fit, lowest priority

    # Prioritize near-perfect fits, larger std_dev, the more bins are considered
    diff = bins_remain_cap - item
    if np.any(can_fit):
        std_dev = item / 2  # Adjust for desired spread
        priorities[can_fit] = np.exp(-(diff[can_fit]**2) / (2 * std_dev**2))

        # Add a tie-breaking bonus for emptier bins. Normalize by the maximum remaining capacity.
        max_cap = np.max(bins_remain_cap) if bins_remain_cap.size > 0 else 1.0
        priorities[can_fit] += 0.1 * (bins_remain_cap[can_fit] / max_cap)  # Correctly implemented emptier tie-breaker

        # Perfect Fit Bonus
        perfect_fit_indices = np.where(np.abs(diff[can_fit]) < 1e-6)[0]
        if perfect_fit_indices.size > 0:
            priorities[can_fit][perfect_fit_indices] += 1.0  # Substantially boost priority for perfect fits

    return priorities
```
