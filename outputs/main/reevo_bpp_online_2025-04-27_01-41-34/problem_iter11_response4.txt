```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -np.inf  # Cannot fit, lowest priority

    if np.any(can_fit):
        diff = bins_remain_cap - item
        std_dev = item / 5  # Sharper Gaussian (smaller std_dev)
        priorities[can_fit] += np.exp(-(diff[can_fit]**2) / (2 * std_dev**2))

        # Normalized fill ratio bonus
        fill_ratio = (bins_remain_cap[can_fit] - item) / bins_remain_cap[can_fit]
        priorities[can_fit] += 0.2 * (1 - fill_ratio) # Encourage higher fill

        # Emptiness reward, scaled by item size.  Larger items get smaller emptiness bonus
        priorities[can_fit] += 0.05 * (bins_remain_cap[can_fit] / np.max(bins_remain_cap)) * (1 - item)

        # Almost full bonus
        almost_full = (bins_remain_cap[can_fit] <= 2 * item) & (bins_remain_cap[can_fit] >= item)
        priorities[can_fit][almost_full] += 0.3

        # Diversity penalty (encourage exploration): penalize bins close to average fill
        avg_fill = np.mean(bins_remain_cap[can_fit])
        diversity_penalty = np.abs(bins_remain_cap[can_fit] - avg_fill) / np.max(bins_remain_cap)
        priorities[can_fit] -= 0.05 * diversity_penalty


    return priorities
```
