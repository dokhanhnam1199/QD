{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Prioritize near-perfect fits, strongly penalize unfit bins, and add a tie-breaking bonus for emptier bins.\n\n    can_fit = bins_remain_cap >= item\n    priorities[~can_fit] = -1e9  # Cannot fit, very low priority (effectively -inf but avoids inf issues)\n\n    # Prioritize bins that have capacity close to item size.  Use a Gaussian-like distribution centered around 0 for the difference.\n    diff = bins_remain_cap - item\n    if np.any(can_fit):  # Avoid potential errors if no bins can fit.\n        std_dev = item / 10  # Adjust for desired spread; smaller std_dev means stricter \"near-perfect\"\n        priorities[can_fit] = np.exp(-(diff[can_fit]**2) / (2 * std_dev**2))\n\n\n        # Add a tie-breaking bonus for emptier bins.  Normalize by the maximum remaining capacity to ensure scale invariance.\n        if np.max(bins_remain_cap) > 0: # Avoid division by zero\n             priorities[can_fit] += 0.01 * (bins_remain_cap[can_fit] / np.max(bins_remain_cap))\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n\n    # Hard constraint: Cannot fit\n    priorities[~can_fit] = -np.inf\n\n    # Gaussian fit for bins that can fit\n    if np.any(can_fit):\n        diff = bins_remain_cap - item\n        std_dev = item / 3  # Adjust standard deviation as needed\n        priorities[can_fit] = np.exp(-(diff[can_fit]**2) / (2 * std_dev**2))\n\n        # Tie-breaker: Favor bins with more remaining capacity (after accounting for item)\n        # Avoid division by zero if all remaining capacities are zero.\n        max_remaining = np.max(bins_remain_cap[can_fit]) if np.any(can_fit) else 0\n\n        if max_remaining > 0:\n            priorities[can_fit] += 0.1 * (bins_remain_cap[can_fit] - item) / max_remaining\n        else:\n            priorities[can_fit] += 0.01  # Small bonus if all bins are empty\n\n    return priorities\n\n[Reflection]\nHard constraints, appropriate scaling, and a stronger tie-breaker significantly improve performance.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}