```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # First-Fit-Decreasing heuristic inspired component: Prioritize bins with tighter fit.
            # Avoid small waste, if possible.
            waste = cap - item
            priorities[i] = 1 / (waste + 1e-9)  # Avoid division by zero

            # Give higher priority to almost full bins:
            if waste <= 0.1: #Prefer almost full bins more
                priorities[i] += 10 #This is a boost, can change

            # Bonus: If remaining capacity is close to a typical item size, prefer it.
            # This helps in potentially closing bins faster.  Let's say average item size = 0.3. This can be adjusted if we have more information on distribution
            if 0.2 <= cap <= 0.4 :
                priorities[i] +=2 # This is a boost to select bins closest to the avg size

        else:
            priorities[i] = -1e9 # Very low priority if the bin cannot fit the item

    return priorities
```
