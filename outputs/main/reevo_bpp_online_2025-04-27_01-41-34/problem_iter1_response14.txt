```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Assign a high priority if the item fits and the bin is relatively empty
    fit_indices = np.where(bins_remain_cap >= item)[0]
    
    if len(fit_indices) > 0:
        # Prioritize bins where the remaining capacity is close to the item size
        priorities[fit_indices] = (bins_remain_cap[fit_indices] - item) / bins_remain_cap[fit_indices]
        priorities[fit_indices] = 1 - priorities[fit_indices] # Invert to prioritize closer fits
        
        # Boost priority for bins with lower fill ratio (attempt to keep bins somewhat balanced)
        priorities[fit_indices] += (1 / (bins_remain_cap[fit_indices] + 1e-9)) 
    
    # Assign very low (negative) priority if the item does not fit
    else:
        priorities = np.full_like(bins_remain_cap, -1e9)  # Very negative priority if it doesn't fit
    
    return priorities
```
