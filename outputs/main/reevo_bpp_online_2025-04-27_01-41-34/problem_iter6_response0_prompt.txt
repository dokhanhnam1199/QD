{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    can_fit = bins_remain_cap >= item\n    priorities[~can_fit] = -np.inf\n\n    if np.any(can_fit):\n        diff = bins_remain_cap - item\n        std_dev = item / 3\n        priorities[can_fit] = np.exp(-(diff[can_fit]**2) / (2 * std_dev**2))\n\n        # Tie-breaking bonus for emptier bins, scaling with item size\n        max_cap = np.max(bins_remain_cap)\n        if max_cap > 0:  # Avoid division by zero\n            priorities[can_fit] += 0.1 * (bins_remain_cap[can_fit] / max_cap) * item\n        else:\n            priorities[can_fit] += 0 # if max_cap is zero just don't add anything\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n\n    # 1. Hard constraint: Cannot fit\n    priorities[~can_fit] = -1e9\n\n    # 2. Perfect fit bonus\n    perfect_fit = np.abs(bins_remain_cap - item) < 1e-6  # Tolerate floating-point errors\n    priorities[perfect_fit] += 1e6\n\n    # 3. Near-perfect fit bonus (Gaussian distribution)\n    diff = bins_remain_cap - item\n    std_dev = item / 5  # Stricter near-perfect definition\n    gaussian_fit = np.exp(-(diff[can_fit]**2) / (2 * std_dev**2)) if np.any(can_fit) else np.array([])  #Handle empty slice\n    priorities[can_fit] += 1e3 * gaussian_fit\n\n    # 4. Barely fits penalty\n    barely_fits = can_fit & (bins_remain_cap < item + item / 10)\n    priorities[barely_fits] -= 1e4\n\n    # 5. Tie-breaker: Emptier bins (but only if it can fit and not perfect fit)\n    can_fit_not_perfect = can_fit & (~perfect_fit)\n    if np.any(can_fit_not_perfect):  # avoid runtime warning\n        priorities[can_fit_not_perfect] += 0.1 * bins_remain_cap[can_fit_not_perfect] / np.max(bins_remain_cap)\n\n\n    return priorities\n\n[Reflection]\nPrioritize perfect/near-perfect fits, penalize barely-fits, and use large constant multipliers to enforce constraints.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}