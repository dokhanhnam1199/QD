```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility check: Only consider bins that can fit the item
    feasible_bins = bins_remain_cap >= item
    priorities[~feasible_bins] = -np.inf  # Very low priority for infeasible bins

    # 2. Remaining capacity after packing: Higher priority to bins that leave less space. (First-Fit Decreasing style)
    remaining_after_packing = bins_remain_cap - item
    priorities[feasible_bins] = -np.abs(remaining_after_packing[feasible_bins])

    # 3. Bonus for almost full bins: Incentivize filling bins completely
    almost_full = (remaining_after_packing >= 0) & (remaining_after_packing <= 0.1)  # Tune threshold
    priorities[almost_full] += 1  # Add bonus for almost full bins

    # 4. Consider relative fullness
    relative_fullness = (bins_remain_cap - remaining_after_packing)/bins_remain_cap
    priorities[feasible_bins] += relative_fullness[feasible_bins] #Higher ratio of already filled space

    return priorities
```
