```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    remaining_space = bins_remain_cap - item
    
    fit_indices = remaining_space >= 0
    
    if np.any(fit_indices):
        priorities[fit_indices] = bins_remain_cap[fit_indices] / (item + 0.000001) #prioritize bins with smallest waste (largest item/bin size ratio)
        priorities[fit_indices] = 1 / (remaining_space[fit_indices] + 0.000001)
    else:
         priorities[:] = -np.inf
    
    return priorities
```
