```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Reward bins that can fit the item
            priorities[i] = (cap - item) / np.sum(bins_remain_cap) # Prioritize bins with smallest remaining space after item is added (best fit idea)
            priorities[i] += 1e-6 # Add small number to avoid zero
            priorities[i] += np.exp(-10 * (item / cap -0.8 )) # Bias towards adding to the bins if item takes up close to the optimal space i.e. 80%.
        else:
            # Give low priority to bins that cannot fit
            priorities[i] = -1e9
    return priorities
```
