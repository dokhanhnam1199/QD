{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Heavily penalize infeasibility\n    can_fit = bins_remain_cap >= item\n    priorities[~can_fit] = -1e9  # Significantly lower priority for bins that cannot fit\n\n    # Gaussian reward for near-perfect fits\n    diff = bins_remain_cap - item\n    std_dev = item / 5  # Smaller std_dev for tighter fits\n    priorities[can_fit] = np.exp(-(diff[can_fit]**2) / (2 * std_dev**2))\n\n    # Normalize tie-breaking with emptiness\n    if np.max(bins_remain_cap) > 0: # Avoid division by zero\n        priorities[can_fit] += 0.1 * (bins_remain_cap[can_fit] / np.max(bins_remain_cap))\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Rule 1: Feasibility - Infeasible bins get a very negative priority.\n    can_fit = bins_remain_cap >= item\n    priorities[~can_fit] = -1e9\n\n    # Rule 2: Exact Fit - Heavily reward exact fits.\n    space_left = bins_remain_cap - item\n    exact_fit = np.abs(space_left) < 1e-6\n    priorities[exact_fit] += 1000.0\n\n    # Rule 3: Tight Fit - Significantly reward tight fits.\n    tight_fit = (can_fit) & (space_left <= 0.1) & (~exact_fit)\n    priorities[tight_fit] += 500.0\n\n    # Rule 4: Barely Fits - Penalize barely fitting items to reduce fragmentation.\n    barely_fits = (can_fit) & (space_left > 0.1) & (space_left <= 0.3)\n    priorities[barely_fits] -= 200.0\n\n    # Rule 5: Best Fit - Prioritize bins where the item fits best (smallest waste), but not a tight or barely fit. Use exponential scaling.\n    best_fit = (can_fit) & (~tight_fit) & (~barely_fits) & (~exact_fit)\n    if np.any(best_fit):\n        waste = bins_remain_cap - item\n        max_cap = np.max(bins_remain_cap[best_fit])\n        priorities[best_fit] += 100 * np.exp(-5 * waste[best_fit] / max_cap)\n\n    # Rule 6: If no \"good\" fit, slightly prefer bins with more remaining capacity to distribute waste more evenly and potentially enable future fits.\n    otherwise = can_fit & ~exact_fit & ~tight_fit & ~barely_fits & ~best_fit\n    if np.any(otherwise):\n        priorities[otherwise] += 0.1 * bins_remain_cap[otherwise]\n\n\n    return priorities\n\n[Reflection]\nPrioritize exact/tight fits, penalize barely fits, and exponentially scale best-fit rewards for improved bin packing.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}