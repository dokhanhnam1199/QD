```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # First-Fit Decreasing inspired priority: prefer bins where the item almost perfectly fills it
    # and heavily penalize bins that can't fit the item.

    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -np.inf  # Cannot fit, lowest priority

    # Prioritize bins that have capacity close to item size
    diff = bins_remain_cap - item
    priorities[can_fit] = np.exp(-np.abs(diff[can_fit]) / item)

    # Additionally, give a small bonus to bins that are relatively empty (First-Fit)
    priorities[can_fit] += 0.1 * (1 - bins_remain_cap[can_fit] / np.max(bins_remain_cap))
    return priorities
```
