```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item

    # Hard constraint: Cannot fit
    priorities[~can_fit] = -np.inf

    # Gaussian fit for bins that can fit
    if np.any(can_fit):
        diff = bins_remain_cap - item
        std_dev = item / 5.0  # Even sharper Gaussian
        priorities[can_fit] = np.exp(-(diff[can_fit]**2) / (2 * std_dev**2))

        # Tie-breaker: Favor bins with more remaining capacity after adding the item.
        # Normalize the remaining capacity to provide a more balanced bonus.
        remaining_after_fit = bins_remain_cap[can_fit] - item
        max_remaining_after_fit = np.max(remaining_after_fit) if np.any(can_fit) and np.any(remaining_after_fit >= 0) else 0

        if max_remaining_after_fit > 0:
            priorities[can_fit] += 0.1 * remaining_after_fit / max_remaining_after_fit
        elif np.all(remaining_after_fit < 0):
            pass # if all bins are full after adding the item
        else:
            priorities[can_fit] += 0.01  # Small bonus if all bins are empty before adding the item

    return priorities
```
