```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Give a higher priority to bins where the item fits
            priority = 1.0
            # Further refine the priority based on how much space is left after packing
            remaining_space = cap - item
            # Encourage filling bins that are already somewhat full
            priority += (1 - remaining_space / cap)  # Favor bins with smaller remaining space relative to the initial capacity.
            
            # Bonus for almost-full bins without overfilling
            if remaining_space <= 0.1: #parameter to tune, prefer complete filling.
                priority += 2

            priorities[i] = priority
        else:
            priorities[i] = -1.0 # Make sure bins that the item doesn't fit into have very low priority

    return priorities
```
