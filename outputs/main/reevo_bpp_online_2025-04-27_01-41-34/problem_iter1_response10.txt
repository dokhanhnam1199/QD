```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Primary criteria: Can the item fit?
            remaining_space = cap - item
            
            # Prioritize bins with smaller remaining space (First-Fit Decreasing heuristic inspired)
            # but penalize near-full bins to avoid creating many almost-full bins
            if remaining_space > 0:
                priorities[i] = 1.0 / (remaining_space + 0.0001) # Avoid division by zero
            else:
                 priorities[i] = 1000 #perfect fit gets very high priority

            #Bonus for bins that are not too full already (Encourage more even distribution)
            priorities[i] += (cap / np.sum(bins_remain_cap + 0.0001) )

        else:
            priorities[i] = -1e9  # Very low priority if item doesn't fit
    return priorities
```
