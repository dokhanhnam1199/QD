```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Only consider bins where the item fits.
    feasible_bins = bins_remain_cap >= item

    # If no bins are feasible, return an array of -inf. Prevents item assignment and forces opening new bin.
    if not np.any(feasible_bins):
      return np.full_like(bins_remain_cap, -np.inf)

    # 2. Remaining Capacity Heuristic: Prefer bins with smallest remaining capacity AFTER placing the item to encourage full bins.
    remaining_after_fit = bins_remain_cap[feasible_bins] - item
    priorities[feasible_bins] = -remaining_after_fit # Smaller remaining capacity, higher priority
    
    # 3. Filling Ratio: Reward bins that fill up close to the target fill percentage (e.g., 90%).  This avoids fragmentation
    target_fill = 0.9 # Play with this constant
    potential_fill_ratio = (bins_remain_cap[feasible_bins] - item) / bins_remain_cap[feasible_bins] 
    ideal_fill_diff = np.abs(potential_fill_ratio - target_fill) # Closer to target is better
    
    priorities[feasible_bins] += -1 * ideal_fill_diff # Smaller the fill diff, higher the prioirity
    
    # A small bonus for almost full bins to avoid unnecessary new bins if there is a bin that fit the item nicely
    almost_full = (bins_remain_cap[feasible_bins] - item) < 0.1
    priorities[feasible_bins][almost_full] += 0.5 # add a small priority bonus
    

    return priorities
```
