```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heavily penalize infeasibility
    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -1e9  # Significantly lower priority for bins that cannot fit

    # Gaussian reward for near-perfect fits
    diff = bins_remain_cap - item
    std_dev = item / 5  # Smaller std_dev for tighter fits
    priorities[can_fit] = np.exp(-(diff[can_fit]**2) / (2 * std_dev**2))

    # Normalize tie-breaking with emptiness
    if np.max(bins_remain_cap) > 0: # Avoid division by zero
        priorities[can_fit] += 0.1 * (bins_remain_cap[can_fit] / np.max(bins_remain_cap))

    return priorities
```
