```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -np.inf  # Cannot fit, extremely low priority

    diff = bins_remain_cap - item
    near_fit_threshold = item * 0.1  #tuneable parameter - how close is "near"

    near_perfect_fit = can_fit & (diff <= near_fit_threshold)
    good_fit = can_fit & ~near_perfect_fit

    #Near perfect fit gets very high priority
    priorities[near_perfect_fit] = 1e6

    #Good fit gets a medium priority based on how close to the item size it is
    priorities[good_fit] = 1000 * (1 - (diff[good_fit] / bins_remain_cap[good_fit]))

    #Tie breaker: prioritize emptier bins amongst the good fits.
    priorities[can_fit] += 0.1 * bins_remain_cap[can_fit]

    return priorities
```
