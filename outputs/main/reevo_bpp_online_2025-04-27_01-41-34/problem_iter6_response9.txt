```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -np.inf

    if np.any(can_fit):
        diff = bins_remain_cap[can_fit] - item
        std_dev = item / 3
        priorities[can_fit] = np.exp(-(diff**2) / (2 * std_dev**2))

        # Fill ratio bonus
        fill_ratio = item / bins_remain_cap[can_fit]
        priorities[can_fit] += 0.3 * fill_ratio

        # Random Exploration
        priorities[can_fit] += np.random.rand(np.sum(can_fit)) * 0.05

        # Bin Diversity: Penalize bins with very low remaining capacity
        low_capacity = bins_remain_cap[can_fit] < (item * 0.6)
        priorities[can_fit][low_capacity] *= 0.7

    return priorities
```
