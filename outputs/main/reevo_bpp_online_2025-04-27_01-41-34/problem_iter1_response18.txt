```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Calculate wasted space if item is placed in each bin
    wasted_space = bins_remain_cap - item

    # Give high priority to bins where the item fits and the wasted space is minimized
    fit_mask = wasted_space >= 0
    if np.any(fit_mask):
        priorities[fit_mask] = 1 / (wasted_space[fit_mask] + 0.0001)  # Avoid division by zero
        # Give slightly higher priority to bins that are closer to being full *after* packing the current item
        priorities[fit_mask] += (1 - wasted_space[fit_mask] / bins_remain_cap[fit_mask]) * 0.5
    else:
        # If the item doesn't fit in any bin, prioritize the bin with the most remaining capacity (least overflow)
        priorities = -abs(wasted_space)
        priorities = priorities / np.max(abs(wasted_space))

    return priorities
```
