{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Absolute prioritization of feasibility: Infeasible bins get -inf priority\n    can_fit = bins_remain_cap >= item\n    priorities[~can_fit] = -np.inf\n\n    # Gaussian reward for near-perfect fits, with a sharper peak\n    diff = bins_remain_cap - item\n    if np.any(can_fit):\n        std_dev = item / 5.0  # Even sharper peak for near-perfect fits\n        priorities[can_fit] = np.exp(-(diff[can_fit]**2) / (2 * std_dev**2))\n\n        # Tie-breaking bonus for emptiness, normalized\n        max_cap = np.max(bins_remain_cap)\n        if max_cap > 0:\n            priorities[can_fit] += 0.1 * (bins_remain_cap[can_fit] / max_cap)\n        else:\n            priorities[can_fit] += 0.0  # All bins are full\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Prioritize near-perfect fits, strongly penalize unfit bins, and add a tie-breaking bonus for emptier bins.\n\n    can_fit = bins_remain_cap >= item\n    priorities[~can_fit] = -np.inf  # Cannot fit, lowest priority\n\n    # Prioritize bins that have capacity close to item size.  Use a Gaussian-like distribution centered around 0 for the difference.\n    diff = bins_remain_cap - item\n    if np.any(can_fit):  # Avoid potential errors if no bins can fit.\n        std_dev = item / 4  # Adjust for desired spread; smaller std_dev means stricter \"near-perfect\"\n        priorities[can_fit] = np.exp(-(diff[can_fit]**2) / (2 * std_dev**2))\n\n\n        # Add a tie-breaking bonus for emptier bins, but only if it's a good fit. Prioritize filling emptier \"near perfect fit\" bins\n        near_perfect = priorities[can_fit] > 0.1  # Adjust threshold for what constitutes \"near perfect\"\n        if np.any(near_perfect):\n            priorities[can_fit][near_perfect] += 0.1 * (bins_remain_cap[can_fit][near_perfect] / np.max(bins_remain_cap))\n\n    # Introduce a small bonus for bins that are nearly full after placing the item\n    nearly_full = can_fit & (bins_remain_cap - item < item/10)\n    priorities[nearly_full] += 0.1 # Add a small priority boost, increased from 0.05\n\n    return priorities\n\n[Reflection]\nSharper near-fit Gaussians, emptiness bonus for near-fits, and a nearly-full bonus improve online bin packing.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}