```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Absolute prioritization of feasibility: Infeasible bins get -inf priority
    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -np.inf

    # Gaussian reward for near-perfect fits, with a sharper peak
    diff = bins_remain_cap - item
    if np.any(can_fit):
        std_dev = item / 5.0  # Even sharper peak for near-perfect fits
        priorities[can_fit] = np.exp(-(diff[can_fit]**2) / (2 * std_dev**2))

        # Tie-breaking bonus for emptiness, normalized
        max_cap = np.max(bins_remain_cap)
        if max_cap > 0:
            priorities[can_fit] += 0.1 * (bins_remain_cap[can_fit] / max_cap)
        else:
            priorities[can_fit] += 0.0  # All bins are full

    return priorities
```
