```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Heavily penalize bins that can't fit the item.
    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -np.inf

    # Prioritize bins that have capacity close to item size using exponential similarity
    diff = bins_remain_cap - item
    if np.any(can_fit):  # only calculate if at least one bin can fit the item
        priorities[can_fit] = np.exp(-np.abs(diff[can_fit]) / item)

        # Give a bonus to bins that are relatively empty (First-Fit)
        priorities[can_fit] += 0.1 * (1 - bins_remain_cap[can_fit] / np.max(bins_remain_cap))

        #Adjust priority based on how full the bin will be *after* placing the item
        post_fill_levels = 1- (bins_remain_cap[can_fit]-item)/np.max(bins_remain_cap)
        priorities[can_fit] += 0.05 * post_fill_levels #slight preference to fuller bins

    return priorities
```
