{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    for i, cap in enumerate(bins_remain_cap):\n        if cap >= item:\n            waste = cap - item\n            priorities[i] = (cap - item) / cap # Higher priority for bins that result in less waste relatively\n        else:\n            priorities[i] = -1 # Negative priority if item doesn't fit.\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Very large items can be packed in only a few bins. Let us give high priority to those.\n    # Small items should not crowd bins that may accept larger items in future\n\n    # First Feasible (FF) score: Assign higher priority to bins that can accommodate the item.\n    feasible_bins = bins_remain_cap >= item\n    priorities[feasible_bins] += 1\n\n    # Remaining Capacity (RC) score: Prioritize bins with less remaining capacity if item fits\n    # Goal: Reduce fragmentation\n    remaining_capacity_score = np.where(feasible_bins, 1 - (bins_remain_cap - item) / np.max(bins_remain_cap), 0)\n    priorities += remaining_capacity_score\n\n    # Best Fit (BF) score: Prioritize bins where item fits best\n    best_fit_score = np.where(feasible_bins, 1 / (bins_remain_cap - item + 1e-6), 0) # avoid division by zero\n    priorities += best_fit_score\n\n    # Worst Fit (WF) penalty: Discourage filling nearly-empty bins with small items\n    worst_fit_penalty = np.where(~feasible_bins, -bins_remain_cap/np.max(bins_remain_cap),0) # negative values for bins with insuficient cap.\n    priorities += worst_fit_penalty\n\n    # Introduce some randomness to avoid local optima\n    randomness = np.random.rand(len(bins_remain_cap)) * 0.01\n    priorities += randomness\n\n    return priorities\n\n[Reflection]\nThe better code combines multiple bin-packing strategies (FF, RC, BF, WF) and adds randomness for improved exploration.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}