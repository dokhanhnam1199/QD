```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    bin_capacity = 1.0 #Assuming bins have unit capacity, could be parameterized

    # First-Fit Decreasing inspired priority: prioritize bins where the item fits best,
    # but penalize bins that are almost full after placing the item (fragmentation).

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate remaining capacity after placing item.
            remaining_capacity = cap - item

            # Prioritize bins that provide a good fit. We want remaining capacity to be neither too large (wasted space) nor too small (high fragmentation).

            # Prioritize bins that provide a 'moderate' remaining capacity. Let's target around 20-50% of bin size
            desired_remaining = 0.3 * bin_capacity
            priority = np.exp(-((remaining_capacity - desired_remaining) ** 2) / (2 * (0.1 * bin_capacity) ** 2))

            # Penalize bins where the item is a really tight fit (might lead to fragmentation later)
            tight_fit_threshold = 0.1 * bin_capacity
            if remaining_capacity < tight_fit_threshold:
                priority *= 0.5  # Reduce priority if it's a tight fit

            #Potentially further penalize very small remaining capacities more drastically
            very_tight_fit_threshold = 0.05 * bin_capacity
            if remaining_capacity < very_tight_fit_threshold:
                priority *= 0.2

            priorities[i] = priority
        else:
            priorities[i] = -np.inf  # Item doesn't fit. Exclude bin completely by assigning low priority
    return priorities
```
