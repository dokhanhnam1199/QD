```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give high priority to bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] += 1.0

    # Prioritize bins with smaller remaining capacity (First Fit Decreasing style) to reduce fragmentation
    priorities[can_fit] += 1.0 / (bins_remain_cap[can_fit] + 1e-6)

    # Give a large boost to bins where the item fills it up close to capacity (best fit heuristic).
    almost_full = np.abs(bins_remain_cap - item) < 0.1  # Adjust threshold as needed.
    priorities[almost_full] += 5.0

    # Penalize bins where the item barely fits (increase fragmentation risk)
    barely_fits = (bins_remain_cap >= item) & (bins_remain_cap < (item + 0.2)) # adjust 0.2 if necessary
    priorities[barely_fits] -= 0.5 # Subtract priority
    
    # Give bins with exactly enough cap a very high priority
    exact_fit = np.abs(bins_remain_cap - item) < 1e-6
    priorities[exact_fit] += 10.0
    
    return priorities
```
