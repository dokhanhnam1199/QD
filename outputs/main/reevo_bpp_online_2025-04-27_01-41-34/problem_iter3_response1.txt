```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -np.inf

    if np.any(can_fit):
        diff = bins_remain_cap[can_fit] - item
        std_dev = item / 3
        gaussian_fit = np.exp(-(diff**2) / (2 * std_dev**2))
        priorities[can_fit] = gaussian_fit

        # Penalize very tight fits (remaining capacity close to 0)
        tight_fit_penalty = np.exp(-(bins_remain_cap[can_fit] / item)**2 * 5)  #Higher number, stronger penalty
        priorities[can_fit] -= tight_fit_penalty

        #Bonus for fuller bins after adding item. Goal is to maximize bin utilization.
        utilization = (item) / (bins_remain_cap[can_fit] + item) # What will be utilization IF packed into this bin.

        priorities[can_fit] += 0.2 * utilization #Add utilization of future bin to priority.


        # Small amount of randomness to encourage exploration
        priorities[can_fit] += np.random.rand(np.sum(can_fit)) * 0.05

    return priorities
```
