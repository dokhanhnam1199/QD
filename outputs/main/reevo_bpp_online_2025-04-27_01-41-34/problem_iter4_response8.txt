```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    bin_size = 1.0  # Assuming bin size is 1

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Calculate remaining capacity after placing item.
            remaining_capacity = cap - item

            # Prioritize bins that provide a 'moderate' remaining capacity.
            desired_remaining = 0.3 * bin_size  # Target around 30% of bin size.
            priority = np.exp(-((remaining_capacity - desired_remaining) ** 2) / (2 * (0.15 * bin_size) ** 2)) # std of 0.15 * bin_size

            # Penalize bins where the item is a really tight fit (might lead to fragmentation later)
            if remaining_capacity < 0.1 * bin_size:
                priority *= 0.5  # Reduce priority by half

            # Reward bins that are nearly full after placing the item to consolidate space
            if remaining_capacity > 0.7 * bin_size:
                priority *= 0.7

            priorities[i] = priority
        else:
            priorities[i] = -np.inf  # Item doesn't fit. Exclude bin completely.

    return priorities
```
