```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Assign a high priority to bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] = 1.0

    # Adjust priority based on remaining capacity
    remaining_space = bins_remain_cap - item
    remaining_space[remaining_space < 0] = 0  # Avoid negative values
    
    # Higher priority for bins where the item fits with minimal waste (better packing)
    priorities[can_fit] += (bins_remain_cap[can_fit] - item) / np.max(bins_remain_cap) # scale to range 0-1 and add to prior existing values (0 or 1)

    # If no bin can fit, give priority to bins closest to fitting
    if not np.any(can_fit):
      diff = item - bins_remain_cap
      min_diff = np.min(diff)
      priorities = -diff  # Give negative priority to those that don't fit and lower negative score if its closer to the right capacity.
    
    return priorities
```
