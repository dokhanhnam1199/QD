```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Give high priority to bins where the item fits snugly (minimize wasted space)
    fit_mask = bins_remain_cap >= item
    slack = bins_remain_cap - item
    
    #Bins where the item doesn't fit should get a very low priority.
    priorities[~fit_mask] = -np.inf 

    # Calculate a priority based on how "full" the bin will be
    # Use a function that prefers nearly full bins, but not too full.

    priorities[fit_mask] = (item / bins_remain_cap[fit_mask]) #fill ratio


    # Slightly penalize almost full bins to avoid extremely fragmented leftover bins (optional)
    almost_full_mask = (slack[fit_mask] < 0.1 * np.max(bins_remain_cap)) & (slack[fit_mask] > 0)
    priorities[fit_mask][almost_full_mask] -= 0.05  # Slightly reduce priority if almost full
        
    return priorities
```
