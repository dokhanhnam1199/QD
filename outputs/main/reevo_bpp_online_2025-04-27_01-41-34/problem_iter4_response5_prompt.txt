{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n[Worse code]\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    can_fit = bins_remain_cap >= item\n    priorities[~can_fit] = -np.inf\n\n    if np.any(can_fit):\n        diff = bins_remain_cap[can_fit] - item\n        std_dev = item / 3\n        gaussian_fit = np.exp(-(diff**2) / (2 * std_dev**2))\n        priorities[can_fit] = gaussian_fit\n\n        # Penalize very tight fits (remaining capacity close to 0)\n        tight_fit_penalty = np.exp(-(bins_remain_cap[can_fit] / item)**2 * 5)  #Higher number, stronger penalty\n        priorities[can_fit] -= tight_fit_penalty\n\n        #Bonus for fuller bins after adding item. Goal is to maximize bin utilization.\n        utilization = (item) / (bins_remain_cap[can_fit] + item) # What will be utilization IF packed into this bin.\n\n        priorities[can_fit] += 0.2 * utilization #Add utilization of future bin to priority.\n\n\n        # Small amount of randomness to encourage exploration\n        priorities[can_fit] += np.random.rand(np.sum(can_fit)) * 0.05\n\n    return priorities\n\n[Better code]\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n\n    # Rule 1: Feasibility check.  Bins that can't fit get a very low priority.\n    can_fit = bins_remain_cap >= item\n    priorities[~can_fit] = -1e9\n\n    # Rule 2: Reward tight fits significantly.\n    space_left = bins_remain_cap - item\n    tight_fit = (can_fit) & (space_left <= 0.1)\n    priorities[tight_fit] += 10.0\n\n    # Rule 3: Penalize bins where the item barely fits to avoid fragmentation\n    barely_fits = (can_fit) & (space_left > 0.1) & (space_left <= 0.3)\n    priorities[barely_fits] -= 2.0\n\n    # Rule 4: Prioritize bins that can fit, using remaining capacity as a proxy for fullness.\n    # Invert remaining capacity to give higher scores to fuller bins.  Add a small constant\n    # to avoid division by zero. Only consider if the item fits, and is not already prioritized.\n    intermediate_fit = can_fit & (~tight_fit) & (~barely_fits)\n    priorities[intermediate_fit] += 1.0 / (bins_remain_cap[intermediate_fit] + 0.001)\n    \n    # Rule 5: Give bins with exactly enough capacity the highest priority\n    exact_fit = np.abs(space_left) < 1e-6\n    priorities[exact_fit] += 20.0\n\n    return priorities\n\n[Reflection]\nFocus on hard constraints first. Use discrete rules with high rewards/penalties for clear objectives.\n\n\n[Improved code]\nPlease write an improved function `priority_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}