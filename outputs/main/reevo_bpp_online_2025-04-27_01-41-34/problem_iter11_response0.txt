```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -np.inf  # Cannot fit, lowest priority

    # Gaussian for near-perfect fits
    diff = bins_remain_cap - item
    std_dev = item / 5  # Sharper Gaussian
    priorities[can_fit] += np.exp(-(diff[can_fit]**2) / (2 * std_dev**2))

    # Normalized fill ratio bonus
    fill_ratio = (bins_remain_cap - item) / bins_remain_cap
    fill_ratio[~can_fit] = 0  # Ensure fill_ratio is 0 when item doesn't fit
    priorities[can_fit] += 0.2 * (1 - fill_ratio[can_fit])

    # Emptiness reward (considering item size)
    priorities[can_fit] += 0.05 * (bins_remain_cap[can_fit] / np.max(bins_remain_cap)) * item


    # Almost-full bin reward
    almost_full = (bins_remain_cap < 1.1 * item) & can_fit #Bins that by adding this item are becoming almost full (within a margin of 10%)
    priorities[almost_full] += 0.3

    return priorities
```
