```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -1e9  # Very strong penalty for infeasibility

    diff = bins_remain_cap - item
    if np.any(can_fit):
        std_dev = item / 4  # Smaller std_dev for sharper Gaussian
        priorities[can_fit] = np.exp(-(diff[can_fit]**2) / (2 * std_dev**2))

        # Normalized bonus based on emptiness (1 - ratio of used capacity)
        capacity_ratio = (bins_remain_cap[can_fit] - item) / bins_remain_cap[can_fit]
        capacity_ratio = np.clip(capacity_ratio, 0, 1) # Ensure the ratio is within [0, 1]
        priorities[can_fit] += 0.1 * (1 - capacity_ratio) # Emptier gets preference
    return priorities
```
