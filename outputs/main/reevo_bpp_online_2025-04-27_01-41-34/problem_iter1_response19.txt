```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Assign high priority to bins that can fit the item snugly
    fit_mask = bins_remain_cap >= item
    
    if np.any(fit_mask):
      residual_capacities = bins_remain_cap[fit_mask] - item
      
      # Prefer bins with smaller residual capacity, but penalize nearly full bins.
      priorities[fit_mask] = 1.0 / (residual_capacities + 0.001)  # Avoid division by zero

      # Further boost bins with a "good" fit (e.g., using between 80% and 100% of capacity)
      capacity_used_ratios = item / bins_remain_cap[fit_mask]
      good_fit_mask = (capacity_used_ratios >= 0.8) & (capacity_used_ratios <= 1.0) # Prefer utilizing bins more fully (e.g. > 80% after placing the item)
      priorities[fit_mask][good_fit_mask] *= 2.0  # Increase priority if good fit

    # For bins that can't fit, assign a negative priority (discourage)
    priorities[~fit_mask] = -1.0 

    return priorities
```
