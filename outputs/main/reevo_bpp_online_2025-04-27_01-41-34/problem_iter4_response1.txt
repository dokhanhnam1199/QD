```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:

    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -np.inf

    if np.any(can_fit):
        diff = bins_remain_cap[can_fit] - item
        std_dev = item / 2  # Standard deviation, adjusted for item size, increased sensitivity
        priorities[can_fit] = np.exp(-(diff**2) / (2 * std_dev**2))

        # Bonus for fullness: Prioritize bins that will be more full after packing
        fill_ratio = item / bins_remain_cap[can_fit]
        priorities[can_fit] += 0.3 * fill_ratio  # Increased weight

        # Random Exploration - reduced amount of randomness
        priorities[can_fit] += np.random.rand(np.sum(can_fit)) * 0.01

        #Penalize large remaining capacity, prioritize bins closer to being full.
        priorities[can_fit] -= 0.02 * diff

    return priorities
```
