```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Rule 1: Feasibility - Infeasible bins get a very negative priority.
    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -1e9

    # Rule 2: Exact Fit - Heavily reward exact fits.
    space_left = bins_remain_cap - item
    exact_fit = np.abs(space_left) < 1e-6
    priorities[exact_fit] += 1000.0

    # Rule 3: Tight Fit - Significantly reward tight fits.  Adjusted threshold
    tight_fit = (can_fit) & (space_left <= 0.05) & (~exact_fit)
    priorities[tight_fit] += 500.0

    # Rule 4: Barely Fits - Penalize barely fitting items to reduce fragmentation. Adjusted thresholds and penalty
    barely_fits = (can_fit) & (space_left > 0.05) & (space_left <= 0.2)
    priorities[barely_fits] -= 300.0

    # Rule 5: Best Fit - Prioritize bins where the item fits best (smallest waste), but not a tight or barely fit. Use exponential scaling. Enhanced scaling factor.
    best_fit = (can_fit) & (~tight_fit) & (~barely_fits) & (~exact_fit)
    if np.any(best_fit):
        waste = bins_remain_cap - item
        max_cap = np.max(bins_remain_cap[best_fit])
        priorities[best_fit] += 150 * np.exp(-8 * waste[best_fit] / max_cap)

    # Rule 6: Prefer almost full bins when no perfect/tight fit is available to consolidate
    almost_full = (can_fit) & (~exact_fit) & (~tight_fit) & (~barely_fits) & (~best_fit) & (bins_remain_cap <= 0.9) #Adjusted to < 0.9 for better distribution.
    if np.any(almost_full):
        priorities[almost_full] += 50 * (1 - bins_remain_cap[almost_full]) #Favor bins that are closer to being full.


    return priorities
```
