```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Feasibility is paramount; strongly penalize bins that cannot fit the item.
    can_fit = bins_remain_cap >= item
    priorities[~can_fit] = -1e9  # Huge negative penalty for infeasibility

    # Sharpened Gaussian reward for bins with near-perfect fits.  Normalize diff by item size.
    diff = bins_remain_cap - item
    if np.any(can_fit):
        std_dev = item / 5  # Even narrower Gaussian width
        normalized_diff = diff[can_fit] / item
        priorities[can_fit] = np.exp(-(normalized_diff**2) / (2 * (std_dev/item)**2)) # Gaussian centered at 0.

        # Normalized bonus scaling: emptier bins get a smaller bonus to encourage filling fuller bins first when near-perfect fits exist.
        # Using (1 - ratio) where ratio is fill ratio: item / (bin_capacity - remaining_capacity).  Want to *discourage* putting item into empty bin.
        fill_ratio = item / (np.max(bins_remain_cap) - bins_remain_cap[can_fit] + item)  # Normalized fill ratio, avoids div-by-zero if all bins are empty.
        priorities[can_fit] += 0.01 * (1 - fill_ratio)

    return priorities
```
