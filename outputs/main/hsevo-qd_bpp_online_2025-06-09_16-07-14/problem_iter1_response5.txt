```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Takes into account both the waste and the fullness of the bin after insertion.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    penalties = np.zeros_like(bins_remain_cap)
    safe_bins = bins_remain_cap >= item

    # Prioritize bins that can accommodate the item
    if np.any(safe_bins):
        # waste = bins_remain_cap[safe_bins] - item
        # priorities_safe = 1 / (waste + 0.0001) # avoid division by zero and prioritize less waste
        waste = bins_remain_cap[safe_bins] - item
        # prioritiy inversely proportional to squared waste. Bigger waste penalize faster.
        priorities_safe = 1.0 / (waste**2 + 0.0001)

        # Fillness ratio, 1 if full
        fillness = 1 - waste/bins_remain_cap[safe_bins]

        #Combine priority and fillness, prioritizing near full first
        penalties[safe_bins] = priorities_safe * fillness

    # For bins that cannot accommodate, penalize them heavily
    infeasible_bins = ~safe_bins

    if np.any(infeasible_bins):
        difference = item - bins_remain_cap[infeasible_bins]
        penalties[infeasible_bins] = -difference*100 # high penalty for infeasible bins
        #penalties[infeasible_bins] = -np.inf  # Completely avoid infeasible bins, this might create bin sprawl.

    return penalties
```
