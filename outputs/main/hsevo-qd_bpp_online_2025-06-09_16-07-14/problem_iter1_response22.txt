```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Uses a combination of remaining capacity, how well the item fits (size relative to remaining), and a small preference for bins that are neither too full nor too empty after packing.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    penalties = np.zeros_like(bins_remain_cap)

    # Impossible fits are highly penalized
    penalties[bins_remain_cap < item] = -np.inf

    # Fit ratio: how much of the remaining capacity is used
    fit_ratios = item / bins_remain_cap
    fit_ratios[bins_remain_cap < item] = 0  # avoid division by zero issues

    # Remaining capacity after packing
    remaining_after_pack = bins_remain_cap - item
    remaining_after_pack[bins_remain_cap < item] = -1 # Mark impossible cases

    # Ideal remaining capacity (a heuristic to prefer neither too full nor too empty bins, centered around half capacity after packing)
    ideal_remaining = 0.5 * np.ones_like(bins_remain_cap) #Assuming bin capacity = 1
    ideal_deviation = np.abs(remaining_after_pack - ideal_remaining)
    
    # Scale ideal_deviation such that we significantly penalize going outside the [0,1] bounds.
    ideal_deviation_penalty = np.clip(ideal_deviation * 5, 0, 1)
    
    priorities = (1 - fit_ratios) + (1- ideal_deviation_penalty)  + penalties
    return priorities
```
