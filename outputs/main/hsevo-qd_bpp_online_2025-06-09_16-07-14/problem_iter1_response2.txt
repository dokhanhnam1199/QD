```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Designed with principles similar to potential energy minimization in physics.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # Define constants to control the influence of different factors.  These are analogous to physical constants.
    gravitational_constant = 1.0  # Influences the 'attraction' to fuller bins (packing efficiency).
    spring_constant = 0.5  # Controls the penalty for nearly filling a bin.  Higher values encourage even distribution.
    damping_factor = 0.1 # Introduces a damping effect to prefer larger remaining capacities slightly

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, remaining_capacity in enumerate(bins_remain_cap):
        if item <= remaining_capacity:
            # Analogy: Lower potential energy is more favorable.

            # 1. "Gravitational Attraction":  Fuller bins (smaller remaining capacity) are more attractive.
            #    This term encourages packing items into bins that are already somewhat full.  More efficient space usage.
            fullness_factor = 1.0 - (remaining_capacity / np.max(bins_remain_cap)) if np.max(bins_remain_cap)>0 else 0 # avoid division by zero if all are empty bins
            gravitational_potential = -gravitational_constant * fullness_factor # Invert to be "attraction"

            # 2. "Spring Potential":  Penalizes nearly filling a bin, encouraging leaving some space.  Avoids very tight fits.
            #     This is like a spring resisting compression beyond a certain point.
            residual = remaining_capacity - item
            spring_potential = 0.0
            if residual < 0.1 * np.max(bins_remain_cap): #If item can be placed but almost fills the bin. np.max handles empty list case
                spring_potential = spring_constant / (residual + 0.0001)  # Avoid division by zero and introduce a steep penalty.

            #3. Damping factor for prioritizing a bit larger remaining capacity
            damping_force = damping_factor * remaining_capacity

            # Combine the potentials.
            priorities[i] = gravitational_potential - spring_potential + damping_force
        else:
            # Item cannot fit in this bin.  Assign a very low priority.
            priorities[i] = -np.inf

    return priorities
```
