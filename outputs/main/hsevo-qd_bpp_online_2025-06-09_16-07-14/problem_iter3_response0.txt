```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_utilization: np.ndarray = None, iteration: int = 0) -> np.ndarray:
    """
    Adaptive heuristic that combines Gaussian fit, capacity ratio, and dynamic adjustment
    based on bin utilization. Also incorporates the iteration number to adapt the exploration/exploitation.
    """
    num_bins = len(bins_remain_cap)
    # Initialize bin utilization if not provided
    if bin_utilization is None:
        bin_utilization = np.zeros(num_bins)

    # Adaptive Gaussian parameters based on item size and iteration
    mu = item
    # Adjust sigma based on the iteration number to control exploration/exploitation
    # Earlier iterations have larger sigma for exploration
    sigma = item / (2.0 + iteration/100)  # Reduce sigma over time

    gaussian = np.exp(-((bins_remain_cap - mu) ** 2) / (2 * sigma**2))

    # Capacity ratio with a small value to prevent division by zero
    ratios = item / (bins_remain_cap + 1e-9)

    # Dynamic adjustment based on bin utilization.
    # Penalize bins with high utilization to encourage even packing.
    utilization_penalty = bin_utilization # Scale as needed

    # Combine Gaussian, capacity ratio, and utilization penalty
    priorities = gaussian + 0.1 * (1 - ratios) - 0.05 * utilization_penalty # Further weight adjustments might be needed

    # Aggressively enforce feasibility: never pick impossible bins
    priorities[bins_remain_cap < item] = -np.inf

    # Prioritize bins that are almost full (but can still fit the item)
    almost_full_bonus = np.where((bins_remain_cap >= item) & (bins_remain_cap <= 1.1 * item), 0.2, 0) #The 1.1 factor allows for some fuzziness in the "almost full" definition
    priorities += almost_full_bonus
    return priorities
```
