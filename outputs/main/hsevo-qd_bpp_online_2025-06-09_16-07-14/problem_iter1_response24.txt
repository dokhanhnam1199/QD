```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Prioritize bins where the item almost perfectly fits
    almost_fit = np.isclose(bins_remain_cap, item, rtol=0, atol=1e-6) # Add small tolerance
    priorities[almost_fit] = 1000  # Very high priority

    # Prioritize bins where the item fits, but not too tightly (to avoid fragmentation)
    fits = (bins_remain_cap >= item) & (~almost_fit)
    priorities[fits] = (bins_remain_cap[fits] - item) # Lower cost means higher priority

    # Penalize bins where the item doesn't fit
    not_fits = (bins_remain_cap < item)
    priorities[not_fits] = -1000 # Very low priority
    
    # Adding small perturbation using sigmoid, emphasizing utilization.
    utilization = item / (bins_remain_cap + 1e-9) #Avoid division by zero
    sigmoid = 1 / (1 + np.exp(-5*(utilization - 0.75))) # Sharp change around 0.75
    priorities = priorities + 10*sigmoid  # Add small bonus to bins with moderate utilization

    return priorities
```
