{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines Gaussian fit and capacity ratio for bin selection.\"\"\"\n\n    mu = item\n    sigma = item / 3.0\n    gaussian = np.exp(-((bins_remain_cap - mu) ** 2) / (2 * sigma**2))\n\n    # Combine Gaussian with capacity ratio. Add small value to prevent divide by zero.\n    ratios = item / (bins_remain_cap + 1e-9)\n    priorities = gaussian + 0.1 * (1 - ratios)\n\n    priorities[bins_remain_cap < item] = -np.inf # Never pick impossible bins.\n\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's refine self-reflection for designing better heuristics, focusing on actionable insights and avoiding vague statements. Here's a breakdown:\n\n*   **Keywords:** Actionable Insights, Data-Driven Adaptation, Constraint Awareness, Performance Metrics.\n\n*   **Advice:** Instead of just noting that parameters *can* be tuned, identify *how* to tune them. Use performance metrics to guide parameter adaptation based on real-time bin state. Quantify \"almost full\" with specific capacity thresholds for bonuses.\n\n*   **Avoid:** Vague statements like \"consider multiple factors\" or \"complex heuristics perform better.\" This lacks specific guidance.\n\n*   **Explanation:** Actionable self-reflection means deriving concrete steps. Focus on quantifying domain knowledge and using performance data to drive adaptive heuristic adjustments, all while respecting constraints.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}