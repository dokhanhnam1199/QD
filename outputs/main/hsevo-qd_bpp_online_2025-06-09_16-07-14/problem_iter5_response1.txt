```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_utilization: np.ndarray = None, iteration: int = 0) -> np.ndarray:
    """Combines Gaussian fit with adaptive capacity ratio and bin utilization."""

    num_bins = len(bins_remain_cap)
    if bin_utilization is None:
        bin_utilization = np.zeros(num_bins)

    mu = item
    sigma = item / (2.0 + iteration/100)
    gaussian = np.exp(-((bins_remain_cap - mu) ** 2) / (2 * sigma**2))

    ratios = item / (bins_remain_cap + 1e-9)
    utilization_penalty = bin_utilization

    priorities = gaussian + 0.1 * (1 - ratios) - 0.05 * utilization_penalty
    priorities[bins_remain_cap < item] = -np.inf

    almost_full_bonus = np.where((bins_remain_cap >= item) & (bins_remain_cap <= 1.1 * item), 0.2, 0)
    priorities += almost_full_bonus
    return priorities
```
