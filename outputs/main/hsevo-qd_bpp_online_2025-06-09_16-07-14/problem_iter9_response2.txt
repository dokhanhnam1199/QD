```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A priority function for online bin packing that combines multiple factors:
    - Gaussian fit to target bins close to the item size.
    - Capacity ratio to prefer bins that would be well-filled.
    - Bonus for almost-full bins to consolidate packing.
    - Penalty for bins too small to fit the item.
    - Adaptive scaling based on bin utilization (exploration/exploitation).
    """

    mu = item
    sigma = max(item / 3.0, 0.01)  # Avoid sigma=0
    gaussian = np.exp(-((bins_remain_cap - mu) ** 2) / (2 * sigma**2))

    # Capacity ratio, with a small constant to avoid division by zero
    ratios = item / (bins_remain_cap + 1e-9)

    # Bonus for almost-full bins.  Quantify "almost full."
    almost_full_threshold = 0.2  # e.g., within 20% of being full
    almost_full_bonus = np.where(bins_remain_cap <= almost_full_threshold * np.max(bins_remain_cap), 0.5, 0)


    # Combine Gaussian, capacity ratio, and almost-full bonus
    priorities = gaussian + 0.2 * (1 - ratios) + almost_full_bonus

    # Never pick impossible bins.
    priorities[bins_remain_cap < item] = -np.inf

    # Adaptive scaling based on bin utilization (exploration/exploitation).
    # If many bins are almost empty, increase exploration by boosting gaussian
    empty_bin_threshold = 0.9  # e.g., bins with >90% capacity remaining
    num_empty_bins = np.sum(bins_remain_cap > empty_bin_threshold * np.max(bins_remain_cap))

    if num_empty_bins > len(bins_remain_cap) / 2:  # Heuristic: if most bins are empty
        priorities += 0.3 * gaussian # Boost the Gaussian to encourage filling bins closer to item size

    return priorities
```
