```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Adaptive heuristic for online bin packing. Combines Gaussian fit,
    capacity ratio, and a bin fullness reward. Dynamically adjusts
    parameters based on item size and bin states.
    """

    # Gaussian component (favors bins close to item size)
    mu = item
    sigma = item / 3.0  # dynamically adjust sigma
    gaussian = np.exp(-((bins_remain_cap - mu) ** 2) / (2 * sigma**2))

    # Capacity ratio component (discourages under-utilization)
    ratios = item / (bins_remain_cap + 1e-9) # adding small values for numerical stability
    capacity_priority = 1 - ratios


    # Bin fullness reward (incentivizes filling bins completely)
    bin_fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap)) # Normalized remaining capacity

    # Adaptive weight for fullness reward - higher for larger items
    fullness_weight = min(item, 0.5) # Scales fullness_weight 0 to 0.5 based on the item size.

    # Combine components with dynamic weights
    priorities = gaussian + 0.25 * capacity_priority + fullness_weight * bin_fullness

    # Constraint handling: Never pick impossible bins
    priorities[bins_remain_cap < item] = -np.inf

    return priorities
```
