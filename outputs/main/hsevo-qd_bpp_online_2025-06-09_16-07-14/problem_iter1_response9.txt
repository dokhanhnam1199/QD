```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Uses a combination of factors to determine priority:
    - Remaining capacity: Bins with capacity closer to the item size are preferred.
    - Waste minimization:  A small penalty for waste is applied.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Favor bins where item fits reasonably well. Avoid overly large bins if possible
            # using an inverse measure of relative 'waste'
            waste = cap - item
            waste_ratio = waste / cap  # Fraction of bin wasted
            priorities[i] = (1 / (waste_ratio + 0.01)) # avoid division by zero

            #A slightly more compact version, prioritizing a closer fit between remaining capacity and item size.
            #priorities[i] = (1 / (1 + abs(cap - item)))


        else:
            # If item doesn't fit, give low priority (negative)
            priorities[i] = -1000 # significantly penalize if doesn't fit

    return priorities
```
