```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Employing a heuristic inspired by the curvature of spacetime. We prefer bins that
    are 'just right' for the item, avoiding bins that are either too full or too empty.
    This minimizes wasted space and overall bin usage. We use a Gaussian-like distribution
    centered around the item size relative to the remaining capacity.  A small perturbation is also added based on remaining capacity to encourage filling more.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    mu = item  # Ideal remaining capacity
    sigma = item / 3.0 # Standard deviation: smaller values means sharper peak. Prevents being too wide.
    gaussian = np.exp(-((bins_remain_cap - mu) ** 2) / (2 * sigma**2))

    # Perturbation based on remaining capacity (encourages filling more)
    perturbation = 0.1 * (bins_remain_cap / np.max(bins_remain_cap))

    priorities = gaussian + perturbation

    #Avoid negative values
    priorities[bins_remain_cap < item] = -np.inf # Never pick impossible bins.

    return priorities
```
