{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Employing a heuristic inspired by the curvature of spacetime. We prefer bins that\n    are 'just right' for the item, avoiding bins that are either too full or too empty.\n    This minimizes wasted space and overall bin usage. We use a Gaussian-like distribution\n    centered around the item size relative to the remaining capacity.  A small perturbation is also added based on remaining capacity to encourage filling more.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n        sigma_factor: Factor to divide the item size by to get the standard deviation for the Gaussian distribution.\n        perturbation_strength: Strength of the perturbation based on remaining capacity.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    mu = item  # Ideal remaining capacity\n    sigma = item / sigma_factor # Standard deviation: smaller values means sharper peak. Prevents being too wide.\n    gaussian = np.exp(-((bins_remain_cap - mu) ** 2) / (2 * sigma**2))\n\n    # Perturbation based on remaining capacity (encourages filling more)\n    perturbation = perturbation_strength * (bins_remain_cap / np.max(bins_remain_cap))\n\n    priorities = gaussian + perturbation\n\n    #Avoid negative values\n    priorities[bins_remain_cap < item] = -np.inf # Never pick impossible bins.\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the best heuristic uses a Gaussian distribution combined with a capacity ratio, and explicitly avoids impossible bins, while the worst only considers the log of the ratio between item size and remaining capacity. (2nd best) vs (second worst) are similar to (1st) and (20th) correspondingly. Comparing (1st) vs (2nd), we see they are identical; (3rd) vs (4th) are identical... (8th) vs (9th) - the 9th version introduces tunable parameters (`sigma_factor`, `perturbation_strength`) for the Gaussian and perturbation, and imports unnecessary libraries. Comparing (10th) vs (12th), we see that the 10th introduces adaptive parameters based on bin utilization and iteration number to control exploration/exploitation. It also introduces an \"almost full\" bonus. Overall: The better heuristics incorporate more factors (Gaussian fit, capacity ratio, bin utilization, iteration number) and adaptive mechanisms, while simpler heuristics solely rely on the item-to-capacity ratio. Higher ranked heuristics also prioritize not picking impossible bins.\n- \nHere's a redefined approach to self-reflection for designing bin packing heuristics, focusing on actionable insights and avoiding common pitfalls:\n\n*   **Keywords:** Adaptive heuristics, parameter tuning, domain knowledge, Gaussian distributions, state-based perturbation, constraint handling.\n\n*   **Advice:** Design heuristics that dynamically adjust parameters based on the current bin packing state. Leverage domain-specific insights (e.g., rewarding near-full bins).\n\n*   **Avoid:** Overly complex, untuned parameters that hinder performance; ignoring invalid states.\n\n*   **Explanation:** By focusing on adaptive strategies and incorporating domain-specific rules while maintaining solution validity, heuristics become more robust and efficient. Rigorous parameter tuning is essential.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}