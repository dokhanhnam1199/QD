{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Combines Gaussian fit and capacity ratio for bin selection.\"\"\"\n\n    mu = item\n    sigma = item / 3.0\n    gaussian = np.exp(-((bins_remain_cap - mu) ** 2) / (2 * sigma**2))\n\n    # Combine Gaussian with capacity ratio. Add small value to prevent divide by zero.\n    ratios = item / (bins_remain_cap + 1e-9)\n    priorities = gaussian + 0.1 * (1 - ratios)\n\n    priorities[bins_remain_cap < item] = -np.inf # Never pick impossible bins.\n\n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nOkay, let's redefine \"Current Self-Reflection\" to make it more effective for designing better heuristics, specifically avoiding pitfalls and focusing on improvements. Here's a refined perspective:\n\n*   **Keywords:** Adaptive Heuristics, State-Aware Prioritization, Feasibility Enforcement, Dynamic Adjustment.\n\n*   **Advice:** Implement a feedback loop where the heuristic's parameters (like the Gaussian distribution's variance) are dynamically adjusted based on the algorithm's performance and state. Prioritize feasibility checks aggressively during state transitions.\n\n*   **Avoid:** Rigid, pre-defined Gaussian parameters. Focus on adaptive adjustments informed by the current bin packing state. Avoid simple \"band-aid\" fixes for invalid states; design the heuristic to prevent them proactively.\n\n*   **Explanation:** A static Gaussian approach lacks adaptability. By making the heuristic parameters state-aware, the algorithm can learn and improve its packing efficiency. Early feasibility enforcement prevents downstream problems.\n\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}