```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Inspired by the interplay of space and time, where the best solution
    might involve a bit of 'warping' the capacity consideration based on proximity to full utilization.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Reward bins that can fit the item
            # Give higher priority to bins that are closer to being full after adding the item,
            # but penalize bins that would become completely full (or almost so, to avoid edge cases).

            remaining_after_fit = cap - item
            if remaining_after_fit > 0.001: #Avoid near-full bin
                 priorities[i] = 1 / (remaining_after_fit + 0.00001) #avoid division by zero
            else:
                 priorities[i] = -1000  #Large penalty for nearly full bin
        else:
            # Very low priority for bins that cannot fit the item.
            priorities[i] = -np.inf

    return priorities
```
