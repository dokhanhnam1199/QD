```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Adaptive heuristic for bin packing, combining Gaussian fit, capacity ratio, and bin fullness.
    """

    mu = item
    sigma = max(item / 3.0, 0.01)  # Ensure sigma is not zero

    # Gaussian component: prefers bins close to item size
    gaussian = np.exp(-((bins_remain_cap - mu) ** 2) / (2 * sigma**2))

    # Capacity ratio component: favors bins where item fits well relative to remaining capacity
    ratios = item / (bins_remain_cap + 1e-9)
    capacity_priority = 1 - ratios

    # Bin fullness component: reward bins that are already relatively full
    bin_fullness = 1 - (bins_remain_cap / np.max(bins_remain_cap)) # Normalized remaining capacity
    fullness_priority = bin_fullness

    # Adaptive weighting based on item size: large items emphasize capacity, small items emphasize Gaussian fit
    weight = min(item, 0.5) # Weight between 0 and 0.5

    # Combine the priorities with adaptive weights
    priorities = weight * gaussian + (1 - weight) * capacity_priority + 0.2 * fullness_priority

    priorities[bins_remain_cap < item] = -np.inf  # Never pick impossible bins

    return priorities
```
