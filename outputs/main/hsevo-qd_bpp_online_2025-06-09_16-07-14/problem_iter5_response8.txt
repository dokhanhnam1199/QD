```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Gaussian fit, capacity ratio, and bin utilization for bin selection."""

    # Gaussian component: prioritize bins close to item size
    mu = item
    sigma = item / 3.0
    gaussian = np.exp(-((bins_remain_cap - mu) ** 2) / (2 * sigma**2))

    # Capacity ratio component: penalize bins much larger than item. Add small value to prevent divide by zero.
    ratios = item / (bins_remain_cap + 1e-9)
    capacity_priority = 0.1 * (1 - ratios) # Scale down

    # Bin utilization component: reward bins that are almost full
    utilization = 1 - (bins_remain_cap / np.max(bins_remain_cap)) #Normalize based on bin capacity
    almost_full_bonus = np.where(bins_remain_cap <= 1.1 * item, 0.2, 0) # give bonus to the bins which are almost full.

    # Combine components
    priorities = gaussian + capacity_priority + almost_full_bonus

    # Ensure valid bin selections by assigning -inf to impossible bins
    priorities[bins_remain_cap < item] = -np.inf

    return priorities
```
