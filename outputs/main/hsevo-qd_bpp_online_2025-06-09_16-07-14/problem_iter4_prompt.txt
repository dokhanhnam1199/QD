{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Employing a heuristic inspired by the curvature of spacetime. We prefer bins that\n    are 'just right' for the item, avoiding bins that are either too full or too empty.\n    This minimizes wasted space and overall bin usage. We use a Gaussian-like distribution\n    centered around the item size relative to the remaining capacity.  A small perturbation is also added based on remaining capacity to encourage filling more.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    mu = item  # Ideal remaining capacity\n    sigma = item / 3.0 # Standard deviation: smaller values means sharper peak. Prevents being too wide.\n    gaussian = np.exp(-((bins_remain_cap - mu) ** 2) / (2 * sigma**2))\n\n    # Perturbation based on remaining capacity (encourages filling more)\n    perturbation = 0.1 * (bins_remain_cap / np.max(bins_remain_cap))\n\n    priorities = gaussian + perturbation\n\n    #Avoid negative values\n    priorities[bins_remain_cap < item] = -np.inf # Never pick impossible bins.\n\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}