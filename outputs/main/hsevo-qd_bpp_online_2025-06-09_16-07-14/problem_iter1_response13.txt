```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Higher priority means we want to add the item to that bin first.
    Uses a combination of remaining capacity and wasted space considerations.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)

    # Assign a base priority based on whether the item fits
    fits = item <= bins_remain_cap
    priorities[fits] = 1  # Prioritize bins where the item fits

    # If the item doesn't fit in any bins, return all zeros
    if not np.any(fits):
        return priorities

    # Calculate remaining capacity AFTER adding the item (only for bins where it fits)
    remaining_after_add = bins_remain_cap[fits] - item

    # Prioritize bins with smaller wasted space (remaining capacity)
    # Higher wasted space gets lower priority
    priorities[fits] += 1.0 / (1.0 + remaining_after_add) # Add to existing 'fits' priority. Avoid division by zero.

    # Prioritize bins with remaining capacity closer to the item size.
    # This attempts to find a "good fit" and avoid creating bins that are
    # almost empty after packing the current item. This helps reduce the overall bin count.
    capacity_diff = np.abs(bins_remain_cap[fits] - item)
    priorities[fits] += 1.0 / (1.0 + capacity_diff)

    return priorities
```
