```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A refined priority function for online bin packing that combines
    Gaussian fit, capacity ratio, and adaptive adjustments based on bin state.
    """

    # Gaussian component: Favor bins close to the item's size
    mu = item
    sigma = item / 3.0
    gaussian = np.exp(-((bins_remain_cap - mu) ** 2) / (2 * sigma**2))

    # Capacity ratio component: Discourage overfilling
    ratios = item / (bins_remain_cap + 1e-9) # Avoid division by zero
    capacity_priority = 1 - ratios  # Prefer bins with larger remaining capacity

    # Adaptive adjustments based on bin state
    adaptive_priority = np.zeros_like(bins_remain_cap)

    # Bonus for "almost full" bins to encourage their completion.
    almost_full_threshold = 0.2  # Define "almost full" as having <= 20% capacity left
    almost_full_bonus = 0.5  # The bonus priority points
    almost_full_bins = (bins_remain_cap > item) & (bins_remain_cap <= item + almost_full_threshold)
    adaptive_priority[almost_full_bins] += almost_full_bonus

    # Penalty for bins nearing full but not enough for the item
    nearing_full_penalty = -0.3
    nearing_full_threshold = item * 2
    nearing_full_bins = (bins_remain_cap < item) & (bins_remain_cap <= nearing_full_threshold)
    adaptive_priority[nearing_full_bins] += nearing_full_penalty

    # Combine all components
    priorities = gaussian + 0.1 * capacity_priority + adaptive_priority

    # Never pick impossible bins
    priorities[bins_remain_cap < item] = -np.inf

    return priorities
```
