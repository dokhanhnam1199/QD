```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Inspired by minimizing "action" and considering tunneling probability.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    # 1. Energy-like term: Favor bins that fit well (minimize wasted space, like minimizing potential energy)
    waste = bins_remain_cap - item
    energy = np.where(waste >= 0, np.exp(-waste), -np.inf)  # Large negative energy for bins that don't fit.

    # 2. "Kinetic energy" term: Favor bins that were previously empty (new possibilities, exploration)
    # If we're starting to fill a bin, there might be good things down the road
    was_empty = bins_remain_cap == 1.0  #Assuming all bins start with cap 1.0. Adjust according to the cap
    kinetic = np.where(was_empty, 1.0, 0.0)  # Big boost to priorities if the bin was previously unused.

    # 3. Quantum "tunneling" term: Penalize bins that are almost full, but not quite. Prevents premature commitment.
    almost_full = (bins_remain_cap > item) & (bins_remain_cap < item + 0.1) #Adjust width of "almost full"
    tunnel = np.where(almost_full, -0.5, 0.0) # Tunable penalty

    # 4. A term that encourages filling bins roughly equally (balances load).  Penalize vastly different fill ratios
    #This is a bit tricky to do efficiently in the online case, so commenting out
    #bin_sizes = 1.0 - bins_remain_cap #How full the bin is. Starts from 0
    #load_balancing_penalty = - np.abs(bin_sizes - np.mean(bin_sizes))
    # Normalize for good behavior

    priorities = energy + kinetic + tunnel # + load_balancing_penalty

    return priorities
```
