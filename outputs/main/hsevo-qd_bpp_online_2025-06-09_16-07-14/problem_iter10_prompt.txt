{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, bin_utilization: np.ndarray = None, iteration: int = 0) -> np.ndarray:\n    \"\"\"\n    Adaptive heuristic that combines Gaussian fit, capacity ratio, and dynamic adjustment\n    based on bin utilization. Also incorporates the iteration number to adapt the exploration/exploitation.\n    \"\"\"\n    num_bins = len(bins_remain_cap)\n    # Initialize bin utilization if not provided\n    if bin_utilization is None:\n        bin_utilization = np.zeros(num_bins)\n\n    # Adaptive Gaussian parameters based on item size and iteration\n    mu = item\n    # Adjust sigma based on the iteration number to control exploration/exploitation\n    # Earlier iterations have larger sigma for exploration\n    sigma = item / (2.0 + iteration/100)  # Reduce sigma over time\n\n    gaussian = np.exp(-((bins_remain_cap - mu) ** 2) / (2 * sigma**2))\n\n    # Capacity ratio with a small value to prevent division by zero\n    ratios = item / (bins_remain_cap + 1e-9)\n\n    # Dynamic adjustment based on bin utilization.\n    # Penalize bins with high utilization to encourage even packing.\n    utilization_penalty = bin_utilization # Scale as needed\n\n    # Combine Gaussian, capacity ratio, and utilization penalty\n    priorities = gaussian + 0.1 * (1 - ratios) - 0.05 * utilization_penalty # Further weight adjustments might be needed\n\n    # Aggressively enforce feasibility: never pick impossible bins\n    priorities[bins_remain_cap < item] = -np.inf\n\n    # Prioritize bins that are almost full (but can still fit the item)\n    almost_full_bonus = np.where((bins_remain_cap >= item) & (bins_remain_cap <= 1.1 * item), 0.2, 0) #The 1.1 factor allows for some fuzziness in the \"almost full\" definition\n    priorities += almost_full_bonus\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}