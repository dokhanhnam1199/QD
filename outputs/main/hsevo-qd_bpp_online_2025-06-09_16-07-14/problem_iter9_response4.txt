```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A more sophisticated priority function for online bin packing.

    This function combines several factors to determine the priority of each bin:
    1. Gaussian fit to the remaining capacity, centered on the item size.
    2. Capacity ratio (item size / remaining capacity).
    3. Bonus for bins that are "almost full" (encourages filling nearly full bins).
    4. Penalty for bins that are too small to fit the item.
    5. Dynamic adjustment of parameters based on item size relative to bin capacity.

    Args:
        item (float): The size of the item to be packed.
        bins_remain_cap (np.ndarray): A NumPy array containing the remaining capacity of each bin.

    Returns:
        np.ndarray: A NumPy array containing the priority score for each bin.
    """

    # 1. Gaussian fit:  Favors bins with remaining capacity close to the item size.
    mu = item
    sigma = item / 3.0  # Adjust sigma based on item size: larger items, broader distribution.
    gaussian = np.exp(-((bins_remain_cap - mu) ** 2) / (2 * sigma**2))

    # 2. Capacity ratio:  Favors bins where the item fills a large portion of the remaining capacity.
    ratios = item / (bins_remain_cap + 1e-9) #Adding small value to prevent divide by zero

    # 3. "Almost full" bonus:  Encourages filling bins that are close to being full.
    almost_full_threshold = 0.2  # A bin is "almost full" if remaining capacity < 20% of bin size
    almost_full_bonus = np.where(bins_remain_cap <= almost_full_threshold, 0.5, 0)  # Bonus if almost full

    # 4. Impossible bin penalty:  Ensure impossible bins get -inf priority.
    impossible_penalty = -np.inf
    priorities = np.where(bins_remain_cap < item, impossible_penalty,
                           gaussian + 0.2 * (1 - ratios) + almost_full_bonus) # Combines all the factors

    #5. Dynamic weight adjustment based on item size to bin size ratio
    average_bin_cap = np.mean(bins_remain_cap)
    item_bin_ratio = item / (average_bin_cap + 1e-9)
    if item_bin_ratio > 0.7:
      priorities = gaussian + 0.5*(1 - ratios) + almost_full_bonus #Prioritize fitting large items
    elif item_bin_ratio < 0.3:
      priorities = gaussian + 0.1*(1 - ratios) + almost_full_bonus #Relax the fill ratio for small items

    return priorities
```
