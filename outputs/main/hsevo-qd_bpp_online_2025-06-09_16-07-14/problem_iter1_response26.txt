```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Prioritize bins that can fit the item
    can_fit = bins_remain_cap >= item
    priorities[can_fit] = 1.0

    # Prioritize bins with minimal wasted space, but only if they can fit
    waste = bins_remain_cap - item
    waste[~can_fit] = np.inf  # Ignore bins that can't fit

    # Give bins a score related to how little space would be wasted if the item were added.
    # Invert the waste so that smaller waste leads to higher priority. 
    # Add a small constant to avoid division by zero.
    priorities[can_fit] += 1.0 / (waste[can_fit] + 0.0001)

    # Soft cap waste priority, but only when waste is small (better fit)
    small_waste_indices = (waste >= 0) & (waste < 0.1) & can_fit
    if np.any(small_waste_indices):
        priorities[small_waste_indices] += 5 # significantly favor near fits

    # Apply exponential to favor utilization but only when waste is truly minimal.
    # Also, ensures small improvement leads to larger benefit in priority score
    minimal_waste_indices = (waste >= 0) & (waste < 0.01) & can_fit
    if np.any(minimal_waste_indices):
        priorities[minimal_waste_indices] += np.exp(10*(1- waste[minimal_waste_indices] / 0.01))

    return priorities
```
