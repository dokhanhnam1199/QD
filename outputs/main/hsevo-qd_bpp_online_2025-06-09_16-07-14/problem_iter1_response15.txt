```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Higher priority for bins that can fit the item well, but not perfectly.
            # Avoid leaving too much space or wasting almost-full bins on small items.
            priority = (cap - item) / cap # proportion of remaining capacity after the item is placed
            # Invert so that smaller values of (cap - item)/cap are prioritized
            priority = 1 - priority

            # Emphasize near-full bins (high priority) much more strongly. 
            priority = priority**3
            priorities[i] = priority

        else:
            priorities[i] = -np.inf  # Cannot fit, so lowest priority.

    return priorities
```
