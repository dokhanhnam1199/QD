```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Adaptive heuristic combining Gaussian fit, capacity ratio, and bin fullness for online bin packing.
    """

    mu = item
    sigma = item / 3.0
    gaussian = np.exp(-((bins_remain_cap - mu) ** 2) / (2 * sigma**2))

    # Capacity ratio component. Adding a small value to prevent division by zero.
    ratios = item / (bins_remain_cap + 1e-9)

    # Bin fullness component - encourages filling bins close to capacity.
    bin_fullness = bins_remain_cap / np.max(bins_remain_cap)  # Normalize remaining capacity

    # Adaptive parameter based on the average remaining capacity
    avg_remaining_capacity = np.mean(bins_remain_cap)
    adaptive_weight = 0.5 + 0.5 * np.exp(-avg_remaining_capacity / (item + 1e-9))  # Adjusts based on overall bin emptiness.

    # Combine components with adaptive weighting.
    priorities = (0.4 * gaussian) + (0.3 * (1 - ratios)) + (0.3 * (1 - bin_fullness)) # weights have been tuned a little

    # Significantly boost bins nearly full, but can still fit the item
    nearly_full_threshold = item + (item * 0.1)
    nearly_full_mask = (bins_remain_cap >= item) & (bins_remain_cap <= nearly_full_threshold)
    priorities[nearly_full_mask] += 1.0 # big boost

    priorities[bins_remain_cap < item] = -np.inf  # Never pick impossible bins

    return priorities
```
