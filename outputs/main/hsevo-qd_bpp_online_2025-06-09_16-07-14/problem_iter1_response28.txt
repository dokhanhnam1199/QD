```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Prioritizes bins where the item fits and fills them most completely.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    fit_mask = bins_remain_cap >= item

    if np.any(fit_mask):
        # Calculate fill ratio for bins that fit
        fill_ratios = item / bins_remain_cap[fit_mask]

        # Give higher priority to bins that are filled more completely
        priorities[fit_mask] = fill_ratios

        # Also prioritize bins with less remaining capacity to avoid fragments
        remaining_capacity_penalty = 1 - (bins_remain_cap[fit_mask] - item) / np.max(bins_remain_cap) #Penalize larger remaining space
        priorities[fit_mask] += remaining_capacity_penalty
    else:
        # If item doesn't fit any bin, severely penalize all bins
        priorities[:] = -1e9 #arbitrary negative score

    return priorities
```
