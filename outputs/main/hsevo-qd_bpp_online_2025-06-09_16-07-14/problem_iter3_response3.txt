```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, bin_usage_history: np.ndarray = None) -> np.ndarray:
    """
    Combines Gaussian fit, capacity ratio, and bin usage history for bin selection.
    Adapts Gaussian variance based on item size. Favors bins with capacity slightly
    larger than the item, but also considers how frequently a bin has been used.
    """

    # Adaptive Gaussian variance: smaller items get tighter distributions.
    sigma = max(item / 5.0, 0.1)  # Ensure a minimum sigma to avoid extremely narrow distributions

    mu = item
    gaussian = np.exp(-((bins_remain_cap - mu) ** 2) / (2 * sigma**2))

    # Capacity ratio with a bit more emphasis on utilizing space
    ratios = item / (bins_remain_cap + 1e-9)
    priorities = gaussian + 0.2 * (1 - ratios)  # Slightly increased weight for capacity ratio

    # Incorporate bin usage history if available. Favor less used bins.
    if bin_usage_history is not None:
        # Normalize usage history to be between 0 and 1
        normalized_usage = bin_usage_history / (np.max(bin_usage_history) + 1e-9) if np.max(bin_usage_history) > 0 else np.zeros_like(bin_usage_history)

        # Give a bonus to less used bins.  Adjust the weight (0.3) as needed.
        priorities += 0.3 * (1 - normalized_usage)

    # Enforce feasibility:  Never pick impossible bins.
    priorities[bins_remain_cap < item] = -np.inf

    return priorities
```
