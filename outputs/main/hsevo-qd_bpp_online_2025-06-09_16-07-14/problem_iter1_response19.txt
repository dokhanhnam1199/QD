```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    Aims to balance bin utilization by prioritizing bins where the item
    fits best without wasting too much space. Uses a combination of
    remaining capacity and the fit ratio (item size / remaining capacity).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of remaining capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a low default value.  This is important
    # as some bins may not be able to hold the item, giving a NaN value
    # otherwise, which messes up the comparison.
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    # Calculate the bins that can accommodate the current item.
    valid_bins = bins_remain_cap >= item

    if not np.any(valid_bins):  # if item cannot be placed in any bin
        return priorities  # return array of -inf priorities

    # Calculate the remaining capacity AFTER placing the item
    remaining_after_fit = bins_remain_cap[valid_bins] - item

    # Fit ratio (item size relative to remaining capacity). A fit closer to 1 is preferred.
    fit_ratios = item / bins_remain_cap[valid_bins]

    # Heuristic:
    #   1. Favor bins where placing the item leaves some space but not excessive space (good utilization).
    #   2. Prioritize bins that are not too full to avoid tightly packed bins
    #   3. Avoid empty bins.
    # The combination of these terms tries to balance how well the item fills the bin,
    # penalizing both very tight fits and huge wastes of space.

    # Combine the criteria into a single score. Experimenting with the coefficients (e.g. 1.0, 0.5) can affect results.
    priorities[valid_bins] = (
        fit_ratios
        - 0.5 * (remaining_after_fit / np.max(bins_remain_cap))  # Penalty for large remaining space
        + 0.1 * bins_remain_cap[valid_bins] # Slight priority for larger capacity bins to reduce the fragmentation
    )
    return priorities
```
