```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Gaussian fit and capacity ratio, avoiding impossible bins.
    Prioritizes near-full bins for efficient packing.
    """

    num_bins = len(bins_remain_cap)
    gaussian_mu = item
    gaussian_sigma = item / 2.0  # Smaller sigma for exploitation

    gaussian_fit = np.exp(-((bins_remain_cap - gaussian_mu) ** 2) / (2 * gaussian_sigma**2))

    capacity_ratios = item / (bins_remain_cap + 1e-9)
    priority = gaussian_fit + 0.1 * (1 - capacity_ratios)

    priority[bins_remain_cap < item] = -np.inf  # Prevent impossible bin selection

    # Bonus for bins that are almost full but can still fit the item
    almost_full_bonus = np.where((bins_remain_cap >= item) & (bins_remain_cap <= 1.1 * item), 0.2, 0)
    priority += almost_full_bonus

    return priority
```
