```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Heuristic 1: First-Fit Decreasing inspired: Prioritize bins that can fit the item well, avoiding excessive fragmentation.
    # Reward bins where the remaining capacity after placing the item is small, but not zero.
    remaining_capacity_after_fit = bins_remain_cap - item
    priority = np.zeros_like(bins_remain_cap, dtype=float)

    # Prioritize bins that can fit the item
    can_fit = remaining_capacity_after_fit >= 0
    priority[can_fit] = 1.0

    # Penalize bins with very little space left after placing the item, to avoid creating near-empty bins. Except, don't penalize perfect fit.
    almost_full = (remaining_capacity_after_fit > 0) & (remaining_capacity_after_fit < 0.1)  # Adjust threshold (0.1) as needed.  Prevent fragmentaiton
    priority[almost_full] *= 0.5  # Reduce the priority to make other bins more attractive

    #Boost bins with small amount of waste to utilize space more effectively.
    waste_score = np.exp(-remaining_capacity_after_fit[can_fit]/0.2) # Adjust scaling for waste
    priority[can_fit] += waste_score

    #Heuristic 2: Encourage even distribution across bins to avoid overuse of a single bin.
    average_capacity = np.mean(bins_remain_cap)
    capacity_diff = bins_remain_cap - average_capacity
    capacity_evenness_score = -np.abs(capacity_diff) / np.max(np.abs(capacity_diff)) if np.max(np.abs(capacity_diff)) != 0 else 0 # Normalize to -1 to 0 range
    #Since capacity_evenness_score is a single number when dividing, vectorize using broadcasting by simply adding arrays
    priority += 0.1 * capacity_evenness_score # scale down this priority compared to fitting item.

    return priority
```
