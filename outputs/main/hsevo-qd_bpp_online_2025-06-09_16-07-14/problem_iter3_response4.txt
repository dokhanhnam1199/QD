```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, iteration: int) -> np.ndarray:
    """
    An enhanced priority function for online bin packing, incorporating adaptive Gaussian,
    capacity ratio, and dynamic adjustments based on packing progress.
    """
    n_bins = len(bins_remain_cap)

    # Adaptive Gaussian parameters: dynamically adjust sigma based on iteration and item size.
    # Earlier iterations favor exploration (wider Gaussian), later iterations favor exploitation.
    exploration_factor = np.exp(-iteration / 500)  # Decay exploration over time
    sigma = item / (2 + 2 * exploration_factor) # was 3

    mu = item
    gaussian = np.exp(-((bins_remain_cap - mu) ** 2) / (2 * sigma**2))

    # Capacity ratio with a slight adjustment.
    ratios = item / (bins_remain_cap + 1e-9)
    priority_ratios = 1 - ratios

    # Combine Gaussian, capacity ratio, and a penalty for almost-full bins
    almost_full_penalty = np.where(bins_remain_cap < 2*item, -0.05 * (2*item - bins_remain_cap), 0) #Penalize bins close to full.
    priorities = gaussian + 0.2*priority_ratios + almost_full_penalty

    # Enforce feasibility strictly: never pick impossible bins.
    priorities[bins_remain_cap < item] = -np.inf


    #Small randomization for symmetry breaking.
    randomization = np.random.rand(n_bins) * 0.001
    priorities += randomization


    return priorities
```
