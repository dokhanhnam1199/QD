```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.
    This version incorporates a "near-miss" bonus and a penalty for nearly filling bins.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    for i, cap in enumerate(bins_remain_cap):
        if item <= cap:
            # Basic priority: Higher remaining capacity gives higher base priority
            priorities[i] = cap

            # "Near miss" bonus:  If the item fills a significant portion of the bin (e.g., > 80%),
            # increase the priority.  This encourages filling bins effectively.
            fill_ratio = item / cap
            if fill_ratio > 0.8:
                priorities[i] += 10 * fill_ratio # increased influence when close to full
           
            # Penalty for almost-full bins: If adding the item would leave very little space
            # in the bin, slightly decrease the priority. This encourages saving a bit of space for smaller items later.
            remaining_after_fit = cap - item
            if 0 < remaining_after_fit < 0.1:
                priorities[i] -= 5  # slight discouragement
                
            # Adjust for item-size: smaller items prefer bins that aren't too big
            # priorities[i] -= 0.1 * cap * (item / np.max(bins_remain_cap))
            # Apply the sigmoid transformation
            priorities[i] = 1 / (1 + np.exp(-priorities[i]))

        else:
            priorities[i] = -np.inf  # Cannot fit, so lowest possible priority

    return priorities
```
