```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    for i, cap in enumerate(bins_remain_cap):
        if cap >= item:
            # Favor bins where item fits, and where there's not too much wasted space
            priorities[i] = (cap - item) / item + 1 # Higher priority to bins with tighter fit, but always > 1

            # If there is very little wasted space, the score goes really high
            if cap - item < 0.1:
                priorities[i] += 10

        else:
            priorities[i] = -1e9  # Very low priority if the item does not fit

    return priorities
```
