```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Prioritize bins that can accommodate the item
    can_accommodate = bins_remain_cap >= item
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Give high priority to bins that can accommodate and have smallest wasted space.
    wasted_space = bins_remain_cap - item
    wasted_space[~can_accommodate] = np.inf  # penalize those who cannot accommodate.

    priorities[can_accommodate] = 1.0 / (wasted_space[can_accommodate] + 1e-6)  # Avoid division by zero

    # For bins that cannot accomodate, prioritize those that are closest to fitting
    cannot_accommodate = ~can_accommodate
    if np.any(cannot_accommodate):
      space_needed = item - bins_remain_cap[cannot_accommodate]
      priorities[cannot_accommodate] = -space_needed #Negative priority
      priorities[cannot_accommodate] = np.clip(priorities[cannot_accommodate], a_min=-1e6, a_max=0)  #Prevent crazy negative priorities for numerical stability.

    return priorities
```
