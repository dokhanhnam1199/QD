{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Employing a heuristic inspired by the curvature of spacetime. We prefer bins that\n    are 'just right' for the item, avoiding bins that are either too full or too empty.\n    This minimizes wasted space and overall bin usage. We use a Gaussian-like distribution\n    centered around the item size relative to the remaining capacity.  A small perturbation is also added based on remaining capacity to encourage filling more.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    mu = item  # Ideal remaining capacity\n    sigma = item / 3.0 # Standard deviation: smaller values means sharper peak. Prevents being too wide.\n    gaussian = np.exp(-((bins_remain_cap - mu) ** 2) / (2 * sigma**2))\n\n    # Perturbation based on remaining capacity (encourages filling more)\n    perturbation = 0.1 * (bins_remain_cap / np.max(bins_remain_cap))\n\n    priorities = gaussian + perturbation\n\n    #Avoid negative values\n    priorities[bins_remain_cap < item] = -np.inf # Never pick impossible bins.\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Returns priority with which we want to add item to each bin.\n\n    Args:\n        item: Size of item to be added to the bin.\n        bins_remain_cap: Array of capacities for each bin.\n\n    Return:\n        Array of same size as bins_remain_cap with priority score of each bin.\n    \"\"\"\n    ratios = item / bins_remain_cap\n    log_ratios = np.log(ratios)\n    priorities = -log_ratios\n    return priorities\n\n### Analyze & experience\n- Comparing (1st) vs (20th), we see the Gaussian heuristic uses a more sophisticated approach to prioritize bins based on how well the item size fits the remaining capacity, whereas the logarithmic heuristic simply uses the negative log of the ratio between item size and remaining capacity. This Gaussian approach also incorporates a small perturbation to encourage filling bins more completely, which the logarithmic heuristic lacks.\nComparing (2nd) vs (11th), we see the Gaussian heuristic employs a Gaussian distribution centered around the item size, with a standard deviation related to the item size to prioritize bins whose remaining capacity is close to the item size. It includes a perturbation factor based on remaining capacity to encourage filling bins more. The logarithmic heuristic directly calculates the ratio of item size to remaining capacity, takes the natural logarithm, and assigns the negative of this value as the priority.\nAll the top 10 heuristics have the same code and are superior to the rest. All the bottom 10 heuristics have the same code. Overall: The Gaussian distribution with perturbation appears to offer a more nuanced approach to bin packing than the simple logarithmic ratio, resulting in better performance. The logarithmic ratio is also missing logic to avoid negative remaining capacity.\n- \nOkay, let's redefine \"Current Self-Reflection\" to make it more effective for designing better heuristics, specifically avoiding pitfalls and focusing on improvements. Here's a refined perspective:\n\n*   **Keywords:** Adaptive Heuristics, State-Aware Prioritization, Feasibility Enforcement, Dynamic Adjustment.\n\n*   **Advice:** Implement a feedback loop where the heuristic's parameters (like the Gaussian distribution's variance) are dynamically adjusted based on the algorithm's performance and state. Prioritize feasibility checks aggressively during state transitions.\n\n*   **Avoid:** Rigid, pre-defined Gaussian parameters. Focus on adaptive adjustments informed by the current bin packing state. Avoid simple \"band-aid\" fixes for invalid states; design the heuristic to prevent them proactively.\n\n*   **Explanation:** A static Gaussian approach lacks adaptability. By making the heuristic parameters state-aware, the algorithm can learn and improve its packing efficiency. Early feasibility enforcement prevents downstream problems.\n\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}