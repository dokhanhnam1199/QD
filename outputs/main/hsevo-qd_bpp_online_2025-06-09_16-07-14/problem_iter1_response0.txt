```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Feasibility: Impossible bins get -inf priority
    infeasible = item > bins_remain_cap
    priorities[infeasible] = -np.inf

    # 2. Best Fit criterion: Fill bins as much as possible, but without overflowing.
    # A bin is suitable if item <= bins_remain_cap

    suitable_bins = bins_remain_cap[~infeasible]

    # If suitable bins exist, give higher priority to bins where item fills more of it
    if len(suitable_bins) > 0:
        fill_ratios = item / suitable_bins
        priorities[~infeasible] = fill_ratios

        # Give a bonus to bins that the item fits *almost* perfectly into.
        # Helps close partially-full bins. Tunable parameter.
        almost_full_threshold = 0.9
        almost_full_bonus = 0.1
        almost_full = (fill_ratios >= almost_full_threshold) & (fill_ratios <= 1.0)
        priorities[~infeasible][almost_full] += almost_full_bonus

    return priorities
```
