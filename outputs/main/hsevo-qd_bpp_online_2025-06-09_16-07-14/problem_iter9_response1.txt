```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Gaussian fit, capacity ratio, and bonus for near-full bins for optimized bin selection.

    Prioritizes bins that are a good fit for the item and rewards using bins that are close to full.
    Improves upon v1 by dynamically adjusting parameters based on remaining capacity
    and incorporating a bin-fullness bonus to encourage efficient packing.
    """

    mu = item
    sigma = item / 3.0
    gaussian = np.exp(-((bins_remain_cap - mu) ** 2) / (2 * sigma**2))

    # Capacity ratio with a safety net for division by zero
    ratios = item / (bins_remain_cap + 1e-9)

    # Bin fullness bonus: Reward bins that are close to being full.
    # Dynamically adjust the bonus strength based on item size.
    fullness_threshold = 0.1  # Consider bins with <= 10% remaining capacity as nearly full
    nearly_full_bins = bins_remain_cap <= fullness_threshold * np.max(bins_remain_cap) # use max to normalize
    bin_fullness_bonus = np.where(nearly_full_bins, 0.5 * item , 0) # scale bonus by item size

    # Combine Gaussian, capacity ratio, and fullness bonus
    priorities = gaussian + 0.1 * (1 - ratios) + bin_fullness_bonus

    # Never pick impossible bins.
    priorities[bins_remain_cap < item] = -np.inf

    return priorities
```
