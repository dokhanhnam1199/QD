```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Initialize priorities with a base value (e.g., 0).
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Penalize bins that cannot fit the item.  Set priority to a very low value.
    infeasible_mask = bins_remain_cap < item
    priorities[infeasible_mask] = -np.inf  # Or a very large negative number

    # For feasible bins:
    feasible_mask = ~infeasible_mask
    if np.any(feasible_mask):
        remaining_capacities = bins_remain_cap[feasible_mask]

        # 1. Maximize filled space (minimize wasted space).  Prefer bins where item fits relatively tightly.
        fill_ratios = item / remaining_capacities
        priorities[feasible_mask] += fill_ratios

        # 2. Introduce a tie-breaking component.  Prioritize bins with smaller remaining capacity
        #    *before* adding the item to avoid fragmentation if fill_ratios are similar.
        #    Add a small value scaled to remaining capacity (penalize lower remain cap before insert).

        priorities[feasible_mask] += 0.1 * (1 - remaining_capacities / np.max(bins_remain_cap)) #Scale relative to max capacity

        # 3. Favor bins close to full (before placing the current item) but still big enough.
        # Helps balance bin utilization. Add a capacity penalty term. This will tend to pick bins with smallest
        # available capacity but which can still house item
        priorities[feasible_mask] += np.exp(-1 * np.abs(remaining_capacities - item) / np.std(remaining_capacities)) if np.std(remaining_capacities) > 0 else 1 #add term with exponentiated capacity penalty
    return priorities
```
