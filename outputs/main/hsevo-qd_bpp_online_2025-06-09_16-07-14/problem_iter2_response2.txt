```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Gaussian and logarithmic approaches with feasibility."""

    # Gaussian component (adaptive variance)
    mu = item
    sigma = max(item / 3.0, 0.01)  # Avoid zero sigma
    gaussian = np.exp(-((bins_remain_cap - mu) ** 2) / (2 * sigma**2))

    # Logarithmic component (emphasize near-fit)
    ratios = item / bins_remain_cap
    log_ratios = np.log(np.maximum(ratios, 0.001))  # Avoid log(0)
    log_priority = -log_ratios # Smaller bins get larger priorities.

    # Combined priority (weighted)
    priorities = 0.7 * gaussian + 0.3 * log_priority # Giving more weight to gaussian.

    # Feasibility check: ensure item fits
    priorities[bins_remain_cap < item] = -np.inf

    # Perturbation based on remaining capacity
    perturbation = 0.05 * (bins_remain_cap / np.max(bins_remain_cap))
    priorities = priorities + perturbation
    return priorities
```
