```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Gaussian fit and ratio-based priority with adaptive adjustment."""

    # Gaussian component, centered on item size
    mu = item
    sigma = item / 3.0
    gaussian = np.exp(-((bins_remain_cap - mu) ** 2) / (2 * sigma**2))

    # Ratio component, consider item size versus bin capacity
    ratios = item / bins_remain_cap
    log_ratios = np.log(ratios + 1e-6) # add small constant for numeric stability
    ratio_priority = -log_ratios #smaller the ratio, the higher the priority

    # Combine components
    priorities = 0.7 * gaussian + 0.3 * ratio_priority # Weighting

    # Perturbation to encourage filling
    perturbation = 0.1 * (bins_remain_cap / np.max(bins_remain_cap))
    priorities += perturbation

    # Enforce feasibility: bins that can't fit the item get -inf priority
    priorities[bins_remain_cap < item] = -np.inf

    return priorities
```
