```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    A more adaptive priority function for online bin packing.  Combines
    Gaussian fit, capacity ratio, and bonuses for almost-full bins, while
    also penalizing bins that are too large.  Dynamically adjusts weights
    based on average remaining capacity.
    """

    mu = item
    sigma = item / 3.0
    gaussian = np.exp(-((bins_remain_cap - mu) ** 2) / (2 * sigma**2))

    # Capacity ratio component. Add a small value to prevent division by zero.
    ratios = item / (bins_remain_cap + 1e-9)

    # Bonus for bins that are almost full (e.g., 80-95% utilized after item placement).
    almost_full_bonus = np.zeros_like(bins_remain_cap)
    almost_full_threshold_low = item * 0.05  #tuneable. item * 0.05 means bin is 95% full after item placement.
    almost_full_threshold_high = item * 0.2 #tuneable. item * 0.2 means bin is 80% full after item placement.
    almost_full_mask = (bins_remain_cap >= almost_full_threshold_low) & (bins_remain_cap <= almost_full_threshold_high)
    almost_full_bonus[almost_full_mask] = 0.5 #tuneable. This is the bonus value.

    # Penalty for bins that are much larger than the item. Avoids spreading items too thinly.
    too_large_penalty = np.zeros_like(bins_remain_cap)
    too_large_threshold = item * 2.0 #tuneable.  Bins with twice or more item capacity get penalized.
    too_large_mask = bins_remain_cap > too_large_threshold
    too_large_penalty[too_large_mask] = -0.2 #tuneable. This is the penalty value.

    # Dynamic weight adjustment based on average remaining capacity. If bins are generally full,
    # emphasize the gaussian and almost-full bonus. If bins are generally empty, emphasize
    # the capacity ratio and reduce the penalty for being too large.
    avg_remaining_capacity = np.mean(bins_remain_cap)
    capacity_ratio_weight = 0.1 #tuneable
    gaussian_weight = 1.0 #tuneable

    if avg_remaining_capacity < item * 0.75:  #tuneable. Threshold for average remaining capacity
        capacity_ratio_weight = 0.05 #tuneable
        gaussian_weight = 1.2 #tuneable
    else:
        capacity_ratio_weight = 0.2 #tuneable
        gaussian_weight = 0.8 #tuneable



    priorities = gaussian_weight * gaussian + capacity_ratio_weight * (1 - ratios) + almost_full_bonus + too_large_penalty

    # Never pick impossible bins.
    priorities[bins_remain_cap < item] = -np.inf

    return priorities
```
