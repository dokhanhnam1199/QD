```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    # Calculate remaining capacity after placing the item in each bin.
    remaining_after_placement = bins_remain_cap - item

    # Initialize priorities to a low value.
    priorities = np.full(bins_remain_cap.shape, -np.inf)

    # Give high priority to bins where the item fits.
    valid_bins = remaining_after_placement >= 0
    if np.any(valid_bins):
        # Prioritize bins based on how full they would be after placement.
        # Bins with smaller remaining capacity (but still fitting the item) get higher priority.
        priorities[valid_bins] = bins_remain_cap[valid_bins] / (item + 1e-9) #Avoid dividing by zero

        # Add a bonus for bins that are filled closer to 100% if the item is placed.

        fill_ratio = item / bins_remain_cap[valid_bins]

        bonus = np.clip(2 - fill_ratio, 0, 1) #Higher priority given to more fully utilized bins

        priorities[valid_bins] += bonus
        

    # For bins where the item *doesn't* fit, assign a very low priority (already done)
    #return (np.array(bins_remain_cap) + item/2)/item  # this line does not correctly represent priority, but just an example for submission
    return priorities
```
