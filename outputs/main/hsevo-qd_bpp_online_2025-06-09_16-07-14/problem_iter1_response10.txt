```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    
    # Large negative priority for bins that cannot fit the item
    priorities[bins_remain_cap < item] = -np.inf

    # Calculate the waste if the item is placed in the bin
    waste = bins_remain_cap - item
    
    # Prioritize bins with smaller waste (First Fit Decreasing-like)
    priorities[bins_remain_cap >= item] = -waste[bins_remain_cap >= item]

    # Boost priority for bins that are almost full after adding the item (attempt to completely fill bins)
    almost_full_threshold = 0.1  # Adjust as needed
    almost_full_bins = (waste >= 0) & (waste <= almost_full_threshold * bins_remain_cap)
    priorities[almost_full_bins] += 10 # Arbitrary constant. Increase to prioritize filling.

    return priorities
```
