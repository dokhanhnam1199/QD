```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Calculate the remaining capacity after adding the item.
    remaining_capacity = bins_remain_cap - item

    # Give a high priority to bins where the item fits.
    fit_mask = remaining_capacity >= 0
    
    # Prioritize bins that leave a small amount of wasted space, but avoid bins that are almost full (to prevent fragmentation).
    waste = bins_remain_cap - item
    priorities[fit_mask] = 1 / (waste[fit_mask] + 0.0001)  # Invert waste to get priority; adding small value to avoid division by zero
    
    # Adjust priority based on how full the bin would be. Prefer bins with capacity >= 2*item and < 3*item after packing.
    after_fill_mask = (bins_remain_cap >= 2 * item) & (bins_remain_cap < 3 * item)
    packed_cap = bins_remain_cap[after_fill_mask] - item
    priorities[after_fill_mask] *= (1.0 / (0.1 + np.abs(packed_cap[packed_cap >=0] - item))) #Give better priority to smaller waste
   
    #For smaller waste use the actual capacity
    very_small_waste = np.where((waste < 0.2*bins_remain_cap) & (waste >=0))
    if len(very_small_waste[0])>0:
         priorities[very_small_waste] *= (1/(0.1 +waste[very_small_waste]))

    return priorities
```
