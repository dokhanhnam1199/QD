{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, iteration: int = 0, total_items: int = 0) -> np.ndarray:\n    \"\"\"Combines Gaussian fit, capacity ratio, and adaptive exploration for bin selection.\"\"\"\n\n    mu = item\n    sigma = item / 3.0  # Scale sigma relative to item size.\n    gaussian = np.exp(-((bins_remain_cap - mu) ** 2) / (2 * sigma**2))\n\n    ratios = item / (bins_remain_cap + 1e-9) # Add small value to avoid division by zero.\n    priorities = gaussian + 0.1 * (1 - ratios)  # Combine Gaussian and capacity ratio\n\n    # Adaptive exploration: Perturb priorities based on iteration and bin utilization.\n    # As we pack more items or iterate more, explore less.\n    exploration_factor = np.exp(-iteration / (total_items + 1e-9)) if total_items > 0 else 1.0\n\n    # Give a small bonus to almost full bins to encourage their use.\n    almost_full_bonus = np.where((bins_remain_cap - item) < 0.1 * item, 0.2, 0)\n    priorities += almost_full_bonus * exploration_factor\n\n    priorities[bins_remain_cap < item] = -np.inf  # Never pick impossible bins.\n\n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}