import numpy as np

def priority_v2(item: float,
                bins_remain_cap: np.ndarray,
                iteration: int = 0,
                total_items: int = 0,
                sigma_scale: float = 3.430191487946106,
                capacity_ratio_weight: float = 0.26412635206222973,
                almost_full_threshold: float = 0.05741515846659801,
                almost_full_bonus_value: float = 0.3213158661338297,
                exploration_decay_rate: float = 0.7339335860767795) -> np.ndarray:
    """Combines Gaussian fit, capacity ratio, and adaptive exploration for bin selection."""

    mu = item
    sigma = item / sigma_scale  # Scale sigma relative to item size.
    gaussian = np.exp(-((bins_remain_cap - mu) ** 2) / (2 * sigma**2))

    ratios = item / (bins_remain_cap + 1e-9) # Add small value to avoid division by zero.
    priorities = gaussian + capacity_ratio_weight * (1 - ratios)  # Combine Gaussian and capacity ratio

    # Adaptive exploration: Perturb priorities based on iteration and bin utilization.
    # As we pack more items or iterate more, explore less.
    exploration_factor = np.exp(-iteration / (total_items + 1e-9)) if total_items > 0 else exploration_decay_rate

    # Give a small bonus to almost full bins to encourage their use.
    almost_full_bonus = np.where((bins_remain_cap - item) < almost_full_threshold * item, almost_full_bonus_value, 0)
    priorities += almost_full_bonus * exploration_factor

    priorities[bins_remain_cap < item] = -np.inf  # Never pick impossible bins.

    return priorities
