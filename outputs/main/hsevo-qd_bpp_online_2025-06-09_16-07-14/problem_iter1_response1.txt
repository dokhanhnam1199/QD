```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Inspired by space-time curvature, we prioritize bins where the item's 'mass'
    (size) causes a greater 'distortion' relative to the bin's remaining capacity.
    Also favors bins where the item fits (i.e., avoid overflowing bins unless truly necessary).

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # Calculate a "curvature" factor, favoring near fits but penalizing overflow.
    curvature = np.where(
        bins_remain_cap >= item,
        (bins_remain_cap - item + 1e-9) / (bins_remain_cap + 1e-9),  # near fit preferred
        -np.abs(bins_remain_cap - item)  # overflow heavily penalized
    )

    # Give higher priority to bins closer to being full (after fitting item).
    # This part acts as a "gravitational pull" toward bins that are likely
    # to be completely filled. It resembles mass attracting other mass.
    fill_factor = np.where(
        bins_remain_cap >= item,
        item / (bins_remain_cap + 1e-9), # use remaining capacity when item fits
        0  # avoid using bins if item can't fit.
    )
   # Combines both
    priorities =  curvature + 0.5*fill_factor # a small weight

    return priorities
```
