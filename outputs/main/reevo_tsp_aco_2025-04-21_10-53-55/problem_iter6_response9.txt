```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors and adaptive sparsification.
    This version incorporates geometric mean for robustness, enhanced normalization,
    and a refined centrality measure.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                     representing the heuristic values (prior indicators).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate nearest neighbors for each node.
    nearest_neighbors = []
    for i in range(n):
        distances = distance_matrix[i].copy()
        distances[i] = np.inf  # Exclude self-loop
        nearest_neighbors.append(np.argsort(distances))

    # Calculate a centrality measure (harmonic mean distance to neighbors).
    neighbor_distances = []
    for i in range(n):
        neighbors = nearest_neighbors[i]
        k = min(5, n - 1)  # Consider up to 5 nearest neighbors
        neighbor_distances_i = distance_matrix[i, neighbors[:k]]
        neighbor_distances.append(neighbor_distances_i)
    
    centrality = np.zeros(n)
    for i in range(n):
      centrality[i] = np.mean(1 / (neighbor_distances[i] + 1e-9))  # Harmonic mean of neighbor distances
    centrality = centrality / np.max(centrality)  # Normalize

    # Inverse distance factor
    inverse_distance = 1 / (distance_matrix + 1e-9)
    inverse_distance = inverse_distance / np.max(inverse_distance)  # Normalize

    # Combine factors: inverse distance, nearest neighbor rank, and centrality.
    for i in range(n):
        for j in range(n):
            if i != j:
                # Rank of j in i's nearest neighbors and vice versa
                rank_i = np.where(nearest_neighbors[i] == j)[0][0]
                rank_j = np.where(nearest_neighbors[j] == i)[0][0]
                rank_factor = 1 / (rank_i + rank_j + 1)

                centrality_factor = (centrality[i] + centrality[j])

                # Geometric mean for robust combination
                heuristic_matrix[i, j] = (inverse_distance[i,j] * rank_factor * centrality_factor)**(1/3)

    # Adaptive Sparsification
    quantile_level = 0.75  # Adjust as needed
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], quantile_level) # only consider elements > 0

    heuristic_matrix[heuristic_matrix < threshold] = 0 #sparsify

    # Row-wise normalization to avoid zero rows after sparsification, handling potential NaNs
    for i in range(n):
        row_sum = np.sum(heuristic_matrix[i])
        if row_sum > 0:
            heuristic_matrix[i] = heuristic_matrix[i] / row_sum
        else:
            heuristic_matrix[i] = np.ones(n) / n  # Assign uniform probability if row is all zeros.


    return heuristic_matrix
```
