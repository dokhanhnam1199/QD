{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP using a combination of factors, sparsification, and adaptive weights.\n\n    Args:\n        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.\n\n    Returns:\n        np.ndarray: A 2D numpy array of the same shape as distance_matrix,\n                     representing the heuristic values (prior indicators).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate nearest neighbors for each node.\n    nearest_neighbors = []\n    for i in range(n):\n        distances = distance_matrix[i].copy()\n        distances[i] = np.inf  # Exclude self-loop\n        nearest_neighbors.append(np.argsort(distances))\n\n    # Calculate a centrality measure (degree of connectivity).\n    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=0)\n\n    # Adaptive weights based on problem size\n    weight_distance = 0.6\n    weight_rank = 0.3\n    weight_centrality = 0.1\n\n    # Combine factors: inverse distance, nearest neighbor rank, and centrality.\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                distance_factor = 1 / (distance_matrix[i, j] + 1e-9)\n\n                # Rank of j in i's nearest neighbors and vice versa\n                rank_i = np.where(nearest_neighbors[i] == j)[0][0]\n                rank_j = np.where(nearest_neighbors[j] == i)[0][0]\n                rank_factor = 1 / (rank_i + rank_j + 1)\n\n                centrality_factor = (degree_centrality[i] + degree_centrality[j])\n\n                heuristic_matrix[i, j] = (weight_distance * distance_factor +\n                                            weight_rank * rank_factor +\n                                            weight_centrality * centrality_factor)\n\n    # Sparsify the matrix based on a quantile threshold\n    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.75)  # 75th percentile\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    # Normalize each row to avoid domination by high values\n    for i in range(n):\n        row_sum = np.sum(heuristic_matrix[i])\n        if row_sum > 0:\n            heuristic_matrix[i] /= row_sum\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP using a combination of factors and sparsification.\n    This version incorporates adaptive weighting and normalization.\n\n    Args:\n        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.\n\n    Returns:\n        np.ndarray: A 2D numpy array of the same shape as distance_matrix,\n                     representing the heuristic values (prior indicators).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate nearest neighbors for each node.\n    nearest_neighbors = []\n    for i in range(n):\n        distances = distance_matrix[i].copy()\n        distances[i] = np.inf  # Exclude self-loop\n        nearest_neighbors.append(np.argsort(distances))\n\n    # Calculate a centrality measure (degree of connectivity).\n    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=0)\n    degree_centrality_normalized = (degree_centrality - np.min(degree_centrality)) / (np.max(degree_centrality) - np.min(degree_centrality) + 1e-9)\n\n    # Inverse distance factor\n    inverse_distance = 1 / (distance_matrix + 1e-9)\n    inverse_distance_normalized = (inverse_distance - np.min(inverse_distance)) / (np.max(inverse_distance) - np.min(inverse_distance) + 1e-9)\n\n    # Combine factors: inverse distance, nearest neighbor rank, and centrality.\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Rank of j in i's nearest neighbors and vice versa\n                rank_i = np.where(nearest_neighbors[i] == j)[0][0]\n                rank_j = np.where(nearest_neighbors[j] == i)[0][0]\n                rank_factor = 1 / (rank_i + rank_j + 1)\n\n                # Adaptive weights (adjust based on problem characteristics)\n                weight_distance = 0.6\n                weight_rank = 0.2\n                weight_centrality = 0.2\n\n                heuristic_matrix[i, j] = (\n                    weight_distance * inverse_distance_normalized[i, j] +\n                    weight_rank * rank_factor +\n                    weight_centrality * (degree_centrality_normalized[i] + degree_centrality_normalized[j])\n                )\n\n    # Sparsify the matrix: keep only the top k edges for each node using a quantile.\n    quantile_threshold = 0.75  # Keep edges above this quantile for each row\n    for i in range(n):\n        row = heuristic_matrix[i].copy()\n        threshold = np.quantile(row[row > 0], quantile_threshold)  # Consider only positive values for quantile\n        heuristic_matrix[i][row < threshold] = 0\n\n    return heuristic_matrix\n\n[Reflection]\nNormalizing inputs and sparsifying rows independently improves heuristic quality for TSP.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}