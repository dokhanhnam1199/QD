```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) that combines
    multiple factors to estimate the "promise" of including each edge in a solution.
    This version attempts to be more sophisticated than a simple inverse distance.

    Args:
        distance_matrix (np.ndarray): A square matrix where element (i, j) represents
                                      the distance between city i and city j.  It is
                                      assumed that the diagonal elements are zero or very large
                                      to discourage self-loops.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element
                      (i, j) indicates the desirability of including the edge (i, j) in
                      the TSP tour. Higher values indicate more promising edges.
    """

    n = distance_matrix.shape[0]

    # 1. Inverse distance: Shorter distances are generally more desirable.
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero

    # 2. Nearest neighbor influence:  Edges connecting to cities with few nearby neighbors are more crucial.
    #    For each city, find the distance to its k-th nearest neighbor. A smaller k-th nearest
    #    neighbor distance indicates a denser local neighborhood. Edges connected to less dense
    #    areas might be more important to ensure connectivity.

    k = min(5, n - 1)  # Consider up to the 5th nearest neighbor, or fewer if n is small
    nearest_neighbor_distances = np.zeros(n)
    for i in range(n):
        distances = distance_matrix[i, :]
        nearest_neighbor_distances[i] = np.partition(distances, k + 1)[k + 1]

    neighbor_influence = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            neighbor_influence[i, j] = nearest_neighbor_distances[i] + nearest_neighbor_distances[j]

    # 3. Combination and scaling: Combine the factors.  Experiment with different weights.
    heuristic_matrix = inverse_distance * (1 + neighbor_influence)

    # 4. Sparsification: Zero out edges that are very unlikely to be in the optimal tour
    #    based on a threshold derived from the mean of the heuristic matrix. This promotes
    #    exploration of more focused search spaces.

    threshold = np.mean(heuristic_matrix) * 0.2  # Tune this threshold multiplier
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Normalize the matrix to have values between 0 and 1. This isn't strictly necessary
    # but might be helpful for some algorithms that use it.  Be aware this can also zero-out
    # very small heuristic values due to floating-point issues, so exercise caution if your
    # algorithm relies on edges with very weak probability remaining non-zero.
    max_val = np.max(heuristic_matrix)
    if max_val > 0: #Avoid division by zero.
        heuristic_matrix = heuristic_matrix / max_val

    return heuristic_matrix
```
