{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP using a combination of factors and sparsification.\n    This version incorporates adaptive weighting and normalization.\n\n    Args:\n        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.\n\n    Returns:\n        np.ndarray: A 2D numpy array of the same shape as distance_matrix,\n                     representing the heuristic values (prior indicators).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate nearest neighbors for each node.\n    nearest_neighbors = []\n    for i in range(n):\n        distances = distance_matrix[i].copy()\n        distances[i] = np.inf  # Exclude self-loop\n        nearest_neighbors.append(np.argsort(distances))\n\n    # Calculate a centrality measure (degree of connectivity).\n    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=0)\n    degree_centrality_normalized = (degree_centrality - np.min(degree_centrality)) / (np.max(degree_centrality) - np.min(degree_centrality) + 1e-9)\n\n    # Inverse distance factor\n    inverse_distance = 1 / (distance_matrix + 1e-9)\n    inverse_distance_normalized = (inverse_distance - np.min(inverse_distance)) / (np.max(inverse_distance) - np.min(inverse_distance) + 1e-9)\n\n    # Combine factors: inverse distance, nearest neighbor rank, and centrality.\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Rank of j in i's nearest neighbors and vice versa\n                rank_i = np.where(nearest_neighbors[i] == j)[0][0]\n                rank_j = np.where(nearest_neighbors[j] == i)[0][0]\n                rank_factor = 1 / (rank_i + rank_j + 1)\n\n                # Adaptive weights (adjust based on problem characteristics)\n                weight_distance = 0.6\n                weight_rank = 0.2\n                weight_centrality = 0.2\n\n                heuristic_matrix[i, j] = (\n                    weight_distance * inverse_distance_normalized[i, j] +\n                    weight_rank * rank_factor +\n                    weight_centrality * (degree_centrality_normalized[i] + degree_centrality_normalized[j])\n                )\n\n    # Sparsify the matrix: keep only the top k edges for each node using a quantile.\n    quantile_threshold = 0.75  # Keep edges above this quantile for each row\n    for i in range(n):\n        row = heuristic_matrix[i].copy()\n        threshold = np.quantile(row[row > 0], quantile_threshold)  # Consider only positive values for quantile\n        heuristic_matrix[i][row < threshold] = 0\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Improved heuristic function for the Traveling Salesman Problem (TSP).\n\n    This version refines the heuristics by considering nearest neighbors,\n    adaptive weighting, and more informed sparsification.\n\n    Args:\n        distance_matrix (np.ndarray): A square matrix representing the distances between cities.\n\n    Returns:\n        np.ndarray: A matrix of the same shape as distance_matrix, representing the heuristic values for each edge.\n                      Higher values indicate a more promising edge.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # 1. Inverse distance: Shorter distances are generally more desirable.\n    inverse_distance = 1.0 / (distance_matrix + 1e-6)  # Adding a small value to avoid division by zero\n\n    # 2. Nearest Neighbor heuristic: edges connected to nodes with high average distance to others should be favored\n    nearest_neighbors = np.argsort(distance_matrix, axis=1)[:, 1:4]  # top 3 nearest neighbours\n    neighbor_distance_sum = np.zeros(n)\n    for i in range(n):\n        neighbor_distance_sum[i] = np.sum(distance_matrix[i, nearest_neighbors[i]])\n\n    neighbor_score_matrix = np.zeros((n, n))\n    for i in range(n):\n        for j in range(n):\n            neighbor_score_matrix[i, j] = neighbor_distance_sum[i] + neighbor_distance_sum[j]\n\n    # 3. Adaptive weighting: Adjust the weights based on the average distance\n    average_distance = np.mean(distance_matrix)\n    distance_weight = 1.0 / (1 + average_distance)  # Scale inversely with average distance\n    neighbor_weight = 0.1 + 0.5 * average_distance  # Scale linearly with average distance\n\n    # 4. Informed sparsification: Remove edges significantly longer than the node's typical distance\n    node_average_distances = np.mean(distance_matrix, axis=1)\n    sparsification_threshold_matrix = np.zeros((n,n))\n    for i in range(n):\n        for j in range(n):\n            sparsification_threshold_matrix[i,j] = 1.5 * (node_average_distances[i] + node_average_distances[j])/2 # dynamic threshold for each edge\n    sparse_mask = distance_matrix <= sparsification_threshold_matrix\n\n    # 5. Combine heuristics and apply sparsification mask.\n    heuristic_matrix = distance_weight * inverse_distance + neighbor_weight * neighbor_score_matrix\n    heuristic_matrix = heuristic_matrix * sparse_mask  # remove the sparse parts\n\n    return heuristic_matrix\n\n[Reflection]\nConsider more problem-specific information like average distance and dynamic sparsification thresholds.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}