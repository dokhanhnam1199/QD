```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP).

    This function combines several factors to determine how promising it is to include each edge in a solution.
    It considers:

    1.  Inverse distance: Shorter edges are generally more desirable.
    2.  Node degree: Edges connected to nodes with fewer connections are prioritized (encourages exploration).
    3.  Global distance context: Edges that are significantly shorter than the average distance are preferred.
    4.  Sparsification: Edges with very low promise are set to zero to reduce the search space.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix between cities.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as the distance matrix,
                      representing the prior indicators of how promising it is to include each edge in a solution.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # 2. Node degree - prioritize edges connected to nodes with few connections
    degree = np.sum(distance_matrix > 0, axis=0)
    node_degree_factor = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                node_degree_factor[i, j] = 1 / (degree[i] + degree[j] + 1e-9)

    # 3. Global distance context - prioritize edges shorter than average
    average_distance = np.mean(distance_matrix[distance_matrix > 0])
    distance_context_factor = np.exp(-distance_matrix / average_distance)  # Shorter edges have higher values

    # Combine factors
    heuristic_matrix = inverse_distance * node_degree_factor * distance_context_factor

    # 4. Sparsification - set unpromising edges to zero
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.2)  # Keep top 80% of edges
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Zero out the diagonal to prevent self-loops
    np.fill_diagonal(heuristic_matrix, 0)

    return heuristic_matrix
```
