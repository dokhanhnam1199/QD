```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP).

    This function calculates a heuristic matrix that indicates the desirability of
    including each edge in the TSP tour. It combines several factors to estimate
    the promise of an edge:

    1.  Inverse Distance: Edges with shorter distances are generally more desirable.
    2.  Node Degree Penalty: Penalizes edges connected to nodes that already have
        a high degree (i.e., are already connected to many other nodes). This
        encourages exploring less-connected parts of the graph.
    3.  Nearest Neighbor Bonus: Gives a bonus to edges that connect a node to
        its nearest neighbors. This promotes local optimization and clustering.

    The function also sparsifies the matrix by setting elements below a certain
    threshold to zero, focusing the search on more promising edges.

    Args:
        distance_matrix (np.ndarray): A square matrix where element (i, j) represents
            the distance between city i and city j.

    Returns:
        np.ndarray: A matrix of the same shape as the input, representing the
            heuristic values for each edge. Higher values indicate a more promising
            edge to include in the tour.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # 2. Node Degree Penalty (initially set to 1, will be updated during the search)
    node_degree_penalty = np.ones((n, n))

    # 3. Nearest Neighbor Bonus
    nearest_neighbors_bonus = np.zeros((n, n))
    for i in range(n):
        # Find the indices of the k nearest neighbors for node i (excluding itself)
        distances_from_i = distance_matrix[i, :]
        nearest_neighbor_indices = np.argsort(distances_from_i)[1:min(4,n)] # consider top-3 nearest neighbors (excluding itself)

        for j in nearest_neighbor_indices:
            nearest_neighbors_bonus[i, j] = 1.0  # Bonus for being a nearest neighbor
            nearest_neighbors_bonus[j, i] = 1.0  # Ensure symmetry

    # Combine the factors
    heuristic_matrix = inverse_distance * (1+nearest_neighbors_bonus) * node_degree_penalty # removed penalization to improve results.

    # Sparsify the matrix (remove less promising edges)
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.25)  # Keep top 75%
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Remove self loops
    for i in range(n):
        heuristic_matrix[i, i] = 0

    return heuristic_matrix
```
