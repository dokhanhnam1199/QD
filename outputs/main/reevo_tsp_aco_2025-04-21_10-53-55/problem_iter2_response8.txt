```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) using a combination of factors
    and stochastic solution sampling principles.  This version incorporates edge importance.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix
                                       where distance_matrix[i][j] is the distance between node i and node j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    representing the prior indicators of how promising it is to include each edge in a solution.
                    Higher values indicate more promising edges.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Heuristic 1: Inverse distance
    inverse_distance = 1 / (distance_matrix + 1e-9)

    # Heuristic 2: Savings heuristic (related to minimum spanning tree concept)
    savings = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                # Avoid using 0 in distance calculation (0 implies no edge)
                valid_distances_i = distance_matrix[i, :][distance_matrix[i, :] > 0]
                valid_distances_j = distance_matrix[j, :][distance_matrix[j, :] > 0]

                if valid_distances_i.size > 0 and valid_distances_j.size > 0:
                    min_dist_i = np.min(valid_distances_i)
                    min_dist_j = np.min(valid_distances_j)
                    savings[i, j] = min_dist_i + min_dist_j - distance_matrix[i, j]
                else:
                    savings[i,j] = 0 # No savings if isolated node

    # Heuristic 3: Node degree desirability.  Nodes that need to be connected are favored.
    degree_heuristic = np.ones_like(distance_matrix, dtype=float)

    # Heuristic 4: Edge Importance. Edges connecting geographically dispersed nodes are favored.
    edge_importance = np.zeros_like(distance_matrix, dtype=float)
    center = np.mean(np.array([[i] for i in range(n)]), axis=0)

    for i in range(n):
        for j in range(n):
            if i != j:
                pos_i = np.array([i])
                pos_j = np.array([j])
                edge_importance[i,j] = np.linalg.norm(pos_i - pos_j)


    # Combine the heuristics (weighted sum)
    heuristic_matrix = 0.5 * inverse_distance + 0.2 * savings + 0.1 * degree_heuristic + 0.2 * edge_importance

    # Sparsify the matrix:  Keep only a fraction of the most promising edges for each node
    sparsity_factor = 0.3
    for i in range(n):
        row = heuristic_matrix[i, :]
        threshold = np.quantile(row, 1 - sparsity_factor)
        heuristic_matrix[i, row < threshold] = 0

    return heuristic_matrix
```
