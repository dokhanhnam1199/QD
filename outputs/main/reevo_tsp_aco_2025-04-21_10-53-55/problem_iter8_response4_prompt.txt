{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP using inverse distance, neighbor rank, centrality, and sparsification.\n    Normalization is performed carefully to avoid zero rows/columns after sparsification.\n\n    Args:\n        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.\n\n    Returns:\n        np.ndarray: A 2D numpy array of the same shape as distance_matrix,\n                     representing the heuristic values (prior indicators).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate nearest neighbors for each node, excluding self-loops.\n    nearest_neighbors = []\n    for i in range(n):\n        distances = distance_matrix[i].copy()\n        distances[i] = np.inf  # Exclude self-loop\n        nearest_neighbors.append(np.argsort(distances))\n\n    # Calculate degree centrality, representing node connectivity.\n    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=0)\n    degree_centrality /= np.max(degree_centrality)  # Normalize\n\n    # Inverse distance as a basic desirability measure.\n    inverse_distance = 1 / (distance_matrix + 1e-9)\n    inverse_distance /= np.max(inverse_distance)  # Normalize\n\n    # Combine factors to create the heuristic matrix.\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Rank of j in i's neighbors and vice versa.\n                rank_i = np.where(nearest_neighbors[i] == j)[0][0]\n                rank_j = np.where(nearest_neighbors[j] == i)[0][0]\n                rank_factor = 1 / (rank_i + rank_j + 1)\n\n                # Combine centrality of both nodes.\n                centrality_factor = (degree_centrality[i] + degree_centrality[j])\n\n                # Combine factors: distance, rank, centrality\n                heuristic_matrix[i, j] = inverse_distance[i, j] * rank_factor * centrality_factor\n\n    # Adaptive Sparsification: Remove less promising edges based on a quantile threshold.\n    quantile_level = 0.75  # Adjust as needed.\n    # Only consider non-zero elements for quantile calculation.\n    positive_values = heuristic_matrix[heuristic_matrix > 0]\n    if positive_values.size > 0:  # Check if there are any positive values to avoid errors\n        threshold = np.quantile(positive_values, quantile_level)\n        heuristic_matrix[heuristic_matrix < threshold] = 0  # Set low-value edges to zero.\n\n    # Row-wise normalization to ensure rows are not all zeros after sparsification.\n    for i in range(n):\n        row_sum = np.sum(heuristic_matrix[i])\n        if row_sum > 0:\n            heuristic_matrix[i] = heuristic_matrix[i] / row_sum\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP using node ranking, centrality, adaptive sparsification,\n    and row-wise normalization. Geometric mean centrality is prioritized.\n\n    Args:\n        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.\n\n    Returns:\n        np.ndarray: A 2D numpy array of the same shape as distance_matrix,\n                     representing the heuristic values (prior indicators).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate nearest neighbors for each node.\n    nearest_neighbors = []\n    for i in range(n):\n        distances = distance_matrix[i].copy()\n        distances[i] = np.inf  # Exclude self-loop\n        nearest_neighbors.append(np.argsort(distances))\n\n    # Calculate geometric mean centrality. Add a small constant to avoid zero values.\n    centrality = np.zeros(n)\n    for i in range(n):\n        centrality[i] = np.exp(np.mean(np.log(1 / (distance_matrix[i, :] + 0.001))))\n    centrality = centrality / np.max(centrality) # Normalize\n\n    # Inverse distance factor\n    inverse_distance = 1 / (distance_matrix + 1e-9)\n    inverse_distance = inverse_distance / np.max(inverse_distance)  # Normalize\n\n    # Combine factors: inverse distance, nearest neighbor rank, and centrality.\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Rank of j in i's nearest neighbors and vice versa\n                rank_i = np.where(nearest_neighbors[i] == j)[0][0]\n                rank_j = np.where(nearest_neighbors[j] == i)[0][0]\n                rank_factor = 1 / (rank_i + rank_j + 1)\n\n                # Prioritize Geometric Mean Centrality\n                centrality_factor = np.sqrt(centrality[i] * centrality[j])\n\n                heuristic_matrix[i, j] = inverse_distance[i, j] * rank_factor * centrality_factor\n\n    # Adaptive Sparsification - Adjusted Threshold\n    quantile_level = 0.75 # Reduced Sparsity compared to v1 to avoid unconnected components\n    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], quantile_level)\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    # Row-wise normalization to avoid zero rows after sparsification\n    for i in range(n):\n        row_sum = np.sum(heuristic_matrix[i])\n        if row_sum > 0:\n            heuristic_matrix[i] = heuristic_matrix[i] / row_sum\n        else:\n            # If row is all zeros, connect to a few nearest neighbors to ensure connectivity\n            k = 3 # Connect to top k nearest neighbours\n            top_k_indices = nearest_neighbors[i][:k]\n            for neighbor in top_k_indices:\n                heuristic_matrix[i, neighbor] = 0.01 #Assign small probability\n            heuristic_matrix[i] = heuristic_matrix[i] / np.sum(heuristic_matrix[i]) # renormalize\n\n    return heuristic_matrix\n\n[Reflection]\nGeometric mean centrality, adjusted sparsification, and connectivity maintenance improve heuristic quality.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}