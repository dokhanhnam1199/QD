```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using normalized inverse distance, geometric mean centrality,
    rank-based information, adaptive sparsification, and row-wise processing.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                     representing the heuristic values (prior indicators).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Normalized Inverse Distance
    inverse_distance = 1 / (distance_matrix + 1e-9)

    # Row-wise normalization
    row_sums = np.sum(inverse_distance, axis=1, keepdims=True)
    inverse_distance = inverse_distance / (row_sums + 1e-9)

    # Column-wise normalization
    col_sums = np.sum(inverse_distance, axis=0, keepdims=True)
    inverse_distance = inverse_distance / (col_sums + 1e-9)

    # 2. Geometric Mean Centrality
    centrality = np.zeros(n)
    for i in range(n):
        product = 1.0
        for j in range(n):
            if i != j:
                product *= inverse_distance[i, j] + 1e-9
        centrality[i] = product**(1/(n-1)) if n > 1 else 0.0  # Geometric mean
    centrality = (centrality - np.min(centrality)) / (np.max(centrality) - np.min(centrality) + 1e-9) # Normalize

    # 3. Rank-Based Information (Nearest Neighbors)
    nearest_neighbors = []
    for i in range(n):
        distances = distance_matrix[i].copy()
        distances[i] = np.inf  # Exclude self-loop
        nearest_neighbors.append(np.argsort(distances))

    # Combine factors and compute heuristic matrix
    for i in range(n):
        for j in range(n):
            if i != j:
                rank_i = np.where(nearest_neighbors[i] == j)[0][0]
                rank_j = np.where(nearest_neighbors[j] == i)[0][0]
                rank_factor = 1 / (rank_i + rank_j + 1)  # rank based

                centrality_factor = np.sqrt(centrality[i] * centrality[j])

                heuristic_matrix[i, j] = inverse_distance[i, j] * rank_factor * centrality_factor

    # 4. Adaptive Sparsification
    quantile_level = 0.7 # adjust sparsity here.
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], quantile_level)
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # 5. Row-wise normalization (maintain connectivity)
    for i in range(n):
        row_sum = np.sum(heuristic_matrix[i])
        if row_sum > 0:
            heuristic_matrix[i] = heuristic_matrix[i] / row_sum
        else:
            # Ensure at least one edge is selected from each row.
            min_dist_idx = np.argmin(distance_matrix[i])
            heuristic_matrix[i, min_dist_idx] = 1.0 # default value
            heuristic_matrix[i] = heuristic_matrix[i] / np.sum(heuristic_matrix[i])


    return heuristic_matrix
```
