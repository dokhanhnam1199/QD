{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Traveling Salesman Problem (TSP) that combines\n    multiple factors to estimate the \"promise\" of including each edge in a solution.\n    This version incorporates local neighborhood density, tunable combination weights,\n    and adaptive sparsification based on quantiles to avoid unintended side effects.\n\n    Args:\n        distance_matrix (np.ndarray): A square matrix where element (i, j) represents\n                                      the distance between city i and city j.  It is\n                                      assumed that the diagonal elements are zero or very large\n                                      to discourage self-loops.\n\n    Returns:\n        np.ndarray: A matrix of the same shape as distance_matrix, where each element\n                      (i, j) indicates the desirability of including the edge (i, j) in\n                      the TSP tour. Higher values indicate more promising edges.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n\n    # 1. Inverse distance: Shorter distances are generally more desirable.\n    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero\n\n    # 2. Local neighborhood density:  Cities in denser areas are likely to have\n    #    more alternative paths.  Edges connecting to sparser areas are more crucial.\n    #    Calculate the average distance to the k nearest neighbors for each city.\n\n    k = min(5, n - 1)  # Consider up to the 5th nearest neighbor, or fewer if n is small\n    neighbor_densities = np.zeros(n)\n    for i in range(n):\n        distances = distance_matrix[i, :]\n        nearest_neighbors = np.partition(distances, k + 1)[1:k + 1]  # Exclude self (0th)\n        neighbor_densities[i] = np.mean(nearest_neighbors)  # Average dist to k nearest\n\n    density_influence = np.zeros_like(distance_matrix)\n    for i in range(n):\n        for j in range(n):\n            density_influence[i, j] = neighbor_densities[i] + neighbor_densities[j]\n\n    # 3. Combination and scaling: Combine the factors with tunable weights.\n    weight_distance = 0.6  # Weight for inverse distance\n    weight_density = 0.4  # Weight for density influence\n\n    heuristic_matrix = (weight_distance * inverse_distance +\n                        weight_density * (1 / (density_influence + 1e-9))) #Add constant to avoid zero division\n\n\n    # 4. Sparsification: Zero out edges that are very unlikely to be in the optimal tour\n    #    based on an adaptive threshold derived from quantiles of the heuristic matrix.\n    #    This promotes exploration of more focused search spaces.\n    sparsity_factor = 0.7 #tuneable\n\n    for i in range(n):\n        row = heuristic_matrix[i, :]\n        threshold = np.quantile(row, sparsity_factor)\n        heuristic_matrix[i, row < threshold] = 0\n    # 5. Normalization: Normalize to [0, 1] *only if there are non-zero values*\n    #    and only *after* sparsification. This prevents small values from being\n    #    eliminated due to floating-point precision issues.\n\n    max_val = np.max(heuristic_matrix)\n    if max_val > 0:\n        heuristic_matrix = heuristic_matrix / max_val\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP using a combination of factors and adaptive sparsification.\n\n    Args:\n        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.\n\n    Returns:\n        np.ndarray: A 2D numpy array of the same shape as distance_matrix,\n                     representing the heuristic values (prior indicators).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate nearest neighbors for each node.\n    nearest_neighbors = []\n    for i in range(n):\n        distances = distance_matrix[i].copy()\n        distances[i] = np.inf  # Exclude self-loop\n        nearest_neighbors.append(np.argsort(distances))\n\n    # Calculate a centrality measure (degree of connectivity).\n    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=0)\n    degree_centrality = degree_centrality / np.max(degree_centrality) # Normalize\n\n    # Inverse distance factor\n    inverse_distance = 1 / (distance_matrix + 1e-9)\n    inverse_distance = inverse_distance / np.max(inverse_distance) # Normalize\n\n    # Combine factors: inverse distance, nearest neighbor rank, and centrality.\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Rank of j in i's nearest neighbors and vice versa\n                rank_i = np.where(nearest_neighbors[i] == j)[0][0]\n                rank_j = np.where(nearest_neighbors[j] == i)[0][0]\n                rank_factor = 1 / (rank_i + rank_j + 1)\n\n                centrality_factor = (degree_centrality[i] + degree_centrality[j])\n\n                heuristic_matrix[i, j] = inverse_distance[i,j] * rank_factor * centrality_factor\n\n    # Adaptive Sparsification\n    quantile_level = 0.75  # Adjust as needed\n    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], quantile_level) # only consider elements > 0\n\n    heuristic_matrix[heuristic_matrix < threshold] = 0 #sparsify\n\n    # Row-wise normalization to avoid zero rows after sparsification\n    for i in range(n):\n      row_sum = np.sum(heuristic_matrix[i])\n      if row_sum > 0:\n        heuristic_matrix[i] = heuristic_matrix[i] / row_sum\n\n\n    return heuristic_matrix\n\n[Reflection]\nFocus on informative features, normalization, and careful sparsification to avoid zero rows/columns.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}