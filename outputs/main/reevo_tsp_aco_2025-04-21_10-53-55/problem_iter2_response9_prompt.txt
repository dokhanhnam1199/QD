{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Traveling Salesman Problem (TSP).\n\n    This version combines several factors to determine the 'promisingness' of each edge:\n    - Inverse distance: Shorter distances are preferred.\n    - Node degree: Nodes with fewer connections should be prioritized to avoid isolated clusters.\n    - Closeness centrality: Edges connecting nodes that are centrally located are favored.\n    - Sparsification: A threshold is applied to set unpromising edges to zero.\n\n    Args:\n        distance_matrix (np.ndarray): A square matrix where distance_matrix[i, j]\n                                       represents the distance between node i and node j.\n\n    Returns:\n        np.ndarray: A matrix of the same shape as distance_matrix, where each element\n                    indicates the 'promisingness' of including the corresponding edge in a solution.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Inverse distance\n    inverse_distance = 1 / (distance_matrix + 1e-6)  # Add a small constant to avoid division by zero\n\n    # Node degree (prioritize nodes with fewer connections in initial heuristic)\n    degree = np.sum(distance_matrix > 0, axis=0)\n    degree_factor = np.outer(degree, degree) / (n**2 + 1e-6)  # Normalize\n\n    # Closeness centrality (try to choose links to central nodes)\n    closeness = np.zeros(n)\n    for i in range(n):\n        closeness[i] = np.sum(1 / (distance_matrix[i, :] + 1e-6))  # Sum of inverse distances to other nodes\n\n    closeness_factor = np.outer(closeness, closeness)\n\n    # Combine factors\n    heuristic_matrix = inverse_distance * (1 - degree_factor) * closeness_factor\n\n    # Sparsification (remove edges that are clearly not promising)\n    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 20)  # Keep top 80%\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Traveling Salesman Problem (TSP) that combines several factors\n    to determine the desirability of including each edge in a solution.\n\n    Args:\n        distance_matrix (np.ndarray): A square matrix representing the distances between cities.\n\n    Returns:\n        np.ndarray: A matrix of the same shape as distance_matrix, representing the heuristic values for each edge.\n                      Higher values indicate a more promising edge.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # 1. Inverse distance: Shorter distances are generally more desirable.\n    inverse_distance = 1.0 / (distance_matrix + 1e-6)  # Adding a small value to avoid division by zero\n\n    # 2. Nearest Neighbor heuristic: edges connected to nodes with high average distance to others should be favored\n    nearest_neighbors = np.argsort(distance_matrix, axis=1)[:, 1:4] # top 3 nearest neighbours\n    neighbor_distance_sum = np.zeros(n)\n    for i in range(n):\n        neighbor_distance_sum[i] = np.sum(distance_matrix[i, nearest_neighbors[i]])\n    \n    neighbor_score_matrix = np.zeros((n,n))\n    for i in range(n):\n      for j in range(n):\n        neighbor_score_matrix[i,j] = neighbor_distance_sum[i] + neighbor_distance_sum[j]\n    \n    # 3. Sparsification: Remove edges that are significantly longer than the average distance.\n    average_distance = np.mean(distance_matrix)\n    sparsification_threshold = 2.0 # Adjust this parameter to control the sparsification level.\n    sparse_mask = distance_matrix <= sparsification_threshold * average_distance\n\n    # 4. Combine heuristics and apply sparsification mask.\n    heuristic_matrix = inverse_distance + 0.1 * neighbor_score_matrix  # Weights can be adjusted\n    heuristic_matrix = heuristic_matrix * sparse_mask # remove the sparse parts\n    \n\n    return heuristic_matrix\n\n[Reflection]\nConsider nearest neighbors, adaptive weighting, and more informed sparsification for better heuristics.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}