{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP using stochastic solution sampling principles.\n    Combines multiple factors to assess edge promise and sparsifies the matrix.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix representing TSP instance.\n\n    Returns:\n        np.ndarray: Heuristic matrix indicating edge promise.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Inverse distance (primary factor)\n    inverse_distance = 1 / (distance_matrix + 1e-6)  # Adding small constant to avoid division by zero\n\n    # Nearest neighbor bonus\n    nearest_neighbors = np.argsort(distance_matrix, axis=1)[:, 1:4]  # Consider top 3 nearest neighbors\n    nearest_neighbor_bonus = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(n):\n        for neighbor in nearest_neighbors[i]:\n            nearest_neighbor_bonus[i, neighbor] = 0.5  # Reduced bonus\n\n    # Sparsification based on overall distance distribution. Calculate median, focus on short edges.\n    median_distance = np.median(distance_matrix[distance_matrix > 0]) #Exclude zeros when taking median\n    sparsification_mask = distance_matrix <= 1.5 * median_distance # Keep edges not exceeding 1.5 times the median\n\n    # Degree penalty (discourage high-degree nodes) - promotes diversity in sampling.\n    degree_penalty = np.zeros_like(distance_matrix, dtype=float)\n    avg_degree = 3  # Target average degree - keep 3 nearest neighbours on average.\n    for i in range(n):\n        neighbors = np.argsort(distance_matrix[i, :])[:int(avg_degree + 1)]\n        for j in range(n): # penalise nodes if they are overly connected.\n           if distance_matrix[i,j] > 0:\n              degree_penalty[i,j] = 1 - min(avg_degree / len(neighbors),1) # scale it.\n\n    # Combine factors with weights\n    heuristic_matrix = (\n            1.0 * inverse_distance\n            + 0.5 * nearest_neighbor_bonus\n            - 0.3*  degree_penalty\n    )\n\n    # Apply sparsification\n    heuristic_matrix[~sparsification_mask] = 0\n\n    #Symmetrize\n    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Traveling Salesman Problem (TSP) using a combination of factors:\n\n    1.  Inverse Distance: Shorter distances are generally more promising.\n    2.  Nearest Neighbor Consideration: Edges connecting a node to its nearest neighbors are favored.\n    3.  Sparseness Inducement:  Edges with significantly larger distances are penalized to promote sparsity\n        and reduce computational cost of the subsequent stochastic search.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # 1. Inverse Distance\n    inverse_distance = 1 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero\n\n    # 2. Nearest Neighbor Consideration\n    nearest_neighbors = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(n):\n        # Find indices of the k-nearest neighbors\n        top_k_indices = np.argsort(distance_matrix[i, :])[1:4] #Exclude self (distance 0)\n\n        # Assign high scores to nearest neighbor\n        nearest_neighbors[i, top_k_indices] = 1.0\n        nearest_neighbors[top_k_indices, i] = 1.0 #Symmetric\n    \n    # 3. Sparsity Inducement\n    median_distance = np.median(distance_matrix[distance_matrix > 0]) # exclude zero values for self loops\n    sparseness_factor = np.exp(-distance_matrix / median_distance)\n    \n    # Combine Factors\n    heuristic_matrix = inverse_distance * (0.5 + nearest_neighbors * 0.5 )* sparseness_factor\n\n    return heuristic_matrix\n\n[Reflection]\nPrioritize inverse distance, nearest neighbors, and sparsification. Use multiplicative combinations and tune weights empirically.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}