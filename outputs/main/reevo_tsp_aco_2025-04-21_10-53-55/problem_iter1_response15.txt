```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) using a combination of factors and sparsification.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix between cities.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix, representing the heuristic values
                      for each edge. Higher values indicate more promising edges.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate the mean distance for each city to all other cities
    mean_distances = np.mean(distance_matrix, axis=1)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Heuristic based on:
                # 1. Inverse of the distance (shorter distances are better)
                # 2. Combined mean distance (cities connected to cities with lower mean distance are better)

                heuristic_matrix[i, j] = (1 / distance_matrix[i, j]) * (1 / (mean_distances[i] + mean_distances[j]))
    
    # Normalize the heuristic matrix to be in the range [0, 1] to avoid excessive influence
    heuristic_matrix = (heuristic_matrix - np.min(heuristic_matrix)) / (np.max(heuristic_matrix) - np.min(heuristic_matrix))

    # Sparsify the heuristic matrix by setting values below a certain threshold to 0
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], 0.2)  # Keep top 80% non-zero values
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
