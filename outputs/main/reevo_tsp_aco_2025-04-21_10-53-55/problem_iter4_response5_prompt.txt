{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Traveling Salesman Problem (TSP) using a combination of factors:\n\n    1. Inverse Distance: Shorter distances are generally more promising.\n    2. Nearest Neighbor Consideration: Edges connecting a node to its nearest neighbors are favored.\n    3. Sparseness Inducement: Edges with significantly larger distances are penalized to promote sparsity.\n\n    This version uses a multiplicative combination of factors and adjusts weights.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # 1. Inverse Distance\n    inverse_distance = 1 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero\n\n    # 2. Nearest Neighbor Consideration\n    nearest_neighbors = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(n):\n        # Find indices of the k-nearest neighbors\n        top_k_indices = np.argsort(distance_matrix[i, :])[1:4]  # Exclude self (distance 0)\n\n        # Assign high scores to nearest neighbor\n        nearest_neighbors[i, top_k_indices] = 1.0\n        nearest_neighbors[top_k_indices, i] = 1.0  # Symmetric\n\n    # 3. Sparsity Inducement\n    median_distance = np.median(distance_matrix[distance_matrix > 0])  # exclude zero values for self loops\n    sparseness_factor = np.exp(-distance_matrix / (2 * median_distance)) #Adjusted the median influence\n\n    # Combine Factors multiplicatively with adjusted weights\n    heuristic_matrix = inverse_distance ** 0.7 * (0.3 + nearest_neighbors * 0.7) * sparseness_factor\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP using stochastic solution sampling.\n\n    This version prioritizes nearest neighbors and MST approximation, and normalizes heuristics.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix of the TSP problem.\n\n    Returns:\n        np.ndarray: Prior indicators (heuristics) of edge promise.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristics = np.zeros_like(distance_matrix)\n\n    # 1. Inverse distance (basic heuristic)\n    inverse_distance = 1 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero\n\n    # 2. Nearest neighbor heuristic: reward edges to nearest neighbors\n    nearest_neighbors = np.argsort(distance_matrix, axis=1)\n    nearest_neighbor_bonus = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(n):\n        for j in range(1, min(4, n)):  # Bonus for the 3 nearest neighbors (excluding self)\n            neighbor_index = nearest_neighbors[i, j]\n            nearest_neighbor_bonus[i, neighbor_index] = 1.0 / j  # closer, larger bonus\n\n    # 3. Minimum Spanning Tree approximation: edges that participate MSTs are important\n    mst = minimum_spanning_tree(distance_matrix)\n    mst_matrix = mst.toarray()\n    mst_bonus = (mst_matrix > 0).astype(float)\n\n\n    # Calculate probabilities based on these heuristics:\n    heuristics = inverse_distance + 2*nearest_neighbor_bonus + 3*mst_bonus\n\n    # 4. Sparsification: Remove edges unlikely to be in the optimal solution\n    # Only keep the top k edges per row/column based on the combined heuristic\n\n    k = min(5, n - 1)  # Number of edges to keep per node (excluding self)\n\n    for i in range(n):\n        # Zero out all entries except the k largest in each row\n        row = heuristics[i, :].copy()\n        indices_to_keep = np.argsort(row)[-k:]  # Indices of the k largest elements\n        heuristics[i, :] = 0\n        heuristics[i, indices_to_keep] = row[indices_to_keep]\n\n        # Zero out the diagonal element, if not done.\n        heuristics[i, i] = 0\n\n    # Normalize\n    max_val = np.max(heuristics)\n    if max_val > 0:\n        heuristics = heuristics / max_val\n\n    return heuristics\n\n[Reflection]\nPrioritize nearest neighbors/MST; sparsify by keeping top-k edges; normalize heuristics for balanced exploration.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}