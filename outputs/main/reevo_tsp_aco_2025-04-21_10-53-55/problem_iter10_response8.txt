```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    """
    Heuristic function for TSP using node ranking, centrality, adaptive sparsification,
    and row-wise normalization. Aims for simplicity and direct normalization.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                     representing the heuristic values (prior indicators).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate nearest neighbors for each node.
    nearest_neighbors = []
    for i in range(n):
        distances = distance_matrix[i].copy()
        distances[i] = np.inf  # Exclude self-loop
        nearest_neighbors.append(np.argsort(distances))

    # Calculate a centrality measure (degree of connectivity).
    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=0)
    degree_centrality = degree_centrality / np.max(degree_centrality)  # Normalize

    # Inverse distance factor
    inverse_distance = 1 / (distance_matrix + 1e-9)
    inverse_distance = inverse_distance / np.max(inverse_distance)  # Normalize

    # Combine factors: inverse distance, nearest neighbor rank, and centrality.
    for i in range(n):
        for j in range(n):
            if i != j:
                # Rank of j in i's nearest neighbors and vice versa
                rank_i = np.where(nearest_neighbors[i] == j)[0][0]
                rank_j = np.where(nearest_neighbors[j] == i)[0][0]
                rank_factor = 1 / (rank_i + rank_j + 1)

                centrality_factor = degree_centrality[i] + degree_centrality[j]

                heuristic_matrix[i, j] = inverse_distance[i, j] + rank_factor + centrality_factor

    # Adaptive Sparsification
    quantile_level = 0.75  # Adjust as needed - Moderate Sparsity
    values = heuristic_matrix[heuristic_matrix > 0]
    threshold = np.quantile(values, quantile_level) if values.size > 0 else 0
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Row-wise normalization to avoid zero rows after sparsification
    for i in range(n):
        row_sum = np.sum(heuristic_matrix[i])
        if row_sum > 0:
            heuristic_matrix[i] = heuristic_matrix[i] / row_sum
        else:
             # If row is all zeros, distribute evenly to top 3 nearest neighbors
            top_neighbors = nearest_neighbors[i][:3]
            num_neighbors = len(top_neighbors)
            if num_neighbors > 0:  # Check if there are any neighbors
                for neighbor in top_neighbors:
                    heuristic_matrix[i, neighbor] = 1 / num_neighbors  # Distribute evenly

    return heuristic_matrix
```
