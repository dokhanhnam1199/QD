```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristics function for TSP using a combination of factors and sparsification.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the distances between cities.

    Returns:
        np.ndarray: Prior indicators of how promising it is to include each edge in a solution.
                     The return is of the same shape as the input, with values between 0 and 1.
    """

    n = distance_matrix.shape[0]
    heuristics_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance: Shorter distances are more promising.
    inverse_distance = 1 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero

    # 2. Node degree consideration: Favor edges connected to nodes with fewer connections
    degree = np.sum(distance_matrix > 0, axis=0) -1 # exclude self loops
    degree_matrix_i = np.tile(degree, (n, 1))
    degree_matrix_j = np.tile(degree[:, np.newaxis], (1, n))
    degree_factor = 1 / (degree_matrix_i + degree_matrix_j + 1e-6)

    # 3. Combination of factors: Combining inverse distance and degree consideration
    heuristics_matrix = inverse_distance * degree_factor

    # 4. Normalization to [0, 1]
    max_val = np.max(heuristics_matrix)
    heuristics_matrix = heuristics_matrix / max_val if max_val > 0 else heuristics_matrix


    # 5. Sparsification: Setting less promising elements to zero
    threshold = np.mean(heuristics_matrix[heuristics_matrix > 0]) * 0.2 # dynamically adjust threshold
    heuristics_matrix[heuristics_matrix < threshold] = 0

    # Remove self-loops
    np.fill_diagonal(heuristics_matrix, 0)
    return heuristics_matrix
```
