```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using stochastic solution sampling principles.
    Combines multiple factors to assess edge promise and sparsifies the matrix.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing TSP instance.

    Returns:
        np.ndarray: Heuristic matrix indicating edge promise.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance (primary factor)
    inverse_distance = 1 / (distance_matrix + 1e-6)  # Adding small constant to avoid division by zero

    # Nearest neighbor bonus
    nearest_neighbors = np.argsort(distance_matrix, axis=1)[:, 1:4]  # Consider top 3 nearest neighbors
    nearest_neighbor_bonus = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for neighbor in nearest_neighbors[i]:
            nearest_neighbor_bonus[i, neighbor] = 0.5  # Reduced bonus

    # Sparsification based on overall distance distribution. Calculate median, focus on short edges.
    median_distance = np.median(distance_matrix[distance_matrix > 0]) #Exclude zeros when taking median
    sparsification_mask = distance_matrix <= 1.5 * median_distance # Keep edges not exceeding 1.5 times the median

    # Degree penalty (discourage high-degree nodes) - promotes diversity in sampling.
    degree_penalty = np.zeros_like(distance_matrix, dtype=float)
    avg_degree = 3  # Target average degree - keep 3 nearest neighbours on average.
    for i in range(n):
        neighbors = np.argsort(distance_matrix[i, :])[:int(avg_degree + 1)]
        for j in range(n): # penalise nodes if they are overly connected.
           if distance_matrix[i,j] > 0:
              degree_penalty[i,j] = 1 - min(avg_degree / len(neighbors),1) # scale it.

    # Combine factors with weights
    heuristic_matrix = (
            1.0 * inverse_distance
            + 0.5 * nearest_neighbor_bonus
            - 0.3*  degree_penalty
    )

    # Apply sparsification
    heuristic_matrix[~sparsification_mask] = 0

    #Symmetrize
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2

    return heuristic_matrix
```
