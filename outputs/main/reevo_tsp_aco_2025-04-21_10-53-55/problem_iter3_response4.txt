```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    """
    Heuristic function for TSP using a combination of factors, sparsification, and adaptive weighting.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                     representing the heuristic values (prior indicators).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate nearest neighbors for each node.
    nearest_neighbors = []
    for i in range(n):
        distances = distance_matrix[i].copy()
        distances[i] = np.inf  # Exclude self-loop
        nearest_neighbors.append(np.argsort(distances))

    # Calculate a centrality measure (degree of connectivity).
    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=0)
    degree_centrality = (degree_centrality - np.min(degree_centrality)) / (np.max(degree_centrality) - np.min(degree_centrality) + 1e-9) # Normalize

    # Inverse distance, normalized
    inverse_distance = 1 / (distance_matrix + 1e-9)
    inverse_distance = (inverse_distance - np.min(inverse_distance)) / (np.max(inverse_distance) - np.min(inverse_distance) + 1e-9)

    # Combine factors with adaptive weights: inverse distance, nearest neighbor rank, and centrality.
    alpha = 0.5  # Weight for distance and rank
    beta = 0.5 # Weight for centrality

    for i in range(n):
        for j in range(n):
            if i != j:

                # Rank of j in i's nearest neighbors and vice versa
                rank_i = np.where(nearest_neighbors[i] == j)[0][0]
                rank_j = np.where(nearest_neighbors[j] == i)[0][0]
                rank_factor = 1 / (rank_i + rank_j + 1)

                heuristic_matrix[i, j] = alpha * (inverse_distance[i, j] * rank_factor) + beta * (degree_centrality[i] + degree_centrality[j]) / 2.0

    # Sparsify the matrix using a quantile threshold.
    quantile_threshold = 0.75  # Keep top 25% of edges
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], quantile_threshold)
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
