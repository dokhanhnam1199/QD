```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of factors and sparsification.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                     representing the heuristic values (prior indicators).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate nearest neighbors for each node.
    nearest_neighbors = []
    for i in range(n):
        distances = distance_matrix[i].copy()
        distances[i] = np.inf  # Exclude self-loop
        nearest_neighbors.append(np.argsort(distances))

    # Calculate a centrality measure (degree of connectivity).
    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=0)

    # Combine factors: inverse distance, nearest neighbor rank, and centrality.
    for i in range(n):
        for j in range(n):
            if i != j:
                distance_factor = 1 / (distance_matrix[i, j] + 1e-9)

                # Rank of j in i's nearest neighbors and vice versa
                rank_i = np.where(nearest_neighbors[i] == j)[0][0]
                rank_j = np.where(nearest_neighbors[j] == i)[0][0]
                rank_factor = 1 / (rank_i + rank_j + 1)

                centrality_factor = (degree_centrality[i] + degree_centrality[j])

                heuristic_matrix[i, j] = distance_factor * rank_factor * centrality_factor

    # Sparsify the matrix: keep only the top k edges for each node.
    k = int(np.sqrt(n))  # Adjust k as needed
    for i in range(n):
        row = heuristic_matrix[i].copy()
        indices = np.argsort(row)[::-1]  # Sort in descending order
        keep_indices = indices[:k]
        heuristic_matrix[i] = 0  # Reset row
        heuristic_matrix[i, keep_indices] = row[keep_indices]

    return heuristic_matrix
```
