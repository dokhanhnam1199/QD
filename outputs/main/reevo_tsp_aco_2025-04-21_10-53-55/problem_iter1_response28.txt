```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) using a combination of factors
    and stochastic solution sampling principles.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix
                                       where distance_matrix[i][j] is the distance between node i and node j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    representing the prior indicators of how promising it is to include each edge in a solution.
                    Higher values indicate more promising edges.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Heuristic 1: Inverse distance (as in v1, but we might modify it)
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Heuristic 2: Savings heuristic (related to minimum spanning tree concept, favoring shorter edges)
    savings = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                min_dist_i = np.min(distance_matrix[i, :][distance_matrix[i, :] > 0]) # min dist to i
                min_dist_j = np.min(distance_matrix[j, :][distance_matrix[j, :] > 0]) # min dist to j
                savings[i, j] = min_dist_i + min_dist_j - distance_matrix[i, j]

    # Heuristic 3: Node degree desirability. Favor edges that connect to nodes with low degree.
    #   The rationale is, the higher the degree of a node, the less incentive to visit/leave this node later
    degree_heuristic = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
               degree_heuristic[i,j] = 1.0 # initialize to 1.

    # Combine the heuristics (weighted sum)
    heuristic_matrix = 0.6 * inverse_distance + 0.3 * savings + 0.1 * degree_heuristic

    # Sparsify the matrix:  Keep only a fraction of the most promising edges for each node
    sparsity_factor = 0.3 # hyperparameter
    for i in range(n):
        row = heuristic_matrix[i, :]
        threshold = np.quantile(row, 1 - sparsity_factor)
        heuristic_matrix[i, row < threshold] = 0

    return heuristic_matrix
```
