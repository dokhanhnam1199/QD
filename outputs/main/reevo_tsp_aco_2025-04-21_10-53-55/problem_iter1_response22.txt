```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) using a combination of factors.

    This version considers distance, node degree (estimated by inverse sum of distances),
    and a randomized component to encourage exploration.  It also sparsifies the
    resulting matrix.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix
                                      between cities. distance_matrix[i][j] is the distance
                                      between city i and city j.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix, where each
                      element represents the prior indicator of how promising it is to
                      include the corresponding edge in a solution.  Higher values
                      indicate a more promising edge. Unpromising edges are set to zero.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Calculate inverse distances (avoiding division by zero)
    inverse_distances = 1.0 / (distance_matrix + np.eye(n))  # Add identity to avoid inf on diagonal

    # Estimate node degree (lower sum of inverse distances means higher priority)
    node_degrees = np.sum(inverse_distances, axis=1, keepdims=True)

    # Randomized component (for exploration)
    random_matrix = np.random.rand(n, n) * 0.1 # Scaling to keep exploration moderate

    # Combine factors: distance, node degree, and randomization
    heuristic_matrix = (1.0 / (distance_matrix + np.eye(n))) + node_degrees + node_degrees.T + random_matrix

    #Symmetrize
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T)/2
    
    # Sparsify the matrix: Keep only the top-k edges for each node
    k = int(np.sqrt(n))  # Adjust k dynamically (e.g., sqrt(n) or log(n))
    for i in range(n):
        row = heuristic_matrix[i, :].copy() # copy before sort to avoid modifying the array.
        indices_to_keep = np.argsort(row)[-k:]  # Indices of the top-k values
        mask = np.zeros(n, dtype=bool)
        mask[indices_to_keep] = True
        heuristic_matrix[i, ~mask] = 0
        
    # Also do the same on the transposed matrix to ensure both directions of edge are kept or none.
    for j in range(n):
        col = heuristic_matrix[:, j].copy()
        indices_to_keep = np.argsort(col)[-k:]
        mask = np.zeros(n, dtype=bool)
        mask[indices_to_keep] = True
        heuristic_matrix[~mask, j] = 0

    return heuristic_matrix
```
