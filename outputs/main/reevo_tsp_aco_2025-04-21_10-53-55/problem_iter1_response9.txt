```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP).

    This version combines several factors to determine the 'promisingness' of each edge:
    - Inverse distance: Shorter distances are preferred.
    - Node degree: Nodes with fewer connections should be prioritized to avoid isolated clusters.
    - Closeness centrality: Edges connecting nodes that are centrally located are favored.
    - Sparsification: A threshold is applied to set unpromising edges to zero.

    Args:
        distance_matrix (np.ndarray): A square matrix where distance_matrix[i, j]
                                       represents the distance between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element
                    indicates the 'promisingness' of including the corresponding edge in a solution.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Inverse distance
    inverse_distance = 1 / (distance_matrix + 1e-6)  # Add a small constant to avoid division by zero

    # Node degree (prioritize nodes with fewer connections in initial heuristic)
    degree = np.sum(distance_matrix > 0, axis=0)
    degree_factor = np.outer(degree, degree) / (n**2 + 1e-6)  # Normalize

    # Closeness centrality (try to choose links to central nodes)
    closeness = np.zeros(n)
    for i in range(n):
        closeness[i] = np.sum(1 / (distance_matrix[i, :] + 1e-6))  # Sum of inverse distances to other nodes

    closeness_factor = np.outer(closeness, closeness)

    # Combine factors
    heuristic_matrix = inverse_distance * (1 - degree_factor) * closeness_factor

    # Sparsification (remove edges that are clearly not promising)
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 20)  # Keep top 80%
    heuristic_matrix[heuristic_matrix < threshold] = 0

    return heuristic_matrix
```
