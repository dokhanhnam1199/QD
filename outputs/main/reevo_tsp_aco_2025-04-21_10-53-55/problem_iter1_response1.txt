```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) using a combination of factors and sparsification.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix between cities.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix, representing the prior
                    indicators of how promising it is to include each edge in a solution. Higher values
                    indicate a more promising edge.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance: Closer cities are generally more attractive.
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # 2. Node Degree Consideration: Penalize high-degree nodes to avoid early cycles.
    degree_penalty = np.ones((n, n))
    for i in range(n):
        # Calculate a "degree" score for each node based on the inverse distance to other nodes.
        node_degree_score = np.sum(inverse_distance[i, :]) + np.sum(inverse_distance[:, i])
        
        # Apply degree penalty relative to the average degree score
        avg_degree_score = np.sum(inverse_distance) / n
        degree_penalty[i, :] = np.exp(-(node_degree_score - avg_degree_score)/10) #tune factor.

    #3 Combine heuristics
    heuristic_matrix = inverse_distance * degree_penalty

    # 4. Sparsification: Set unpromising edges to zero.
    threshold = np.percentile(heuristic_matrix[np.triu_indices_from(heuristic_matrix, k=1)], 30)  # Keep top 70%
    heuristic_matrix[heuristic_matrix < threshold] = 0


    #Ensure symmetry in case of small numerical differences.
    heuristic_matrix = np.maximum(heuristic_matrix, heuristic_matrix.T)

    return heuristic_matrix
```
