{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Traveling Salesman Problem (TSP) using a combination of factors and sparsification.\n\n    Args:\n        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix between cities.\n\n    Returns:\n        np.ndarray: A 2D numpy array of the same shape as distance_matrix, representing the prior\n                    indicators of how promising it is to include each edge in a solution. Higher values\n                    indicate a more promising edge.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # 1. Inverse Distance: Closer cities are generally more attractive.\n    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero\n\n    # 2. Node Degree Consideration: Penalize high-degree nodes to avoid early cycles.\n    degree_penalty = np.ones((n, n))\n    for i in range(n):\n        # Calculate a \"degree\" score for each node based on the inverse distance to other nodes.\n        node_degree_score = np.sum(inverse_distance[i, :]) + np.sum(inverse_distance[:, i])\n        \n        # Apply degree penalty relative to the average degree score\n        avg_degree_score = np.sum(inverse_distance) / n\n        degree_penalty[i, :] = np.exp(-(node_degree_score - avg_degree_score)/10) #tune factor.\n\n    #3 Combine heuristics\n    heuristic_matrix = inverse_distance * degree_penalty\n\n    # 4. Sparsification: Set unpromising edges to zero.\n    threshold = np.percentile(heuristic_matrix[np.triu_indices_from(heuristic_matrix, k=1)], 30)  # Keep top 70%\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n\n    #Ensure symmetry in case of small numerical differences.\n    heuristic_matrix = np.maximum(heuristic_matrix, heuristic_matrix.T)\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP using stochastic solution sampling principles.\n    Combines multiple factors to assess edge promise and sparsifies the matrix.\n\n    Args:\n        distance_matrix (np.ndarray): Distance matrix representing TSP instance.\n\n    Returns:\n        np.ndarray: Heuristic matrix indicating edge promise.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Inverse distance (primary factor)\n    inverse_distance = 1 / (distance_matrix + 1e-6)  # Adding small constant to avoid division by zero\n\n    # Nearest neighbor bonus\n    nearest_neighbors = np.argsort(distance_matrix, axis=1)[:, 1:4]  # Consider top 3 nearest neighbors\n    nearest_neighbor_bonus = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(n):\n        for neighbor in nearest_neighbors[i]:\n            nearest_neighbor_bonus[i, neighbor] = 0.5  # Reduced bonus\n\n    # Sparsification based on overall distance distribution. Calculate median, focus on short edges.\n    median_distance = np.median(distance_matrix[distance_matrix > 0]) #Exclude zeros when taking median\n    sparsification_mask = distance_matrix <= 1.5 * median_distance # Keep edges not exceeding 1.5 times the median\n\n    # Degree penalty (discourage high-degree nodes) - promotes diversity in sampling.\n    degree_penalty = np.zeros_like(distance_matrix, dtype=float)\n    avg_degree = 3  # Target average degree - keep 3 nearest neighbours on average.\n    for i in range(n):\n        neighbors = np.argsort(distance_matrix[i, :])[:int(avg_degree + 1)]\n        for j in range(n): # penalise nodes if they are overly connected.\n           if distance_matrix[i,j] > 0:\n              degree_penalty[i,j] = 1 - min(avg_degree / len(neighbors),1) # scale it.\n\n    # Combine factors with weights\n    heuristic_matrix = (\n            1.0 * inverse_distance\n            + 0.5 * nearest_neighbor_bonus\n            - 0.3*  degree_penalty\n    )\n\n    # Apply sparsification\n    heuristic_matrix[~sparsification_mask] = 0\n\n    #Symmetrize\n    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2\n\n    return heuristic_matrix\n\n[Reflection]\nFocus on nearest neighbors, adaptive sparsification, and balanced combination of factors.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}