```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) using a combination of factors:

    1. Inverse Distance: Shorter distances are generally more promising.
    2. Nearest Neighbor Consideration: Edges connecting a node to its nearest neighbors are favored.
    3. Sparseness Inducement: Edges with significantly larger distances are penalized to promote sparsity.

    This version uses a multiplicative combination of factors and adjusts weights.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance
    inverse_distance = 1 / (distance_matrix + 1e-6)  # Adding a small constant to avoid division by zero

    # 2. Nearest Neighbor Consideration
    nearest_neighbors = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        # Find indices of the k-nearest neighbors
        top_k_indices = np.argsort(distance_matrix[i, :])[1:4]  # Exclude self (distance 0)

        # Assign high scores to nearest neighbor
        nearest_neighbors[i, top_k_indices] = 1.0
        nearest_neighbors[top_k_indices, i] = 1.0  # Symmetric

    # 3. Sparsity Inducement
    median_distance = np.median(distance_matrix[distance_matrix > 0])  # exclude zero values for self loops
    sparseness_factor = np.exp(-distance_matrix / (2 * median_distance)) #Adjusted the median influence

    # Combine Factors multiplicatively with adjusted weights
    heuristic_matrix = inverse_distance ** 0.7 * (0.3 + nearest_neighbors * 0.7) * sparseness_factor

    return heuristic_matrix
```
