```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using stochastic solution sampling principles,
    emphasizing nearest neighbors, adaptive sparsification, and balanced combination of factors.

    Args:
        distance_matrix (np.ndarray): Distance matrix representing the TSP instance.

    Returns:
        np.ndarray: Heuristic matrix indicating edge promise.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse Distance (primary factor)
    inverse_distance = 1 / (distance_matrix + 1e-6)

    # 2. Nearest Neighbor Bonus (stronger emphasis)
    num_nearest_neighbors = min(5, n - 1)  # Consider up to 5 nearest neighbors
    nearest_neighbors = np.argsort(distance_matrix, axis=1)[:, 1:num_nearest_neighbors + 1]
    nearest_neighbor_bonus = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for neighbor in nearest_neighbors[i]:
            nearest_neighbor_bonus[i, neighbor] = 0.7

    # 3. Adaptive Sparsification (based on distance distribution)
    median_distance = np.median(distance_matrix[distance_matrix > 0])
    sparsification_threshold = 1.2 * median_distance  # Tighter threshold
    sparsification_mask = distance_matrix <= sparsification_threshold

    # 4. Degree Penalty (tuned for balance)
    degree_penalty = np.zeros_like(distance_matrix, dtype=float)
    avg_degree = 3  # Target average degree
    for i in range(n):
        neighbor_count = np.sum(distance_matrix[i, :] <= sparsification_threshold) -1 # Count actual neighbors after sparsification, excluding self-loop
        for j in range(n):
            if distance_matrix[i, j] > 0:
                degree_penalty[i, j] = 1 - min(avg_degree / max(neighbor_count,1), 1) # Avoid division by zero

    # 5. Combine Factors with Adjusted Weights
    heuristic_matrix = (
            1.0 * inverse_distance
            + 0.7 * nearest_neighbor_bonus
            - 0.4 * degree_penalty
    )

    # 6. Apply Sparsification
    heuristic_matrix[~sparsification_mask] = 0

    # 7. Symmetrize
    heuristic_matrix = (heuristic_matrix + heuristic_matrix.T) / 2

    return heuristic_matrix
```
