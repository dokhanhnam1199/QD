```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using a combination of inverse distance,
    geometric mean centrality, rank-based information, adaptive sparsification,
    and row-wise normalization.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                     representing the heuristic values (prior indicators).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate nearest neighbors for each node.
    nearest_neighbors = []
    for i in range(n):
        distances = distance_matrix[i].copy()
        distances[i] = np.inf  # Exclude self-loop
        nearest_neighbors.append(np.argsort(distances))

    # Inverse distance factor (normalized)
    inverse_distance = 1 / (distance_matrix + 1e-9)
    inverse_distance = inverse_distance / np.max(inverse_distance)

    # Geometric mean centrality
    centrality = np.zeros(n)
    for i in range(n):
        centrality[i] = np.exp(np.mean(np.log(1 / (distance_matrix[i, :] + 1e-9))))
    centrality = centrality / np.max(centrality)

    # Rank-based information and combination
    for i in range(n):
        for j in range(n):
            if i != j:
                rank_i = np.where(nearest_neighbors[i] == j)[0][0]
                rank_j = np.where(nearest_neighbors[j] == i)[0][0]
                rank_factor = 1 / (rank_i + rank_j + 2) # Add 2 to avoid division by zero

                heuristic_matrix[i, j] = inverse_distance[i, j] * np.sqrt(centrality[i] * centrality[j]) * rank_factor

    # Adaptive Sparsification (handle potential zero rows/columns)
    quantile_level = 0.75  # Adjusted for better sparsity
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], quantile_level) if np.any(heuristic_matrix > 0) else 0

    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Row-wise normalization (avoiding division by zero)
    for i in range(n):
        row_sum = np.sum(heuristic_matrix[i])
        if row_sum > 0:
            heuristic_matrix[i] = heuristic_matrix[i] / row_sum
        else:
            # Distribute evenly if the row is all zeros
            heuristic_matrix[i] = np.ones(n) / n

    return heuristic_matrix
```
