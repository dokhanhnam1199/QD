```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Improved heuristic function for TSP using node ranking, centrality, adaptive sparsification,
    geometric mean, and row-wise normalization.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                     representing the heuristic values (prior indicators).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate nearest neighbors for each node.
    nearest_neighbors = []
    for i in range(n):
        distances = distance_matrix[i].copy()
        distances[i] = np.inf  # Exclude self-loop
        nearest_neighbors.append(np.argsort(distances))

    # Calculate degree centrality. Add a small constant to avoid division by zero.
    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=0)
    degree_centrality = (degree_centrality - np.min(degree_centrality)) / (np.max(degree_centrality) - np.min(degree_centrality) + 1e-9)

    # Inverse distance factor (normalized).
    inverse_distance = 1 / (distance_matrix + 1e-9)
    inverse_distance = (inverse_distance - np.min(inverse_distance)) / (np.max(inverse_distance) - np.min(inverse_distance) + 1e-9)


    # Rank-based information
    rank_matrix = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                rank_i = np.where(nearest_neighbors[i] == j)[0][0]
                rank_j = np.where(nearest_neighbors[j] == i)[0][0]
                rank_matrix[i, j] = 1 / (np.sqrt(rank_i + 1) * np.sqrt(rank_j + 1))  # Stabilized ranks using square root

    # Combine factors using geometric mean
    for i in range(n):
        for j in range(n):
            if i != j:
                centrality_factor = (degree_centrality[i] * degree_centrality[j])**0.5
                heuristic_matrix[i, j] = (inverse_distance[i, j] * rank_matrix[i, j] * centrality_factor)**(1/3)

    # Adaptive Sparsification
    quantile_level = 0.80  # Adjust as needed - Moderate Sparsity
    non_zero_values = heuristic_matrix[heuristic_matrix > 0]
    threshold = np.quantile(non_zero_values, quantile_level) if non_zero_values.size > 0 else 0
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Row-wise normalization
    for i in range(n):
        row_sum = np.sum(heuristic_matrix[i])
        if row_sum > 0:
            heuristic_matrix[i] = heuristic_matrix[i] / row_sum
        else:
            # If row is all zeros, distribute evenly to top 3 nearest neighbors
            top_neighbors = nearest_neighbors[i][:3]
            num_neighbors = len(top_neighbors)
            if num_neighbors > 0:  # Check if there are any neighbors
                for neighbor in top_neighbors:
                    heuristic_matrix[i, neighbor] = 1 / num_neighbors  # Distribute evenly


    return heuristic_matrix
```
