```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP).

    This function estimates the probability of including each edge in the optimal TSP tour.
    It combines several factors:
        - Inverse distance: Shorter edges are preferred.
        - Node degree: Nodes with few close neighbors are connected earlier.
        - Sparsity encouragement: Less promising edges are set to zero

    Args:
        distance_matrix (np.ndarray): A square matrix where distance_matrix[i][j]
                                        is the distance between node i and node j.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element
                    represents the desirability of including the corresponding edge in the TSP tour.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance
    heuristic_matrix = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # 2. Node degree adjustment: favors connecting to nodes that have fewer near neighbors
    for i in range(n):
        distances = distance_matrix[i, :]
        sorted_indices = np.argsort(distances)
        nearest_neighbors = sorted_indices[1:4]  # Consider the 3 nearest neighbors (excluding itself)
        heuristic_matrix[i, nearest_neighbors] *= 1.2  # Boost connections to these neighbors


    #3. Sparsify - set low probability links to zero.
    threshold = np.percentile(heuristic_matrix[heuristic_matrix > 0], 50)  #Adaptive Threshold
    heuristic_matrix[heuristic_matrix < threshold] = 0


    #4. Avoid links which create short cycles during stochastic sampling.
    #This part cannot be calculated without knowing the current path. This part could be considered as another
    #heuristic component and incorporated during path building.


    return heuristic_matrix
```
