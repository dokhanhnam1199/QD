{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Traveling Salesman Problem (TSP) using a combination of factors\n    and stochastic solution sampling principles.  This version incorporates edge importance.\n\n    Args:\n        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix\n                                       where distance_matrix[i][j] is the distance between node i and node j.\n\n    Returns:\n        np.ndarray: A 2D numpy array of the same shape as distance_matrix,\n                    representing the prior indicators of how promising it is to include each edge in a solution.\n                    Higher values indicate more promising edges.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Heuristic 1: Inverse distance\n    inverse_distance = 1 / (distance_matrix + 1e-9)\n\n    # Heuristic 2: Savings heuristic (related to minimum spanning tree concept)\n    savings = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Avoid using 0 in distance calculation (0 implies no edge)\n                valid_distances_i = distance_matrix[i, :][distance_matrix[i, :] > 0]\n                valid_distances_j = distance_matrix[j, :][distance_matrix[j, :] > 0]\n\n                if valid_distances_i.size > 0 and valid_distances_j.size > 0:\n                    min_dist_i = np.min(valid_distances_i)\n                    min_dist_j = np.min(valid_distances_j)\n                    savings[i, j] = min_dist_i + min_dist_j - distance_matrix[i, j]\n                else:\n                    savings[i,j] = 0 # No savings if isolated node\n\n    # Heuristic 3: Node degree desirability.  Nodes that need to be connected are favored.\n    degree_heuristic = np.ones_like(distance_matrix, dtype=float)\n\n    # Heuristic 4: Edge Importance. Edges connecting geographically dispersed nodes are favored.\n    edge_importance = np.zeros_like(distance_matrix, dtype=float)\n    center = np.mean(np.array([[i] for i in range(n)]), axis=0)\n\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                pos_i = np.array([i])\n                pos_j = np.array([j])\n                edge_importance[i,j] = np.linalg.norm(pos_i - pos_j)\n\n\n    # Combine the heuristics (weighted sum)\n    heuristic_matrix = 0.5 * inverse_distance + 0.2 * savings + 0.1 * degree_heuristic + 0.2 * edge_importance\n\n    # Sparsify the matrix:  Keep only a fraction of the most promising edges for each node\n    sparsity_factor = 0.3\n    for i in range(n):\n        row = heuristic_matrix[i, :]\n        threshold = np.quantile(row, 1 - sparsity_factor)\n        heuristic_matrix[i, row < threshold] = 0\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Traveling Salesman Problem (TSP) that combines\n    multiple factors to estimate the \"promise\" of including each edge in a solution.\n    This version incorporates local neighborhood density, tunable combination weights,\n    and careful normalization to avoid unintended side effects.\n\n    Args:\n        distance_matrix (np.ndarray): A square matrix where element (i, j) represents\n                                      the distance between city i and city j.  It is\n                                      assumed that the diagonal elements are zero or very large\n                                      to discourage self-loops.\n\n    Returns:\n        np.ndarray: A matrix of the same shape as distance_matrix, where each element\n                      (i, j) indicates the desirability of including the edge (i, j) in\n                      the TSP tour. Higher values indicate more promising edges.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n\n    # 1. Inverse distance: Shorter distances are generally more desirable.\n    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero\n\n    # 2. Local neighborhood density:  Cities in denser areas are likely to have\n    #    more alternative paths.  Edges connecting to sparser areas are more crucial.\n    #    Calculate the average distance to the k nearest neighbors for each city.\n\n    k = min(5, n - 1)  # Consider up to the 5th nearest neighbor, or fewer if n is small\n    neighbor_densities = np.zeros(n)\n    for i in range(n):\n        distances = distance_matrix[i, :]\n        nearest_neighbors = np.partition(distances, k + 1)[1:k + 1]  # Exclude self (0th)\n        neighbor_densities[i] = np.mean(nearest_neighbors)  # Average dist to k nearest\n\n    density_influence = np.zeros_like(distance_matrix)\n    for i in range(n):\n        for j in range(n):\n            density_influence[i, j] = neighbor_densities[i] + neighbor_densities[j]\n\n    # 3. Combination and scaling: Combine the factors with tunable weights.\n    weight_distance = 0.6  # Weight for inverse distance\n    weight_density = 0.4  # Weight for density influence\n\n    heuristic_matrix = (weight_distance * inverse_distance +\n                        weight_density * (1 / (density_influence + 1e-9))) #Add constant to avoid zero division\n\n\n    # 4. Sparsification: Zero out edges that are very unlikely to be in the optimal tour\n    #    based on a threshold derived from the mean of the heuristic matrix. This promotes\n    #    exploration of more focused search spaces.\n\n    threshold = np.mean(heuristic_matrix) * 0.2  # Tune this threshold multiplier\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    # 5. Normalization: Normalize to [0, 1] *only if there are non-zero values*\n    #    and only *after* sparsification. This prevents small values from being\n    #    eliminated due to floating-point precision issues.\n\n    max_val = np.max(heuristic_matrix)\n    if max_val > 0:\n        heuristic_matrix = heuristic_matrix / max_val\n\n    return heuristic_matrix\n\n[Reflection]\nConsider local density, normalization, and adaptive sparsification for robust TSP heuristics.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}