```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Improved heuristic function for the Traveling Salesman Problem (TSP).

    This version refines the heuristics by considering nearest neighbors,
    adaptive weighting, and more informed sparsification.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances between cities.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, representing the heuristic values for each edge.
                      Higher values indicate a more promising edge.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance: Shorter distances are generally more desirable.
    inverse_distance = 1.0 / (distance_matrix + 1e-6)  # Adding a small value to avoid division by zero

    # 2. Nearest Neighbor heuristic: edges connected to nodes with high average distance to others should be favored
    nearest_neighbors = np.argsort(distance_matrix, axis=1)[:, 1:4]  # top 3 nearest neighbours
    neighbor_distance_sum = np.zeros(n)
    for i in range(n):
        neighbor_distance_sum[i] = np.sum(distance_matrix[i, nearest_neighbors[i]])

    neighbor_score_matrix = np.zeros((n, n))
    for i in range(n):
        for j in range(n):
            neighbor_score_matrix[i, j] = neighbor_distance_sum[i] + neighbor_distance_sum[j]

    # 3. Adaptive weighting: Adjust the weights based on the average distance
    average_distance = np.mean(distance_matrix)
    distance_weight = 1.0 / (1 + average_distance)  # Scale inversely with average distance
    neighbor_weight = 0.1 + 0.5 * average_distance  # Scale linearly with average distance

    # 4. Informed sparsification: Remove edges significantly longer than the node's typical distance
    node_average_distances = np.mean(distance_matrix, axis=1)
    sparsification_threshold_matrix = np.zeros((n,n))
    for i in range(n):
        for j in range(n):
            sparsification_threshold_matrix[i,j] = 1.5 * (node_average_distances[i] + node_average_distances[j])/2 # dynamic threshold for each edge
    sparse_mask = distance_matrix <= sparsification_threshold_matrix

    # 5. Combine heuristics and apply sparsification mask.
    heuristic_matrix = distance_weight * inverse_distance + neighbor_weight * neighbor_score_matrix
    heuristic_matrix = heuristic_matrix * sparse_mask  # remove the sparse parts

    return heuristic_matrix
```
