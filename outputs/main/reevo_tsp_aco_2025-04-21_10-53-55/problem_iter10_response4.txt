```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using normalized inverse distance, geometric mean centrality,
    rank-based information, adaptive sparsification, degree centrality refinement,
    and row-wise processing with improved normalization and edge case handling.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                     representing the heuristic values (prior indicators).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Normalize distance matrix row-wise and column-wise, handling potential inf/NaN
    row_min = np.min(distance_matrix, axis=1, keepdims=True)
    row_min[row_min == 0] = np.min(distance_matrix[distance_matrix > 0]) if np.any(distance_matrix > 0) else 1  # Avoid division by zero if row_min is zero everywhere
    row_normalized = distance_matrix / (row_min + 1e-9)

    col_min = np.min(distance_matrix, axis=0, keepdims=True)
    col_min[col_min == 0] = np.min(distance_matrix[:, distance_matrix.sum(axis=0) > 0]) if np.any(distance_matrix[:, distance_matrix.sum(axis=0) > 0]) else 1 #same logic as above
    col_normalized = distance_matrix / (col_min + 1e-9)

    normalized_distance = (row_normalized + col_normalized) / 2  # Combine normalization

    # Calculate geometric mean centrality, handling potential zeros
    inverse_distances = 1 / (distance_matrix + 1e-9)
    geo_mean_centrality = np.exp(np.mean(np.log(inverse_distances + 1e-9), axis=0))
    geo_mean_centrality = geo_mean_centrality / np.max(geo_mean_centrality)  # Normalize centrality values

    # Calculate nearest neighbors for each node
    nearest_neighbors = []
    for i in range(n):
        distances = distance_matrix[i].copy()
        distances[i] = np.inf  # Exclude self-loop
        nearest_neighbors.append(np.argsort(distances))

    # Combine factors
    for i in range(n):
        for j in range(n):
            if i != j:
                # Rank of j in i's nearest neighbors and vice versa
                rank_i = np.where(nearest_neighbors[i] == j)[0][0] if j in nearest_neighbors[i] else n  # Assign max rank if not found
                rank_j = np.where(nearest_neighbors[j] == i)[0][0] if i in nearest_neighbors[j] else n
                rank_factor = 1 / (rank_i + rank_j + 1)

                # Edge Prior with combined factors
                heuristic_matrix[i, j] = (
                    (1 / (normalized_distance[i, j] + 1e-9))
                    * np.sqrt(geo_mean_centrality[i] * geo_mean_centrality[j])
                    * rank_factor
                )

    # Adaptive Sparsification
    quantile_level = 0.75  # Adjust as needed
    non_zero_values = heuristic_matrix[heuristic_matrix > 0]
    threshold = np.quantile(non_zero_values, quantile_level) if non_zero_values.size > 0 else 0  # only elements > 0, handle case where all are zero
    heuristic_matrix[heuristic_matrix < threshold] = 0  # sparsify

    # Degree centrality refinement: Encourage high-degree nodes.
    degree_centrality = np.sum(heuristic_matrix > 0, axis=0)  # Number of non-zero connections
    degree_centrality = degree_centrality / np.max(degree_centrality) if np.max(degree_centrality) > 0 else np.ones(n) # Normalize degree centrality, avoid divide by zero

    for i in range(n):
        heuristic_matrix[i, :] = heuristic_matrix[i, :] * (degree_centrality**0.5)  # Refine using degree centrality

    # Row-wise normalization to ensure no zero rows
    for i in range(n):
        row_sum = np.sum(heuristic_matrix[i])
        if row_sum > 0:
            heuristic_matrix[i] = heuristic_matrix[i] / row_sum
        else:
            heuristic_matrix[i] = np.ones(n) / n  # Assign equal probability if all edges are zero
            heuristic_matrix[i, i] = 0  # Self loop should have zero probability

    return heuristic_matrix
```
