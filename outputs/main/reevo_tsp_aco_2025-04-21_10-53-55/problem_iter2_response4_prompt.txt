{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for TSP using a combination of factors and sparsification.\n\n    Args:\n        distance_matrix (np.ndarray): A square matrix where distance_matrix[i, j]\n            represents the distance between node i and node j.\n\n    Returns:\n        np.ndarray: A matrix of the same shape as distance_matrix, representing\n            the \"promise\" of each edge. Higher values indicate a more promising edge.\n    \"\"\"\n    n = distance_matrix.shape[0]\n    promise_matrix = np.zeros((n, n))\n\n    # 1. Inverse Distance: Shorter edges are generally more promising.\n    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero\n\n    # 2. Node Degree Preference:  Prefer nodes with low degree early on. We estimate degree by simply\n    # inverting the sum of inverse distances from the point\n    node_degree_preference = np.zeros((n, n))\n    for i in range(n):\n        node_degree = np.sum(inverse_distance[i,:]) + np.sum(inverse_distance[:,i]) - inverse_distance[i,i] #avoid double count\n        node_degree_preference[i, :] = 1 / (node_degree + 1e-9)\n\n\n    # 3. Combination: Combine the factors, weighting them appropriately.\n    promise_matrix = 0.7 * inverse_distance + 0.3 * node_degree_preference\n\n    # 4. Sparsification: Set unpromising edges to zero to encourage exploration\n    # and potentially reduce search space. The threshold is adaptively determined.\n    threshold = np.mean(promise_matrix[promise_matrix > 0]) * 0.25  #Dynamic threshold, consider only positive values to calculate mean\n    promise_matrix[promise_matrix < threshold] = 0\n\n    # Ensure that diagonal elements are zero (no self-loops).\n    np.fill_diagonal(promise_matrix, 0)\n\n\n    return promise_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Traveling Salesman Problem (TSP) using stochastic solution sampling principles.\n    This version combines several factors to estimate the \"promise\" of each edge and sparsifies the resulting matrix.\n\n    Args:\n        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix between cities.\n\n    Returns:\n        np.ndarray: A 2D numpy array of the same shape as the distance matrix, where each element indicates\n                      the heuristic promise of including that edge in the solution.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n\n    # Initialize the heuristic matrix\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate the inverse distance (closer is better)\n    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero\n\n    # Calculate row and column sums (representing how far away a node is on average from others)\n    row_sums = np.sum(distance_matrix, axis=1, keepdims=True)\n    col_sums = np.sum(distance_matrix, axis=0, keepdims=True)\n\n    # Normalize row and column sums - smaller row/col sums imply the node is more centrally located\n    row_normalized = 1 / (row_sums + 1e-9)\n    col_normalized = 1 / (col_sums + 1e-9)\n\n    # Combine these factors:\n    # 1. Inverse distance: Encourages shorter edges\n    # 2. Node centrality:  Encourages edges connected to centrally located nodes\n    heuristic_matrix = inverse_distance * np.sqrt(row_normalized * col_normalized)  # Geometric mean of normalized row/col sums\n\n    #Sparsification: set unpromising entries to zero to reduce the search space\n    threshold = np.quantile(heuristic_matrix[np.triu_indices_from(heuristic_matrix, k=1)], 0.25) # Keep only top 75% edges\n    heuristic_matrix[heuristic_matrix < threshold] = 0 # sparsify\n\n    # Remove self-loops (diagonal elements)\n    np.fill_diagonal(heuristic_matrix, 0)\n\n    return heuristic_matrix\n\n[Reflection]\nConsider node centrality using normalized row/column sums and geometric means for combination. Refine sparsification strategies.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}