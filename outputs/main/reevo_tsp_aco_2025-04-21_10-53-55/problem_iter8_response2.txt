```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:

    """
    Heuristic function for TSP using node ranking, centrality, adaptive sparsification,
    geometric mean centrality and rank-based information. Introducing edge-based centrality and improved normalization.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                     representing the heuristic values (prior indicators).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Calculate nearest neighbors for each node.
    nearest_neighbors = []
    for i in range(n):
        distances = distance_matrix[i].copy()
        distances[i] = np.inf  # Exclude self-loop
        nearest_neighbors.append(np.argsort(distances))

    # Calculate degree centrality
    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=0)
    degree_centrality = degree_centrality / np.max(degree_centrality)  # Normalize

    # Calculate geometric mean centrality
    geo_mean_centrality = np.power(np.prod(1 / (distance_matrix + 1e-9), axis=0), 1/n)
    geo_mean_centrality = geo_mean_centrality / np.max(geo_mean_centrality)

    # Inverse distance
    inverse_distance = 1 / (distance_matrix + 1e-9)
    inverse_distance = inverse_distance / np.max(inverse_distance)  # Normalize

    # Rank based information
    rank_matrix = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
            if i != j:
                rank_i = np.where(nearest_neighbors[i] == j)[0][0]
                rank_j = np.where(nearest_neighbors[j] == i)[0][0]
                rank_matrix[i, j] = 1 / (rank_i + rank_j + 1)

    # Edge-based centrality (harmonic mean of node centralities)
    edge_centrality = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        for j in range(n):
             if i != j:
                edge_centrality[i, j] = 2 / ((1 / (degree_centrality[i] + 1e-9)) + (1 / (degree_centrality[j] + 1e-9))) if (degree_centrality[i] > 0 and degree_centrality[j] > 0) else 0

    edge_centrality = edge_centrality / np.max(edge_centrality) if np.max(edge_centrality) > 0 else edge_centrality


    # Combine factors: inverse distance, rank, degree and geometric mean centrality
    for i in range(n):
        for j in range(n):
            if i != j:
                heuristic_matrix[i, j] = (inverse_distance[i, j]**0.33
                                           * rank_matrix[i, j]**0.33
                                           * edge_centrality[i,j]**0.33)


    # Adaptive Sparsification
    quantile_level = 0.7  # Adjust as needed
    non_zero_values = heuristic_matrix[heuristic_matrix > 0]
    threshold = np.quantile(non_zero_values, quantile_level) if non_zero_values.size > 0 else 0

    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Row-wise normalization
    for i in range(n):
        row_sum = np.sum(heuristic_matrix[i])
        if row_sum > 0:
            heuristic_matrix[i] = heuristic_matrix[i] / row_sum
        else:
            # Assign equal probability if all edges are zero after sparsification
            heuristic_matrix[i] = np.ones(n) / (n - 1)  # Distribute probability equally among other nodes
            heuristic_matrix[i, i] = 0  # Self loop should have zero probability


    return heuristic_matrix
```
