```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) that combines
    multiple factors to estimate the "promise" of including each edge in a solution.
    This version incorporates local neighborhood density, tunable combination weights,
    and careful normalization to avoid unintended side effects.

    Args:
        distance_matrix (np.ndarray): A square matrix where element (i, j) represents
                                      the distance between city i and city j.  It is
                                      assumed that the diagonal elements are zero or very large
                                      to discourage self-loops.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, where each element
                      (i, j) indicates the desirability of including the edge (i, j) in
                      the TSP tour. Higher values indicate more promising edges.
    """

    n = distance_matrix.shape[0]

    # 1. Inverse distance: Shorter distances are generally more desirable.
    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero

    # 2. Local neighborhood density:  Cities in denser areas are likely to have
    #    more alternative paths.  Edges connecting to sparser areas are more crucial.
    #    Calculate the average distance to the k nearest neighbors for each city.

    k = min(5, n - 1)  # Consider up to the 5th nearest neighbor, or fewer if n is small
    neighbor_densities = np.zeros(n)
    for i in range(n):
        distances = distance_matrix[i, :]
        nearest_neighbors = np.partition(distances, k + 1)[1:k + 1]  # Exclude self (0th)
        neighbor_densities[i] = np.mean(nearest_neighbors)  # Average dist to k nearest

    density_influence = np.zeros_like(distance_matrix)
    for i in range(n):
        for j in range(n):
            density_influence[i, j] = neighbor_densities[i] + neighbor_densities[j]

    # 3. Combination and scaling: Combine the factors with tunable weights.
    weight_distance = 0.6  # Weight for inverse distance
    weight_density = 0.4  # Weight for density influence

    heuristic_matrix = (weight_distance * inverse_distance +
                        weight_density * (1 / (density_influence + 1e-9))) #Add constant to avoid zero division


    # 4. Sparsification: Zero out edges that are very unlikely to be in the optimal tour
    #    based on a threshold derived from the mean of the heuristic matrix. This promotes
    #    exploration of more focused search spaces.

    threshold = np.mean(heuristic_matrix) * 0.2  # Tune this threshold multiplier
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # 5. Normalization: Normalize to [0, 1] *only if there are non-zero values*
    #    and only *after* sparsification. This prevents small values from being
    #    eliminated due to floating-point precision issues.

    max_val = np.max(heuristic_matrix)
    if max_val > 0:
        heuristic_matrix = heuristic_matrix / max_val

    return heuristic_matrix
```
