```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) that combines several factors
    to determine the desirability of including each edge in a solution.

    Args:
        distance_matrix (np.ndarray): A square matrix representing the distances between cities.

    Returns:
        np.ndarray: A matrix of the same shape as distance_matrix, representing the heuristic values for each edge.
                      Higher values indicate a more promising edge.
    """
    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Inverse distance: Shorter distances are generally more desirable.
    inverse_distance = 1.0 / (distance_matrix + 1e-6)  # Adding a small value to avoid division by zero

    # 2. Nearest Neighbor heuristic: edges connected to nodes with high average distance to others should be favored
    nearest_neighbors = np.argsort(distance_matrix, axis=1)[:, 1:4] # top 3 nearest neighbours
    neighbor_distance_sum = np.zeros(n)
    for i in range(n):
        neighbor_distance_sum[i] = np.sum(distance_matrix[i, nearest_neighbors[i]])
    
    neighbor_score_matrix = np.zeros((n,n))
    for i in range(n):
      for j in range(n):
        neighbor_score_matrix[i,j] = neighbor_distance_sum[i] + neighbor_distance_sum[j]
    
    # 3. Sparsification: Remove edges that are significantly longer than the average distance.
    average_distance = np.mean(distance_matrix)
    sparsification_threshold = 2.0 # Adjust this parameter to control the sparsification level.
    sparse_mask = distance_matrix <= sparsification_threshold * average_distance

    # 4. Combine heuristics and apply sparsification mask.
    heuristic_matrix = inverse_distance + 0.1 * neighbor_score_matrix  # Weights can be adjusted
    heuristic_matrix = heuristic_matrix * sparse_mask # remove the sparse parts
    

    return heuristic_matrix
```
