{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Heuristic function for the Traveling Salesman Problem (TSP) using stochastic solution sampling principles.\n    This version combines several factors, including centrality measures and adaptive sparsification,\n    to estimate the \"promise\" of each edge and reduce the search space.\n\n    Args:\n        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix between cities.\n\n    Returns:\n        np.ndarray: A 2D numpy array of the same shape as the distance matrix, where each element indicates\n                      the heuristic promise of including that edge in the solution.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n\n    # Initialize the heuristic matrix\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate the inverse distance (closer is better)\n    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero\n\n    # Calculate row and column sums (representing how far away a node is on average from others)\n    row_sums = np.sum(distance_matrix, axis=1, keepdims=True)\n    col_sums = np.sum(distance_matrix, axis=0, keepdims=True)\n\n    # Normalize row and column sums - smaller row/col sums imply the node is more centrally located\n    row_normalized = 1 / (row_sums + 1e-9)\n    col_normalized = 1 / (col_sums + 1e-9)\n\n    # Combine these factors:\n    # 1. Inverse distance: Encourages shorter edges\n    # 2. Node centrality:  Encourages edges connected to centrally located nodes\n    heuristic_matrix = inverse_distance * np.sqrt(row_normalized * col_normalized)  # Geometric mean of normalized row/col sums\n\n    # Sparsification: set unpromising entries to zero to reduce the search space\n    # Adaptive threshold based on the distribution of heuristic values\n    flattened_heuristic = heuristic_matrix[np.triu_indices_from(heuristic_matrix, k=1)]\n    flattened_heuristic = flattened_heuristic[flattened_heuristic > 0]  # Consider only positive values\n\n    if len(flattened_heuristic) > 0:\n        threshold = np.quantile(flattened_heuristic, 0.25)  # 25th percentile as threshold\n        heuristic_matrix[heuristic_matrix < threshold] = 0  # sparsify\n\n    # Remove self-loops (diagonal elements)\n    np.fill_diagonal(heuristic_matrix, 0)\n\n    # Further enhance centrality using degree centrality approximation\n    degree_centrality = np.sum(heuristic_matrix > 0, axis=1)\n    degree_centrality_normalized = degree_centrality / (n - 1 + 1e-9) #avoid division by zero in case n==1\n\n    for i in range(n):\n        for j in range(n):\n            if heuristic_matrix[i, j] > 0:\n                heuristic_matrix[i, j] *= np.sqrt(degree_centrality_normalized[i] * degree_centrality_normalized[j])\n\n\n    # Re-apply sparsification after degree centrality boost\n\n    flattened_heuristic = heuristic_matrix[np.triu_indices_from(heuristic_matrix, k=1)]\n    flattened_heuristic = flattened_heuristic[flattened_heuristic > 0]\n\n    if len(flattened_heuristic) > 0:\n        threshold = np.quantile(flattened_heuristic, 0.25)\n        heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"\n    Heuristic function for the Traveling Salesman Problem (TSP) that combines\n    multiple factors to estimate the \"promise\" of including each edge in a solution.\n    This version focuses on neighborhood density, implicitly avoids hub nodes, and\n    normalizes heuristics for robust sampling.  It improves upon v1 by refining\n    the hub penalty and sparsification strategies.\n\n    Args:\n        distance_matrix (np.ndarray): A square matrix where element (i, j) represents\n                                      the distance between city i and city j.  It is\n                                      assumed that the diagonal elements are zero or very large\n                                      to discourage self-loops.\n\n    Returns:\n        np.ndarray: A matrix of the same shape as distance_matrix, where each element\n                      (i, j) indicates the desirability of including the edge (i, j) in\n                      the TSP tour. Higher values indicate more promising edges.\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n\n    # 1. Inverse distance: Shorter distances are generally more desirable.\n    inverse_distance = 1.0 / (distance_matrix + 1e-9)  # Add a small constant to avoid division by zero\n\n    # 2. Neighborhood density:  Encourage edges connecting to less dense areas.\n    #    Calculate the average distance to the k nearest neighbors for each city.\n    #    Cities in sparser areas will have larger average nearest neighbor distances.\n    k = min(5, n - 1)  # Consider up to the 5th nearest neighbor, or fewer if n is small\n    avg_neighbor_distances = np.zeros(n)\n    for i in range(n):\n        distances = distance_matrix[i, :]\n        nearest_neighbor_distances = np.partition(distances, k + 1)[1:k + 1] # Exclude self-loop (distance=0)\n        avg_neighbor_distances[i] = np.mean(nearest_neighbor_distances)\n\n    neighbor_density_factor = np.zeros_like(distance_matrix)\n    for i in range(n):\n        for j in range(n):\n            neighbor_density_factor[i, j] = avg_neighbor_distances[i] + avg_neighbor_distances[j]\n\n    # 3. Implicit Hub Avoidance: Penalize edges if either node has many close neighbors.\n    hub_penalty = np.zeros_like(distance_matrix)\n    degree_threshold = np.median(distance_matrix[distance_matrix>0]) #Dynamic Threshold\n    for i in range(n):\n        for j in range(n):\n              degree_i = np.sum(distance_matrix[i, :] < degree_threshold)\n              degree_j = np.sum(distance_matrix[j, :] < degree_threshold)\n              hub_penalty[i,j] = (degree_i + degree_j)\n\n    # 4. Combination and scaling: Combine the factors with adjusted weights\n    heuristic_matrix = inverse_distance * (1 + 0.5 * neighbor_density_factor) / (1 + 0.01 * hub_penalty**2) # Adjust Weights; Increased Hub Penalty\n\n    # 5. Sparsification: Zero out edges that are very unlikely to be in the optimal tour\n    #    based on a threshold derived from the mean of the heuristic matrix. This promotes\n    #    exploration of more focused search spaces.\n\n    threshold = np.mean(heuristic_matrix[heuristic_matrix>0]) * 0.3  # Tune this threshold multiplier, Exclude zero values when calculating mean\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    # 6. Normalize the matrix to have values between 0 and 1.\n    max_val = np.max(heuristic_matrix)\n    if max_val > 0:\n        heuristic_matrix = heuristic_matrix / max_val\n\n    return heuristic_matrix\n\n[Reflection]\nConsider neighborhood density, dynamic hub penalties, and heuristic normalization for robust performance and exploration.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}