{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code and nothing else. Format your code as a Python code string: \"```python ... ```\".\n", "user": "Write a heuristics function for Solving Traveling Salesman Problem (TSP) via stochastic solution sampling following \"heuristics\". TSP requires finding the shortest path that visits all given nodes and returns to the starting node.\nThe `heuristics` function takes as input a distance matrix, and returns prior indicators of how promising it is to include each edge in a solution. The return is of the same shape as the input.\n\n\n[Worse code]\ndef heuristics_v0(distance_matrix: np.ndarray) -> np.ndarray:\n\n\n    \"\"\"\n    Heuristic function for TSP using a combination of factors and adaptive sparsification.\n    Version 3: Improved handling of edge cases, parameter tuning, and row-wise normalization.\n\n    Args:\n        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.\n\n    Returns:\n        np.ndarray: A 2D numpy array of the same shape as distance_matrix,\n                     representing the heuristic values (prior indicators).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate nearest neighbors for each node.\n    nearest_neighbors = []\n    for i in range(n):\n        distances = distance_matrix[i].copy()\n        distances[i] = np.inf  # Exclude self-loop\n        nearest_neighbors.append(np.argsort(distances))\n\n    # Calculate a centrality measure (degree of connectivity).\n    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=0)\n    degree_centrality = (degree_centrality - np.min(degree_centrality)) / (np.max(degree_centrality) - np.min(degree_centrality) + 1e-9) if np.max(degree_centrality) > np.min(degree_centrality) else np.ones(n) # Normalize to [0,1]\n\n    # Inverse distance factor\n    inverse_distance = 1 / (distance_matrix + 1e-9)\n    inverse_distance = (inverse_distance - np.min(inverse_distance)) / (np.max(inverse_distance) - np.min(inverse_distance) + 1e-9) if np.max(inverse_distance) > np.min(inverse_distance) else np.ones((n,n))  # Normalize to [0,1]\n\n    # Combine factors: inverse distance, nearest neighbor rank, and centrality.\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                # Rank of j in i's nearest neighbors and vice versa\n                rank_i = np.where(nearest_neighbors[i] == j)[0][0]\n                rank_j = np.where(nearest_neighbors[j] == i)[0][0]\n                rank_factor = 1 / (rank_i + rank_j + 1)\n\n                centrality_factor = (degree_centrality[i] + degree_centrality[j]) / 2 # Avg centrality\n\n                # Geometric mean of factors for robustness\n                heuristic_matrix[i, j] = (inverse_distance[i,j] * rank_factor * centrality_factor)**(1/3)\n\n    # Adaptive Sparsification\n    quantile_level = 0.85  # Adjust as needed\n    non_zero_values = heuristic_matrix[heuristic_matrix > 0]\n    threshold = np.quantile(non_zero_values, quantile_level) if non_zero_values.size > 0 else 0\n\n    heuristic_matrix[heuristic_matrix < threshold] = 0 #sparsify\n\n    # Row-wise normalization to avoid zero rows after sparsification\n    for i in range(n):\n        row_sum = np.sum(heuristic_matrix[i])\n        if row_sum > 0:\n            heuristic_matrix[i] = heuristic_matrix[i] / row_sum\n        else:\n            # Assign equal probability if all edges are zero after sparsification\n            heuristic_matrix[i] = np.ones(n) / (n-1)\n            heuristic_matrix[i,i] = 0 # Self loop should have zero probability\n\n\n    return heuristic_matrix\n\n[Better code]\ndef heuristics_v1(distance_matrix: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Improved heuristic function for TSP using node ranking, centrality, adaptive sparsification,\n    geometric mean, and row-wise normalization.\n\n    Args:\n        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.\n\n    Returns:\n        np.ndarray: A 2D numpy array of the same shape as distance_matrix,\n                     representing the heuristic values (prior indicators).\n    \"\"\"\n\n    n = distance_matrix.shape[0]\n    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)\n\n    # Calculate nearest neighbors for each node.\n    nearest_neighbors = []\n    for i in range(n):\n        distances = distance_matrix[i].copy()\n        distances[i] = np.inf  # Exclude self-loop\n        nearest_neighbors.append(np.argsort(distances))\n\n    # Calculate degree centrality. Add a small constant to avoid division by zero.\n    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=0)\n    degree_centrality = degree_centrality / np.max(degree_centrality)  # Normalize\n\n    # Inverse distance factor (normalized).\n    inverse_distance = 1 / (distance_matrix + 1e-9)\n    inverse_distance = inverse_distance / np.max(inverse_distance)\n\n    # Rank-based information\n    rank_matrix = np.zeros_like(distance_matrix, dtype=float)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                rank_i = np.where(nearest_neighbors[i] == j)[0][0]\n                rank_j = np.where(nearest_neighbors[j] == i)[0][0]\n                rank_matrix[i, j] = 1 / (rank_i + rank_j + 2)  # Adding 2 for stabilization and minor difference\n\n    # Combine factors using geometric mean\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                centrality_factor = (degree_centrality[i] * degree_centrality[j])**0.5\n                heuristic_matrix[i, j] = (inverse_distance[i, j] * rank_matrix[i, j] * centrality_factor)**(1/3)\n\n    # Adaptive Sparsification\n    quantile_level = 0.75  # Adjust as needed - Reduce Sparsity slightly\n    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], quantile_level)\n    heuristic_matrix[heuristic_matrix < threshold] = 0\n\n    # Row-wise normalization\n    for i in range(n):\n        row_sum = np.sum(heuristic_matrix[i])\n        if row_sum > 0:\n            heuristic_matrix[i] = heuristic_matrix[i] / row_sum\n        else:\n            # If row is all zeros, distribute evenly to top 3 nearest neighbors\n            top_neighbors = nearest_neighbors[i][:3]\n            for neighbor in top_neighbors:\n                heuristic_matrix[i, neighbor] = 1 / 3 #Distribute evenly\n\n    return heuristic_matrix\n\n[Reflection]\nNormalize inputs, stabilize ranks, use geometric means, and adjust sparsification for balanced exploration.\n\n\n[Improved code]\nPlease write an improved function `heuristics_v2`, according to the reflection. Output code only and enclose your code with Python code block: ```python ... ```."}