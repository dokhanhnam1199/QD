```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using normalized inverse distance, geometric mean centrality,
    rank-based information, adaptive sparsification maintaining connectivity,
    and row-wise processing for edge selection.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                     representing the heuristic values (prior indicators).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # Normalize distance matrix row-wise and column-wise
    row_normalized = distance_matrix / (np.min(distance_matrix, axis=1, keepdims=True) + 1e-9)
    col_normalized = distance_matrix / (np.min(distance_matrix, axis=0, keepdims=True) + 1e-9)
    normalized_distance = (row_normalized + col_normalized) / 2  # Combine row and column normalization
    normalized_distance = 1 / (normalized_distance + 1e-9)  # Inverse distance

    # Geometric mean centrality
    centrality = np.zeros(n)
    for i in range(n):
        centrality[i] = np.exp(np.mean(np.log(distance_matrix[i, distance_matrix[i] > 0] + 1e-9)))  # Avoid log(0)

    centrality = centrality / np.max(centrality)

    # Rank-based information
    rank_matrix = np.zeros_like(distance_matrix, dtype=float)
    for i in range(n):
        ranks = np.argsort(distance_matrix[i, :])
        for j, rank in enumerate(ranks):
            rank_matrix[i, rank] = j + 1  # Rank starts from 1

    rank_matrix = rank_matrix / np.max(rank_matrix)  # Normalize ranks

    # Combine factors
    for i in range(n):
        for j in range(n):
            heuristic_matrix[i, j] = normalized_distance[i, j] * np.sqrt(centrality[i] * centrality[j]) * (1 / (rank_matrix[i, j] + rank_matrix[j, i] + 1e-9))


    # Adaptive sparsification
    quantile_level = 0.75  # Adjust sparsity level
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], quantile_level)
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Ensure connectivity (each row must have at least one edge)
    for i in range(n):
        if np.sum(heuristic_matrix[i, :]) == 0:
            # Find the minimum distance edge in the row and keep it
            min_idx = np.argmin(distance_matrix[i, :])
            heuristic_matrix[i, min_idx] = np.max(heuristic_matrix) if np.max(heuristic_matrix)>0 else 1 #assign max value if possible
            # Also make sure the converse edge exists
            heuristic_matrix[min_idx,i] = np.max(heuristic_matrix) if np.max(heuristic_matrix)>0 else 1 #assign max value if possible
            #heuristic_matrix[i, np.argmin(distance_matrix[i, :])] = 1

    # Row-wise normalization to avoid zero rows after sparsification
    for i in range(n):
        row_sum = np.sum(heuristic_matrix[i])
        if row_sum > 0:
            heuristic_matrix[i] = heuristic_matrix[i] / row_sum

    return heuristic_matrix
```
