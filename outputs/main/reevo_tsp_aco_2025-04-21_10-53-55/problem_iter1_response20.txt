```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for the Traveling Salesman Problem (TSP) that combines
    several factors to estimate the desirability of including each edge in a solution.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance
                                         between each pair of cities.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                    where each element represents the heuristic value (probability)
                    of including the corresponding edge in the TSP solution.
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros((n, n))

    # Inverse distance (closer cities are preferred)
    inverse_distance = 1 / (distance_matrix + 1e-9)  # Adding a small constant to avoid division by zero

    # Calculate the average distance to each city
    avg_distances = np.mean(distance_matrix, axis=1)

    for i in range(n):
        for j in range(n):
            if i != j:
                # Favor edges where both cities are "central" (have low average distance to others)
                centrality_factor = (avg_distances[i] + avg_distances[j]) / 2

                # Combine factors to get a heuristic value
                heuristic_matrix[i, j] = inverse_distance[i, j] / (centrality_factor + 1e-9) # Higher inverse distance, lower centrality is good

    # Normalize heuristic values to a range [0, 1] for probabilistic selection
    max_heuristic = np.max(heuristic_matrix)
    min_heuristic = np.min(heuristic_matrix)

    if max_heuristic > min_heuristic:
        heuristic_matrix = (heuristic_matrix - min_heuristic) / (max_heuristic - min_heuristic)
    else:
        heuristic_matrix = np.ones_like(heuristic_matrix) * 0.5 # handles edge case where all values are equal

    # Sparsify the matrix (set low probability edges to zero) to limit search space
    threshold = np.mean(heuristic_matrix) * 0.2  # Threshold as a fraction of the mean

    heuristic_matrix[heuristic_matrix < threshold] = 0

    # Ensure diagonal elements are zero (no self-loops)
    np.fill_diagonal(heuristic_matrix, 0)

    return heuristic_matrix
```
