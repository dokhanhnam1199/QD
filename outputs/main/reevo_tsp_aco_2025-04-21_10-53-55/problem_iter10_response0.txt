```python
import numpy as np

def heuristics_v2(distance_matrix: np.ndarray) -> np.ndarray:
    """
    Heuristic function for TSP using normalized inverse distance,
    geometric mean centrality, rank-based information, adaptive sparsification,
    and degree centrality refinement with row-wise processing. Includes local search inspired refinement.

    Args:
        distance_matrix (np.ndarray): A 2D numpy array representing the distance matrix.

    Returns:
        np.ndarray: A 2D numpy array of the same shape as distance_matrix,
                     representing the heuristic values (prior indicators).
    """

    n = distance_matrix.shape[0]
    heuristic_matrix = np.zeros_like(distance_matrix, dtype=float)

    # 1. Row and Column Normalization
    row_normalized = distance_matrix / (np.min(distance_matrix, axis=1, keepdims=True) + 1e-9)
    col_normalized = distance_matrix / (np.min(distance_matrix, axis=0, keepdims=True) + 1e-9)
    normalized_distance = (row_normalized + col_normalized) / 2
    normalized_distance = 1 / (normalized_distance + 1e-9)
    normalized_distance = normalized_distance / np.max(normalized_distance)

    # 2. Geometric Mean Centrality
    centrality = np.zeros(n)
    for i in range(n):
        centrality[i] = np.exp(np.mean(np.log(distance_matrix[i, distance_matrix[i] > 0] + 1e-9)))
    centrality = 1 / (centrality / np.max(centrality) + 1e-9) # Invert & normalize

    # 3. Rank-Based Information
    nearest_neighbors = []
    for i in range(n):
        distances = distance_matrix[i].copy()
        distances[i] = np.inf  # Exclude self-loop
        nearest_neighbors.append(np.argsort(distances))

    # 4. Combine Factors
    for i in range(n):
        for j in range(n):
            if i != j:
                rank_i = np.where(nearest_neighbors[i] == j)[0][0]
                rank_j = np.where(nearest_neighbors[j] == i)[0][0]
                rank_factor = 1 / (rank_i + rank_j + 1)

                centrality_factor = np.sqrt(centrality[i] * centrality[j])

                heuristic_matrix[i, j] = normalized_distance[i, j] * rank_factor * centrality_factor

    # 5. Adaptive Sparsification
    quantile_level = 0.75  # Adjust sparsity level
    threshold = np.quantile(heuristic_matrix[heuristic_matrix > 0], quantile_level)
    heuristic_matrix[heuristic_matrix < threshold] = 0

    # 6. Degree Centrality Refinement & Row-wise Processing
    degree_centrality = np.sum(1 / (distance_matrix + 1e-9), axis=0)
    degree_centrality = degree_centrality / np.max(degree_centrality)

    for i in range(n):
        heuristic_matrix[i] = heuristic_matrix[i] * degree_centrality[i] # Scale row using node i's centrality
        row_sum = np.sum(heuristic_matrix[i])
        if row_sum > 0:
            heuristic_matrix[i] = heuristic_matrix[i] / row_sum

    # 7. Local Search inspired refinement: Enhance promising edges
    for i in range(n):
        # Increase the heuristic value of edges to the nearest neighbors
        for neighbor_idx in nearest_neighbors[i][:3]:  # Focus on top 3 nearest neighbors
            if heuristic_matrix[i, neighbor_idx] > 0:
                heuristic_matrix[i, neighbor_idx] = min(1.0, heuristic_matrix[i, neighbor_idx] * 1.2) # Boost, but cap at 1

    return heuristic_matrix
```
