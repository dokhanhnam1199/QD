{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines a tight-fit preference (Best Fit) with a preference for bins\n    that are not excessively empty after packing. Uses adaptive scoring.\n    \"\"\"\n    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)\n    \n    suitable_bins_mask = bins_remain_cap >= item\n    \n    if np.any(suitable_bins_mask):\n        suitable_bins_cap = bins_remain_cap[suitable_bins_mask]\n        \n        gaps = suitable_bins_cap - item\n        \n        # Best Fit component: Higher score for smaller gaps (tighter fits)\n        # Add a small epsilon for numerical stability and to avoid division by zero.\n        best_fit_scores = 1.0 / (gaps + 1e-9)\n        \n        # Adaptive capacity utilization component: Penalize bins that will be very empty.\n        # This encourages using bins more fully, avoiding fragmentation.\n        # The score increases as the remaining capacity decreases relative to the item size.\n        # We normalize by the original bin capacity to make it relative.\n        # A small epsilon is added to item size for normalization stability.\n        capacity_utilization_scores = (suitable_bins_cap - item) / (suitable_bins_cap + 1e-9)\n        \n        # Combine scores with a weighting. Prioritize tighter fits more.\n        # The combined score aims to balance \"best fit\" with \"good utilization\".\n        # We invert capacity_utilization_scores to prioritize smaller remaining capacity (higher utilization)\n        combined_scores = (0.7 * best_fit_scores) + (0.3 * (1.0 / (capacity_utilization_scores + 1e-9)))\n        \n        priorities[suitable_bins_mask] = combined_scores\n            \n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}