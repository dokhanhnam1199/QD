```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    suitable_bins_mask = bins_remain_cap >= item
    
    if not np.any(suitable_bins_mask):
        return priorities

    suitable_bins_cap = bins_remain_cap[suitable_bins_mask]
    suitable_bins_indices = np.where(suitable_bins_mask)[0]

    
    best_fit_diff = suitable_bins_cap - item
    min_diff = np.min(best_fit_diff)
    
    best_fit_indices_in_suitable = np.where(best_fit_diff == min_diff)[0]
    
    
    for idx_in_suitable in best_fit_indices_in_suitable:
        original_idx = suitable_bins_indices[idx_in_suitable]
        
        
        remaining_cap_after_placement = bins_remain_cap[original_idx] - item
        
        
        if remaining_cap_after_placement == 0:
            priority_score = 2.0 
        else:
            
            priority_score = 1.0 / (remaining_cap_after_placement + 1e-6) 
            
        priorities[original_idx] = priority_score
    
    
    
    
    
    return priorities
```
