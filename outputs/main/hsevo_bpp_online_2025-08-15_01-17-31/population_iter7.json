[
  {
    "stdout_filepath": "problem_iter5_response0.txt_stdout.txt",
    "code_path": "problem_iter5_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines Best Fit with a penalty for excessively large remaining capacities,\n    prioritizing bins that fit the item tightly and are not overly empty.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    can_fit_mask = bins_remain_cap >= item\n    \n    if not np.any(can_fit_mask):\n        return priorities\n    \n    valid_bins_remain_cap = bins_remain_cap[can_fit_mask]\n    \n    # Best Fit component: inverse of the remaining gap after placing the item.\n    # Higher score for smaller gaps (tighter fits).\n    epsilon = 1e-9\n    best_fit_scores = 1.0 / (valid_bins_remain_cap - item + epsilon)\n    \n    # Penalty for \"too much\" remaining capacity.\n    # This penalizes bins that will be left significantly empty after the item is placed.\n    # We use a logarithmic penalty to be less aggressive than exponential.\n    # The penalty is higher for larger remaining capacities.\n    # We subtract 1 to make the penalty focus on capacity substantially larger than the item.\n    # If remaining capacity is close to item size, penalty is small.\n    # If remaining capacity is much larger, penalty is significant.\n    penalty_factor = 0.5 # Tunable parameter for penalty strength\n    # Avoid log(0) or log(negative) by ensuring argument is > 1\n    penalty_arg = (valid_bins_remain_cap / item) if item > 0 else np.inf\n    # We only want to penalize if remaining capacity is significantly larger than the item\n    # Let's define \"significantly larger\" as > 2 * item for instance.\n    # A simpler approach is to penalize based on the absolute remaining capacity if it's large.\n    # Or penalize based on the *proportion* of capacity left.\n    # Let's try penalizing remaining capacity relative to bin's original capacity (if known, but it's not).\n    # Instead, let's penalize based on (remaining_cap_after_fit - item).\n    # If remaining_cap_after_fit - item is large, we want a larger penalty.\n    # Using log((valid_bins_remain_cap - item) + epsilon) can work, but a simpler penalty might be better.\n    # Let's consider the \"slack\" as in priority_v0 but inverted, penalizing large slack.\n    # A linear penalty on slack: -(valid_bins_remain_cap - item)\n    # A better penalty based on \"over-emptiness\":\n    # Penalty is higher if (valid_bins_remain_cap - item) is large compared to 'item'.\n    # Let's adapt Heuristics 11-13 logic but make it simpler.\n    # Penalty is proportional to the remaining capacity AFTER the item is placed, if it's \"too much\".\n    # A threshold could be 'item', meaning if remaining capacity > item, penalize.\n    # Or if remaining capacity > some fraction of bin capacity (unknown).\n    # Let's try to penalize bins where `valid_bins_remain_cap - item` is large.\n    # We want to reduce priority for bins that will be left very empty.\n    # A simple penalty could be proportional to `valid_bins_remain_cap`.\n    # Or `valid_bins_remain_cap / item`.\n    # Let's use a penalty that decreases priority if remaining capacity is large.\n    # The inverse of remaining capacity was used in v0 for \"fullness\". Let's use that in reverse.\n    # Penalize if `valid_bins_remain_cap` is large.\n    # Penalty = f(valid_bins_remain_cap). We want f to be decreasing.\n    # Let's use a simple negative linear term on the remaining capacity itself.\n    # This is related to the 'slack_scores' in v0 but as a penalty.\n    # penalty = penalty_factor * valid_bins_remain_cap\n    \n    # Alternative penalty idea: penalize bins that are \"too empty\" in terms of how much\n    # larger their remaining capacity is compared to the item being packed.\n    # For example, if remaining_cap - item > item, then it's \"too empty\".\n    # Let's create a penalty term that is larger for larger remaining capacities.\n    # Using the inverse of remaining capacity from v0's slack_scores, but subtracting it.\n    # This prioritizes bins that will be fuller.\n    # `slack_scores` from v0: 1.0 / (valid_bins_remain_cap + epsilon)\n    # If we subtract this, we penalize fuller bins. This is not what we want.\n    # We want to penalize *emptier* bins.\n    # Let's try: penalty is proportional to the *amount of wasted space* in the bin *after* fitting.\n    # Wasted space = valid_bins_remain_cap - item\n    # Penalty = penalty_factor * (valid_bins_remain_cap - item)\n    # This would reduce priority for bins with larger remaining space.\n    \n    # Combine Best Fit with a penalty for bins that are likely to be left very empty.\n    # The penalty is stronger for bins with a larger remaining capacity after placing the item.\n    # We want to reduce the score if `valid_bins_remain_cap - item` is large.\n    # Let's use the score `(valid_bins_remain_cap - item)` directly as a penalty.\n    # This is effectively saying: `best_fit_score - penalty_factor * (remaining_capacity_after_fit)`\n    # Where `remaining_capacity_after_fit = valid_bins_remain_cap - item`.\n    \n    # Let's refine the penalty to be based on the \"emptiness ratio\" of the bin after packing.\n    # If a bin has capacity C and we place item I, remaining is C-I.\n    # If C-I is large, we penalize.\n    # Consider the capacity ratio of the *remaining space* to the *item size*.\n    # If `(valid_bins_remain_cap - item) / item` is large, we penalize.\n    # `penalty_term = penalty_factor * ((valid_bins_remain_cap - item) / item)`\n    # This handles cases where `item` is small, leading to large penalties if remaining is large.\n    # Let's clip this ratio to avoid extreme values, perhaps by limiting how much larger the remaining space can be.\n    # A simpler approach: penalize if `valid_bins_remain_cap` itself is large.\n    # Let's use the `slack_scores` from v0 but adjust the combination.\n    # `best_fit_scores` are good. We want to *decrease* priority if `valid_bins_remain_cap` is large.\n    # So, we can subtract a term that increases with `valid_bins_remain_cap`.\n    \n    # Let's combine Best Fit with a penalty for remaining capacity that's much larger than the item size.\n    # This aims to select bins that are \"almost full\" but can still accommodate the item.\n    # The \"gap\" is `valid_bins_remain_cap - item`. Best Fit prioritizes small gaps.\n    # The \"slack\" is `valid_bins_remain_cap`. We want to penalize large slack.\n    # Let's define a penalty that is larger for larger slack.\n    # A simple linear penalty: `penalty_amount = penalty_factor * valid_bins_remain_cap`\n    # This could be too aggressive.\n    \n    # Consider Heuristic 10's approach: `best_fit_score * (1 - penalty_weight * (remaining_capacity / bin_capacity))`\n    # Since bin_capacity is unknown, we can use `item` or a scaled `valid_bins_remain_cap`.\n    # Let's try: `best_fit_score * (1 - penalty_factor * (valid_bins_remain_cap / (item + epsilon)))`\n    # This would penalize bins where remaining capacity is large relative to item size.\n    # If `valid_bins_remain_cap < item`, the term `(valid_bins_remain_cap / (item + epsilon))` is < 1.\n    # `1 - penalty_factor * (...)` would be greater than `1 - penalty_factor`.\n    # This boosts bins that leave less space *relative to item size*.\n    # This is similar to boosting bins that are \"almost full\" when scaled by item size.\n    \n    # Let's combine the Best Fit score with a penalty that reduces priority for bins\n    # with a large amount of remaining capacity *after* the item is placed.\n    # We can use a term that is proportional to the remaining capacity itself.\n    # Penalty = `penalty_factor * (valid_bins_remain_cap - item)`\n    # This makes the priority: `best_fit_score - penalty_factor * (valid_bins_remain_cap - item)`\n    # This is equivalent to prioritizing bins with `1 / (gap) - penalty_factor * (gap)`.\n    \n    # Let's adopt a penalty based on the \"emptiness\" of the bin *after* placement.\n    # We want to penalize bins where `valid_bins_remain_cap` is large.\n    # A simple way is to subtract a fraction of `valid_bins_remain_cap`.\n    # The \"gap\" is `valid_bins_remain_cap - item`.\n    # Let's combine the inverse gap (best fit) with the inverse of remaining capacity (fullness).\n    # v0 used (best_fit + slack)/2.\n    # v1 uses normalized best_fit - penalty.\n    # Let's try a weighted sum of best_fit_scores and a penalty for slack.\n    # Penalty for slack: `penalty_factor * (valid_bins_remain_cap / (item + epsilon))`\n    # This penalizes bins where remaining capacity is large relative to item size.\n    # If `valid_bins_remain_cap = item`, penalty is `penalty_factor`.\n    # If `valid_bins_remain_cap = 2 * item`, penalty is `2 * penalty_factor`.\n    \n    # Final approach: combine the 'best fit' score (inverse gap) with a penalty\n    # that reduces priority for bins that will have a lot of remaining capacity.\n    # The penalty is linear with the remaining capacity `valid_bins_remain_cap`.\n    # This is a balance between tight packing and not leaving bins excessively empty.\n    \n    # Score = BestFit_Score - Penalty_for_Slack\n    # BestFit_Score = 1.0 / (valid_bins_remain_cap - item + epsilon)\n    # Penalty_for_Slack = penalty_factor * valid_bins_remain_cap\n    \n    # Let's try to boost bins that have a small remaining capacity after fitting,\n    # but also consider the \"tightness\" of the fit.\n    # Heuristic 14-20 approach: normalized_best_fit + penalty for empty bins.\n    # Let's simplify it: Best Fit score, but penalize if remaining capacity is very large.\n    \n    # Combining Best Fit (inverse gap) with a penalty for large remaining capacity.\n    # This aims to select bins that are a tight fit and do not leave excessive empty space.\n    # Penalty is applied if `valid_bins_remain_cap` is significantly larger than `item`.\n    \n    # Let's use the `best_fit_scores` and subtract a penalty proportional to the\n    # `valid_bins_remain_cap` to favor fuller bins.\n    penalty_strength = 0.2 # Tunable parameter for penalty\n    \n    # Calculate combined priorities: Best fit score minus a penalty for remaining capacity.\n    # This prioritizes bins that fit the item snugly (high best_fit_scores)\n    # and de-prioritizes bins that will have a lot of remaining space.\n    combined_priorities = best_fit_scores - penalty_strength * (valid_bins_remain_cap - item)\n    \n    # Assign the calculated priorities to the original indices\n    original_indices = np.where(can_fit_mask)[0]\n    priorities[original_indices] = combined_priorities\n\n    return priorities",
    "response_id": 0,
    "tryHS": true,
    "obj": 4.048663741523748,
    "cyclomatic_complexity": 3.0,
    "halstead": 125.33591475173351,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response1.txt_stdout.txt",
    "code_path": "problem_iter5_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines Best Fit with a penalty for excessively large remaining capacity.\n\n    Prioritizes bins that offer a tight fit, but penalizes bins that, after\n    packing, would still have a significantly larger remaining capacity than\n    the item itself, promoting better overall bin utilization.\n    \"\"\"\n    priorities = np.full_like(bins_remain_cap, -np.inf)\n    \n    can_fit_mask = bins_remain_cap >= item\n    \n    if np.any(can_fit_mask):\n        suitable_bins_caps = bins_remain_cap[can_fit_mask]\n        \n        # Best Fit component: inverse of the remaining capacity after packing\n        # Higher score for smaller remaining capacity\n        fit_scores = 1.0 / (suitable_bins_caps - item + 1e-9)\n        \n        # Penalty component: penalize bins that, after packing, still have a\n        # much larger capacity than the item. This encourages filling bins more\n        # completely rather than leaving large gaps in partially filled bins.\n        # The penalty is higher for bins with a larger ratio of remaining capacity\n        # to the item size. We use an exponential decay to make the penalty\n        # significant only for substantially larger remaining capacities.\n        capacity_ratio = (suitable_bins_caps - item) / item if item > 0 else np.inf\n        penalty = np.exp(-0.5 * capacity_ratio) * 0.5 # Tunable penalty factor (0.5)\n        \n        # Combine scores: Best Fit score minus the penalty\n        # Higher values indicate better priority\n        combined_priorities = fit_scores - penalty\n        \n        priorities[can_fit_mask] = combined_priorities\n        \n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "obj": 4.198244914240141,
    "cyclomatic_complexity": 3.0,
    "halstead": 153.80110650593844,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response2.txt_stdout.txt",
    "code_path": "problem_iter5_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines Best Fit with a penalty for excessive remaining capacity.\n    Prioritizes bins that fit the item tightly while penalizing those that\n    would leave a very large amount of empty space, encouraging fuller bins.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Identify bins that can fit the item\n    can_fit_mask = bins_remain_cap >= item\n    \n    # If no bins can fit, return all zeros\n    if not np.any(can_fit_mask):\n        return priorities\n    \n    # Get remaining capacities for bins that can fit the item\n    valid_bins_remain_cap = bins_remain_cap[can_fit_mask]\n    \n    # Calculate 'Best Fit' score: inverse of the gap (remaining capacity - item)\n    # This prioritizes bins with minimal wasted space immediately after placement.\n    epsilon = 1e-9\n    gaps = valid_bins_remain_cap - item\n    best_fit_scores = 1.0 / (gaps + epsilon)\n    \n    # Calculate a penalty for bins that would have a large remaining capacity after fitting the item.\n    # This encourages using bins that become more \"full\" rather than those that remain very \"empty\".\n    # We use a logarithmic penalty to dampen extreme values and create a smoother penalty.\n    # A smaller remaining capacity after fitting is better.\n    slack_after_fit = valid_bins_remain_cap - item\n    # Penalize slack that is significantly larger than the item size itself.\n    # This encourages using bins where the remaining space is somewhat proportional to the item.\n    # We use log to reduce the impact of very large slacks. Add 1 to avoid log(0) or log(small_positive).\n    slack_penalty = np.log(slack_after_fit + 1 + epsilon) \n    \n    # Combine scores: Higher best_fit_scores are good. Higher slack_penalty is bad (subtract it).\n    # We normalize the best_fit_scores to prevent them from dominating the penalty.\n    if np.max(best_fit_scores) > 0:\n        normalized_best_fit = best_fit_scores / np.max(best_fit_scores)\n    else:\n        normalized_best_fit = np.zeros_like(best_fit_scores)\n\n    # Combine normalized best fit with the slack penalty.\n    # Higher priority means a tighter fit and less remaining space after fitting.\n    combined_scores = normalized_best_fit - slack_penalty\n    \n    # Assign the combined scores to the priorities array for valid bins\n    priorities[can_fit_mask] = combined_scores\n    \n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "obj": 4.048663741523748,
    "cyclomatic_complexity": 3.0,
    "halstead": 142.7018117963935,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response3.txt_stdout.txt",
    "code_path": "problem_iter5_code3.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines Best Fit with a penalty for leaving excessive space,\n    prioritizing tight fits while discouraging overly sparse bin utilization.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    suitable_bins_mask = bins_remain_cap >= item\n    \n    if np.any(suitable_bins_mask):\n        suitable_bins_cap = bins_remain_cap[suitable_bins_mask]\n        \n        # Best Fit component: minimize remaining capacity after packing\n        remaining_after_fit = suitable_bins_cap - item\n        \n        # Score based on inverse of remaining space (higher is better)\n        # Add epsilon to avoid division by zero for perfect fits\n        epsilon = 1e-9\n        best_fit_scores = 1.0 / (remaining_after_fit + epsilon)\n        \n        # Penalty component: Discourage bins that leave a large amount of space\n        # This is a simplified approach inspired by (11th/12th/13th) and (10th) heuristics.\n        # We penalize if the remaining space is significantly larger than the item size.\n        # Let's use a threshold: if remaining_after_fit > factor * item, apply a reduction.\n        penalty_factor = 0.5  # Reduce priority by 50% if condition met\n        penalty_threshold_ratio = 1.5 # Apply penalty if remaining space > 1.5 * item size\n\n        penalty_mask = remaining_after_fit > (penalty_threshold_ratio * item)\n        \n        # Combine scores: Apply penalty multiplicatively\n        combined_scores = best_fit_scores.copy()\n        combined_scores[penalty_mask] *= penalty_factor\n        \n        # Normalize scores to be between 0 and 1 for better weighting/interpretation\n        # This normalization is inspired by (14th-20th) and (5th) heuristics.\n        if np.max(combined_scores) > 0:\n            normalized_scores = combined_scores / np.max(combined_scores)\n        else:\n            normalized_scores = np.zeros_like(combined_scores) # Should not happen if any suitable bin exists\n\n        # Assign priorities: use normalized scores for bins that can fit the item\n        original_indices = np.where(suitable_bins_mask)[0]\n        priorities[original_indices] = normalized_scores\n        \n    return priorities",
    "response_id": 3,
    "tryHS": false,
    "obj": 4.048663741523748,
    "cyclomatic_complexity": 3.0,
    "halstead": 118.59257041502654,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response4.txt_stdout.txt",
    "code_path": "problem_iter5_code4.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines Best Fit with a penalty for leaving excessive remaining capacity.\n    Prioritizes bins with minimal remaining space after packing, but penalizes\n    bins that would leave too much space, promoting balanced utilization.\n    This heuristic aims to provide a more balanced approach than pure Best Fit.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Mask for bins that can accommodate the item\n    can_fit_mask = bins_remain_cap >= item\n    \n    # Consider only bins that can fit the item\n    valid_bins_remain_cap = bins_remain_cap[can_fit_mask]\n    \n    if valid_bins_remain_cap.size > 0:\n        # Calculate the remaining capacity after placing the item\n        remaining_after_fit = valid_bins_remain_cap - item\n        \n        # Best Fit component: prioritize bins with minimal remaining space.\n        # Use inverse of remaining space for higher scores for tighter fits.\n        # Add a small epsilon to avoid division by zero.\n        epsilon = 1e-9\n        best_fit_scores = 1.0 / (remaining_after_fit + epsilon)\n        \n        # Penalty component: penalize bins that leave a large amount of remaining space.\n        # This discourages selecting very large bins for small items if other options exist.\n        # We use a threshold based on the item size. If remaining_after_fit is larger than\n        # a multiple of the item size, apply a penalty.\n        penalty_threshold_factor = 1.0  # Penalize if remaining space > item size\n        penalty_factor = 0.5            # Reduce priority by 50%\n        \n        penalty_mask = remaining_after_fit > (penalty_threshold_factor * item)\n        \n        # Apply the penalty to the best_fit_scores\n        combined_priorities = best_fit_scores.copy()\n        combined_priorities[penalty_mask] *= penalty_factor\n        \n        # Normalize the combined scores to be between 0 and 1\n        # This ensures scores are comparable across different sets of bins.\n        max_priority = np.max(combined_priorities)\n        if max_priority > 0:\n            final_priorities = combined_priorities / max_priority\n        else:\n            final_priorities = np.zeros_like(combined_priorities)\n            \n        # Assign the calculated priorities back to the original indices\n        original_indices = np.where(can_fit_mask)[0]\n        priorities[original_indices] = final_priorities\n\n    return priorities",
    "response_id": 4,
    "tryHS": false,
    "obj": 4.048663741523748,
    "cyclomatic_complexity": 3.0,
    "halstead": 131.76952268336282,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response5.txt_stdout.txt",
    "code_path": "problem_iter5_code5.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining Best Fit with a penalty for very large remaining capacities.\n    Favors bins that are a tight fit and discourages using bins that are excessively underfilled.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap)\n    \n    suitable_bins_mask = bins_remain_cap >= item\n    \n    if np.any(suitable_bins_mask):\n        suitable_bins_cap = bins_remain_cap[suitable_bins_mask]\n        \n        # Best Fit component: Smaller difference is better\n        best_fit_diff = suitable_bins_cap - item\n        \n        # Normalize the Best Fit scores to be between 0 and 1, higher is better\n        # Add a small epsilon to avoid division by zero if an item perfectly fills a bin.\n        # Invert and normalize: smaller diff -> higher score\n        if np.max(best_fit_diff) > np.min(best_fit_diff):\n            best_fit_scores = 1.0 - (best_fit_diff - np.min(best_fit_diff)) / (np.max(best_fit_diff) - np.min(best_fit_diff) + 1e-9)\n        else:\n            best_fit_scores = np.ones_like(best_fit_diff) # All gaps are the same\n\n        # Penalty for \"too much\" remaining capacity (inspired by Heuristics 11-13)\n        # Penalize bins where remaining capacity is much larger than the item size.\n        # Use a sigmoid-like penalty that is close to 0 for small differences and approaches 1 for large ones.\n        # This is subtracted from the best_fit_score. A high penalty means low priority.\n        # Threshold and steepness can be tuned. Here, penalty increases significantly when remaining capacity > 2*item.\n        penalty_threshold_ratio = 2.0 \n        penalty_steepness = 0.5\n        \n        large_capacity_penalty = 1.0 / (1.0 + np.exp(-penalty_steepness * (suitable_bins_cap - item * penalty_threshold_ratio)))\n        \n        # Combine scores: Additive combination, where penalty is subtracted.\n        # This means higher best_fit_score is good, higher penalty is bad.\n        combined_priorities = best_fit_scores - large_capacity_penalty\n\n        # Assign the calculated priorities to the original indices\n        original_indices = np.where(suitable_bins_mask)[0]\n        priorities[original_indices] = combined_priorities\n\n    return priorities",
    "response_id": 5,
    "tryHS": false,
    "obj": 4.487435181491823,
    "cyclomatic_complexity": 3.0,
    "halstead": 217.98463765702255,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response6.txt_stdout.txt",
    "code_path": "problem_iter5_code6.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines Best Fit with a penalty for bins that are too large,\n    prioritizing tighter fits while avoiding extremely large remaining capacities.\n    This heuristic balances minimizing leftover space with not opening excessively large bins.\n    \"\"\"\n    priorities = np.full_like(bins_remain_cap, -np.inf)\n    can_fit_mask = bins_remain_cap >= item\n    \n    bins_that_can_fit_caps = bins_remain_cap[can_fit_mask]\n    \n    if bins_that_can_fit_caps.size > 0:\n        gaps = bins_that_can_fit_caps - item\n        \n        # Best Fit component: prioritize bins with the smallest gap.\n        # Using 1/(gap + epsilon) gives higher scores to smaller gaps.\n        best_fit_scores = 1.0 / (gaps + 1e-9)\n        \n        # Additional component: Penalize bins that leave very large remaining capacity.\n        # This is achieved by subtracting a value that increases with the remaining capacity.\n        # A simple linear penalty is used here: -(bins_that_can_fit_caps).\n        # This favors using bins that are less empty among those that provide a good fit.\n        combined_scores = best_fit_scores - bins_that_can_fit_caps\n        \n        priorities[can_fit_mask] = combined_scores\n        \n    return priorities",
    "response_id": 6,
    "tryHS": false,
    "obj": 4.048663741523748,
    "cyclomatic_complexity": 2.0,
    "halstead": 81.7492568250068,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response7.txt_stdout.txt",
    "code_path": "problem_iter5_code7.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines Best Fit with a penalty for excessive remaining capacity,\n    favoring bins that are nearly full without being wasteful.\n    \"\"\"\n    priorities = np.full_like(bins_remain_cap, -np.inf)\n    can_fit_mask = bins_remain_cap >= item\n\n    if not np.any(can_fit_mask):\n        return priorities\n\n    suitable_bins_caps = bins_remain_cap[can_fit_mask]\n    gaps = suitable_bins_caps - item\n\n    # Best Fit Score: Higher for smaller gaps (tighter fit)\n    # Add epsilon to prevent division by zero for perfect fits.\n    best_fit_score = 1.0 / (gaps + 1e-6)\n\n    # Penalty for \"too much\" remaining capacity:\n    # Favor bins that don't have a lot of leftover space after packing.\n    # This is a modification inspired by Heuristic 7's idea, but controlled.\n    # We penalize bins where the remaining capacity (after packing) is much larger than the item.\n    # Using log helps to dampen the effect of very large capacities.\n    # A small constant is added to the denominator to prevent log(0) and negative values.\n    # Multiplying by a factor (e.g., 0.5) controls the strength of the penalty.\n    penalty_factor = 0.5\n    # Ensure the term inside log is always positive\n    penalty_term = np.maximum(gaps, 1e-3)\n    excess_capacity_penalty = penalty_factor * np.log(penalty_term + 1e-3) # Added epsilon inside log\n\n    # Combine scores: Subtract the penalty from the best-fit score.\n    # Higher combined score means a better bin choice.\n    combined_priorities = best_fit_score - excess_capacity_penalty\n\n    priorities[can_fit_mask] = combined_priorities\n\n    return priorities",
    "response_id": 7,
    "tryHS": false,
    "obj": 4.058635819704831,
    "cyclomatic_complexity": 2.0,
    "halstead": 111.48579046593244,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response8.txt_stdout.txt",
    "code_path": "problem_iter5_code8.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Prioritizes bins by combining a normalized 'best fit' score with a penalty\n    for bins with excessively large remaining capacities, encouraging fuller bins.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=np.float64)\n    \n    suitable_bins_mask = bins_remain_cap >= item\n    \n    if np.any(suitable_bins_mask):\n        suitable_bins_cap = bins_remain_cap[suitable_bins_mask]\n        \n        # Calculate the difference for best fit\n        best_fit_diff = suitable_bins_cap - item\n        \n        # Normalized 'best fit' score: Higher for smaller gaps\n        # Add epsilon to avoid division by zero\n        fit_scores = 1.0 / (best_fit_diff + 1e-9)\n        \n        if np.max(fit_scores) > 0:\n            normalized_fit_scores = fit_scores / np.max(fit_scores)\n        else:\n            normalized_fit_scores = np.zeros_like(fit_scores)\n        \n        # Penalty for bins with significantly more capacity than needed (similar to Heuristic 11-13 idea)\n        # This discourages using very large bins for small items if other partially filled bins exist\n        # We use a threshold based on item size to avoid penalizing all bins that aren't a perfect fit\n        # A small constant is added to capacity to prevent division by zero and handle cases where item is 0.\n        # The penalty increases exponentially as remaining capacity grows beyond a certain point relative to the item.\n        # Penalty is capped to avoid extreme negative values.\n        capacity_penalty_factor = 0.5 # Tunable parameter for penalty strength\n        capacity_threshold_ratio = 3.0 # Tunable parameter: penalize bins with capacity > ratio * item\n        \n        # Calculate penalty: higher for larger remaining capacity relative to item size\n        # Only apply penalty if remaining capacity is significantly larger than the item\n        large_capacity_mask = suitable_bins_cap > capacity_threshold_ratio * item\n        \n        # Calculate a penalty score for bins that are too large\n        # The penalty is based on the excess capacity relative to the item size, scaled exponentially.\n        # Add 1 to the denominator to ensure the penalty is applied correctly and doesn't become 0 for minimal excess.\n        penalty_values = np.zeros_like(suitable_bins_cap)\n        if np.any(large_capacity_mask):\n            excess_capacity = suitable_bins_cap[large_capacity_mask] - item\n            # Exponential penalty: higher penalty for more excess capacity\n            penalty_values[large_capacity_mask] = np.exp(capacity_penalty_factor * (excess_capacity / (item + 1e-9))) - 1.0\n            \n        # Combine normalized fit scores with the penalty. Lower penalty values are better.\n        # We subtract the penalty to give higher priority to bins with low penalty.\n        combined_priorities = normalized_fit_scores - penalty_values\n        \n        # Assign the calculated priorities to the original indices\n        priorities[suitable_bins_mask] = combined_priorities\n    \n    return priorities",
    "response_id": 8,
    "tryHS": false,
    "obj": 4.048663741523748,
    "cyclomatic_complexity": 4.0,
    "halstead": 199.7052750908657,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter5_response9.txt_stdout.txt",
    "code_path": "problem_iter5_code9.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"Combines Best Fit with a penalty for bins that would remain excessively empty.\n\n    This heuristic favors bins with minimal remaining space after packing (Best Fit),\n    but also down-weights bins where the item would occupy a very small fraction\n    of the remaining capacity, promoting better overall bin utilization.\n    \"\"\"\n    epsilon = 1e-9\n    \n    # Identify bins that can accommodate the item\n    suitable_bins_mask = bins_remain_cap >= item\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    if not np.any(suitable_bins_mask):\n        return priorities\n\n    suitable_bins_cap = bins_remain_cap[suitable_bins_mask]\n    \n    # --- Best Fit Component ---\n    # Calculate the remaining capacity in suitable bins after placing the item\n    remaining_after_fit = suitable_bins_cap - item\n    # Higher score for smaller remaining capacity (tighter fit)\n    best_fit_score = 1.0 / (remaining_after_fit + epsilon)\n\n    # --- Penalty for Excessively Empty Bins Component ---\n    # Define a threshold for what constitutes \"excessively empty\".\n    # This can be a fraction of the item size or a fraction of the bin's original capacity.\n    # Let's use a fraction of the *remaining capacity* of the bin. If the item fills\n    # less than a certain percentage of the *available space*, we penalize it.\n    # For instance, if remaining_after_fit is large compared to the item itself.\n    # A simple approach: penalize if remaining_after_fit is more than X times the item size.\n    # Let's use a threshold that is a fraction of the bin's capacity *before* fitting.\n    # This aims to prevent using a large bin for a small item if a tighter bin exists.\n    \n    # A more robust penalty: consider the ratio of item size to the bin's original capacity.\n    # If item_size / bin_original_capacity is very small, it suggests the bin is much larger than needed.\n    # However, we only have remaining capacity here. Let's consider the *slack* relative to the item size.\n    \n    # Penalty Factor: reduce priority if the remaining space is large relative to the item size.\n    # We want to penalize cases where `remaining_after_fit` is much larger than `item`.\n    # Let's consider the ratio `remaining_after_fit / item`. If this ratio is high, penalize.\n    # A threshold for this ratio, e.g., if remaining_after_fit > 2 * item.\n    \n    # Combine this with the original bin capacity. We want to penalize using a large bin for a small item.\n    # Let's use the *ratio of the item to the bin's remaining capacity*. If this is small, it means\n    # the bin is much larger than needed for the item.\n    # Consider the factor `item / suitable_bins_cap`. If this is small, penalize.\n    # To make it a multiplier for the best_fit_score, we want to multiply by a factor that is\n    # close to 1 when the ratio is good (i.e., item fills a good portion of the bin) and smaller\n    # when the ratio is poor.\n    \n    # Let's use the ratio: `item / (suitable_bins_cap + epsilon)`. This is high when the bin is full.\n    # This ratio is essentially `1 - normalized_remaining_capacity`.\n    # A simpler way to penalize \"too empty\" is to reduce the score if `remaining_after_fit` is large.\n    # Let's use a penalty that increases as `remaining_after_fit` increases.\n    # The \"First Fit Decreasing\" often performs well, suggesting that larger items first is good.\n    # For priority, we want to fill bins efficiently.\n    \n    # A heuristic from literature often considers the *waste*: `bins_remain_cap - item`.\n    # We want to minimize this waste (Best Fit).\n    # A secondary objective could be to avoid bins that become *very* lightly loaded.\n    # If `remaining_after_fit` is significantly larger than `item`, we can reduce priority.\n    \n    # Let's try: `priority = best_fit_score * (1.0 - C * (remaining_after_fit / (item + epsilon)))`\n    # where C is a constant to control the penalty strength.\n    # This penalizes bins where `remaining_after_fit` is large relative to `item`.\n    \n    penalty_strength = 0.3 # Controls how much we penalize under-filled bins\n    penalty_factor = np.maximum(0, 1.0 - penalty_strength * (remaining_after_fit / (item + epsilon)))\n    \n    combined_priorities = best_fit_score * penalty_factor\n\n    priorities[suitable_bins_mask] = combined_priorities\n    \n    return priorities",
    "response_id": 9,
    "tryHS": false,
    "obj": 4.048663741523748,
    "cyclomatic_complexity": 2.0,
    "halstead": 125.33591475173351,
    "exec_success": true
  },
  {
    "stdout_filepath": "problem_iter6_response0.txt_stdout.txt",
    "code_path": "problem_iter6_code0.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    suitable_bins_mask = bins_remain_cap >= item\n    \n    if not np.any(suitable_bins_mask):\n        return priorities\n        \n    suitable_bins_cap = bins_remain_cap[suitable_bins_mask]\n    \n    best_fit_diff = suitable_bins_cap - item\n    \n    min_diff_value = np.min(best_fit_diff)\n    \n    best_fit_indices_mask = (best_fit_diff == min_diff_value)\n    \n    \n    if np.any(best_fit_indices_mask):\n        \n        original_indices_best_fit = np.where(suitable_bins_mask)[0][best_fit_indices_mask]\n        priorities[original_indices_best_fit] = 1.0\n        \n    \n    \n    slightly_larger_bins_mask = (suitable_bins_cap > item + 0.1 * item) \n    \n    if np.any(slightly_larger_bins_mask):\n        original_indices_slightly_larger = np.where(suitable_bins_mask)[0][slightly_larger_bins_mask]\n        \n        for idx in original_indices_slightly_larger:\n            if priorities[idx] == 0: \n                priorities[idx] = 0.5 \n                \n    \n    \n    remaining_bins_mask = suitable_bins_cap > item\n    \n    if np.any(remaining_bins_mask):\n        original_indices_remaining = np.where(suitable_bins_mask)[0][remaining_bins_mask]\n        for idx in original_indices_remaining:\n            if priorities[idx] == 0:\n                priorities[idx] = 0.1\n    \n    \n    return priorities",
    "response_id": 0,
    "tryHS": false,
    "exec_success": false,
    "obj": Infinity,
    "traceback_msg": "Command '['python3', '-u', '/home/dokhanhnam1199/QD/problems/bpp_online/eval.py', '5000', '/home/dokhanhnam1199/QD', 'train']' timed out after 49.99994415603578 seconds"
  },
  {
    "stdout_filepath": "problem_iter6_response1.txt_stdout.txt",
    "code_path": "problem_iter6_code1.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    suitable_bins_mask = bins_remain_cap >= item\n    \n    if np.any(suitable_bins_mask):\n        suitable_bins_cap = bins_remain_cap[suitable_bins_mask]\n        \n        best_fit_diff = suitable_bins_cap - item\n        \n        min_diff = np.min(best_fit_diff)\n        \n        best_fit_indices_mask = best_fit_diff == min_diff\n        \n        best_fit_indices_original = np.where(suitable_bins_mask)[0][best_fit_indices_mask]\n        \n        # Heuristic v2: Hybrid approach combining Best Fit and a penalty for very large remaining capacities\n        # If a bin is a \"best fit\", give it a high priority.\n        # Otherwise, assign a lower priority based on how much capacity is left,\n        # with a penalty for bins that are very \"empty\" (to encourage filling them up).\n        \n        for i in range(len(bins_remain_cap)):\n            if suitable_bins_mask[i]:\n                if i in best_fit_indices_original:\n                    priorities[i] = 1.0  # Highest priority for best fit\n                else:\n                    remaining_capacity = bins_remain_cap[i]\n                    # Assign a priority based on remaining capacity.\n                    # Higher remaining capacity gets a slightly lower score,\n                    # but penalize very large remaining capacities more.\n                    # A simple approach: inversely proportional to remaining capacity, but capped.\n                    # We want to avoid very empty bins if possible, unless they are the only option.\n                    \n                    # Let's try a score that increases as capacity decreases, but with a penalty for being \"too empty\"\n                    # A common strategy is to favor bins that are nearly full.\n                    # For non-best-fit bins, we can use a score that is higher for bins with less remaining capacity.\n                    # However, we also want to avoid creating many partially filled bins.\n                    \n                    # Let's define a penalty for bins that are significantly larger than the item.\n                    # A bin that's just barely large enough might be better than one with huge excess capacity.\n                    \n                    # A simple linear scoring: favor less remaining capacity\n                    # We can scale this to avoid interfering too much with the \"best fit\" score of 1.0\n                    \n                    # Let's assign a score between 0 and 0.5 for non-best-fit bins\n                    # Score is higher for bins with less remaining capacity.\n                    # We normalize remaining capacity relative to bin size (assuming a max capacity for normalization, or relative to the largest current remaining capacity)\n                    \n                    # For simplicity, let's assign a score inversely proportional to the remaining capacity\n                    # and add a small bonus for bins that are not completely empty, to avoid selecting a brand new bin when a partially filled one exists.\n                    \n                    # Let's try a weighted approach:\n                    # Priority = (1 - (remaining_capacity - item) / (MAX_REMAINING_CAPACITY - item)) * weight_for_near_full\n                    # A simpler approach: favor bins with less remaining capacity.\n                    \n                    # Let's consider the \"gap\" (remaining_capacity - item)\n                    gap = bins_remain_cap[i] - item\n                    \n                    # If the gap is very large, assign a lower priority.\n                    # If the gap is small, assign a higher priority.\n                    # We need to normalize the gap. A simple normalization could be against the maximum possible gap.\n                    # Or, we can use a function that has a steep drop for large gaps.\n                    \n                    # Example: logistic function or a simple inverse\n                    # Let's use an inverse function with a small constant to avoid division by zero and to give some priority to very small gaps.\n                    \n                    # Priority score for non-best-fit bins:\n                    # We want to prioritize bins that are closer to fitting the item (smaller gap).\n                    # This should be less than the \"best fit\" score of 1.0.\n                    \n                    # Let's try a score that is higher for smaller gaps.\n                    # The maximum possible gap for a suitable bin.\n                    max_gap_among_suitable = np.max(best_fit_diff) if len(best_fit_diff) > 0 else 0\n                    \n                    # Normalize the gap for the current bin\n                    if max_gap_among_suitable > 0:\n                        normalized_gap = gap / max_gap_among_suitable\n                    else: # All suitable bins have the same gap (which is the minimum gap)\n                        normalized_gap = 0.0 # This bin is a best-fit or equivalent\n                    \n                    # We want smaller normalized_gap to result in higher priority.\n                    # Let's use 1 - normalized_gap, but scaled down.\n                    # Also, a small bonus for having *some* remaining capacity, to avoid always picking an empty bin if possible.\n                    \n                    # Let's assign a priority between 0.1 and 0.8 for non-best-fit bins.\n                    # A bin with a smaller gap should have a higher score.\n                    # A bin with a larger gap should have a lower score.\n                    \n                    # Example: Score = 0.8 * (1 - normalized_gap) + 0.05 (base priority for being suitable but not best-fit)\n                    # This ensures that even the \"worst\" suitable bin (largest gap) gets some priority if no best fit exists.\n                    \n                    # Let's refine the score for non-best-fit bins.\n                    # We want to prioritize bins that are \"almost full\".\n                    # The remaining capacity itself is a good indicator. Smaller remaining capacity is better.\n                    \n                    # A score that is higher for smaller remaining_capacity:\n                    # Score = (MAX_CAPACITY - bins_remain_cap[i]) / MAX_CAPACITY\n                    # But we need to consider the item size.\n                    \n                    # Let's focus on the gap again.\n                    # The smaller the gap, the better.\n                    # We can use an inverse function like 1 / (gap + epsilon)\n                    \n                    epsilon = 1e-6 # To avoid division by zero\n                    \n                    # Scale the inverse gap to be between 0 and 0.8 (since best fit is 1.0)\n                    # The maximum gap among suitable bins\n                    max_suitable_gap = np.max(bins_remain_cap[suitable_bins_mask] - item) if np.any(suitable_bins_mask) else 0\n                    \n                    if max_suitable_gap > epsilon:\n                        # We want smaller gaps to have higher priority.\n                        # The score should be inversely proportional to the gap.\n                        # Larger gaps -> smaller scores.\n                        # Let's try a score like: C * (1 / (gap + epsilon))\n                        # To map this to a range [0.1, 0.8], we need to consider the minimum and maximum gap.\n                        \n                        # Let's try a simpler approach:\n                        # Score is proportional to how \"full\" the bin becomes after packing.\n                        # Fill level = (initial_capacity - remaining_capacity) / initial_capacity\n                        # But we don't have initial capacity. We only have remaining capacity.\n                        \n                        # Let's stick to the gap.\n                        # A score that decreases with increasing gap.\n                        # Consider the \"waste\" in the bin after packing.\n                        \n                        # Let's try assigning priority based on the remaining capacity itself.\n                        # Smaller remaining capacity is better (closer to best fit).\n                        # But we don't want to heavily penalize bins with a lot of space if they are the only option.\n                        \n                        # Priority = C * (1 - (bins_remain_cap[i] / MAX_POSSIBLE_CAPACITY))\n                        # This doesn't account for the item size well.\n                        \n                        # Let's reconsider the hybrid approach:\n                        # 1. Best Fit gets priority 1.0.\n                        # 2. For other suitable bins:\n                        #    - Prioritize bins that have less remaining capacity.\n                        #    - Add a small penalty for bins that have *too much* remaining capacity (e.g., > 2*item). This discourages leaving very large gaps.\n                        \n                        # Let's use a score based on remaining capacity, scaled.\n                        # The range of remaining capacities for suitable bins.\n                        min_rem_cap_suitable = np.min(bins_remain_cap[suitable_bins_mask])\n                        max_rem_cap_suitable = np.max(bins_remain_cap[suitable_bins_mask])\n                        \n                        # Normalize remaining capacity: 0 for most full, 1 for most empty.\n                        if max_rem_cap_suitable > min_rem_cap_suitable:\n                            normalized_rem_cap = (bins_remain_cap[i] - min_rem_cap_suitable) / (max_rem_cap_suitable - min_rem_cap_suitable)\n                        else:\n                            normalized_rem_cap = 0.5 # All suitable bins have same capacity\n                            \n                        # We want smaller remaining capacity to get higher priority.\n                        # So, priority should be related to (1 - normalized_rem_cap).\n                        # Let's scale this to be between 0.1 and 0.8.\n                        \n                        score = 0.1 + 0.7 * (1 - normalized_rem_cap)\n                        \n                        # Add a penalty for very large remaining capacities.\n                        # If remaining capacity is more than twice the item size, reduce its score.\n                        if bins_remain_cap[i] > 2 * item:\n                            score *= 0.7 # Apply a 30% penalty\n                            \n                        # Ensure score doesn't go below a minimum threshold, and not above 0.8\n                        priorities[i] = max(0.1, min(0.8, score))\n    \n    return priorities",
    "response_id": 1,
    "tryHS": false,
    "exec_success": false,
    "obj": Infinity,
    "traceback_msg": "Command '['python3', '-u', '/home/dokhanhnam1199/QD/problems/bpp_online/eval.py', '5000', '/home/dokhanhnam1199/QD', 'train']' timed out after 49.99995924800169 seconds"
  },
  {
    "stdout_filepath": "problem_iter6_response2.txt_stdout.txt",
    "code_path": "problem_iter6_code2.py",
    "code": "import numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    suitable_bins_mask = bins_remain_cap >= item\n    \n    if not np.any(suitable_bins_mask):\n        return priorities\n    \n    suitable_bins_cap = bins_remain_cap[suitable_bins_mask]\n    \n    \n    best_fit_diff = suitable_bins_cap - item\n    \n    \n    sorted_indices_by_diff = np.argsort(best_fit_diff)\n    \n    \n    num_suitable_bins = len(suitable_bins_cap)\n    \n    \n    for i in range(num_suitable_bins):\n        original_index = np.where(suitable_bins_mask)[0][sorted_indices_by_diff[i]]\n        \n        \n        priority_score = 1.0 / (1.0 + best_fit_diff[sorted_indices_by_diff[i]])\n        \n        \n        if bins_remain_cap[original_index] < 2 * item:\n            priority_score *= 1.2 \n        \n        priorities[original_index] = priority_score\n        \n    \n    max_priority = np.max(priorities)\n    if max_priority > 0:\n        priorities /= max_priority\n    \n    return priorities",
    "response_id": 2,
    "tryHS": false,
    "exec_success": false,
    "obj": Infinity,
    "traceback_msg": "Command '['python3', '-u', '/home/dokhanhnam1199/QD/problems/bpp_online/eval.py', '5000', '/home/dokhanhnam1199/QD', 'train']' timed out after 49.99996062298305 seconds"
  },
  {
    "stdout_filepath": "problem_iter6_response3.txt_stdout.txt",
    "code_path": "problem_iter6_code3.py",
    "code": null,
    "response_id": 3,
    "tryHS": false,
    "exec_success": false,
    "obj": Infinity,
    "traceback_msg": "Invalid response!"
  },
  {
    "stdout_filepath": "problem_iter6_response4.txt_stdout.txt",
    "code_path": "problem_iter6_code4.py",
    "code": null,
    "response_id": 4,
    "tryHS": false,
    "exec_success": false,
    "obj": Infinity,
    "traceback_msg": "Invalid response!"
  },
  {
    "stdout_filepath": "problem_iter7_response0.txt_stdout.txt",
    "code_path": "problem_iter7_code0.py",
    "code": "import numpy as np\nimport random\nimport math\nimport scipy\nimport torch\ndef priority_v2(item: float, bins_remain_cap: np.ndarray, penalty_strength: float = 0.004218314821270774, epsilon: float = 7.704559280250573e-09) -> np.ndarray:\n    \"\"\"\n    Combines Best Fit with a penalty for excessively large remaining capacities,\n    prioritizing bins that fit the item tightly and are not overly empty.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    can_fit_mask = bins_remain_cap >= item\n    \n    if not np.any(can_fit_mask):\n        return priorities",
    "response_id": 0,
    "tryHS": true,
    "obj": 4.487435181491823,
    "cyclomatic_complexity": 2.0,
    "halstead": 11.60964047443681,
    "exec_success": true
  }
]