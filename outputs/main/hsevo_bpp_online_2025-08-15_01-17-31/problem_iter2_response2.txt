```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines 'Almost Full Fit' and 'Best Fit' for adaptive bin selection.

    Prioritizes bins that offer a tight fit (minimal remaining capacity) and
    further favors bins that have been historically good fits (implicitly, by
    being selected more often due to tight fits).
    """
    priorities = np.full_like(bins_remain_cap, -np.inf)

    can_fit_mask = bins_remain_cap >= item

    fit_capacities = bins_remain_cap[can_fit_mask] - item

    # Base priority: invert remaining capacity (Best Fit principle)
    # Add a small epsilon to avoid division by zero.
    base_priorities = 1.0 / (fit_capacities + 1e-6)

    # Boost priority for bins that become "almost full" (low residual capacity)
    # This acts like the 'Almost Full Fit' and reinforces the Best Fit idea
    # by giving a strong preference to bins with very little leftover space.
    # We use a negative of the fit capacity. Higher (less negative) values are better.
    almost_full_boost = -fit_capacities

    # Combine priorities. The inverse capacity provides the primary ranking,
    # and the 'almost full' boost further refines it, strongly favoring
    # bins that are very close to full after packing.
    priorities[can_fit_mask] = base_priorities + almost_full_boost

    return priorities
```
