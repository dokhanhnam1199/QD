```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit with an adaptive, capacity-aware logarithmic penalty.
    Prioritizes bins that leave minimal space, but scales the penalty based on the
    relative remaining capacity to encourage fuller bins without being overly greedy.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    suitable_bins_mask = bins_remain_cap >= item
    
    if not np.any(suitable_bins_mask):
        return priorities

    suitable_bins_cap = bins_remain_cap[suitable_bins_mask]
    
    # Best Fit component: Minimize remaining capacity after packing.
    remaining_after_fit = suitable_bins_cap - item
    
    # Adaptive penalty: Logarithmic penalty, scaled by the initial capacity of suitable bins.
    # This penalizes bins that are large and leave significant space,
    # but is dampened for bins that are already relatively full.
    # Add 1 to item size to prevent division by zero and stabilize for small items.
    # Add 1e-9 to denominator for numerical stability.
    scaled_penalty = np.log1p(remaining_after_fit / (suitable_bins_cap + 1.0 + 1e-9))
    
    # Normalize the scaled penalty to be between 0 and 1. Higher penalty means lower priority.
    # Invert the normalized penalty to get priority score.
    if np.max(scaled_penalty) > 0:
        normalized_penalty = scaled_penalty / np.max(scaled_penalty)
        # Higher score means higher priority. We want to prioritize smaller 'remaining_after_fit',
        # which corresponds to smaller 'scaled_penalty'. So, we use 1 - normalized_penalty.
        scores = 1.0 - normalized_penalty
    else:
        # If all scaled penalties are zero or negative (e.g., item perfectly fits or is very small),
        # all suitable bins get a neutral priority.
        scores = np.ones_like(suitable_bins_cap)

    # Assign priorities to the original indices
    original_indices = np.where(suitable_bins_mask)[0]
    priorities[original_indices] = scores
    
    return priorities
```
