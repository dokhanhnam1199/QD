```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit with a penalty for excessive remaining capacity,
    favoring bins that are nearly full without being wasteful.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf)
    can_fit_mask = bins_remain_cap >= item

    if not np.any(can_fit_mask):
        return priorities

    suitable_bins_caps = bins_remain_cap[can_fit_mask]
    gaps = suitable_bins_caps - item

    # Best Fit Score: Higher for smaller gaps (tighter fit)
    # Add epsilon to prevent division by zero for perfect fits.
    best_fit_score = 1.0 / (gaps + 1e-6)

    # Penalty for "too much" remaining capacity:
    # Favor bins that don't have a lot of leftover space after packing.
    # This is a modification inspired by Heuristic 7's idea, but controlled.
    # We penalize bins where the remaining capacity (after packing) is much larger than the item.
    # Using log helps to dampen the effect of very large capacities.
    # A small constant is added to the denominator to prevent log(0) and negative values.
    # Multiplying by a factor (e.g., 0.5) controls the strength of the penalty.
    penalty_factor = 0.5
    # Ensure the term inside log is always positive
    penalty_term = np.maximum(gaps, 1e-3)
    excess_capacity_penalty = penalty_factor * np.log(penalty_term + 1e-3) # Added epsilon inside log

    # Combine scores: Subtract the penalty from the best-fit score.
    # Higher combined score means a better bin choice.
    combined_priorities = best_fit_score - excess_capacity_penalty

    priorities[can_fit_mask] = combined_priorities

    return priorities
```
