```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    suitable_bins_mask = bins_remain_cap >= item
    
    if not np.any(suitable_bins_mask):
        return priorities
        
    suitable_bins_cap = bins_remain_cap[suitable_bins_mask]
    
    best_fit_diff = suitable_bins_cap - item
    
    min_diff_value = np.min(best_fit_diff)
    
    best_fit_indices_mask = (best_fit_diff == min_diff_value)
    
    
    if np.any(best_fit_indices_mask):
        
        original_indices_best_fit = np.where(suitable_bins_mask)[0][best_fit_indices_mask]
        priorities[original_indices_best_fit] = 1.0
        
    
    
    slightly_larger_bins_mask = (suitable_bins_cap > item + 0.1 * item) 
    
    if np.any(slightly_larger_bins_mask):
        original_indices_slightly_larger = np.where(suitable_bins_mask)[0][slightly_larger_bins_mask]
        
        for idx in original_indices_slightly_larger:
            if priorities[idx] == 0: 
                priorities[idx] = 0.5 
                
    
    
    remaining_bins_mask = suitable_bins_cap > item
    
    if np.any(remaining_bins_mask):
        original_indices_remaining = np.where(suitable_bins_mask)[0][remaining_bins_mask]
        for idx in original_indices_remaining:
            if priorities[idx] == 0:
                priorities[idx] = 0.1
    
    
    return priorities
```
