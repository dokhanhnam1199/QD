```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Almost Full Fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    valid_bins_mask = bins_remain_cap >= item
    valid_bins_remain_cap = bins_remain_cap[valid_bins_mask]

    if valid_bins_remain_cap.size == 0:
        return priorities

    sorted_indices = np.argsort(valid_bins_remain_cap)
    sorted_valid_bins_remain_cap = valid_bins_remain_cap[sorted_indices]

    for i in range(sorted_valid_bins_remain_cap.size):
        bin_idx_in_valid = sorted_indices[i]
        original_bin_idx = np.where(bins_remain_cap >= item)[0][bin_idx_in_valid]
        remaining_cap = bins_remain_cap[original_bin_idx]

        if i == sorted_valid_bins_remain_cap.size - 1:
            priorities[original_bin_idx] = 1.0
        else:
            priorities[original_bin_idx] = 1.0 - (remaining_cap - item) / (valid_bins_remain_cap.max() - item + 1e-9)

    return priorities
```
