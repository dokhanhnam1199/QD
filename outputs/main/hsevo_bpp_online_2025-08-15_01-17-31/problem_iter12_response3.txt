```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    suitable_bins_mask = bins_remain_cap >= item
    
    if np.any(suitable_bins_mask):
        suitable_bins_cap = bins_remain_cap[suitable_bins_mask]
        
        
        diffs = suitable_bins_cap - item
        
        
        normalized_diffs = 1.0 - (diffs / np.max(suitable_bins_cap))
        
        
        normalized_capacities = suitable_bins_cap / np.max(bins_remain_cap)
        
        
        combined_scores = (0.6 * normalized_diffs) + (0.4 * normalized_capacities)
        
        
        max_score = np.max(combined_scores)
        best_fit_indices_in_suitable = np.where(combined_scores == max_score)[0]
        
        original_indices = np.where(suitable_bins_mask)[0]
        
        for idx in best_fit_indices_in_suitable:
            priorities[original_indices[idx]] = 1.0
            
    return priorities
```
