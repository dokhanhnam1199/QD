```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    priorities = np.zeros_like(bins_remain_cap)
    available_bins_mask = bins_remain_cap >= item
    available_bins_capacities = bins_remain_cap[available_bins_mask]
    
    if available_bins_capacities.size > 0:
        sorted_indices = np.argsort(available_bins_capacities)
        
        for i, bin_index_in_subset in enumerate(sorted_indices):
            original_bin_index = np.where(available_bins_mask)[0][bin_index_in_subset]
            
            remaining_cap = bins_remain_cap[original_bin_index]
            
            if remaining_cap == item:
                priorities[original_bin_index] = 1.0
            else:
                priorities[original_bin_index] = 1.0 / (remaining_cap - item + 1e-9) 
                
    return priorities
```
