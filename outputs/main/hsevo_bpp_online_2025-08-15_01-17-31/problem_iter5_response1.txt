```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best Fit with a penalty for excessively large remaining capacity.

    Prioritizes bins that offer a tight fit, but penalizes bins that, after
    packing, would still have a significantly larger remaining capacity than
    the item itself, promoting better overall bin utilization.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf)
    
    can_fit_mask = bins_remain_cap >= item
    
    if np.any(can_fit_mask):
        suitable_bins_caps = bins_remain_cap[can_fit_mask]
        
        # Best Fit component: inverse of the remaining capacity after packing
        # Higher score for smaller remaining capacity
        fit_scores = 1.0 / (suitable_bins_caps - item + 1e-9)
        
        # Penalty component: penalize bins that, after packing, still have a
        # much larger capacity than the item. This encourages filling bins more
        # completely rather than leaving large gaps in partially filled bins.
        # The penalty is higher for bins with a larger ratio of remaining capacity
        # to the item size. We use an exponential decay to make the penalty
        # significant only for substantially larger remaining capacities.
        capacity_ratio = (suitable_bins_caps - item) / item if item > 0 else np.inf
        penalty = np.exp(-0.5 * capacity_ratio) * 0.5 # Tunable penalty factor (0.5)
        
        # Combine scores: Best Fit score minus the penalty
        # Higher values indicate better priority
        combined_priorities = fit_scores - penalty
        
        priorities[can_fit_mask] = combined_priorities
        
    return priorities
```
