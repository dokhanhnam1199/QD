```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins using a combination of Best Fit and a sigmoid for penalty.

    Combines the 'Best Fit' inverse strategy with a sigmoid to penalize
    bins with too much remaining capacity, ensuring a balance.
    """
    available_bins_mask = bins_remain_cap >= item
    
    if not np.any(available_bins_mask):
        return np.zeros_like(bins_remain_cap)
    
    available_bins_cap = bins_remain_cap[available_bins_mask]
    
    # "Best Fit" component: prioritizes bins with minimal remaining space
    gaps = available_bins_cap - item
    best_fit_priorities = 1.0 / (gaps + 1e-9) 
    
    # Sigmoid component: penalizes bins with large remaining capacity
    # Use a sigmoid to assign lower priority to bins that are "too empty"
    # This helps to fill bins more evenly and avoid creating many partially filled bins
    slope = 10.0
    intercept = -5.0
    sigmoid_penalty = 1 / (1 + np.exp(-(slope * (available_bins_cap) + intercept)))
    
    # Combine the two strategies: high priority for tight fits AND not excessively empty bins
    # We multiply the 'best_fit_priorities' by the 'sigmoid_penalty' to favor bins
    # that are both a good fit and not excessively large.
    combined_priorities = best_fit_priorities * sigmoid_penalty
    
    final_priorities = np.zeros_like(bins_remain_cap, dtype=float)
    final_priorities[available_bins_mask] = combined_priorities
    
    return final_priorities
```
