```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    suitable_bins_mask = bins_remain_cap >= item
    
    if not np.any(suitable_bins_mask):
        return priorities

    suitable_bins_cap = bins_remain_cap[suitable_bins_mask]
    
    
    remaining_capacity_scores = suitable_bins_cap - item
    
    
    fullness_scores = 1.0 - (suitable_bins_cap / np.max(bins_remain_cap[bins_remain_cap > 0])) if np.any(bins_remain_cap > 0) else np.zeros_like(suitable_bins_cap)
    
    
    if np.any(remaining_capacity_scores):
        min_diff = np.min(remaining_capacity_scores)
        best_fit_indicator = (remaining_capacity_scores == min_diff).astype(float)
    else:
        best_fit_indicator = np.zeros_like(suitable_bins_cap)

    
    normalized_fullness = (fullness_scores - np.min(fullness_scores)) / (np.max(fullness_scores) - np.min(fullness_scores) + 1e-9)
    normalized_remaining_capacity = 1.0 - (remaining_capacity_scores / (np.max(remaining_capacity_scores) + 1e-9))
    
    
    
    combined_score = 0.6 * normalized_remaining_capacity + 0.4 * normalized_fullness

    
    
    
    priorities[suitable_bins_mask] = combined_score
    
    return priorities
```
