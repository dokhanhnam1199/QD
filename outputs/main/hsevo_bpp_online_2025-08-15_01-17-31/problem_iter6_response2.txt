```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    suitable_bins_mask = bins_remain_cap >= item
    
    if not np.any(suitable_bins_mask):
        return priorities
    
    suitable_bins_cap = bins_remain_cap[suitable_bins_mask]
    
    
    best_fit_diff = suitable_bins_cap - item
    
    
    sorted_indices_by_diff = np.argsort(best_fit_diff)
    
    
    num_suitable_bins = len(suitable_bins_cap)
    
    
    for i in range(num_suitable_bins):
        original_index = np.where(suitable_bins_mask)[0][sorted_indices_by_diff[i]]
        
        
        priority_score = 1.0 / (1.0 + best_fit_diff[sorted_indices_by_diff[i]])
        
        
        if bins_remain_cap[original_index] < 2 * item:
            priority_score *= 1.2 
        
        priorities[original_index] = priority_score
        
    
    max_priority = np.max(priorities)
    if max_priority > 0:
        priorities /= max_priority
    
    return priorities
```
