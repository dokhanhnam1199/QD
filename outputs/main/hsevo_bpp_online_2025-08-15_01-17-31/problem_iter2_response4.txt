```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines Best Fit and Nearly Full Fit for adaptive bin prioritization.

    Prioritizes bins that are almost full, favoring tighter fits to minimize waste.
    Bins that perfectly fit or nearly fit receive higher scores.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf)
    can_fit_mask = bins_remain_cap >= item
    
    fit_capacities = bins_remain_cap[can_fit_mask] - item
    
    # Strategy: Prioritize bins that leave minimal remaining capacity (Best Fit)
    # Add a small bonus for bins that become 'almost full' (e.g., very small residual capacity)
    # This bonus helps break ties for bins with similar small remaining capacities.
    epsilon = 1e-6
    priorities[can_fit_mask] = -fit_capacities 
    
    # Slightly boost bins with very small remaining capacity to encourage 'almost full' fits
    # This can be seen as a form of 'almost full fit' preference on top of best fit
    small_residual_mask = fit_capacities < 0.1 * item # Heuristic threshold for 'almost full'
    priorities[can_fit_mask][small_residual_mask] += 0.1 * (item / (fit_capacities[small_residual_mask] + epsilon))

    return priorities
```
