{"system": "You are an expert in code review. Your task extract all threshold, weight or hardcode variable of the function make it become default parameters.", "user": "[code]\nimport numpy as np\n\ndef priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines Best Fit strategy with an adaptive logarithmic penalty for remaining capacity.\n    Prioritizes bins that minimize wasted space after packing, with a nuanced penalty\n    for larger remaining capacities to avoid overly aggressive bin selection.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    suitable_bins_mask = bins_remain_cap >= item\n    \n    if not np.any(suitable_bins_mask):\n        return priorities\n\n    suitable_bins_cap = bins_remain_cap[suitable_bins_mask]\n    \n    # Best Fit: Minimize remaining capacity after packing\n    # Calculate the difference between remaining capacity and item size\n    remaining_after_fit = suitable_bins_cap - item\n    \n    # Adaptive penalty: Use a logarithmic function of the ratio of remaining capacity to item size.\n    # This penalizes larger gaps more, but with diminishing returns (smoother than linear).\n    # Add a small epsilon to the denominator to avoid division by zero if item size is 0 (though unlikely in BPP).\n    # Add 1 to the denominator to ensure values are not excessively large when remaining_after_fit is small.\n    penalty = np.log1p(remaining_after_fit / (item + 1e-9))\n    \n    # Normalize the penalty to be between 0 and 1. Higher penalty should result in lower priority.\n    # We want to invert this relationship, so we use (1 - normalized_penalty).\n    if np.max(penalty) > 0:\n        normalized_penalty = penalty / np.max(penalty)\n        normalized_scores = 1.0 - normalized_penalty\n    else:\n        normalized_scores = np.ones_like(suitable_bins_cap) # All penalties were zero or negative (unlikely with log1p)\n\n    # Assign priorities to the original indices\n    original_indices = np.where(suitable_bins_mask)[0]\n    priorities[original_indices] = normalized_scores\n    \n    return priorities\n\nNow extract all threshold, weight or hardcode variable of the function make it become default parameters and give me a 'parameter_ranges' dictionary representation. Key of dict is name of variable. Value of key is a tuple in Python MUST include 2 float elements, first element is begin value, second element is end value corresponding with parameter.\n\n- Output code only and enclose your code with Python code block: ```python ... ```.\n- Output 'parameter_ranges' dictionary only and enclose your code with other Python code block: ```python ... ```."}