```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit with a normalized, adaptive sigmoid penalty for remaining capacity.
    Prioritizes tight fits while smoothly penalizing bins that are significantly emptier.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    can_fit_mask = bins_remain_cap >= item

    if np.any(can_fit_mask):
        suitable_bins_caps = bins_remain_cap[can_fit_mask]
        
        # Best Fit component: Inverse of the gap. Higher score for smaller gaps.
        gaps = suitable_bins_caps - item
        best_fit_scores = 1.0 / (gaps + 1e-9)
        
        # Adaptive sigmoid penalty: Penalizes larger remaining capacities more heavily,
        # but smoothly, relative to the item size.
        # The penalty term is designed to be high for bins much larger than the item.
        # We use a scaled version of the remaining capacity.
        scaled_remaining = suitable_bins_caps / (np.max(bins_remain_cap) + 1e-9)
        penalty = 1.0 / (1.0 + np.exp(10 * (scaled_remaining - 0.5))) # Sigmoid centered around 0.5
        
        # Combine scores: Best Fit score scaled, minus the penalty.
        # Normalizing best_fit_scores to [0, 1] and penalty is already in [0, 1]
        normalized_best_fit = (best_fit_scores - np.min(best_fit_scores)) / (np.max(best_fit_scores) - np.min(best_fit_scores) + 1e-9)
        
        combined_scores = normalized_best_fit - penalty
        
        priorities[can_fit_mask] = combined_scores
        
    return priorities
```
