{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\nCurrent heuristics:\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    priorities = np.zeros_like(bins_remain_cap)\n    \n    suitable_bins_mask = bins_remain_cap >= item\n    \n    if np.any(suitable_bins_mask):\n        suitable_bins_cap = bins_remain_cap[suitable_bins_mask]\n        \n        best_fit_diff = suitable_bins_cap - item\n        \n        min_diff = np.min(best_fit_diff)\n        \n        best_fit_indices = np.where(best_fit_diff == min_diff)[0]\n        \n        original_indices = np.where(suitable_bins_mask)[0]\n        \n        for idx in best_fit_indices:\n            priorities[original_indices[idx]] = 1.0\n    \n    return priorities\n\nNow, think outside the box write a mutated function `priority_v2` better than current version.\nYou can use some hints below:\n- \nHere's a redefined self-reflection for designing better heuristics, focusing on actionable insights:\n\n*   **Keywords:** Hybrid heuristics, weighted combination, conditional logic, penalty mechanisms.\n*   **Advice:** Design hybrid heuristics that dynamically adjust their criteria. Explore conditional logic to switch between primary and secondary metrics based on the problem state (e.g., bin fullness).\n*   **Avoid:** Over-reliance on a single, static metric (like inverse of remaining gap) as it can be brittle. Avoid overly complex multiplicative combinations that are hard to tune.\n*   **Explanation:** Pure \"best fit\" is often suboptimal. Combining metrics thoughtfully, perhaps by penalizing certain outcomes or prioritizing states, leads to more robust and adaptable heuristics that can better navigate diverse problem instances.\n\nOutput code only and enclose your code with Python code block: ```python ... ```.\nI'm going to tip $999K for a better solution!"}