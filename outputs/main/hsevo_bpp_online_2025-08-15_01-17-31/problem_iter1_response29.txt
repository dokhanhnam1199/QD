```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin using Softmax-Based Fit strategy.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    valid_bins_mask = bins_remain_cap >= item
    
    if not np.any(valid_bins_mask):
        return np.zeros_like(bins_remain_cap)

    valid_bins_remain_cap = bins_remain_cap[valid_bins_mask]
    
    # Softmax-Based Fit: prioritize bins with less remaining capacity that can still fit the item.
    # This encourages using bins more fully.
    # We can use a transformation that emphasizes smaller remaining capacities.
    # A simple inverse or an exponential decay function can work.
    # Let's use an inverse transformation: 1 / (remaining_capacity - item + epsilon)
    # Adding item to the denominator makes the difference relevant to the item's size.
    # Adding epsilon prevents division by zero.
    epsilon = 1e-9
    transformed_capacities = 1.0 / (valid_bins_remain_cap - item + epsilon)
    
    # Apply softmax to get probabilities
    exp_transformed = np.exp(transformed_capacities)
    probabilities = exp_transformed / np.sum(exp_transformed)
    
    priorities = np.zeros_like(bins_remain_cap)
    priorities[valid_bins_mask] = probabilities
    
    return priorities
```
