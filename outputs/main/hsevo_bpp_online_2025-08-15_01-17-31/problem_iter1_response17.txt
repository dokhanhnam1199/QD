```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    can_fit_mask = bins_remain_cap >= item
    
    available_bins_cap = bins_remain_cap[can_fit_mask]
    
    if available_bins_cap.size > 0:
        # We want to prioritize bins that are almost full after adding the item.
        # This is like trying to "close" bins effectively.
        # The priority is inversely proportional to the remaining capacity
        # after the item is placed. A smaller remaining capacity means a higher priority.
        remaining_after_fit = available_bins_cap - item
        
        # Avoid division by zero or near-zero for bins that will be exactly full
        # Add a small epsilon to the denominator to avoid issues, but this also means
        # bins that become exactly full get a slightly lower priority than
        # bins that have a tiny bit of space left, which is a subtle but potentially useful behavior.
        epsilon = 1e-9
        priorities[can_fit_mask] = 1.0 / (remaining_after_fit + epsilon)
        
        # Normalize priorities so the highest priority is 1.
        # This makes the relative importance clearer.
        max_priority = np.max(priorities[can_fit_mask])
        if max_priority > 0:
            priorities[can_fit_mask] /= max_priority

    return priorities
```
