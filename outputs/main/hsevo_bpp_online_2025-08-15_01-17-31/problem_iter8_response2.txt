```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit with a dynamic penalty for excessive remaining capacity,
    prioritizing tighter fits while penalizing bins that are significantly emptier.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf)
    can_fit_mask = bins_remain_cap >= item

    if np.any(can_fit_mask):
        suitable_bins_caps = bins_remain_cap[can_fit_mask]
        
        # Best Fit component: Inverse of the gap (remaining capacity after packing).
        # Favors bins with smaller gaps.
        gaps = suitable_bins_caps - item
        best_fit_scores = 1.0 / (gaps + 1e-9)
        
        # Penalty component: Penalize bins that leave a large absolute remaining capacity.
        # We subtract the remaining capacity directly. This aims to use bins that are
        # closer to the item size among those that are feasible.
        # This is a more direct penalty than the ratio-based one, similar to v0.
        penalty = suitable_bins_caps
        
        # Combine scores: Best Fit score minus the penalty.
        # This prioritizes tight fits but discourages using very large bins
        # even if they offer a "best fit" among a set of large bins.
        combined_scores = best_fit_scores - penalty
        
        priorities[can_fit_mask] = combined_scores
        
    return priorities
```
