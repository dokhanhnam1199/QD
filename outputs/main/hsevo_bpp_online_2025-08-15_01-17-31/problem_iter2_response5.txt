```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines Best Fit with a softmax approach for adaptive prioritization.
    Prioritizes bins with minimal remaining capacity after fitting (Best Fit)
    and applies a softmax to probabilities, allowing for smoother selection.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    
    # Identify bins that can accommodate the item
    can_fit_mask = bins_remain_cap >= item
    
    # Calculate the remaining capacity for bins that can fit the item
    remaining_capacities_after_fit = bins_remain_cap[can_fit_mask] - item
    
    # If no bins can fit the item, return all zeros
    if remaining_capacities_after_fit.size == 0:
        return priorities
    
    # Use the inverse of remaining capacity as a base score (Best Fit idea)
    # Add a small epsilon to avoid division by zero
    base_scores = 1.0 / (remaining_capacities_after_fit + 1e-9)
    
    # Apply a softmax-like transformation to create probabilities
    # This smooths the distribution and can be interpreted as selection probabilities
    # We use exp of base_scores directly, as their relative magnitudes matter
    # Normalizing by sum is not strictly necessary if only argmax is used,
    # but it can be useful for other selection methods or interpretation.
    # Here, we'll use it to ensure values are in a comparable range for selection.
    
    # Avoid potential overflow with large base_scores by subtracting max
    # This is a common practice in softmax implementations.
    max_score = np.max(base_scores)
    exp_scores = np.exp(base_scores - max_score)
    
    # Normalize to get probabilities, similar to softmax
    probabilities = exp_scores / np.sum(exp_scores)
    
    # Assign the calculated probabilities to the corresponding bins
    priorities[can_fit_mask] = probabilities
    
    return priorities
```
