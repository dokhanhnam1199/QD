```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Prioritizes bins by combining best-fit with a soft penalty for large residuals.

    This heuristic favors bins with minimal remaining capacity after packing (best-fit)
    while also down-weighting bins that would have a very large residual,
    using a sigmoid to smooth the transition.
    """
    suitable_bins_mask = bins_remain_cap >= item
    suitable_bins_cap = bins_remain_cap[suitable_bins_mask]

    if suitable_bins_cap.size == 0:
        return np.zeros_like(bins_remain_cap)

    residuals = suitable_bins_cap - item
    
    epsilon = 1e-6
    best_fit_score = 1.0 / (residuals + epsilon)
    
    slope = 0.5
    penalty_score = 1 / (1 + np.exp(slope * residuals)) 
    
    combined_priorities = best_fit_score * penalty_score
    
    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    priorities[suitable_bins_mask] = combined_priorities
    
    return priorities
```
