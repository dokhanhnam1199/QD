{"system": "You are an expert in the domain of optimization heuristics. Your task is to design heuristics that can effectively solve optimization problems.\nYour response outputs Python code only and do not add comments into the code. Format your code as a Python code string: \"```python ... ```\".\n", "user": "You are an expert in the domain of optimization heuristics. Your task is to write a priority function for Solving online Bin Packing Problem (BPP). BPP requires packing a set of items of various sizes into the smallest number of fixed-sized bins. Online BPP requires packing an item as soon as it is received.\nThe priority function takes as input an item and an array of bins_remain_cap (containing the remaining capacity of each bin) and returns a priority score for each bin. The bin with the highest priority score will be selected for the item.\n\n\n### Better code\ndef priority_v0(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n\n    \"\"\"\n    Combines Best Fit with a penalty for leaving excessive remaining capacity.\n    Prioritizes bins with minimal remaining space after packing, but penalizes\n    bins that would leave too much space, promoting balanced utilization.\n    This heuristic aims to provide a more balanced approach than pure Best Fit.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    # Mask for bins that can accommodate the item\n    can_fit_mask = bins_remain_cap >= item\n    \n    # Consider only bins that can fit the item\n    valid_bins_remain_cap = bins_remain_cap[can_fit_mask]\n    \n    if valid_bins_remain_cap.size > 0:\n        # Calculate the remaining capacity after placing the item\n        remaining_after_fit = valid_bins_remain_cap - item\n        \n        # Best Fit component: prioritize bins with minimal remaining space.\n        # Use inverse of remaining space for higher scores for tighter fits.\n        # Add a small epsilon to avoid division by zero.\n        epsilon = 1e-9\n        best_fit_scores = 1.0 / (remaining_after_fit + epsilon)\n        \n        # Penalty component: penalize bins that leave a large amount of remaining space.\n        # This discourages selecting very large bins for small items if other options exist.\n        # We use a threshold based on the item size. If remaining_after_fit is larger than\n        # a multiple of the item size, apply a penalty.\n        penalty_threshold_factor = 1.0  # Penalize if remaining space > item size\n        penalty_factor = 0.5            # Reduce priority by 50%\n        \n        penalty_mask = remaining_after_fit > (penalty_threshold_factor * item)\n        \n        # Apply the penalty to the best_fit_scores\n        combined_priorities = best_fit_scores.copy()\n        combined_priorities[penalty_mask] *= penalty_factor\n        \n        # Normalize the combined scores to be between 0 and 1\n        # This ensures scores are comparable across different sets of bins.\n        max_priority = np.max(combined_priorities)\n        if max_priority > 0:\n            final_priorities = combined_priorities / max_priority\n        else:\n            final_priorities = np.zeros_like(combined_priorities)\n            \n        # Assign the calculated priorities back to the original indices\n        original_indices = np.where(can_fit_mask)[0]\n        priorities[original_indices] = final_priorities\n\n    return priorities\n\n### Worse code\ndef priority_v1(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:\n    \"\"\"\n    Combines Best Fit with a penalty for excessively large remaining capacities,\n    prioritizing bins that fit the item tightly and are not overly empty.\n    \"\"\"\n    priorities = np.zeros_like(bins_remain_cap, dtype=float)\n    \n    can_fit_mask = bins_remain_cap >= item\n    \n    if not np.any(can_fit_mask):\n        return priorities\n\n### Analyze & experience\n- *   **1st vs 2nd:** Both heuristics are very similar. The 1st uses `penalty_threshold_factor = 1.0` and `penalty_factor = 0.5`, while the 2nd uses `penalty_threshold_ratio = 1.5` and `penalty_factor = 0.5`. The 2nd's penalty is slightly more nuanced by using a ratio, which might adapt better to different item sizes. The 1st normalizes scores based on `max_priority`, while the 2nd normalizes based on `np.max(combined_scores)`. The difference is subtle and likely not the primary reason for the ranking.\n\n*   **2nd vs 3rd:** The 2nd uses a multiplicative penalty (`combined_scores[penalty_mask] *= penalty_factor`), which moderates the best-fit score. The 3rd uses a subtractive penalty (`combined_scores = best_fit_scores - bins_that_can_fit_caps`). This subtractive approach can be very aggressive, potentially negating good best-fit scores if the bin capacity is large. The 2nd's approach seems more balanced.\n\n*   **3rd vs 4th:** The 3rd uses a direct subtraction of `bins_that_can_fit_caps` as a penalty. The 4th attempts a more complex penalty involving `valid_bins_remain_cap - item`, but its implementation `combined_priorities = best_fit_scores - penalty_strength * (valid_bins_remain_cap - item)` is still a linear subtraction, similar in spirit to the 3rd but potentially less aggressive. The 4th's comment about a \"logarithmic penalty\" is not reflected in the code.\n\n*   **4th vs 5th:** These are identical, suggesting a potential copy-paste error or that the ranking might be based on subtle nuances not immediately apparent from the code alone. However, given they are the same, their relative ranking is unclear without external context.\n\n*   **5th vs 6th:** Heuristic 5 (and its identical counterparts like 1st) attempts a more sophisticated penalty. Heuristic 6 is a pure \"Best Fit\" heuristic, which is generally a solid baseline but lacks refinement. The complex penalty in 5 aims to improve upon pure Best Fit, explaining why it's ranked higher.\n\n*   **6th vs 7th:** Heuristic 6 is pure Best Fit. Heuristic 7 attempts to combine Best Fit with a penalty (using `log(gaps)`), which is a more refined approach than pure Best Fit.\n\n*   **7th-16th:** Heuristics 7 through 16 show variations of combining Best Fit with penalties for excessive remaining capacity.\n    *   Heuristics 7, 9, 10, and 11 (and their duplicates like 12-16) seem to explore different penalty mechanisms (linear subtraction, `log(gaps)`, `exp(-ratio)`).\n    *   Heuristics 7, 9, 10 share similarities with 4th (linear subtraction of remaining capacity or gap).\n    *   Heuristics 11-16 use `log` or `exp` based penalties, which are generally smoother and less aggressive than direct subtraction. The use of `log` (Heuristics 11-12) or `exp` (Heuristics 13-16) suggests a more calibrated approach to penalizing large remaining capacities.\n    *   Heuristics 13-16 use `exp(-0.5 * capacity_ratio)`, which is a well-defined penalty that smoothly decreases as the remaining capacity becomes more proportionate to the item size. This is a sophisticated approach.\n\n*   **16th vs 17th:** Heuristic 16 (and its duplicates) has a well-defined penalty. Heuristic 17 seems to be an incomplete version or a placeholder, as it cuts off abruptly.\n\n*   **17th vs 18th:** Heuristic 17 is incomplete. Heuristic 18 uses a normalized \"Best Fit\" score and a sigmoid-like penalty subtracted from it. This is a reasonable combination strategy.\n\n*   **18th vs 19th/20th:** Heuristics 18, 19, and 20 are identical. They combine a normalized Best Fit score with a sigmoid penalty.\n\n*   **Overall Observation:** The heuristics generally try to combine \"Best Fit\" (minimizing `remaining_capacity - item`) with a penalty for \"too much remaining capacity.\" The methods for applying this penalty vary significantly, from simple subtraction (which can be harsh) to logarithmic or exponential functions, and sigmoid functions. Normalization techniques also differ. The top-ranked heuristics (1-5) seem to use a combination of Best Fit with a *multiplicative* penalty or a more sophisticated additive penalty that moderates the Best Fit score, while also employing normalization. The middle-ranked ones (7-16) explore various forms of penalties (log, exp). The lower-ranked ones are either simpler (pure Best Fit) or identical implementations with slight variations in penalty formulation.\n- \nHere's a refined approach to self-reflection for designing better heuristics:\n\n*   **Keywords:** Adaptive, contextual, multi-objective, calibration, generalization.\n*   **Advice:** Focus on learning *how* to balance competing objectives, rather than hardcoding fixed rules. Develop mechanisms to dynamically adjust penalty weights based on the problem instance's characteristics and the current state of the search.\n*   **Avoid:** Over-reliance on static, problem-specific heuristics like \"minimizing wasted space\" as the sole driver. Avoid brittle additive combinations of objectives without proper normalization or dynamic weighting.\n*   **Explanation:** True self-reflection involves understanding *why* certain strategies work and identifying their limitations. This allows for adaptive heuristic design that generalizes better, moving beyond simple greedy approaches to more sophisticated, context-aware decision-making.\n\nYour task is to write an improved function `priority_v2` by COMBINING elements of two above heuristics base Analyze & experience.\nOutput the code within a Python code block: ```python ... ```, has comment and docstring (<50 words) to description key idea of heuristics design.\n\nI'm going to tip $999K for a better heuristics! Let's think step by step."}