```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """
    Combines a tight-fit preference (Best Fit) with a preference for bins
    that are not excessively empty after packing. Uses adaptive scoring.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    
    suitable_bins_mask = bins_remain_cap >= item
    
    if np.any(suitable_bins_mask):
        suitable_bins_cap = bins_remain_cap[suitable_bins_mask]
        
        gaps = suitable_bins_cap - item
        
        # Best Fit component: Higher score for smaller gaps (tighter fits)
        # Add a small epsilon for numerical stability and to avoid division by zero.
        best_fit_scores = 1.0 / (gaps + 1e-9)
        
        # Adaptive capacity utilization component: Penalize bins that will be very empty.
        # This encourages using bins more fully, avoiding fragmentation.
        # The score increases as the remaining capacity decreases relative to the item size.
        # We normalize by the original bin capacity to make it relative.
        # A small epsilon is added to item size for normalization stability.
        capacity_utilization_scores = (suitable_bins_cap - item) / (suitable_bins_cap + 1e-9)
        
        # Combine scores with a weighting. Prioritize tighter fits more.
        # The combined score aims to balance "best fit" with "good utilization".
        # We invert capacity_utilization_scores to prioritize smaller remaining capacity (higher utilization)
        combined_scores = (0.7 * best_fit_scores) + (0.3 * (1.0 / (capacity_utilization_scores + 1e-9)))
        
        priorities[suitable_bins_mask] = combined_scores
            
    return priorities
```
