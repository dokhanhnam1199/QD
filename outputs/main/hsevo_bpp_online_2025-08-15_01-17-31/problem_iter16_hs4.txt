import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray, best_fit_weight: float = 0.5087088521970933, utilization_weight: float = 0.37311664801406663, epsilon: float = 4.474874857755763e-05) -> np.ndarray:
    """
    Combines a tight-fit preference (Best Fit) with a preference for bins
    that are not excessively empty after packing. Uses adaptive scoring.

    Args:
        item: The size of the item to be packed.
        bins_remain_cap: A numpy array representing the remaining capacity of each bin.
        best_fit_weight: The weight given to the best fit score.
        utilization_weight: The weight given to the capacity utilization score.
        epsilon: A small value for numerical stability.

    Returns:
        A numpy array representing the priority score for each bin.
    """
    priorities = np.full_like(bins_remain_cap, -np.inf, dtype=float)
    
    suitable_bins_mask = bins_remain_cap >= item
    
    if np.any(suitable_bins_mask):
        suitable_bins_cap = bins_remain_cap[suitable_bins_mask]
        
        gaps = suitable_bins_cap - item
        
        # Best Fit component: Higher score for smaller gaps (tighter fits)
        # Add a small epsilon for numerical stability and to avoid division by zero.
        best_fit_scores = 1.0 / (gaps + epsilon)
        
        # Adaptive capacity utilization component: Penalize bins that will be very empty.
        # This encourages using bins more fully, avoiding fragmentation.
        # The score increases as the remaining capacity decreases relative to the item size.
        # We normalize by the original bin capacity to make it relative.
        # A small epsilon is added to item size for normalization stability.
        capacity_utilization_scores = (suitable_bins_cap - item) / (suitable_bins_cap + epsilon)
        
        # Combine scores with a weighting. Prioritize tighter fits more.
        # The combined score aims to balance "best fit" with "good utilization".
        # We invert capacity_utilization_scores to prioritize smaller remaining capacity (higher utilization)
        # Add epsilon to the denominator to prevent division by zero.
        combined_scores = (best_fit_weight * best_fit_scores) + (utilization_weight * (1.0 / (capacity_utilization_scores + epsilon)))
        
        priorities[suitable_bins_mask] = combined_scores
            
    return priorities
