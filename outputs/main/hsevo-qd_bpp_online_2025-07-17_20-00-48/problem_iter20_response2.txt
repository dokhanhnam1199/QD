```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Hybrid heuristic: Combines utilization, fragmentation, and best-fit with adaptive weights."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)
    small_number = 1e-9

    # Hard constraint: item must fit
    priorities[bins_remain_cap < item] = -np.inf
    fit_mask = bins_remain_cap >= item

    if not np.any(fit_mask):
        return priorities

    # 1. Utilization: fill rate for possible bins
    utilization = item / (bins_remain_cap[fit_mask] + small_number)
    priorities[fit_mask] += utilization

    # 2. Fragmentation: penalize bins that create small fragments, adaptively weighted
    remaining_capacity = bins_remain_cap[fit_mask] - item
    fragment_ratio = remaining_capacity / (max_cap + small_number)
    fragment_penalty = np.where(fragment_ratio < 0.2, -1.0, 0.0) # if remaining capacity is below 20% of max_cap, penalize
    priorities[fit_mask] += fragment_penalty
    
    # 3. Best Fit: bonus for bins with the least remaining space after item is added
    diffs = bins_remain_cap[fit_mask] - item
    min_diff = np.min(diffs)
    best_fit_bonus = np.where(diffs == min_diff, 0.5, 0.0) #if best fit, add bonus
    priorities[fit_mask] += best_fit_bonus

    return priorities
```
