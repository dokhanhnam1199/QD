```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function enhances priority_v1 by incorporating a more nuanced approach to fragmentation,
    introduces a bin-level load balancing mechanism, and adjusts the empty bin preference based on overall
    bin utilization, aiming to improve packing density and bin utilization balance.  It also incorporates
    a more detailed analysis of near-full bins, and reduces over-reliance on diversity at the expense of fit.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)
    num_bins = len(bins_remain_cap)

    # 0. Hard constraint: Item must fit. Bins that can't fit get -inf priority.
    priorities[bins_remain_cap < item] = -np.inf
    fit_mask = bins_remain_cap >= item

    if not np.any(fit_mask):
        return priorities  # No bin can fit the item

    # 1. Utilization Term: Favor better utilization, scaled by item size and remaining capacity.
    utilization = item / max_cap
    remaining_capacity_after_fit = bins_remain_cap - item
    utilization_score = (1 - remaining_capacity_after_fit / max_cap) * utilization
    priorities[fit_mask] += utilization_score[fit_mask]

    # 2. Fragmentation Avoidance: Penalize bins that will result in tiny/small fragments, with adaptive penalties.
    tiny_fragment_threshold = 0.05 * max_cap
    small_fragment_threshold = 0.2 * max_cap
    medium_fragment_threshold = 0.4 * max_cap

    # Adaptive penalty based on item size & bin fill level
    tiny_fragment_penalty = -6.0 - 4.0 * utilization * (bins_remain_cap / max_cap)
    small_fragment_penalty = -2.0 - 2.0 * utilization * (bins_remain_cap / max_cap)
    medium_fragment_penalty = -0.5 - 0.5 * utilization * (bins_remain_cap / max_cap)
    
    tiny_fragment_mask = (remaining_capacity_after_fit > 0) & (remaining_capacity_after_fit <= tiny_fragment_threshold)
    small_fragment_mask = (remaining_capacity_after_fit > tiny_fragment_threshold) & (remaining_capacity_after_fit <= small_fragment_threshold)
    medium_fragment_mask = (remaining_capacity_after_fit > small_fragment_threshold) & (remaining_capacity_after_fit <= medium_fragment_threshold)

    priorities[tiny_fragment_mask] += tiny_fragment_penalty[tiny_fragment_mask]
    priorities[small_fragment_mask] += small_fragment_penalty[small_fragment_mask]
    priorities[medium_fragment_mask] += medium_fragment_penalty[medium_fragment_mask]
    
    # 3. "Pressure" Term: Bins with higher remaining capacity exert more "pressure", adaptively scaled.
    pressure = bins_remain_cap / max_cap * (1 - utilization)
    priorities[fit_mask] += 0.75 * pressure[fit_mask]  # Increase pressure influence

    # 4. Best Fit Bonus: Reward the bin that provides the absolute best fit (smallest waste).
    diffs = bins_remain_cap - item
    min_diff = np.min(diffs[diffs >= 0]) if np.any(diffs >= 0) else np.inf
    best_fit_bonus = np.where(diffs == min_diff, 1.5 + 0.75 * (1 - utilization), 0)  # Adaptive bonus, increased
    priorities += best_fit_bonus

    # 5. Empty Bin Preference (Adaptive): If item is a significant fraction, strongly prefer an empty bin, but adjust for overall bin utilization.
    empty_bin_mask = bins_remain_cap == max_cap
    empty_bin_threshold = 0.6 * max_cap
    
    # Adjust empty bin preference based on overall utilization (fewer empty bins = higher preference)
    overall_utilization = 1 - np.mean(bins_remain_cap) / max_cap
    empty_bin_bonus = 2.5 + 1.5 * utilization * (1 + overall_utilization)
    
    if item >= empty_bin_threshold and np.any(empty_bin_mask):
        priorities[empty_bin_mask] += empty_bin_bonus  # Stronger adaptive preference

    # 6. Bin Diversity Bonus: Encourage spreading items across different bins, but only if there's not a substantially better fit.
    if num_bins > 1:
        std_dev = np.std(bins_remain_cap[fit_mask])  # Standard deviation of remaining capacities
        diversity_bonus = std_dev / max_cap  # Normalize
        
        # Reduced diversity bonus, applied conditionally. If the best fit is significantly better, don't prioritize diversity.
        min_diff_available = np.min(diffs[fit_mask]) if np.any(fit_mask) else np.inf
        
        # Only add diversity if we don't have a clearly superior "best fit" bin.
        if np.all(diffs[fit_mask] <= (min_diff_available + 0.1 * max_cap)):
           priorities[fit_mask] += 0.15 * diversity_bonus # Reduced
           
    # 7. Near-Full Bin Consideration:  Give a slight bonus to bins that are nearly full *after* placing the item.
    near_full_threshold = 0.1 * max_cap  # Bin is considered near-full if remaining capacity is within 10%
    near_full_mask = (remaining_capacity_after_fit > 0) & (remaining_capacity_after_fit <= near_full_threshold)
    priorities[near_full_mask] += 0.75 # Smaller bonus
    
    # 8. Load Balancing Term: Encourage using bins with below-average remaining capacity
    average_remaining_capacity = np.mean(bins_remain_cap)
    load_balancing_bonus = (average_remaining_capacity - bins_remain_cap) / max_cap
    priorities[fit_mask] += 0.3 * load_balancing_bonus[fit_mask]
    
    return priorities
```
