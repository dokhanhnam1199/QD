```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    This function prioritizes bins based on a combination of factors.
    It considers the remaining capacity, a 'sweet spot' effect (bins with capacities
    slightly larger than the item are favored), and a bin utilization factor.
    A small amount of noise is added to break ties and encourage exploration.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap, dtype=float)

    # 1. Remaining Capacity: Prioritize bins with less remaining capacity.
    # But avoid very small remaining capacities to prevent excessive fragmentation
    capacity_priority = 1.0 / (bins_remain_cap + item*0.1)

    priorities += capacity_priority

    # 2. "Sweet Spot" / Best Fit: Prioritize bins where the item fits well without
    #   leaving too much wasted space.  A Gaussian-like curve centered around
    #   a small amount of extra space.
    diff = bins_remain_cap - item
    sweet_spot = np.exp(-(diff**2) / (2 * (item * 0.25)**2))
    priorities += 2* sweet_spot # Higher weight for the sweet spot

    # 3. Bin Utilization: Incentivize filling bins that are already somewhat full.
    #   Assume bin capacity is 1.0. The closer to 1.0 - bins_remain_cap, the better.
    utilization = 1.0 - bins_remain_cap
    priorities += 0.5 * utilization # Moderate weight

    # 4. Avoid placing into empty bins (unless necessary), encourage reusing existing bins
    empty_bin_penalty = np.where(bins_remain_cap == 1.0, -0.1, 0.0) # Assume bin capacity is 1.0
    priorities += empty_bin_penalty

    # 5. Small Noise: Add a small amount of noise to break ties and encourage exploration.
    noise = np.random.normal(0, 0.01, size=bins_remain_cap.shape)
    priorities += noise

    # Invalidate bins where item doesn't fit
    priorities[bins_remain_cap < item] = -np.inf

    return priorities
```
