```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Combines utilization, fragmentation, and adaptive best fit."""

    priorities = np.zeros_like(bins_remain_cap, dtype=float)
    max_cap = np.max(bins_remain_cap)
    num_bins = len(bins_remain_cap)

    # Hard constraint: Item must fit.
    priorities[bins_remain_cap < item] = -np.inf
    fit_mask = bins_remain_cap >= item
    if not np.any(fit_mask):
        return priorities

    # 1. Utilization
    utilization = item / max_cap
    remaining_capacity_after_fit = bins_remain_cap - item
    utilization_score = (1 - remaining_capacity_after_fit / max_cap) * utilization
    priorities[fit_mask] += utilization_score[fit_mask]

    # 2. Fragmentation (adaptive penalty)
    frag_threshold = item / 4.0
    frag_penalty = np.exp(-np.abs(bins_remain_cap - item - frag_threshold) / (frag_threshold + 1e-9))
    priorities[fit_mask] -= 0.2 * frag_penalty[fit_mask]

    # 3. Adaptive Best Fit (more focused)
    diffs = bins_remain_cap - item
    min_diff = np.min(diffs[diffs >= 0]) if np.any(diffs >= 0) else np.inf
    best_fit_bonus = np.where(diffs == min_diff, 0.1 + 0.1 * utilization, 0)  # Adjust bonus based on utilization.
    priorities += best_fit_bonus

    # 4. Empty Bin consideration with a slight change from v1 for better balance
    empty_bin_mask = bins_remain_cap == max_cap
    large_item_threshold = 0.75 * max_cap
    if item > large_item_threshold and np.any(empty_bin_mask):
        priorities[empty_bin_mask] += 0.2  # Slight decrease in the empty bin bonus to promote diversity if appropriate.

    return priorities
```
