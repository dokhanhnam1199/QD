```python
import numpy as np

def priority_v2(item: float, bins_remain_cap: np.ndarray) -> np.ndarray:
    """Returns priority with which we want to add item to each bin.

    Args:
        item: Size of item to be added to the bin.
        bins_remain_cap: Array of capacities for each bin.

    Return:
        Array of same size as bins_remain_cap with priority score of each bin.
    """
    priorities = np.zeros_like(bins_remain_cap)
    valid_bins = bins_remain_cap >= item
    if np.any(valid_bins):
        # 1. Minimize wasted space: Favour bins where the item fits best. Smallest gap
        #waste = bins_remain_cap[valid_bins] - item
        #priorities[valid_bins] = -waste # Larger the waste, smaller priority.
        # 2. Balancing bin use (first fit decreasing inspired)
        priorities[valid_bins] = bins_remain_cap[valid_bins] / np.sum(bins_remain_cap[valid_bins])
        #3. Hybrid : Encourage packing into partially full bins, with emphasis to fit in as tight as possible
        #waste = bins_remain_cap[valid_bins] - item
        #priorities[valid_bins] = (bins_remain_cap[valid_bins] / np.sum(bins_remain_cap[valid_bins])) - waste

        #Newtonian gravitation inspired: Inverse square relation of waste, proportional to total capacity
        #waste = bins_remain_cap[valid_bins] - item
        #priorities[valid_bins] = bins_remain_cap[valid_bins] / (1+waste**2)
        #Normalised ratio, favour near fits
        waste = bins_remain_cap[valid_bins] - item
        priorities[valid_bins] = (bins_remain_cap[valid_bins] - waste) / bins_remain_cap[valid_bins]
    else:
        priorities = np.full_like(bins_remain_cap, -np.inf)
    return priorities
```
